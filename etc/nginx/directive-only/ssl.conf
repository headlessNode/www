#/
# @license Apache-2.0
#
# Copyright (c) 2019 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# SSL rules.
#
# [1]: https://mozilla.github.io/server-side-tls/ssl-config-generator/

# Protect against the BEAST and POODLE attacks by not using SSLv3.
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

# Diffie-Hellman parameter for DHE ciphersuites.
#
# ## Notes
#
# * 2048 bits is recommended.
#
# [1]: https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04
# ssl_dhparam /path/to/dhparam.pem;

# Ciphers set to best allow protection from BEAST, while providing forwarding secrecy, as defined by [Mozilla (Intermediate Set)][1].
#
# [1]: https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
ssl_prefer_server_ciphers on;

# Optimize SSL by caching session parameters for 10 minutes, cutting down on the number of expensive SSL handshakes.
#
# ## Notes
#
# * The handshake is the most CPU-intensive operation, and, by default, the handshake is re-negotiated on every new/parallel connection.
# * By enabling a cache (of type "shared between all nginx workers"), we instruct the client to re-use the already negotiated state.
# * Further optimization can be achieved by raising `keepalive_timeout`, but that should not be done unless you serve primarily over HTTPS.
# * A 1MB cache can hold about 4000 sessions, so a setting of `10m` can hold 40000 sessions.
#
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 24h;

# Use a higher `keepalive` timeout to reduce the need for repeated handshakes.
#
# ## Usage
#
# Syntax: `keepalive_timeout timeout;`
# Default: `keepalive_timeout 75s;`
keepalive_timeout 300s;

# HTTP Strict Transport Security (HSTS).
#
# Instruct browsers to cache the certificate for a year and to connect exclusively via HTTPS.
# add_header Strict-Transport-Security "max-age=31536000" always;

# HTTP Strict Transport Security (HSTS).
#
# Instruct browsers to treat all subdomains the same as this site and to load exclusively over HTTPS.
# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
