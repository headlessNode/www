// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
* @example
* var bool = isInfinite( 5.0 );
* // returns false
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":56,"@stdlib/math/constants/float64-pinf":57}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
* @example
* var v = abs( 2.0 );
* // returns 2.0
* @example
* var v = abs( 0.0 );
* // returns 0.0
* @example
* var v = abs( -0.0 );
* // returns 0.0
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":37,"@stdlib/math/base/utils/float64-get-high-word":41,"@stdlib/math/base/utils/float64-to-words":47}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],13:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":12}],14:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the half-value coversed cosine.
*
* @param {number} x - input value
* @returns {number} half-value coversed cosine (in radians)
*
* @example
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* @example
* var v = hacovercos( Math.PI/2.0 );
* // returns 1.0
*
* @example
* var v = hacovercos( -Math.PI/6.0 );
* // returns 0.25
*
* @example
* var v = hacovercos( NaN );
* // returns NaN
*/
function hacovercos( x ) {
	return (1.0 + sin( x )) / 2.0;
} // end FUNCTION hacovercos()


// EXPORTS //

module.exports = hacovercos;

},{"@stdlib/math/base/special/sin":27}],15:[function(require,module,exports){
'use strict';

/**
* Compute the half-value coversed cosine.
*
* @module @stdlib/math/base/special/hacovercos
*
* @example
* var hacovercos = require( '@stdlib/math/base/special/hacovercos' );
*
* var v = hacovercos( 0.0 );
* // returns 0.5
*
* v = hacovercos( Math.PI/2.0 );
* // returns 1.0
*
* v = hacovercos( -Math.PI/6.0 );
* // returns 0.25
*
* v = hacovercos( NaN );
* // returns NaN
*/

// MODULES //

var hacovercos = require( './hacovercos.js' );


// EXPORTS //

module.exports = hacovercos;

},{"./hacovercos.js":14}],16:[function(require,module,exports){
module.exports={"expected":[0.9979874427327861,0.0013051182401168093,0.4279827980320745,0.7866594503670288,0.6425325112227449,0.48380165951405885,0.9697387006524982,0.8915469203331341,0.7732371561211694,0.6269314525750307,0.46762032437751966,0.03763404998379433,0.8218751755580973,0.23690454411611228,0.9870088465499482,0.4514729820872203,0.9576590478680289,0.8341017663820951,0.7455464098916907,0.008780390226755364,0.4353765844536131,0.9508952335244676,0.851970640268332,0.2724107480496475,0.007379329826305181,0.4276181473658086,0.9474551054240326,0.8574902399070488,0.279412336521737,0.004865225790192218,0.4034041452443569,0.9359551254338598,0.8686275689097653,0.29406485507489977,0.0028709243748337165,0.3875616689898256,0.9277945161180923,0.8793779051452957,0.3166936378563142,0.001398519238676288,0.3718372327966607,0.9191847993628857,0.8897299626906137,0.3240028674925971,1.9951570724652257e-5,0.36428256460618963,0.9052910343407916,0.8945885556040747,0.3313552832260072,1.1327522302095883e-5,0.3567611986989051,0.9006546601548904,0.8993503245554357,0.35467974750839293,0.00012539046919857189,0.3334034083956505,0.8959199735088859,0.9228159431975903,0.36219154257202957,0.001278804012110002,0.31044782364461043,0.880442500665098,0.9269445581745329,0.36973715301289795,0.001899788259885904,0.303223654622733,0.8753137059393408,0.9309684096880341,0.39360634659367705,0.002642996113335405,0.28088305071474434,0.8700928169054153,0.9429005263163652,0.4177324008803584,0.005765300273955387,0.2738700033186461,0.8410868148411648,0.9464807721433721,0.4254678102967937,0.00701187390719149,0.2522381701246823,0.835318243144952,0.956997118436477,0.4166743731249608,0.011705698397138531,0.24546568638794114,0.8294673912092225,0.9601187280614515,0.4910670093558098,0.013450404469974864,0.23875566016646305,0.8235356947133896,0.9746971719365747,0.49889891274398446,0.015314499863480158,0.23210973796346096,0.8175246091744688,0.9770988755940483,0.5067310863164541,0.017297527166766136,0.22552955055233248,0.7845689904773255,0.9793835089442553,0.5145616082179943,0.019398999785486037,0.19197755526522137,0.7780942299245497,0.9815505113848931,0.5223885569986668,0.03241972817066541,0.1858459482757029,0.7715512307348544,0.9835993511778786,0.5302100120853039,0.04862999904343995,0.17979142826594013,0.7649415984264349,0.9855295255798258,0.5712921884398984,0.05205462350274931,0.14919429857022432,0.7582669548678906,0.9937281958861828,0.5790354762212162,0.05558916459684393,0.14365652969780313,0.7515289378802525,0.9949042394722054,0.5867593703129667,0.059232755021621786,0.13820620022567132,0.7150114692549077,0.9959588436787903,0.5944619754294955,0.06298450071450495,0.11096076073842193,0.7079141673822162,0.9968917497276324,0.6021414015090276,0.06684348107382465,0.10608865119750865,0.6696808724872023,0.9977027287026654,0.6097957641774493,0.08893057137581967,0.1013131994459952,0.662292782960491,0.9983915816062334,0.64967478700932,0.09343969396909357,0.09663557728208211,0.6548648701037737,0.9987986868985239,0.6571293302285962,0.09804857814719653,0.0920569324985897,0.6473989565749625,0.9981948979456428,0.6645453171235726,0.10275609298420413,0.06959090384469646,0.6398968743565572,0.9974688621530297,0.7330625646163715,0.12916770658162324,0.05006085898212931,0.6643207863387712,0.9993905844917703,0.710079395040057,0.11246237020494743,0.061831430564702194,0.6247915757045397,0.9956507926191096,0.7468048308356655,0.1398554285833467,0.0434507306994672,0.517863129710161,0.9983724701858621,0.7241889695276229,0.12254899932801361,0.054502001327168925,0.5434548527935483,0.9933462626556301,0.7603048684823163,0.20180797733220313,0.03728868634396959,0.502202169172222,0.9968652242382063,0.7380785119602764,0.18162560203767014,0.04760980965896766,0.5278305978381682,0.9905575340619319,0.7735494278365402,0.21452633932007237,0.03158077370329021,0.48653904729775865,0.9583273597502471,0.7517343903356508,0.19385850540789057,0.04116161995666434,0.5121790283202354,0.9679691697572719,0.7865255099197647,0.22752488171251328,0.026332594853883673,0.4708891367828478,0.951842579434418,0.7651432019828344,0.20639187379336554,0.014734634885206654,0.4965155055976745,0.9622238644366325,0.7992203792525792,0.24079084698626535,0.0064468541371724974,0.4552677973571722,0.9449143346097895,0.8312564607569989,0.21921340621957952,0.011198534277167105,0.48085540275997807,0.9560249058121049,0.8610329162259975,0.2543112151537452,0.004182068196422639,0.43969036070909084,0.9375494250575859,0.8883466291562273,0.29108496053177946,0.00814217177209381,0.4652140895401655,0.9493783779011471,0.8716912335049984,0.26807271654161746,0.002403906725319871,0.3588724575148095,0.9297550791271163,0.8980213430896531,0.3054169782123314,5.9933475656248625e-5,0.3836473921146666,0.942290803991668,0.8819847514538925,0.34408856452171815,0.001114114914643527,0.3439163540869784,0.9215389466414536,0.9073054157966016,0.3838236819031375,6.277272445170956e-5,0.36847226582955617,0.9347691402396952,0.891903367417267,0.3590463548868781,0.00031395864086875003,0.32911344020018857,0.8715699715510354,0.9161897353497556,0.39911423712711025,0.0005562793583391845,0.290920296649126,0.8882324329218998,0.9014373466902565,0.3741424853329392,4.2232237619233e-6,0.31447824429251636,0.8609074936895849,0.9246655821627235,0.4145038074889067,0.01123671360056383,0.27679577439913133,0.878172219865301,0.9105773320727486,0.3893621396420909,0.006475899862886159,0.300025130193888,0.8498908002856075,0.9327246375479479,0.4299772887717669,0.014778345891020395,0.2628903177192561,0.8192226427685679,0.9519201640452004,0.4046903803630404,0.009230677655616304,0.28576828302858365,0.8385307037608433,0.96803297159329,0.44551949440388716,0.01879620284974004,0.1937152158047768,0.8070113144512925,0.9809531486168883,0.4201121634714937,0.012467124919912753,0.2143775475351936,0.8268383535727684,0.9733136390909458,0.4611151703634024,0.023286341118916976,0.18148585998545153,0.7944986674271138,0.9849988513172985,0.5691118281262165,0.01618206521875587,0.20166250113384415,0.8148252252718706,0.9781297691367966,0.5436354222583872,0.028244353816480716,0.16956911241306044,0.7816969823334019,0.988568548021025,0.5845897653056636,0.020371852494315335,0.18924026045380754,0.7466471773703752,0.9824766349015385,0.49240566980544465,0.06191877110059074,0.1579766688746968,0.7686188234862488,0.9993994981523405,0.5999846811842683,0.050139942686993955,0.08761033269076157,0.7898840991130005,0.9974870447153987,0.5747393493075792,0.10752607721316099,0.10264604461043098,0.8103870842560787,0.9942663800274854,0.549297479935707,0.09216176506027107,0.11872665392105852,0.7189286125058405,0.9897459732735275,0.6550372046575597,0.07786992016696515,0.05813893950749721,0.7416846859351915,0.9839377114906596,0.6304651074975314,0.06468812492354892,0.07071579009564655,0.6420097323039253,0.9996458157899053,0.6055499342246666,0.12769415227403658,0.08442150311192709,0.5357034522559405,0.9980242813938192,0.5803572027460983,0.1110746467148977,0.0992200374811773,0.5612226508727554,0.9950931230083304,0.6844988191838178,0.09547787436732752,0.044353069003247036,0.5865808560294655,0.9908600485213508,0.6604334753950718,0.08094484910953786,0.05550613165564988,0.6117113848050927,0.9787170201517106,0.6359462495095479,0.14932347890023567,0.06782805264463221,0.5044042956261272,0.9854862020616645,0.6111015340873117,0.13151400931188162,0.08128642976828221,0.5300290830852444,0.9909787306025005,0.7132363000710816,0.11467352479351928,0.03235555287274794,0.5555749049014052,0.9592030774042666,0.6897721629679994,0.09884630973718012,0.042041053282987906,0.580974584789578,0.968740155378543,0.6658089936160312,0.17232916482486932,0.052930820322765804,0.4730878527143037,0.9770446160383341,0.8663685844555666,0.1533996310368959,0.0649962178378074,0.49871765508970395,0.9840946216514141,0.8484442895281514,0.13538153103817374,0.022193479791433768,0.5243508295690757,0.9459148576508387,0.8296037119663648,0.21739399522523473,0.030373403642191266,0.5499199701614326,0.9569235470451802,0.8098963956845722,0.1966209157515304,0.03978827582705491,0.4418770364467772,0.9667306925371669,0.8869557623611815,0.28908626065829207,0.05041333863253339,0.46741126012955336,0.9753105048761868,0.8702146710452487,0.266124039347998,0.013906734561779988,0.49303118042816385,0.9308764806336365,0.8525000488543297,0.36652360266146955,0.020548976726036006,0.5186694262053304,0.9433135737877071,0.8338584788468238,0.34199770715865396,0.028452001918914505,0.4108943451791457,0.954584912353597,0.906024189710191,0.3178873006205663,0.0037443749325047904,0.43623277169420893,0.9646608567817299,0.8905320085909045,0.29425578470848324,0.0022100402449096723,0.4617388829890047,0.9141469700077824,0.8740128693368683,0.3969583393171691,0.0004572735790304705,0.35553307187567657,0.9279636529640511,0.8565102113181282,0.3720124436419686,1.8123864560848357e-5,0.38026138190633735,0.940654946079998,0.9234990254291011,0.347403109014921,0.01077720997611925,0.4053045612567721,0.8796091528356591,0.9093165592830956,0.3231950490979799,0.0061274059022865535,0.4305967554100957,0.8957919869057527,0.8940577384184074,0.4277975009607812,0.0027763083797262555,0.20803005953220094,0.9109340309978669,0.9509735388767135,0.4025295144781075,0.0007327295846119575,0.2292215786949096,0.9249954670048679,0.9393116830823132,0.37751784016909107,0.01820274044495701,0.2511251473090251,0.8584871594952098,0.9264945962269305,0.48451897713056924,0.011983156641723225,0.2736831668999703,0.8758835722260535,0.9125559826198679,0.45892004793230506,0.007046880880229589,0.18318647033472374,0.7962754609730662,0.963609223737371,0.43342914417119593,0.00340689378290171,0.2034325980514025,0.8165329897703291,0.9534001000648779,0.40811329771762295,0.027519261893371227,0.22445859092441411,0.7259935190687206,0.9419986978830304,0.5158433613044452,0.01975430941047851,0.2462091581864279,0.7485603693721006,0.9294349987617396,0.49020382832153914,0.013252229644239388,0.15958633264080652,0.7704735956761979,0.9992867578904845,0.4645900557320792,0.04918313108357136,0.17880760551866043,0.7916755741101991,0.9972617103300053,0.43906939850708876,0.03869020819801727,0.19887349838943758,0.6976216135132117,0.9939290440666046,0.5471055623655726,0.02941036345435505,0.12015500825699832,0.720906337213761,0.9892975228089013,0.5215260573982885,0.021367999492673262,0.1373222738919943,0.7436101570318399,0.999978658131627,0.49588994667457986,0.06360899110911417,0.15544325095889833,0.6441198355052772,0.9995580956435222,0.603396368295318,0.051671734861492014,0.17447028783274976,0.6684740690741028,0.9978238757885032,0.7060745640096646,0.04091342002915471,0.10054063346820463,0.6923852766887837,0.9947805589384435,0.6824502668771375,0.03136233709454739,0.11648167759541134,0.7157905805092675,0.998708207791156,0.6583461914380055,0.07974762854261291,0.13343123639581994,0.6138568032365693,0.9998937810279678,0.6338257227050418,0.06641289109622883,0.1513447386514315,0.6386652860359909,0.9997648141665434,0.7341963127716193,0.13002908587131135,0.08249408424055371,0.6631091292146657,0.991390402995109,0.7112423687842757,0.11327391865095576,0.09714634035496977,0.6871240542933791,0.9954803932198365,0.6877329336611107,0.19038817606082142,0.11285795609621618,0.583146897965548,0.9982674489622866,0.7829049867603284,0.17066897284589705,0.12958761558943344,0.6083122599581476,0.9997442412724534,0.7613988717579613,0.15181579128840783,0.015814797088140153,0.6331927998260296,0.9846409510967737,0.7392053721318989,0.23703467055520555,0.02284692754966311,0.6577230907354077,0.9903078831660209,0.7163828487705655,0.2155800663042184,0.031133798259089795,0.5521106520379239,0.994685482586285,0.8081652035548165,0.19487338375534147,0.004769753768376961,0.577534122482312,0.9977622378521411,0.7875754744966021,0.17496907400507772,0.00895284590661738,0.6027537061874513,0.9759893471029621,0.7662295258036533,0.2641798989481635,0.014427214709378633,0.36310314703782776,0.9832109790524748,0.7441834896115488,0.24188826744055641,0.021178464563878896,0.38793529206774374,0.9891619406476451,0.8322159123901275,0.22027537656776353,0.0014273223873167429,0.4130621268052835,0.9938265830087771,0.8126233812590087,0.19939806042688574,0.004018190326142257,0.4384175767501075,0.9654695474233189,0.7922087635448842,0.2922506902725165,0.007913311291423364,0.33325914990700245,0.9153768148829486,0.7710257423192259,0.26920952323487135,0.013102442521816138,0.357642717673007,0.929098235322714,0.8549627173921505,0.24677525179687737,0.019571938476335204,0.5151869083109804,0.8639416434181457,0.9223242535384308,0.34530748480205853,0.0010301982219049766,0.40746779354038354,0.9531228408902455,0.8170411202587575,0.45106328302251186,0.005788492225651198,0.30406958871826606,0.8971338064369849,0.8926984209033942,0.2974366013456895,0.03362462585194126,0.4582655346806137,0.9723843821309462,0.9500181655925903,0.40037053935395084,0.0006183947977594362,0.3522007026188568,0.9261514417213534,0.9863237354003731,0.25169499147914076,0.01761862408329301,0.253037548133665,0.9866803886511739,0.925341084575636,0.3507250647415518,0.05714426982552051,0.4018854295739201,0.9506895263260373,0.9718756384770555,0.45672572238204456,0.006683241838132792,0.29885047122532865,0.8936531390697785,0.8961929710618481,0.30264871455824266,0.03570492463008984,0.20520844786952508,0.9704901247313888,0.9524673545635726,0.4059495257166424,0.0864074608994937,0.34677780581517037,0.923149524244963,0.9876131951665701,0.2566468501053263,0.01914608227197545,0.24810901671786267,0.6270321336573152,0.9283028965597633,0.3561619538093752,0.05981282646184105,0.16120259985006657,0.7723231211408128,0.9737254210142022,0.46239375938982596,0.007641803346256859,0.2936573729837675,0.675880350680227,0.997026729917587,0.30788635570882583,0.03784528126844017,0.20063442233677586,0.5712246218771003,0.9548580156229577,0.411540677769939,0.08962966597225702,0.341374728728742,0.7228797767164175,0.9888395808088719,0.5193257212315672,0.020735740253204293,0.2432130681017982,0.6215239330784996,0.9312093063721898,0.3616174487287962,0.06253832253416547,0.15704240229850702,0.7675363707038763,0.9755139258496921,0.468066660869494,0.12476873839397379,0.2884909657352932,0.6705458284044046,0.9976138132511136,0.3131488472939791,0.04004541890590407,0.1960991205746765,0.5655914301155499,0.9571898395320841,0.4171432722827617,0.09290495358984885,0.11789831638781606,0.7177750073230612,0.9900027336908823,0.7763653855407938,0.02238739240029547,0.23835033559005114,0.6160000130407212,0.9999343223259545,0.6317025999103136,0.0653204054919913,0.1529265672667124,0.5088082495106907,0.977240921635447,0.7322483798159669,0.1285513392339454,0.28335191776906243,0.6651892455510233,0.9981365288529626,0.8219490240303735,0.04230505294855491,0.1916031292371324,0.5599497539199632,0.9957710125592703,0.6856900626562712,0.0962329000847002,0.11425532775548664,0.7126420681264074,0.9911025033555392,0.7810864757862345,0.16901516932580274,0.23352144819060566,0.6104610880784104,0.9998098213706115,0.8633571957540251,0.06815871546514513,0.14885562714939904,0.5031219859812417,0.9789061849797556,0.7372692476081913,0.13238198799198425,0.08058694254376275,0.6598112950089838,0.9985948091084159,0.8262790653241341,0.21377165464365028,0.18714702989313614,0.5543003230568578,0.9950009097421142,0.6909579304389242,0.0996130749776698,0.005078009381135784,0.4462537279408726,0.9921387475445751,0.7857712067137265,0.17329883935598,0.001363747212936639,0.604907874666927,0.9996206686238287,0.8672400303128306,0.07105288531033233,0.014957114138840655,0.49743531861421714,0.983772162383544,0.7422594239628819,0.1362601891630123,0.0002058589420635415,0.3900825236451181,0.9989885947376471,0.8305669015127117,0.21845278956743336,0.029934815255293068,0.5486438682958392,0.9941667771796214,0.9034381340184161,0.10304504103372775,0.0043016269189201095,0.44060357639973124,0.9662692087514893,0.790418972340286,0.1776247690905447,0.0018157092858110957,0.5993410911298812,0.9993668885530403,0.8710753613516311,0.2672582216361201,0.013607997903675895,0.4917489829958676,0.9823038681552132,0.934403910880411,0.1401854410909143,7.502106914270001e-5,0.3845421666734547,0.9993178348033893,0.8348119779525616,0.2231703434064739,0.009886681713868029,0.5429811213150734,0.882460899739506,0.9067712181902933,0.10652835431851293,0.0035893644208652153,0.43496110795129167,0.8043432470674243,0.7950291714644939,0.18199239895844604,0.002332112883210724,0.329978168990507,0.9134271180417026,0.8748626927596826,0.2723062160139129,0.012321797827684,0.48606371466953147,0.8433629313877332,0.9371915202792402,0.14415723603342895,8.849883612549458e-6,0.3790167444938685,0.7572649726781956,0.8390137455312314,0.22792370593205313,0.011043629367097685,0.5373128146066425,0.8787733080720912,0.9100516853729925,0.32439512701215206,0.002941314020107444,0.4293270524645516,0.7998117719974753,0.96194173633898,0.18640116399460482,0.0029128912068930868,0.3246414541657119,0.910202155976992,0.8786015346351268,0.2773836632163702,0.02609658789049779,0.48038024904048954,0.8392070578040851,0.9399225777381519,0.3787615175377917,7.353944900090337e-6,0.37350697183509657,0.7523722514178035,0.8431716607383908,0.232712262283499,0.01226382488770733,0.2725404486640359,0.8750367210230945,0.9132791112289536,0.5935030505528016,0.047295761497116895,0.42370213872026863,0.7952415154403976,0.9640879640578769,0.4347002913181939,0.003557969131565586,0.3193274224568694,0.701659628981056,0.8822914033483611,0.5427190284603586,0.027940375475905277,0.2233894437099826,0.8350073068434459,0.9425967299872628,0.6487429458297527,7.053344650914672e-5,0.3680135614015667,0.7474468851043008,0.9822344351899353,0.49148595930567385,0.013547110440010501,0.26749107739590317,0.6483316139945852,0.9164530782816596,0.5990832611127126,0.04973922843688777,0.4180870943166905,0.7906330685715961,0.9661741607069967,0.7020537430799312,0.004267263214603301,0.314036761248771,0.6964430316677546,0.9941266433572714,0.548382048792551,0.02984522528755751,0.21867021990176216,0.8307642217552912,0.9452136311175372,0.6541624491370175,0.07737766700719173,0.36253722378120756,0.7424895108475281,0.983705619642754,0.7527440363801365,0.014893320027449308,0.07118811216547372,0.6428914415123375,0.9195731759696386,0.6046506549770352,0.052240937860603354,0.02595941177585598,0.7859870275064997,0.9682000564309967,0.7072422517466147,0.1104972388446801,0.09977069499219604,0.6912010239015766,0.9949637353205414,0.5540388107720776,0.031810890927829794,0.044732585886279985,0.5874866434866146,0.9477729426255302,0.6595620111024292,0.0804437905196827,0.010953772047692822,0.7375007698976428,0.9851142354274469,0.7576342588666303,0.016302279514067042,0.06829136730591223,0.6374327856244418,0.9998024973960158,0.6102045119878781,0.05480056616518708,0.02418157807229049,0.5309472013244758,0.9701653891746267,0.7124039530512487,0.11408801084372044,0.09638811459795599,0.6859342837508158,0.9957368023470896,0.8046849193591727,0.03383711813240087,0.04241101620856913,0.5818821346481166,0.9502743334571757,0.6649409332776199,0.0835641847955576,0.00980162175739796,0.732481307562171,0.9773193184286049,0.7624911556447049,0.1527372554573898,0.06545046515949937,0.6319563524232298,0.9341904493488132,0.6157441137383796,0.05741778225559396,0.022465292805875114,0.5252695263231825,0.9900550071990648,0.7175381793134035,0.1177287016326089,0.0017792155025754819,0.6806434924829691,0.9572962784016339,0.809174020858834,0.035923644803142474,0.04014863693945031,0.5762670341276115,0.9031835139192275,0.6702985198840359,0.08673844620313231,0.008712879991624178,0.46832918888749575,0.9755951734535819,0.767314098461245,0.15685102539797258,0.06266577320483446,0.6264628503005775,0.9313424068761074,0.851847102682961,0.060092247587638536,0.02081077798288583,0.5195885826383305,0.866947553901013,0.7226442664066228,0.12141884027785937,0.0013321375009643366,0.6753293344766118,0.9549671835946523,0.8136231298384198,0.4466820315601544,0.03794574072397844,0.5706420682539795,0.8997943084692572,0.8899569593556362,0.29341778651439787,0.007687687582148994,0.46265608013571186,0.9738095089192204,0.7721024634551739,0.3960584288721817,0.0004187887021227521,0.6209529898562738,0.9284385690625815,0.8558646758128649,0.5035527560812262,0.019218247619419704,0.5139051051157962,0.8630611412359116,0.7277215538443302,0.3465274225948004,0.0009495635752346798,0.4062079036743739,0.9525792375162311,0.8180316707933009,0.4523396321724064,0.005984679127375048,0.5650079646322113,0.8963533885127992,0.8934908913588376,0.29860966485097185,0.006726177140463807,0.45698780192389615,0.8216193101580456,0.7768556312381529,0.4016274969079843,0.0006837949919444863,0.35097614891921713,0.9254793115277389,0.8598362168565277,0.5092389590482976,0.01768790771371148,0.5082198289292152,0.859127765601738,0.926013789246021,0.3519494180140116,0.0006315432123885079,0.40062833860784963,0.7760062884859851,0.822399073466435,0.45800339778588284,0.006893828675735292,0.29767713534689955,0.8928611991424263,0.8969739242200978,0.5660184627112622,0.005828473040620286,0.20417365750105615,0.8172444921371202,0.9530115689124514,0.4072092897008473,0.0010133892225556163,0.12448416978073501,0.9224650170597777,0.8637612120840621,0.5149239669303028,0.01949912458043046,0.24700211605408218,0.8551479357915774,0.9289631412830273,0.3573905641880495,0.00037811754924493846,0.16026063220101855,0.771246766586239,0.8267247729221315,0.46367259577673847,0.007866762879744582,0.08938371345862645,0.889318192082553,0.9004056073994222,0.5716509820544213,0.004994691403142237,0.19960831266011048,0.8128286376581981,0.9553889889720948,0.41280308523033793,0.0014075287600251452,0.12075380270665048,0.7217311491496555,0.8676391537864117,0.5206070443556501,0.02110278044210756,0.24211360249337138,0.8511221666074926,0.9318570057438402,0.6274487311395591,0.0001893193671186899,0.15611039157553935,0.7664521581623149,0.9875177217915372,0.46934649281843493,0.008903355887655673,0.08616554657237296,0.8857248256310029,0.9977373086599711,0.5772742331436361,0.040549779480751225,0.19508182431995713,0.808372317924346,0.9963233944570649,0.681593554135433,0.0018661626213069549,0.11707249218368465,0.7166199696936609,0.9902562710443569,0.5262874562024573,0.022768382991976976,0.05694445069611204,0.8470509787939315,0.9999118941147933,0.6329392260301885,0.06595554522836133,0.15200463402800612,0.7616230834101563,0.9862234907182237,0.4750243549765987,0.010003473613278135,0.08300091032443357,0.6639783629109857,0.9982454997470109,0.5828874885957281,0.04282278980468057,0.033469493442727705,0.8038761093729242,0.995602951607215,0.6868800847254695,0.002389231480834697,0.11344071439959941,0.7114807698417007,0.9698175885921474,0.5319644676936428,0.024495716779713295,0.054337531970711006,0.6092100647779385,0.9997728125245198,0.6384125248619412,0.2583750751969509,0.14794389064958446,0.7567601669840223,0.9848663652831532,0.7383972318243723,0.13325238473275236,0.07989021406931446,0.6585956899959865,0.9473184618224397,0.588490022320482,0.21482403541948553,0.031454102258491934,0.7993405936010223,0.9948184011362375,0.6921424418564315,0.3097123431877819,0.10985893913495887,0.706314214363579,0.9678413815947773,0.7868225238646371,0.17427066281124587,0.05178826092589478,0.6036537285219087,0.9995690839300038,0.6438679196483801,0.2633692005807162,0.014647404197265568,0.751864037915687,0.9834465210342778,0.7433803979489995,0.36351751674030447,0.07683386018423388,0.6531925022870908,0.9447488033657496,0.5940811096145677,0.21951343582714627,0.02949931879016232,0.5473674464681638,0.9939698445279196,0.6973799448277783,0.31498331133588353,0.004135409589900274,0.7011209715676259,0.9658046580126254,0.7914618706008271,0.1786060449523732,0.04929696731696809,0.3341266073280286,0.9158881261240511,0.6493047047190067,0.2683939348169654,0.013312460559342765,0.23666837823054698,0.9819641416324025,0.7483320821417878,0.368996966667978,0.07383224401707306,0.38329485843340483,0.9421216154135417,0.8357632747840695,0.22423911795251883,0.027605395894420903,0.2815725731587154,0.9930573915454199,0.7025919161539238,0.32027821190759304,0.0034376191220079066,0.43368987201109754,0.9637076813015555,0.7960635159328728,0.4247096450474665,0.04686397339969289,0.32877279863512365,0.9127045466989341,0.6547221768105405,0.27344862794234026,0.012040471309170797,0.23185139883201178,0.9804194188274289,0.7532516438886059,0.3744933622026141,2.8646667989962182e-6,0.37777290286626813,0.9394372377998896,0.8399552009466331,0.229000470515468,0.025772578555465386,0.2764714428469731,0.8779349718722838,0.7077776816518712,0.3255963599927849,0.0028040603800895125,0.1856079352263736,0.9615507227113413,0.9624309370480626,0.43033625091555594,0.04448959388860374,0.3234411386572661,0.9094675827920831,0.9924839546576678,0.27853262611821716,0.010831600982099288,0.22706910520133528,0.8382638294155176,0.9405305787395822,0.380005992370153,1.595327267600588e-5,0.37226675771432194,0.9366960177565085,0.9810521266819732,0.2337968776217882,0.012547701288954882,0.5303598024221421,0.874187402961838,0.999110329163944,0.33093706767420306,0.047841658999529524,0.4224350626719297,0.7942056279139418,0.8051513263957856,0.4359718679834741,0.10424972982454178,0.318132317059513,0.7004855440848026,0.8831166500658254,0.5439965439608834,0.009686005948869536,0.22232211594150847,0.5974035308787778,0.9431918508474637,0.649966744942257,9.371620652759427e-5,0.13947843942728783,0.9338983098678402,0.9825716402617364,0.7489340566059004,0.013845190950048603,0.5246817550735743,0.8703914318693997,0.9994171285819253,0.8362770735200917,0.05029828744557835,0.4168223442038319,0.7895886513519323,0.8096363159930765,0.9079172015914387,0.10775078164241131,0.3128470205527132,0.6952631576898328,0.8867458519857206,0.549658216979603,0.18351985570621437,0.21761104508880375,0.9754132283012024,0.9457957948559689,0.6553818126184038,0.2740673756354794,0.1355615837187626,0.9310444760251867,0.9840287318567629,0.75384965541564,0.015205566088734412,0.0705300411768528,0.8665475496143943,0.7231710527136734,0.84046366327831,0.05281308605973317,0.025553148671433934,0.7849342156919019,0.8140812532711297,0.9111792841248119,0.11130257198836357,0.30758593280467955,0.6900155134619693,0.8903250272532899,0.5553134665697501,0.18794278238260792,0.2129365020333474,0.5862237933510512,0.9483420739376931,0.6607767812246376,0.2791549044137614,0.13169186913366998,0.9281348853798981,0.9854232129881992,0.7587324180659498,0.016628650736702055,0.06764585634320486,0.8626562534136897,0.9998368931022441,0.8446062131141221,0.05538572954579418,0.023789174295741178,0.7802429229980572,0.818485563264937,0.9143881794734102,0.11490464142843221,0.3023497343517548,0.6847432901985979,0.8938537128922511,0.9648197588082592,0.19240607452860214,0.20829909144029374,0.5806168327390967,0.9508303587243505,0.6661509529067541,0.2842710001198024,0.1278697962303615,0.9251699142956222,0.8335376759923565,0.7635817129578919,0.38620966778873694,0.0648175977213451,0.8587180466172794,0.7457277425539098,0.8487041871771771,0.05801588512516642,0.022086799115719258,0.7755153801021647,0.9897989078243916,0.9175434725576894,0.11855652402491007,0.0016727698082696918,0.6794471698764712,0.9567762241281962,0.9668850304600991,0.19690915480493598,0.20369941317160944,0.5749994441154588,0.9024237893477045,0.6715036325006891,0.28941500097238393,0.1240958594046046,0.4670495232095554,0.829279660070485,0.7683969128216757,0.39175438350639463,0.06204563115439782,0.8547334386431732,0.7407593951377156,0.852757055383125,0.06070321257990563,0.020446243338335557,0.7707521985250556,0.6409965617475037,0.9206447552317072,0.12225774739661954,0.0012402326746309145,0.6741278375634927,0.9544338318229485,0.9688899092338381,0.20145144072564297,0.1991380622084803,0.5693723541049898,0.8990228837925573,0.6768341276224401,0.29458624158067925,0.1203705468256312,0.4613774396800103,0.8249790509081492,0.7731773947977971,0.39731310109580953,0.059330315203953155,0.8507029449115023,0.7357599048236907,0.8567642934821833,0.06344736429672626,0.01886771917404584,0.7659539943975233,0.6355316478881925,0.9236916263359187,0.12600783278001637,0.0008722115050186496,0.6687859813301014,0.9520326572367972,0.970834135792827,0.20603234473339732,0.19461562857434822,0.5637362905874436,0.8955703635168513,0.995990441966895,0.2997840530303233,0.11669434037299137,0.4557103520861349,0.8206364048011129,0.777922540517608,0.4028851015213907,0.056672001103686476,0.8466270867778485,0.7307299183098219,0.8607253831269515,0.5105210546368811,0.017351430809344037,0.761121388380626,0.6300492026330222,0.9266836917490664,0.12980629509111924,0.0005687539039955225,0.6634222921602685,0.9495730109683579,0.9727174586459493,0.2106512742755164,0.007107658990528343,0.5580919826033224,0.8920666751136929,0.9966770780861348,0.3050077629699388,0.1130677155742213,0.0393763492458688,0.8162522834827366,0.7826317361833028,0.40846966402937535,0.05407103271392516,0.008349403288730461,0.7256700862388639,0.8646398119394594,0.5162056914110424,0.015897574380350166,0.24589687952049016,0.6245499351515449,0.929620564439162,0.13365264298825652,0.00032989912464670423,0.1593208992368198,0.5176137652479704,0.9745396341801524,0.21530763188060864,0.00809495949080724,0.08865336609872843,0.8885122717949283,0.9972994676429977,0.3102566956981067,0.10949114154333206,0.0371941911172447,0.8118272540513143,0.9968372652404183,0.41406606624106035,0.05152774647716929,0.007346326406291015,0.7205810631141774,0.8685070735774458,0.521888231933917,0.014506337947439663,0.24101583317003833,0.6190345567893146,0.932501864513549,0.6286882985897301,0.00015567806350269553,0.15518064283622934,0.5119295793080526,0.9763004266919595,0.22000081523585857,0.009145889277121289,0.08544723422581868,0.8849076133325193,0.9978575301296622,0.31553017225077,0.041057162155902716,0.035071898208057395,0.8073618888967187,0.9961665382590417,0.4196735842462441,0.04904247137457196,0.006406975647659741,0.7154635072150668,0.8723266677998549,0.5275679411530726,0.013177901470917075,0.0007910118339100602,0.6135037809758728,0.9353272192680437,0.634174977723069,4.611325654263476e-5,0.15108498977917179,0.5062438502438494,0.9779996084179587,0.22473021726493736,0.010260312408777672,0.08229472590692416,0.39869235492401695,0.9983511933591924,0.3208275104890598,0.04334353381005629,0.0330097450428013,0.8028567656263603,0.9954316307550357,0.42529149269686606,0.046615528883384494,0.005531472520471592,0.7103180805116308,0.9693772533223248,0.5332440843823143,0.011912436787737901,0.0011430414851560378,0.6079583231324636,0.9380962632351455,0.6396443009496104,1.2188762792963992e-6,0.14703446984976892,0.5005573135202396,0.9796369595642648,0.7395236479482667,0.3592857737862275,0.07919624892776977,0.3931302794390641,0.9987803934748758,0.32614802518753166,0.465643838304215,0.031007998366727574,0.7983124669904723,0.9946326377907311,0.43091906490083254,0.573606207815488,0.004719930273492767,0.7051454485791341,0.9673873772783048,0.538915927396718,0.17524462879835767,0.0015595996723794525,0.6023989005794931,0.9408086382313106,0.6450955607971731,0.26449962457964044,0.02167458225035429,0.4948707047065749,0.9812122683349498,0.7444997710653343,0.3647516121539217,0.07615220408497636,0.3875820278499002,0.9991450749584828,0.3314910281228015,0.47131919650168913,0.029066917111339963,0.28554285225161413,0.9937696627180918,0.43655557291601677,0.5792260677194861,0.003972453881971594,0.6999462805119131,0.9653370433762251,0.544582736527604,0.17958943482944417,0.0020406325126193225,0.5968262324437412,0.9151749145257119,0.6505280521301241,0.269531171420216,0.023361661877499995,0.489184759381532,0.9827253309594399,0.7494442674565351,0.3702349452770003,0.07316298513421632,0.38204831783830995,0.9994451906374486,0.8367123630840554,0.47699826464091877,0.027186752360901234,0.280419781233189,0.992842817165345,0.44220028764441954,0.5848356795111269,0.0032891400340595567,0.6947212488368275,0.9632265168324821,0.5502437787574398,0.688711583620802,0.0025860777829391224,0.5912410395653408,0.9119792607322945,0.6559410722405898,0.2745925300451975,0.025110396000237623,0.4835002130379635,0.9841759517188737,0.7543564975374997,0.3757350638710629,0.0698102927848483,0.37652986520508447,0.9996807016909748,0.8408944202575117,0.4826803081186343,0.025367747319954503,0.2753251135271859,0.9918522210225427,0.44785247892648083,0.5904343175715124,0.002670077118304748,0.1846118435644406,0.9610560706495579,0.5558983218146574,0.6939653806857098,0.0031958649284749563,0.5856440444045352,0.9087303162749016,0.992703843921801,0.27968304575376035,0.026920558414941398,0.47781780098775994,0.9855639429714187,0.999483154465779,0.38125125648046165,0.07273630261528041,0.3710273837774305,0.9998515776550511,0.9829384590900352,0.48836459194669807,0.023610137281864507,0.27025950814305194,0.9907980024260529,0.9147172084990652,0.5960212577012278,0.002115345212218178,0.18021965915814542,0.9588259855807075,0.9650362837527835,0.6991940877887912,0.0038699150715624797,0.5800359709482258,0.905428501413541,0.9936398938538558,0.28480206007353004,0.028791914972065014,0.47213825826673494,0.8330990138695897,0.9991923565768496,0.3867828095703302,0.07571758019410801,0.36554158531663505,0.999957796426396,0.9814343925601645,0.49405038084717656,0.02191414959838134,0.26522362033094177,0.989680297741985,0.9411952326880538,0.6015957772140181,0.0016250160719158413,0.17586883922893465,0.9565365500936407,0.9670953177172513,0.7043970285822303,0.004608141021939738,0.574417544616322,0.9020742432471545,0.9945120900917668,0.7976536987928968,0.030724223606429513,0.4664623195395466,0.8288365644070032,0.99883698676727,0.3923290076188811,0.07875373988477885,0.3600731794259968,0.999999344265316,0.9798680511517122,0.4997369393474511,0.14645389005086473,0.26021810149695956,0.9884992515485507,0.938491061999857,0.6071571550302696,0.0011991531228366936,0.17155994656747509,0.95418806033321,0.9690939316023763,0.7095735300511548,0.005410447288025366,0.09823872078573581,0.8986679756583711,0.9953203198145235,0.8022036005453974,0.032717234368535186,0.46079071900466617,0.8245315790196093,0.9984170910051142,0.397889133209961,0.08184438895158697,0.354622873459037,0.7352407644540089,0.9782396374752989,0.5054235318753533,0.15049785560394052,0.2552435991188976,0.9872550166173621,0.9357301712724042,0.6127046717702834,0.0008378114515384394,0.16729353854102474,0.9517808200831018,0.872873726391062,0.7147229226006926,0.006276730089270988,0.09487963250053283,0.42048341044378035,0.9960644784753616,0.8067144114210896,0.034770689456893045,0.45512419029940776,0.31629291985218244,0.9979327236050676,0.8843834777860169,0.08498912761047378,0.3491913724280016,0.22068086676453852,0.9765493621707658,0.5111094228543128,0.15458703023211068,0.2503007566624832,0.6294808618702475,0.9329129176345952,0.6182376098473298,0.2403144340783317,0.16307016702133603,0.5227077899534274,0.8690610496885343,0.719844540142586,0.007206877369585252,0.09157294766237639,0.41487434868768686,0.9967444698152874,0.8111855479340323,0.03688432325137242,0.03914775285785038,0.3110159587872965,0.9973839472214014,0.887995347821364,0.08818754908074145,0.3437793789126655,0.21598242084951624,0.9747974438799278,0.516793876798507,0.15872088498925624,0.24539021349814488,0.13421144770132548,0.9300396655060288,0.6237552535604696,0.24519068647747927,0.15889037831326913,0.5170256125162721,0.8652006339120775,0.7249377201813518,0.008200768811828685,0.08831909400015348,0.40927629817150807,0.783308090761041,0.8156164317302739,0.039057862347559424,0.03697177710761412,0.3057634433341122,0.9967708328398683,0.8915570295786214,0.09143923963767114,0.33838759296945253,0.21132071339882041,0.9729841092182916,0.9492133702019814,0.16289888514975925,0.24051260481830772,0.13035823265589308,0.9271107865498643,0.6292568891871319,0.25009989917050346,0.15475471308412653,0.5113412327687531,0.861292978417216,0.7300018038999768,0.3489703186135792,0.08511849240889108,0.4036899830186584,0.7786041317079615,0.8200064896626635,0.04129102559212261,0.03485569534668581,0.3005360529201221,0.9960934597685198,0.895068062344341,0.09474377866603939,0.19396646014120672,0.2066963474172841,0.9711095927457425,0.9516814256271091,0.1671204902776709,0.23566856155522947,0.12655283180183496,0.9241266596247466,0.6347418050754365,0.25504143713707916,0.018645130226079498,0.06384791022880837,0.857338588670064,0.735036136245138,0.3544010379715391,0.058943294986893824,0.3981161258345504,0.7738641344350485,0.8243551538649894,0.04358352411918115,0.11983716774442998,0.2953344637228247,0.6776012435217345,0.8985279919566629,0.09810073871452585,0.19848323108278898,0.20210992107951725,0.9691741369362035,0.9540910548027353,0.1713851542966186,0.001183157747123631,0.1227957373783426,0.9210876707357984,0.9884497539868549,0.2600146611755176,0.020214688546463078,0.06109559005791754,0.8533379761819406,0.7400400660119351,0.359850590960461,0.061650409245873616,0.3925554476131238,0.7690887120741416,0.8286618618254338,0.4662309769835331,0.1235554257728721,0.29015934858225956,0.6722740057542618,0.9019363708640622,0.10150968555100531,0.203039004057597,0.1975620276525314,0.9671779921462698,0.9564419460366191,0.17569232556044234,0.29638955656429555,0.11908743537603617,0.9179942129846907,0.9896333796686995,0.265018927985448,0.021846308432197425,0.058400043393989354,0.8492916584432059,0.7450129459281263,0.365318272665499,0.06441422524440987,0.018333727237900388,0.7642784823394138,0.8329260564593362,0.4719067531803472,0.12732237795469203,0.2850113769139732,0.6669244838646804,0.9052927581832412,0.10497017821871685,0.20763318976371697,0.19305325541899881,0.5617757327241231,0.9587337952344372,0.18004144692455148,0.3015964444063238,0.11542840547410049,0.9148466865187932,0.9907536699101611,0.27005359025103093,0.02353977882870928,0.0557616189134868,0.8452001588563205,0.7499541327378538,0.3708033758268071,0.06723438547521104,0.01683911279074196,0.7594340674474688,0.8371471861812524,0.47758616331682513,0.1311375370241411,0.2798912146224285,0.6615533698285354,0.9085967197561589,0.10848176909330287,0.21226519393044158,0.18858418760115642,0.5561287305960718,0.9609663059391169,0.689256433352017,0.3068289963004549,0.11181912097823693,0.9116454984794139,0.991810479798579,0.7842597014102974,0.025294880680889698,0.05318065790395965,0.8410640066681435,0.9996889331134273,0.8659890984698186,0.07011052514270244,0.015406996549052976,0.7545560940368556,0.8413247049763051,0.9306281656094173,0.13500040947977548,0.27479952401486807,0.656161358414376,0.9118478282061904,0.9751584987625508,0.21693441739514024,0.18415540228536464,0.5504744680605033,0.9631391893691852,0.6945076653743256,0.3120865354015383,0.10826004875944029,0.9083910629491354,0.9928036726326529,0.7889194914137223,0.4160135134237414,0.05065749421989768,0.8368837369014719,0.9994560569394738,0.8698398515892422,0.07304227221021337,0.014037563761055194,0.7496451930870112,0.8454580724708114,0.9334900659936947,0.13891049564829205,0.00011027195931107014,0.6507491470938851,0.9150456629934092,0.9768979063060892,0.22164025618076266,0.17976747234732993,0.5448136765120131,0.9652521644561229,0.6997337372887741,0.3173683816322587,0.10475164919360747,0.43678557388258255,0.9937331199401254,0.7935419088768267,0.42162472452182537,0.04819245423954571,0.8326598902858342,0.9991585747344942,0.8736427648945431,0.07602924744810102,0.012730991566690997,0.7447019998366411,0.9812751802755999,0.936295893231468,0.14286728974916257,2.3179613750867745e-5,0.6453174359516602,0.9181898104689858,0.9785756257781688,0.22638210157396493,0.1754209653780021,0.5391470881897429,0.967304957880722,0.9985076562474626,0.32267385177110613,0.10129437610198672,0.4311487169829628,0.9945987014944007,0.798126355877047,0.42724607367992257,0.04578585682268582,0.8283930131875458,0.9987965249786399,0.8773973464683013,0.5352156334028388,0.011487448974710213,0.7397271537015498,0.606027912932943,0.9390452843811753,0.1468702799600578,7.606614178534699e-7,0.639866927594655,0.9212798639286934,0.9801914401611065,0.2311593402038481,0.011862177512277694,0.5334754360826632,0.8762508472374129,0.9989144413405661,0.32800225954075213,0.09788867669247453,0.4255207661884247,0.7967242113563853,0.8026722394034043,0.4328768337608743,0.043438013269391784,0.3210439995523562,0.7033416582130363,0.8811031106449405,0.5408858102380382,0.010307096840807939,0.7347212981919308,0.6004638057838496,0.9417378838014191,0.15091894848305298,4.3018002265915456e-5,0.6343983270612947,0.4928946672124376,0.9817451404448148,0.23597135412129966,0.013125071067197958,0.5277994538347591,0.872481388626672,0.9992566904621285,0.333352915696822,0.09453499150176808,0.41990244949006705,0.792128054147199,0.9934548095865549,0.4385162764101929,0.04114922727976161,0.3157457029009083,0.6981334258556584,0.8847595780735509,0.5465506983798918,0.009190087846817907,0.7296850808291261,0.5948867033618723,0.9443733431969706,0.6524113758401467,0.00014994617019048473,0.6289123417302784,0.487209124669778,0.9832365256538377,0.24081752087892683,0.01445094324922147,0.5221198756501314,0.8686637485116407,0.9995343593412737,0.3387251281170502,0.051425275700459405,0.41429449363279125,0.7874941093611727,0.9925057960317144,0.44416367215027625,0.0389197949146331,0.3104712400555975,0.6928995643882111,0.8883662757798939,0.5522095650593525,0.008136566480962226,0.21549827478017597,0.5892973270807312,0.9469513216638221,0.6578174654282942,0.0003215313337353032,0.623409681229077,0.48152523666244135,0.9846654028733478,0.24569721361157187,0.015839622553091237,0.5164374361980254,0.37461584899117717,0.9997474120607592,0.34411820189080855,0.05396620298515015,0.4086976240212953,0.7828229764119615,0.99149307548144,0.44981829047476773,0.0367500045572875,0.3052212932828724,0.6876407508252418,0.9602878399588075,0.5578616782862658,0.007146669019161778,0.0034228228728994115,0.5836963999418044,0.9494714857332842,0.663203140888059,0.0005577512978819921,0.12996219225567335,0.4758437384171604,0.9860315872741,0.760923623702733,0.01729092934927451,0.06636337026084033,0.3691190844801979,0.999895821061623,0.34953143940899467,0.0565648259828635,0.023013766339961994,0.7781152595236127,0.9904167789339533,0.4554793999430496,0.11654549627101257,0.001937645794937437,0.6823576654089211,0.9580370969093879,0.5635063069440549,0.006220523507408149,0.0041191850808919295,0.5780846464406055,0.9519335094151202,0.6685677055673312,0.0008585755069207557,0.02945651442551217,0.4701653648515457,0.9873349021363398,0.7657576191818058,0.01880467590719792,0.06356045441464081,0.36363924977990225,0.9999795671467476,0.3549641404542697,0.05922080855448236,0.02133924483401478,0.7733715676524083,0.9892770456112083,0.4611462682748563,0.12021969034685293,0.0014697125566416336,0.677050991521051,0.9557271054866971,0.5691427208842934,0.005358249745200938,0.004879690852404639,0.5724627924730684,0.9543370742397148,0.6739104655447392,0.0012239650484028863,0.031409946415344614,0.46449085047902167,0.9885751788726622,0.7705572381731942,0.020380666419531346,0.06081399323833925,0.3581770537221599,0.9999986394833439,0.3604156022916335,0.06193380714126906,0.019726639428932657,0.25848586116918704,0.9880740229408824,0.46681816244499735,0.12394301006273223,0.0010662655985109182,0.6717214155946684,0.953358164494555,0.5747701910211509,0.00455995927005115,0.005704241813899447,0.56683156524165,0.8974721656383179,0.67923072971941,0.001653872658174349,0.033423991832764344,0.45882092931381546,0.9897522570498198,0.7753218598328238,0.022018697027515632,0.05812434199433264,0.35273320285723314,0.999953035604352,0.8585564829126062,0.06470347080930577,0.01817615871971301,0.253522288196256,0.9868078665373061,0.47249434877817614,0.61462911430437,0.0007273571075322449,0.6663696270252522,0.950930580362072,0.5803879894257032,0.7165059204357299,0.006592731307414668,0.5611916931612654,0.8939965129286241,0.6845278099003658,0.30213677250373827,0.03549839015539136,0.45315633477601003,0.9908659844094743,0.780050867843622,0.4054022188338149,0.08609454687275758,0.3473084013623823,0.9998427614087608,0.862496591664581,0.5130850297700563,0.016688003265350693,0.24859059780133108,0.9854787401813341,0.47817409304389286,0.6201568184744409,0.0004530309224621276,0.16161267842401617,0.948444667104012,0.5859953894200916,0.7216177305750084,0.0075450444043613785,0.5555439057650647,0.8904698956734319,0.6898010208955425,0.30737194173181026,0.037632873054029126,0.44749779959667424,0.8142616321285863,0.7847436504952411,0.4109922105542625,0.08931152715907553,0.34190335095077873,0.9996678311608441,0.8663898104735419,0.5187688121566543,0.015262365562895619,0.24369142791229054,0.9840868157991597,0.9309269287714468,0.6256689800256278,0.0002433225281560647,0.15744816207314893,0.9459007462801734,0.5915916656715203,0.7267008738440419,0.008561057920390247,0.5498889336100664,0.8868927700504983,0.6950496806004216,0.817146679870967,0.03982716442737427,0.44184605572308205,0.8098183401711362,0.7893996007631846,0.4165937156799968,0.0925816311423629,0.3365187507807363,0.9994282674883166,0.8702356357408003,0.5244501667451633,0.16436102064419195,0.2388254122503946,0.9826322734400756,0.9337830432992467,0.6311648859444928,9.825905097854415e-5,0.15332795575589053,0.9432991469537952,0.5971760942860812,0.7317546927241011,0.00964064043132512,0.08401879458197598,0.8832655987709781,0.7002731100862628,0.8215224171638122,0.04208098043773051,0.43620183422403325,0.8053349723491141,0.794018116387327,0.4222060096407401,0.09590443582556823,0.33115529736527316,0.713146338146816,0.9704438981511958,0.5301283586365555,0.16859765137782712,0.233993180248312,0.9811153012531845,0.9230767795716495,0.6366438253203094,1.7859255294072618e-5,0.14925259243239525,0.9406402056489906,0.8559535486527788,0.7367785334896485,0.010783652290163592,0.08089060424950045,0.8795888510195715,0.9985527459786563,0.8258565646371523,0.0443940295477242,0.4305658651952874,0.8008121085986258,0.9950792138792905,0.8997183059566116,0.0992795113946579,0.32581368448201586,0.70798855931553,0.9684873235089594,0.5358026533409062,0.17287714992759884,0.22919535696870103,0.9795360954630603,0.9200188172625143,0.6421050894370206,0.26175020910956126,0.14522259926225128,0.9379242663072178,0.8519369941451463,0.741771746292899,0.01198994564514061,0.07781662688380941,0.875863002393833,0.9989528546620848,0.830148561656949,0.046766012558015435,0.030125048085471284,0.7962503339646853,0.9942513517897702,0.9031086668924857,0.1027064212742137,0.32049460308345734,0.7028038765852331,0.9664701487275569,0.5414723168724032,0.1771989627284592,0.22443256302335596,0.59988723232215,0.9169065243503911,0.6475479718649135,0.2667651122451556,0.1412384975362913,0.9351516802427894,0.8478749156078279,0.7467336852478795,0.01325936445885334,0.07479726011243037,0.8720885348426519,0.762598841925025,0.8343978530414425,0.04919662264600022,0.028211409468983983,0.7916502385255373,0.9933595569123206,0.9064468846003856,0.10618472218390512,0.31519874120758035,0.6975929606090665,0.9643926347341603,0.9595163580747099,0.1815625307418942,0.21970541449292924,0.5943088262075749,0.9137403034190299,0.6529717685519976,0.27181018496260856,0.13730080260916194,0.9323228060974295,0.8437678384819878,0.7516637085139766,0.3727134549917175,0.07183289449885855,0.8682659366039108,0.7577426938337759,0.8386038891329659,0.05168554540549897,0.026358798019740004,0.78701241731633,0.9924039446030909,0.90973252727256,0.1097139641958288,0.0030019843759699905,0.187040542643312,0.9622550502609866,0.9617281800328392,0.18596728952823682,0.21501452284723954,0.11057659024698796,0.9105205640279204,0.6583757779150761,0.276884774667723,0.1334100238326611,0.05229726296394144,0.8396162940294826,0.7565611783789595,0.3782209111469044,0.06892391349203641,0.3740462344816655,0.7528532060077427,0.8427661258690449,0.05423245888742567,0.024567453378186443,0.27303689591276137,0.991384638473193,0.9129651699019847,0.11329369079270818,0.002411925233094858,0.1826258903125657,0.9600576718105367,0.9638802761658227,0.19041266931967898,0.21036049486617675,0.10703507543738744,0.9072477226593137,0.6637593009304978,0.2819882249481972,0.12956666448985227,0.04979426124750619,0.8354208192641418,0.761425461341471,0.38374411976616396,0.06607069337675325,0.3685511890583626,0.7479310109157844,0.8468840248527731,0.056837033641433,0.022837607259738324,0.2679846122174356,0.6488637463217457,0.9161443943373389,0.11692343892694496,0.0018862304925528761,0.17825229120620711,0.9578007836198289,0.965972368094036,0.19489809509397243,0.2057439325612131,0.10354439173445923,0.9039222026643499,0.9940411650403034,0.28711987565853375,0.12577122172996302,0.04734949489636847,0.8311819568823029,0.766255928192972,0.3892823664070892,0.06327360322497194,0.3630731469045967,0.7429767452575349,0.8509570534224566,0.4966149589263452,0.021169483424805402,0.26296234035825305,0.6434254231702372,0.9192697893370934,0.12060273908051594,0.001424968154421724,0.173920311061453,0.9554846776236319,0.9680041851995655,0.1994229866488097,0.004962052854369903,0.10010499066785539,0.9005444342082954,0.994884525948359,0.29227906300543105,0.12202418650407759,0.04496328014785994,0.8269002551926125,0.7710519540991312,0.39483493468206343,0.06053300484808838,0.011070092331044556,0.7379910498810458,0.854984684720514,0.5023016238389107,0.1482720819883696,0.2579707299800563,0.6379685475410672,0.9223409506227067,0.12433111532570612,0.2328276538242917,0.16963051023199155,0.5315034270851183,0.969975464661214,0.2039867586768747,0.32985918071109654,0.09671731713367626,0.8971148542149011,0.9956638721656457,0.2974651196336471,0.033635872269035805,0.04263592566549951,0.8225762680451005,0.998206620031268,0.4004011063509266,0.08325598928154165,0.009911735700255164,0.7329745696998898,0.8589663977616273,0.507987991030027,0.15233650187716197,0.2530104267615404,0.6324938252962857,0.9253574809309189,0.6152018662324208,0.2376516070026567,0.6658145397045273,0.9506760182150313,0.9718859514884964,0.7170362426750579,0.3352174065041091,0.5606075688260787,0.8936339063098842,0.996379102881561,0.8087358336625952,0.4404779403560642,0.4525704498606713,0.818210554759539,0.9976931960210623,0.886018609292909,0.055222694081900114,0.3467481145137478,0.7279279536097402,0.9757668676440143,0.9452757513302337,0.01653756329952777,0.24808207233173174,0.627001964606452,0.9316239957496878,0.9837401715969055,0.0004283304923843878,0.16117966058186334,0.5201454561295584,0.8673258883044705,0.21322857785329824,0.0076472369282616914,0.09009889873480897,0.41234822976494373,0.7858750278250818,0.30791515402175884,0.037857186521057684,0.0381589940456607,0.30864401512566564,0.691074866610167,0.41157137820462963,0.08964748696446118,0.0077853469180319546,0.21387541339761124,0.58735221966159,0.5193568901918789,0.16059972381681192,0.0003962937243797704,0.13246776587196585,0.9312250949459189,0.6262385073883106,0.24740069146233346,0.6550427936531273,0.06822250696312848,0.9755235666284736,0.7272252557242079,0.3459971074927991,0.5493033300456555,0.02413965135769336,0.9976168560464287,0.8176014295847955,0.4517848859233321,0.44126158426597134,0.00227770448453557,0.9964732887407695,0.8931467977264782,0.05014250860324354,0.3359627040745389,0.0036575379661055174,0.9721462650521647,0.9503336723824303,0.013761969706786559,0.23832375560855712,0.028214718709906272,0.9257717665236338,0.9864916391631371,8.693868492953838e-5,0.1529041146781105,0.5087770620278025,0.8595153097867846,0.9999322554780965,0.00975598863399102,0.08369256087047688,0.40117459633106395,0.7764708249878757,0.9900278945261001,0.04231761087698427,0.03392101637620337,0.2981869094903981,0.794493916577826,0.9572410531329367,0.09625129873983818,0.005913627241135533,0.20462314350799976,0.874423856931811,0.9031027548694834,0.16903854955887215,0.0009782343887194123,0.12485237832607232,0.9368695955114579,0.6372098334473558,0.25728046938980664,0.019345302312255175,0.0625996120405255,0.9789151485377925,0.737296703698404,0.3568564887157264,0.06015715724007237,0.020771817341791954,0.9985971450364057,0.8263027003057521,0.100585229825079,0.12150803731129445,0.001322196700144329,0.9949965089609065,0.9000715742083465,0.04529507687163864,0.2005330845679152,0.005158975073574101,0.9682813766265812,0.9551585933141997,0.011237952948207564,0.2287008287089628,0.032102989179607355,0.9196992453697086,0.9889913986793972,4.199096113655099e-6,0.14480815424184434,0.08089605375435399,0.8515187200609369,0.9999901241051227,0.012118389846057953,0.0775016181440184,0.3900520946076652,0.7669235776939316,0.9876411700142023,0.047014837538230214,0.029924185363043032,0.28783422081809884,0.6698640968390641,0.9525211866414713,0.1030640078324383,0.004297545086845933,0.19552369994996138,0.8818639741600043,0.8962701466121575,0.17764861290215728,0.0018183661202917367,0.11743109005897706,0.9422880621945502,0.8215147643187359,0.2672858290432987,0.02260241690196535,0.057203025629409876,0.9820589424309645,0.7472453756868601,0.3677899315898536,0.06567915954859016,0.017651933304138334,0.9993194626554579,0.8348351438367171,0.4744677526906273,0.1290370703651042,0.0006247020188118735,0.9932636207590619,0.9067893558979381,0.040682906921119866,0.209717570521104,0.006916440156455317,0.9641742020388936,0.9597480177384692,0.008966818935928322,0.3039531806803599,0.036233346942696865,0.9134095741763535,0.9912381567841098,0.0001801545349367495,0.1368959680776609,0.08720643184939425,0.8433402565176742,0.9997893006416538,0.01473321827130375,0.07152927371453371,0.15745544136152784,0.757238225635539,0.9850021426915077,0.05194643618602329,0.026170568944165418,0.2775913055319167,0.6591241261904126,0.9475671882219504,0.11008208938472525,0.0029379366070204638,0.18658179072464037,0.5535795217761941,0.8892325103999068,0.1864254590481058,0.002916254239643201,0.11020774080367374,0.9474776915108745,0.8127221217544913,0.9969646342196669,0.026106534327961506,0.052035539893372174,0.9849533217266333,0.7216087729214978,0.9735436340052026,0.07142587702795866,0.014781613455263687,0.9997834351804937,0.843194345539185,0.9280099070170056,0.13675803756148364,0.00018558132038071218,0.9912755207218884,0.9132966670526231,0.8624897089822696,0.21905224697785586,0.008929023912156275,0.959826866318235,0.9640995711127403,0.6968677712913841,0.3144656717191765,0.040603654975196135,0.906906007184225,0.993230751017212,0.7910088573362711,0.41854285965739996,0.09373038702513964,0.8349841506482385,0.9993298889926254,0.8715609118982801,0.0657786176395882,0.16582839923399778,0.7474197799596195,0.9821121779759754,0.9347624535727791,0.022662109219687143,0.2535309825375616,0.6483018256098927,0.9423816210454157,0.9776622053868174,0.0018355052554733797,0.17780204232579916,0.5422587274840355,0.8819934874663,0.9982569084590511,0.004271330705608534,0.1031860678806194,0.4342423039293122,0.8037676785155525,0.9955848667401201,0.029855841579508824,0.04709982846059679,0.9875967888891585,0.7113570485782101,0.9697708546419598,0.07739433635873305,0.012162342882585386,0.9999888225547267,0.6090768304312599,0.9220202905367538,0.14466694411523923,5.061803441286372e-6,0.9890332374812125,0.9195901408260483,0.8545629482014596,0.22853228422884192,0.011195685041111236,0.9552416187517645,0.9682110019676637,0.7705488346741323,0.3250741571805379,0.04521165210420103,0.9001919093024675,0.9949681504216057,0.8001813519571503,0.42978441650714005,0.1004645438237135,0.8264547258550159,0.9986121268550521,0.8790747129414236,0.060252625276434046,0.17437425562149528,0.7374733206749869,0.9789727711191669,0.9402666944705299,0.019400621447023814,0.26348947879957807,0.637402794495225,0.9369671680952877,0.9808998585574945,0.0009908214240128554,0.16918899734609683,0.5309160687629062,0.8745568232412676,0.9990767875392232,0.0058828944092120805,0.09636970426406644,0.4229856775848292,0.7946560675807104,0.9939486864255715,0.03384839878602974,0.04239844504054119,0.9899879762034323,0.7009959692814911,0.9657550184690281,0.08358144949347618,0.009795476782030965,0.9999355185118795,0.5979501066467844,0.9158123231212997,0.1527596980024063,8.323686778088923e-5,0.9865379311818271,0.9256665210101236,0.8464527385366412,0.23815277735587248,0.013715250785544475,0.9504208317208975,0.9720801830719374,0.7609150993924148,0.33577314829346905,0.05005495417779959,0.8932707543677294,0.9964494560765673,0.8091985344274057,0.4410623025066041,0.10740541803009634,0.8177563952146338,0.9976363855950448,0.886392382850737,0.5491036280250978,0.18308858894577834,0.7274039940239796,0.9755855464326109,0.9455431438458546,0.0163877931016862,0.2735703442809124,0.6264326719440784,0.9313266307792043,0.9838886968341742,0.00040432214732344374,0.3746255225296603,0.5195574142409148,0.8669263654132378,0.9996384470841253,0.0077501115364175255,0.0897621767023814,0.41176889801951877,0.7853920032464418,0.992056939826554,0.03808214022078221,0.037933822102661385,0.3081004461616493,0.6905308957957519,0.9614982032575565,0.08998401525449717,0.007682239756867437,0.9996235506311653,0.5867727040256058,0.9093892167382223,0.16103211207743945,0.0004200660660589328,0.983790892881239,0.4789625496531811,0.8381632761648814,0.24790874876967384,0.016486417536248188,0.9453669994738495,0.9757051125329238,0.7511463680992773,0.3465571094598775,0.055131055298619225,0.8861461233468186,0.9976739015628456,0.6524018585642517,0.45237068254072693,0.11454941847483963,0.8088936591946587,0.9964031700556677,0.8935101355047846,0.5604083676310405,0.19196689045958137,0.7172170098198231,0.9719522564473929,0.950589071693392,0.6656252065894479,0.28376836319821297,0.6153971338364334,0.9254629274795882,0.986627173808668,7.631087684678572e-5,0.38566704928969553,0.07511245151901125,0.8591060619383637,0.9999415964942537,0.009872015999538908,0.4929046590172286,0.14165562966834394,0.7759802786877587,0.9899106057221649,0.0425548753696548,0.033708269617865494,0.22493215736147415,0.6799672426914141,0.9570026114598991,0.09659872099012279,0.0058237251840985715,0.3210533304298583,0.575550405693252,0.9027542946667975,0.16947990623961795,0.0010153751247343745,0.1244635752861743,0.4676056456933391,0.8296988500075941,0.25779515078526566,0.019507751507062854,0.06231479406609575,0.36117358157687857,0.7412476950815905,0.35742046111864123,0.06043732912036398,0.020604284373103132,0.9986408533592026,0.6415311699065732,0.46370370571700076,0.12189284889211638,0.0012797719038408761,0.9949131182957354,0.5352056653991965,0.5716818522858303,0.2010045665794155,0.005243639529881272,0.9680747810074068,0.955401867278329,0.6763127229113111,0.294078259153596,0.032310789373251436,0.9193790920436931,0.989113872608324,0.7727104450188922,0.3967677312782158,0.08121728618902418,0.8510999589978729,0.9999860789218014,0.012247509937088674,0.5042777664693687,0.14967937844114626,0.7664257634782463,0.9875107946136515,0.04726429006452676,0.6115880458738396,0.23450014100674155,0.6693104755434424,0.9522705690700789,0.10342214428864471,0.004220894648757412,0.3317187596911628,0.5642890180040403,0.8959109897785529,0.17809870964754615,0.0018688560342336458,0.4367954865220729,0.45626550239102187,0.8210638395114764,0.26780686823360433,0.022777689476709995,0.05692999476990018,0.35028422518385893,0.7312242018573456,0.36835758263244167,0.06597103020667111,0.01749727530866252,0.2512941179228021,0.6305872538140952,0.47505550839269384,0.12943190983214847,0.000595638840642565,0.9931670012596849,0.523852366623612,0.5829182491516331,0.21019694126226318,0.007014328937937742,0.963955126296733,0.4160036626099698,0.6869090160176107,0.304494697864625,0.036453616641748066,0.9130782722139063,0.9913475066291071,0.7821718268813347,0.407921825064519,0.0875387966901705,0.8429121989045967,0.9997718713518091,0.8642582627227658,0.5156486606290911,0.15788438114190723,0.7567334010705733,0.9848587481498433,0.05220794768060566,0.6226447619338883,0.2442054927923738,0.658566108103486,0.9473045244203309,0.1104507547490563,0.7239138089270571,0.34247125672390494,0.5529943675369026,0.8888628427611178,0.18688406298060206,0.002980067208313286,0.44809302717507077,0.4449479870728742,0.8122627123826066,0.2779387211081432,0.02629453959759437,0.5561386602342526,0.33947233089438905,0.72108107452581,0.37936281519585047,0.07172929545158474,0.014639910452181715,0.24149271991987664,0.6195757726077229,0.4864202172086668,0.13716270062702096,0.00016989479747114844,0.1555844376317716,0.5124867267670988,0.5941117445796293,0.2195392584249367,0.009040086371706557,0.9595954238016506,0.4048145972199877,0.6974086034456282,0.31501228992423835,0.04083628021334568,0.9065637279991261,0.30158727202325875,0.7914872146205825,0.41912355958293807,0.0940737123083144,0.8345470179597592,0.9992990846140741,0.8719544568063161,0.5270114582594294,0.16626639254817377,0.7469082062387764,0.9819558384847306,0.9350528090207828,0.6336380222808671,0.25404319122370256,0.6477396994470949,0.9421070469143495,0.11768091580766243,0.7340241876123578,0.35330525824632886,0.5416722980807456,0.8816135002862932,0.19583142074616522,0.823482293632085,0.45941742420515286,0.43365895535794885,0.8033000222748791,0.28818546724493865,0.030056482271156093,0.5674246455419484,0.32874349272203257,0.7108235610842681,0.3904304647631637,0.07770914556091091,0.672283386659351,0.23182507213614167,0.6085024235661731,0.49779195212821536,0.14508122140886537,2.760051910577488e-6,0.14742942343773824,0.5011146263480764,0.6052565471179628,0.22902668440484875,0.01131986371563476,0.07949750958471347,0.39367478022440905,0.770053737571399,0.32562559358919785,0.04545651252245325,0.8998388299880509,0.29119992647994225,0.6733492120076287,0.4303671391187576,0.10081865191470774,0.8260087442611403,0.1984752597183156,0.5685499228649554,0.5383602803125163,0.17482107585417966,0.7369552624836451,0.9788035675675189,0.4605496072363966,0.64456213906343,0.26400814633064607,0.6368368510974849,0.9366808256978927,0.35439147824842177,0.7440134834934166,0.36421515880671246,0.5303286676109075,0.874166713123282,0.9991121881324967,0.8320703056405054,0.4707628184327073,0.42240424812804167,0.7941804064339685,0.9938570617710705,0.9046206793613069,0.5786757457155881,0.3181032617075833,0.7004569687127371,0.9655406470973994,0.08390748659368741,0.6829148082396633,0.22229617655842604,0.5973729359782345,0.9154852153784302,0.15318337517936942,0.7786124294117279,0.13945682728578357,0.48974194922762276,0.8460281691377297,0.23865431046092256,0.013852481425690344,0.07345350345166829,0.38258997530216954,0.7604128941495734,0.3363291175956171,0.0503119230867452,0.02736831483708918,0.28092061292547976,0.6626373053842431,0.4416467463068849,0.1077701257153667,0.8173017954637412,0.1894814432496435,0.557267159245688,0.5496892549713693,0.1835440049146848,0.7268797194025463,0.11254233546993875,0.4492228497258259,0.6554114602047234,0.2740952023012312,0.625863204127341,0.9310286682674334,0.3435496443022533,0.7538765281644801,0.37519531368359615,0.5189693452582742,0.8665263341980641,0.2451820887085327,0.8404865063322299,0.48212333981428973,0.4111896885056522,0.7849085832980451,0.9919521166293702,0.9111970307981383,0.589886139498943,0.30755714304698756,0.6899866610280618,0.9612714215115796,0.9627061830160364,0.6934515907224321,0.21291096338394416,0.5861930681784647,0.9090510663076714,0.1614649699295405,0.7879835720343775,0.13167077415251371,0.4783745795651984,0.8377295474174067,0.24841715531334707,0.8690677914371219,0.06763019008747112,0.37156591766926594,0.7506373145545084,0.34711732400011,0.055399999743983686,0.023779668321315783,0.27075464981914477,0.6518412511297467,0.4529565451417213,0.11492453705667188,0.002166865156592257,0.1806482873434716,0.5459547659188968,0.5609925206879375,0.19243066653503765,0.7166867900250515,0.10545446229749561,0.4379223640284781,0.6661803723267404,0.2842991401491818,0.6148244362401583,0.04868444669273175,0.33278875689407217,0.7636082185414645,0.3862400418063306,0.507600208272624,0.8586963165999126,0.2354632930157045,0.8487265412121474,0.4934931104797511,0.4000210788411326,0.7754893500564818,0.15049070963895173,0.9175606311937508,0.6010500266970424,0.29711059324298705,0.6794180553088094,0.9567635366751794,0.9668961924527542,0.7038882824354019,0.20367428846943958,0.5749686045678614,0.9024052765057049,0.9944294377391383,0.7972057135694333,0.12407529249822147,0.46701839877421447,0.8292561863203816,0.2583101677208631,0.8766447430783233,0.062030582441848725,0.360608311111388,0.7407320566163476,0.3579846310450919,0.9384958636884904,0.020437415538535952,0.26070729697332395,0.6409666350621575,0.4642906839966795,0.12227818428625675,0.0012380380130040947,0.17198036222520408,0.5346185958535449,0.5722642292158321,0.20147646280627707,0.005328989400283979,0.09857072477698453,0.4266539969523755,0.67686330365465,0.2946146804141926,0.6037262588326294,0.04390634171410118,0.32211438364676725,0.7732035195022613,0.39734362869443046,0.4962271389817712,0.010539836448889839,0.22588136713378493,0.8567861469323516,0.5048662477734146,0.38890419771058415,0.765927580167814,0.14244867142945106,0.9237081880569329,0.6121616311771629,0.28676901728195436,0.6687566196923995,0.07571229316770112,0.970844632413903,0.7142194834927211,0.332273049302288,0.5637053526210447,0.8955512844669604,0.9959943833348613,0.8062740825325049,0.437379315235188,0.4556792824790229,0.8206124699162388,0.2683282290942475,0.8840268208384949,0.545409734283349,0.34972282503281105,0.7307022452600834,0.36892541604674967,0.9438469346655896,0.6513196876025495,0.2507837528321189,0.630019083646936,0.47564329865178184,0.1298272626682218,0.7501635742128794,0.1634821526307607,0.5232645143205468,0.5834985486361771,0.21067671348406475,0.8373257521736341,0.09189468451565269,0.41542357868754554,0.6874547268996025,0.3050364858934928,0.03667452851794045,0.039364217040351035,0.31153204742128504,0.7826574664918831,0.40850032941421494,0.08787173293688555,0.00834372769449726,0.21644126869757085,0.8646611534979728,0.516236867297729,0.1583137948744906,0.7562282208382407,0.13459162827522814,0.9296365206761874,0.6232152038573665,0.24471133198634532,0.658007870345921,0.06980519999332285,0.9745494599987562,0.7244398485888128,0.34302990056993576,0.5524091398815028,0.8884926364085397,0.9973027042139897,0.8151839870002695,0.4486783890829419,0.44436309747490077,0.8118028704154453,0.9968337614279688,0.8912102052719401,0.5567234059796117,0.3389150915230784,0.7205530698539491,0.3799340183041869,0.9489683617240334,0.6621196507504823,0.24098915178170105,0.6190042610858834,0.4870085153277754,0.9857613652315411,0.7599455106945577,0.1551580554861995,0.5118983958581099,0.5946896663750116,0.22002665841021712,0.8456328819307816,0.0854297956593486,0.4042369197895132,0.6979491621185182,0.3155591644032849,0.9151804828621866,0.03506042274135368,0.3010472234591324,0.7919651680910949,0.419704371551204,0.09441759994423815,0.00640199914234435,0.20714788196113293,0.8723474864247105,0.5275990859578226,0.1667048482024771,0.0007927666742754691,0.1269236453664152,0.9353425617654127,0.6342050256810432,0.25455574064778463,0.6471773686120976,0.06412068719957315,0.9780087583502668,0.7345440897640054,0.3538679672880676,0.5410858109464535,0.0216716720659349,0.9983537234586262,0.8239308170380468,0.46000401644480654,0.43307569869260387,0.8028319458554528,0.9954274228753599,0.8981911797357763,0.5680077293032457,0.32819070244298953,0.7102897815244691,0.969366503955873,0.9538574950661395,0.6728357340989128,0.23132856149380865,0.6079278663865145,0.4983804537251919,0.9883303531057264,0.7695929528245792,0.14701237763277192,0.5005261212322816,0.6058317922106827,0.9999999995759465,0.8537611831702048,0.07917940310536609,0.39309980817295215,0.708341179549379,0.3261772715686301,0.9214100817692881,0.030997185576180086,0.290665336549517,0.8011218085472083,0.43094995819673354,0.9693806966185825,0.00471565543191127,0.19800601527072986,0.8798411688469484,0.5389470250053838,0.17526834657570267,0.0015620623989691107,0.1194486900744321,0.9408233590509006,0.6451254105759197,0.2645271407946368,0.0216836675449415,0.0586616959215408,0.9812207376468385,0.7445269791404943,0.36478164190165174,0.5297412244428823,0.01848355939456009,0.9991468972772991,0.8325100470849538,0.47135033750460337,0.4218229261690578,0.000790450061612824,0.9937647529483234,0.9049661323129066,0.5792568658085504,0.31755520653140296,0.6999176904395554,0.9653256307858628,0.9585118050816936,0.6834623932063221,0.22180698030376161,0.5967956304134242,0.9151575320402863,0.9906466815896422,0.7791009090704069,0.13904933359858723,0.48915357439427376,0.6169191612696738,0.9998701826015974,0.8617064503543572,0.07314674077181321,0.38201800611705006,0.7186254024205566,0.9857516049191033,0.9274216454597868,0.027176607840987244,0.2803917582225922,0.8101226502657243,0.44223127094724335,0.9731778391458716,0.0032855690679909344,0.18902039857699693,0.8871383235753625,0.5502748130802929,0.9968383873178981,0.002589247121552174,0.11217062989929044,0.44863742166848747,0.6559707083960002,0.274620373280301,0.025120157647204766,0.05343105061074516,0.3429907981898008,0.7543833516272156,0.3757652777365547,0.0698261909075561,0.01554458063328179,0.2446759205762748,0.8409172382954039,0.48271148173935025,0.41061060202575583,0.00028037722902429785,0.15828372801565277,0.9115315576808041,0.5904649952552883,0.30701410653434924,0.008351221935002817,0.08784841463978055,0.9629288836567558,0.6939941298987922,0.21242933462435126,0.5856133129231693,0.03665904766033096,0.9927091522279015,0.7884644600687196,0.13127304341803936,0.4777866394361393,0.007105980160847902,0.9994817355938157,0.8694645726464877,0.06733492992440115,0.3709972472841375,0.7501279137876278,0.9829303792960524,0.9332120635842911,0.023600666281301863,0.27023180397025687,0.6512804333409296,0.9438279701253214,0.976730162108767,0.002112479969260339,0.18019568098769617,0.5453687192134063,0.5615765892484303,0.9979867348465978,0.0038737893824008496,0.10509323046857111,0.4373384546081689,0.6667353078449216,0.9959891788962894,0.02880234792079056,0.04843145757378081,0.3322342511575286,0.7641081075922358,0.386813191921099,0.07573408460081155,0.012856256393254162,0.23496408431882065,0.849148040835741,0.4940815709566374,0.1424774618413448,2.8856531055276857e-5,0.15007010917149882,0.9178840589251467,0.6016263186200437,0.29657285635794156,0.01054824986037467,0.08151655866552643,0.9671064454196048,0.7044254951147314,0.20320047639694155,0.043923219830481364,0.03250462868413473,0.9945166979097448,0.7976787611706623,0.12368753050012399,0.46643119754637585,0.005322994100144363,0.9988348595329078,0.8770315360375642,0.06174697756151892,0.3600432337531236,0.0012409361701429256,0.9798592881989441,0.9387783402128871,0.020271211069263217,0.2601907304959501,0.6404019049286531,0.938476072525991,0.9800358275552592,0.001196995085450292,0.17153642836229388,0.5340314783487857,0.8766176547970429,0.9988774268271867,0.005415024566542304,0.0982201535891093,0.4260719082805599,0.6774136393792058,0.9944233054076369,0.03272833322106988,0.04366550357208965,0.3215645051842957,0.773696215501273,0.9668814542036661,0.08186149110299867,0.010419977598385588,0.22538937616005955,0.8571981961348198,0.5054547223359711,0.15052016244735483,3.6018103106383315e-5,0.14203754209341152,0.9240203492973619,0.6127350610966062,0.23549824261866031,0.012998517380561958,0.07540122368050206,0.9710423289231771,0.7147510917241879,0.1941251805811019,0.04870217491725426,0.02859208919529621,0.9960683834211581,0.8067390449484407,0.11629671954674942,0.105479762674968,0.003795951152327448,0.9979298891089257,0.8844034254230997,0.056385774858429105,0.3491616330692716,0.0021706969905006535,0.9765399205931149,0.9441175953852157,0.01718996484635471,0.2502737329948621,0.02379222003545156,0.9328973098620019,0.9830931251525561,0.000539588083313447,0.1630471209496105,0.5226766297878281,0.8690400045459392,0.9995100024206216,0.007212155247522445,0.09155495535239633,0.41484361193364294,0.787949903341395,0.992601620069312,0.03689608226523222,0.03913565448358497,0.31098708073692305,0.7831427145209838,0.9626905738647044,0.08820524012830394,0.00823700476568251,0.21595675000037884,0.8650635390873656,0.9111735984363931,0.15874368196438676,0.0003018582398204295,0.13419018278661843,0.9299372539151713,0.6237854750838224,0.24521752484621284,0.01570075674087007,0.06950557372478572,0.9747344977633869,0.7249655773212946,0.984026226277902,0.05371462897166268,0.024923453519838434,0.9973634059287461,0.8156406236619618,0.10910443452211782,0.1125683684586058,0.0025256414008676953,0.9967672925484992,0.8915764266288053,0.05125409567138989,0.18951372442303321,0.0033580319046181417,0.9729739939007774,0.9492270666005483,0.014358521832118443,0.24048594246596916,0.027381755489918114,0.927094568553918,0.9859004730720006,0.760448051477606,0.15473215106976523,0.07347499360071125,0.8612714150629394,0.9998841343358327,0.8460578971736439,0.08510108429467789,0.40365937502507454,0.7785782299238132,0.9905250654111077,0.9155081259334963,0.03484425402682012,0.30050745051559075,0.6828764773770473,0.9582603000136815,0.9655556703338919,0.006308467353064895,0.2066710862277351,0.8727400002089771,0.904596482706838,0.993863496159711,0.0008262393969991622,0.12653209143088318,0.9356317114052579,0.8320395142028417,0.9991097332112631,0.01865356981778532,0.06383265917465147,0.9781810416327509,0.7350636669884001,0.981049401727063,0.05895798857804635,0.02150061978931722,0.998401095395115,0.8243788916842438,0.9405258520277042,0.11985742919896242,0.001512722096917385,0.9953476713725784,0.8985468283840229,0.5685907188495717,0.19850811426611958,0.004802326592059369,0.9691633531124346,0.9541041102470887,0.6733878420993127,0.29123734925980266,0.031215820977647246,0.9210708509075993,0.9884564188074989,0.7700883978885205,0.1465958208416137,0.07951979328792835,0.8533159057727413,0.9999996289990616,0.8541768298555792,0.07886187961270041,0.1474586276406893,0.76906242168998,0.9881947158307768,0.9217265209215255,0.03079352254836143,0.29013103662229434,0.672244723058314,0.9535929248494803,0.9695831517059939,0.004635363174991081,0.19753718919256885,0.5673838363744906,0.8978100310226864,0.995511995512528,0.0016088902627682256,0.11906723027979144,0.9411007754872025,0.8234508880560759,0.9983022717551802,0.021855428842356084,0.058385415164321774,0.9813801773087701,0.7339877914119324,0.9778236849094277,0.06442954085150543,0.01832535895873849,0.9991809149255457,0.8329493278843425,0.9350325088286477,0.12734317357682629,0.0007577173192523934,0.993671760085211,0.9053110242419152,0.871926932311194,0.20765849432266748,0.006502833782840445,0.9651099698322924,0.9587462029697635,0.6840097240121041,0.30162507627328594,0.03529243277462474,0.914829273560826,0.9907596399270397,0.7795890020747396,0.4048550294786866,0.08578214707960069,0.8451775928113046,0.9998564266540167,0.862112513428976,0.07284056943602968,0.15561429479237188,0.7594074020657914,0.985611777038143,0.9277267169691061,0.02698555587399376,0.2415279742947815,0.6615238502843621,0.9486908632458759,0.9733676733848547,0.00321855788619424,0.18855978472206042,0.5560977353423433,0.8908177546560387,0.9969041197335082,0.002649405897952206,0.11179946161070298,0.44805206476664694,0.8146949102310075,0.997236991493957,0.025304677190651992,0.053166660067345606,0.9843302495765596,0.7238769837326184,0.9743507447928155,0.07012645484153174,0.015399313890275934,0.9997024610457796,0.622604834609937,0.9293140822455073,0.13502172850997302,0.0002610177031170391,0.9917404257935125,0.911865514445422,0.8642300485182365,0.2169601302372735,0.008458673644062997,0.9608159412581629,0.9631509429757914,0.6945364003240624,0.3121154413614962,0.03960948166473388,0.9083730658707674,0.9928089447569127,0.7889449484768561,0.41604426270068456,0.09225881486894272,0.8368606868961845,0.9994546013927894,0.86986084201559,0.06704026915683453,0.16394814517952588,0.7496181665043372,0.9827775854312744,0.9335056096084018,0.02342232422435142,0.25132984745718656,0.6507194059747332,0.9435566515020926,0.9769072772801497,0.0020587845337972643,0.17974351767501345,0.5447826096560515,0.8836232713715333,0.998039148545375,0.003947247945587762,0.10473254572643087,0.11707891777137608,0.8057761110215338,0.9959144435976354,0.028999530240891913,0.04817909403838744,0.9870297320852468,0.7136503433555303,0.9706323782569953,0.07604578299672698,0.012723998503263445,0.9999654639107747,0.6115478991417368,0.9233735309601763,0.14288912115707664,2.288023811142237e-5,0.1496499934818048,0.9182069077380138,0.856344714137698,0.22640820939560047,0.010668834235134594,0.08119478665416358,0.967316051277358,0.7726759242796952,0.32270301686827807,0.04416473403105259,0.03229622590748221,0.9946032729982741,0.7981513963805908,0.4272769341510473,0.09894644566430671,0.005237692192898602,0.9987943611175196,0.8774178066735973,0.5352467481786736,0.17245586691462672,0.0012827184141659953,0.9796936074050383,0.93906020887272,0.020105671195537467,0.2612603811640777,0.020615987139660785,0.9381929460305373,0.9802001320206435,0.0011566431780385411,0.361213147828481,0.062334706613206003,0.8762303035545358,0.9989164946905769,0.00550174490946681,0.09787013900968228,0.12449076777193452,0.7966991049644243,0.9943353123450913,0.03293807629679707,0.04342529761618252,0.20418171369522548,0.7033131614871347,0.966670509163992,0.0821844626898493,0.010300796990901695,0.22489776562003327,0.6004332494151381,0.9172139285806254,0.15094128097323534,4.342813522650868e-5,0.1416269086631025,0.49286347806970715,0.8482750089974327,0.23599784341439672,0.01313217203134126,0.07509074241411134,0.9712393728707507,0.7630729416005054,0.33338232484135,0.04895583301151368,0.02839625841339871,0.9961416962757392,0.6655863461021823,0.43854723210846425,0.10584157932296673,0.003723915424215296,0.9978760474328288,0.8847794974717994,0.54658175511591,0.18113305815008796,0.002225820116802335,0.9763614385923964,0.9443876408435047,0.6524410833798282,0.2713144374129214,0.023971927971151386,0.9326025219823866,0.9832445339017317,0.0005126005818039125,0.3721745820512173,0.06794677661622778,0.8686426762851975,0.9995357042351308,0.0073120925015647265,0.4790036983720859,0.1320969041465671,0.7874685884517862,0.9925004147699926,0.03711827757669228,0.038907730388380635,0.21342673815719249,0.6928707865274468,0.9624671873626895,0.08853931780239915,0.008130963104084399,0.30813847783549647,0.5892666360876725,0.9108384620506349,0.15917404181604866,0.0003226507630954001,0.13378924407513193,0.4814940656923356,0.8400251083176935,0.24572407067071855,0.01584741251550087,0.06920654384463565],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],17:[function(require,module,exports){
module.exports={"expected":[0.0020125572672139436,0.9986948817598832,0.5720172019679255,0.21334054963297128,0.35746748877725515,0.5161983404859412,0.030261299347501713,0.10845307966686585,0.2267628438788306,0.3730685474249693,0.5323796756224803,0.9623659500162056,0.17812482444190264,0.7630954558838877,0.012991153450051696,0.5485270179127797,0.042340952131971143,0.1658982336179049,0.25445359010830926,0.9912196097732446,0.564623415546387,0.04910476647553241,0.14802935973166803,0.7275892519503525,0.9926206701736948,0.5723818526341914,0.052544894575967505,0.1425097600929513,0.720587663478263,0.9951347742098078,0.5965958547556431,0.06404487456614016,0.13137243109023466,0.7059351449251002,0.9971290756251663,0.6124383310101744,0.07220548388190773,0.12062209485470438,0.6833063621436858,0.9986014807613237,0.6281627672033393,0.08081520063711428,0.11027003730938634,0.6759971325074029,0.9999800484292753,0.6357174353938104,0.09470896565920844,0.10541144439592531,0.6686447167739928,0.9999886724776978,0.6432388013010949,0.09934533984510968,0.10064967544456421,0.6453202524916071,0.9998746095308014,0.6665965916043495,0.10408002649111409,0.0771840568024097,0.6378084574279704,0.99872119598789,0.6895521763553896,0.11955749933490206,0.07305544182546708,0.6302628469871021,0.9981002117401141,0.6967763453772671,0.12468629406065929,0.06903159031196593,0.6063936534063229,0.9973570038866646,0.7191169492852556,0.1299071830945847,0.057099473683634716,0.5822675991196415,0.9942346997260446,0.7261299966813539,0.15891318515883518,0.05351922785662783,0.5745321897032063,0.9929881260928085,0.7477618298753177,0.164681756855048,0.043002881563523054,0.5833256268750392,0.9882943016028615,0.7545343136120588,0.17053260879077753,0.03988127193854851,0.5089329906441902,0.9865495955300252,0.7612443398335369,0.17646430528661033,0.025302828063425264,0.5011010872560155,0.9846855001365198,0.7678902620365391,0.18247539082553116,0.02290112440595171,0.49326891368354586,0.9827024728332339,0.7744704494476675,0.21543100952267447,0.020616491055744646,0.48543839178200565,0.980601000214514,0.8080224447347786,0.22190577007545026,0.018449488615106868,0.4776114430013332,0.9675802718293346,0.8141540517242971,0.2284487692651455,0.016400648822121444,0.469789987914696,0.95137000095656,0.8202085717340599,0.23505840157356506,0.014470474420174295,0.4287078115601016,0.9479453764972507,0.8508057014297756,0.24173304513210936,0.006271804113817225,0.42096452377878385,0.9444108354031561,0.8563434703021968,0.24847106211974745,0.005095760527794646,0.41324062968703335,0.9407672449783782,0.8617937997743287,0.2849885307450923,0.00404115632120966,0.4055380245705045,0.9370154992854951,0.889039239261578,0.29208583261778376,0.0031082502723676075,0.39785859849097244,0.9331565189261753,0.8939113488024913,0.33031912751279774,0.0022972712973346465,0.3902042358225507,0.9110694286241803,0.8986868005540047,0.33770721703950896,0.0016084183937665752,0.35032521299068,0.9065603060309064,0.9033644227179178,0.3451351298962263,0.001201313101476087,0.3428706697714038,0.9019514218528035,0.9079430675014103,0.35260104342503756,0.0018051020543571883,0.33545468287642743,0.8972439070157958,0.9304090961553035,0.3601031256434428,0.0025311378469703993,0.2669374353836285,0.8708322934183768,0.9499391410178707,0.3356792136612287,0.0006094155082296826,0.289920604959943,0.8875376297950526,0.9381685694352978,0.37520842429546025,0.004349207380890452,0.2531951691643345,0.8601445714166533,0.9565492693005329,0.482136870289839,0.0016275298141379402,0.27581103047237715,0.8774510006719864,0.9454979986728311,0.4565451472064517,0.006653737344369914,0.23969513151768373,0.7981920226677969,0.9627113136560304,0.49779783082777795,0.0031347757617936067,0.2619214880397236,0.8183743979623299,0.9523901903410323,0.47216940216183184,0.009442465938068134,0.22645057216345982,0.7854736606799276,0.9684192262967097,0.5134609527022413,0.04167264024975298,0.24826560966434924,0.8061414945921095,0.9588383800433357,0.48782097167976457,0.03203083024272818,0.21347449008023534,0.7724751182874867,0.9736674051461163,0.5291108632171523,0.04815742056558203,0.2348567980171657,0.7936081262066345,0.9852653651147933,0.5034844944023255,0.03777613556336751,0.20077962074742084,0.7592091530137346,0.9935531458628275,0.5447322026428278,0.055085665390210536,0.16874353924300112,0.7807865937804205,0.9888014657228329,0.5191445972400219,0.04397509418789508,0.13896708377400252,0.7456887848462548,0.9958179318035774,0.5603096392909092,0.06245057494241413,0.11165337084377269,0.7089150394682205,0.9918578282279062,0.5347859104598345,0.0506216220988529,0.1283087664950016,0.7319272834583825,0.9975960932746801,0.6411275424851905,0.0702449208728837,0.10197865691034685,0.6945830217876686,0.9999400665243438,0.6163526078853334,0.057709196008331964,0.1180152485461074,0.6559114354782818,0.9988858850853565,0.6560836459130216,0.0784610533585463,0.09269458420339832,0.6161763180968625,0.9999372272755482,0.6315277341704438,0.0652308597603048,0.10809663258273305,0.6409536451131219,0.9996860413591313,0.6708865597998115,0.1284300284489645,0.08381026465024444,0.6008857628728898,0.9994437206416609,0.709079703350874,0.11176756707810026,0.09856265330974345,0.6258575146670609,0.9999957767762381,0.6855217557074836,0.1390925063104151,0.07533441783727646,0.5854961925110933,0.9887632863994362,0.7232042256008686,0.12182778013469897,0.08942266792725134,0.6106378603579091,0.9935241001371138,0.699974869806112,0.15010919971439252,0.06727536245205212,0.5700227112282331,0.9852216541089795,0.7371096822807439,0.18077735723143207,0.04807983595479953,0.5953096196369596,0.9907693223443836,0.7142317169714163,0.16146929623915673,0.03196702840671001,0.5544805055961128,0.98120379715026,0.8062847841952232,0.19298868554870746,0.019046851383111685,0.5798878365285063,0.9875328750800872,0.7856224524648063,0.17316164642723164,0.02668636090905413,0.5388848296365977,0.976713658881083,0.8185141400145485,0.20550133257288616,0.015001148682701582,0.43088817187378353,0.9838179347812441,0.7983374988661558,0.18517477472812938,0.021870230863203388,0.45636457774161276,0.9717556461835193,0.8304308875869395,0.2183030176665981,0.011431451978974994,0.4154102346943363,0.9796281475056847,0.8107597395461925,0.2533528226296248,0.01752336509846153,0.5075943301945554,0.9380812288994093,0.8420233311253031,0.23138117651375123,0.0006005018476594737,0.40001531881573177,0.949860057313006,0.9123896673092384,0.21011590088699955,0.002512955284601326,0.4252606506924208,0.892473922786839,0.8973539553895691,0.18961291574392125,0.005733619972514592,0.450702520064293,0.9078382349397289,0.8812733460789415,0.2810713874941595,0.010254026726472465,0.34496279534244034,0.9221300798330349,0.9418610604925028,0.25831531406480845,0.016062288509340494,0.3695348925024686,0.9353118750764511,0.9292842099043535,0.35799026769607467,0.000354184210094699,0.39445006577533337,0.8723058477259634,0.9155784968880729,0.4642965477440595,0.0019757186061807874,0.41964279725390174,0.8889253532851022,0.9007799625188226,0.4387773491272446,0.004906876991669584,0.31550118081618217,0.9045221256326725,0.955646930996753,0.4134191439705345,0.009139951478649155,0.33956652460492825,0.9190551508904621,0.9444938683443501,0.3882886151949073,0.021282979848289474,0.3640537504904521,0.8506765210997643,0.9321719473553678,0.4955957043738728,0.014513797938335515,0.3888984659126883,0.8684859906881184,0.9187135702317177,0.4699709169147556,0.009021269397499476,0.28676369992891837,0.8853264752064807,0.9676444471272521,0.4444250950985949,0.04079692259573342,0.3102278370320007,0.9011536902628199,0.9579589467170121,0.419025415210422,0.031259844621457034,0.33419100638396887,0.8276708351751307,0.9470691796772341,0.5269121472856962,0.022955383961665854,0.13363141554443336,0.8466003689631041,0.9350037821621926,0.501282344910296,0.015905378348585852,0.15155571047184851,0.8646184689618263,0.9778065202085662,0.47564917043092425,0.05408514234916123,0.1703962880336351,0.7826060047747653,0.9696265963578088,0.4500800298385675,0.04307645295481982,0.1901036043154279,0.8033790842484696,0.9602117241729451,0.5581229635532228,0.033269307462833075,0.11304423763881849,0.710913739341708,0.9495866613674666,0.5325887398704466,0.0246894951238133,0.1297853289547513,0.733875960652002,0.98609326543822,0.5069688195718361,0.06912351936636346,0.14749995114567033,0.6334763973385305,0.9794510232739639,0.48133057379466965,0.05668642621229292,0.16614152115317615,0.658002292841346,0.9715479980810855,0.5891056548208543,0.04541508764640306,0.09397581028980889,0.6821126993794338,0.9962556250674952,0.5637672283057911,0.035339143218270086,0.10946799140909547,0.7057442152915168,0.9977899597550903,0.5382611170109953,0.0858530299922175,0.12598713066313177,0.6030416606828309,0.9995427264209695,0.6444669281243234,0.07203634703594891,0.14348978868187173,0.6279875563580314,0.9999818761354391,0.6197386180936626,0.059345053920002,0.07650097457089883,0.652596890985079,0.9892227900238808,0.5946954387432279,0.12039084716434084,0.09068344071690432,0.6768049509020201,0.9938725940977134,0.5694032445899043,0.10420801309424726,0.10594226158159264,0.5722024990392188,0.9972236916202737,0.7919699404677991,0.08906596900213315,0.0490264611232864,0.5974704855218925,0.999267270415388,0.7707784213050903,0.07500453299513204,0.060688316917686835,0.6224821598309089,0.981797259555043,0.748874852690975,0.14151284050479018,0.07350540377306947,0.5154810228694308,0.9880168433582768,0.7263168331000297,0.12411642777394649,0.08744401738013213,0.5410799520676949,0.9929531191197705,0.8168135296652763,0.20372453902693377,0.03639077626262904,0.5665708558288041,0.9965931062170983,0.7965674019485975,0.183467010229671,0.04659989993512215,0.591886702282377,0.9724807381066287,0.7755414090755859,0.27400648093127944,0.05800130211696969,0.4841566386955548,0.9802456905895215,0.7537908418135721,0.2514396306278994,0.07056500123826032,0.5097961716784608,0.9867477703557606,0.8404136673591935,0.22952640432380206,0.0007132421095154551,0.5354099442679209,0.9508168689164287,0.8211923944813395,0.20832442588980088,0.0027382896699946757,0.5609306014929112,0.9613097918019827,0.8011265016105624,0.3023783864867883,0.0060709559333954055,0.4528944376344274,0.970589636545645,0.8798449917430017,0.27909366278623904,0.010702477191098736,0.4784739426017115,0.9786320005073268,0.8626777261080056,0.25638984296816014,2.134186837299268e-5,0.5041100533254201,0.9363910088908858,0.8445567490411017,0.3558801644947228,0.0004419043564778402,0.3966036317046821,0.948328265138508,0.8255297121672502,0.3315259309258972,0.002176124211496766,0.2939254359903354,0.9590865799708452,0.8994593665317954,0.30761472331121625,0.005219441061556529,0.3175497331228625,0.9686376629054526,0.8835183224045886,0.2842094194907326,0.001291792208844067,0.34165380856199445,0.9202523714573871,0.8665687636041801,0.38614319676343073,0.00010621897203222375,0.3661742772949582,0.9335871089037712,0.8486552613485685,0.3613347139640091,0.00023518583345660815,0.2658036872283807,0.8699709141286887,0.9175059157594463,0.3368908707853343,0.00860959700489089,0.2887576312157243,0.8867260813490443,0.9028536596450303,0.3128759457066209,0.004519606780163499,0.31226706633888934,0.8096118239391785,0.8871420439037838,0.416853102034452,0.0017325510377134146,0.21709501323967156,0.829331027154103,0.8704123844105666,0.39168774004185236,0.00025575872754657336,0.23860112824203872,0.8481842087115922,0.9841852029118598,0.3668072001739704,0.015359048903226258,0.26079462786810115,0.7629653294447944,0.9771530724503369,0.34227690926459237,0.00969211683397908,0.28361715122943454,0.7844199336957816,0.9688662017409102,0.44788934796207613,0.005314517413715081,0.19183479644518353,0.8051266162446585,0.995230246231623,0.42246587751768805,0.0022377621478588128,0.2124245255033978,0.8250309259949222,0.9910471540933826,0.3972462938125488,0.02401065289703791,0.23377047419634672,0.7358201010518365,0.9855727852906213,0.6368968529621722,0.016789020947525157,0.2558165103884512,0.7581117325594435,0.9788215354361212,0.6120647079322563,0.010838059352354934,0.1677840876098725,0.7797246234322365,0.9985726776126833,0.5869378731947166,0.006173416991222869,0.18737661874099126,0.8006019395731143,0.9959818096738577,0.5615824232498925,0.03453045257668108,0.20779123645511577,0.7077493097274835,0.9920866887085766,0.6667408500929976,0.08462318511705136,0.22897425768077406,0.7307904767651286,0.9868975574781839,0.642357282326993,0.0709017646772861,0.14503728260784954,0.7532247482031227,0.9804280615236648,0.4848130916890197,0.13605835658185422,0.07767574646156916,0.6546925151979415,0.998969801778095,0.5925322064596165,0.04687715910975454,0.18295887974124242,0.5489367169774881,0.9942115077743487,0.6959304112817339,0.10286619356301502,0.10730157909660576,0.7025633986543105,0.9663753741480587,0.5417344653193863,0.027615617869053755,0.049981834407409664,0.5996294606460492,0.9993816052022406,0.6477992973811433,0.07384855827864661,0.013676264599626897,0.7483050085208592,0.982381375916707,0.7469624518663349,0.013319611348826033,0.07465891542436404,0.6492749352584481,0.9428557301744795,0.59811457042608,0.049310473673962685,0.028124361522944508,0.5432742776179554,0.9933167581618672,0.7011495287746714,0.1063468609302215,0.1038070289381518,0.6973512854417574,0.9642950753699102,0.7947915521304749,0.029509875268611097,0.047532645436427434,0.5940504742833577,0.9135925391005063,0.6532221941848296,0.07685047575503695,0.01238680483342991,0.7433531498946737,0.9808539177280245,0.7518909832821373,0.37296786634268475,0.07169710344023666,0.6438380461906248,0.940187173538159,0.8387974001499334,0.2276768788591872,0.02627457898579777,0.537606240610174,0.9923581966537431,0.7063426270162325,0.324119649319773,0.0029732700824129377,0.6921136442911742,0.9621547187315598,0.7993655776632241,0.4287753781228997,0.04514198437704231,0.5884593222300609,0.9103703340277429,0.6586252712712579,0.2771202232835826,0.011160419191128146,0.4806742787684328,0.9792642597467958,0.7567869318982018,0.3784760669215003,0.06879069362781026,0.6383825512712038,0.9374616774658345,0.8429575977014929,0.2324636292961238,0.024486074150307846,0.531933339130506,0.8752312616060263,0.7115090342647068,0.3294541715955955,0.002386186748886354,0.6868511527060208,0.9599545810940959,0.8039008794253235,0.4344085698844501,0.042810160467915914,0.5828567277172383,0.9070950464101512,0.882101683612184,0.2822249926769388,0.009997266309117625,0.22363461445920618,0.9776126075997045,0.7616496644099489,0.38399998695927884,6.567767404547231e-5,0.3682974000896864,0.9346795945080086,0.8470734327332876,0.49119175048930924,0.022759078364552987,0.26775162018403303,0.8714486607660545,0.7166480822309376,0.3348107544489767,0.0018634711470374432,0.1780509759696265,0.9576949470514451,0.8083968707628676,0.4400502460800368,0.004228987440729692,0.3143099373437288,0.9037670999152998,0.8857446722445134,0.2873579318735926,0.008897496644460878,0.21891352421376553,0.8309848306741973,0.7664785518093944,0.38953891192158957,0.0001901786293885266,0.13664280424597486,0.9318412845348549,0.851144372850601,0.49687801401875825,0.02109381502024449,0.26273075239180865,0.8676180120080157,0.9194130574562372,0.34018870499101617,0.001405190891584085,0.17372093467586586,0.7862283453563497,0.8128529701068639,0.4456996769431421,0.004999090257885752,0.30904206956107577,0.9003869250223302,0.9949219906188642,0.5537462720591274,0.00786125245542485,0.21422879328627353,0.82670116064402,0.9986362527870634,0.395092125333073,0.0003793313761712991,0.1327599696871694,0.9289471146896677,0.9850428858611593,0.5025646813857829,0.01622783761645602,0.2577405760371181,0.8637398108369877,0.9997941410579365,0.6099174763548819,0.001011405262352827,0.16943309848728827,0.7815472104325667,0.9700651847447069,0.4513561317041608,0.005833222820378514,0.09656186598158395,0.8969549589662722,0.9956983730810799,0.5593964236002688,0.033730791248510805,0.20958102765971398,0.8223752309094553,0.9981842907141889,0.40065890887011885,0.0006331114469596555,0.1289246386483689,0.7327417783638799,0.9863920020963242,0.5082510170041323,0.0176961318447868,0.06559608911958897,0.8598145589090858,0.9999249789308573,0.6154578333265452,0.00068216519661074,0.16518802204743843,0.7768296565935261,0.9901133182861319,0.4570188786849267,0.11753910026049402,0.09322878180970673,0.8934716456814871,0.9964106355791348,0.5650388920487084,0.19565675293257562,0.20497082853550602,0.818007601041554,0.9976678871167892,0.670021831009493,0.08657288195829738,0.12513730724031735,0.7276937839860871,0.987678202172316,0.5139362853304685,0.15663706861226678,0.06280847972075981,0.8558427639665711,0.9999911501163874,0.6209832555061314,0.2427350273218044,0.16098625446876857,0.7720762940679469,0.9889563706329023,0.46268718539335757,0.12122669192790886,0.08994831462700753,0.6756048729878479,0.9970586859798926,0.5706729475354484,0.20018822800252462,0.03805826366102005,0.8135988360053952,0.9970871087931069,0.6753585458342881,0.089797844023008,0.12139846536487325,0.7226163367836298,0.9739034121095023,0.5196197509595105,0.16079294219591495,0.06007742226184809,0.6212384824622083,0.9999926460550999,0.6264930281649035,0.24762774858219655,0.15682833926160916,0.767287737716501,0.9877361751122926,0.7274595513359641,0.12496327897690557,0.0867208887710465,0.4064969494471984,0.9527042385028831,0.5762978612797314,0.2047584845596025,0.03591203594212311,0.5652997086818061,0.9964420308684344,0.6806725775431306,0.29834037101894395,0.11770859665163891,0.4572809715396414,0.9720596245240947,0.7766105562900174,0.16499269315655407,0.057403270012737095,0.3512570541702473,0.9999294665534908,0.6319864385984333,0.25255311489569926,0.01776556481006475,0.5085140406943262,0.9864528895599896,0.7325089226040968,0.35166838600541483,0.0835469217183405,0.4009167388872874,0.9502607715631122,0.5819129056833094,0.20936693142840385,0.03382583929300326,0.2979462569200688,0.9957327367853968,0.685963238751229,0.30355696833224544,0.005873356642728589,0.45161795120744896,0.9701547747124425,0.7813297800982378,0.1692357782447088,0.054786368882462855,0.3458375508629825,0.9226223329928083,0.6374627762187924,0.2575104891524719,0.016294380357246008,0.24725596361986352,0.9851066799725507,0.9288118878345263,0.35710855848766254,0.08042682403036139,0.3953493450229648,0.9477590621393966,0.9740405882241441,0.2140129724935002,0.03179994356900323,0.2927577482533853,0.8895027611553199,0.900229305007804,0.30879897609842344,0.005036264679458613,0.4459611892279223,0.9681891090721702,0.9552674141137201,0.4125133565133854,0.052227057374469754,0.34043798889757076,0.9195562094803174,0.9890462279523071,0.2624992301023572,0.014885764572553084,0.24236574113336973,0.983697720485933,0.9317086326940878,0.36256721437555817,0.00019750260398415653,0.389795488012122,0.9451994338348129,0.9758184219277095,0.46905279867552424,0.02983461082537331,0.2875960469487513,0.8859119891562796,0.9036118854020441,0.31406571624918417,0.004263197652910444,0.1953150806408272,0.9661628818675991,0.9575889837914309,0.41811786535188344,0.04972566654282429,0.33505906672238006,0.9164358152044424,0.990198378242602,0.267518692437829,0.022680681571395134,0.237508844355295,0.8472627445426102,0.9345495348405006,0.3680436475767702,0.06580955065118677,0.38425588626162044,0.9425822177444061,0.9775347071941249,0.4747304736768175,0.009944992800935248,0.28246182068659653,0.882271298367391,0.9982207844974245,0.31935650751703093,0.04270372159836611,0.1908259791411659,0.9640763551968575,0.9598513630605496,0.42373296587238857,0.09681648608077259,0.32970148011596406,0.9132615537968677,0.9912871200083758,0.5316708111125042,0.024404826546418068,0.23268590153875507,0.8431489746020274,0.9373342267951655,0.37353714969942253,0.06865759312389269,0.1481528973170389,0.9399077524123615,0.9791892220171141,0.48041141736166953,0.1330524460989871,0.2773557335933772,0.8785811597221407,0.9986678624990357,0.32467066552338825,0.04503281640534773,0.18637687016158022,0.5533179684398456,0.9620542592760215,0.4293579317460206,0.10020569153074277,0.11004304064436371,0.7065822134856021,0.992312312417851,0.5373439198642882,0.026190491080779643,0.2278975365448262,0.6039415711278183,0.9995812112978772,0.3790470101437262,0.07156143093741851,0.14413532418713515,0.4964472439187738,0.9807817523805803,0.48609489488420377,0.1369388587640884,0.2722784461556698,0.6534725774051996,0.9990504364247653,0.593792096325626,0.04742076248376892,0.1819683292066992,0.5476603678275936,0.994015320872625,0.43499203536778874,0.10364661148720078,0.10650910864116236,0.7013903351490282,0.9932738228595361,0.5430121980761039,0.17838068984195438,0.22314436876184712,0.5983725030920156,0.9993162050080555,0.6490238510807829,0.07452068847226112,0.14016378314347233,0.4907610409517023,0.9823120922862885,0.49178017107078476,0.14087223439826202,0.07398621075397899,0.6480505819859884,0.9993684567876115,0.5993716613921504,0.22399371151401493,0.17760092653356496,0.5419966022141172,0.9931061713242647,0.7023228646531005,0.10713880085757366,0.10302607577990225,0.43398153728873773,0.9941715269593797,0.7958263424989438,0.18275550786287975,0.04698843108754852,0.5927907102991526,0.9989866107774443,0.8755158302192649,0.07753498294022237,0.1362387879159379,0.4850760330696971,0.9805008754195695,0.7529978839459178,0.1448520642084225,0.07103685871697268,0.6426094358119505,0.999621882450755,0.8397393677989815,0.22875323341376091,0.17327522707786847,0.5363274042232615,0.9921332371202554,0.9106162865413736,0.11068180791744703,0.09959439260057779,0.4283490179455787,0.9950053085968578,0.8003916873398895,0.18717136234180187,0.044611011027905156,0.5871969147696621,0.9985924712399749,0.8792461972933495,0.2782688508503445,0.1323608462135884,0.47939295564434997,0.9788972195578924,0.7578863975066286,0.14887783339250737,0.06814299425615983,0.3725512688604409,0.9998106806328813,0.8438896084244607,0.23354784183768512,0.012482278208462816,0.530653507181565,0.9910966441123443,0.913834453427627,0.11427517436899709,0.0022626913400288773,0.42272576685636387,0.9594502205192488,0.8049181756800429,0.19162768207565395,0.0036766055429350852,0.31840644586456707,0.998133837378693,0.8829275078163153,0.28338003030633907,0.009743728955643127,0.4737125437975427,0.9772316170080231,0.9430555493038879,0.15294902120606846,8.810588520674623e-5,0.36706077396981146,0.9340444547716387,0.8479953659719939,0.23837691658984378,0.013776509281776261,0.5249756450234013,0.9899965263867219,0.9169990896755664,0.33602163708901434,0.0017545002529890663,0.41711251140427186,0.9571772101953194,0.9665305065572722,0.1961238906270758,0.004397048392784986,0.31311991527453054,0.9976107685191653,0.8865592856004005,0.2885192301582993,0.030182411407852605,0.4680355323063572,0.9755042832202867,0.945662468029289,0.3907899352220615,0.00022718747548022833,0.36158747513805883,0.7416249248030491,0.8520561093504155,0.24323983301597774,0.015133634716846811,0.26160276817562766,0.8667476152672476,0.9201097859306855,0.3414043100040135,0.05268153817756027,0.411509977679518,0.7851759645805145,0.968545897741508,0.20065940639897772,0.005181598863762404,0.30785755814356847,0.690287656812218,0.8901410608650411,0.29368578563642106,0.032158618405222716,0.2131774761353628,0.8257293371887542,0.9482117390741052,0.3963462714780913,0.00043091606999623444,0.35613208035161986,0.7366307994192838,0.9853525958027345,0.248135962084313,0.016553478965722235,0.25661960205100054,0.6364824832596956,0.9231661398157661,0.3468074977129092,0.05525119663425038,0.4059188903854322,0.7804865641728538,0.9705006812098377,0.4526325535318362,0.006030155472080412,0.3026200551722217,0.6850166886641165,0.9958645904100998,0.2988790284323741,0.03419534198737467,0.20853812939917293,0.8213939550476268,0.9507030326830319,0.6658733926719713,0.08411187387594887,0.3506952952809933,0.7316060651830346,0.9866875394406572,0.763331621769453,0.018035858367597468,0.2516679178582122,0.631003033332022,0.9261677559829269,0.6167051415665952,0.057878384586458276,0.1642367252159304,0.7757608820474812,0.9723946041055791,0.7184274268412846,0.0069426084545800015,0.2974080838460762,0.6797217880924069,0.9965623808779921,0.5663101279889025,0.03629231869844457,0.20393648406712722,0.5752903549525334,0.953136026600307,0.6712272013648763,0.08729545330106586,0.3452778231894595,0.7265513720576597,0.9879595286908291,0.7681486011679882,0.019580581172571054,0.24674835611139412,0.6255066377973859,0.999997135333201,0.6222270971337318,0.06056276220011042,0.16004479905336694,0.770999529484532,0.9742274214445346,0.7235285571530269,0.12206502812771625,0.29222231834812884,0.6744036400072151,0.9971959396199105,0.8143920647736265,0.038449277288658656,0.03756906295193735,0.5696637490844441,0.9555104061113963,0.6765588613427339,0.09053241720791688,0.007516045342332189,0.7214673738817828,0.9891683990179008,0.7729308947986647,0.16173617058448247,0.059469421260417765,0.619994007629847,0.999984046727324,0.6277332422856781,0.06330398224349154,0.018947873318026887,0.7662031223782118,0.9874522987110451,0.46964019757785785,0.125812597038162,0.0008896708360559002,0.6690629323257969,0.9521583410004705,0.5775649373280702,0.20579437208605816,0.19484867360421443,0.5640281320165259,0.8957502701754583,0.681867682940487,0.29951445591519743,0.11688334993417454,0.45600345603911663,0.9903139940511305,0.7776778840584915,0.4025964691212221,0.05680814915253629,0.35003325505774296,0.9999062837934725,0.8605215605727121,0.06610169013215977,0.017428359738263566,0.25106594339409954,0.9861548090499515,0.47531824492642566,0.12960856813060034,0.0005828714180746153,0.16372292647990827,0.9497017125544216,0.5831776557961681,0.2104113486480677,0.1903636840069235,0.09208279840856132,0.8922492183575887,0.6871529794472868,0.3047368423101672,0.11325414801427935,0.450341783020397,0.8164801442937857,0.7823889549111962,0.024586771698797638,0.054204205144031126,0.3446181873815962,0.7259326243645206,0.8644384162812374,0.0689555239748133,0.015971268143237183,0.24615034458436003,0.9847944339112655,0.9294699588231472,0.13345245038560571,0.2768289472863265,0.15953633672169,0.9471869139402669,0.974446851328566,0.21506578430809814,0.18591874672887038,0.08882071587518808,0.8886974280116364,0.6924140671953205,0.3099844865380307,0.10967497274671006,0.44468653343024994,0.8120572176173921,0.7870634979666526,0.41377620664894876,0.0516579260623069,0.33922321877536243,0.7208450955862387,0.8683081308663301,0.07186511462010187,0.014576787011800818,0.24126758193405012,0.983371349263298,0.9323541436567951,0.13734374658631038,0.0001631068977558936,0.15539378688587796,0.9446142704542058,0.9762108257042588,0.2197570770019428,0.181514436735063,0.08561182052658978,0.8850953585715677,0.6976502656482453,0.315256709801402,0.10614628710774887,0.03518024119174079,0.8075939254713979,0.7917009085597062,0.41938316726090324,0.049169641275649545,0.3338490470932459,0.7157289998801977,0.8721302037696386,0.07483008570437771,0.16646232400764355,0.23641828704210804,0.6137903322112631,0.9351824022786549,0.14128195338272065,0.25427225744609017,0.1512958128228229,0.9419841148748336,0.9779132008842808,0.2244846198978353,0.01020109217560844,0.08245652744231063,0.88144347597509,0.9983272301917303,0.32055283012352875,0.043223775871803816,0.033114969539900896,0.803090845195064,0.7963005868283906,0.4250005558845413,0.09757621065229555,0.3284963674993108,0.7105849990276161,0.8759041405953953,0.5329504767904446,0.1707203399295149,0.23160308717832434,0.6082456164936053,0.9379543688456022,0.1452665613568268,0.25924060486228445,0.14724294461687504,0.9392967874200944,0.9795537566616644,0.22924780147494445,0.35900343825249625,0.07935524476829275,0.8777422526033805,0.9987597673253691,0.32587216243650735,0.0455661681770515,0.03111009076616189,0.7985485592743571,0.8008619377915197,0.4306276458950103,0.10097711620744271,0.32316587237755995,0.7054137584193207,0.8796294531743688,0.5386225603199897,0.1750209490918509,0.22682260520220288,0.6026868989041905,0.9406696847960468,0.14929705508849767,0.26424009517630925,0.1432357065178167,0.9365526357032737,0.9811322808259542,0.23404600560247668,0.36446835211180745,0.07630837366408133,0.8739921672199836,0.9991277884949814,0.3312140186698986,0.0479673427632028,0.029165864207172987,0.7939676552666026,0.8053843714256518,0.4362637094125564,0.10442963648314874,0.004009558033105043,0.7002159469696767,0.8833056596270086,0.544289647913865,0.17936359519888712,0.22207745948239205,0.5971148984786093,0.9433279988963135,0.15337291322215152,0.2692700816901781,0.13927461687304854,0.4894789453631189,0.9826485691906559,0.23887861161937396,0.3699507973669778,0.0733163082509336,0.8701937049088808,0.9994312460960044,0.3365777078397315,0.05042698903164211,0.02728254135405067,0.7893487257244836,0.9928923410094717,0.4419080173966776,0.10793332488630714,0.0033229219138651844,0.6949922370300612,0.8869322844257788,0.9606236507541313,0.18374771651726346,0.21736826381669716,0.5915303359706247,0.9459289672860749,0.9916505967112695,0.2743299137611361,0.13536018806054056,0.48379430858895756,0.9841024256196498,0.7541031204795099,0.3754500648484551,0.07037943556083809,0.8663473570117435,0.9996701008753532,0.8406791007631802,0.4823862347520296,0.02546036581984762,0.7846923681193914,0.9919050405091927,0.9113466339012716,0.11148772820507169,0.0027005323570022943,0.6897433043018932,0.8905088584566679,0.9628058088827554,0.18817274594868566,0.0031627347595816757,0.5859339337589397,0.9484722535228307,0.992653673593709,0.2794189368858227,0.1314929264225541,0.478111768066083,0.9854936620525603,0.7589841668299617,0.3809654432106854,0.06749813548645106,0.3713117014102699,0.9998443219364973,0.8448193571637707,0.48807042069194745,0.023699573308040456,0.7799991847641414,0.9908541107228788,0.9145527657741813,0.11509238666748062,0.0021424698703378375,0.68446982774923,0.9589428378440973,0.9649281017919427,0.19263811110328127,0.003833461740958277,0.5803264157537559,0.950957528625428,0.9935930243523403,0.2845364927849332,0.12767333220014515,0.4724320588469274,0.986822098529083,0.9992089881660899,0.3864962190241273,0.0646727807319562,0.365825022276931,0.9999538867434574,0.8489150102208283,0.4937561497561506,0.022000391582041257,0.7752697827350626,0.9897396875912223,0.9177052740930758,0.601307645075983,0.0016488066408075763,0.6791724895109402,0.9566564661899437,0.9669902549571987,0.19714323437363973,0.004568369244964343,0.5747085073031339,0.9533844711166155,0.9944685274795284,0.2896819194883692,0.030622746677675228,0.46675591561768565,0.9880875632122621,0.9988569585148439,0.39204167686753644,0.061903736764854445,0.36035569905038956,0.9999987811237208,0.852965530150231,0.4994426864797604,0.020363040435735225,0.2604763520517332,0.6407142262137725,0.9208037510722302,0.6068697205609359,0.0012196065251241506,0.6738519748124683,0.5343561616957849,0.9689920016332725,0.2016875330095277,0.005367362209268922,0.5690809350991675,0.426393792184512,0.9952800697265072,0.2948545514208659,0.03261262272169513,0.461084072603282,0.8247553712016423,0.9984404003276206,0.3976010994205069,0.0591913617686895,0.3549044392028269,0.7355003754203595,0.9783254177496457,0.5051292952934251,0.018787731665050267,0.25550022893466573,0.6352483878460783,0.9238477959150236,0.6124179721500999,0.000854925041517185,0.6685089718771985,0.5286808034983108,0.97093308288866,0.7144571477483859,0.006230337281908249,0.5634444270839832,0.42077393228051385,0.9960275461180284,0.3000537194880869,0.03466295662377494,0.455417263472396,0.8204105651705558,0.9979593674873807,0.4031737675562588,0.08482508547428813,0.3494719478698759,0.730468828579784,0.9766383381225,0.5108152406184681,0.017274669040560076,0.2505557325434649,0.6297650547229997,0.9268370148657836,0.61795168216169,0.0005548093625514228,0.16328763691594456,0.5230017353590812,0.9728132476390987,0.719580218766811,0.007157182834654996,0.5577997123555805,0.41516432048887314,0.9967108599659404,0.30527875116317243,0.036773483167517995,0.44975622124256015,0.311288416379198,0.9974139222170608,0.40875896043465915,0.08802073926770543,0.34405892775941016,0.7254074699548025,0.9748896039997623,0.5164997869620365,0.01582404828112627,0.24564350246250033,0.6242649361289371,0.9301897072151517,0.6234701347949155,0.00031929830902527323,0.15910557974248835,0.5173196918813656,0.9746322526800455,0.7246748864728141,0.008147778977457276,0.5521475210735192,0.40956568242848757,0.9973299228816952,0.8153881564355594,0.03894392935044205,0.44410167818534263,0.3060346193142902,0.9968041350715251,0.41435595559546473,0.0912696837250983,0.007296156078199056,0.7203169542462396,0.9730794415850585,0.5221821990122401,0.014436057028581362,0.0005168455342210443,0.6187487435195383,0.9272636973847196,0.6289726162225695,0.0001484223449489397,0.017061540909964812,0.511635408053302,0.9763898627181355,0.7297404918569481,0.00920199757394713,0.08528279150093476,0.4039787422987722,0.9978846547877818,0.8197803408418546,0.041174014419292526,0.0349637162472165,0.3008059122112088,0.9961300849284376,0.41996402905177427,0.09457149858645891,0.006360106146144295,0.71519793992647,0.971208085027935,0.527861741733265,0.16690098613041027,0.0008076434231504281,0.6132171904296698,0.924282419805892,0.634458414683365,4.220357360396054e-5,0.01856560743983554,0.5059496191528234,0.9780858504016187,0.7347763796690583,0.01031970225801504,0.05880476731194617,0.39840422278598187,0.9983749839280842,0.8241311607710653,0.04346344990635925,0.032904682282748676,0.29560297141776976,0.9953918589780603,0.425582455383678,0.09792575675284548,0.005487909908233168,0.20234630120710317,0.9692757763935704,0.5335376804604534,0.17116343559299685,0.0011630132327299925,0.6076709923811189,0.9212462601152211,0.6399268205740032,6.557346839963785e-7,0.020131948848287784,0.5002630606525489,0.8535461099491353,0.7397818985030404,0.011500748451449272,0.06150893800014301,0.39284284496973043,0.9988008468771633,0.8284400534325249,0.045811939666790036,0.03090606839762372,0.2904264699488453,0.9945895527119746,0.9017612792142642,0.10133202434162886,0.004679680185476487,0.19779639945460264,0.9672827656314649,0.5392092809953338,0.17546842098039078,0.0015829089948857789,0.602110866790039,0.918155611048413,0.645377126540963,0.2647592355459912,0.021760362524701093,0.49457646812464673,0.8495021443960595,0.7447564008811024,0.012744983382637853,0.06426982872759579,0.38729532822971663,0.9991621885484616,0.8327064614589752,0.04821917991689817,0.12712627360893808,0.2852770773993074,0.993723269910729,0.9051203674994672,0.5795165895562197,0.00393552152463833,0.19328558857891048,0.9652293105431069,0.5448758097005922,0.6837070801478176,0.002067276394932427,0.11561652221398305,0.9150108723895263,0.6508086275719984,0.7793191332354614,0.023450637829234178,0.4888905771456872,0.8454129697678894,0.7496992433375168,0.37051913812975246,0.06708708236540484,0.3817623901526702,0.7596855659216684,0.836929832978664,0.47729221004657263,0.13093895031146568,0.28015545985741397,0.9927931226304147,0.9084270523376237,0.5851256513123131,0.003255530184712585,0.1888144520659677,0.9631156767486275,0.9608522471421497,0.6889840412127035,0.0026160527785985543,0.11200465217863598,0.9118124509192586,0.6562206210873345,0.7840175791504838,0.025202556120072217,0.48320612320149303,0.8412791150107437,0.7546097865018551,0.8657885522986746,0.06996033449397127,0.3762447464395305,0.7548093135225207,0.8411096216867309,0.4829743874837279,0.1347993660879226,0.27506227981864817,0.9917992311881714,0.9116809059998465,0.590723701828492,0.21669190923895892,0.18438356826972607,0.9609421376524405,0.9630282228923859,0.6942365566658878,0.003229167160131663,0.10844297042137863,0.9085607603623289,0.6616124070305475,0.7886792866011796,0.027015890781708407,0.05078662979801862,0.8371011148502407,0.7594873951816923,0.8696417673441069,0.07288921345013566,0.37074311081286815,0.7499001008294965,0.8452452869158735,0.48865876723124696,0.13870702158278403,0.2699981961000232,0.6510296813864208,0.914881507591109,0.5963100169813417,0.2213958682920385,0.17999351033733646,0.9587089744078774,0.9651443046533141,0.6994639470798779,0.003906540231480127,0.104931937655659,0.9052562213339606,0.8060335398587932,0.793303652582716,0.028890407254257455,0.04831857437289083,0.8328795097223292,0.7643314384447706,0.873447168198165,0.0758733403752534,0.36525819492456346,0.7449585628629208,0.9813548697739205,0.9361520897711917,0.14266141132993604,0.26496386375486203,0.6455989620284609,0.9410567050131062,0.6018838741654496,0.22613586556495147,0.17564484613501063,0.9564164758808189,0.88016283225557,0.7046655362771753,0.3223987564782656,0.10147200804333717,0.9018992612854742,0.801516768917211,0.7978900789204828,0.030825863063796588,0.045908945197264794,0.8286148457033814,0.9988168422528764,0.8772042626216574,0.0789123292642015,0.011550246013145193,0.7399853388244824,0.9797853114535369,0.9389044099420825,0.14666202381805932,0.2599599339880649,0.640149409039539,0.9383495907541264,0.6074445523868762,0.2309112879258584,0.17133813817456617,0.5337690230164669,0.8764445742271278,0.7098406514177404,0.3277259942457383,0.09806362913593786,0.8984903144489946,0.796960995942403,0.8024379723474686,0.032822007853730184,0.043558053963380805,0.8243076744395577,0.7036104434357044,0.8809125646239638,0.0820057870153092,0.010366620331300536,0.734981072014552,0.9781536915678026,0.9415999566060107,0.15070834155679413,0.2549870540718737,0.634681727334501,0.9355857747555901,0.9816662727620996,0.23572151766058624,0.16707394354066385,0.5280932468196529,0.872677622045308,0.7149886230860267,0.3330755161353196,0.09470724181675882,0.8950298217812831,0.7923668102362831,0.8069467445810012,0.43822426727587693,0.04126620476556281,0.8199585530754485,0.6984035555936762,0.8845715945258995,0.08515331348120686,0.009246330089838883,0.7299464097489691,0.9764602211712907,0.9442383810865131,0.15479984114367945,0.2500458672621461,0.6291966241731929,0.9327656145247889,0.9831608872092581,0.24056593255253123,0.1628528138187476,0.5224138366831749,0.8688624629758589,0.7201087853775715,0.3384466301714646,0.09140328024384115,0.8915182309066971,0.7877348060695584,0.8114158123988435,0.44387126940392824,0.03903369406088314,0.31074356664798297,0.6931710036995451,0.8881808790217631,0.0883545015205861,0.008189520201420997,0.2157402985897025,0.9747051193191103,0.9468193420960404,0.15893599333185648,0.0003110668865726196,0.13401090153018141,0.9298894748572976,0.984593003450947,0.2454439059631443,0.15867529502369493,0.06937183439058264,0.8649995905202246,0.7252004759851319,0.34383864158562405,0.08815217179380969,0.02484150123744927,0.7830655826048598,0.8158445977146354,0.44952553193949674,0.036860810630814866,0.3054923346256744,0.6879134645984617,0.8917399512405597,0.09160893705086465,0.0071963273673470995,0.21108050858627764,0.5839864865762586,0.9493425057801024,0.16311626309852817,0.0005439430605261864,0.13016014841075785,0.9269577277897867,0.9859624362389448,0.2503548069129888,0.15454192752918855,0.06650993400630528,0.861089504351708,0.9998897280406889,0.3492508529061149,0.08495433700659077,0.023102093693910808,0.7783597438192373,0.8202325276526701,0.45518632348798693,0.03474783554387706,0.3002662627112259,0.6826316183677412,0.8952483508063925,0.5632144261174175,0.00626688005987458,0.2064580911231732,0.5783752754781746,0.9518075457604542,0.16734010971416585,0.0008414252655057353,0.12635723510545693,0.923970752551899,0.987269008433309,0.2552980001633589,0.018724819724400155,0.06370410676853194,0.8571327102508375,0.9999768203862491,0.3546825640483397,0.08181018953101415,0.021424374221831244,0.7736178984260351,0.8245790346219979,0.46085291181025706,0.03269504211927804,0.0014923437525373173,0.6773261482288939,0.8987056238980133,0.5688512830170371,0.005401298505599339,0.20187364412295306,0.5727539263200775,0.9542141431773141,0.17160698681245423,0.0012034750213601453,0.12260265353169875,0.46478436659716116,0.9885125510252898,0.26027284629845016,0.393972087067057,0.060954715618824706,0.8531297200399421,0.9999992393385821,0.360133072405345,0.07872013607130651,0.01980855983889357,0.7688406597961519,0.9881378224877223,0.46652456391733677,0.12374915276258713,0.0010855586594339384,0.6719977404592479,0.9021113233075255,0.5744792338115753,0.20327578864361473,0.1973277605965958,0.5671231662391257,0.9565619867306082,0.6789560004476438,0.2966583417869637,0.11889688935505954,0.45911418976196183,0.9896929031591921,0.26527870180806923,0.3995361942161504,0.058262116198580904,0.849081051516947,0.9999569819977341,0.36560167293870527,0.5071053327875624,0.0182548595551853,0.7640286458787003,0.986874928932802,0.47220054616524093,0.12751861137332804,0.0007433095378714949,0.666647084303178,0.9054650084982319,0.580097550509933,0.207871945852801,0.0065451904134451455,0.5614837235898071,0.9588507727202384,0.6842542970990917,0.3018665741443416,0.11524042192644918,0.45344930162010816,0.9908099121531821,0.2703149191708739,0.40511329663812773,0.05562665680302936,0.34758862415985325,0.9998500538298095,0.37108765826972157,0.5127908753302219,0.01676347434616232,0.7591824791210732,0.9855490567507785,0.4778801243498686,0.13133625148835926,0.00046564065872634064,0.6612748718829498,0.9485747242995406,0.5857055063672088,0.21250589063882724,0.007494203968285595,0.5558363278497238,0.9610802050853668,0.6895287599444024,0.3071004356117889,0.11163372422010609,0.4477904349406475,0.9918634335190377,0.7845017252198241,0.4107026729192688,0.053048678336177824,0.3421825345717058,0.9996784686662648,0.3765903187709229,0.5184747633375587,0.015334597126652194,0.7543027863884282,0.9841603774469088,0.48356256380197454,0.6253841510088228,0.00025258793924076706,0.6558817981091914,0.9460337970148498,0.5913023759787047,0.21717702358803848,0.008506924518560055,0.5501817095252323,0.9632499954427125,0.6947787067171276,0.31235924917475816,0.039712160041192435,0.44213832171373424,0.9928533309808383,0.9965771771271006,0.41630360005819556,0.05052851426671584,0.33679685911194096,0.999442248702118,0.8700378077443267,0.5241562615828396,0.013968412725899992,0.2390763762972669,0.9827090706507255,0.9336366297391596,0.6308809155198021,0.00010417893837699754,0.6504685605910053,0.9434351740171365,0.976986233660038,0.22188474047638723,0.009583221066046699,0.5445206000569505,0.8834545037289874,0.9980623542050626,0.31764233459107893,0.04196290309061218,0.4364936930559451,0.9937794764925918,0.9958808149191081,0.4219153535593944,0.04806649058487977,0.33143229443266875,0.9991414244930792,0.9705434855744879,0.5298346351484543,0.012665097863660268,0.23424238081819415,0.9811953240928021,0.9364395455853591,0.6363607502200977,2.043285325237232e-5,0.6450358595457303,0.9407791914455177,0.9786607551659852,0.22662843234759167,0.010722954388791672,0.5388537317251437,0.8797803096531471,0.9985302874433584,0.322949008478949,0.04427289451330291,0.4308572791157066,0.9946417502547991,0.9951203091475953,0.4275372075269316,0.045662925760285134,0.32608953445526084,0.9987760349515971,0.9685900535846554,0.5355091495209784,0.011424821127337781,0.22944276182680573,0.9796193335804686,0.9391860067616608,0.6418229462778401,1.360516656112587e-6,0.6395843977083665,0.9380661928587309,0.9802733605710674,0.741514138830813,0.011925977059117632,0.5331818375550027,0.8760569899372678,0.998933734401489,0.32827858440533164,0.046641835505444984,0.4252298089788491,0.9954400407299488,0.9942957581861005,0.43316843475835,0.10252783436168211,0.32076927028059,0.9983461273418257,0.9665760081672357,0.5411790706861845,0.010247742950180216,0.2246781401671763,0.9779813029724844,0.9418756580056673,0.6472667971427668,4.6964395647941526e-5,0.14144351708739378,0.9352965291906943,0.981823841280287,0.746477711803744,0.013192133462693933,0.5275056512218238,0.38537088569563005,0.9992726428924678,0.33363037297474785,0.04906941963792799,0.41961201057429676,0.2834940795642701,0.9934072686925853,0.43880830683873456,0.10600348707137586,0.31547219009963423,0.6978632274962617,0.9645016098446086,0.54684366522399,0.00913401559052579,0.21994913215637807,0.5945977811661851,0.9139054531272424,0.6526915986376177,0.00015723859123922823,0.1375034083354189,0.48691497022994373,0.9833119967346493,0.7514094021986689,0.014521259818665921,0.5218259069561071,0.37984318152555907,0.9995469690775378,0.8383873215759838,0.051555332895988015,0.41400461057990845,0.27838226942499156,0.9924549555956386,0.4444560942349352,0.10953010432656807,0.31019897910445754,0.6926280582681897,0.9623671269459708,0.5525022004033258,0.18573836787141368,0.21525634950475891,0.5890077894457375,0.9106884728409245,0.6580966490492213,0.00033216883915587747,0.1336101895264581,0.4812311878433458,0.9847376344371044,0.7563085720877094,0.015913184200840313,0.06907307122855316,0.37433101997437224,0.9997566774718439,0.8425518379268511,0.054099253719826546,0.40840833432847967,0.27329912615595814,0.9914389420796097,0.4501110663899336,0.11310722994950173,0.30495031939957834,0.182853320129033,0.9601728355726258,0.5581539442769179,0.1901816598288638,0.2106003992368154,0.5834062843200032,0.9074183688576372,0.6634812492192637,0.0005717325116834648,0.12976436425919963,0.4755498332548367,0.8356389793558081,0.7611745877496054,0.0173677265599243,0.0662169567007534,0.3688351140555072,0.9999017409490214,0.8466720442441095,0.05670085304620481,0.4028239057139188,0.2682453072758989,0.9903593595686748,0.9159812054180241,0.1167344012290219,0.2997268899137372,0.1784775828361878,0.9579190195622695,0.5637981657759668,0.1946650276508859,0.205981883612673,0.5777939903592599,0.9040955641744317,0.6688447026347268,0.28685366185318395,0.02955610184880414,0.46987164136344456,0.8314023486221729,0.766006819751688,0.01888469874681553,0.07692322042835054,0.3633561746796906,0.9999821407447059,0.8507474075676047,0.05935979435100941,0.14404645134722116,0.2632214665103515,0.9892163477098364,0.9191093957504995,0.12041114898042854,0.0014472540213437135,0.17414343536284776,0.9556059704522758,0.5694341348047126,0.19918789140137416,0.004920786120709508,0.10028169404338833,0.9007204886053422,0.6741863155179841,0.29201144068447005,0.031512676491040614,0.4641973466590938,0.8271228500724012,0.7708046430312989,0.020463904536939637,0.07998118273748572,0.3578949105629794,0.7382497908904387,0.8547774007377487,0.06207573369278224,0.14806300585485366,0.258228253707101,0.9880100543548593,0.9221833731161906,0.12413699760616709,0.0010471453379151674,0.16985143834305105,0.9532339874419846,0.9698749519145287,0.20374966603531475,0.005748648210229745,0.09689133310751424,0.8972935787257863,0.6795053969165427,0.29719612341476687,0.03352985127244318,0.45852768312759684,0.8228010372715409,0.7755674369766441,0.40011276767785003,0.08309347564960895,0.3524520281350865,0.7332348877548445,0.8587615024637087,0.06484831975721062,0.1521250843921721,0.25326631475212047,0.9867406355411467,0.9252027398875696,0.12791146515734814,0.23740115807497497,0.16560214695855746,0.9508033773539998,0.971788590531016,0.20834976147446266,0.006640443087679415,0.09355311539961442,0.8938152778160948,0.6848012587924197,0.3024070393909335,0.0356073652658398,0.04048364192529008,0.8184374692581058,0.7802945855070708,0.40569117379242514,0.0862596965809701,0.3470282314480025,0.7281898150373914,0.862699197390838,0.06767719390257054,0.15623216151801228,0.24833629148602349,0.6272865450082825,0.9281671055011415,0.13173406339608917,0.24225730616622415,0.16139611086703404,0.948314454594501,0.97364120198026,0.21298758268367007,0.007596055396909107,0.09026747272744001,0.8902860358041712,0.99699801562403,0.8129594573566881,0.03774494973901349,0.03827181996716078,0.8140327104717632,0.7849854771527605,0.889423409753012,0.08947943597207958,0.34162422208492393,0.723115225332277,0.8665899761673389,0.9477027370360586,0.16038370597051743,0.24343882162104047,0.6217790888530956,0.9310760865079636,0.6259537655183345,0.24714679399225725,0.1572338741309552,0.9457675411125743,0.9754325466218136,0.7269631040872386,0.00861536152680703,0.08703483009801527,0.8867063092072918,0.9975880747669051,0.8173741096874343,0.039942328189463305,0.036119723834177275,0.809587330680321,0.7896395051338232,0.8929649245626126,0.09275227734068625,0.33624069906950216,0.7180117750518028,0.8704333355101477,0.9502057387524938,0.1645791807358582,0.2385745386585289,0.616255880233836,0.9339293066232468,0.6314488109416374,0.25206898908421566,0.15311597514722686,0.943162966358567,0.9771623927402617,0.7320153877825644,0.3511362536782543,0.08385560566266115,0.8830765610730551,0.9981137695074471,0.8217477087937929,0.0421992163801711,0.03402763190596397,0.8051019049060275,0.7942560674387869,0.8964556082655408,0.09607779733565014,0.005958834959696568,0.7128801243414662,0.874228778270037,0.9526505051036316,0.16881804311769705,0.233744071807028,0.6107176335929108,0.9367263967750281,0.6369268530954033,0.2570232547424651,0.14904294657754336,0.5033850410736548,0.9788305165751946,0.737037659641747,0.3565745768297628,0.08073021066290659,0.879397260919484,0.9985750318455783,0.826079688938547,0.04451532237636813,0.0319958148004344,0.8005770133511902,0.9950379471456301,0.8998950093321446,0.09945556579170456,0.005115474051640978,0.707720936994569,0.8779758134959224,0.9550367198521401,0.17309974480738755,0.22894804590086887,0.6051650653179366,0.9394669951519117,0.9889299076689555,0.2620089501189542,0.14501531527948597,0.49769837616108925,0.8517279180116304,0.7420292700199437,0.36203145245893276,0.07765904937729329,0.8756688846742939,0.7671723461757083,0.8303694897680085,0.46849657291488167,0.030024535338786018,0.7960132413231253,0.6701408192889035,0.9032826828663237,0.10288514578509889,0.004336127834354386,0.7025348803663529,0.9663641277309643,0.9573640743345004,0.17742373195489952,0.0017933799687320229,0.5995988936490734,0.9167440107184583,0.9900882642997448,0.26702543030011017,0.14103360223837264,0.49201200896997305,0.847663498122838,0.7469895732384596,0.3675061747037143,0.07464251906908109,0.3847981337675792,0.7623483929973434,0.3341854602954727,0.04932398178496872,0.028114048511503564,0.28296375732494206,0.6647825934958909,0.43939243117392135,0.1063660936901159,0.0036208971184391037,0.19126416633740484,0.5595220596439359,0.5474295501393287,0.18178944524046103,0.002306803978937677,0.11398139070709096,0.9447773059180999,0.6532518854862521,0.27207204639025984,0.02423313235598573,0.05472424866976633,0.9834624367004723,0.7519179276682683,0.372998035393548,0.0683760042503122,0.01625982840309448,0.9995716695076156,0.8388203394181366,0.4798545438704416,0.1326741116955294,0.7867714221467017,0.9923527630717384,0.909901101265191,0.5876517702350563,0.21412497217491822,0.6920848459782412,0.9621428134789423,0.9618410059543393,0.6913559848743344,0.30892513338983296,0.5884286217953704,0.9103525130355388,0.992214653081968,0.7861245866023887,0.41264778033841004,0.4806431098081211,0.839400276183188,0.9996037062756202,0.8675322341280342,0.06877490505408113,0.3737614926116894,0.7525993085376665,0.3449572063468726,0.9317774930368715,0.02447643337152644,0.27277474427579207,0.6540028925072009,0.45069666995434454,0.9758603486423066,0.0023831439535713095,0.1823985704152044,0.5482151140766679,0.5587384157340286,0.9977222955154644,0.0035267112592305416,0.10685320227352185,0.9498574913967565,0.6640372959254611,0.9963424620338945,0.027853734947835274,0.04966632761756967,0.9862380302932134,0.7616762443914429,0.9717852812900938,0.07422823347636615,0.013508360836862854,0.9999130613150704,0.8470958853218895,0.49122293797219757,0.1404846902132154,6.774452190350111e-5,0.9902440113660089,0.9163074391295232,0.5988254036689361,0.22352917501212433,0.009972105473899928,0.9576823891230157,0.9660789836237966,0.7018130905096018,0.20550608342217402,0.04275894686706333,0.9037487012601618,0.9940863727588645,0.7953768564920003,0.12557614306818893,0.09689724513051662,0.8309614504411278,0.9990217656112805,0.8751476216739277,0.06313040448854207,0.3627901665526442,0.7427195306101934,0.9806546976877448,0.9374003879594746,0.021084851462207566,0.26270329630159595,0.6431435112842736,0.9398428427599277,0.9792281826582081,0.0014028549635942134,0.1736972996942478,0.899414770174921,0.8784919626887056,0.9986778032998557,0.005003491039093533,0.09992842579165351,0.9547049231283613,0.7994669154320848,0.9948410249264259,0.03171862337341874,0.04484140668580022,0.9887620470517924,0.7712991712910372,0.9678970108203926,0.08030075463029146,0.011008601320602718,0.9999958009038863,0.8551918457581557,0.9191039462456461,0.14848127993906318,9.875894877331426e-6,0.987881610153942,0.9224983818559815,0.6099479053923348,0.23307642230606845,0.012358829985797737,0.9529851624617698,0.970075814636957,0.7121657791819012,0.33013590316093583,0.047478813358528604,0.8969359921675617,0.9957024549131541,0.8044763000500386,0.11813602583999577,0.10372985338784246,0.8223513870978427,0.9981816338797083,0.882568909941023,0.057711937805449864,0.17848523568126412,0.7327141709567013,0.9773975830980346,0.9427969743705902,0.017941057569035468,0.2527546243131399,0.6322100684101464,0.9343208404514098,0.9823480666958617,0.0006805373445420981,0.1651648561632829,0.5255322473093728,0.8709629296348957,0.9993752979811881,0.006736379240938006,0.09321064410206192,0.9593170930788801,0.7902824294788959,0.9930835598435447,0.03582579796110641,0.040251982261530816,0.9910331810640717,0.6960468193196401,0.9637666530573031,0.08659042582364651,0.008761843215890242,0.9998198454650633,0.8631040319223391,0.9127935681506057,0.15665974348232575,0.00021069935834616693,0.9852667817286962,0.9284707262854663,0.8425445586384721,0.242761774364461,0.014997857308492402,0.9480535638139767,0.9738294310558346,0.7224086944680833,0.3408758738095874,0.05243281177804959,0.8899179106152748,0.9970620633929795,0.8134182092753597,0.44642047822380587,0.11076748960009314,0.8135745409518942,0.9970837457603567,0.8897922591963263,0.05252230848912548,0.18727787824550862,0.0030353657803331435,0.9738934656720385,0.9479644601066278,0.015046678273366643,0.27839122707850217,0.02645636599479745,0.9285741229720413,0.9852183865447364,0.00021656481950632633,0.1568056544608149,0.07199009298299447,0.8632419624385164,0.9998144186796193,0.008724479278111597,0.08670333294737687,0.13751029101773038,0.7809477530221441,0.9910709760878438,0.04017313368176495,0.03590042888725975,0.3031322287086159,0.6855343282808235,0.9593963450248039,0.09309399281577507,0.006769248982787912,0.20899114266372887,0.5814571403426,0.9062696129748604,0.1650158493517615,0.0006701110073746297,0.12843908810171983,0.9342213823604117,0.8341716007660023,0.2525802200403805,0.017887822024024613,0.0652375464272209,0.9773378907803129,0.7464690174624384,0.3516981743901073,0.057618378954584326,0.022337794613182638,0.9981644947445266,0.8221979576742009,0.4577412725159646,0.11800651253370004,0.0017430915409489267,0.9957286692943914,0.8968139321193807,0.5657576960706878,0.19623232148444741,0.004415133259879911,0.9701441584204912,0.9529001715394032,0.012403211110841528,0.2886429514217899,0.03022914535804022,0.922605663641267,0.9878376571174146,1.1177445273402586e-5,0.39092316956874007,0.07797970946324623,0.8553330558847607,0.9999949381965587,0.010966762518787532,0.08040985917395177,0.14543705179854038,0.771467715771158,0.9888043149588888,0.0447583812482355,0.03178899803233626,0.22945116532586768,0.6749258428194621,0.954788347895799,0.09980809069753244,0.005031849578394365,0.19981864804284966,0.57021558349286,0.8995354561762865,0.17354527414498405,0.001387873144947871,0.12092528705857636,0.939747374723566,0.8256257443785047,0.26252667932501306,0.021027228880833027,0.05973330552947009,0.9805993785529762,0.7365105212004219,0.3625972055047751,0.06303283190471232,0.01910014144250549,0.9990091785759871,0.8308110026539032,0.46908393123709385,0.1254431767587324,0.0009232124607767567,0.9941171055907879,0.9036302957359336,0.5770143224151708,0.20534393241928955,0.006051313574428452,0.9661516012139703,0.9576015549594588,0.010012023796567682,0.29900403071850884,0.034244981530971885,0.9164185505065239,0.990204523217969,6.448148812060461e-5,0.4020498933532156,0.08418767687870032,0.8472403019975937,0.9999167631322191,0.013462068818172912,0.07433347898987636,0.1535472614633589,0.7618472226441275,0.9862847492144555,0.049579168279102526,0.027919816928062502,0.23908490060758525,0.664226851706531,0.9499450458222004,0.10672924563227054,0.0035505439234327363,0.19080146557259425,0.558937697493396,0.8925945819699037,0.18224360478536622,0.0023636144049551944,0.11360761714926304,0.4508963719749022,0.8169114110542217,0.2725960059760204,0.02441445356738914,0.05445685615414542,0.9836122068983137,0.7264296557190876,0.37356732805592163,0.06867336922079575,0.01611130316582582,0.9995956778526766,0.6253744774703397,0.48044258575908516,0.1330736345867622,0.0003615529158746411,0.9922498884635824,0.9102378232976186,0.5882311019804812,0.21460799675355824,0.007943060173445982,0.9619178597792177,0.9620661778973386,0.6918995538383508,0.3094691042042481,0.03850179674244353,0.9100159847455028,0.9923177602431326,0.00037644936883468594,0.4132272959743942,0.0906107832617778,0.8389678879225606,0.9995799339339411,0.016209107118761,0.5210374503468189,0.16183672383511866,0.7520912512303262,0.9835135824637518,0.0546330005261505,0.0242948874670762,0.24885363190072274,0.6534428905401225,0.9448689447013807,0.11385387665318142,0.002326098437154367,0.3475981414357483,0.547629317459273,0.8854505815251603,0.19110634080534133,0.0035968299443323026,0.10648986449521536,0.43959163236895943,0.8080331095404186,0.28278299018017694,0.028047743552607085,0.049410928306607926,0.3343747934105521,0.716231636801787,0.3846028661635667,0.0745370725204117,0.013372826191331899,0.9999236891231532,0.6143329507103045,0.9248875484809888,0.14089393806163636,5.840350574620734e-5,0.9901279840004611,0.5070953409827714,0.858344370331656,0.22401972131224135,0.010089394277835007,0.9574451246303453,0.9662917303821346,0.7750678426385258,0.3200327573085859,0.04299738854010088,0.9034012790098772,0.9941762748159014,0.6789466695701417,0.42444959430674806,0.09724570533320248,0.830520093760382,0.9989846248752656,0.8755364247138258,0.5323943543066608,0.17030114999240586,0.7422048492147344,0.9804922484929371,0.9376852059339043,0.6388264184231214,0.2587523049184095,0.6425795388813588,0.9395626708796361,0.9793957156268969,0.0013591466407974484,0.3584688300934268,0.5362962942829993,0.8781071511078836,0.9987202280961591,0.005086881704264579,0.46479433460080355,0.42831814771416965,0.7989954334205844,0.9947563604701187,0.03192521899259321,0.04459813272167101,0.323687277088689,0.705921740846404,0.9676892106267485,0.08062090795630694,0.010886127391676048,0.2272895549811078,0.6032322687217843,0.9187827138109759,0.148900041002127,1.3921078198642078e-5,0.9877524900629113,0.4957222335306313,0.8503206215588537,0.2335742365217537,0.012489205386348456,0.9527357099354732,0.3884119541261604,0.7654998589932585,0.33068952445655764,0.0477294309299211,0.8965778557113553,0.9957791053512426,0.6682812403088372,0.4357109819959597,0.10408901022144718,0.8219012903524539,0.9981311439657663,0.5632045134779271,0.5437344976089782,0.17893616048852362,0.7321931317663957,0.97722231052329,0.9430700052300998,0.6497157748161411,0.26877579814265434,0.6316424173675583,0.9340289697933288,0.9825027246913375,0.7487058820771979,0.3694127461859048,0.5249444916073062,0.8705680901678515,0.9994043611593575,0.0068329987403150105,0.47614763337638805,0.41708175084836685,0.7898030587377368,0.9929856710620623,0.03604487370326703,0.5839963373900302,0.3130909839823893,0.695505302135375,0.9635463833582519,0.08692172778609375,0.008652493370892855,0.21782817311866526,0.592078174935481,0.9124612033098295,0.15708780109540332,0.00022812864819093948,0.13574173727723415,0.48435133937090885,0.8421156188580927,0.24326659892942676,0.01514125185015669,0.9477920523193943,0.37735523806611176,0.7557945072076262,0.34143389189651396,0.05269547557966908,0.8895492452509437,0.2760861910729428,0.657528743276095,0.44700563246309744,0.11113715723888212,0.8131159370193979,0.9970199327916867,0.5519069728249292,0.5550520129271258,0.1877372876173934,0.7220612788918568,0.9737054604024056,0.4438613397657474,0.660527669105611,0.27891892547418995,0.6206371848041495,0.9282707045484153,0.9853600895478183,0.7585072800801234,0.3804242273922771,0.5135797827913332,0.862837299372979,0.9998301052025289,0.8444155623682283,0.48751327323290117,0.4058882554203707,0.7804607415750633,0.9909599136282934,0.04040457619834942,0.5951854027800123,0.3025913965543718,0.6849877100757616,0.9591637197866543,0.0934362720008739,0.6984127279767413,0.20851278537941748,0.580876440417062,0.9059262876916856,0.16545298204024078,0.000700915385925871,0.1280455431936839,0.47298854174057053,0.8337336074518262,0.2530917937612236,0.01804416151526944,0.06494719097921725,0.36636197771913287,0.7459568087762974,0.35226030055290514,0.05789295308565051,0.8823190841923376,0.26597581238764223,0.6466947417536711,0.4583277019192545,0.11838649971370685,0.8041685792538348,0.17651770636791497,0.5405825757948471,0.5663410446420512,0.19669997772512093,0.7118145327550613,0.9699435177288439,0.43257535445805156,0.6712565072779675,0.28917643891573186,0.6095695352368363,0.9222908544390891,0.32771661334064905,0.7681749278638583,0.3914975764338268,0.5022080478717846,0.8549187785911346,0.9999972399480894,0.8525705765622618,0.49888537365192365,0.39474345288203716,0.7709733155951513,0.9886801362843652,0.9205024904152865,0.606325219775591,0.22994626242860094,0.6743744064108022,0.9545434874775467,0.10016117001194907,0.7088000735200577,0.32665078799237135,0.5696328608812423,0.8991813480852923,0.1739912557388597,0.8015247402816844,0.4314500771350445,0.4616397196874838,0.8251789241458203,0.26304473751635493,0.021196432432481094,0.5394503927636034,0.35543786093657004,0.7359918536693539,0.36316314890251516,0.06331917430210737,0.6456085217515782,0.25598651650658344,0.6357848411932876,0.4696713323890926,0.12583328687671796,0.000887811867503252,0.16792969435949456,0.5292371815672927,0.5775957518719583,0.20581959356603152,0.006142938228929473,0.09537932063869314,0.4213242542844119,0.6818967382924167,0.2995430312872629,0.034459352902600604,0.9160925134063126,0.31708519176033667,0.777703823441574,0.4026270640217655,0.0845147846215698,0.8468166248206306,0.22138757058827208,0.8605431727142164,0.5102580507723773,0.1539718308622703,0.7613456895390774,0.9861475185743096,0.9265464965483317,0.6174100246978305,0.23958710585042658,0.6636708824043829,0.9496880769132547,0.9726316851629109,0.7190793870745202,0.33736269461575685,0.5583532536931151,0.8922298742846333,0.18269820453625885,0.8105185567503566,0.442732840754312,0.4503107450286306,0.8164559950853152,0.2731202805974538,0.8874576645300613,0.5507771502741741,0.34458853979527654,0.7259047976987688,0.374136795872659,0.06897133173256659,0.6564503556977467,0.2461234718355198,0.6248046863164038,0.48103065474172585,0.13347366580193587,0.7548179112914672,0.15951349366777012,0.5178766601857102,0.5888103114943478,0.2150914167019548,0.008047883370629783,0.08880296920186176,0.4101138605010571,0.6924428569530124,0.31001333897193817,0.03872857848842043,0.03729381698396356,0.3065484092775679,0.7870890366160559,0.4138069318215353,0.09094893369232854,0.8385350300704595,0.21201642796562248,0.8683292258474863,0.5216254204348016,0.16227045258259332,0.7515828446866529,0.13093220856287807,0.9323698099125288,0.6284340823307341,0.24936268544549162,0.65288267599989,0.9446000002560163,0.9762203316786842,0.7292453501808552,0.34815874887025333,0.5470434548582787,0.8850754629433282,0.9978331348434077,0.8193517126565284,0.4540452340811032,0.43900747931206247,0.8075693334649623,0.28331320997494847,0.8945455377025044,0.5620776359715219,0.33381962767325957,0.7157008598508182,0.38517556375984174,0.9513155533072682,0.6672112431059278,0.2363917814585355,0.6137599581936695,0.492399791727376,0.14130368340008737,0.7645367069842954,0.1512734587878526,0.5065068895202489,0.5999789211588674,0.22451064994351821,0.8495092903610483,0.08243936880624925,0.39894997330295756,0.702889406757013,0.3205819446911906,0.04323646332482051,0.03310380754724579,0.2961117175645981,0.7963257115305604,0.4250313954321386,0.09759472349429515,0.005570562260861778,0.20279428643056674,0.8759247075017785,0.5329816012257855,0.1707438136796185,0.7416898322791369,0.1233552569216767,0.9379694175581512,0.639391688888612,0.2592679433836524,0.6420153689549082,0.06150413631150964,0.979562584461464,0.739292703026676,0.35903336493784255,0.5357093160033205,0.8777218157137432,0.9987619619869958,0.8280196377747959,0.46538140414645507,0.4277357707841679,0.7985235371937229,0.9946710105997161,0.9014292752230155,0.5733460030476245,0.32313669634535,0.7053853195858074,0.3962737411673706,0.9560936582858988,0.6778856163532327,0.22679648049773865,0.6026563713055695,0.5037728610182288,0.9894601635511102,0.7741186328662151,0.14321385306764844,0.49513375222658534,0.6110958022894158,0.23407241983218596,0.8575513285705489,0.07629181194306706,0.38783836882283707,0.7132309827180456,0.3312433803076005,0.9242877068322989,0.029155367586097047,0.28578051650727887,0.6677269506977119,0.43629464737895535,0.10444871553303964,0.004005616665138656,0.19372591746749512,0.562620684764812,0.5443207175209771,0.17938753008376118,0.7316717709057525,0.11597317916150501,0.4545902657166509,0.650277174967189,0.2692977547399166,0.6310745839532503,0.0561530653344105,0.34868031239745045,0.7492162471678812,0.36998091635306396,0.5243567013482181,0.8701727373317782,0.24983642578712068,0.8365178473692393,0.47673548567945323,0.4165014513638229,0.7893232865159352,0.16267424782636591,0.9081053154843473,0.5845764213124545,0.31254527310039754,0.6949635141065071,0.9633254714820596,0.960635782959649,0.688467952578715,0.217342533508117,0.591499670585785,0.9121282670631145,0.9916562723055027,0.7835587313024291,0.1353388465020272,0.483763132702271,0.8416862051255094,0.24377177916175924,0.8654083717247718,0.07036347932381265,0.3767847961426335,0.7552886680136547,0.341992129654079,0.9301948000066771,0.025450540001243804,0.2755601514111872,0.6569700994300642,0.44759086011849725,0.1115073635914603,0.0026972957860103564,0.18481601299973055,0.5513216109170581,0.5556369025250992,0.1881971295845547,0.003166238572031299,0.10878979472805994,0.4432765940203883,0.6610849084769216,0.2794469301460509,0.6200659816958132,0.05103163827596663,0.33788034924951776,0.7590108482182989,0.38099573891411664,0.5129914846722247,0.014238634768458935,0.24005448930544226,0.8448419445138005,0.48810160414189013,0.40531033362498836,0.7799733415897829,0.15436711806921843,0.9145702043406514,0.5957630802104867,0.3020508378814818,0.6844408355967151,0.08481951713781344,0.9649395772586463,0.6989527765408676,0.2080348319089052,0.580295628448796,0.9055824000557618,0.9935980008576557,0.792852118038867,0.1276525135752895,0.4724009140421775,0.8332951517975229,0.9992072333257245,0.8730763546335848,0.0646574382345873,0.36579497431895674,0.7454442593522154,0.3528226313879024,0.9358793128004268,0.02199124164973315,0.2654559102359946,0.6461320327119324,0.45891418905354653,0.9783283279340651,0.0016462765413738367,0.17606918296195312,0.5399959835551935,0.5669243013073961,0.1971680541445472,0.004572577124640043,0.10180882026422367,0.43199227069675433,0.6718092975570105,0.2897102184755309,0.030633496044126962,0.04614250493386052,0.32716426590108716,0.7686714385061914,0.3920721336134855,0.5016195462748081,0.011669646894273689,0.23040704717542082,0.8529876223672281,0.49947387876771837,0.39416820778931727,4.240535145250135e-10,0.14623881682979517,0.9208205968946339,0.6069001918270478,0.29165882045062097,0.6738227284313699,0.07858991823071187,0.9690028144238199,0.709334663450483,0.19887819145279179,0.5690500418032665,0.03061930338141755,0.9952843445680888,0.8019939847292701,0.12015883115305159,0.46105297499461617,0.8247316534242973,0.9984379376010308,0.880551309925568,0.05917664094909936,0.35487458942408034,0.7354728592053632,0.9783163324550586,0.9413383040784592,0.018779262353161574,0.2554730208595057,0.6352183580983483,0.47025877555711765,0.98151644060544,0.0008531027227008936,0.16748995291504615,0.5286496624953966,0.5781770738309422,0.9992095499383872,0.006235247051676551,0.09503386768709338,0.42074313419144954,0.6824447934685971,0.3000823095604446,0.034674369214137246,0.041488194918306354,0.31653760679367793,0.7781930196962383,0.40320436958657585,0.08484246795971379,0.009353318410357803,0.2208990909295931,0.8609506664014128,0.5108464256057262,0.3830808387303261,0.00012981739840256523,0.13829354964564278,0.9268532592281868,0.6179819938829499,0.2813745975794434,0.014248395080896703,0.07257835454021322,0.9728233921590128,0.7196082417774078,0.18987734973427572,0.5577687290527567,0.02682216085412842,0.9967144309320091,0.8109796014230031,0.11286167642463757,0.4497251869197071,0.003161612682101911,0.9974107528784478,0.8878293701007096,0.5513625783315126,0.34402929160399975,0.725379626719699,0.9748798423527952,0.9465689493892548,0.6570092018101992,0.2456166483727844,0.6242347222634452,0.9301738090924438,0.9844554193667182,0.7553240794237253,0.15908276170459612,0.5172885182606497,0.5893893979742442,0.9997196227709757,0.8417162719843472,0.08846844231919593,0.4095350047447118,0.6929858934656508,0.9916487780649972,0.9121515853602195,0.03707111634324417,0.30600587010120783,0.7875706653756487,0.4143866870768307,0.963340952339669,0.0072908477720984854,0.21153553993128044,0.8687269565819606,0.5222133605638607,0.992894019839152,0.0005182644061843544,0.1305354273535123,0.9326650700755988,0.6290027527158625,0.24987208621237228,0.01706962070394752,0.0667879364157089,0.9763993337186981,0.7297681960297431,0.34871956665907045,0.056172029874678675,0.02326983789123299,0.9978875200307397,0.8198043190123039,0.45463128078659365,0.43842341075156965,0.0020132651534022217,0.9961262106175992,0.8949067695314289,0.5626615453918311,0.33326469215507837,0.0040108211037107044,0.9711976520792094,0.9515685424262192,0.6677657488424714,0.2358918924077642,0.613186808078901,0.9242659153991885,0.9871437436067458,0.7650359156811793,0.15085195916425898,0.5059184290433626,0.8575225381586552,0.9999711434689447,0.8499298908285011,0.08211594107485332,0.3983736813799563,0.7034271436420585,0.9894517501396254,0.9184834413344736,0.03289355458039517,0.2955745048852686,0.7967995236030585,0.9560767801695187,0.9674953713158653,0.005483302090255104,0.20232123882933772,0.8763124694998761,0.5335688024536241,0.9946770058998556,0.0011651404670921517,0.12296846396243583,0.9382530224384811,0.6399567662468764,0.9987590638298571,0.02014071180105592,0.061221659787112914,0.9797287889307368,0.7398092695040499,0.3595980950713469,0.06152392747400903,0.019964172444740858,0.9988030049145498,0.8284635716377061,0.46596852165121433,0.1233823452029571,0.0011225731728132793,0.9945849754334577,0.9017798464108907,0.57392809171944,0.3225863606207941,0.005576694592363096,0.9672716667789301,0.9563344964279104,0.6784354948157043,0.22630378449872707,0.03311854579633389,0.9181385088970013,0.9895800224016145,0.7746106238399404,0.14280180386518015,0.49454527766402895,0.8494798375526451,0.9999639818968936,0.8579624579065885,0.07597965070263812,0.38726493890339375,0.7645017573813397,0.987001482619438,0.9245987763194979,0.028957671076822955,0.28524890827581206,0.805874819418898,0.9512978250827457,0.9714079108047038,0.0039316165788419455,0.19326095505155927,0.8837032804532505,0.894520237325032,0.9962040488476726,0.0020701108910743393,0.11559657457690031,0.9436142251415709,0.6508383669307284,0.9978293030094993,0.023460079406885048,0.055882404614784276,0.9828100351536453,0.7497262670051379,0.9762077799645484,0.06710269013799808,0.01690687484744391,0.9994604119166866,0.8369528790503895,0.47732337021217186,0.13095999545406078,0.0004899975793783429,0.9927878447524776,0.9084450446476037,0.5851563880663571,0.21205009665860497,0.007398379930688093,0.9631039177347678,0.960864345516415,0.689012919263077,0.21685728547901617,0.03730942613529564,0.911794759871696,0.9917629952343174,0.7840432499996212,0.1349364609126344,0.08882640156360683,0.8412563180356132,0.9996981417601796,0.8658098172133816,0.07006274608482865,0.3762145249161776,0.7547824751537872,0.98429924325913,0.9304944262752143,0.025265502236613113,0.27503442267870537,0.015973773722097906,0.9462853710283373,0.9750765464801616,0.0026365940712539393,0.18435937633803817,0.8908955654778822,0.8874316315413942,0.9974743585991324,0.0032327074515008936,0.10842357337119463,0.9487459043286102,0.8104862755769668,0.9966419680953819,0.027026006099222566,0.05077293339945166,0.9856414781678815,0.7595140575340309,0.9726182445100819,0.07290543144608203,0.014099526927999428,0.2395519485223941,0.8452678489302348,0.9265250063992887,0.13872858493706064,0.00011586566416738053,0.15394210282635612,0.9148989157053221,0.5963406249749255,0.2214217700761868,0.009474934588892259,0.08449187406650366,0.9651557459731799,0.6994925494844093,0.31712352262295274,0.041739699986318546,0.03444432966610805,0.9936915326469351,0.7933289137722649,0.12725999979102282,0.09540351729316193,0.006136503840288909,0.9991737606030009,0.8734679085691168,0.06436828859474208,0.16796048579715828,0.000890266788736993,0.9813464301822147,0.9361673408253486,0.02181895836724912,0.2649363330115999,0.018950598272937047,0.9410420114219537,0.9784993802106827,0.001598904604884932,0.1756211083157561,0.05947414797229583,0.8801425708010375,0.9984872779030827,0.0046523286274215425,0.10145317161597711,0.4314092811504283,0.8014918857338804,0.9951976734079406,0.030836646887565433,0.045895889752911256,0.3266121579006873,0.7087626507401974,0.9687841790223528,0.07892914909240067,0.01154358119250104,0.22991160211147954,0.8534041791583863,0.9204802067120716,0.1466840942272587,3.710009383595114e-7,0.14582317014442087,0.9211381203872996,0.8525413723593107,0.23093757831002004,0.011805284169223218,0.07827347907847454,0.9692064774516386,0.7098689633777057,0.32775527694168605,0.04640707515051962,0.030416848294006205,0.9953646368250089,0.8024628108074312,0.43261616362550936,0.10218996897731353,0.004488004487471997,0.9983911097372318,0.8809327697202085,0.05889922451279744,0.1765491119439241,0.0016977282448198405,0.978144571157644,0.9416145848356783,0.01861982269122986,0.2660122085880677,0.02217631509057222,0.9355704591484946,0.9816746410412616,0.0008190850744542177,0.16705067211565744,0.0649674911713522,0.8726568264231738,0.9992422826807477,0.00632823991478898,0.09468897575808477,0.12807306768880594,0.7923415056773325,0.9934971662171596,0.03489003016770764,0.041253797030236516,0.31599027598789586,0.6983749237267141,0.9647075672253753,0.085170726439174,0.009240360072960252,0.22041099792526048,0.5951449705213134,0.9142178529203993,0.1548224071886954,0.00014357334598325,0.13788748657102395,0.9271594305639703,0.8443857052076281,0.24059259793420862,0.014388222961856989,0.07227328303089386,0.9730144441260062,0.7584720257052184,0.33847614971563783,0.05130913675412402,0.026632326615145252,0.9967814421138057,0.8114402152779396,0.4439022646576567,0.10918224534396131,0.003095880266491824,0.9973505941020477,0.888200538389297,0.5519479352333531,0.18530508976899251,0.0027630085060431075,0.974695322809348,0.9468333399326544,0.01566975042344043,0.2761230162673816,0.025649255207184585,0.9298735451584683,0.9846006861097241,0.00029753895422029997,0.377395165390063,0.07068591775449268,0.8649782714900269,0.999738982296883,0.008259574206487541,0.08813448555457803,0.13576995148176352,0.7830398697627265,0.991541326355937,0.03918405874183706,0.03684905702420854,0.30546359967593767,0.6878845586385038,0.9603905183352661,0.09162693412923267,0.007191055243087274,0.21105505152314386,0.5839557372993154,0.9077411851310573,0.1631393131038154,0.0005453986072106454,0.13013915798441,0.9329597308431654,0.8360518548204741,0.2503818334956628,0.017222414568725586,0.06649439039159821,0.9765776757756486,0.7486701525428134,0.34928059402526673,0.056443348497907386,0.023092722719850245,0.9979412154662027,0.8202564823249865,0.4552173903439484,0.11637672862846671,0.00196085145462499,0.9960527520544122,0.8952674542735691,0.882921082228624,0.19422388897846626,0.004085556402364632,0.9710004697591081,0.9518209059616125,0.012970267914753197,0.28634965664446965,0.029367621743004668,0.9239542170032731,0.9872760014967366,3.453608922526774e-5,0.3884521008582632,0.07662646903982367,0.8571108788429234,0.9999771197618885,0.8503500065181953,0.08179309226198617,0.14365528586230203,0.7735917906043995,0.9893311657648654,0.9188052133458364,0.032683948722641964,0.22732407572030483,0.6772969831317219,0.9558352659689474,0.9677037740925178,0.005396727001725887,0.2018486036194091,0.5727230658489527,0.9010535543356932,0.9947623078071014,0.001205638882480431,0.12258219332640274,0.46475325182132643,0.8275441330853732,0.9987172815858341,0.020306392594961697,0.060939791127279985,0.9798943288044626,0.7387396188359223,0.9793840128603393,0.06180705396946273,0.01979986797935651,0.9988433568219615,0.638786852171519,0.9376652933867939,0.1237696964454642,0.001083505309423194,0.9944982550905332,0.9021298609903177,0.8755092322280655,0.20330089503557564,0.005664687654908629,0.967061923703203,0.9565747023838175,0.7958182863047745,0.29668683851286526,0.03332949083600795,0.9178155373101506,0.9896992030090983,0.7751022343799667,0.3995667505848619,0.08278607141937455,0.8490587190267647,0.9999565718647735,0.8583730913368974,0.5071365219302928,0.15172499100256737,0.7640021565856032,0.9868678279686587,0.9249092575858886,0.02876062712924926,0.23692705839949457,0.66661767515865,0.9510441669884864,0.9716037415866012,0.00385830372426077,0.3344136538978178,0.5614527678915358,0.8941584206770332,0.9962760845757848,0.0021239525671711834,0.1152205025282006,0.45341824488409,0.818866941849912,0.9977741798831976,0.02363856140760351,0.05561235915649532,0.34755891662017174,0.7286855625870786,0.9760280720288486,0.06739747801761342,0.01675546609826828,0.9994873994181961,0.6278254179487828,0.9320532233837722,0.13135732371480247,0.00046429576486917146,0.9926879074984353,0.5209963016279141,0.8679030958534328,0.21253141154821376,0.007499585230007377,0.9628817224233077,0.9610922696116193,0.7865732618428075,0.30712921347255323,0.0375328126373104,0.9114606821976008,0.9918690368959155,0.6918615221645035,0.4107333639123275,0.08916153794936504,0.8408259581839513,0.9996773492369047,0.8662107559248681,0.5185059343076645,0.15997489168230655,0.7542759293292814,0.9841525874844992,0.9307934561553644],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],18:[function(require,module,exports){
module.exports={"expected":[0.5000000000321034,0.936050565599961,0.09520084933602946,0.37258214673791384,0.9418766326431498,0.08429945833744568,0.3311271255343796,0.9605051413529746,0.1994881755893818,0.4098143348156982,0.9989990192401692,0.017174368064227397,0.07441586005885953,0.8577153531211743,0.2730688057243142,0.572221415551308,0.9625303488387509,0.2037124069666098,0.18100191574244967,0.925539887829518,0.1422257561326496,0.24777870072616393,0.42769517405669,0.03750167475937721,0.010491601858780786,0.7174233527558892,0.884180780894779,0.3994785449078844,0.9995542519651406,0.3585195800502411,0.06898390335005566,0.8502799710539599,0.7613280008100813,0.023123436187187374,0.4696879942540139,0.21225894064430662,0.17296530813484856,0.9461683139006731,0.010525985050125752,0.7175751571886094,0.8840728582285653,0.09636626863576586,0.31146169970190973,0.9949684002412588,0.44875797519093813,0.02985506194718951,0.7789969805574226,0.8349888620904561,0.05872248149273468,0.2121210810060008,0.99999998728334,0.9462443854639948,0.05861647714780405,0.00011383100959266867,0.7791841123731522,0.029931876641850985,0.4485336316007802,0.22982488850494526,0.31167060659007495,0.5407303727091651,0.7610404793305707,0.698272883285481,0.4700245625830244,0.10925411912056726,0.29197734241981255,0.9915194665061486,0.46991311883409315,0.02305569050166234,0.7611356946533437,0.850440876692242,0.9735972975225551,0.35830327545204865,0.15733065681040154,0.9362702842054857,0.6313244764660011,0.8187594403294551,0.6108393389864586,0.9461940145331496,0.17300838581077016,0.2122123716510777,0.9664061930869653,0.8350717371184031,0.0036344410752379153,0.7366840331384823,0.90983891146986,0.9949525889541839,0.2728678597485844,0.09643217017104416,0.00669053371294176,0.7174746310372135,0.7428038199054536,0.0028434237204909008,0.2922840037673602,0.24782787169457982,0.9981891502703845,0.9255099866021762,0.7614231767968239,0.001009933434617194,0.06892732627617054,0.9553682193667364,0.9995589527388433,0.19511847270376498,0.3516293385156214,0.00010445574100903521,0.8553809102953844,0.6586318496678327,0.021008876807291132,0.2124881669622768,0.3311807258763393,0.5615092473120004,0.8702147525383587,0.6789281977047871,0.01527097949747197,0.8794236248585059,0.31104608023299807,0.31814894427423557,0.12768611148231168,0.4416020677446846,0.01043457234748546,0.8650310264122687,0.9798806061902401,0.05538313018109825,0.14242157493066027,0.4202463328970839,0.9494454342631643,0.8499595499446515,0.00031925781451025426,0.04593499318584776,0.9326520366609287,0.39903892245974726,0.958473439373031,0.07285265068063551,0.5335509513851099,0.037331317979047485,0.9214440386824323,0.4772138461152823,0.10480297771767916,0.28535158637528923,0.5120107608346153,0.9017097481142898,0.9094522467949216,0.49877021721303116,0.0919643208777734,0.9712397377769817,0.995978632170831,0.9141718737515012,0.032473624925882794,0.6243644889948708,0.829356022992038,0.9635956128499009,0.3861068998223638,0.17883234730462633,0.0405507210932764,0.6033687511280298,0.8403804215715647,0.004552333208298065,0.4072036643371118,0.15180135504405162,0.99388094129196,0.9759942637220294,0.8558549561514492,0.007915438588723678,0.7109695996269516,0.1366542050226584,0.9900593624653613,0.5608399504800698,0.24163754808785226,0.9987496571797865,0.1838604759412269,0.767532805842004,0.9853263802065142,0.3187772892208556,0.22342124284377118,0.9998094811366773,0.6711323542457315,0.7854960994921638,0.9796907968291912,0.7904356132248536,0.6654426051723946,0.9999397685690815,0.2184078395128461,0.324421863141223,0.9838378865955912,0.772617767541222,0.18856468240954966,0.999140277170817,0.2364833925248881,0.5548382257927713,0.9888247387324507,0.13252997723618953,0.43445826737854454,0.009022236647579063,0.2550490289000945,0.284742721499756,0.9929024835676818,0.14749057090623607,0.7249382530866019,0.005401995615666011,0.06556323789019403,0.5974495565439119,0.04296787230409971,0.16310675516016548,0.39199855361596403,0.9612984318151907,0.07663895465086906,0.6185031156077392,0.9983020213176113,0.17934948730434158,0.4844078536810788,0.10043376870219928,0.0885020305344682,0.5048124680320458,0.9059545623595685,0.027574783021418026,0.35034190275177174,0.9762002760608947,0.10113040280960517,0.4832514116582688,0.02062376802568927,0.03507424063599307,0.6173787182335899,0.07602449847317305,0.960850848050474,0.46172150400252293,0.9295918189573984,0.04343835866781498,0.5963144374619745,0.06499162358450916,0.9520601336880339,0.4402627859929822,0.14667095061919916,0.9927069020570927,0.5750710328625104,0.8608752627028283,0.009242362611032395,0.7044208299241586,0.13174633078468917,0.06269677509881888,0.5536880125302316,0.875460837963056,0.013824485565144595,0.6845571784720303,0.7735869698905957,0.000302244407961727,0.3255056954047638,0.8893481380292891,0.019310788842028026,0.6643502909575213,0.7913766661822149,0.9776101152489964,0.34587014548004635,0.6722190610571303,0.9997762048363468,0.22438589185041613,0.8086244654834378,0.0006625286595452473,0.7665546044803234,0.6922973666033173,0.9986665461799851,0.6230576977922953,0.8252982906528282,0.0022362586652114325,0.13745002700606052,0.7120180410269137,0.007711690632431656,0.8550412088546404,0.5833218607659432,0.004735720565926027,0.7291200915177819,0.7313444081785943,0.004397881446927765,0.280515901495878,0.6045005245383873,0.04009550348583668,0.16846129895901102,0.3849805756705097,0.002005784009989353,0.8233912697748926,0.6254848401480764,0.032064693789854326,0.18490653826352427,0.36410809441876935,0.0005398471006445305,0.09263412976113328,0.49761317750689,0.024904141611256314,0.9010197515436795,0.5131674412987983,0.08381287754038635,0.789336700580328,0.6667147559203506,0.018627164013917508,0.8877711298775445,0.5347053002150833,0.07225237437312182,0.9580105394890983,0.4001724059467902,0.9332308446669653,0.8738013385618403,0.5561786148492753,0.06148738841048973,0.9489372448204378,0.4331214185606291,0.9435904703756401,0.8591363583587524,0.5679457320218451,0.8658207524662188,0.9390290248812243,0.44275135171197444,0.12691480302857444,0.9869996862688312,0.5465249439625146,0.04242253347238545,0.9283043067975403,0.4642203944377516,0.7795844137911521,0.9816629447833856,0.3322702778100466,0.2115423144884943,0.9167830362037721,0.4857559794190422,0.0996244296495446,0.9754304153696083,0.35273466647298746,0.19420223276429865,0.999509027322831,0.5073180551690861,0.3110147341397641,0.9683136891716225,0.1277087113864096,0.1774308681302743,0.8914379872427876,0.24882765963711423,0.07531111608530772,0.9916488589152475,0.39444651925908286,0.4202129092904524,0.9957434979959812,0.2677013603923204,0.2718376933868958,0.9514822084492466,0.4156164084419212,0.1457179387423616,0.9584869476886544,0.287007085905466,0.5335171703453448,0.9976608414438004,0.17388457747943326,0.3779864435930713,0.9882917846069099,0.3067089317416143,0.23435719179518005,0.9992808890416018,0.19052891451141407,0.3571940429400937,0.9739670472006168,0.0968506842250989,0.4904143818186235,0.9999723831808197,0.2077488002036163,0.3366672301921305,0.9772092956223785,0.10997706466365437,0.4688696774904325,0.9258814698474013,0.040564078634366174,0.31644418073980696,0.9859228851086006,0.36782150648922307,0.44738286876623423,0.9985662962693901,0.04949697909328621,0.296562505040331,0.8558787391721272,0.007921440304852756,0.4259939164195986,0.946866320212276,0.262536504224597,0.5608063446478182,0.9942655617713096,0.012201146608174174,0.4047425992325957,0.7675614082084414,0.06985812038871253,0.25797047355896807,0.8848126578886648,0.16947209434020855,0.6711005414389601,0.9645284209815048,8.923970055085828e-6,0.5178249284491455,0.898219248098892,0.023472510839119998,0.36281063210521547,0.9720714066902565,0.09341765389205853,0.7725893849435441,0.9108852374405245,0.013547759968828399,0.6299899327350883,0.8198234109652477,0.0016104525157804028,0.4747109720004745,0.922787069938424,0.038287175270383444,0.6090527545502423,0.8360966522224503,0.0038027370989363596,0.7354652604612599,0.7249684901888689,0.005397033308477073,0.5879127620485896,0.8517448270777753,0.006917840269222597,0.43178505636794684,0.7440115129645173,0.0026980852041004755,0.8288228310626684,0.6185360079518607,0.01094996861478198,0.6965902944776188,0.9536936283678701,0.0009240100982285115,0.5451819012508955,0.6393688004834359,0.015891623257121623,0.905258180542843,0.5060033028960561,7.810738327046485e-5,0.7951506935473626,0.8946540662557191,0.02061414545396817,0.6562535483330268,0.5275537464360465,0.00016195025361209758,0.9608377137764017,0.6802185365151067,0.028465075408512286,0.8785217419137115,0.8153044078099574,0.0649749321960576,0.7592839134660805,0.41432069294986396,0.01015546068988854,0.8640848007221773,0.5704609178383271,0.0031165201986254054,0.7406102901836061,0.719728227342545,0.13172342956902816,0.8489707412824818,0.5917378477286178,0.04535785818077137,0.9319573670445227,0.4570771664255331,0.0033390972897209825,0.8332076724457225,0.6128441652488759,0.03680888800897658,0.9206984753530549,0.47859507889307995,0.1039575204845411,0.9776000959299402,0.3459023543328882,0.02912135218899542,0.9086571763376061,0.500152799841105,0.00021573946864844595,0.9707757887326949,0.6543883409113602,0.1829387310831892,0.9986640739885677,0.5217102366147823,0.07913645179000195,0.7823232740309316,0.38745357088964366,0.016386143488698046,0.9966255508510304,0.5432272970877886,0.27823687710949546,0.9545148737890827,0.6947845361283906,0.1508104672322853,0.8680698002379937,0.28054632284673353,0.057444784711526586,0.9969174544751844,0.4298416453273873,0.3849476266644579,0.9897831681787874,0.5859803705049675,0.24045483609443047,0.9348743371447791,0.18493282724386528,0.12127866081468375,0.9716364773585022,0.32006655548397656,0.22227050330407688,0.9998457338586129,0.4727513939976147,0.10755585045344712,0.9792989204779894,0.10553364482658367,0.20460268674810733,0.999916397770301,0.2195513869342462,0.32312799944419324,0.9841847206509101,0.3609247134759985,0.18748424470836034,0.9990573263159042,0.2376593800262023,0.30312875518360494,0.9891135460915257,0.13346895539400166,0.4330878656779177,0.9436060918387845,0.2562552694012932,0.2834956484605876,0.9931327271118728,0.4028169891250469,0.41178641553572554,0.9945580941837916,0.06624932411788326,0.5464912334745741,0.9962347889126569,0.16412966911929833,0.13973806951071466,0.9618300207267317,0.294771556760821,0.5249838147416748,0.9984139623361213,0.021351819395571625,0.36971500021549536,0.9863814922586458,0.08928897569385341,0.22715447571485725,0.9067601394592834,0.19728780311469524,0.6368954709955781,0.9766199349100178,0.0010870031191568819,0.48186966946922477,0.9999891568119201,0.03558471840873406,0.328612340898508,0.8307571465797579,0.11538253808881799,0.7417620707271102,0.9302975987187654,0.044003760108192236,0.5949573805718165,0.987865861497088,0.1295147523212693,0.4388903353152575,0.7377323868303269,0.053270855268029105,0.5737038361047446,0.8618308418073253,0.009508842654857463,0.7031582966001841,0.950635507894744,0.06336876911429168,0.5523132185923629,0.9954841795115346,0.014149210407875146,0.6832715232268,0.7747431713365742,0.00025608918320374485,0.8009040699410102,0.8902140830245382,0.019693154566345406,0.6630439048291275,0.9676226410468558,3.09221176826302e-5,0.5092800728876599,0.6735163832082037,0.01672167447623385,0.6425130603616154,0.8097110568366235,0.09845211027924472,0.7653838567574762,0.915695821873058,0.011642560372923993,0.6217171727130072,0.5633599152418587,0.0023687774799810435,0.4661779236419865,0.7132693594483457,0.04163505608305995,0.8540663497692937,0.8423760337433779,0.04838655501857081,0.7278903373236236,0.7325692114744115,0.0042168037668317004,0.579485392111194,0.8577683104159752,0.00840685339732955,0.9245275135533901,0.7514365355379327,0.10837194854336513,0.8223355733499624,0.626822692906611,0.03157933842202282,0.68870230100196,0.769836242534964,0.00047752640587284123,0.8055559286485451,0.6475573499069538,0.02447505408951539,0.9001924422308694,0.5145494935556655,0.08304822234548159,0.7882080166239342,0.668017582448835,0.01825514234738601,0.6481111370199845,0.536084415097674,0.07153809393585064,0.957454193137177,0.40152753309724076,0.15597471052214584,0.8728816727734536,0.5575522275049744,0.060824811136535206,0.7519374407725353,0.4227544667430152,0.008513041092983675,0.9911739625329985,0.29357326472666967,0.05092829831478901,0.9383657060542208,0.7273741930367137,0.12599576838515536,0.8427982789955406,0.3133998080304348,0.04186696082401187,0.9996164287193234,0.46559956888252674,0.002425473689325941,0.9812901093182946,0.6211548246601096,0.2104141187883507,0.9160176771202594,0.21364816167429235,0.09879779754351259,0.8101659510254525,0.35405648304960236,0.026315635688751504,0.9994458624645339,0.5087004612067434,0.3097354377585827,0.8456674674952241,0.6624957769349468,0.17637571756423598,0.8905762788588084,0.25002409365178807,0.07458303307855807,0.991898615319107,0.39579834560696625,0.418848348703675,0.995561582594535,0.5517366597900156,0.2706083256121876,0.9508863656772759,0.15885622326725102,0.14474367905972335,0.9590367721319217,0.288258763475862,0.5321375699832768,0.7382422139500681,0.4383150170710198,0.37664612560747346,0.9879924713248427,0.08524464727184733,0.23318689379756263,0.9025515031148146,0.7412544741995755,0.6437728943488515,0.9744055413637303,0.3280678708357696,0.03579981412922251,0.9999850029588015,0.03297764083506893,0.0011255431205374755,0.8253497116884232,0.11084366825442943,0.748009229107931,0.9070969858878076,0.2266688739159397,0.601982497223105,0.7976900119827521,0.36915540842596983,0.4460081646598906,0.7314044364074331,0.5244048167952056,0.8394822560349233,0.8568485392638311,0.1393363265183719,0.1645593326631108,0.9474848381546426,0.0019997293382048587,0.06653798125334653,0.994472465942045,0.01250657916404685,0.9134844954719086,0.9932281444088822,0.0705646266548049,0.8065956481615999,0.9438732474581716,0.17051076011650362,0.6698007761834397,0.5132351322385704,0.3025960103426835,0.5164431570442835,0.6667785939742759,0.45393648685672106,0.36148163562167257,0.8040540989553069,0.07221731498259021,0.2200315050061002,0.9116714876576424,0.013229956464625992,0.10589012703497408,0.9791335194957754,0.0017232357731554182,0.9489074292718696,0.9998597971274996,0.03881954415837596,0.8590892418798819,0.8371189974818323,0.12090042480165109,0.18538317212970679,0.4428186214618094,0.23995952517972863,0.5865513826124026,0.5988384421278583,0.0071489170045558326,0.4304156625674362,0.7452173402754971,0.11286680721285869,0.2810673542950514,0.8676771910679737,0.150395790568284,0.6953183121989919,0.9542729869992101,0.0008419027706034199,0.9754094453265489,0.6406960543119605,0.01623927526052754,0.38801847504036907,0.23047811658678913,0.07882374989669905,0.794033568495816,0.8955014591316706,0.020223079555724277,0.6549396148930905,0.5289341222708455,0.29117055477203596,0.5007325050117152,0.6815074973478665,0.028926717655115453,0.877616964735747,0.8163762255206231,0.06429503316550977,0.7581007640435673,0.4156831524599572,0.009880094456019839,0.6134088380514322,0.5718294334026406,0.003272546599245474,0.9417670456072276,0.720969310894728,0.13078968707431438,0.8479792643384595,0.306771383591129,0.13133157620865116,0.7202488080004039,0.4584548087559445,0.003181478252119785,0.9831824532028886,0.6141906447153206,0.21628502452865328,0.41489188125432375,0.20780374592284334,0.10311509145072162,0.8157541056620954,0.8781427286419788,0.02865819926734514,0.9997318249196683,0.9606125004920241,0.31638119591783725,0.9703082400671643,0.12387341453377881,0.02044972849670007,0.8950097384854803,0.2438442567037949,0.08749882249178614,0.7811811042876873,0.3888011025035506,0.42592694839192685,0.6399254368251264,0.05929969907148702,0.27699856997160965,0.4850211295646957,0.6960571457750945,0.14982224937528366,0.9561492488605022,0.828385902164229,0.05680304911354145,0.9970688417064815,0.01740575896544283,0.007014269848971799,0.9895032289377379,0.08128549922998579,0.005312420373518256,0.9341903773305326,0.1860075875966617,0.6506207903440944,0.8365256260376979,0.8596474688330527,0.49619676397436563,0.7060354131507607,0.47413202565567114,0.34214371374563,0.8198754581003815,0.6294300737909848,0.2034883184379791,0.9228232160136991,0.7721032232926597,0.09375533516151924,0.9845278525583105,0.0038110771710214153,0.023648364324215354,0.9989705595949325,0.04701849237314071,0.30185860962563305,0.9647425632042426,0.6705557198352964,0.7161677896060044,0.8851825386431433,0.25746337361071836,0.566542159405874,0.9933592000903657,0.404173575651233,0.41042585827620953,0.7626583487700893,0.5602309012650598,0.2630468191007048,0.9471260756685183,0.16515515119261015,0.13878072270697484,0.9623580784176933,7.691511417035057e-5,0.5236028641875459,0.9985220924078286,0.4468064176677793,0.3683806775536427,0.9860591474622673,0.0900790612104182,0.22599693375951502,0.907562606410868,0.19838936140874724,0.6355651950546181,0.5491203334621889,0.33611943730148597,0.480488065907367,0.999978139957528,0.03609874716934125,0.3273141744146315,0.8317927254065217,0.11626743155890884,0.7405509294376698,0.9310000883611109,0.2338662481974787,0.5935995976234953,0.9881667395454543,0.005992199902450868,0.4375183518910587,0.738947783502052,0.05389354460984347,0.8331571827314452,0.95871791134328,0.1453091098855394,0.7018942098978547,0.9512327967480992,0.0013087937290445772,0.5509380246598949,0.6338058632649559,0.4196406859946663,0.9086181560089603,0.775897272055668,0.0750054415434524,0.24932908076566335,0.8910770443852493,0.022289550948610626,0.12809593249926648,0.5217778870986849,4.8209729625048325e-5,0.963050398502217,0.9994830077938808,0.026573283370780187,0.882274703614292,0.9821350389483519,0.09927745691380607,0.7642110798704466,0.4086291547493769,0.21106900280004065,0.9936526617680377,0.5647311095024702,0.35104352382431286,0.4647986376267425,0.7145190471807421,0.13565943233111483,0.3126551778372668,0.8433823176134769,0.04779492799394636,0.17878575065910812,0.9387513094332292,0.004039516918312169,0.9849755634916473,0.9913235180577864,0.008661199680300657,0.9237954663134385,0.20201933997677812,0.06120916701528012,0.27341463337136507,0.34041134605282686,0.15655777276098976,0.6874212415347183,0.49436998606602073,0.32306466478879337,0.5352835840421936,0.6488777902196696,0.18743138963257322,0.3797042869143277,0.7888637220196121,0.08349187649500839,0.9891275949041594,0.9006732408529472,0.017886804173219972,0.9972630463482645,0.5374632540734949,0.0005132516153486533,0.4921847230443557,0.14852058741642515,0.03186075269286015,0.871959155876699,0.8229489259857472,0.060165591860968315,0.7507422354529514,0.4241207451423897,0.3905829491141134,0.6050673570520058,0.5802779577616328,0.004321495726289648,0.9376990354182547,0.7286046789844726,0.125079593433355,0.8417904739747532,0.3146832130192064,0.0413148911285508,0.7125429059040669,0.46697900635808126,0.002291359362003864,0.9809135938379114,0.6224957412084667,0.20928813730464485,0.9152491371041156,0.21478264533559976,0.09797423308880326,0.8090803515841716,0.3553794155319129,0.025874820580362223,0.9993788787693731,0.5100828007193887,0.3084575961683582,0.9673378190318436,0.1295602285810099,0.17532304147728073,0.8897115840708885,0.25122243901917896,0.0738582028727982,0.9921446105934697,0.3971509686960963,0.4174844086144145,0.9953758780560027,0.06340176703838901,0.0014715815007351751,0.9502870753615293,0.15986831102919985,0.1437721357194085,0.959583086712201,0.2895120600510399,0.5307577238925998,0.7370257605704686,0.019711975981450858,0.37530675080382625,0.987689426780233,0.5957455243314828,0.2320186358923802,0.9033700219942167,0.7424645431473706,0.6424481533254975,0.9748404081519753,0.0007392646907090072,0.03528784698130466,0.9999937997775716,0.033473223899634585,0.001034733764349649,0.976376678841817,0.11171324739201977,0.746807768346588,0.9062927120977244,0.00746002648621874,0.6006285896173214,0.7965780462774387,0.37049031081979766,0.44463387338309796,0.7326291528278133,0.5257856577019797,0.2940396928652058,0.8578156108388749,0.6785658139089643,0.16353534096264,0.9480999345618153,0.001878103393466335,0.0658505037967212,0.9946755893032413,0.012815739166648521,0.4020295479491257,0.9929994816175333,0.5687075388757428,0.8055023267873873,0.9432351027939361,0.17155194521621298,0.6684997126060943,0.5146171792929837,0.3038670312283394,0.515061259912613,0.6680813578147946,0.45531336531079925,0.3601536982700115,0.9839837616493671,0.07150319487042239,0.2188870574112577,0.9124545901737362,0.012915874876102795,0.627317873718281,0.9795269328282047,0.3442189016258864,0.9482968610767513,0.9998251468606626,0.039355439300279016,0.31931769926101516,0.8381387650795458,0.12180334952061561,0.7330223232329739,0.4441923511363822,0.24114140618091018,0.5851893413915552,0.9899440126538419,0.00738376215209452,0.4290468008190515,0.7464212926184592,0.057818999520144965,0.8267347365888986,0.8686127374797643,0.1513855598123739,0.6940448364876892,0.9548488721921671,0.0007636120795465606,0.5424273694054529,0.6420222323576642,0.016590626169916523,0.9036323885042112,0.9901362039376524,0.07957047085367175,0.7929141952201577,0.8963458279450254,0.01983568210270714,0.6536244967619643,0.5303142768710701,0.31841570131786473,0.9597578923667678,0.6827950703474817,0.029391961797642363,0.8767093002426727,0.8174456241719197,0.06361846559951928,0.7569156411444748,0.41704625666912554,0.009608475751370305,0.9922228593629527,0.9837398816142942,0.0034323710513720074,0.9411178010670231,0.7222087048829089,0.12985876761620863,0.8469851266935637,0.30804728792854863,0.1322669547897804,0.9993565437345485,0.45983276874702705,0.003027657962347108,0.5696659610442791,0.6155362510632226,0.21514766111981587,0.41352980090819724,0.208926788477942,0.10227569705755768,0.9807918244274754,0.8790458259544567,0.02819865029474994,0.9996846380070947,0.9611486057324439,0.00014216151185814097,0.9698370953553362,0.12478580012735768,0.020842923322314855,0.937484098255734,0.2450325971189728,0.08828173715934684,0.7800367845921714,0.3901494843606589,0.4245599055921163,0.6385975629374235,0.5459814363796336,0.27576196793560903,0.4836392252711985,0.6973282563398918,0.1488367090291064,0.9567137081307429,0.8294272372093145,0.056164702264930644,0.9972164282759666,0.43258051527995406,0.006785382276048191,0.5966951677041483,0.08204274490112884,0.005515318281637427,0.9335030976325038,0.18708474878183962,0.11947907889290532,0.8355017874943114,0.32264920553489124,0.49481423640353345,0.7047748832614997,0.47551285510408176,0.0015467072541749394,0.8209368633417433,0.6307650355075931,0.20237621729998134,0.9235595437276434,0.22184490607152363,0.09295087599154872,0.8023162616741121,0.003983352976641097,0.023230015867427678,0.9988799776713329,0.5186272732078229,0.3005899790860098,0.9642308077844491,0.1353553121602113,0.7149202712168135,0.8842995274944172,0.25867333229102674,0.0694493552343387,0.9935819007715146,0.40553089488041927,0.4090659859138169,0.9941436760874078,0.06763144086726619,0.2618302574127841,0.9465055729799006,0.16618319353911348,0.13782613783920378,0.962882600850468,0.29729618349016945,0.5222217331624298,0.9986264107059544,0.0221585682043981,0.00444938250835375,0.985733086185826,0.09087228104305195,0.22484148687210465,0.9083619570785415,0.1994932258623086,0.6342338825621452,0.8236871101641242,0.0012768662446104306,0.4791066115366404,0.9999633001964,0.49121712471477075,0.3260173283120939,0.8328257672970805,0.6458646777414846,0.7393379488602785,0.9316992825130951,0.006060970763068885,0.08402805247361494,0.9884638849987972,0.006207495683235198,0.43614684621077376,0.9975826285764533,0.05451964494753353,0.8321249577319938,0.9581660506199352,0.03626467721775073,0.7006285794825639,0.9518266354088152,0.27255239920974766,0.5495624412477638,0.6351375066798328,0.4210056021213542,0.3936618717369746,0.7770492632234524,0.09033361118260036,0.24813376088969202,0.8919370155130926,0.02188317377849397,0.12717324584814538,0.9685943554519332,6.932004683002368e-5,0.9625270129339583,0.9995439547969639,0.16548522117423803,0.8813820779364923,0.9817669204653162,0.10010586753214368,0.7630362827864596,0.40998880482081357,0.21219848035675098,0.6190333408089366,0.5661018088194536,0.3523638965544824,0.4634196207663167,0.715767094668806,0.13471395955428644,0.31137403265995084,0.8443859759316366,0.047206758596121445,0.7254256109019341,0.9394126795062661,0.24849222153420758,0.984637327390961,0.9915780883708196,0.00891930281234049,0.9230601786707302,0.7538227794519534,0.06187369198446169,0.8202167947146886,0.34172222234747207,0.15756390031681194,0.68613874901697,0.9583320076057387,0.00036434373157023803,0.5339043137777716,0.6501970921908029,0.186353458717042,0.8985286501627348,0.789991122317301,0.0842583803507912,0.9894124792074083,0.9014987703327652,0.017522152307787475,0.6454678211931446,0.5388418065997396,0.000577790065132866,0.9563310114269191,0.14950526577662415,0.0323481862332457,0.8710337949252769,0.8240031874753401,0.10973438537290786,0.9964103501867336,0.42548760372575894,0.0080124734955348,0.6037152429468406,0.9858313128319209,0.2442259021650275,0.9370290180707883,0.7298334169870767,0.049328786395922364,0.9701572354430522,0.315968034967514,0.04076632860720858,0.7112906449178529,0.9466921170352447,0.3476413133799616,0.9805334012211286,0.6238357211362863,0.012116096210995964,0.919708402068145,0.21591930981094537,0.09715374258251208,0.8079923888688518,0.884564788835615,0.45889756513626845,0.13507159368140648,0.5114650631374499,1.13928246958106e-5,0.518212702754557,0.13049023937882553,0.17427284791832542,0.888843909490612,0.8026465891472696,0.5722690729687344,0.2215002702681585,0.3985043781841168,0.9206252716586908,0.6303645772578444,0.9786243438543738,0.26815486133720134,0.9496843420842689,0.7051532772120459,0.6819213949130087,0.96012588725229,0.2907669660481089,0.6496977302302874,0.7358074948568802,0.020098193994474045,0.3739683294231875,0.9873826532902037,0.07906334862548536,0.006853665343225679,0.4321694750833203,0.19379732102534564,0.11398978033198015,0.5433622175171965,0.8664749761547567,0.4862677698818549,0.9999987735698682,0.8713844768424679,0.0009477395703157976,0.8274444154229952,0.11258579542749475,0.1955512846820467,0.4299757371462296,0.7803803694094011,0.5992739125904724,0.24467582375059893,0.37182620346384565,0.9348074876238419,0.6566220934720802,0.05131178090238775,0.971681424990246,0.9609881144203843,0.6798565376802885,0.7071711183831314,0.948711604730676,0.26619475882463733,0.06516634591129489,0.6282250271367046,0.0131286242520961,0.21548870509424617,0.992767049279301,0.09448365953089194,0.8044066694972425,0.8874477090169974,0.45437889193093134,0.13198599358912588,0.8492485231096816,0.8472837022434749,0.5136792476203237,0.13356108252254312,0.45669058544548924,0.8859765292864437,0.8062445779901493,0.992295574878223,0.21774475924751213,0.40294983902161996,0.012605517604773075,0.6259803788633445,0.9799166796268495,0.34553326232520143,0.02925198464474943,0.6824088731421806,0.03989485659855918,0.9618819019602693,0.9709063609532167,0.05029248826385119,0.7317981773609694,0.9359486941487297,0.24232526645314972,0.07934607518949927,0.6015475201788729,0.007622373916178038,0.427678481589312,0.9966704060822956,0.11112277269127496,0.0007867028167928836,0.8695454654240969,0.4817343301073059,0.15108829371901666,0.48858792540525414,0.8270486475589667,0.5410496116077985,0.9968742843308215,0.4294574790008514,0.902814860021896,0.006476019878006056,0.08032040647694805,0.2407865678739678,0.37621563063486263,0.733389288005684,0.652308203995236,0.971507503505195,0.28866131885483026,0.9592127065259346,0.7076474126460369,0.02986080427876764,0.34382475216184616,0.9794092718328702,0.06294523467122165,0.632603781170997,0.921875515154744,0.21923023004053677,0.9919780730820366,0.5745648064162104,0.003595992332963538,0.4549001888176329,0.17603718283411623,0.1289306783126587,4.0575651794050316e-7,0.8505325320719277,0.5091446667857435,0.171239267680179,0.4612110358626949,0.8830773860844161,0.5682965986701027,0.9930684891002255,0.4024363920856018,0.9184425079543701,0.7611500807480002,0.06605643692578705,0.9811695218257244,0.2601560851057579,0.7088056606879073,0.6781782582213584,0.0416891778458105,0.2944177851135713,0.9693623581996529,0.6583280534738141,0.727769784598941,0.370089661387375,0.9864712910806586,0.07691157385000719,0.7788903236940217,0.9065343654826961,0.42319343961841493,0.20101878629337167,0.8260839348626499,0.001061581019612956,0.4822574460746024,0.15565245159112406,0.14785385372934073,0.8652498464588969,0.0004716272475689953,0.5365275186518883,0.19237835058273584,0.4339507287417073,0.9001112396430102,0.5953383164493738,0.08280318633520273,0.23691864333503454,0.9328125033057353,0.7373909549959982,0.05309670925202009,0.9729973630591306,0.323942569575361,0.03745285746331167,0.6882908051401593,0.698881259796118,0.2697488794931035,0.9781013148076358,0.6320989973754177,0.014057700293078457,0.9242926328427301,0.22299486025081483,0.9911486107481905,0.8012138729448135,0.8899713538240199,0.45038481765333144,0.9987855812377082,0.5200088243260124,0.8426996765216153,0.8537525156798955,0.9993993785947541,0.16783542426928577,0.883413577934719,0.8094063403580156,0.5638005849985394,0.9938008274525174,0.21030372686695442,0.01172595517172842,0.6220934895361678,0.06832746082109098,0.2606155168059078,0.9458816562436954,0.026272296188126043,0.6739329805549933,0.31429797088179856,0.2985608265387417,0.04855321769193688,0.6626238485556986,0.02256742462722333,0.36571506156703404,0.25014139162108506,0.7793246327372665,0.008336145748384594,0.9091581853503508,0.20059938803506872,0.1086133021241697,0.5518713600296992,0.0013775181437181705,0.47772531691984926,0.9999446376420027,0.49259952708264343,0.8621373184158947,0.5370495552748077,0.1180460139383887,0.9978052127328461,0.900424938256188,0.7874166890872758,0.5908818950850725,0.988757295585099,0.3801069946851714,0.9305236941464974,0.7413730864761888,0.05514915149384364,0.3234527344551187,0.9576106866912675,0.035749508223923365,0.6993614150315091,0.9524170193363138,0.3352332503765286,0.06101042671151935,0.752272532986712,0.015145664184053331,0.3923113258850659,0.22678228592401145,0.5785298184035284,0.7975811913424363,0.8927939898326016,0.9988217690182981,0.12625340988547634,0.5245400835717419,9.425290788495078e-5,0.5051327640038966,0.1394301371633077,0.4652124723784262,0.8804865361549705,0.5643197264405169,0.10093733580010744,0.994492529669099,0.91623279881947,0.010769508982428067,0.6176900545051293,0.9822447760726789,0.3536853981321141,0.9438108887424248,0.7170134923697817,0.04330786650613416,0.31009432974465295,0.9679643423852713,0.04662205132232616,0.022412199277346334,0.9400706897650267,0.36135151239845115,0.9842953856816581,0.6099022224415507,0.7713155502672706,0.41923125459278643,0.9956130202537474,0.5513507007217192,0.8191537287048397,0.0017344881898327946,0.1585726461896515,0.9998565718580313,0.4971350505071828,0.8334664111636161,0.5325247842759566,0.12098874159499473,0.1852779259893106,0.8976921801290102,0.7911163053000188,0.08502806302842891,0.23351513593775514,0.9307896482071987,0.01716118953927065,0.7453353547464502,0.9742828426603207,0.2809456060768917,0.955764184656596,0.6920016519604152,0.032839195508500674,0.33572755784687797,0.27783877697920134,0.05885724744123533,0.7483460823306114,0.9264017028911653,0.38788649027735334,0.08984166218853284,0.5830060107355844,0.7939240210211183,0.446393938324682,0.18259532735722916,0.5240172456098527,0.8397670315175833,0.8565766370282046,0.13906769030524463,0.9997616723780145,0.1611100193318974,0.0020345483651468266,0.5598190494726668,0.10368648576115236,0.41083402969512456,0.9137025378036938,0.768401054934492,0.613276934457864,0.9834229112868793,0.9440517349867226,0.025004069399941264,0.6701656907371367,0.9648954253883915,0.30590631643184396,0.30689629792105344,0.6664127397464998,0.023774602682642476,0.3618545160481049,0.25362482714666423,0.07241832300796941,0.7717550889701683,0.010066566631776908,0.41475843163917026,0.10612903474005092,0.5558603197781924,0.8156490865361096,0.4737177381013088,0.16190028088609731,0.14183722775917873,0.8593591453353253,0.8368323330400853,0.12064753685430052,0.9981647109772855,0.4424331581742919,0.005252277390704496,0.7947919648058627,0.5819469829900291,0.3840060791954961,0.9284694891451547,0.7448791100455981,0.05699524985993193,0.9756992463313974,0.3319685610111802,0.9538801766190381,0.6956754490618449,0.9541107386694749,0.3314503863104493,0.9755294923031981,0.6403236646483337,0.7443991946388807,0.017441198869151908,0.9904830932761299,0.08726451944431296,0.79434732034771,0.005332127876050086,0.44188657134706544,0.9981173041829867,0.12028929456323395,0.00018825042438358475,0.5011205306998548,0.14222141220840834,0.9998811358739569,0.8778711849539009,0.0016462785457128093,0.5553134498419183,0.20746720605338143,0.4153007085315986,0.009956998627878355,0.7722168317270744,0.07270382487730093,0.2531461378883416,0.36238346054690873,0.9395599601475784,0.0449559636657027,0.9665458404351468,0.3064135622547521,0.04494484734617826,0.6706830200198401,0.0251761958964572,0.9443043992190444,0.9832820982876336,0.6138128388540005,0.7679366157566412,0.914011328176094,0.20748896175068604,0.9943324600474579,0.5603653419457801,0.8778887517385208,0.4691893742456095,0.9997443814103663,0.5011473563428486,0.8561906695807544,0.840170536120562,0.5234675852099382,0.18217033457258097,0.8952475113931269,0.004616932989517819,0.582463315258333,0.9904883015502415,0.22588366085550693,0.9261140702306747,0.6402979168340486,0.05911653996372518,0.27734593292121645,0.3362473913848826,0.032643341146073424,0.6914934437271348,0.036149288950058756,0.9756909843331362,0.05698281229785723,0.644671320548299,0.017304413932457907,0.3839799854911502,0.23398090900736523,0.08472134176063573,0.7906687382492039,0.8980254675824413,0.18570571013532372,0.9977035694038591,0.8368125073574261,0.00033326811926398525,0.8628768366833632,0.9998694486860132,0.47374452676535866,0.8748853370937649,0.8195771316078453,0.10614556009031562,0.9956854549694887,0.4197743574898532,0.009076489208405647,0.07243222896185725,0.984431925405836,0.24921191003491439,0.9398091984209604,0.7246823862738972,0.6616081180191642,0.30221492732278105,0.9648855504894112,0.04308412450011406,0.7165176128099798,0.026616863578092675,0.25712412789862554,0.9820991432321409,0.6182248032553337,0.9137176026781271,0.41080763411731447,0.21117954175052783,0.10060603784247807,0.8125272394390606,0.002518659233735565,0.16486708775184428,0.9995788025842287,0.8565578314726422,8.387147341770707e-5,0.8434807456957587,0.99849213011317,0.17868197695085486,0.8924532655617374,0.7980232199841402,0.08985700466013924,0.9913486201425135,0.3928487575583494,0.015011543754393175,0.6359386461109033,0.9769195617606946,0.27329391697712146,0.03282963466275707,0.6998659413589068,0.6872956799061397,0.9578321460804934,0.2855288303842558,0.05489819431346138,0.7408910259838777,0.9308032649357325,0.23353783447655252,0.9886409630353785,0.0822123384221109,0.0059324552264073405,0.4379033554345539,0.18924624068651164,0.5325515531251686,0.8334464223668484,0.0005194046701647026,0.4920493107859201,0.9999525234693756,0.4782750651384298,0.0013370009749578693,0.5513240167840157,0.9956165653005644,0.2001588505361358,0.4242546084218496,0.7755735827476724,0.6049349479091534,0.9855350092982844,0.36624520673529914,0.022404258485974937,0.6621033884211962,0.04879003721014791,0.29805730185069745,0.9631966521529036,0.6744487880735967,0.7124203140532541,0.3536597468996364,0.26109877604409293,0.9808765150025237,0.7645404275795167,0.0118447260569719,0.21075240813626017,0.9937141448376605,0.5643463291765947,0.0024664575482585827,0.8837665456390036,0.4601406254323117,0.13592528308598217,0.8533634132472716,2.1367234369129573e-5,0.12627122992519763,0.9988236088200807,0.45093241283867497,0.889626723745261,0.8016529102376888,0.9912513969205832,0.2225369136238633,0.9240012449346915,0.7522956935505651,0.6315681886481568,0.06346778690897359,0.3400436634946224,0.031232414181664503,0.6877809198459337,0.03766209993938513,0.32342763690437154,0.9728186853820155,0.05285020489745862,0.7369065069541505,0.38008095176533724,0.2373867528198581,0.987659541911863,0.7873947379852585,0.006649412401107835,0.4334053100251528,0.9973034409046703,0.5370763071864098,0.00049582502053791,0.8656254193571506,0.1482447170818061,0.15525367826209296,0.48280739131207207,0.8688213387996344,0.10862999651168331,0.9961954516530562,0.42373723594227697,0.00833126840716486,0.7793468816881113,0.07720507605542021,0.9865981372703836,0.9378864766066053,0.7282595154029695,0.657805993768408,0.9695517381176764,0.3143228780537546,0.96146963617671,0.6786923054508971,0.9458937942942705,0.3493286701638405,0.9810196353589162,0.06578334131571145,0.7606806639736807,0.918743466681593,0.4018967476504767,0.09820505893127829,0.8093852672809233,0.0029368917887100388,0.4606624366844476,0.9993980634044423,0.13283140030162083,0.8501399158409488,0.5199820200733618,0.12929972693507918,0.17561822797107152,0.45544825407991263,0.0035304147728392743,0.5740206336335776,0.09511273092908012,0.9242784398573216,0.01405138467219813,0.756201260314905,0.0632127867516235,0.26972506775213123,0.3443475955501816,0.029673769786667803,0.6835695040653451,0.9594301164051771,0.2891601556854225,0.9713241118190973,0.7373673452518402,0.019604242553110718,0.9353366211355426,0.2412572822803561,0.5953646498501862,0.7836713305407366,0.9031406132469805,0.19239949873456114,0.9968125493160243,0.5415980101433056,0.8266322111654001,0.1478728980803437,0.9999917168308001,0.15198267753826156,0.8691745691819086,0.826104270283688,0.5422924272070557,0.9967335048100745,0.9065187478343779,0.007526953106622436,0.60100864601482,0.07964378783140785,0.2418538425798311,0.9356789637591114,0.01979793250039924,0.9693716034838201,0.2943933321314003,0.3185418904362248,0.03967974183759282,0.7087812858542746,0.02943772770012132,0.34500999255794984,0.9797619962344939,0.6265128301548144,0.012728596347441945,0.92120481216674,0.9930640371116563,0.09552200848599895,0.5733313670733033,0.8863260979396809,0.17125947960543797,0.9991550199303536,0.5142293144145591,3.723007117040211e-7,0.8496420998414999,0.1323587298205421,0.17217994048511204,0.003592781544168533,0.8048430305368117,0.5695318504102781,0.9928600109742909,0.40121351495742025,0.919123871554935,0.627693071207954,0.9794168901645957,0.26570848793741364,0.9484685651058475,0.02815382974260905,0.03920468298473717,0.9612009296374657,0.293281567914901,0.6523337545991126,0.7333655637016818,0.020881635239744345,0.3712943878586371,0.9867579288849229,0.07757750080134429,0.007317471854684288,0.9058070483555707,0.9968712887580531,0.11223815799493686,0.5461162898933302,0.868350457734725,0.48350386930296,0.9999972519521515,0.4868178516780143,0.0007851993002155888,0.8295291044231734,0.11433977148292429,0.19336248512813548,0.9038612759999101,0.7826655678515395,0.5965622917116251,0.24230227772213037,0.37450091863737844,0.9334355977730378,0.7362925923983178,0.05253881016631373,0.2902673096615844,0.9599102688615648,0.6824338497353979,0.02926102623291249,0.9499246476720125,0.3407040694770135,0.06380800975330642,0.7572484481725744,0.013765560073602412,0.21776690229118906,0.9922908830998436,0.09287224357132495,0.8022083806971823,0.8891896085504598,0.9991851656948862,0.13011974761137546,0.8472644025851567,0.8492677194335757,0.5109149198229693,0.1354479868483986,0.45944600863245816,0.0030704445667285585,0.8084256906777167,0.09747993673482108,0.21546664613353256,0.919409076621349,0.011995985477349536,0.6233025095937441,0.9806851617305967,0.3481655168915067,0.9464446088321367,0.6798315073429855,0.040984241139494004,0.9629337894631891,0.9699696863396764,0.049090728654575644,0.020732202042628767,0.9372960917771838,0.2446988885878557,0.0778577867466968,0.6042534924464475,0.7761547918589421,0.42494351253102436,0.996344229272996,0.10939063179792208,0.0009493911851328196,0.8714024374048908,0.15437083051623868,0.9999616410181387,0.491352533231384,0.8291352372835258,0.5382931649352415,0.9971753913745712,0.43219605289745994,0.9011705693859373,0.006039965967380878,0.08182989876140101,0.23842598819749639,0.9336963195849821,0.01869552989561507,0.6496721348221532,0.9724203985194271,0.2861585466324048,0.9581118054150612,0.705128813271569,0.030809269889971624,0.9518846183512168,0.9786165833930407,0.061608803292645786,0.7533485222789998,0.9233532177906749,0.22152254976761931,0.09317633599434139,0.5772978989000286,0.003934620351230156,0.4521469964297242,0.1781483644427172,0.9985457261253603,1.1574634305622222e-5,0.8524989952659279,0.13508993226476157,0.16916092939328686,0.46396844931178294,0.0025890011960436055,0.8119829696780358,0.993519780036469,0.4051498857533956,0.9169225227392486,0.7635041043343509,0.0674366946353267,0.9819138764826352,0.3524932927059208,0.7113149574278654,0.675591911999514,0.9627357491296975,0.31124861725375175,0.9684021211038021,0.6609484922524572,0.7253047187475222,0.3674214583605254,0.9858249712843976,0.07544448742208848,0.776591013370163,0.908137931807407,0.42046227993765184,0.995776324349174,0.8239827556102667,0.0012493032393477432,0.47949430523222786,0.15766259507306046,0.14589622830868365,0.8633559015224967,0.00035919291709168855,0.9971195573399529,0.19020318108281797,0.4366926602519607,0.006121353564596033,0.5926224374075187,0.08433363320996223,0.23457122426871202,0.9314213919128267,0.7398209461002752,0.05434358394417699,0.9738865429351296,0.9583212858166913,0.03640989834379199,0.6908495183125252,0.9516603213219019,0.27220691280611975,0.9772846277736101,0.6347638807737608,0.014716208151637822,0.9257490728799057,0.2253011138671714,0.09055619711314988,0.0038693524195103635,0.8916959642283915,0.4476340701861724,0.998585347756621,0.5227714570287351,0.840680941193797,0.8557012630524989,0.9995272353781255,0.1657737169615871,0.8816328907012261,0.002148491051322643,0.0998730626519641,0.9942273521471707,0.20805442227531068,0.7630590960578935,0.619410175071913,0.06972939727769073,0.25819153597363764,0.9446235997368273,0.025395001443288656,0.671337866747559,0.9644349166292504,0.9685849973585391,0.0473714808392558,0.6652361707502213,0.9392274029195875,0.3630535526225007,0.25254035711041173,0.6081742288432137,0.008846486268425657,0.9107412503779806,0.20281857168916329,0.10689851326921179,0.8205147077647539,0.0015902587667051549,0.47496324919310207,0.14626598409786334,0.4953644910032316,0.8602251749933891,0.8359095924609687,0.11983627820200188,0.9980564026012892,0.8987628606816125,0.7896749374505482,0.5881614129663679,0.9893329032113098,0.2307383031541808,0.01762412069121505,0.7437910071672968,0.05641836393311611,0.326042477865904,0.9564894662302957,0.034729823331762055,0.6968225227894689,0.9535874049614579,0.3326250671320119,0.05969346390250341,0.6391261965482091,0.925474361760921,0.3896127147119697,0.22910228364212099,0.5812594531608297,0.7953545480793618,0.894498921859372,0.18122922507152,0.12442231813645072,0.5273015294978132,0.00015558546975696919,0.5023676775680483,0.9997038765668497,0.4679714572617187,0.8786867316927851,0.5615765636748807,0.1026094198314661,0.9948942530223515,0.9146943263717959,0.010206174656592515,0.6150007925487201,0.9829677366092305,0.35633174740362394,0.02555996323328613,0.7195013003025922,0.6670697216634077,0.30753928982819934,0.9669833278615906,0.0454630410033513,0.023238098243076877,0.9413766107404729,0.35869691655862673,0.9836003959236641,0.6125980707080086,0.9104425333875421,0.4165036520193599,0.9952399496395958,0.5541004476044141,0.8170202839424547,0.001972229709100881,0.1605979620143418,0.1430749429300201,0.49990020257148604,0.0002232227797305808,0.5297649897543951,0.9980100201681448,0.18313408797357628,0.8960101240410654,0.5886766187202299,0.08657694128457821,0.9902446708263686,0.929379404852223,0.016450342304653864,0.7477410060474984,0.9751509832085052,0.3303019873226912,0.034921762090689534,0.6945518698877353,0.03383192621898928,0.333118414517665,0.2803193840470125,0.9745029984510705,0.7459423336594236,0.9278392341976953,0.38519346037988483,0.08826651661769885,0.5857315250094958,0.005077335415268558,0.8972694151629655,0.18473672918003947,0.5267788400984464,0.8377331974445661,0.8585095793680129,0.1409867909434988,0.9998393958428221,0.15908208158955345,0.001792967408872359,0.5570728415836326,0.9948193665383354,0.2048065254672793,0.9121432856045235,0.7707299332267785,0.6105819463155595,0.9841216305951258,0.942773959290465,0.0241478457480383,0.7235675448071544,0.9659061367027799,0.3033609729599197,0.9653432291097065,0.6690177028443747,0.02462440666311938,0.3591991112337095,0.2560347505436522,0.07099152052887403,0.769429856122807,0.01062612729633855,0.9158462732162469,0.10443170834660032,0.5586073083725362,0.0019260554157478627,0.4709568091136391,0.16394259136487155,0.13991327403992787,0.5044359223523266,0.8388707333959224,0.12245465434080632,0.9983937952779867,0.44518080389277864,0.004860101401078398,0.797020891053005,0.08914496663181115,0.38669756962500823,0.9270377272552721,0.7472861874307047,0.6371383988519048,0.9765435354717185,0.3345754616638804,0.9527132838295123,0.6931278475178364,0.9552609830001513,0.32884965703646074,0.9746677619173258,0.6429755435531077,0.7419831460960408,0.9301688986473284,0.989938658927924,0.0857100550963662,0.7921075919427705,0.005742445285966347,0.43914104668308523,0.9978699525628084,0.1184960948722848,0.8581445065310467,0.49835536686269166,0.1441584930637026,0.15946517874625182,0.8760545929110779,0.0014296956135926853,0.5525644228219719,0.9954502440242878,0.4180271943823476,0.00941540631197807,0.7745320905824227,0.9839904962300898,0.25074525808766474,0.3650439215932792,0.7230992090376007,0.046108843160558244,0.9675331618488666,0.3089660140318783,0.04380602034772102,0.6732794619644977,0.026049834959132878,0.3548527431311859,0.07126061348247353,0.6165036631939118,0.7655979034500604,0.9155554038354942,0.20973602253704893,0.9939097435816697,0.8139073819040201,0.8796936743788031,0.46642994664874615,0.9996483315117517,0.1367812376094229,0.00011943555925719718,0.8421919032047311,0.1254438965009012,0.44466053420398827,0.8935478977579436,0.004249603570378568,0.5797347670231581,0.9910175890911987,0.22357528323750941,0.9246609076292406,0.751218168414702,0.9763848263327161,0.2748734817599547,0.338862549214315,0.698241693376519,0.6889361942291107,0.03718867776677487,0.28393072982965495,0.05570760775044453,0.6473159840342161,0.018032964713880772,0.38129207750081595,0.9890131677037366,0.0831876865564315,0.7884143913107534,0.43966064336449595,0.18786108147465552,0.9974312445235474,0.5358324718959746,0.0004418515890451391,0.8647735877928648,0.9999249891923553,0.4765062669682703,0.0014695256002598134,0.8216988649265752,0.5480516783992337,0.2015776375197827,0.42250491197435847,0.0085595173315543,0.07387223547924193,0.9851091530733693,0.24682357345625255,0.9384871444161368,0.727149195859121,0.04802998705341888,0.29967833589248344,0.31316548454080995,0.6727883511141265,0.714021855871686,0.027514265828969486,0.2595448540172639,0.981358500976767,0.620909739597097,0.01146467360295289,0.40808819523325246,0.9939909247555573,0.0989485939050489,0.8103640334357343,0.8826291640809941,0.16692429155390176,0.9994576877771955,0.8546138778939807,4.087113610073967e-5,0.8454849131647817,0.9986990940943412,0.1765683084539434,0.0043179771269426515,0.8002389425481575,0.0914448161927377,0.2240116202146587,0.395551307926706,0.9222491415687075,0.6332755716644315,0.9777426941088156,0.2708327997182176,0.03185133060549228,0.7023975135715255,0.03699083087516275,0.958936581448053,0.28802996155138516,0.6468156837075785,0.7384642627436917,0.9322002047613178,0.23588167972118024,0.9880474343326302,0.08069961857006674,0.006364702996100313,0.435160559083858,0.19141723684966178,0.11591488389631038,0.8313808589364148,0.8644153808107835,0.48928462833642017,0.9999829827530109,0.8733982382508814,0.001142546070484196,0.8251578641255997,0.9959743307146351,0.19795065427369685,0.4269890068357841,0.7778766350777209,0.07626251860268257,0.24727510156608834,0.3689116303198008,0.02159310814704174,0.6594851121934875,0.04998832471705128,0.9706716579085855,0.04217837611292702,0.6770375141304035,0.7099138601136776,0.3510179164007451,0.2635315264794281,0.06666394121784525,0.6253058660279174,0.9177732801559491,0.21301232794767122,0.9932695135715619,0.567087505258466,0.002748381142904155,0.8855331662485881,0.45738488171592895,0.13403556338780392,0.8514017005572335,0.8451063265402317,0.5166956155777346,0.9990055506472881,0.45368496970282207,0.8878878190277031,0.8038535347687832,0.9917588884834034,0.22024082645442877,0.39999125243695655,0.7546791536928465,0.6288984707826153,0.9790612472141547,0.34266594620865104,0.030277612008337396,0.6852153112140071,0.03872201727986596,0.32084334587984215,0.9719121635047956,0.05161972310721119,0.6559601397783964,0.37739833876885,0.23974381075462314,0.0809849988319652,0.785127614176753,0.007106418016103455,0.43066581060699755,0.1949987862911503,0.5398332811208287,0.0006265771028561851,0.8675059633370189,0.15021524888046828,0.15325616965430278,0.4855711727077907,0.0008566187991721486,0.11035687161598606,0.9965283291874024,0.42647120222419227,0.9045952949569154,0.7816359564589643,0.0786876721695135,0.9872266153613336,0.9365449763802722,0.7307162197334662,0.6551797585169281,0.970494759762984,0.3168931384785706,0.9603981455863364,0.6812721082758926,0.9471380812346359,0.346694356259634,0.9802576384918038,0.06441900174971638,0.7583170723646397,0.9202481016811854,0.3991868416305508,0.5665687463998295,0.8072083094006659,0.0032437570675062366,0.4579064557235656,0.9992547845685891,0.1309600707289575,0.8481606054738992,0.8483742005048449,0.13116098742437093,0.17351893407856078,0.45820309027309963,0.8034376602819692,0.5712848167628272,0.09674135205068407,0.39947842969839514,0.9200867368854364,0.0122690519374965,0.06456524045154233,0.9803403771416188,0.2628083428697009,0.028742548070396445,0.03852028784985295,0.9605141737492489,0.31661616692415223,0.0518516062551429,0.6554627150401318,0.7304520810449888,0.37300613540666033,0.08127083834367216,0.5980775843198678,0.7813899388115837,0.4311842467933549,0.1945841676463686,0.9964932225367236,0.1101703916779142,0.0008741250517490529,0.14984139791711204,0.9999999872568006,0.15000259652433245,0.0008875202448240249,0.8281953793453549,0.5395365363518032,0.19476295577815284,0.4309606308102653,0.7812032858231303,0.5982989597805737,0.08114749660763182,0.3727877804271521,0.9343155844099702,0.6556772802215076,0.05175153248615505,0.9720104488004673,0.2872865498402336,0.03860723374791308,0.6854917850749884,0.9491494863876744,0.34238341203287115,0.06467625478296968,0.6291860698375662,0.7544229353439624,0.3996996017832456,0.2204876017818932,0.9917049766732116,0.8036170719113718,0.4584280758666678,0.17334797011979874,0.9989866966882187,0.8485361144459578,4.6440316342488686e-6,0.85161340586361,0.5076268679190574,0.17009705927519142,0.0032694831474949226,0.8070301484447524,0.9924685212673177,0.21692438464651542,0.4039256730691945,0.9176096527434717,0.0112904993316425,0.2677375691344466,0.9815799786283278,0.9472390719259827,0.6814825013362744,0.7147636782046015,0.2911949290191689,0.9705711209520671,0.049858661432637896,0.6597672182091983,0.7264173782243353,0.36862438269507536,0.07880929340353976,0.6025211486088177,0.7776291071471424,0.42669452666919744,0.9103281425174149,0.5438315252981776,0.8667952959497601,0.0011627473481590211,0.15309354371039297,0.9999804381521893,0.14677782557774322,0.0006379272814551196,0.8316037149297191,0.996984335000559,0.1911830639392902,0.43545574082297794,0.7849421210994068,0.9869904212462766,0.08364178949178003,0.37717947214165476,0.7342683867331771,0.017815075799018365,0.29235199695856917,0.9734872948883483,0.9588183571621403,0.0368785436638841,0.6896961972796719,0.2666112859619246,0.979125850016741,0.06246301432345763,0.6335624619493152,0.9224084937921919,0.015648362181727937,0.09420824447138892,0.0031257881258863196,0.8000008489950547,0.45390977529375465,0.8940538708397061,0.516469968222531,0.8452696611411948,4.476588482077437e-5,0.13388176424020182,0.9994714601825629,0.16670233303036086,0.002772071432651735,0.09612329174400652,0.5622946892164085,0.21319723533918633,0.40838082264259706,0.7619976841224985,0.9800486440208094,0.0690954596762065,0.3508024152445084,0.9451926982269947,0.025788886278153067,0.31759052257873976,0.29532479124533895,0.9690186379229495,0.047902759894603075,0.6640585737243925,0.9386301149090688,0.9862405392898189,0.0763824093261718,0.6069562761696852,0.9071125601212104,0.009574671098285248,0.11082682556972462,0.548347975888756,0.8214709213545635,0.4812635506907209,0.1563742373250887,0.48905890972756866,0.8645699280627746,0.00042942810292323497,0.8349847619944759,0.9974612925413623,0.18762858543759875,0.006400662194493201,0.08057667305025917,0.5893887522906592,0.23607340863991272,0.38158127107218587,0.7382657983147053,0.97166405349427,0.0558442377835805,0.32487378011139423,0.9569968931687469,0.0351879650314848,0.03177208548034993,0.2706321618794432,0.97780925668872,0.06028577990391132,0.014292837689249882,0.9248179723663208,0.991893805171026,0.22805488088981535,0.5800286272637389,0.8905930266669724,0.00497498102814703,0.12861508861484267,0.5210025449264356,0.8419747947110848,0.00012603033561592314,0.13698588002127055,0.4616807352971067,0.8827744594835223,0.5678298819068569,0.8141390323209727,0.9939559769009181,0.10493448284107582,0.011512793632590279,0.0662906548444841,0.6162141524233985,0.25974282821112427,0.3551376336769759,0.7138177911986221,0.6730001953811151,0.3133749207243177,0.2994714967190233,0.967427558148015,0.04598406259718907,0.02286379192904564,0.24662891050013375,0.3598936706766799,0.07399038582607903,0.008517970894582783,0.9097290154242426,0.9960686564505974,0.10799515686297634,0.5528604478004818,0.8179837212824481,0.4767317915469432,0.14751956997791266,0.4935939896296262,0.8614508435156861,0.0002620398671602242,0.11868858214925365,0.9978973127174009,0.8998285406565038,0.005697546281777488,0.7923491400508994,0.9889660486852827,0.23223192321743025,0.018093100947296936,0.7422436023930111,0.6426902643600816,0.057945501461630744,0.32912938830205163,0.6887271426398648,0.6984489409113845,0.3390762914075742,0.9549612849992961,0.9764533432123332,0.0581447306945313,0.015389558188142749,0.22338718023455062,0.3864076495463395,0.08897538769430458,0.5845025744866005,0.893408594794781,0.4448849243065002,0.12559349549962612,0.5255333932770884,0.8386517862986311,0.5041382494044517,0.14011986916468339,0.4662046879586405,0.8798405314041515,0.0019000400509249782,0.10153733727077863,0.9946387611292671,0.9156809145779541,0.0105651686159276,0.7696805759356367,0.6117978721118142,0.2557749507402153,0.02612180665348318,0.7179090591921691,0.9635802948190462,0.04580576909377365,0.30363470419720034,0.9657980125612959,0.723301236946177,0.36526132738206096,0.9429121692794955,0.9840471208551343,0.07163341974900622,0.009371848489112433,0.9123117530764535,0.9954805815803234,0.1051957472394846,0.557368569690476,0.15561449458642296,0.47220194720367575,0.14431713402292168,0.9996749461721495,0.8583020142522804,0.5315322695197475,0.12163816959535262,0.4389169600059321,0.8970885871313302,0.005035107784883419,0.7960167141835417,0.9898935448193967,0.9302839360430961,0.01690381496717369,0.7462014716244018,0.6383372983758056,0.28005201043643924,0.33339905787328983,0.6929195780117232,0.9526173969934887,0.03503114312874467,0.27873020707481866,0.975058221169176,0.7474823885067068,0.016526158522356726,0.9295318560300221,0.9901860675490011,0.08640958874414767,0.004828749398188892,0.8961917883210114,0.9984118266411794,0.1872960529868467,0.5300621404193658,0.8572731240612795,0.4996025187178884,0.16410979748022575,0.9999119302617604,0.8768753452739142,0.001525492145738827,0.10429365786797357,0.41181282057840984,0.9131431706919836,0.009657820445968857,0.7734888903946476,0.9836759258033035,0.25182717117456255,0.024694434176054547,0.043499854125315984,0.6644609440796037,0.3049901362326076,0.3078140710788565,0.6673502661481591,0.7192337966661777,0.025654007313170413,0.25449074880700795,0.982890615473602,0.7709197177767957,0.01026610113171772,0.20462433074733266,0.4087996582025831,0.10242882706984219,0.4777776184692144,0.8788810467784978,0.9998450668188921,0.16638489371793236,0.5026653576880469,0.855123699397788,0.5270042848845345,0.18491199790410928,0.4434212151117332,0.8943159561685772,0.004413401217572777,0.23311663867424504,0.9907807263581025,0.9279560291288479,0.015754284210300062,0.750139080305674,0.9760045914859603,0.2759877666806432,0.033913611096713314,0.697096137537051,0.6900902931312176,0.33051437518374127,0.05863568864611407,0.6412779736118153,0.7435310629569176,0.01770254515813713,0.9318358732020263,0.989271654771309,0.7935427825401524,0.005477966622382591,0.1829594740537197,0.4358782151893614,0.1196429880009251,0.0002165281389421847,0.8604315568599082,0.9997759944291926,0.14647643348541295,0.4752605640737221,0.8738791451055765,0.5543248881484152,0.10708254215426422,0.4162810592326211,0.9105714281956043,0.008790823790720603,0.2566890113321203,0.9848055432695855,0.9414826415596211,0.023306175811853402,0.7260374630890725,0.966902598495748,0.3008216436007257,0.044533636972440116,0.6716174966148092,0.715148315075151,0.02710772593543931,0.07217431303715888,0.6147810621498386,0.7670963828892314,0.41429426414777676,0.9173752280602095,0.994182160488442,0.09969462405100155,0.0021761460029364743,0.16224750055957343,0.46314949382042625,0.13800033340488105,0.0001612682619996364,0.8408987695487713,0.522474077997506,0.18140319557958962,0.4479301262307551,0.8915108759351529,0.9896830437553139,0.090727126504279,0.38939252535639424,0.2208409342881208,0.014644603274508394,0.2809926689027217,0.9773732497507501,0.9536823529869889,0.03229079761407322,0.7012564775160602,0.6858873324224423,0.9753837062885085,0.05652259271590476,0.6456230496177108,0.7395596966117838,0.018918621287612625,0.08699879168355612,0.9883169785751348,0.7898589295636663,0.4414186879638063,0.9016601381072599,0.9976073738228421,0.8360767906337334,0.00037056308165756,0.863560328821931,0.49053152872823386,0.15744568924372226,0.0016083019120260444,0.8203413917400872,0.5498137881437227,0.20300016678828464,0.9964426752665145,0.9079658987240975,0.9834095396278404,0.07560180358135932,0.36283642848962777,0.9393352375346485,0.021957145804218647,0.04727560470429093,0.9685061839793625,0.29666954186628924,0.0426811458289002,0.6758706042378044,0.7110451283778481,0.9831610815620535,0.2624333997933767,0.6191909243237397,0.7632510679557467,0.012175433883277464,0.10306456877780823,0.9934719211172341,0.8117502888611177,0.002619343750575265,0.8847378359332367,0.45862762973003457,0.8558598956013466,6.664463995115222e-5,0.8442028045094858,0.9985683255676077,0.13067276641456455,0.00455327994769289,0.8886735772682992,0.5770037801374028,0.22548978776302198,0.992433856939118,0.9231947569724388,0.6349812833744769,0.061752033397460215,0.9787026237473029,0.9517571235938173,0.030706473120443722,0.036325368052091245,0.28186420628804887,0.3220082474379827,0.05444599167818054,0.9706387677966826,0.7355686162852203,0.9894862889277812,0.23867973321040398,0.59240056397771,0.7861512233529533,0.006898430752868667,0.1900259994369125,0.5335439356691665,0.8327046650653257,0.0005657138112952209,0.866659182472684,0.48599701590015787,0.8745734435624211,0.48432458350762636,0.8238107592358876,0.9957469901443778,0.11275708111552651,0.008987351071253258,0.7764029038306081,0.6039623329225798,0.07801738896384502,0.9869450008540077,0.9371516794869559,0.6611622306386895,0.04921944221876745,0.9700712148883085,0.9628212281137738,0.3204456823575055,0.026768731683272817,0.2575360244464876,0.34788191727064477,0.06754997525352208,0.6235909779709898,0.7593840894171633,0.40537156742877845,0.2157114794422781,0.5653324885201098,0.8081913350935137,0.0031034722272114124,0.16899168232081802,0.5061540819839896,0.13180268985685523,1.316181505245373e-5,0.1269326629178727,0.513408488829541,0.8921611898920743,0.45696043195643105,0.8024454824444527,0.5725190085423583,0.0960052762712541,0.014897188431616915,0.7531538533358018,0.6306084210468951,0.06395360125791794,0.34098626987223246,0.2639069728738307,0.6868587957201959,0.32723621309161244,0.9600269804547822,0.9724942973037519,0.29514210971573385,0.018634418607968495,0.9335839259456568,0.37421278658887824,0.08195371179249483,0.5968543543506573,0.7824199690246605,0.43241974581715564,0.11738768699665664,0.9966391268296644,0.8293051603773024,0.0008019642684015116,0.1489522293908045,0.478745731857977,0.1508943373762358,0.0009633484880662846,0.8272534795143784,0.5407796617887619,0.9085702736257841,0.008151441046653607,0.7801711886807687,0.5995214682757029,0.08046770037694112,0.3715820631808166,0.7291439346428243,0.6568619581881678,0.05120037562070168,0.31524668272294704,0.28841587646115985,0.7119937461419268,0.028252394450903995,0.9486001089603677,0.9807472582082017,0.06529109308418118,0.01194687696335417,0.9192861211880711,0.40092171647842023,0.2194543928040597,0.5698266295003465,0.8046070194710455,0.45967104047476787,0.13560254271671868,0.9990645040486865,0.8494292404104338,8.241885423032613e-7,0.12996787035399388,0.4514012626347892,0.1710352416736261,0.0034134179906475937,0.806044866081542,0.5680282691722335,0.21795329558855397,0.013818221816265963,0.7570548245922526,0.6262248106175937,0.2688427209926281,0.34529304091117485,0.7044453109178036,0.027653809434622645,0.039796042591840664,0.29006238209911006,0.3135607080769084,0.7364915373913792,0.01988095550750829,0.9358249445124533,0.36982812439313717,0.07948267190811698,0.006726206533392343,0.903728128322176,0.9972543590289022,0.19719455694083982,0.5425890367729633,0.10811948939526517,0.4870435460970316,0.15491261556694813,0.9999899147257698,0.8685030911342497,0.0007024598593727838,0.11209566377324603,0.9968460206348844,0.9059389013581274,0.007356006500586043,0.7839164175257296,0.5950724137521264,0.24100260242103705,0.02094624936792744,0.9326768230461835,0.6525487771650672,0.29348716139070624,0.31946899914115956,0.6791322152687226,0.7078771705614759,0.02977487853809252,0.950584731732458,0.979480953169297,0.7602785399739138,0.012952541457776967,0.9217398835890177,0.3964800189339521,0.09493813930222028,0.574315024268275,0.8869567077738667,0.9993747322875676,0.17584481993181833,0.5152234402911663,0.8461706467774661,0.5144549930729659,0.13303352868246193,0.9994125774868792,0.886469385013573,0.0029047624752728263,0.0953893255744267,0.993026511882005,0.9213264234422895,0.4071550703251463,0.7609346421483522,0.979698363983465,0.26483034055381527,0.029514100012413835,0.9457590269165346,0.6784142497505277,0.0415882590912422,0.294187553486224,0.6532807276336221,0.7324855166926252,0.021167002633772247,0.9380300979275398,0.9865295908497924,0.07704623747246048,0.007487976041284705,0.9063872596358478,0.42344304862215104,0.11161104298668939,0.5471065162050613,0.869022266994443,0.48250988651622645,0.15546934961688952,0.9999405337091569,0.8654223018091296,0.5418229947511533,0.11497351712955728,0.4286892740334732,0.18860337274085748,0.006601112891398031,0.78763828216101,0.9877251841135222,0.9354476251745305,0.38036996836698306,0.7371686129727579,0.6482230425121087,0.2893648943747196,0.32370617191813655,0.6833594803093136,0.7037434882358671,0.031336058655720755,0.06580930082721548,0.9781751904138385,0.7563951144782293,0.6367286710504745,0.9241589399340178,0.992115936377635,0.09229570213137905,0.003503683317896522,0.8898132158309773,0.45063617454979,0.17931154362338142,1.9338373957733523e-8,0.8499787089581683,0.5099205783818843,0.13612938562239574,0.9996118264097835,0.883575659482545,0.0024370142010571305,0.09807072440784764,0.40167537451122726,0.21050964288883217,0.011780401517892669,0.06567144669530062,0.9809579707693343,0.2608373128290219,0.3539444212226863,0.7126897601413612,0.6741697794768056,0.31453252389712666,0.2983296617070622,0.6575917456876398,0.04650790888611578,0.02249245415464618,0.08004995245450042,0.9854638378453722,0.779534102272311,0.008290275625944865,0.909012948300347,0.41896396556943055,0.10877054507476092,0.0010116383043283772,0.8720675663987607,0.4779776662416874,0.1587705728617873,0.0007590293746734811,0.8623114409462103,0.5373014533891425,0.19299051217693303,0.9977815075602152,0.9005761588563649,0.005886822341219455,0.08237595281511662,0.9887039685885133,0.23328599264847644,0.01842706171038966,0.052749224777707715,0.9727452110911949,0.28525996106143603,0.037748110807716895,0.9556527308287358,0.6995930393364134,0.9797767377313107,0.27355928308316124,0.6313503601773542,0.05872981525922588,0.015084025540618107,0.22234912264559542,0.9912933963050755,0.8018329345407285,0.004060126252424079,0.8926376451594598,0.4461246492012364,0.8469253071048483,0.5242877875977593,0.8532036468904092,0.505385347300981,0.13925518640779289,0.0030185363331707293,0.8806503685273877,0.5645702167723611,0.10078519903150823,0.9944550782870863,0.9163727039699467,0.622845902360622,0.06793637387344503,0.9821779982910861,0.25686396641473364,0.35828831855099597,0.7167858998359975,0.9631115889919737,0.31032802260417275,0.048887358600178066,0.9662498980147094,0.7244164110481368,0.36646276372464703,0.24946948481781617,0.6047141937440831,0.0722779840847782,0.009133039264083764,0.9116049782410238,0.9956463447258863,0.10596224243740571,0.0013205521680692556,0.8750822474094244,0.47344725824143685,0.8661360629136037,0.4968824577575041,0.8332781538809799,0.5327768423949281,0.12082403885713988,0.4376793381253386,0.8978452299360844,0.5916449107237155,0.0848872053832932,0.9896425363613731,0.22946045232122037,0.6492225687059859,0.05479538655253813,0.9742028147981132,0.9579228469065396,0.3322236906032797,0.6917683963949797,0.6954261654141924,0.3359661539830311,0.061382450904232666,0.9754457248097496,0.7485652865668764,0.39306929476220237,0.2261326701597191,0.9904304264397413,0.7982044728618811,0.0046573813502642225,0.8954297633297852,0.5187102909666471,0.12342197160866913,7.978731745544865e-5,0.836225026591257,0.5008496730460456,0.8842463761148156,0.4694864978664617,0.8123509745646201,0.5600698248386187,0.1035325260643345,0.9951083550802462,0.7639043581923644,0.6184441607220149,0.07023685667476948,0.9833583461495284,0.25291062828781063,0.675150738196644,0.7208641996633105,0.9648023879738272,0.9682370962860749,0.30666332382537925,0.6661745222121834,0.939701758568805,0.3620972983467341,0.2534050558433599,0.9832125726372672,0.7719670850839195,0.41999721207119445,0.20361897922282057,0.9950287017677558,0.8197507350887043,0.560634210011401,0.8780660619406069,0.4913001877046593,0.14201352730422745,0.0003415608893894695,0.8366456112946423,0.5282495341103455,0.18588133329244672,0.4421822480287418,0.7904850067602229,0.5871822640324746,0.08743261864727958,0.990540810194954,0.7402342148354586,0.016066390277092446,0.05687818535607575,0.32697524497421776,0.2771034453106779,0.7005524822553998,0.6959493554487977,0.9540049713317558,0.3316882203420209,0.2816840413426731,0.6400812011213846,0.9259959098118123,0.38864291706564535,0.22993875491834176,0.5822406270507247,0.08457055279764131,0.4471655822759175,0.1271178948495169,0.9981391403854305,0.8403359684294767,0.5333441402516651,0.8595660616582934,0.9997371120806677,0.16168103155383895,0.47401501509747807,0.8158798964097045,0.5555644896050305,0.20767209622141886,0.011039420899554286,0.9112819298093886,0.6140326720098478,0.7762360164292474,0.984498917210811,0.7158420339832815,0.0236839850574439,0.04485134166803312,0.9664549371758784,0.3019661905124381,0.045049573148449706,0.02353871899808957,0.9418430171171921,0.357743181335587,0.2573609197988852,0.9820272456959666,0.9110097062979959,0.010939677963895,0.20728413831190495,0.5550890584341512,0.10044314472765214,0.47449274930591273,0.16132895586985868,0.9997523936938981,0.13886174682042995,0.505953852795937,0.8399853652781231,0.998097679379436,0.18236537256313934,0.4466899159031425,0.794164786662896,0.0039881401173449404,0.23034146716876502,0.017500358839535435,0.9262461672473896,0.6405403483537045,0.05899744978946875,0.97700083537828,0.9542051754764965,0.03273317451144475,0.03419247296832956,0.9558865225640366,0.32742413750874455,0.05709997786009874,0.01594632028287224,0.7406536400407904,0.38422570322885297,0.08770305517670796,0.9885834847159836,0.8947881899080726,0.005974128082778252,0.1855092957532417,0.9977276875486829,0.11751662734343388,0.5018965798178979,0.1416797285064943,0.9998636129692625,0.15835523249266448,0.0017098026188788196,0.8716875232829663,0.9949611859823915,0.9144309507887368,0.4195250431762165,0.7715655480425024,0.008187490985378465,0.2538213120602886,0.36163754695395856,0.9399292977657159,0.6666256227462848,0.046747651854041616,0.9680691006056179,0.9649784818544974,0.7212932665527766,0.6747026001527086,0.9439479152712498,0.3534007710026543,0.07048154359250658,0.009808772229619345,0.7643105462633567,0.4110561913071801,0.21097338573948315,0.9936712584893789,0.877380115325349,0.4699639889678456,0.1646796727609754,0.9995891048038981,0.13573968532908987,8.856171473375918e-5,0.12310745294831454,0.9984724639357129,0.17887555080142642,0.004722748393191811,0.8894569173463278,0.9903370587975118,0.2265330237312096,0.39260204247529207,0.7481501038360521,0.636181711173516,0.2780410608965975,0.3355143359902779,0.952290195943104,0.03113825397833736,0.03586012943963196,0.9577305577259312,0.974354269154613,0.7455320546683359,0.6487659324497714,0.9306749974557382,0.3798180167556733,0.08515405129439918,0.00514452158550438,0.7871730522172996,0.4381540050239157,0.1890483935763238,0.9972752754248428,0.833634603582368,0.4973608186459889,0.14485787394295963,0.9999489787999876,0.8753983976904439,0.0013555247066037168,0.1056679492180197,0.5465404726369371,0.2003610267715505,0.00922427790841801,0.9060557766575541,0.9842391959001089,0.24988358552087947,0.3660018323989317,0.9377556628208289,0.6623423212690367,0.3029279198552224,0.30988549597592674,0.6694609976279863,0.04136154076245069,0.026367605609518674,0.7080592710687696,0.9823043579187964,0.7690328823319131,0.6223821403381762,0.9161076616213282,0.4065964762442874,0.10107340191553232,0.5640958241692856,0.8803400205158036,0.465437700370109,0.16805798402125205,0.9993847034460088,0.8535420773150781,0.5247655805326885,0.8465806659092826,0.9988062279153394,0.8929336459307848,0.00412119182027576,0.08941363272863012,0.9912042885357117,0.22274708459203152,0.39703630892215747,0.752077579415523,0.9766859247613804,0.273985886314756,0.3398043613802526,0.9503379962902603,0.688015002352839,0.03756598117048071,0.2848280558364616,0.6434269108380852,0.05296329132854383,0.01829861067998001,0.9329614747919697,0.9888048537064396,0.08263918614846627,0.5956305217946288,0.9002896907182785,0.4336556652967078,0.11819174894887663,0.5368244006173859,0.8619816093922047,0.0007329092840441809,0.14806524493521317,0.477499771787228,0.8723869603749631,0.5520959080689396,0.8263095436506985,0.996164286752252,0.1967423292247107,0.0083772506871021,0.07439335674600295,0.9853491070807547,0.24596644170227028,0.37037714489655615,0.7280347470433568,0.6580456602260855,0.29876748528709174,0.043613388299226064,0.9615668134877081,0.7131225937325569,0.02784057255410366,0.26041732712285615,0.9810885105597886,0.06590863596030577,0.01167739647081717,0.9186053796148079,0.9938362189104626,0.09835545190641692,0.0023900690850301998,0.8055950718947096,0.4609142559925928,0.1364576422359955,0.5094422992504846,0.8425352421056633,1.1512879516395458e-7,0.1291302656242338,0.9990989438520224,0.8901126134020859,0.5792696584123802,0.09201896782256047,0.9920310958140437,0.21898396130586611,0.6371887437928909,0.7559843108849049,0.9780351814837576,0.06557227795386683,0.34410756967991335,0.7033065433650976,0.6838044380465089,0.3241538999431134,0.28893114132209474,0.9714083655691551,0.050950045406280176,0.3808344979070123,0.23672667765838318,0.9878303069705987,0.08015866669360766,0.6000785698054448,0.9029911423365669,0.4291627852148442,0.11527888302877476,0.0004618743320969343,0.8268234184080963,0.48829032109870385,0.1558161826034014,0.48203181852011445,0.8693448783820792,0.0007700988553549504,0.11130995623761997,0.9967046151034624,0.90666576094556,0.007570680361864202,0.07679130282897934,0.5962965184836948,0.24207020295626547,0.6633321564027396,0.7320618980398805,0.9692844941610148,0.29462361065835896,0.31830653796360914,0.9598039330570918,0.7090107812515811,0.3500688299803655,0.2644082946175824,0.9798330731942091,0.06367567253261092,0.407625161982071,0.9210686494987069,0.993105901853022,0.8099945395018238,0.573081491899883,0.8861656924288985,0.4563940280811283,0.1333586151878779,0.5139768176459965,0.8470694786864222,0.5157015803058306,0.17620918686512066,0.4546753421735879,0.8872594775065651,0.574788045712691,0.8086388323758764,0.9928174125924174,0.7511729015402107,0.013060942458897717,0.06283561546727606,0.6230399984959236,0.2659316671732792,0.029937706298725664,0.7074420100590874,0.9591233457973006,0.3199151806359383,0.29305159620508137,0.9698771622653634,0.9324368849119005,0.020809459582716516,0.2405935320840844,0.9868156154284804,0.077712697058127,0.4346934638478759,0.9056594307808797,0.9968994391088023,0.11239767679543489,0.5458647634445516,0.8681795997313924,0.999986647566949,0.15254030872801877,0.4865653439007076,0.8662724020525163,0.0005389990925749877,0.19757536269554393,0.4274550916449925,0.9040101464084118,0.601768576081225,0.7866172670000884,0.9874490195254888,0.9360592074658434,0.020014727383841524,0.050193850343694,0.6494136748463675,0.29049663697908806,0.03998327598944812,0.682198643405784,0.704881768737718,0.3457480057049255,0.2684186495575699,0.9785381491352165,0.9180319274000506,0.013706758679554565,0.2175584303348736,0.9923350058470798,0.09301892991314731,0.4619580481950102,0.8890309797420658,0.9991995170475504,0.13028975999902426,0.5185101858533616,0.8437902037618952,0.9990350266734939,0.17276631198634718,0.4591942487727876,0.8042275308421317,0.002561546150061933,0.21985049284697122,0.9935631741628099,0.9195465400065648,0.6284432352489338,0.7637342572471617,0.9806155709111155,0.9488111627797093,0.02841113514352317,0.7115604058183922,0.9609006381863143,0.315691280970109,0.05141145191473645,0.019245548461552853,0.729569005750879,0.3720444438511661,0.9396063917791166,0.9857608625816521,0.9023705513301273,0.008065639567191862,0.19537222266871923,0.9963746556105033,0.10954836735070256,0.0009338961095571308,0.15055203692114455,0.999999222655169,0.14929302820117574,0.49109997485358436,0.8631697842282267,0.9965835278340149,0.11707990582466588,0.431945797633897,0.7820250896343419,0.006079172563815904,0.24296762815817496,0.3737498607154297,0.9338219627929472,0.018764018616572675,0.7400585792947847,0.9723376050648949,0.9602141908059063,0.03822492986039616,0.6864150028252767,0.9495855909500426,0.032492103810343065,0.06418788604666198,0.012438890709942751,0.7535662601567836,0.39872545964522865,0.2213127924829375,0.9915235943316437,0.8028262730411082,0.003903056947593686,0.1741015909852992,0.9989224233233259,0.1272513292133936,9.919699888116806e-6,0.13147921690409858,0.5066324116921577,0.16935036600646558,0.0031569155886549405,0.8814578374050668,0.9926395191666753,0.1000355445378397,0.40490188724226334,0.9170619028671236,0.011081305909060368,0.0673100587856823,0.3474262944179858,0.9467935091784458,0.02692337224469965,0.04067708349119792,0.6710833828852917,0.9702340190999357,0.7345140583079619,0.6607093190169862,0.9369192888385149,0.023478040511319187,0.24839096263473093,0.6034943714059202,0.7768014068525342,0.42571086178784945,0.19898146136864708,0.995809024169578,0.8241751099413763,0.4848027242961289,0.8742563987922678,0.9999706515258509,0.1460746082499097,0.49563533821234135,0.11351400690573493,0.5340212113464617,0.19040148995376943,0.43644210397753824,0.8985993975161284,0.9872148546121863,0.2390876876029988,0.37814379959735067,0.9315490177988399,0.01755291199162745,0.7440274514857693,0.3215612970063193,0.9584221924480819,0.036504584385402994,0.030541630339744053,0.696573504146893,0.9788405325021838,0.06198252512456798,0.6345206142774378,0.7496466381589898,0.01589619086390487,0.22509008851558787,0.5765310832319704,0.7992046112929806,0.004489095114555641,0.1775548584664164,0.4428563614473483,0.8445496202471927,0.5122140800074824,0.8555236961502526,0.9995161897090368,0.16596163003242564,0.46824176385200456,0.8113761465351149,0.5613077583293737,0.21238312970160844,0.40935872141793395,0.9145429446347593,0.6196554478826799,0.2628544318348337,0.9830377592446107,0.9447390877941728,0.6763183234430912,0.7197446303122776,0.2962326071903768,0.3072893296964545,0.04747885816468006,0.6649977444086316,0.7214728126440921,0.9860078636507337,0.0758549208780494,0.6079276002372271,0.773012760326897,0.4212285462410551,0.9134631350206205,0.5493377765667535,0.8705311529123219,0.0015701922225232479,0.15709738264092127,0.4701638736079149,0.8638885672175767,0.00038920554782650996,0.8357224469681293,0.9975604037835313,0.186852622994239,0.440943640663343,0.7894690137695989,0.9882139490714441,0.08672934022252843,0.38254776633832216,0.929240559529991,0.6460806135662176,0.2873339304600009,0.9752352396789576,0.9565924693530975,0.03482238113610697,0.6948013542465522,0.2715163517773483,0.9775153080805794,0.05981320978312732,0.6388835571049826,0.7457064720994935,0.38985909318852474,0.0910021086122263,0.5810102037013786,0.7955583272305234,0.44840591777532557,0.897433825567631,0.5219961824286679,0.8412485598508688,0.00014934825695467335,0.13767051999069568,0.9996951205792477,0.8821338265556153,0.0022209562763397805,0.8149121650182076,0.5568037453628981,0.20868479807658802,0.41382301469673416,0.7666918655410313,0.9815658966309597,0.0719269278308991,0.356089820577825,0.942648067690492,0.6720667257186033,0.3124526089633759,0.9660043737707258,0.9670735364681478,0.045568339833546245,0.6692725917129978,0.9412578748915368,0.9849223550064927,0.07347056765061138,0.6123519474296903,0.910298224373642,0.416752712999083,0.10737856259921896,0.9945554070065432,0.8172155768957153,0.4757383582365008,0.8802100063145052,0.4945884775224837,0.8607629385073006,0.00023083364460307898,0.8390698457623645,0.9979874427327861],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],19:[function(require,module,exports){
module.exports={"expected":[0.4999999999678966,0.06394943440003897,0.9047991506639705,0.6274178532620862,0.05812336735685014,0.9157005416625543,0.6688728744656204,0.039494858647025455,0.8005118244106182,0.5901856651843018,0.001000980759830794,0.9828256319357727,0.9255841399411404,0.14228464687882575,0.7269311942756858,0.427778584448692,0.03746965116124917,0.7962875930333901,0.8189980842575504,0.07446011217048204,0.8577742438673504,0.7522212992738361,0.57230482594331,0.9624983252406227,0.9895083981412192,0.2825766472441108,0.11581921910522097,0.6005214550921156,0.0004457480348594167,0.6414804199497589,0.9310160966499443,0.14972002894604003,0.2386719991899186,0.9768765638128126,0.530312005745986,0.7877410593556934,0.8270346918651514,0.053831686099326814,0.9894740149498742,0.2824248428113906,0.1159271417714347,0.9036337313642342,0.6885383002980903,0.005031599758741234,0.5512420248090619,0.9701449380528104,0.2210030194425774,0.16501113790954391,0.9412775185072653,0.7878789189939992,1.2716660002798363e-8,0.05375561453600519,0.941383522852196,0.9998861689904073,0.22081588762684778,0.970068123358149,0.5514663683992198,0.7701751114950548,0.688329393409925,0.45926962729083487,0.23895952066942927,0.301727116714519,0.5299754374169756,0.8907458808794327,0.7080226575801875,0.008480533493851306,0.5300868811659069,0.9769443094983377,0.23886430534665626,0.14955912330775806,0.02640270247744486,0.6416967245479513,0.8426693431895984,0.0637297157945142,0.3686755235339989,0.18124055967054492,0.38916066101354135,0.05380598546685045,0.8269916141892298,0.7877876283489222,0.03359380691303471,0.16492826288159695,0.9963655589247621,0.2633159668615177,0.0901610885301401,0.005047411045816019,0.7271321402514156,0.9035678298289558,0.9933094662870583,0.2825253689627865,0.2571961800945463,0.9971565762795092,0.7077159962326398,0.7521721283054201,0.001810849729615538,0.0744900133978238,0.23857682320317608,0.9989900665653828,0.9310726737238295,0.04463178063326356,0.0004410472611567351,0.8048815272962351,0.6483706614843786,0.999895544258991,0.14461908970461562,0.3413681503321673,0.9789911231927089,0.7875118330377232,0.6688192741236607,0.43849075268799964,0.12978524746164133,0.3210718022952129,0.9847290205025281,0.12057637514149416,0.6889539197670019,0.6818510557257644,0.8723138885176883,0.5583979322553154,0.9895654276525145,0.1349689735877313,0.020119393809759967,0.9446168698189017,0.8575784250693397,0.5797536671029161,0.0505545657368357,0.15004045005534855,0.9996807421854897,0.9540650068141523,0.06734796333907134,0.6009610775402527,0.04152656062696902,0.9271473493193645,0.4664490486148901,0.9626686820209525,0.0785559613175677,0.5227861538847177,0.8951970222823209,0.7146484136247108,0.4879892391653848,0.09829025188571017,0.09054775320507835,0.5012297827869688,0.9080356791222266,0.028760262223018307,0.004021367829168898,0.08582812624849878,0.9675263750741172,0.37563551100512915,0.17064397700796202,0.03640438715009908,0.6138931001776362,0.8211676526953737,0.9594492789067236,0.3966312488719702,0.15961957842843538,0.9954476667917019,0.5927963356628883,0.8481986449559484,0.0061190587080399705,0.02400573627797059,0.14414504384855076,0.9920845614112763,0.2890304003730484,0.8633457949773415,0.009940637534638697,0.4391600495199301,0.7583624519121477,0.0012503428202135236,0.8161395240587731,0.232467194157996,0.014673619793485748,0.6812227107791444,0.7765787571562288,0.000190518863322664,0.3288676457542685,0.21450390050783624,0.020309203170808754,0.2095643867751465,0.3345573948276054,6.023143091848926e-5,0.7815921604871539,0.675578136858777,0.016162113404408762,0.22738223245877803,0.8114353175904503,0.0008597228291830072,0.7635166074751119,0.44516177420722863,0.011175261267549252,0.8674700227638105,0.5655417326214555,0.9909777633524209,0.7449509710999055,0.715257278500244,0.007097516432318152,0.8525094290937639,0.27506174691339813,0.994598004384334,0.934436762109806,0.4025504434560881,0.9570321276959003,0.8368932448398345,0.608001446384036,0.038701568184809354,0.923361045349131,0.38149688439226076,0.001697978682388801,0.8206505126956585,0.5155921463189213,0.8995662312978008,0.9114979694655319,0.49518753196795423,0.0940454376404315,0.972425216978582,0.6496580972482282,0.023799723939105344,0.8988695971903948,0.5167485883417312,0.9793762319743107,0.9649257593640069,0.38262128176641,0.923975501526827,0.039149151949525895,0.538278495997477,0.07040818104260166,0.956561641332185,0.40368556253802546,0.9350083764154908,0.04793986631196617,0.5597372140070178,0.8533290493808008,0.007293097942907278,0.42492896713748957,0.13912473729717167,0.9907576373889676,0.29557917007584145,0.8682536692153109,0.9373032249011811,0.44631198746976847,0.12453916203694398,0.9861755144348554,0.31544282152796965,0.22641303010940433,0.9996977555920383,0.6744943045952362,0.11065186197071081,0.9806892111579719,0.3356497090424787,0.20862333381778508,0.02238988475100362,0.6541298545199536,0.32778093894286975,0.0002237951636532287,0.7756141081495839,0.19137553451656225,0.9993374713404548,0.23344539551967658,0.3077026333966827,0.0013334538200148738,0.3769423022077048,0.17470170934717177,0.9977637413347886,0.8625499729939394,0.2879819589730863,0.9922883093675683,0.14495879114535953,0.41667813923405683,0.995264279434074,0.2708799084822181,0.26865559182140575,0.9956021185530722,0.719484098504122,0.3954994754616127,0.9599044965141633,0.8315387010409889,0.6150194243294903,0.9979942159900106,0.1766087302251073,0.37451515985192363,0.9679353062101457,0.8150934617364758,0.6358919055812307,0.9994601528993554,0.9073658702388667,0.5023868224931101,0.9750958583887437,0.09898024845632042,0.4868325587012016,0.9161871224596136,0.21066329941967205,0.3332852440796495,0.9813728359860825,0.11222887012245553,0.4652946997849167,0.9277476256268782,0.04198946051090169,0.5998275940532098,0.06676915533303474,0.12619866143815972,0.44382138515072467,0.9385126115895103,0.05106275517956216,0.566878581439371,0.0564095296243598,0.14086364164124765,0.43205426797815494,0.1341792475337812,0.060970975118775694,0.5572486482880256,0.8730851969714255,0.013000313731168833,0.4534750560374854,0.9575774665276146,0.07169569320245972,0.5357796055622485,0.22041558620884794,0.01833705521661444,0.6677297221899534,0.7884576855115057,0.0832169637962279,0.5142440205809579,0.9003755703504555,0.024569584630391772,0.6472653335270125,0.8057977672357013,0.0004909726771690215,0.4926819448309138,0.6889852658602359,0.03168631082837747,0.8722912886135904,0.8225691318697257,0.10856201275721239,0.7511723403628858,0.9246888839146923,0.0083511410847526,0.6055534807409171,0.5797870907095476,0.004256502004018781,0.7322986396076796,0.7281623066131042,0.04851779155075342,0.5843835915580788,0.8542820612576384,0.041513052311345555,0.712992914094534,0.4664828296546551,0.0023391585561995387,0.8261154225205667,0.6220135564069287,0.011708215393090138,0.6932910682583857,0.7656428082048199,0.0007191109583981059,0.8094710854885859,0.6428059570599063,0.02603295279938328,0.9031493157749011,0.5095856181813765,2.7616819180287244e-5,0.7922511997963837,0.6633327698078695,0.02279070437762154,0.8900229353363456,0.5311303225095675,0.07411853015259873,0.9594359213656338,0.683555819260193,0.014077114891399345,0.6321784935107769,0.5526171312337658,0.0014337037306099143,0.9505030209067138,0.703437494959669,0.1441212608278728,0.9920785596951472,0.5740060835804014,0.05313367978772404,0.7374634957754029,0.4391936553521818,0.005734438228690353,0.9877988533918258,0.5952574007674043,0.23243859179155862,0.9301418796112875,0.7420295264410319,0.11518734211133513,0.8305279056597914,0.32889945856103986,0.035471579018495125,0.9999910760299449,0.48217507155085443,0.10178075190110808,0.97652748916088,0.6371893678947845,0.02792859330974351,0.9065823461079414,0.22741061505645582,0.08911476255947542,0.9864522400311716,0.3700100672649117,0.1801765890347523,0.9983895474842196,0.5252890279995255,0.07721293006157604,0.9617128247296165,0.3909472454497576,0.16390334777754967,0.9961972629010636,0.26453473953874007,0.27503150981113106,0.9946029666915229,0.41208723795141045,0.14825517292222468,0.9930821597307774,0.5682149436320532,0.25598848703548266,0.9973019147958995,0.17117716893733154,0.3814639920481393,0.989050031385218,0.3034097055223812,0.04630637163212997,0.9990759899017715,0.45481809874910456,0.3606311995165641,0.9841083767428784,0.09474181945715704,0.49399669710394395,0.9999218926167295,0.20484930645263744,0.10534593374428092,0.9793858545460319,0.34374645166697315,0.47244625356395353,0.9998380497463879,0.03916228622359824,0.31978146348489334,0.9715349245914877,0.12147825808628854,0.18469559219004267,0.9350250678039425,0.24071608653391957,0.585679307050136,0.9898445393101114,0.1359151992778227,0.4295390821616729,0.9968834798013746,0.25938970981639387,0.28027177265745495,0.8682765704309718,0.1510292587175182,0.40826215227138213,0.9546421418192286,0.06804263295547736,0.5429228335744669,0.9966609027102791,0.16679232755427748,0.3871558347511241,0.9631911119910235,0.07930152464694512,0.52140492110692,0.8960424795154589,0.022399904070059762,0.6540976456671118,0.9708786478110045,0.09134282366239393,0.499847200158895,0.9997842605313516,0.029224211267305178,0.3456116590886398,0.8170612689168109,0.0013359260114323424,0.4782897633852176,0.920863548209998,0.21767672596906834,0.6125464291103564,0.983613856511302,0.003374449148969616,0.4567727029122114,0.7217631228905046,0.045485126210917215,0.3052154638716094,0.8491895327677147,0.13193019976200626,0.7194536771532665,0.9425552152884734,0.0030825455248155165,0.5701583546726128,0.6150523733355421,0.010216831821212635,0.4140196294950325,0.7595451639055695,0.06512566285522092,0.8150671727561347,0.8787213391853163,0.028363522641497774,0.6799334445160234,0.7777294966959232,0.00015426614138708272,0.5272486060023853,0.8924441495465529,0.020701079522010668,0.8944663551734163,0.7953973132518927,8.3602229698998e-5,0.7804486130657537,0.6768720005558068,0.015815279349089884,0.6390752865240015,0.8125157552916397,0.000942673684095785,0.7623406199737977,0.6968712448163951,0.010886453908474314,0.8665310446059984,0.5669121343220823,0.05639390816121548,0.7437447305987068,0.7165043515394124,0.006867272888127218,0.5971830108749532,0.5882135844642744,0.005441905816208403,0.9337506758821168,0.45350876652542593,0.0037652110873430678,0.8358703308807016,0.8602619304892853,0.03816997927326826,0.705228443239179,0.4750161852583253,0.0015860376638786589,0.9786481806044284,0.6302849997845046,0.013618507741354258,0.9107110243061466,0.7728455242851427,0.09323986054071665,0.8027121968853048,0.36310452900442186,0.023380065089982194,0.9989129968808431,0.5181303305307752,1.0843188079867616e-5,0.9644152815912659,0.671387659101492,0.1692428534202421,0.884617461911182,0.25823792927288974,0.06970240128123456,0.9559962398918078,0.40504261942818354,0.012134138502912006,0.8704852476787307,0.5611096646847425,0.26226761316967306,0.9467291447319709,0.4262961638952554,0.13816915819267472,0.9904911573451425,0.2968417033998159,0.04936449210525595,0.9366312308857083,0.44768678140763707,0.0045158204884654385,0.9858507895921249,0.31672847677320004,0.22525682866342578,0.9997439108167963,0.1990959300589898,0.10978591697546186,0.9803068454336545,0.33695609517087255,0.03237735895314414,0.9999690778823174,0.49071992711234014,0.32648361679179627,0.9832783255237662,0.3574869396383846,0.19028894316337652,0.9015478897207553,0.23461614324252378,0.08430417812694196,0.988357439627076,0.37828282728699286,0.4366400847581413,0.997631222520019,0.5338220763580135,0.2867306405516543,0.95836494391694,0.1459336502307063,0.15762396625662206,0.9516134449814292,0.2721096626763764,0.26743078852558855,0.9957831962331682,0.42051460788880607,0.14223168958402477,0.9915931466026704,0.07547248644660987,0.2485634644620674,0.8916280514566348,0.17766442665003762,0.37317730709338903,0.9684206615779771,0.31129769899804,0.23016375746503603,0.9995224735941272,0.19444407135145492,0.35244265009304615,0.9755249459104847,0.09980755776913058,0.4854505064443345,0.9169517776545184,0.2117919833760657,0.331982417551165,0.981744857652614,0.35188886298001554,0.463915584902326,0.9284619060641494,0.042545806862823055,0.5984724669027592,0.8440252894778542,0.12711832722654637,0.44244777249502565,0.9391751888634647,0.24806255922746467,0.5772455332569848,0.9914869589070163,0.008826037467001557,0.7064267352733303,0.949071701685211,0.06163429394577924,0.27262580696328625,0.8740042316148446,0.15720172100445945,0.6866001919695652,0.9581330391759881,0.00038357128067656454,0.5344004311174733,0.9975745263106741,0.01870989068170531,0.37884517533989037,0.7895858812116493,0.08398232287974061,0.7863518383257077,0.9012022024564874,0.18983404897454748,0.6459435169503976,0.9736843643112485,0.000554137535466015,0.49129953879325655,0.6902645622414173,0.15433253250477585,0.33750422306505323,0.823624282435764,0.10942372114119159,0.7499759063482119,0.9254169669214419,0.008101384680892998,0.6042016543930337,0.5811516512963251,0.004438417405465023,0.4482633402099844,0.7293916743878124,0.04911363432272403,0.841143776732749,0.8552563209402766,0.04096322786807821,0.711741236524138,0.4678624300167233,0.26175778604993194,0.5616849829289803,0.6233538743925265,0.012007528675157253,0.9147553527281527,0.7668131062024374,0.09744849688518542,0.25874552580042454,0.35622710565114846,0.02559445863626969,0.6719321291642304,0.9642001858707775,1.4997041198505645e-5,0.9670223591649311,0.9988744568794625,0.17465028831157675,0.8891563317455706,0.251990770892069,0.09290301411219237,0.7733311260840603,0.39801750277689496,0.20230998801724792,0.6308445915740302,0.5539918353401094,0.26859556359256687,0.47559518320479444,0.16051774396507668,0.1431514607361689,0.8606636734816281,0.8354406673368893,0.05251516184535737,0.9980002706617952,0.9334620187466535,0.005527534057954975,0.9874934208359532,0.08651550452809137,0.006771855591117815,0.9294353733451951,0.19340435183840016,0.05612675254182842,0.8294892398834963,0.3301992238165603,0.4867648677614295,0.6974039896573165,0.4835568429557165,0.33322140602572414,0.546063513143279,0.6385183643783274,0.19594590104469306,0.9277826850174098,0.7799684949938999,0.08832851234235756,0.986770043535374,0.8941098729650259,0.02086648050422457,0.9982767642268446,0.05109257072813039,0.00014020287250043895,0.961180455841624,0.14091075812011805,0.16288100251816773,0.8790995751983489,0.8146168278702932,0.5571813785381906,0.7600404748202714,0.41344861738759736,0.40116155787214164,0.9928510829954442,0.5695843374325638,0.25478265972450287,0.8871331927871413,0.7189326457049485,0.13232280893202625,0.849604209431716,0.3046816878010081,0.04572701300078991,0.9991580972293965,0.024590554673451115,0.35930394568803947,0.9837607247394724,0.611981524959631,0.7695218834132109,0.921176250103301,0.20596643150418398,0.10449854086832938,0.9797769204442757,0.3450603851069095,0.47106587772915454,0.708829445227964,0.4992674949882848,0.31849250265213347,0.9710732823448845,0.12238303526425298,0.183623774479377,0.9357049668344902,0.24189923595643265,0.5843168475400429,0.9901199055439802,0.38659116194856774,0.42817056659735936,0.9967274534007545,0.05823295439277243,0.27903068910527196,0.8692103129256856,0.1520207356615405,0.693228616408871,0.8686684237913489,0.2797511919995961,0.5415451912440554,0.9968185217478802,0.016817546797111504,0.38580935528467947,0.7837149754713467,0.5851081187456763,0.7921962540771567,0.8968849085492784,0.18424589433790461,0.12185727135802116,0.9713418007326549,0.0002681750803317784,0.03938749950797593,0.6836188040821627,0.029691759932835737,0.8761265854662212,0.9795502715033,0.10499026151451979,0.7561557432962052,0.9125011775082139,0.21881889571231272,0.6111988974964494,0.5740730516080732,0.36007456317487363,0.940700300928513,0.7230014300283903,0.5149788704353043,0.3039428542249055,0.8501777506247163,0.04385075113949777,0.17161409783577097,0.9431969508864586,0.0029311582935185876,0.9825942410345572,0.9929857301510282,0.0104967710622621,0.9187145007700142,0.9946875796264818,0.06580962266946744,0.8139924124033383,0.34937920965590563,0.1634743739623022,0.1403525311669474,0.5038032360256344,0.2939645868492394,0.5258679743443289,0.65785628625437,0.18012454189961846,0.3705699262090152,0.7965116815620209,0.07717678398630096,0.22789677670734038,0.9062446648384808,0.015472147441689454,0.9961889228289786,0.9763516356757846,0.0010294404050675277,0.9529815076268593,0.698141390374367,0.035257436795757435,0.3294442801647036,0.28383221039399564,0.11481746135685666,0.7425366263892816,0.433457840594126,0.006640799909634343,0.595826424348767,0.5895741417237904,0.2373416512299107,0.43976909873494013,0.7369531808992952,0.0528739243314818,0.8348448488073898,0.8612192772930252,0.037641921582306725,0.9999230848858296,0.47639713581245413,0.0014779075921714235,0.5531935823322207,0.6316193224463573,0.013940852537732695,0.9099209387895818,0.774003066240485,0.092437393589132,0.8016106385912527,0.36443480494538194,0.45087966653781114,0.663880562698514,0.519511934092633,2.1860042471899543e-5,0.9639012528306588,0.6726858255853685,0.16820727459347828,0.8837325684410912,0.25944907056233024,0.06899991163888908,0.7661337518025213,0.40640040237650465,0.011833260454545691,0.9940078000975492,0.5624816481089413,0.26105221649794796,0.9461064553901566,0.16684281726855482,0.04128208865671995,0.8546908901144605,0.2981057901021454,0.04876720325190076,0.9986912062709554,0.44906197534010506,0.36619413673504403,0.5803593140053337,0.09138184399103971,0.224102727944332,0.9249945584565475,0.7506709192343366,0.10892295561475074,0.9777104490513894,0.8719040675007335,0.47822211290131506,0.999951790270375,0.036949601497783036,0.0005169922061192822,0.9734267166292199,0.11772529638570794,0.017864961051648198,0.9007225430861939,0.23578892012955344,0.5913708452506231,0.7889309971999594,0.006347338231962263,0.4352688904975298,0.6489564761756872,0.5352013623732574,0.28548095281925784,0.8643405676688851,0.6873448221627332,0.15661768238652302,0.9522050720060536,0.8212142493408918,0.0612486905667709,0.9959604830816878,0.015024436508352668,0.008676481942213654,0.9913388003196993,0.07620453368656155,0.7979806600232219,0.9387908329847199,0.7265853666286349,0.6595886539471731,0.8434422272390103,0.3125787584652817,0.5056300139339793,0.6769353352112066,0.46471641595780644,0.3511222097803304,0.8125686103674268,0.6202957130856723,0.21113627798038792,0.9165081235049917,0.010872405095840698,0.0993267591470528,0.98211319582678,0.002736953651735541,0.46253674592650507,0.9994867483846513,0.5078152769556443,0.8514794125835748,0.9681392473071398,0.12804084412330097,0.17705107401425274,0.9398344081390317,0.24925776454704868,0.5758792548576103,0.6094170508858866,0.39493264294799424,0.4197220422383672,0.9956785042737104,0.06230096458174528,0.27139532101552744,0.8749204065666449,0.15820952602524685,0.6853167869807937,0.9586851088714492,0.2874570940959332,0.5330209936419187,0.9977086406379961,0.01908640616208862,0.37750425879153326,0.7907118626953551,0.0847508628958844,0.7852173546644002,0.9020257669111967,0.19091964841582848,0.6446205844680871,0.9741251794196377,0.0006211212306267977,0.4899171992806113,0.6915424038316418,0.032662180968156485,0.8704397714189901,0.8246769585227193,0.11028841592911148,0.748777560980821,0.9261417971272018,0.0078553894065303,0.6028490313039038,0.5825155913855855,0.004624121943997306,0.9365982329616109,0.9985284184992649,0.04971292463847071,0.8401316889708002,0.8562278642805915,0.040416913287799006,0.7104879399489601,0.4692422761074002,0.2629742394295314,0.9802880240185492,0.6246932491961737,0.012310573219767085,0.4042544756685173,0.7679813641076199,0.09662997800578338,0.25753545685262935,0.3575518466745024,0.025159591848024687,0.999260735309291,0.9647121530186953,6.200222428420776e-6,0.9665267761003654,0.9989652662356503,0.023623321158182997,0.8882867526079803,0.253192231653412,0.0937072879022755,0.9925399735137812,0.39937141038267865,0.20342195372256133,0.6295096891802023,0.555366126616902,0.26737084717218673,0.47421434229802023,0.7059603071347942,0.14218438916112508,0.32143418609103563,0.83646465903736,0.051900065438184706,0.9981218966065337,0.9341494962032788,0.0053244106967587634,0.9871842608333514,0.5979704520508743,0.007000518382466736,0.4312924611242573,0.1944976732126127,0.05676489720606398,0.828448054783787,0.33150028739390575,0.48538282070701627,0.6961329687716606,0.484938740087387,0.33191864218520534,0.5446866346892008,0.6398463017299885,0.016016238350632928,0.9284968051295777,0.7811129425887423,0.08754540982626385,0.9870841251238972,0.3726821262817191,0.02047306717179531,0.6557810983741136,0.05170313892324868,0.00017485313933740532,0.9606445606997209,0.6806823007389848,0.16186123492045418,0.8781966504793843,0.2669776767670261,0.5558076488636178,0.7588585938190898,0.4148106586084448,0.010055987346158035,0.9926162378479055,0.5709531991809484,0.2535787073815408,0.942181000479855,0.17326526341110132,0.1313872625202357,0.8486144401876261,0.3059551635123108,0.045151127807832925,0.9992363879204534,0.4575726305945471,0.3579777676423358,0.9834093738300835,0.09636761149578876,0.009863796062347496,0.9204295291463283,0.20708580477984234,0.10365417205497468,0.9801643178972929,0.3463755032380357,0.4696857231289298,0.6815842986821352,0.040242107633232216,0.31720492965251834,0.9706080382023576,0.12329069975732737,0.18255437582808026,0.9363815344004807,0.2430843588555252,0.5829537433308745,0.9903915242486296,0.007777140637047264,0.01626011838570579,0.996567628948628,0.058882198932976804,0.2777912951170911,0.8701412323837914,0.15301487330643626,0.6919527120714514,0.8677330452102197,0.0006434562654514808,0.540167231252973,0.9969723420376528,0.43033403895572087,0.3844637489367774,0.7848523388801841,0.5864701990918028,0.791073211522058,0.8977243029424423,0.019208175572524577,0.12095417404554332,0.97180134970525,0.0003153619929052165,0.03885139426755607,0.9998578384881418,0.030162904644663757,0.8752141998726424,0.9791570766776851,0.06251590174426602,0.7549674028810271,0.9117182628406532,0.2199632154078286,0.6098505156393411,0.5754400944078837,0.36140243706257646,0.45401856362036636,0.724238032064391,0.5163607747288015,0.3026717436601082,0.8511632909708936,0.0432862918692572,0.1705727627906855,0.9438352977350694,0.0027835717240334845,0.567419484720046,0.9932146177239518,0.4033048322958517,0.9179572550988712,0.9944846817183626,0.06649690236749611,0.8129152512181603,0.8805209211070947,0.1644982125056887,0.6773507944651087,0.5051857635964666,0.29522511673850027,0.5244871448959183,0.9984532927458251,0.17906313665825674,0.3692349644924069,0.7976237827000187,0.07644045627235668,0.7781550939284764,0.9070491240084513,0.19768373832588793,0.9960166470233589,0.9767699841325723,0.0011200223286670918,0.48137272679217713,0.6994100209139902,0.03576919221555086,0.8646446878397887,0.2850797287831865,0.11570047250558274,0.7413266677089733,0.9305506447656613,0.006418099228485352,0.5944691051195807,0.5909340140861831,0.00585632391259211,0.9323685591327338,0.7381697425872159,0.05349442702009938,0.8338168064608865,0.8621738621607962,0.03711739914953205,0.7027038165098305,0.4777782668375702,0.001373589294045574,0.9778414317956019,0.9955506174916462,0.014266913814174054,0.909127718956948,0.7751585131278953,0.09163804292145844,0.8005067741376914,0.3657661174378548,0.17631288983587579,0.9987231337553896,0.5208933884633596,3.669980359999325e-5,0.5087828752852293,0.673982671687906,0.16717423270291948,0.3541353222585154,0.2606620511397215,0.06830071748690492,0.9939390292369311,0.915971947526385,0.011536115001202718,0.9937925043167648,0.5638531537892263,0.0024173714235467547,0.9454803550524664,0.16787504226800626,0.04183394938006485,0.9637353227822493,0.29937142051743615,0.048173364591184764,0.7274476007902524,0.45043755875223623,0.3648624933201672,0.5789943978786458,0.6063381282630254,0.22295073677654764,0.9096663888173997,0.7518662391103079,0.10806298448690749,0.9781168262215061,0.8728267541518546,0.031405644548066824,0.99993067995317,0.03747298706604174,0.00045604520303610396,0.834514778825762,0.1186179220635078,0.018233079534683783,0.8998941324678563,0.23696371721354037,0.5900111951791864,0.7878015196432491,0.3809666591910635,0.43389819118054634,0.6476361034455176,0.5365803792336833,0.284232905331194,0.8652860404457136,0.6886259673400492,0.1556140240683635,0.9527932414038786,0.27457438909806586,0.06058732049373394,0.7515077784657924,0.015362672609039008,0.008421911629180323,0.9910806971876596,0.07693982132926974,0.24617722054804653,0.9381263080155383,0.1797832052853114,0.6582777776525279,0.8424360996831881,0.31386125098302997,0.04166799239426133,0.9996356562684298,0.46609568622222847,0.34980290780919715,0.813646541282958,0.1014713498372653,0.21000887768269905,0.9157416196492087,0.010587520792591731,0.09850122966723485,0.9824778476922125,0.35453217880685545,0.46115819340026043,0.9994222099348671,0.04366898857308088,0.8504947342233758,0.9676518137667542,0.12896620507472306,0.17599681252465993,0.8902656146270922,0.0035896498132663157,0.5745123962742411,0.9919875265044652,0.39628475705315935,0.014168687168079008,0.7557740978349725,0.06297098192921169,0.2701665830129233,0.9506712136040776,0.029842764556947787,0.684031965032486,0.9592336713927914,0.2887093550821471,0.05330788296475536,0.6523586866200384,0.019466598778871413,0.37616427886371373,0.987883903789004,0.08029159793185509,0.7840806901890547,0.9028462574174879,0.19200761113114823,0.11543521116438504,0.5411024348637316,0.8649284063185936,0.4885349368625502,0.9999886071753041,0.48178729724544295,0.8695097606211745,0.8257271520816746,0.11115609050938796,0.1973534108527304,0.42773092703126553,0.7784997297318414,0.6014956218158831,0.07937472834130921,0.36963542274215555,0.021375656145626143,0.7318451386627987,0.05031565791573117,0.2948467227879541,0.31807860508699126,0.03987411274770997,0.7092330339518911,0.35030226976971257,0.26419250514311976,0.979901806005526,0.6260316705768125,0.012617346709796307,0.9209366513745146,0.9931463346567744,0.5678305249166796,0.8062026789746544,0.8860102196680198,0.4566377824828035,0.13352502384524334,0.5137322301181451,1.2264301317843618e-6,0.1286155231575321,0.9990522604296842,0.17255558457700482,0.8874142045725053,0.8044487153179534,0.5700242628537704,0.21961963059059886,0.40072608740952764,0.7553241762494011,0.6281737965361543,0.06519251237615808,0.3433779065279198,0.9486882190976123,0.028318575009753988,0.03901188557961566,0.3201434623197114,0.2928288816168686,0.05128839526932405,0.7338052411753626,0.9348336540887051,0.3717749728632954,0.986871375747904,0.7845112949057538,0.007232950720699016,0.905516340469108,0.19559333050275757,0.11255229098300251,0.5456211080690686,0.8680140064108741,0.15075147689031848,0.152716297756525,0.4863207523796763,0.8664389174774569,0.5433094145545108,0.1140234707135564,0.1937554220098507,0.007704425121777103,0.7822552407524879,0.59705016097838,0.987394482395227,0.37401962113665554,0.020083320373150526,0.6544667376747986,0.9707480153552506,0.31759112685781943,0.9601051434014408,0.03811809803973071,0.029093639046783304,0.9497075117361489,0.26820182263903064,0.06405130585127028,0.7576747335468503,0.9206539248105008,0.3984524798211271,0.992377626083822,0.572321518410688,0.0033295939177043765,0.8888772273087251,0.9992132971832071,0.13045453457590306,0.5182656698926941,0.8489117062809833,0.5114120745947458,0.17295135244103338,0.4589503883922015,0.0031257156691785193,0.5705425209991486,0.09718513997810396,0.9935239801219939,0.919679593523052,0.7592134321260322,0.6237843693651374,0.26661071199431596,0.34769179600476396,0.02849249649480501,0.7113386811451697,0.040787293474065456,0.2923525873539631,0.9701391957212324,0.6561752478381538,0.020590728167129757,0.9370547653287784,0.367396218829003,0.07812448484525597,0.7807697699594632,0.00802192691796344,0.42543519358378956,0.9964040076670364,0.5450998111823671,0.8239628171658837,0.8710693216873413,0.9999995942434821,0.14946746792807236,0.49085533321425645,0.828760732319821,0.538788964137305,0.11692261391558395,0.43170340132989726,0.006931510899774562,0.5975636079143982,0.0815574920456299,0.23884991925199983,0.933943563074213,0.018830478174275578,0.7398439148942422,0.2911943393120927,0.32182174177864165,0.9583108221541895,0.7055822148864287,0.03063764180034717,0.34167194652618593,0.272230215401059,0.629910338612625,0.013528708919341437,0.9230884261499928,0.22110967630597833,0.09346563451730394,0.5768065603815851,0.7989812137066283,0.1739160651373502,0.998938418980387,0.5177425539253976,0.8443475484088759,0.8521461462706592,0.13475015354110315,0.999528372752431,0.4634724813481117,0.8076216494172641,0.5660492712582927,0.09988876035698985,0.40466168355062615,0.9171968136647972,0.7630813566649655,0.06718749669426477,0.26260904500400184,0.94690329074798,0.02700263694086935,0.676057430424639,0.9625471425366883,0.31170919485984067,0.301118740203882,0.7302511205068964,0.02189868519236421,0.36790100262458225,0.9859422997069216,0.07570736715726994,0.7770051397491852,0.008851389251809505,0.19878612705518656,0.11002864617598002,0.5496151823466685,0.0012144187622917246,0.47999117567398764,0.15730032347838474,0.14624748432010454,0.0006006214052458048,0.8321645757307142,0.11658642206528103,0.19059365964198438,0.43619941500146064,0.00619917254748259,0.7896962731330456,0.9882740448282716,0.3779065104638322,0.931672539178909,0.7393844831940922,0.0541183437563047,0.9737277038118739,0.3260670194450067,0.6857020291182014,0.7014391734612583,0.9514467823080631,0.33737615144430144,0.9774325753727766,0.634284938432966,0.7498586083789149,0.22067536726273346,0.9916638542516154,0.0908418146496493,0.7994006119649313,0.8913866978758302,0.4481286399703008,0.9986224818562819,0.5222746830801508,5.5362357997301714e-5,0.5074004729173566,0.13786268158410525,0.46295044472519237,0.8819539860616112,0.002194787267153997,0.09957506174381203,0.21258331091272414,0.4091181049149275,0.011242704414901106,0.6198930053148286,0.06947630585350256,0.2586269135238112,0.9448508485061564,0.6765472655448813,0.04238931330873258,0.9642504917760766,0.300638584968491,0.04758298066368616,0.6647667496234714,0.9389895732884807,0.24772746701328796,0.9848543358159467,0.6076886741149341,0.7732177140759886,0.42147018159647165,0.20241880865756368,0.10720601016739845,0.0011782309817019443,0.8737465901145236,0.47545991642825813,0.9999057470921151,0.4948672359961034,0.8605698628366922,0.5347875276215738,0.11951346384502953,0.43568027355948313,0.8990626641998926,0.005507470330901099,0.08376720118053005,0.989230491017572,0.38230994549487074,0.01775522392732104,0.6463146018678859,0.0561891112575752,0.28298650763021826,0.9566921334938658,0.689905670255347,0.03203565761472876,0.9533779486776739,0.9775878007226537,0.059929310234973276,0.6386484876015488,0.01570461431834186,0.39009777755844927,0.22868444973272933,0.5807687454072136,0.004386979746252517,0.4486492992782808,0.1808462712951603,0.9982655118101672,0.8414273538103485,0.00014342814196866005,0.5028649494928172,0.16653358883638386,0.4674752157240434,0.8790112584050053,0.8147220740106894,0.1023078198709898,0.20888369469998125,0.9149719369715711,0.7664848640622448,0.06921035179280133,0.9828388104607293,0.2546646452535498,0.02571715733967922,0.7190543939231083,0.04423581534340404,0.3079983480395848,0.9671608044914993,0.6642724421531221,0.7221612230207987,0.9411427525587647,0.2516539176693886,0.07359829710883464,0.6121135097226467,0.9101583378114672,0.41699398926441555,0.2060759789788817,0.553606061675318,0.8174046726427708,0.4759827543901473,0.16023296848241675,0.14342336297179542,0.8609323096947554,0.0002383276219855568,0.8388899806681026,0.9979654516348532,0.44018095052733325,0.8963135142388476,0.5891659703048754,0.08629746219630613,0.2315989450655081,0.386723065542136,0.01657708871312069,0.05594826501327743,0.9749959306000587,0.3298343092628633,0.035104574611608486,0.694093683568156,0.6931037020789466,0.33358726025350016,0.9762253973173576,0.6381454839518951,0.7463751728533358,0.9275816769920306,0.22824491102983163,0.989933433368223,0.5852415683608297,0.893870965259949,0.4441396802218076,0.18435091346389043,0.5262822618986912,0.8380997191139027,0.8581627722408213,0.14064085466467463,0.16316766695991464,0.8793524631456995,0.0018352890227144592,0.557566841825708,0.9947477226092956,0.20520803519413733,0.4180530170099709,0.6159939208045039,0.0715305108548453,0.25512088995440185,0.943004750140068,0.02430075366860268,0.6680314389888198,0.04611982338096188,0.3043245509381551,0.04588926133052512,0.6685496136895507,0.024470507696801924,0.3596763353516663,0.2556008053611193,0.9825588011308481,0.009516906723870122,0.9127354805556871,0.20565267965229,0.9946678721239499,0.5581134286529346,0.0018826958170133357,0.8797107054367661,0.9998117495756165,0.49887946930014515,0.8577785877915917,0.00011886412604311669,0.12212881504609902,0.9983537214542872,0.4446865501580817,0.7925327939466186,0.5846992914684014,0.9900430013721216,0.22778316827292555,0.9272961751226991,0.7468538621116584,0.6376165394530913,0.06044003985242169,0.9550440363342974,0.03345415956485315,0.6935864377452479,0.9550551526538218,0.3293169799801599,0.9748238041035429,0.05569560078095559,0.016717901712366423,0.38618716114599944,0.23206338424335887,0.08598867182390596,0.7925110382493139,0.0056675399525421555,0.43963465805421986,0.12211124826147923,0.5308106257543904,0.00025561858963374373,0.49885264365715143,0.14380933041924565,0.15982946387943803,0.47653241479006175,0.8178296654274191,0.10475248860687314,0.9953830670104822,0.41753668474166705,0.009511698449758577,0.7741163391444931,0.07388592976932523,0.3597020831659514,0.9408834600362748,0.7226540670787835,0.6637526086151174,0.9673566588539266,0.30850655627286516,0.9638507110499412,0.02430901566686383,0.9430171877021427,0.355328679451701,0.9826955860675421,0.6160200145088498,0.7660190909926348,0.9152786582393643,0.20933126175079603,0.10197453241755872,0.8142942898646763,0.0022964305961409304,0.16318749264257393,0.999666731880736,0.13712316331663676,0.0001305513139867598,0.5262554732346413,0.12511466290623507,0.18042286839215477,0.8938544399096844,0.004314545030511263,0.5802256425101469,0.9909235107915944,0.9275677710381427,0.015568074594163983,0.7507880899650856,0.060190801579039555,0.27531761372610275,0.33839188198083575,0.697785072677219,0.035114449510588785,0.9569158754998859,0.28348238719002017,0.9733831364219073,0.7428758721013744,0.01790085676785913,0.3817751967446663,0.08628239732187287,0.5891923658826855,0.7888204582494722,0.899393962157522,0.18747276056093948,0.9974813407662644,0.8351329122481557,0.00042119741577134606,0.1434421685273578,0.9999161285265823,0.15651925430424135,0.0015078698868300489,0.8213180230491451,0.10754673443826257,0.20197678001585984,0.9101429953398608,0.008651379857486596,0.6071512424416506,0.9849884562456068,0.36406135388909666,0.02308043823930539,0.7267060830228785,0.967170365337243,0.30013405864109316,0.3127043200938603,0.042167853919506615,0.7144711696157442,0.9451018056865386,0.2591089740161223,0.06919673506426749,0.7664621655234475,0.011359036964621538,0.917787661577889,0.9940675447735927,0.5620966445654461,0.8107537593134884,0.4674484468748315,0.1665535776331516,0.9994805953298354,0.5079506892140799,4.747653062442403e-5,0.5217249348615702,0.9986629990250422,0.44867598321598434,0.004383434699435529,0.7998411494638642,0.5757453915781504,0.22442641725232765,0.3950650520908467,0.014464990701715641,0.6337547932647009,0.9775957415140251,0.33789661157880385,0.951209962789852,0.7019426981493025,0.036803347847096324,0.32555121192640335,0.2875796859467458,0.6463402531003636,0.7389012239559071,0.019123484997476292,0.23545957242048332,0.9881552739430282,0.7892475918637398,0.006285855162339482,0.4356536708234054,0.9975335424517414,0.11623345436099647,0.5398593745676883,0.8640747169140178,0.14663658675272834,0.9999786327656308,0.8737287700748024,0.0011763911799193005,0.549067587161325,0.11037327625473903,0.19834708976231114,0.008748603079416883,0.7774630863761367,0.07599875506530851,0.2477043064494348,0.3684318113518433,0.9365322130910264,0.6599563365053775,0.9687675858183356,0.3122190801540663,0.9623379000606149,0.6765723630956284,0.027181314617984453,0.9471497951025414,0.26309349304584945,0.6199190482346628,0.7626132471801419,0.01234045808813694,0.2126052620147415,0.9933505875988922,0.5665946899748472,0.0026965590953297314,0.46292369281359025,0.9995041749794621,0.1343745806428494,0.8517552829181939,0.844746321737907,0.5171926086879279,0.13117866120036564,0.8913700034883167,0.00380454834694377,0.576262764057723,0.9916687315928352,0.22065311831188866,0.9227949239445798,0.013401862729616465,0.06211352339339471,0.2717404845970305,0.3421940062315921,0.030448261882323635,0.6856771219462454,0.038530363823290004,0.3213076945491029,0.05410620570572949,0.6506713298361595,0.018980364641083824,0.9342166586842886,0.23931933602631927,0.08125653331840704,0.5981032523495232,0.9017949410687217,0.1906147327190767,0.99706310821129,0.5393375633155524,0.0006019365955577394,0.8671685996983791,0.14986008415905117,0.4800179799266382,0.8707002730649208,0.8243817720289285,0.5445517459200874,0.9964695852271608,0.42597936636642236,0.9048872690709199,0.07572156014267845,0.9859486153278019,0.24379873968509502,0.9367872132483765,0.7302749322478688,0.6556524044498184,0.9703262302133322,0.3164304959346549,0.040569883594823,0.7108398443145775,0.02867588818090272,0.2626326547481598,0.9803957574468893,0.06466337886445739,0.758742717719644,0.4046353501498138,0.2163286694592635,0.09685938675301953,0.8076005012654388,0.0031874506839757455,0.45840198985669445,0.17336778883459997,0.8521271019196563,8.283169199874152e-6,0.8480173224617384,0.13082543081809134,0.17389572971631195,0.4577075727929443,0.0032664951899255,0.09348125216562209,0.9924730468933776,0.39899135398518004,0.9203562121685922,0.7581461574201689,0.06432103624088853,0.9802020674996008,0.03062839651617988,0.7056066678685997,0.6814581095637753,0.9603202581624072,0.2912187141457254,0.9705622722998787,0.6549900074420502,0.020238003765506107,0.37348716984518554,0.987271403652558,0.07879518783325995,0.00693596288834375,0.9044779915140011,0.42666863292669666,0.11367390206031913,0.828740520394562,0.0008449800696463394,0.4857706855854409,0.9999996276992883,0.15035790015850015,0.8676412701794579,0.8278200595148879,0.9964072184558315,0.19515696946318833,0.43046814958972196,0.007139989025709059,0.5987864850425798,0.08087612844506503,0.372306928792046,0.0205831098354044,0.7342915120625864,0.05153143489415246,0.971846170257391,0.9607953170152628,0.03879907036253433,0.706718432085099,0.3476662454008875,0.2666344362983182,0.9791183647602557,0.6287056121413629,0.013242071115077081,0.9224224991986557,0.9926825281453158,0.09419295164442937,0.0031287112419469687,0.8877618420050631,0.4538837101066698,0.13164954226527498,0.51649613069704,2.7480478484998017e-6,0.5131821483219857,0.9992148006997844,0.17047089557682665,0.8856602285170757,0.8066375148718645,0.09613872400008988,0.21733443214846054,0.4034377082883749,0.7576977222778696,0.6254990813626216,0.0665644022269623,0.2637074076016822,0.9474611898336862,0.7097326903384156,0.040089731138435225,0.3175661502646021,0.9707389737670875,0.05007535232798754,0.6592959305229865,0.9361919902466935,0.24275155182742558,0.9862344399263976,0.782233097708811,0.007709116900156465,0.907127756428675,0.19779161930281774,0.11081039144954014,0.0008148343051138096,0.8698802523886245,0.15273559741484333,0.1507322805664243,0.48908508017703073,0.8645520131516014,0.5405539913675419,0.9969295554332714,0.1915743093222833,0.9025200632651789,0.7845333538664674,0.08059092337865104,0.9880040145226505,0.3766974904062559,0.019314838269403334,0.6518344831084932,0.05355539116786334,0.32016849265701447,0.9590157588605059,0.03706621053681097,0.030030313660323604,0.9509092713454244,0.9792677979573712,0.0627039082228163,0.7553011114121443,0.9221422132533033,0.39574650755355245,0.2238452081410579,0.5750564874689756,0.0036557707270039597,0.8906093682020779,0.9990506088148672,0.1285975625951093,0.8456291694837613,3.8358981861275065e-5,0.508647466768616,0.17086476271647422,0.4617068350647585,0.0028246086254287706,0.5678039471025401,0.09882943061406263,0.9939600340326191,0.918170101238599,0.7615740118025036,0.06630368041501794,0.9813044701043849,0.3503278651778467,0.027579601480572924,0.7138414533675952,0.041888194584938754,0.2948711867284311,0.9691907301100284,0.04811538164878315,0.02138341660695925,0.9383911967073542,0.24665147772100016,0.07664678220932503,0.7784774502323807,0.9068236640056586,0.4227021010999714,0.9960653796487698,0.5478530035702758,0.8218516355572828,0.0014542738746397,0.9999884253656943,0.14750100473407213,0.8649100677352384,0.8308390706067131,0.5360315506882171,0.9974109988039563,0.18801703032196415,0.006480219963530931,0.5948501142466044,0.08307747726075149,0.23649589566564905,0.9325633053646734,0.018086123517364883,0.6475067072940792,0.28868504257213456,0.32440808800048604,0.03726425087030255,0.6887513827462483,0.03159787889619786,0.3390515077475428,0.2746952812524778,0.6325785416394746,0.014175028715602389,0.9245555125779115,0.223408986629837,0.09186206819259307,0.5795377200623482,0.004223675650826042,0.17601724438973332,0.9987506967606523,0.5205056947677721,0.8423374049269395,0.8541037716913163,0.1366440984775032,0.9996408070829084,0.002880442660047,0.809796818917182,0.5633073397480393,0.9938786464354039,0.40737756259248126,0.9156663667900378,0.765428775731288,0.06857860808717331,0.2601790538997249,0.945656416055823,0.026113457064870393,0.04167871418330871,0.9635901016562081,0.30915048168747483,0.04833967867809813,0.7277930871938803,0.022715372226389863,0.3652361192262392,0.9852837918483621,0.07425092712009429,0.7746988861328286,0.9094438028868501,0.9961306475804896,0.10830403577160852,0.5523659298138276,0.0014146522433789999,0.4772285429712649,0.159319058806203,0.14429873694750106,0.00047276462187456625,0.8342262830384128,0.11836710929877386,0.9978515089486774,0.9001269373480358,0.005772647852829271,0.7919455777246893,0.23694090394210654,0.3805898249280871,0.9302706027223093,0.7418084640263624,0.0553764002631727,0.9746049985567113,0.328662133252441,0.035565083370749595,0.03141500264146091,0.9526285191607442,0.33476382924977865,0.06077259708041255,0.6369464473774993,0.7474596428895883,0.3918257711567863,0.9911535137315743,0.08925874962201946,0.7971814283108367,0.8931014867307883,0.17948529223524612,0.9984097412332948,0.5250367508068979,0.8537340159021367,0.5046355089967683,0.13977482500661087,0.1640904075390313,0.8801637217979981,0.0019435973987106947,0.10123713931838751,0.21032506254945182,0.4118385870336321,0.010667096788690211,0.7692616968458192,0.9823758793087849,0.2562089928327032,0.9435816360668838,0.673957522134096,0.04351053376970426,0.9652701766682379,0.3031774772105311,0.04641259503854217,0.6673749328679881,0.9403065360974966,0.3608738034517909,0.07452563823907898,0.6103872852880303,0.770897716357879,0.4187405468391702,0.20464545192063816,0.10550107814062804,0.81877077492848,0.8755776818635492,0.4726984705021869,0.999844414530243,0.4976323224319516,0.0002961234331503304,0.5320285427382814,0.1213132683072149,0.43842343632511926,0.8973905801685339,0.005105746977648484,0.08530567362820402,0.9897938253434075,0.3849992074512799,0.017032263390769464,0.6436682525963761,0.9744400367667139,0.2804986996974078,0.3329302783365923,0.6924607101718007,0.03301667213840942,0.9545369589966487,0.9767619017569231,0.05862338925952715,0.6413030834413733,0.01639960407633595,0.38740192929199135,0.08955746661245789,0.5834963479806401,0.004760050360404111,0.4458995523955859,0.18297971605754532,0.9980277702908991,0.8394020379856582,0.8569250570699799,0.500099797428514,0.9997767772202695,0.4702350102456049,0.001989979831855171,0.8168659120264237,0.10398987595893461,0.4113233812797701,0.9134230587154217,0.009755329173631422,0.07062059514777691,0.9835496576953462,0.2522589939525016,0.02484901679149476,0.6696980126773088,0.9650782379093105,0.3054481301122647,0.9661680737810108,0.666881585482335,0.7196806159529875,0.025497001548929477,0.25405766634057636,0.07216076580230474,0.6148065396201152,0.9117334833823012,0.41426847499050423,0.9949226645847314,0.10273058483703446,0.8152632708199605,0.47322115990155356,0.16226680255543396,0.1414904206319872,0.8590132090565012,0.00016060415717789045,0.8409179184104465,0.9982070325911276,0.44292715841636743,0.0051806334616645855,0.7951934745327207,0.08785671439547649,0.22927006677322154,0.3894180536844405,0.015878369404874193,0.057226040709534964,0.9758521542519617,0.27643245519284565,0.03409386329722014,0.6966390270400803,0.03465677089029351,0.3309822971556253,0.9753755933368806,0.6408008887662905,0.7439652494563478,0.929008479471126,0.23057014387719293,0.9893738727036614,0.08415372678375316,0.8955682916533997,0.44139269162746375,0.9980739445842521,0.5290431908863609,0.8360574086351285,0.8600867259600722,0.4955640776476734,0.16112926660407761,0.8775453456591937,0.0016062047220132825,0.5548191961072213,0.9951398985989216,0.20297910894699506,0.9108550333681888,0.6133024303749918,0.07296227274472794,0.25271381256929526,0.3628616011480952,0.023456464528281484,0.6654245383361196,0.04728671617048774,0.3068721524821636,0.04473901699984867,0.6711503429635393,0.025332238082674097,0.3570244564468923,0.25801685390395923,0.06983110135267151,0.010061341072075958,0.9142899449036338,0.20789240805722953,0.9942575547140337,0.5608589533169148,0.0021300474371915845,0.8815039051277151,0.14185549346895338,0.5016446331373083,0.8558415069362975,0.8405348212537482,0.12394540708892215,0.9985703043864074,0.4474355771780281,0.004549755975712111,0.5819728056176524,0.990584593688022,0.22546790941757727,0.016009503769910227,0.7492547419123352,0.6349560784067207,0.2769007909623993,0.9538911568394417,0.03246683815113338,0.6910339859681217,0.9561939796522789,0.3267205380355023,0.9739501650408671,0.6451472568688141,0.9287393865175264,0.3834963368060882,0.2344020965499396,0.08444459616450584,0.7902639774629511,0.006090256418330331,0.18609261809597988,0.12030632562119686,0.5335700533512538,0.0003516684882483023,0.8632187623905772,0.9998805644407428,0.15780809679526886,0.8745561034990987,0.5553394657960117,0.10645210224205637,0.9957503964296215,0.420265232976842,0.008982410908801197,0.7764247167624906,0.07533909237075942,0.24878183158529799,0.02361517366728394,0.7251265182400453,0.661137450785685,0.301758306623481,0.3110638057708893,0.9628113222332251,0.716069270170345,0.9442923922495554,0.3526840159657839,0.9819670352861192,0.618707922499184,0.010986832296263405,0.9168123134435685,0.21158560868924658,0.560339356635504,0.8121389185253445,0.0025687554764526888,0.4641675281040254,0.9995581484109548,0.1352264122071351,7.501080764471535e-5,0.5234937330317296,0.9985304743997402,0.17830113507342482,0.45194832160076626,0.7984223624802174,0.5774950880256415,0.9914404826684458,0.9261277645207581,0.01489084692663073,0.7531764265437475,0.06151285558386321,0.27285080414087903,0.9519700129465811,0.7003216641075165,0.68683451545919,0.3272116488858735,0.285978144128314,0.9724857341710305,0.7404551459827361,0.018641499023232977,0.3790902604029029,0.9885353263970471,0.5919118047667475,0.006009075244442719,0.901051406094951,0.18963596656426573,0.11737083591900588,0.8330757084460982,0.0005423122228045973,0.14538612210601926,0.9999591288638993,0.15451508683521825,0.0013009059056588446,0.8234316915460567,0.9956820228730574,0.19976105745184247,0.9085551838072623,0.7759883797853413,0.604448692073294,0.07775085843129248,0.3667244283355685,0.02225730589118441,0.7291672002817824,0.9681486693945077,0.2976024864284746,0.9630091691248372,0.041063418551947006,0.7119700384486148,0.35318431629242153,0.26153573725630835,0.06779979523868218,0.7641183202788198,0.011952565667369797,0.9193003814299332,0.9936352970038997,0.564839440916142,0.8085827631503382,0.8840851161036896,0.16861914106358522,0.13558461918921655,0.5107153716635798,1.7017246989103896e-5,0.12660176174911864,0.9988574539295159,0.17484213587440028,0.004025669285364797,0.8020493457263032,0.5730109931642159,0.2221233649222792,0.9237374813973174,0.7527248984339117,0.6310883696801992,0.9784068918529583,0.3405148878065125,0.9500116752829487,0.029328342091414605,0.9578216238870729,0.3229624858695965,0.29008613988632237,0.6489820835992549,0.7364684735205719,0.9333360587821548,0.3746941339720826,0.08222671984405089,0.7869876720523288,0.006730486428438098,0.4329124947415341,0.9972516188570959,0.11446683375141187,0.542615118284071,0.8659644366121961,0.14859829944276648,0.15489367345976834,0.4833043844222655,0.000994449352711868,0.5463150302971779,0.11211218097229692,0.19614646523121676,0.008241111516596566,0.7797591735455712,0.6000087475630435,0.24532084630715345,0.3711015292173847,0.020938752785845338,0.657334053791349,0.9697223879916625,0.31478468878599286,0.9612779827201341,0.6791566541201579,0.02808783649520441,0.9483802768927888,0.3440398602216036,0.62260166123115,0.7602561892453769,0.9190150011680348,0.21487238582324697,0.9928935819838965,0.5693341893930025,0.8050012137088497,0.4601667188791712,0.9993734228971438,0.1324940366629811,0.8497847511195318,0.8467438303456972,0.5144288272922093,0.9991433812008279,0.8896431283840139,0.0034716708125975826,0.5735287977758077,0.09540470504308457,0.2183640435410356,0.9213123278304864,0.012773384638666396,0.06345502361972771,0.26928378026653377,0.3448202414830719,0.029505240237016006,0.6831068615214294,0.039601854413663595,0.3187278917241074,0.05286191876536411,0.6533056437403659,0.01974236150819625,0.9355809982502836,0.2416829276353602,0.07975189831881452,0.6008131583694492,0.4334312536001705,0.19279169059933404,0.9967562429324938,0.5420935442764344,0.0007452154314108728,0.8690399292710425,0.15183939452610085,0.1516257994951551,0.8688390125756291,0.8264810659214392,0.5417969097269004,0.19656233971803083,0.42871518323717284,0.9032586479493159,0.6005215703016049,0.07991326311456359,0.9877309480625035,0.9354347595484577,0.019659622858381187,0.7371916571302991,0.9712574519296036,0.961479712150147,0.03948582625075109,0.6833838330758477,0.9481483937448572,0.34453728495986824,0.2695479189550112,0.6269938645933397,0.9187291616563278,0.40192241568013226,0.21861006118841636,0.5688157532066451,0.8054158323536313,0.0035067774632764337,0.8898296083220858,0.999125874948251,0.850158602082888,1.2743199329090515e-8,0.8499974034756675,0.999112479755176,0.17180462065464508,0.4604634636481968,0.8052370442218472,0.5690393691897347,0.21879671417686974,0.4017010402194263,0.9188525033923682,0.6272122195728479,0.0656844155900298,0.3443227197784924,0.948248467513845,0.02798955119953278,0.7127134501597664,0.9613927662520869,0.3145082149250116,0.050850513612325565,0.6576165879671289,0.9353237452170303,0.37081393016243386,0.24557706465603762,0.6003003982167544,0.7795123982181068,0.008295023326788498,0.19638292808862817,0.5415719241333322,0.8266520298802013,0.0010133033117812884,0.15146388555404222,0.9999953559683658,0.14838659413639,0.4923731320809425,0.8299029407248086,0.9967305168525051,0.19296985155524754,0.00753147873268234,0.7830756153534846,0.5960743269308055,0.08239034725652827,0.9887095006683575,0.7322624308655534,0.0184200213716722,0.05276092807401733,0.31851749866372553,0.2852363217953985,0.7088050709808311,0.0294288790479329,0.950141338567362,0.34023278179080174,0.2735826217756647,0.6313756173049246,0.9211907065964602,0.3974788513911824,0.22237089285285755,0.5733054733308025,0.0896718574825851,0.4561684747018225,0.13320470405023987,0.998837252651841,0.846906456289607,1.9561847810711797e-5,0.8532221744222568,0.9993620727185448,0.16839628507028098,0.003015664999440948,0.8088169360607098,0.564544259177022,0.2150578789005933,0.013009578753723494,0.91635821050822,0.6228205278583452,0.26573161326682293,0.9821849242009817,0.7076480030414308,0.026512705111651713,0.04118164283785969,0.9631214563361159,0.3103038027203281,0.7333887140380754,0.020874149983258983,0.9375369856765423,0.36643753805068485,0.07759150620780803,0.9843516378182721,0.905791755528611,0.9968742118741136,0.1999991510049453,0.5460902247062454,0.10594612916029383,0.48353003177746895,0.15473033885880516,0.9999552341151792,0.8661182357597982,0.0005285398174370015,0.8332976669696391,0.9972279285673482,0.9038767082559935,0.43770531078359154,0.7868027646608137,0.5916191773574029,0.23800231587750154,0.019951355979190677,0.9309045403237934,0.6491975847554916,0.05480730177300536,0.974211113721847,0.6824094774212602,0.704675208754661,0.03098136207705049,0.9520972401053969,0.3359414262756076,0.061369885090931275,0.013759460710181082,0.9236175906738282,0.3930437238303149,0.09288743987878961,0.9904253289017148,0.8891731744302753,0.45165202411124405,0.1785290786454366,0.5187364493092791,0.8436257626749113,0.5109410902724313,0.1354300719372254,0.9995705718970768,0.16501523800552403,0.0025387074586377123,0.8123714145624013,0.9935993378055068,0.9194233269497408,0.41061124770934077,0.7639265913600872,0.6184187289278141,0.2617342016852947,0.02833594650573007,0.9441557622164195,0.6751262198886058,0.04300310683125308,0.9648120349685152,0.9682279145196501,0.7293678381205568,0.022190743311280015,0.9397142200960886,0.9857071623107501,0.07518202763367926,0.008106194828974012,0.7719451191101847,0.41997137273626106,0.10940697333302768,0.995025018971853,0.8713849113851573,0.4789974550735644,0.15802520528891517,0.9998739696643841,0.8630141199787295,0.5383192647028934,0.11722554051647777,0.4321701180931431,0.18586096767902727,0.006044023099081919,0.8950655171589241,0.9884872063674097,0.9337093451555158,0.38378584757660145,0.7402571717888757,0.6448623663230242,0.2861822088013779,0.3269998046188849,0.6866250792756823,0.7005285032809767,0.032572441851985046,0.954015937402811,0.9771362080709544,0.7533710894998662,0.6401063293233201,0.9260096141739209,0.9914820291054172,0.09027098457575738,0.0039313435494026105,0.8920048431370237,0.4471395521995182,0.18201627871755188,0.5232682084530569,0.8524804300220874,0.5064060103703738,0.13854915648431387,0.9997379601328398,0.8813114178507464,0.0021026872825990472,0.10017145934349625,0.9943024537182226,0.2076508599491006,0.011033951314717294,0.7677680767825698,0.9819068990527031,0.2577563976069889,0.35730973563991847,0.9420544985383692,0.6708706116979484,0.3112728573601352,0.30155105908861546,0.6609237085924258,0.04503871500070389,0.023546656787666764,0.9418552693054687,0.9846104418118573,0.7766128197654494,0.6135923504536605,0.9110246123056954,0.4154974255133996,0.10659140520521898,0.5551150756934998,0.8744065045003739,0.47446660672291163,0.16134821370136881,0.4958617505955483,0.8598801308353166,0.5337953120413594,0.12015946859584847,0.998099959949075,0.8984626627292214,0.005361238870732921,0.08431908542204586,0.9894348313840724,0.2303194240643634,0.3882021278881857,0.7442250492597847,0.9738781933465168,0.2820909408078309,0.03641970518095389,0.9541942309062263,0.6963652958027997,0.03420198743870401,0.276698763053823,0.634738672617939,0.05708783072050455,0.01595287914486565,0.9283665802509937,0.9906281515108876,0.08768824692354654,0.004519418419676624,0.8948042527605153,0.442631430309524,0.844385505413577,0.5277980527963242,0.8556828659770783,0.00032505382785058545,0.14169798574771963,0.4684677304802525,0.8783618304046474,0.5610830399940678,0.10291141286866978,0.9949648922151166,0.2039832858164583,0.010106455180603269,0.06971606395690394,0.9830961850328264,0.25379852837559824,0.3616627016241944,0.7199479895635608,0.6666009421267102,0.3070804219882768,0.047382603006511315,0.9649688568712553,0.7212697929251813,0.024941778830824046,0.2525176114932932,0.9834738414776433,0.07046814396997786,0.009813932450998986,0.9135904112558524,0.9951712506018111,0.10380821167898857,0.0015881733588204994,0.8127039470131533,0.4699378595806342,0.14272687593872047,0.5003974812821116,0.8358902025197743,8.806973823960451e-5,0.12312465472608586,0.9984745078542612,0.8957063421320264,0.5881871794215902,0.08685682930801641,0.9903421795540311,0.22651110960535237,0.01632407419669646,0.7481728288254375,0.9753055658239455,0.956500145874684,0.3355390559203964,0.6950098637673924,0.6921859289211435,0.33264973385184093,0.28076620333382235,0.9743459926868296,0.745509251192992,0.017109384526397986,0.2290802822232043,0.9897338988682822,0.7953756692526673,0.5912003417974169,0.8975711729301579,0.5222223815307856,0.12111895322150218,0.00015493318110787468,0.8336151062820676,0.49733464231195307,0.14487630060221207,0.47299571511546545,0.8150880020958907,0.5565787848882668,0.10568404383142277,0.9955865987824273,0.766883361325755,0.009219273641897507,0.07204397087115211,0.9842457157897,0.24986091969432594,0.02399540851403975,0.7240122333193568,0.9660863889032867,0.30290386246294904,0.3099097068687824,0.6694856248162587,0.9413643113538859,0.3587220263881847,0.2564689370430824,0.9822974548418628,0.06816412679797368,0.010728345228690983,0.20645721745984758,0.9945220333776175,0.8170405259462803,0.5641217848106387,0.8803570119990749,0.9997834718610579,0.13956844314009176,0.00022400557080742844,0.853523566514587,0.5247394359262779,0.12612085489442343,0.4456751118515848,0.8929174578457357,0.5837189407673788,0.08942857180439573,0.9912091762092794,0.7433109886678797,0.015194456730414474,0.05851735844037881,0.9766938241881467,0.27396253691092753,0.033097401504252055,0.6991783563992743,0.9554663630275599,0.32838250338519087,0.284851684924849,0.9728922740645607,0.9278256869628412,0.38521893785016137,0.23290361711076862,0.5857057358522233,0.08262477193979045,0.0058178395115580095,0.9003053759489985,0.9978238539970635,0.8377524994404266,0.5368505061795737,0.861999666595119,0.9998387317380004,0.1591012304512287,0.477525922002494,0.8185968044204104,0.5520698737692449,0.10848912406484706,0.010316956244686093,0.909272873495721,0.6106074746436058,0.7791590657118792,0.9853553967254916,0.7190073310972783,0.022626750249249816,0.046317647013011165,0.9677092023859268,0.29874352248393976,0.31411266757755774,0.024616293711491488,0.9434774072840952,0.3543769503822892,0.2604403033882162,0.9810813787123873,0.9130012083164438,0.011683021424865214,0.21014107043633368,0.5585813120361938,0.09833986189274013,0.0023926261771578528,0.1639232093662666,0.9996294369183425,0.136439671178069,0.5094684712717662,0.8425543107562777,0.9983916980879739,0.1796586082599128,0.4501862118562772,0.7969998332117154,0.003557324733485412,0.0920341012759025,0.016590460372159554,0.9243981964186407,0.6371635715103723,0.06066476246535146,0.9780428541957813,0.9527243952957091,0.0314938160206375,0.7033304581337108,0.9573188541710997,0.3241293957621956,0.2889548716221519,0.01683891843794655,0.7375666002066232,0.3808090756762603,0.2367489320442533,0.9878245661167225,0.8969354312221918,0.006528078882765853,0.18824971113888228,0.9973806562494247,0.11526216406676332,0.5413723702699654,0.1441401043986535,0.9999333553600489,0.15579719549051413,0.0014316744323922825,0.8693272335854354,0.9954467200523072,0.11132642273170074,0.4229962198625972,0.774510212236978,0.007566143060881991,0.07680524302756125,0.3650187166255231,0.9382479666025398,0.021297376252697175,0.048242876406182744,0.9692935268795563,0.9636746319479088,0.7181357937119511,0.6779917525620174,0.9455540083218195,0.029361232203317378,0.2644313837147797,0.010513711072218768,0.761320266789596,0.40759943602229,0.21384877664704666,0.9931015692471313,0.8099740005630875,0.4664560643308335,0.1672953349346743,0.9994342861887048,0.13334081752731597,0.5140029840998421,0.12542655643757888,0.5156754164923737,0.17618924076411235,0.0042530098556221585,0.8872429188844735,0.9910126489287467,0.22359709616939194,0.3960376670774201,0.921982611036155,0.01305499914599223,0.06284832051304406,0.3388377693613105,0.9507805577812325,0.029928785111691503,0.03717877188622626,0.6795543176424945,0.9732312683167272,0.7424639755535124,0.6521180827293552,0.932450024746478,0.3764090220290102,0.24061591058283677,0.5946284325712216,0.7842885205577219,0.4346675114798903,0.19180866490648624,0.9968965277727886,0.831008317679182,0.4938459180160104,0.8681973101431448,0.9999868381849475,0.8730673370821274,0.4865915111704589,0.10783881010792579,0.5430395680435689,0.19755451755554726,0.4274809914576417,0.9039947237287459,0.9851028115683831,0.2468461466641983,0.3693915789531049,0.9360463987420821,0.6590137301277675,0.7360930271261693,0.3131412042798041,0.6727637869083876,0.039973019545217814,0.02750570269624808,0.7048578902842662,0.9813655813920314,0.06641607405434324,0.6257872134111218,0.9180462882075051,0.4031456456493427,0.21758003097533957,0.5675802541828443,0.8826123130033434,0.0033608731703356765,0.1706948396226976,0.9991980357315985,0.8510477706091955,0.521254268142023,0.8491056626237642,0.9990366515119338,0.1727465204856216,0.4592203382112381,0.09142972637421587,0.9918485589533463,0.21982881131923127,0.4004785317242971,0.9195322996230588,0.6284179368191833,0.27085606535717566,0.3431380418118321,0.9487996243792983,0.684753317277053,0.7115841235388402,0.2880062538580732,0.971747605549096,0.05139989103963227,0.019252741791798256,0.9347089069158188,0.9880531230366458,0.08071387881192893,0.5990782835215798,0.7805456071959402,0.4301733704996535,0.19539298052895443,0.5403289595252322,0.8643974572832813,0.0009354959513134253,0.15057075958956628,0.9999991758114577,0.8700321296460061,0.5485987373652108,0.828964758326374,0.9965865820093525,0.19395513391845803,0.4319717308277665,0.7820467044114461,0.9861817781837341,0.24294517540774735,0.3737751893824063,0.7311572790073719,0.6547069590888251,0.2955546890821964,0.9723461905653774,0.9602039574081593,0.7099376179008899,0.6864392919230916,0.26350846260862076,0.9801190444924917,0.06417505548754665,0.6301718756068628,0.920517328091883,0.9932737934666076,0.09627187167782403,0.0027456409710977514,0.8028054430591602,0.4574109632270367,0.8918805106047348,0.5129564539029684,0.8450873844330519,1.0085274230242636e-5,0.13149690886575033,0.9992975401406272,0.887904336226754,0.0031539793651156334,0.09406109864187262,0.992643993499414,0.2160835824742704,0.4049275862478736,0.758997397578963,0.9790537506320726,0.06732317695381651,0.3474512228349328,0.7065128386092938,0.6805310008588404,0.3208677847312774,0.2921228294385241,0.9702251214619075,0.049415268267542,0.020519046830703047,0.23972146002608624,0.9870474585422231,0.0782601164109823,0.6035199810660479,0.9050618606977797,0.42568497573172503,0.1130432922261333,0.0006252677124324313,0.8241551800681817,0.48477655970883365,0.15382935322253394,0.48554500692703406,0.866966471317538,0.0005874225131208832,0.11353061498642708,0.9970952375247272,0.9046106744255733,0.006973488117995086,0.07867357655771046,0.5928449296748537,0.23906535785164784,0.020301636016535007,0.7351696594461847,0.9704858999875862,0.05424097308346548,0.32158575024947234,0.9584117409087578,0.7058124465137761,0.34671927236637784,0.2675144833073748,0.9788329973662278,0.06196990207246028,0.013470409150207585,0.9229537625275395,0.9925120239587153,0.09361274036415224,0.576556951377849,0.8883889570133106,0.45289348379493866,0.13097773300555698,0.5174901134837735,0.8445306503831105,5.946629084302435e-5,0.1345776981908704,0.4581770052488468,0.8850264828704427,0.5713107259665268,0.8113966272591425,0.9933988871086019,0.2123617178389901,0.01227481588647783,0.06455237482546944,0.619630031633017,0.26283138702724207,0.35177695748789134,0.7106351056252804,0.6762938280818634,0.3166405196906864,0.296256511764133,0.9686639413442792,0.9341906991727845,0.02182480958616151,0.2436048855217708,0.3632713289495256,0.07584106006598229,0.007884063622365045,0.907704297868621,0.9964963166821035,0.11018678416902267,0.54936382545021,0.8206884563766186,0.999999980661626,0.1500212910418317,0.4900794216181157,0.8638706143776043,0.00038817359021647846,0.11642434051745498,0.9975629857989429,0.9019292755921524,0.5983246254887727,0.7894903571111678,0.9882195984821074,0.9343285533046994,0.019042029230665614,0.7391626871709781,0.6460555787773137,0.2873102398586388,0.32583022052319444,0.6854674761028734,0.7016703382929378,0.3424082543123602,0.9534920911138842,0.9775075458453538,0.9199500475454996,0.01453616215462783,0.22046589772768893,0.9917097243740551,0.09098705169965304,0.5810360344305694,0.8912294549252391,0.9989883616956716,0.12793243360123924,0.5220223337583126,0.8412294271382127,0.9992409706253265,0.13768855905378968,0.4626985466108575,0.8070094878230669,0.0022184924397847805,0.09942384114363512,0.9941131776587806,0.9176240471848833,0.011296031411486718,0.7667140073515235,0.9815729382896103,0.9472507752222923,0.027254788908805005,0.714740038938564,0.9622518891922831,0.04434726917126419,0.30040696066358663,0.020223262268689257,0.7264407169168388,0.36864963982264576,0.9412701847407741,0.9849159744593818,0.7776508773544046,0.008706603694924486,0.19816706545927149,0.995939873747576,0.1073623548405403,0.5538753507987636,0.15307469289515174,0.4757122124022407,0.14679635310959088,0.494614652699019,0.8607448135922071,0.9969814636668293,0.11934963147261235,0.4354297832276389,0.8992148009684917,0.005544921712913653,0.08362729603005331,0.377154097639378,0.9320636261265549,0.017822001708913904,0.7431360335852664,0.641711681449004,0.2832141001640025,0.03688841100802637,0.6896719773958273,0.9511126413998219,0.033750101985290604,0.27558358895186313,0.633537236275353,0.7505305151821838,0.3952858062559169,0.9277220159152217,0.9908669607359162,0.08839502175897618,0.004353655274113688,0.8940377575625943,0.9986794478319307,0.12491775259057558,0.5265527417585631,0.13386393708639632,0.5031175422424959,0.16672184611902002,0.4672231576050719,0.8791759611428601,0.5623206618746615,0.10215477006391555,0.40835508927628456,0.9151127946167068,0.010357463638626885,0.7705395476787796,0.35077743129401406,0.9452046134474619,0.02579718520188673,0.042077153093460384,0.6677763093967203,0.30823160360502033,0.3045738345858075,0.6640338460169689,0.9386175490957673,0.02455427519025044,0.25143471343312357,0.6069307052377977,0.773867329840281,0.00956957356025867,0.20179552713811888,0.9953426186497358,0.10457023667021476,0.48128970903335283,0.8765780283913309,0.9999202126825446,0.16377497340874309,0.49915032695395445,0.11575362388518445,0.5305135021335383,0.18764902543537987,0.43993017516138133,0.8964674739356655,0.004891644919753746,0.23609564180763565,0.3815558392779851,0.9297631433252305,0.01664165385047156,0.7470893717121894,0.32484926180335605,0.2791358003366895,0.035197612026172775,0.03176290371392504,0.6933366761746207,0.33382547778781657,0.06029824143119494,0.6379027016532659,0.7465949441566401,0.016787427362732754,0.22803291491608046,0.5800027879288056,0.7963810207771794,0.004971298232244181,0.18024926491129567,0.439365789988599,0.12193393805939307,0.5086998122953408,0.8579864726957726,0.9996584391106105,0.16335438870535768,0.4717504658896545,0.8141186667075533,0.5578177519712583,0.20951499323977707,0.4128177359675254,0.9125673813527204,0.009459189805046009,0.25976578516454135,0.9839336097229076,0.9431218146439242,0.6730247550257822,0.7228965546893221,0.2994475177446002,0.3040506445512023,0.04599502866824423,0.6683117796579792,0.7183159586573269,0.3599187988786154,0.07400409018818765,0.6113570829343546,0.7700612450816582,0.41775937294927534,0.9154294472023587,0.5528344177240825,0.8728821051504831,0.0018608596145694989,0.1596640315705234,0.4666558597483349,0.1404339383417066,0.0002628879193323219,0.838318968446161,0.525984984902522,0.18412010359029557,0.4444355103949696,0.7923279037785811,0.9889605791004457,0.08871807019061134,0.3859673279901522,0.22376398357075256,0.015501082789189102,0.2841579660167185,0.976316014942556,0.9551486583319668,0.03354506282412156,0.6980338094875619,0.9549504268515503,0.9764612810019104,0.05815698288280796,0.642256818664413,0.7426390802011148,0.017972754304033445,0.08899029370200406,0.9890603220361049,0.792715861688095,0.4449109415658488,0.8995568552723479,0.5255072506940872,0.8386710441301413,0.0002476063061019329,0.86113825317957,0.494046147204063,0.16001463472187694,0.001902320620563891,0.8176346274368607,0.5533100840968574,0.20583521333710392,0.9960118598826551,0.769658532831235,0.9824996411604645,0.07375383275261033,0.35945965164629545,0.9410025502105313,0.02299916462172008,0.045794824523503475,0.9672668254885552,0.9658075270316704,0.04411347743596339,0.6725758624912554,0.9429000221399013,0.9840536797171278,0.25934635995920957,0.615774296771147,0.912296944823292,0.011416515284016437,0.10521181009192737,0.9940258719172217,0.8144907042467583,0.0022723124513170934,0.8824833726565662,0.498103420182102,0.8583202714935056,0.0001363870307374837,0.8416447675073355,0.9982901973811211,0.12831247671703372,0.005038814017608473,0.08556904921126318,0.5804749568237835,0.22843445195749756,0.9918125090146215,0.7461786879397114,0.6383624530460414,0.06007070223428418,0.3333743772537152,0.9532523481459584,0.031930899394382095,0.035021518145502584,0.2787067334472234,0.3252973998472914,0.056052084728750284,0.6465992289973457,0.9295184564074934,0.9901912277703806,0.2356894537366433,0.5889438086928199,0.7890266142605169,0.0063287415106211276,0.12261988467465101,0.5300360110321545,0.8353203272390246,0.0004108951961019347,0.8642603146709101,0.9999114382852663,0.8768925470516855,0.0015275360642871272,0.8211244491985736,0.9952772516068082,0.11054308265367213,0.009662941202488284,0.7734669762687905,0.6073979575247079,0.2518498961639479,0.36381828882648404,0.7219589391034025,0.6644856640097221,0.047709804056895955,0.9688617460216626,0.9641398705603681,0.042269442274068814,0.025645730845387016,0.25446794533166406,0.35123406755022857,0.06932500254426177,0.6201819832443267,0.9148459487056009,0.9948554784144956,0.2128269477827004,0.5618459949760843,0.8109516064236761,0.002724724575157156,0.16636539641763204,0.5026391813540111,0.8551421260570404,5.1021200012379975e-5,0.12460160230955608,0.9986444752933963,0.8943320507819803,0.45345952736306294,0.7996389732284495,0.990775722091582,0.09394422334244595,0.015760804099891057,0.7501164144791206,0.6339981676010683,0.062244337179171105,0.33765767873096325,0.6970720801447776,0.6901145040240733,0.3305390023720137,0.9586384592375493,0.9736323943904813,0.2919407289312304,0.0176956420812035,0.23096711766808686,0.3776178596618238,0.08389233837867188,0.5934035237557126,0.8989265980844676,0.4359041758307144,0.11965997948419638,0.534562299629891,0.831942015978748,0.0006152965539911737,0.14645792268492186,0.4752344194673115,0.1534193340907174,0.0011937720846605937,0.10706635406921511,0.9958788081797243,0.9105863672713699,0.008795711464288258,0.7772529154079685,0.6029636910778425,0.247922420584477,0.02331407523861967,0.726014113685244,0.6601956386197474,0.04966200370973972,0.31198499764716103,0.9624340188295193,0.7151719441635385,0.35657308916191477,0.9470367086714562,0.9817013893200199,0.06703852520803039,0.011195146293560498,0.9173608138515337,0.40436947820537117,0.09971030928172159,0.5663443347032923,0.8818082510511234,0.4631755993826141,0.1380183906077953,0.9992670907159558,0.8519347550647869,0.522500228212772,0.1276130396250369,0.44790409193106034,0.17369045634930147,0.003835713247748007,0.8032576707752893,0.991622749312898,0.9256066432539971,0.014650892919245317,0.7540335582977298,0.6296228551034438,0.27196525295664314,0.34195433977391454,0.7012325147129083,0.956386611700774,0.038433186512291884,0.28687740626744307,0.9721594274458963,0.7395826728771439,0.018911489440211426,0.9340913640396942,0.9883226035291828,0.08139462038519207,0.006163781089537468,0.9016445480935831,0.9976099309149697,0.19440492810529036,0.5390857440074073,0.8635423577640045,0.4905577007495155,0.15746475789433667,0.9999998848712048,0.8708697343757662,0.0009010561479776413,0.10988738659791408,0.4207303415876198,0.9079810321774395,0.00796890418595636,0.7810160386941338,0.3628112562071091,0.24401568911509508,0.02196481851624238,0.9344277220461332,0.6558924303200866,0.2966934566349025,0.316195561953491,0.6758461000568866,0.7110688586779053,0.028591634430844892,0.9490499545937199,0.6191655020929877,0.7632733223416168,0.012169693029401296,0.9198413333063924,0.39992143019455517,0.09700885766343309,0.5708372147851558,0.8847211169712252,0.999538125667903,0.1731765815919038,0.5117096789012961,0.8441838173965985,0.5179681814798855,0.1306551216179208,0.999229901144645,0.88869004376238,0.0032953848965375787,0.0933342390544401,0.9924293196381357,0.9232086971710207,0.40370348151630514,0.7579297970437345,0.33666784359726043,0.2679381019601195,0.030715505838985246,0.705376389341641,0.6816934620363908,0.04019606694290817,0.29098921874841893,0.6499311700196345,0.7355917053824176,0.020166926805790908,0.9363243274673891,0.592374838017929,0.07893135050129307,0.006894098146977945,0.1900054604981763,0.426918508100117,0.11383430757110147,0.5436059719188717,0.8666413848121222,0.4860231823540035,0.15293052131357776,0.4842984196941694,0.8237908131348793,0.5453246578264122,0.11274052249343491,0.425211954287309,0.19136116762412364,0.007182587407582652,0.24882709845978934,0.9869390575411023,0.937164384532724,0.3769600015040763,0.7340683328267208,0.9700622937012744,0.29255798994091264,0.04087665420269937,0.6800848193640616,0.7069484037949186,0.030122837734636643,0.06756311508809953,0.9791905404172835,0.7594064679159156,0.013184384571519658,0.922287302941873,0.5653065361521241,0.09434056921912026,0.003100560891197701,0.8876023232045651,0.4541352365554484,0.1318204002686077,1.3352433051061485e-5,0.8474596912719812,0.5134346560992924,0.13372759794748362,0.999461000907425,0.8024246373044561,0.5725449083550075,0.09598985359158813,0.398231423918775,0.21338273299991167,0.012550980474511253,0.06394079253415663,0.9799852726161584,0.9498061496563059,0.3505863251536325,0.709503363020912,0.9600167240105519,0.31780135659421604,0.295118231262282,0.6542519942950745,0.7315813504424301,0.02146185086478347,0.08196807259994948,0.9862932413204455,0.7824415696651263,0.007664994152920213,0.9069810700868527,0.5380419518049898,0.1109690202579342,0.0008004829524496104,0.8697102400009757,0.48148981414663844,0.15620979623810488,0.0009649733265061355,0.8272336880136528,0.5408057512272124,0.19577246915786828,0.9974384538499381,0.7801495071530288,0.00643682583719013,0.08045345999343523,0.3715567647510662,0.23626574275283824,0.019384429088884547,0.051188837220290606,0.9715888648564768,0.28843959418160786,0.03909936181368562,0.684308719029891,0.9485885480852636,0.9807544515384472,0.27043099424912104,0.6279555561488339,0.06039360822088341,0.01423913741834787,0.09762944866987266,0.9919343604328081,0.8046277773312808,0.0036253443894966875,0.8904516326492975,0.9990661038904429,0.8494479630788554,7.773448309489339e-7,0.8507069717988243,0.5089000251464156,0.1368302157717734,0.0034164721659850628,0.8829200941753341,0.568054202366103,0.21797491036565803,0.9939208274361842,0.757032371841825,0.6262501392845703,0.0661780372070529,0.9812359813834273,0.25994142070521525,0.027662394935105084,0.03978580919409369,0.9617750701396038,0.3135849971747233,0.050414409049957365,0.9675078961896569,0.935812113953338,0.9875611092900572,0.24643373984321632,0.6012745403547713,0.7786872075170626,0.00847640566835628,0.1971737269588918,0.9960969430524063,0.8258984090147008,0.0010775766766740746,0.8727486707866063,0.9999900803001118,0.8685207830959014,0.49336758830784233,0.8306496339935344,0.9968430844113451,0.11854216259493322,0.00736048083332469,0.8999644554621603,0.5950981127577367,0.08293809713287631,0.9889186940909396,0.9326899412143177,0.6525737055820142,0.05320649082155421,0.9730766277553003,0.9593229165088021,0.3289166171147083,0.02976598090006427,0.2654859416920381,0.3392906809830139,0.06308071116148506,0.9765219594886808,0.7516090373652691,0.39650562859407973,0.22319859314746582,0.5742891382121506,0.8010185386313529,0.00419097583042205,0.17582489005862367,0.5151972757038711,0.12574360120773215,2.9348474149204495e-5,0.8539253917500903,0.5043646617876586,0.886485993094265,0.46597878865353826,0.8095985100462306,0.5635578960224618,0.10140060248387167,0.012785145387813723,0.7609123123970012,0.6218562004026493,0.06845098220116008,0.9824470880083725,0.2559725485142307,0.6784387029936807,0.04157780755191809,0.963495415614597,0.9694583696602559,0.30342649585310694,0.021159467497816165,0.938017474875432,0.3654793857225623,0.2503533618410102,0.9841038091360952,0.7749099114844121,0.4234689167680295,0.2007953887070194,0.9955109048854444,0.8224451415335836,0.5571436385526517,0.1554503797528073,0.48778591999251764,0.14447630384974747,0.0004838102909632269,0.8340383699675744,0.5317582361479954,0.18862385346488508,0.43869224167062626,0.7876168702983916,0.590641278582066,0.08545705536524068,0.3803445521173201,0.7371455681651663,0.016962240755389324,0.05526091220582713,0.3236816765569089,0.28025536968772236,0.7037673928096232,0.6927106703035455,0.9525211418353199,0.3350022555913684,0.27852718735590787,0.013992136349266271,0.9241450791219505,0.39207239976277286,0.22698723967310303,0.5787714537589449,0.08653686497937951,0.4506622234332465,0.12946884708767814,0.9984298077774767,0.8429026173590788,0.5298361263920851,0.13611143278242338,0.9996107944521735,0.1642775530318708,0.0024395962164687757,0.813147377005761,0.559056359336657,0.21053098623040112,0.011786050928555891,0.9132706597774716,0.6174522336616779,0.07075944047000904,0.3539193864337824,0.7126660695399991,0.0247647603210423,0.043407530646902504,0.965177618863893,0.3051986457534478,0.7284836482226518,0.02248469191942054,0.9401867902168727,0.36111644289501743,0.2542935279005065,0.6101409068114753,0.9089978913877736,0.41898979629862143,0.20444167276947656,0.5515940822246744,0.10256617443236904,0.4780038175713321,0.15875144014913117,0.9998506517430453,0.8623294800093043,0.0003048794207523575,0.11786617344438466,0.9977790437236602,0.18508783498179238,0.4431962546371019,0.791315201923412,0.5861769853032659,0.2333081344589687,0.018434103369040278,0.9280730721691008,0.643910179422175,0.057351932309508025,0.32793327428139674,0.6875473910366241,0.033995626229274156,0.032926463531852246,0.9544316601664538,0.3307274082870022,0.05874212510846316,0.015077644993507222,0.9265294323493887,0.3876480525703097,0.08970177562635795,0.583247287000917,0.892621437400781,0.005444592993456732,0.18278442310428467,0.5242616417634992,0.11978999368549481,0.5054115224775163,0.13923706149269938,0.9997691663553969,0.16093015423763546,0.0020125572672139436],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],20:[function(require,module,exports){
module.exports={"expected":[0.5000000000000157,0.5998796227326092,0.6957330998938149,0.7836965797588105,0.8602242562339912,0.9222313002291556,0.9672182090555086,0.993371561328525,0.9996371159472641,0.9857623085318147,0.9523064322883357,0.9006180929113274,0.8327808463151438,0.7515292105374336,0.6601384373724426,0.5622924870371525,0.4619355278099311,0.3631129466864387,0.26980827991219347,0.1857826367170443,0.11442308907792237,0.058606138916352246,0.020581766363919007,0.0018827331087784005,0.0032627968031367915,0.024666327107400354,0.0652305481480589,0.12332031699570895,0.1965940362436004,0.28209804375136016,0.3763856747065306,0.475656196613018,0.5759080167414622,0.6730999862509806,0.7633142988172261,0.8429144173260908,0.9086916626110211,0.9579945552455662,0.9888356966252221,0.9999718809650142,0.9909542088995245,0.9621461826072593,0.9147090530451589,0.8505550099459886,0.7722701014891034,0.6830099907502106,0.586372750987248,0.486253827379655,0.38668901171219283,0.29169175968998673,0.20509140861966813,0.13037881690076336,0.07056564759367567,0.028062968342895622,0.004584061289071073,0.0010753607004403976,0.01767830222673633,0.053723621630977714,0.10775833281735564,0.17760429767122438,0.2604460267626131,0.3529441716680669,0.4513701340380541,0.5517563653210474,0.6500562985651307,0.7423074654503418,0.8247912233060002,0.8941826535220674,0.9476845889505752,0.9831403676568979,0.9991207679188345,0.9949816201251632,0.9708897732397057,0.9278163691229074,0.8674976958232181,0.7923651978407955,0.7054474646491647,0.6102481483146046,0.5106047313521346,0.4105338378834915,0.3140693235994543,0.2250996711190586,0.14721124533356206,0.08354372711026481,0.03666355282061895,0.008460461341616154,7.131872014565221e-5,0.011834291125511598,0.043275213378065724,0.09312670253798294,0.15937924608596343,0.2393622053320671,0.3298514688074913,0.42719941613250095,0.5274819535201629,0.6266566939175517,0.7207259055458382,0.8058976603877388,0.8787386867289786,0.9363127642714971,0.9762990831146363,0.99708579555483,0.99783498963424,0.978516465354668,0.9399089520389814,0.8835687177676659,0.8117668362442905,0.7273976398601962,0.6338620492144454,0.534930482073475,0.4345908679069624,0.33688789453152157,0.245759966827162,0.16488044971566573,0.09750959489537264,0.046363120160882176,0.013502738873773346,0.0002530523389034367,0.007148155152384705,0.03391010585931342,0.07946013076822334,0.1419621092966043,0.21889658795473305,0.3071623394646139,0.40320137316875293,0.5031423575618366,0.602956673585185,0.6986208081795395,0.7862785420151158,0.8623963936145691,0.923906053920146,0.9683280697695348,0.9938717906026223,0.9995075495495349,0.9850081692811301,0.9509581195226557,0.8987299570908732,0.8304289981567248,0.7488084529926938,0.657158444122959,0.559173381550571,0.4588030411651366,0.360093349356813,0.26702329180504575,0.1833445206465676,0.11243012545362091,0.05713866406152551,0.019698934160291837,0.0016201305046474879,0.0036310093041450053,0.025650512075064746,0.06679103310628187,0.1253941988274187,0.19909771681409583,0.2849305997474525,0.37943292585332156,0.4787953082785465,0.5790124513979524,0.6760446042002975,0.7659804025693583,0.8451945362926532,0.9104938852427362,0.9592462339845749,0.9894863763268927,0.999995332743716,0.9903494874145542,0.9609376641694191,0.9129454530082362,0.8483074189917866,0.7696291199634608,0.6800820765650822,0.583275928304145,0.4831129290582723,0.3836306473003125,0.28883921179511707,0.2025596633898341,0.12826992893490063,0.0689646261230169,0.027034350510528382,0.004169310659004666,0.001291195862180794,0.018516022869296322,0.05514945925217607,0.10971481193154786,0.18001255264490446,0.26320898088652056,0.35595045031742717,0.45449855418123375,0.5548808204054297,0.6530508418694845,0.7450513869946102,0.8271739156683947,0.896108070421572,0.9490751168709046,0.9839399544457545,0.9992971822489349,0.9945277507384289,0.9698239156019257,0.9261814879339239,0.8653596931106595,0.7898102564507907,0.7025785742173578,0.6071809537562434,0.5074628712178568,0.4074439604917936,0.3111559818454709,0.22248030174984101,0.14499143507539553,0.08181295646978815,0.03549158912735012,0.007894546428296623,0.0001342646054604546,0.012523560462107508,0.04456302173295468,0.0949611383824242,0.1616863633481021,0.2420490041618636,0.3328096443984393,0.43030972448644145,0.5306190181702288,0.6296940598510645,0.7235411366036403,0.8083772746627986,0.8807827310200407,0.9378388431945761,0.9772456804591669,0.9974147540010356,0.9975330488738101,0.9775957966135457,0.9384066674554659,0.8815453744029744,0.8093039950284864,0.7245945778728555,0.6308317578275606,0.5317951122715365,0.431476806383189,0.33392066904298356,0.24305918617331224,0.1625549823099599,0.09565318028188108,0.04505059037508813,0.012787001964818523,0.00016295964710671962,0.007687338312317105,0.03505683040870744,0.08116817226366507,0.14416261662007318,0.22150085870048325,0.31006539553152657,0.4062861924255583,0.5062845910067111,0.6060296578516011,0.70150067133384,0.7888491968317752,0.8645542170499949,0.9255640641553176,0.96941943244542,0.994352512911848,0.999358253585523,0.9842348731611835,0.9495919947977198,0.8968260722209678,0.82806409870239,0.7460778680031167,0.6541722434238731,0.5560519388316842,0.4556721817192881,0.35707927806491513,0.2642475058198381,0.18091891184500308,0.11045247007744652,0.05568868135889543,0.01883507290460995,0.0013772129256467425,0.00401882740453513,0.026653432915047848,0.06836862896709883,0.12748287685184073,0.20161328243322096,0.28777165056212484,0.38248493916264203,0.481935257487714,0.5821137652179342,0.6789822687337622,0.7686360006184025,0.8474610207536944,0.9122798941729295,0.9604797734001231,0.9901177222789144,0.9999990356896601,0.9897253980887335,0.959710939599929,0.9111655424376839,0.8460460705792341,0.766977488617662,0.6771470494919332,0.580175816385521,0.47997269774299534,0.38057687924916117,0.2859950043363352,0.20003966646859062,0.12617572357606355,0.06738062970227232,0.026024413891582443,0.00377414436646778,0.0015267290413273904,0.019372761182441134,0.05659286759527704,0.1116867065434139,0.18243344649372661,0.2659812877902014,0.3589624186407743,0.45762877154213355,0.5580031078053467,0.6560393399664501,0.7477856294908618,0.8295436853042327,0.8980178418309259,0.9504479072069055,0.9847204265577354,0.9994538753218537,0.9940543484776865,0.9687395008430744,0.9245297734139506,0.8632072594084047,0.7872438681253164,0.6997016823300964,0.6041095257609597,0.5043207163149502,0.4043577388816547,0.308250099058924,0.21987189386315859,0.14278564695771112,0.08009870339552488,0.03433797260316357,0.007348068712996536,0.000216954204691866,0.013232084159788382,0.04586881895314432,0.09681157246564459,0.1640068433339183,0.2447459915489179,0.33577442367977234,0.43342278546915564,0.533754873429211,0.6327263031242745,0.7263475382260324,0.8108447086417145,0.8828117351417303,0.9393476283440207,0.9781734275374847,0.997724065542277,0.9972114565359955,0.9766562637773277,0.9368870666704288,0.8795069607460325,0.8068289369128608,0.721782644841144,0.6277962988434843,0.5286584866251659,0.42836545139091764,0.3309600033615949,0.24036855417646807,0.16024284331914818,0.09381273657290706,0.04375603019666274,0.012090509011540296,9.260953582773679e-5,0.008245966854602327,0.03622191929931928,0.08289275679299729,0.14637717882064388,0.2241161296147966,0.3129759536419441,0.4093747131935411,0.5094265762225949,0.6090984541549087,0.7043725756076789,0.791408442672977,0.8666976413105233,0.9272052654465248,0.970492253976504,0.9948137092685987,0.9991892339521342,0.9834424507156372,0.9482081120727934,0.8949065135012866,0.8256862413611046,0.7433375634215902,0.6511799532241883,0.5529282821713435,0.4525430731351225,0.3540708518605814,0.2614810315948107,0.17850590611921796,0.10849020106289964,0.05425624807992857,0.017990216717678698,0.0011539899665556907,0.004426235786240684,0.0276750500139491,0.06996327341860359,0.12958626857033634,0.20414063374107827,0.29062108397935205,0.38554159408580035,0.48507592021875606,0.5852118357056086,0.6819128638194007,0.7712809880735045,0.8497137811874106,0.9140496188577909,0.9616951247698509,0.9907297095443641,0.9999829896565879,0.9890819655723971,0.9584660573520423,0.9093693916364384,0.843771054027189,0.7643153121858848,0.6742050254585633,0.5770725376798146,0.4768332574667313,0.37752782817640823,0.28315924965419287,0.19753151739086233,0.12409628354132285,0.06581372089624404,0.02503319837651463,0.0033985780197520743,0.0017819509347825613,0.020248483326706535,0.05805378964843633,0.1136739387671003,0.18486688359718695,0.26876283797298267,0.3619799576713346,0.46076066248320785,0.5611231041964144,0.6590216748162819,0.7505100849418433,0.8319004386123152,0.8999118923179473,0.9518029057360582,0.9854817531657398,0.9995908409485216,0.9935614320413869,0.9676365717953835,0.9228612908024643,0.8610404797334316,0.7846661342316659,0.6968169026189548,0.601033985644066,0.501178390752186,0.4012752949528731,0.3053517900164716,0.2172745504859484,0.14059396810476316,0.07840103559700812,0.03320274881368607,0.006821049780541599,0.0003193842517651424,0.01395983423326097,0.047192553462281794,0.09867793169916839,0.16634059438888865,0.24745306096757913,0.33874568954859063,0.4365384761210232,0.5368893954370476,0.6357533039693681,0.7291449995655657,0.8132998648657392,0.8848256189524465,0.9408390601258114,0.9790822877054038,0.9980137179613451,0.9968702253230555,0.975697903955663,0.9353502097050868,0.8774535573101725,0.8043417596574334,0.7189619518309902,0.6247557921567147,0.5255207290249101,0.42525692582249774,0.3280060144277761,0.2376881771114016,0.15794412406805036,0.09198833646232629,0.04247949075816426,0.011413287524040139,4.200478376004124e-5,0.008824018714511161,0.037405326512449544,0.08463381623849053,0.14860570842746224,0.22674229739966018,0.31589389883454244,0.41246681348225833,0.5125681891073055,0.6121629412836864,0.7072364075665349,0.7939561784535414,0.8688265817350318,0.9288295929695725,0.9715464919884265,0.9952553614565334,0.999000497325303,0.9826309332436485,0.9468065260084979,0.8929713567506259,0.8232955200535164,0.7405876474846097,0.6481816917135934,0.5498025349479595,0.44941583900627763,0.35106818957073305,0.2587239784001067,0.17610559877815096,0.10654339591582002,0.05284142080292342,0.01716439896964178,0.0009504704442297451,0.004853218357438183,0.028715323019864347,0.07157490347538797,0.13170429090310587,0.20667967091235073,0.2934787874521669,0.38860276989099096,0.4882171724214982,0.5883065404933371,0.684836273704627,0.7739152604628594,0.8519527286142341,0.9158029893965787,0.9628922400897243,0.9913223139509808,0.9999471952782866,0.9884192152798537,0.9572030665961617,0.9075570715489901,0.8414824591942095,0.7616426958188163,0.6712561206691384,0.5739662147604347,0.4736947322313131,0.3744836145137428,0.28033205975537456,0.1950353152236073,0.12203169096447136,0.06426396159472092,0.024060743116443628,0.003042626452983699,0.0020568514617884115,0.02114315471277295,0.059532167708130634,0.11567643011073331,0.18731276783921547,0.27155352156915064,0.3650029482221937,0.46389410330097774,0.5642406863450781,0.6619977286225078,0.7532246457369691,0.8342440825055195,0.9017901470713654,0.9531400589385843,0.9862239041988359,0.9997080737190605,0.9930490208987603,0.9665151720223826,0.9211761060012482,0.8588594396692392,0.7820771565853538,0.6939243490270607,0.5979544548832952,0.4980360186453034,0.3981967504558687,0.3024611691957284,0.2146883742083086,0.13841648508351861,0.07672002012880991,0.03208596259800456,0.00631351044713363,0.0004415507008888042,0.01470678193784164,0.0485341729754572,0.10056014236547473,0.16868752433447598,0.2501701054937795,0.3417233246456258,0.4396566733783883,0.5400224603862814,0.6387749428258178,0.7319334101280168,0.8157426463609392,0.8868243029077367,0.942313079631351,0.9799722250647342,0.9982836998175401,0.996509368712964,0.9747207550019318,0.9337961572622409,0.8753852452007935,0.8018425615008171,0.7161326102541725,0.6217103578614537,0.5223819634059695,0.4221513524585225,0.32505881891833643,0.235018160847689,0.1556589153516832,0.09018005201042273,0.041221022480368574,0.01075536425121093,1.1147389690546738e-5,0.00942147106013147,0.038607005305796915,0.08639128183175115,0.15084811741811083,0.22937925832660894,0.3188191158562228,0.41556237115971517,0.5157093055731959,0.6152229981968831,0.7100920540946756,0.7964923035429132,0.8709409542345978,0.9304369825666576,0.9725821048409151,0.9956774520312666,0.9987920511597583,0.9818003527985483,0.9453872919647786,0.891020678403873,0.820892029208374,0.7378282288084987,0.6451775773174699,0.5466748206223464,0.4462906028523541,0.3480714097945736,0.2559764551339081,0.1737180846292235,0.10461213153114829,0.051444255410776296,0.016357652278706836,0.0007666623972910069,0.005299758253155484,0.029774210844073112,0.07320345548131985,0.13383686019235413,0.2092302936600619,0.2963446481069517,0.3916683456677872,0.49135889002282396,0.5913977573462523,0.6877523829203382,0.7765387137379335,0.8541777746001427,0.9175399365346989,0.9640710720760635,0.9918955120920224,0.999891653968562,0.987737173388424,0.9559220172178935,0.9057286537583877,0.8391803764754162,0.7589597450796461,0.6683004515995474,0.5708569703209176,0.4705572460022611,0.3714443585015651,0.27751354630842595,0.19255115856185923,0.11998202739274566,0.06273141301014878,0.023107086521422404,0.002706303725562742,0.0023514197643045853,0.022056740002928454,0.06102794338135997,0.11769410147987713,0.18977100261219199,0.2743532283520882,0.3680312708913315,0.4670289702307473,0.5673557311129149,0.6649673838368532,0.7559292046563258,0.8365745244145187,0.9036525319038431,0.9544593139995847,0.9869468503435178,0.9998055690030091,0.9925171352890395,0.9653753458171372,0.9194742855717584,0.8566642253626622,0.7794770374458614,0.6910241358045947,0.5948710551141703,0.4948937241117667,0.3951222269870974,0.299578350770482,0.21211346717897772,0.13625328390035518,0.07505572338770661,0.03098765806697923,0.0058254707595785105,0.0005834487267342703,0.015472897770537397,0.049893624501288425,0.1024581301209424,0.1710475404716038,0.25289701780974855,0.34470721136019866,0.44277725407847623,0.5431539445270057,0.6417911003448827,0.7347126597767512,0.818172956642292,0.8888077080634417,0.9437696286396873,0.9808432044647152,0.9985340004471231,0.9961289009588421,0.9737248555115798,0.932224970723992,0.8733021061121202,0.7993314411562904,0.7132947318641214,0.6186601162463141,0.5192423137435862,0.41904885396314706,0.32211853324154527,0.23235861084567594,0.15338730743125706,0.08838795464087668,0.03998067507034425,0.010116765179729759,3.8572425475891237e-8,0.01003830029327002,0.039826908215410295,0.08816508415627955,0.1531043172217213,0.23202690824091798,0.32175148916671614,0.4186612639574684,0.5188498015523975,0.6182785040281,0.712939402399728,0.7990167177691825,0.8730406752956261,0.9320273707490805,0.9735990516292412,0.9960799643210352,0.9985639036887094,0.9809507421866313,0.943950465998565,0.889054555508988,0.818475863758928,0.7350594163848201,0.6421677286924313,0.5435452627330717,0.4431674881140365,0.3450806308991218,0.25323857031808217,0.17134345797455114,0.1026964841899966,0.050064807088773644,0.015570008509767141,0.0006025730858026934,0.005765837835944532,0.03085167166260755,0.07484886511176742,0.13598389220582463,0.21179240123953502,0.29921855274768866,0.3947382003320278,0.494500948931064,0.5944853641674213,0.6906610762860063,0.7791512442773375,0.8563888312602341,0.9192603916661533,0.9652315741673224,0.9924492813273003,0.9998163679211908,0.9870358668374473,0.954622959816169,0.9038842104835061,0.8368648967985098,0.7562665659396548,0.6653381349930151,0.5677449271703067,0.467420922704057,0.3684101801845131,0.27470382063908694,0.19007914552501287,0.11794737378393927,0.061216135675156824,0.022172266258995044,0.002389623121574702,0.0026656442074670106,0.02298920311230096,0.06254105758787148,0.11972687318051589,0.19224149082076436,0.27716184773893143,0.37106480606579134,0.4701651394513219,0.5704681154618363,0.6679305231639356,0.758623654875202,0.8388916722914388,0.9054989732547732,0.9557606188110302,0.9876505630448726,0.9998833229494954,0.9919657962206605,0.9642171382005832,0.9177558967326178,0.8544549235202312,0.7768658795127359,0.6881163775042779,0.591783908124865,0.4917516312661466,0.3920518459841924,0.29670344860634107,0.2095499311017685,0.1341044499974277,0.07340821111020818,0.02990787860148003,0.005356949994476279,0.0007450727246096078,0.01625815147129217,0.05127085434413686,0.10437181999878609,0.17342054958418868,0.2556336902078109,0.3476972318346496,0.44590009496454014,0.5462837241717529,0.6448016573941612,0.7374826387368704,0.8205906997173624,0.8907757560789927,0.9452086496200771,0.9816951915033411,0.9987646099636975,0.9957288370884105,0.972710244820679,0.9306367121490353,0.871204222324127,0.7968084978083063,0.7104484287514029,0.6156051877897887,0.5161019040475796,0.41594955287890717,0.31918527353306647,0.2297096321524557,0.15112939003077852,0.08661211513794653,0.038758497519352786,0.00949751553302769,8.678770741787911e-6,0.010674482050396394,0.041064987057589486,0.08995515315040237,0.15537421872287716,0.23468514256547646,0.3246909029429351,0.4217633694755125,0.5219895530014924,0.6213293380909186,0.7157783400168771,0.8015293214228585,0.875125661983376,0.9336006946996627,0.9745972921860246,0.9964628824273957,0.9983160639235411,0.9800821349658466,0.9424961048616318,0.8870730657239605,0.8160471191389644,0.732281319576322,0.6391522647215813,0.5404139848914632,0.44004661814816115,0.34209597101426426,0.2505104320936473,0.16898181260721873,0.10079652955673857,0.04870313032238788,0.014801498773216903,0.00045820899096654655,0.0062514386965780155,0.031947662917844455,0.07651106737631502,0.1381453021399734,0.2143658924526033,0.3021003878609496,0.397812212630377,0.4976432250409545,0.5975692390024441,0.6935622389139607,0.7817527488913929,0.8585858112620364,0.9209642868362837,0.9663737005259498,0.9929835997840274,0.99972134010982,0.986315323327141,0.9533059457012487,0.9020238145763293,0.8345361116203437,0.7535632647740268,0.6623692878551708,0.564630208228301,0.4642858862154759,0.36538119940661096,0.27190299372584603,0.18761937375267868,0.11592781050283274,0.05971818944030288,0.02125631925275806,0.002092597149264297,0.002999512380027769,0.023940507210446993,0.06407145056262764,0.12177466492208994,0.19472413488550533,0.2799792687947868,0.374103433926952,0.4733024870901823,0.5735777164586662,0.6708870295654157,0.7613078899681591,0.8411954346134936,0.9073293981933532,0.9570439219739628,0.9883350145075935,0.9999413324873921,0.9913950254704222,0.9630405949196457,0.916021007356777,0.8522316214051452,0.7742437859216773,0.6852011889767944,0.5886931358516727,0.48860986421487695,0.38898572872116743,0.29383657625639376,0.20699786723127056,0.13197006824945112,0.07177754836978056,0.02884666685067322,0.004907966657493046,0.0009264163106786905,0.017062512024128507,0.052665808106130974,0.1063011364120175,0.17580645794307803,0.25838001459468757,0.35069326796904765,0.44902507269056036,0.5494116757003793,0.6478064950626223,0.7402432375995505,0.8229957800899212,0.8927283692203973,0.9466300857339942,0.9825281525288148,0.9989755192586454,0.9953091929034281,0.9716769630043387,0.9290314442704614,0.8690916766990618,0.7942738311081223,0.7075938133395495,0.6125456931556563,0.5129608583579592,0.4128535716221029,0.3162591556508391,0.2270713293974787,0.1488852523336281,0.08485260364380254,0.037554538100983303,0.00889763977023672,3.706764336752766e-5,0.011329991203558765,0.04232119293058734,0.09176141810994609,0.15765773226493118,0.23735385630539796,0.3276372410838668,0.42486856518660937,0.5251284359065275,0.6243753798834458,0.7186087548138221,0.804030015261082,0.8771958319448583,0.9351568922751439,0.9755767870827435,0.9968261912258497,0.998048541653433,0.9791945654444718,0.9410242659984376,0.8850762873137054,0.8136058912789893,0.7294940481123172,0.6361313045098191,0.5372811107769536,0.43692811622306954,0.3391175480280374,0.24779214821670037,0.16663324180757577,0.09891234267581245,0.0473592788952239,0.014052153423638802,0.00033357581487841736,0.00675654165477646,0.03306214132030305,0.07818999662118065,0.14032100462335695,0.2169506656514696,0.3049900396198608,0.4008902611454475,0.500785594238823,0.6006492600443271,0.6964557562140333,0.784343124825781,0.8607686278291987,0.9226515547446121,0.9674974060401996,0.9934984463576559,0.9996065742878602,0.9855755713175576,0.9519710268925781,0.900147539518738,0.8321941129234387,0.7508499483578435,0.6593940274495863,0.5615129365201199,0.46115226036412604,0.36235753580675467,0.2691111761960127,0.18517194040096202,0.11392341731820571,0.05823763347143679,0.020359281680800645,0.0018152375405901533,0.003353011094857028,0.02491061472274242,0.06561906185816968,0.12383739582088754,0.19721883674676505,0.2828053802369591,0.3771470344550413,0.47644088922837763,0.5766844112803344,0.6738367862651562,0.7639818039130422,0.8434857203866413,0.9091437344214948,0.9583091728004303,0.9890001776972057,0.9999795953254341,0.990804845582668,0.9618457624454068,0.9142696859689561,0.8499944068334275,0.7716108602402285,0.6822786853664657,0.5855988603738546,0.4854685470515233,0.38592399630362717,0.2909778469564618,0.2044573763690823,0.1298502229603088,0.07016379957436747,0.027804064730336808,0.004478538482587002,0.001127472322229206,0.017885947658385692,0.054078430689365076,0.10824600315646626,0.1782051713095384,0.2611358824960133,0.3536952014258551,0.4521520638259467,0.5525376755650051,0.650805494665031,0.7429943473266134,0.8253881027641522,0.8946654703632042,0.9480338808375313,0.9833420546408129,0.999166720001464,0.994869984978993,0.9706250508751965,0.9274092304932537,0.8669645526783242,0.7917275411700904,0.7047309983801037,0.6094817531878856,0.509819300739969,0.40976103247790785,0.31334029517071477,0.22444380678842196,0.14665498297879226,0.0831094896557536,0.036368844369330966,0.008317161585259858,8.52040689990341e-5,0.01200480186144548,0.04359547621676357,0.09358380769089714,0.15995476765362904,0.24003294405173659,0.3305903872149465,0.42797672844168866,0.5282663262876278,0.6274165090929085,0.7214305349947421,0.8065187005113621,0.8792511034124668,0.9366959020087802,0.9765374976312393,0.9971698763664127,0.9977613474449837,0.9782880686797584,0.9395350075437251,0.8830642991471168,0.8111522766028365,0.7266977120844986,0.6331049673791345,0.5341467641319119,0.433812105513401,0.3361454795824562,0.2450838260540621,0.16429783833950984,0.09704399796892982,0.046033305886746534,0.013322002058742288,0.00022867848030833082,0.00728112675997572,0.03419506285025664,0.0798855865319894,0.14251091372000413,0.21954661874258014,0.3078873938889107,0.4039722243003737,0.5039279324072632,0.6037253056382936,0.6993415138978739,0.7869222697656505,0.8629371947447575,0.9243221287473726,0.968602646325913,0.9939938007127682,0.9994720749883401,0.9848166400274473,0.9506182561168011,0.8982554594199422,0.8298389932120973,0.7481267238618675,0.6564124712933608,0.5583932351718114,0.4580201689221253,0.3593393088136577,0.26632847832084044,0.1827369421388017,0.11193427339961293,0.05677452624760976,0.019481188974343366,0.0015575552507059998,0.0037261263894307617,0.02589948733181252,0.06718383034689462,0.12591498440313093,0.19972549786876875,0.2856400704396015,0.38019548743371134,0.479580221905193,0.5797880772185587,0.676779676753566,0.7666452910956523,0.8457624391490133,0.9109419102763849,0.9595563213155345,0.9896460263410827,0.999998109952317,0.9901952798683329,0.9606326879714651,0.9125020017428749,0.8477433681706148,0.7689672064636828,0.679348982106387,0.582501203909377,0.4823278038520522,0.3828667696639281,0.28812737362057783,0.2019285588595524,0.12774499785972243,0.06856702846393242,0.02678011342118669,0.004068682431304094,0.0013482328179438285,0.018728425849974917,0.05550866629797291,0.11020634341364882,0.18061659493923765,0.26390118506047366,0.3567029136346016,0.4552809448607529,0.5556616002946677,0.653798537746961,0.7457358592546826,0.827767573247969,0.8965869829957615,0.9494199794834908,0.9841368656918023,0.999338204640103,0.9944112306629538,0.9695545499816951,0.9257701348916388,0.8648229342791314,0.7891697285676111,0.7018600969486282,0.6064134889060823,0.5066773552789021,0.40667205759553904,0.31042880738205003,0.22182716810726394,0.14443867005748634,0.08138284202334362,0.03520146315690248,0.007756103905865341,0.0001530861463432398,0.012698887370374834,0.044887786584433376,0.09542224991254789,0.16226523416050537,0.2427222999856959,0.33355022469276097,0.43108773647446813,0.5314031002044624,0.6304526056007361,0.7242435691047648,0.8089952788755683,0.8812913952070559,0.9382176631127678,0.9774793858853517,0.9974939242741852,0.9974544926418158,0.9773626804765296,0.9380283883201943,0.8810371806937363,0.8086863720234181,0.7238924219427945,0.6300733728638399,0.5310110687566989,0.43069870909545316,0.3331798830683277,0.2423855725792805,0.16197569444695165,0.09519156923193278,0.04472526367025942,0.012611073518057292,0.00014352113049359572,0.00782517329207627,0.03534638275959373,0.08159777013630415,0.1447149429328105,0.22215364919089037,0.31079233622819635,0.4070579803636696,0.5070701154301518,0.6067972542866453,0.7022193979837275,0.7894900818398936,0.8650914263545825,0.925975942860206,0.9696893777282909,0.9944696432838325,0.9993178475237157,0.984038559433104,0.949247686805753,0.8963476490133517,0.8274708455089186,0.7453936988480643,0.6534247371519395,0.5552712274055588,0.4548897356008719,0.3563266376413531,0.2635550100114251,0.1803144751437099,0.10996045731440085,0.05532892555873392,0.01862207581632208,0.0013195604575516606,0.004118843526447924,0.026907085979150536,0.06876569422346662,0.12800734860804203,0.20224401924337543,0.28848322743812593,0.3832486724551171,0.4827203611230453,0.5828885916844674,0.679715584792309,0.7692982463134808,0.8480255009747355,0.9127238547336449,0.9607853182592936,0.990272534929449,0.9999968756367483,0.9895663524040645,0.9594014194118561,0.9107180244986817,0.8454785943283909,0.766312929011167,0.6764121949140245,0.5794002888095252,0.47918775866964586,0.3798141695566231,0.28528526883699024,0.19941151458595602,0.12565447609994507,0.06698729810779441,0.025774853367323713,0.0036784146921753913,0.0015886890782215723,0.01958991332267951,0.0569564584404586,0.11218207975401367,0.18304063358555223,0.26667581306395327,0.35971628579662196,0.45841159221027217,0.5587833265005376,0.6567855060889314,0.7484676650993267,0.8301340975570077,0.8984928312220974,0.9507883269237265,0.9849125542883087,0.99948996640125,0.9939329480752205,0.9684655026065156,0.9241142222066708,0.8626669060912001,0.786600494329347,0.6989812224401898,0.6033410215006537,0.5035351460753712,0.40358676898343193,0.3075248072828364,0.21922151670618345,0.14223640110983382,0.07967272894572908,0.03405244057298251,0.007214488892717974,0.00024071119418905829,0.013412220315295431,0.04619807298990142,0.09727667216004549,0.16458904052671636,0.24542181788305156,0.33651663660938735,0.4342014664061335,0.5345386337606275,0.6334835494870852,0.7270477460346239,0.8114596525335899,0.8833166267410364,0.939722115480534,0.9784024146423629,0.9977983221499177,0.9971279893640747,0.9764184373858338,0.9365044678364243,0.8789950120207207,0.8062082749391177,0.7210782884904985,0.6270366407060692,0.527874148505288,0.4275880499422079,0.33022087562088454,0.23969749436786852,0.15966690184997767,0.09335512963221598,0.04343520391090627,0.011919395881863526,7.810712897815542e-5,0.00838865976231895,0.036516055573379336,0.08332647980617636,0.1469330052069549,0.2247716540239642,0.3137047518982583,0.41014740745403644,0.5102120191973224,0.6098649846533382,0.7050892948009855,0.792046459624981,0.8672312375707985,0.9276129317606461,0.9707575573235399,0.9949259552760279,0.9991438979856684,0.9832413602671672,0.9478593730942032,0.8944241836537961,0.8250897633510814,0.7426509812655493,0.6504309430349474,0.5521470365344754,0.4517610840464416,0.3533196412844298,0.2607908808143129,0.1779046350983715,0.1080020470243887,0.0539008885031681,0.01778197614001764,0.0011012625614622573,0.004531146994354751,0.027933370866590534,0.07036459100740028,0.13011440579146094,0.2047743013938505,0.2913347389334204,0.3863064689244522,0.48586118285266505,0.5859858322140022,0.6826443944186827,0.771940564779916,0.8502748164773148,0.914489497409972,0.9619961150888332,0.9908796787164589,0.9999758924274812,0.9889180880312614,0.9581520053992675,0.9089178246998418,0.8432001747608295,0.7636481327215188,0.6734684397868587,0.5762962375543498,0.47604853552974596,0.37676631655336046,0.2824516448631993,0.19690634296670756,0.12357874025245796,0.06542467090211179,0.02478832427452521,0.0033077506800018863,0.0018488316055015885,0.020470376049406602,0.05842174993195759,0.1141731341398593,0.1854771915037865,0.269459656914125,0.3627351988895304,0.4615438822202582,0.5619027308805666,0.6597662817116459,0.7511896569596105,0.8324875822181248,0.900382939764971,0.9521388691112043,0.9856690897921643,0.999621999290617,0.9934351561070072,0.9673579517648784,0.9224415578436456,0.8604965532733859,0.7840199399349534,0.6960944885646205,0.600264472327995,0.5003927972406049,0.40050528850439393,0.3046284095753691,0.21662695550321787,0.14004826312100904,0.07797921796909202,0.032921822001694245,0.006692337938546011,0.0003480757515214594,0.01414477252099644,0.047526283679371006,0.09914700118728953,0.1669260949664787,0.24813139111817795,0.3394895057975741,0.43731779525050146,0.5376728031085981,0.6365092210356302,0.7298429550248682,0.8139117241476677,0.8853267180217628,0.941209199689113,0.9793065474444098,0.9980830579704952,0.9967818505080002,0.9754553767034003,0.9349633062842513,0.8769378737898108,0.803718083229876,0.7182554228803752,0.623994890850718,0.524736127279806,0.42448025091872754,0.3272685741150507,0.2370196975938016,0.15737155174135686,0.09153475170548353,0.04216317756349908,0.011246996470055948,3.243905949085191e-5,0.008971563914095926,0.03770403509186798,0.08507164726098732,0.14916501293337825,0.22740052983561548,0.3166245258644027,0.4132403835452055,0.5133535196098094,0.6129283755691088,0.7079510909942097,0.7945913021490154,0.8693565438749723,0.9292330307908792,0.9718071429206855,0.9953627186659024,0.9989502332448617,0.9824250740174731,0.9464533698178141,0.892485139314324,0.8226958407866505,0.7398986794462505,0.6474312071915025,0.5490207859579591,0.4486343378343356,0.3503184385133329,0.25803619990714854,0.17550751718681828,0.10605911988293298,0.052490471485556134,0.016960923127708527,0.0009026701847726915,0.0049630205079598255,0.028978301457897038,0.07198045754543042,0.13223607272875265,0.20731624437904544,0.2941944922962832,0.3893687560647948,0.4890025630377966,0.5890796764722228,0.6855659899505178,0.7745721421286207,0.8525102968132303,0.9162387685659823,0.9631886639799819,0.9914674337211264,0.9999351611533113,0.9882505123550855,0.9568844952830736,0.9071014734508223,0.840908199461025,0.760972922848881,0.6705178329972441,0.5731891727477172,0.4729102584256659,0.3737233310383423,0.2796266136217561,0.19441314295107048,0.12151787230478422,0.06387920856767276,0.02382056510875108,0.002956705035280227,0.0021286501246770007,0.02136977925361655,0.05990448289625738,0.11617942792846964,0.1879261724546482,0.27225260665470497,0.3657595336722214,0.4646776911712433,0.5650196902244418,0.6627407468802727,0.7539017273222799,0.8348279342733452,0.9022572339687589,0.9534715527021747,0.9864064423216965,0.9997342980931644,0.9929178744201181,0.9662319412028946,0.9207522078695018,0.858311961550378,0.7814281673112562,0.6932000093422338,0.5971839629058061,0.4972504328910914,0.3974277378708742,0.3017397286616378,0.21404358697850456,0.13787434251818148,0.07630237598372508,0.031809652100259156,0.006189671667281238,0.0004751755776483124,0.014896515053099968,0.04887236619119073,0.10103316311999339,0.16927630517075748,0.25085091266820964,0.34246871483472485,0.4404365999187933,0.5408054844549027,0.6395295007383202,0.7326290856701869,0.8163513968657041,0.8873215896546354,0.9426788570016427,0.9801917485800574,0.9983481204894076,0.9964160897453995,0.9744735364682329,0.9334049645365128,0.8748658472538487,0.8012158952534156,0.7154239366100926,0.6209482434409264,0.5215971290258941,0.4213754347768237,0.3243230951610655,0.23435228802466707,0.1550897347828858,0.08973050735311794,0.04090923487054371,0.010593901841119746,6.518725828297267e-6,0.009573862723844528,0.03891027439218264,0.08683320357010071,0.1514108779520822,0.23004017279046463,0.3195515428013242,0.4163367864706733,0.516494492584522,0.6159873060360381,0.710804673528128,0.7971245088957428,0.8714672613217791,0.9308361759601784,0.9728380930631599,0.9957799162021728,0.9987368609506753,0.9815897329256873,0.9450297325109382,0.8905305925834281,0.8202891723708392,0.7371369021007291,0.6444256481051382,0.5458925991567338,0.4455096204649675,0.3473231478696449,0.2552910760944378,0.17312321609045178,0.10413175263181906,0.05109773021462316,0.016158949209389484,0.0007237911714864098,0.0054144470091155306,0.03004183648036568,0.07361323001397596,0.13437226561820542,0.20986974779727846,0.2970623745721557,0.3924354129217395,0.4921443776000411,0.5921700022583346,0.6884802559905335,0.7771928744174863,0.8547318536853431,0.9179715991088255,0.9643629178294568,0.9920357767282841,0.9998746834230432,0.987563651743476,0.9555989391274899,0.9052690424938448,0.8386027589574752,0.758287405058833,0.6675604910884552,0.57007921711272,0.46977305131312524,0.3706853332034871,0.27681028669589247,0.1919320130155669,0.11947195365711927,0.062350972147172945,0.022871614094577386,0.0026252916236268464,0.0024281335834562823,0.022288087410675395,0.061404598768346974,0.11820088187514766,0.19038747970824843,0.27505455196956774,0.36878917068949846,0.4678128952840192,0.56813408141834,0.665708784109339,0.7566037690658132,0.8371550612833636,0.9041156398025924,0.9547863250582314,0.9871245827529238,0.9998268583733103,0.9923811234461629,0.9650875153957275,0.9190462390102581,0.856113217209275,0.7788252788281793,0.6902978990992426,0.5940996149081258,0.4941081771440451,0.3943542386401008,0.29885887863893823,0.2114715131699284,0.1357147251669808,0.0746422692215909,0.03071597479720206,0.005706509933266657,0.0006220056523809081,0.015667418219247164,0.05023626735771114,0.1029350834584859,0.17163957831080573,0.2535802751174159,0.3454541460479931,0.443557757224271,0.5439365540648147,0.6425442692999895,0.7354060279239218,0.8187785743254672,0.8893011628461097,0.9441310293695214,0.9810579830855928,0.9985934992372087,0.9960307215231075,0.9734729554610817,0.9318295041446727,0.8727790142538281,0.7987018098411973,0.7125839415178179,0.6178968188132501,0.518457277727841,0.4182737241507428,0.3213845550994242,0.23169537101797177,0.15282154110189,0.08794246783919168,0.03967342536035706,0.009960137790979096,3.471517938113955e-7,0.010195532401934881,0.04013472583025279,0.08861107915545774,0.15367051155585365,0.232690478627828,0.3224856870975546,0.41943649392855503,0.5196348140592022,0.6190416552323857,0.7136499296918657,0.7996459798084532,0.8735633065419528,0.9324223039474612,0.9738503670304683,0.9961775314063491,0.9985037895308915,0.980735369986171,0.9435885174044897,0.8885606206617911,0.8178698531623627,0.7343657583137112,0.6414143844896115,0.5427625996881136,0.4423870553584178,0.3443338876614854,0.2525556178031995,0.17075182598447824,0.10222002139831671,0.04972271970089864,0.015376086061439309,0.0005646325869778646,0.005885408667362646,0.03112393392646373,0.07526284392174876,0.13652290008443807,0.2124347107901382,0.2999382724852476,0.3955063183684798,0.49528650244392786,0.5952566875105162,0.6913870774309768,0.7798026581326685,0.856939399346604,0.9196879205951798,0.9655188302565074,0.9925846852895056,0.9997944616254295,0.9868575333260711,0.9542953877093996,0.9034206042063795,0.8362839443105895,0.7555916854240241,0.6645965308696573,0.5669664934863516,0.46663703810560947,0.3676524430437923,0.27400277532496004,0.18946305115992967,0.11744106511926478,0.0608400220029332,0.021941508713712587,0.0023135235352254035,0.0027472701528422627,0.023225264249191524,0.06292203829661214,0.12023741613647287,0.192861016047722,0.2778653821874827,0.3718239902766003,0.4709493707241299,0.5712457814499877,0.6686702761671549,0.7592956754648976,0.8394688713312586,0.9059580838630437,0.9560831342484749,0.9878234827207173,0.9998996764751056,0.9918249243857449,0.9639247195459666,0.9173237186483458,0.8539004070961365,0.776211377294677,0.6873882724633491,0.5910115501606088,0.49096615411244804,0.3912849122092237,0.29598597329507903,0.20891083566941865,0.13356949636800802,0.07299896325365834,0.02964083329064582,0.005242871820423489,0.0007885601762178118,0.016457451570271175,0.051617933307529396,0.10485268708060064,0.17401582104206564,0.25631937066137017,0.3484456815186606,0.4466811438873846,0.5470658882671829,0.6455534076432339,0.7381736721023379,0.8211931606581961,0.8912653594069007,0.945565659434809,0.9819052167464557,0.9988191845219225,0.9956257610624043,0.972453673202957,0.9302369873363054,0.8706774572155309,0.7961759262946984,0.7097355497777231,0.6148407374930187,0.5153166974036577,0.41517524155184515,0.31845306999676243,0.22904905151666666,0.15056706028754036,0.08617070378779901,0.03845579784494063,0.009345729352080112,1.3924581152124915e-5,0.01083654839364212,0.04137734104266494,0.09040520379448347,0.15594382449362792,0.235351342665787,0.32542684286018864,0.4225393834866117,0.5227743599973251,0.6220913025173902,0.7164867471033713,0.8021556152939571,0.875644596745903,0.933991352103804,0.9748439248397607,0.9965555485734195,0.9982510281913799,0.9798620189445497,0.9421297814235796,0.8865753013594848,0.8154379787195298,0.731585357539979,0.6383975352838887,0.5396309111808114,0.4392667658499265,0.3413507759587834,0.2498299330786341,0.16839344053414523,0.10032400169198241,0.0483654942545827,0.01461236460542753,0.0004252007176965833,0.006375886880645831,0.03222455105544958,0.07692923411225727,0.1386878911815977,0.215011032046582,0.302822072443349,0.39858135111020404,0.4984288134617308,0.5983396103108238,0.6942863394580361,0.782401390192935,0.8591328466032587,0.9213876652336738,0.9666563556048856,0.9931141377239715,0.9996944989290731,0.9861321849931531,0.9529738925165563,0.9015562315980716,0.8339518471089675,0.7528858704200809,0.6616260694114254,0.5638511248151328,0.46350234266953233,0.3646247803524296,0.2712041904001137,0.18700635490334327,0.11542528690728909,0.05934641781455485,0.021030285703507234,0.002021413084291268,0.0030860472275595074,0.024181272752539118,0.0644567415451609,0.12228895027328984,0.19534668377333547,0.28068498628613114,0.3748638725640915,0.4740869936069895,0.5743546674132662,0.6716251060806327,0.7619773401945467,0.8417692730260398,0.9077844933772111,0.9573619290514679,0.9885031146199026,0.9999527495223789,0.9912492992076383,0.9627435995817839,0.9155847148199183,0.8516736186126117,0.7735865659547693,0.684471244359033,0.5879198906358261,0.4878244879000048,0.3882198798105754,0.2931211261042517,0.20636165561865655,0.1314387408536224,0.07137252298731206,0.02858427004652747,0.004798775641558506,0.0009748325705810079,0.01726658390141461,0.05301730946755662,0.10678589824483348,0.17640493950757785,0.2590680911111334,0.35144320308698407,0.44980663654052927,0.5501933634594863,0.6485567969130308,0.7409319088888804,0.823595060492434,0.8932141017551762,0.9469826905324377,0.9827334160985894,0.9990251674294217,0.9952012243584432,0.9714157299534673,0.9286274770126799,0.868561259146367,0.7936383443813078,0.7068788738957599,0.6117801201894093,0.5121755120999795,0.4120801093641865,0.3155287556409261,0.22641343404521763,0.1483263813873973,0.08441528518007291,0.03725640041821021,0.008750700792353572,4.7250477621330056e-5,0.011496885380094746,0.04263807094853844,0.09221550662279798,0.1582307269739716,0.23802265980546672,0.328374893919382,0.4256453325867212,0.5259130063930261,0.6251361274359511,0.719315013713883,0.8046533162266769,0.8777110497267018,0.9355432584548607,0.9758187272474744,0.9969139527724391,0.9979785869157073,0.9789697142964883,0.9406535821854511,0.8845747130926828,0.8129936450966445,0.7287958095998723,0.6353752196475553,0.5364976573304521,0.4361488751848235,0.33837393058855975,0.24711412957993006,0.16604815289102076,0.09844376840190205,0.04702610748343705,0.013867815006843198,0.0003055010709263617,0.006885862276031107,0.03334364439513027,0.07861233476631935,0.1408671533967522,0.2175986098070779,0.30571366054195215,0.40166038968921947,0.5015711865382849,0.6014186488897835,0.6971779275566654,0.7849889679534309,0.8613121088184328,0.923070765887751,0.9677754489445458,0.9936241131193566,0.9995747992823028,0.9853876353945688,0.9516345057454105,0.8996759983080082,0.8316065594658644,0.7501700669213522,0.6586492240411748,0.5607332341500579,0.46036908881917293,0.36160246471609625,0.2684146424600071,0.18456202128043603,0.11342469864052329,0.05787021857641306,0.020137981055445897,0.0017489718086212136,0.003444451426585615,0.025156075160244207,0.06600864789620381,0.12435540325410727,0.19784438470605537,0.2835132528966684,0.377908697482625,0.47722564000266215,0.5774606165134037,0.6745731571398261,0.7646486573342264,0.8440561755063835,0.9095947962055255,0.9586226589573413,0.9891634516063611,0.9999860754188482,0.9906542706479169,0.9615442021550533,0.9138292962122081,0.8494329397124484,0.7709509484832964,0.6815469300032495,0.5848247584481394,0.48468330259632664,0.38515926250696597,0.29026445022223685,0.20382407370528893,0.12932254278445865,0.06976301266368651,0.02754632679704716,0.004374238937589869,0.001180815478078523,0.018094783253540914,0.05443434056519819,0.10873464059310917,0.17880683934183772,0.26182632789767596,0.3544465923567812,0.45293411173283266,0.553318856112631,0.6515543184813543,0.7436806293386435,0.8259841789579463,0.8951473129193915,0.9483820666924776,0.98354254842974,0.999211439823783,0.9947571281795743,0.9703591667093489,0.9270010367463187,0.866430503631962,0.7910891643305917,0.7040140267049066,0.608715087790761,0.5090338458875363,0.40898844983934785,0.3126117275366364,0.2237886227053098,0.1460995929038525,0.08267628135162985,0.036075280454017034,0.008175075614252347,0.00010032352489408591,0.012176517279286037,0.04391686575154319,0.0940419161369489,0.1605311286687529,0.24070432453511575,0.33132972383285986,0.4287542185500559,0.5290506292759141,0.6281760097234148,0.7221346178125314,0.807138983952268,0.8797625838635559,0.9370779617033955,0.9767747357508045,0.9972527298471594,0.997686476464773,0.9780584912862744,0.9391599779970593,0.8825589348807251,0.810536948840058,0.7259972246750259,0.6323475569561926,0.5333629618943749,0.43303350651363276,0.3354034691303548,0.24440831457596235,0.16371605568937786,0.09657939579362806,0.045704612290593805,0.01314246667392538,0.00020553837456999124,0.007415314710501997,0.03448116974348803,0.0803120794048287,0.14306060065340698,0.22019734186732093,0.3086129225690639,0.4047433124894992,0.5047134975560594,0.6044936816315355,0.7000617275147667,0.7875652892098979,0.8634770999155728,0.9247371560782445,0.9688760660735417,0.9941145913326398,0.9994353674130214,0.9846239139385569,0.9502772802990946,0.897779978601691,0.82924817401551,0.7474443821967621,0.6556661123384997,0.5576129446415666,0.4572374003118991,0.35858561551037343,0.26563424168624983,0.18213014683764717,0.11143937933819897,0.056411482595503104,0.01926463001383255,0.001496210469105197,0.003822468593652817,0.026149632969536596,0.06757769605254665,0.12643669345803882,0.2003540201915821,0.2863500703081485,0.38095834476760193,0.4803651859408134,0.5805635060714605,0.6775143129024601,0.7673095213721852,0.8463294884441577,0.9113889208445511,0.9598652741697533,0.9898044675980683,0.9999996528482062,0.9900398622090179,0.9603265746396479,0.9120575321607833,0.8471784588980783,0.768304628982039,0.6786154449005611,0.5817262758492416,0.4815427222721149,0.38210318118670705,0.2874160584821936,0.20129819015879002,0.12722098574616153,0.06817049585531931,0.026527044538904088,0.003969278476890492,0.0014065007627903636,0.018942016914411497,0.05586897063049884,0.11069883715390016,0.1812214256745449,0.2645939720760669,0.35745573070002545,0.4560634459352292,0.5564422427757163,0.6545458539520218,0.7464197248825978,0.8283604216891847,0.897064916541541,0.9497637326422957,0.9843325817807567,0.9993779943476199,0.9942934900667353,0.9692840252027828,0.9253577307784009,0.8642852748330279,0.7885284868300588,0.7011411213610474,0.6056457613598839,0.5058918228559393,0.40590038509185883,0.3097021009007429,0.2211747211718077,0.14388678279071393,0.08095376098973345,0.03491248460426688,0.007618876553839304,0.0001731416266900765,0.012875417247086185,0.045213674941763315,0.09588436019741686,0.16284493871664796,0.24339623093420037,0.3342912158907026,0.43186591858164736,0.5321871047159964,0.6312108293105166,0.7249454480304209,0.8096125202917862,0.8817991181248624,0.9385954012316469,0.9777119125893292,0.9975718664165453,0.9973747083763687,0.977128385905418,0.9376490278528332,0.8805280463428706,0.8080679869844207,0.7231897133040934,0.6293146667964977,0.5302269486868592,0.4299207828872926,0.33243950891152996,0.2417125949411293,0.1613972410425133,0.09473095750614607,0.044401060872515274,0.012436348256520402,0.0001253165769558029,0.007964223271713533,0.03563708217054895,0.08202840089118313,0.1452681463146479,0.2228071255825504,0.31151974400948096,0.4078299977416808,0.5078556223999746,0.607564587078248,0.7029376254278846,0.7901302522027343,0.8656277343817859,0.9263867699860322,0.9699581635196397,0.9945855529908867,0.9992762088285128,0.9838410507906066,0.94890226978537,0.8958682473681541,0.8268767839095363,0.7447089239055485,0.6526768521303401,0.5544903795350452,0.4541074008432223,0.35557435189481956,0.26286309789928214,0.1797108276291487,0.10946940741656208,0.0549702674890416,0.018410267074300823,0.0012631390493257344,0.004220083797829177,0.027161906936845115,0.06916382403982951,0.12853273867825038,0.20287549110426983,0.2891953264718604,0.3840126939639772,0.4835055074155221,0.5836632135293421,0.6804484571986904,0.7699598272095485,0.8485891220479291,0.9131667964299242,0.9610897256078124,0.9904261372761585,0.9999934812741715,0.9894060981588828,0.9590907651294388,0.9102694926468731,0.8449102652171029,0.7656477119753197,0.6756769048389197,0.5786245652231328,0.4784028709740903,0.379051756559086,0.2845760633898932,0.19878410474657182,0.12513415274614093,0.06659503546347934,0.025526463531762134,0.0035839102545985324,0.0016518795105937567,0.019808251419954848,0.05732114299836466,0.11267841034537446,0.18364860313428594,0.26737091432982696,0.36047049926172214,0.4591945155450846,0.5595634000812223,0.65753128516529,0.749149087331804,0.8307236948292755,0.8989668368800161,0.951127633808816,0.9851034849469038,0.9995248244223511,0.9938103283327118,0.9681903478997353,0.9236976240162817,0.8621256574818077,0.7859564130214827,0.6982602713383217,0.6025722621291105,0.502749567108893,0.4028160370941785,0.30679999065775176,0.21857183268873082,0.14168803844961103,0.07924779213048966,0.03376805879710998,0.007082125579879306,0.00026570190683705697,0.013593557678307111,0.04652844729783201,0.09774276603125048,0.16517206572666643,0.24609827267775813,0.3372592531197152,0.4349803097755738,0.5353223088287723,0.6342404663277663,0.7277473933453342,0.8120738275453641,0.8838205720715404,0.9400955171037501,0.978630220746388,0.9978713498753271,0.9970432949647181,0.9761794348912528,0.9361207914323195,0.8784821276952055,0.8055868570489171,0.7203733863782298,0.6262766689616426,0.5270897415743184,0.4268108272522392,0.32948216700271443,0.23902707715110566,0.1590918005389635,0.09289852654918518,0.04311550471690845,0.011749487644904966,6.483884668895268e-5,0.008532566278876441,0.03681133602002401,0.08376123143404207,0.14748970318680088,0.22542785787139247,0.31443401004949684,0.4109203235277927,0.5109974369622191,0.6106312439352205,0.7058055077037311,0.7926837556209443,0.867763927271258,0.9280195424545924,0.9710216985420987,0.9950369794920424,0.9990973298152264,0.9830390768722874,0.9475095285144242,0.893940880117075,0.8244924828131698,0.7419638000928377,0.6496815614866793,0.5513656621656206,0.4509792140420253,0.3525687928085096,0.26010132055373575,0.17730415921333753,0.10751486068564858,0.05354663018217881,0.017574925982530132,0.001049766755137349,0.004637281334099741,0.028192857079319678,0.0707669692091289,0.13064345612503825,0.20540869785097432,0.2920489090058045,0.3870716244309341,0.4866464803902063,0.5867596164548099,0.6833754741355854,0.7725994701643977,0.8508349870666532,0.9149283527390055,0.962295964908138,0.9910284360859071,0.9999675609405093,0.9887530035299348,0.9578368224364946,0.9084652482945075,0.8426284482586317,0.7629803024062092,0.672731425884908,0.5755197490812569,0.4752638727202067,0.37600510914926677,0.28174457711961065,0.19628191677011148,0.12306212621017892,0.06503669371574095,0.024544623296594847,0.003218149491998057,0.0019169420295060968,0.020693452555594682,0.0587908003108944,0.11467328197822907,0.18608827585234455,0.27015704497517096,0.36349077896435755,0.46232719689141755,0.5626822047495141,0.6605104942024408,0.7518686088818601,0.8330739050335119,0.9008529988127199,0.9524737163206356,0.9858552274790005,0.9996519242484803,0.9933076620614514,0.9670781779983103,0.9220207820308997,0.8599517368789802,0.7833730444967458,0.6953715904246165,0.5994947114956186,0.4996072027593794,0.3997355276719618,0.303905511435365,0.21598006006503373,0.1395034467266032,0.07755844215636126,0.03264204823510597,0.006564843892985672,0.0003780007093836524,0.014330910207839498,0.04786113088879035,0.09961706023505545,0.16751241778190817,0.24881034304037847,0.340233718288369,0.43809726911944896,0.5384561177797574,0.6372648011104847,0.7305403430858889,0.8145228084962257,0.8858268658601507,0.9415782500680497,0.9795296239505978,0.9981511683944997,0.9966922493199997,0.9752116757254699,0.9345753290978664,0.8764212597475505,0.80309365703328,0.7175483551367866,0.6232336834466243,0.52395146447021,0.42370376244569086,0.32653156021315327,0.23635186727846785,0.15679982523915903,0.0910821753001328,0.041847994600737626,0.01108191196874131,2.4107572518694553e-5,0.009120321283549448,0.03800388491118367,0.08551050259002096,0.1497251835226761,0.2280594352200972,0.3173556055813583,0.4140141677859852,0.5141388171473222,0.613693531075563,0.7086652610665939,0.7952256986061851,0.8698855942085495,0.9296354089925932,0.9720666291334146,0.9954688530056474,0.9988987374385349,0.9822180238599783,0.9460991114968377,0.8919979529756016,0.8220953649015947,0.7392091191856982,0.6466803587155552,0.5482389159535428,0.44785296346550896,0.3495690569650105,0.2573490187344618,0.17491023664890665,0.10557581634619423,0.0521406269057898,0.01675863973282138,0.0008561020143306175,0.00507404472397438,0.02924244267646542,0.0723870682393768,0.13276876242923147,0.20795354037503183,0.2949107051990547,0.3901350153466771,0.48978798080272173,0.589852592545951,0.6862952481017562,0.7752283459760726,0.853066994793016,0.9166735201938481,0.9634839444266265,0.9916113402376838,0.9999218928710211,0.9880806041181392,0.9565647960890757,0.9066448703677749,0.8403330981500108,0.7603025056320938,0.6697791243791275,0.5724119500577485,0.47212585149469627,0.37296335929388813,0.278921711509513,0.19379172506089237,0.12100498797923198,0.06349553216356801,0.02358156261415284,0.0028720106359266806,0.0022016778500811296,0.021597585357658267,0.060277884519473524,0.11668337325899197,0.1885403474664224,0.27295225396536477,0.3665164505129299,0.4654613662394165,0.5657985335939102,0.6634833633906274,0.7545781821169375,0.8354109594732952,0.9027233278399807,0.953801927010117,0.9865877796847016,0.9997592888058114,0.9927855111072794,0.9659475594270222,0.9203272710542316,0.8577635988901751,0.7807784832938036,0.6924751927171491,0.5964132310165806,0.4964648539245563,0.3966589784993587,0.3010187775597958,0.21339950567061694,0.13733309390880866,0.0758857777933209,0.031534497393478855,0.006067051924777078,0.0005100335987520133,0.015087445711688185,0.04921167307628033,0.10150716877791194,0.16986590244300398,0.2515323349007115,0.3432144939110835,0.4412166734994779,0.5415884077896869,0.6402837142034203,0.7333241869360858,0.8169593664144599,0.8878179202459962,0.9430435415595223,0.9804100866773326,0.998411310921782,0.9963215853078227,0.9742251466326624,0.9330127018922262,0.8743455239000635,0.800588485413986,0.7147147311629957,0.6201858304433341,0.5208122413303953,0.4205997111904874,0.3235878050859077,0.23368707098881963,0.1545214056715773,0.08928197550132555,0.04059858058814897,0.010433647595932238,3.1243632515609576e-6,0.00972746507055966,0.039214681740701474,0.08727614526634786,0.1519744990252757,0.23070175368655638,0.3202844152077322,0.41711140831552007,0.5172796388769704,0.6167513275448981,0.7115167725618625,0.7977559807566827,0.8719926513919495,0.9312343057765413,0.9730929140208546,0.9958811564735504,0.9986804395424431,0.9813779241836738,0.944671074441259,0.8900395426855894,0.8196855248563,0.736444989988561,0.6436733623586319,0.5451102643991125,0.44472877259439736,0.34657526284807266,0.25460630115192207,0.17252915449106965,0.1036523509866214,0.05075231319422763,0.015961440566899132,0.0006821524762836151,0.005530356716161422,0.030310622271724208,0.07402405713981708,0.13490857364542824,0.2105099181601192,0.2977806020162349,0.39320274571339775,0.49292988456989234,0.5929420196363459,0.6892076637718181,0.777846350809099,0.8552850570671805,0.91840222986372,0.9646536172404121,0.9921748267079264,0.9998564788695067,0.9873889264819455,0.9552747363297165,0.904808430768058,0.8380243055530263,0.7576144274207304,0.666820116931671,0.5693012909045313,0.46898893124328545,0.3699266271361312,0.2761075780572043,0.1913136279765808,0.11896281930625358,0.06197161167979809,0.022637319523457267,0.002545507358184096,0.0025060757258150157,0.022520614114657223,0.061782336887219236,0.11870860479297263,0.19100472112446631,0.2757564308952492,0.36954739439929274,0.46859689979551067,0.5689122635255756,0.666449775307294,0.7572777000143176,0.8377347658395167,0.9045777500874446,0.9551122134155672,0.9873011126296383,0.9998469138536572,0.9922438960941269,0.9647985368431022,0.9186171579766556,0.8555613299424727,0.7781728318927112,0.6895711926179091,0.5933279424044735,0.4933226447210822,0.3935865110939024,0.29813990305134447,0.21083027143235294,0.13517706572086768,0.07422986510835294,0.030445450018299458,0.005588769337041832,0.0006617953598999637,0.01586313430819808,0.050580020516516055,0.10341301700425676,0.17223242675202133,0.25426414074536824,0.3462014622530405,0.44433839970536204,0.5447190551392769,0.6432970863653862,0.7360988149395903,0.8193834050607745,0.8897936565863699,0.9444913337020407,0.9812715741500255,0.9986517671820574,0.9959313175686939,0.9732198865788038,0.9314329715360453,0.8722550021402766,0.7980714411404464,0.7118726263793951,0.6171332303360291,0.5176721961479037,0.4174987960906215,0.3206510178935984,0.23103279353633988,0.15225663182935345,0.08749799825710025,0.039367312028528834,0.009804720131663947,1.8900476829175616e-6,0.01035397365892915,0.04044367868448856,0.08905808972362406,0.1542375608509981,0.23335470890433702,0.32322032324643535,0.42021192278149877,0.5204197780948226,0.6198045125663176,0.714359929560387,0.8002745021312324,0.8740850155969172,0.9328161696531203,0.974100512668197,0.9962738736105676,0.9984424447492928,0.9805188110256523,0.9432254737523764,0.8880657266003682,0.8172630578611971,0.7336715216791457,0.6406606911863273,0.5419798310778874,0.44160676482814487,0.34358752870663783,0.2518732761381189,0.17016100678788026,0.10174454058006543,0.049381743883179896,0.015183359972552324,0.0005279250116586032,0.006006199287236391,0.03139735367408253,0.07567787125262815,0.13706280525525333,0.21307773023436233,0.30065848610215345,0.39627469436170776,0.49607206759273825,0.5960277756996416,0.6921126061111038,0.7804533812574563,0.8574890862799969,0.9201144134680114,0.9658049371497336,0.9927188732400294,0.9997713215196904,0.9866779979412574,0.953966694113247,0.9029560020310862,0.8357021616604681,0.7549161739459,0.663854520417529,0.5661878944865835,0.46585323586811506,0.36689503262087786,0.27330228791544936,0.18884772339715128,0.11693570085287314,0.06046499245628101,0.021711931320245292,0.002238652555010767,0.0028301236335888658,0.02346250236876979,0.06330409799121367,0.1207488965875248,0.19348129948865028,0.2785694650052847,0.3725834909071205,0.4717336737123594,0.5720232715583128,0.6694096127850683,0.759967055948289,0.8400452323463928,0.9064161923091038,0.956404523783237,0.987995198138558,0.9999147959310007,0.9916828384147321,0.9636311556306685,0.9168905103442456,0.8533450170211866,0.7755561932116006,0.6866597048292443,0.5902389675220907,0.49018069926001534,0.39051824681208525,0.2952690016199209,0.20827245882990852,0.13303544732166517,0.07259076950673815,0.029374949124793437,0.005130015021008794,0.0008332799985360517,0.01665794535919113,0.05196611916247562,0.10533452963682294,0.17461189723583814,0.2570056526733879,0.34919450533494323,0.4474623244350246,0.5478479361740972,0.6463047985741327,0.7388641175040005,0.8217948286904411,0.8917539968435524,0.9459215693106549,0.9821140523416148,0.9988725276777719,0.9955214615174166,0.9721959352696674,0.9298362004256027,0.8701497770396902,0.7955426236309051,0.7090221530435499,0.6140760036963853,0.5145314529484184,0.41440113962613,0.3177213146335064,0.2283891397597822,0.15000559316658163,0.08573031403103515,0.03815423755458719,0.009195154417326323,2.0404674565766e-5,0.01099982230279456,0.041690827199576064,0.09085626557851423,0.15651427961339087,0.23601819608694702,0.32616321373484514,0.423315588719681,0.5235591107715954,0.6228529655450015,0.7171946197630806,0.8027811632532361,0.8761626041791322,0.9343809381418169,0.9750893852772713,0.9966469889051497,0.9981847624594085,0.9796407183191909,0.9417623665285759,0.8860765826817933,0.8148280595989927,0.7308888238039734,0.6376424641932166,0.5388477396358866,0.43848706347987865,0.3406059725503584,0.24915005164213072,0.16780588707652844,0.09985246048126956,0.04802897310742138,0.01442442868243865,0.00039342571213862865,0.00650155364235111,0.03250259395979588,0.07734844525539625,0.1392313721708121,0.21565687517424365,0.3035442437860203,0.3993507399556744,0.49921440576119275,0.5991097388545679,0.6950099603801274,0.7830493343485785,0.8596789953766442,0.9218100033788278,0.9669378586797076,0.9932434583452214,0.9996664241851194,0.9859478465763576,0.9526407211047634,0.9010876573241697,0.8333667581924338,0.7522078517832861,0.6608824519719477,0.5630718837769008,0.4627188892230166,0.36386869549017953,0.27050595188768145,0.18639410872099849,0.1149237126862665,0.0589757340015416,0.020805434555527746,0.0019514583465667923,0.0031738087741472465,0.024423212917270065,0.06484310772487784,0.12280416805514266,0.19596998473893046,0.2813912451861536,0.3756246201165969,0.4748715640935308,0.5751314348134061,0.6723627589161479,0.7626461436945791,0.8423422677350698,0.9082385818900875,0.957678807069419,0.9886700087964446,0.9999629323566324,0.9911023602297631,0.9624454618989945,0.9151473963561808,0.8511147476663506,0.772928670602532,0.6837408443491595,0.5871464283778817,0.48703914164201084,0.3874543068443146,0.2924061866604621,0.20572616889186507,0.1309083233009276,0.07096855572952326,0.0283230369956467,0.004690807096571603,0.0010244807413556378,0.017471847471189406,0.053369914266000074,0.10727163077962998,0.17700421991007992,0.25975676240045076,0.3521935049374062,0.45058832429960805,0.5509749273094835,0.6493067320309673,0.7416199854053261,0.8241935420569447,0.8936988635879747,0.9473341918938697,0.9829374879758755,0.9990735836893223,0.9950920333425008,0.9711533331493263,0.9282224516302187,0.8680299317505382,0.7930021327687052,0.7061634237435661,0.6110142712788311,0.5113901357851216,0.4113068641483538,0.31479881102317786,0.22575621407828578,0.14776837859484365,0.08397899264321429,0.036959405080364605,0.008604974529572207,5.8667512608745476e-5,0.011664985492409907,0.042956078026043565,0.09267060180663123,0.15880456538649718,0.23869211003189067,0.329112970434599,0.42642228354136336,0.5266975129098049,0.6258965660730357,0.7200207312052656,0.8052758651145183,0.8782253350779297,0.9359285494373661,0.9760594927895492,0.997000487619974,0.997907402850733,0.9787436807472333,0.9402818105596964,0.8840721894971664,0.8123806262473091,0.72809700627414,0.6346188005933466,0.5357141137845226,0.4353697917716975,0.33763071214481444,0.2464367352259964,0.16546388837962356,0.09797618542366981,0.04669405429874468,0.013684676672852059,0.0002786598901809989,0.00701640021597999,0.03362629947405582,0.07903571316372465,0.1414141887379844,0.21824725110858478,0.3064377610860406,0.40243076099757125,0.5023567749590612,0.6021877873696662,0.6978996121390386,0.7856341075473979,0.8618546978600374,0.9234889326237008,0.968052337082171,0.99374856130342,0.9995417910090334,0.9851985012267896,0.9512968696775992,0.8992034704432348,0.8310181873927802,0.7494895679063391,0.6579040289857614,0.5599533818518092,0.4595860151084787,0.3608477352784173,0.2677186804236641,0.18395288086105654,0.11292693427604755,0.05750389513834103,0.019917865034152993,0.0016839360764564493,0.0035371175726028325,0.025402707813971248,0.06639930530036636,0.12487433801663433,0.19847067857716527,0.28422165998309856,0.378670661909069,0.4780104469985233,0.578236630524503,0.6753090970570929,0.7653148574345128,0.8446257812771238,0.9100448468496066,0.9589350129424168,0.9893255179496127,0.9999913212292585,0.9905024844669721,0.9612415024806411,0.9133878848620687,0.8488706099691898,0.7702903678475073,0.680814726466919,0.5840504471210634,0.4838980959524473,0.38439481221016847,0.2895515712485442,0.20319150219168108,0.12879577767585298,0.06936328785097834,0.02728975517932042,0.004271162911581805,0.0012353900363035741,0.01830480849667071,0.05479135037991706,0.10922424392100816,0.17940930028268232,0.26251736126315595,0.355198342605881,0.4537162758282345,0.5540999050354614,0.6523027681653654,0.7443663097922152,0.8265794504158447,0.8956281800012148,0.9487291456558701,0.9837418485287117,0.9992549272753921,0.9946430500055152,0.9700921213985194,0.9265917888897837,0.8658955500025616,0.7904500688982419,0.7032965513936057,0.6079481540158062,0.5082483687338235,0.40821609187510566,0.3118836224957339,0.22313412048722736,0.14554507647975773,0.08224410326736581,0.03578286179940571,0.008034203779339222,0.00011667705050466548,0.012349436955130744,0.04423938118898202,0.09450102674525251,0.16110832770856232,0.24137634512479927,0.3320694768360792,0.42953188453820734,0.5298348605487221,0.62893519393421,0.7228381522610826,0.8077585091792144,0.8802731268195128,0.9374589424121498,0.9770107968877038,0.9973343557925347,0.9976103768784279,0.977827733740992,0.9387838643248152,0.8820526262160506,0.8099208544749749,0.7252961793609244,0.6315898198154855,0.5325790772958848,0.4322550728296778,0.3346618650069567,0.24373343406035614,0.16313510320148905,0.09611578951645955,0.04537704018381861,0.012964133162546021,0.00018363207880955912,0.007550718672702517,0.0347684258326833,0.08073960833386307,0.1436111687397869,0.22084875572266371,0.3093389237140083,0.40551463583259406,0.5054990510689659,0.6052617996680154,0.7007814472523126,0.7882075987604662,0.8640161077941959,0.9251511348882259,0.9691483283374077,0.9942341621640557,0.9993974269141965,0.9844299914902255,0.949935192911232,0.8973035158099767,0.828656542025437,0.7467614296819042,0.6549193691008498,0.5568325118859621,0.45645473726692687,0.3578322713075537,0.26494058361516604,0.18152413624103808,0.11094544449101101,0.05604953400143431,0.019049257813364417,0.0014360963112883818,0.003920035678970424,0.026400948370759292,0.0679726292509274,0.1269593247043559,0.20098328223084144,0.2870605976003119,0.3817214959719152,0.48115019844761825,0.5813387360425051,0.6782485108333118,0.7679730917591312,0.84689568277829,0.9118349158437293,0.9601730917845848,0.9899616997067274,0.9999999614275745,0.9898832348202671,0.960019324929644,0.9116120453591305,0.846612692568752,0.7676413891542748,0.6778814667584269,0.5809511460368234,0.4807576862564265,0.38133988375368444,0.28670526813586444,0.20066855884369705,0.1266978938878599,0.06777502927600726,0.026275144488419777,0.0038710990411559565,0.0014659995528780168,0.019156795535296922,0.05623037136031339,0.11119229193655927,0.18182704335773114,0.265287340223225,0.35820889965515956,0.4568460554729957,0.5572227459215393,0.6552927886398298,0.747102982190228,0.8289524595284294,0.8975418698790671,0.9501063754987185,0.9845271022294699,0.9994165512732651,0.9941745292404213,0.9690123419330153,0.9249442766122851,0.8637467160996146,0.7878865328210327,0.7004216492295167,0.6048777730128734,0.5051062758882034,0.40512894488578644,0.3089758641954171,0.22052296255412562,0.14333577463735664,0.08052571442822543,0.03462465418284666,0.007482864710960269,0.00019443099699134603,0.013053149656476026,0.045540686000433594,0.09634746809619132,0.16342547558548237,0.24407079534368759,0.33503261616313484,0.43264426888707247,0.5329710297693109,0.63196872910867,0.7256467716479384,0.8102289973877869,0.8823058985201147,0.9389720566186748,0.9779432599970761,0.9976485802356982,0.9972936962744341,0.9768929134785771,0.9372685869898436,0.8800179726072441,0.8074488414381171,0.7224864536915345,0.6285556414984335,0.5294427539977232,0.429143029679109,0.33169954840041105,0.24104025492031617,0.16081962352458268,0.09427134624159483,0.04407798278211755,0.012262826611566247,0.00010834603143694554,0.008104487907980351,0.03592892792394764,0.08246006346528628,0.14582222539985834,0.2234612862621151,0.3122476170796763,0.40860224265377704,0.5086411099771633,0.6083316543322143,0.7036553518931015,0.7907697063399508,0.8661631398076759,0.9267965445186735,0.9702257891559274,0.9947002417468468,0.9992333376027074,0.9836423477212819,0.948555744589223,0.8953878684688508,0.8262819153707646,0.7440235448660658,0.6519285902053844,0.5537093971476444,0.453325179377638,0.3548224226825014,0.262171771191525,0.17910797079159213,0.10897932159612611,0.054612708035214286,0.018199647201443736,0.0012079488402425564,0.004322547968740098,0.027417895159087713,0.06956301743335036,0.12905904576542687,0.20350769645708228,0.28990794590532576,0.3847770018031321,0.4842906944268269,0.5844376288403212,0.681180884143772,0.7706207416733982,0.8491518825819004,0.9136087181682656,0.9613929946942174,0.9905785289398688,0.9999888526103093,0.9892446357487961,0.9587789775196167,0.909819947989552,0.8443410846483106,0.7649818391522978,0.6749411810816888,0.577848647541441,0.47761803659397933,0.37828964213853117,0.28386738974580694,0.19815743849919865,0.12461475479921491,0.06620384273773022,0.025279244998065498,0.003490631287032475,0.0017163001824583302,0.020027774935264198,0.057686920368676176,0.11317569709227315,0.18425735363908952,0.26806658987197185,0.36122505717418363,0.4599775396137271,0.5603433266216343,0.6582766753544093,0.7498298945062156,0.8313124756655251,0.8994398576345346,0.9514658270245526,0.985293218062169,0.9995584492991113,0.993686489552865,0.9679140374019874,0.9232799798712045,0.861583514916446,0.7853116257916901,0.6975388308042572,0.601803249544109,0.5019639813547165,0.4020455451166615,0.30607565097293143,0.21792284341462737,0.14114056033074002,0.07882389399875867,0.03348482797761948,0.006950979101237098,0.00029192628094032447,0.013776095801172672,0.04685994106141028,0.09820985292863549,0.1657559174944922,0.24677535426305663,0.3380022713775339,0.4357593136549163,0.5361058966990309,0.6349970517777735,0.7284464784308823,0.812687232160819,0.8843235698892676,0.9404678322918734,0.9788568452872173,0.9979431485382149,0.9969573735470106,0.9759392568835538,0.9357360384052714,0.8779683090355463,0.8049646847764028,0.719667940244573,0.6255163854862489,0.5263052677686642,0.42603378523959196,0.32874387933086685,0.23835730418113404,0.158517540805779,0.09244292845099256,0.04279693340384638,0.01158078472014612,5.2804721713317626e-5,0.008677686049023414,0.03710775991028703,0.08419701060341428,0.148047271385767,0.2260847395371537,0.3151637262954009,0.4116934595066993,0.5117828275784961,0.6113972301090105,0.7065212125478539,0.7933203290876274,0.8682957090969239,0.9284250965246091,0.9712846769801385,0.995146781642565,0.9990495295557715,0.982835601030345,0.9471585791970759,0.8934566040841703,0.8238944012218263,0.7412760215999045,0.6489318104292723,0.5505841609937139,0.4501974650520249,0.3518183082863713,0.25941235251540146,0.17670447994648247,0.10702864324936451,0.053193473991491824,0.01736906675633998,0.0009995026746972835,0.004744638543467794,0.02845350801155988,0.07117040703044292,0.13117341826499307,0.20604382154645978,0.2927635924334729,0.3878370587162804,0.4874318108927315,0.5875331865177851,0.6841061011654656,0.7732577026003529,0.8513942915725186,0.9153661837614984,0.9625946734875699,0.9911759812854904,0.9999579952162396,0.9885867124759656,0.9575205092418408,0.9080116635376401,0.8420558759319382,0.762311822888573,0.6719939855721891,0.5747430741775078,0.4744792709750884,0.3752442078432701,0.281038048168983,0.19565824034253154,0.1225464426898265,0.06464979029490897,0.02430209604432998,0.0031297746769404222,0.001986282038659415,0.020917712294596602,0.05916093987419602,0.1151743810475318,0.18670013513429512,0.27085500043447985,0.3642466960306401,0.46311060456297504,0.5634615238789501,0.6612543104514578,0.7525469390324713,0.8336594056111231,0.9013220683008452,0.9528074465377098,0.986040165766736,0.9996806157482372,0.9931789502194559,0.9667972511863032,0.9215989644029987,0.8594060318952408,0.7827254495139918,0.6946482099835074,0.5987247050470906,0.4988216092478268,0.3989660143559326,0.3031830973810308,0.21533386576830954,0.1389595202665428,0.07713870919753874,0.03236342820461341,0.00643856795860942,0.0004091590514799237,0.01451824683427072,0.048197094263942475,0.10008810768205784,0.1680995613877071,0.24948991505813944,0.3409783251837666,0.4388768958035871,0.5392393375168077,0.6380200423286941,0.7312371620270061,0.8151331164028583,0.8863260612329051,0.9419462103515743,0.979751516673302,0.9982180490652169,0.9966014219802477,0.9749668016234805,0.9341862791037446,0.8759037164586527,0.8024684826091365,0.7168407503457994,0.6224721718235697,0.5231667425332389,0.4229274623201418,0.32579497454143536,0.235684687814102,0.15622894597283565,0.09063060836354042,0.04153394264794008,0.010918034427601087,1.701034341183849e-5,0.009270290455630659,0.03830487523016601,0.0859503811422378,0.15028621881259552,0.22871901192651461,0.3180871361805808,0.41478816429437887,0.5149240797813023,0.614458405914215,0.7093789160206752,0.7958593662589115,0.8704137314296598,0.9300367265814298,0.972324949986056,0.9955737642137643,0.9988460100334452,0.9820097832823209,0.9457437519200675,0.8915097989370862,0.8214940938807482,0.7385189684051943,0.6459291481394104,0.5474569268648619,0.44707171782862676,0.3488200467757764,0.2566624365784086,0.17431375863888898,0.10509348649869943,0.051791887927218616,0.016557549284351603,0.0008107660478653411,0.005186290731403642,0.029507746023506143,0.07279473455346491,0.1333023586895115,0.2085915573270299,0.29562742439234196,0.3909015458451205,0.4905734237773924,0.5906252868064533,0.6870240463580705,0.7758838703852283,0.8536228211793823,0.9171072432069995,0.9637780807006813,0.9917540331454018,0.9999073904641718,0.98790949098845,0.9562439698033396,0.906187263427088,0.839757156680882,0.7596314458235003,0.6690399966383569,0.5716345486090809,0.47134151337481844,0.37220370115654855,0.27821735515881657,0.19317106308709875,0.12049303925396188,0.06311293332956364,0.023343736222680322,0.0027885434640049778,0.0022759344577286122,0.021826572462519844,0.06065237165599019,0.1171882648582569,0.18915529135828096,0.2736524617740259,0.36727369687574074,0.46624512657081885,0.5665772145308247,0.6642255763202223,0.7552540084510956,0.8359931566660985,0.9031884275343773,0.9541311810468504,0.986767915840212,0.9997830457953086,0.9926519312869984,0.9656620273968229,0.9199012966044782,0.8572143530422879,0.7801281061368226,0.6917499009410943,0.595642261118302,0.4956792836850483,0.39589047423903195,0.30029831766987614,0.21275613187469983,0.1367927405915601,0.07547022658604491,0.031260499156920196,0.005945651522308859,0.0005461246781456874,0.015279573442263217,0.04955209279309819,0.10198215816908784,0.17045631469579242,0.2522143705091271,0.3439606600335545,0.4419968921947254,0.5423712284578927,0.6410375813592646,0.7340187122097936,0.8175665535062799,0.8883132934565624,0.9434071324047367,0.980627238817571,0.9984732709586724,0.9962258556335304,0.9739755861084273,0.9326193702977091,0.8738242764239024,0.7999603335314054,0.7140049956636507,0.619423120750865,0.520027302257021,0.41982418361442503,0.32285295050805884,0.23302251138232172,0.15395392942073927,0.08883445756232128,0.040289060400046706,0.010274601911263337,9.643103398571107e-7,0.009882277721093624,0.0395202265998747,0.08772010582707329,0.15253897924631937,0.23136399938162272,0.3210177312662789,0.41788623478206716,0.5180647425122982,0.6175150608373836,0.7122283494379087,0.7983867175668172,0.8725171231481625,0.931631371032909,0.9733465670849435,0.9959811725954699,0.9986227870743495,0.9811649270953877,0.9443113186410941,0.8895475299225659,0.8190810881549602,0.7357524941801105,0.6429207219350699,0.5443278182806857,0.4439480611683355,0.3458277565761322,0.25392213199682945,0.1719359012975955,0.10317392777901196,0.05040800520228572,0.015765126838816146,0.0006417464144735652,0.005647487088155934,0.03058056755459282,0.07443593584467767,0.13544578295000848,0.21115080316823748,0.2984993286661841,0.39397034214843846,0.49371540899328686,0.5937138075744536,0.6899346044684944,0.7784991412995446,0.8558373833799603,0.9188318277363358,0.9649431695912983,0.9923126616876875,0.9998370403528938,0.98721299803517,0.9549494096249083,0.9043468197181076,0.8374450176900154,0.7569408138266986,0.6660793309569614,0.5685231936167989,0.4682048877284407,0.36916824217240374,0.2754054221271527,0.19069600497151246,0.11845462559701542,0.06159333254451982,0.02240420338644128,0.0024669511261901644,0.002585245998965313,0.02275431954083984,0.0621611568054401,0.11921726897999019,0.19162272533720248,0.27645886339637055,0.37030594014890605,0.46938098182980803,0.5696902755136093,0.6671903556015688,0.757950995838153,0.8383136366518806,0.9050388616176017,0.955436978267068,0.9874764395378952,0.99986573539454,0.9921054535717069,0.9645084108726533,0.91818704353018,0.8550085649245909,0.7775196982501341,0.6888440181545442,0.5925560395082085,0.4925371287820777,0.3928190462437343,0.29742142578261166,0.2101897435492197,0.13464030688933948,0.07381851206606982,0.030176084398063963,0.005472249261565143,0.0007028177510648437,0.016060045554247504,0.050924883129103815,0.10389192957844612,0.1728260843316386,0.254948613005388,0.3469491581305271,0.44511917959459296,0.5455014458187429,0.6440495496826218,0.7367910191134839,0.8199874473551103,0.8902851880684708,0.9448505407478165,0.9814839771307184,0.9987088041378198,0.9958306893409928,0.9729656494894607,0.9310353738769895,0.871730071065096,0.7974403366101533,0.7111607882048591,0.6163693526996481,0.5168870709417334,0.41672407169585013,0.31991792343489983,0.23037088003651396,0.15169258100818173,0.08705454699176501,0.03906233583057761,0.009650512585451743,4.667256284174304e-6,0.0105136236731177,0.040753766015427184,0.08950611475727266,0.15480546370732734,0.23401959743067607,0.323955395799752,0.42098754860205784,0.5212046917214745,0.6205670741466557,0.7150694002525376,0.8009022831859507,0.8746058011725917,0.9332089668937313,0.9743494879249295,0.9963689906958544,0.998379869495352,0.9803010658397033,0.9428613359384599,0.8875698745463871,0.8166554793534326,0.7329767081949451,0.6399066506431652,0.5411969588348265,0.44082661844943644,0.3428415558770379,0.2511915470072926,0.16957100184329682,0.1012700429091023,0.049041880477345146,0.014991830718867893,0.0004924504504641991,0.006128209397374074,0.031671930230481316,0.0760939460798547,0.1376036063854404,0.21372145798490577,0.3013791918204439,0.39704332641480766,0.4968576424381702,0.5967986268312659,0.6928376605354153,0.7811034120452565,0.8580378907033942,0.920539869231814,0.9660898941406955,0.9928518448476216,0.9997469476610968,0.9864972611262259,0.9536368798391351,0.9024904051046096,0.8351195502843042,0.7542400331728414,0.6631121054684703,0.5654091320930732,0.4650695179264916,0.36613795078551037,0.27260236013980244,0.18823316375569865,0.11643128223231719,0.0600910479610281,0.021483534645317215,0.00216501036575939,0.002914204445172097,0.02370091688537279,0.06368723572849577,0.12126131327105832,0.19410233961227075,0.2792740944541822,0.37334330608248234,0.472518046479828,0.572800583867504,0.6701485311925252,0.7606377946679569,0.8406207539140662,0.9068732974620148,0.9567247866219385,0.9881657088744928,0.9999286812798549,0.9915395386583754,0.9633364471793805,0.9164562728897285,0.8527887546664595,0.7749003288809091,0.6859306764004982,0.5894661621165027,0.4893952686478471,0.38975185168542087,0.29455253535079506,0.20763480215915942,0.13250230417677417,0.0721836308770803,0.029110226760301283,0.005018379874838053,0.0008792320811691345,0.016859632343106,0.05231541104943738,0.10581734647792268,0.17520877669399693,0.2576925345497154,0.3499437014348893,0.448243634678985,0.548629865961935,0.6470558283319345,0.7395539732373991,0.8223957023287958,0.8922416671826678,0.9462763783690198,0.9823216977732652,0.9989246392995608,0.9954159387109248,0.9719370316570901,0.9294343524063253,0.8696211830992291,0.7949085913803136,0.7083082403100321,0.6133109882877608,0.5137461726203417,0.4136272490127358,0.31699000924976317,0.22772989851090958,0.14944499005397355,0.08529094695483624,0.03785381739273269,0.009045791100469158,2.811903498561863e-5,0.011164303374778195,0.042005444754439125,0.09130833738899374,0.15708558267393702,0.23668570118276833,0.326900013749025,0.4240919832585559,0.5243438033870128,0.6236143252935112,0.7179019562486384,0.8034059637564082,0.8766796830042689,0.9347694518519585,0.9753336728926145,0.9967372031968635,0.9981172668912202,0.979418233636089,0.9413938610836287,0.8855769109220439,0.814217363282949,0.7301917200877881,0.6368870533135843,0.5380644721900802,0.4377075129627901,0.3398615626275448,0.24847078946254442,0.16721915368487034,0.09938190708867639,0.047693567711637574,0.014237691468181046,0.00036288405273476876,0.006628438671472725,0.03278179094449085,0.07776869977085027,0.13977574376602486,0.21630342024121874,0.30426690010617674,0.4001203772673941,0.5],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],21:[function(require,module,exports){
module.exports={"expected":[0.5,0.599879622732606,0.6957330998938233,0.7836965797587813,0.8602242562339751,0.9222313002291498,0.9672182090555091,0.9933715613285272,0.9996371159472652,0.985762308531819,0.9523064322883624,0.9006180929113237,0.8327808463151296,0.7515292105374556,0.6601384373724553,0.5622924870372099,0.46193552780991975,0.3631129466864157,0.2698082799122119,0.18578263671705098,0.11442308907795606,0.05860613891637134,0.020581766363910958,0.0018827331087797883,0.0032627968031364585,0.024666327107385533,0.06523054814804152,0.12332031699573104,0.19659403624359179,0.2820980437513616,0.3763856747064887,0.47565619661298725,0.5759080167414441,0.673099986250975,0.7633142988172317,0.842914417326063,0.9086916626110062,0.9579945552455609,0.9888356966252219,0.9999718809650144,0.9909542088995309,0.9621461826072673,0.9147090530451638,0.8505550099460264,0.7722701014890905,0.6830099907502368,0.5863727509872643,0.4862538273796582,0.38668901171223924,0.29169175968996786,0.2050914086196865,0.1303788169007709,0.07056564759367462,0.02806296834290989,0.004584061289075181,0.0010753607004391763,0.017678302226734777,0.05372362163098027,0.10775833281733216,0.17760429767120423,0.26044602676260087,0.3529441716680655,0.45137013403806503,0.551756365321015,0.6500562985651107,0.7423074654502846,0.8247912233060031,0.8941826535220774,0.9476845889505626,0.9831403676568939,0.9991207679188309,0.994981620125162,0.9708897732396987,0.9278163691229198,0.8674976958232259,0.7923651978408406,0.7054474646492049,0.6102481483145792,0.5106047313521529,0.4105338378834973,0.3140693235995018,0.22509967111909096,0.14721124533354046,0.08354372711027153,0.036663552820619505,0.008460461341624592,7.13187201450971e-5,0.011834291125507101,0.043275213378061506,0.09312670253798522,0.1593792460859338,0.2393622053320431,0.32985146880747485,0.42719941613249596,0.527481953520172,0.6266566939175177,0.7207259055458177,0.8058976603877293,0.8787386867289417,0.9363127642715042,0.9762990831146272,0.9970857955548279,0.9978349896342407,0.9785164653546827,0.9399089520389718,0.8835687177676828,0.8117668362443013,0.7273976398601976,0.6338620492144896,0.5349304820735084,0.43459086790692686,0.3368878945315297,0.24575996682715867,0.16488044971569582,0.0975095948953904,0.04636312016086486,0.013502738873774067,0.00025305233890315915,0.007148155152378488,0.03391010585930454,0.07946013076818603,0.1419621092966058,0.2188965879547436,0.3071623394645847,0.40320137316873406,0.5031423575618298,0.6029566735851923,0.6986208081795561,0.7862785420150942,0.8623963936145596,0.9239060539201454,0.9683280697695187,0.993871790602626,0.9995075495495358,0.9850081692811321,0.9509581195226549,0.8987299570908978,0.8304289981567032,0.7488084529927074,0.6571584441229621,0.5591733815505635,0.45880304116517345,0.36009334935683485,0.2670232918050549,0.18334452064656737,0.11243012545361286,0.05713866406154017,0.019698934160296666,0.001620130504648043,0.0036310093041456715,0.025650512075070464,0.06679103310626872,0.12539419882740838,0.19909771681404925,0.2849305997474624,0.3794329258533443,0.4787953082785255,0.5790124513979422,0.6760446042002479,0.765980402569324,0.8451945362926727,0.9104938852427273,0.9592462339845729,0.9894863763268823,0.9999953327437159,0.9903494874145482,0.9609376641694224,0.912945453008235,0.8483074189918183,0.769629119963486,0.6800820765651001,0.5832759283041499,0.4831129290582667,0.38363064730035196,0.28883921179514094,0.20255966338984666,0.12826992893490397,0.06896462612301046,0.027034350510539207,0.004169310659007164,0.0012911958621801833,0.018516022869281556,0.05514945925218351,0.10971481193152915,0.1800125526448897,0.2632089808865161,0.35595045031737815,0.45449855418125706,0.5548808204054071,0.6530508418694729,0.745051386994612,0.8271739156683614,0.8961080704215538,0.9490751168708962,0.9839399544457526,0.9992971822489352,0.9945277507384349,0.969823915601936,0.9261814879339302,0.8653596931106605,0.7898102564507803,0.7025785742173883,0.6071809537562657,0.5074628712179223,0.40744396049179155,0.3111559818454558,0.22248030174986588,0.14499143507540907,0.08181295646982006,0.035491589127346734,0.00789454642829307,0.000134264605459955,0.012523560462104844,0.044563021732932084,0.09496113838239834,0.1616863633481193,0.2420490041618471,0.33280964439843125,0.4303097244863907,0.530619018170192,0.629694059851094,0.7235411366036295,0.8083772746627975,0.8807827310200098,0.9378388431945599,0.9772456804591602,0.9974147540010347,0.9975330488738099,0.9775957966135587,0.9384066674554802,0.8815453744029846,0.8093039950284875,0.7245945778728473,0.6308317578275963,0.5317951122715593,0.4314768063832011,0.33392066904303863,0.2430591861733013,0.1625549823099846,0.0956531802818924,0.04505059037509168,0.012787001964830014,0.00016295964710622002,0.007687338312312497,0.03505683040870167,0.08116817226366424,0.1441626166200397,0.22150085870045544,0.3100653955315055,0.4062861924255464,0.5062845910067131,0.6060296578515616,0.7015006713338159,0.7888491968317626,0.8645542170499916,0.9255640641553223,0.9694194324454072,0.994352512911844,0.9993582535855264,0.9842348731611839,0.9495919947977143,0.896826072220988,0.8280640987024045,0.7460778680031706,0.6541722434238678,0.5560519388316645,0.45567218171931434,0.3570792780649301,0.26424750581988954,0.18091891184503978,0.11045247007743408,0.05568868135890592,0.018835072904612282,0.0013772129256505172,0.004018827404530023,0.026653432915056563,0.06836862896709095,0.1274828768518374,0.20161328243318277,0.2877716505620913,0.38248493916261644,0.4819352574877019,0.5821137652179329,0.678982268733721,0.7686360006183772,0.8474610207536806,0.9122798941729267,0.9604797734001254,0.9901177222789064,0.9999990356896602,0.9897253980887366,0.9597109395999532,0.9111655424376788,0.8460460705792607,0.7669774886176783,0.6771470494919412,0.580175816385575,0.47997269774297907,0.380576879249135,0.2859950043363493,0.2000396664685946,0.12617572357609758,0.06738062970229086,0.02602441389157273,0.0037741443664696672,0.001526729041327557,0.019372761182428977,0.056592867595263274,0.1116867065434376,0.18243344649372,0.2659812877902064,0.35896241864073536,0.4576287715421073,0.5580031078052746,0.6560393399664455,0.7477856294908729,0.8295436853042075,0.8980178418309122,0.9504479072069019,0.9847204265577367,0.9994538753218543,0.9940543484776911,0.9687395008430798,0.924529773413955,0.8632072594084399,0.7872438681253002,0.6997016823301239,0.6041095257609681,0.5043207163149517,0.40435773888169796,0.30825009905890566,0.21987189386317746,0.14278564695771212,0.08009870339552183,0.03433797260317706,0.007348068713001643,0.0002169542046913664,0.013232084159788049,0.04586881895314965,0.09681157246562272,0.16400684333390142,0.24474599154890442,0.33577442367977767,0.43342278546917534,0.5337548734291812,0.6327263031242593,0.7263475382259741,0.810844708641719,0.882811735141743,0.9393476283440099,0.9781734275374802,0.9977240655422714,0.9972114565359951,0.9766562637773197,0.9368870666704363,0.8795069607460382,0.8068289369129013,0.7217826448411835,0.6277962988434515,0.5286584866251816,0.4283654513909191,0.3309600033616431,0.24036855417649972,0.16024284331911798,0.09381273657291206,0.04375603019666041,0.012090509011549955,9.26095358282919e-5,0.008245966854598219,0.03622191929931873,0.0828927567930004,0.14637717882061774,0.22411612961477168,0.31297595364192954,0.4093747131935466,0.5094265762226077,0.6090984541548795,0.704372575607658,0.7914084426729702,0.8666976413104885,0.927205265446535,0.9704922539764939,0.9948137092685964,0.9991892339521347,0.9834424507156484,0.9482081120727814,0.8949065135013006,0.825686241361111,0.7433375634215914,0.6511799532242236,0.5529282821713732,0.4525430731351381,0.3540708518605896,0.26148103159480574,0.17850590611925177,0.10849020106291385,0.054256248079932456,0.017990216717679086,0.0011539899665548026,0.004426235786235744,0.027675050013943936,0.06996327341857017,0.1295862685703401,0.20414063374108854,0.29062108397932485,0.3855415940857851,0.4850759202186978,0.5852118357056212,0.6819128638194192,0.7712809880734854,0.8497137811874045,0.9140496188577623,0.961695124769834,0.9907297095443693,0.9999829896565882,0.9890819655723989,0.9584660573520599,0.9093693916364596,0.8437710540271643,0.764315312185898,0.6742050254585646,0.5770725376798582,0.47683325746676114,0.3775278281764303,0.2831592496542006,0.1975315173908635,0.12409628354134727,0.06581372089625537,0.025033198376519572,0.003398578019752241,0.0017819509347830609,0.020248483326698097,0.05805378964842567,0.11367393876709486,0.1848668835971417,0.26876283797299394,0.3619799576713059,0.46076066248319225,0.561123104196413,0.6590216748162334,0.7505100849418606,0.8319004386122929,0.8999118923179421,0.9518029057360575,0.9854817531657293,0.9995908409485201,0.9935614320413906,0.9676365717953865,0.9228612908024613,0.8610404797334572,0.7846661342316905,0.6968169026189692,0.6010339856440674,0.5011783907521732,0.40127529495290937,0.3053517900164926,0.2172745504860082,0.14059396810475921,0.07840103559700129,0.03320274881369678,0.006821049780544153,0.00031938425176281093,0.013959834233263968,0.04719255346229023,0.09867793169915479,0.16634059438887694,0.24745306096752878,0.33874568954854223,0.43653847612104996,0.536889395437025,0.6357533039693599,0.7291449995655201,0.8132998648657048,0.8848256189524681,0.940839060125804,0.9790822877054034,0.9980137179613406,0.9968702253230596,0.97569790395567,0.935350209705091,0.8774535573101735,0.8043417596574685,0.7189619518310171,0.6247557921567299,0.5255207290249116,0.4252569258224922,0.32800601442781085,0.23768817711142703,0.1579441240680618,0.09198833646235999,0.042479490758159155,0.011413287524034366,4.200478376037431e-5,0.008824018714509552,0.037405326512430115,0.08463381623850158,0.1486057084274814,0.22674229739964707,0.31589389883453445,0.4124668134822149,0.5125681891072685,0.6121629412837196,0.7072364075665272,0.7939561784535403,0.8688265817350069,0.9288295929695571,0.9715464919884401,0.9952553614565323,0.9990004973253027,0.98263093324366,0.9468065260085081,0.8929713567506354,0.8232955200535175,0.7405876474845985,0.6481816917136287,0.5498025349479752,0.4494158390062861,0.35106818957072766,0.25872397840009553,0.17610559877817372,0.10654339591582968,0.05284142080292409,0.017164398969655104,0.0009504704442284684,0.0048532183574350185,0.02871532301986146,0.07157490347539086,0.13170429090307606,0.20667967091237255,0.2934787874521461,0.3886027698909895,0.4882171724215038,0.5883065404933007,0.6848362737045991,0.7739152604628463,0.851952728614233,0.9158029893965858,0.962892240089713,0.9913223139509766,0.9999471952782867,0.9884192152798539,0.9572030665961536,0.9075570715490074,0.8414824591942209,0.761642695818866,0.6712561206691332,0.5739662147604081,0.47369473223133585,0.3744836145137511,0.28033205975542697,0.19503531522359718,0.12203169096445371,0.06426396159472858,0.024060743116446237,0.003042626452989361,0.002056851461785081,0.02114315471278272,0.05953216770812658,0.11567643011073236,0.18731276783918105,0.2715535215691177,0.36500294822222645,0.4638941033009692,0.5642406863450837,0.6619977286224661,0.7532246457369434,0.8342440825055077,0.9017901470713645,0.9531400589385897,0.9862239041988273,0.9997080737190597,0.9930490208987629,0.9665151720223806,0.9211761060012413,0.8588594396692599,0.7820771565853726,0.6939243490270686,0.5979544548833384,0.4980360186452835,0.39819675045589104,0.30246116919574284,0.21468837420830983,0.13841648508355398,0.07672002012879553,0.03208596259801255,0.006313510447134962,0.0004415507008886932,0.014706781937831037,0.048534172975447376,0.10056014236546534,0.16868752433447487,0.2501701054937844,0.34172332464559074,0.4396566733783657,0.5400224603862729,0.6387749428258164,0.7319334101280282,0.8157426463609105,0.8868243029077268,0.9423130796313238,0.9799722250647358,0.9982836998175417,0.9965093687129676,0.9747207550019346,0.9337961572622697,0.8753852452007851,0.8018425615008014,0.7161326102541931,0.6217103578614689,0.5223819634060207,0.422151352458559,0.32505881891831123,0.23501816084770227,0.1556589153516894,0.09018005201044799,0.041221022480383285,0.010755364251203936,1.114738969060225e-5,0.009421471060131192,0.03860700530578265,0.08639128183173439,0.15084811741809961,0.22937925832660178,0.318819115856228,0.4155623711596787,0.5157093055731732,0.6152229981968679,0.7100920540946742,0.7964923035429177,0.8709409542345732,0.9304369825666496,0.9725821048409122,0.9956774520312599,0.9987920511597574,0.9818003527985563,0.9453872919647857,0.8910206784038739,0.8208920292084079,0.737828228808475,0.6451775773174986,0.546674820622362,0.4462906028523556,0.34807140979461565,0.2559764551339342,0.17371808462923538,0.10461213153114918,0.05144425541077696,0.01635765227871805,0.0007666623972926723,0.005299758253153208,0.029774210844072613,0.07320345548132645,0.1338368601923241,0.20923029366004914,0.2963446481068985,0.39166834566778574,0.49135889002283667,0.591397757346223,0.6877523829203237,0.776538713737885,0.8541777746001417,0.9175399365347137,0.9640710720760524,0.9918955120920196,0.999891653968563,0.9877371733884337,0.9559220172178824,0.9057286537584052,0.8391803764754173,0.7589597450796839,0.668300451599589,0.570856970320891,0.4705572460022768,0.37144435850156654,0.2775135463084654,0.19255115856188282,0.11998202739275582,0.06273141301015639,0.023107086521422848,0.0027063037255658506,0.0023514197643016987,0.022056740002923847,0.06102794338132522,0.11769410147988535,0.18977100261221314,0.2743532283520615,0.36803127089133003,0.4670289702306891,0.5673557311129275,0.6649673838368652,0.7559292046563124,0.8365745244145176,0.9036525319038087,0.9544593139995664,0.9869468503435239,0.9998055690030087,0.9925171352890397,0.9653753458171533,0.9194742855717746,0.8566642253626433,0.7794770374458744,0.6910241358045829,0.5948710551142136,0.4948937241117966,0.3951222269871267,0.29957835077048334,0.21211346717896729,0.13625328390038544,0.07505572338771488,0.03098765806698467,0.0058254707595787325,0.0005834487267348809,0.015472897770530014,0.0498936245012816,0.10245813012093291,0.1710475404715706,0.25289701780977203,0.34470721136017024,0.4427772540784607,0.5431539445270043,0.6417911003448404,0.734712659776775,0.8181729566422689,0.8888077080634407,0.9437696286396866,0.9808432044647031,0.9985340004471219,0.9961289009588441,0.9737248555115803,0.9322249707239927,0.8733021061121401,0.799331441156303,0.7132947318641356,0.6186601162463156,0.5192423137435734,0.4190488539631766,0.32211853324157314,0.23235861084572523,0.1533873074312479,0.08838795464086946,0.039980675070355964,0.010116765179732923,3.8572425475891237e-8,0.010038300293272573,0.039826908215415235,0.08816508415627067,0.15310431722171003,0.23202690824086875,0.3217514891666882,0.418661263957495,0.5188498015523818,0.6182785040280848,0.7129394023996881,0.7990167177691585,0.8730406752956441,0.9320273707490726,0.9735990516292408,0.9960799643210296,0.9985639036887116,0.9809507421866356,0.9439504659985657,0.889054555508989,0.818475863758962,0.735059416384834,0.6421677286924463,0.5435452627330731,0.443167488114038,0.3450806308991502,0.2532385703180958,0.17134345797456296,0.10269648419002336,0.05006480708876804,0.015570008509774524,0.0006025730858034706,0.00576583783594431,0.030851671662592284,0.07484886511177413,0.13598389220580415,0.21179240123953386,0.2992185527476873,0.39473820033198465,0.49450094893103413,0.5944853641674059,0.6906610762859917,0.7791512442773363,0.856388831260213,0.9192603916661369,0.9652315741673168,0.9924492813272975,0.9998163679211904,0.9870358668374539,0.9546229598161814,0.9038842104835405,0.836864896798511,0.7562665659396439,0.6653381349930433,0.5677449271703222,0.46742092270411517,0.3684101801845145,0.2747038206390756,0.19007914552502514,0.11794737378394937,0.0612161356751848,0.022172266259008033,0.002389623121572093,0.0026656442074653453,0.02298920311229624,0.06254105758785017,0.11972687318048725,0.19224149082078557,0.2771618477389174,0.37106480606578995,0.47016513945127786,0.5704681154617927,0.6679305231639208,0.7586236548752008,0.8388916722914377,0.9054989732547475,0.9557606188110179,0.9876505630448693,0.9998833229494953,0.9919657962206607,0.9642171382005943,0.9177558967326342,0.8544549235202423,0.7768658795127726,0.688116377504266,0.5917839081248943,0.4917516312661765,0.39205184598419385,0.2967034486063943,0.20954993110175812,0.13410444999743837,0.07340821111021634,0.02990787860148053,0.005356949994484772,0.0007450727246079425,0.01625815147128823,0.051270854344129924,0.1043718199987852,0.17342054958415531,0.2556336902077848,0.34769723183463463,0.44590009496453864,0.5462837241717655,0.644801657394119,0.737482638736844,0.8205906997173177,0.8907757560789918,0.9452086496200829,0.9816951915033293,0.9987646099636964,0.9957288370884182,0.9727102448206796,0.9306367121490217,0.871204222324147,0.796808497808319,0.7104484287514559,0.6156051877898315,0.5161019040475526,0.41594955287893665,0.319185273533081,0.2297096321524928,0.15112939003081016,0.08661211513793132,0.03875849751935884,0.009497515533027967,8.678770741510355e-6,0.010674482050387346,0.04106498705758327,0.08995515315039337,0.1553742187228761,0.23468514256548723,0.32469090294290714,0.42176336947549703,0.5219895530014768,0.6213293380909309,0.7157783400169014,0.8015293214228347,0.8751256619833656,0.9336006946996336,0.9745972921860288,0.9964628824273971,0.9983160639235436,0.9800821349658471,0.9424961048616589,0.8870730657239525,0.8160471191389435,0.7322813195763359,0.6391522647215827,0.5404139848915213,0.4400466181481908,0.3420959710142386,0.25051043209366086,0.16898181260721978,0.10079652955676516,0.048703130322400756,0.014801498773210353,0.00045820899096660206,0.006251438696580014,0.03194766291782897,0.07651106737629915,0.13814530213996257,0.21436589245260207,0.3021003878609614,0.39781221263033384,0.49764322504093883,0.5975692390024288,0.6935622389139594,0.7817527488914152,0.8585858112620156,0.9209642868362753,0.9663737005259442,0.99298359978402,0.9997213401098191,0.986315323327148,0.9533059457012554,0.9020238145763302,0.8345361116203764,0.7535632647740036,0.6623692878551856,0.5646302082283026,0.46428588621547734,0.3653811994066534,0.27190299372586,0.1876193737526909,0.11592781050283368,0.059718189440303604,0.02125631925276672,0.002092597149267017,0.002999512380026048,0.02394050721045088,0.06407145056263391,0.12177466492207034,0.19472413488548168,0.27997926879473445,0.3741034339269643,0.473302487090195,0.5735777164586366,0.670887029565401,0.7613078899681094,0.8411954346135029,0.9073293981933688,0.9570439219739564,0.9883350145075901,0.9999413324873913,0.9913950254704278,0.9630405949196355,0.9160210073567857,0.8522316214051564,0.7742437859217142,0.6852011889768221,0.5886931358516462,0.4886098642148784,0.3889857287211689,0.2938365762564339,0.20699786723129476,0.13197006824946172,0.07177754836978134,0.028846666850673663,0.004907966657499208,0.0009264163106777468,0.017062512024124454,0.05266580810613031,0.10630113641202532,0.17580645794305527,0.25838001459467386,0.35069326796903266,0.44902507269051645,0.549411675700392,0.6478064950625938,0.7402432375995492,0.8229957800899201,0.89272836922037,0.946630085734,0.9825281525288105,0.9989755192586444,0.9953091929034283,0.9716769630043534,0.9290314442704768,0.8690916766990724,0.794273831108135,0.7075938133395379,0.6125456931556854,0.5129608583579892,0.41285357162211833,0.3162591556508405,0.227071329397468,0.14888525233364935,0.08485260364381919,0.03755453810100551,0.008897639770236943,3.706764336769419e-5,0.011329991203555434,0.04232119293058101,0.09176141810991245,0.15765773226493013,0.23735385630542094,0.32763724108385206,0.4248685651865939,0.5251284359064692,0.6243753798834031,0.7186087548138465,0.8040300152610695,0.8771958319448574,0.9351568922751221,0.9755767870827299,0.9968261912258527,0.9980485416534333,0.9791945654444723,0.9410242659984585,0.8850762873137334,0.8136058912790015,0.7294940481123185,0.6361313045098205,0.5372811107769834,0.4369281162230992,0.3391175480280523,0.24779214821671391,0.16663324180756622,0.09891234267583032,0.04735927889523661,0.014052153423642466,0.0003335758148805823,0.0067565416547785695,0.03306214132029239,0.07818999662117221,0.1403210046233559,0.21695066565142151,0.3049900396198726,0.40089026114543214,0.5007855942388072,0.6006492600443256,0.6964557562139797,0.7843431248257564,0.860768627829188,0.9226515547446037,0.9674974060402042,0.9934984463576488,0.9996065742878614,0.9855755713175613,0.9519710268925786,0.9001475395187304,0.8321941129234716,0.7508499483578692,0.6593940274496416,0.5615129365201214,0.46115226036411333,0.3623575358067834,0.26911117619602665,0.18517194040100732,0.11392341731820665,0.05823763347142413,0.020359281680809083,0.0018152375405914856,0.003353011094850311,0.024910614722728708,0.06561906185818306,0.12383739582086783,0.19721883674676388,0.28280538023691937,0.37714703445499853,0.47644088922840455,0.576684411280319,0.6738367862651549,0.763981803913053,0.8434857203866091,0.9091437344214858,0.9583091728004239,0.9890001776972055,0.9999795953254342,0.9908048455826737,0.9618457624454129,0.9142696859689649,0.8499944068334184,0.7716108602402179,0.6822786853664936,0.58559886037387,0.4854685470515816,0.3859239963036148,0.2909778469564501,0.20445737636909495,0.1298502229603098,0.07016379957439728,0.02780406473033259,0.004478538482583394,0.0011274723222281513,0.017885947658385304,0.05407843068934509,0.10824600315644767,0.17820517130955899,0.26113588249599956,0.3536952014258673,0.4521520638259028,0.5525376755649754,0.6508054946650568,0.7429943473266121,0.8253881027641619,0.8946654703631771,0.9480338808375244,0.9833420546408089,0.999166720001464,0.9948699849789913,0.9706250508752066,0.9274092304932618,0.8669645526783348,0.7917275411700915,0.7047309983800791,0.6094817531879148,0.5098193007399846,0.4097610324779093,0.3133402951707557,0.22444380678839942,0.1466549829788134,0.08310948965575438,0.03636884436933152,0.008317161585267852,8.520406899925614e-5,0.012004801861442038,0.04359547621676296,0.09358380769089625,0.15995476765360717,0.24003294405171105,0.3305903872149317,0.4279767284416872,0.5282663262876406,0.6274165090928795,0.7214305349947153,0.8065187005113497,0.8792511034124753,0.9366959020087864,0.9765374976312302,0.9971698763664112,0.9977613474449892,0.9782880686797547,0.939535007543719,0.8830642991471269,0.8111522766028487,0.7266977120845506,0.6331049673791221,0.534146764131885,0.43381210551341653,0.336145479582471,0.2450838260541,0.164297838339532,0.09704399796891383,0.046033305886753084,0.013322002058742621,0.0002286784803096631,0.007281126759970613,0.03419506285026641,0.07988558653198863,0.14251091372000307,0.2195466187425436,0.3078873938888962,0.4039722243003584,0.5039279324072617,0.6037253056382922,0.6993415138978465,0.7869222697656377,0.8629371947447466,0.9243221287473719,0.9686026463259174,0.9939938007127636,0.9994720749883415,0.9848166400274476,0.9506182561168202,0.8982554594199346,0.8298389932121197,0.7481267238618812,0.6564124712933621,0.5583932351718551,0.4580201689221126,0.3593393088136727,0.26632847832085427,0.18273694213880287,0.1119342733996318,0.05677452624762358,0.019481188974347696,0.001557555250707221,0.003726126389432316,0.02589948733180303,0.06718383034687969,0.1259149844030828,0.1997254978687676,0.28564007043961304,0.3801954874336823,0.47958022190517735,0.5797880772185012,0.6767796767535647,0.7666452910956629,0.845762439149002,0.9109419102763759,0.9595563213155114,0.9896460263410709,0.9999981099523171,0.990195279868336,0.9606326879714712,0.9125020017428997,0.8477433681706465,0.7689672064636601,0.6793489821064016,0.5825012039093784,0.4823278038520963,0.38286676966397093,0.2881273736206049,0.20192855885955358,0.12774499785972337,0.06856702846395468,0.026780113421196294,0.004068682431306092,0.0013482328179426628,0.018728425849974528,0.05550866629795925,0.11020634341363011,0.18061659493922555,0.2639011850604097,0.3567029136346138,0.4552809448607231,0.555661600294638,0.6537985377469595,0.7457358592546317,0.8277675732479787,0.8965869829957432,0.9494199794834839,0.9841368656918019,0.9993382046401,0.9944112306629582,0.9695545499817005,0.9257701348916471,0.8648229342791323,0.7891697285676471,0.7018600969486555,0.6064134889060976,0.5066773552789178,0.4066720575955265,0.3104288073820909,0.22182716810728875,0.1444386700575273,0.08138284202334439,0.03520146315689776,0.007756103905873113,0.00015308614634285123,0.012698887370361733,0.044887786584432765,0.09542224991255538,0.16226523416048333,0.24272229998568245,0.33355022469270595,0.43108773647442444,0.5314031002044893,0.6304526056007073,0.7242435691047509,0.8089952788755337,0.8812913952070274,0.9382176631127808,0.9774793858853428,0.9974939242741849,0.9974544926418158,0.9773626804765427,0.9380283883202019,0.8810371806937465,0.8086863720234192,0.7238924219427957,0.6300733728638688,0.5310110687567146,0.43069870909546865,0.3331798830683291,0.24238557257926963,0.16197569444697368,0.095191569231942,0.044725263670283566,0.012611073518054405,0.00014352113049331816,0.007825173292073495,0.03534638275958796,0.08159777013628,0.1447149429328195,0.22215364919090097,0.31079233622818186,0.4070579803636542,0.5070701154301077,0.6067972542866023,0.7022193979837651,0.7894900818398808,0.8650914263545717,0.9259759428601829,0.9696893777282758,0.9944696432838386,0.9993178475237163,0.9840385594331009,0.9492476868057724,0.8963476490133786,0.8274708455089304,0.7453936988480779,0.6534247371519273,0.5552712274056026,0.4548897356008875,0.35632663764136807,0.26355501001143894,0.18031447514370008,0.10996045731441068,0.05532892555874108,0.0186220758163263,0.0013195604575569342,0.004118843526449589,0.02690708597914543,0.06876569422345868,0.12800734860805052,0.2022440192433172,0.2884832274381375,0.38324867245510186,0.48272036112302963,0.5828885916844799,0.6797155847922678,0.7692982463134437,0.8480255009747243,0.9127238547336521,0.9607853182592985,0.9902725349294403,0.9999968756367484,0.9895663524040678,0.959401419411851,0.9107180244986744,0.8454785943284227,0.7663129290111803,0.6764121949140923,0.5794002888095127,0.4791877586696047,0.3798141695566659,0.28528526883700434,0.19941151458601397,0.12565447609993657,0.06698729810777382,0.025774853367337702,0.0036784146921772787,0.0015886890782180196,0.019589913322667296,0.0569564584404777,0.1121820797540038,0.18304063358554012,0.26667581306391425,0.3597162857965796,0.45841159221031313,0.5587833265005221,0.6567855060889165,0.7484676650992885,0.830134097556996,0.8984928312220881,0.9507883269237196,0.9849125542883118,0.999489966401248,0.9939329480752229,0.9684655026065212,0.9241142222066792,0.8626669060911913,0.7866004943293831,0.6989812224402042,0.6033410215006413,0.5035351460754437,0.40358676898341944,0.3075248072828509,0.21922151670619644,0.14223640110982488,0.07967272894576838,0.03405244057297785,0.0072144888927206385,0.00024071119418855869,0.013412220315298373,0.04619807298988293,0.0972766721600194,0.1645890405267047,0.24542181788306255,0.33651663660937253,0.4342014664060898,0.5345386337605835,0.6334835494870701,0.7270477460346352,0.8114596525335775,0.883316626741008,0.9397221154805264,0.9784024146423418,0.9977983221499189,0.9971279893640733,0.9764184373858471,0.936504467836432,0.878995012020768,0.8062082749391076,0.7210782884904869,0.6270366407061119,0.5278741485053037,0.4275880499422515,0.33022087562087254,0.23969749436790622,0.15966690184998916,0.09335512963222514,0.04343520391092426,0.01191939588186075,7.810712897893257e-5,0.00838865976231612,0.03651605557337345,0.08332647980615199,0.14693300520698405,0.2247716540239274,0.31370475189824376,0.410147407454049,0.5102120191972783,0.609864984653323,0.7050892948009453,0.7920464596249681,0.8672312375707685,0.9276129317606232,0.9707575573235345,0.9949259552760257,0.9991438979856694,0.9832413602671786,0.9478593730942102,0.8944241836538058,0.8250897633510934,0.7426509812655382,0.6504309430349895,0.552147036534491,0.4517610840464572,0.35331964128444476,0.26079088081430174,0.17790463509840526,0.10800204702439842,0.053900888503162325,0.017781976140021805,0.001101262561465144,0.004531146994352642,0.027933370866585372,0.07036459100740677,0.13011440579145045,0.20477430139381492,0.2913347389334061,0.386306468924437,0.4858611828526778,0.5859858322140148,0.6826443944186418,0.7719405647799028,0.850274816477324,0.9144894974099791,0.9619961150888163,0.9908796787164506,0.9999758924274813,0.9889180880312587,0.9581520053992624,0.9089178246998673,0.843200174760841,0.7636481327215321,0.6734684397868467,0.5762962375543091,0.47604853552979004,0.37676631655337567,0.2824516448632134,0.19690634296672005,0.12357874025244958,0.06542467090213361,0.024788324274530094,0.0033077506800003875,0.0018488316055002563,0.02047037604940216,0.05842174993195026,0.11417313413984931,0.18547719150377429,0.2694596569141111,0.36273519888951533,0.4615438822202426,0.5619027308805511,0.659766281711631,0.7511896569596215,0.8324875822180918,0.9003829397649445,0.9521388691112096,0.9856690897921605,0.9996219992906163,0.9934351561070143,0.967357951764894,0.9224415578436387,0.8604965532733968,0.7840199399349663,0.696094488564635,0.6002644723280381,0.5003927972406206,0.4005052885043814,0.3046284095753835,0.21662695550325417,0.14004826312101987,0.0779792179691004,0.03292182200168969,0.006692337938548565,0.0003480757515197941,0.014144772520999493,0.047526283679364345,0.09914700118728015,0.1669260949664882,0.24813139111813987,0.3394895057975592,0.4373177952504859,0.5376728031085825,0.6365092210356424,0.7298429550248291,0.8139117241476554,0.885326718021771,0.9412091996891057,0.9793065474444054,0.9980830579704939,0.9967818505080019,0.9754553767034051,0.934963306284259,0.876937873789821,0.8037180832298885,0.7182554228803893,0.6239948908507332,0.5247361272797932,0.4244802509187431,0.3272685741150921,0.23701969759379077,0.1573715517413683,0.09153475170549258,0.04216317756350535,0.011246996470065274,3.2439059490685374e-5,0.008971563914092928,0.03770403509186204,0.08507164726099442,0.14916501293334683,0.22740052983560233,0.3166245258644146,0.41324038354519005,0.5133535196097937,0.6129283755690659,0.7079510909941955,0.7945913021490256,0.8693565438749618,0.9292330307908712,0.9718071429206803,0.9953627186659002,0.9989502332448627,0.9824250740174698,0.9464533698178212,0.8924851393143514,0.8226958407866625,0.7398986794462643,0.6474312071914904,0.5490207859579748,0.44863433783437945,0.3503184385133207,0.2580361999071623,0.17550751718683022,0.1060591198829251,0.05249047148557584,0.01696092312771258,0.0009026701847736351,0.004963020507957605,0.028978301457901312,0.0719804575454076,0.13223607272874205,0.20731624437905577,0.29419449229626893,0.3893687560647795,0.48900256303778095,0.5890796764722073,0.6855659899505031,0.7745721421286076,0.8525102968131991,0.9162387685659579,0.963188663979976,0.9914674337211236,0.999935161153311,0.9882505123550951,0.9568844952830915,0.9071014734508148,0.8409081994610366,0.7609729228488944,0.6705178329972856,0.5731891727477608,0.4729102584256816,0.3737233310383575,0.2796266136217702,0.19441314295108286,0.12151787230479444,0.06387920856768042,0.023820565108747194,0.002956705035281948,0.0021286501246729483,0.021369779253611998,0.059904482896249944,0.11617942792845959,0.187926172454636,0.2722526066546658,0.3657595336722337,0.4646776911712277,0.5650196902244262,0.6627407468802848,0.7539017273222419,0.8348279342733336,0.9022572339687496,0.953471552702168,0.9864064423216929,0.9997342980931629,0.9929178744201207,0.96623194120289,0.9207522078695103,0.8583119615503889,0.7814281673112692,0.6932000093422482,0.5971839629058214,0.49725043289110704,0.39742773787088953,0.30173972866167825,0.2140435869785174,0.13787434251819225,0.0763023759837183,0.03180965210026465,0.006189671667288177,0.00047517557764886753,0.014896515053096193,0.04887236619118396,0.10103316311998395,0.1692763051707244,0.25085091266819604,0.34246871483471,0.44043659991877776,0.5408054844549154,0.6395295007382779,0.732629085670173,0.8163513968657141,0.8873215896546256,0.9426788570016353,0.9801917485800451,0.9983481204894062,0.9964160897454015,0.9744735364682379,0.9334049645365207,0.8748658472538591,0.8012158952534282,0.7154239366101067,0.6209482434409139,0.5215971290259097,0.42137543477686723,0.3243230951610802,0.23435228802468033,0.15508973478289712,0.08973050735312688,0.040909234870561195,0.010593901841117137,6.518725828408289e-6,0.009573862723841475,0.03891027439218758,0.0868332035700759,0.15141087795207092,0.23004017279045147,0.3195515428013096,0.4163367864706578,0.5164944925844779,0.6159873060360228,0.7108046735281396,0.7971245088957302,0.8714672613217496,0.9308361759601704,0.9728380930631548,0.9957799162021708,0.9987368609506743,0.9815897329256992,0.9450297325109585,0.8905305925834379,0.8202891723708513,0.7371369021007179,0.6444256481051804,0.5458925991567777,0.4455096204649548,0.34732314786965984,0.25529107609445145,0.1731232160904636,0.10413175263184599,0.051097730214630044,0.016158949209393425,0.0007237911714872425,0.005414447009113255,0.030041836480360296,0.0736132300139678,0.13437226561821414,0.2098697477972657,0.2970623745721154,0.39243541292175194,0.49214437760002544,0.5921700022583192,0.688480255990519,0.7771928744174497,0.8547318536853521,0.9179715991088169,0.964362917829451,0.9920357767282865,0.9998746834230442,0.9875636517434796,0.9555989391274847,0.9052690424938539,0.8386027589574867,0.7582874050588707,0.66756049108847,0.5700792171127074,0.4697730513131409,0.3706853332035023,0.2768102866959065,0.19193201301557922,0.11947195365712943,0.06235097214716678,0.02287161409458205,0.002625291623631343,0.002428133583454728,0.022288087410670787,0.06140459876835308,0.11820088187513755,0.1903874797082138,0.2750545519695791,0.36878917068948336,0.46781289528400355,0.5681340814183526,0.6657087841092975,0.7566037690657996,0.837155061283352,0.9041156398025831,0.9547863250582367,0.9871245827529138,0.9998268583733099,0.9923811234461607,0.9650875153957331,0.9190462390102665,0.856113217209286,0.7788252788281923,0.6902978990992571,0.5940996149081412,0.4941081771440608,0.3943542386401161,0.29885887863895255,0.21147151316994117,0.13571472516697208,0.07464226922159911,0.03071597479721727,0.0057065099332647695,0.000622005652380131,0.01566741821924328,0.050236267357704256,0.10293508345845909,0.17163957831081533,0.2535802751174022,0.3454541460479782,0.44355775722428364,0.5439365540647708,0.6425442692999745,0.7354060279239332,0.8187785743254551,0.8893011628460998,0.9441310293695011,0.9810579830855886,0.9985934992372096,0.9960307215231095,0.9734729554610959,0.9318295041446807,0.8727790142538385,0.79870180984121,0.7125839415178064,0.617896818813293,0.5184572777278851,0.4182737241507583,0.32138455509943886,0.23169537101796106,0.1528215411019217,0.08794246783921666,0.039673425360352066,0.009960137790982204,3.4715179375588434e-7,0.010195532401931717,0.04013472583024663,0.0886110791554488,0.15367051155584233,0.23269047862781478,0.32248568709753994,0.41943649392853954,0.5196348140591865,0.6190416552323981,0.7136499296918515,0.7996459798084179,0.8735633065419612,0.9324223039474533,0.9738503670304635,0.9961775314063472,0.9985037895308948,0.9807353699861674,0.9435885174044969,0.8885606206618011,0.8178698531623528,0.7343657583137502,0.6414143844896265,0.5427625996881009,0.44238705535843337,0.34433388766150036,0.2525556178032379,0.17075182598449,0.10222002139830899,0.049722719700905416,0.01537608606144314,0.0005646325869785862,0.0058854086673602035,0.03112393392645829,0.07526284392175547,0.1365229000844273,0.21243471079010212,0.2999382724852333,0.3955063183684645,0.4952865024439406,0.5952566875105009,0.6913870774309361,0.7798026581326791,0.856939399346593,0.9196879205951713,0.965518830256512,0.992584685289498,0.99979446162543,0.9868575333260746,0.9542953877094063,0.9034206042063719,0.8362839443106221,0.7555916854240377,0.6645965308696452,0.5669664934863672,0.4666370381056251,0.3676524430438074,0.274002775324974,0.18946305115994194,0.11744106511927488,0.0608400220029407,0.02194150871372552,0.0023135235352269024,0.002747270152840653,0.02322526424919541,0.06292203829660448,0.12023741613644418,0.19286101604773204,0.27786538218746865,0.37182399027658514,0.4709493707240859,0.5712457814499441,0.6686702761671401,0.7592956754648843,0.839468871331247,0.9059580838630511,0.9560831342484568,0.987823482720714,0.9998996764751059,0.9918249243857477,0.963924719545983,0.9173237186483701,0.8539004070961476,0.7762113772946901,0.6873882724633635,0.5910115501606522,0.4909661541124637,0.39128491220923894,0.29598597329509335,0.20891083566940832,0.13356949636803805,0.07299896325368127,0.029640833290651147,0.00524287182042571,0.0007885601762169236,0.016457451570259962,0.05161793330752246,0.10485268708060846,0.17401582104205376,0.25631937066135646,0.34844568151864574,0.446681143887369,0.5470658882671673,0.6455534076432188,0.738173672102324,0.8211931606581623,0.8912653594068909,0.9455656594348019,0.981905216746459,0.9988191845219214,0.9956257610624102,0.9724536732029528,0.9302369873363134,0.8706774572155414,0.796175926294711,0.7097355497777631,0.614840737493034,0.5153166974036734,0.4151752415518606,0.31845306999675055,0.22904905151670368,0.15056706028755162,0.08617070378779185,0.03845579784494668,0.00934572935208311,1.3924581151791848e-5,0.0108365483936389,0.041377341042658666,0.09040520379447448,0.15594382449361655,0.23535134266577368,0.32542684286017387,0.4225393834865962,0.5227743599973379,0.622091302517375,0.7164867471033316,0.8021556152939446,0.8756445967458928,0.9339913521037961,0.9748439248397558,0.9965555485734143,0.9982510281913788,0.9798620189445542,0.9421297814235869,0.8865753013594767,0.815437978719564,0.7315853575399929,0.6383975352839037,0.5396309111808271,0.43926676584994206,0.34135077595882524,0.2498299330786477,0.16839344053413569,0.10032400169199185,0.048365494254589414,0.014612364605431305,0.00042520071769724943,0.006375886880643333,0.03222455105545413,0.07692923411224889,0.1386878911815672,0.21501103204656913,0.3028220724433346,0.39858135111021653,0.4984288134617151,0.5983396103107805,0.6942863394580479,0.7824013901929221,0.8591328466032477,0.9213876652336807,0.9666563556048697,0.993114137723969,0.9996944989290737,0.9861321849931568,0.952973892516563,0.901556231598098,0.8339518471089793,0.7528858704200699,0.6616260694114402,0.5638511248151765,0.46350234266954793,0.3646247803524447,0.2712041904001276,0.1870063549033555,0.11542528690731724,0.0593464178145488,0.02103028570351173,0.0020214130842927114,0.0030860472275608952,0.024181272752525573,0.06445674154513925,0.12228895027329822,0.19534668377332304,0.28068498628611704,0.37486387256404885,0.47408699360697387,0.5743546674132788,0.671625106080618,0.7619773401945333,0.8417692730260284,0.907784493377202,0.9573619290514616,0.9885031146199053,0.9999527495223787,0.9912492992076465,0.9627435995817898,0.9155847148199271,0.8516736186126027,0.7735865659547824,0.6844712443590739,0.5879198906358135,0.4878244879000205,0.3882198798105907,0.2931211261042401,0.20636165561869224,0.131438740853633,0.07137252298732011,0.028584270046532745,0.004798775641556785,0.0009748325705782879,0.017266583901410504,0.053017309467562335,0.10678589824482376,0.17640493950756592,0.2590680911111196,0.35144320308696914,0.44980663654051367,0.5501933634594707,0.6485567969130159,0.7409319088888666,0.8235950604924221,0.8932141017551665,0.9469826905324434,0.9827334160985854,0.999025167429419,0.9952012243584415,0.9714157299534725,0.9286274770126879,0.8685612591463776,0.7936383443813435,0.7068788738957483,0.6117801201894246,0.5121755120999952,0.41208010936417394,0.31552875564096705,0.22641343404523073,0.14832638138738824,0.08441528518008162,0.03725640041821615,0.008750700792361787,4.725047762110801e-5,0.011496885380097466,0.042638070948532114,0.09221550662278888,0.15823072697396018,0.2380226598054534,0.32837489391936725,0.4256453325867338,0.5259130063930104,0.6251361274359085,0.7193150137138689,0.8046533162266645,0.8777110497267102,0.9355432584548391,0.9758187272474609,0.9969139527724404,0.9979785869157087,0.9789697142964928,0.9406535821854451,0.8845747130927109,0.8129936450966567,0.7287958095998863,0.6353752196475704,0.5364976573304677,0.4361488751848672,0.33837393058857457,0.24711412957991907,0.16604815289103247,0.09844376840192831,0.04702610748344366,0.013867815006846862,0.0003055010709268613,0.006885862276028498,0.03334364439511439,0.07861233476632623,0.14086715339674127,0.21759860980706497,0.3057136605419639,0.4016603896891762,0.5015711865382693,0.6014186488897959,0.697177927556651,0.784988967953418,0.8613121088184024,0.9230707658877427,0.9677754489445505,0.9936241131193542,0.9995747992823034,0.9853876353945725,0.9516345057454173,0.8996759983080176,0.8316065594658548,0.7501700669213659,0.6586492240412166,0.5607332341500735,0.46036908881918853,0.36160246471611135,0.268414642460021,0.18456202128047022,0.11342469864051524,0.057870218576420385,0.020137981055450282,0.0017489718086201589,0.0034444514265804527,0.025156075160239322,0.06600864789619598,0.12435540325409694,0.19784438470604288,0.28351325289662865,0.3779086974826098,0.47722564000267487,0.5774606165133883,0.6745731571398114,0.764648657334213,0.844056175506372,0.9095947962055165,0.958622658957335,0.9891634516063579,0.9999860754188479,0.9906542706479199,0.9615442021550593,0.913829296212201,0.8494329397124596,0.7709509484833333,0.6815469300032375,0.5848247584481548,0.4846833025963423,0.3851592625069813,0.29026445022227687,0.2038240737053016,0.12932254278446914,0.0697630126636945,0.027546326797042997,0.004374238937595698,0.0011808154780774127,0.0180947832535443,0.054434340565191086,0.1087346405930994,0.1788068393418039,0.26182632789766214,0.3544465923567662,0.45293411173281706,0.5533188561126153,0.6515543184813394,0.7436806293386298,0.8259841789579343,0.8951473129193994,0.9483820666924706,0.9835425484297289,0.9992114398237821,0.9947571281795765,0.9703591667093542,0.9270010367463417,0.8664305036319919,0.7910891643305813,0.704014026704921,0.6087150877907763,0.509033845887552,0.4089884498393912,0.31261172753665095,0.2237886227053229,0.14609959290386354,0.08267628135165411,0.036075280454033465,0.008175075614255178,0.00010032352489436347,0.01217651727928265,0.04391686575152509,0.09404191613695634,0.16053112866874142,0.24070432453510238,0.3313297238328451,0.4287542185500123,0.5290506292758701,0.6281760097233997,0.7221346178125173,0.807138983952278,0.8797625838635271,0.9370779617033879,0.9767747357508085,0.9972527298471577,0.9976864764647746,0.9780584912862874,0.9391599779970667,0.8825589348807352,0.8105369488400703,0.7259972246750399,0.6323475569562077,0.5333629618943905,0.4330335065136483,0.33540346913034275,0.24440831457597584,0.1637160556894105,0.09657939579362057,0.045704612290600355,0.013142466673928932,0.00020553837457049084,0.007415314710494392,0.034481169743492635,0.08031207940482016,0.143060600653396,0.22019734186733153,0.3086129225690232,0.4047433124894838,0.5047134975560721,0.6044936816315202,0.7000617275147524,0.7875652892098618,0.8634770999155619,0.9247371560782512,0.9688760660735363,0.9941145913326374,0.9994353674130221,0.9846239139385606,0.9502772802991013,0.8977799786016833,0.8292481740155218,0.7474443821968004,0.6556661123385146,0.5576129446415822,0.4572374003118864,0.3585856155103885,0.2656342416862888,0.18213014683763734,0.11143937933820885,0.05641148259551032,0.019264630013829054,0.0014962104691085831,0.003822468593650874,0.0261496329695316,0.06757769605253883,0.12643669345804726,0.2003540201915468,0.28635007030813436,0.3809583447676143,0.48036518594079775,0.5805635060714449,0.6775143129024455,0.767309521372172,0.8463294884441463,0.9113889208445423,0.9598652741697472,0.9898044675980651,0.9999996528482062,0.990039862209021,0.960326574639643,0.9120575321608083,0.8471784588981099,0.7683046289820282,0.6786154449005758,0.5817262758492572,0.481542722272159,0.3821031811867499,0.28741605848218205,0.20129819015880263,0.12722098574617197,0.06817049585532725,0.026527044538918243,0.0039692784768924905,0.0014065007627913073,0.018942016914407223,0.055868970630478576,0.11069883715389028,0.18122142567453287,0.26459397207607815,0.35745573070001047,0.4560634459351853,0.5564422427757291,0.6545458539520068,0.7464197248825841,0.8283604216891942,0.8970649165415141,0.9497637326422889,0.9843325817807529,0.9993779943476191,0.9942934900667333,0.9692840252027979,0.9253577307784091,0.8642852748330192,0.7885284868300716,0.7011411213610618,0.6056457613598992,0.5058918228559549,0.4059003850918742,0.30970210090075745,0.22117472117182074,0.14388678279072498,0.080953760989742,0.0349124846042726,0.007618876553837084,0.0001731416266896879,0.012875417247076248,0.04521367494176859,0.09588436019740765,0.16284493871663636,0.24339623093418689,0.334291215890661,0.43186591858166,0.5321871047159807,0.6312108293105015,0.7249454480304323,0.8096125202917516,0.8817991181248523,0.9385954012316531,0.9777119125893245,0.9975718664165437,0.9973747083763731,0.9771283859054226,0.9376490278528271,0.8805280463428807,0.8080679869844332,0.7231897133041075,0.6293146667965128,0.5302269486868748,0.42992078288728,0.3324395089115448,0.24171259494116704,0.16139724104252484,0.09473095750615529,0.04440106087251,0.0124363482565239,0.0001253165769568021,0.007964223271715809,0.03563708217054312,0.08202840089117452,0.1452681463146569,0.22280712558251364,0.31151974400946647,0.4078299977416654,0.5078556223999589,0.6075645870782604,0.7029376254278443,0.7901302522027216,0.8656277343817946,0.926386769986024,0.9699581635196344,0.9945855529908845,0.9992762088285136,0.9838410507906106,0.9489022697853768,0.8958682473681809,0.8268767839095482,0.7447089239055622,0.6526768521303551,0.5544903795350326,0.45410740084326623,0.35557435189486175,0.26286309789927087,0.17971082762916074,0.10946940741657185,0.0549702674890617,0.018410267074312647,0.0012631390493247907,0.004220083797827179,0.027161906936840008,0.06916382403982158,0.12853273867822085,0.20287549110425723,0.28919532647187196,0.3840126939639619,0.48350550741547804,0.5836632135293267,0.6804484571986757,0.7699598272095354,0.8485891220479178,0.9131667964298993,0.9610897256078174,0.9904261372761555,0.9999934812741718,0.9894060981588803,0.9590907651294562,0.9102694926468821,0.8449102652171142,0.7656477119753329,0.6756769048389345,0.5786245652231763,0.47840287097410594,0.37905175655907364,0.2845760633899074,0.19878410474658437,0.12513415274615125,0.06659503546348716,0.025526463531767074,0.00358391025460042,0.00165187951059248,0.01980825141994258,0.05732114299835739,0.11267841034536458,0.18364860313429582,0.2673709143298131,0.3604704992616798,0.45919451554509727,0.5595634000812066,0.6575312851652751,0.7491490873317903,0.8307236948292425,0.8989668368800066,0.9511276338088093,0.9851034849469,0.9995248244223517,0.9938103283327188,0.9681903478997409,0.9236976240162749,0.8621256574818186,0.7859564130214954,0.6982602713383622,0.6025722621291258,0.5027495671089086,0.4028160370941939,0.3067999906577662,0.21857183268874375,0.14168803844962197,0.0792477921304981,0.03376805879710537,0.007082125579881915,0.0002657019068356137,0.013593557678303503,0.046528447297825404,0.09774276603124116,0.16517206572665477,0.24609827267772016,0.33725925311972726,0.43498030977555824,0.5353223088287566,0.6342404663277785,0.727747393345295,0.8120738275453518,0.8838205720715304,0.9400955171037426,0.9786302207463835,0.997871349875323,0.9970432949647198,0.9761794348912489,0.9361207914323273,0.8784821276952157,0.8055868570489295,0.7203733863782439,0.6262766689616577,0.5270897415743341,0.4268108272522828,0.3294821670027559,0.23902707715111904,0.15909180053897498,0.09289852654917774,0.04311550471692638,0.011749487644914458,6.483884668873063e-5,0.008532566278873555,0.03681133602001807,0.08376123143401765,0.14748970318676963,0.22542785787137937,0.3144340100494823,0.41092032352777724,0.5109974369622033,0.6106312439352052,0.7058055077037169,0.7926837556209545,0.8677639272712474,0.9280195424545696,0.971021698542103,0.9950369794920402,0.9990973298152273,0.9830390768722914,0.9475095285144439,0.893940880117067,0.8244924828131817,0.7419638000928515,0.6496815614866671,0.5513656621656644,0.4509792140420409,0.35256879280849746,0.26010132055374946,0.17730415921334947,0.1075148606856759,0.05354663018218586,0.0175749259825268,0.0010497667551383483,0.0046372813340976315,0.028192857079314515,0.07076696920912084,0.1306434561250277,0.2054086978509846,0.2920489090057903,0.38707162443089116,0.48664648039019065,0.5867596164547945,0.6833754741355973,0.7725994701643846,0.8508349870666218,0.9149283527390126,0.962295964908132,0.9910284360859041,0.9999675609405092,0.9887530035299441,0.9578368224365009,0.9084652482945165,0.8426284482586431,0.7629803024061984,0.6727314258849493,0.5755197490812725,0.475263872720194,0.3760051091492819,0.28174457711962475,0.1962819167701239,0.1230621262101892,0.06503669371574872,0.024544623296599677,0.0032181494919997777,0.0019169420295047646,0.02069345255559024,0.058790800310887015,0.11467328197823717,0.1860882758523324,0.2701570449751318,0.3634907789643698,0.46232719689140195,0.5626822047494986,0.6605104942024259,0.751868608881822,0.8330739050335213,0.9008529988127105,0.9524737163206289,0.9858552274790036,0.9996519242484785,0.993307662061454,0.9670781779983058,0.922020782030908,0.859951736878991,0.7833730444967821,0.6953715904246309,0.5994947114956061,0.4996072027593951,0.399735527672005,0.3039055114353794,0.2159800600650466,0.13950344672661408,0.07755844215635449,0.03264204823512162,0.006564843892992778,0.00037800070938304176,0.014330910207835779,0.04786113088879579,0.09961706023502903,0.1675124177818752,0.24881034304038951,0.3402337182883542,0.4380972691194334,0.5384561177797418,0.6372648011104696,0.730540343085875,0.8145228084962135,0.8858268658601407,0.9415782500680424,0.9795296239505934,0.9981511683944984,0.9966922493199981,0.9752116757254747,0.9345753290978882,0.876421259747542,0.8030936570332925,0.7175483551368007,0.6232336834466395,0.523951464470254,0.4237037624456502,0.32653156021314134,0.23635186727848118,0.15679982523917046,0.09108217530015816,0.04184799460073252,0.011081911968738645,2.4107572518805576e-5,0.009120321283541066,0.038003884911166796,0.08551050259002807,0.1497251835226852,0.22805943522008404,0.31735560558131726,0.41401416778599776,0.5141388171473349,0.6136935310755478,0.7086652610665796,0.7952256986061494,0.8698855942085391,0.9296354089925998,0.9720666291334095,0.9954688530056452,0.9988987374385377,0.9822180238599824,0.9460991114968319,0.8919979529756112,0.8220953649016285,0.7392091191856871,0.6466803587155703,0.5482389159535583,0.44785296346552456,0.3495690569650526,0.2573490187344507,0.17491023664891858,0.10557581634620389,0.052140626905796794,0.016758639732832703,0.0008561020143315612,0.00507404472397216,0.029242442676460145,0.07238706823935398,0.13276876242920155,0.20795354037501906,0.29491070519901447,0.3901350153466618,0.48978798080267766,0.5898525925459636,0.6862952481017417,0.7752283459760358,0.8530669947930452,0.9166735201938236,0.9634839444266207,0.991611340237681,0.9999218928710218,0.9880806041181365,0.9565647960890937,0.9066448703677841,0.8403330981500223,0.7603025056321315,0.6697791243791155,0.5724119500577921,0.4721258514947119,0.37296335929393076,0.27892171150950157,0.19379172506088232,0.12100498797927928,0.06349553216357567,0.023581562614166218,0.0028720106359253483,0.0022016778500822953,0.021597585357637172,0.060277884519466085,0.11668337325896366,0.18854034746641013,0.27295225396537615,0.3665164505129148,0.4654613662393725,0.5657985335938664,0.6634833633906126,0.7545781821169484,0.8354109594732837,0.9027233278399545,0.9538019270100986,0.9865877796847046,0.9997592888058109,0.9927855111072821,0.9659475594270175,0.9203272710542709,0.8577635988901662,0.7807784832938165,0.6924751927171636,0.5964132310165681,0.4964648539246288,0.3966589784993462,0.3010187775598102,0.21339950567065308,0.13733309390879989,0.07588577779332917,0.03153449739348435,0.006067051924779521,0.0005100335987500149,0.015087445711691294,0.049211673076273554,0.1015071687779025,0.1698659024429922,0.2515323349006732,0.3432144939110686,0.44121667349946236,0.5415884077897278,0.640283714203378,0.7333241869360467,0.8169593664144478,0.8878179202459864,0.9430435415595414,0.9804100866773204,0.9984113109217785,0.9963215853078247,0.9742251466326763,0.9330127018922056,0.8743455239000549,0.8005884854140439,0.7147147311630098,0.6201858304433768,0.5208122413303541,0.4205997111904748,0.3235878050859755,0.23368707098883296,0.15452140567160916,0.08928197550131828,0.04059858058814392,0.010433647595935458,3.12436325167198e-6,0.009727465070551,0.039214681740706414,0.08727614526635502,0.15197449902526444,0.23070175368651924,0.320284415207691,0.4171114083155326,0.5172796388769547,0.6167513275448828,0.7115167725618741,0.7977559807566246,0.871992651391958,0.9312343057765333,0.9730929140208495,0.9958811564735521,0.9986804395424483,0.981377924183678,0.9446710744412661,0.8900395426855991,0.8196855248562901,0.7364449899885749,0.6436733623586469,0.545110264399128,0.44472877259444116,0.3465752628480605,0.2546063011519357,0.17252915449108147,0.10365235098664832,0.050752313194247,0.015961440566895913,0.0006821524762843922,0.005530356716167528,0.030310622271709053,0.07402405713979399,0.13490857364541753,0.21050991816010645,0.2977806020162726,0.3932027457133546,0.4929298845698482,0.5929420196363304,0.6892076637718036,0.7778463508091096,0.8552850570671895,0.9184022298636958,0.9646536172404063,0.9921748267079238,0.9998564788695063,0.9873889264819427,0.9552747363297406,0.9048084307680673,0.8380243055530483,0.7576144274207195,0.6668201169316723,0.5693012909045468,0.4689889312433011,0.36992662713616004,0.2761075780572056,0.1913136279765819,0.11896281930626373,0.06197161167980564,0.022637319523470423,0.002545507358184207,0.002506075725814849,0.02252061411464834,0.061782336887232225,0.1187086047929441,0.19100472112443162,0.27575643089523516,0.3695473943992639,0.4685968997955376,0.5689122635255318,0.666449775307239,0.7572777000143041,0.8377347658394947,0.9045777500874521,0.9551122134155666,0.9873011126296252,0.9998469138536568,0.9922438960941347,0.9647985368430976,0.9186171579766564,0.8555613299425137,0.7781728318927361,0.68957119261795,0.593327942404461,0.4933226447210979,0.39358651109391773,0.29813990305137184,0.21083027143238892,0.13517706572086863,0.07422986510836116,0.030445450018304843,0.005588769337046273,0.0006617953598969661,0.015863134308197746,0.05058002051650917,0.10341301700423855,0.172232426752031,0.25426414074531745,0.34620146225303905,0.44433839970533234,0.5447190551392471,0.6432970863653984,0.7360988149395263,0.8193834050607623,0.8897936565863511,0.9444913337020271,0.9812715741500251,0.9986517671820562,0.9959313175686959,0.9732198865788133,0.9314329715360676,0.8722550021402775,0.7980714411404476,0.7118726263794222,0.6171332303360719,0.5176721961479478,0.41749879609062296,0.320651017893613,0.23103279353631717,0.15225663182938515,0.08749799825712518,0.03936731202853494,0.009804720131667055,1.890047683028584e-6,0.010353973658917326,0.04044367868446558,0.08905808972361512,0.15423756085098678,0.23335470890434779,0.323220323246434,0.42021192278144126,0.520419778094807,0.6198045125662887,0.7143599295603985,0.8002745021312312,0.8740850155968691,0.9328161696531054,0.9741005126681874,0.9962738736105692,0.998442444749294,0.9805188110256566,0.9432254737523902,0.8880657266003871,0.8172630578611983,0.7336715216791596,0.6406606911863423,0.5419798310778747,0.4416067648281886,0.3435875287066392,0.2518732761381325,0.17016100678790275,0.10174454058005777,0.04938174388319899,0.015183359972552712,0.0005279250116599354,0.006006199287231728,0.03139735367408697,0.07567787125262737,0.1370628052552425,0.2130777302343495,0.3006584861021261,0.3962746943617063,0.4960720675927368,0.5960277756996263,0.6921126061110894,0.7804533812574199,0.8574890862799959,0.9201144134680106,0.9658049371497434,0.9927188732400243,0.9997713215196917,0.9866779979412577,0.9539666941132534,0.9029560020310702,0.8357021616604902,0.7549161739459379,0.6638545204175438,0.566187894486599,0.46585323586808813,0.36689503262086554,0.2733022879155013,0.18884772339716355,0.11693570085288318,0.0604649924562749,0.021711931320241573,0.0022386525550163183,0.0028301236335872004,0.02346250236876074,0.06330409799121989,0.12074889658753313,0.1934812994886379,0.27856946500525787,0.37258349090709153,0.4717336737123721,0.5720232715583113,0.6694096127850535,0.7599670559482634,0.840045232346371,0.9064161923091029,0.9564045237832364,0.9879951981385545,0.999914795931001,0.9916828384147401,0.963631155630669,0.9168905103442464,0.8533450170212078,0.775556193211578,0.6866597048292853,0.5902389675220922,0.49018069926003105,0.3905182468121144,0.29526900161989633,0.2082724588299097,0.13303544732167583,0.07259076950674626,0.02937494912480354,0.005130015021006962,0.0008332799985359407,0.016657945359187076,0.05196611916246868,0.10533452963679585,0.1746118972358478,0.2570056526733866,0.349194505334969,0.4474623244349949,0.5478479361740534,0.6463047985741449,0.7388641175039867,0.8217948286904616,0.8917539968435337,0.9459215693106349,0.9821140523416143,0.9988725276777708,0.995521461517413,0.9721959352696632,0.9298362004256325,0.8701497770396912,0.7955426236309178,0.7090221530435382,0.6140760036963728,0.5145314529484767,0.41440113962614544,0.31772131463353426,0.2283891397597715,0.15000559316657253,0.08573031403104392,0.03815423755459324,0.009195154417331985,2.0404674565877023e-5,0.010999822302794227,0.04169082719956979,0.09085626557850524,0.1565142796133588,0.23601819608695784,0.3261632137348438,0.42331558871966557,0.5235591107716223,0.6228529655449587,0.7171946197630409,0.8027811632532349,0.8761626041791124,0.9343809381418303,0.9750893852772575,0.996646988905143,0.9981847624594098,0.9796407183191993,0.9417623665285633,0.8860765826817942,0.814828059599038,0.7308888238039872,0.6376424641932453,0.538847739635874,0.4384870634798801,0.3406059725504137,0.24915005164215653,0.16780588707656136,0.09985246048126195,0.04802897310742199,0.01442442868244237,0.0003934257121398499,0.006501553642344005,0.032502593959800374,0.07734844525538792,0.13923137217080128,0.21565687517421905,0.30354424378596667,0.39935073995567294,0.4992144057611771,0.5991097388545525,0.6950099603801392,0.7830493343485304,0.859678995376643,0.9218100033788194,0.966937858679697,0.9932434583452235,0.9996664241851216,0.9859478465763611,0.952640721104776,0.9010876573241875,0.8333667581924242,0.7522078517832996,0.6608824519719626,0.5630718837769304,0.46271888922304644,0.3638686954901809,0.2705059518876828,0.1863941087210107,0.11492371268629464,0.05897573400156242,0.020805434555528135,0.0019514583465669033,0.0031738087741502996,0.024423212917256465,0.06484310772485607,0.12280416805514172,0.19596998473891802,0.28139124518617786,0.3756246201165542,0.4748715640934726,0.5751314348133907,0.6723627589161332,0.762646143694602,0.8423422677350688,0.9082385818900539,0.9576788070694127,0.9886700087964413,0.9999629323566325,0.9911023602297633,0.9624454618990167,0.9151473963561975,0.8511147476663719,0.7729286706025214,0.6837408443491608,0.5871464283778971,0.4870391416420407,0.3874543068443437,0.2924061866604505,0.20572616889187773,0.13090832330093816,0.07096855572953864,0.0283230369956613,0.004690807096571825,0.0010244807413546386,0.017471847471185298,0.05336991426600585,0.10727163077960267,0.1770042199100788,0.25975676240044954,0.3521935049373776,0.4505883242996207,0.5509749273094396,0.6493067320309523,0.7416199854053125,0.824193542056922,0.8936988635879826,0.947334191893869,0.9829374879758714,0.9990735836893213,0.995092033342507,0.9711533331493267,0.9282224516302194,0.8680299317505489,0.7930021327687294,0.7061634237436063,0.6110142712788326,0.511390135785123,0.4113068641483273,0.3147988110232056,0.2257562140783227,0.1477683785948548,0.08397899264322295,0.03695940508035439,0.008604974529577758,5.86675126078573e-5,0.011664985492406521,0.04295607802603718,0.09267060180664682,0.1588045653865065,0.23869211003184093,0.3291129704345843,0.42642228354133377,0.5266975129098177,0.625896566073048,0.7200207312052131,0.8052758651144947,0.8782253350779101,0.9359285494373724,0.976059492789553,0.9970004876199723,0.9979074028507358,0.9787436807472419,0.9402818105596971,0.8840721894971673,0.8123806262473213,0.728097006274154,0.634618800593389,0.535714113784524,0.43536979177169893,0.33763071214482926,0.2464367352259732,0.1654638883796563,0.0979761854236707,0.046694054298751286,0.013684676672858997,0.0002786598901800552,0.007016400215972607,0.033626299474050214,0.07903571316371621,0.14141418873796358,0.21824725110860704,0.30643776108603926,0.40243076099755587,0.5023567749590455,0.602187787369623,0.6978996121390504,0.7856341075473967,0.8618546978600266,0.923488932623685,0.9680523370821555,0.993748561303422,0.9995417910090334,0.9851985012267831,0.9512968696776121,0.8992034704432614,0.8310181873927813,0.7494895679063527,0.6579040289857357,0.5599533818518388,0.4595860151085368,0.3608477352784187,0.26771868042367797,0.18395288086103562,0.1129269342760395,0.05750389513836818,0.019917865034153437,0.0016839360764588918,0.0035371175726043314,0.0254027078139753,0.06639930530033733,0.12487433801662401,0.19847067857714146,0.2842216599831229,0.3786706619090814,0.47801044699850764,0.5782366305244875,0.6753090970570649,0.7653148574345235,0.8446257812771228,0.9100448468495976,0.9589350129424106,0.9893255179496037,0.9999913212292582,0.9905024844669723,0.9612415024806472,0.9133878848620535,0.8488706099692215,0.7702903678475443,0.6808147264669335,0.5840504471210929,0.4838980959524204,0.3843948122102113,0.2895515712485971,0.20319150219169368,0.12879577767587302,0.06936328785096463,0.027289755179320918,0.00427116291158941,0.001235390036302464,0.018304808496658942,0.05479135037992283,0.10922424392100727,0.17940930028263757,0.26251736126312963,0.3551983426058388,0.4537162758282472,0.5540999050354599,0.6523027681653504,0.7443663097921891,0.8265794504158113,0.8956281800012139,0.9487291456558631,0.9837418485287078,0.9992549272753903,0.9946430500055237,0.97009212139852,0.9265917888897919,0.8658955500025722,0.7904500688982314,0.7032965513936589,0.6079481540158076,0.5082483687338534,0.408216091875135,0.3118836224957221,0.22313412048726405,0.14554507647976878,0.08224410326738224,0.03578286179941681,0.0080342037793395,0.00011667705050460997,0.012349436955127302,0.04423938118896975,0.09450102674522676,0.16110832770856126,0.241376345124798,0.3320694768360644,0.4295318845381637,0.5298348605486781,0.6289351939342087,0.7228381522610685,0.8077585091792356,0.8802731268194841,0.9374589424121285,0.9770107968876991,0.9973343557925329,0.9976103768784252,0.977827733741005,0.9387838643248432,0.8820526262160607,0.8099208544749872,0.7252961793609131,0.6315898198154869,0.532579077295943,0.43225507282969333,0.3346618650069849,0.2437334340603452,0.16313510320149016,0.09611578951649391,0.04537704018383104,0.012964133162552793,0.00018363207880922605,0.007550718672699797,0.034768425832677585,0.08073960833384675,0.14361116873976593,0.2208487557226625,0.30933892371399374,0.4055146358325787,0.505499051068936,0.6052617996679722,0.7007814472523113,0.788207598760465,0.8640161077941754,0.9251511348882326,0.9691483283373925,0.9942341621640555,0.9993974269141973,0.9844299914902328,0.9499351929112263,0.8973035158100033,0.8286565420254488,0.7467614296819178,0.6549193691008782,0.5568325118859635,0.45645473726692837,0.3578322713075687,0.26494058361517986,0.18152413624107205,0.11094544449101196,0.056049534001434975,0.019049257813368692,0.0014360963112906022,0.003920035678964873,0.026400948370758792,0.06797262925091951,0.12695932470437382,0.20098328223081752,0.287060597600272,0.38172149597189997,0.4811501984476026,0.5813387360425316,0.6782485108332839,0.767973091759082,0.8468956827782788,0.9118349158437205,0.9601730917845896,0.98996169970673,0.9999999614275745,0.9898832348202702,0.9600193249296558,0.9116120453591233,0.8466126925687429,0.7676413891543241,0.6778814667584547,0.5809511460368529,0.4807576862564138,0.3813398837536858,0.2867052681358786,0.2006685588437096,0.12669789388787978,0.06777502927600798,0.02627514448842022,0.0038710990411578994,0.001465999552876851,0.01915679553528482,0.05623037136031267,0.11119229193655833,0.1818270433577081,0.26528734022324885,0.35820889965511726,0.4568460554729943,0.5572227459215238,0.6552927886398013,0.7471029821902515,0.8289524595283961,0.8975418698790576,0.9501063754987116,0.9845271022294626,0.9994165512732658,0.9941745292404215,0.9690123419330208,0.9249442766122934,0.8637467160996448,0.7878865328210223,0.700421649229518,0.6048777730129026,0.5051062758882333,0.40512894488582973,0.30897586419540535,0.2205229625541386,0.14333577463733777,0.08052571442824169,0.03462465418286281,0.007482864710960491,0.00019443099699090194,0.013053149656482188,0.04554068600041522,0.09634746809615691,0.16342547558548126,0.24407079534367415,0.33503261616314683,0.4326442688870851,0.5329710297692527,0.6319687291086685,0.7256467716479118,0.8102289973878081,0.8823058985201229,0.93897205661864,0.9779432599970715,0.9976485802356954,0.9972936962744372,0.9768929134785775,0.9372685869898512,0.8800179726072543,0.8074488414381408,0.722486453691574,0.6285556414984349,0.5294427539977389,0.4291430296790823,0.33169954840045257,0.2410402549203539,0.1608196235245838,0.09427134624161226,0.044077982782106506,0.012262826611575961,0.00010834603143788923,0.008104487907977576,0.03592892792393648,0.0824600634653011,0.14582222539985729,0.22346128626206652,0.31224761707966175,0.40860224265374767,0.508641109977176,0.6083316543322128,0.7036553518930483,0.7907697063399381,0.8661631398076459,0.9267965445186801,0.9702257891559269,0.9947002417468445,0.9992333376027089,0.9836423477212932,0.9485557445892236,0.8953878684688517,0.8262819153707766,0.7440235448660919,0.6519285902054264,0.5537093971476459,0.4533251793776536,0.35482242268253006,0.2621717711915013,0.179107970791626,0.10897932159612705,0.05461270803522139,0.01819964720145173,0.0012079488402416683,0.004322547968733381,0.027417895159084937,0.06956301743334242,0.12905904576540211,0.20350769645708677,0.2899079459053244,0.38477700180311686,0.4842906944268041,0.5844376288402848,0.6811808841437772,0.770620741673391,0.8491518825818891,0.9136087181682488,0.961392994694203,0.9905785289398685,0.9999888526103095,0.9892446357487891,0.9587789775196314,0.9098199479895772,0.8443410846483168,0.764981839152311,0.6749411810816636,0.5778486475414776,0.47761803659403046,0.3782896421385464,0.2838673897458275,0.19815743849918283,0.12461475479920647,0.0662038427377592,0.025279244998068218,0.0034906312870359724,0.00171630018245994,0.020027774935265807,0.057686920368648975,0.11317569709226322,0.18425735363906082,0.2680665898719831,0.36122505717418224,0.45997753961371857,0.5603433266216117,0.6582766753543742,0.7498298945062205,0.831312475665524,0.8994398576345253,0.9514658270245429,0.9852932180621583,0.9995584492991112,0.9936864895528663,0.9679140374019954,0.9232799798711901,0.8615835149164814,0.7853116257916914,0.6975388308042716,0.6018032495441312,0.5019639813546967,0.40204554511670476,0.3060756509729393,0.21792284341464618,0.14114056033076083,0.07882389399875184,0.03348482797761748,0.006950979101239707,0.0002919262809395473,0.013776095801164068,0.046859941061415666,0.09820985292863466,0.16575591749448054,0.24677535426303088,0.33800227137749217,0.43575931365492193,0.5361058966990223,0.6349970517778063,0.7284464784308493,0.8126872321607845,0.8843235698892666,0.9404678322918694,0.978856845287227,0.9979431485382115,0.9969573735470163,0.9759392568835563,0.9357360384052791,0.8779683090355286,0.8049646847763927,0.7196679402446254,0.6255163854862572,0.5263052677686869,0.4260337852395653,0.3287438793308616,0.23835730418118373,0.1585175408057905,0.09244292845100988,0.04279693340383833,0.011580784720146398,5.280472171348416e-5,0.008677686049019195,0.037107759910275706,0.08419701060342133,0.14804727138576596,0.2260847395371406,0.3151637262953731,0.41169345950666286,0.5117828275785018,0.611397230109009,0.7065212125478331,0.7933203290876493,0.8682957090968941,0.928425096524612,0.9712846769801357,0.9951467816425619,0.9990495295557702,0.9828356010303583,0.9471585791970766,0.89345660408418,0.823894401221849,0.7412760215998933,0.648931810429267,0.5505841609937224,0.4501974650520405,0.35181830828640664,0.2594123525153903,0.17670447994648358,0.10702864324937417,0.053193473991502094,0.01736906675635147,0.000999502674696895,0.004744638543466628,0.028453508011573536,0.0711704070304276,0.13117341826496814,0.20604382154645862,0.29276359243346506,0.3878370587163136,0.48743181089269455,0.5875331865177417,0.6841061011654576,0.7732577026003398,0.8513942915725378,0.9153661837615095,0.9625946734875505,0.9911759812854888,0.99995799521624,0.9885867124759599,0.9575205092418357,0.9080116635376737,0.8420558759319496,0.7623118228885983,0.6719939855722239,0.5747430741775023,0.47447927097508985,0.37524420784328527,0.28103804816900985,0.19565824034256657,0.1225464426898275,0.06464979029491319,0.024302096044336974,0.0031297746769445856,0.001986282038654863,0.020917712294596158,0.059160939874188634,0.11517438104755351,0.18670013513426076,0.27085500043443433,0.36424669603063187,0.46311060456295233,0.5634615238789767,0.6612543104514094,0.7525469390324209,0.8336594056111113,0.9013220683008316,0.9528074465377182,0.986040165766739,0.9996806157482349,0.9931789502194583,0.9667972511863139,0.9215989644029918,0.8594060318952368,0.7827254495140517,0.6946482099835284,0.5987247050471269,0.4988216092478141,0.39896601435593404,0.3031830973810452,0.21533386576833413,0.13895952026656844,0.07713870919753574,0.03236342820461646,0.006438567958613084,0.0004091590514784249,0.014518246834260173,0.04819709426394181,0.10008810768205267,0.16809956138768478,0.24948991505815665,0.34097832518371807,0.4388768958035856,0.5392393375167921,0.6380200423286654,0.7312371620270173,0.815133116402813,0.8863260612328997,0.9419462103515637,0.9797515166732935,0.9982180490652175,0.9966014219802479,0.9749668016234854,0.934186279103756,0.8759037164586772,0.8024684826091377,0.7168407503458072,0.6224721718235917,0.5231667425332687,0.42292746232018535,0.3257949745414367,0.23568468781411528,0.15622894597281095,0.09063060836356163,0.04153394264795773,0.010918034427602863,1.7010343412005025e-5,0.009270290455635821,0.03830487523014908,0.0859503811422091,0.1502862188125894,0.22871901192649546,0.31808713618059925,0.4147881642943914,0.514924079781244,0.6144584059141996,0.709378916020648,0.7958593662589217,0.8704137314296636,0.9300367265813965,0.9723249499860509,0.9955737642137593,0.9988460100334443,0.9820097832823214,0.9457437519200714,0.8915097989371004,0.821494093880782,0.7385189684051894,0.6459291481394186,0.5474569268648776,0.44707171782865646,0.3488200467758117,0.2566624365784098,0.17431375863889548,0.10509348649871342,0.051791887927206626,0.01655754928436287,0.0008107660478658407,0.005186290731401366,0.02950774602349604,0.07279473455347524,0.1333023586894767,0.2085915573270229,0.29562742439232115,0.39090154584509135,0.4905734237774051,0.5906252868064589,0.6870240463580559,0.7758838703852033,0.8536228211793562,0.9171072432070027,0.9637780807006807,0.9917540331453977,0.9999073904641722,0.9879094909884597,0.9562439698033373,0.9061872634270929,0.8397571566808518,0.7596314458235319,0.6690399966384051,0.5716345486090824,0.4713415133748341,0.3722037011565157,0.2782173551588561,0.19317106308713916,0.12049303925396748,0.0631129333295713,0.023343736222672218,0.0027885434640044227,0.002275934457723061,0.021826572462515237,0.06065237165597931,0.11718826485826972,0.1891552913582854,0.2736524617739676,0.3672736968757256,0.46624512657078904,0.5665772145308443,0.6642255763202276,0.7552540084510821,0.8359931566660816,0.9031884275343554,0.9541311810468557,0.9867679158402116,0.9997830457953081,0.9926519312870035,0.9656620273968364,0.9199012966044751,0.8572143530422889,0.7801281061368415,0.691749900941076,0.5956422611183453,0.49567928368504977,0.39589047423904034,0.30029831766990356,0.21275613187468356,0.1367927405915953,0.0754702265860494,0.031260499156925636,0.0059456515223134665,0.0005461246781462981,0.015279573442264549,0.04955209279309447,0.10198215816907408,0.17045631469576727,0.2522143705091382,0.3439606600335498,0.4419968921946533,0.5423712284578664,0.6410375813592257,0.7340187122097985,0.8175665535062734,0.888313293456586,0.943407132404723,0.9806272388175589,0.9984732709586726,0.9962258556335322,0.9739755861084176,0.9326193702977277,0.8738242764239365,0.7999603335314094,0.7140049956636648,0.6194231207508388,0.5200273022570047,0.41982418361447904,0.32285295050806684,0.23302251138233798,0.15395392942076597,0.08883445756231606,0.04028906040007102,0.010274601911266501,9.643103399126218e-7,0.009882277721085575,0.03952022659987686,0.08772010582707046,0.15253897924630555,0.23136399938159746,0.3210177312662378,0.4178862347820657,0.518064742512286,0.617515060837358,0.7122283494378752,0.798386717566779,0.8725171231481592,0.9316313710329012,0.9733465670849522,0.9959811725954648,0.9986227870743533,0.98116492709539,0.9443113186411045,0.8895475299225535,0.8190810881549969,0.7357524941801619,0.6429207219350849,0.5443278182807119,0.44394806116831576,0.34582775657612685,0.2539221319968833,0.17193590129761005,0.10317392777903228,0.05040800520228017,0.01576512683881648,0.0006417464144770069,0.005647487088151937,0.030580567554580107,0.0744359358446825,0.13544578295000503,0.2111508031682247,0.29849932866616,0.3939703421483988,0.493715408993289,0.5937138075744417,0.6899346044684734,0.7784991412995168,0.8558373833799269,0.918831827736335,0.9649431695912926,0.992312661687683,0.9998370403528933,0.9872129980351815,0.9549494096249118,0.9043468197181189,0.8374450176900401,0.7569408138266878,0.6660793309570164,0.5685231936168109,0.46820488772846347,0.36916824217243943,0.2754054221271445,0.19069600497151362,0.11845462559702552,0.061593332544534196,0.022404203386454324,0.0024669511261899424,0.002585245998964425,0.022754319540833068,0.062161156805423945,0.11921726897995927,0.19162272533720132,0.2764588633963597,0.3703059401489355,0.4693809818297711,0.5696902755135586,0.6671903556015607,0.7579509958381364,0.838313636651898,0.9050388616175757,0.9554369782670453,0.9874764395378925,0.9998657353945395,0.9921054535717033,0.9645084108726498,0.9181870435302119,0.8550085649246044,0.777519698250159,0.6888440181545291,0.5925560395082063,0.4925371287821431,0.3928190462437566,0.2974214257826422,0.21018974354920933,0.13464030688934048,0.07381851206607615,0.030176084398074232,0.005472249261571138,0.0007028177510651212,0.016060045554245395,0.05092488312909538,0.10389192957842791,0.1728260843316053,0.25494861300538985,0.3469491581305156,0.4451191795945703,0.5455014458187663,0.6440495496825729,0.7367910191134794,0.8199874473550955,0.8902851880684521,0.9448505407478239,0.9814839771307037,0.9987088041378192,0.9958306893409954,0.9729656494894716,0.9310353738769831,0.8717300710650994,0.7974403366101659,0.7111607882048829,0.6163693526996875,0.5168870709417277,0.41672407169585507,0.31991792343491776,0.23037088003653916,0.15169258100821337,0.08705454699176385,0.03906233583058094,0.009650512585445747,4.66725628400777e-6,0.010513623673107264,0.040753766015425186,0.08950611475726372,0.15480546370734682,0.2340195974306417,0.32395539579970245,0.4209875486020476,0.5212046917214536,0.6205670741466784,0.7150694002525475,0.8009022831859042,0.8746058011725812,0.9332089668937181,0.9743494879249353,0.996368990695855,0.9983798694953525,0.9803010658397082,0.9428613359384745,0.8875698745463791,0.8166554793534324,0.7329767081949543,0.639906650643187,0.5411969588348634,0.44082661844942905,0.342841555877041,0.25119154700730617,0.16957100184327523,0.10127004290912678,0.04904188047734426,0.014991830718869947,0.0004924504504651428,0.006128209397377682,0.03167193023046522,0.07609394607985392,0.13760360638543084,0.21372145798488418,0.30137919182046047,0.39704332641481493,0.49685764243816344,0.5967986268312471,0.6928376605353861,0.7811034120452669,0.8580378907033956,0.9205398692317767,0.9660898941406866,0.9928518448476154,0.9997469476610965,0.9864972611262266,0.9536368798391178,0.9024904051046274,0.8351195502843343,0.754240033172838,0.6631121054684784,0.5654091320930377,0.46506951792652496,0.36613795078555456,0.27260236013980377,0.18823316375570953,0.11643128223233407,0.06009104796101866,0.021483534645332036,0.002165010365760056,0.0029142044451700433,0.023700916885363688,0.06368723572850288,0.12126131327102146,0.19410233961226114,0.2792740944541618,0.37334330608244826,0.47251804647983714,0.5728005838674991,0.6701485311925087,0.7606377946679329,0.8406207539140366,0.9068732974620171,0.9567247866219343,0.9881657088744884,0.9999286812798543,0.9915395386583838,0.963336447179381,0.9164562728897352,0.8527887546664379,0.7749003288809414,0.6859306764005457,0.5894661621165085,0.4893952686478655,0.38975185168539545,0.29455253535083525,0.20763480215920455,0.13250230417678183,0.07218363087709256,0.029110226760294344,0.005018379874836776,0.0008792320811655263,0.016859632343102005,0.05231541104942489,0.10581734647793267,0.17520877669399987,0.25769253454965824,0.3499437014348693,0.4482436346789526,0.548629865961946,0.6470558283319331,0.7395539732373869,0.8223957023287756,0.8922416671826443,0.9462763783690222,0.9823216977732636,0.9989246392995597,0.9954159387109289,0.9719370316571043,0.9294343524063243,0.8696211830992366,0.7949085913803319,0.7083082403100133,0.6133109882878072,0.5137461726203449,0.4136272490127521,0.3169900092497894,0.22772989851089664,0.14944499005401135,0.08529094695484102,0.03785381739274074,0.009045791100475542,2.8119034985729652e-5,0.011164303374777917,0.04200544475443374,0.09130833738897887,0.15708558267390915,0.23668570118277388,0.32690001374901945,0.42409198325853775,0.524343803386982,0.6236143252934694,0.7179019562486398,0.8034059637563996,0.8766796830042911,0.9347694518519412,0.9753336728925996,0.9967372031968632,0.9981172668912216,0.979418233636081,0.9413938610836478,0.8855769109220777,0.8142173632829557,0.7301917200878065,0.6368870533135613,0.5380644721900689,0.4377075129628475,0.33986156262755735,0.2484707894625664,0.16721915368485618,0.09938190708867262,0.04769356771166433,0.01423769146818532,0.0003628840527359345,0.006628438671475001,0.03278179094449141,0.0777686997708445,0.13977574376600882,0.21630342024118954,0.304266900106185,0.4001203772673908,0.49999999999998435],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],22:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var hacovercos = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof hacovercos, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for -256*pi < x < 0)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for 0 < x < 256*pi)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for -2**60 (pi/2) < x < -2**20 (pi/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for 2**20 (pi/2) < x < 2**60 (pi/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for x <= -2**60 (PI/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the half-value coversed cosine (for x >= 2**60 (PI/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = hacovercos( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = hacovercos( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = hacovercos( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = hacovercos( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/hacovercos/test/test.js")
},{"./../lib":15,"./fixtures/julia/huge_negative.json":16,"./fixtures/julia/huge_positive.json":17,"./fixtures/julia/large_negative.json":18,"./fixtures/julia/large_positive.json":19,"./fixtures/julia/medium_negative.json":20,"./fixtures/julia/medium_positive.json":21,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":50,"@stdlib/math/constants/float64-ninf":56,"@stdlib/math/constants/float64-pinf":57,"tape":113}],23:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":24}],24:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":35,"@stdlib/math/base/utils/float64-from-words":37,"@stdlib/math/base/utils/float64-normalize":45,"@stdlib/math/base/utils/float64-to-words":47,"@stdlib/math/constants/float64-exponent-bias":51,"@stdlib/math/constants/float64-max-base2-exponent":54,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":53,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":55,"@stdlib/math/constants/float64-ninf":56,"@stdlib/math/constants/float64-pinf":57}],25:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":26}],26:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],27:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

var sin = require( './sin.js' );


// EXPORTS //

module.exports = sin;

},{"./sin.js":33}],28:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var C1 = 4.16666666666666019037e-02;  // 0x3FA55555, 0x5555554C
var C2 = -1.38888888888741095749e-03; // 0xBF56C16C, 0x16C15177
var C3 = 2.48015872894767294178e-05;  // 0x3EFA01A0, 0x19CB1590
var C4 = -2.75573143513906633035e-07; // 0xBE927E4F, 0x809C52AD
var C5 = 2.08757232129817482790e-09;  // 0x3E21EE9E, 0xBDB4B1C4
var C6 = -1.13596475577881948265e-11; // 0xBDA8FAE9, 0xBE8838D4


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @private
* @param {number} x - input value (assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine (in radians)
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;
	z = x * x;
	w = z * z;
	r = z * (C1 + (z * (C2 + (z*C3))));
	r += w * w * (C4 + (z * (C5 + (z*C6))));
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{}],29:[function(require,module,exports){
/* eslint-disable no-plusplus */
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

// Initial value for `jk`:
var INIT_JK = [ 3, 4, 4, 6 ];

/*
* Table of constants for `2/pi` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (24*i)-th to (24*i+23)-th bit of `2/pi` after binary point. The corresponding floating value is
*
* ``` text
* ipio2[i] * 2^(-24(i+1))
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (e0 <= 16360, jk = 6), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `pi/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRemPio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Array<number>} y - output result in an array of double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/pi`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f, prec ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++, j-- ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) {
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			default:
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// k = number of terms needed
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f, prec );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	switch ( prec ) {
	case 0:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = fw;
		} else {
			y[ 0 ] = -fw;
		}
		break;
	case 1:
	case 2:
		fw = 0.0;
		for ( i = jz; i >= 0; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = fw;
		} else {
			y[ 0 ] = -fw;
		}
		fw = FQ[ 0 ] - fw;
		for ( i = 1; i <= jz; i++ ) {
			fw += FQ[i];
		}
		if ( ih === 0 ) {
			y[ 1 ] = fw;
		} else {
			y[ 1 ] = -fw;
		}
		break;
	case 3:
		for ( i = jz; i > 0; i-- ) {
			fw = FQ[ i-1 ] + FQ[ i ];
			FQ[ i ] += FQ[ i-1 ] - fw;
			FQ[ i-1 ] = fw;
		}
		for ( i = jz; i > 1; i-- ) {
			fw = FQ[ i-1 ] + FQ[ i ];
			FQ[ i ] += FQ[ i-1 ] - fw;
			FQ[ i-1 ] = fw;
		}
		fw = 0.0;
		for ( i = jz; i >= 2; i-- ) {
			fw += FQ[ i ];
		}
		if ( ih === 0 ) {
			y[ 0 ] = FQ[ 0 ];
			y[ 1 ] = FQ[ 1 ];
			y[ 2 ] = fw;
		} else {
			y[ 0 ] = -FQ[ 0 ];
			y[ 1 ] = -FQ[ 1 ];
			y[ 2 ] = -fw;
		}
		break;
	default:
		break;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Return the last three digits of `N` with `y = x - N*pi/2` so that `|y| < pi/2`.
*
* ## Method
*
* The method is to compute the integer (mod 8) and fraction parts of `(2/pi)*x` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals 0 mod 8 ). Thus, the number of operations are independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Array<number>} y - output result in an array of double precision numbers
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @param {PositiveInteger} prec - precision in bits (can be 24 (single), 53 (double), 64 (extended), 113 (quad))
* @returns {number} last three digits of `N`
*/
function kernelRemPio2( x, y, e0, nx, prec ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk`:
	jk = INIT_JK[ prec ];

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++, j++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F, prec );
} // end FUNCTION kernelRemPio2()


// EXPORTS //

module.exports = kernelRemPio2;

},{"@stdlib/math/base/special/floor":13,"@stdlib/math/base/special/ldexp":23}],30:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @private
* @param {number} x - input value (assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @param {number} iy - indicates whether `y` is `0` (if `iy = 0`, `y` assumed to be `0`)
* @returns {number} sine (in radians)
*/
function kernelSin( x, y, iy ) {
	var r;
	var v;
	var w;
	var z;
	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( iy === 0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],31:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var remPio2Kernel = require( './kernel_rem_pio2.js' );
var remPio2Medium = require( './rem_pio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for PI and PI/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3*PI/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5*PI/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6*PI/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7*PI/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8*PI/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9*PI/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*pi/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - n*pi/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @private
* @param {number} x - input value
* @param {Array<number>} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function remPio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= pi/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5pi/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= pi/2 or pi
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return remPio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3pi/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return remPio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4pi/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return remPio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*pi/2 (medium size)
	if ( ix < MEDIUM ) {
		return remPio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // e0 = ilogb(z) - 23 => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = remPio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION remPio2()


// EXPORTS //

module.exports = remPio2;

},{"./kernel_rem_pio2.js":29,"./rem_pio2_medium.js":32,"@stdlib/math/base/utils/float64-from-words":37,"@stdlib/math/base/utils/float64-get-high-word":41,"@stdlib/math/base/utils/float64-get-low-word":43}],32:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/PI:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of PI/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of PI/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - n*pi/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {Array<number>} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function remPio2( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION remPio2()


// EXPORTS //

module.exports = remPio2;

},{"@stdlib/math/base/special/round":25,"@stdlib/math/base/utils/float64-get-high-word":41}],33:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( './kernel_cos.js' );
var kernelSin = require( './kernel_sin.js' );
var remPio2 = require( './rem_pio2.js' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000;

// Array for storing remainder elements:
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Computes the sine of a number.
*
* #### Method
*
* * Let `S`, `C`, and `T` denote the `sin`, `cos` and `tan`, respectively, on `[-PI/4, +PI/4]`.
* * Reduce the argument `x` to `y1+y2 = x-k*pi/2` in `[-pi/4 , +pi/4]`, and let `n = k mod 4`. We have
*
* | n   |  sin(x)  |  cos(x)  |  tan(x)  |
* | --- |----------|----------|----------|
* |  0  |     S    |     C    |    T     |
* |  1  |     C    |    -S    |   -1/T   |
* |  2  |    -S    |    -C    |    T     |
* |  3  |    -C    |     S    |   -1/T   |
*
*
* @param {number} x - input value
* @returns {number} sine (in radians)
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;
	var z;

	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= ABS_MASK;
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return kernelSin( x, z, 0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction...
	n = remPio2( x, Y );
	switch ( n & 3 ) {
	case 0:
		return kernelSin( Y[0], Y[1], 1 );
	case 1:
		return kernelCos( Y[0], Y[1] );
	case 2:
		return -kernelSin( Y[0], Y[1], 1 );
	default:
		return -kernelCos( Y[0], Y[1] );
	}
} // end FUNCTION sin()


// EXPORTS //

module.exports = sin;

},{"./kernel_cos.js":28,"./kernel_sin.js":30,"./rem_pio2.js":31,"@stdlib/math/base/utils/float64-get-high-word":41}],34:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":41,"@stdlib/math/constants/float64-exponent-bias":51,"@stdlib/math/constants/float64-high-word-exponent-mask":52}],35:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":34}],36:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":38}],37:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":36}],38:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],39:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":40}],40:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],41:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":39}],42:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":44}],43:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":42}],44:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":2}],45:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":46}],46:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":58}],47:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":49}],48:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":38}],49:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":48}],50:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],51:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],52:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],53:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],54:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],55:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],56:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],57:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],58:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],59:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],60:[function(require,module,exports){

},{}],61:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"dup":60}],62:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],63:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (value instanceof ArrayBuffer) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || string instanceof ArrayBuffer) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":59,"ieee754":82}],64:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":84}],65:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":66,"./lib/keys.js":67}],66:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],67:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],68:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":78,"object-keys":87}],69:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],70:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return Boolean(value);
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	}
};

module.exports = ES5;

},{"./helpers/isFinite":71,"./helpers/isNaN":72,"./helpers/mod":73,"./helpers/sign":74,"es-to-primitive/es5":75,"is-callable":85}],71:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],72:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],73:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],74:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],75:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":76,"is-callable":85}],76:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],77:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],78:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],79:[function(require,module,exports){
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],80:[function(require,module,exports){
var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":79}],81:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":80}],82:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],83:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],84:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],85:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],86:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],87:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":88}],88:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],89:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":62}],90:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":62}],91:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":92}],92:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":94,"./_stream_writable":96,"core-util-is":64,"inherits":83,"process-nextick-args":90}],93:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":95,"core-util-is":64,"inherits":83}],94:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]' || Buffer.isBuffer(obj);
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && Object.getPrototypeOf(chunk) !== Buffer.prototype && !state.objectMode) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))
},{"./_stream_duplex":92,"./internal/streams/BufferList":97,"./internal/streams/destroy":98,"./internal/streams/stream":99,"_process":62,"core-util-is":64,"events":77,"inherits":83,"isarray":100,"process-nextick-args":90,"safe-buffer":107,"string_decoder/":101,"util":60}],95:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":92,"core-util-is":64,"inherits":83}],96:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Object.prototype.toString.call(obj) === '[object Uint8Array]' || Buffer.isBuffer(obj);
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};

}).call(this,require('_process'))
},{"./_stream_duplex":92,"./internal/streams/destroy":98,"./internal/streams/stream":99,"_process":62,"core-util-is":64,"inherits":83,"process-nextick-args":90,"safe-buffer":107,"util-deprecate":119}],97:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":107}],98:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":90}],99:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":77}],100:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],101:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":107}],102:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":103}],103:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":92,"./lib/_stream_passthrough.js":93,"./lib/_stream_readable.js":94,"./lib/_stream_transform.js":95,"./lib/_stream_writable.js":96}],104:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":103}],105:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":96}],106:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":62,"through":118}],107:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":63}],108:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":77,"inherits":83,"readable-stream/duplex.js":91,"readable-stream/passthrough.js":102,"readable-stream/readable.js":103,"readable-stream/transform.js":104,"readable-stream/writable.js":105}],109:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":70,"function-bind":80}],110:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":109,"./polyfill":111,"./shim":112,"define-properties":68,"function-bind":80}],111:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":109}],112:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":111,"define-properties":68}],113:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":114,"./lib/results":116,"./lib/test":117,"_process":62,"defined":69,"through":118}],114:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":62,"fs":61,"through":118}],115:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":62}],116:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":62,"events":77,"function-bind":80,"has":81,"inherits":83,"object-inspect":86,"resumer":106,"through":118}],117:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":115,"deep-equal":65,"defined":69,"events":77,"has":81,"inherits":83,"path":89,"string.prototype.trim":110}],118:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":62,"stream":108}],119:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[22]);
