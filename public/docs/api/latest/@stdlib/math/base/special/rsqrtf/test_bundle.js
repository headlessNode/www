// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float32
*
* @example
* var ctor = require( '@stdlib/array/float32' );
*
* var arr = new ctor( 10 );
* // returns <Float32Array>
*/

// MODULES //

var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
var builtin = require( './float32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float32array.js":1,"./polyfill.js":3,"@stdlib/assert/has-float32array-support":8}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":5,"./uint32array.js":6,"@stdlib/assert/has-uint32array-support":16}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float32Array` support.
*
* @module @stdlib/assert/has-float32array-support
*
* @example
* var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
*
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat32ArraySupport;

},{"./main.js":9}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat32Array = require( '@stdlib/assert/is-float32array' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var GlobalFloat32Array = require( './float32array.js' );


// MAIN //

/**
* Tests for native `Float32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float32Array` support
*
* @example
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/
function hasFloat32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );
		bool = (
			isFloat32Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.140000104904175 &&
			arr[ 2 ] === -3.140000104904175 &&
			arr[ 3 ] === PINF
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat32ArraySupport;

},{"./float32array.js":7,"@stdlib/assert/is-float32array":31,"@stdlib/constants/float64/pinf":44}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './main.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./main.js":11}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './main.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./main.js":13}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './main.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./main.js":15}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":12}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":17}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":18,"@stdlib/assert/is-uint32array":37,"@stdlib/constants/uint32/max":45}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

var isArray = require( './main.js' );


// EXPORTS //

module.exports = isArray;

},{"./main.js":20}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( nativeClass( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

module.exports = f;

},{"@stdlib/utils/native-class":91}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* // Use interface to check for boolean primitives...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* // Use interface to check for boolean objects...
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var isBoolean = require( './main.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( isBoolean, 'isPrimitive', isPrimitive );
setReadOnly( isBoolean, 'isObject', isObject );


// EXPORTS //

module.exports = isBoolean;

},{"./main.js":22,"./object.js":23,"./primitive.js":24,"@stdlib/utils/define-nonenumerable-read-only-property":72}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/
function isBoolean( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isBoolean;

},{"./object.js":23,"./primitive.js":24}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var nativeClass = require( '@stdlib/utils/native-class' );
var test = require( './try2serialize.js' );


// VARIABLES //

var FLG = hasToStringTag();


// MAIN //

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/
function isBoolean( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof Boolean ) {
			return true;
		}
		if ( FLG ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Boolean]' );
	}
	return false;
}


// EXPORTS //

module.exports = isBoolean;

},{"./try2serialize.js":26,"@stdlib/assert/has-tostringtag-support":14,"@stdlib/utils/native-class":91}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/
function isBoolean( value ) {
	return ( typeof value === 'boolean' );
}


// EXPORTS //

module.exports = isBoolean;

},{}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var toString = Boolean.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = test;

},{"./tostring.js":25}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

var isBuffer = require( './main.js' );


// EXPORTS //

module.exports = isBuffer;

},{"./main.js":28}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		isObjectLike( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&

				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
}


// EXPORTS //

module.exports = isBuffer;

},{"@stdlib/assert/is-object-like":35}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

// MODULES //

var isError = require( './main.js' );


// EXPORTS //

module.exports = isError;

},{"./main.js":30}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/
function isError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof Error ) {
		return true;
	}
	// Walk the prototype tree until we find an object having the desired native class...
	while ( value ) {
		if ( nativeClass( value ) === '[object Error]' ) {
			return true;
		}
		value = getPrototypeOf( value );
	}
	return false;
}


// EXPORTS //

module.exports = isError;

},{"@stdlib/utils/get-prototype-of":81,"@stdlib/utils/native-class":91}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float32Array.
*
* @module @stdlib/assert/is-float32array
*
* @example
* var isFloat32Array = require( '@stdlib/assert/is-float32array' );
*
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* bool = isFloat32Array( [] );
* // returns false
*/

// MODULES //

var isFloat32Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat32Array;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat32Array = ( typeof Float32Array === 'function' );// eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float32Array
*
* @example
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat32Array( [] );
* // returns false
*/
function isFloat32Array( value ) {
	return (
		( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float32Array]'
	);
}


// EXPORTS //

module.exports = isFloat32Array;

},{"@stdlib/utils/native-class":91}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

var isFunction = require( './main.js' );


// EXPORTS //

module.exports = isFunction;

},{"./main.js":34}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var typeOf = require( '@stdlib/utils/type-of' );


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( typeOf( value ) === 'function' );
}


// EXPORTS //

module.exports = isFunction;

},{"@stdlib/utils/type-of":102}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var isObjectLike = require( './main.js' );


// MAIN //

setReadOnly( isObjectLike, 'isObjectLikeArray', arrayfun( isObjectLike ) );


// EXPORTS //

module.exports = isObjectLike;

},{"./main.js":36,"@stdlib/assert/tools/array-function":40,"@stdlib/utils/define-nonenumerable-read-only-property":72}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
}


// EXPORTS //

module.exports = isObjectLike;

},{}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":38}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":91}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( 'invalid argument. Must provide a function. Value: `' + predicate + '`.' );
	}
	return every;

	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArray( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	}
}


// EXPORTS //

module.exports = arrayfcn;

},{"@stdlib/assert/is-array":19}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var arrayfcn = require( './arrayfcn.js' );


// EXPORTS //

module.exports = arrayfcn;

},{"./arrayfcn.js":39}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.
*
* @module @stdlib/constants/float32/eps
* @type {number}
*
* @example
* var FLOAT32_EPSILON = require( '@stdlib/constants/float32/eps' );
* // returns 1.1920928955078125e-7
*/

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.
*
* ## Notes
*
* The difference is equal to
*
* ```tex
* \frac{1}{2^{23}}
* ```
*
* @constant
* @type {number}
* @default 1.1920928955078125e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT32_EPSILON = float64ToFloat32( 1.1920928955078125e-7 );


// EXPORTS //

module.exports = FLOAT32_EPSILON;

},{"@stdlib/number/float64/base/to-float32":64}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Single-precision floating-point negative infinity.
*
* @module @stdlib/constants/float32/ninf
* @type {number}
*
* @example
* var FLOAT32_NINF = require( '@stdlib/constants/float32/ninf' );
* // returns -infinity
*/

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );
var Uint32Array = require( '@stdlib/array/uint32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );
var v;


// MAIN //

/**
* Single-precision floating-point negative infinity.
*
* ## Notes
*
* Single-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111 00000000000000000000000
* ```
*
* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.
*
* @constant
* @type {number}
* @default 0xff800000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_NINF = 0xff800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = FLOAT32_NINF;

v = FLOAT32_VIEW[ 0 ];


// EXPORTS //

module.exports = v;

},{"@stdlib/array/float32":2,"@stdlib/array/uint32":4}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Single-precision floating-point positive infinity.
*
* @module @stdlib/constants/float32/pinf
* @type {number}
*
* @example
* var FLOAT32_PINF = require( '@stdlib/constants/float32/pinf' );
* // returns +infinity
*/

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );
var Uint32Array = require( '@stdlib/array/uint32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );
var v;


// MAIN //

/**
* Single-precision floating-point positive infinity.
*
* ## Notes
*
* Single-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111 00000000000000000000000
* ```
*
* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.
*
* @constant
* @type {number}
* @default 0x7f800000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_PINF = 0x7f800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = FLOAT32_PINF;

v = FLOAT32_VIEW[ 0 ];


// EXPORTS //

module.exports = v;

},{"@stdlib/array/float32":2,"@stdlib/array/uint32":4}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a single-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nanf
*
* @example
* var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
*
* var bool = isnanf( NaN );
* // returns true
*
* bool = isnanf( 7.0 );
* // returns false
*/

// MODULES //

var isnanf = require( './main.js' );


// EXPORTS //

module.exports = isnanf;

},{"./main.js":47}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a single-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnanf( NaN );
* // returns true
*
* @example
* var bool = isnanf( 7.0 );
* // returns false
*/
function isnanf( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnanf;

},{}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './main.js' );


// EXPORTS //

module.exports = abs;

},{"./main.js":49}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the reciprocal square root of a single-precision floating-point number.
*
* @module @stdlib/math/base/special/rsqrtf
*
* @example
* var rsqrtf = require( '@stdlib/math/base/special/rsqrtf' );
*
* var v = rsqrtf( 4.0 );
* // returns 0.5
*
* v = rsqrtf( 0.0 );
* // returns 0.0
*
* v = rsqrtf( Infinity );
* // returns 0.0
*
* v = rsqrtf( -4.0 );
* // returns NaN
*
* v = rsqrtf( NaN );
* // returns NaN
*/

// MODULES //

var rsqrtf = require( './main.js' );


// EXPORTS //

module.exports = rsqrtf;

},{"./main.js":51}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Compute the reciprocal square root of a single-precision floating-point number.
*
* @param {number} x - input value
* @returns {number} reciprocal square root
*
* @example
* var v = rsqrtf( 4.0 );
* // returns 0.5
*
* @example
* var v = rsqrtf( 0.0 );
* // returns Infinity
*
* @example
* var v = rsqrtf( Infinity );
* // returns 0.0
*
* @example
* var v = rsqrtf( -4.0 );
* // returns NaN
*
* @example
* var v = rsqrtf( NaN );
* // returns NaN
*/
function rsqrtf( x ) {
	return float64ToFloat32( 1.0 / sqrt( float64ToFloat32( x ) ) );
}


// EXPORTS //

module.exports = rsqrtf;

},{"@stdlib/math/base/special/sqrt":62,"@stdlib/number/float64/base/to-float32":64}],52:[function(require,module,exports){
module.exports={"expected":[1.0e-15,7.072305e-18,5.0009375e-18,4.083265e-18,3.536219e-18,3.1628942e-18,2.8873165e-18,2.6731373e-18,2.5004921e-18,2.3574875e-18,2.2365094e-18,2.1324286e-18,2.0416453e-18,1.9615498e-18,1.890197e-18,1.826104e-18,1.7681178e-18,1.7153263e-18,1.6669976e-18,1.6225365e-18,1.5814531e-18,1.5433402e-18,1.5078565e-18,1.4747128e-18,1.4436628e-18,1.414495e-18,1.3870265e-18,1.3610985e-18,1.3365723e-18,1.3133258e-18,1.2912516e-18,1.2702542e-18,1.250249e-18,1.2311601e-18,1.2129197e-18,1.1954668e-18,1.1787461e-18,1.1627081e-18,1.1473073e-18,1.1325028e-18,1.1182569e-18,1.1045354e-18,1.091307e-18,1.0785428e-18,1.0662162e-18,1.0543028e-18,1.04278e-18,1.031627e-18,1.0208243e-18,1.0103541e-18,1.0001995e-18,9.903451e-19,9.807764e-19,9.714797e-19,9.624424e-19,9.536528e-19,9.450998e-19,9.367727e-19,9.286619e-19,9.207583e-19,9.130531e-19,9.055382e-19,8.982058e-19,8.910487e-19,8.840599e-19,8.772331e-19,8.70562e-19,8.6404087e-19,8.576641e-19,8.5142647e-19,8.4532296e-19,8.393489e-19,8.334997e-19,8.277711e-19,8.2215906e-19,8.166596e-19,8.1126907e-19,8.0598385e-19,8.0080063e-19,7.9571616e-19,7.907273e-19,7.858311e-19,7.810247e-19,7.7630554e-19,7.716708e-19,7.6711815e-19,7.626451e-19,7.5824943e-19,7.5392886e-19,7.496814e-19,7.4550485e-19,7.413974e-19,7.37357e-19,7.33382e-19,7.2947063e-19,7.2562113e-19,7.21832e-19,7.1810155e-19,7.144284e-19,7.10811e-19,7.07248e-19,7.0373807e-19,7.002799e-19,6.9687216e-19,6.9351376e-19,6.9020343e-19,6.8694e-19,6.8372247e-19,6.805497e-19,6.7742075e-19,6.7433454e-19,6.712901e-19,6.6828656e-19,6.65323e-19,6.623985e-19,6.595122e-19,6.5666333e-19,6.53851e-19,6.510746e-19,6.483332e-19,6.4562615e-19,6.4295276e-19,6.403123e-19,6.377041e-19,6.3512747e-19,6.325819e-19,6.3006663e-19,6.2758116e-19,6.2512484e-19,6.2269717e-19,6.2029757e-19,6.179255e-19,6.155804e-19,6.1326183e-19,6.1096925e-19,6.087022e-19,6.064602e-19,6.0424277e-19,6.0204955e-19,5.9987996e-19,5.977337e-19,5.956103e-19,5.935094e-19,5.9143057e-19,5.8937337e-19,5.8733753e-19,5.8532267e-19,5.833284e-19,5.813543e-19,5.794002e-19,5.7746564e-19,5.755503e-19,5.7365394e-19,5.717762e-19,5.6991674e-19,5.6807533e-19,5.6625166e-19,5.644454e-19,5.6265637e-19,5.608842e-19,5.591287e-19,5.5738956e-19,5.5566654e-19,5.5395944e-19,5.5226796e-19,5.505919e-19,5.4893096e-19,5.47285e-19,5.456538e-19,5.44037e-19,5.424345e-19,5.4084615e-19,5.392716e-19,5.3771077e-19,5.361634e-19,5.346293e-19,5.331083e-19,5.3160024e-19,5.3010485e-19,5.286221e-19,5.271516e-19,5.2569334e-19,5.2424717e-19,5.2281284e-19,5.213902e-19,5.199791e-19,5.185795e-19,5.17191e-19,5.158137e-19,5.144473e-19,5.130917e-19,5.1174676e-19,5.1041237e-19,5.090883e-19,5.0777454e-19,5.064709e-19,5.0517724e-19,5.038934e-19,5.0261934e-19,5.013549e-19,5.000999e-19,4.988544e-19,4.9761805e-19,4.9639083e-19,4.951727e-19,4.939635e-19,4.927631e-19,4.915714e-19,4.9038834e-19,4.8921374e-19,4.8804757e-19,4.868897e-19,4.8574e-19,4.8459844e-19,4.8346484e-19,4.823392e-19,4.8122137e-19,4.801113e-19,4.7900887e-19,4.77914e-19,4.7682656e-19,4.7574657e-19,4.7467387e-19,4.7360836e-19,4.7255003e-19,4.7149874e-19,4.704545e-19,4.6941704e-19,4.683865e-19,4.6736273e-19,4.663456e-19,4.653351e-19,4.643311e-19,4.6333364e-19,4.6234257e-19,4.613578e-19,4.603793e-19,4.59407e-19,4.5844087e-19,4.5748077e-19,4.565267e-19,4.5557856e-19,4.546363e-19,4.536999e-19,4.527692e-19,4.5184426e-19,4.5092495e-19,4.500112e-19,4.4910303e-19,4.4820027e-19,4.47303e-19,4.464111e-19,4.4552444e-19,4.446431e-19,4.4376694e-19,4.4289597e-19,4.4203007e-19,4.411693e-19,4.4031346e-19,4.394626e-19,4.3861666e-19,4.377756e-19,4.3693934e-19,4.3610787e-19,4.352811e-19,4.344591e-19,4.3364166e-19,4.3282882e-19,4.3202056e-19,4.312168e-19,4.3041749e-19,4.2962262e-19,4.2883217e-19,4.2804604e-19,4.2726422e-19,4.2648667e-19,4.2571334e-19,4.2494424e-19,4.2417925e-19,4.2341838e-19,4.226616e-19,4.2190885e-19,4.2116012e-19,4.2041537e-19,4.1967456e-19,4.1893764e-19,4.1820458e-19,4.1747537e-19,4.1674998e-19,4.1602832e-19,4.153104e-19,4.1459618e-19,4.1388566e-19,4.1317876e-19,4.124755e-19,4.1177578e-19,4.1107963e-19,4.10387e-19,4.0969783e-19,4.0901215e-19,4.083299e-19,4.0765105e-19,4.0697558e-19,4.0630344e-19,4.056346e-19,4.0496912e-19,4.0430686e-19,4.0364783e-19,4.0299203e-19,4.023394e-19,4.0168994e-19,4.0104363e-19,4.0040042e-19,3.9976029e-19,3.991232e-19,3.9848917e-19,3.9785816e-19,3.9723012e-19,3.9660506e-19,3.9598294e-19,3.9536372e-19,3.9474742e-19,3.9413398e-19,3.935234e-19,3.9291562e-19,3.9231067e-19,3.917085e-19,3.9110911e-19,3.9051246e-19,3.8991852e-19,3.893273e-19,3.8873872e-19,3.8815282e-19,3.875696e-19,3.8698898e-19,3.8641093e-19,3.858355e-19,3.852626e-19,3.8469229e-19,3.8412448e-19,3.8355915e-19,3.8299633e-19,3.82436e-19,3.818781e-19,3.8132264e-19,3.8076961e-19,3.8021895e-19,3.7967068e-19,3.791248e-19,3.7858126e-19,3.7804005e-19,3.7750114e-19,3.7696453e-19,3.764302e-19,3.7589814e-19,3.7536836e-19,3.7484077e-19,3.743154e-19,3.7379224e-19,3.732713e-19,3.727525e-19,3.7223588e-19,3.7172137e-19,3.71209e-19,3.7069874e-19,3.701906e-19,3.6968454e-19,3.6918053e-19,3.6867859e-19,3.6817869e-19,3.676808e-19,3.6718496e-19,3.6669108e-19,3.6619922e-19,3.6570932e-19,3.6522136e-19,3.6473536e-19,3.6425134e-19,3.637692e-19,3.6328896e-19,3.6281064e-19,3.623342e-19,3.6185965e-19,3.6138694e-19,3.6091607e-19,3.6044703e-19,3.5997983e-19,3.5951443e-19,3.5905085e-19,3.5858905e-19,3.58129e-19,3.5767075e-19,3.5721425e-19,3.5675948e-19,3.5630647e-19,3.5585517e-19,3.5540557e-19,3.5495768e-19,3.5451146e-19,3.5406693e-19,3.5362408e-19,3.5318288e-19,3.5274331e-19,3.523054e-19,3.518691e-19,3.5143443e-19,3.5100138e-19,3.505699e-19,3.5014e-19,3.497117e-19,3.4928498e-19,3.4885978e-19,3.4843616e-19,3.4801406e-19,3.475935e-19,3.4717445e-19,3.4675693e-19,3.463409e-19,3.459264e-19,3.4551332e-19,3.4510177e-19,3.4469167e-19,3.4428301e-19,3.438758e-19,3.4347005e-19,3.4306574e-19,3.4266285e-19,3.4226138e-19,3.418613e-19,3.414626e-19,3.4106533e-19,3.4066945e-19,3.4027494e-19,3.3988177e-19,3.3948997e-19,3.3909954e-19,3.3871043e-19,3.3832266e-19,3.3793624e-19,3.3755113e-19,3.3716732e-19,3.3678483e-19,3.3640363e-19,3.3602374e-19,3.3564513e-19,3.3526778e-19,3.348917e-19,3.345169e-19,3.3414333e-19,3.3377105e-19,3.3339998e-19,3.3303015e-19,3.3266154e-19,3.3229417e-19,3.31928e-19,3.3156304e-19,3.311993e-19,3.3083673e-19,3.3047535e-19,3.3011517e-19,3.2975615e-19,3.293983e-19,3.2904162e-19,3.2868608e-19,3.2833171e-19,3.2797848e-19,3.276264e-19,3.272754e-19,3.2692559e-19,3.2657685e-19,3.2622925e-19,3.2588274e-19,3.2553734e-19,3.2519306e-19,3.2484983e-19,3.245077e-19,3.2416665e-19,3.2382668e-19,3.2348777e-19,3.2314992e-19,3.2281313e-19,3.224774e-19,3.2214272e-19,3.2180906e-19,3.2147643e-19,3.2114483e-19,3.2081427e-19,3.2048472e-19,3.201562e-19,3.1982869e-19,3.1950216e-19,3.1917663e-19,3.188521e-19,3.1852856e-19,3.18206e-19,3.178844e-19,3.175638e-19,3.1724416e-19,3.1692546e-19,3.1660775e-19,3.16291e-19,3.1597516e-19,3.156603e-19,3.1534638e-19,3.1503336e-19,3.147213e-19,3.1441016e-19,3.1409994e-19,3.1379063e-19,3.1348222e-19,3.1317474e-19,3.1286817e-19,3.1256247e-19,3.1225768e-19,3.119538e-19,3.116508e-19,3.1134864e-19,3.110474e-19,3.10747e-19,3.1044748e-19,3.1014884e-19,3.0985105e-19,3.0955412e-19,3.0925802e-19,3.089628e-19,3.086684e-19,3.0837485e-19,3.0808213e-19,3.0779026e-19,3.074992e-19,3.0720896e-19,3.0691955e-19,3.0663097e-19,3.0634319e-19,3.060562e-19,3.0577005e-19,3.0548468e-19,3.052001e-19,3.0491633e-19,3.0463335e-19,3.0435115e-19,3.0406973e-19,3.0378909e-19,3.0350924e-19,3.0323014e-19,3.0295182e-19,3.0267428e-19,3.0239748e-19,3.0212144e-19,3.0184617e-19,3.0157162e-19,3.0129785e-19,3.010248e-19,3.007525e-19,3.0048096e-19,3.002101e-19,2.9994003e-19,2.9967068e-19,2.9940203e-19,2.991341e-19,2.988669e-19,2.9860041e-19,2.9833463e-19,2.9806957e-19,2.9780518e-19,2.9754155e-19,2.9727858e-19,2.970163e-19,2.9675474e-19,2.9649387e-19,2.9623367e-19,2.9597414e-19,2.957153e-19,2.9545715e-19,2.9519967e-19,2.9494288e-19,2.9468674e-19,2.9443127e-19,2.9417645e-19,2.9392232e-19,2.9366881e-19,2.9341598e-19,2.931638e-19,2.9291225e-19,2.9266136e-19,2.924111e-19,2.921615e-19,2.9191256e-19,2.9166422e-19,2.9141653e-19,2.9116946e-19,2.9092301e-19,2.906772e-19,2.90432e-19,2.9018744e-19,2.8994348e-19,2.8970013e-19,2.894574e-19,2.8921527e-19,2.8897376e-19,2.8873285e-19,2.8849255e-19,2.8825285e-19,2.8801372e-19,2.877752e-19,2.8753726e-19,2.8729994e-19,2.8706318e-19,2.86827e-19,2.865914e-19,2.863564e-19,2.8612198e-19,2.8588812e-19,2.8565486e-19,2.8542213e-19,2.8518998e-19,2.849584e-19,2.8472738e-19,2.8449693e-19,2.8426703e-19,2.840377e-19,2.838089e-19,2.8358068e-19,2.83353e-19,2.8312585e-19,2.8289926e-19,2.8267323e-19,2.8244772e-19,2.8222275e-19,2.819983e-19,2.8177442e-19,2.8155103e-19,2.813282e-19,2.811059e-19,2.8088414e-19,2.8066287e-19,2.8044215e-19,2.8022193e-19,2.8000224e-19,2.7978304e-19,2.7956438e-19,2.7934623e-19,2.7912858e-19,2.7891145e-19,2.786948e-19,2.784787e-19,2.7826307e-19,2.7804795e-19,2.7783332e-19,2.7761918e-19,2.7740556e-19,2.771924e-19,2.7697975e-19,2.767676e-19,2.7655592e-19,2.7634473e-19,2.7613403e-19,2.759238e-19,2.7571403e-19,2.7550478e-19,2.7529597e-19,2.7508765e-19,2.748798e-19,2.7467243e-19,2.744655e-19,2.7425907e-19,2.7405308e-19,2.7384758e-19,2.7364254e-19,2.7343794e-19,2.732338e-19,2.7303012e-19,2.7282691e-19,2.7262412e-19,2.724218e-19,2.7221994e-19,2.7201853e-19,2.7181755e-19,2.7161703e-19,2.7141693e-19,2.712173e-19,2.7101808e-19,2.7081932e-19,2.7062098e-19,2.704231e-19,2.7022564e-19,2.7002861e-19,2.69832e-19,2.6963583e-19,2.694401e-19,2.6924478e-19,2.6904988e-19,2.688554e-19,2.6866136e-19,2.6846772e-19,2.6827452e-19,2.6808171e-19,2.6788934e-19,2.6769739e-19,2.6750582e-19,2.6731469e-19,2.6712394e-19,2.6693361e-19,2.667437e-19,2.665542e-19,2.6636508e-19,2.6617636e-19,2.6598804e-19,2.6580014e-19,2.6561263e-19,2.654255e-19,2.6523877e-19,2.6505245e-19,2.6486652e-19,2.6468097e-19,2.644958e-19,2.6431106e-19,2.6412668e-19,2.6394266e-19,2.6375905e-19,2.6357583e-19,2.6339297e-19,2.632105e-19,2.6302842e-19,2.6284672e-19,2.626654e-19,2.6248442e-19,2.6230383e-19,2.621236e-19,2.6194378e-19,2.6176428e-19,2.615852e-19,2.6140644e-19,2.6122806e-19,2.6105006e-19,2.6087242e-19,2.6069515e-19,2.605182e-19,2.6034166e-19,2.6016544e-19,2.599896e-19,2.598141e-19,2.5963897e-19,2.5946417e-19,2.5928974e-19,2.591157e-19,2.5894196e-19,2.5876857e-19,2.5859556e-19,2.5842286e-19,2.5825052e-19,2.5807852e-19,2.5790688e-19,2.5773555e-19,2.5756458e-19,2.5739395e-19,2.5722368e-19,2.5705372e-19,2.568841e-19,2.5671483e-19,2.5654588e-19,2.5637726e-19,2.5620898e-19,2.5604101e-19,2.558734e-19,2.557061e-19,2.5553915e-19,2.5537252e-19,2.552062e-19,2.550402e-19,2.5487456e-19,2.547092e-19,2.5454418e-19,2.543795e-19,2.542151e-19,2.5405105e-19,2.538873e-19,2.5372388e-19,2.5356077e-19,2.5339797e-19,2.5323548e-19,2.530733e-19,2.5291143e-19,2.5274987e-19,2.5258862e-19,2.5242768e-19,2.5226706e-19,2.5210674e-19,2.5194673e-19,2.5178703e-19,2.5162762e-19,2.514685e-19,2.513097e-19,2.511512e-19,2.50993e-19,2.5083508e-19,2.5067747e-19,2.5052015e-19,2.5036314e-19,2.5020642e-19,2.5005e-19,2.4989385e-19,2.49738e-19,2.4958247e-19,2.494272e-19,2.4927222e-19,2.4911754e-19,2.4896314e-19,2.4880903e-19,2.4865522e-19,2.4850168e-19,2.4834842e-19,2.4819547e-19,2.4804277e-19,2.4789036e-19,2.4773824e-19,2.4758638e-19,2.4743482e-19,2.4728352e-19,2.471325e-19,2.4698176e-19,2.4683132e-19,2.4668113e-19,2.4653123e-19,2.463816e-19,2.462322e-19,2.460831e-19,2.459343e-19,2.4578573e-19,2.4563744e-19,2.4548942e-19,2.4534167e-19,2.451942e-19,2.4504698e-19,2.449e-19,2.4475333e-19,2.446069e-19,2.4446072e-19,2.4431482e-19,2.441692e-19,2.440238e-19,2.4387867e-19,2.437338e-19,2.435892e-19,2.4344486e-19,2.4330078e-19,2.4315693e-19,2.4301336e-19,2.4287002e-19,2.4272695e-19,2.4258413e-19,2.4244155e-19,2.4229922e-19,2.4215715e-19,2.4201534e-19,2.4187376e-19,2.4173244e-19,2.4159138e-19,2.4145056e-19,2.4130996e-19,2.4116963e-19,2.4102952e-19,2.4088968e-19,2.4075006e-19,2.406107e-19,2.404716e-19,2.4033273e-19,2.4019407e-19,2.4005567e-19,2.399175e-19,2.397796e-19,2.396419e-19,2.3950446e-19,2.3936725e-19,2.3923025e-19,2.390935e-19,2.3895702e-19,2.3882074e-19,2.386847e-19,2.3854888e-19,2.384133e-19,2.3827796e-19,2.3814284e-19,2.3800796e-19,2.378733e-19,2.3773887e-19,2.3760466e-19,2.3747068e-19,2.3733696e-19,2.3720342e-19,2.3707012e-19,2.3693705e-19,2.368042e-19,2.3667157e-19,2.3653917e-19,2.3640698e-19,2.3627502e-19,2.361433e-19,2.3601177e-19,2.3588048e-19,2.357494e-19,2.3561852e-19,2.3548788e-19,2.3535747e-19,2.3522724e-19,2.3509724e-19,2.3496748e-19,2.348379e-19,2.3470854e-19,2.345794e-19,2.344505e-19,2.3432179e-19,2.3419326e-19,2.3406497e-19,2.3393691e-19,2.3380904e-19,2.3368137e-19,2.3355393e-19,2.3342667e-19,2.3329965e-19,2.331728e-19,2.330462e-19,2.329198e-19,2.3279357e-19,2.3266758e-19,2.3254177e-19,2.3241617e-19,2.3229077e-19,2.3216558e-19,2.320406e-19,2.319158e-19,2.3179123e-19,2.3166685e-19,2.3154267e-19,2.3141867e-19,2.312949e-19,2.3117129e-19,2.310479e-19,2.309247e-19,2.3080172e-19,2.306789e-19,2.305563e-19,2.304339e-19,2.303117e-19,2.3018968e-19,2.3006785e-19,2.299462e-19,2.2982477e-19,2.2970353e-19,2.2958248e-19,2.294616e-19,2.2934094e-19,2.2922046e-19,2.2910016e-19,2.2898006e-19,2.2886014e-19,2.287404e-19,2.2862086e-19,2.285015e-19,2.2838234e-19,2.2826336e-19,2.2814458e-19,2.2802596e-19,2.2790754e-19,2.277893e-19,2.2767123e-19,2.2755338e-19,2.274357e-19,2.2731818e-19,2.2720085e-19,2.270837e-19,2.2696673e-19,2.2684997e-19,2.2673336e-19,2.2661693e-19,2.265007e-19,2.2638463e-19,2.2626874e-19,2.2615304e-19,2.260375e-19,2.2592215e-19,2.2580697e-19,2.2569196e-19,2.2557714e-19,2.2546247e-19,2.2534801e-19,2.252337e-19,2.2511958e-19,2.250056e-19,2.2489185e-19,2.2477821e-19,2.246648e-19,2.2455152e-19,2.2443842e-19,2.243255e-19,2.2421273e-19,2.2410016e-19,2.2398774e-19,2.238755e-19,2.2376342e-19,2.2365152e-19,2.2353977e-19,2.234282e-19,2.233168e-19,2.2320554e-19,2.2309446e-19,2.2298357e-19,2.228728e-19,2.2276225e-19,2.2265182e-19,2.2254157e-19,2.2243148e-19,2.2232157e-19,2.222118e-19,2.221022e-19,2.2199276e-19,2.218835e-19,2.2177436e-19,2.216654e-19,2.2155663e-19,2.2144799e-19,2.2133952e-19,2.212312e-19,2.2112306e-19,2.2101506e-19,2.2090722e-19,2.2079953e-19,2.2069202e-19,2.2058464e-19,2.2047744e-19,2.2037038e-19,2.202635e-19,2.2015673e-19,2.2005015e-19,2.1994373e-19,2.1983744e-19,2.1973133e-19,2.1962534e-19,2.1951952e-19,2.1941387e-19,2.1930835e-19,2.19203e-19,2.1909778e-19,2.1899273e-19,2.188878e-19,2.1878307e-19,2.1867846e-19,2.18574e-19,2.184697e-19,2.1836552e-19,2.1826153e-19,2.1815767e-19,2.1805396e-19,2.1795038e-19,2.1784698e-19,2.1774372e-19,2.1764058e-19,2.1753762e-19,2.1743476e-19,2.173321e-19,2.1722955e-19,2.1712716e-19,2.170249e-19,2.169228e-19,2.1682084e-19,2.1671902e-19,2.1661735e-19,2.1651582e-19,2.1641442e-19,2.1631317e-19,2.1621207e-19,2.1611112e-19,2.160103e-19,2.1590961e-19,2.1580907e-19,2.1570867e-19,2.1560841e-19,2.155083e-19,2.154083e-19,2.1530847e-19,2.1520876e-19,2.151092e-19,2.1500978e-19,2.1491048e-19,2.1481133e-19,2.1471232e-19,2.1461344e-19,2.145147e-19,2.144161e-19,2.1431762e-19,2.1421929e-19,2.1412109e-19,2.1402303e-19,2.1392511e-19,2.1382731e-19,2.1372965e-19,2.1363212e-19,2.1353474e-19,2.1343747e-19,2.1334035e-19,2.1324335e-19,2.1314649e-19,2.1304975e-19,2.1295315e-19,2.128567e-19,2.1276035e-19,2.1266415e-19,2.1256807e-19,2.1247212e-19,2.1237631e-19,2.1228063e-19,2.1218506e-19,2.1208964e-19,2.1199433e-19,2.1189917e-19,2.1180412e-19,2.117092e-19,2.1161442e-19,2.1151975e-19,2.1142522e-19,2.1133082e-19,2.1123653e-19,2.1114237e-19,2.1104835e-19,2.1095444e-19,2.1086067e-19,2.1076702e-19,2.1067348e-19,2.1058009e-19,2.104868e-19,2.1039365e-19,2.103006e-19,2.102077e-19,2.1011491e-19,2.1002226e-19,2.099297e-19,2.0983729e-19,2.09745e-19,2.0965282e-19,2.0956077e-19,2.0946883e-19,2.0937703e-19,2.0928533e-19,2.0919376e-19,2.091023e-19,2.0901098e-19,2.0891975e-19,2.0882867e-19,2.0873771e-19,2.0864685e-19,2.0855612e-19,2.0846549e-19,2.0837499e-19,2.0828461e-19,2.0819435e-19,2.0810419e-19,2.0801417e-19,2.0792425e-19,2.0783445e-19,2.0774478e-19,2.0765521e-19,2.0756578e-19,2.0747643e-19,2.0738722e-19,2.072981e-19,2.0720913e-19,2.0712025e-19,2.070315e-19,2.0694284e-19,2.0685431e-19,2.0676589e-19,2.0667759e-19,2.065894e-19,2.0650132e-19,2.0641336e-19,2.063255e-19,2.0623776e-19,2.0615012e-19,2.0606261e-19,2.059752e-19,2.058879e-19,2.0580071e-19,2.0571364e-19,2.0562668e-19,2.0553983e-19,2.0545309e-19,2.0536644e-19,2.0527993e-19,2.051935e-19,2.051072e-19,2.05021e-19,2.0493491e-19,2.0484893e-19,2.0476307e-19,2.046773e-19,2.0459163e-19,2.045061e-19,2.0442064e-19,2.0433531e-19,2.0425009e-19,2.0416496e-19,2.0407995e-19,2.0399504e-19,2.0391023e-19,2.0382554e-19,2.0374094e-19,2.0365646e-19,2.0357208e-19,2.034878e-19,2.0340362e-19,2.0331955e-19,2.0323559e-19,2.0315173e-19,2.0306798e-19,2.0298432e-19,2.0290077e-19,2.0281733e-19,2.0273398e-19,2.0265075e-19,2.025676e-19,2.0248457e-19,2.0240162e-19,2.023188e-19,2.0223606e-19,2.0215344e-19,2.020709e-19,2.0198848e-19,2.0190615e-19,2.0182393e-19,2.017418e-19,2.0165977e-19,2.0157785e-19,2.0149603e-19,2.014143e-19,2.0133267e-19,2.0125114e-19,2.011697e-19,2.0108838e-19,2.0100716e-19,2.0092602e-19,2.0084498e-19,2.0076405e-19,2.0068322e-19,2.0060247e-19,2.0052183e-19,2.0044127e-19,2.0036083e-19,2.0028047e-19,2.0020022e-19,2.0012006e-19,2.0004e-19,1.9996003e-19,1.9988016e-19,1.9980038e-19,1.9972069e-19,1.9964111e-19,1.9956161e-19,1.9948222e-19,1.9940291e-19,1.9932371e-19,1.9924461e-19,1.9916559e-19,1.9908666e-19,1.9900783e-19,1.9892909e-19,1.9885045e-19,1.987719e-19,1.9869344e-19,1.9861507e-19,1.985368e-19,1.9845862e-19,1.9838054e-19,1.9830254e-19,1.9822464e-19,1.9814682e-19,1.9806911e-19,1.9799147e-19,1.9791395e-19,1.9783649e-19,1.9775914e-19,1.9768187e-19,1.976047e-19,1.9752762e-19,1.9745062e-19,1.9737372e-19,1.9729691e-19,1.9722019e-19,1.9714355e-19,1.97067e-19,1.9699054e-19,1.9691417e-19,1.9683789e-19,1.9676171e-19,1.9668561e-19,1.9660959e-19,1.9653367e-19,1.9645783e-19,1.9638207e-19,1.9630641e-19,1.9623084e-19,1.9615535e-19,1.9607995e-19,1.9600463e-19,1.9592941e-19,1.9585427e-19,1.9577921e-19,1.9570425e-19,1.9562937e-19,1.9555457e-19,1.9547985e-19,1.9540524e-19,1.9533069e-19,1.9525624e-19,1.9518186e-19,1.9510758e-19,1.950334e-19,1.9495927e-19,1.9488524e-19,1.948113e-19,1.9473743e-19,1.9466366e-19,1.9458996e-19,1.9451634e-19,1.9444283e-19,1.9436938e-19,1.9429601e-19,1.9422274e-19,1.9414954e-19,1.9407644e-19,1.940034e-19,1.9393045e-19,1.9385758e-19,1.937848e-19,1.937121e-19,1.9363949e-19,1.9356695e-19,1.9349449e-19,1.9342212e-19,1.9334982e-19,1.9327761e-19,1.9320548e-19,1.9313343e-19,1.9306146e-19,1.9298957e-19,1.9291775e-19,1.9284603e-19,1.9277438e-19,1.927028e-19,1.9263133e-19,1.925599e-19,1.9248857e-19,1.9241732e-19,1.9234616e-19,1.9227504e-19,1.9220404e-19,1.9213309e-19,1.9206224e-19,1.9199146e-19,1.9192077e-19,1.9185014e-19,1.9177959e-19,1.9170912e-19,1.9163872e-19,1.9156843e-19,1.9149818e-19,1.9142802e-19,1.9135793e-19,1.9128793e-19,1.91218e-19,1.9114815e-19,1.9107839e-19,1.9100868e-19,1.9093907e-19,1.9086951e-19,1.9080005e-19,1.9073065e-19,1.9066133e-19,1.9059208e-19,1.9052292e-19,1.9045383e-19,1.9038481e-19,1.9031587e-19,1.90247e-19,1.901782e-19,1.9010949e-19,1.9004084e-19,1.8997228e-19,1.8990378e-19,1.8983535e-19,1.8976701e-19,1.8969874e-19,1.8963054e-19,1.8956241e-19,1.8949436e-19,1.8942638e-19,1.8935847e-19,1.8929064e-19,1.8922288e-19,1.8915519e-19,1.8908757e-19,1.8902002e-19,1.8895256e-19,1.8888515e-19,1.8881783e-19,1.8875057e-19,1.886834e-19,1.8861628e-19,1.8854924e-19,1.8848227e-19,1.8841538e-19,1.8834855e-19,1.8828179e-19,1.8821511e-19,1.881485e-19,1.8808196e-19,1.8801548e-19,1.8794908e-19,1.8788275e-19,1.8781649e-19,1.877503e-19,1.8768418e-19,1.8761812e-19,1.8755215e-19,1.8748624e-19,1.874204e-19,1.8735463e-19,1.8728892e-19,1.8722328e-19,1.8715772e-19,1.8709222e-19,1.8702679e-19,1.8696143e-19,1.8689613e-19,1.8683092e-19,1.8676576e-19,1.8670067e-19,1.8663566e-19,1.865707e-19,1.8650582e-19,1.86441e-19,1.8637626e-19,1.8631158e-19,1.8624697e-19,1.8618242e-19,1.8611794e-19,1.8605352e-19,1.8598918e-19,1.8592491e-19,1.858607e-19,1.8579655e-19,1.8573247e-19,1.8566846e-19,1.856045e-19,1.8554063e-19,1.8547681e-19,1.8541306e-19,1.8534938e-19,1.8528577e-19,1.8522222e-19,1.8515873e-19,1.8509531e-19,1.8503195e-19,1.8496866e-19,1.8490543e-19,1.8484227e-19,1.8477917e-19,1.8471614e-19,1.8465317e-19,1.8459028e-19,1.8452744e-19,1.8446466e-19,1.8440195e-19,1.8433929e-19,1.8427672e-19,1.842142e-19,1.8415174e-19,1.8408934e-19,1.8402702e-19,1.8396475e-19,1.8390255e-19,1.8384041e-19,1.8377834e-19,1.8371632e-19,1.8365436e-19,1.8359248e-19,1.8353065e-19,1.8346889e-19,1.8340719e-19,1.8334555e-19,1.8328397e-19,1.8322246e-19,1.8316101e-19,1.8309961e-19,1.8303828e-19,1.8297702e-19,1.829158e-19,1.8285466e-19,1.8279358e-19,1.8273256e-19,1.826716e-19,1.8261069e-19,1.8254986e-19,1.8248908e-19,1.8242835e-19,1.8236771e-19,1.823071e-19,1.8224657e-19,1.8218609e-19,1.8212567e-19,1.8206531e-19,1.8200502e-19,1.8194477e-19,1.8188461e-19,1.818245e-19,1.8176444e-19,1.8170444e-19,1.816445e-19,1.8158461e-19,1.815248e-19,1.8146503e-19,1.8140532e-19,1.8134569e-19,1.812861e-19,1.8122657e-19,1.8116711e-19,1.811077e-19,1.8104836e-19,1.8098906e-19,1.8092982e-19,1.8087064e-19,1.8081154e-19,1.8075247e-19,1.8069347e-19,1.8063452e-19,1.8057563e-19,1.8051681e-19,1.8045803e-19,1.8039933e-19,1.8034066e-19,1.8028208e-19,1.8022353e-19,1.8016504e-19,1.8010661e-19,1.8004824e-19,1.7998993e-19,1.7993166e-19,1.7987346e-19,1.7981531e-19,1.7975723e-19,1.796992e-19,1.7964122e-19,1.7958329e-19,1.7952544e-19,1.7946763e-19,1.7940987e-19,1.7935217e-19,1.7929453e-19,1.7923695e-19,1.7917942e-19,1.7912194e-19,1.7906452e-19,1.7900716e-19,1.7894984e-19,1.7889259e-19,1.7883539e-19,1.7877825e-19,1.7872115e-19,1.7866412e-19,1.7860714e-19,1.785502e-19,1.7849334e-19,1.7843652e-19,1.7837975e-19,1.7832304e-19,1.7826639e-19,1.782098e-19,1.7815325e-19,1.7809674e-19,1.7804031e-19,1.7798392e-19,1.7792758e-19,1.7787131e-19,1.7781509e-19,1.7775892e-19,1.7770278e-19,1.7764673e-19,1.7759071e-19,1.7753475e-19,1.7747884e-19,1.7742299e-19,1.7736718e-19,1.7731144e-19,1.7725575e-19,1.7720009e-19,1.771445e-19,1.7708896e-19,1.7703348e-19,1.7697803e-19,1.7692266e-19,1.7686732e-19,1.7681204e-19,1.7675681e-19,1.7670164e-19,1.7664651e-19,1.7659144e-19,1.7653642e-19,1.7648145e-19,1.7642654e-19,1.7637167e-19,1.7631686e-19,1.7626208e-19,1.7620737e-19,1.761527e-19,1.7609809e-19,1.7604354e-19,1.7598902e-19,1.7593456e-19,1.7588014e-19,1.758258e-19,1.7577149e-19,1.7571723e-19,1.7566301e-19,1.7560885e-19,1.7555474e-19,1.7550069e-19,1.7544669e-19,1.7539273e-19,1.7533882e-19,1.7528495e-19,1.7523114e-19,1.7517738e-19,1.7512367e-19,1.7507001e-19,1.750164e-19,1.7496284e-19,1.7490932e-19,1.7485586e-19,1.7480244e-19,1.7474908e-19,1.7469576e-19,1.7464249e-19,1.7458926e-19,1.745361e-19,1.7448297e-19,1.744299e-19,1.7437687e-19,1.743239e-19,1.7427097e-19,1.7421808e-19,1.7416526e-19,1.7411246e-19,1.7405973e-19,1.7400703e-19,1.739544e-19,1.739018e-19,1.7384926e-19,1.7379676e-19,1.7374431e-19,1.736919e-19,1.7363954e-19,1.7358724e-19,1.7353497e-19,1.7348277e-19,1.7343059e-19,1.7337848e-19,1.733264e-19,1.7327437e-19,1.7322239e-19,1.7317047e-19,1.7311858e-19,1.7306673e-19,1.7301495e-19,1.729632e-19,1.729115e-19,1.7285984e-19,1.7280824e-19,1.7275667e-19,1.7270515e-19,1.7265369e-19,1.7260226e-19,1.725509e-19,1.7249956e-19,1.7244827e-19,1.7239703e-19,1.7234583e-19,1.7229469e-19,1.7224359e-19,1.7219252e-19,1.7214152e-19,1.7209054e-19,1.7203962e-19,1.7198875e-19,1.7193792e-19,1.7188714e-19,1.718364e-19,1.7178569e-19,1.7173504e-19,1.7168444e-19,1.7163386e-19,1.7158335e-19,1.7153288e-19,1.7148245e-19,1.7143207e-19,1.7138173e-19,1.7133144e-19,1.7128117e-19,1.7123098e-19,1.7118081e-19,1.7113069e-19,1.7108061e-19,1.7103059e-19,1.709806e-19,1.7093066e-19,1.7088075e-19,1.708309e-19,1.7078109e-19,1.7073132e-19,1.706816e-19,1.7063192e-19,1.7058227e-19,1.7053268e-19,1.7048313e-19,1.7043361e-19,1.7038415e-19,1.7033474e-19,1.7028535e-19,1.7023602e-19,1.7018672e-19,1.7013747e-19,1.7008826e-19,1.700391e-19,1.6998997e-19,1.699409e-19,1.6989185e-19,1.6984286e-19,1.697939e-19,1.69745e-19,1.6969613e-19,1.696473e-19,1.6959852e-19,1.6954977e-19,1.6950107e-19,1.6945241e-19,1.694038e-19,1.6935523e-19,1.693067e-19,1.692582e-19,1.6920975e-19,1.6916134e-19,1.6911298e-19,1.6906465e-19,1.6901637e-19,1.6896813e-19,1.6891992e-19,1.6887177e-19,1.6882365e-19,1.6877557e-19,1.6872754e-19,1.6867954e-19,1.6863159e-19,1.6858367e-19,1.685358e-19,1.6848797e-19,1.6844017e-19,1.6839243e-19,1.6834471e-19,1.6829704e-19,1.6824942e-19,1.6820183e-19,1.6815428e-19,1.6810678e-19,1.680593e-19,1.6801187e-19,1.6796449e-19,1.6791715e-19,1.6786983e-19,1.6782256e-19,1.6777534e-19,1.6772815e-19,1.6768101e-19,1.6763389e-19,1.6758683e-19,1.675398e-19,1.6749282e-19,1.6744586e-19,1.6739896e-19,1.6735208e-19,1.6730525e-19,1.6725845e-19,1.672117e-19,1.67165e-19,1.6711831e-19,1.6707168e-19,1.6702508e-19,1.6697853e-19,1.66932e-19,1.6688552e-19,1.6683909e-19,1.6679269e-19,1.6674631e-19,1.6669999e-19,1.6665371e-19,1.6660746e-19,1.6656126e-19,1.6651508e-19,1.6646895e-19,1.6642286e-19,1.663768e-19,1.6633078e-19,1.662848e-19,1.6623886e-19,1.6619295e-19,1.661471e-19,1.6610127e-19,1.6605547e-19,1.6600972e-19,1.65964e-19,1.6591833e-19,1.6587269e-19,1.658271e-19,1.6578154e-19,1.65736e-19,1.6569052e-19,1.6564506e-19,1.6559966e-19,1.6555428e-19,1.6550894e-19,1.6546364e-19,1.6541838e-19,1.6537314e-19,1.6532796e-19,1.652828e-19,1.6523769e-19,1.6519261e-19,1.6514757e-19,1.6510256e-19,1.650576e-19,1.6501266e-19,1.6496777e-19,1.6492291e-19,1.6487809e-19,1.6483329e-19,1.6478854e-19,1.6474384e-19,1.6469916e-19,1.6465453e-19,1.6460991e-19,1.6456535e-19,1.6452082e-19,1.6447632e-19,1.6443186e-19,1.6438744e-19,1.6434306e-19,1.642987e-19,1.6425438e-19,1.6421011e-19,1.6416587e-19,1.6412165e-19,1.6407749e-19,1.6403334e-19,1.6398924e-19,1.6394518e-19,1.6390115e-19,1.6385715e-19,1.638132e-19,1.6376928e-19,1.6372538e-19,1.6368153e-19,1.6363772e-19,1.6359394e-19,1.6355019e-19,1.6350648e-19,1.6346279e-19,1.6341916e-19,1.6337554e-19,1.6333197e-19,1.6328843e-19,1.6324493e-19,1.6320147e-19,1.6315803e-19,1.6311463e-19,1.6307126e-19,1.6302794e-19,1.6298464e-19,1.6294138e-19,1.6289815e-19,1.6285496e-19,1.628118e-19,1.6276868e-19,1.627256e-19,1.6268254e-19,1.6263952e-19,1.6259653e-19,1.6255358e-19,1.6251066e-19,1.6246777e-19,1.6242493e-19,1.6238211e-19,1.6233933e-19,1.6229657e-19,1.6225387e-19,1.6221118e-19,1.6216854e-19,1.6212591e-19,1.6208334e-19,1.6204079e-19,1.6199828e-19,1.619558e-19,1.6191335e-19,1.6187094e-19,1.6182856e-19,1.617862e-19,1.617439e-19,1.6170162e-19,1.6165937e-19,1.6161716e-19,1.6157497e-19,1.6153283e-19,1.614907e-19,1.6144862e-19,1.6140658e-19,1.6136456e-19,1.6132258e-19,1.6128063e-19,1.6123871e-19,1.6119682e-19,1.6115497e-19,1.6111315e-19,1.6107136e-19,1.610296e-19,1.6098788e-19,1.6094619e-19,1.6090453e-19,1.608629e-19,1.6082131e-19,1.6077975e-19,1.6073823e-19,1.6069673e-19,1.6065526e-19,1.6061383e-19,1.6057243e-19,1.6053106e-19,1.6048972e-19,1.6044842e-19,1.6040715e-19,1.603659e-19,1.603247e-19,1.6028351e-19,1.6024237e-19,1.6020126e-19,1.6016017e-19,1.6011912e-19,1.6007811e-19,1.6003711e-19,1.5999616e-19,1.5995524e-19,1.5991434e-19,1.5987349e-19,1.5983265e-19,1.5979186e-19,1.5975108e-19,1.5971034e-19,1.5966964e-19,1.5962897e-19,1.5958832e-19,1.5954771e-19,1.5950712e-19,1.5946657e-19,1.5942606e-19,1.5938557e-19,1.593451e-19,1.5930467e-19,1.5926428e-19,1.5922392e-19,1.5918358e-19,1.5914327e-19,1.59103e-19,1.5906276e-19,1.5902254e-19,1.5898237e-19,1.5894221e-19,1.589021e-19,1.58862e-19,1.5882193e-19,1.5878191e-19,1.587419e-19,1.5870193e-19,1.5866199e-19,1.5862208e-19,1.5858221e-19,1.5854236e-19,1.5850254e-19,1.5846274e-19,1.5842299e-19,1.5838326e-19,1.5834355e-19,1.5830389e-19,1.5826425e-19,1.5822463e-19,1.5818504e-19,1.5814551e-19,1.5810598e-19,1.5806649e-19,1.5802703e-19,1.579876e-19,1.5794819e-19,1.5790882e-19,1.5786947e-19,1.5783016e-19,1.5779087e-19,1.5775161e-19,1.5771239e-19,1.5767319e-19,1.5763403e-19,1.5759488e-19,1.5755577e-19,1.575167e-19,1.5747764e-19,1.5743862e-19,1.5739962e-19,1.5736066e-19,1.5732171e-19,1.5728281e-19,1.5724393e-19,1.5720508e-19,1.5716627e-19,1.5712747e-19,1.5708871e-19,1.5704997e-19,1.5701126e-19,1.5697259e-19,1.5693395e-19,1.5689531e-19,1.5685672e-19,1.5681817e-19,1.5677963e-19,1.5674112e-19,1.5670265e-19,1.566642e-19,1.5662577e-19,1.5658738e-19,1.5654901e-19,1.5651068e-19,1.5647237e-19,1.5643408e-19,1.5639584e-19,1.5635761e-19,1.5631942e-19,1.5628125e-19,1.5624311e-19,1.56205e-19,1.561669e-19,1.5612885e-19,1.5609082e-19,1.5605282e-19,1.5601485e-19,1.559769e-19,1.5593898e-19,1.559011e-19,1.5586323e-19,1.558254e-19,1.5578758e-19,1.5574981e-19,1.5571205e-19,1.5567433e-19,1.5563663e-19,1.5559895e-19,1.5556132e-19,1.555237e-19,1.5548611e-19,1.5544855e-19,1.5541102e-19,1.5537351e-19,1.5533603e-19,1.5529857e-19,1.5526114e-19,1.5522375e-19,1.5518637e-19,1.5514903e-19,1.5511172e-19,1.5507442e-19,1.5503716e-19,1.5499992e-19,1.5496271e-19,1.5492553e-19,1.5488837e-19,1.5485124e-19,1.5481414e-19,1.5477706e-19,1.5474002e-19,1.5470299e-19,1.5466599e-19,1.5462902e-19,1.5459208e-19,1.5455516e-19,1.5451827e-19,1.544814e-19,1.5444456e-19,1.5440775e-19,1.5437097e-19,1.5433421e-19,1.5429748e-19,1.5426077e-19,1.5422409e-19,1.5418744e-19,1.5415081e-19,1.541142e-19,1.5407763e-19,1.5404108e-19,1.5400455e-19,1.5396805e-19,1.5393158e-19,1.5389513e-19,1.5385871e-19,1.5382231e-19,1.5378596e-19,1.537496e-19,1.5371329e-19,1.53677e-19,1.5364073e-19,1.5360449e-19,1.5356828e-19,1.5353209e-19,1.5349593e-19,1.5345979e-19,1.5342368e-19,1.5338759e-19,1.5335152e-19,1.5331548e-19,1.5327948e-19,1.5324349e-19,1.5320754e-19,1.5317159e-19,1.5313569e-19,1.5309981e-19,1.5306394e-19,1.5302812e-19,1.529923e-19,1.5295653e-19,1.5292076e-19,1.5288503e-19,1.5284932e-19,1.5281364e-19,1.5277797e-19,1.5274234e-19,1.5270674e-19,1.5267115e-19,1.5263559e-19,1.5260005e-19,1.5256456e-19,1.5252907e-19,1.524936e-19,1.5245816e-19,1.5242276e-19,1.5238737e-19,1.5235201e-19,1.5231669e-19,1.5228137e-19,1.5224608e-19,1.5221081e-19,1.5217558e-19,1.5214037e-19,1.5210518e-19,1.5207001e-19,1.5203488e-19,1.5199975e-19,1.5196466e-19,1.5192961e-19,1.5189456e-19,1.5185953e-19,1.5182454e-19,1.5178957e-19,1.5175462e-19,1.517197e-19,1.516848e-19,1.5164993e-19,1.5161508e-19,1.5158025e-19,1.5154546e-19,1.5151068e-19,1.5147591e-19,1.5144118e-19,1.5140648e-19,1.513718e-19,1.5133714e-19,1.513025e-19,1.512679e-19,1.512333e-19,1.5119874e-19,1.5116421e-19,1.5112968e-19,1.5109519e-19,1.5106072e-19,1.5102629e-19,1.5099186e-19,1.5095746e-19,1.5092308e-19,1.5088873e-19,1.508544e-19,1.508201e-19,1.5078582e-19,1.5075156e-19,1.5071732e-19,1.5068311e-19,1.5064892e-19,1.5061476e-19,1.5058062e-19,1.505465e-19,1.5051241e-19,1.5047833e-19,1.5044429e-19,1.5041027e-19,1.5037627e-19,1.5034227e-19,1.5030832e-19,1.5027439e-19,1.5024048e-19,1.5020659e-19,1.5017273e-19,1.5013889e-19,1.5010507e-19,1.5007127e-19,1.500375e-19,1.5000375e-19,1.4997002e-19,1.4993631e-19,1.4990264e-19,1.4986897e-19,1.4983534e-19,1.4980172e-19,1.4976813e-19,1.4973457e-19,1.4970101e-19,1.496675e-19,1.4963399e-19,1.4960051e-19,1.4956705e-19,1.4953363e-19,1.495002e-19,1.4946682e-19,1.4943345e-19,1.4940011e-19,1.4936678e-19,1.4933349e-19,1.4930021e-19,1.4926695e-19,1.4923372e-19,1.492005e-19,1.4916733e-19,1.4913415e-19,1.4910101e-19,1.4906789e-19,1.4903479e-19,1.4900171e-19,1.4896865e-19,1.4893563e-19,1.489026e-19,1.4886961e-19,1.4883664e-19,1.488037e-19,1.4877077e-19,1.4873787e-19,1.4870499e-19,1.4867213e-19,1.4863929e-19,1.4860647e-19,1.4857368e-19,1.4854091e-19,1.4850816e-19,1.4847543e-19,1.4844273e-19,1.4841004e-19,1.4837737e-19,1.4834472e-19,1.4831211e-19,1.482795e-19,1.4824693e-19,1.4821438e-19,1.4818185e-19,1.4814933e-19,1.4811683e-19,1.4808437e-19,1.4805191e-19,1.4801949e-19,1.4798707e-19,1.479547e-19,1.4792233e-19,1.4788998e-19,1.4785767e-19,1.4782536e-19,1.4779308e-19,1.4776082e-19,1.4772859e-19,1.4769637e-19,1.4766417e-19,1.4763199e-19,1.4759985e-19,1.4756772e-19,1.475356e-19,1.4750352e-19,1.4747144e-19,1.4743939e-19,1.4740736e-19,1.4737536e-19,1.4734337e-19,1.473114e-19,1.4727946e-19,1.4724755e-19,1.4721563e-19,1.4718375e-19,1.471519e-19,1.4712006e-19,1.4708824e-19,1.4705643e-19,1.4702466e-19,1.4699289e-19,1.4696116e-19,1.4692944e-19,1.4689775e-19,1.4686607e-19,1.4683441e-19,1.4680278e-19,1.4677117e-19,1.4673957e-19,1.4670799e-19,1.4667644e-19,1.466449e-19,1.466134e-19,1.465819e-19,1.4655044e-19,1.4651898e-19,1.4648755e-19,1.4645614e-19,1.4642475e-19,1.4639338e-19,1.4636202e-19,1.4633069e-19,1.4629938e-19,1.4626809e-19,1.4623682e-19,1.4620557e-19,1.4617434e-19,1.4614313e-19,1.4611194e-19,1.4608077e-19,1.4604962e-19,1.4601848e-19,1.4598737e-19,1.4595628e-19,1.4592521e-19,1.4589416e-19,1.4586313e-19,1.4583212e-19,1.4580113e-19,1.4577016e-19,1.4573921e-19,1.4570827e-19,1.4567735e-19,1.4564646e-19,1.456156e-19,1.4558473e-19,1.4555389e-19,1.4552309e-19,1.454923e-19,1.4546151e-19,1.4543076e-19,1.4540002e-19,1.453693e-19,1.453386e-19,1.4530794e-19,1.4527727e-19,1.4524663e-19,1.45216e-19,1.4518541e-19,1.4515483e-19,1.4512426e-19,1.4509372e-19,1.4506321e-19,1.4503269e-19,1.450022e-19,1.4497175e-19,1.449413e-19,1.4491086e-19,1.4488045e-19,1.4485008e-19,1.448197e-19,1.4478935e-19,1.4475902e-19,1.447287e-19,1.4469841e-19,1.4466814e-19,1.4463788e-19,1.4460765e-19,1.4457743e-19,1.4454723e-19,1.4451705e-19,1.4448688e-19,1.4445674e-19,1.4442663e-19,1.4439651e-19,1.4436644e-19,1.4433636e-19,1.4430632e-19,1.4427629e-19,1.4424628e-19,1.4421628e-19,1.4418632e-19,1.4415636e-19,1.4412642e-19,1.440965e-19,1.4406661e-19,1.4403673e-19,1.4400686e-19,1.4397703e-19,1.439472e-19,1.439174e-19,1.438876e-19,1.4385784e-19,1.4382808e-19,1.4379834e-19,1.4376864e-19,1.4373894e-19,1.4370927e-19,1.436796e-19,1.4364997e-19,1.4362035e-19,1.4359075e-19,1.4356115e-19,1.4353159e-19,1.4350205e-19,1.4347251e-19,1.43443e-19,1.4341351e-19,1.4338403e-19,1.4335457e-19,1.4332513e-19,1.4329572e-19,1.4326631e-19,1.4323692e-19,1.4320756e-19,1.431782e-19,1.4314888e-19,1.4311957e-19,1.4309028e-19,1.4306099e-19,1.4303173e-19,1.4300249e-19,1.4297327e-19,1.4294406e-19,1.4291488e-19,1.4288572e-19,1.4285656e-19,1.4282743e-19,1.4279831e-19,1.4276922e-19,1.4274013e-19,1.4271107e-19,1.4268203e-19,1.42653e-19,1.4262399e-19,1.4259499e-19,1.4256603e-19,1.4253706e-19,1.4250812e-19,1.424792e-19,1.4245031e-19,1.4242141e-19,1.4239255e-19,1.423637e-19,1.4233487e-19,1.4230605e-19,1.4227725e-19,1.4224848e-19,1.4221971e-19,1.4219096e-19,1.4216223e-19,1.4213353e-19,1.4210483e-19,1.4207615e-19,1.420475e-19,1.4201886e-19,1.4199023e-19,1.4196162e-19,1.4193304e-19,1.4190446e-19,1.418759e-19,1.4184736e-19,1.4181885e-19,1.4179034e-19,1.4176185e-19,1.4173339e-19,1.4170493e-19,1.416765e-19,1.4164808e-19,1.4161968e-19,1.415913e-19,1.4156293e-19,1.4153458e-19,1.4150625e-19,1.4147793e-19,1.4144963e-19,1.4142136e-19,1.413931e-19,1.4136484e-19,1.4133662e-19,1.413084e-19,1.412802e-19,1.4125202e-19,1.4122386e-19,1.4119571e-19,1.4116759e-19,1.4113946e-19,1.4111138e-19,1.4108329e-19,1.4105523e-19,1.4102719e-19,1.4099917e-19,1.4097114e-19,1.4094315e-19,1.4091517e-19,1.4088721e-19,1.4085927e-19,1.4083134e-19,1.4080343e-19,1.4077553e-19,1.4074765e-19,1.4071978e-19,1.4069195e-19,1.406641e-19,1.4063629e-19,1.406085e-19,1.4058073e-19,1.4055295e-19,1.405252e-19,1.4049748e-19,1.4046977e-19,1.4044207e-19,1.4041439e-19,1.4038673e-19,1.4035907e-19,1.4033144e-19,1.4030382e-19,1.4027622e-19,1.4024864e-19,1.4022107e-19,1.4019353e-19,1.4016599e-19,1.4013847e-19,1.4011097e-19,1.4008349e-19,1.4005601e-19,1.4002856e-19,1.4000112e-19,1.399737e-19,1.3994629e-19,1.399189e-19,1.3989153e-19,1.3986417e-19,1.3983683e-19,1.398095e-19,1.397822e-19,1.397549e-19,1.3972762e-19,1.3970036e-19,1.3967312e-19,1.3964588e-19,1.3961868e-19,1.3959148e-19,1.395643e-19,1.3953714e-19,1.3950998e-19,1.3948285e-19,1.3945572e-19,1.3942862e-19,1.3940153e-19,1.3937447e-19,1.3934741e-19,1.3932038e-19,1.3929335e-19,1.3926634e-19,1.3923935e-19,1.3921238e-19,1.3918542e-19,1.3915847e-19,1.3913153e-19,1.3910462e-19,1.3907773e-19,1.3905084e-19,1.3902397e-19,1.3899713e-19,1.3897028e-19,1.3894347e-19,1.3891666e-19,1.3888988e-19,1.388631e-19,1.3883635e-19,1.3880959e-19,1.3878288e-19,1.3875616e-19,1.3872946e-19,1.3870278e-19,1.3867612e-19,1.3864947e-19,1.3862283e-19,1.385962e-19,1.385696e-19,1.3854302e-19,1.3851643e-19,1.3848989e-19,1.3846334e-19,1.384368e-19,1.384103e-19,1.383838e-19,1.3835732e-19,1.3833085e-19,1.383044e-19,1.3827796e-19,1.3825154e-19,1.3822514e-19,1.3819875e-19,1.3817237e-19,1.38146e-19,1.3811966e-19,1.3809333e-19,1.3806702e-19,1.3804071e-19,1.3801443e-19,1.3798815e-19,1.379619e-19,1.3793565e-19,1.3790944e-19,1.3788321e-19,1.3785702e-19,1.3783084e-19,1.3780468e-19,1.3777852e-19,1.3775239e-19,1.3772627e-19,1.3770016e-19,1.3767407e-19,1.3764799e-19,1.3762193e-19,1.3759589e-19,1.3756984e-19,1.3754384e-19,1.3751783e-19,1.3749184e-19,1.3746586e-19,1.3743991e-19,1.3741396e-19,1.3738803e-19,1.3736212e-19,1.3733622e-19,1.3731033e-19,1.3728447e-19,1.372586e-19,1.3723277e-19,1.3720693e-19,1.3718112e-19,1.3715532e-19,1.3712954e-19,1.3710376e-19,1.3707802e-19,1.3705229e-19,1.3702655e-19,1.3700085e-19,1.3697515e-19,1.3694947e-19,1.3692379e-19,1.3689815e-19,1.368725e-19,1.3684687e-19,1.3682127e-19,1.3679567e-19,1.3677009e-19,1.3674452e-19,1.3671897e-19,1.3669343e-19,1.3666792e-19,1.366424e-19,1.366169e-19,1.3659143e-19,1.3656596e-19,1.3654051e-19,1.3651506e-19,1.3648965e-19,1.3646424e-19,1.3643884e-19,1.3641346e-19,1.3638809e-19,1.3636274e-19,1.363374e-19,1.3631208e-19,1.3628676e-19,1.3626146e-19,1.3623618e-19,1.3621091e-19,1.3618566e-19,1.3616042e-19,1.3613519e-19,1.3610997e-19,1.3608478e-19,1.3605959e-19,1.3603443e-19,1.3600926e-19,1.3598412e-19,1.3595899e-19,1.3593389e-19,1.3590877e-19,1.3588369e-19,1.3585863e-19,1.3583356e-19,1.3580852e-19,1.3578348e-19,1.3575847e-19,1.3573346e-19,1.3570847e-19,1.356835e-19,1.3565854e-19,1.3563358e-19,1.3560865e-19,1.3558373e-19,1.3555882e-19,1.3553393e-19,1.3550904e-19,1.3548418e-19,1.3545933e-19,1.3543449e-19,1.3540966e-19,1.3538486e-19,1.3536006e-19,1.3533527e-19,1.353105e-19,1.3528574e-19,1.35261e-19,1.3523626e-19,1.3521155e-19,1.3518685e-19,1.3516215e-19,1.3513748e-19,1.3511282e-19,1.3508817e-19,1.3506354e-19,1.3503892e-19,1.3501431e-19,1.3498971e-19,1.3496513e-19,1.3494056e-19,1.34916e-19,1.3489147e-19,1.3486694e-19,1.3484242e-19,1.3481792e-19,1.3479344e-19,1.3476896e-19,1.347445e-19,1.3472005e-19,1.3469561e-19,1.346712e-19,1.3464679e-19,1.3462239e-19,1.34598e-19,1.3457364e-19,1.3454929e-19,1.3452494e-19,1.3450061e-19,1.344763e-19,1.3445199e-19,1.344277e-19,1.3440343e-19,1.3437917e-19,1.3435491e-19,1.3433068e-19,1.3430646e-19,1.3428225e-19,1.3425806e-19,1.3423387e-19,1.342097e-19,1.3418554e-19,1.3416139e-19,1.3413726e-19,1.3411315e-19,1.3408904e-19,1.3406495e-19,1.3404087e-19,1.340168e-19,1.3399274e-19,1.3396871e-19,1.3394467e-19,1.3392066e-19,1.3389666e-19,1.3387267e-19,1.3384869e-19,1.3382473e-19,1.3380078e-19,1.3377684e-19,1.3375292e-19,1.33729e-19,1.3370511e-19,1.3368121e-19,1.3365734e-19,1.3363348e-19,1.3360964e-19,1.335858e-19,1.3356197e-19,1.3353816e-19,1.3351437e-19,1.3349059e-19,1.3346681e-19,1.3344305e-19,1.3341931e-19,1.3339558e-19,1.3337185e-19,1.3334815e-19,1.3332445e-19,1.3330076e-19,1.332771e-19,1.3325343e-19,1.332298e-19,1.3320615e-19,1.3318254e-19,1.3315893e-19,1.3313534e-19,1.3311175e-19,1.3308819e-19,1.3306463e-19,1.3304108e-19,1.3301754e-19,1.3299403e-19,1.3297052e-19,1.3294703e-19,1.3292354e-19,1.3290007e-19,1.3287661e-19,1.3285317e-19,1.3282974e-19,1.3280632e-19,1.3278291e-19,1.327595e-19,1.3273613e-19,1.3271275e-19,1.326894e-19,1.3266606e-19,1.3264272e-19,1.326194e-19,1.3259608e-19,1.3257279e-19,1.325495e-19,1.3252622e-19,1.3250297e-19,1.3247972e-19,1.3245648e-19,1.3243326e-19,1.3241006e-19,1.3238686e-19,1.3236367e-19,1.3234048e-19,1.3231734e-19,1.3229417e-19,1.3227104e-19,1.322479e-19,1.322248e-19,1.322017e-19,1.321786e-19,1.3215553e-19,1.3213246e-19,1.321094e-19,1.3208636e-19,1.3206334e-19,1.3204032e-19,1.3201731e-19,1.3199432e-19,1.3197134e-19,1.3194837e-19,1.3192541e-19,1.3190247e-19,1.3187954e-19,1.3185661e-19,1.318337e-19,1.318108e-19,1.3178791e-19,1.3176504e-19,1.3174217e-19,1.3171934e-19,1.316965e-19,1.3167366e-19,1.3165086e-19,1.3162805e-19,1.3160526e-19,1.3158248e-19,1.3155972e-19,1.3153696e-19,1.3151421e-19,1.3149149e-19,1.3146876e-19,1.3144606e-19,1.3142336e-19,1.3140068e-19,1.3137801e-19,1.3135534e-19,1.313327e-19,1.3131005e-19,1.3128743e-19,1.3126481e-19,1.3124221e-19,1.3121962e-19,1.3119704e-19,1.3117447e-19,1.3115192e-19,1.3112938e-19,1.3110683e-19,1.3108432e-19,1.310618e-19,1.3103932e-19,1.3101683e-19,1.3099435e-19,1.3097189e-19,1.3094944e-19,1.3092699e-19,1.3090456e-19,1.3088215e-19,1.3085974e-19,1.3083734e-19,1.3081497e-19,1.307926e-19,1.3077024e-19,1.3074789e-19,1.3072556e-19,1.3070322e-19,1.3068091e-19,1.306586e-19,1.3063632e-19,1.3061404e-19,1.3059177e-19,1.3056952e-19,1.3054727e-19,1.3052503e-19,1.3050281e-19,1.3048061e-19,1.304584e-19,1.3043621e-19,1.3041403e-19,1.3039187e-19,1.3036971e-19,1.3034757e-19,1.3032545e-19,1.3030332e-19,1.302812e-19,1.302591e-19,1.3023703e-19,1.3021494e-19,1.3019288e-19,1.3017083e-19,1.3014879e-19,1.3012675e-19,1.3010473e-19,1.3008273e-19,1.3006072e-19,1.3003874e-19,1.3001677e-19,1.2999481e-19,1.2997285e-19,1.299509e-19,1.2992898e-19,1.2990706e-19,1.2988515e-19,1.2986325e-19,1.2984136e-19,1.2981948e-19,1.2979763e-19,1.2977577e-19,1.2975393e-19,1.297321e-19,1.2971027e-19,1.2968847e-19,1.2966667e-19,1.2964488e-19,1.296231e-19,1.2960134e-19,1.2957959e-19,1.2955785e-19,1.2953611e-19,1.295144e-19,1.2949268e-19,1.2947098e-19,1.294493e-19,1.2942762e-19,1.2940594e-19,1.2938428e-19,1.2936265e-19,1.2934101e-19,1.2931939e-19,1.2929778e-19,1.2927617e-19,1.2925458e-19,1.29233e-19,1.2921143e-19,1.2918987e-19,1.2916832e-19,1.2914679e-19,1.2912526e-19,1.2910375e-19,1.2908225e-19,1.2906074e-19,1.2903927e-19,1.2901779e-19,1.2899632e-19,1.2897488e-19,1.2895344e-19,1.2893201e-19,1.2891059e-19,1.2888919e-19,1.2886779e-19,1.288464e-19,1.2882502e-19,1.2880365e-19,1.287823e-19,1.2876095e-19,1.2873962e-19,1.287183e-19,1.2869699e-19,1.2867569e-19,1.286544e-19,1.2863311e-19,1.2861184e-19,1.2859058e-19,1.2856933e-19,1.285481e-19,1.2852686e-19,1.2850565e-19,1.2848444e-19,1.2846324e-19,1.2844205e-19,1.2842088e-19,1.2839972e-19,1.2837856e-19,1.2835742e-19,1.2833628e-19,1.2831515e-19,1.2829405e-19,1.2827294e-19,1.2825185e-19,1.2823077e-19,1.282097e-19,1.2818863e-19,1.2816758e-19,1.2814654e-19,1.2812551e-19,1.2810449e-19,1.2808349e-19,1.2806249e-19,1.280415e-19,1.2802052e-19,1.2799954e-19,1.2797859e-19,1.2795764e-19,1.279367e-19,1.2791578e-19,1.2789487e-19,1.2787395e-19,1.2785306e-19,1.2783217e-19,1.278113e-19,1.2779043e-19,1.2776957e-19,1.2774873e-19,1.277279e-19,1.2770707e-19,1.2768626e-19,1.2766545e-19,1.2764466e-19,1.2762387e-19,1.276031e-19,1.2758235e-19,1.2756159e-19,1.2754085e-19,1.275201e-19,1.2749938e-19,1.2747868e-19,1.2745797e-19,1.2743728e-19,1.274166e-19,1.2739592e-19,1.2737525e-19,1.2735461e-19,1.2733396e-19,1.2731333e-19,1.272927e-19,1.272721e-19,1.2725149e-19,1.272309e-19,1.2721031e-19,1.2718975e-19,1.2716918e-19,1.2714863e-19,1.271281e-19,1.2710756e-19,1.2708703e-19,1.2706652e-19,1.2704602e-19,1.2702553e-19,1.2700504e-19,1.2698457e-19,1.2696411e-19,1.2694365e-19,1.269232e-19,1.2690278e-19,1.2688235e-19,1.2686194e-19,1.2684153e-19,1.2682113e-19,1.2680075e-19,1.2678038e-19,1.2676001e-19,1.2673966e-19,1.2671931e-19,1.2669898e-19,1.2667865e-19,1.2665833e-19,1.2663803e-19,1.2661774e-19,1.2659745e-19,1.2657717e-19,1.265569e-19,1.2653665e-19,1.2651641e-19,1.2649617e-19,1.2647593e-19,1.2645571e-19,1.2643551e-19,1.2641531e-19,1.2639512e-19,1.2637495e-19,1.2635477e-19,1.2633461e-19,1.2631446e-19,1.2629432e-19,1.2627419e-19,1.2625406e-19,1.2623395e-19,1.2621385e-19,1.2619376e-19,1.2617367e-19,1.261536e-19,1.2613354e-19,1.2611348e-19,1.2609344e-19,1.260734e-19,1.2605338e-19,1.2603336e-19,1.2601335e-19,1.2599336e-19,1.2597336e-19,1.2595338e-19,1.2593343e-19,1.2591346e-19,1.2589352e-19,1.2587357e-19,1.2585364e-19,1.2583371e-19,1.2581381e-19,1.257939e-19,1.2577401e-19,1.2575412e-19,1.2573424e-19,1.2571439e-19,1.2569453e-19,1.2567469e-19,1.2565485e-19,1.2563502e-19,1.2561521e-19,1.255954e-19,1.255756e-19,1.2555581e-19,1.2553603e-19,1.2551626e-19,1.254965e-19,1.2547675e-19,1.25457e-19,1.2543726e-19,1.2541754e-19,1.2539783e-19,1.2537812e-19,1.2535842e-19,1.2533874e-19,1.2531906e-19,1.2529939e-19,1.2527973e-19,1.2526008e-19,1.2524044e-19,1.2522081e-19,1.2520119e-19,1.2518157e-19,1.2516197e-19,1.2514237e-19,1.2512279e-19,1.2510321e-19,1.2508364e-19,1.2506409e-19,1.2504453e-19,1.25025e-19,1.2500546e-19,1.2498594e-19,1.2496643e-19,1.2494692e-19,1.2492743e-19,1.2490796e-19,1.2488848e-19,1.24869e-19,1.2484955e-19,1.248301e-19,1.2481066e-19,1.2479123e-19,1.2477181e-19,1.247524e-19,1.24733e-19,1.247136e-19,1.2469422e-19,1.2467485e-19,1.2465547e-19,1.2463612e-19,1.2461676e-19,1.2459743e-19,1.2457809e-19,1.2455877e-19,1.2453946e-19,1.2452015e-19,1.2450085e-19,1.2448158e-19,1.244623e-19,1.2444303e-19,1.2442377e-19,1.2440453e-19,1.2438528e-19,1.2436605e-19,1.2434683e-19,1.2432761e-19,1.243084e-19,1.242892e-19,1.2427002e-19,1.2425084e-19,1.2423167e-19,1.2421252e-19,1.2419336e-19,1.2417421e-19,1.2415508e-19,1.2413595e-19,1.2411684e-19,1.2409773e-19,1.2407863e-19,1.2405954e-19,1.2404046e-19,1.2402139e-19,1.2400232e-19,1.2398327e-19,1.2396422e-19,1.2394518e-19,1.2392616e-19,1.2390713e-19,1.2388812e-19,1.2386912e-19,1.2385012e-19,1.2383113e-19,1.2381216e-19,1.237932e-19,1.2377424e-19,1.2375528e-19,1.2373635e-19,1.2371741e-19,1.2369849e-19,1.2367957e-19,1.2366066e-19,1.2364176e-19,1.2362288e-19,1.23604e-19,1.2358513e-19,1.2356626e-19,1.235474e-19,1.2352855e-19,1.2350972e-19,1.2349089e-19,1.2347207e-19,1.2345326e-19,1.2343445e-19,1.2341566e-19,1.2339688e-19,1.233781e-19,1.2335933e-19,1.2334057e-19,1.2332181e-19,1.2330307e-19,1.2328434e-19,1.2326561e-19,1.2324689e-19,1.2322818e-19,1.2320948e-19,1.231908e-19,1.231721e-19,1.2315343e-19,1.2313477e-19,1.231161e-19,1.2309746e-19,1.2307881e-19,1.2306018e-19,1.2304155e-19,1.2302294e-19,1.2300433e-19,1.2298573e-19,1.2296714e-19,1.2294856e-19,1.2292999e-19,1.2291143e-19,1.2289287e-19,1.2287432e-19,1.2285577e-19,1.2283725e-19,1.2281873e-19,1.2280021e-19,1.227817e-19,1.227632e-19,1.2274471e-19,1.2272623e-19,1.2270776e-19,1.226893e-19,1.2267083e-19,1.2265239e-19,1.2263395e-19,1.2261552e-19,1.225971e-19,1.2257868e-19,1.2256028e-19,1.2254188e-19,1.2252349e-19,1.225051e-19,1.2248673e-19,1.2246837e-19,1.2245e-19,1.2243166e-19,1.2241332e-19,1.2239498e-19,1.2237667e-19,1.2235835e-19,1.2234004e-19,1.2232174e-19,1.2230345e-19,1.2228517e-19,1.222669e-19,1.2224862e-19,1.2223036e-19,1.2221212e-19,1.2219387e-19,1.2217564e-19,1.2215741e-19,1.221392e-19,1.2212099e-19,1.2210278e-19,1.220846e-19,1.2206641e-19,1.2204824e-19,1.2203007e-19,1.220119e-19,1.2199375e-19,1.219756e-19,1.2195747e-19,1.2193935e-19,1.2192123e-19,1.219031e-19,1.2188501e-19,1.2186692e-19,1.2184882e-19,1.2183074e-19,1.2181267e-19,1.217946e-19,1.2177655e-19,1.217585e-19,1.2174046e-19,1.2172243e-19,1.217044e-19,1.216864e-19,1.2166838e-19,1.2165039e-19,1.216324e-19,1.2161441e-19,1.2159643e-19,1.2157846e-19,1.2156051e-19,1.2154256e-19,1.215246e-19,1.2150668e-19,1.2148875e-19,1.2147083e-19,1.2145291e-19,1.2143501e-19,1.2141711e-19,1.2139922e-19,1.2138135e-19,1.2136347e-19,1.2134561e-19,1.2132775e-19,1.213099e-19,1.2129207e-19,1.2127423e-19,1.212564e-19,1.2123858e-19,1.2122079e-19,1.2120298e-19,1.2118518e-19,1.211674e-19,1.2114962e-19,1.2113185e-19,1.2111408e-19,1.2109633e-19,1.2107859e-19,1.2106084e-19,1.2104311e-19,1.2102539e-19,1.2100767e-19,1.2098996e-19,1.2097227e-19,1.2095458e-19,1.2093688e-19,1.2091921e-19,1.2090155e-19,1.2088388e-19,1.2086622e-19,1.2084858e-19,1.2083094e-19,1.2081331e-19,1.2079569e-19,1.2077808e-19,1.2076047e-19,1.2074287e-19,1.2072528e-19,1.2070769e-19,1.2069011e-19,1.2067255e-19,1.2065498e-19,1.2063743e-19,1.2061988e-19,1.2060234e-19,1.2058481e-19,1.2056729e-19,1.2054977e-19,1.2053226e-19,1.2051477e-19,1.2049727e-19,1.2047979e-19,1.2046231e-19,1.2044485e-19,1.2042738e-19,1.2040993e-19,1.2039248e-19,1.2037505e-19,1.2035761e-19,1.2034019e-19,1.2032276e-19,1.2030536e-19,1.2028796e-19,1.2027056e-19,1.2025318e-19,1.202358e-19,1.2021842e-19,1.2020107e-19,1.2018371e-19,1.2016636e-19,1.2014902e-19,1.2013169e-19,1.2011435e-19,1.2009703e-19,1.2007973e-19,1.2006242e-19,1.2004513e-19,1.2002784e-19,1.2001056e-19,1.1999329e-19,1.1997602e-19,1.1995875e-19,1.1994151e-19,1.1992426e-19,1.1990703e-19,1.198898e-19,1.1987257e-19,1.1985536e-19,1.1983815e-19,1.1982095e-19,1.1980376e-19,1.1978657e-19,1.197694e-19,1.1975223e-19,1.1973507e-19,1.1971791e-19,1.1970076e-19,1.1968363e-19,1.1966649e-19,1.1964936e-19,1.1963225e-19,1.1961514e-19,1.1959803e-19,1.1958093e-19,1.1956385e-19,1.1954677e-19,1.1952969e-19,1.1951262e-19,1.1949556e-19,1.1947851e-19,1.1946146e-19,1.1944443e-19,1.1942739e-19,1.1941037e-19,1.1939335e-19,1.1937635e-19,1.1935934e-19,1.1934235e-19,1.1932537e-19,1.1930838e-19,1.1929141e-19,1.1927444e-19,1.1925749e-19,1.1924054e-19,1.192236e-19,1.1920665e-19,1.1918973e-19,1.191728e-19,1.191559e-19,1.1913898e-19,1.1912209e-19,1.191052e-19,1.190883e-19,1.1907143e-19,1.1905455e-19,1.1903769e-19,1.1902083e-19,1.1900398e-19,1.1898714e-19,1.189703e-19,1.1895347e-19,1.1893666e-19,1.1891984e-19,1.1890303e-19,1.1888624e-19,1.1886943e-19,1.1885266e-19,1.1883587e-19,1.188191e-19,1.1880234e-19,1.1878558e-19,1.1876883e-19,1.1875209e-19,1.1873535e-19,1.1871862e-19,1.187019e-19,1.1868518e-19,1.1866848e-19,1.1865177e-19,1.1863508e-19,1.186184e-19,1.1860171e-19,1.1858504e-19,1.1856838e-19,1.1855172e-19,1.1853506e-19,1.1851843e-19,1.1850178e-19,1.1848516e-19,1.1846852e-19,1.1845191e-19,1.1843531e-19,1.184187e-19,1.184021e-19,1.1838552e-19,1.1836894e-19,1.1835236e-19,1.1833579e-19,1.1831923e-19,1.1830267e-19,1.1828613e-19,1.1826959e-19,1.1825306e-19,1.1823652e-19,1.1822001e-19,1.182035e-19,1.18187e-19,1.1817049e-19,1.18154e-19,1.1813752e-19,1.1812104e-19,1.1810456e-19,1.1808811e-19,1.1807164e-19,1.1805519e-19,1.1803875e-19,1.1802232e-19,1.1800588e-19,1.1798947e-19,1.1797305e-19,1.1795664e-19,1.1794024e-19,1.1792384e-19,1.1790746e-19,1.1789107e-19,1.178747e-19,1.1785832e-19,1.1784197e-19,1.1782561e-19,1.1780926e-19,1.1779292e-19,1.1777659e-19,1.1776026e-19,1.1774394e-19,1.1772763e-19,1.1771133e-19,1.1769502e-19,1.1767873e-19,1.1766245e-19,1.1764616e-19,1.1762989e-19,1.1761363e-19,1.1759736e-19,1.1758111e-19,1.1756487e-19,1.1754863e-19,1.175324e-19,1.1751617e-19,1.1749995e-19,1.1748374e-19,1.1746753e-19,1.1745134e-19,1.1743514e-19,1.1741896e-19,1.1740278e-19,1.173866e-19,1.1737044e-19,1.1735427e-19,1.1733813e-19,1.1732197e-19,1.1730584e-19,1.1728971e-19,1.1727358e-19,1.1725747e-19,1.1724135e-19,1.1722524e-19,1.1720914e-19,1.1719305e-19,1.1717697e-19,1.1716089e-19,1.1714481e-19,1.1712875e-19,1.171127e-19,1.1709663e-19,1.1708059e-19,1.1706455e-19,1.1704853e-19,1.1703249e-19,1.1701647e-19,1.1700046e-19,1.1698446e-19,1.1696846e-19,1.1695246e-19,1.1693647e-19,1.1692049e-19,1.1690452e-19,1.1688856e-19,1.168726e-19,1.1685663e-19,1.168407e-19,1.1682475e-19,1.1680881e-19,1.1679289e-19,1.1677696e-19,1.1676105e-19,1.1674514e-19,1.1672923e-19,1.1671335e-19,1.1669745e-19,1.1668157e-19,1.166657e-19,1.1664982e-19,1.1663397e-19,1.1661811e-19,1.1660226e-19,1.1658642e-19,1.1657057e-19,1.1655475e-19,1.1653892e-19,1.165231e-19,1.1650729e-19,1.1649148e-19,1.1647569e-19,1.164599e-19,1.164441e-19,1.1642833e-19,1.1641255e-19,1.1639678e-19,1.1638103e-19,1.1636527e-19,1.1634953e-19,1.1633379e-19,1.1631805e-19,1.1630232e-19,1.162866e-19,1.1627089e-19,1.1625518e-19,1.1623948e-19,1.1622377e-19,1.1620808e-19,1.161924e-19,1.1617673e-19,1.1616105e-19,1.1614539e-19,1.1612973e-19,1.1611408e-19,1.1609843e-19,1.1608279e-19,1.1606717e-19,1.1605154e-19,1.1603591e-19,1.160203e-19,1.1600469e-19,1.1598909e-19,1.159735e-19,1.1595791e-19,1.1594233e-19,1.1592675e-19,1.1591118e-19,1.1589562e-19,1.1588006e-19,1.1586451e-19,1.1584896e-19,1.1583342e-19,1.1581789e-19,1.1580236e-19,1.1578684e-19,1.1577133e-19,1.1575582e-19,1.1574033e-19,1.1572483e-19,1.1570933e-19,1.1569386e-19,1.1567838e-19,1.1566291e-19,1.1564745e-19,1.1563199e-19,1.1561653e-19,1.1560109e-19,1.1558564e-19,1.1557022e-19,1.1555479e-19,1.1553937e-19,1.1552395e-19,1.1550855e-19,1.1549314e-19,1.1547775e-19,1.1546235e-19,1.1544697e-19,1.154316e-19,1.1541623e-19,1.1540086e-19,1.153855e-19,1.1537015e-19,1.1535481e-19,1.1533947e-19,1.1532413e-19,1.153088e-19,1.1529348e-19,1.1527816e-19,1.1526285e-19,1.1524755e-19,1.1523224e-19,1.1521695e-19,1.1520166e-19,1.1518639e-19,1.1517112e-19,1.1515585e-19,1.1514058e-19,1.1512533e-19,1.1511008e-19,1.1509484e-19,1.150796e-19,1.1506438e-19,1.1504914e-19,1.1503393e-19,1.1501871e-19,1.150035e-19,1.149883e-19,1.149731e-19,1.1495792e-19,1.1494274e-19,1.1492756e-19,1.1491238e-19,1.1489722e-19,1.1488206e-19,1.1486691e-19,1.1485177e-19,1.1483663e-19,1.148215e-19,1.1480636e-19,1.1479124e-19,1.1477612e-19,1.1476101e-19,1.147459e-19,1.147308e-19,1.1471571e-19,1.1470062e-19,1.1468554e-19,1.1467047e-19,1.146554e-19,1.1464033e-19,1.1462527e-19,1.1461023e-19,1.1459519e-19,1.1458014e-19,1.1456511e-19,1.1455008e-19,1.1453506e-19,1.1452004e-19,1.1450504e-19,1.1449003e-19,1.1447502e-19,1.1446004e-19,1.1444505e-19,1.1443007e-19,1.1441509e-19,1.1440013e-19,1.1438516e-19,1.143702e-19,1.1435525e-19,1.1434031e-19,1.1432537e-19,1.1431043e-19,1.1429551e-19,1.1428059e-19,1.1426567e-19,1.1425075e-19,1.1423585e-19,1.1422095e-19,1.1420606e-19,1.1419117e-19,1.141763e-19,1.1416142e-19,1.1414654e-19,1.1413169e-19,1.1411683e-19,1.1410198e-19,1.1408713e-19,1.1407229e-19,1.1405745e-19,1.1404263e-19,1.140278e-19,1.1401298e-19,1.1399817e-19,1.1398337e-19,1.1396857e-19,1.1395377e-19,1.1393899e-19,1.139242e-19,1.1390943e-19,1.1389465e-19,1.1387988e-19,1.1386513e-19,1.1385037e-19,1.1383563e-19,1.1382088e-19,1.1380615e-19,1.1379141e-19,1.1377669e-19,1.1376197e-19,1.1374726e-19,1.1373254e-19,1.1371784e-19,1.1370315e-19,1.1368845e-19,1.1367377e-19,1.1365909e-19,1.1364442e-19,1.1362975e-19,1.1361508e-19,1.1360042e-19,1.1358578e-19,1.1357112e-19,1.1355649e-19,1.1354186e-19,1.1352723e-19,1.135126e-19,1.1349798e-19,1.1348338e-19,1.1346877e-19,1.1345417e-19,1.1343958e-19,1.1342498e-19,1.1341039e-19,1.1339581e-19,1.1338125e-19,1.1336668e-19,1.1335211e-19,1.1333756e-19,1.1332302e-19,1.1330847e-19,1.1329393e-19,1.132794e-19,1.1326487e-19,1.1325034e-19,1.1323583e-19,1.1322132e-19,1.1320681e-19,1.1319231e-19,1.1317782e-19,1.1316334e-19,1.1314885e-19,1.1313437e-19,1.131199e-19,1.1310543e-19,1.1309097e-19,1.1307652e-19,1.1306207e-19,1.1304762e-19,1.1303318e-19,1.1301875e-19,1.1300432e-19,1.129899e-19,1.1297549e-19,1.1296108e-19,1.1294667e-19,1.1293227e-19,1.1291787e-19,1.1290348e-19,1.128891e-19,1.1287473e-19,1.1286035e-19,1.1284598e-19,1.1283162e-19,1.1281726e-19,1.1280292e-19,1.1278857e-19,1.1277422e-19,1.1275989e-19,1.1274557e-19,1.1273125e-19,1.1271693e-19,1.1270261e-19,1.1268831e-19,1.1267401e-19,1.1265971e-19,1.1264542e-19,1.1263114e-19,1.1261685e-19,1.1260258e-19,1.125883e-19,1.1257405e-19,1.1255979e-19,1.1254553e-19,1.1253129e-19,1.1251705e-19,1.125028e-19,1.1248858e-19,1.1247436e-19,1.1246013e-19,1.1244592e-19,1.1243171e-19,1.124175e-19,1.1240331e-19,1.1238911e-19,1.1237493e-19,1.1236075e-19,1.1234657e-19,1.123324e-19,1.1231823e-19,1.1230406e-19,1.1228991e-19,1.1227576e-19,1.1226162e-19,1.1224748e-19,1.1223334e-19,1.1221921e-19,1.1220509e-19,1.1219097e-19,1.1217686e-19,1.1216276e-19,1.1214864e-19,1.1213456e-19,1.1212045e-19,1.1210638e-19,1.1209229e-19,1.1207822e-19,1.1206415e-19,1.1205008e-19,1.1203602e-19,1.1202197e-19,1.1200792e-19,1.1199387e-19,1.1197983e-19,1.119658e-19,1.1195177e-19,1.1193775e-19,1.1192373e-19,1.1190972e-19,1.1189572e-19,1.1188171e-19,1.1186771e-19,1.1185373e-19,1.1183974e-19,1.1182576e-19,1.1181177e-19,1.1179782e-19,1.1178384e-19,1.1176989e-19,1.1175594e-19,1.1174198e-19,1.1172803e-19,1.117141e-19,1.1170017e-19,1.1168624e-19,1.1167232e-19,1.116584e-19,1.1164448e-19,1.1163057e-19,1.1161668e-19,1.1160278e-19,1.1158889e-19,1.11575e-19,1.1156111e-19,1.1154724e-19,1.1153336e-19,1.115195e-19,1.1150564e-19,1.1149178e-19,1.1147793e-19,1.1146409e-19,1.1145024e-19,1.1143642e-19,1.1142259e-19,1.1140876e-19,1.1139494e-19,1.1138112e-19,1.1136731e-19,1.113535e-19,1.1133971e-19,1.1132591e-19,1.1131212e-19,1.1129834e-19,1.1128456e-19,1.1127079e-19,1.1125702e-19,1.1124326e-19,1.1122949e-19,1.1121574e-19,1.11202e-19,1.1118825e-19,1.1117451e-19,1.1116078e-19,1.1114706e-19,1.1113333e-19,1.1111962e-19,1.111059e-19,1.1109219e-19,1.1107849e-19,1.1106479e-19,1.110511e-19,1.1103742e-19,1.1102373e-19,1.1101006e-19,1.1099638e-19,1.1098272e-19,1.1096906e-19,1.109554e-19,1.1094175e-19,1.109281e-19,1.1091445e-19,1.1090082e-19,1.1088719e-19,1.1087356e-19,1.1085993e-19,1.1084633e-19,1.1083272e-19,1.108191e-19,1.108055e-19,1.1079191e-19,1.1077832e-19,1.1076473e-19,1.1075115e-19,1.1073758e-19,1.1072399e-19,1.1071043e-19,1.1069688e-19,1.1068332e-19,1.1066976e-19,1.1065622e-19,1.1064267e-19,1.1062914e-19,1.106156e-19,1.1060207e-19,1.1058855e-19,1.1057504e-19,1.1056153e-19,1.1054802e-19,1.1053452e-19,1.1052102e-19,1.1050753e-19,1.1049405e-19,1.1048056e-19,1.1046708e-19,1.1045361e-19,1.1044014e-19,1.1042669e-19,1.1041322e-19,1.1039978e-19,1.1038632e-19,1.1037288e-19,1.1035944e-19,1.1034601e-19,1.1033258e-19,1.1031915e-19,1.1030574e-19,1.1029232e-19,1.1027892e-19,1.1026552e-19,1.1025211e-19,1.1023872e-19,1.1022533e-19,1.1021194e-19,1.1019857e-19,1.1018519e-19,1.1017182e-19,1.1015846e-19,1.101451e-19,1.1013174e-19,1.1011839e-19,1.1010505e-19,1.100917e-19,1.1007837e-19,1.1006504e-19,1.1005171e-19,1.1003839e-19,1.1002508e-19,1.1001176e-19,1.0999846e-19,1.0998515e-19,1.0997187e-19,1.0995857e-19,1.0994528e-19,1.09932e-19,1.0991872e-19,1.0990545e-19,1.0989219e-19,1.0987891e-19,1.0986566e-19,1.098524e-19,1.0983916e-19,1.0982591e-19,1.0981267e-19,1.0979944e-19,1.0978622e-19,1.0977298e-19,1.0975977e-19,1.0974655e-19,1.0973334e-19,1.0972013e-19,1.0970694e-19,1.0969374e-19,1.0968054e-19,1.0966736e-19,1.0965418e-19,1.09641e-19,1.0962782e-19,1.0961467e-19,1.096015e-19,1.0958834e-19,1.0957518e-19,1.0956204e-19,1.0954889e-19,1.0953575e-19,1.0952262e-19,1.0950948e-19,1.0949637e-19,1.0948323e-19,1.0947013e-19,1.0945701e-19,1.094439e-19,1.0943081e-19,1.0941771e-19,1.0940461e-19,1.0939153e-19,1.0937845e-19,1.0936537e-19,1.093523e-19,1.0933923e-19,1.0932616e-19,1.0931311e-19,1.0930005e-19,1.09287e-19,1.0927396e-19,1.0926092e-19,1.0924788e-19,1.0923485e-19,1.0922182e-19,1.092088e-19,1.0919578e-19,1.0918277e-19,1.0916976e-19,1.0915676e-19,1.0914375e-19,1.0913077e-19,1.0911778e-19,1.0910479e-19,1.0909181e-19,1.0907883e-19,1.0906586e-19,1.090529e-19,1.0903993e-19,1.0902698e-19,1.0901403e-19,1.0900108e-19,1.0898814e-19,1.0897519e-19,1.0896227e-19,1.0894933e-19,1.089364e-19,1.0892349e-19,1.0891057e-19,1.0889767e-19,1.0888476e-19,1.0887186e-19,1.0885896e-19,1.0884606e-19,1.0883317e-19,1.0882029e-19,1.0880742e-19,1.0879454e-19,1.0878167e-19,1.0876881e-19,1.0875595e-19,1.0874309e-19,1.0873023e-19,1.0871738e-19,1.0870455e-19,1.0869171e-19,1.0867888e-19,1.0866604e-19,1.0865322e-19,1.086404e-19,1.0862758e-19,1.0861477e-19,1.0860198e-19,1.0858917e-19,1.0857637e-19,1.0856358e-19,1.085508e-19,1.0853801e-19,1.0852523e-19,1.0851246e-19,1.0849969e-19,1.0848692e-19,1.0847416e-19,1.0846141e-19,1.0844865e-19,1.0843591e-19,1.0842316e-19,1.0841042e-19,1.0839769e-19,1.0838496e-19,1.08372234e-19,1.08359516e-19,1.083468e-19,1.0833409e-19,1.08321376e-19,1.0830868e-19,1.0829598e-19,1.0828328e-19,1.08270594e-19,1.08257915e-19,1.0824523e-19,1.0823256e-19,1.08219884e-19,1.0820721e-19,1.0819455e-19,1.0818189e-19,1.0816924e-19,1.0815659e-19,1.08143945e-19,1.08131305e-19,1.0811867e-19,1.0810604e-19,1.08093416e-19,1.08080795e-19,1.0806817e-19,1.0805556e-19,1.08042945e-19,1.08030344e-19,1.0801775e-19,1.0800515e-19,1.0799256e-19,1.0797997e-19,1.0796738e-19,1.07954805e-19,1.07942236e-19,1.0792966e-19,1.079171e-19,1.07904535e-19,1.0789198e-19,1.0787943e-19,1.0786688e-19,1.07854335e-19,1.078418e-19,1.0782926e-19,1.0781674e-19,1.07804213e-19,1.0779168e-19,1.0777917e-19,1.07766654e-19,1.0775415e-19,1.07741645e-19,1.0772914e-19,1.0771665e-19,1.07704157e-19,1.0769167e-19,1.07679186e-19,1.07666714e-19,1.07654235e-19,1.0764177e-19,1.076293e-19,1.07616844e-19,1.07604385e-19,1.0759193e-19,1.07579485e-19,1.07567045e-19,1.075546e-19,1.0754217e-19,1.0752974e-19,1.0751731e-19,1.0750489e-19,1.0749247e-19,1.07480055e-19,1.07467654e-19,1.0745524e-19,1.07442845e-19,1.0743045e-19,1.07418056e-19,1.0740567e-19,1.0739329e-19,1.07380904e-19,1.07368535e-19,1.0735616e-19,1.073438e-19,1.07331434e-19,1.0731907e-19,1.0730672e-19,1.0729438e-19,1.0728203e-19,1.0726969e-19,1.07257356e-19,1.0724502e-19,1.07232696e-19,1.07220366e-19,1.0720805e-19,1.0719574e-19,1.0718342e-19,1.07171116e-19,1.0715882e-19,1.07146514e-19,1.0713422e-19,1.0712194e-19,1.07109647e-19,1.0709737e-19,1.0708509e-19,1.0707282e-19,1.0706055e-19,1.07048287e-19,1.0703603e-19,1.07023775e-19,1.07011516e-19,1.0699927e-19,1.0698703e-19,1.0697479e-19,1.0696256e-19,1.06950324e-19,1.069381e-19,1.06925877e-19,1.06913656e-19,1.0690144e-19,1.06889235e-19,1.0687703e-19,1.0686483e-19,1.0685263e-19,1.0684044e-19,1.0682825e-19,1.0681606e-19,1.0680388e-19,1.0679171e-19,1.0677953e-19,1.0676737e-19,1.06755206e-19,1.06743044e-19,1.0673089e-19,1.0671874e-19,1.0670659e-19,1.0669445e-19,1.06682304e-19,1.06670174e-19,1.06658045e-19,1.06645915e-19,1.0663379e-19,1.0662168e-19,1.0660956e-19,1.06597454e-19,1.0658535e-19,1.06573246e-19,1.0656115e-19,1.0654905e-19,1.06536966e-19,1.0652488e-19,1.065128e-19,1.0650072e-19,1.06488654e-19,1.06476575e-19,1.06464517e-19,1.0645246e-19,1.064404e-19,1.0642835e-19,1.06416295e-19,1.06404255e-19,1.06392216e-19,1.06380177e-19,1.06368144e-19,1.0635612e-19,1.0634409e-19,1.0633208e-19,1.06320064e-19,1.06308044e-19,1.06296043e-19,1.06284036e-19,1.06272036e-19,1.0626004e-19,1.0624805e-19,1.0623606e-19,1.06224085e-19,1.062121e-19,1.0620013e-19,1.0618816e-19,1.06176186e-19,1.06164224e-19,1.0615226e-19,1.06140314e-19,1.06128365e-19,1.0611641e-19,1.06104473e-19,1.0609254e-19,1.06080595e-19,1.06068666e-19,1.0605674e-19,1.0604482e-19,1.060329e-19,1.0602098e-19,1.06009076e-19,1.0599717e-19,1.0598526e-19,1.05973365e-19,1.05961475e-19,1.05949584e-19,1.059377e-19,1.05925815e-19,1.0591394e-19,1.0590206e-19,1.0589019e-19,1.05878324e-19,1.05866465e-19,1.058546e-19,1.0584275e-19,1.058309e-19,1.0581905e-19,1.0580721e-19,1.0579537e-19,1.05783534e-19,1.0577171e-19,1.05759875e-19,1.05748056e-19,1.0573624e-19,1.0572442e-19,1.0571261e-19,1.0570081e-19,1.05689e-19,1.056772e-19,1.0566541e-19,1.05653615e-19,1.05641834e-19,1.05630047e-19,1.05618266e-19,1.0560649e-19,1.0559472e-19,1.05582955e-19,1.05571194e-19,1.0555943e-19,1.0554768e-19,1.0553593e-19,1.05524174e-19,1.0551243e-19,1.0550069e-19,1.05488954e-19,1.05477225e-19,1.05465496e-19,1.0545377e-19,1.0544206e-19,1.05430334e-19,1.05418624e-19,1.05406915e-19,1.0539521e-19,1.0538351e-19,1.0537181e-19,1.0536012e-19,1.0534843e-19,1.0533674e-19,1.0532506e-19,1.05313385e-19,1.0530171e-19,1.0529004e-19,1.0527838e-19,1.05266714e-19,1.05255056e-19,1.052434e-19,1.0523175e-19,1.0522011e-19,1.0520846e-19,1.05196824e-19,1.0518519e-19,1.0517356e-19,1.05161933e-19,1.0515031e-19,1.0513869e-19,1.05127076e-19,1.05115456e-19,1.0510385e-19,1.0509225e-19,1.05080644e-19,1.0506905e-19,1.0505746e-19,1.0504587e-19,1.0503429e-19,1.0502271e-19,1.0501113e-19,1.04999554e-19,1.0498798e-19,1.0497642e-19,1.0496486e-19,1.04953297e-19,1.0494174e-19,1.04930194e-19,1.04918645e-19,1.04907104e-19,1.0489557e-19,1.04884027e-19,1.048725e-19,1.0486097e-19,1.04849447e-19,1.0483793e-19,1.0482641e-19,1.048149e-19,1.0480339e-19,1.04791886e-19,1.04780383e-19,1.0476889e-19,1.0475739e-19,1.0474591e-19,1.04734417e-19,1.0472293e-19,1.04711456e-19,1.0469998e-19,1.04688515e-19,1.04677044e-19,1.0466558e-19,1.0465412e-19,1.0464267e-19,1.0463121e-19,1.0461977e-19,1.0460832e-19,1.0459688e-19,1.04585447e-19,1.0457401e-19,1.0456258e-19,1.0455116e-19,1.0453973e-19,1.0452831e-19,1.045169e-19,1.0450549e-19,1.0449408e-19,1.04482676e-19,1.04471276e-19,1.04459883e-19,1.0444849e-19,1.04437103e-19,1.04425723e-19,1.04414337e-19,1.0440296e-19,1.0439159e-19,1.04380215e-19,1.04368855e-19,1.0435749e-19,1.0434613e-19,1.0433478e-19,1.04323424e-19,1.04312076e-19,1.04300735e-19,1.04289394e-19,1.0427806e-19,1.04266724e-19,1.04255395e-19,1.0424407e-19,1.04232745e-19,1.0422143e-19,1.0421012e-19,1.04198804e-19,1.04187495e-19,1.041762e-19,1.04164896e-19,1.041536e-19,1.0414231e-19,1.04131014e-19,1.0411974e-19,1.0410845e-19,1.0409718e-19,1.040859e-19,1.0407463e-19,1.04063366e-19,1.040521e-19,1.0404084e-19,1.0402959e-19,1.0401834e-19,1.04007086e-19,1.0399584e-19,1.039846e-19,1.03973365e-19,1.03962134e-19,1.03950896e-19,1.0393967e-19,1.0392845e-19,1.0391723e-19,1.03906015e-19,1.0389481e-19,1.038836e-19,1.0387239e-19,1.03861185e-19,1.0384999e-19,1.038388e-19,1.0382761e-19,1.0381642e-19,1.0380524e-19,1.0379406e-19,1.0378289e-19,1.03771714e-19,1.0376054e-19,1.0374938e-19,1.03738213e-19,1.0372706e-19,1.03715905e-19,1.0370475e-19,1.0369361e-19,1.0368247e-19,1.0367132e-19,1.03660193e-19,1.0364906e-19,1.0363793e-19,1.036268e-19,1.0361568e-19,1.03604566e-19,1.0359345e-19,1.03582335e-19,1.0357123e-19,1.0356013e-19,1.0354902e-19,1.0353793e-19,1.03526836e-19,1.0351575e-19,1.03504664e-19,1.03493575e-19,1.034825e-19,1.0347143e-19,1.0346035e-19,1.0344928e-19,1.03438225e-19,1.03427155e-19,1.03416104e-19,1.0340505e-19,1.03393996e-19,1.0338295e-19,1.033719e-19,1.03360864e-19,1.0334983e-19,1.03338795e-19,1.0332777e-19,1.03316746e-19,1.0330572e-19,1.032947e-19,1.0328369e-19,1.0327267e-19,1.0326167e-19,1.0325066e-19,1.0323966e-19,1.03228664e-19,1.03217665e-19,1.0320668e-19,1.0319569e-19,1.0318471e-19,1.0317373e-19,1.03162754e-19,1.03151775e-19,1.0314081e-19,1.0312984e-19,1.0311888e-19,1.0310792e-19,1.0309696e-19,1.03086014e-19,1.03075067e-19,1.0306412e-19,1.0305318e-19,1.03042244e-19,1.03031304e-19,1.03020376e-19,1.0300944e-19,1.0299852e-19,1.02987605e-19,1.02976684e-19,1.0296577e-19,1.0295486e-19,1.0294395e-19,1.0293305e-19,1.02922155e-19,1.0291125e-19,1.02900363e-19,1.0288947e-19,1.02878585e-19,1.028677e-19,1.0285682e-19,1.0284595e-19,1.0283508e-19,1.02824205e-19,1.0281334e-19,1.02802485e-19,1.0279162e-19,1.02780765e-19,1.02769915e-19,1.02759064e-19,1.0274823e-19,1.02737377e-19,1.02726546e-19,1.0271571e-19,1.0270488e-19,1.0269405e-19,1.0268323e-19,1.02672404e-19,1.02661586e-19,1.02650775e-19,1.0263996e-19,1.0262916e-19,1.0261835e-19,1.02607554e-19,1.02596756e-19,1.02585964e-19,1.0257517e-19,1.02564386e-19,1.025536e-19,1.0254282e-19,1.0253204e-19,1.02521276e-19,1.025105e-19,1.02499737e-19,1.0248898e-19,1.0247822e-19,1.0246746e-19,1.0245671e-19,1.0244596e-19,1.0243521e-19,1.0242447e-19,1.0241373e-19,1.02402995e-19,1.0239226e-19,1.02381534e-19,1.02370806e-19,1.02360085e-19,1.02349364e-19,1.0233865e-19,1.0232794e-19,1.0231723e-19,1.02306525e-19,1.0229582e-19,1.0228512e-19,1.0227443e-19,1.0226373e-19,1.0225305e-19,1.0224236e-19,1.0223168e-19,1.02221e-19,1.0221033e-19,1.0219965e-19,1.0218899e-19,1.0217832e-19,1.02167656e-19,1.02157e-19,1.0214634e-19,1.0213569e-19,1.0212504e-19,1.021144e-19,1.02103756e-19,1.0209312e-19,1.0208248e-19,1.0207185e-19,1.0206122e-19,1.020506e-19,1.0203998e-19,1.02029355e-19,1.02018744e-19,1.0200813e-19,1.0199752e-19,1.0198692e-19,1.0197632e-19,1.01965714e-19,1.0195512e-19,1.01944524e-19,1.0193394e-19,1.01923353e-19,1.0191277e-19,1.0190219e-19,1.01891617e-19,1.01881044e-19,1.0187047e-19,1.0185991e-19,1.01849346e-19,1.0183879e-19,1.0182823e-19,1.01817675e-19,1.0180713e-19,1.0179658e-19,1.0178604e-19,1.017755e-19,1.0176496e-19,1.0175443e-19,1.017439e-19,1.0173337e-19,1.0172285e-19,1.01712325e-19,1.0170181e-19,1.01691303e-19,1.0168079e-19,1.0167028e-19,1.0165978e-19,1.0164928e-19,1.01638784e-19,1.0162829e-19,1.01617794e-19,1.0160731e-19,1.01596824e-19,1.0158634e-19,1.01575866e-19,1.0156539e-19,1.0155492e-19,1.0154445e-19,1.0153399e-19,1.0152353e-19,1.0151307e-19,1.01502616e-19,1.01492166e-19,1.0148171e-19,1.0147127e-19,1.0146083e-19,1.0145039e-19,1.0143995e-19,1.0142952e-19,1.0141909e-19,1.01408666e-19,1.0139824e-19,1.0138782e-19,1.0137741e-19,1.0136699e-19,1.0135658e-19,1.01346175e-19,1.0133577e-19,1.0132537e-19,1.01314975e-19,1.0130458e-19,1.0129419e-19,1.0128381e-19,1.01273416e-19,1.0126304e-19,1.0125266e-19,1.01242286e-19,1.01231914e-19,1.0122154e-19,1.01211177e-19,1.0120082e-19,1.0119046e-19,1.01180106e-19,1.0116975e-19,1.011594e-19,1.01149054e-19,1.0113871e-19,1.0112837e-19,1.01118035e-19,1.011077e-19,1.0109737e-19,1.0108705e-19,1.0107672e-19,1.010664e-19,1.01056087e-19,1.01045766e-19,1.0103546e-19,1.01025145e-19,1.01014844e-19,1.0100454e-19,1.0099424e-19,1.0098395e-19,1.0097365e-19,1.00963365e-19,1.0095308e-19,1.00942795e-19,1.00932514e-19,1.0092224e-19,1.00911963e-19,1.00901695e-19,1.00891426e-19,1.00881164e-19,1.008709e-19,1.00860646e-19,1.0085039e-19,1.0084014e-19,1.0082989e-19,1.0081964e-19,1.00809406e-19,1.0079916e-19,1.0078893e-19,1.007787e-19,1.0076846e-19,1.0075824e-19,1.00748014e-19,1.0073779e-19,1.0072758e-19,1.0071736e-19,1.0070715e-19,1.0069694e-19,1.0068674e-19,1.00676534e-19,1.00666336e-19,1.0065614e-19,1.0064595e-19,1.0063576e-19,1.0062557e-19,1.00615393e-19,1.00605215e-19,1.0059503e-19,1.0058486e-19,1.0057469e-19,1.0056452e-19,1.00554356e-19,1.0054419e-19,1.0053404e-19,1.0052388e-19,1.0051373e-19,1.0050358e-19,1.00493436e-19,1.0048329e-19,1.0047315e-19,1.0046301e-19,1.0045288e-19,1.0044275e-19,1.0043262e-19,1.0042249e-19,1.0041237e-19,1.0040225e-19,1.0039214e-19,1.0038203e-19,1.0037192e-19,1.0036181e-19,1.00351704e-19,1.0034161e-19,1.0033151e-19,1.00321415e-19,1.0031133e-19,1.0030124e-19,1.0029115e-19,1.0028107e-19,1.0027099e-19,1.00260914e-19,1.0025084e-19,1.0024077e-19,1.002307e-19,1.0022064e-19,1.0021058e-19,1.00200524e-19,1.0019047e-19,1.0018041e-19,1.0017037e-19,1.0016032e-19,1.0015028e-19,1.0014024e-19,1.001302e-19,1.0012017e-19,1.0011014e-19,1.0010011e-19,1.0009009e-19,1.00080065e-19,1.0007004e-19,1.0006003e-19,1.0005002e-19,1.00040005e-19,1.0003e-19,1.0002e-19,1.00009994e-19,1.00000003e-19],"x":[1.0e30,1.999300299880048e34,3.998500599760096e34,5.9977008996401435e34,7.9969011995201915e34,9.99610149940024e34,1.1995301799280288e35,1.3994502099160336e35,1.5993702399040384e35,1.799290269892043e35,1.999210299880048e35,2.1991303298680528e35,2.3990503598560576e35,2.5989703898440624e35,2.798890419832067e35,2.998810449820072e35,3.1987304798080768e35,3.398650509796081e35,3.598570539784086e35,3.798490569772091e35,3.998410599760096e35,4.1983306297481004e35,4.3982506597361056e35,4.59817068972411e35,4.798090719712115e35,4.9980107497001196e35,5.197930779688125e35,5.397850809676129e35,5.5977708396641344e35,5.797690869652139e35,5.997610899640144e35,6.1975309296281484e35,6.3974509596161536e35,6.597370989604158e35,6.797291019592162e35,6.997211049580168e35,7.197131079568173e35,7.397051109556177e35,7.596971139544182e35,7.796891169532188e35,7.996811199520192e35,8.196731229508196e35,8.396651259496201e35,8.596571289484207e35,8.796491319472211e35,8.996411349460216e35,9.19633137944822e35,9.396251409436226e35,9.59617143942423e35,9.796091469412235e35,9.996011499400239e35,1.0195931529388245e36,1.039585155937625e36,1.0595771589364254e36,1.0795691619352258e36,1.0995611649340264e36,1.1195531679328269e36,1.1395451709316273e36,1.1595371739304278e36,1.1795291769292282e36,1.1995211799280288e36,1.2195131829268292e36,1.2395051859256297e36,1.2594971889244301e36,1.2794891919232307e36,1.2994811949220312e36,1.3194731979208316e36,1.339465200919632e36,1.3594572039184325e36,1.379449206917233e36,1.3994412099160337e36,1.419433212914834e36,1.4394252159136346e36,1.459417218912435e36,1.4794092219112354e36,1.499401224910036e36,1.5193932279088363e36,1.5393852309076368e36,1.5593772339064375e36,1.579369236905238e36,1.5993612399040384e36,1.6193532429028388e36,1.6393452459016393e36,1.6593372489004397e36,1.6793292518992402e36,1.6993212548980406e36,1.7193132578968414e36,1.7393052608956418e36,1.7592972638944422e36,1.7792892668932427e36,1.799281269892043e36,1.8192732728908436e36,1.839265275889644e36,1.8592572788884445e36,1.8792492818872452e36,1.8992412848860456e36,1.919233287884846e36,1.9392252908836465e36,1.959217293882447e36,1.9792092968812474e36,1.999201299880048e36,2.0191933028788483e36,2.039185305877649e36,2.0591773088764495e36,2.07916931187525e36,2.0991613148740504e36,2.1191533178728508e36,2.1391453208716513e36,2.1591373238704517e36,2.179129326869252e36,2.1991213298680526e36,2.2191133328668533e36,2.2391053358656538e36,2.2590973388644542e36,2.2790893418632547e36,2.299081344862055e36,2.3190733478608555e36,2.339065350859656e36,2.3590573538584564e36,2.3790493568572572e36,2.3990413598560576e36,2.419033362854858e36,2.4390253658536585e36,2.459017368852459e36,2.4790093718512594e36,2.4990013748500598e36,2.5189933778488603e36,2.538985380847661e36,2.5589773838464614e36,2.578969386845262e36,2.5989613898440623e36,2.6189533928428628e36,2.6389453958416632e36,2.6589373988404637e36,2.6789294018392644e36,2.6989214048380645e36,2.718913407836865e36,2.7389054108356654e36,2.758897413834466e36,2.778889416833267e36,2.798881419832067e36,2.818873422830868e36,2.838865425829668e36,2.8588574288284687e36,2.878849431827269e36,2.8988414348260696e36,2.91883343782487e36,2.9388254408236705e36,2.958817443822471e36,2.9788094468212713e36,2.998801449820072e36,3.018793452818872e36,3.038785455817673e36,3.058777458816473e36,3.078769461815274e36,3.0987614648140746e36,3.118753467812875e36,3.1387454708116755e36,3.1587374738104756e36,3.1787294768092764e36,3.1987214798080765e36,3.218713482806877e36,3.2387054858056774e36,3.258697488804478e36,3.278689491803279e36,3.298681494802079e36,3.31867349780088e36,3.33866550079968e36,3.3586575037984806e36,3.378649506797281e36,3.3986415097960815e36,3.4186335127948817e36,3.4386255157936824e36,3.458617518792483e36,3.4786095217912833e36,3.498601524790084e36,3.518593527788884e36,3.538585530787685e36,3.558577533786485e36,3.578569536785286e36,3.5985615397840866e36,3.618553542782887e36,3.6385455457816874e36,3.6585375487804876e36,3.6785295517792883e36,3.6985215547780885e36,3.718513557776889e36,3.7385055607756894e36,3.75849756377449e36,3.778489566773291e36,3.798481569772091e36,3.818473572770892e36,3.838465575769692e36,3.8584575787684926e36,3.878449581767293e36,3.8984415847660935e36,3.918433587764894e36,3.9384255907636944e36,3.958417593762495e36,3.978409596761295e36,3.998401599760096e36,4.018393602758896e36,4.038385605757697e36,4.058377608756497e36,4.078369611755298e36,4.0983616147540985e36,4.1183536177528987e36,4.1383456207516994e36,4.1583376237504996e36,4.1783296267493e36,4.1983216297481004e36,4.218313632746901e36,4.2383056357457013e36,4.258297638744502e36,4.278289641743303e36,4.298281644742103e36,4.3182736477409037e36,4.338265650739704e36,4.3582576537385046e36,4.378249656737305e36,4.3982416597361055e36,4.418233662734906e36,4.4382256657337064e36,4.458217668732507e36,4.478209671731307e36,4.498201674730108e36,4.518193677728908e36,4.538185680727709e36,4.558177683726509e36,4.57816968672531e36,4.5981616897241105e36,4.6181536927229106e36,4.6381456957217114e36,4.6581376987205115e36,4.678129701719312e36,4.6981217047181124e36,4.718113707716913e36,4.738105710715714e36,4.758097713714514e36,4.778089716713315e36,4.798081719712115e36,4.8180737227109157e36,4.838065725709716e36,4.8580577287085165e36,4.8780497317073167e36,4.8980417347061174e36,4.918033737704918e36,4.9380257407037183e36,4.958017743702519e36,4.978009746701319e36,4.99800174970012e36,5.01799375269892e36,5.037985755697721e36,5.0579777586965216e36,5.077969761695322e36,5.0979617646941225e36,5.1179537676929226e36,5.1379457706917233e36,5.1579377736905235e36,5.177929776689324e36,5.1979217796881244e36,5.217913782686925e36,5.237905785685726e36,5.257897788684526e36,5.277889791683327e36,5.297881794682127e36,5.317873797680928e36,5.337865800679728e36,5.357857803678528e36,5.377849806677329e36,5.397841809676129e36,5.41783381267493e36,5.437825815673731e36,5.45781781867253e36,5.477809821671331e36,5.497801824670132e36,5.517793827668933e36,5.537785830667732e36,5.557777833666533e36,5.577769836665334e36,5.597761839664134e36,5.617753842662935e36,5.637745845661735e36,5.657737848660535e36,5.677729851659336e36,5.697721854658137e36,5.717713857656938e36,5.737705860655737e36,5.757697863654538e36,5.777689866653339e36,5.79768186965214e36,5.817673872650939e36,5.83766587564974e36,5.85765787864854e36,5.877649881647341e36,5.897641884646142e36,5.917633887644942e36,5.937625890643742e36,5.957617893642543e36,5.977609896641344e36,5.997601899640143e36,6.017593902638944e36,6.037585905637745e36,6.057577908636545e36,6.077569911635346e36,6.097561914634146e36,6.117553917632947e36,6.137545920631747e36,6.157537923630548e36,6.177529926629348e36,6.197521929628148e36,6.217513932626949e36,6.23750593562575e36,6.25749793862455e36,6.27748994162335e36,6.297481944622151e36,6.317473947620952e36,6.337465950619752e36,6.357457953618552e36,6.377449956617353e36,6.397441959616153e36,6.417433962614954e36,6.437425965613755e36,6.457417968612554e36,6.477409971611355e36,6.497401974610156e36,6.517393977608957e36,6.537385980607757e36,6.557377983606557e36,6.577369986605358e36,6.597361989604158e36,6.617353992602959e36,6.637345995601759e36,6.657337998600559e36,6.67733000159936e36,6.697322004598161e36,6.717314007596962e36,6.737306010595761e36,6.757298013594562e36,6.777290016593363e36,6.797282019592163e36,6.817274022590963e36,6.837266025589764e36,6.857258028588564e36,6.877250031587365e36,6.897242034586166e36,6.917234037584965e36,6.937226040583766e36,6.957218043582567e36,6.977210046581368e36,6.997202049580167e36,7.017194052578968e36,7.037186055577769e36,7.05717805857657e36,7.07717006157537e36,7.09716206457417e36,7.11715406757297e36,7.137146070571771e36,7.157138073570572e36,7.177130076569373e36,7.197122079568172e36,7.217114082566973e36,7.237106085565774e36,7.257098088564574e36,7.277090091563374e36,7.297082094562175e36,7.317074097560975e36,7.337066100559776e36,7.357058103558577e36,7.377050106557377e36,7.397042109556177e36,7.417034112554978e36,7.437026115553779e36,7.457018118552578e36,7.477010121551379e36,7.49700212455018e36,7.51699412754898e36,7.536986130547781e36,7.556978133546581e36,7.576970136545382e36,7.596962139544182e36,7.616954142542983e36,7.636946145541783e36,7.656938148540583e36,7.676930151539384e36,7.696922154538185e36,7.716914157536986e36,7.736906160535785e36,7.756898163534586e36,7.776890166533387e36,7.796882169532187e36,7.816874172530987e36,7.836866175529788e36,7.856858178528588e36,7.876850181527389e36,7.89684218452619e36,7.916834187524989e36,7.93682619052379e36,7.956818193522591e36,7.976810196521392e36,7.996802199520192e36,8.016794202518992e36,8.036786205517793e36,8.056778208516593e36,8.076770211515394e36,8.096762214514194e36,8.116754217512994e36,8.136746220511795e36,8.156738223510596e36,8.176730226509397e36,8.196722229508196e36,8.216714232506997e36,8.236706235505798e36,8.256698238504598e36,8.276690241503398e36,8.296682244502199e36,8.316674247501e36,8.3366662504998e36,8.356658253498601e36,8.3766502564974e36,8.396642259496201e36,8.416634262495002e36,8.436626265493803e36,8.456618268492602e36,8.476610271491403e36,8.496602274490204e36,8.516594277489004e36,8.536586280487805e36,8.556578283486605e36,8.576570286485405e36,8.596562289484206e36,8.616554292483007e36,8.636546295481807e36,8.656538298480607e36,8.676530301479408e36,8.696522304478209e36,8.71651430747701e36,8.736506310475809e36,8.75649831347461e36,8.77649031647341e36,8.796482319472211e36,8.816474322471012e36,8.836466325469812e36,8.856458328468612e36,8.876450331467413e36,8.896442334466214e36,8.916434337465013e36,8.936426340463814e36,8.956418343462615e36,8.976410346461416e36,8.996402349460216e36,9.016394352459016e36,9.036386355457817e36,9.056378358456617e36,9.076370361455418e36,9.096362364454218e36,9.116354367453018e36,9.136346370451819e36,9.15633837345062e36,9.17633037644942e36,9.19632237944822e36,9.216314382447021e36,9.236306385445822e36,9.256298388444622e36,9.276290391443422e36,9.296282394442223e36,9.316274397441023e36,9.336266400439824e36,9.356258403438625e36,9.376250406437424e36,9.396242409436225e36,9.416234412435026e36,9.436226415433827e36,9.456218418432626e36,9.476210421431427e36,9.496202424430228e36,9.516194427429028e36,9.536186430427829e36,9.556178433426629e36,9.576170436425429e36,9.59616243942423e36,9.616154442423031e36,9.636146445421832e36,9.656138448420631e36,9.676130451419432e36,9.696122454418233e36,9.716114457417033e36,9.736106460415833e36,9.756098463414634e36,9.776090466413434e36,9.796082469412235e36,9.816074472411036e36,9.836066475409835e36,9.856058478408636e36,9.876050481407437e36,9.896042484406238e36,9.916034487405037e36,9.936026490403838e36,9.956018493402639e36,9.97601049640144e36,9.99600249940024e36,1.001599450239904e37,1.003598650539784e37,1.0055978508396641e37,1.0075970511395442e37,1.0095962514394242e37,1.0115954517393042e37,1.0135946520391843e37,1.0155938523390644e37,1.0175930526389444e37,1.0195922529388244e37,1.0215914532387045e37,1.0235906535385846e37,1.0255898538384646e37,1.0275890541383447e37,1.0295882544382247e37,1.0315874547381047e37,1.0335866550379848e37,1.0355858553378649e37,1.0375850556377448e37,1.0395842559376249e37,1.041583456237505e37,1.043582656537385e37,1.0455818568372651e37,1.0475810571371451e37,1.0495802574370252e37,1.0515794577369052e37,1.0535786580367853e37,1.0555778583366653e37,1.0575770586365453e37,1.0595762589364254e37,1.0615754592363055e37,1.0635746595361854e37,1.0655738598360656e37,1.0675730601359456e37,1.0695722604358255e37,1.0715714607357057e37,1.0735706610355857e37,1.0755698613354659e37,1.0775690616353458e37,1.0795682619352258e37,1.081567462235106e37,1.083566662534986e37,1.0855658628348661e37,1.087565063134746e37,1.089564263434626e37,1.0915634637345062e37,1.0935626640343862e37,1.0955618643342664e37,1.0975610646341463e37,1.0995602649340263e37,1.1015594652339065e37,1.1035586655337864e37,1.1055578658336664e37,1.1075570661335466e37,1.1095562664334265e37,1.1115554667333067e37,1.1135546670331867e37,1.1155538673330666e37,1.1175530676329468e37,1.1195522679328268e37,1.121551468232707e37,1.123550668532587e37,1.125549868832467e37,1.127549069132347e37,1.129548269432227e37,1.1315474697321072e37,1.1335466700319872e37,1.1355458703318672e37,1.1375450706317473e37,1.1395442709316273e37,1.1415434712315073e37,1.1435426715313874e37,1.1455418718312674e37,1.1475410721311476e37,1.1495402724310275e37,1.1515394727309075e37,1.1535386730307877e37,1.1555378733306677e37,1.1575370736305478e37,1.1595362739304278e37,1.1615354742303078e37,1.163534674530188e37,1.165533874830068e37,1.167533075129948e37,1.169532275429828e37,1.171531475729708e37,1.1735306760295882e37,1.1755298763294682e37,1.1775290766293483e37,1.1795282769292283e37,1.1815274772291083e37,1.1835266775289884e37,1.1855258778288684e37,1.1875250781287484e37,1.1895242784286286e37,1.1915234787285085e37,1.1935226790283887e37,1.1955218793282687e37,1.1975210796281486e37,1.1995202799280288e37,1.2015194802279088e37,1.203518680527789e37,1.205517880827669e37,1.2075170811275489e37,1.209516281427429e37,1.211515481727309e37,1.2135146820271892e37,1.2155138823270692e37,1.217513082626949e37,1.2195122829268293e37,1.2215114832267093e37,1.2235106835265895e37,1.2255098838264694e37,1.2275090841263494e37,1.2295082844262296e37,1.2315074847261095e37,1.2335066850259895e37,1.2355058853258697e37,1.2375050856257496e37,1.2395042859256298e37,1.2415034862255098e37,1.2435026865253897e37,1.24550188682527e37,1.2475010871251499e37,1.24950028742503e37,1.25149948772491e37,1.25349868802479e37,1.2554978883246702e37,1.2574970886245501e37,1.2594962889244303e37,1.2614954892243103e37,1.2634946895241902e37,1.2654938898240704e37,1.2674930901239504e37,1.2694922904238303e37,1.2714914907237105e37,1.2734906910235905e37,1.2754898913234707e37,1.2774890916233506e37,1.2794882919232306e37,1.2814874922231108e37,1.2834866925229907e37,1.285485892822871e37,1.2874850931227509e37,1.2894842934226308e37,1.291483493722511e37,1.293482694022391e37,1.2954818943222712e37,1.2974810946221511e37,1.299480294922031e37,1.3014794952219113e37,1.3034786955217912e37,1.3054778958216714e37,1.3074770961215514e37,1.3094762964214313e37,1.3114754967213115e37,1.3134746970211915e37,1.3154738973210714e37,1.3174730976209516e37,1.3194722979208316e37,1.3214714982207118e37,1.3234706985205917e37,1.3254698988204717e37,1.3274690991203519e37,1.3294682994202318e37,1.331467499720112e37,1.333466700019992e37,1.335465900319872e37,1.3374651006197521e37,1.339464300919632e37,1.3414635012195123e37,1.3434627015193922e37,1.3454619018192722e37,1.3474611021191524e37,1.3494603024190323e37,1.3514595027189123e37,1.3534587030187925e37,1.3554579033186724e37,1.3574571036185526e37,1.3594563039184326e37,1.3614555042183125e37,1.3634547045181927e37,1.3654539048180727e37,1.3674531051179529e37,1.3694523054178328e37,1.3714515057177128e37,1.373450706017593e37,1.375449906317473e37,1.3774491066173531e37,1.379448306917233e37,1.381447507217113e37,1.3834467075169932e37,1.3854459078168732e37,1.3874451081167534e37,1.3894443084166333e37,1.3914435087165133e37,1.3934427090163935e37,1.3954419093162734e37,1.3974411096161534e37,1.3994403099160336e37,1.4014395102159135e37,1.4034387105157937e37,1.4054379108156737e37,1.4074371111155536e37,1.4094363114154338e37,1.4114355117153138e37,1.413434712015194e37,1.415433912315074e37,1.417433112614954e37,1.419432312914834e37,1.421431513214714e37,1.4234307135145942e37,1.4254299138144742e37,1.4274291141143542e37,1.4294283144142343e37,1.4314275147141143e37,1.4334267150139943e37,1.4354259153138744e37,1.4374251156137544e37,1.4394243159136346e37,1.4414235162135146e37,1.4434227165133945e37,1.4454219168132747e37,1.4474211171131547e37,1.4494203174130348e37,1.4514195177129148e37,1.4534187180127948e37,1.455417918312675e37,1.457417118612555e37,1.459416318912435e37,1.461415519212315e37,1.463414719512195e37,1.4654139198120752e37,1.4674131201119552e37,1.4694123204118353e37,1.4714115207117153e37,1.4734107210115953e37,1.4754099213114755e37,1.4774091216113554e37,1.4794083219112354e37,1.4814075222111156e37,1.4834067225109955e37,1.4854059228108757e37,1.4874051231107557e37,1.4894043234106356e37,1.4914035237105158e37,1.4934027240103958e37,1.495401924310276e37,1.497401124610156e37,1.4994003249100359e37,1.501399525209916e37,1.503398725509796e37,1.5053979258096762e37,1.5073971261095562e37,1.509396326409436e37,1.5113955267093163e37,1.5133947270091963e37,1.5153939273090762e37,1.5173931276089564e37,1.5193923279088364e37,1.5213915282087166e37,1.5233907285085965e37,1.5253899288084765e37,1.5273891291083567e37,1.5293883294082366e37,1.5313875297081168e37,1.5333867300079968e37,1.5353859303078767e37,1.537385130607757e37,1.5393843309076369e37,1.541383531207517e37,1.543382731507397e37,1.545381931807277e37,1.5473811321071572e37,1.5493803324070371e37,1.5513795327069173e37,1.5533787330067973e37,1.5553779333066772e37,1.5573771336065574e37,1.5593763339064374e37,1.5613755342063173e37,1.5633747345061975e37,1.5653739348060775e37,1.5673731351059577e37,1.5693723354058376e37,1.5713715357057176e37,1.5733707360055978e37,1.5753699363054777e37,1.577369136605358e37,1.5793683369052379e37,1.5813675372051178e37,1.583366737504998e37,1.585365937804878e37,1.5873651381047582e37,1.5893643384046381e37,1.591363538704518e37,1.5933627390043983e37,1.5953619393042782e37,1.5973611396041582e37,1.5993603399040384e37,1.6013595402039183e37,1.6033587405037985e37,1.6053579408036785e37,1.6073571411035584e37,1.6093563414034386e37,1.6113555417033186e37,1.6133547420031988e37,1.6153539423030787e37,1.6173531426029587e37,1.6193523429028389e37,1.6213515432027188e37,1.623350743502599e37,1.625349943802479e37,1.627349144102359e37,1.6293483444022391e37,1.631347544702119e37,1.6333467450019993e37,1.6353459453018792e37,1.6373451456017592e37,1.6393443459016394e37,1.6413435462015193e37,1.6433427465013993e37,1.6453419468012795e37,1.6473411471011594e37,1.6493403474010396e37,1.6513395477009196e37,1.6533387480007995e37,1.6553379483006797e37,1.6573371486005597e37,1.65933634890044e37,1.6613355492003198e37,1.6633347495001998e37,1.66533394980008e37,1.66733315009996e37,1.6693323503998401e37,1.67133155069972e37,1.6733307509996e37,1.6753299512994802e37,1.6773291515993602e37,1.6793283518992401e37,1.6813275521991203e37,1.6833267524990003e37,1.6853259527988805e37,1.6873251530987604e37,1.6893243533986404e37,1.6913235536985206e37,1.6933227539984005e37,1.6953219542982807e37,1.6973211545981607e37,1.6993203548980407e37,1.7013195551979208e37,1.7033187554978008e37,1.705317955797681e37,1.707317156097561e37,1.709316356397441e37,1.711315556697321e37,1.713314756997201e37,1.7153139572970812e37,1.7173131575969612e37,1.7193123578968412e37,1.7213115581967213e37,1.7233107584966013e37,1.7253099587964813e37,1.7273091590963614e37,1.7293083593962414e37,1.7313075596961216e37,1.7333067599960016e37,1.7353059602958815e37,1.7373051605957617e37,1.7393043608956417e37,1.7413035611955218e37,1.7433027614954018e37,1.7453019617952818e37,1.747301162095162e37,1.749300362395042e37,1.751299562694922e37,1.753298762994802e37,1.755297963294682e37,1.7572971635945622e37,1.7592963638944422e37,1.761295564194322e37,1.7632947644942023e37,1.7652939647940823e37,1.7672931650939625e37,1.7692923653938424e37,1.7712915656937224e37,1.7732907659936026e37,1.7752899662934825e37,1.7772891665933627e37,1.7792883668932427e37,1.7812875671931226e37,1.7832867674930028e37,1.7852859677928828e37,1.787285168092763e37,1.789284368392643e37,1.7912835686925229e37,1.793282768992403e37,1.795281969292283e37,1.7972811695921632e37,1.7992803698920432e37,1.8012795701919231e37,1.8032787704918033e37,1.8052779707916833e37,1.8072771710915632e37,1.8092763713914434e37,1.8112755716913234e37,1.8132747719912036e37,1.8152739722910835e37,1.8172731725909635e37,1.8192723728908437e37,1.8212715731907236e37,1.8232707734906038e37,1.8252699737904838e37,1.8272691740903637e37,1.829268374390244e37,1.8312675746901239e37,1.833266774990004e37,1.835265975289884e37,1.837265175589764e37,1.8392643758896442e37,1.8412635761895241e37,1.8432627764894043e37,1.8452619767892843e37,1.8472611770891642e37,1.8492603773890444e37,1.8512595776889244e37,1.8532587779888043e37,1.8552579782886845e37,1.8572571785885645e37,1.8592563788884447e37,1.8612555791883246e37,1.8632547794882046e37,1.8652539797880848e37,1.8672531800879647e37,1.869252380387845e37,1.8712515806877249e37,1.8732507809876048e37,1.875249981287485e37,1.877249181587365e37,1.8792483818872452e37,1.8812475821871251e37,1.883246782487005e37,1.8852459827868853e37,1.8872451830867652e37,1.8892443833866452e37,1.8912435836865254e37,1.8932427839864053e37,1.8952419842862855e37,1.8972411845861655e37,1.8992403848860454e37,1.9012395851859256e37,1.9032387854858056e37,1.9052379857856858e37,1.9072371860855657e37,1.9092363863854457e37,1.9112355866853259e37,1.9132347869852058e37,1.915233987285086e37,1.917233187584966e37,1.919232387884846e37,1.9212315881847261e37,1.923230788484606e37,1.9252299887844863e37,1.9272291890843662e37,1.9292283893842462e37,1.9312275896841264e37,1.9332267899840063e37,1.9352259902838863e37,1.9372251905837665e37,1.9392243908836464e37,1.9412235911835266e37,1.9432227914834066e37,1.9452219917832865e37,1.9472211920831667e37,1.9492203923830467e37,1.951219592682927e37,1.9532187929828068e37,1.9552179932826868e37,1.957217193582567e37,1.959216393882447e37,1.9612155941823271e37,1.963214794482207e37,1.965213994782087e37,1.9672131950819672e37,1.9692123953818472e37,1.9712115956817272e37,1.9732107959816073e37,1.9752099962814873e37,1.9772091965813675e37,1.9792083968812474e37,1.9812075971811274e37,1.9832067974810076e37,1.9852059977808875e37,1.9872051980807677e37,1.9892043983806477e37,1.9912035986805277e37,1.9932027989804078e37,1.9952019992802878e37,1.997201199580168e37,1.999200399880048e37,2.001199600179928e37,2.003198800479808e37,2.005198000779688e37,2.0071972010795682e37,2.0091964013794482e37,2.0111956016793282e37,2.0131948019792083e37,2.0151940022790883e37,2.0171932025789683e37,2.0191924028788485e37,2.0211916031787284e37,2.0231908034786086e37,2.0251900037784886e37,2.0271892040783685e37,2.0291884043782487e37,2.0311876046781287e37,2.0331868049780088e37,2.0351860052778888e37,2.0371852055777688e37,2.039184405877649e37,2.041183606177529e37,2.043182806477409e37,2.045182006777289e37,2.047181207077169e37,2.0491804073770492e37,2.0511796076769292e37,2.053178807976809e37,2.0551780082766893e37,2.0571772085765693e37,2.0591764088764495e37,2.0611756091763294e37,2.0631748094762094e37,2.0651740097760896e37,2.0671732100759695e37,2.0691724103758497e37,2.0711716106757297e37,2.0731708109756096e37,2.0751700112754898e37,2.0771692115753698e37,2.07916841187525e37,2.08116761217513e37,2.0831668124750099e37,2.08516601277489e37,2.08716521307477e37,2.0891644133746502e37,2.0911636136745302e37,2.0931628139744101e37,2.0951620142742903e37,2.0971612145741703e37,2.0991604148740502e37,2.1011596151739304e37,2.1031588154738104e37,2.1051580157736906e37,2.1071572160735705e37,2.1091564163734505e37,2.1111556166733307e37,2.1131548169732106e37,2.1151540172730908e37,2.1171532175729708e37,2.1191524178728507e37,2.121151618172731e37,2.1231508184726109e37,2.125150018772491e37,2.127149219072371e37,2.129148419372251e37,2.131147619672131e37,2.1331468199720114e37,2.135146020271891e37,2.1371452205717713e37,2.1391444208716515e37,2.141143621171531e37,2.1431428214714114e37,2.1451420217712916e37,2.1471412220711713e37,2.1491404223710515e37,2.1511396226709317e37,2.153138822970812e37,2.1551380232706916e37,2.157137223570572e37,2.159136423870452e37,2.1611356241703317e37,2.163134824470212e37,2.165134024770092e37,2.167133225069972e37,2.169132425369852e37,2.171131625669732e37,2.173130825969612e37,2.175130026269492e37,2.1771292265693723e37,2.1791284268692525e37,2.181127627169132e37,2.1831268274690124e37,2.1851260277688926e37,2.1871252280687723e37,2.1891244283686525e37,2.1911236286685327e37,2.1931228289684124e37,2.1951220292682926e37,2.197121229568173e37,2.1991204298680525e37,2.2011196301679327e37,2.203118830467813e37,2.205118030767693e37,2.207117231067573e37,2.209116431367453e37,2.211115631667333e37,2.213114831967213e37,2.215114032267093e37,2.2171132325669733e37,2.219112432866853e37,2.221111633166733e37,2.2231108334666134e37,2.2251100337664936e37,2.2271092340663733e37,2.2291084343662535e37,2.2311076346661337e37,2.2331068349660134e37,2.2351060352658936e37,2.237105235565774e37,2.2391044358656535e37,2.2411036361655337e37,2.243102836465414e37,2.2451020367652936e37,2.247101237065174e37,2.249100437365054e37,2.251099637664934e37,2.253098837964814e37,2.255098038264694e37,2.2570972385645743e37,2.259096438864454e37,2.261095639164334e37,2.2630948394642144e37,2.265094039764094e37,2.2670932400639743e37,2.2690924403638545e37,2.2710916406637347e37,2.2730908409636144e37,2.2750900412634946e37,2.277089241563375e37,2.2790884418632545e37,2.2810876421631347e37,2.283086842463015e37,2.2850860427628946e37,2.287085243062775e37,2.289084443362655e37,2.2910836436625347e37,2.293082843962415e37,2.295082044262295e37,2.2970812445621753e37,2.299080444862055e37,2.301079645161935e37,2.3030788454618154e37,2.305078045761695e37,2.3070772460615753e37,2.3090764463614555e37,2.311075646661335e37,2.3130748469612154e37,2.3150740472610956e37,2.317073247560976e37,2.3190724478608555e37,2.3210716481607357e37,2.323070848460616e37,2.3250700487604956e37,2.327069249060376e37,2.329068449360256e37,2.3310676496601357e37,2.333066849960016e37,2.335066050259896e37,2.337065250559776e37,2.339064450859656e37,2.341063651159536e37,2.3430628514594164e37,2.345062051759296e37,2.3470612520591763e37,2.3490604523590565e37,2.351059652658936e37,2.3530588529588164e37,2.3550580532586966e37,2.3570572535585763e37,2.3590564538584565e37,2.3610556541583367e37,2.3630548544582164e37,2.3650540547580966e37,2.367053255057977e37,2.369052455357857e37,2.3710516556577367e37,2.373050855957617e37,2.375050056257497e37,2.377049256557377e37,2.379048456857257e37,2.381047657157137e37,2.383046857457017e37,2.385046057756897e37,2.3870452580567773e37,2.3890444583566575e37,2.391043658656537e37,2.3930428589564174e37,2.3950420592562976e37,2.3970412595561773e37,2.3990404598560575e37,2.4010396601559377e37,2.4030388604558174e37,2.4050380607556976e37,2.407037261055578e37,2.4090364613554575e37,2.4110356616553377e37,2.413034861955218e37,2.415034062255098e37,2.417033262554978e37,2.419032462854858e37,2.421031663154738e37,2.423030863454618e37,2.425030063754498e37,2.4270292640543783e37,2.429028464354258e37,2.431027664654138e37,2.4330268649540184e37,2.4350260652538986e37,2.4370252655537783e37,2.4390244658536585e37,2.4410236661535387e37,2.4430228664534184e37,2.4450220667532986e37,2.447021267053179e37,2.4490204673530585e37,2.4510196676529387e37,2.453018867952819e37,2.4550180682526986e37,2.457017268552579e37,2.459016468852459e37,2.461015669152339e37,2.463014869452219e37,2.465014069752099e37,2.4670132700519793e37,2.469012470351859e37,2.471011670651739e37,2.4730108709516194e37,2.475010071251499e37,2.4770092715513793e37,2.4790084718512595e37,2.4810076721511397e37,2.4830068724510194e37,2.4850060727508996e37,2.48700527305078e37,2.4890044733506595e37,2.4910036736505397e37,2.49300287395042e37,2.4950020742502996e37,2.49700127455018e37,2.49900047485006e37,2.5009996751499398e37,2.50299887544982e37,2.5049980757497e37,2.5069972760495803e37,2.50899647634946e37,2.5109956766493402e37,2.5129948769492204e37,2.5149940772491e37,2.5169932775489803e37,2.5189924778488605e37,2.5209916781487403e37,2.5229908784486204e37,2.5249900787485006e37,2.5269892790483804e37,2.5289884793482605e37,2.5309876796481407e37,2.532986879948021e37,2.5349860802479007e37,2.536985280547781e37,2.538984480847661e37,2.5409836811475408e37,2.542982881447421e37,2.544982081747301e37,2.546981282047181e37,2.548980482347061e37,2.5509796826469412e37,2.5529788829468214e37,2.554978083246701e37,2.5569772835465813e37,2.5589764838464615e37,2.5609756841463413e37,2.5629748844462215e37,2.5649740847461016e37,2.5669732850459814e37,2.5689724853458616e37,2.5709716856457417e37,2.5729708859456215e37,2.5749700862455017e37,2.576969286545382e37,2.578968486845262e37,2.5809676871451418e37,2.582966887445022e37,2.584966087744902e37,2.586965288044782e37,2.588964488344662e37,2.5909636886445422e37,2.592962888944422e37,2.594962089244302e37,2.5969612895441824e37,2.5989604898440625e37,2.6009596901439423e37,2.6029588904438225e37,2.6049580907437026e37,2.6069572910435824e37,2.6089564913434626e37,2.6109556916433427e37,2.6129548919432225e37,2.6149540922431027e37,2.616953292542983e37,2.6189524928428626e37,2.620951693142743e37,2.622950893442623e37,2.624950093742503e37,2.626949294042383e37,2.628948494342263e37,2.6309476946421433e37,2.632946894942023e37,2.634946095241903e37,2.6369452955417834e37,2.638944495841663e37,2.6409436961415433e37,2.6429428964414235e37,2.6449420967413037e37,2.6469412970411834e37,2.6489404973410636e37,2.6509396976409438e37,2.6529388979408235e37,2.6549380982407037e37,2.656937298540584e37,2.6589364988404636e37,2.660935699140344e37,2.662934899440224e37,2.6649340997401037e37,2.666933300039984e37,2.668932500339864e37,2.6709317006397443e37,2.672930900939624e37,2.674930101239504e37,2.6769293015393844e37,2.678928501839264e37,2.6809277021391443e37,2.6829269024390245e37,2.684926102738904e37,2.6869253030387844e37,2.6889245033386646e37,2.6909237036385443e37,2.6929229039384245e37,2.6949221042383047e37,2.696921304538185e37,2.6989205048380646e37,2.700919705137945e37,2.702918905437825e37,2.7049181057377047e37,2.706917306037585e37,2.708916506337465e37,2.710915706637345e37,2.712914906937225e37,2.714914107237105e37,2.7169133075369854e37,2.718912507836865e37,2.7209117081367453e37,2.7229109084366255e37,2.724910108736505e37,2.7269093090363854e37,2.7289085093362656e37,2.7309077096361453e37,2.7329069099360255e37,2.7349061102359057e37,2.7369053105357854e37,2.7389045108356656e37,2.740903711135546e37,2.742902911435426e37,2.7449021117353057e37,2.746901312035186e37,2.748900512335066e37,2.750899712634946e37,2.752898912934826e37,2.754898113234706e37,2.756897313534586e37,2.758896513834466e37,2.7608957141343463e37,2.7628949144342265e37,2.764894114734106e37,2.7668933150339864e37,2.7688925153338666e37,2.7708917156337463e37,2.7728909159336265e37,2.7748901162335067e37,2.7768893165333864e37,2.7788885168332666e37,2.780887717133147e37,2.7828869174330265e37,2.7848861177329067e37,2.786885318032787e37,2.788884518332667e37,2.790883718632547e37,2.792882918932427e37,2.794882119232307e37,2.796881319532187e37,2.798880519832067e37,2.8008797201319473e37,2.802878920431827e37,2.804878120731707e37,2.8068773210315874e37,2.8088765213314676e37,2.8108757216313473e37,2.8128749219312275e37,2.8148741222311077e37,2.8168733225309874e37,2.8188725228308676e37,2.820871723130748e37,2.8228709234306275e37,2.8248701237305077e37,2.826869324030388e37,2.8288685243302676e37,2.830867724630148e37,2.832866924930028e37,2.834866125229908e37,2.836865325529788e37,2.838864525829668e37,2.8408637261295483e37,2.842862926429428e37,2.844862126729308e37,2.8468613270291884e37,2.848860527329068e37,2.8508597276289483e37,2.8528589279288285e37,2.8548581282287087e37,2.8568573285285884e37,2.8588565288284686e37,2.860855729128349e37,2.8628549294282285e37,2.8648541297281087e37,2.866853330027989e37,2.8688525303278686e37,2.870851730627749e37,2.872850930927629e37,2.8748501312275087e37,2.876849331527389e37,2.878848531827269e37,2.8808477321271493e37,2.882846932427029e37,2.884846132726909e37,2.8868453330267894e37,2.888844533326669e37,2.8908437336265493e37,2.8928429339264295e37,2.894842134226309e37,2.8968413345261894e37,2.8988405348260696e37,2.9008397351259493e37,2.9028389354258295e37,2.9048381357257097e37,2.90683733602559e37,2.9088365363254696e37,2.91083573662535e37,2.91283493692523e37,2.9148341372251097e37,2.91683333752499e37,2.91883253782487e37,2.92083173812475e37,2.92283093842463e37,2.92483013872451e37,2.9268293390243904e37,2.92882853932427e37,2.9308277396241503e37,2.9328269399240305e37,2.93482614022391e37,2.9368253405237904e37,2.9388245408236706e37,2.9408237411235503e37,2.9428229414234305e37,2.9448221417233107e37,2.9468213420231904e37,2.9488205423230706e37,2.950819742622951e37,2.952818942922831e37,2.9548181432227107e37,2.956817343522591e37,2.958816543822471e37,2.960815744122351e37,2.962814944422231e37,2.964814144722111e37,2.966813345021991e37,2.968812545321871e37,2.9708117456217513e37,2.9728109459216315e37,2.974810146221511e37,2.9768093465213914e37,2.9788085468212716e37,2.9808077471211513e37,2.9828069474210315e37,2.9848061477209117e37,2.9868053480207914e37,2.9888045483206716e37,2.990803748620552e37,2.9928029489204315e37,2.9948021492203117e37,2.996801349520192e37,2.998800549820072e37,3.000799750119952e37,3.002798950419832e37,3.004798150719712e37,3.006797351019592e37,3.008796551319472e37,3.0107957516193523e37,3.012794951919232e37,3.014794152219112e37,3.0167933525189924e37,3.0187925528188726e37,3.0207917531187523e37,3.0227909534186325e37,3.0247901537185127e37,3.0267893540183924e37,3.0287885543182726e37,3.030787754618153e37,3.0327869549180325e37,3.0347861552179127e37,3.036785355517793e37,3.0387845558176726e37,3.040783756117553e37,3.042782956417433e37,3.044782156717313e37,3.046781357017193e37,3.048780557317073e37,3.0507797576169533e37,3.052778957916833e37,3.0547781582167132e37,3.0567773585165934e37,3.058776558816473e37,3.0607757591163533e37,3.0627749594162335e37,3.0647741597161133e37,3.0667733600159934e37,3.0687725603158736e37,3.070771760615754e37,3.0727709609156335e37,3.0747701612155137e37,3.076769361515394e37,3.0787685618152737e37,3.080767762115154e37,3.082766962415034e37,3.0847661627149138e37,3.086765363014794e37,3.088764563314674e37,3.0907637636145543e37,3.092762963914434e37,3.0947621642143142e37,3.0967613645141944e37,3.098760564814074e37,3.1007597651139543e37,3.1027589654138345e37,3.1047581657137143e37,3.1067573660135944e37,3.1087565663134746e37,3.1107557666133544e37,3.1127549669132346e37,3.1147541672131147e37,3.116753367512995e37,3.1187525678128747e37,3.120751768112755e37,3.122750968412635e37,3.1247501687125148e37,3.126749369012395e37,3.128748569312275e37,3.130747769612155e37,3.132746969912035e37,3.1347461702119152e37,3.1367453705117954e37,3.138744570811675e37,3.1407437711115554e37,3.1427429714114355e37,3.1447421717113153e37,3.1467413720111955e37,3.1487405723110756e37,3.1507397726109554e37,3.1527389729108356e37,3.1547381732107157e37,3.1567373735105955e37,3.1587365738104757e37,3.160735774110356e37,3.162734974410236e37,3.164734174710116e37,3.166733375009996e37,3.168732575309876e37,3.170731775609756e37,3.172730975909636e37,3.1747301762095163e37,3.176729376509396e37,3.178728576809276e37,3.1807277771091564e37,3.1827269774090365e37,3.1847261777089163e37,3.1867253780087965e37,3.1887245783086767e37,3.1907237786085564e37,3.1927229789084366e37,3.1947221792083168e37,3.1967213795081965e37,3.1987205798080767e37,3.200719780107957e37,3.2027189804078366e37,3.204718180707717e37,3.206717381007597e37,3.208716581307477e37,3.210715781607357e37,3.212714981907237e37,3.2147141822071173e37,3.216713382506997e37,3.218712582806877e37,3.2207117831067574e37,3.222710983406637e37,3.2247101837065173e37,3.2267093840063975e37,3.228708584306277e37,3.2307077846061574e37,3.2327069849060376e37,3.2347061852059178e37,3.2367053855057975e37,3.2387045858056777e37,3.240703786105558e37,3.2427029864054376e37,3.244702186705318e37,3.246701387005198e37,3.2487005873050777e37,3.250699787604958e37,3.252698987904838e37,3.2546981882047183e37,3.256697388504598e37,3.258696588804478e37,3.2606957891043584e37,3.262694989404238e37,3.2646941897041183e37,3.2666933900039985e37,3.268692590303878e37,3.2706917906037584e37,3.2726909909036386e37,3.2746901912035183e37,3.2766893915033985e37,3.2786885918032787e37,3.280687792103159e37,3.2826869924030386e37,3.284686192702919e37,3.286685393002799e37,3.2886845933026787e37,3.290683793602559e37,3.292682993902439e37,3.294682194202319e37,3.296681394502199e37,3.298680594802079e37,3.3006797951019594e37,3.302678995401839e37,3.3046781957017193e37,3.3066773960015995e37,3.308676596301479e37,3.3106757966013594e37,3.3126749969012396e37,3.3146741972011193e37,3.3166733975009995e37,3.3186725978008797e37,3.3206717981007594e37,3.3226709984006396e37,3.32467019870052e37,3.3266693990004e37,3.3286685993002797e37,3.33066779960016e37,3.33266699990004e37,3.33466620019992e37,3.3366654004998e37,3.33866460079968e37,3.34066380109956e37,3.34266300139944e37,3.3446622016993203e37,3.3466614019992005e37,3.34866060229908e37,3.3506598025989604e37,3.3526590028988406e37,3.3546582031987203e37,3.3566574034986005e37,3.3586566037984807e37,3.3606558040983604e37,3.3626550043982406e37,3.364654204698121e37,3.3666534049980005e37,3.3686526052978807e37,3.370651805597761e37,3.372651005897641e37,3.374650206197521e37,3.376649406497401e37,3.378648606797281e37,3.380647807097161e37,3.382647007397041e37,3.3846462076969213e37,3.386645407996801e37,3.388644608296681e37,3.3906438085965614e37,3.392643008896441e37,3.3946422091963213e37,3.3966414094962015e37,3.3986406097960817e37,3.4006398100959614e37,3.4026390103958416e37,3.404638210695722e37,3.4066374109956015e37,3.4086366112954817e37,3.410635811595362e37,3.4126350118952416e37,3.414634212195122e37,3.416633412495002e37,3.418632612794882e37,3.420631813094762e37,3.422631013394642e37,3.4246302136945223e37,3.426629413994402e37,3.428628614294282e37,3.4306278145941624e37,3.432627014894042e37,3.4346262151939223e37,3.4366254154938025e37,3.438624615793682e37,3.4406238160935624e37,3.4426230163934426e37,3.444622216693323e37,3.4466214169932025e37,3.4486206172930827e37,3.450619817592963e37,3.4526190178928426e37,3.454618218192723e37,3.456617418492603e37,3.4586166187924827e37,3.460615819092363e37,3.462615019392243e37,3.4646142196921233e37,3.466613419992003e37,3.468612620291883e37,3.4706118205917634e37,3.472611020891643e37,3.4746102211915233e37,3.4766094214914035e37,3.478608621791283e37,3.4806078220911634e37,3.4826070223910436e37,3.4846062226909233e37,3.4866054229908035e37,3.4886046232906837e37,3.490603823590564e37,3.4926030238904436e37,3.494602224190324e37,3.496601424490204e37,3.4986006247900837e37,3.500599825089964e37,3.502599025389844e37,3.504598225689724e37,3.506597425989604e37,3.508596626289484e37,3.5105958265893644e37,3.512595026889244e37,3.5145942271891243e37,3.5165934274890045e37,3.518592627788884e37,3.5205918280887644e37,3.5225910283886446e37,3.5245902286885243e37,3.5265894289884045e37,3.5285886292882847e37,3.5305878295881644e37,3.5325870298880446e37,3.534586230187925e37,3.536585430487805e37,3.5385846307876847e37,3.540583831087565e37,3.542583031387445e37,3.544582231687325e37,3.546581431987205e37,3.548580632287085e37,3.550579832586965e37,3.552579032886845e37,3.5545782331867253e37,3.5565774334866055e37,3.558576633786485e37,3.5605758340863654e37,3.5625750343862456e37,3.5645742346861253e37,3.5665734349860055e37,3.5685726352858857e37,3.5705718355857654e37,3.5725710358856456e37,3.574570236185526e37,3.5765694364854055e37,3.5785686367852857e37,3.580567837085166e37,3.582567037385046e37,3.584566237684926e37,3.586565437984806e37,3.588564638284686e37,3.590563838584566e37,3.592563038884446e37,3.5945622391843263e37,3.596561439484206e37,3.5985606397840862e37,3.6005598400839664e37,3.602559040383846e37,3.6045582406837263e37,3.6065574409836065e37,3.6085566412834867e37,3.6105558415833664e37,3.6125550418832466e37,3.614554242183127e37,3.6165534424830065e37,3.6185526427828867e37,3.620551843082767e37,3.6225510433826467e37,3.624550243682527e37,3.626549443982407e37,3.628548644282287e37,3.630547844582167e37,3.632547044882047e37,3.6345462451819273e37,3.636545445481807e37,3.6385446457816872e37,3.6405438460815674e37,3.642543046381447e37,3.6445422466813273e37,3.6465414469812075e37,3.6485406472810873e37,3.6505398475809674e37,3.6525390478808476e37,3.654538248180728e37,3.6565374484806076e37,3.6585366487804877e37,3.660535849080368e37,3.6625350493802477e37,3.664534249680128e37,3.666533449980008e37,3.6685326502798878e37,3.670531850579768e37,3.672531050879648e37,3.6745302511795283e37,3.676529451479408e37,3.6785286517792882e37,3.6805278520791684e37,3.682527052379048e37,3.6845262526789283e37,3.6865254529788085e37,3.6885246532786883e37,3.6905238535785685e37,3.6925230538784486e37,3.6945222541783284e37,3.6965214544782086e37,3.6985206547780887e37,3.700519855077969e37,3.7025190553778487e37,3.704518255677729e37,3.706517455977609e37,3.7085166562774888e37,3.710515856577369e37,3.712515056877249e37,3.714514257177129e37,3.716513457477009e37,3.7185126577768893e37,3.7205118580767694e37,3.722511058376649e37,3.7245102586765294e37,3.7265094589764095e37,3.7285086592762893e37,3.7305078595761695e37,3.7325070598760496e37,3.7345062601759294e37,3.7365054604758096e37,3.7385046607756898e37,3.7405038610755695e37,3.7425030613754497e37,3.74450226167533e37,3.74650146197521e37,3.74850066227509e37,3.75049986257497e37,3.75249906287485e37,3.75449826317473e37,3.75649746347461e37,3.7584966637744903e37,3.76049586407437e37,3.76249506437425e37,3.7644942646741304e37,3.76649346497401e37,3.7684926652738903e37,3.7704918655737705e37,3.7724910658736507e37,3.7744902661735304e37,3.7764894664734106e37,3.7784886667732908e37,3.7804878670731705e37,3.7824870673730507e37,3.784486267672931e37,3.7864854679728106e37,3.788484668272691e37,3.790483868572571e37,3.792483068872451e37,3.794482269172331e37,3.796481469472211e37,3.7984806697720913e37,3.800479870071971e37,3.802479070371851e37,3.8044782706717314e37,3.806477470971611e37,3.8084766712714913e37,3.8104758715713715e37,3.812475071871251e37,3.8144742721711314e37,3.8164734724710116e37,3.8184726727708918e37,3.8204718730707715e37,3.8224710733706517e37,3.824470273670532e37,3.8264694739704116e37,3.828468674270292e37,3.830467874570172e37,3.8324670748700517e37,3.834466275169932e37,3.836465475469812e37,3.8384646757696923e37,3.840463876069572e37,3.842463076369452e37,3.8444622766693324e37,3.846461476969212e37,3.8484606772690923e37,3.8504598775689725e37,3.852459077868852e37,3.8544582781687324e37,3.8564574784686126e37,3.8584566787684923e37,3.8604558790683725e37,3.8624550793682527e37,3.864454279668133e37,3.8664534799680126e37,3.868452680267893e37,3.870451880567773e37,3.8724510808676527e37,3.874450281167533e37,3.876449481467413e37,3.878448681767293e37,3.880447882067173e37,3.882447082367053e37,3.8844462826669334e37,3.886445482966813e37,3.8884446832666933e37,3.8904438835665735e37,3.892443083866453e37,3.8944422841663334e37,3.8964414844662136e37,3.8984406847660933e37,3.9004398850659735e37,3.9024390853658537e37,3.9044382856657334e37,3.9064374859656136e37,3.908436686265494e37,3.910435886565374e37,3.9124350868652537e37,3.914434287165134e37,3.916433487465014e37,3.918432687764894e37,3.920431888064774e37,3.922431088364654e37,3.924430288664534e37,3.926429488964414e37,3.9284286892642943e37,3.930427889564174e37,3.932427089864054e37,3.9344262901639344e37,3.9364254904638146e37,3.9384246907636943e37,3.9404238910635745e37,3.9424230913634547e37,3.9444222916633344e37,3.9464214919632146e37,3.948420692263095e37,3.9504198925629745e37,3.9524190928628547e37,3.954418293162735e37,3.956417493462615e37,3.958416693762495e37,3.960415894062375e37,3.962415094362255e37,3.964414294662135e37,3.966413494962015e37,3.9684126952618953e37,3.970411895561775e37,3.972411095861655e37,3.9744102961615354e37,3.976409496461415e37,3.9784086967612953e37,3.9804078970611755e37,3.9824070973610557e37,3.9844062976609354e37,3.9864054979608156e37,3.988404698260696e37,3.9904038985605755e37,3.9924030988604557e37,3.994402299160336e37,3.9964014994602156e37,3.998400699760096e37,4.000399900059976e37,4.002399100359856e37,4.004398300659736e37,4.006397500959616e37,4.0083967012594963e37,4.010395901559376e37,4.012395101859256e37,4.0143943021591364e37,4.016393502459016e37,4.0183927027588963e37,4.0203919030587765e37,4.022391103358656e37,4.0243903036585364e37,4.0263895039584166e37,4.028388704258297e37,4.0303879045581765e37,4.0323871048580567e37,4.034386305157937e37,4.0363855054578166e37,4.038384705757697e37,4.040383906057577e37,4.0423831063574567e37,4.044382306657337e37,4.046381506957217e37,4.0483807072570973e37,4.050379907556977e37,4.052379107856857e37,4.0543783081567374e37,4.056377508456617e37,4.0583767087564973e37,4.0603759090563775e37,4.062375109356257e37,4.0643743096561374e37,4.0663735099560176e37,4.0683727102558973e37,4.0703719105557775e37,4.0723711108556577e37,4.074370311155538e37,4.0763695114554176e37,4.078368711755298e37,4.080367912055178e37,4.0823671123550577e37,4.084366312654938e37,4.086365512954818e37,4.088364713254698e37,4.090363913554578e37,4.092363113854458e37,4.094362314154338e37,4.096361514454218e37,4.0983607147540983e37,4.1003599150539785e37,4.102359115353858e37,4.1043583156537384e37,4.1063575159536186e37,4.1083567162534983e37,4.1103559165533785e37,4.1123551168532587e37,4.1143543171531384e37,4.1163535174530186e37,4.118352717752899e37,4.120351918052779e37,4.1223511183526587e37,4.124350318652539e37,4.126349518952419e37,4.128348719252299e37,4.130347919552179e37,4.132347119852059e37,4.134346320151939e37,4.136345520451819e37,4.1383447207516993e37,4.140343921051579e37,4.1423431213514592e37,4.1443423216513394e37,4.1463415219512196e37,4.1483407222510993e37,4.1503399225509795e37,4.1523391228508597e37,4.1543383231507394e37,4.1563375234506196e37,4.1583367237505e37,4.1603359240503795e37,4.1623351243502597e37,4.16433432465014e37,4.16633352495002e37,4.1683327252499e37,4.17033192554978e37,4.17233112584966e37,4.17433032614954e37,4.17632952644942e37,4.1783287267493003e37,4.18032792704918e37,4.1823271273490602e37,4.1843263276489404e37,4.18632552794882e37,4.1883247282487003e37,4.1903239285485805e37,4.1923231288484607e37,4.1943223291483404e37,4.1963215294482206e37,4.198320729748101e37,4.2003199300479806e37,4.2023191303478607e37,4.204318330647741e37,4.2063175309476207e37,4.208316731247501e37,4.210315931547381e37,4.212315131847261e37,4.214314332147141e37,4.216313532447021e37,4.2183127327469013e37,4.220311933046781e37,4.2223111333466612e37,4.2243103336465414e37,4.226309533946421e37,4.2283087342463013e37,4.2303079345461815e37,4.2323071348460613e37,4.2343063351459415e37,4.2363055354458216e37,4.238304735745702e37,4.2403039360455816e37,4.2423031363454617e37,4.244302336645342e37,4.2463015369452217e37,4.248300737245102e37,4.250299937544982e37,4.2522991378448618e37,4.254298338144742e37,4.256297538444622e37,4.258296738744502e37,4.260295939044383e37,4.262295139344262e37,4.264294339644142e37,4.266293539944022e37,4.268292740243902e37,4.270291940543783e37,4.272291140843663e37,4.274290341143543e37,4.276289541443422e37,4.278288741743302e37,4.280287942043183e37,4.282287142343063e37,4.284286342642943e37,4.286285542942823e37,4.288284743242702e37,4.290283943542583e37,4.292283143842463e37,4.294282344142343e37,4.296281544442223e37,4.298280744742103e37,4.300279945041984e37,4.302279145341863e37,4.304278345641743e37,4.306277545941623e37,4.308276746241503e37,4.310275946541384e37,4.312275146841264e37,4.314274347141143e37,4.316273547441023e37,4.318272747740903e37,4.320271948040784e37,4.322271148340664e37,4.324270348640544e37,4.326269548940424e37,4.328268749240303e37,4.330267949540184e37,4.332267149840064e37,4.334266350139944e37,4.336265550439824e37,4.338264750739704e37,4.340263951039585e37,4.342263151339464e37,4.344262351639344e37,4.346261551939224e37,4.348260752239104e37,4.350259952538985e37,4.352259152838865e37,4.354258353138744e37,4.356257553438624e37,4.358256753738504e37,4.360255954038385e37,4.362255154338265e37,4.364254354638145e37,4.366253554938025e37,4.368252755237904e37,4.370251955537785e37,4.372251155837665e37,4.374250356137545e37,4.376249556437425e37,4.378248756737305e37,4.380247957037185e37,4.382247157337065e37,4.384246357636945e37,4.386245557936825e37,4.388244758236705e37,4.390243958536586e37,4.392243158836466e37,4.394242359136345e37,4.396241559436225e37,4.398240759736105e37,4.400239960035986e37,4.402239160335866e37,4.404238360635746e37,4.406237560935625e37,4.408236761235505e37,4.410235961535386e37,4.412235161835266e37,4.414234362135146e37,4.416233562435026e37,4.418232762734906e37,4.420231963034786e37,4.422231163334666e37,4.424230363634546e37,4.426229563934426e37,4.428228764234306e37,4.430227964534187e37,4.432227164834066e37,4.434226365133946e37,4.436225565433826e37,4.438224765733706e37,4.440223966033587e37,4.442223166333467e37,4.444222366633347e37,4.446221566933226e37,4.448220767233106e37,4.450219967532987e37,4.452219167832867e37,4.454218368132747e37,4.456217568432627e37,4.458216768732507e37,4.460215969032387e37,4.462215169332267e37,4.464214369632147e37,4.466213569932027e37,4.468212770231907e37,4.470211970531788e37,4.472211170831667e37,4.474210371131547e37,4.476209571431427e37,4.478208771731307e37,4.480207972031188e37,4.482207172331068e37,4.484206372630948e37,4.486205572930827e37,4.488204773230707e37,4.490203973530588e37,4.492203173830468e37,4.494202374130348e37,4.496201574430228e37,4.498200774730107e37,4.500199975029988e37,4.502199175329868e37,4.504198375629748e37,4.506197575929628e37,4.508196776229508e37,4.510195976529389e37,4.512195176829268e37,4.514194377129148e37,4.516193577429028e37,4.518192777728908e37,4.520191978028789e37,4.522191178328669e37,4.524190378628548e37,4.526189578928428e37,4.528188779228308e37,4.530187979528189e37,4.532187179828069e37,4.534186380127949e37,4.536185580427829e37,4.538184780727708e37,4.540183981027589e37,4.542183181327469e37,4.544182381627349e37,4.546181581927229e37,4.548180782227109e37,4.550179982526989e37,4.552179182826869e37,4.554178383126749e37,4.556177583426629e37,4.558176783726509e37,4.56017598402639e37,4.56217518432627e37,4.564174384626149e37,4.566173584926029e37,4.568172785225909e37,4.57017198552579e37,4.57217118582567e37,4.57417038612555e37,4.57616958642543e37,4.578168786725309e37,4.58016798702519e37,4.58216718732507e37,4.58416638762495e37,4.58616558792483e37,4.58816478822471e37,4.59016398852459e37,4.59216318882447e37,4.59416238912435e37,4.59616158942423e37,4.59816078972411e37,4.600159990023991e37,4.602159190323871e37,4.60415839062375e37,4.60615759092363e37,4.60815679122351e37,4.610155991523391e37,4.612155191823271e37,4.614154392123151e37,4.61615359242303e37,4.61815279272291e37,4.620151993022791e37,4.622151193322671e37,4.624150393622551e37,4.626149593922431e37,4.628148794222311e37,4.630147994522191e37,4.632147194822071e37,4.634146395121951e37,4.636145595421831e37,4.638144795721711e37,4.640143996021592e37,4.642143196321471e37,4.644142396621351e37,4.646141596921231e37,4.648140797221111e37,4.650139997520992e37,4.652139197820872e37,4.654138398120752e37,4.656137598420631e37,4.658136798720511e37,4.660135999020392e37,4.662135199320272e37,4.664134399620152e37,4.666133599920032e37,4.668132800219912e37,4.670132000519792e37,4.672131200819672e37,4.674130401119552e37,4.676129601419432e37,4.678128801719312e37,4.680128002019193e37,4.682127202319072e37,4.684126402618952e37,4.686125602918832e37,4.688124803218712e37,4.690124003518593e37,4.692123203818473e37,4.694122404118353e37,4.696121604418232e37,4.698120804718112e37,4.700120005017993e37,4.702119205317873e37,4.704118405617753e37,4.706117605917633e37,4.708116806217512e37,4.710116006517393e37,4.712115206817273e37,4.714114407117153e37,4.716113607417033e37,4.718112807716913e37,4.720112008016794e37,4.722111208316673e37,4.724110408616553e37,4.726109608916433e37,4.728108809216313e37,4.730108009516194e37,4.732107209816074e37,4.734106410115953e37,4.736105610415833e37,4.738104810715713e37,4.740104011015594e37,4.742103211315474e37,4.744102411615354e37,4.746101611915234e37,4.748100812215113e37,4.750100012514994e37,4.752099212814874e37,4.754098413114754e37,4.756097613414634e37,4.758096813714514e37,4.760096014014394e37,4.762095214314274e37,4.764094414614154e37,4.766093614914034e37,4.768092815213914e37,4.770092015513795e37,4.772091215813675e37,4.774090416113554e37,4.776089616413434e37,4.778088816713314e37,4.780088017013195e37,4.782087217313075e37,4.784086417612955e37,4.786085617912835e37,4.788084818212714e37,4.790084018512595e37,4.792083218812475e37,4.794082419112355e37,4.796081619412235e37,4.798080819712115e37,4.800080020011995e37,4.802079220311875e37,4.804078420611755e37,4.806077620911635e37,4.808076821211515e37,4.810076021511396e37,4.812075221811276e37,4.814074422111155e37,4.816073622411035e37,4.818072822710915e37,4.820072023010796e37,4.822071223310676e37,4.824070423610556e37,4.826069623910435e37,4.828068824210315e37,4.830068024510196e37,4.832067224810076e37,4.834066425109956e37,4.836065625409836e37,4.838064825709716e37,4.840064026009596e37,4.842063226309476e37,4.844062426609356e37,4.846061626909236e37,4.848060827209116e37,4.850060027508997e37,4.852059227808876e37,4.854058428108756e37,4.856057628408636e37,4.858056828708516e37,4.860056029008397e37,4.862055229308277e37,4.864054429608157e37,4.866053629908036e37,4.8680528302079165e37,4.870052030507797e37,4.872051230807677e37,4.874050431107557e37,4.876049631407437e37,4.878048831707317e37,4.880048032007197e37,4.882047232307077e37,4.884046432606957e37,4.886045632906837e37,4.888044833206717e37,4.890044033506598e37,4.892043233806477e37,4.894042434106357e37,4.896041634406237e37,4.898040834706117e37,4.900040035005998e37,4.902039235305878e37,4.904038435605758e37,4.906037635905637e37,4.9080368362055175e37,4.910036036505398e37,4.912035236805278e37,4.914034437105158e37,4.916033637405038e37,4.9180328377049175e37,4.920032038004798e37,4.922031238304678e37,4.924030438604558e37,4.926029638904438e37,4.928028839204318e37,4.930028039504199e37,4.932027239804078e37,4.934026440103958e37,4.936025640403838e37,4.938024840703718e37,4.940024041003599e37,4.942023241303479e37,4.944022441603358e37,4.946021641903238e37,4.9480208422031185e37,4.950020042502999e37,4.952019242802879e37,4.954018443102759e37,4.956017643402639e37,4.9580168437025185e37,4.960016044002399e37,4.962015244302279e37,4.964014444602159e37,4.966013644902039e37,4.968012845201919e37,4.970012045501799e37,4.972011245801679e37,4.974010446101559e37,4.976009646401439e37,4.9780088467013195e37,4.9800080470012e37,4.98200724730108e37,4.984006447600959e37,4.986005647900839e37,4.9880048482007195e37,4.9900040485006e37,4.99200324880048e37,4.99400244910036e37,4.99600164940024e37,4.9980008497001195e37,5.00000005e37,5.00199925029988e37,5.00399845059976e37,5.00599765089964e37,5.00799685119952e37,5.0099960514994e37,5.01199525179928e37,5.01399445209916e37,5.01599365239904e37,5.0179928526989205e37,5.019992052998801e37,5.021991253298681e37,5.02399045359856e37,5.02598965389844e37,5.0279888541983205e37,5.029988054498201e37,5.031987254798081e37,5.033986455097961e37,5.03598565539784e37,5.0379848556977205e37,5.039984055997601e37,5.041983256297481e37,5.043982456597361e37,5.045981656897241e37,5.047980857197121e37,5.049980057497001e37,5.051979257796881e37,5.053978458096761e37,5.055977658396641e37,5.0579768586965215e37,5.059976058996402e37,5.061975259296281e37,5.063974459596161e37,5.065973659896041e37,5.0679728601959215e37,5.069972060495802e37,5.071971260795682e37,5.073970461095562e37,5.075969661395441e37,5.0779688616953215e37,5.079968061995202e37,5.081967262295082e37,5.083966462594962e37,5.085965662894842e37,5.0879648631947215e37,5.089964063494602e37,5.091963263794482e37,5.093962464094362e37,5.095961664394242e37,5.0979608646941225e37,5.099960064994003e37,5.101959265293882e37,5.103958465593762e37,5.105957665893642e37,5.1079568661935225e37,5.109956066493403e37,5.111955266793283e37,5.113954467093163e37,5.115953667393042e37,5.1179528676929225e37,5.119952067992803e37,5.121951268292683e37,5.123950468592563e37,5.125949668892443e37,5.127948869192323e37,5.129948069492203e37,5.131947269792083e37,5.133946470091963e37,5.135945670391843e37,5.1379448706917235e37,5.139944070991604e37,5.141943271291483e37,5.143942471591363e37,5.145941671891243e37,5.1479408721911235e37,5.149940072491004e37,5.151939272790884e37,5.153938473090763e37,5.155937673390643e37,5.1579368736905235e37,5.159936073990404e37,5.161935274290284e37,5.163934474590164e37,5.165933674890044e37,5.167932875189924e37,5.169932075489804e37,5.171931275789684e37,5.173930476089564e37,5.175929676389444e37,5.1779288766893245e37,5.179928076989204e37,5.181927277289084e37,5.183926477588964e37,5.185925677888844e37,5.1879248781887245e37,5.189924078488605e37,5.191923278788485e37,5.193922479088364e37,5.195921679388244e37,5.1979208796881245e37,5.199920079988005e37,5.201919280287885e37,5.203918480587765e37,5.205917680887645e37,5.207916881187525e37,5.209916081487405e37,5.211915281787285e37,5.213914482087165e37,5.215913682387045e37,5.2179128826869255e37,5.219912082986805e37,5.221911283286685e37,5.223910483586565e37,5.225909683886445e37,5.2279088841863255e37,5.229908084486206e37,5.231907284786086e37,5.233906485085965e37,5.235905685385845e37,5.237904885685726e37,5.239904085985606e37,5.241903286285486e37,5.243902486585366e37,5.245901686885245e37,5.247900887185126e37,5.249900087485006e37,5.251899287784886e37,5.253898488084766e37,5.255897688384646e37,5.2578968886845265e37,5.259896088984406e37,5.261895289284286e37,5.263894489584166e37,5.265893689884046e37,5.2678928901839265e37,5.269892090483807e37,5.271891290783686e37,5.273890491083566e37,5.275889691383446e37,5.277888891683327e37,5.279888091983207e37,5.281887292283087e37,5.283886492582967e37,5.285885692882846e37,5.287884893182727e37,5.289884093482607e37,5.291883293782487e37,5.293882494082367e37,5.295881694382247e37,5.297880894682127e37,5.299880094982007e37,5.301879295281887e37,5.303878495581767e37,5.305877695881647e37,5.3078768961815275e37,5.309876096481408e37,5.311875296781287e37,5.313874497081167e37,5.315873697381047e37,5.317872897680928e37,5.319872097980808e37,5.321871298280688e37,5.323870498580568e37,5.325869698880447e37,5.327868899180328e37,5.329868099480208e37,5.331867299780088e37,5.333866500079968e37,5.335865700379848e37,5.337864900679728e37,5.339864100979608e37,5.341863301279488e37,5.343862501579368e37,5.345861701879248e37,5.347860902179129e37,5.349860102479009e37,5.351859302778888e37,5.353858503078768e37,5.355857703378648e37,5.357856903678529e37,5.359856103978409e37,5.361855304278289e37,5.363854504578168e37,5.365853704878048e37,5.367852905177929e37,5.369852105477809e37,5.371851305777689e37,5.373850506077569e37,5.375849706377449e37,5.377848906677329e37,5.379848106977209e37,5.381847307277089e37,5.383846507576969e37,5.385845707876849e37,5.38784490817673e37,5.389844108476609e37,5.391843308776489e37,5.393842509076369e37,5.395841709376249e37,5.39784090967613e37,5.39984010997601e37,5.40183931027589e37,5.403838510575769e37,5.405837710875649e37,5.40783691117553e37,5.40983611147541e37,5.41183531177529e37,5.41383451207517e37,5.415833712375049e37,5.41783291267493e37,5.41983211297481e37,5.42183131327469e37,5.42383051357457e37,5.42582971387445e37,5.427828914174331e37,5.42982811447421e37,5.43182731477409e37,5.43382651507397e37,5.43582571537385e37,5.437824915673731e37,5.439824115973611e37,5.441823316273491e37,5.44382251657337e37,5.44582171687325e37,5.447820917173131e37,5.449820117473011e37,5.451819317772891e37,5.453818518072771e37,5.45581771837265e37,5.457816918672531e37,5.459816118972411e37,5.461815319272291e37,5.463814519572171e37,5.465813719872051e37,5.467812920171932e37,5.469812120471811e37,5.471811320771691e37,5.473810521071571e37,5.475809721371451e37,5.477808921671332e37,5.479808121971212e37,5.481807322271091e37,5.483806522570971e37,5.485805722870851e37,5.487804923170732e37,5.489804123470612e37,5.491803323770492e37,5.493802524070372e37,5.495801724370251e37,5.497800924670132e37,5.499800124970012e37,5.501799325269892e37,5.503798525569772e37,5.505797725869652e37,5.507796926169532e37,5.509796126469412e37,5.511795326769292e37,5.513794527069172e37,5.515793727369052e37,5.517792927668933e37,5.519792127968813e37,5.521791328268692e37,5.523790528568572e37,5.525789728868452e37,5.527788929168333e37,5.529788129468213e37,5.531787329768093e37,5.533786530067973e37,5.535785730367852e37,5.537784930667733e37,5.539784130967613e37,5.541783331267493e37,5.543782531567373e37,5.545781731867253e37,5.547780932167133e37,5.549780132467013e37,5.551779332766893e37,5.553778533066773e37,5.555777733366653e37,5.557776933666534e37,5.559776133966414e37,5.561775334266293e37,5.563774534566173e37,5.565773734866053e37,5.567772935165934e37,5.569772135465814e37,5.571771335765694e37,5.573770536065573e37,5.575769736365453e37,5.577768936665334e37,5.579768136965214e37,5.581767337265094e37,5.583766537564974e37,5.585765737864854e37,5.587764938164734e37,5.589764138464614e37,5.591763338764494e37,5.593762539064374e37,5.595761739364254e37,5.597760939664135e37,5.599760139964014e37,5.601759340263894e37,5.603758540563774e37,5.605757740863654e37,5.607756941163535e37,5.609756141463415e37,5.611755341763295e37,5.613754542063174e37,5.615753742363054e37,5.617752942662935e37,5.619752142962815e37,5.621751343262695e37,5.623750543562575e37,5.625749743862454e37,5.627748944162335e37,5.629748144462215e37,5.631747344762095e37,5.633746545061975e37,5.635745745361855e37,5.637744945661736e37,5.639744145961615e37,5.641743346261495e37,5.643742546561375e37,5.645741746861255e37,5.647740947161136e37,5.649740147461016e37,5.651739347760896e37,5.653738548060775e37,5.655737748360655e37,5.657736948660536e37,5.659736148960416e37,5.661735349260296e37,5.663734549560176e37,5.665733749860055e37,5.667732950159936e37,5.669732150459816e37,5.671731350759696e37,5.673730551059576e37,5.675729751359456e37,5.677728951659337e37,5.679728151959216e37,5.681727352259096e37,5.683726552558976e37,5.685725752858856e37,5.687724953158737e37,5.689724153458617e37,5.691723353758496e37,5.693722554058376e37,5.695721754358256e37,5.697720954658137e37,5.699720154958017e37,5.701719355257897e37,5.703718555557777e37,5.705717755857656e37,5.707716956157537e37,5.709716156457417e37,5.711715356757297e37,5.713714557057177e37,5.715713757357057e37,5.717712957656937e37,5.719712157956817e37,5.721711358256697e37,5.723710558556577e37,5.725709758856457e37,5.727708959156338e37,5.729708159456218e37,5.731707359756097e37,5.733706560055977e37,5.735705760355857e37,5.737704960655738e37,5.739704160955618e37,5.741703361255498e37,5.743702561555378e37,5.745701761855257e37,5.747700962155138e37,5.749700162455018e37,5.751699362754898e37,5.753698563054778e37,5.755697763354658e37,5.757696963654538e37,5.759696163954418e37,5.761695364254298e37,5.763694564554178e37,5.765693764854058e37,5.767692965153939e37,5.769692165453819e37,5.771691365753698e37,5.773690566053578e37,5.775689766353458e37,5.777688966653339e37,5.779688166953219e37,5.781687367253099e37,5.783686567552978e37,5.785685767852858e37,5.787684968152739e37,5.789684168452619e37,5.791683368752499e37,5.793682569052379e37,5.795681769352259e37,5.797680969652139e37,5.799680169952019e37,5.801679370251899e37,5.803678570551779e37,5.805677770851659e37,5.80767697115154e37,5.809676171451419e37,5.811675371751299e37,5.813674572051179e37,5.815673772351059e37,5.81767297265094e37,5.81967217295082e37,5.8216713732507e37,5.823670573550579e37,5.825669773850459e37,5.82766897415034e37,5.82966817445022e37,5.8316673747501e37,5.83366657504998e37,5.835665775349859e37,5.83766497564974e37,5.83966417594962e37,5.8416633762495e37,5.84366257654938e37,5.84566177684926e37,5.847660977149141e37,5.84966017744902e37,5.8516593777489e37,5.85365857804878e37,5.85565777834866e37,5.857656978648541e37,5.859656178948421e37,5.861655379248301e37,5.86365457954818e37,5.86565377984806e37,5.867652980147941e37,5.869652180447821e37,5.871651380747701e37,5.873650581047581e37,5.87564978134746e37,5.877648981647341e37,5.879648181947221e37,5.881647382247101e37,5.883646582546981e37,5.885645782846861e37,5.887644983146742e37,5.889644183446621e37,5.891643383746501e37,5.893642584046381e37,5.895641784346261e37,5.897640984646142e37,5.899640184946022e37,5.901639385245901e37,5.903638585545781e37,5.905637785845661e37,5.907636986145542e37,5.909636186445422e37,5.911635386745302e37,5.913634587045182e37,5.915633787345061e37,5.917632987644942e37,5.919632187944822e37,5.921631388244702e37,5.923630588544582e37,5.925629788844462e37,5.927628989144342e37,5.929628189444222e37,5.931627389744102e37,5.933626590043982e37,5.935625790343862e37,5.937624990643743e37,5.939624190943623e37,5.941623391243502e37,5.943622591543382e37,5.945621791843262e37,5.947620992143143e37,5.949620192443023e37,5.951619392742903e37,5.953618593042782e37,5.9556177933426625e37,5.957616993642543e37,5.959616193942423e37,5.961615394242303e37,5.963614594542183e37,5.965613794842063e37,5.967612995141943e37,5.969612195441823e37,5.971611395741703e37,5.973610596041583e37,5.975609796341463e37,5.977608996641344e37,5.979608196941224e37,5.981607397241103e37,5.983606597540983e37,5.985605797840863e37,5.987604998140744e37,5.989604198440624e37,5.991603398740504e37,5.993602599040383e37,5.9956017993402635e37,5.997600999640144e37,5.999600199940024e37,6.001599400239904e37,6.003598600539784e37,6.005597800839664e37,6.007597001139544e37,6.009596201439424e37,6.011595401739304e37,6.013594602039184e37,6.015593802339064e37,6.017593002638945e37,6.019592202938824e37,6.021591403238704e37,6.023590603538584e37,6.025589803838464e37,6.027589004138345e37,6.029588204438225e37,6.031587404738105e37,6.033586605037984e37,6.0355858053378645e37,6.037585005637745e37,6.039584205937625e37,6.041583406237505e37,6.043582606537385e37,6.0455818068372645e37,6.047581007137145e37,6.049580207437025e37,6.051579407736905e37,6.053578608036785e37,6.055577808336665e37,6.057577008636546e37,6.059576208936425e37,6.061575409236305e37,6.063574609536185e37,6.065573809836065e37,6.067573010135946e37,6.069572210435826e37,6.071571410735706e37,6.073570611035585e37,6.0755698113354655e37,6.077569011635346e37,6.079568211935226e37,6.081567412235106e37,6.083566612534986e37,6.0855658128348655e37,6.087565013134746e37,6.089564213434626e37,6.091563413734506e37,6.093562614034386e37,6.095561814334266e37,6.097561014634147e37,6.099560214934026e37,6.101559415233906e37,6.103558615533786e37,6.1055578158336665e37,6.107557016133547e37,6.109556216433427e37,6.111555416733306e37,6.113554617033186e37,6.1155538173330665e37,6.117553017632947e37,6.119552217932827e37,6.121551418232707e37,6.123550618532587e37,6.1255498188324665e37,6.127549019132347e37,6.129548219432227e37,6.131547419732107e37,6.133546620031987e37,6.135545820331867e37,6.137545020631747e37,6.139544220931627e37,6.141543421231507e37,6.143542621531387e37,6.1455418218312675e37,6.147541022131148e37,6.149540222431028e37,6.151539422730907e37,6.153538623030787e37,6.1555378233306675e37,6.157537023630548e37,6.159536223930428e37,6.161535424230308e37,6.163534624530187e37,6.1655338248300675e37,6.167533025129948e37,6.169532225429828e37,6.171531425729708e37,6.173530626029588e37,6.175529826329468e37,6.177529026629348e37,6.179528226929228e37,6.181527427229108e37,6.183526627528988e37,6.1855258278288685e37,6.187525028128749e37,6.189524228428629e37,6.191523428728508e37,6.193522629028388e37,6.1955218293282685e37,6.197521029628149e37,6.199520229928029e37,6.201519430227909e37,6.203518630527788e37,6.2055178308276685e37,6.207517031127549e37,6.209516231427429e37,6.211515431727309e37,6.213514632027189e37,6.2155138323270695e37,6.217513032626949e37,6.219512232926829e37,6.221511433226709e37,6.223510633526589e37,6.2255098338264695e37,6.22750903412635e37,6.229508234426229e37,6.231507434726109e37,6.233506635025989e37,6.2355058353258695e37,6.23750503562575e37,6.23950423592563e37,6.24150343622551e37,6.243502636525389e37,6.2455018368252695e37,6.24750103712515e37,6.24950023742503e37,6.25149943772491e37,6.25349863802479e37,6.25549783832467e37,6.25749703862455e37,6.25949623892443e37,6.26149543922431e37,6.26349463952419e37,6.2654938398240705e37,6.267493040123951e37,6.26949224042383e37,6.27149144072371e37,6.27349064102359e37,6.2754898413234705e37,6.277489041623351e37,6.279488241923231e37,6.281487442223111e37,6.28348664252299e37,6.2854858428228705e37,6.287485043122751e37,6.289484243422631e37,6.291483443722511e37,6.293482644022391e37,6.295481844322271e37,6.297481044622151e37,6.299480244922031e37,6.301479445221911e37,6.303478645521791e37,6.3054778458216715e37,6.307477046121552e37,6.309476246421431e37,6.311475446721311e37,6.313474647021191e37,6.3154738473210715e37,6.317473047620952e37,6.319472247920832e37,6.321471448220711e37,6.323470648520591e37,6.325469848820472e37,6.327469049120352e37,6.329468249420232e37,6.331467449720112e37,6.333466650019992e37,6.335465850319872e37,6.337465050619752e37,6.339464250919632e37,6.341463451219512e37,6.343462651519392e37,6.3454618518192725e37,6.347461052119152e37,6.349460252419032e37,6.351459452718912e37,6.353458653018792e37,6.3554578533186725e37,6.357457053618553e37,6.359456253918433e37,6.361455454218312e37,6.363454654518192e37,6.365453854818073e37,6.367453055117953e37,6.369452255417833e37,6.371451455717713e37,6.373450656017592e37,6.375449856317473e37,6.377449056617353e37,6.379448256917233e37,6.381447457217113e37,6.383446657516993e37,6.3854458578168735e37,6.387445058116753e37,6.389444258416633e37,6.391443458716513e37,6.393442659016393e37,6.3954418593162735e37,6.397441059616154e37,6.399440259916034e37,6.401439460215913e37,6.403438660515793e37,6.405437860815674e37,6.407437061115554e37,6.409436261415434e37,6.411435461715314e37,6.413434662015193e37,6.415433862315074e37,6.417433062614954e37,6.419432262914834e37,6.421431463214714e37,6.423430663514594e37,6.4254298638144745e37,6.427429064114354e37,6.429428264414234e37,6.431427464714114e37,6.433426665013994e37,6.4354258653138745e37,6.437425065613755e37,6.439424265913634e37,6.441423466213514e37,6.443422666513394e37,6.445421866813275e37,6.447421067113155e37,6.449420267413035e37,6.451419467712915e37,6.453418668012794e37,6.455417868312675e37,6.457417068612555e37,6.459416268912435e37,6.461415469212315e37,6.463414669512195e37,6.465413869812075e37,6.467413070111955e37,6.469412270411835e37,6.471411470711715e37,6.473410671011595e37,6.475409871311476e37,6.477409071611356e37,6.479408271911235e37,6.481407472211115e37,6.483406672510995e37,6.485405872810876e37,6.487405073110756e37,6.489404273410636e37,6.491403473710515e37,6.493402674010395e37,6.495401874310276e37,6.497401074610156e37,6.499400274910036e37,6.501399475209916e37,6.503398675509796e37,6.505397875809676e37,6.507397076109556e37,6.509396276409436e37,6.511395476709316e37,6.513394677009196e37,6.515393877309077e37,6.517393077608957e37,6.519392277908836e37,6.521391478208716e37,6.523390678508596e37,6.525389878808477e37,6.527389079108357e37,6.529388279408237e37,6.531387479708116e37,6.533386680007996e37,6.535385880307877e37,6.537385080607757e37,6.539384280907637e37,6.541383481207517e37,6.543382681507397e37,6.545381881807277e37,6.547381082107157e37,6.549380282407037e37,6.551379482706917e37,6.553378683006797e37,6.555377883306678e37,6.557377083606557e37,6.559376283906437e37,6.561375484206317e37,6.563374684506197e37,6.565373884806078e37,6.567373085105958e37,6.569372285405838e37,6.571371485705717e37,6.573370686005597e37,6.575369886305478e37,6.577369086605358e37,6.579368286905238e37,6.581367487205118e37,6.583366687504997e37,6.585365887804878e37,6.587365088104758e37,6.589364288404638e37,6.591363488704518e37,6.593362689004398e37,6.595361889304279e37,6.597361089604158e37,6.599360289904038e37,6.601359490203918e37,6.603358690503798e37,6.605357890803679e37,6.607357091103559e37,6.609356291403439e37,6.611355491703318e37,6.613354692003198e37,6.615353892303079e37,6.617353092602959e37,6.619352292902839e37,6.621351493202719e37,6.623350693502598e37,6.625349893802479e37,6.627349094102359e37,6.629348294402239e37,6.631347494702119e37,6.633346695001999e37,6.63534589530188e37,6.637345095601759e37,6.639344295901639e37,6.641343496201519e37,6.643342696501399e37,6.64534189680128e37,6.64734109710116e37,6.649340297401039e37,6.651339497700919e37,6.653338698000799e37,6.65533789830068e37,6.65733709860056e37,6.65933629890044e37,6.66133549920032e37,6.663334699500199e37,6.66533389980008e37,6.66733310009996e37,6.66933230039984e37,6.67133150069972e37,6.6733307009996e37,6.67532990129948e37,6.67732910159936e37,6.67932830189924e37,6.68132750219912e37,6.683326702499e37,6.685325902798881e37,6.687325103098761e37,6.68932430339864e37,6.69132350369852e37,6.6933227039984e37,6.695321904298281e37,6.697321104598161e37,6.699320304898041e37,6.70131950519792e37,6.7033187054978e37,6.705317905797681e37,6.707317106097561e37,6.709316306397441e37,6.711315506697321e37,6.713314706997201e37,6.715313907297081e37,6.717313107596961e37,6.719312307896841e37,6.721311508196721e37,6.723310708496601e37,6.725309908796482e37,6.727309109096362e37,6.729308309396241e37,6.731307509696121e37,6.733306709996001e37,6.735305910295882e37,6.737305110595762e37,6.739304310895642e37,6.741303511195521e37,6.743302711495401e37,6.745301911795282e37,6.747301112095162e37,6.749300312395042e37,6.751299512694922e37,6.753298712994802e37,6.755297913294682e37,6.757297113594562e37,6.759296313894442e37,6.761295514194322e37,6.763294714494202e37,6.765293914794083e37,6.767293115093962e37,6.769292315393842e37,6.771291515693722e37,6.773290715993602e37,6.775289916293483e37,6.777289116593363e37,6.779288316893243e37,6.781287517193122e37,6.783286717493002e37,6.785285917792883e37,6.787285118092763e37,6.789284318392643e37,6.791283518692523e37,6.793282718992402e37,6.795281919292283e37,6.797281119592163e37,6.799280319892043e37,6.801279520191923e37,6.803278720491803e37,6.805277920791684e37,6.807277121091563e37,6.809276321391443e37,6.811275521691323e37,6.813274721991203e37,6.815273922291084e37,6.817273122590964e37,6.819272322890844e37,6.821271523190723e37,6.823270723490603e37,6.825269923790484e37,6.827269124090364e37,6.829268324390244e37,6.831267524690124e37,6.833266724990003e37,6.835265925289884e37,6.837265125589764e37,6.839264325889644e37,6.841263526189524e37,6.843262726489404e37,6.845261926789285e37,6.847261127089164e37,6.849260327389044e37,6.851259527688924e37,6.853258727988804e37,6.855257928288685e37,6.857257128588565e37,6.859256328888444e37,6.861255529188324e37,6.863254729488204e37,6.865253929788085e37,6.867253130087965e37,6.869252330387845e37,6.871251530687725e37,6.873250730987604e37,6.875249931287485e37,6.877249131587365e37,6.879248331887245e37,6.881247532187125e37,6.883246732487005e37,6.885245932786885e37,6.887245133086765e37,6.889244333386645e37,6.891243533686525e37,6.893242733986405e37,6.895241934286286e37,6.897241134586166e37,6.899240334886045e37,6.901239535185925e37,6.903238735485805e37,6.905237935785686e37,6.907237136085566e37,6.909236336385446e37,6.911235536685325e37,6.913234736985205e37,6.915233937285086e37,6.917233137584966e37,6.919232337884846e37,6.921231538184726e37,6.923230738484606e37,6.925229938784486e37,6.927229139084366e37,6.929228339384246e37,6.931227539684126e37,6.933226739984006e37,6.935225940283887e37,6.937225140583767e37,6.939224340883646e37,6.941223541183526e37,6.943222741483406e37,6.945221941783287e37,6.947221142083167e37,6.949220342383047e37,6.951219542682926e37,6.953218742982806e37,6.955217943282687e37,6.957217143582567e37,6.959216343882447e37,6.961215544182327e37,6.963214744482207e37,6.965213944782087e37,6.967213145081967e37,6.969212345381847e37,6.971211545681727e37,6.973210745981607e37,6.975209946281488e37,6.977209146581367e37,6.979208346881247e37,6.981207547181127e37,6.983206747481007e37,6.985205947780888e37,6.987205148080768e37,6.989204348380648e37,6.991203548680527e37,6.993202748980407e37,6.995201949280288e37,6.997201149580168e37,6.999200349880048e37,7.001199550179928e37,7.003198750479807e37,7.005197950779688e37,7.007197151079568e37,7.009196351379448e37,7.011195551679328e37,7.013194751979208e37,7.015193952279089e37,7.017193152578968e37,7.019192352878848e37,7.021191553178728e37,7.023190753478608e37,7.025189953778489e37,7.027189154078369e37,7.029188354378248e37,7.031187554678128e37,7.033186754978008e37,7.035185955277889e37,7.037185155577769e37,7.039184355877649e37,7.041183556177529e37,7.043182756477408e37,7.045181956777289e37,7.047181157077169e37,7.049180357377049e37,7.051179557676929e37,7.053178757976809e37,7.05517795827669e37,7.057177158576569e37,7.059176358876449e37,7.061175559176329e37,7.063174759476209e37,7.06517395977609e37,7.06717316007597e37,7.069172360375849e37,7.071171560675729e37,7.073170760975609e37,7.07516996127549e37,7.07716916157537e37,7.07916836187525e37,7.08116756217513e37,7.0831667624750095e37,7.08516596277489e37,7.08716516307477e37,7.08916436337465e37,7.09116356367453e37,7.09316276397441e37,7.09516196427429e37,7.09716116457417e37,7.09916036487405e37,7.10115956517393e37,7.10315876547381e37,7.105157965773691e37,7.107157166073571e37,7.10915636637345e37,7.11115556667333e37,7.11315476697321e37,7.115153967273091e37,7.117153167572971e37,7.119152367872851e37,7.12115156817273e37,7.1231507684726105e37,7.125149968772491e37,7.127149169072371e37,7.129148369372251e37,7.131147569672131e37,7.133146769972011e37,7.135145970271891e37,7.137145170571771e37,7.139144370871651e37,7.141143571171531e37,7.143142771471411e37,7.145141971771292e37,7.147141172071172e37,7.149140372371051e37,7.151139572670931e37,7.153138772970811e37,7.155137973270692e37,7.157137173570572e37,7.159136373870452e37,7.161135574170331e37,7.1631347744702115e37,7.165133974770092e37,7.167133175069972e37,7.169132375369852e37,7.171131575669732e37,7.173130775969612e37,7.175129976269492e37,7.177129176569372e37,7.179128376869252e37,7.181127577169132e37,7.183126777469012e37,7.185125977768893e37,7.187125178068772e37,7.189124378368652e37,7.191123578668532e37,7.1931227789684125e37,7.195121979268293e37,7.197121179568173e37,7.199120379868053e37,7.201119580167932e37,7.2031187804678125e37,7.205117980767693e37,7.207117181067573e37,7.209116381367453e37,7.211115581667333e37,7.2131147819672125e37,7.215113982267093e37,7.217113182566973e37,7.219112382866853e37,7.221111583166733e37,7.223110783466613e37,7.225109983766494e37,7.227109184066373e37,7.229108384366253e37,7.231107584666133e37,7.2331067849660135e37,7.235105985265894e37,7.237105185565774e37,7.239104385865653e37,7.241103586165533e37,7.2431027864654135e37,7.245101986765294e37,7.247101187065174e37,7.249100387365054e37,7.251099587664934e37,7.2530987879648135e37,7.255097988264694e37,7.257097188564574e37,7.259096388864454e37,7.261095589164334e37,7.263094789464214e37,7.265093989764095e37,7.267093190063974e37,7.269092390363854e37,7.271091590663734e37,7.2730907909636145e37,7.275089991263495e37,7.277089191563375e37,7.279088391863254e37,7.281087592163134e37,7.2830867924630145e37,7.285085992762895e37,7.287085193062775e37,7.289084393362655e37,7.291083593662535e37,7.2930827939624145e37,7.295081994262295e37,7.297081194562175e37,7.299080394862055e37,7.301079595161935e37,7.3030787954618155e37,7.305077995761695e37,7.307077196061575e37,7.309076396361455e37,7.311075596661335e37,7.3130747969612155e37,7.315073997261096e37,7.317073197560976e37,7.319072397860855e37,7.321071598160735e37,7.3230707984606155e37,7.325069998760496e37,7.327069199060376e37,7.329068399360256e37,7.331067599660135e37,7.3330667999600155e37,7.335066000259896e37,7.337065200559776e37,7.339064400859656e37,7.341063601159536e37,7.3430628014594165e37,7.345062001759296e37,7.347061202059176e37,7.349060402359056e37,7.351059602658936e37,7.3530588029588165e37,7.355058003258697e37,7.357057203558576e37,7.359056403858456e37,7.361055604158336e37,7.3630548044582165e37,7.365054004758097e37,7.367053205057977e37,7.369052405357857e37,7.371051605657736e37,7.3730508059576165e37,7.375050006257497e37,7.377049206557377e37,7.379048406857257e37,7.381047607157137e37,7.3830468074570175e37,7.385046007756897e37,7.387045208056777e37,7.389044408356657e37,7.391043608656537e37,7.3930428089564175e37,7.395042009256298e37,7.397041209556177e37,7.399040409856057e37,7.401039610155937e37,7.4030388104558175e37,7.405038010755698e37,7.407037211055578e37,7.409036411355458e37,7.411035611655337e37,7.4130348119552175e37,7.415034012255098e37,7.417033212554978e37,7.419032412854858e37,7.421031613154738e37,7.423030813454618e37,7.425030013754498e37,7.427029214054378e37,7.429028414354258e37,7.431027614654138e37,7.4330268149540185e37,7.435026015253899e37,7.437025215553778e37,7.439024415853658e37,7.441023616153538e37,7.4430228164534185e37,7.445022016753299e37,7.447021217053179e37,7.449020417353058e37,7.451019617652938e37,7.453018817952819e37,7.455018018252699e37,7.457017218552579e37,7.459016418852459e37,7.461015619152339e37,7.463014819452219e37,7.465014019752099e37,7.467013220051979e37,7.469012420351859e37,7.471011620651739e37,7.4730108209516195e37,7.4750100212515e37,7.477009221551379e37,7.479008421851259e37,7.481007622151139e37,7.4830068224510195e37,7.4850060227509e37,7.48700522305078e37,7.489004423350659e37,7.491003623650539e37,7.49300282395042e37,7.4950020242503e37,7.49700122455018e37,7.49900042485006e37,7.50099962514994e37,7.50299882544982e37,7.5049980257497e37,7.50699722604958e37,7.50899642634946e37,7.51099562664934e37,7.5129948269492205e37,7.5149940272491e37,7.51699322754898e37,7.51899242784886e37,7.52099162814874e37,7.5229908284486205e37,7.524990028748501e37,7.526989229048381e37,7.52898842934826e37,7.53098762964814e37,7.532986829948021e37,7.534986030247901e37,7.536985230547781e37,7.538984430847661e37,7.54098363114754e37,7.542982831447421e37,7.544982031747301e37,7.546981232047181e37,7.548980432347061e37,7.550979632646941e37,7.5529788329468215e37,7.554978033246701e37,7.556977233546581e37,7.558976433846461e37,7.560975634146341e37,7.562974834446222e37,7.564974034746102e37,7.566973235045981e37,7.568972435345861e37,7.570971635645741e37,7.572970835945622e37,7.574970036245502e37,7.576969236545382e37,7.578968436845262e37,7.580967637145141e37,7.582966837445022e37,7.584966037744902e37,7.586965238044782e37,7.588964438344662e37,7.590963638644542e37,7.5929628389444225e37,7.594962039244302e37,7.596961239544182e37,7.598960439844062e37,7.600959640143942e37,7.602958840443823e37,7.604958040743703e37,7.606957241043582e37,7.608956441343462e37,7.610955641643342e37,7.612954841943223e37,7.614954042243103e37,7.616953242542983e37,7.618952442842863e37,7.620951643142742e37,7.622950843442623e37,7.624950043742503e37,7.626949244042383e37,7.628948444342263e37,7.630947644642143e37,7.632946844942023e37,7.634946045241903e37,7.636945245541783e37,7.638944445841663e37,7.640943646141543e37,7.642942846441424e37,7.644942046741304e37,7.646941247041183e37,7.648940447341063e37,7.650939647640943e37,7.652938847940824e37,7.654938048240704e37,7.656937248540584e37,7.658936448840463e37,7.660935649140343e37,7.662934849440224e37,7.664934049740104e37,7.666933250039984e37,7.668932450339864e37,7.670931650639744e37,7.672930850939624e37,7.674930051239504e37,7.676929251539384e37,7.678928451839264e37,7.680927652139144e37,7.682926852439025e37,7.684926052738905e37,7.686925253038784e37,7.688924453338664e37,7.690923653638544e37,7.692922853938425e37,7.694922054238305e37,7.696921254538185e37,7.698920454838064e37,7.700919655137944e37,7.702918855437825e37,7.704918055737705e37,7.706917256037585e37,7.708916456337465e37,7.710915656637345e37,7.712914856937225e37,7.714914057237105e37,7.716913257536985e37,7.718912457836865e37,7.720911658136745e37,7.722910858436626e37,7.724910058736505e37,7.726909259036385e37,7.728908459336265e37,7.730907659636145e37,7.732906859936026e37,7.734906060235906e37,7.736905260535786e37,7.738904460835665e37,7.740903661135545e37,7.742902861435426e37,7.744902061735306e37,7.746901262035186e37,7.748900462335066e37,7.750899662634945e37,7.752898862934826e37,7.754898063234706e37,7.756897263534586e37,7.758896463834466e37,7.760895664134346e37,7.762894864434227e37,7.764894064734106e37,7.766893265033986e37,7.768892465333866e37,7.770891665633746e37,7.772890865933627e37,7.774890066233507e37,7.776889266533386e37,7.778888466833266e37,7.780887667133146e37,7.782886867433027e37,7.784886067732907e37,7.786885268032787e37,7.788884468332667e37,7.790883668632546e37,7.792882868932427e37,7.794882069232307e37,7.796881269532187e37,7.798880469832067e37,7.800879670131947e37,7.802878870431828e37,7.804878070731707e37,7.806877271031587e37,7.808876471331467e37,7.810875671631347e37,7.812874871931228e37,7.814874072231108e37,7.816873272530987e37,7.818872472830867e37,7.820871673130747e37,7.822870873430628e37,7.824870073730508e37,7.826869274030388e37,7.828868474330268e37,7.830867674630147e37,7.832866874930028e37,7.834866075229908e37,7.836865275529788e37,7.838864475829668e37,7.840863676129548e37,7.842862876429428e37,7.844862076729308e37,7.846861277029188e37,7.848860477329068e37,7.850859677628948e37,7.852858877928829e37,7.854858078228709e37,7.856857278528588e37,7.858856478828468e37,7.860855679128348e37,7.862854879428229e37,7.864854079728109e37,7.866853280027989e37,7.868852480327868e37,7.870851680627748e37,7.872850880927629e37,7.874850081227509e37,7.876849281527389e37,7.878848481827269e37,7.880847682127149e37,7.882846882427029e37,7.884846082726909e37,7.886845283026789e37,7.888844483326669e37,7.890843683626549e37,7.89284288392643e37,7.894842084226309e37,7.896841284526189e37,7.898840484826069e37,7.900839685125949e37,7.90283888542583e37,7.90483808572571e37,7.90683728602559e37,7.908836486325469e37,7.910835686625349e37,7.91283488692523e37,7.91483408722511e37,7.91683328752499e37,7.91883248782487e37,7.92083168812475e37,7.92283088842463e37,7.92483008872451e37,7.92682928902439e37,7.92882848932427e37,7.93082768962415e37,7.932826889924031e37,7.93482609022391e37,7.93682529052379e37,7.93882449082367e37,7.94082369112355e37,7.942822891423431e37,7.944822091723311e37,7.946821292023191e37,7.94882049232307e37,7.95081969262295e37,7.952818892922831e37,7.954818093222711e37,7.956817293522591e37,7.958816493822471e37,7.96081569412235e37,7.962814894422231e37,7.964814094722111e37,7.966813295021991e37,7.968812495321871e37,7.970811695621751e37,7.972810895921632e37,7.974810096221511e37,7.976809296521391e37,7.978808496821271e37,7.980807697121151e37,7.982806897421032e37,7.984806097720912e37,7.986805298020791e37,7.988804498320671e37,7.990803698620551e37,7.992802898920432e37,7.994802099220312e37,7.996801299520192e37,7.998800499820072e37,8.000799700119951e37,8.002798900419832e37,8.004798100719712e37,8.006797301019592e37,8.008796501319472e37,8.010795701619352e37,8.012794901919233e37,8.014794102219112e37,8.016793302518992e37,8.018792502818872e37,8.020791703118752e37,8.022790903418633e37,8.024790103718513e37,8.026789304018392e37,8.028788504318272e37,8.030787704618152e37,8.032786904918033e37,8.034786105217913e37,8.036785305517793e37,8.038784505817673e37,8.040783706117552e37,8.042782906417433e37,8.044782106717313e37,8.046781307017193e37,8.048780507317073e37,8.050779707616953e37,8.052778907916833e37,8.054778108216713e37,8.056777308516593e37,8.058776508816473e37,8.060775709116353e37,8.062774909416234e37,8.064774109716114e37,8.066773310015993e37,8.068772510315873e37,8.070771710615753e37,8.072770910915634e37,8.074770111215514e37,8.076769311515394e37,8.078768511815273e37,8.080767712115153e37,8.082766912415034e37,8.084766112714914e37,8.086765313014794e37,8.088764513314674e37,8.090763713614554e37,8.092762913914434e37,8.094762114214314e37,8.096761314514194e37,8.098760514814074e37,8.100759715113954e37,8.102758915413835e37,8.104758115713714e37,8.106757316013594e37,8.108756516313474e37,8.110755716613354e37,8.112754916913235e37,8.114754117213115e37,8.116753317512995e37,8.118752517812874e37,8.120751718112754e37,8.122750918412635e37,8.124750118712515e37,8.126749319012395e37,8.128748519312275e37,8.130747719612155e37,8.132746919912035e37,8.134746120211915e37,8.136745320511795e37,8.138744520811675e37,8.140743721111555e37,8.142742921411436e37,8.144742121711315e37,8.146741322011195e37,8.148740522311075e37,8.150739722610955e37,8.152738922910836e37,8.154738123210716e37,8.156737323510596e37,8.158736523810475e37,8.160735724110355e37,8.162734924410236e37,8.164734124710116e37,8.166733325009996e37,8.168732525309876e37,8.1707317256097555e37,8.172730925909636e37,8.174730126209516e37,8.176729326509396e37,8.178728526809276e37,8.180727727109156e37,8.182726927409037e37,8.184726127708916e37,8.186725328008796e37,8.188724528308676e37,8.190723728608556e37,8.192722928908437e37,8.194722129208317e37,8.196721329508196e37,8.198720529808076e37,8.200719730107956e37,8.202718930407837e37,8.204718130707717e37,8.206717331007597e37,8.208716531307477e37,8.2107157316073565e37,8.212714931907237e37,8.214714132207117e37,8.216713332506997e37,8.218712532806877e37,8.220711733106757e37,8.222710933406638e37,8.224710133706517e37,8.226709334006397e37,8.228708534306277e37,8.230707734606157e37,8.232706934906038e37,8.234706135205918e37,8.236705335505797e37,8.238704535805677e37,8.240703736105557e37,8.242702936405438e37,8.244702136705318e37,8.246701337005198e37,8.248700537305078e37,8.2506997376049575e37,8.252698937904838e37,8.254698138204718e37,8.256697338504598e37,8.258696538804478e37,8.260695739104358e37,8.262694939404238e37,8.264694139704118e37,8.266693340003998e37,8.268692540303878e37,8.270691740603758e37,8.272690940903639e37,8.274690141203519e37,8.276689341503398e37,8.278688541803278e37,8.2806877421031585e37,8.282686942403039e37,8.284686142702919e37,8.286685343002799e37,8.288684543302678e37,8.2906837436025585e37,8.292682943902439e37,8.294682144202319e37,8.296681344502199e37,8.298680544802079e37,8.300679745101959e37,8.302678945401839e37,8.304678145701719e37,8.306677346001599e37,8.308676546301479e37,8.310675746601359e37,8.31267494690124e37,8.314674147201119e37,8.316673347500999e37,8.318672547800879e37,8.3206717481007595e37,8.32267094840064e37,8.32467014870052e37,8.3266693490004e37,8.328668549300279e37,8.3306677496001595e37,8.33266694990004e37,8.33466615019992e37,8.3366653504998e37,8.33866455079968e37,8.34066375109956e37,8.34266295139944e37,8.34466215169932e37,8.3466613519992e37,8.34866055229908e37,8.35065975259896e37,8.352658952898841e37,8.35465815319872e37,8.3566573534986e37,8.35865655379848e37,8.3606557540983605e37,8.362654954398241e37,8.364654154698121e37,8.366653354998001e37,8.36865255529788e37,8.3706517555977605e37,8.372650955897641e37,8.374650156197521e37,8.376649356497401e37,8.378648556797281e37,8.3806477570971605e37,8.382646957397041e37,8.384646157696921e37,8.386645357996801e37,8.388644558296681e37,8.390643758596561e37,8.392642958896442e37,8.394642159196321e37,8.396641359496201e37,8.398640559796081e37,8.4006397600959615e37,8.402638960395842e37,8.404638160695722e37,8.406637360995601e37,8.408636561295481e37,8.4106357615953615e37,8.412634961895242e37,8.414634162195122e37,8.416633362495002e37,8.418632562794882e37,8.4206317630947615e37,8.422630963394642e37,8.424630163694522e37,8.426629363994402e37,8.428628564294282e37,8.4306277645941625e37,8.432626964894042e37,8.434626165193922e37,8.436625365493802e37,8.438624565793682e37,8.4406237660935625e37,8.442622966393443e37,8.444622166693323e37,8.446621366993202e37,8.448620567293082e37,8.4506197675929625e37,8.452618967892843e37,8.454618168192723e37,8.456617368492603e37,8.458616568792483e37,8.4606157690923625e37,8.462614969392243e37,8.464614169692123e37,8.466613369992003e37,8.468612570291883e37,8.4706117705917635e37,8.472610970891643e37,8.474610171191523e37,8.476609371491403e37,8.478608571791283e37,8.4806077720911635e37,8.482606972391044e37,8.484606172690924e37,8.486605372990803e37,8.488604573290683e37,8.4906037735905635e37,8.492602973890444e37,8.494602174190324e37,8.496601374490204e37,8.498600574790083e37,8.5005997750899635e37,8.502598975389844e37,8.504598175689724e37,8.506597375989604e37,8.508596576289484e37,8.510595776589364e37,8.512594976889245e37,8.514594177189124e37,8.516593377489005e37,8.518592577788884e37,8.520591778088764e37,8.522590978388645e37,8.524590178688524e37,8.526589378988405e37,8.528588579288284e37,8.530587779588165e37,8.532586979888045e37,8.534586180187924e37,8.536585380487805e37,8.538584580787684e37,8.540583781087565e37,8.542582981387445e37,8.544582181687324e37,8.546581381987205e37,8.548580582287084e37,8.550579782586965e37,8.552578982886845e37,8.554578183186726e37,8.556577383486605e37,8.558576583786484e37,8.560575784086366e37,8.562574984386245e37,8.564574184686126e37,8.566573384986005e37,8.568572585285886e37,8.570571785585766e37,8.572570985885645e37,8.574570186185526e37,8.576569386485405e37,8.578568586785286e37,8.580567787085166e37,8.582566987385047e37,8.584566187684926e37,8.586565387984805e37,8.588564588284686e37,8.590563788584566e37,8.592562988884447e37,8.594562189184326e37,8.596561389484205e37,8.598560589784086e37,8.600559790083966e37,8.602558990383847e37,8.604558190683726e37,8.606557390983607e37,8.608556591283486e37,8.610555791583366e37,8.612554991883247e37,8.614554192183126e37,8.616553392483007e37,8.618552592782886e37,8.620551793082767e37,8.622550993382647e37,8.624550193682526e37,8.626549393982407e37,8.628548594282286e37,8.630547794582167e37,8.632546994882047e37,8.634546195181928e37,8.636545395481807e37,8.638544595781686e37,8.640543796081568e37,8.642542996381447e37,8.644542196681328e37,8.646541396981207e37,8.648540597281088e37,8.650539797580968e37,8.652538997880847e37,8.654538198180728e37,8.656537398480607e37,8.658536598780488e37,8.660535799080368e37,8.662534999380247e37,8.664534199680128e37,8.666533399980007e37,8.668532600279888e37,8.670531800579768e37,8.672531000879649e37,8.674530201179528e37,8.676529401479407e37,8.678528601779288e37,8.680527802079168e37,8.682527002379049e37,8.684526202678928e37,8.68652540297881e37,8.688524603278688e37,8.690523803578568e37,8.692523003878449e37,8.694522204178328e37,8.69652140447821e37,8.698520604778088e37,8.70051980507797e37,8.702519005377849e37,8.704518205677728e37,8.70651740597761e37,8.708516606277488e37,8.71051580657737e37,8.712515006877249e37,8.71451420717713e37,8.71651340747701e37,8.718512607776888e37,8.72051180807677e37,8.722511008376649e37,8.72451020867653e37,8.72650940897641e37,8.728508609276288e37,8.73050780957617e37,8.732507009876049e37,8.73450621017593e37,8.73650541047581e37,8.73850461077569e37,8.74050381107557e37,8.742503011375449e37,8.74450221167533e37,8.74650141197521e37,8.74850061227509e37,8.75049981257497e37,8.75249901287485e37,8.75449821317473e37,8.75649741347461e37,8.75849661377449e37,8.76049581407437e37,8.76249501437425e37,8.76449421467413e37,8.766493414974011e37,8.76849261527389e37,8.77049181557377e37,8.77249101587365e37,8.77449021617353e37,8.776489416473411e37,8.77848861677329e37,8.78048781707317e37,8.78248701737305e37,8.78448621767293e37,8.786485417972811e37,8.78848461827269e37,8.790483818572572e37,8.79248301887245e37,8.79448221917233e37,8.796481419472211e37,8.79848061977209e37,8.800479820071972e37,8.80247902037185e37,8.804478220671732e37,8.806477420971611e37,8.80847662127149e37,8.810475821571372e37,8.81247502187125e37,8.814474222171132e37,8.816473422471011e37,8.818472622770892e37,8.820471823070772e37,8.82247102337065e37,8.824470223670532e37,8.826469423970411e37,8.828468624270292e37,8.830467824570172e37,8.832467024870053e37,8.834466225169932e37,8.836465425469811e37,8.838464625769692e37,8.840463826069572e37,8.842463026369453e37,8.844462226669332e37,8.846461426969211e37,8.848460627269092e37,8.850459827568972e37,8.852459027868853e37,8.854458228168732e37,8.856457428468613e37,8.858456628768492e37,8.860455829068372e37,8.862455029368253e37,8.864454229668132e37,8.866453429968013e37,8.868452630267892e37,8.870451830567774e37,8.872451030867653e37,8.874450231167532e37,8.876449431467413e37,8.878448631767292e37,8.880447832067174e37,8.882447032367053e37,8.884446232666934e37,8.886445432966813e37,8.888444633266692e37,8.890443833566574e37,8.892443033866453e37,8.894442234166334e37,8.896441434466213e37,8.898440634766092e37,8.900439835065974e37,8.902439035365853e37,8.904438235665734e37,8.906437435965613e37,8.908436636265494e37,8.910435836565374e37,8.912435036865253e37,8.914434237165134e37,8.916433437465013e37,8.918432637764894e37,8.920431838064774e37,8.922431038364655e37,8.924430238664534e37,8.926429438964413e37,8.928428639264294e37,8.930427839564174e37,8.932427039864055e37,8.934426240163934e37,8.936425440463815e37,8.938424640763694e37,8.940423841063574e37,8.942423041363455e37,8.944422241663334e37,8.946421441963215e37,8.948420642263094e37,8.950419842562976e37,8.952419042862855e37,8.954418243162734e37,8.956417443462615e37,8.958416643762494e37,8.960415844062376e37,8.962415044362255e37,8.964414244662134e37,8.966413444962015e37,8.968412645261894e37,8.970411845561776e37,8.972411045861655e37,8.974410246161536e37,8.976409446461415e37,8.978408646761294e37,8.980407847061176e37,8.982407047361055e37,8.984406247660936e37,8.986405447960815e37,8.988404648260696e37,8.990403848560576e37,8.992403048860455e37,8.994402249160336e37,8.996401449460215e37,8.998400649760096e37,9.000399850059976e37,9.002399050359857e37,9.004398250659736e37,9.006397450959615e37,9.008396651259496e37,9.010395851559376e37,9.012395051859257e37,9.014394252159136e37,9.016393452459015e37,9.018392652758896e37,9.020391853058776e37,9.022391053358657e37,9.024390253658536e37,9.026389453958417e37,9.028388654258296e37,9.030387854558176e37,9.032387054858057e37,9.034386255157936e37,9.036385455457817e37,9.038384655757696e37,9.040383856057578e37,9.042383056357457e37,9.044382256657336e37,9.046381456957217e37,9.048380657257096e37,9.050379857556978e37,9.052379057856857e37,9.054378258156738e37,9.056377458456617e37,9.058376658756496e37,9.060375859056378e37,9.062375059356257e37,9.064374259656138e37,9.066373459956017e37,9.068372660255898e37,9.070371860555778e37,9.072371060855657e37,9.074370261155538e37,9.076369461455417e37,9.078368661755298e37,9.080367862055178e37,9.082367062355057e37,9.084366262654938e37,9.086365462954817e37,9.088364663254698e37,9.090363863554578e37,9.092363063854459e37,9.094362264154338e37,9.096361464454217e37,9.098360664754098e37,9.100359865053978e37,9.102359065353859e37,9.104358265653738e37,9.10635746595362e37,9.108356666253498e37,9.110355866553378e37,9.112355066853259e37,9.114354267153138e37,9.11635346745302e37,9.118352667752898e37,9.12035186805278e37,9.122351068352659e37,9.124350268652538e37,9.12634946895242e37,9.128348669252298e37,9.13034786955218e37,9.132347069852059e37,9.134346270151938e37,9.13634547045182e37,9.138344670751698e37,9.14034387105158e37,9.142343071351459e37,9.14434227165134e37,9.14634147195122e37,9.148340672251098e37,9.15033987255098e37,9.152339072850859e37,9.15433827315074e37,9.15633747345062e37,9.1583366737505e37,9.16033587405038e37,9.162335074350259e37,9.16433427465014e37,9.16633347495002e37,9.1683326752499e37,9.17033187554978e37,9.17233107584966e37,9.17433027614954e37,9.17632947644942e37,9.1783286767493e37,9.18032787704918e37,9.18232707734906e37,9.18432627764894e37,9.186325477948821e37,9.1883246782487e37,9.19032387854858e37,9.19232307884846e37,9.19432227914834e37,9.196321479448221e37,9.1983206797481e37,9.20031988004798e37,9.20231908034786e37,9.20431828064774e37,9.206317480947621e37,9.2083166812475e37,9.210315881547382e37,9.21231508184726e37,9.21431428214714e37,9.216313482447021e37,9.2183126827469e37,9.220311883046782e37,9.22231108334666e37,9.224310283646542e37,9.226309483946421e37,9.2283086842463e37,9.230307884546182e37,9.23230708484606e37,9.234306285145942e37,9.236305485445821e37,9.238304685745702e37,9.240303886045582e37,9.24230308634546e37,9.244302286645342e37,9.246301486945221e37,9.248300687245102e37,9.250299887544982e37,9.252299087844863e37,9.254298288144742e37,9.256297488444621e37,9.258296688744502e37,9.260295889044382e37,9.262295089344263e37,9.264294289644142e37,9.266293489944021e37,9.268292690243902e37,9.270291890543782e37,9.272291090843663e37,9.274290291143542e37,9.276289491443423e37,9.278288691743302e37,9.280287892043182e37,9.282287092343063e37,9.284286292642942e37,9.286285492942823e37,9.288284693242702e37,9.290283893542584e37,9.292283093842463e37,9.294282294142342e37,9.296281494442223e37,9.298280694742102e37,9.300279895041984e37,9.302279095341863e37,9.304278295641744e37,9.306277495941623e37,9.308276696241502e37,9.310275896541384e37,9.312275096841263e37,9.314274297141144e37,9.316273497441023e37,9.318272697740903e37,9.320271898040784e37,9.322271098340663e37,9.324270298640544e37,9.326269498940423e37,9.328268699240304e37,9.330267899540184e37,9.332267099840063e37,9.334266300139944e37,9.336265500439823e37,9.338264700739704e37,9.340263901039584e37,9.342263101339465e37,9.344262301639344e37,9.346261501939223e37,9.348260702239104e37,9.350259902538984e37,9.352259102838865e37,9.354258303138744e37,9.356257503438625e37,9.358256703738504e37,9.360255904038384e37,9.362255104338265e37,9.364254304638144e37,9.366253504938025e37,9.368252705237904e37,9.370251905537786e37,9.372251105837665e37,9.374250306137544e37,9.376249506437425e37,9.378248706737304e37,9.380247907037186e37,9.382247107337065e37,9.384246307636944e37,9.386245507936825e37,9.388244708236705e37,9.390243908536586e37,9.392243108836465e37,9.394242309136346e37,9.396241509436225e37,9.398240709736105e37,9.400239910035986e37,9.402239110335865e37,9.404238310635746e37,9.406237510935625e37,9.408236711235506e37,9.410235911535386e37,9.412235111835265e37,9.414234312135146e37,9.416233512435025e37,9.418232712734906e37,9.420231913034786e37,9.422231113334667e37,9.424230313634546e37,9.426229513934425e37,9.428228714234306e37,9.430227914534186e37,9.432227114834067e37,9.434226315133946e37,9.436225515433825e37,9.438224715733706e37,9.440223916033586e37,9.442223116333467e37,9.444222316633346e37,9.446221516933227e37,9.448220717233106e37,9.450219917532986e37,9.452219117832867e37,9.454218318132746e37,9.456217518432627e37,9.458216718732506e37,9.460215919032388e37,9.462215119332267e37,9.464214319632146e37,9.466213519932027e37,9.468212720231907e37,9.470211920531788e37,9.472211120831667e37,9.474210321131548e37,9.476209521431427e37,9.478208721731307e37,9.480207922031188e37,9.482207122331067e37,9.484206322630948e37,9.486205522930827e37,9.488204723230708e37,9.490203923530588e37,9.492203123830467e37,9.494202324130348e37,9.496201524430227e37,9.498200724730108e37,9.500199925029988e37,9.502199125329867e37,9.504198325629748e37,9.506197525929627e37,9.508196726229508e37,9.510195926529388e37,9.512195126829269e37,9.514194327129148e37,9.516193527429027e37,9.518192727728908e37,9.520191928028788e37,9.522191128328669e37,9.524190328628548e37,9.52618952892843e37,9.528188729228308e37,9.530187929528188e37,9.532187129828069e37,9.534186330127948e37,9.53618553042783e37,9.538184730727709e37,9.54018393102759e37,9.542183131327469e37,9.544182331627348e37,9.54618153192723e37,9.548180732227109e37,9.55017993252699e37,9.552179132826869e37,9.554178333126748e37,9.55617753342663e37,9.558176733726509e37,9.56017593402639e37,9.562175134326269e37,9.56417433462615e37,9.56617353492603e37,9.568172735225909e37,9.57017193552579e37,9.572171135825669e37,9.57417033612555e37,9.57616953642543e37,9.57816873672531e37,9.58016793702519e37,9.582167137325069e37,9.58416633762495e37,9.58616553792483e37,9.58816473822471e37,9.59016393852459e37,9.59216313882447e37,9.59416233912435e37,9.59616153942423e37,9.59816073972411e37,9.60015994002399e37,9.60215914032387e37,9.60415834062375e37,9.606157540923631e37,9.60815674122351e37,9.61015594152339e37,9.61215514182327e37,9.61415434212315e37,9.616153542423031e37,9.61815274272291e37,9.62015194302279e37,9.62215114332267e37,9.62415034362255e37,9.626149543922431e37,9.62814874422231e37,9.630147944522192e37,9.63214714482207e37,9.63414634512195e37,9.636145545421831e37,9.63814474572171e37,9.640143946021592e37,9.64214314632147e37,9.644142346621352e37,9.646141546921231e37,9.64814074722111e37,9.650139947520992e37,9.65213914782087e37,9.654138348120752e37,9.656137548420631e37,9.658136748720512e37,9.660135949020392e37,9.662135149320271e37,9.664134349620152e37,9.666133549920031e37,9.668132750219912e37,9.670131950519792e37,9.672131150819671e37,9.674130351119552e37,9.676129551419431e37,9.678128751719312e37,9.680127952019192e37,9.682127152319073e37,9.684126352618952e37,9.686125552918831e37,9.688124753218713e37,9.690123953518592e37,9.692123153818473e37,9.694122354118352e37,9.696121554418233e37,9.698120754718113e37,9.700119955017992e37,9.702119155317873e37,9.704118355617752e37,9.706117555917633e37,9.708116756217513e37,9.710115956517394e37,9.712115156817273e37,9.714114357117152e37,9.716113557417033e37,9.718112757716913e37,9.720111958016794e37,9.722111158316673e37,9.724110358616554e37,9.726109558916433e37,9.728108759216313e37,9.730107959516194e37,9.732107159816073e37,9.734106360115954e37,9.736105560415833e37,9.738104760715713e37,9.740103961015594e37,9.742103161315473e37,9.744102361615354e37,9.746101561915233e37,9.748100762215114e37,9.750099962514994e37,9.752099162814873e37,9.754098363114754e37,9.756097563414633e37,9.758096763714515e37,9.760095964014394e37,9.762095164314275e37,9.764094364614154e37,9.766093564914033e37,9.768092765213915e37,9.770091965513794e37,9.772091165813675e37,9.774090366113554e37,9.776089566413435e37,9.778088766713315e37,9.780087967013194e37,9.782087167313075e37,9.784086367612954e37,9.786085567912835e37,9.788084768212715e37,9.790083968512596e37,9.792083168812475e37,9.794082369112354e37,9.796081569412235e37,9.798080769712115e37,9.800079970011996e37,9.802079170311875e37,9.804078370611754e37,9.806077570911635e37,9.808076771211515e37,9.810075971511396e37,9.812075171811275e37,9.814074372111156e37,9.816073572411035e37,9.818072772710915e37,9.820071973010796e37,9.822071173310675e37,9.824070373610556e37,9.826069573910435e37,9.828068774210316e37,9.830067974510196e37,9.832067174810075e37,9.834066375109956e37,9.836065575409835e37,9.838064775709717e37,9.840063976009596e37,9.842063176309477e37,9.844062376609356e37,9.846061576909235e37,9.848060777209117e37,9.850059977508996e37,9.852059177808877e37,9.854058378108756e37,9.856057578408635e37,9.858056778708517e37,9.860055979008396e37,9.862055179308277e37,9.864054379608156e37,9.866053579908037e37,9.868052780207917e37,9.870051980507796e37,9.872051180807677e37,9.874050381107556e37,9.876049581407437e37,9.878048781707317e37,9.880047982007198e37,9.882047182307077e37,9.884046382606956e37,9.886045582906837e37,9.888044783206717e37,9.890043983506598e37,9.892043183806477e37,9.894042384106358e37,9.896041584406237e37,9.898040784706117e37,9.900039985005998e37,9.902039185305877e37,9.904038385605758e37,9.906037585905637e37,9.908036786205519e37,9.910035986505398e37,9.912035186805277e37,9.914034387105158e37,9.916033587405037e37,9.918032787704919e37,9.920031988004798e37,9.922031188304677e37,9.924030388604558e37,9.926029588904437e37,9.928028789204319e37,9.930027989504198e37,9.932027189804079e37,9.934026390103958e37,9.936025590403837e37,9.938024790703719e37,9.940023991003598e37,9.942023191303479e37,9.944022391603358e37,9.94602159190324e37,9.948020792203119e37,9.950019992502998e37,9.952019192802879e37,9.954018393102758e37,9.95601759340264e37,9.958016793702519e37,9.9600159940024e37,9.962015194302279e37,9.964014394602158e37,9.96601359490204e37,9.968012795201919e37,9.9700119955018e37,9.972011195801679e37,9.974010396101558e37,9.97600959640144e37,9.978008796701319e37,9.9800079970012e37,9.982007197301079e37,9.98400639760096e37,9.98600559790084e37,9.988004798200719e37,9.9900039985006e37,9.992003198800479e37,9.99400239910036e37,9.99600159940024e37,9.99800079970012e37,1.0e38]}
},{}],53:[function(require,module,exports){
module.exports={"expected":[0.2236068,0.22357328,0.22353977,0.22350629,0.2234728,0.22343935,0.2234059,0.22337247,0.22333905,0.22330566,0.22327226,0.2232389,0.22320555,0.22317222,0.22313888,0.22310558,0.22307228,0.223039,0.22300574,0.22297248,0.22293925,0.22290602,0.22287282,0.22283962,0.22280645,0.22277328,0.22274014,0.222707,0.2226739,0.22264078,0.2226077,0.22257462,0.22254157,0.22250852,0.2224755,0.2224425,0.22240949,0.22237651,0.22234353,0.22231059,0.22227764,0.22224471,0.2222118,0.2221789,0.22214602,0.22211316,0.2220803,0.22204746,0.22201464,0.22198184,0.22194903,0.22191626,0.22188349,0.22185074,0.221818,0.22178528,0.22175258,0.22171988,0.2216872,0.22165453,0.22162189,0.22158925,0.22155663,0.22152402,0.22149143,0.22145885,0.2214263,0.22139373,0.2213612,0.22132869,0.22129618,0.22126369,0.2212312,0.22119875,0.2211663,0.22113387,0.22110145,0.22106904,0.22103664,0.22100426,0.2209719,0.22093956,0.22090721,0.2208749,0.2208426,0.2208103,0.22077803,0.22074576,0.22071351,0.22068126,0.22064905,0.22061685,0.22058465,0.22055247,0.2205203,0.22048815,0.22045602,0.22042389,0.22039178,0.22035968,0.2203276,0.22029555,0.22026348,0.22023146,0.22019942,0.22016741,0.22013542,0.22010343,0.22007146,0.22003952,0.22000757,0.21997564,0.21994372,0.21991183,0.21987994,0.21984807,0.21981621,0.21978436,0.21975254,0.21972072,0.21968892,0.21965712,0.21962535,0.21959358,0.21956185,0.2195301,0.2194984,0.21946667,0.21943499,0.21940331,0.21937165,0.21933998,0.21930836,0.21927673,0.21924512,0.21921353,0.21918194,0.21915038,0.21911882,0.21908727,0.21905574,0.21902423,0.21899273,0.21896124,0.21892977,0.21889831,0.21886685,0.21883543,0.218804,0.21877259,0.2187412,0.21870983,0.21867846,0.21864711,0.21861577,0.21858443,0.21855313,0.21852183,0.21849054,0.21845926,0.21842802,0.21839677,0.21836554,0.21833432,0.21830311,0.21827193,0.21824075,0.21820958,0.21817844,0.2181473,0.21811616,0.21808507,0.21805395,0.21802288,0.2179918,0.21796075,0.21792969,0.21789867,0.21786764,0.21783665,0.21780565,0.21777467,0.21774371,0.21771276,0.21768181,0.21765089,0.21761999,0.21758908,0.21755819,0.21752732,0.21749647,0.21746561,0.21743478,0.21740395,0.21737315,0.21734235,0.21731158,0.2172808,0.21725005,0.21721931,0.21718858,0.21715786,0.21712716,0.21709648,0.2170658,0.21703513,0.21700448,0.21697384,0.21694322,0.21691261,0.216882,0.21685141,0.21682084,0.21679029,0.21675973,0.21672921,0.21669868,0.21666817,0.21663767,0.2166072,0.21657673,0.21654627,0.21651582,0.21648538,0.21645497,0.21642455,0.21639417,0.21636379,0.21633342,0.21630307,0.21627273,0.21624239,0.21621208,0.21618177,0.21615149,0.21612121,0.21609095,0.2160607,0.21603045,0.21600023,0.21597001,0.2159398,0.21590962,0.21587944,0.21584927,0.21581912,0.21578898,0.21575886,0.21572874,0.21569864,0.21566854,0.21563847,0.21560842,0.21557836,0.21554834,0.2155183,0.21548828,0.21545829,0.21542831,0.21539833,0.21536836,0.21533841,0.21530847,0.21527855,0.21524863,0.21521874,0.21518885,0.21515897,0.2151291,0.21509926,0.21506941,0.2150396,0.21500978,0.21497998,0.21495019,0.21492042,0.21489064,0.2148609,0.21483116,0.21480143,0.21477172,0.21474202,0.21471232,0.21468265,0.21465297,0.21462333,0.2145937,0.21456406,0.21453445,0.21450484,0.21447526,0.21444567,0.2144161,0.21438654,0.214357,0.21432747,0.21429795,0.21426845,0.21423896,0.21420947,0.21418001,0.21415055,0.2141211,0.21409167,0.21406224,0.21403284,0.21400344,0.21397406,0.21394469,0.21391533,0.21388598,0.21385664,0.21382731,0.213798,0.2137687,0.21373941,0.21371013,0.21368088,0.21365161,0.21362238,0.21359316,0.21356393,0.21353474,0.21350554,0.21347636,0.2134472,0.21341804,0.21338889,0.21335976,0.21333064,0.21330154,0.21327244,0.21324335,0.21321428,0.21318522,0.21315616,0.21312714,0.21309811,0.2130691,0.2130401,0.2130111,0.21298213,0.21295315,0.21292421,0.21289526,0.21286634,0.21283741,0.2128085,0.21277961,0.21275073,0.21272185,0.21269299,0.21266414,0.21263531,0.21260649,0.21257767,0.21254888,0.21252008,0.2124913,0.21246253,0.21243379,0.21240504,0.21237631,0.21234758,0.21231888,0.21229018,0.2122615,0.21223283,0.21220417,0.21217552,0.21214688,0.21211825,0.21208964,0.21206103,0.21203244,0.21200387,0.21197529,0.21194674,0.21191819,0.21188965,0.21186113,0.21183263,0.21180412,0.21177563,0.21174715,0.2117187,0.21169023,0.2116618,0.21163337,0.21160495,0.21157654,0.21154813,0.21151976,0.21149138,0.21146302,0.21143468,0.21140634,0.21137801,0.2113497,0.21132138,0.21129309,0.2112648,0.21123654,0.21120828,0.21118003,0.2111518,0.21112357,0.21109535,0.21106714,0.21103896,0.21101077,0.2109826,0.21095444,0.21092631,0.21089816,0.21087004,0.21084192,0.21081384,0.21078573,0.21075766,0.2107296,0.21070154,0.2106735,0.21064545,0.21061744,0.21058942,0.21056142,0.21053343,0.21050546,0.21047749,0.21044953,0.21042158,0.21039365,0.21036573,0.21033782,0.21030991,0.21028203,0.21025415,0.21022628,0.21019842,0.21017058,0.21014275,0.21011491,0.2100871,0.2100593,0.21003152,0.21000373,0.20997597,0.20994821,0.20992047,0.20989273,0.209865,0.20983729,0.20980959,0.2097819,0.20975423,0.20972656,0.2096989,0.20967124,0.2096436,0.20961599,0.20958836,0.20956077,0.20953317,0.2095056,0.20947802,0.20945047,0.20942292,0.20939538,0.20936784,0.20934033,0.20931283,0.20928533,0.20925786,0.20923038,0.20920292,0.20917545,0.20914802,0.20912059,0.20909317,0.20906577,0.20903836,0.20901097,0.2089836,0.20895624,0.20892888,0.20890154,0.20887421,0.20884688,0.20881957,0.20879227,0.20876499,0.2087377,0.20871043,0.20868318,0.20865592,0.2086287,0.20860146,0.20857425,0.20854704,0.20851985,0.20849267,0.2084655,0.20843832,0.20841119,0.20838404,0.20835692,0.2083298,0.20830268,0.20827559,0.2082485,0.20822142,0.20819435,0.2081673,0.20814024,0.20811321,0.20808618,0.20805918,0.20803216,0.20800517,0.20797819,0.20795122,0.20792426,0.2078973,0.20787036,0.20784344,0.20781653,0.2077896,0.20776272,0.20773582,0.20770894,0.20768207,0.20765522,0.20762837,0.20760153,0.20757471,0.20754789,0.20752108,0.20749429,0.20746751,0.20744073,0.20741397,0.20738722,0.20736048,0.20733374,0.20730703,0.20728031,0.2072536,0.20722692,0.20720023,0.20717356,0.2071469,0.20712025,0.20709361,0.20706698,0.20704037,0.20701376,0.20698716,0.20696057,0.20693399,0.20690742,0.20688087,0.20685431,0.20682777,0.20680125,0.20677473,0.20674823,0.20672172,0.20669524,0.20666876,0.2066423,0.20661585,0.2065894,0.20656297,0.20653655,0.20651013,0.20648372,0.20645733,0.20643094,0.20640457,0.20637819,0.20635185,0.2063255,0.20629917,0.20627284,0.20624653,0.20622022,0.20619392,0.20616765,0.20614137,0.20611511,0.20608886,0.20606261,0.20603637,0.20601016,0.20598394,0.20595774,0.20593154,0.20590536,0.20587918,0.20585302,0.20582686,0.20580073,0.20577459,0.20574847,0.20572235,0.20569624,0.20567015,0.20564407,0.205618,0.20559193,0.20556587,0.20553982,0.20551379,0.20548777,0.20546176,0.20543575,0.20540975,0.20538376,0.20535779,0.20533182,0.20530587,0.20527993,0.20525399,0.20522806,0.20520215,0.20517625,0.20515034,0.20512445,0.20509858,0.20507272,0.20504685,0.20502101,0.20499517,0.20496935,0.20494352,0.20491771,0.2048919,0.20486613,0.20484035,0.20481457,0.20478882,0.20476307,0.20473732,0.20471159,0.20468588,0.20466016,0.20463446,0.20460877,0.20458308,0.2045574,0.20453174,0.20450608,0.20448045,0.20445481,0.2044292,0.20440358,0.20437796,0.20435238,0.2043268,0.20430121,0.20427564,0.2042501,0.20422454,0.204199,0.20417348,0.20414795,0.20412244,0.20409694,0.20407145,0.20404598,0.2040205,0.20399503,0.2039696,0.20394415,0.20391871,0.20389329,0.20386788,0.20384248,0.20381708,0.2037917,0.20376632,0.20374094,0.2037156,0.20369025,0.2036649,0.20363957,0.20361425,0.20358895,0.20356365,0.20353836,0.20351307,0.2034878,0.20346254,0.20343728,0.20341204,0.20338681,0.20336157,0.20333637,0.20331116,0.20328596,0.20326076,0.2032356,0.20321043,0.20318526,0.20316012,0.20313497,0.20310985,0.20308472,0.20305961,0.2030345,0.20300941,0.20298432,0.20295925,0.20293418,0.20290913,0.20288408,0.20285904,0.20283401,0.20280899,0.20278397,0.20275898,0.202734,0.202709,0.20268403,0.20265906,0.20263411,0.20260917,0.20258422,0.20255929,0.20253438,0.20250946,0.20248456,0.20245968,0.2024348,0.20240992,0.20238505,0.2023602,0.20233536,0.20231053,0.20228569,0.20226088,0.20223607,0.20221128,0.20218648,0.2021617,0.20213692,0.20211217,0.2020874,0.20206267,0.20203793,0.20201321,0.20198847,0.20196378,0.20193908,0.20191438,0.20188971,0.20186503,0.20184037,0.20181571,0.20179108,0.20176643,0.20174181,0.20171718,0.20169258,0.20166798,0.20164339,0.2016188,0.20159423,0.20156966,0.20154512,0.20152056,0.20149603,0.20147151,0.20144698,0.20142247,0.20139797,0.20137347,0.20134899,0.20132452,0.20130005,0.2012756,0.20125115,0.20122671,0.20120227,0.20117787,0.20115344,0.20112905,0.20110464,0.20108026,0.20105588,0.20103152,0.20100716,0.20098281,0.20095848,0.20093413,0.20090981,0.20088549,0.20086119,0.20083688,0.20081261,0.20078832,0.20076406,0.20073979,0.20071554,0.20069128,0.20066705,0.20064284,0.20061861,0.20059441,0.2005702,0.20054601,0.20052183,0.20049766,0.20047349,0.20044933,0.20042518,0.20040104,0.20037691,0.20035279,0.20032868,0.20030457,0.20028047,0.20025639,0.20023231,0.20020825,0.20018418,0.20016013,0.20013608,0.20011204,0.20008802,0.200064,0.20004,0.20001599,0.199992,0.19996801,0.19994405,0.19992007,0.19989613,0.19987217,0.19984823,0.1998243,0.19980037,0.19977647,0.19975255,0.19972867,0.19970477,0.1996809,0.19965702,0.19963317,0.19960931,0.19958545,0.19956163,0.1995378,0.19951397,0.19949016,0.19946635,0.19944257,0.19941878,0.199395,0.19937123,0.19934747,0.19932371,0.19929998,0.19927624,0.19925252,0.1992288,0.19920509,0.19918138,0.19915769,0.199134,0.19911033,0.19908667,0.199063,0.19903935,0.1990157,0.19899207,0.19896846,0.19894484,0.19892123,0.19889763,0.19887404,0.19885045,0.19882688,0.1988033,0.19877975,0.1987562,0.19873266,0.19870913,0.1986856,0.19866209,0.19863857,0.19861509,0.19859159,0.1985681,0.19854462,0.19852117,0.1984977,0.19847426,0.19845082,0.19842738,0.19840395,0.19838054,0.19835714,0.19833373,0.19831033,0.19828695,0.19826359,0.19824022,0.19821686,0.1981935,0.19817017,0.19814683,0.1981235,0.19810018,0.19807687,0.19805357,0.1980303,0.198007,0.19798373,0.19796045,0.19793719,0.19791394,0.1978907,0.19786747,0.19784424,0.19782102,0.1977978,0.1977746,0.19775142,0.19772823,0.19770505,0.19768187,0.19765872,0.19763556,0.19761242,0.19758928,0.19756615,0.19754303,0.19751991,0.19749682,0.19747372,0.19745062,0.19742756,0.19740447,0.1973814,0.19735835,0.1973353,0.19731227,0.19728923,0.1972662,0.1972432,0.19722018,0.19719718,0.19717419,0.19715121,0.19712824,0.19710526,0.19708231,0.19705935,0.19703642,0.19701347,0.19699055,0.19696763,0.19694471,0.19692181,0.19689892,0.19687602,0.19685315,0.19683027,0.19680741,0.19678456,0.19676171,0.19673887,0.19671604,0.19669321,0.1966704,0.1966476,0.19662479,0.196602,0.19657922,0.19655643,0.19653367,0.19651091,0.19648816,0.19646542,0.19644266,0.19641994,0.19639722,0.1963745,0.1963518,0.1963291,0.19630642,0.19628373,0.19626106,0.1962384,0.19621573,0.19619308,0.19617045,0.19614781,0.19612518,0.19610256,0.19607995,0.19605735,0.19603476,0.19601217,0.1959896,0.19596702,0.19594444,0.1959219,0.19589935,0.1958768,0.19585428,0.19583175,0.19580923,0.19578671,0.19576421,0.19574173,0.19571923,0.19569676,0.19567429,0.19565183,0.19562936,0.19560692,0.19558448,0.19556205,0.19553962,0.1955172,0.1954948,0.19547239,0.19545001,0.19542761,0.19540524,0.19538286,0.1953605,0.19533814,0.1953158,0.19529346,0.19527112,0.1952488,0.19522649,0.19520418,0.19518188,0.19515958,0.19513729,0.19511501,0.19509274,0.19507048,0.19504823,0.19502598,0.19500373,0.1949815,0.19495927,0.19493705,0.19491485,0.19489264,0.19487044,0.19484825,0.19482608,0.19480391,0.19478175,0.19475958,0.19473743,0.19471529,0.19469316,0.19467103,0.1946489,0.1946268,0.1946047,0.1945826,0.19456051,0.19453843,0.19451635,0.19449428,0.19447222,0.19445017,0.19442813,0.19440609,0.19438407,0.19436204,0.19434002,0.19431803,0.19429602,0.19427402,0.19425204,0.19423006,0.1942081,0.19418614,0.19416417,0.19414224,0.19412029,0.19409835,0.19407643,0.19405451,0.19403261,0.1940107,0.19398881,0.19396693,0.19394505,0.19392316,0.1939013,0.19387944,0.1938576,0.19383575,0.19381392,0.19379207,0.19377026,0.19374844,0.19372664,0.19370484,0.19368306,0.19366127,0.19363949,0.19361772,0.19359596,0.1935742,0.19355245,0.19353071,0.19350898,0.19348726,0.19346553,0.19344382,0.19342212,0.19340043,0.19337873,0.19335705,0.19333538,0.1933137,0.19329205,0.1932704,0.19324875,0.19322711,0.19320549,0.19318385,0.19316225,0.19314063,0.19311903,0.19309743,0.19307585,0.19305426,0.1930327,0.19301112,0.19298957,0.19296803,0.19294648,0.19292495,0.1929034,0.19288188,0.19286036,0.19283886,0.19281736,0.19279587,0.19277437,0.1927529,0.19273143,0.19270997,0.1926885,0.19266705,0.19264561,0.19262417,0.19260275,0.19258133,0.19255991,0.1925385,0.1925171,0.1924957,0.19247432,0.19245294,0.19243157,0.1924102,0.19238885,0.1923675,0.19234616,0.19232482,0.19230348,0.19228217,0.19226085,0.19223954,0.19221823,0.19219695,0.19217566,0.19215438,0.1921331,0.19211183,0.19209057,0.19206932,0.19204807,0.19202684,0.1920056,0.19198439,0.19196317,0.19194196,0.19192077,0.19189957,0.19187838,0.19185719,0.19183603,0.19181485,0.1917937,0.19177254,0.19175139,0.19173026,0.19170913,0.191688,0.19166689,0.19164577,0.19162467,0.19160356,0.19158247,0.1915614,0.19154032,0.19151925,0.19149819,0.19147713,0.19145608,0.19143504,0.191414,0.19139297,0.19137195,0.19135094,0.19132993,0.19130893,0.19128793,0.19126695,0.19124597,0.191225,0.19120404,0.19118308,0.19116212,0.19114117,0.19112024,0.1910993,0.19107838,0.19105746,0.19103655,0.19101565,0.19099475,0.19097386,0.19095299,0.19093211,0.19091123,0.19089037,0.19086951,0.19084868,0.19082783,0.190807,0.19078617,0.19076534,0.19074452,0.19072372,0.19070292,0.19068213,0.19066133,0.19064055,0.19061978,0.19059901,0.19057825,0.1905575,0.19053675,0.19051601,0.19049528,0.19047455,0.19045383,0.19043311,0.19041242,0.1903917,0.19037102,0.19035032,0.19032966,0.19030897,0.19028832,0.19026765,0.190247,0.19022636,0.19020572,0.19018508,0.19016446,0.19014384,0.19012323,0.19010262,0.19008203,0.19006144,0.19004084,0.19002026,0.1899997,0.18997914,0.18995857,0.18993802,0.18991747,0.18989694,0.1898764,0.18985587,0.18983535,0.18981485,0.18979435,0.18977384,0.18975335,0.18973286,0.18971239,0.18969192,0.18967146,0.18965098,0.18963054,0.1896101,0.18958965,0.18956922,0.18954879,0.18952838,0.18950796,0.18948756,0.18946716,0.18944676,0.18942638,0.18940601,0.18938562,0.18936527,0.1893449,0.18932454,0.1893042,0.18928386,0.18926352,0.1892432,0.18922287,0.18920256,0.18918225,0.18916196,0.18914166,0.18912137,0.1891011,0.18908082,0.18906055,0.18904029,0.18902004,0.18899977,0.18897954,0.1889593,0.18893908,0.18891884,0.18889864,0.18887842,0.18885823,0.18883802,0.18881783,0.18879765,0.18877748,0.1887573,0.18873714,0.18871698,0.18869683,0.18867669,0.18865654,0.1886364,0.18861628,0.18859616,0.18857604,0.18855594,0.18853584,0.18851575,0.18849567,0.18847558,0.1884555,0.18843544,0.18841538,0.18839532,0.18837528,0.18835524,0.1883352,0.18831517,0.18829514,0.18827513,0.18825512,0.1882351,0.18821512,0.18819512,0.18817514,0.18815516,0.18813519,0.18811522,0.18809526,0.1880753,0.18805537,0.18803543,0.18801549,0.18799557,0.18797563,0.18795572,0.18793581,0.1879159,0.18789601,0.18787612,0.18785624,0.18783636,0.18781649,0.18779662,0.18777677,0.18775691,0.18773708,0.18771723,0.1876974,0.18767758,0.18765776,0.18763794,0.18761814,0.18759833,0.18757853,0.18755874,0.18753897,0.18751918,0.18749942,0.18747965,0.18745989,0.18744014,0.1874204,0.18740065,0.18738092,0.1873612,0.18734148,0.18732177,0.18730205,0.18728235,0.18726265,0.18724297,0.18722329,0.1872036,0.18718393,0.18716428,0.1871446,0.18712497,0.18710531,0.18708567,0.18706605,0.18704641,0.1870268,0.18700717,0.18698756,0.18696797,0.18694837,0.18692878,0.1869092,0.18688962,0.18687004,0.18685047,0.18683092,0.18681136,0.18679182,0.18677227,0.18675274,0.18673322,0.1867137,0.18669418,0.18667465,0.18665516,0.18663566,0.18661617,0.18659668,0.1865772,0.18655773,0.18653826,0.18651879,0.18649934,0.18647988,0.18646045,0.18644102,0.18642157,0.18640216,0.18638273,0.18636332,0.18634391,0.1863245,0.18630512,0.18628573,0.18626635,0.18624698,0.18622759,0.18620823,0.18618888,0.18616952,0.18615018,0.18613084,0.18611151,0.18609217,0.18607286,0.18605353,0.18603422,0.18601492,0.18599562,0.18597633,0.18595704,0.18593776,0.18591848,0.18589921,0.18587996,0.1858607,0.18584144,0.1858222,0.18580297,0.18578373,0.1857645,0.18574528,0.18572606,0.18570687,0.18568766,0.18566847,0.18564928,0.18563008,0.1856109,0.18559173,0.18557256,0.1855534,0.18553425,0.1855151,0.18549596,0.18547682,0.18545769,0.18543856,0.18541944,0.18540032,0.18538122,0.18536212,0.18534303,0.18532394,0.18530485,0.18528576,0.1852667,0.18524763,0.18522857,0.18520951,0.18519047,0.18517143,0.18515238,0.18513335,0.18511432,0.18509531,0.1850763,0.1850573,0.18503828,0.1850193,0.1850003,0.18498132,0.18496233,0.18494336,0.1849244,0.18490544,0.18488649,0.18486753,0.18484859,0.18482965,0.18481073,0.18479179,0.18477288,0.18475395,0.18473504,0.18471615,0.18469726,0.18467836,0.18465947,0.18464059,0.18462172,0.18460284,0.18458399,0.18456513,0.18454628,0.18452744,0.18450859,0.18448977,0.18447094,0.18445212,0.1844333,0.18441449,0.18439569,0.18437688,0.18435809,0.1843393,0.18432052,0.18430175,0.18428297,0.18426421,0.18424545,0.18422669,0.18420795,0.18418922,0.18417047,0.18415174,0.18413302,0.18411429,0.18409559,0.18407688,0.18405817,0.18403947,0.18402079,0.1840021,0.18398343,0.18396476,0.18394609,0.18392742,0.18390878,0.18389012,0.18387148,0.18385284,0.1838342,0.18381558,0.18379696,0.18377833,0.18375972,0.18374112,0.18372253,0.18370393,0.18368533,0.18366675,0.18364817,0.1836296,0.18361104,0.18359248,0.18357393,0.18355538,0.18353684,0.18351829,0.18349977,0.18348125,0.18346272,0.1834442,0.1834257,0.18340719,0.1833887,0.1833702,0.18335171,0.18333323,0.18331476,0.18329628,0.18327782,0.18325937,0.1832409,0.18322246,0.18320401,0.18318558,0.18316714,0.18314873,0.18313031,0.18311189,0.18309347,0.18307507,0.18305668,0.18303828,0.18301989,0.18300152,0.18298315,0.18296477,0.18294641,0.18292804,0.1829097,0.18289134,0.18287301,0.18285467,0.18283634,0.18281801,0.18279968,0.18278137,0.18276307,0.18274476,0.18272646,0.18270816,0.18268988,0.1826716,0.18265332,0.18263505,0.18261679,0.18259853,0.18258026,0.18256202,0.18254377,0.18252555,0.1825073,0.18248908,0.18247086,0.18245263,0.18243442,0.18241623,0.18239802,0.18237983,0.18236165,0.18234345,0.18232527,0.18230711,0.18228894,0.18227078,0.18225262,0.18223447,0.18221632,0.18219818,0.18218005,0.18216191,0.18214379,0.18212567,0.18210757,0.18208945,0.18207136,0.18205325,0.18203516,0.18201707,0.181999,0.18198092,0.18196285,0.18194479,0.18192673,0.18190867,0.18189062,0.18187258,0.18185455,0.18183652,0.18181849,0.18180045,0.18178244,0.18176444,0.18174642,0.18172842,0.18171044,0.18169244,0.18167447,0.18165648,0.18163851,0.18162054,0.18160258,0.18158461,0.18156667,0.18154871,0.18153077,0.18151283,0.1814949,0.18147698,0.18145907,0.18144114,0.18142323,0.18140534,0.18138744,0.18136954,0.18135165,0.18133377,0.18131588,0.18129802,0.18128015,0.18126228,0.18124443,0.18122658,0.18120873,0.1811909,0.18117306,0.18115522,0.1811374,0.18111958,0.18110177,0.18108396,0.18106616,0.18104835,0.18103056,0.18101276,0.18099499,0.18097721,0.18095943,0.18094167,0.18092391,0.18090615,0.1808884,0.18087065,0.1808529,0.18083517,0.18081744,0.18079972,0.18078199,0.18076429,0.18074657,0.18072887,0.18071117,0.18069348,0.18067577,0.1806581,0.18064041,0.18062274,0.18060507,0.18058741,0.18056975,0.1805521,0.18053445,0.18051681,0.18049918,0.18048154,0.18046391,0.1804463,0.18042868,0.18041106,0.18039346,0.18037586,0.18035826,0.18034066,0.18032308,0.1803055,0.18028793,0.18027036,0.18025279,0.18023524,0.18021767,0.18020013,0.18018258,0.18016504,0.1801475,0.18012998,0.18011245,0.18009493,0.18007742,0.18005991,0.1800424,0.1800249,0.18000741,0.17998992,0.17997244,0.17995496,0.1799375,0.17992002,0.17990255,0.1798851,0.17986766,0.17985019,0.17983276,0.17981532,0.17979789,0.17978045,0.17976303,0.17974561,0.17972821,0.17971079,0.1796934,0.179676,0.1796586,0.17964122,0.17962384,0.17960647,0.1795891,0.17957172,0.17955436,0.179537,0.17951965,0.17950231,0.17948496,0.17946762,0.17945029,0.17943297,0.17941564,0.17939833,0.17938101,0.17936371,0.17934641,0.17932911,0.17931183,0.17929453,0.17927726,0.17925997,0.1792427,0.17922543,0.17920817,0.17919092,0.17917366,0.17915642,0.17913918,0.17912194,0.17910472,0.17908749,0.17907026,0.17905304,0.17903583,0.17901863,0.17900142,0.17898422,0.17896703,0.17894985,0.17893267,0.17891549,0.17889832,0.17888115,0.17886399,0.17884682,0.17882967,0.17881253,0.17879538,0.17877825,0.17876111,0.17874399,0.17872687,0.17870975,0.17869264,0.17867552,0.17865843,0.17864132,0.17862423,0.17860714,0.17859006,0.17857297,0.1785559,0.17853883,0.17852177,0.17850472,0.17848766,0.17847061,0.17845356,0.17843652,0.17841949,0.17840245,0.17838544,0.17836842,0.1783514,0.17833439,0.17831738,0.17830038,0.17828338,0.17826639,0.1782494,0.17823243,0.17821546,0.17819847,0.17818151,0.17816456,0.1781476,0.17813064,0.1781137,0.17809676,0.17807981,0.17806289,0.17804596,0.17802903,0.17801212,0.17799519,0.17797829,0.17796138,0.17794448,0.1779276,0.1779107,0.17789382,0.17787693,0.17786007,0.1778432,0.17782633,0.17780946,0.17779261,0.17777576,0.17775892,0.17774206,0.17772524,0.1777084,0.17769158,0.17767476,0.17765793,0.17764112,0.17762432,0.17760752,0.17759071,0.17757392,0.17755713,0.17754035,0.17752357,0.17750679,0.17749003,0.17747326,0.1774565,0.17743975,0.17742299,0.17740625,0.1773895,0.17737277,0.17735603,0.1773393,0.17732258,0.17730586,0.17728916,0.17727244,0.17725575,0.17723905,0.17722236,0.17720565,0.17718898,0.17717229,0.17715561,0.17713894,0.17712228,0.17710562,0.17708896,0.17707232,0.17705567,0.17703903,0.17702238,0.17700575,0.17698912,0.17697251,0.17695588,0.17693926,0.17692265,0.17690605,0.17688945,0.17687286,0.17685626,0.17683968,0.1768231,0.17680652,0.17678995,0.17677338,0.17675681,0.17674026,0.1767237,0.17670716,0.17669061,0.17667407,0.17665754,0.17664102,0.17662448,0.17660797,0.17659144,0.17657493,0.17655842,0.17654192,0.17652543,0.17650893,0.17649245,0.17647596,0.17645948,0.17644301,0.17642654,0.17641006,0.17639361,0.17637715,0.1763607,0.17634425,0.17632781,0.17631137,0.17629494,0.1762785,0.17626208,0.17624566,0.17622925,0.17621285,0.17619643,0.17618003,0.17616364,0.17614725,0.17613085,0.17611447,0.1760981,0.17608173,0.17606536,0.17604898,0.17603263,0.17601627,0.17599992,0.17598358,0.17596723,0.1759509,0.17593457,0.17591824,0.1759019,0.17588559,0.17586929,0.17585297,0.17583665,0.17582037,0.17580406,0.17578776,0.17577147,0.1757552,0.17573893,0.17572266,0.17570637,0.17569011,0.17567386,0.1756576,0.17564134,0.1756251,0.17560886,0.17559263,0.17557639,0.17556016,0.17554393,0.17552772,0.1755115,0.17549528,0.17547908,0.17546289,0.17544669,0.17543049,0.1754143,0.17539813,0.17538194,0.17536576,0.1753496,0.17533343,0.17531727,0.1753011,0.17528495,0.17526881,0.17525266,0.17523652,0.17522039,0.17520426,0.17518814,0.17517202,0.1751559,0.17513978,0.17512368,0.17510758,0.17509148,0.17507538,0.17505929,0.17504321,0.17502712,0.17501104,0.17499498,0.17497891,0.17496283,0.17494678,0.17493072,0.17491467,0.17489864,0.17488259,0.17486654,0.17485052,0.17483449,0.17481846,0.17480244,0.17478643,0.17477043,0.17475441,0.1747384,0.17472242,0.17470643,0.17469043,0.17467445,0.17465846,0.17464249,0.17462653,0.17461056,0.1745946,0.17457864,0.17456268,0.17454673,0.17453079,0.17451485,0.17449892,0.17448297,0.17446704,0.17445113,0.17443521,0.17441928,0.17440338,0.17438747,0.17437159,0.17435569,0.17433979,0.1743239,0.17430802,0.17429213,0.17427626,0.1742604,0.17424452,0.17422867,0.1742128,0.17419694,0.1741811,0.17416526,0.17414941,0.17413357,0.17411774,0.17410192,0.1740861,0.17407027,0.17405446,0.17403865,0.17402285,0.17400704,0.17399125,0.17397545,0.17395967,0.17394388,0.1739281,0.17391232,0.17389655,0.17388077,0.17386502,0.17384925,0.1738335,0.17381775,0.173802,0.17378627,0.17377053,0.1737548,0.17373906,0.17372334,0.17370762,0.17369191,0.1736762,0.17366049,0.17364478,0.17362909,0.17361338,0.1735977,0.17358202,0.17356633,0.17355065,0.17353497,0.17351931,0.17350365,0.17348799,0.17347233,0.17345667,0.17344102,0.17342539,0.17340975,0.1733941,0.17337848,0.17336285,0.17334722,0.1733316,0.17331599,0.17330039,0.17328478,0.17326917,0.17325358,0.173238,0.17322241,0.1732068,0.17319123,0.17317566,0.17316009,0.1731445,0.17312895,0.17311339,0.17309783,0.17308228,0.17306674,0.1730512,0.17303565,0.17302012,0.17300458,0.17298907,0.17297354,0.17295803,0.1729425,0.172927,0.1729115,0.172896,0.1728805,0.172865,0.17284952,0.17283404,0.17281856,0.17280307,0.1727876,0.17277214,0.17275669,0.17274122,0.17272577,0.17271031,0.17269486,0.17267941,0.17266397,0.17264855,0.17263311,0.17261769,0.17260227,0.17258684,0.17257144,0.17255603,0.17254062,0.17252521,0.17250982,0.17249443,0.17247903,0.17246366,0.17244828,0.1724329,0.17241752,0.17240216,0.1723868,0.17237143,0.17235607,0.17234072,0.17232537,0.17231002,0.17229469,0.17227936,0.17226402,0.17224869,0.17223337,0.17221805,0.17220274,0.17218743,0.17217211,0.17215681,0.1721415,0.17212622,0.17211093,0.17209564,0.17208035,0.17206508,0.1720498,0.17203453,0.17201927,0.17200401,0.17198876,0.1719735,0.17195824,0.171943,0.17192777,0.17191252,0.17189728,0.17188205,0.17186683,0.1718516,0.17183639,0.17182118,0.17180596,0.17179076,0.17177555,0.17176037,0.17174517,0.17172998,0.1717148,0.17169961,0.17168443,0.17166926,0.17165409,0.17163892,0.17162377,0.17160861,0.17159346,0.1715783,0.17156316,0.17154802,0.17153288,0.17151774,0.17150262,0.1714875,0.17147237,0.17145726,0.17144214,0.17142703,0.17141193,0.17139684,0.17138173,0.17136663,0.17135155,0.17133646,0.17132138,0.1713063,0.17129123,0.17127617,0.1712611,0.17124604,0.17123097,0.17121592,0.17120087,0.17118582,0.17117079,0.17115575,0.17114072,0.17112568,0.17111066,0.17109564,0.17108062,0.1710656,0.1710506,0.17103559,0.17102058,0.17100559,0.17099059,0.17097561,0.17096062,0.17094564,0.17093065,0.17091568,0.17090072,0.17088576,0.17087078,0.17085582,0.17084087,0.17082593,0.17081097,0.17079602,0.17078109,0.17076616,0.17075123,0.1707363,0.17072137,0.17070645,0.17069153,0.17067662,0.17066172,0.17064682,0.17063192,0.17061701,0.17060213,0.17058724,0.17057236,0.17055747,0.1705426,0.17052773,0.17051286,0.170498,0.17048313,0.17046827,0.17045341,0.17043857,0.17042372,0.17040887,0.17039405,0.17037922,0.17036438,0.17034955,0.17033473,0.17031991,0.17030509,0.17029029,0.17027548,0.17026068,0.17024589,0.17023109,0.17021629,0.17020151,0.17018673,0.17017195,0.17015716,0.1701424,0.17012763,0.17011286,0.1700981,0.17008334,0.17006859,0.17005384,0.1700391,0.17002435,0.17000963,0.16999489,0.16998015,0.16996543,0.16995071,0.16993599,0.16992126,0.16990656,0.16989186,0.16987716,0.16986245,0.16984776,0.16983306,0.16981839,0.1698037,0.16978902,0.16977434,0.16975966,0.169745,0.16973034,0.16971567,0.16970101,0.16968636,0.16967171,0.16965707,0.16964242,0.16962779,0.16961314,0.16959852,0.16958389,0.16956927,0.16955465,0.16954003,0.16952541,0.16951081,0.16949621,0.1694816,0.16946702,0.16945241,0.16943783,0.16942324,0.16940866,0.16939409,0.16937952,0.16936493,0.16935037,0.16933581,0.16932125,0.1693067,0.16929214,0.1692776,0.16926305,0.1692485,0.16923396,0.16921943,0.1692049,0.16919039,0.16917586,0.16916135,0.16914684,0.16913232,0.16911781,0.16910331,0.16908881,0.16907431,0.16905981,0.16904533,0.16903085,0.16901638,0.16900189,0.16898742,0.16897295,0.16895849,0.16894403,0.16892956,0.16891511,0.16890065,0.16888621,0.16887176,0.16885732,0.1688429,0.16882846,0.16881403,0.16879961,0.16878518,0.16877078,0.16875635,0.16874194,0.16872753,0.16871314,0.16869874,0.16868433,0.16866994,0.16865556,0.16864118,0.16862679,0.16861242,0.16859804,0.16858368,0.1685693,0.16855495,0.16854058,0.16852623,0.16851188,0.16849753,0.16848318,0.16846885,0.16845451,0.16844018,0.16842584,0.16841152,0.1683972,0.16838288,0.16836856,0.16835426,0.16833995,0.16832563,0.16831134,0.16829705,0.16828276,0.16826847,0.16825418,0.16823989,0.16822562,0.16821134,0.16819707,0.1681828,0.16816854,0.16815428,0.16814002,0.16812576,0.16811152,0.16809727,0.16808303,0.1680688,0.16805457,0.16804034,0.1680261,0.16801187,0.16799766,0.16798344,0.16796923,0.16795501,0.16794081,0.16792661,0.16791241,0.16789821,0.16788402,0.16786984,0.16785565,0.16784146,0.1678273,0.16781312,0.16779895,0.16778478,0.16777062,0.16775645,0.16774231,0.16772816,0.167714,0.16769986,0.16768572,0.16767159,0.16765745,0.16764331,0.16762918,0.16761507,0.16760094,0.16758683,0.16757272,0.16755861,0.1675445,0.1675304,0.1675163,0.16750221,0.16748811,0.16747402,0.16745993,0.16744587,0.16743179,0.1674177,0.16740364,0.16738957,0.16737552,0.16736145,0.16734739,0.16733335,0.1673193,0.16730525,0.16729121,0.16727717,0.16726314,0.16724911,0.16723508,0.16722105,0.16720703,0.16719301,0.167179,0.16716498,0.16715099,0.16713698,0.16712297,0.16710898,0.16709499,0.16708101,0.16706702,0.16705303,0.16703905,0.16702509,0.16701111,0.16699713,0.16698317,0.16696922,0.16695526,0.1669413,0.16692735,0.1669134,0.16689947,0.16688552,0.16687159,0.16685766,0.16684373,0.16682981,0.16681588,0.16680196,0.16678804,0.16677414,0.16676022,0.16674632,0.16673242,0.16671853,0.16670462,0.16669074,0.16667685,0.16666296,0.16664909,0.1666352,0.16662133,0.16660747,0.1665936,0.16657972,0.16656587,0.16655202,0.16653816,0.1665243,0.16651046,0.16649662,0.16648279,0.16646895,0.16645512,0.16644129,0.16642746,0.16641365,0.16639982,0.16638601,0.1663722,0.1663584,0.16634458,0.16633078,0.16631699,0.16630319,0.16628939,0.1662756,0.16626182,0.16624805,0.16623427,0.1662205,0.16620673,0.16619296,0.1661792,0.16616543,0.16615167,0.16613792,0.16612418,0.16611043,0.16609669,0.16608295,0.16606921,0.16605547,0.16604175,0.16602802,0.1660143,0.16600057,0.16598687,0.16597316,0.16595945,0.16594574,0.16593203,0.16591834,0.16590464,0.16589095,0.16587725,0.16586357,0.1658499,0.16583622,0.16582254,0.16580887,0.16579519,0.16578153,0.16576786,0.16575421,0.16574056,0.16572692,0.16571327,0.16569962,0.16568597,0.16567233,0.1656587,0.16564506,0.16563144,0.16561782,0.1656042,0.16559057,0.16557696,0.16556334,0.16554974,0.16553614,0.16552253,0.16550894,0.16549535,0.16548176,0.16546817,0.16545458,0.165441,0.16542743,0.16541384,0.16540028,0.1653867,0.16537315,0.16535959,0.16534603,0.16533248,0.16531892,0.16530538,0.16529183,0.16527829,0.16526476,0.16525123,0.16523768,0.16522416,0.16521063,0.16519712,0.16518359,0.16517009,0.16515657,0.16514307,0.16512956,0.16511606,0.16510256,0.16508907,0.16507557,0.16506208,0.1650486,0.16503513,0.16502164,0.16500817,0.1649947,0.16498123,0.16496778,0.1649543,0.16494085,0.1649274,0.16491394,0.16490048,0.16488704,0.1648736,0.16486017,0.16484673,0.16483329,0.16481987,0.16480644,0.16479303,0.1647796,0.16476619,0.16475278,0.16473937,0.16472596,0.16471256,0.16469917,0.16468577,0.16467237,0.16465898,0.1646456,0.16463222,0.16461883,0.16460545,0.16459209,0.16457872,0.16456535,0.16455199,0.16453862,0.16452527,0.16451192,0.16449857,0.16448522,0.16447188,0.16445854,0.16444519,0.16443186,0.16441853,0.16440521,0.16439188,0.16437855,0.16436525,0.16435193,0.16433862,0.16432531,0.164312,0.1642987,0.1642854,0.1642721,0.16425882,0.16424553,0.16423224,0.16421896,0.16420569,0.16419241,0.16417913,0.16416585,0.16415259,0.16413933,0.16412608,0.16411282,0.16409956,0.16408631,0.16407306,0.16405983,0.16404659,0.16403335,0.16402012,0.16400689,0.16399366,0.16398042,0.1639672,0.16395399,0.16394077,0.16392757,0.16391435,0.16390115,0.16388795,0.16387475,0.16386156,0.16384837,0.16383518,0.16382198,0.16380881,0.16379562,0.16378245,0.16376927,0.1637561,0.16374294,0.16372977,0.16371661,0.16370346,0.1636903,0.16367716,0.16366401,0.16365086,0.16363771,0.16362458,0.16361144,0.1635983,0.16358519,0.16357206,0.16355893,0.1635458,0.16353269,0.16351958,0.16350648,0.16349337,0.16348027,0.16346717,0.16345407,0.16344097,0.16342787,0.16341479,0.16340171,0.16338862,0.16337554,0.16336247,0.1633494,0.16333634,0.16332325,0.1633102,0.16329715,0.16328408,0.16327102,0.16325797,0.16324493,0.1632319,0.16321886,0.1632058,0.16319278,0.16317974,0.16316672,0.1631537,0.16314067,0.16312765,0.16311464,0.16310161,0.1630886,0.1630756,0.1630626,0.1630496,0.1630366,0.1630236,0.16301061,0.16299763,0.16298464,0.16297166,0.16295868,0.1629457,0.16293272,0.16291976,0.1629068,0.16289383,0.16288087,0.16286792,0.16285497,0.16284202,0.16282906,0.16281612,0.16280317,0.16279024,0.1627773,0.16276437,0.16275144,0.16273852,0.1627256,0.16271266,0.16269976,0.16268684,0.16267394,0.16266102,0.16264811,0.16263522,0.16262232,0.16260943,0.16259652,0.16258365,0.16257076,0.16255787,0.162545,0.16253212,0.16251925,0.16250637,0.1624935,0.16248064,0.16246778,0.16245492,0.16244206,0.16242921,0.16241635,0.16240351,0.16239068,0.16237783,0.16236499,0.16235216,0.16233933,0.1623265,0.16231367,0.16230085,0.16228804,0.16227521,0.1622624,0.1622496,0.1622368,0.16222398,0.16221118,0.16219838,0.1621856,0.1621728,0.16216001,0.16214722,0.16213444,0.16212167,0.16210888,0.16209611,0.16208334,0.16207057,0.1620578,0.16204505,0.16203229,0.16201954,0.16200678,0.16199403,0.16198128,0.16196854,0.1619558,0.16194306,0.16193032,0.1619176,0.16190487,0.16189213,0.16187942,0.1618667,0.16185398,0.16184126,0.16182855,0.16181585,0.16180314,0.16179045,0.16177775,0.16176505,0.16175236,0.16173968,0.16172698,0.1617143,0.16170162,0.16168894,0.16167626,0.16166359,0.16165093,0.16163826,0.1616256,0.16161293,0.16160028,0.16158763,0.16157497,0.16156232,0.16154969,0.16153704,0.1615244,0.16151176,0.16149913,0.1614865,0.16147387,0.16146125,0.16144863,0.161436,0.1614234,0.16141078,0.16139817,0.16138557,0.16137296,0.16136035,0.16134776,0.16133517,0.16132258,0.16130999,0.1612974,0.16128482,0.16127224,0.16125967,0.16124709,0.16123451,0.16122195,0.16120939,0.16119681,0.16118427,0.1611717,0.16115916,0.1611466,0.16113405,0.16112152,0.16110897,0.16109644,0.16108389,0.16107136,0.16105883,0.16104631,0.16103378,0.16102126,0.16100875,0.16099623,0.16098371,0.1609712,0.16095869,0.16094619,0.16093369,0.16092119,0.1609087,0.16089621,0.16088372,0.16087122,0.16085875,0.16084626,0.16083379,0.16082132,0.16080885,0.16079637,0.16078392,0.16077144,0.16075899,0.16074653,0.16073407,0.16072161,0.16070917,0.16069673,0.16068429,0.16067185,0.1606594,0.16064698,0.16063455,0.16062212,0.16060969,0.16059726,0.16058485,0.16057244,0.16056001,0.1605476,0.1605352,0.16052279,0.16051039,0.160498,0.1604856,0.1604732,0.16046081,0.16044842,0.16043603,0.16042365,0.16041127,0.16039889,0.16038652,0.16037415,0.16036178,0.16034941,0.16033706,0.1603247,0.16031234,0.16029999,0.16028763,0.16027528,0.16026294,0.1602506,0.16023825,0.16022593,0.16021359,0.16020127,0.16018893,0.1601766,0.16016428,0.16015197,0.16013965,0.16012733,0.16011502,0.16010271,0.1600904,0.16007811,0.1600658,0.1600535,0.16004121,0.16002892,0.16001664,0.16000435,0.15999207,0.15997979,0.15996751,0.15995523,0.15994297,0.15993069,0.15991843,0.15990616,0.15989392,0.15988165,0.15986939,0.15985714,0.1598449,0.15983266,0.15982041,0.15980816,0.15979593,0.15978369,0.15977146,0.15975924,0.159747,0.15973479,0.15972257,0.15971035,0.15969813,0.15968592,0.1596737,0.1596615,0.1596493,0.1596371,0.1596249,0.1596127,0.15960051,0.15958832,0.15957613,0.15956394,0.15955177,0.1595396,0.15952742,0.15951523,0.15950307,0.1594909,0.15947874,0.15946656,0.1594544,0.15944226,0.1594301,0.15941796,0.1594058,0.15939365,0.15938152,0.15936938,0.15935723,0.1593451,0.15933298,0.15932085,0.15930872,0.1592966,0.15928447,0.15927236,0.15926024,0.15924813,0.15923603,0.15922391,0.15921181,0.15919971,0.15918761,0.15917552,0.15916343,0.15915133,0.15913925,0.15912716,0.15911508,0.15910299,0.15909092,0.15907885,0.15906678,0.15905471,0.15904264,0.15903059,0.15901853,0.15900648,0.1589944,0.15898237,0.15897031,0.15895827,0.15894622,0.15893418,0.15892215,0.15891011,0.15889807,0.15888605,0.15887402,0.158862,0.15884997,0.15883796,0.15882593,0.15881392,0.15880191,0.1587899,0.15877791,0.1587659,0.1587539,0.1587419,0.15872991,0.15871792,0.15870593,0.15869394,0.15868196,0.15866998,0.158658,0.15864603,0.15863405,0.15862209,0.15861012,0.15859815,0.15858619,0.15857424,0.15856227,0.15855032,0.15853837,0.15852642,0.15851448,0.15850253,0.1584906,0.15847866,0.15846673,0.15845479,0.15844287,0.15843093,0.15841901,0.15840709,0.15839517,0.15838325,0.15837134,0.15835944,0.15834753,0.15833561,0.15832372,0.15831181,0.15829992,0.15828802,0.15827613,0.15826425,0.15825236,0.15824048,0.15822859,0.15821671,0.15820484,0.15819298,0.1581811,0.15816922,0.15815736,0.1581455,0.15813364,0.15812178,0.15810993,0.15809809,0.15808623,0.15807438,0.15806255,0.1580507,0.15803887,0.15802702,0.15801519,0.15800336,0.15799154,0.15797971,0.1579679,0.15795606,0.15794426,0.15793243,0.15792063,0.15790881,0.15789701,0.15788521,0.1578734,0.1578616,0.15784982,0.15783802,0.15782623,0.15781444,0.15780266,0.15779087,0.15777908,0.15776731,0.15775554,0.15774377,0.157732,0.15772022,0.15770847,0.15769671,0.15768494,0.1576732,0.15766144,0.15764968,0.15763794,0.1576262,0.15761445,0.15760271,0.15759097,0.15757923,0.1575675,0.15755577,0.15754405,0.15753232,0.15752059,0.15750888,0.15749717,0.15748544,0.15747373,0.15746203,0.15745032,0.15743862,0.15742691,0.15741521,0.15740351,0.15739183,0.15738013,0.15736845,0.15735677,0.15734509,0.15733339,0.15732172,0.15731004,0.15729837,0.1572867,0.15727504,0.15726337,0.15725172,0.15724005,0.1572284,0.15721674,0.15720509,0.15719344,0.15718178,0.15717015,0.15715851,0.15714687,0.15713522,0.1571236,0.15711196,0.15710033,0.15708871,0.15707709,0.15706547,0.15705384,0.15704224,0.15703061,0.157019,0.1570074,0.1569958,0.1569842,0.15697259,0.156961,0.1569494,0.15693781,0.15692621,0.15691462,0.15690304,0.15689145,0.15687987,0.15686831,0.15685673,0.15684517,0.15683359,0.15682203,0.15681046,0.1567989,0.15678734,0.15677577,0.15676422,0.15675268,0.15674113,0.15672958,0.15671803,0.1567065,0.15669495,0.15668342,0.15667188,0.15666035,0.15664883,0.1566373,0.15662578,0.15661426,0.15660274,0.15659122,0.1565797,0.1565682,0.1565567,0.15654518,0.15653367,0.15652218,0.15651068,0.15649918,0.15648769,0.1564762,0.15646471,0.15645322,0.15644175,0.15643026,0.15641879,0.15640731,0.15639584,0.15638436,0.1563729,0.15636143,0.15634997,0.15633851,0.15632705,0.1563156,0.15630414,0.15629269,0.15628125,0.1562698,0.15625836,0.15624692,0.15623549,0.15622404,0.15621261,0.15620118,0.15618975,0.15617833,0.15616691,0.15615548,0.15614407,0.15613265,0.15612124,0.15610982,0.15609843,0.15608703,0.15607563,0.15606423,0.15605281,0.15604143,0.15603003,0.15601864,0.15600726,0.15599588,0.15598449,0.1559731,0.15596172,0.15595035,0.15593898,0.15592761,0.15591624,0.15590487,0.15589352,0.15588216,0.15587081,0.15585944,0.15584809,0.15583675,0.15582539,0.15581405,0.15580271,0.15579137,0.15578003,0.15576869,0.15575735,0.15574603,0.1557347,0.15572338,0.15571205,0.15570073,0.15568942,0.15567811,0.15566678,0.15565547,0.15564416,0.15563287,0.15562156,0.15561025,0.15559895,0.15558766,0.15557636,0.15556508,0.15555379,0.15554251,0.15553121,0.15551993,0.15550867,0.15549739,0.1554861,0.15547484,0.15546358,0.15545231,0.15544105,0.15542978,0.15541852,0.15540726,0.15539601,0.15538475,0.1553735,0.15536226,0.15535101,0.15533978,0.15532853,0.15531729,0.15530607,0.15529484,0.1552836,0.15527238,0.15526114,0.15524992,0.1552387,0.15522748,0.15521628,0.15520506,0.15519385,0.15518264,0.15517144,0.15516023,0.15514903,0.15513784,0.15512663,0.15511544,0.15510426,0.15509306,0.15508188,0.15507069,0.15505952,0.15504834,0.15503716,0.15502599,0.15501481,0.15500364,0.15499248,0.15498132,0.15497015,0.154959,0.15494783,0.15493669,0.15492553,0.15491438,0.15490323,0.15489209,0.15488094,0.15486981,0.15485866,0.15484753,0.1548364,0.15482527,0.15481414,0.15480301,0.15479189,0.15478078,0.15476966,0.15475853,0.15474741,0.15473631,0.15472521,0.1547141,0.15470299,0.15469189,0.15468079,0.15466969,0.15465859,0.1546475,0.15463641,0.15462533,0.15461424,0.15460315,0.15459208,0.154581,0.15456992,0.15455885,0.15454778,0.15453671,0.15452564,0.15451458,0.15450352,0.15449247,0.1544814,0.15447035,0.1544593,0.15444826,0.1544372,0.15442616,0.15441512,0.15440407,0.15439303,0.154382,0.15437096,0.15435994,0.15434891,0.15433788,0.15432686,0.15431584,0.15430482,0.1542938,0.1542828,0.15427178,0.15426077,0.15424976,0.15423876,0.15422775,0.15421675,0.15420575,0.15419476,0.15418378,0.15417278,0.1541618,0.1541508,0.15413982,0.15412883,0.15411787,0.15410689,0.1540959,0.15408494,0.15407397,0.154063,0.15405203,0.15404108,0.15403011,0.15401916,0.1540082,0.15399724,0.1539863,0.15397535,0.1539644,0.15395346,0.15394253,0.15393159,0.15392064,0.15390971,0.15389878,0.15388785,0.15387692,0.153866,0.15385507,0.15384415,0.15383324,0.15382232,0.15381141,0.1538005,0.1537896,0.15377867,0.15376778,0.15375687,0.15374598,0.15373507,0.15372418,0.15371329,0.15370241,0.1536915,0.15368062,0.15366974,0.15365887,0.15364799,0.15363711,0.15362623,0.15361536,0.15360449,0.15359361,0.15358275,0.1535719,0.15356104,0.15355018,0.15353931,0.15352847,0.15351762,0.15350677,0.15349592,0.15348507,0.15347424,0.15346341,0.15345256,0.15344173,0.1534309,0.15342006,0.15340923,0.15339841,0.15338759,0.15337677,0.15336594,0.15335512,0.15334432,0.1533335,0.1533227,0.15331188,0.15330108,0.15329029,0.15327948,0.15326868,0.15325788,0.15324709,0.1532363,0.15322551,0.15321472,0.15320393,0.15319316,0.15318237,0.1531716,0.15316083,0.15315005,0.15313928,0.1531285,0.15311775,0.15310699,0.15309621,0.15308546,0.1530747,0.15306395,0.1530532,0.15304244,0.15303169,0.15302095,0.1530102,0.15299946,0.15298872,0.15297799,0.15296726,0.15295652,0.15294579,0.15293506,0.15292434,0.15291362,0.15290289,0.15289217,0.15288146,0.15287074,0.15286003,0.15284932,0.15283862,0.1528279,0.1528172,0.1528065,0.1527958,0.15278511,0.15277441,0.15276372,0.15275303,0.15274234,0.15273166,0.15272097,0.15271029,0.15269962,0.15268895,0.15267827,0.1526676,0.15265693,0.15264626,0.15263559,0.15262493,0.15261427,0.15260361,0.15259296,0.1525823,0.15257165,0.15256101,0.15255035,0.1525397,0.15252906,0.15251842,0.1525078,0.15249714,0.15248652,0.1524759,0.15246525,0.15245463,0.152444,0.15243338,0.15242277,0.15241215,0.15240152,0.15239091,0.1523803,0.1523697,0.15235908,0.15234849,0.15233788,0.15232728,0.15231667,0.15230608,0.15229549,0.1522849,0.15227431,0.15226372,0.15225314,0.15224256,0.15223198,0.1522214,0.15221082,0.15220025,0.15218967,0.1521791,0.15216854,0.15215798,0.15214741,0.15213685,0.15212628,0.15211573,0.15210518,0.15209462,0.15208408,0.15207353,0.15206298,0.15205243,0.1520419,0.15203136,0.15202083,0.15201029,0.15199976,0.15198922,0.1519787,0.15196818,0.15195765,0.15194713,0.1519366,0.1519261,0.15191558,0.15190506,0.15189455,0.15188405,0.15187354,0.15186304,0.15185253,0.15184204,0.15183154,0.15182105,0.15181056,0.15180007,0.15178958,0.15177909,0.1517686,0.15175812,0.15174764,0.15173715,0.15172668,0.15171622,0.15170574,0.15169528,0.1516848,0.15167435,0.15166388,0.15165342,0.15164295,0.1516325,0.15162204,0.1516116,0.15160115,0.1515907,0.15158026,0.15156981,0.15155937,0.15154892,0.15153849,0.15152806,0.15151763,0.1515072,0.15149677,0.15148634,0.15147592,0.15146549,0.15145507,0.15144466,0.15143424,0.15142383,0.15141343,0.15140301,0.15139261,0.1513822,0.15137179,0.1513614,0.151351,0.1513406,0.15133022,0.15131982,0.15130943,0.15129904,0.15128866,0.15127827,0.1512679,0.15125751,0.15124714,0.15123676,0.1512264,0.15121603,0.15120566,0.15119529,0.15118493,0.15117456,0.1511642,0.15115385,0.15114349,0.15113313,0.1511228,0.15111244,0.1511021,0.15109175,0.15108141,0.15107106,0.15106073,0.15105039,0.15104006,0.15102972,0.1510194,0.15100907,0.15099874,0.15098841,0.15097809,0.15096778,0.15095747,0.15094715,0.15093683,0.15092652,0.15091622,0.1509059,0.1508956,0.1508853,0.150875,0.1508647,0.15085441,0.15084411,0.15083382,0.15082353,0.15081325,0.15080296,0.15079267,0.15078239,0.15077212,0.15076183,0.15075156,0.1507413,0.15073103,0.15072075,0.15071048,0.15070023,0.15068996,0.1506797,0.15066944,0.15065919,0.15064894,0.15063868,0.15062843,0.15061818,0.15060793,0.15059769,0.15058745,0.1505772,0.15056698,0.15055674,0.1505465,0.15053627,0.15052605,0.15051582,0.15050559,0.15049537,0.15048516,0.15047494,0.15046471,0.1504545,0.15044428,0.15043408,0.15042387,0.15041366,0.15040345,0.15039326,0.15038306,0.15037286,0.15036267,0.15035248,0.15034229,0.1503321,0.1503219,0.15031172,0.15030153,0.15029135,0.15028118,0.150271,0.15026082,0.15025066,0.15024048,0.15023032,0.15022014,0.15020998,0.15019982,0.15018965,0.1501795,0.15016934,0.15015918,0.15014903,0.15013888,0.15012874,0.15011859,0.15010844,0.15009831,0.15008816,0.15007803,0.1500679,0.15005776,0.15004763,0.1500375,0.15002736,0.15001725,0.15000713,0.149997,0.14998688,0.14997676,0.14996664,0.14995654,0.14994642,0.14993632,0.14992622,0.14991611,0.14990601,0.14989589,0.1498858,0.1498757,0.14986561,0.14985551,0.14984542,0.14983533,0.14982526,0.14981516,0.14980508,0.149795,0.14978492,0.14977485,0.14976478,0.1497547,0.14974463,0.14973457,0.1497245,0.14971443,0.14970437,0.14969431,0.14968425,0.14967419,0.14966415,0.14965409,0.14964403,0.14963399,0.14962395,0.1496139,0.14960386,0.14959382,0.14958379,0.14957374,0.14956371,0.14955367,0.14954364,0.14953363,0.1495236,0.14951357,0.14950354,0.14949353,0.14948352,0.14947349,0.14946347,0.14945348,0.14944346,0.14943346,0.14942345,0.14941344,0.14940344,0.14939344,0.14938344,0.14937344,0.14936346,0.14935346,0.14934348,0.14933349,0.14932351,0.14931352,0.14930354,0.14929356,0.14928357,0.1492736,0.14926364,0.14925365,0.14924368,0.14923373,0.14922376,0.14921379,0.14920382,0.14919387,0.14918391,0.14917396,0.149164,0.14915405,0.1491441,0.14913414,0.1491242,0.14911427,0.14910433,0.14909439,0.14908445,0.14907451,0.14906457,0.14905465,0.1490447,0.14903478,0.14902486,0.14901493,0.14900501,0.1489951,0.14898518,0.14897527,0.14896534,0.14895543,0.14894553,0.14893562,0.14892572,0.14891581,0.1489059,0.14889601,0.14888611,0.1488762,0.14886631,0.14885643,0.14884654,0.14883664,0.14882676,0.14881687,0.14880699,0.14879711,0.14878723,0.14877735,0.14876749,0.1487576,0.14874774,0.14873788,0.14872801,0.14871815,0.14870827,0.14869842,0.14868855,0.1486787,0.14866884,0.14865899,0.14864914,0.14863929,0.14862944,0.1486196,0.14860976,0.14859992,0.14859009,0.14858024,0.1485704,0.14856057,0.14855075,0.14854091,0.14853108,0.14852126,0.14851144,0.1485016,0.14849178,0.14848198,0.14847216,0.14846236,0.14845254,0.14844273,0.14843291,0.1484231,0.1484133,0.1484035,0.1483937,0.1483839,0.14837411,0.14836432,0.14835452,0.14834474,0.14833494,0.14832516,0.14831537,0.1483056,0.1482958,0.14828603,0.14827625,0.14826648,0.1482567,0.14824693,0.14823717,0.1482274,0.14821763,0.14820786,0.1481981,0.14818835,0.14817859,0.14816883,0.14815907,0.14814933,0.14813958,0.14812984,0.14812008,0.14811035,0.1481006,0.14809085,0.14808111,0.14807138,0.14806165,0.14805192,0.14804219,0.14803246,0.14802273,0.14801301,0.14800328,0.14799355,0.14798383,0.14797412,0.1479644,0.14795469,0.14794499,0.14793527,0.14792557,0.14791586,0.14790615,0.14789645,0.14788675,0.14787705,0.14786735,0.14785767,0.14784797,0.14783828,0.1478286,0.14781891,0.14780922,0.14779954,0.14778985,0.14778018,0.1477705,0.14776082,0.14775115,0.14774148,0.14773181,0.14772214,0.14771247,0.14770281,0.14769314,0.14768349,0.14767383,0.14766417,0.14765452,0.14764486,0.14763522,0.14762557,0.14761592,0.14760627,0.14759663,0.14758699,0.14757735,0.14756772,0.14755808,0.14754844,0.14753881,0.14752918,0.14751956,0.14750992,0.1475003,0.14749068,0.14748107,0.14747144,0.14746182,0.1474522,0.1474426,0.14743298,0.14742337,0.14741378,0.14740416,0.14739457,0.14738496,0.14737536,0.14736576,0.14735617,0.14734657,0.14733697,0.1473274,0.1473178,0.14730822,0.14729862,0.14728904,0.14727947,0.14726989,0.14726031,0.14725073,0.14724116,0.1472316,0.14722201,0.14721245,0.14720288,0.14719331,0.14718375,0.1471742,0.14716463,0.14715508,0.14714552,0.14713597,0.14712642,0.14711687,0.14710732,0.14709778,0.14708823,0.1470787,0.14706916,0.1470596,0.14705007,0.14704055,0.14703101,0.14702147,0.14701195,0.14700241,0.14699289,0.14698337,0.14697385,0.14696433,0.14695482,0.1469453,0.14693578,0.14692627,0.14691676,0.14690726,0.14689775,0.14688824,0.14687873,0.14686924,0.14685974,0.14685024,0.14684074,0.14683124,0.14682175,0.14681226,0.14680278,0.14679329,0.14678381,0.14677432,0.14676484,0.14675537,0.14674589,0.14673641,0.14672694,0.14671746,0.146708,0.14669852,0.14668906,0.1466796,0.14667013,0.14666067,0.14665121,0.14664176,0.1466323,0.14662285,0.14661339,0.14660394,0.1465945,0.14658505,0.1465756,0.14656617,0.14655672,0.14654729,0.14653784,0.14652841,0.14651898,0.14650954,0.14650013,0.1464907,0.14648126,0.14647184,0.14646243,0.146453,0.14644358,0.14643416,0.14642474,0.14641532,0.14640592,0.1463965,0.1463871,0.1463777,0.1463683,0.14635889,0.14634949,0.14634009,0.14633068,0.1463213,0.14631191,0.1463025,0.14629312,0.14628373,0.14627434,0.14626497,0.14625558,0.1462462,0.14623682,0.14622745,0.14621806,0.14620869,0.14619932,0.14618996,0.14618059,0.14617121,0.14616185,0.1461525,0.14614312,0.14613377,0.14612441,0.14611505,0.1461057,0.14609635,0.14608699,0.14607765,0.1460683,0.14605896,0.14604962,0.14604028,0.14603093,0.1460216,0.14601226,0.14600293,0.14599359,0.14598426,0.14597493,0.1459656,0.14595628,0.14594696,0.14593764,0.14592832,0.145919,0.14590968,0.14590037,0.14589106,0.14588174,0.14587244,0.14586313,0.14585382,0.14584452,0.14583522,0.14582592,0.14581662,0.14580733,0.14579803,0.14578874,0.14577945,0.14577015,0.14576086,0.14575158,0.1457423,0.14573301,0.14572373,0.14571446,0.14570518,0.1456959,0.14568663,0.14567736,0.14566809,0.14565882,0.14564955,0.14564028,0.14563103,0.14562176,0.14561251,0.14560324,0.14559399,0.14558473,0.14557548,0.14556623,0.14555699,0.14554773,0.1455385,0.14552924,0.14552,0.14551076,0.14550152,0.14549229,0.14548306,0.14547382,0.14546458,0.14545536,0.14544614,0.14543691,0.14542769,0.14541847,0.14540924,0.14540002,0.14539081,0.14538158,0.14537238,0.14536317,0.14535396,0.14534475,0.14533554,0.14532633,0.14531714,0.14530793,0.14529873,0.14528953,0.14528033,0.14527114,0.14526194,0.14525276,0.14524357,0.14523438,0.1452252,0.145216,0.14520682,0.14519764,0.14518847,0.14517929,0.14517012,0.14516094,0.14515176,0.1451426,0.14513344,0.14512427,0.1451151,0.14510594,0.14509678,0.14508761,0.14507847,0.1450693,0.14506015,0.145051,0.14504185,0.14503269,0.14502354,0.1450144,0.14500526,0.1449961,0.14498697,0.14497784,0.1449687,0.14495957,0.14495043,0.1449413,0.14493217,0.14492305,0.14491391,0.14490479,0.14489566,0.14488654,0.14487742,0.1448683,0.1448592,0.14485008,0.14484096,0.14483185,0.14482275,0.14481363,0.14480452,0.14479542,0.14478631,0.14477722,0.14476812,0.14475901,0.14474992,0.14474083,0.14473175,0.14472264,0.14471355,0.14470448,0.14469539,0.1446863,0.14467722,0.14466813,0.14465906,0.14464998,0.14464091,0.14463183,0.14462276,0.1446137,0.14460462,0.14459555,0.14458649,0.14457743,0.14456837,0.14455931,0.14455025,0.14454119,0.14453213,0.14452308,0.14451404,0.14450498,0.14449593,0.14448689,0.14447784,0.1444688,0.14445975,0.14445072,0.14444168,0.14443265,0.14442362,0.14441457,0.14440554,0.14439651,0.1443875,0.14437847,0.14436944,0.14436042,0.1443514,0.14434238,0.14433336,0.14432435,0.14431533,0.14430632,0.1442973,0.1442883,0.14427929,0.14427029,0.14426127,0.14425227,0.14424327,0.14423428,0.14422528,0.14421628,0.14420728,0.1441983,0.14418931,0.14418031,0.14417133,0.14416234,0.14415337,0.14414437,0.1441354,0.14412642,0.14411744,0.14410846,0.14409949,0.14409052,0.14408155,0.14407258,0.14406362,0.14405465,0.1440457,0.14403673,0.14402777,0.1440188,0.14400984,0.1440009,0.14399193,0.14398299,0.14397404,0.1439651,0.14395614,0.1439472,0.14393826,0.14392932,0.14392036,0.14391144,0.1439025,0.14389355,0.14388463,0.14387569,0.14386676,0.14385784,0.14384891,0.14383999,0.14383106,0.14382213,0.14381322,0.1438043,0.14379539,0.14378646,0.14377755,0.14376864,0.14375973,0.14375082,0.14374192,0.14373301,0.1437241,0.1437152,0.1437063,0.14369741,0.1436885,0.1436796,0.14367072,0.14366183,0.14365293,0.14364403,0.14363515,0.14362627,0.14361738,0.1436085,0.14359963,0.14359075,0.14358187,0.14357299,0.14356412,0.14355524,0.14354637,0.1435375,0.14352864,0.14351977,0.14351091,0.14350204,0.14349318,0.14348432,0.14347547,0.1434666,0.14345776,0.1434489,0.14344005,0.1434312,0.14342235,0.14341351,0.14340466,0.14339583,0.14338697,0.14337814,0.1433693,0.14336047,0.14335163,0.1433428,0.14333397,0.14332514,0.1433163,0.14330748,0.14329866,0.14328983,0.14328101,0.14327219,0.14326337,0.14325456,0.14324574,0.14323692,0.14322811,0.1432193,0.1432105,0.14320168,0.14319289,0.14318408,0.14317527,0.14316647,0.14315768,0.14314888,0.14314009,0.14313129,0.1431225,0.1431137,0.14310493,0.14309613,0.14308734,0.14307857,0.14306977,0.143061,0.14305222,0.14304344,0.14303467,0.14302589,0.14301711,0.14300834,0.14299957,0.14299081,0.14298204,0.14297327,0.14296451,0.14295575,0.14294699,0.14293823,0.14292946,0.14292072,0.14291197,0.14290321,0.14289446,0.14288571,0.14287697,0.14286822,0.14285947,0.14285073,0.142842,0.14283325,0.14282452,0.14281578,0.14280705,0.14279832,0.14278957,0.14278086,0.14277212,0.14276339,0.14275467,0.14274594,0.14273722,0.14272851,0.14271979,0.14271107,0.14270236,0.14269364,0.14268494,0.14267622,0.1426675,0.1426588,0.1426501,0.1426414,0.1426327,0.14262399,0.14261529,0.14260659,0.1425979,0.1425892,0.14258051,0.14257182,0.14256312,0.14255443,0.14254576,0.14253707,0.14252838,0.1425197,0.14251103,0.14250235,0.14249367,0.142485,0.14247632,0.14246765,0.14245898,0.1424503,0.14244163,0.14243297,0.14242432,0.14241564,0.14240699,0.14239833,0.14238967,0.14238101,0.14237235,0.1423637,0.14235505,0.1423464,0.14233775,0.1423291,0.14232045,0.14231181,0.14230317,0.14229453,0.1422859,0.14227726,0.14226861,0.14225999,0.14225136,0.14224271,0.14223409,0.14222546,0.14221683,0.1422082,0.14219958,0.14219096,0.14218235,0.14217372,0.14216511,0.1421565,0.14214788,0.14213927,0.14213066,0.14212205,0.14211343,0.14210483,0.14209622,0.14208762,0.14207903,0.14207043,0.14206183,0.14205322,0.14204463,0.14203604,0.14202745,0.14201885,0.14201026,0.14200167,0.14199309,0.1419845,0.14197592,0.14196734,0.14195876,0.14195019,0.1419416,0.14193304,0.14192446,0.14191589,0.14190732,0.14189875,0.14189018,0.14188161,0.14187305,0.1418645,0.14185593,0.14184737,0.14183882,0.14183025,0.1418217,0.14181314,0.14180459,0.14179604,0.1417875,0.14177895,0.14177041,0.14176185,0.14175332,0.14174478,0.14173624,0.1417277,0.14171916,0.14171062,0.1417021,0.14169356,0.14168502,0.1416765,0.14166798,0.14165945,0.14165093,0.1416424,0.14163388,0.14162536,0.14161684,0.14160833,0.14159982,0.1415913,0.14158279,0.14157428,0.14156577,0.14155726,0.14154875,0.14154024,0.14153175,0.14152326,0.14151475,0.14150625,0.14149776,0.14148927,0.14148077,0.14147228,0.14146379,0.1414553,0.14144681,0.14143832,0.14142984,0.14142136],"x":[20.0,20.005997600959617,20.011995201919234,20.017992802878847,20.023990403838464,20.02998800479808,20.0359856057577,20.041983206717312,20.04798080767693,20.053978408636546,20.059976009596163,20.065973610555776,20.071971211515393,20.07796881247501,20.083966413434627,20.08996401439424,20.095961615353858,20.101959216313475,20.10795681727309,20.11395441823271,20.119952019192322,20.12594962015194,20.131947221111556,20.137944822071173,20.143942423030786,20.149940023990403,20.15593762495002,20.161935225909637,20.16793282686925,20.173930427828868,20.179928028788485,20.185925629748102,20.191923230707715,20.197920831667332,20.20391843262695,20.209916033586566,20.215913634546183,20.221911235505797,20.227908836465414,20.23390643742503,20.239904038384648,20.24590163934426,20.251899240303878,20.257896841263495,20.263894442223112,20.269892043182725,20.275889644142342,20.28188724510196,20.287884846061576,20.29388244702119,20.299880047980807,20.305877648940424,20.31187524990004,20.317872850859658,20.32387045181927,20.329868052778888,20.335865653738505,20.341863254698122,20.347860855657736,20.353858456617353,20.35985605757697,20.365853658536587,20.3718512594962,20.377848860455817,20.383846461415434,20.38984406237505,20.395841663334664,20.40183926429428,20.4078368652539,20.413834466213515,20.419832067173132,20.425829668132746,20.431827269092363,20.43782487005198,20.443822471011597,20.44982007197121,20.455817672930827,20.461815273890444,20.46781287485006,20.473810475809675,20.47980807676929,20.48580567772891,20.491803278688526,20.49780087964814,20.503798480607756,20.509796081567373,20.51579368252699,20.521791283486607,20.52778888444622,20.533786485405837,20.539784086365454,20.54578168732507,20.551779288284685,20.557776889244302,20.56377449020392,20.569772091163536,20.57576969212315,20.581767293082766,20.587764894042383,20.593762495002,20.599760095961614,20.60575769692123,20.611755297880848,20.617752898840465,20.62375049980008,20.629748100759695,20.635745701719312,20.64174330267893,20.647740903638546,20.65373850459816,20.659736105557776,20.665733706517393,20.67173130747701,20.677728908436624,20.68372650939624,20.689724110355858,20.695721711315475,20.701719312275088,20.707716913234705,20.713714514194322,20.71971211515394,20.725709716113556,20.73170731707317,20.737704918032787,20.743702518992404,20.74970011995202,20.755697720911634,20.76169532187125,20.767692922830868,20.773690523790485,20.7796881247501,20.785685725709715,20.791683326669332,20.79768092762895,20.803678528588563,20.80967612954818,20.815673730507797,20.821671331467414,20.82766893242703,20.833666533386644,20.83966413434626,20.845661735305878,20.851659336265495,20.85765693722511,20.863654538184726,20.869652139144343,20.87564974010396,20.881647341063573,20.88764494202319,20.893642542982807,20.899640143942424,20.905637744902037,20.911635345861654,20.91763294682127,20.92363054778089,20.929628148740505,20.93562574970012,20.941623350659736,20.947620951619353,20.95361855257897,20.959616153538583,20.9656137544982,20.971611355457817,20.977608956417434,20.983606557377048,20.989604158336665,20.99560175929628,21.0015993602559,21.007596961215516,21.01359456217513,21.019592163134746,21.025589764094363,21.03158736505398,21.037584966013593,21.04358256697321,21.049580167932827,21.055577768892444,21.061575369852058,21.067572970811675,21.073570571771292,21.07956817273091,21.085565773690522,21.09156337465014,21.097560975609756,21.103558576569373,21.10955617752899,21.115553778488604,21.12155137944822,21.127548980407838,21.133546581367455,21.139544182327068,21.145541783286685,21.151539384246302,21.15753698520592,21.163534586165532,21.16953218712515,21.175529788084766,21.181527389044383,21.187524990003997,21.193522590963614,21.19952019192323,21.205517792882848,21.211515393842465,21.217512994802078,21.223510595761695,21.229508196721312,21.23550579768093,21.241503398640543,21.24750099960016,21.253498600559777,21.259496201519394,21.265493802479007,21.271491403438624,21.27748900439824,21.283486605357858,21.28948420631747,21.29548180727709,21.301479408236705,21.307477009196322,21.31347461015594,21.319472211115553,21.32546981207517,21.331467413034787,21.337465013994404,21.343462614954017,21.349460215913634,21.35545781687325,21.361455417832868,21.36745301879248,21.3734506197521,21.379448220711716,21.385445821671333,21.391443422630946,21.397441023590563,21.40343862455018,21.409436225509797,21.415433826469414,21.421431427429027,21.427429028388644,21.43342662934826,21.43942423030788,21.445421831267492,21.45141943222711,21.457417033186726,21.463414634146343,21.469412235105956,21.475409836065573,21.48140743702519,21.487405037984807,21.49340263894442,21.499400239904038,21.505397840863655,21.51139544182327,21.51739304278289,21.523390643742502,21.52938824470212,21.535385845661736,21.541383446621353,21.547381047580966,21.553378648540583,21.5593762495002,21.565373850459817,21.57137145141943,21.577369052379048,21.583366653338665,21.58936425429828,21.595361855257895,21.601359456217512,21.60735705717713,21.613354658136746,21.619352259096363,21.625349860055977,21.631347461015594,21.63734506197521,21.643342662934828,21.64934026389444,21.655337864854058,21.661335465813675,21.667333066773292,21.673330667732905,21.679328268692522,21.68532586965214,21.691323470611756,21.69732107157137,21.703318672530987,21.709316273490604,21.71531387445022,21.721311475409838,21.72730907636945,21.733306677329068,21.739304278288685,21.745301879248302,21.751299480207916,21.757297081167533,21.76329468212715,21.769292283086767,21.77528988404638,21.781287485005997,21.787285085965614,21.79328268692523,21.799280287884844,21.80527788884446,21.81127548980408,21.817273090763695,21.823270691723312,21.829268292682926,21.835265893642543,21.84126349460216,21.847261095561777,21.85325869652139,21.859256297481007,21.865253898440624,21.87125149940024,21.877249100359855,21.88324670131947,21.88924430227909,21.895241903238706,21.90123950419832,21.907237105157936,21.913234706117553,21.91923230707717,21.925229908036787,21.9312275089964,21.937225109956017,21.943222710915634,21.94922031187525,21.955217912834865,21.961215513794482,21.9672131147541,21.973210715713716,21.97920831667333,21.985205917632946,21.991203518592563,21.99720111955218,22.003198720511794,22.00919632147141,22.015193922431028,22.021191523390645,22.02718912435026,22.033186725309875,22.039184326269492,22.04518192722911,22.051179528188726,22.05717712914834,22.063174730107956,22.069172331067573,22.07516993202719,22.081167532986804,22.08716513394642,22.093162734906038,22.099160335865655,22.105157936825268,22.111155537784885,22.117153138744502,22.12315073970412,22.129148340663736,22.13514594162335,22.141143542582967,22.147141143542584,22.1531387445022,22.159136345461814,22.16513394642143,22.171131547381048,22.177129148340665,22.18312674930028,22.189124350259895,22.195121951219512,22.20111955217913,22.207117153138743,22.21311475409836,22.219112355057977,22.225109956017594,22.23110755697721,22.237105157936824,22.24310275889644,22.249100359856058,22.255097960815675,22.26109556177529,22.267093162734906,22.273090763694523,22.27908836465414,22.285085965613753,22.29108356657337,22.297081167532987,22.303078768492604,22.309076369452217,22.315073970411834,22.32107157137145,22.32706917233107,22.333066773290685,22.3390643742503,22.345061975209916,22.351059576169533,22.35705717712915,22.363054778088763,22.36905237904838,22.375049980007997,22.381047580967614,22.387045181927228,22.393042782886845,22.39904038384646,22.40503798480608,22.411035585765692,22.41703318672531,22.423030787684926,22.429028388644543,22.43502598960416,22.441023590563773,22.44702119152339,22.453018792483007,22.459016393442624,22.465013994402238,22.471011595361855,22.47700919632147,22.48300679728109,22.489004398240702,22.49500199920032,22.500999600159936,22.506997201119553,22.512994802079167,22.518992403038784,22.5249900039984,22.530987604958018,22.536985205917635,22.542982806877248,22.548980407836865,22.554978008796482,22.5609756097561,22.566973210715712,22.57297081167533,22.578968412634946,22.584966013594563,22.590963614554177,22.596961215513794,22.60295881647341,22.608956417433028,22.61495401839264,22.620951619352258,22.626949220311875,22.632946821271492,22.63894442223111,22.644942023190723,22.65093962415034,22.656937225109957,22.662934826069574,22.668932427029187,22.674930027988804,22.68092762894842,22.686925229908038,22.69292283086765,22.69892043182727,22.704918032786885,22.710915633746502,22.716913234706116,22.722910835665733,22.72890843662535,22.734906037584967,22.740903638544584,22.746901239504197,22.752898840463814,22.75889644142343,22.764894042383048,22.77089164334266,22.77688924430228,22.782886845261896,22.788884446221513,22.794882047181126,22.800879648140743,22.80687724910036,22.812874850059977,22.818872451019594,22.824870051979207,22.830867652938824,22.83686525389844,22.84286285485806,22.848860455817672,22.85485805677729,22.860855657736906,22.866853258696523,22.872850859656136,22.878848460615753,22.88484606157537,22.890843662534987,22.8968412634946,22.902838864454218,22.908836465413835,22.91483406637345,22.92083166733307,22.926829268292682,22.9328268692523,22.938824470211916,22.944822071171533,22.950819672131146,22.956817273090763,22.96281487405038,22.968812475009997,22.97481007596961,22.980807676929228,22.986805277888845,22.99280287884846,22.998800479808075,23.004798080767692,23.01079568172731,23.016793282686926,23.022790883646543,23.028788484606157,23.034786085565774,23.04078368652539,23.046781287485008,23.05277888844462,23.058776489404238,23.064774090363855,23.070771691323472,23.076769292283085,23.082766893242702,23.08876449420232,23.094762095161936,23.10075969612155,23.106757297081167,23.112754898040784,23.1187524990004,23.124750099960018,23.13074770091963,23.136745301879248,23.142742902838865,23.148740503798482,23.154738104758096,23.160735705717713,23.16673330667733,23.172730907636947,23.17872850859656,23.184726109556177,23.190723710515794,23.19672131147541,23.202718912435024,23.20871651339464,23.21471411435426,23.220711715313875,23.226709316273492,23.232706917233106,23.238704518192723,23.24470211915234,23.250699720111957,23.25669732107157,23.262694922031187,23.268692522990804,23.27469012395042,23.280687724910035,23.28668532586965,23.29268292682927,23.298680527788886,23.3046781287485,23.310675729708116,23.316673330667733,23.32267093162735,23.328668532586967,23.33466613354658,23.340663734506197,23.346661335465814,23.35265893642543,23.358656537385045,23.36465413834466,23.37065173930428,23.376649340263896,23.38264694122351,23.388644542183126,23.394642143142743,23.40063974410236,23.406637345061974,23.41263494602159,23.418632546981208,23.424630147940825,23.43062774890044,23.436625349860055,23.442622950819672,23.44862055177929,23.454618152738906,23.46061575369852,23.466613354658136,23.472610955617753,23.47860855657737,23.484606157536984,23.4906037584966,23.496601359456218,23.502598960415835,23.508596561375448,23.514594162335065,23.520591763294682,23.5265893642543,23.532586965213916,23.53858456617353,23.544582167133147,23.550579768092764,23.55657736905238,23.562574970011994,23.56857257097161,23.574570171931228,23.580567772890845,23.58656537385046,23.592562974810075,23.598560575769692,23.60455817672931,23.610555777688923,23.61655337864854,23.622550979608157,23.628548580567774,23.63454618152739,23.640543782487004,23.64654138344662,23.652538984406238,23.658536585365855,23.66453418632547,23.670531787285086,23.676529388244703,23.68252698920432,23.688524590163933,23.69452219112355,23.700519792083167,23.706517393042784,23.712514994002397,23.718512594962014,23.72451019592163,23.73050779688125,23.736505397840865,23.74250299880048,23.748500599760096,23.754498200719713,23.76049580167933,23.766493402638943,23.77249100359856,23.778488604558177,23.784486205517794,23.790483806477408,23.796481407437025,23.80247900839664,23.80847660935626,23.814474210315872,23.82047181127549,23.826469412235106,23.832467013194723,23.83846461415434,23.844462215113953,23.85045981607357,23.856457417033187,23.862455017992804,23.868452618952418,23.874450219912035,23.88044782087165,23.88644542183127,23.892443022790882,23.8984406237505,23.904438224710116,23.910435825669733,23.916433426629347,23.922431027588964,23.92842862854858,23.934426229508198,23.940423830467815,23.946421431427428,23.952419032387045,23.958416633346662,23.96441423430628,23.970411835265892,23.97640943622551,23.982407037185126,23.988404638144743,23.994402239104357,24.000399840063974,24.00639744102359,24.012395041983208,24.01839264294282,24.024390243902438,24.030387844862055,24.036385445821672,24.04238304678129,24.048380647740903,24.05437824870052,24.060375849660137,24.066373450619754,24.072371051579367,24.078368652538984,24.0843662534986,24.090363854458218,24.09636145541783,24.10235905637745,24.108356657337065,24.114354258296682,24.120351859256296,24.126349460215913,24.13234706117553,24.138344662135147,24.144342263094764,24.150339864054377,24.156337465013994,24.16233506597361,24.168332666933228,24.17433026789284,24.18032786885246,24.186325469812076,24.192323070771693,24.198320671731306,24.204318272690923,24.21031587365054,24.216313474610157,24.22231107556977,24.228308676529387,24.234306277489004,24.24030387844862,24.24630147940824,24.25229908036785,24.25829668132747,24.264294282287086,24.270291883246703,24.276289484206316,24.282287085165933,24.28828468612555,24.294282287085167,24.30027988804478,24.306277489004398,24.312275089964015,24.31827269092363,24.324270291883245,24.330267892842862,24.33626549380248,24.342263094762096,24.348260695721713,24.354258296681326,24.360255897640943,24.36625349860056,24.372251099560177,24.37824870051979,24.384246301479408,24.390243902439025,24.39624150339864,24.402239104358255,24.408236705317872,24.41423430627749,24.420231907237106,24.42622950819672,24.432227109156337,24.438224710115954,24.44422231107557,24.450219912035188,24.4562175129948,24.462215113954418,24.468212714914035,24.474210315873652,24.480207916833265,24.486205517792882,24.4922031187525,24.498200719712116,24.50419832067173,24.510195921631347,24.516193522590964,24.52219112355058,24.528188724510194,24.53418632546981,24.540183926429428,24.546181527389045,24.552179128348662,24.558176729308276,24.564174330267893,24.57017193122751,24.576169532187127,24.58216713314674,24.588164734106357,24.594162335065974,24.60015993602559,24.606157536985204,24.61215513794482,24.61815273890444,24.624150339864055,24.63014794082367,24.636145541783286,24.642143142742903,24.64814074370252,24.654138344662137,24.66013594562175,24.666133546581367,24.672131147540984,24.6781287485006,24.684126349460215,24.69012395041983,24.69612155137945,24.702119152339066,24.70811675329868,24.714114354258296,24.720111955217913,24.72610955617753,24.732107157137147,24.73810475809676,24.744102359056377,24.750099960015994,24.75609756097561,24.762095161935225,24.76809276289484,24.77409036385446,24.780087964814076,24.78608556577369,24.792083166733306,24.798080767692923,24.80407836865254,24.810075969612154,24.81607357057177,24.822071171531388,24.828068772491005,24.83406637345062,24.840063974410235,24.846061575369852,24.85205917632947,24.858056777289086,24.8640543782487,24.870051979208316,24.876049580167933,24.88204718112755,24.888044782087164,24.89404238304678,24.900039984006398,24.906037584966015,24.912035185925628,24.918032786885245,24.924030387844862,24.93002798880448,24.936025589764096,24.94202319072371,24.948020791683327,24.954018392642944,24.96001599360256,24.966013594562174,24.97201119552179,24.978008796481408,24.984006397441025,24.99000399840064,24.996001599360255,25.001999200319872,25.00799680127949,25.013994402239103,25.01999200319872,25.025989604158337,25.031987205117954,25.03798480607757,25.043982407037184,25.0499800079968,25.055977608956418,25.061975209916035,25.06797281087565,25.073970411835266,25.079968012794883,25.0859656137545,25.091963214714113,25.09796081567373,25.103958416633347,25.109956017592964,25.115953618552577,25.121951219512194,25.12794882047181,25.13394642143143,25.139944022391045,25.14594162335066,25.151939224310276,25.157936825269893,25.16393442622951,25.169932027189123,25.17592962814874,25.181927229108357,25.187924830067974,25.193922431027588,25.199920031987205,25.20591763294682,25.21191523390644,25.217912834866052,25.22391043582567,25.229908036785286,25.235905637744903,25.24190323870452,25.247900839664133,25.25389844062375,25.259896041583367,25.265893642542984,25.271891243502598,25.277888844462215,25.28388644542183,25.28988404638145,25.295881647341062,25.30187924830068,25.307876849260296,25.313874450219913,25.319872051179527,25.325869652139144,25.33186725309876,25.337864854058378,25.343862455017995,25.349860055977608,25.355857656937225,25.361855257896842,25.36785285885646,25.373850459816072,25.37984806077569,25.385845661735306,25.391843262694923,25.397840863654537,25.403838464614154,25.40983606557377,25.415833666533388,25.421831267493,25.427828868452618,25.433826469412235,25.439824070371852,25.44582167133147,25.451819272291083,25.4578168732507,25.463814474210317,25.469812075169934,25.475809676129547,25.481807277089164,25.48780487804878,25.493802479008398,25.49980007996801,25.50579768092763,25.511795281887245,25.517792882846862,25.523790483806476,25.529788084766093,25.53578568572571,25.541783286685327,25.547780887644944,25.553778488604557,25.559776089564174,25.56577369052379,25.571771291483408,25.57776889244302,25.58376649340264,25.589764094362256,25.595761695321873,25.601759296281486,25.607756897241103,25.61375449820072,25.619752099160337,25.62574970011995,25.631747301079567,25.637744902039184,25.6437425029988,25.64974010395842,25.65573770491803,25.66173530587765,25.667732906837266,25.673730507796883,25.679728108756496,25.685725709716113,25.69172331067573,25.697720911635347,25.70371851259496,25.709716113554578,25.715713714514195,25.72171131547381,25.727708916433425,25.733706517393042,25.73970411835266,25.745701719312276,25.751699320271893,25.757696921231506,25.763694522191123,25.76969212315074,25.775689724110357,25.78168732506997,25.787684926029588,25.793682526989205,25.79968012794882,25.805677728908435,25.811675329868052,25.81767293082767,25.823670531787286,25.8296681327469,25.835665733706517,25.841663334666134,25.84766093562575,25.853658536585368,25.85965613754498,25.865653738504598,25.871651339464215,25.877648940423832,25.883646541383445,25.889644142343062,25.89564174330268,25.901639344262296,25.90763694522191,25.913634546181527,25.919632147141144,25.92562974810076,25.931627349060374,25.93762495001999,25.943622550979608,25.949620151939225,25.955617752898842,25.961615353858456,25.967612954818073,25.97361055577769,25.979608156737307,25.98560575769692,25.991603358656537,25.997600959616154,26.00359856057577,26.009596161535384,26.015593762495,26.02159136345462,26.027588964414235,26.03358656537385,26.039584166333466,26.045581767293083,26.0515793682527,26.057576969212317,26.06357457017193,26.069572171131547,26.075569772091164,26.08156737305078,26.087564974010395,26.09356257497001,26.09956017592963,26.105557776889246,26.11155537784886,26.117552978808476,26.123550579768093,26.12954818072771,26.135545781687323,26.14154338264694,26.147540983606557,26.153538584566174,26.15953618552579,26.165533786485405,26.17153138744502,26.17752898840464,26.183526589364256,26.18952419032387,26.195521791283486,26.201519392243103,26.20751699320272,26.213514594162334,26.21951219512195,26.225509796081568,26.231507397041185,26.237504998000798,26.243502598960415,26.249500199920032,26.25549780087965,26.261495401839266,26.26749300279888,26.273490603758496,26.279488204718113,26.28548580567773,26.291483406637344,26.29748100759696,26.303478608556578,26.309476209516195,26.315473810475808,26.321471411435425,26.327469012395042,26.33346661335466,26.339464214314273,26.34546181527389,26.351459416233507,26.357457017193124,26.36345461815274,26.369452219112354,26.37544982007197,26.381447421031588,26.387445021991205,26.39344262295082,26.399440223910435,26.405437824870052,26.41143542582967,26.417433026789283,26.4234306277489,26.429428228708517,26.435425829668134,26.441423430627747,26.447421031587364,26.45341863254698,26.459416233506598,26.465413834466215,26.47141143542583,26.477409036385446,26.483406637345063,26.48940423830468,26.495401839264293,26.50139944022391,26.507397041183527,26.513394642143144,26.519392243102757,26.525389844062374,26.53138744502199,26.53738504598161,26.54338264694122,26.54938024790084,26.555377848860456,26.561375449820073,26.56737305077969,26.573370651739303,26.57936825269892,26.585365853658537,26.591363454618154,26.597361055577768,26.603358656537385,26.609356257497,26.61535385845662,26.621351459416232,26.62734906037585,26.633346661335466,26.639344262295083,26.6453418632547,26.651339464214313,26.65733706517393,26.663334666133547,26.669332267093164,26.675329868052778,26.681327469012395,26.68732506997201,26.69332267093163,26.699320271891242,26.70531787285086,26.711315473810476,26.717313074770093,26.723310675729707,26.729308276689324,26.73530587764894,26.741303478608557,26.747301079568174,26.753298680527788,26.759296281487405,26.765293882447022,26.77129148340664,26.777289084366252,26.78328668532587,26.789284286285486,26.795281887245103,26.801279488204717,26.807277089164334,26.81327469012395,26.819272291083568,26.82526989204318,26.831267493002798,26.837265093962415,26.843262694922032,26.84926029588165,26.855257896841263,26.86125549780088,26.867253098760496,26.873250699720113,26.879248300679727,26.885245901639344,26.89124350259896,26.897241103558578,26.90323870451819,26.90923630547781,26.915233906437425,26.921231507397042,26.927229108356656,26.933226709316273,26.93922431027589,26.945221911235507,26.951219512195124,26.957217113154737,26.963214714114354,26.96921231507397,26.975209916033588,26.9812075169932,26.98720511795282,26.993202718912436,26.999200319872052,27.005197920831666,27.011195521791283,27.0171931227509,27.023190723710517,27.02918832467013,27.035185925629747,27.041183526589364,27.04718112754898,27.0531787285086,27.05917632946821,27.06517393042783,27.071171531387446,27.077169132347063,27.083166733306676,27.089164334266293,27.09516193522591,27.101159536185527,27.10715713714514,27.113154738104758,27.119152339064375,27.12514994002399,27.131147540983605,27.137145141943222,27.14314274290284,27.149140343862456,27.155137944822073,27.161135545781686,27.167133146741303,27.17313074770092,27.179128348660537,27.18512594962015,27.191123550579768,27.197121151539385,27.203118752499,27.209116353458615,27.215113954418232,27.22111155537785,27.227109156337466,27.23310675729708,27.239104358256697,27.245101959216314,27.25109956017593,27.257097161135547,27.26309476209516,27.269092363054778,27.275089964014395,27.281087564974012,27.287085165933625,27.293082766893242,27.29908036785286,27.305077968812476,27.31107556977209,27.317073170731707,27.323070771691324,27.32906837265094,27.335065973610554,27.34106357457017,27.347061175529788,27.353058776489405,27.359056377449022,27.365053978408636,27.371051579368253,27.37704918032787,27.383046781287486,27.3890443822471,27.395041983206717,27.401039584166334,27.40703718512595,27.413034786085564,27.41903238704518,27.4250299880048,27.431027588964415,27.43702518992403,27.443022790883646,27.449020391843263,27.45501799280288,27.461015593762497,27.46701319472211,27.473010795681727,27.479008396641344,27.48500599760096,27.491003598560575,27.49700119952019,27.50299880047981,27.508996401439425,27.51499400239904,27.520991603358656,27.526989204318273,27.53298680527789,27.538984406237503,27.54498200719712,27.550979608156737,27.556977209116354,27.56297481007597,27.568972411035585,27.5749700119952,27.58096761295482,27.586965213914436,27.59296281487405,27.598960415833666,27.604958016793283,27.6109556177529,27.616953218712514,27.62295081967213,27.628948420631747,27.634946021591364,27.640943622550978,27.646941223510595,27.652938824470212,27.65893642542983,27.664934026389446,27.67093162734906,27.676929228308676,27.682926829268293,27.68892443022791,27.694922031187524,27.70091963214714,27.706917233106758,27.712914834066375,27.718912435025988,27.724910035985605,27.730907636945222,27.73690523790484,27.742902838864453,27.74890043982407,27.754898040783686,27.760895641743303,27.76689324270292,27.772890843662534,27.77888844462215,27.784886045581768,27.790883646541385,27.796881247501,27.802878848460615,27.808876449420232,27.81487405037985,27.820871651339463,27.82686925229908,27.832866853258697,27.838864454218314,27.844862055177927,27.850859656137544,27.85685725709716,27.862854858056778,27.868852459016395,27.87485005997601,27.880847660935625,27.886845261895242,27.89284286285486,27.898840463814473,27.90483806477409,27.910835665733707,27.916833266693324,27.922830867652937,27.928828468612554,27.93482606957217,27.94082367053179,27.9468212714914,27.95281887245102,27.958816473410636,27.964814074370253,27.97081167532987,27.976809276289483,27.9828068772491,27.988804478208717,27.994802079168334,28.000799680127948,28.006797281087564,28.01279488204718,28.0187924830068,28.024790083966412,28.03078768492603,28.036785285885646,28.042782886845263,28.048780487804876,28.054778088764493,28.06077568972411,28.066773290683727,28.072770891643344,28.078768492602958,28.084766093562575,28.09076369452219,28.09676129548181,28.102758896441422,28.10875649740104,28.114754098360656,28.120751699320273,28.126749300279887,28.132746901239504,28.13874450219912,28.144742103158737,28.15073970411835,28.156737305077968,28.162734906037585,28.168732506997202,28.17473010795682,28.180727708916432,28.18672530987605,28.192722910835666,28.198720511795283,28.204718112754897,28.210715713714514,28.21671331467413,28.222710915633748,28.22870851659336,28.234706117552978,28.240703718512595,28.246701319472212,28.252698920431826,28.258696521391443,28.26469412235106,28.270691723310676,28.276689324270293,28.282686925229907,28.288684526189524,28.29468212714914,28.300679728108758,28.30667732906837,28.31267493002799,28.318672530987605,28.324670131947222,28.330667732906836,28.336665333866453,28.34266293482607,28.348660535785687,28.3546581367453,28.360655737704917,28.366653338664534,28.37265093962415,28.378648540583768,28.38464614154338,28.390643742503,28.396641343462615,28.402638944422232,28.408636545381846,28.414634146341463,28.42063174730108,28.426629348260697,28.43262694922031,28.438624550179927,28.444622151139544,28.45061975209916,28.45661735305878,28.46261495401839,28.46861255497801,28.474610155937626,28.480607756897243,28.486605357856856,28.492602958816473,28.49860055977609,28.504598160735707,28.51059576169532,28.516593362654937,28.522590963614554,28.52858856457417,28.534586165533785,28.540583766493402,28.54658136745302,28.552578968412636,28.558576569372253,28.564574170331866,28.570571771291483,28.5765693722511,28.582566973210717,28.58856457417033,28.594562175129948,28.600559776089565,28.60655737704918,28.612554978008795,28.618552578968412,28.62455017992803,28.630547780887646,28.63654538184726,28.642542982806876,28.648540583766493,28.65453818472611,28.660535785685727,28.66653338664534,28.672530987604958,28.678528588564575,28.684526189524192,28.690523790483805,28.696521391443422,28.70251899240304,28.708516593362656,28.71451419432227,28.720511795281887,28.726509396241504,28.73250699720112,28.738504598160734,28.74450219912035,28.750499800079968,28.756497401039585,28.762495001999202,28.768492602958815,28.774490203918432,28.78048780487805,28.786485405837666,28.79248300679728,28.798480607756897,28.804478208716514,28.81047580967613,28.816473410635744,28.82247101159536,28.82846861255498,28.834466213514595,28.84046381447421,28.846461415433826,28.852459016393443,28.85845661735306,28.864454218312677,28.87045181927229,28.876449420231907,28.882447021191524,28.88844462215114,28.894442223110754,28.90043982407037,28.90643742502999,28.912435025989605,28.91843262694922,28.924430227908836,28.930427828868453,28.93642542982807,28.942423030787683,28.9484206317473,28.954418232706917,28.960415833666534,28.96641343462615,28.972411035585765,28.97840863654538,28.984406237505,28.990403838464616,28.99640143942423,29.002399040383846,29.008396641343463,29.01439424230308,29.020391843262693,29.02638944422231,29.032387045181927,29.038384646141544,29.044382247101158,29.050379848060775,29.056377449020392,29.06237504998001,29.068372650939626,29.07437025189924,29.080367852858856,29.086365453818473,29.09236305477809,29.098360655737704,29.10435825669732,29.110355857656938,29.116353458616555,29.122351059576168,29.128348660535785,29.134346261495402,29.14034386245502,29.146341463414632,29.15233906437425,29.158336665333866,29.164334266293483,29.1703318672531,29.176329468212714,29.18232706917233,29.188324670131948,29.194322271091565,29.20031987205118,29.206317473010795,29.212315073970412,29.21831267493003,29.224310275889643,29.23030787684926,29.236305477808877,29.242303078768494,29.248300679728107,29.254298280687724,29.26029588164734,29.266293482606958,29.272291083566575,29.27828868452619,29.284286285485805,29.290283886445422,29.29628148740504,29.302279088364653,29.30827668932427,29.314274290283887,29.320271891243504,29.326269492203117,29.332267093162734,29.33826469412235,29.34426229508197,29.35025989604158,29.3562574970012,29.362255097960816,29.368252698920433,29.37425029988005,29.380247900839663,29.38624550179928,29.392243102758897,29.398240703718514,29.404238304678127,29.410235905637744,29.41623350659736,29.42223110755698,29.428228708516592,29.43422630947621,29.440223910435826,29.446221511395443,29.452219112355056,29.458216713314673,29.46421431427429,29.470211915233907,29.476209516193524,29.482207117153138,29.488204718112755,29.49420231907237,29.50019992003199,29.506197520991602,29.51219512195122,29.518192722910836,29.524190323870453,29.530187924830066,29.536185525789683,29.5421831267493,29.548180727708917,29.55417832866853,29.560175929628148,29.566173530587765,29.572171131547382,29.578168732507,29.584166333466612,29.59016393442623,29.596161535385846,29.602159136345463,29.608156737305077,29.614154338264694,29.62015193922431,29.626149540183928,29.63214714114354,29.638144742103158,29.644142343062775,29.650139944022392,29.656137544982005,29.662135145941622,29.66813274690124,29.674130347860856,29.680127948820473,29.686125549780087,29.692123150739704,29.69812075169932,29.704118352658938,29.71011595361855,29.71611355457817,29.722111155537785,29.728108756497402,29.734106357457016,29.740103958416633,29.74610155937625,29.752099160335867,29.75809676129548,29.764094362255097,29.770091963214714,29.77608956417433,29.782087165133948,29.78808476609356,29.79408236705318,29.800079968012795,29.806077568972412,29.812075169932026,29.818072770891643,29.82407037185126,29.830067972810877,29.83606557377049,29.842063174730107,29.848060775689724,29.85405837664934,29.860055977608955,29.86605357856857,29.87205117952819,29.878048780487806,29.884046381447423,29.890043982407036,29.896041583366653,29.90203918432627,29.908036785285887,29.9140343862455,29.920031987205117,29.926029588164734,29.93202718912435,29.938024790083965,29.944022391043582,29.9500199920032,29.956017592962816,29.96201519392243,29.968012794882046,29.974010395841663,29.98000799680128,29.986005597760897,29.99200319872051,29.998000799680128,30.003998400639745,30.00999600159936,30.015993602558975,30.021991203518592,30.02798880447821,30.033986405437826,30.03998400639744,30.045981607357056,30.051979208316673,30.05797680927629,30.063974410235904,30.06997201119552,30.075969612155138,30.081967213114755,30.087964814074372,30.093962415033985,30.099960015993602,30.10595761695322,30.111955217912836,30.11795281887245,30.123950419832067,30.129948020791684,30.1359456217513,30.141943222710914,30.14794082367053,30.153938424630148,30.159936025589765,30.16593362654938,30.171931227508995,30.177928828468612,30.18392642942823,30.189924030387846,30.19592163134746,30.201919232307077,30.207916833266694,30.21391443422631,30.219912035185924,30.22590963614554,30.23190723710516,30.237904838064775,30.24390243902439,30.249900039984006,30.255897640943623,30.26189524190324,30.267892842862853,30.27389044382247,30.279888044782087,30.285885645741704,30.29188324670132,30.297880847660934,30.30387844862055,30.30987604958017,30.315873650539785,30.3218712514994,30.327868852459016,30.333866453418633,30.33986405437825,30.345861655337863,30.35185925629748,30.357856857257097,30.363854458216714,30.36985205917633,30.375849660135945,30.38184726109556,30.38784486205518,30.393842463014796,30.39984006397441,30.405837664934026,30.411835265893643,30.41783286685326,30.423830467812873,30.42982806877249,30.435825669732107,30.441823270691724,30.447820871651338,30.453818472610955,30.459816073570572,30.46581367453019,30.471811275489806,30.47780887644942,30.483806477409036,30.489804078368653,30.49580167932827,30.501799280287884,30.5077968812475,30.513794482207118,30.519792083166735,30.525789684126348,30.531787285085965,30.537784886045582,30.5437824870052,30.549780087964812,30.55577768892443,30.561775289884046,30.567772890843663,30.57377049180328,30.579768092762894,30.58576569372251,30.591763294682128,30.597760895641745,30.60375849660136,30.609756097560975,30.615753698520592,30.62175129948021,30.627748900439823,30.63374650139944,30.639744102359057,30.645741703318674,30.651739304278287,30.657736905237904,30.66373450619752,30.669732107157138,30.675729708116755,30.68172730907637,30.687724910035985,30.693722510995602,30.69972011195522,30.705717712914833,30.71171531387445,30.717712914834067,30.723710515793684,30.729708116753297,30.735705717712914,30.74170331867253,30.74770091963215,30.75369852059176,30.75969612155138,30.765693722510996,30.771691323470613,30.77768892443023,30.783686525389843,30.78968412634946,30.795681727309077,30.801679328268694,30.807676929228307,30.813674530187924,30.81967213114754,30.82566973210716,30.831667333066772,30.83766493402639,30.843662534986006,30.849660135945623,30.855657736905236,30.861655337864853,30.86765293882447,30.873650539784087,30.879648140743704,30.885645741703318,30.891643342662935,30.89764094362255,30.90363854458217,30.909636145541782,30.9156337465014,30.921631347461016,30.927628948420633,30.933626549380246,30.939624150339863,30.94562175129948,30.951619352259097,30.95761695321871,30.963614554178328,30.969612155137945,30.975609756097562,30.98160735705718,30.987604958016792,30.99360255897641,30.999600159936026,31.005597760895643,31.011595361855257,31.017592962814874,31.02359056377449,31.029588164734108,31.03558576569372,31.041583366653338,31.047580967612955,31.053578568572572,31.059576169532185,31.065573770491802,31.07157137145142,31.077568972411036,31.083566573370653,31.089564174330267,31.095561775289884,31.1015593762495,31.107556977209118,31.11355457816873,31.11955217912835,31.125549780087965,31.131547381047582,31.137544982007196,31.143542582966813,31.14954018392643,31.155537784886047,31.16153538584566,31.167532986805277,31.173530587764894,31.17952818872451,31.185525789684128,31.19152339064374,31.19752099160336,31.203518592562975,31.209516193522592,31.215513794482206,31.221511395441823,31.22750899640144,31.233506597361057,31.23950419832067,31.245501799280287,31.251499400239904,31.25749700119952,31.263494602159135,31.26949220311875,31.27548980407837,31.281487405037986,31.287485005997603,31.293482606957216,31.299480207916833,31.30547780887645,31.311475409836067,31.31747301079568,31.323470611755297,31.329468212714914,31.33546581367453,31.341463414634145,31.347461015593762,31.35345861655338,31.359456217512996,31.36545381847261,31.371451419432226,31.377449020391843,31.38344662135146,31.389444222311077,31.39544182327069,31.401439424230308,31.407437025189925,31.41343462614954,31.419432227109155,31.425429828068772,31.43142742902839,31.437425029988006,31.44342263094762,31.449420231907236,31.455417832866853,31.46141543382647,31.467413034786084,31.4734106357457,31.479408236705318,31.485405837664935,31.491403438624552,31.497401039584165,31.503398640543782,31.5093962415034,31.515393842463016,31.52139144342263,31.527389044382247,31.533386645341864,31.53938424630148,31.545381847261094,31.55137944822071,31.557377049180328,31.563374650139945,31.56937225109956,31.575369852059175,31.581367453018792,31.58736505397841,31.593362654938026,31.59936025589764,31.605357856857257,31.611355457816874,31.61735305877649,31.623350659736104,31.62934826069572,31.63534586165534,31.641343462614955,31.64734106357457,31.653338664534186,31.659336265493803,31.66533386645342,31.671331467413033,31.67732906837265,31.683326669332267,31.689324270291884,31.6953218712515,31.701319472211114,31.70731707317073,31.71331467413035,31.719312275089965,31.72530987604958,31.731307477009196,31.737305077968813,31.74330267892843,31.749300279888043,31.75529788084766,31.761295481807277,31.767293082766894,31.773290683726508,31.779288284686125,31.78528588564574,31.79128348660536,31.797281087564976,31.80327868852459,31.809276289484206,31.815273890443823,31.82127149140344,31.827269092363053,31.83326669332267,31.839264294282287,31.845261895241904,31.851259496201518,31.857257097161135,31.863254698120752,31.86925229908037,31.875249900039982,31.8812475009996,31.887245101959216,31.893242702918833,31.89924030387845,31.905237904838064,31.91123550579768,31.917233106757298,31.923230707716915,31.929228308676528,31.935225909636145,31.941223510595762,31.94722111155538,31.953218712514992,31.95921631347461,31.965213914434226,31.971211515393843,31.977209116353457,31.983206717313074,31.98920431827269,31.995201919232308,32.001199520191925,32.00719712115154,32.01319472211116,32.01919232307077,32.025189924030386,32.03118752499,32.03718512594962,32.04318272690924,32.049180327868854,32.05517792882847,32.06117552978809,32.0671731307477,32.073170731707314,32.07916833266693,32.08516593362655,32.091163534586165,32.09716113554578,32.1031587365054,32.109156337465016,32.11515393842463,32.12115153938424,32.12714914034386,32.13314674130348,32.139144342263094,32.14514194322271,32.15113954418233,32.157137145141945,32.16313474610156,32.16913234706117,32.17512994802079,32.181127548980406,32.18712514994002,32.19312275089964,32.19912035185926,32.205117952818874,32.21111555377849,32.21711315473811,32.22311075569772,32.229108356657335,32.23510595761695,32.24110355857657,32.247101159536186,32.2530987604958,32.25909636145542,32.26509396241504,32.27109156337465,32.277089164334264,32.28308676529388,32.2890843662535,32.295081967213115,32.30107956817273,32.30707716913235,32.313074770091966,32.31907237105158,32.32506997201119,32.33106757297081,32.33706517393043,32.34306277489004,32.34906037584966,32.35505797680928,32.361055577768894,32.36705317872851,32.37305077968812,32.37904838064774,32.385045981607355,32.39104358256697,32.39704118352659,32.403038784486206,32.40903638544582,32.41503398640544,32.42103158736506,32.42702918832467,32.433026789284284,32.4390243902439,32.44502199120352,32.451019592163135,32.45701719312275,32.46301479408237,32.469012395041986,32.475009996001596,32.48100759696121,32.48700519792083,32.49300279888045,32.499000399840064,32.50499800079968,32.5109956017593,32.516993202718915,32.52299080367853,32.52898840463814,32.53498600559776,32.540983606557376,32.54698120751699,32.55297880847661,32.55897640943623,32.564974010395844,32.57097161135546,32.57696921231507,32.58296681327469,32.588964414234304,32.59496201519392,32.60095961615354,32.606957217113155,32.61295481807277,32.61895241903239,32.624950019992006,32.630947620951616,32.63694522191123,32.64294282287085,32.64894042383047,32.654938024790084,32.6609356257497,32.66693322670932,32.672930827668935,32.678928428628545,32.68492602958816,32.69092363054778,32.696921231507396,32.70291883246701,32.70891643342663,32.71491403438625,32.720911635345864,32.72690923630548,32.73290683726509,32.73890443822471,32.744902039184325,32.75089964014394,32.75689724110356,32.762894842063176,32.76889244302279,32.77489004398241,32.78088764494202,32.78688524590164,32.792882846861254,32.79888044782087,32.80487804878049,32.810875649740105,32.81687325069972,32.82287085165934,32.828868452618956,32.834866053578565,32.84086365453818,32.8468612554978,32.852858856457416,32.85885645741703,32.86485405837665,32.87085165933627,32.876849260295884,32.882846861255494,32.88884446221511,32.89484206317473,32.900839664134345,32.90683726509396,32.91283486605358,32.918832467013196,32.92483006797281,32.93082766893243,32.93682526989204,32.94282287085166,32.948820471811274,32.95481807277089,32.96081567373051,32.966813274690125,32.97281087564974,32.97880847660936,32.98480607756897,32.990803678528586,32.9968012794882,33.00279888044782,33.00879648140744,33.014794082367054,33.02079168332667,33.02678928428629,33.032786885245905,33.038784486205515,33.04478208716513,33.05077968812475,33.056777289084366,33.06277489004398,33.0687724910036,33.07477009196322,33.080767692922834,33.08676529388244,33.09276289484206,33.09876049580168,33.104758096761294,33.11075569772091,33.11675329868053,33.122750899640145,33.12874850059976,33.13474610155938,33.14074370251899,33.146741303478606,33.15273890443822,33.15873650539784,33.16473410635746,33.170731707317074,33.17672930827669,33.18272690923631,33.188724510195925,33.194722111155535,33.20071971211515,33.20671731307477,33.212714914034386,33.218712514994,33.22471011595362,33.23070771691324,33.236705317872854,33.242702918832464,33.24870051979208,33.2546981207517,33.260695721711315,33.26669332267093,33.27269092363055,33.278688524590166,33.28468612554978,33.2906837265094,33.29668132746901,33.30267892842863,33.308676529388244,33.31467413034786,33.32067173130748,33.326669332267095,33.33266693322671,33.33866453418633,33.34466213514594,33.350659736105555,33.35665733706517,33.36265493802479,33.368652538984406,33.37465013994402,33.38064774090364,33.38664534186326,33.392642942822874,33.398640543782484,33.4046381447421,33.41063574570172,33.416633346661335,33.42263094762095,33.42862854858057,33.434626149540186,33.4406237504998,33.44662135145941,33.45261895241903,33.45861655337865,33.464614154338264,33.47061175529788,33.4766093562575,33.482606957217115,33.48860455817673,33.49460215913635,33.50059976009596,33.506597361055576,33.51259496201519,33.51859256297481,33.52459016393443,33.530587764894044,33.53658536585366,33.54258296681328,33.54858056777289,33.554578168732505,33.56057576969212,33.56657337065174,33.572570971611356,33.57856857257097,33.58456617353059,33.59056377449021,33.596561375449824,33.60255897640943,33.60855657736905,33.61455417832867,33.620551779288284,33.6265493802479,33.63254698120752,33.638544582167135,33.64454218312675,33.65053978408636,33.65653738504598,33.662534986005596,33.66853258696521,33.67453018792483,33.68052778888445,33.686525389844064,33.69252299080368,33.6985205917633,33.70451819272291,33.710515793682525,33.71651339464214,33.72251099560176,33.728508596561376,33.73450619752099,33.74050379848061,33.74650139944023,33.75249900039984,33.758496601359454,33.76449420231907,33.77049180327869,33.776489404238305,33.78248700519792,33.78848460615754,33.794482207117156,33.80047980807677,33.80647740903638,33.812475009996,33.81847261095562,33.824470211915234,33.83046781287485,33.83646541383447,33.842463014794085,33.8484606157537,33.85445821671331,33.86045581767293,33.866453418632545,33.87245101959216,33.87844862055178,33.884446221511396,33.89044382247101,33.89644142343063,33.90243902439025,33.90843662534986,33.914434226309474,33.92043182726909,33.92642942822871,33.932427029188325,33.93842463014794,33.94442223110756,33.950419832067176,33.956417433026786,33.9624150339864,33.96841263494602,33.97441023590564,33.980407836865254,33.98640543782487,33.99240303878449,33.998400639744105,34.00439824070372,34.01039584166333,34.01639344262295,34.022391043582566,34.02838864454218,34.0343862455018,34.04038384646142,34.046381447421034,34.05237904838065,34.05837664934026,34.06437425029988,34.070371851259495,34.07636945221911,34.08236705317873,34.088364654138346,34.09436225509796,34.10035985605758,34.1063574570172,34.11235505797681,34.11835265893642,34.12435025989604,34.13034786085566,34.136345461815274,34.14234306277489,34.14834066373451,34.154338264694125,34.160335865653735,34.16633346661335,34.17233106757297,34.178328668532586,34.1843262694922,34.19032387045182,34.19632147141144,34.202319072371054,34.20831667333067,34.21431427429028,34.2203118752499,34.226309476209515,34.23230707716913,34.23830467812875,34.244302279088366,34.25029988004798,34.2562974810076,34.26229508196721,34.26829268292683,34.274290283886444,34.28028788484606,34.28628548580568,34.292283086765295,34.29828068772491,34.30427828868453,34.310275889644146,34.316273490603756,34.32227109156337,34.32826869252299,34.33426629348261,34.340263894442224,34.34626149540184,34.35225909636146,34.358256697321075,34.364254298280684,34.3702518992403,34.37624950019992,34.382247101159535,34.38824470211915,34.39424230307877,34.400239904038386,34.406237504998,34.41223510595762,34.41823270691723,34.42423030787685,34.430227908836464,34.43622550979608,34.4422231107557,34.448220711715315,34.45421831267493,34.46021591363455,34.46621351459416,34.472211115553776,34.47820871651339,34.48420631747301,34.49020391843263,34.496201519392244,34.50219912035186,34.50819672131148,34.514194322271095,34.520191923230705,34.52618952419032,34.53218712514994,34.538184726109556,34.54418232706917,34.55017992802879,34.55617752898841,34.562175129948024,34.568172730907634,34.57417033186725,34.58016793282687,34.586165533786485,34.5921631347461,34.59816073570572,34.604158336665336,34.61015593762495,34.61615353858457,34.62215113954418,34.628148740503796,34.63414634146341,34.64014394242303,34.64614154338265,34.652139144342264,34.65813674530188,34.6641343462615,34.67013194722111,34.676129548180725,34.68212714914034,34.68812475009996,34.694122351059576,34.70011995201919,34.70611755297881,34.71211515393843,34.718112754898044,34.724110355857654,34.73010795681727,34.73610555777689,34.742103158736505,34.74810075969612,34.75409836065574,34.760095961615356,34.76609356257497,34.77209116353458,34.7780887644942,34.78408636545382,34.790083966413434,34.79608156737305,34.80207916833267,34.808076769292285,34.8140743702519,34.82007197121152,34.82606957217113,34.832067173130746,34.83806477409036,34.84406237504998,34.8500599760096,34.856057576969214,34.86205517792883,34.86805277888845,34.87405037984806,34.880047980807674,34.88604558176729,34.89204318272691,34.898040783686525,34.90403838464614,34.91003598560576,34.916033586565376,34.92203118752499,34.9280287884846,34.93402638944422,34.94002399040384,34.946021591363454,34.95201919232307,34.95801679328269,34.964014394242305,34.97001199520192,34.97600959616153,34.98200719712115,34.988004798080766,34.99400239904038,35.0,35.00599760095962,35.011995201919234,35.01799280287885,35.02399040383847,35.02998800479808,35.035985605757695,35.04198320671731,35.04798080767693,35.053978408636546,35.05997600959616,35.06597361055578,35.0719712115154,35.07796881247501,35.083966413434624,35.08996401439424,35.09596161535386,35.101959216313475,35.10795681727309,35.11395441823271,35.119952019192326,35.12594962015194,35.13194722111155,35.13794482207117,35.143942423030786,35.1499400239904,35.15593762495002,35.16193522590964,35.167932826869254,35.17393042782887,35.17992802878848,35.1859256297481,35.191923230707715,35.19792083166733,35.20391843262695,35.209916033586566,35.21591363454618,35.2219112355058,35.22790883646542,35.23390643742503,35.239904038384644,35.24590163934426,35.25189924030388,35.257896841263495,35.26389444222311,35.26989204318273,35.275889644142346,35.281887245101956,35.28788484606157,35.29388244702119,35.29988004798081,35.305877648940424,35.31187524990004,35.31787285085966,35.323870451819275,35.32986805277889,35.3358656537385,35.34186325469812,35.347860855657736,35.35385845661735,35.35985605757697,35.36585365853659,35.371851259496204,35.37784886045582,35.38384646141543,35.38984406237505,35.395841663334664,35.40183926429428,35.4078368652539,35.413834466213515,35.41983206717313,35.42582966813275,35.431827269092366,35.437824870051976,35.44382247101159,35.44982007197121,35.45581767293083,35.461815273890444,35.46781287485006,35.47381047580968,35.479808076769295,35.485805677728905,35.49180327868852,35.49780087964814,35.503798480607756,35.50979608156737,35.51579368252699,35.52179128348661,35.527788884446224,35.53378648540584,35.53978408636545,35.54578168732507,35.551779288284685,35.5577768892443,35.56377449020392,35.569772091163536,35.57576969212315,35.58176729308277,35.58776489404238,35.593762495002,35.599760095961614,35.60575769692123,35.61175529788085,35.617752898840465,35.62375049980008,35.6297481007597,35.635745701719316,35.641743302678925,35.64774090363854,35.65373850459816,35.659736105557776,35.66573370651739,35.67173130747701,35.67772890843663,35.683726509396244,35.689724110355854,35.69572171131547,35.70171931227509,35.707716913234705,35.71371451419432,35.71971211515394,35.725709716113556,35.73170731707317,35.73770491803279,35.7437025189924,35.74970011995202,35.755697720911634,35.76169532187125,35.76769292283087,35.773690523790485,35.7796881247501,35.78568572570972,35.79168332666933,35.797680927628946,35.80367852858856,35.80967612954818,35.8156737305078,35.821671331467414,35.82766893242703,35.83366653338665,35.839664134346265,35.845661735305875,35.85165933626549,35.85765693722511,35.863654538184726,35.86965213914434,35.87564974010396,35.88164734106358,35.88764494202319,35.8936425429828,35.89964014394242,35.90563774490204,35.911635345861654,35.91763294682127,35.92363054778089,35.929628148740505,35.93562574970012,35.94162335065974,35.94762095161935,35.953618552578966,35.95961615353858,35.9656137544982,35.97161135545782,35.977608956417434,35.98360655737705,35.98960415833667,35.99560175929628,36.001599360255895,36.00759696121551,36.01359456217513,36.019592163134746,36.02558976409436,36.03158736505398,36.0375849660136,36.043582566973214,36.049580167932824,36.05557776889244,36.06157536985206,36.067572970811675,36.07357057177129,36.07956817273091,36.085565773690526,36.09156337465014,36.09756097560975,36.10355857656937,36.10955617752899,36.115553778488604,36.12155137944822,36.12754898040784,36.133546581367455,36.13954418232707,36.14554178328669,36.1515393842463,36.157536985205915,36.16353458616553,36.16953218712515,36.175529788084766,36.18152738904438,36.187524990004,36.19352259096362,36.19952019192323,36.205517792882844,36.21151539384246,36.21751299480208,36.223510595761695,36.22950819672131,36.23550579768093,36.241503398640546,36.24750099960016,36.25349860055977,36.25949620151939,36.26549380247901,36.271491403438624,36.27748900439824,36.28348660535786,36.289484206317475,36.29548180727709,36.3014794082367,36.30747700919632,36.313474610155936,36.31947221111555,36.32546981207517,36.33146741303479,36.337465013994404,36.34346261495402,36.34946021591364,36.35545781687325,36.361455417832865,36.36745301879248,36.3734506197521,36.379448220711716,36.38544582167133,36.39144342263095,36.39744102359057,36.403438624550176,36.40943622550979,36.41543382646941,36.42143142742903,36.427429028388644,36.43342662934826,36.43942423030788,36.445421831267495,36.45141943222711,36.45741703318672,36.46341463414634,36.469412235105956,36.47540983606557,36.48140743702519,36.48740503798481,36.493402638944424,36.49940023990404,36.50539784086365,36.51139544182327,36.517393042782885,36.5233906437425,36.52938824470212,36.535385845661736,36.54138344662135,36.54738104758097,36.55337864854059,36.5593762495002,36.565373850459814,36.57137145141943,36.57736905237905,36.583366653338665,36.58936425429828,36.5953618552579,36.601359456217516,36.607357057177126,36.61335465813674,36.61935225909636,36.62534986005598,36.631347461015594,36.63734506197521,36.64334266293483,36.649340263894445,36.65533786485406,36.66133546581367,36.66733306677329,36.673330667732905,36.67932826869252,36.68532586965214,36.691323470611756,36.69732107157137,36.70331867253099,36.7093162734906,36.71531387445022,36.721311475409834,36.72730907636945,36.73330667732907,36.739304278288685,36.7453018792483,36.75129948020792,36.757297081167536,36.763294682127146,36.76929228308676,36.77528988404638,36.781287485006,36.787285085965614,36.79328268692523,36.79928028788485,36.805277888844465,36.811275489804075,36.81727309076369,36.82327069172331,36.829268292682926,36.83526589364254,36.84126349460216,36.84726109556178,36.853258696521394,36.85925629748101,36.86525389844062,36.87125149940024,36.877249100359855,36.88324670131947,36.88924430227909,36.895241903238706,36.90123950419832,36.90723710515794,36.91323470611756,36.919232307077166,36.92522990803678,36.9312275089964,36.93722510995602,36.943222710915634,36.94922031187525,36.95521791283487,36.961215513794485,36.967213114754095,36.97321071571371,36.97920831667333,36.985205917632946,36.99120351859256,36.99720111955218,37.0031987205118,37.009196321471414,37.01519392243103,37.02119152339064,37.02718912435026,37.033186725309875,37.03918432626949,37.04518192722911,37.051179528188726,37.05717712914834,37.06317473010796,37.06917233106757,37.07516993202719,37.081167532986804,37.08716513394642,37.09316273490604,37.099160335865655,37.10515793682527,37.11115553778489,37.117153138744506,37.123150739704116,37.12914834066373,37.13514594162335,37.14114354258297,37.147141143542584,37.1531387445022,37.15913634546182,37.165133946421435,37.171131547381044,37.17712914834066,37.18312674930028,37.189124350259895,37.19512195121951,37.20111955217913,37.207117153138746,37.21311475409836,37.21911235505798,37.22510995601759,37.23110755697721,37.237105157936824,37.24310275889644,37.24910035985606,37.255097960815675,37.26109556177529,37.26709316273491,37.27309076369452,37.279088364654136,37.28508596561375,37.29108356657337,37.29708116753299,37.303078768492604,37.30907636945222,37.31507397041184,37.321071571371455,37.327069172331065,37.33306677329068,37.3390643742503,37.345061975209916,37.35105957616953,37.35705717712915,37.36305477808877,37.369052379048384,37.375049980007994,37.38104758096761,37.38704518192723,37.393042782886845,37.39904038384646,37.40503798480608,37.411035585765696,37.41703318672531,37.42303078768493,37.42902838864454,37.435025989604156,37.44102359056377,37.44702119152339,37.45301879248301,37.459016393442624,37.46501399440224,37.47101159536186,37.47700919632147,37.483006797281085,37.4890043982407,37.49500199920032,37.500999600159936,37.50699720111955,37.51299480207917,37.51899240303879,37.524990003998404,37.530987604958014,37.53698520591763,37.54298280687725,37.548980407836865,37.55497800879648,37.5609756097561,37.566973210715716,37.57297081167533,37.57896841263494,37.58496601359456,37.59096361455418,37.596961215513794,37.60295881647341,37.60895641743303,37.614954018392645,37.62095161935226,37.62694922031188,37.63294682127149,37.638944422231106,37.64494202319072,37.65093962415034,37.65693722510996,37.66293482606957,37.66893242702919,37.67493002798881,37.68092762894842,37.686925229908034,37.69292283086765,37.69892043182727,37.704918032786885,37.7109156337465,37.71691323470612,37.722910835665736,37.72890843662535,37.73490603758496,37.74090363854458,37.7469012395042,37.752898840463814,37.75889644142343,37.76489404238305,37.770891643342665,37.77688924430228,37.78288684526189,37.78888444622151,37.794882047181126,37.80087964814074,37.80687724910036,37.81287485005998,37.818872451019594,37.82487005197921,37.83086765293883,37.83686525389844,37.842862854858055,37.84886045581767,37.85485805677729,37.860855657736906,37.86685325869652,37.87285085965614,37.87884846061576,37.88484606157537,37.890843662534984,37.8968412634946,37.90283886445422,37.908836465413835,37.91483406637345,37.92083166733307,37.926829268292686,37.9328268692523,37.93882447021191,37.94482207117153,37.950819672131146,37.95681727309076,37.96281487405038,37.96881247501,37.974810075969614,37.98080767692923,37.98680527788884,37.99280287884846,37.998800479808075,38.00479808076769,38.01079568172731,38.016793282686926,38.02279088364654,38.02878848460616,38.03478608556578,38.04078368652539,38.046781287485004,38.05277888844462,38.05877648940424,38.064774090363855,38.07077169132347,38.07676929228309,38.082766893242706,38.088764494202316,38.09476209516193,38.10075969612155,38.10675729708117,38.112754898040784,38.1187524990004,38.12475009996002,38.130747700919635,38.13674530187925,38.14274290283886,38.14874050379848,38.154738104758096,38.16073570571771,38.16673330667733,38.17273090763695,38.17872850859656,38.18472610955618,38.19072371051579,38.19672131147541,38.202718912435024,38.20871651339464,38.21471411435426,38.220711715313875,38.22670931627349,38.23270691723311,38.238704518192726,38.244702119152336,38.25069972011195,38.25669732107157,38.26269492203119,38.268692522990804,38.27469012395042,38.28068772491004,38.286685325869655,38.292682926829265,38.29868052778888,38.3046781287485,38.310675729708116,38.31667333066773,38.32267093162735,38.32866853258697,38.334666133546584,38.3406637345062,38.34666133546581,38.35265893642543,38.358656537385045,38.36465413834466,38.37065173930428,38.376649340263896,38.38264694122351,38.38864454218313,38.39464214314274,38.40063974410236,38.406637345061974,38.41263494602159,38.41863254698121,38.424630147940825,38.43062774890044,38.43662534986006,38.442622950819676,38.448620551779285,38.4546181527389,38.46061575369852,38.466613354658136,38.47261095561775,38.47860855657737,38.48460615753699,38.490603758496604,38.496601359456214,38.50259896041583,38.50859656137545,38.514594162335065,38.52059176329468,38.5265893642543,38.532586965213916,38.53858456617353,38.54458216713315,38.55057976809276,38.55657736905238,38.562574970011994,38.56857257097161,38.57457017193123,38.580567772890845,38.58656537385046,38.59256297481008,38.59856057576969,38.604558176729306,38.61055577768892,38.61655337864854,38.62255097960816,38.628548580567774,38.63454618152739,38.64054378248701,38.646541383446625,38.652538984406235,38.65853658536585,38.66453418632547,38.670531787285086,38.6765293882447,38.68252698920432,38.68852459016394,38.69452219112355,38.70051979208316,38.70651739304278,38.7125149940024,38.718512594962014,38.72451019592163,38.73050779688125,38.736505397840865,38.74250299880048,38.7485005997601,38.75449820071971,38.760495801679326,38.76649340263894,38.77249100359856,38.77848860455818,38.784486205517794,38.79048380647741,38.79648140743703,38.80247900839664,38.808476609356255,38.81447421031587,38.82047181127549,38.826469412235106,38.83246701319472,38.83846461415434,38.84446221511396,38.850459816073574,38.856457417033184,38.8624550179928,38.86845261895242,38.874450219912035,38.88044782087165,38.88644542183127,38.892443022790886,38.8984406237505,38.90443822471011,38.91043582566973,38.91643342662935,38.922431027588964,38.92842862854858,38.9344262295082,38.940423830467815,38.94642143142743,38.95241903238705,38.95841663334666,38.964414234306275,38.97041183526589,38.97640943622551,38.982407037185126,38.98840463814474,38.99440223910436,39.00039984006398,39.00639744102359,39.012395041983204,39.01839264294282,39.02439024390244,39.030387844862055,39.03638544582167,39.04238304678129,39.048380647740906,39.05437824870052,39.06037584966013,39.06637345061975,39.07237105157937,39.078368652538984,39.0843662534986,39.09036385445822,39.096361455417835,39.10235905637745,39.10835665733706,39.11435425829668,39.120351859256296,39.12634946021591,39.13234706117553,39.13834466213515,39.144342263094764,39.15033986405438,39.156337465014,39.16233506597361,39.168332666933225,39.17433026789284,39.18032786885246,39.186325469812076,39.19232307077169,39.19832067173131,39.20431827269093,39.210315873650536,39.21631347461015,39.22231107556977,39.22830867652939,39.234306277489004,39.24030387844862,39.24630147940824,39.252299080367855,39.25829668132747,39.26429428228708,39.2702918832467,39.276289484206316,39.28228708516593,39.28828468612555,39.29428228708517,39.300279888044784,39.3062774890044,39.31227508996401,39.31827269092363,39.324270291883245,39.33026789284286,39.33626549380248,39.342263094762096,39.34826069572171,39.35425829668133,39.36025589764095,39.36625349860056,39.372251099560174,39.37824870051979,39.38424630147941,39.390243902439025,39.39624150339864,39.40223910435826,39.408236705317876,39.414234306277486,39.4202319072371,39.42622950819672,39.43222710915634,39.43822471011595,39.44422231107557,39.45021991203519,39.456217512994805,39.46221511395442,39.46821271491403,39.47421031587365,39.480207916833265,39.48620551779288,39.4922031187525,39.498200719712116,39.50419832067173,39.51019592163135,39.51619352259096,39.52219112355058,39.528188724510194,39.53418632546981,39.54018392642943,39.546181527389045,39.55217912834866,39.55817672930828,39.564174330267896,39.570171931227506,39.57616953218712,39.58216713314674,39.58816473410636,39.594162335065974,39.60015993602559,39.60615753698521,39.612155137944825,39.618152738904435,39.62415033986405,39.63014794082367,39.636145541783286,39.6421431427429,39.64814074370252,39.65413834466214,39.660135945621754,39.66613354658137,39.67213114754098,39.6781287485006,39.684126349460215,39.69012395041983,39.69612155137945,39.702119152339066,39.70811675329868,39.7141143542583,39.72011195521791,39.726109556177526,39.73210715713714,39.73810475809676,39.74410235905638,39.750099960015994,39.75609756097561,39.76209516193523,39.768092762894845,39.774090363854455,39.78008796481407,39.78608556577369,39.792083166733306,39.79808076769292,39.80407836865254,39.81007596961216,39.816073570571774,39.822071171531384,39.828068772491,39.83406637345062,39.840063974410235,39.84606157536985,39.85205917632947,39.858056777289086,39.8640543782487,39.87005197920832,39.87604958016793,39.88204718112755,39.888044782087164,39.89404238304678,39.9000399840064,39.906037584966015,39.91203518592563,39.91803278688525,39.92403038784486,39.930027988804476,39.93602558976409,39.94202319072371,39.94802079168333,39.95401839264294,39.96001599360256,39.96601359456218,39.972011195521794,39.978008796481404,39.98400639744102,39.99000399840064,39.996001599360255,40.00199920031987,40.00799680127949,40.013994402239106,40.01999200319872,40.02598960415833,40.03198720511795,40.03798480607757,40.043982407037184,40.0499800079968,40.05597760895642,40.061975209916035,40.06797281087565,40.07397041183527,40.07996801279488,40.085965613754496,40.09196321471411,40.09796081567373,40.10395841663335,40.109956017592964,40.11595361855258,40.1219512195122,40.12794882047181,40.133946421431425,40.13994402239104,40.14594162335066,40.151939224310276,40.15793682526989,40.16393442622951,40.16993202718913,40.175929628148744,40.181927229108354,40.18792483006797,40.19392243102759,40.199920031987205,40.20591763294682,40.21191523390644,40.217912834866056,40.22391043582567,40.22990803678528,40.2359056377449,40.241903238704516,40.24790083966413,40.25389844062375,40.25989604158337,40.265893642542984,40.2718912435026,40.27788884446222,40.28388644542183,40.289884046381445,40.29588164734106,40.30187924830068,40.307876849260296,40.31387445021991,40.31987205117953,40.32586965213915,40.33186725309876,40.337864854058374,40.34386245501799,40.34986005597761,40.355857656937225,40.36185525789684,40.36785285885646,40.373850459816076,40.37984806077569,40.3858456617353,40.39184326269492,40.39784086365454,40.403838464614154,40.40983606557377,40.41583366653339,40.421831267493005,40.42782886845262,40.43382646941223,40.43982407037185,40.445821671331466,40.45181927229108,40.4578168732507,40.46381447421032,40.46981207516993,40.47580967612955,40.48180727708917,40.48780487804878,40.493802479008394,40.49980007996801,40.50579768092763,40.511795281887245,40.51779288284686,40.52379048380648,40.529788084766096,40.535785685725706,40.54178328668532,40.54778088764494,40.55377848860456,40.559776089564174,40.56577369052379,40.57177129148341,40.577768892443025,40.58376649340264,40.58976409436225,40.59576169532187,40.601759296281486,40.6077568972411,40.61375449820072,40.61975209916034,40.625749700119954,40.63174730107957,40.63774490203919,40.6437425029988,40.649740103958415,40.65573770491803,40.66173530587765,40.667732906837266,40.67373050779688,40.6797281087565,40.68572570971612,40.69172331067573,40.697720911635344,40.70371851259496,40.70971611355458,40.715713714514195,40.72171131547381,40.72770891643343,40.733706517393045,40.73970411835266,40.74570171931227,40.75169932027189,40.757696921231506,40.76369452219112,40.76969212315074,40.77568972411036,40.781687325069974,40.78768492602959,40.7936825269892,40.79968012794882,40.805677728908435,40.81167532986805,40.81767293082767,40.823670531787286,40.8296681327469,40.83566573370652,40.84166333466614,40.84766093562575,40.853658536585364,40.85965613754498,40.8656537385046,40.871651339464215,40.87764894042383,40.88364654138345,40.889644142343066,40.895641743302676,40.90163934426229,40.90763694522191,40.91363454618153,40.919632147141144,40.92562974810076,40.93162734906038,40.937624950019995,40.94362255097961,40.94962015193922,40.95561775289884,40.961615353858456,40.96761295481807,40.97361055577769,40.97960815673731,40.98560575769692,40.99160335865654,40.99760095961615,41.00359856057577,41.009596161535384,41.015593762495,41.02159136345462,41.027588964414235,41.03358656537385,41.03958416633347,41.045581767293086,41.051579368252696,41.05757696921231,41.06357457017193,41.06957217113155,41.075569772091164,41.08156737305078,41.0875649740104,41.093562574970015,41.099560175929625,41.10555777688924,41.11155537784886,41.117552978808476,41.12355057976809,41.12954818072771,41.13554578168733,41.141543382646944,41.14754098360656,41.15353858456617,41.15953618552579,41.165533786485405,41.17153138744502,41.17752898840464,41.183526589364256,41.18952419032387,41.19552179128349,41.2015193922431,41.20751699320272,41.21351459416233,41.21951219512195,41.22550979608157,41.231507397041185,41.2375049980008,41.24350259896042,41.249500199920035,41.255497800879645,41.26149540183926,41.26749300279888,41.273490603758496,41.27948820471811,41.28548580567773,41.29148340663735,41.297481007596964,41.303478608556574,41.30947620951619,41.31547381047581,41.321471411435425,41.32746901239504,41.33346661335466,41.339464214314276,41.34546181527389,41.35145941623351,41.35745701719312,41.36345461815274,41.369452219112354,41.37544982007197,41.38144742103159,41.387445021991205,41.39344262295082,41.39944022391044,41.40543782487005,41.411435425829666,41.41743302678928,41.4234306277489,41.42942822870852,41.435425829668134,41.44142343062775,41.44742103158737,41.453418632546985,41.459416233506595,41.46541383446621,41.47141143542583,41.477409036385446,41.48340663734506,41.48940423830468,41.4954018392643,41.50139944022391,41.50739704118352,41.51339464214314,41.51939224310276,41.525389844062374,41.53138744502199,41.53738504598161,41.543382646941225,41.54938024790084,41.55537784886046,41.56137544982007,41.567373050779686,41.5733706517393,41.57936825269892,41.58536585365854,41.591363454618154,41.59736105557777,41.60335865653739,41.609356257497,41.615353858456615,41.62135145941623,41.62734906037585,41.633346661335466,41.63934426229508,41.6453418632547,41.65133946421432,41.657337065173934,41.663334666133544,41.66933226709316,41.67532986805278,41.681327469012395,41.68732506997201,41.69332267093163,41.699320271891246,41.70531787285086,41.71131547381047,41.71731307477009,41.72331067572971,41.72930827668932,41.73530587764894,41.74130347860856,41.747301079568174,41.75329868052779,41.75929628148741,41.76529388244702,41.771291483406635,41.77728908436625,41.78328668532587,41.789284286285486,41.7952818872451,41.80127948820472,41.80727708916434,41.81327469012395,41.819272291083564,41.82526989204318,41.8312674930028,41.837265093962415,41.84326269492203,41.84926029588165,41.855257896841266,41.86125549780088,41.86725309876049,41.87325069972011,41.87924830067973,41.885245901639344,41.89124350259896,41.89724110355858,41.903238704518195,41.90923630547781,41.91523390643742,41.92123150739704,41.927229108356656,41.93322670931627,41.93922431027589,41.94522191123551,41.951219512195124,41.95721711315474,41.96321471411436,41.96921231507397,41.975209916033585,41.9812075169932,41.98720511795282,41.993202718912436,41.99920031987205,42.00519792083167,42.01119552179129,42.017193122750896,42.02319072371051,42.02918832467013,42.03518592562975,42.041183526589364,42.04718112754898,42.0531787285086,42.059176329468215,42.06517393042783,42.07117153138744,42.07716913234706,42.083166733306676,42.08916433426629,42.09516193522591,42.10115953618553,42.107157137145144,42.11315473810476,42.11915233906437,42.12514994002399,42.131147540983605,42.13714514194322,42.14314274290284,42.149140343862456,42.15513794482207,42.16113554578169,42.16713314674131,42.17313074770092,42.179128348660534,42.18512594962015,42.19112355057977,42.197121151539385,42.203118752499,42.20911635345862,42.215113954418236,42.221111555377846,42.22710915633746,42.23310675729708,42.2391043582567,42.24510195921631,42.25109956017593,42.25709716113555,42.263094762095164,42.26909236305478,42.27508996401439,42.28108756497401,42.287085165933625,42.29308276689324,42.29908036785286,42.305077968812476,42.31107556977209,42.31707317073171,42.32307077169132,42.32906837265094,42.335065973610554,42.34106357457017,42.34706117552979,42.353058776489405,42.35905637744902,42.36505397840864,42.371051579368256,42.377049180327866,42.38304678128748,42.3890443822471,42.39504198320672,42.401039584166334,42.40703718512595,42.41303478608557,42.419032387045185,42.425029988004795,42.43102758896441,42.43702518992403,42.443022790883646,42.44902039184326,42.45501799280288,42.4610155937625,42.467013194722114,42.47301079568173,42.47900839664134,42.48500599760096,42.491003598560575,42.49700119952019,42.50299880047981,42.508996401439425,42.51499400239904,42.52099160335866,42.52698920431827,42.532986805277886,42.5389844062375,42.54498200719712,42.55097960815674,42.556977209116354,42.56297481007597,42.56897241103559,42.574970011995205,42.580967612954815,42.58696521391443,42.59296281487405,42.598960415833666,42.60495801679328,42.6109556177529,42.61695321871252,42.622950819672134,42.628948420631744,42.63494602159136,42.64094362255098,42.646941223510595,42.65293882447021,42.65893642542983,42.664934026389446,42.67093162734906,42.67692922830868,42.68292682926829,42.68892443022791,42.694922031187524,42.70091963214714,42.70691723310676,42.712914834066375,42.71891243502599,42.72491003598561,42.73090763694522,42.736905237904836,42.74290283886445,42.74890043982407,42.75489804078369,42.7608956417433,42.76689324270292,42.77289084366254,42.778888444622154,42.784886045581764,42.79088364654138,42.796881247501,42.802878848460615,42.80887644942023,42.81487405037985,42.820871651339466,42.82686925229908,42.83286685325869,42.83886445421831,42.84486205517793,42.850859656137544,42.85685725709716,42.86285485805678,42.868852459016395,42.87485005997601,42.88084766093563,42.88684526189524,42.892842862854856,42.89884046381447,42.90483806477409,42.91083566573371,42.916833266693324,42.92283086765294,42.92882846861256,42.93482606957217,42.940823670531785,42.9468212714914,42.95281887245102,42.958816473410636,42.96481407437025,42.97081167532987,42.97680927628949,42.982806877249104,42.98880447820871,42.99480207916833,43.00079968012795,43.006797281087564,43.01279488204718,43.0187924830068,43.024790083966415,43.03078768492603,43.03678528588564,43.04278288684526,43.048780487804876,43.05477808876449,43.06077568972411,43.06677329068373,43.072770891643344,43.07876849260296,43.08476609356258,43.09076369452219,43.096761295481805,43.10275889644142,43.10875649740104,43.114754098360656,43.12075169932027,43.12674930027989,43.13274690123951,43.13874450219912,43.144742103158734,43.15073970411835,43.15673730507797,43.162734906037585,43.1687325069972,43.17473010795682,43.180727708916436,43.18672530987605,43.19272291083566,43.19872051179528,43.2047181127549,43.210715713714514,43.21671331467413,43.22271091563375,43.228708516593365,43.23470611755298,43.24070371851259,43.24670131947221,43.252698920431826,43.25869652139144,43.26469412235106,43.27069172331068,43.27668932427029,43.28268692522991,43.28868452618953,43.29468212714914,43.300679728108754,43.30667732906837,43.31267493002799,43.318672530987605,43.32467013194722,43.33066773290684,43.336665333866456,43.342662934826066,43.34866053578568,43.3546581367453,43.36065573770492,43.366653338664534,43.37265093962415,43.37864854058377,43.384646141543385,43.390643742503,43.39664134346261,43.40263894442223,43.408636545381846,43.41463414634146,43.42063174730108,43.4266293482607,43.432626949220314,43.43862455017993,43.44462215113954,43.45061975209916,43.456617353058775,43.46261495401839,43.46861255497801,43.474610155937626,43.48060775689724,43.48660535785686,43.49260295881648,43.49860055977609,43.5045981607357,43.51059576169532,43.51659336265494,43.522590963614554,43.52858856457417,43.53458616553379,43.540583766493405,43.546581367453015,43.55257896841263,43.55857656937225,43.564574170331866,43.57057177129148,43.5765693722511,43.58256697321072,43.588564574170334,43.59456217512995,43.60055977608956,43.60655737704918,43.612554978008795,43.61855257896841,43.62455017992803,43.630547780887646,43.63654538184726,43.64254298280688,43.64854058376649,43.65453818472611,43.660535785685724,43.66653338664534,43.67253098760496,43.678528588564575,43.68452618952419,43.69052379048381,43.696521391443426,43.702518992403036,43.70851659336265,43.71451419432227,43.72051179528189,43.726509396241504,43.73250699720112,43.73850459816074,43.744502199120355,43.750499800079965,43.75649740103958,43.7624950019992,43.768492602958815,43.77449020391843,43.78048780487805,43.78648540583767,43.79248300679728,43.7984806077569,43.80447820871651,43.81047580967613,43.816473410635744,43.82247101159536,43.82846861255498,43.834466213514595,43.84046381447421,43.84646141543383,43.85245901639344,43.858456617353056,43.86445421831267,43.87045181927229,43.87644942023191,43.882447021191524,43.88844462215114,43.89444222311076,43.900439824070375,43.906437425029985,43.9124350259896,43.91843262694922,43.924430227908836,43.93042782886845,43.93642542982807,43.94242303078769,43.948420631747304,43.954418232706914,43.96041583366653,43.96641343462615,43.972411035585765,43.97840863654538,43.984406237505,43.990403838464616,43.99640143942423,44.00239904038385,44.00839664134346,44.01439424230308,44.02039184326269,44.02638944422231,44.03238704518193,44.038384646141544,44.04438224710116,44.05037984806078,44.05637744902039,44.062375049980005,44.06837265093962,44.07437025189924,44.080367852858856,44.08636545381847,44.09236305477809,44.09836065573771,44.104358256697324,44.110355857656934,44.11635345861655,44.12235105957617,44.128348660535785,44.1343462614954,44.14034386245502,44.146341463414636,44.15233906437425,44.15833666533386,44.16433426629348,44.1703318672531,44.176329468212714,44.18232706917233,44.18832467013195,44.194322271091565,44.20031987205118,44.2063174730108,44.21231507397041,44.218312674930026,44.22431027588964,44.23030787684926,44.23630547780888,44.242303078768494,44.24830067972811,44.25429828068773,44.26029588164734,44.266293482606955,44.27229108356657,44.27828868452619,44.284286285485805,44.29028388644542,44.29628148740504,44.302279088364656,44.30827668932427,44.31427429028388,44.3202718912435,44.32626949220312,44.332267093162734,44.33826469412235,44.34426229508197,44.350259896041585,44.3562574970012,44.36225509796081,44.36825269892043,44.374250299880046,44.38024790083966,44.38624550179928,44.3922431027589,44.398240703718514,44.40423830467813,44.41023590563775,44.41623350659736,44.422231107556975,44.42822870851659,44.43422630947621,44.440223910435826,44.44622151139544,44.45221911235506,44.45821671331468,44.464214314274294,44.470211915233904,44.47620951619352,44.48220711715314,44.488204718112755,44.49420231907237,44.50019992003199,44.506197520991606,44.51219512195122,44.51819272291083,44.52419032387045,44.53018792483007,44.53618552578968,44.5421831267493,44.54818072770892,44.554178328668534,44.56017592962815,44.56617353058777,44.57217113154738,44.578168732506995,44.58416633346661,44.59016393442623,44.596161535385846,44.60215913634546,44.60815673730508,44.6141543382647,44.62015193922431,44.626149540183924,44.63214714114354,44.63814474210316,44.644142343062775,44.65013994402239,44.65613754498201,44.662135145941626,44.66813274690124,44.67413034786085,44.68012794882047,44.68612554978009,44.692123150739704,44.69812075169932,44.70411835265894,44.710115953618555,44.71611355457817,44.72211115553778,44.7281087564974,44.734106357457016,44.74010395841663,44.74610155937625,44.75209916033587,44.758096761295484,44.7640943622551,44.77009196321472,44.77608956417433,44.782087165133944,44.78808476609356,44.79408236705318,44.800079968012795,44.80607756897241,44.81207516993203,44.818072770891646,44.824070371851256,44.83006797281087,44.83606557377049,44.84206317473011,44.848060775689724,44.85405837664934,44.86005597760896,44.866053578568575,44.87205117952819,44.8780487804878,44.88404638144742,44.890043982407036,44.89604158336665,44.90203918432627,44.90803678528589,44.914034386245504,44.92003198720512,44.92602958816473,44.93202718912435,44.938024790083965,44.94402239104358,44.9500199920032,44.956017592962816,44.96201519392243,44.96801279488205,44.97401039584167,44.98000799680128,44.986005597760894,44.99200319872051,44.99800079968013,45.003998400639745,45.00999600159936,45.01599360255898,45.021991203518596,45.027988804478206,45.03398640543782,45.03998400639744,45.04598160735706,45.05197920831667,45.05797680927629,45.06397441023591,45.069972011195524,45.07596961215514,45.08196721311475,45.08796481407437,45.093962415033985,45.0999600159936,45.10595761695322,45.111955217912836,45.11795281887245,45.12395041983207,45.12994802079168,45.1359456217513,45.141943222710914,45.14794082367053,45.15393842463015,45.159936025589765,45.16593362654938,45.171931227509,45.177928828468616,45.183926429428226,45.18992403038784,45.19592163134746,45.20191923230708,45.207916833266694,45.21391443422631,45.21991203518593,45.225909636145545,45.231907237105155,45.23790483806477,45.24390243902439,45.249900039984006,45.25589764094362,45.26189524190324,45.26789284286286,45.273890443822474,45.27988804478209,45.2858856457417,45.29188324670132,45.297880847660934,45.30387844862055,45.30987604958017,45.315873650539785,45.3218712514994,45.32786885245902,45.33386645341863,45.339864054378246,45.34586165533786,45.35185925629748,45.3578568572571,45.363854458216714,45.36985205917633,45.37584966013595,45.381847261095565,45.387844862055175,45.39384246301479,45.39984006397441,45.405837664934026,45.41183526589364,45.41783286685326,45.42383046781288,45.429828068772494,45.435825669732104,45.44182327069172,45.44782087165134,45.453818472610955,45.45981607357057,45.46581367453019,45.471811275489806,45.47780887644942,45.48380647740904,45.48980407836865,45.49580167932827,45.501799280287884,45.5077968812475,45.51379448220712,45.519792083166735,45.52578968412635,45.53178728508597,45.53778488604558,45.543782487005195,45.54978008796481,45.55577768892443,45.56177528988405,45.56777289084366,45.57377049180328,45.5797680927629,45.585765693722514,45.591763294682124,45.59776089564174,45.60375849660136,45.609756097560975,45.61575369852059,45.62175129948021,45.627748900439826,45.63374650139944,45.63974410235905,45.64574170331867,45.65173930427829,45.657736905237904,45.66373450619752,45.66973210715714,45.675729708116755,45.68172730907637,45.68772491003599,45.6937225109956,45.699720111955216,45.70571771291483,45.71171531387445,45.71771291483407,45.723710515793684,45.7297081167533,45.73570571771292,45.74170331867253,45.747700919632145,45.75369852059176,45.75969612155138,45.765693722510996,45.77169132347061,45.77768892443023,45.78368652538985,45.789684126349464,45.79568172730907,45.80167932826869,45.80767692922831,45.813674530187924,45.81967213114754,45.82566973210716,45.831667333066775,45.83766493402639,45.843662534986,45.84966013594562,45.855657736905236,45.86165533786485,45.86765293882447,45.87365053978409,45.879648140743704,45.88564574170332,45.89164334266294,45.89764094362255,45.903638544582165,45.90963614554178,45.9156337465014,45.921631347461016,45.92762894842063,45.93362654938025,45.93962415033987,45.94562175129948,45.951619352259094,45.95761695321871,45.96361455417833,45.969612155137945,45.97560975609756,45.98160735705718,45.987604958016796,45.99360255897641,45.99960015993602,46.00559776089564,46.01159536185526,46.017592962814874,46.02359056377449,46.02958816473411,46.035585765693725,46.04158336665334,46.04758096761295,46.05357856857257,46.059576169532185,46.0655737704918,46.07157137145142,46.077568972411036,46.08356657337065,46.08956417433027,46.09556177528989,46.1015593762495,46.107556977209114,46.11355457816873,46.11955217912835,46.125549780087965,46.13154738104758,46.1375449820072,46.143542582966816,46.149540183926426,46.15553778488604,46.16153538584566,46.16753298680528,46.173530587764894,46.17952818872451,46.18552578968413,46.191523390643745,46.19752099160336,46.20351859256297,46.20951619352259,46.215513794482206,46.22151139544182,46.22750899640144,46.23350659736106,46.239504198320674,46.24550179928029,46.2514994002399,46.25749700119952,46.263494602159135,46.26949220311875,46.27548980407837,46.281487405037986,46.2874850059976,46.29348260695722,46.29948020791684,46.30547780887645,46.31147540983606,46.31747301079568,46.3234706117553,46.329468212714914,46.33546581367453,46.34146341463415,46.347461015593765,46.353458616553375,46.35945621751299,46.36545381847261,46.371451419432226,46.37744902039184,46.38344662135146,46.38944422231108,46.395441823270694,46.40143942423031,46.40743702518992,46.41343462614954,46.419432227109155,46.42542982806877,46.43142742902839,46.437425029988006,46.44342263094762,46.44942023190724,46.45541783286685,46.46141543382647,46.467413034786084,46.4734106357457,46.47940823670532,46.485405837664935,46.49140343862455,46.49740103958417,46.503398640543786,46.509396241503396,46.51539384246301,46.52139144342263,46.52738904438225,46.533386645341864,46.53938424630148,46.5453818472611,46.551379448220715,46.557377049180324,46.56337465013994,46.56937225109956,46.575369852059175,46.58136745301879,46.58736505397841,46.593362654938026,46.59936025589764,46.60535785685726,46.61135545781687,46.61735305877649,46.623350659736104,46.62934826069572,46.63534586165534,46.641343462614955,46.64734106357457,46.65333866453419,46.6593362654938,46.665333866453416,46.67133146741303,46.67732906837265,46.68332666933227,46.689324270291884,46.6953218712515,46.70131947221112,46.707317073170735,46.713314674130345,46.71931227508996,46.72530987604958,46.731307477009196,46.73730507796881,46.74330267892843,46.74930027988805,46.755297880847664,46.761295481807274,46.76729308276689,46.77329068372651,46.779288284686125,46.78528588564574,46.79128348660536,46.797281087564976,46.80327868852459,46.80927628948421,46.81527389044382,46.82127149140344,46.82726909236305,46.83326669332267,46.83926429428229,46.845261895241904,46.85125949620152,46.85725709716114,46.86325469812075,46.869252299080365,46.87524990003998,46.8812475009996,46.887245101959216,46.89324270291883,46.89924030387845,46.90523790483807,46.911235505797684,46.917233106757294,46.92323070771691,46.92922830867653,46.935225909636145,46.94122351059576,46.94722111155538,46.953218712514996,46.95921631347461,46.96521391443422,46.97121151539384,46.97720911635346,46.983206717313074,46.98920431827269,46.99520191923231,47.001199520191925,47.00719712115154,47.01319472211116,47.01919232307077,47.025189924030386,47.03118752499,47.03718512594962,47.04318272690924,47.049180327868854,47.05517792882847,47.06117552978809,47.0671731307477,47.073170731707314,47.07916833266693,47.08516593362655,47.091163534586165,47.09716113554578,47.1031587365054,47.109156337465016,47.11515393842463,47.12115153938424,47.12714914034386,47.13314674130348,47.139144342263094,47.14514194322271,47.15113954418233,47.157137145141945,47.16313474610156,47.16913234706117,47.17512994802079,47.181127548980406,47.18712514994002,47.19312275089964,47.19912035185926,47.205117952818874,47.21111555377849,47.21711315473811,47.22311075569772,47.229108356657335,47.23510595761695,47.24110355857657,47.247101159536186,47.2530987604958,47.25909636145542,47.26509396241504,47.27109156337465,47.277089164334264,47.28308676529388,47.2890843662535,47.295081967213115,47.30107956817273,47.30707716913235,47.313074770091966,47.31907237105158,47.32506997201119,47.33106757297081,47.33706517393043,47.34306277489004,47.34906037584966,47.35505797680928,47.361055577768894,47.36705317872851,47.37305077968812,47.37904838064774,47.385045981607355,47.39104358256697,47.39704118352659,47.403038784486206,47.40903638544582,47.41503398640544,47.42103158736506,47.42702918832467,47.433026789284284,47.4390243902439,47.44502199120352,47.451019592163135,47.45701719312275,47.46301479408237,47.469012395041986,47.475009996001596,47.48100759696121,47.48700519792083,47.49300279888045,47.499000399840064,47.50499800079968,47.5109956017593,47.516993202718915,47.52299080367853,47.52898840463814,47.53498600559776,47.540983606557376,47.54698120751699,47.55297880847661,47.55897640943623,47.564974010395844,47.57097161135546,47.57696921231507,47.58296681327469,47.588964414234304,47.59496201519392,47.60095961615354,47.606957217113155,47.61295481807277,47.61895241903239,47.624950019992006,47.630947620951616,47.63694522191123,47.64294282287085,47.64894042383047,47.654938024790084,47.6609356257497,47.66693322670932,47.672930827668935,47.678928428628545,47.68492602958816,47.69092363054778,47.696921231507396,47.70291883246701,47.70891643342663,47.71491403438625,47.720911635345864,47.72690923630548,47.73290683726509,47.73890443822471,47.744902039184325,47.75089964014394,47.75689724110356,47.762894842063176,47.76889244302279,47.77489004398241,47.78088764494202,47.78688524590164,47.792882846861254,47.79888044782087,47.80487804878049,47.810875649740105,47.81687325069972,47.82287085165934,47.828868452618956,47.834866053578565,47.84086365453818,47.8468612554978,47.852858856457416,47.85885645741703,47.86485405837665,47.87085165933627,47.876849260295884,47.882846861255494,47.88884446221511,47.89484206317473,47.900839664134345,47.90683726509396,47.91283486605358,47.918832467013196,47.92483006797281,47.93082766893243,47.93682526989204,47.94282287085166,47.948820471811274,47.95481807277089,47.96081567373051,47.966813274690125,47.97281087564974,47.97880847660936,47.98480607756897,47.990803678528586,47.9968012794882,48.00279888044782,48.00879648140744,48.014794082367054,48.02079168332667,48.02678928428629,48.032786885245905,48.038784486205515,48.04478208716513,48.05077968812475,48.056777289084366,48.06277489004398,48.0687724910036,48.07477009196322,48.080767692922834,48.08676529388244,48.09276289484206,48.09876049580168,48.104758096761294,48.11075569772091,48.11675329868053,48.122750899640145,48.12874850059976,48.13474610155938,48.14074370251899,48.146741303478606,48.15273890443822,48.15873650539784,48.16473410635746,48.170731707317074,48.17672930827669,48.18272690923631,48.188724510195925,48.194722111155535,48.20071971211515,48.20671731307477,48.212714914034386,48.218712514994,48.22471011595362,48.23070771691324,48.236705317872854,48.242702918832464,48.24870051979208,48.2546981207517,48.260695721711315,48.26669332267093,48.27269092363055,48.278688524590166,48.28468612554978,48.2906837265094,48.29668132746901,48.30267892842863,48.308676529388244,48.31467413034786,48.32067173130748,48.326669332267095,48.33266693322671,48.33866453418633,48.34466213514594,48.350659736105555,48.35665733706517,48.36265493802479,48.368652538984406,48.37465013994402,48.38064774090364,48.38664534186326,48.392642942822874,48.398640543782484,48.4046381447421,48.41063574570172,48.416633346661335,48.42263094762095,48.42862854858057,48.434626149540186,48.4406237504998,48.44662135145941,48.45261895241903,48.45861655337865,48.464614154338264,48.47061175529788,48.4766093562575,48.482606957217115,48.48860455817673,48.49460215913635,48.50059976009596,48.506597361055576,48.51259496201519,48.51859256297481,48.52459016393443,48.530587764894044,48.53658536585366,48.54258296681328,48.54858056777289,48.554578168732505,48.56057576969212,48.56657337065174,48.572570971611356,48.57856857257097,48.58456617353059,48.59056377449021,48.596561375449824,48.60255897640943,48.60855657736905,48.61455417832867,48.620551779288284,48.6265493802479,48.63254698120752,48.638544582167135,48.64454218312675,48.65053978408636,48.65653738504598,48.662534986005596,48.66853258696521,48.67453018792483,48.68052778888445,48.686525389844064,48.69252299080368,48.6985205917633,48.70451819272291,48.710515793682525,48.71651339464214,48.72251099560176,48.728508596561376,48.73450619752099,48.74050379848061,48.74650139944023,48.75249900039984,48.758496601359454,48.76449420231907,48.77049180327869,48.776489404238305,48.78248700519792,48.78848460615754,48.794482207117156,48.80047980807677,48.80647740903638,48.812475009996,48.81847261095562,48.824470211915234,48.83046781287485,48.83646541383447,48.842463014794085,48.8484606157537,48.85445821671331,48.86045581767293,48.866453418632545,48.87245101959216,48.87844862055178,48.884446221511396,48.89044382247101,48.89644142343063,48.90243902439025,48.90843662534986,48.914434226309474,48.92043182726909,48.92642942822871,48.932427029188325,48.93842463014794,48.94442223110756,48.950419832067176,48.956417433026786,48.9624150339864,48.96841263494602,48.97441023590564,48.980407836865254,48.98640543782487,48.99240303878449,48.998400639744105,49.00439824070372,49.01039584166333,49.01639344262295,49.022391043582566,49.02838864454218,49.0343862455018,49.04038384646142,49.046381447421034,49.05237904838065,49.05837664934026,49.06437425029988,49.070371851259495,49.07636945221911,49.08236705317873,49.088364654138346,49.09436225509796,49.10035985605758,49.1063574570172,49.11235505797681,49.11835265893642,49.12435025989604,49.13034786085566,49.136345461815274,49.14234306277489,49.14834066373451,49.154338264694125,49.160335865653735,49.16633346661335,49.17233106757297,49.178328668532586,49.1843262694922,49.19032387045182,49.19632147141144,49.202319072371054,49.20831667333067,49.21431427429028,49.2203118752499,49.226309476209515,49.23230707716913,49.23830467812875,49.244302279088366,49.25029988004798,49.2562974810076,49.26229508196721,49.26829268292683,49.274290283886444,49.28028788484606,49.28628548580568,49.292283086765295,49.29828068772491,49.30427828868453,49.310275889644146,49.316273490603756,49.32227109156337,49.32826869252299,49.33426629348261,49.340263894442224,49.34626149540184,49.35225909636146,49.358256697321075,49.364254298280684,49.3702518992403,49.37624950019992,49.382247101159535,49.38824470211915,49.39424230307877,49.400239904038386,49.406237504998,49.41223510595762,49.41823270691723,49.42423030787685,49.430227908836464,49.43622550979608,49.4422231107557,49.448220711715315,49.45421831267493,49.46021591363455,49.46621351459416,49.472211115553776,49.47820871651339,49.48420631747301,49.49020391843263,49.496201519392244,49.50219912035186,49.50819672131148,49.514194322271095,49.520191923230705,49.52618952419032,49.53218712514994,49.538184726109556,49.54418232706917,49.55017992802879,49.55617752898841,49.562175129948024,49.568172730907634,49.57417033186725,49.58016793282687,49.586165533786485,49.5921631347461,49.59816073570572,49.604158336665336,49.61015593762495,49.61615353858457,49.62215113954418,49.628148740503796,49.63414634146341,49.64014394242303,49.64614154338265,49.652139144342264,49.65813674530188,49.6641343462615,49.67013194722111,49.676129548180725,49.68212714914034,49.68812475009996,49.694122351059576,49.70011995201919,49.70611755297881,49.71211515393843,49.718112754898044,49.724110355857654,49.73010795681727,49.73610555777689,49.742103158736505,49.74810075969612,49.75409836065574,49.760095961615356,49.76609356257497,49.77209116353458,49.7780887644942,49.78408636545382,49.790083966413434,49.79608156737305,49.80207916833267,49.808076769292285,49.8140743702519,49.82007197121152,49.82606957217113,49.832067173130746,49.83806477409036,49.84406237504998,49.8500599760096,49.856057576969214,49.86205517792883,49.86805277888845,49.87405037984806,49.880047980807674,49.88604558176729,49.89204318272691,49.898040783686525,49.90403838464614,49.91003598560576,49.916033586565376,49.92203118752499,49.9280287884846,49.93402638944422,49.94002399040384,49.946021591363454,49.95201919232307,49.95801679328269,49.964014394242305,49.97001199520192,49.97600959616153,49.98200719712115,49.988004798080766,49.99400239904038,50.0]}
},{}],54:[function(require,module,exports){
module.exports={"expected":[0.57735026,0.5770235,0.5766973,0.57637167,0.5760465,0.575722,0.575398,0.57507455,0.5747517,0.5744293,0.57410747,0.5737862,0.5734654,0.5731452,0.57282555,0.5725064,0.5721878,0.57186973,0.57155216,0.5712352,0.5709187,0.5706027,0.5702873,0.56997234,0.569658,0.5693441,0.5690307,0.5687179,0.56840557,0.5680937,0.56778246,0.5674716,0.5671614,0.5668516,0.5665423,0.5662336,0.5659253,0.5656176,0.56531036,0.5650036,0.5646973,0.5643916,0.5640863,0.56378156,0.5634773,0.56317353,0.5628702,0.5625674,0.5622651,0.5619633,0.56166196,0.56136113,0.5610608,0.56076086,0.56046146,0.56016254,0.5598641,0.55956614,0.5592686,0.5589716,0.55867505,0.558379,0.55808336,0.5577882,0.55749357,0.55719936,0.5569056,0.5566123,0.55631953,0.5560272,0.5557353,0.5554438,0.5551529,0.5548623,0.5545723,0.55428267,0.5539935,0.5537048,0.55341655,0.5531288,0.5528414,0.55255455,0.5522681,0.55198205,0.5516965,0.55141133,0.55112666,0.5508424,0.5505586,0.5502752,0.5499923,0.5497098,0.54942775,0.5491461,0.5488649,0.54858416,0.54830384,0.54802394,0.54774445,0.54746544,0.5471868,0.5469086,0.5466308,0.54635346,0.54607654,0.54580003,0.54552394,0.54524827,0.544973,0.5446982,0.54442376,0.54414976,0.5438762,0.543603,0.54333025,0.54305786,0.54278594,0.5425144,0.54224324,0.5419725,0.5417022,0.54143226,0.5411628,0.5408937,0.5406249,0.54035664,0.5400887,0.5398212,0.5395541,0.5392874,0.539021,0.5387551,0.5384896,0.5382244,0.53795964,0.5376953,0.5374313,0.5371677,0.5369045,0.5366417,0.5363793,0.53611726,0.5358556,0.53559434,0.5353334,0.5350729,0.53481275,0.534553,0.53429365,0.5340346,0.533776,0.5335178,0.53325987,0.5330024,0.5327453,0.5324885,0.5322321,0.5319761,0.53172046,0.5314652,0.5312103,0.53095573,0.5307016,0.5304477,0.5301943,0.5299412,0.5296885,0.5294361,0.5291841,0.52893245,0.5286812,0.5284303,0.5281797,0.5279295,0.5276796,0.5274301,0.52718097,0.5269322,0.5266837,0.5264356,0.5261879,0.5259405,0.5256934,0.5254468,0.52520037,0.5249544,0.52470875,0.5244634,0.52421844,0.5239738,0.5237295,0.5234856,0.52324194,0.5229987,0.52275574,0.5225132,0.5222709,0.52202904,0.52178746,0.5215462,0.5213053,0.5210647,0.5208245,0.5205846,0.520345,0.5201057,0.5198668,0.5196282,0.51939,0.51915205,0.5189144,0.5186771,0.5184402,0.51820356,0.5179672,0.51773125,0.5174956,0.51726025,0.51702523,0.5167905,0.51655614,0.5163221,0.51608837,0.5158549,0.5156218,0.515389,0.5151565,0.51492435,0.51469254,0.514461,0.5142298,0.5139988,0.5137682,0.51353794,0.5133079,0.5130783,0.5128489,0.51261985,0.5123911,0.5121626,0.51193446,0.51170665,0.51147914,0.51125187,0.51102495,0.51079834,0.510572,0.510346,0.5101203,0.5098948,0.50966966,0.50944483,0.5092203,0.50899607,0.50877213,0.5085485,0.50832516,0.5081021,0.5078793,0.5076569,0.50743467,0.5072128,0.5069912,0.5067699,0.5065489,0.50632817,0.5061077,0.50588757,0.5056677,0.5054481,0.5052288,0.50500983,0.50479114,0.5045727,0.50435454,0.5041366,0.50391906,0.50370175,0.5034847,0.50326794,0.5030515,0.50283533,0.5026194,0.50240374,0.5021884,0.50197333,0.5017585,0.501544,0.5013298,0.5011158,0.50090206,0.5006887,0.50047547,0.5002626,0.50005,0.49983767,0.49962556,0.4994138,0.49920222,0.49899098,0.49877995,0.49856925,0.49835876,0.4981486,0.49793863,0.49772897,0.49751955,0.49731043,0.49710158,0.49689296,0.4966846,0.49647653,0.49626872,0.49606112,0.49585384,0.49564677,0.49544,0.49523345,0.4950272,0.4948212,0.49461544,0.49440992,0.4942047,0.49399972,0.49379498,0.4935905,0.49338627,0.4931823,0.49297857,0.49277514,0.4925719,0.49236897,0.49216622,0.49196377,0.49176154,0.4915596,0.49135786,0.49115643,0.4909552,0.49075422,0.49055353,0.49035302,0.4901528,0.4899528,0.48975307,0.48955354,0.4893543,0.4891553,0.48895654,0.488758,0.48855972,0.48836166,0.48816386,0.4879663,0.48776898,0.4875719,0.48737502,0.48717844,0.48698205,0.48678592,0.48659003,0.48639438,0.48619893,0.48600376,0.4858088,0.4856141,0.4854196,0.48522535,0.48503134,0.48483753,0.484644,0.48445067,0.48425758,0.4840647,0.4838721,0.48367965,0.48348752,0.48329556,0.48310384,0.48291233,0.4827211,0.4825301,0.48233926,0.4821487,0.48195833,0.48176822,0.4815783,0.48138863,0.48119915,0.48100993,0.48082092,0.48063213,0.48044357,0.48025525,0.4800671,0.4798792,0.47969154,0.47950408,0.47931683,0.47912982,0.47894302,0.47875643,0.47857007,0.4783839,0.478198,0.47801226,0.47782677,0.47764146,0.47745642,0.47727156,0.47708693,0.4769025,0.4767183,0.4765343,0.47635052,0.47616696,0.4759836,0.47580045,0.4756175,0.47543478,0.47525227,0.47506997,0.47488785,0.474706,0.4745243,0.47434282,0.4741616,0.47398052,0.47379968,0.47361904,0.47343862,0.47325838,0.47307837,0.47289854,0.47271892,0.4725395,0.4723603,0.47218132,0.47200254,0.47182396,0.47164553,0.47146738,0.47128937,0.4711116,0.470934,0.47075665,0.47057945,0.47040248,0.47022566,0.4700491,0.4698727,0.46969652,0.46952054,0.46934474,0.46916917,0.46899375,0.46881858,0.46864355,0.46846876,0.46829414,0.46811974,0.4679455,0.46777147,0.46759763,0.467424,0.46725053,0.46707729,0.46690422,0.46673137,0.4665587,0.4663862,0.4662139,0.4660418,0.4658699,0.46569815,0.46552664,0.46535528,0.46518415,0.46501315,0.46484238,0.4646718,0.4645014,0.46433118,0.46416116,0.4639913,0.46382165,0.4636522,0.46348292,0.46331382,0.4631449,0.4629762,0.46280763,0.46263927,0.46247107,0.4623031,0.4621353,0.46196765,0.4618002,0.46163294,0.46146587,0.46129897,0.46113226,0.4609657,0.46079937,0.46063316,0.46046716,0.46030134,0.4601357,0.45997024,0.45980495,0.45963985,0.45947492,0.45931017,0.4591456,0.45898122,0.45881698,0.45865294,0.45848906,0.4583254,0.45816186,0.4579985,0.45783535,0.45767236,0.45750952,0.4573469,0.4571844,0.45702213,0.45686,0.45669803,0.45653626,0.45637465,0.4562132,0.45605195,0.45589083,0.4557299,0.45556915,0.45540857,0.45524815,0.4550879,0.45492783,0.4547679,0.45460817,0.4544486,0.4542892,0.45412996,0.45397088,0.453812,0.45365325,0.4534947,0.45333627,0.45317805,0.45301998,0.45286205,0.4527043,0.45254675,0.45238933,0.4522321,0.452075,0.45191807,0.45176134,0.45160472,0.4514483,0.45129204,0.45113593,0.45097998,0.4508242,0.45066857,0.45051312,0.4503578,0.45020267,0.45004767,0.44989288,0.4497382,0.4495837,0.44942936,0.44927517,0.44912118,0.44896728,0.4488136,0.44866002,0.44850665,0.4483534,0.44820035,0.4480474,0.44789463,0.44774202,0.44758958,0.4474373,0.44728515,0.44713315,0.4469813,0.44682965,0.4466781,0.44652677,0.44637552,0.44622448,0.44607356,0.4459228,0.4457722,0.44562176,0.44547147,0.4453213,0.44517133,0.44502145,0.44487178,0.44472224,0.44457284,0.4444236,0.44427451,0.44412556,0.4439768,0.44382814,0.44367966,0.4435313,0.44338313,0.44323507,0.44308716,0.44293943,0.44279182,0.4426444,0.44249704,0.4423499,0.4422029,0.44205603,0.44190928,0.44176272,0.4416163,0.44147003,0.44132388,0.44117787,0.44103205,0.44088632,0.44074076,0.44059536,0.4404501,0.44030496,0.44015998,0.44001514,0.43987045,0.43972588,0.43958145,0.43943718,0.43929306,0.43914905,0.43900523,0.43886152,0.43871796,0.43857455,0.43843126,0.43828812,0.4381451,0.43800226,0.43785954,0.43771696,0.4375745,0.4374322,0.43729,0.437148,0.43700612,0.43686438,0.43672276,0.43658128,0.43643993,0.43629873,0.43615767,0.43601674,0.43587595,0.4357353,0.4355948,0.4354544,0.43531415,0.43517402,0.43503407,0.43489423,0.43475452,0.43461496,0.4344755,0.43433622,0.43419704,0.434058,0.4339191,0.43378034,0.43364167,0.43350318,0.4333648,0.4332266,0.43308845,0.4329505,0.43281266,0.43267494,0.43253738,0.4323999,0.4322626,0.43212542,0.43198836,0.43185142,0.43171462,0.43157795,0.43144143,0.43130502,0.43116874,0.4310326,0.43089658,0.4307607,0.43062493,0.4304893,0.4303538,0.43021843,0.43008316,0.42994803,0.42981303,0.42967817,0.42954344,0.42940882,0.42927432,0.42913997,0.4290057,0.42887163,0.42873764,0.42860377,0.42847005,0.42833644,0.42820296,0.4280696,0.42793638,0.42780325,0.42767027,0.4275374,0.42740467,0.42727205,0.42713955,0.4270072,0.42687494,0.42674282,0.42661083,0.42647895,0.4263472,0.42621556,0.42608404,0.42595267,0.4258214,0.42569026,0.42555922,0.42542833,0.42529753,0.42516688,0.42503634,0.4249059,0.4247756,0.42464542,0.42451537,0.4243854,0.42425558,0.42412588,0.4239963,0.4238668,0.42373747,0.42360824,0.42347914,0.42335013,0.42322126,0.4230925,0.42296386,0.42283535,0.42270693,0.42257863,0.42245045,0.42232242,0.42219445,0.42206663,0.42193893,0.42181134,0.42168385,0.4215565,0.42142925,0.4213021,0.42117512,0.4210482,0.42092142,0.42079473,0.42066818,0.42054173,0.4204154,0.4202892,0.4201631,0.4200371,0.41991124,0.41978547,0.41965982,0.41953427,0.41940886,0.41928354,0.41915834,0.41903326,0.41890827,0.41878343,0.41865864,0.418534,0.4184095,0.41828507,0.41816077,0.41803655,0.41791248,0.4177885,0.41766462,0.41754088,0.41741723,0.4172937,0.4171703,0.41704696,0.41692376,0.41680065,0.41667765,0.41655478,0.41643202,0.41630933,0.41618678,0.41606432,0.415942,0.41581976,0.41569763,0.41557562,0.41545373,0.41533193,0.41521022,0.41508865,0.41496715,0.4148458,0.4147245,0.41460335,0.4144823,0.41436136,0.4142405,0.41411978,0.41399914,0.41387862,0.4137582,0.41363788,0.41351765,0.41339755,0.41327757,0.41315764,0.41303787,0.41291815,0.41279858,0.4126791,0.41255972,0.41244045,0.41232127,0.4122022,0.41208324,0.4119644,0.41184562,0.41172698,0.4116084,0.41148996,0.41137162,0.41125336,0.41113523,0.41101718,0.41089922,0.41078138,0.41066363,0.410546,0.4104285,0.41031104,0.4101937,0.41007647,0.40995935,0.4098423,0.40972537,0.40960854,0.4094918,0.40937516,0.40925863,0.4091422,0.40902588,0.40890962,0.40879348,0.40867746,0.40856153,0.4084457,0.40832993,0.4082143,0.40809873,0.4079833,0.40786794,0.4077527,0.40763754,0.40752247,0.40740752,0.40729266,0.4071779,0.40706322,0.40694866,0.4068342,0.4067198,0.4066055,0.40649134,0.40637723,0.40626326,0.40614936,0.40603554,0.40592185,0.40580824,0.4056947,0.4055813,0.405468,0.40535474,0.4052416,0.40512857,0.40501562,0.40490276,0.40479,0.40467733,0.40456477,0.4044523,0.4043399,0.4042276,0.40411544,0.40400332,0.40389132,0.40377942,0.4036676,0.40355587,0.40344423,0.40333268,0.40322122,0.40310988,0.4029986,0.40288743,0.40277633,0.40266535,0.40255445,0.40244365,0.40233293,0.4022223,0.40211177,0.40200132,0.401891,0.40178072,0.40167055,0.40156046,0.40145048,0.40134057,0.40123078,0.40112105,0.4010114,0.40090188,0.40079242,0.40068308,0.4005738,0.40046462,0.40035552,0.40024653,0.4001376,0.4000288,0.39992005,0.39981142,0.39970285,0.3995944,0.399486,0.3993777,0.3992695,0.39916137,0.39905334,0.39894542,0.39883757,0.39872977,0.39862213,0.3985145,0.398407,0.39829957,0.39819226,0.398085,0.39797786,0.39787078,0.3977638,0.3976569,0.39755008,0.39744335,0.39733672,0.39723018,0.3971237,0.3970173,0.396911,0.3968048,0.39669865,0.39659262,0.39648667,0.39638078,0.39627498,0.3961693,0.39606366,0.39595813,0.39585268,0.39574733,0.39564204,0.39553684,0.39543173,0.3953267,0.39522174,0.3951169,0.3950121,0.39490741,0.3948028,0.39469826,0.3945938,0.39448944,0.39438516,0.39428097,0.39417684,0.39407283,0.39396888,0.393865,0.39376122,0.3936575,0.39355388,0.39345035,0.39334688,0.3932435,0.3931402,0.393037,0.39293385,0.3928308,0.39272782,0.39262494,0.39252213,0.3924194,0.39231676,0.39221418,0.3921117,0.3920093,0.39190695,0.3918047,0.39170253,0.39160043,0.39149845,0.3913965,0.39129466,0.3911929,0.3910912,0.3909896,0.39088807,0.39078662,0.39068523,0.39058393,0.39048272,0.39038157,0.39028051,0.39017954,0.39007863,0.3899778,0.38987708,0.3897764,0.38967583,0.3895753,0.38947487,0.38937452,0.38927424,0.38917404,0.3890739,0.38897386,0.3888739,0.388774,0.3886742,0.38857445,0.3884748,0.3883752,0.38827568,0.38817626,0.3880769,0.38797763,0.38787842,0.3877793,0.38768023,0.38758126,0.38748235,0.38738355,0.3872848,0.3871861,0.3870875,0.386989,0.38689056,0.38679218,0.38669387,0.38659564,0.3864975,0.38639942,0.38630143,0.3862035,0.38610566,0.38600788,0.38591018,0.38581255,0.385715,0.38561752,0.38552013,0.3854228,0.38532552,0.38522837,0.38513124,0.3850342,0.38493723,0.38484034,0.3847435,0.38464677,0.3845501,0.3844535,0.38435698,0.38426054,0.38416415,0.38406783,0.3839716,0.38387546,0.38377935,0.38368332,0.3835874,0.38349152,0.3833957,0.38329998,0.3832043,0.38310874,0.38301322,0.38291776,0.3828224,0.3827271,0.38263187,0.3825367,0.3824416,0.3823466,0.38225165,0.38215676,0.38206196,0.38196722,0.38187256,0.38177797,0.38168344,0.381589,0.38149458,0.3814003,0.38130605,0.38121188,0.38111776,0.38102373,0.38092977,0.38083586,0.38074204,0.3806483,0.3805546,0.38046098,0.38036743,0.38027394,0.38018054,0.38008717,0.37999392,0.3799007,0.37980756,0.3797145,0.3796215,0.37952855,0.3794357,0.3793429,0.37925017,0.3791575,0.37906492,0.3789724,0.37887993,0.37878755,0.37869522,0.37860298,0.3785108,0.37841865,0.37832662,0.37823462,0.3781427,0.37805086,0.37795907,0.37786734,0.3777757,0.37768412,0.3775926,0.37750116,0.3774098,0.37731844,0.3772272,0.37713602,0.3770449,0.37695384,0.37686285,0.37677193,0.37668106,0.37659028,0.37649956,0.3764089,0.3763183,0.3762278,0.37613732,0.37604693,0.3759566,0.37586632,0.3757761,0.375686,0.3755959,0.3755059,0.37541595,0.37532607,0.37523627,0.3751465,0.37505683,0.3749672,0.37487766,0.37478814,0.37469873,0.37460938,0.37452006,0.37443084,0.37434164,0.37425256,0.37416348,0.37407452,0.3739856,0.37389675,0.37380794,0.37371922,0.37363055,0.37354195,0.3734534,0.37336493,0.37327653,0.37318817,0.3730999,0.37301165,0.3729235,0.3728354,0.37274736,0.37265936,0.37257147,0.3724836,0.3723958,0.37230808,0.37222043,0.3721328,0.37204528,0.3719578,0.37187037,0.37178302,0.37169573,0.3716085,0.37152132,0.3714342,0.37134716,0.37126017,0.37117323,0.3710864,0.37099957,0.37091282,0.37082613,0.37073952,0.37065297,0.37056646,0.37048003,0.37039363,0.37030733,0.37022105,0.37013486,0.3700487,0.36996263,0.36987662,0.36979064,0.36970475,0.36961892,0.36953312,0.3694474,0.36936176,0.36927614,0.3691906,0.36910513,0.36901972,0.36893433,0.36884904,0.36876377,0.3686786,0.36859348,0.3685084,0.3684234,0.36833844,0.36825356,0.3681687,0.36808395,0.36799923,0.3679146,0.36782998,0.36774543,0.36766094,0.36757654,0.36749217,0.36740786,0.3673236,0.36723942,0.36715528,0.3670712,0.3669872,0.36690322,0.36681932,0.36673546,0.36665168,0.36656794,0.36648428,0.36640066,0.3663171,0.3662336,0.36615014,0.36606675,0.36598343,0.36590016,0.36581695,0.36573377,0.36565068,0.36556762,0.36548463,0.36540172,0.36531883,0.365236,0.36515322,0.36507052,0.36498788,0.36490527,0.36482275,0.36474025,0.36465782,0.36457545,0.36449313,0.36441088,0.36432868,0.36424652,0.36416444,0.3640824,0.3640004,0.36391848,0.3638366,0.36375478,0.36367303,0.3635913,0.36350965,0.36342806,0.36334652,0.36326504,0.3631836,0.36310223,0.3630209,0.36293963,0.3628584,0.36277726,0.36269614,0.3626151,0.3625341,0.36245316,0.36237228,0.36229143,0.36221066,0.36212993,0.36204925,0.36196864,0.36188808,0.36180755,0.36172712,0.3616467,0.36156636,0.36148605,0.36140582,0.36132562,0.36124548,0.3611654,0.36108539,0.3610054,0.36092547,0.36084563,0.36076578,0.36068603,0.3606063,0.36052665,0.36044705,0.3603675,0.360288,0.36020854,0.36012915,0.3600498,0.3599705,0.3598913,0.3598121,0.35973296,0.3596539,0.35957485,0.35949588,0.35941696,0.35933807,0.35925925,0.35918048,0.35910177,0.35902312,0.3589445,0.35886595,0.35878742,0.35870898,0.35863057,0.3585522,0.3584739,0.35839564,0.35831743,0.3582393,0.35816118,0.35808313,0.35800514,0.35792717,0.3578493,0.35777146,0.35769364,0.35761592,0.35753822,0.3574606,0.35738298,0.35730544,0.35722795,0.35715052,0.35707313,0.3569958,0.35691848,0.35684124,0.35676405,0.35668692,0.35660982,0.35653278,0.3564558,0.35637885,0.35630196,0.35622513,0.35614833,0.3560716,0.3559949,0.35591826,0.35584167,0.35576513,0.35568863,0.3556122,0.3555358,0.35545945,0.35538316,0.35530692,0.35523072,0.35515457,0.35507846,0.3550024,0.3549264,0.35485044,0.35477453,0.3546987,0.35462287,0.3545471,0.35447142,0.35439575,0.35432014,0.35424456,0.35416904,0.35409358,0.35401815,0.35394278,0.35386747,0.3537922,0.35371697,0.35364178,0.35356665,0.35349154,0.3534165,0.35334155,0.3532666,0.3531917,0.35311684,0.35304207,0.3529673,0.3528926,0.35281795,0.35274333,0.35266876,0.35259426,0.3525198,0.35244536,0.352371,0.35229668,0.3522224,0.35214818,0.35207397,0.35199985,0.35192576,0.3518517,0.3517777,0.35170376,0.35162985,0.351556,0.35148218,0.35140842,0.3513347,0.35126102,0.3511874,0.35111383,0.3510403,0.3509668,0.35089338,0.35081998,0.35074663,0.35067332,0.35060006,0.35052687,0.35045367,0.35038057,0.3503075,0.35023448,0.3501615,0.35008854,0.35001567,0.3499428,0.34987,0.34979728,0.34972456,0.34965187,0.34957924,0.3495067,0.34943417,0.3493617,0.34928924,0.34921685,0.34914452,0.3490722,0.34899995,0.34892774,0.34885556,0.34878343,0.34871137,0.34863934,0.34856734,0.3484954,0.3484235,0.34835163,0.3482798,0.34820804,0.34813634,0.34806466,0.34799302,0.34792143,0.34784988,0.34777838,0.3477069,0.3476355,0.34756413,0.3474928,0.34742153,0.3473503,0.3472791,0.34720793,0.34713683,0.34706578,0.34699476,0.34692377,0.34685284,0.34678197,0.34671113,0.34664032,0.34656957,0.34649885,0.34642816,0.34635752,0.34628695,0.3462164,0.3461459,0.34607545,0.34600505,0.34593466,0.34586436,0.34579405,0.34572384,0.34565362,0.34558347,0.34551337,0.34544328,0.34537324,0.34530327,0.34523332,0.34516343,0.34509355,0.34502375,0.34495398,0.34488425,0.34481454,0.3447449,0.3446753,0.34460574,0.34453622,0.34446675,0.3443973,0.3443279,0.34425855,0.34418926,0.34412,0.34405077,0.34398156,0.34391242,0.3438433,0.34377426,0.34370524,0.34363627,0.34356734,0.34349844,0.3434296,0.34336078,0.343292,0.34322327,0.3431546,0.34308594,0.34301734,0.34294876,0.34288025,0.34281176,0.34274334,0.3426749,0.34260657,0.34253827,0.34246996,0.34240174,0.34233356,0.3422654,0.34219727,0.3421292,0.3420612,0.34199318,0.34192523,0.3418573,0.34178945,0.34172162,0.34165382,0.34158608,0.34151837,0.3414507,0.34138307,0.34131548,0.34124795,0.3411804,0.34111297,0.34104553,0.34097815,0.3409108,0.3408435,0.34077623,0.340709,0.34064183,0.34057465,0.34050754,0.34044048,0.34037346,0.34030646,0.3402395,0.3401726,0.3401057,0.3400389,0.33997208,0.33990532,0.33983862,0.33977196,0.33970532,0.33963874,0.33957216,0.33950564,0.33943915,0.33937272,0.33930632,0.33923995,0.33917361,0.33910736,0.3390411,0.3389749,0.33890873,0.3388426,0.3387765,0.33871046,0.33864444,0.33857846,0.33851254,0.33844662,0.33838078,0.33831495,0.33824918,0.3381834,0.33811772,0.33805203,0.3379864,0.3379208,0.33785528,0.33778974,0.33772427,0.33765885,0.33759344,0.33752808,0.33746275,0.3373975,0.33733222,0.337267,0.33720183,0.33713672,0.3370716,0.33700654,0.3369415,0.33687654,0.33681157,0.33674666,0.3366818,0.33661696,0.33655217,0.3364874,0.33642268,0.336358,0.33629334,0.33622873,0.33616418,0.33609962,0.33603513,0.33597067,0.33590624,0.33584186,0.3357775,0.3357132,0.33564892,0.33558467,0.33552048,0.3354563,0.33539218,0.33532807,0.33526403,0.3352,0.33513603,0.33507207,0.33500817,0.3349443,0.33488047,0.33481666,0.33475292,0.33468917,0.33462548,0.33456182,0.33449823,0.33443463,0.3343711,0.33430755,0.3342441,0.33418065,0.33411726,0.33405387,0.33399057,0.33392727,0.333864,0.3338008,0.3337376,0.33367446,0.33361134,0.33354828,0.33348522,0.3334222,0.33335924,0.33329633,0.33323342,0.33317056,0.3331077,0.33304495,0.33298218,0.33291945,0.33285677,0.33279413,0.33273152,0.33266893,0.33260638,0.33254388,0.33248138,0.33241895,0.33235657,0.3322942,0.33223185,0.33216953,0.3321073,0.33204505,0.33198285,0.3319207,0.33185858,0.3317965,0.33173445,0.33167243,0.33161044,0.33154848,0.33148658,0.3314247,0.33136284,0.33130103,0.33123928,0.33117753,0.3311158,0.33105415,0.33099252,0.3309309,0.33086932,0.33080778,0.3307463,0.33068484,0.3306234,0.330562,0.33050063,0.3304393,0.330378,0.33031675,0.3302555,0.33019432,0.33013317,0.33007205,0.33001095,0.3299499,0.32988885,0.32982787,0.32976693,0.32970598,0.3296451,0.32958427,0.32952344,0.32946265,0.3294019,0.32934117,0.3292805,0.32921982,0.32915923,0.32909864,0.32903808,0.32897756,0.3289171,0.32885662,0.3287962,0.3287358,0.32867548,0.32861513,0.32855484,0.3284946,0.32843438,0.3283742,0.32831404,0.32825392,0.32819384,0.32813376,0.32807374,0.32801378,0.32795382,0.32789388,0.32783398,0.32777414,0.32771432,0.3276545,0.32759476,0.32753503,0.32747534,0.32741567,0.32735607,0.32729647,0.3272369,0.32717735,0.32711786,0.3270584,0.32699895,0.32693955,0.3268802,0.32682085,0.32676154,0.3267023,0.32664305,0.32658383,0.32652465,0.32646552,0.32640642,0.32634732,0.32628828,0.32622927,0.3261703,0.32611132,0.3260524,0.32599354,0.32593468,0.32587585,0.32581705,0.3257583,0.32569957,0.32564086,0.3255822,0.32552359,0.32546496,0.3254064,0.32534787,0.32528937,0.32523087,0.32517242,0.32511404,0.32505566,0.3249973,0.32493898,0.3248807,0.32482243,0.32476422,0.32470602,0.32464787,0.32458973,0.32453164,0.3244736,0.32441553,0.32435754,0.32429954,0.3242416,0.3241837,0.32412583,0.32406798,0.32401016,0.32395238,0.3238946,0.3238369,0.3237792,0.32372153,0.3236639,0.32360628,0.3235487,0.3234912,0.32343367,0.32337618,0.32331875,0.32326132,0.32320395,0.32314658,0.32308924,0.32303193,0.32297468,0.32291746,0.32286024,0.32280305,0.32274592,0.32268882,0.32263172,0.32257468,0.32251766,0.32246065,0.3224037,0.32234678,0.32228985,0.322233,0.32217613,0.32211933,0.32206255,0.3220058,0.32194906,0.32189238,0.32183573,0.32177907,0.3217225,0.3216659,0.32160938,0.32155284,0.3214964,0.32143992,0.3213835,0.3213271,0.32127073,0.3212144,0.3211581,0.3211018,0.32104558,0.32098937,0.32093316,0.32087702,0.3208209,0.3207648,0.32070872,0.3206527,0.3205967,0.3205407,0.32048473,0.32042882,0.32037294,0.32031706,0.32026124,0.32020542,0.32014966,0.3200939,0.3200382,0.3199825,0.31992683,0.31987122,0.3198156,0.31976002,0.3197045,0.31964898,0.3195935,0.31953803,0.3194826,0.3194272,0.31937185,0.3193165,0.31926116,0.3192059,0.31915066,0.3190954,0.3190402,0.31898504,0.3189299,0.31887478,0.3188197,0.31876466,0.31870964,0.31865463,0.31859964,0.31854472,0.31848982,0.31843492,0.31838006,0.31832525,0.31827044,0.31821567,0.31816092,0.3181062,0.31805152,0.31799686,0.31794223,0.31788763,0.31783307,0.3177785,0.317724,0.3176695,0.31761503,0.3175606,0.3175062,0.31745183,0.31739748,0.31734318,0.31728888,0.3172346,0.31718037,0.31712615,0.31707197,0.3170178,0.31696367,0.31690958,0.31685552,0.31680146,0.31674746,0.31669345,0.3166395,0.31658557,0.31653166,0.31647778,0.31642392,0.3163701,0.3163163,0.31626254,0.3162088,0.31615508,0.3161014,0.31604773,0.3159941,0.3159405,0.31588694,0.3158334,0.31577986,0.31572637,0.3156729,0.31561944,0.31556603,0.31551266,0.31545928,0.31540596,0.31535265,0.31529936,0.3152461,0.31519288,0.3151397,0.31508654,0.31503338,0.31498027,0.3149272,0.3148741,0.31482106,0.31476805,0.3147151,0.31466213,0.3146092,0.31455627,0.31450343,0.31445056,0.31439775,0.31434494,0.3142922,0.31423944,0.31418672,0.31413403,0.31408137,0.3140287,0.3139761,0.31392354,0.31387097,0.31381842,0.31376594,0.31371346,0.313661,0.3136086,0.3135562,0.3135038,0.31345147,0.31339914,0.31334683,0.3132946,0.31324232,0.3131901,0.31313792,0.31308576,0.3130336,0.31298152,0.31292942,0.31287736,0.31282532,0.31277332,0.31272134,0.31266937,0.31261745,0.31256557,0.31251368,0.31246182,0.31240997,0.3123582,0.3123064,0.31225467,0.31220293,0.31215125,0.31209958,0.3120479,0.3119963,0.3119447,0.31189314,0.31184158,0.31179008,0.31173858,0.3116871,0.31163564,0.31158423,0.31153286,0.31148148,0.31143016,0.31137884,0.31132755,0.31127626,0.31122503,0.31117383,0.31112263,0.31107146,0.31102034,0.3109692,0.31091812,0.31086707,0.31081602,0.310765,0.310714,0.31066307,0.31061214,0.3105612,0.3105103,0.31045946,0.31040862,0.3103578,0.31030703,0.31025627,0.31020552,0.3101548,0.31010413,0.31005347,0.31000283,0.3099522,0.30990162,0.30985105,0.3098005,0.30975,0.3096995,0.30964905,0.3095986,0.3095482,0.3094978,0.30944744,0.3093971,0.30934677,0.3092965,0.3092462,0.30919597,0.30914575,0.30909556,0.30904537,0.30899525,0.30894512,0.30889502,0.30884495,0.3087949,0.30874488,0.30869487,0.3086449,0.30859494,0.30854502,0.3084951,0.30844525,0.3083954,0.30834556,0.30829576,0.30824596,0.30819622,0.30814648,0.30809677,0.3080471,0.30799744,0.30794778,0.30789816,0.30784857,0.307799,0.30774948,0.30769995,0.30765048,0.307601,0.30755153,0.30750212,0.30745274,0.30740336,0.307354,0.30730465,0.30725536,0.3072061,0.30715683,0.3071076,0.3070584,0.3070092,0.30696005,0.3069109,0.3068618,0.3068127,0.30676362,0.3067146,0.30666557,0.30661657,0.30656758,0.30651864,0.3064697,0.3064208,0.30637193,0.30632308,0.30627424,0.30622545,0.30617666,0.3061279,0.30607915,0.30603042,0.30598176,0.3059331,0.30588442,0.30583578,0.3057872,0.30573863,0.30569008,0.30564156,0.30559304,0.30554456,0.3054961,0.30544767,0.30539924,0.30535084,0.30530247,0.30525413,0.3052058,0.3051575,0.30510923,0.30506098,0.30501273,0.30496454,0.30491635,0.3048682,0.30482003,0.30477193,0.30472383,0.30467576,0.30462772,0.30457968,0.3045317,0.3044837,0.30443573,0.3043878,0.3043399,0.304292,0.30424413,0.3041963,0.30414847,0.30410066,0.3040529,0.30400515,0.3039574,0.3039097,0.303862,0.30381435,0.3037667,0.30371907,0.30367148,0.3036239,0.30357635,0.30352882,0.3034813,0.30343384,0.30338636,0.30333892,0.3032915,0.30324408,0.30319673,0.30314937,0.30310205,0.30305472,0.30300745,0.30296016,0.30291295,0.3028657,0.3028185,0.30277136,0.30272418,0.30267707,0.30262995,0.30258286,0.3025358,0.30248874,0.30244172,0.30239472,0.30234775,0.30230078,0.30225384,0.30220693,0.30216005,0.30211318,0.30206636,0.3020195,0.30197272,0.30192593,0.30187917,0.30183244,0.3017857,0.301739,0.30169234,0.3016457,0.30159906,0.30155244,0.30150586,0.3014593,0.30141276,0.30136624,0.30131975,0.30127326,0.3012268,0.30118036,0.30113396,0.30108756,0.3010412,0.30099484,0.3009485,0.3009022,0.3008559,0.30080965,0.3007634,0.30071718,0.30067098,0.3006248,0.30057862,0.3005325,0.3004864,0.30044028,0.3003942,0.30034816,0.30030215,0.30025613,0.30021015,0.30016416,0.30011824,0.30007228,0.3000264,0.29998052,0.29993466,0.29988882,0.29984298,0.29979718,0.2997514,0.29970565,0.2996599,0.2996142,0.2995685,0.29952282,0.29947716,0.29943156,0.29938594,0.29934034,0.29929477,0.29924923,0.2992037,0.2991582,0.2991127,0.29906726,0.2990218,0.29897636,0.29893097,0.29888558,0.29884022,0.29879487,0.29874957,0.29870427,0.29865897,0.29861373,0.2985685,0.29852328,0.29847807,0.29843292,0.29838774,0.29834262,0.2982975,0.2982524,0.2982073,0.29816225,0.29811725,0.29807222,0.29802722,0.29798225,0.2979373,0.29789236,0.29784745,0.29780257,0.29775771,0.29771286,0.297668,0.29762322,0.29757842,0.29753366,0.2974889,0.29744416,0.29739946,0.2973548,0.2973101,0.29726547,0.29722083,0.2971762,0.29713163,0.29708707,0.29704252,0.296998,0.29695347,0.296909,0.29686454,0.29682007,0.29677567,0.29673123,0.29668686,0.29664248,0.29659814,0.29655382,0.2965095,0.29646522,0.29642093,0.2963767,0.29633245,0.29628825,0.29624406,0.2961999,0.29615575,0.2961116,0.2960675,0.2960234,0.29597932,0.2959353,0.29589126,0.29584724,0.29580325,0.2957593,0.29571533,0.29567137,0.29562747,0.29558358,0.2955397,0.29549584,0.29545203,0.2954082,0.2953644,0.29532063,0.29527688,0.29523313,0.2951894,0.2951457,0.29510203,0.29505837,0.2950147,0.29497108,0.2949275,0.2948839,0.29484034,0.2947968,0.29475328,0.29470977,0.2946663,0.2946228,0.29457936,0.29453593,0.2944925,0.29444915,0.29440576,0.2943624,0.29431906,0.29427576,0.29423246,0.29418918,0.29414594,0.2941027,0.2940595,0.29401627,0.2939731,0.29392993,0.29388678,0.29384366,0.29380056,0.29375747,0.2937144,0.29367134,0.29362833,0.29358533,0.29354233,0.29349935,0.2934564,0.29341346,0.29337054,0.29332766,0.29328477,0.29324192,0.29319906,0.29315627,0.29311344,0.29307067,0.29302788,0.29298514,0.29294243,0.2928997,0.29285702,0.29281434,0.2927717,0.29272905,0.29268643,0.29264385,0.29260126,0.2925587,0.29251617,0.29247364,0.29243115,0.29238865,0.29234618,0.29230374,0.2922613,0.2922189,0.29217649,0.2921341,0.29209176,0.29204944,0.2920071,0.2919648,0.2919225,0.29188025,0.291838,0.29179576,0.29175356,0.29171136,0.2916692,0.29162705,0.2915849,0.2915428,0.2915007,0.2914586,0.29141656,0.2913745,0.29133245,0.29129046,0.29124847,0.29120648,0.29116455,0.29112262,0.29108068,0.29103878,0.29099688,0.29095504,0.2909132,0.29087135,0.29082954,0.29078776,0.29074597,0.29070422,0.29066247,0.29062077,0.29057905,0.2905374,0.29049572,0.29045406,0.29041243,0.29037082,0.29032922,0.29028764,0.2902461,0.29020455,0.29016304,0.29012153,0.29008004,0.29003856,0.2899971,0.28995568,0.28991425,0.28987285,0.2898315,0.28979012,0.28974876,0.28970745,0.28966612,0.28962484,0.28958356,0.28954232,0.28950107,0.28945982,0.28941864,0.28937745,0.28933626,0.2892951,0.289254,0.28921288,0.2891718,0.2891307,0.28908962,0.28904858,0.28900754,0.28896654,0.28892556,0.28888458,0.2888436,0.28880265,0.28876173,0.28872085,0.28867993,0.28863907,0.2885982,0.28855738,0.28851655,0.28847575,0.28843498,0.2883942,0.28835344,0.2883127,0.288272,0.28823128,0.2881906,0.28814995,0.2881093,0.28806868,0.28802806,0.28798747,0.28794688,0.28790632,0.2878658,0.28782526,0.28778473,0.28774422,0.28770378,0.2876633,0.28762287,0.28758243,0.28754205,0.28750163,0.28746125,0.2874209,0.28738058,0.28734025,0.28729993,0.28725964,0.28721938,0.2871791,0.28713888,0.28709868,0.28705844,0.28701827,0.2869781,0.28693795,0.2868978,0.2868577,0.28681758,0.2867775,0.2867374,0.28669736,0.28665733,0.2866173,0.2865773,0.28653732,0.28649735,0.2864574,0.28641745,0.28637755,0.28633764,0.28629777,0.2862579,0.28621805,0.2861782,0.2861384,0.28609857,0.28605878,0.28601903,0.28597927,0.28593954,0.28589982,0.28586012,0.28582042,0.28578076,0.2857411,0.28570145,0.28566185,0.28562224,0.28558266,0.28554308,0.2855035,0.285464,0.28542447,0.28538495,0.28534546,0.285306,0.28526655,0.2852271,0.28518766,0.28514826,0.28510886,0.2850695,0.28503016,0.28499082,0.28495148,0.28491217,0.2848729,0.2848336,0.28479433,0.28475508,0.28471586,0.28467664,0.28463745,0.2845983,0.2845591,0.28451997,0.28448084,0.2844417,0.2844026,0.28436354,0.28432447,0.28428543,0.28424639,0.28420737,0.28416836,0.28412938,0.2840904,0.28405145,0.28401253,0.2839736,0.28393468,0.2838958,0.28385693,0.28381807,0.28377923,0.2837404,0.2837016,0.2836628,0.283624,0.28358525,0.2835465,0.28350776,0.28346905,0.28343037,0.28339168,0.283353,0.28331435,0.28327572,0.2832371,0.28319848,0.2831599,0.28312135,0.28308278,0.28304422,0.2830057,0.2829672,0.2829287,0.28289023,0.28285176,0.2828133,0.2827749,0.28273645,0.28269807,0.28265968,0.28262132,0.28258297,0.2825446,0.2825063,0.282468,0.2824297,0.28239143,0.28235316,0.28231493,0.2822767,0.28223848,0.28220028,0.2821621,0.28212395,0.28208578,0.28204766,0.2820095,0.28197142,0.28193334,0.28189525,0.2818572,0.28181916,0.28178114,0.2817431,0.28170514,0.28166714,0.28162917,0.2815912,0.2815533,0.28151536,0.28147745,0.28143957,0.2814017,0.28136384,0.281326,0.28128818,0.28125036,0.28121257,0.28117478,0.28113702,0.28109926,0.28106153,0.2810238,0.2809861,0.2809484,0.28091073,0.28087306,0.28083542,0.28079778,0.28076017,0.28072256,0.28068498,0.28064743,0.28060985,0.28057232,0.2805348,0.28049728,0.2804598,0.2804223,0.28038484,0.28034738,0.28030995,0.28027254,0.28023514,0.28019774,0.28016037,0.28012303,0.28008565,0.28004834,0.28001103,0.27997372,0.27993643,0.27989915,0.2798619,0.27982467,0.27978745,0.27975023,0.27971303,0.27967584,0.27963868,0.2796015,0.2795644,0.27952728,0.27949017,0.27945307,0.279416,0.27937892,0.27934188,0.27930486,0.27926782,0.27923083,0.27919382,0.27915686,0.2791199,0.27908295,0.27904603,0.2790091,0.2789722,0.2789353,0.27889845,0.27886158,0.27882475,0.2787879,0.2787511,0.2787143,0.27867752,0.27864075,0.278604,0.27856725,0.27853054,0.27849382,0.2784571,0.27842045,0.27838376,0.2783471,0.27831048,0.27827385,0.27823722,0.27820066,0.27816406,0.2781275,0.27809092,0.27805442,0.27801788,0.27798137,0.27794486,0.27790838,0.27787194,0.27783546,0.27779904,0.27776262,0.2777262,0.2776898,0.27765343,0.27761707,0.2775807,0.27754438,0.27750805,0.27747175,0.27743545,0.27739915,0.27736288,0.27732664,0.2772904,0.2772542,0.27721798,0.27718177,0.2771456,0.27710944,0.27707326,0.27703714,0.277001,0.2769649,0.2769288,0.27689272,0.27685666,0.2768206,0.27678457,0.27674854,0.27671254,0.27667654,0.27664053,0.27660456,0.27656862,0.27653268,0.27649674,0.27646083,0.27642494,0.27638903,0.27635318,0.27631733,0.27628148,0.27624565,0.27620983,0.27617404,0.27613825,0.27610245,0.2760667,0.27603096,0.27599522,0.2759595,0.2759238,0.27588812,0.27585244,0.27581677,0.27578112,0.27574548,0.27570987,0.27567425,0.27563867,0.2756031,0.2755675,0.27553195,0.27549642,0.2754609,0.27542537,0.27538988,0.27535442,0.27531892,0.27528346,0.27524802,0.2752126,0.27517718,0.27514178,0.2751064,0.27507102,0.27503565,0.2750003,0.274965,0.27492964,0.27489436,0.27485904,0.27482378,0.2747885,0.27475324,0.27471802,0.2746828,0.2746476,0.27461237,0.2745772,0.27454203,0.27450687,0.27447173,0.2744366,0.2744015,0.27436638,0.27433127,0.27429622,0.27426115,0.2742261,0.27419105,0.27415603,0.27412102,0.27408603,0.27405104,0.27401608,0.27398112,0.27394617,0.27391127,0.27387634,0.27384144,0.27380654,0.27377167,0.2737368,0.27370197,0.27366713,0.2736323,0.27359748,0.2735627,0.27352792,0.27349314,0.2734584,0.27342364,0.27338892,0.2733542,0.27331948,0.27328482,0.27325013,0.27321547,0.2731808,0.27314618,0.27311155,0.27307695,0.27304235,0.27300775,0.27297318,0.27293864,0.27290407,0.27286956,0.27283505,0.27280053,0.27276602,0.27273154,0.2726971,0.27266264,0.2726282,0.27259377,0.27255934,0.27252495,0.27249056,0.2724562,0.2724218,0.27238747,0.27235314,0.2723188,0.2722845,0.2722502,0.27221593,0.27218166,0.2721474,0.27211314,0.2720789,0.2720447,0.27201048,0.2719763,0.2719421,0.27190796,0.27187377,0.27183965,0.27180552,0.2717714,0.2717373,0.2717032,0.27166912,0.27163506,0.27160102,0.27156696,0.27153295,0.27149892,0.2714649,0.27143094,0.27139696,0.271363,0.27132905,0.2712951,0.2712612,0.27122727,0.2711934,0.27115947,0.2711256,0.27109176,0.2710579,0.27102405,0.27099022,0.27095643,0.27092263,0.27088884,0.27085507,0.2708213,0.27078757,0.27075383,0.27072012,0.2706864,0.2706527,0.270619,0.27058536,0.27055168,0.27051803,0.2704844,0.2704508,0.27041718,0.27038357,0.27034998,0.27031642,0.27028286,0.2702493,0.27021578,0.27018225,0.27014875,0.27011526,0.27008176,0.2700483,0.27001482,0.26998138,0.26994795,0.26991454,0.26988113,0.26984772,0.26981434,0.26978096,0.2697476,0.26971427,0.26968092,0.2696476,0.26961428,0.269581,0.2695477,0.26951444,0.26948118,0.26944792,0.2694147,0.26938146,0.26934823,0.26931506,0.26928186,0.2692487,0.26921552,0.26918238,0.26914924,0.2691161,0.269083,0.26904988,0.2690168,0.26898372,0.26895067,0.26891762,0.26888457,0.26885152,0.26881853,0.2687855,0.26875252,0.26871955,0.26868656,0.26865363,0.26862067,0.26858774,0.26855484,0.2685219,0.268489,0.26845613,0.26842326,0.26839042,0.26835755,0.26832473,0.2682919,0.26825908,0.2682263,0.2681935,0.26816073,0.26812798,0.26809523,0.26806247,0.26802975,0.26799703,0.26796433,0.26793164,0.26789895,0.2678663,0.26783365,0.267801,0.26776835,0.26773575,0.26770315,0.26767054,0.26763797,0.2676054,0.26757282,0.26754028,0.26750773,0.26747522,0.2674427,0.26741022,0.26737773,0.26734525,0.26731277,0.2672803,0.2672479,0.26721546,0.26718304,0.26715064,0.26711825,0.26708585,0.26705348,0.26702112,0.26698878,0.26695645,0.2669241,0.2668918,0.2668595,0.26682723,0.26679495,0.26676267,0.26673043,0.26669818,0.26666597,0.26663375,0.26660153,0.26656935,0.26653716,0.26650497,0.26647282,0.26644066,0.26640853,0.2663764,0.2663443,0.26631218,0.2662801,0.26624802,0.26621595,0.2661839,0.26615188,0.26611984,0.2660878,0.2660558,0.2660238,0.2659918,0.26595983,0.26592788,0.26589593,0.26586398,0.26583207,0.26580015,0.26576823,0.26573634,0.26570445,0.2656726,0.26564074,0.26560888,0.26557705,0.26554522,0.26551342,0.26548162,0.26544982,0.26541805,0.26538628,0.2653545,0.26532277,0.26529104,0.26525933,0.2652276,0.2651959,0.26516423,0.26513255,0.26510087,0.26506922,0.26503757,0.26500595,0.26497433,0.2649427,0.26491112,0.26487952,0.26484796,0.2648164,0.26478484,0.26475328,0.26472178,0.26469025,0.26465875,0.26462725,0.26459578,0.26456428,0.26453283,0.2645014,0.26446995,0.2644385,0.2644071,0.2643757,0.26434427,0.2643129,0.26428154,0.26425016,0.2642188,0.26418748,0.26415613,0.26412484,0.26409352,0.26406223,0.26403096,0.26399967,0.2639684,0.26393718,0.26390594,0.2638747,0.26384348,0.26381227,0.26378107,0.2637499,0.26371872,0.26368755,0.2636564,0.26362526,0.26359415,0.26356304,0.26353192,0.2635008,0.26346973,0.26343867,0.26340762,0.26337656,0.2633455,0.2633145,0.26328346,0.26325247,0.26322147,0.26319048,0.26315948,0.26312852,0.26309758,0.26306665,0.2630357,0.26300478,0.26297387,0.26294297,0.2629121,0.26288122,0.26285034,0.2628195,0.26278865,0.2627578,0.262727,0.26269618,0.2626654,0.2626346,0.26260382,0.26257303,0.26254228,0.26251155,0.2624808,0.26245007,0.26241937,0.26238868,0.26235798,0.26232728,0.26229662,0.26226595,0.2622353,0.26220468,0.26217404,0.26214343,0.26211283,0.26208222,0.26205164,0.26202106,0.2619905,0.26195994,0.2619294,0.26189888,0.26186836,0.26183784,0.26180735,0.26177683,0.26174638,0.26171592,0.26168546,0.261655,0.26162457,0.26159415,0.26156372,0.26153332,0.26150292,0.26147255,0.26144218,0.26141182,0.26138145,0.2613511,0.2613208,0.26129046,0.26126015,0.26122987,0.26119956,0.26116928,0.26113904,0.2611088,0.26107854,0.2610483,0.26101807,0.26098785,0.26095766,0.26092747,0.26089728,0.2608671,0.26083693,0.2608068,0.26077664,0.2607465,0.26071638,0.26068628,0.26065618,0.2606261,0.260596,0.26056597,0.2605359,0.26050586,0.2604758,0.26044577,0.26041576,0.26038575,0.26035577,0.2603258,0.2602958,0.26026583,0.2602359,0.26020595,0.260176,0.26014608,0.2601162,0.26008627,0.26005638,0.2600265,0.25999662,0.25996676,0.25993693,0.2599071,0.25987726,0.25984743,0.25981763,0.25978783,0.25975803,0.25972825,0.25969848,0.25966874,0.25963897,0.25960925,0.2595795,0.2595498,0.25952008,0.2594904,0.25946072,0.25943103,0.25940135,0.2593717,0.25934207,0.25931242,0.2592828,0.25925317,0.25922358,0.259194,0.2591644,0.25913483,0.25910527,0.2590757,0.25904614,0.25901663,0.2589871,0.25895756,0.25892806,0.2588986,0.2588691,0.2588396,0.25881016,0.25878072,0.25875127,0.25872183,0.2586924,0.258663,0.25863358,0.2586042,0.2585748,0.25854543,0.25851607,0.25848672,0.25845736,0.25842804,0.2583987,0.25836942,0.2583401,0.2583108,0.25828153,0.25825226,0.258223,0.25819373,0.2581645,0.25813526,0.25810602,0.25807682,0.2580476,0.2580184,0.25798923,0.25796005,0.2579309,0.25790173,0.25787258,0.25784346,0.25781432,0.2577852,0.2577561,0.257727,0.25769794,0.25766885,0.2576398,0.2576107,0.25758168,0.25755265,0.25752363,0.2574946,0.2574656,0.2574366,0.2574076,0.25737864,0.25734967,0.2573207,0.25729176,0.25726283,0.2572339,0.25720498,0.25717604,0.25714716,0.25711825,0.25708938,0.25706053,0.25703165,0.2570028,0.25697395,0.25694513,0.2569163,0.2568875,0.2568587,0.25682992,0.25680113,0.25677234,0.25674358,0.25671482,0.2566861,0.25665736,0.25662863,0.2565999,0.2565712,0.2565425,0.25651383,0.25648513,0.25645646,0.25642782,0.25639918,0.25637054,0.2563419,0.25631326,0.25628468,0.25625607,0.2562275,0.2561989,0.25617033,0.25614175,0.2561132,0.25608468,0.25605613,0.2560276,0.2559991,0.2559706,0.2559421,0.25591362,0.25588512,0.25585666,0.2558282,0.25579977,0.25577134,0.2557429,0.25571448,0.25568607,0.25565767,0.25562927,0.2556009,0.25557253,0.25554416,0.2555158,0.25548747,0.25545913,0.25543082,0.25540248,0.2553742,0.25534588,0.2553176,0.25528932,0.25526106,0.2552328,0.25520456,0.2551763,0.25514808,0.25511986,0.25509164,0.25506344,0.25503525,0.25500706,0.2549789,0.25495073,0.25492257,0.2548944,0.25486627,0.25483814,0.25481004,0.25478193,0.25475383,0.25472572,0.25469765,0.25466958,0.2546415,0.25461346,0.25458542,0.25455737,0.25452936,0.25450134,0.25447333,0.25444534,0.25441733,0.25438938,0.2543614,0.25433344,0.25430548,0.25427753,0.2542496,0.25422168,0.25419375,0.25416586,0.25413796,0.25411007,0.2540822,0.25405434,0.25402647,0.2539986,0.25397077,0.25394294,0.25391513,0.2538873,0.2538595,0.2538317,0.2538039,0.25377613,0.25374836,0.2537206,0.25369287,0.25366512,0.25363737,0.25360966,0.25358194,0.25355425,0.25352654,0.25349885,0.25347117,0.2534435,0.25341585,0.2533882,0.25336057,0.25333294,0.25330532,0.2532777,0.2532501,0.2532225,0.2531949,0.25316733,0.25313976,0.2531122,0.25308463,0.2530571,0.25302956,0.25300205,0.2529745,0.25294703,0.25291952,0.25289205,0.25286454,0.2528371,0.2528096,0.25278217,0.25275472,0.2527273,0.25269985,0.25267243,0.25264505,0.25261763,0.25259024,0.25256288,0.2525355,0.25250813,0.25248078,0.25245342,0.2524261,0.25239876,0.25237146,0.25234413,0.25231683,0.25228953,0.25226226,0.252235,0.25220773,0.25218046,0.25215322,0.25212598,0.25209874,0.25207153,0.25204432,0.2520171,0.2519899,0.25196272,0.25193554,0.2519084,0.2518812,0.25185406,0.2518269,0.2517998,0.25177267,0.25174555,0.25171843,0.25169134,0.25166425,0.25163716,0.2516101,0.25158304,0.25155598,0.25152892,0.2515019,0.25147486,0.25144786,0.25142083,0.25139382,0.25136682,0.25133985,0.25131288,0.2512859,0.25125894,0.251232,0.25120506,0.25117812,0.2511512,0.25112426,0.25109738,0.25107047,0.2510436,0.2510167,0.25098982,0.25096297,0.25093612,0.25090927,0.25088242,0.2508556,0.25082877,0.25080195,0.25077516,0.25074837,0.25072157,0.2506948,0.25066802,0.25064126,0.25061452,0.25058776,0.25056103,0.2505343,0.2505076,0.2504809,0.2504542,0.25042748,0.2504008,0.25037414,0.25034747,0.2503208,0.25029415,0.2502675,0.25024086,0.25021425,0.25018764,0.25016102,0.25013444,0.25010785,0.25008127,0.2500547,0.2500281,0.25000158,0.24997501,0.24994847,0.24992193,0.24989541,0.2498689,0.2498424,0.24981591,0.24978942,0.24976294,0.24973646,0.24971,0.24968353,0.2496571,0.24963066,0.24960423,0.2495778,0.24955139,0.24952498,0.24949859,0.24947219,0.24944583,0.24941945,0.24939309,0.24936673,0.24934039,0.24931404,0.24928771,0.24926141,0.2492351,0.24920878,0.24918248,0.24915619,0.2491299,0.24910364,0.24907736,0.24905112,0.24902488,0.24899864,0.24897242,0.24894619,0.24891996,0.24889377,0.24886757,0.24884139,0.24881521,0.24878903,0.24876286,0.24873671,0.24871056,0.24868442,0.2486583,0.24863218,0.24860606,0.24857995,0.24855386,0.24852777,0.24850167,0.24847561,0.24844955,0.24842349,0.24839744,0.24837139,0.24834536,0.24831934,0.24829333,0.24826732,0.24824132,0.24821533,0.24818935,0.24816337,0.2481374,0.24811144,0.2480855,0.24805956,0.24803361,0.24800768,0.24798177,0.24795586,0.24792996,0.24790406,0.2478782,0.24785231,0.24782644,0.24780057,0.24777472,0.24774887,0.24772303,0.24769722,0.2476714,0.24764557,0.24761978,0.24759397,0.24756818,0.2475424,0.24751663,0.24749087,0.24746512,0.24743937,0.24741362,0.24738789,0.24736217,0.24733645,0.24731074,0.24728505,0.24725935,0.24723366,0.24720798,0.24718232,0.24715665,0.24713102,0.24710537,0.24707973,0.2470541,0.24702848,0.24700287,0.24697725,0.24695165,0.24692608,0.2469005,0.24687493,0.24684936,0.2468238,0.24679825,0.2467727,0.2467472,0.24672166,0.24669614,0.24667063,0.24664512,0.24661963,0.24659415,0.24656866,0.24654321,0.24651775,0.2464923,0.24646685,0.24644141,0.24641597,0.24639055,0.24636514,0.24633974,0.24631433,0.24628894,0.24626356,0.24623819,0.24621281,0.24618745,0.24616212,0.24613677,0.24611142,0.24608609,0.24606077,0.24603546,0.24601015,0.24598487,0.24595958,0.2459343,0.24590902,0.24588375,0.24585849,0.24583323,0.24580799,0.24578278,0.24575755,0.24573232,0.24570711,0.24568191,0.24565671,0.24563152,0.24560635,0.24558118,0.24555601,0.24553084,0.2455057,0.24548055,0.24545541,0.24543029,0.24540518,0.24538007,0.24535497,0.24532987,0.24530478,0.2452797,0.24525462,0.24522957,0.24520451,0.24517946,0.24515443,0.24512938,0.24510436,0.24507934,0.24505432,0.24502933,0.24500433,0.24497934,0.24495436,0.24492939,0.24490441,0.24487945,0.24485452,0.24482958,0.24480464,0.24477972,0.24475479,0.24472988,0.24470498,0.24468008,0.24465519,0.24463032,0.24460544,0.24458057,0.24455571,0.24453086,0.24450602,0.24448119,0.24445637,0.24443154,0.24440672,0.24438192,0.24435711,0.24433233,0.24430753,0.24428278,0.244258,0.24423324,0.24420848,0.24418373,0.244159,0.24413426,0.24410956,0.24408484,0.24406013,0.24403544,0.24401073,0.24398606,0.24396136,0.2439367,0.24391204,0.2438874,0.24386273,0.2438381,0.24381347,0.24378884,0.24376422,0.24373962,0.24371502,0.24369042,0.24366583,0.24364124,0.24361667,0.2435921,0.24356754,0.243543,0.24351846,0.24349391,0.24346939,0.24344486,0.24342035,0.24339584,0.24337135,0.24334686,0.24332237,0.24329789,0.24327342,0.24324895,0.2432245,0.24320005,0.24317563,0.24315119,0.24312676,0.24310234,0.24307793,0.24305353,0.24302913,0.24300475,0.24298038,0.242956,0.24293162,0.24290727,0.2428829,0.24285856,0.24283423,0.2428099,0.24278559,0.24276127,0.24273695,0.24271266,0.24268836,0.24266407,0.24263981,0.24261554,0.24259126,0.242567,0.24254276,0.24251851,0.24249427,0.24247004,0.24244584,0.24242163,0.24239741,0.24237321,0.24234901,0.24232483,0.24230066,0.24227649,0.24225233,0.24222818,0.24220403,0.24217989,0.24215575,0.24213162,0.2421075,0.2420834,0.24205929,0.2420352,0.2420111,0.241987,0.24196294,0.24193886,0.24191481,0.24189076,0.24186671,0.24184267,0.24181864,0.2417946,0.24177058,0.24174657,0.24172257,0.24169858,0.24167459,0.2416506,0.24162662,0.24160266,0.24157868,0.24155475,0.24153079,0.24150686,0.24148291,0.241459,0.24143507,0.24141116,0.24138725,0.24136336,0.24133947,0.24131559,0.24129172,0.24126785,0.24124397,0.24122012,0.24119627,0.24117243,0.2411486,0.24112478,0.24110095,0.24107714,0.24105333,0.24102953,0.24100575,0.24098197,0.24095818,0.24093442,0.24091065,0.2408869,0.24086314,0.2408394,0.24081567,0.24079195,0.24076822,0.2407445,0.2407208,0.24069709,0.2406734,0.24064972,0.24062604,0.24060237,0.2405787,0.24055503,0.24053138,0.24050774,0.24048412,0.24046049,0.24043685,0.24041323,0.24038963,0.24036603,0.24034242,0.24031883,0.24029526,0.24027169,0.24024811,0.24022456,0.240201,0.24017745,0.24015391,0.2401304,0.24010687,0.24008334,0.24005982,0.24003632,0.24001282,0.23998933,0.23996586,0.23994237,0.2399189,0.23989543,0.23987198,0.23984852,0.23982507,0.23980165,0.23977822,0.2397548,0.23973137,0.23970796,0.23968457,0.23966117,0.23963778,0.2396144,0.23959103,0.23956765,0.2395443,0.23952094,0.23949759,0.23947425,0.23945092,0.2394276,0.23940428,0.23938096,0.23935765,0.23933434,0.23931105,0.23928776,0.2392645,0.23924123,0.23921795,0.23919469,0.23917145,0.2391482,0.23912495,0.23910172,0.2390785,0.23905529,0.23903207,0.23900886,0.23898566,0.23896247,0.23893929,0.23891611,0.23889294,0.23886977,0.23884661,0.23882347,0.23880032,0.23877718,0.23875405,0.23873094,0.23870781,0.2386847,0.2386616,0.2386385,0.23861541,0.23859233,0.23856926,0.23854618,0.23852313,0.23850006,0.238477,0.23845397,0.23843092,0.2384079,0.23838487,0.23836187,0.23833884,0.23831584,0.23829284,0.23826985,0.23824687,0.2382239,0.23820093,0.23817797,0.238155,0.23813206,0.23810911,0.23808616,0.23806323,0.23804033,0.23801741,0.23799449,0.23797159,0.23794869,0.2379258,0.23790291,0.23788004,0.23785716,0.2378343,0.23781145,0.23778859,0.23776574,0.2377429,0.23772007,0.23769726,0.23767443,0.23765162,0.23762882,0.23760602,0.23758322,0.23756044,0.23753767,0.2375149,0.23749213,0.23746936,0.2374466,0.23742387,0.23740111,0.23737839,0.23735566,0.23733294,0.23731023,0.23728752,0.23726483,0.23724212,0.23721944,0.23719676,0.2371741,0.23715141,0.23712875,0.2371061,0.23708345,0.2370608,0.23703817,0.23701555,0.23699293,0.2369703,0.2369477,0.2369251,0.23690249,0.2368799,0.23685732,0.23683475,0.23681217,0.23678961,0.23676705,0.2367445,0.23672195,0.2366994,0.23667689,0.23665436,0.23663184,0.23660932,0.23658682,0.23656431,0.23654182,0.23651934,0.23649687,0.23647438,0.23645191,0.23642945,0.236407,0.23638454,0.2363621,0.23633967,0.23631725,0.23629482,0.2362724,0.23624998,0.23622759,0.23620518,0.2361828,0.23616041,0.23613803,0.23611566,0.2360933,0.23607093,0.23604858,0.23602623,0.23600389,0.23598157,0.23595923,0.23593691,0.23591459,0.23589228,0.23586997,0.2358477,0.2358254,0.23580311,0.23578084,0.23575856,0.2357363,0.23571403,0.23569179,0.23566955,0.2356473,0.23562507,0.23560284,0.23558062,0.2355584,0.2355362,0.235514,0.23549181,0.23546962,0.23544744,0.23542525,0.23540308,0.23538092,0.23535876,0.23533662,0.23531447,0.23529233,0.23527019,0.23524806,0.23522595,0.23520383,0.23518173,0.23515962,0.23513754,0.23511544,0.23509336,0.23507127,0.2350492,0.23502713,0.2350051,0.23498304,0.23496099,0.23493895,0.23491691,0.23489489,0.23487286,0.23485085,0.23482884,0.23480685,0.23478484,0.23476286,0.23474087,0.23471889,0.23469692,0.23467496,0.234653,0.23463105,0.2346091,0.23458716,0.23456523,0.2345433,0.23452137,0.23449945,0.23447755,0.23445565,0.23443374,0.23441185,0.23438996,0.23436809,0.23434623,0.23432435,0.23430249,0.23428063,0.23425879,0.23423694,0.2342151,0.23419328,0.23417145,0.23414963,0.23412782,0.23410602,0.23408422,0.23406242,0.23404063,0.23401886,0.23399708,0.2339753,0.23395355,0.2339318,0.23391004,0.23388828,0.23386656,0.23384483,0.23382309,0.23380138,0.23377965,0.23375794,0.23373625,0.23371455,0.23369287,0.23367117,0.23364949,0.23362783,0.23360616,0.2335845,0.23356284,0.2335412,0.23351955,0.23349792,0.23347628,0.23345466,0.23343304,0.23341143,0.23338982,0.23336823,0.23334663,0.23332505,0.23330346,0.23328188,0.2332603,0.23323874,0.2332172,0.23319563,0.23317409,0.23315255,0.233131,0.23310949,0.23308796,0.23306645,0.23304494,0.23302343,0.23300193,0.23298045,0.23295896,0.23293747,0.232916,0.23289454,0.23287307,0.23285161,0.23283015,0.23280871,0.23278727,0.23276584,0.23274441,0.232723,0.23270157,0.23268017,0.23265876,0.23263736,0.23261596,0.23259458,0.23257321,0.23255183,0.23253046,0.23250909,0.23248774,0.23246638,0.23244505,0.23242371,0.23240237,0.23238105,0.23235972,0.23233841,0.23231709,0.2322958,0.23227449,0.23225321,0.23223191,0.23221064,0.23218936,0.2321681,0.23214683,0.23212557,0.23210433,0.23208308,0.23206183,0.2320406,0.23201938,0.23199815,0.23197693,0.23195572,0.23193453,0.23191333,0.23189214,0.23187095,0.23184976,0.23182859,0.23180741,0.23178625,0.23176509,0.23174395,0.2317228,0.23170166,0.23168051,0.23165938,0.23163827,0.23161715,0.23159604,0.23157494,0.23155384,0.23153274,0.23151164,0.23149055,0.2314695,0.23144841,0.23142736,0.23140629,0.23138523,0.23136419,0.23134314,0.2313221,0.23130108,0.23128006,0.23125903,0.23123802,0.23121701,0.231196,0.231175,0.23115402,0.23113303,0.23111205,0.23109108,0.2310701,0.23104915,0.23102818,0.23100723,0.2309863,0.23096536,0.23094442,0.23092349,0.23090257,0.23088165,0.23086073,0.23083983,0.23081894,0.23079804,0.23077714,0.23075627,0.23073539,0.23071451,0.23069364,0.23067279,0.23065194,0.23063108,0.23061024,0.2305894,0.23056857,0.23054774,0.23052692,0.2305061,0.2304853,0.2304645,0.2304437,0.2304229,0.23040211,0.23038132,0.23036057,0.2303398,0.23031902,0.23029827,0.23027751,0.23025677,0.23023602,0.2302153,0.23019455,0.23017383,0.23015311,0.2301324,0.23011169,0.23009098,0.23007028,0.2300496,0.23002891,0.23000823,0.22998755,0.22996688,0.22994621,0.22992556,0.22990492,0.22988427,0.22986363,0.22984299,0.22982235,0.22980173,0.2297811,0.22976048,0.22973989,0.22971928,0.22969869,0.2296781,0.2296575,0.22963692,0.22961634,0.2295958,0.22957522,0.22955467,0.2295341,0.22951356,0.22949302,0.22947247,0.22945194,0.22943144,0.22941092,0.2293904,0.22936988,0.22934937,0.22932889,0.22930838,0.22928791,0.22926742,0.22924694,0.22922647,0.22920601,0.22918555,0.22916509,0.22914465,0.2291242,0.22910377,0.22908333,0.22906291,0.22904249,0.22902207,0.22900166,0.22898126,0.22896086,0.22894046,0.22892007,0.22889969,0.22887932,0.22885893,0.22883856,0.22881822,0.22879785,0.22877751,0.22875716,0.22873682,0.22871648,0.22869615,0.22867584,0.22865552,0.2286352,0.2286149,0.2285946,0.2285743,0.22855401,0.22853372,0.22851345,0.22849317,0.2284729,0.22845264,0.22843237,0.22841212,0.22839187,0.22837164,0.2283514,0.22833116,0.22831094,0.22829072,0.2282705,0.2282503,0.22823009,0.2282099,0.2281897,0.22816952,0.22814932,0.22812915,0.22810897,0.2280888,0.22806865,0.22804849,0.22802834,0.2280082,0.22798805,0.22796792,0.22794779,0.22792765,0.22790755,0.22788744,0.22786732,0.22784722,0.22782712,0.22780703,0.22778694,0.22776686,0.22774678,0.22772671,0.22770664,0.22768658,0.22766653,0.22764647,0.22762643,0.2276064,0.22758636,0.22756633,0.2275463,0.22752629,0.22750628,0.22748627,0.22746627,0.22744627,0.22742628,0.2274063,0.22738631,0.22736633,0.22734636,0.2273264,0.22730644,0.22728649,0.22726654,0.22724658,0.22722664,0.2272067,0.22718678,0.22716686,0.22714695,0.22712703,0.22710712,0.22708721,0.22706732,0.22704743,0.22702754,0.22700767,0.2269878,0.22696792,0.22694805,0.22692819,0.22690833,0.22688848,0.22686864,0.2268488,0.22682896,0.22680913,0.22678931,0.22676949,0.22674967,0.22672985,0.22671007,0.22669026,0.22667047,0.22665069,0.2266309,0.22661112,0.22659135,0.22657159,0.22655182,0.22653206,0.22651231,0.22649257,0.22647282,0.22645308,0.22643337,0.22641364,0.22639391,0.2263742,0.22635448,0.22633478,0.22631507,0.22629538,0.2262757,0.22625601,0.22623633,0.22621664,0.22619697,0.22617732,0.22615765,0.22613801,0.22611836,0.22609872,0.22607908,0.22605944,0.22603981,0.22602019,0.22600056,0.22598097,0.22596136,0.22594175,0.22592215,0.22590256,0.22588296,0.22586338,0.22584382,0.22582424,0.22580467,0.2257851,0.22576554,0.22574599,0.22572644,0.2257069,0.22568737,0.22566783,0.22564831,0.2256288,0.22560927,0.22558975,0.22557025,0.22555076,0.22553127,0.22551177,0.22549228,0.2254728,0.22545332,0.22543384,0.22541438,0.22539493,0.22537547,0.22535601,0.22533657,0.22531714,0.22529769,0.22527826,0.22525884,0.22523943,0.22522001,0.2252006,0.22518119,0.22516179,0.22514239,0.22512299,0.22510362,0.22508423,0.22506486,0.22504549,0.22502612,0.22500676,0.2249874,0.22496806,0.22494872,0.22492938,0.22491004,0.22489071,0.22487138,0.22485206,0.22483274,0.22481343,0.22479413,0.22477482,0.22475553,0.22473624,0.22471695,0.22469766,0.2246784,0.22465913,0.22463986,0.2246206,0.22460134,0.22458209,0.22456284,0.2245436,0.22452436,0.22450514,0.2244859,0.22446668,0.22444747,0.22442825,0.22440904,0.22438985,0.22437066,0.22435147,0.22433227,0.2243131,0.22429392,0.22427474,0.22425558,0.22423641,0.22421727,0.2241981,0.22417895,0.2241598,0.22414067,0.22412154,0.22410242,0.22408329,0.22406417,0.22404505,0.22402595,0.22400685,0.22398774,0.22396865,0.22394957,0.22393048,0.2239114,0.22389233,0.22387326,0.2238542,0.22383513,0.22381608,0.22379704,0.223778,0.22375895,0.2237399,0.22372088,0.22370185,0.22368282,0.22366382,0.22364481,0.2236258,0.2236068],"x":[3.0,3.0033986405437827,3.006797281087565,3.0101959216313476,3.01359456217513,3.0169932027189126,3.020391843262695,3.0237904838064775,3.0271891243502598,3.0305877648940425,3.0339864054378247,3.0373850459816074,3.0407836865253897,3.0441823270691724,3.0475809676129546,3.0509796081567373,3.05437824870052,3.0577768892443022,3.061175529788085,3.064574170331867,3.06797281087565,3.071371451419432,3.074770091963215,3.078168732506997,3.0815673730507798,3.084966013594562,3.0883646541383447,3.091763294682127,3.0951619352259097,3.098560575769692,3.1019592163134746,3.1053578568572573,3.1087564974010395,3.1121551379448222,3.1155537784886045,3.118952419032387,3.1223510595761694,3.125749700119952,3.1291483406637344,3.132546981207517,3.1359456217512993,3.139344262295082,3.1427429028388643,3.146141543382647,3.1495401839264296,3.152938824470212,3.1563374650139946,3.159736105557777,3.1631347461015595,3.166533386645342,3.1699320271891245,3.1733306677329067,3.1767293082766894,3.1801279488204717,3.1835265893642544,3.1869252299080366,3.1903238704518193,3.1937225109956016,3.1971211515393843,3.200519792083167,3.203918432626949,3.207317073170732,3.210715713714514,3.214114354258297,3.217512994802079,3.220911635345862,3.224310275889644,3.2277089164334267,3.231107556977209,3.2345061975209917,3.237904838064774,3.2413034786085566,3.244702119152339,3.2481007596961216,3.2514994002399042,3.2548980407836865,3.258296681327469,3.2616953218712514,3.265093962415034,3.2684926029588164,3.271891243502599,3.2752898840463813,3.278688524590164,3.2820871651339463,3.285485805677729,3.288884446221511,3.292283086765294,3.295681727309076,3.299080367852859,3.3024790083966415,3.305877648940424,3.3092762894842065,3.3126749300279887,3.3160735705717714,3.3194722111155537,3.3228708516593364,3.3262694922031186,3.3296681327469013,3.3330667732906836,3.3364654138344663,3.3398640543782485,3.343262694922031,3.3466613354658135,3.350059976009596,3.353458616553379,3.356857257097161,3.360255897640944,3.363654538184726,3.3670531787285087,3.370451819272291,3.3738504598160737,3.377249100359856,3.3806477409036386,3.384046381447421,3.3874450219912036,3.390843662534986,3.3942423030787685,3.3976409436225508,3.4010395841663335,3.404438224710116,3.4078368652538984,3.411235505797681,3.4146341463414633,3.418032786885246,3.4214314274290283,3.424830067972811,3.4282287085165932,3.431627349060376,3.435025989604158,3.438424630147941,3.441823270691723,3.445221911235506,3.4486205517792885,3.4520191923230708,3.4554178328668534,3.4588164734106357,3.4622151139544184,3.4656137544982006,3.4690123950419833,3.4724110355857656,3.4758096761295483,3.4792083166733305,3.482606957217113,3.4860055977608955,3.489404238304678,3.4928028788484604,3.496201519392243,3.499600159936026,3.502998800479808,3.5063974410235907,3.509796081567373,3.5131947221111557,3.516593362654938,3.5199920031987206,3.523390643742503,3.5267892842862856,3.530187924830068,3.5335865653738505,3.5369852059176328,3.5403838464614155,3.5437824870051977,3.5471811275489804,3.550579768092763,3.5539784086365453,3.557377049180328,3.5607756897241103,3.564174330267893,3.5675729708116752,3.570971611355458,3.57437025189924,3.577768892443023,3.581167532986805,3.584566173530588,3.58796481407437,3.5913634546181528,3.594762095161935,3.5981607357057177,3.6015593762495004,3.6049580167932826,3.6083566573370653,3.6117552978808476,3.6151539384246303,3.6185525789684125,3.6219512195121952,3.6253498600559775,3.62874850059976,3.6321471411435424,3.635545781687325,3.6389444222311074,3.64234306277489,3.6457417033186723,3.649140343862455,3.6525389844062377,3.65593762495002,3.6593362654938026,3.662734906037585,3.6661335465813676,3.66953218712515,3.6729308276689325,3.676329468212715,3.6797281087564975,3.6831267493002797,3.6865253898440624,3.6899240303878447,3.6933226709316274,3.69672131147541,3.7001199520191923,3.703518592562975,3.7069172331067572,3.71031587365054,3.713714514194322,3.717113154738105,3.720511795281887,3.72391043582567,3.727309076369452,3.7307077169132348,3.734106357457017,3.7375049980007997,3.740903638544582,3.7443022790883647,3.7477009196321474,3.7510995601759296,3.7544982007197123,3.7578968412634945,3.7612954818072772,3.7646941223510595,3.768092762894842,3.7714914034386244,3.774890043982407,3.7782886845261894,3.781687325069972,3.7850859656137543,3.788484606157537,3.7918832467013193,3.795281887245102,3.7986805277888847,3.802079168332667,3.8054778088764496,3.808876449420232,3.8122750899640145,3.815673730507797,3.8190723710515795,3.8224710115953617,3.8258696521391444,3.8292682926829267,3.8326669332267094,3.8360655737704916,3.8394642143142743,3.8428628548580566,3.8462614954018393,3.849660135945622,3.853058776489404,3.856457417033187,3.859856057576969,3.863254698120752,3.866653338664534,3.870051979208317,3.873450619752099,3.8768492602958817,3.880247900839664,3.8836465413834467,3.887045181927229,3.8904438224710116,3.893842463014794,3.8972411035585766,3.9006397441023593,3.9040383846461415,3.907437025189924,3.9108356657337064,3.914234306277489,3.9176329468212714,3.921031587365054,3.9244302279088363,3.927828868452619,3.9312275089964013,3.934626149540184,3.938024790083966,3.941423430627749,3.9448220711715316,3.948220711715314,3.9516193522590966,3.955017992802879,3.9584166333466615,3.9618152738904437,3.9652139144342264,3.9686125549780087,3.9720111955217914,3.9754098360655736,3.9788084766093563,3.9822071171531386,3.9856057576969213,3.9890043982407035,3.992403038784486,3.995801679328269,3.999200319872051,4.002598960415834,4.005997600959616,4.009396241503398,4.0127948820471815,4.016193522590964,4.019592163134746,4.022990803678528,4.026389444222311,4.029788084766094,4.033186725309876,4.036585365853658,4.039984006397441,4.0433826469412235,4.046781287485006,4.050179928028789,4.053578568572571,4.056977209116353,4.060375849660136,4.063774490203919,4.067173130747701,4.070571771291483,4.0739704118352655,4.077369052379049,4.080767692922831,4.084166333466613,4.087564974010395,4.090963614554179,4.094362255097961,4.097760895641743,4.101159536185526,4.1045581767293084,4.107956817273091,4.111355457816873,4.114754098360656,4.118152738904438,4.121551379448221,4.124950019992003,4.128348660535786,4.131747301079568,4.1351459416233505,4.138544582167133,4.141943222710916,4.145341863254698,4.14874050379848,4.1521391443422635,4.155537784886046,4.158936425429828,4.16233506597361,4.165733706517393,4.169132347061176,4.172530987604958,4.17592962814874,4.179328268692523,4.1827269092363055,4.186125549780088,4.18952419032387,4.192922830867653,4.196321471411435,4.199720111955218,4.203118752499001,4.206517393042783,4.209916033586565,4.2133146741303475,4.216713314674131,4.220111955217913,4.223510595761695,4.226909236305477,4.230307876849261,4.233706517393043,4.237105157936825,4.240503798480607,4.2439024390243905,4.247301079568173,4.250699720111955,4.254098360655738,4.25749700119952,4.260895641743303,4.264294282287085,4.267692922830868,4.27109156337465,4.2744902039184325,4.277888844462215,4.281287485005998,4.28468612554978,4.288084766093562,4.291483406637345,4.294882047181128,4.29828068772491,4.301679328268692,4.305077968812475,4.308476609356258,4.31187524990004,4.315273890443822,4.318672530987605,4.3220711715313875,4.32546981207517,4.328868452618952,4.332267093162735,4.335665733706517,4.3390643742503,4.342463014794083,4.345861655337865,4.349260295881647,4.35265893642543,4.356057576969213,4.359456217512995,4.362854858056777,4.3662534986005594,4.369652139144343,4.373050779688125,4.376449420231907,4.379848060775689,4.3832467013194725,4.386645341863255,4.390043982407037,4.39344262295082,4.396841263494602,4.400239904038385,4.403638544582167,4.40703718512595,4.410435825669732,4.4138344662135145,4.417233106757297,4.42063174730108,4.424030387844862,4.427429028388644,4.430827668932427,4.43422630947621,4.437624950019992,4.441023590563774,4.444422231107557,4.44782087165134,4.451219512195122,4.454618152738904,4.458016793282687,4.4614154338264695,4.464814074370252,4.468212714914034,4.471611355457817,4.475009996001599,4.478408636545382,4.481807277089164,4.485205917632947,4.488604558176729,4.492003198720512,4.495401839264295,4.498800479808077,4.502199120351859,4.5055977608956415,4.508996401439425,4.512395041983207,4.515793682526989,4.519192323070771,4.5225909636145545,4.525989604158337,4.529388244702119,4.532786885245901,4.536185525789684,4.539584166333467,4.542982806877249,4.546381447421032,4.549780087964814,4.5531787285085965,4.556577369052379,4.559976009596162,4.563374650139944,4.566773290683726,4.570171931227509,4.573570571771292,4.576969212315074,4.580367852858856,4.5837664934026385,4.587165133946422,4.590563774490204,4.593962415033986,4.597361055577769,4.600759696121552,4.604158336665334,4.607556977209116,4.610955617752899,4.614354258296681,4.617752898840464,4.621151539384246,4.624550179928029,4.627948820471811,4.631347461015594,4.634746101559376,4.638144742103159,4.641543382646941,4.6449420231907235,4.648340663734507,4.651739304278289,4.655137944822071,4.658536585365853,4.6619352259096365,4.665333866453419,4.668732506997201,4.672131147540983,4.675529788084766,4.678928428628549,4.682327069172331,4.685725709716113,4.689124350259896,4.6925229908036785,4.695921631347461,4.699320271891244,4.702718912435026,4.706117552978808,4.709516193522591,4.712914834066374,4.716313474610156,4.719712115153938,4.7231107556977205,4.726509396241504,4.729908036785286,4.733306677329068,4.73670531787285,4.740103958416634,4.743502598960416,4.746901239504198,4.750299880047981,4.7536985205917635,4.757097161135546,4.760495801679328,4.763894442223111,4.767293082766893,4.770691723310676,4.774090363854458,4.777489004398241,4.780887644942023,4.7842862854858055,4.787684926029588,4.791083566573371,4.794482207117153,4.797880847660935,4.8012794882047185,4.804678128748501,4.808076769292283,4.811475409836065,4.814874050379848,4.818272690923631,4.821671331467413,4.825069972011195,4.828468612554978,4.8318672530987605,4.835265893642543,4.838664534186325,4.842063174730108,4.84546181527389,4.848860455817673,4.852259096361456,4.855657736905238,4.85905637744902,4.8624550179928026,4.865853658536586,4.869252299080368,4.87265093962415,4.876049580167932,4.879448220711716,4.882846861255498,4.88624550179928,4.889644142343063,4.8930427828868455,4.896441423430628,4.89984006397441,4.903238704518193,4.906637345061975,4.910035985605758,4.91343462614954,4.916833266693323,4.920231907237105,4.9236305477808875,4.92702918832467,4.930427828868453,4.933826469412235,4.937225109956017,4.9406237504998005,4.944022391043583,4.947421031587365,4.950819672131147,4.95421831267493,4.957616953218713,4.961015593762495,4.964414234306277,4.96781287485006,4.9712115153938425,4.974610155937625,4.978008796481407,4.98140743702519,4.984806077568972,4.988204718112755,4.991603358656538,4.99500199920032,4.998400639744102,5.001799280287885,5.005197920831668,5.00859656137545,5.011995201919232,5.0153938424630145,5.018792483006798,5.02219112355058,5.025589764094362,5.028988404638144,5.0323870451819275,5.03578568572571,5.039184326269492,5.042582966813275,5.045981607357057,5.04938024790084,5.052778888444622,5.056177528988405,5.059576169532187,5.0629748100759695,5.066373450619752,5.069772091163535,5.073170731707317,5.076569372251099,5.079968012794882,5.083366653338665,5.086765293882447,5.090163934426229,5.093562574970012,5.096961215513795,5.100359856057577,5.103758496601359,5.107157137145142,5.1105557776889246,5.113954418232707,5.117353058776489,5.120751699320272,5.124150339864054,5.127548980407837,5.130947620951619,5.134346261495402,5.137744902039184,5.141143542582967,5.14454218312675,5.147940823670532,5.151339464214314,5.1547381047580965,5.15813674530188,5.161535385845662,5.164934026389444,5.168332666933226,5.1717313074770095,5.175129948020792,5.178528588564574,5.181927229108356,5.185325869652139,5.188724510195922,5.192123150739704,5.195521791283487,5.198920431827269,5.2023190723710515,5.205717712914834,5.209116353458617,5.212514994002399,5.215913634546181,5.219312275089964,5.222710915633747,5.226109556177529,5.229508196721311,5.2329068372650935,5.236305477808877,5.239704118352659,5.243102758896441,5.246501399440224,5.249900039984007,5.253298680527789,5.256697321071571,5.260095961615354,5.2634946021591364,5.266893242702919,5.270291883246701,5.273690523790484,5.277089164334266,5.280487804878049,5.283886445421831,5.287285085965614,5.290683726509396,5.2940823670531785,5.297481007596962,5.300879648140744,5.304278288684526,5.307676929228308,5.3110755697720915,5.314474210315874,5.317872850859656,5.321271491403438,5.324670131947221,5.328068772491004,5.331467413034786,5.334866053578568,5.338264694122351,5.3416633346661335,5.345061975209916,5.348460615753699,5.351859256297481,5.355257896841263,5.358656537385046,5.362055177928829,5.365453818472611,5.368852459016393,5.3722510995601755,5.375649740103959,5.379048380647741,5.382447021191523,5.385845661735305,5.389244302279089,5.392642942822871,5.396041583366653,5.399440223910436,5.4028388644542185,5.406237504998001,5.409636145541783,5.413034786085566,5.416433426629348,5.419832067173131,5.423230707716913,5.426629348260696,5.430027988804478,5.4334266293482605,5.436825269892044,5.440223910435826,5.443622550979608,5.44702119152339,5.4504198320671735,5.453818472610956,5.457217113154738,5.46061575369852,5.464014394242303,5.467413034786086,5.470811675329868,5.47421031587365,5.477608956417433,5.4810075969612155,5.484406237504998,5.487804878048781,5.491203518592563,5.494602159136345,5.498000799680128,5.501399440223911,5.504798080767693,5.508196721311475,5.511595361855258,5.514994002399041,5.518392642942823,5.521791283486605,5.5251899240303874,5.528588564574171,5.531987205117953,5.535385845661735,5.538784486205518,5.5421831267493005,5.545581767293083,5.548980407836865,5.552379048380648,5.55577768892443,5.559176329468213,5.562574970011995,5.565973610555778,5.56937225109956,5.5727708916433425,5.576169532187125,5.579568172730908,5.58296681327469,5.586365453818472,5.5897640943622555,5.593162734906038,5.59656137544982,5.599960015993602,5.603358656537385,5.606757297081168,5.61015593762495,5.613554578168732,5.616953218712515,5.6203518592562975,5.62375049980008,5.627149140343862,5.630547780887645,5.633946421431427,5.63734506197521,5.640743702518993,5.644142343062775,5.647540983606557,5.65093962415034,5.654338264694123,5.657736905237905,5.661135545781687,5.6645341863254695,5.667932826869253,5.671331467413035,5.674730107956817,5.678128748500599,5.6815273890443825,5.684926029588165,5.688324670131947,5.69172331067573,5.695121951219512,5.698520591763295,5.701919232307077,5.70531787285086,5.708716513394642,5.7121151539384245,5.715513794482207,5.71891243502599,5.722311075569772,5.725709716113554,5.729108356657337,5.73250699720112,5.735905637744902,5.739304278288684,5.742702918832467,5.74610155937625,5.749500199920032,5.752898840463814,5.756297481007597,5.7596961215513796,5.763094762095162,5.766493402638944,5.769892043182727,5.773290683726509,5.776689324270292,5.780087964814074,5.783486605357857,5.786885245901639,5.790283886445422,5.793682526989205,5.797081167532987,5.800479808076769,5.8038784486205515,5.807277089164335,5.810675729708117,5.814074370251899,5.817473010795681,5.8208716513394645,5.824270291883247,5.827668932427029,5.831067572970811,5.834466213514594,5.837864854058377,5.841263494602159,5.844662135145942,5.848060775689724,5.8514594162335065,5.854858056777289,5.858256697321072,5.861655337864854,5.865053978408636,5.868452618952419,5.871851259496202,5.875249900039984,5.878648540583766,5.8820471811275485,5.885445821671332,5.888844462215114,5.892243102758896,5.895641743302679,5.899040383846462,5.902439024390244,5.905837664934026,5.909236305477809,5.9126349460215915,5.916033586565374,5.919432227109156,5.922830867652939,5.926229508196721,5.929628148740504,5.933026789284287,5.936425429828069,5.939824070371851,5.9432227109156335,5.946621351459417,5.950019992003199,5.953418632546981,5.956817273090763,5.9602159136345465,5.963614554178329,5.967013194722111,5.970411835265893,5.973810475809676,5.977209116353459,5.980607756897241,5.984006397441024,5.987405037984806,5.9908036785285885,5.994202319072371,5.997600959616154,6.000999600159936,6.004398240703718,6.007796881247501,6.011195521791284,6.014594162335066,6.017992802878848,6.0213914434226306,6.024790083966414,6.028188724510196,6.031587365053978,6.034986005597761,6.038384646141544,6.041783286685326,6.045181927229108,6.048580567772891,6.0519792083166735,6.055377848860456,6.058776489404238,6.062175129948021,6.065573770491803,6.068972411035586,6.072371051579368,6.075769692123151,6.079168332666933,6.0825669732107155,6.085965613754499,6.089364254298281,6.092762894842063,6.096161535385845,6.0995601759296285,6.102958816473411,6.106357457017193,6.109756097560975,6.113154738104758,6.116553378648541,6.119952019192323,6.123350659736105,6.126749300279888,6.1301479408236705,6.133546581367453,6.136945221911236,6.140343862455018,6.1437425029988,6.147141143542583,6.150539784086366,6.153938424630148,6.15733706517393,6.160735705717713,6.164134346261496,6.167532986805278,6.17093162734906,6.1743302678928424,6.177728908436626,6.181127548980408,6.18452618952419,6.187924830067973,6.1913234706117555,6.194722111155538,6.19812075169932,6.201519392243103,6.204918032786885,6.208316673330668,6.21171531387445,6.215113954418233,6.218512594962015,6.2219112355057975,6.22530987604958,6.228708516593363,6.232107157137145,6.235505797680927,6.2389044382247105,6.242303078768493,6.245701719312275,6.249100359856057,6.25249900039984,6.255897640943623,6.259296281487405,6.262694922031187,6.26609356257497,6.2694922031187525,6.272890843662535,6.276289484206317,6.2796881247501,6.283086765293882,6.286485405837665,6.289884046381448,6.29328268692523,6.296681327469012,6.300079968012795,6.303478608556578,6.30687724910036,6.310275889644142,6.3136745301879245,6.317073170731708,6.32047181127549,6.323870451819272,6.327269092363054,6.3306677329068375,6.33406637345062,6.337465013994402,6.340863654538185,6.344262295081967,6.34766093562575,6.351059576169532,6.354458216713315,6.357856857257097,6.3612554978008795,6.364654138344662,6.368052778888445,6.371451419432227,6.374850059976009,6.378248700519792,6.381647341063575,6.385045981607357,6.388444622151139,6.391843262694922,6.395241903238705,6.398640543782487,6.402039184326269,6.405437824870052,6.408836465413835,6.412235105957617,6.415633746501399,6.419032387045182,6.4224310275889644,6.425829668132747,6.429228308676529,6.432626949220312,6.436025589764094,6.439424230307877,6.44282287085166,6.446221511395442,6.449620151939224,6.4530187924830065,6.45641743302679,6.459816073570572,6.463214714114354,6.466613354658136,6.4700119952019195,6.473410635745702,6.476809276289484,6.480207916833267,6.483606557377049,6.487005197920832,6.490403838464614,6.493802479008397,6.497201119552179,6.5005997600959615,6.503998400639744,6.507397041183527,6.510795681727309,6.514194322271091,6.517592962814874,6.520991603358657,6.524390243902439,6.527788884446221,6.531187524990004,6.534586165533787,6.537984806077569,6.541383446621351,6.544782087165134,6.548180727708917,6.551579368252699,6.554978008796481,6.558376649340264,6.5617752898840465,6.565173930427829,6.568572570971611,6.571971211515394,6.575369852059176,6.578768492602959,6.582167133146742,6.585565773690524,6.588964414234306,6.5923630547780885,6.595761695321872,6.599160335865654,6.602558976409436,6.605957616953218,6.6093562574970015,6.612754898040784,6.616153538584566,6.619552179128348,6.622950819672131,6.626349460215914,6.629748100759696,6.633146741303479,6.636545381847261,6.6399440223910435,6.643342662934826,6.646741303478609,6.650139944022391,6.653538584566173,6.656937225109956,6.660335865653739,6.663734506197521,6.667133146741303,6.670531787285086,6.673930427828869,6.677329068372651,6.680727708916433,6.684126349460216,6.687524990003999,6.690923630547781,6.694322271091563,6.697720911635346,6.7011195521791285,6.704518192722911,6.707916833266693,6.711315473810476,6.714714114354258,6.718112754898041,6.721511395441823,6.724910035985606,6.728308676529388,6.7317073170731705,6.735105957616954,6.738504598160736,6.741903238704518,6.7453018792483,6.7487005197920835,6.752099160335866,6.755497800879648,6.75889644142343,6.762295081967213,6.765693722510996,6.769092363054778,6.77249100359856,6.775889644142343,6.7792882846861255,6.782686925229908,6.786085565773691,6.789484206317473,6.792882846861255,6.796281487405038,6.799680127948821,6.803078768492603,6.806477409036385,6.809876049580168,6.813274690123951,6.816673330667733,6.820071971211515,6.8234706117552975,6.826869252299081,6.830267892842863,6.833666533386645,6.837065173930428,6.8404638144742105,6.843862455017993,6.847261095561775,6.850659736105558,6.85405837664934,6.857457017193123,6.860855657736905,6.864254298280688,6.86765293882447,6.8710515793682525,6.874450219912035,6.877848860455818,6.8812475009996,6.884646141543382,6.8880447820871655,6.891443422630948,6.89484206317473,6.898240703718512,6.901639344262295,6.905037984806078,6.90843662534986,6.911835265893642,6.915233906437425,6.9186325469812076,6.92203118752499,6.925429828068772,6.928828468612555,6.932227109156337,6.93562574970012,6.939024390243903,6.942423030787685,6.945821671331467,6.94922031187525,6.952618952419033,6.956017592962815,6.959416233506597,6.9628148740503795,6.966213514594163,6.969612155137945,6.973010795681727,6.976409436225509,6.9798080767692925,6.983206717313075,6.986605357856857,6.99000399840064,6.993402638944422,6.996801279488205,7.000199920031987,7.00359856057577,7.006997201119552,7.0103958416633345,7.013794482207117,7.0171931227509,7.020591763294682,7.023990403838464,7.0273890443822475,7.03078768492603,7.034186325469812,7.037584966013594,7.040983606557377,7.04438224710116,7.047780887644942,7.051179528188724,7.054578168732507,7.05797680927629,7.061375449820072,7.064774090363854,7.068172730907637,7.0715713714514195,7.074970011995202,7.078368652538985,7.081767293082767,7.085165933626549,7.088564574170332,7.091963214714115,7.095361855257897,7.098760495801679,7.1021591363454615,7.105557776889245,7.108956417433027,7.112355057976809,7.115753698520591,7.1191523390643745,7.122550979608157,7.125949620151939,7.129348260695722,7.132746901239504,7.136145541783287,7.139544182327069,7.142942822870852,7.146341463414634,7.1497401039584165,7.153138744502199,7.156537385045982,7.159936025589764,7.163334666133546,7.166733306677329,7.170131947221112,7.173530587764894,7.176929228308676,7.180327868852459,7.183726509396242,7.187125149940024,7.190523790483806,7.193922431027589,7.197321071571372,7.200719712115154,7.204118352658936,7.207516993202719,7.2109156337465015,7.214314274290284,7.217712914834066,7.221111555377849,7.224510195921631,7.227908836465414,7.231307477009197,7.234706117552979,7.238104758096761,7.2415033986405435,7.244902039184327,7.248300679728109,7.251699320271891,7.255097960815673,7.2584966013594565,7.261895241903239,7.265293882447021,7.268692522990803,7.272091163534586,7.275489804078369,7.278888444622151,7.282287085165934,7.285685725709716,7.2890843662534985,7.292483006797281,7.295881647341064,7.299280287884846,7.302678928428628,7.306077568972411,7.309476209516194,7.312874850059976,7.316273490603758,7.319672131147541,7.323070771691324,7.326469412235106,7.329868052778888,7.333266693322671,7.336665333866454,7.340063974410236,7.343462614954018,7.346861255497801,7.3502598960415835,7.353658536585366,7.357057177129148,7.360455817672931,7.363854458216713,7.367253098760496,7.370651739304278,7.374050379848061,7.377449020391843,7.3808476609356255,7.384246301479409,7.387644942023191,7.391043582566973,7.394442223110755,7.3978408636545385,7.401239504198321,7.404638144742103,7.408036785285885,7.411435425829668,7.414834066373451,7.418232706917233,7.421631347461015,7.425029988004798,7.4284286285485805,7.431827269092363,7.435225909636146,7.438624550179928,7.44202319072371,7.445421831267493,7.448820471811276,7.452219112355058,7.45561775289884,7.459016393442623,7.462415033986406,7.465813674530188,7.46921231507397,7.4726109556177525,7.476009596161536,7.479408236705318,7.4828068772491,7.486205517792883,7.4896041583366655,7.493002798880448,7.49640143942423,7.499800079968013,7.503198720511795,7.506597361055578,7.50999600159936,7.513394642143143,7.516793282686925,7.5201919232307075,7.523590563774491,7.526989204318273,7.530387844862055,7.533786485405837,7.5371851259496205,7.540583766493403,7.543982407037185,7.547381047580967,7.55077968812475,7.554178328668533,7.557576969212315,7.560975609756097,7.56437425029988,7.567772890843663,7.571171531387445,7.574570171931228,7.57796881247501,7.5813674530187924,7.584766093562575,7.588164734106358,7.59156337465014,7.594962015193922,7.598360655737705,7.601759296281488,7.60515793682527,7.608556577369052,7.6119552179128345,7.615353858456618,7.6187524990004,7.622151139544182,7.625549780087965,7.6289484206317475,7.63234706117553,7.635745701719312,7.639144342263095,7.642542982806877,7.64594162335066,7.649340263894442,7.652738904438225,7.656137544982007,7.6595361855257895,7.662934826069572,7.666333466613355,7.669732107157137,7.673130747700919,7.6765293882447025,7.679928028788485,7.683326669332267,7.686725309876049,7.690123950419832,7.693522590963615,7.696921231507397,7.700319872051179,7.703718512594962,7.707117153138745,7.710515793682527,7.713914434226309,7.717313074770092,7.7207117153138745,7.724110355857657,7.72750899640144,7.730907636945222,7.734306277489004,7.737704918032787,7.74110355857657,7.744502199120352,7.747900839664134,7.7512994802079165,7.7546981207517,7.758096761295482,7.761495401839264,7.764894042383046,7.7682926829268295,7.771691323470612,7.775089964014394,7.778488604558177,7.781887245101959,7.785285885645742,7.788684526189524,7.792083166733307,7.795481807277089,7.7988804478208715,7.802279088364654,7.805677728908437,7.809076369452219,7.812475009996001,7.815873650539784,7.819272291083567,7.822670931627349,7.826069572171131,7.829468212714914,7.832866853258697,7.836265493802479,7.839664134346261,7.843062774890044,7.846461415433827,7.849860055977609,7.853258696521391,7.856657337065174,7.8600559776089565,7.863454618152739,7.866853258696521,7.870251899240304,7.873650539784086,7.877049180327869,7.880447820871652,7.883846461415434,7.887245101959216,7.8906437425029985,7.894042383046782,7.897441023590564,7.900839664134346,7.904238304678128,7.9076369452219115,7.911035585765694,7.914434226309476,7.917832866853258,7.921231507397041,7.924630147940824,7.928028788484606,7.931427429028389,7.934826069572171,7.9382247101159535,7.941623350659736,7.945021991203519,7.948420631747301,7.951819272291083,7.955217912834866,7.958616553378649,7.962015193922431,7.965413834466213,7.968812475009996,7.972211115553779,7.975609756097561,7.979008396641343,7.982407037185126,7.985805677728909,7.989204318272691,7.992602958816473,7.996001599360256,7.9994002399040385,8.002798880447822,8.006197520991604,8.009596161535386,8.012994802079168,8.01639344262295,8.019792083166733,8.023190723710515,8.0265893642543,8.029988004798081,8.033386645341864,8.036785285885646,8.040183926429428,8.04358256697321,8.046981207516993,8.050379848060775,8.053778488604559,8.057177129148341,8.060575769692123,8.063974410235906,8.067373050779688,8.07077169132347,8.074170331867252,8.077568972411036,8.080967612954819,8.084366253498601,8.087764894042383,8.091163534586165,8.094562175129948,8.09796081567373,8.101359456217512,8.104758096761296,8.108156737305078,8.11155537784886,8.114954018392643,8.118352658936425,8.121751299480207,8.12514994002399,8.128548580567774,8.131947221111556,8.135345861655338,8.13874450219912,8.142143142742903,8.145541783286685,8.148940423830467,8.15233906437425,8.155737704918034,8.159136345461816,8.162534986005598,8.16593362654938,8.169332267093163,8.172730907636945,8.176129548180727,8.179528188724511,8.182926829268293,8.186325469812076,8.189724110355858,8.19312275089964,8.196521391443422,8.199920031987205,8.203318672530987,8.20671731307477,8.210115953618553,8.213514594162335,8.216913234706118,8.2203118752499,8.223710515793682,8.227109156337464,8.230507796881248,8.23390643742503,8.237305077968813,8.240703718512595,8.244102359056377,8.24750099960016,8.250899640143942,8.254298280687724,8.257696921231508,8.26109556177529,8.264494202319073,8.267892842862855,8.271291483406637,8.27469012395042,8.278088764494202,8.281487405037986,8.284886045581768,8.28828468612555,8.291683326669332,8.295081967213115,8.298480607756897,8.30187924830068,8.305277888844461,8.308676529388245,8.312075169932028,8.31547381047581,8.318872451019592,8.322271091563374,8.325669732107157,8.329068372650939,8.332467013194723,8.335865653738505,8.339264294282287,8.34266293482607,8.346061575369852,8.349460215913634,8.352858856457416,8.356257497001199,8.359656137544983,8.363054778088765,8.366453418632547,8.36985205917633,8.373250699720112,8.376649340263894,8.380047980807676,8.38344662135146,8.386845261895242,8.390243902439025,8.393642542982807,8.39704118352659,8.400439824070371,8.403838464614154,8.407237105157936,8.41063574570172,8.414034386245502,8.417433026789285,8.420831667333067,8.424230307876849,8.427628948420631,8.431027588964414,8.434426229508198,8.43782487005198,8.441223510595762,8.444622151139544,8.448020791683327,8.451419432227109,8.454818072770891,8.458216713314673,8.461615353858457,8.46501399440224,8.468412634946022,8.471811275489804,8.475209916033586,8.478608556577369,8.48200719712115,8.485405837664935,8.488804478208717,8.4922031187525,8.495601759296282,8.499000399840064,8.502399040383846,8.505797680927628,8.50919632147141,8.512594962015195,8.515993602558977,8.519392243102759,8.522790883646541,8.526189524190324,8.529588164734106,8.532986805277888,8.536385445821672,8.539784086365454,8.543182726909237,8.546581367453019,8.549980007996801,8.553378648540583,8.556777289084366,8.560175929628148,8.563574570171932,8.566973210715714,8.570371851259496,8.573770491803279,8.577169132347061,8.580567772890843,8.583966413434625,8.58736505397841,8.590763694522192,8.594162335065974,8.597560975609756,8.600959616153538,8.60435825669732,8.607756897241103,8.611155537784885,8.61455417832867,8.617952818872451,8.621351459416234,8.624750099960016,8.628148740503798,8.63154738104758,8.634946021591363,8.638344662135147,8.641743302678929,8.645141943222711,8.648540583766493,8.651939224310276,8.655337864854058,8.65873650539784,8.662135145941622,8.665533786485407,8.668932427029189,8.672331067572971,8.675729708116753,8.679128348660536,8.682526989204318,8.6859256297481,8.689324270291884,8.692722910835666,8.696121551379449,8.69952019192323,8.702918832467013,8.706317473010795,8.709716113554578,8.71311475409836,8.716513394642144,8.719912035185926,8.723310675729708,8.72670931627349,8.730107956817273,8.733506597361055,8.736905237904837,8.740303878448621,8.743702518992404,8.747101159536186,8.750499800079968,8.75389844062375,8.757297081167533,8.760695721711315,8.764094362255097,8.767493002798881,8.770891643342663,8.774290283886446,8.777688924430228,8.78108756497401,8.784486205517792,8.787884846061575,8.791283486605359,8.79468212714914,8.798080767692923,8.801479408236705,8.804878048780488,8.80827668932427,8.811675329868052,8.815073970411834,8.818472610955618,8.8218712514994,8.825269892043183,8.828668532586965,8.832067173130747,8.83546581367453,8.838864454218312,8.842263094762096,8.845661735305878,8.84906037584966,8.852459016393443,8.855857656937225,8.859256297481007,8.86265493802479,8.866053578568573,8.869452219112356,8.872850859656138,8.87624950019992,8.879648140743702,8.883046781287485,8.886445421831267,8.88984406237505,8.893242702918833,8.896641343462615,8.900039984006398,8.90343862455018,8.906837265093962,8.910235905637744,8.913634546181527,8.91703318672531,8.920431827269093,8.923830467812875,8.927229108356658,8.93062774890044,8.934026389444222,8.937425029988004,8.940823670531787,8.94422231107557,8.947620951619353,8.951019592163135,8.954418232706917,8.9578168732507,8.961215513794482,8.964614154338264,8.968012794882048,8.97141143542583,8.974810075969613,8.978208716513395,8.981607357057177,8.98500599760096,8.988404638144742,8.991803278688524,8.995201919232308,8.99860055977609,9.001999200319872,9.005397840863655,9.008796481407437,9.012195121951219,9.015593762495001,9.018992403038785,9.022391043582568,9.02578968412635,9.029188324670132,9.032586965213914,9.035985605757697,9.039384246301479,9.042782886845261,9.046181527389045,9.049580167932827,9.05297880847661,9.056377449020392,9.059776089564174,9.063174730107956,9.066573370651739,9.069972011195523,9.073370651739305,9.076769292283087,9.08016793282687,9.083566573370652,9.086965213914434,9.090363854458216,9.093762495001998,9.097161135545782,9.100559776089565,9.103958416633347,9.10735705717713,9.110755697720911,9.114154338264694,9.117552978808476,9.12095161935226,9.124350259896042,9.127748900439824,9.131147540983607,9.134546181527389,9.137944822071171,9.141343462614953,9.144742103158736,9.14814074370252,9.151539384246302,9.154938024790084,9.158336665333866,9.161735305877649,9.165133946421431,9.168532586965213,9.171931227508997,9.17532986805278,9.178728508596562,9.182127149140344,9.185525789684126,9.188924430227909,9.19232307077169,9.195721711315473,9.199120351859257,9.20251899240304,9.205917632946822,9.209316273490604,9.212714914034386,9.216113554578168,9.21951219512195,9.222910835665735,9.226309476209517,9.229708116753299,9.233106757297081,9.236505397840864,9.239904038384646,9.243302678928428,9.24670131947221,9.250099960015994,9.253498600559777,9.256897241103559,9.260295881647341,9.263694522191123,9.267093162734906,9.270491803278688,9.273890443822472,9.277289084366254,9.280687724910036,9.284086365453819,9.2874850059976,9.290883646541383,9.294282287085165,9.297680927628948,9.301079568172732,9.304478208716514,9.307876849260296,9.311275489804078,9.31467413034786,9.318072770891643,9.321471411435425,9.32487005197921,9.328268692522991,9.331667333066774,9.335065973610556,9.338464614154338,9.34186325469812,9.345261895241903,9.348660535785685,9.352059176329469,9.355457816873251,9.358856457417033,9.362255097960816,9.365653738504598,9.36905237904838,9.372451019592162,9.375849660135946,9.379248300679729,9.382646941223511,9.386045581767293,9.389444222311075,9.392842862854858,9.39624150339864,9.399640143942422,9.403038784486206,9.406437425029988,9.40983606557377,9.413234706117553,9.416633346661335,9.420031987205117,9.4234306277489,9.426829268292684,9.430227908836466,9.433626549380248,9.43702518992403,9.440423830467813,9.443822471011595,9.447221111555377,9.45061975209916,9.454018392642944,9.457417033186726,9.460815673730508,9.46421431427429,9.467612954818073,9.471011595361855,9.474410235905637,9.477808876449421,9.481207516993203,9.484606157536986,9.488004798080768,9.49140343862455,9.494802079168332,9.498200719712115,9.501599360255897,9.50499800079968,9.508396641343463,9.511795281887245,9.515193922431028,9.51859256297481,9.521991203518592,9.525389844062374,9.528788484606158,9.53218712514994,9.535585765693723,9.538984406237505,9.542383046781287,9.54578168732507,9.549180327868852,9.552578968412634,9.555977608956418,9.5593762495002,9.562774890043983,9.566173530587765,9.569572171131547,9.57297081167533,9.576369452219112,9.579768092762896,9.583166733306678,9.58656537385046,9.589964014394242,9.593362654938025,9.596761295481807,9.60015993602559,9.603558576569371,9.606957217113155,9.610355857656938,9.61375449820072,9.617153138744502,9.620551779288284,9.623950419832067,9.627349060375849,9.630747700919633,9.634146341463415,9.637544982007197,9.64094362255098,9.644342263094762,9.647740903638544,9.651139544182326,9.654538184726109,9.657936825269893,9.661335465813675,9.664734106357457,9.66813274690124,9.671531387445022,9.674930027988804,9.678328668532586,9.68172730907637,9.685125949620152,9.688524590163935,9.691923230707717,9.6953218712515,9.698720511795281,9.702119152339064,9.705517792882846,9.70891643342663,9.712315073970412,9.715713714514195,9.719112355057977,9.722510995601759,9.725909636145541,9.729308276689324,9.732706917233108,9.73610555777689,9.739504198320672,9.742902838864454,9.746301479408237,9.749700119952019,9.753098760495801,9.756497401039583,9.759896041583367,9.76329468212715,9.766693322670932,9.770091963214714,9.773490603758496,9.776889244302279,9.78028788484606,9.783686525389845,9.787085165933627,9.79048380647741,9.793882447021192,9.797281087564974,9.800679728108756,9.804078368652538,9.80747700919632,9.810875649740105,9.814274290283887,9.81767293082767,9.821071571371451,9.824470211915234,9.827868852459016,9.831267493002798,9.834666133546582,9.838064774090364,9.841463414634147,9.844862055177929,9.848260695721711,9.851659336265493,9.855057976809276,9.858456617353058,9.861855257896842,9.865253898440624,9.868652538984406,9.872051179528189,9.875449820071971,9.878848460615753,9.882247101159535,9.88564574170332,9.889044382247102,9.892443022790884,9.895841663334666,9.899240303878448,9.90263894442223,9.906037584966013,9.909436225509797,9.91283486605358,9.916233506597361,9.919632147141144,9.923030787684926,9.926429428228708,9.92982806877249,9.933226709316273,9.936625349860057,9.940023990403839,9.943422630947621,9.946821271491403,9.950219912035186,9.953618552578968,9.95701719312275,9.960415833666534,9.963814474210317,9.967213114754099,9.970611755297881,9.974010395841663,9.977409036385446,9.980807676929228,9.98420631747301,9.987604958016794,9.991003598560576,9.994402239104359,9.99780087964814,10.001199520191923,10.004598160735705,10.007996801279488,10.011395441823272,10.014794082367054,10.018192722910836,10.021591363454618,10.0249900039984,10.028388644542183,10.031787285085965,10.035185925629747,10.038584566173531,10.041983206717314,10.045381847261096,10.048780487804878,10.05217912834866,10.055577768892443,10.058976409436225,10.062375049980009,10.065773690523791,10.069172331067573,10.072570971611356,10.075969612155138,10.07936825269892,10.082766893242702,10.086165533786485,10.089564174330269,10.092962814874051,10.096361455417833,10.099760095961615,10.103158736505398,10.10655737704918,10.109956017592962,10.113354658136746,10.116753298680528,10.12015193922431,10.123550579768093,10.126949220311875,10.130347860855657,10.13374650139944,10.137145141943222,10.140543782487006,10.143942423030788,10.14734106357457,10.150739704118353,10.154138344662135,10.157536985205917,10.1609356257497,10.164334266293483,10.167732906837266,10.171131547381048,10.17453018792483,10.177928828468612,10.181327469012395,10.184726109556177,10.18812475009996,10.191523390643743,10.194922031187525,10.198320671731308,10.20171931227509,10.205117952818872,10.208516593362654,10.211915233906437,10.21531387445022,10.218712514994003,10.222111155537785,10.225509796081568,10.22890843662535,10.232307077169132,10.235705717712914,10.239104358256697,10.24250299880048,10.245901639344263,10.249300279888045,10.252698920431827,10.25609756097561,10.259496201519392,10.262894842063174,10.266293482606958,10.26969212315074,10.273090763694523,10.276489404238305,10.279888044782087,10.28328668532587,10.286685325869652,10.290083966413434,10.293482606957218,10.296881247501,10.300279888044782,10.303678528588565,10.307077169132347,10.310475809676129,10.313874450219911,10.317273090763695,10.320671731307478,10.32407037185126,10.327469012395042,10.330867652938824,10.334266293482607,10.337664934026389,10.341063574570171,10.344462215113955,10.347860855657737,10.35125949620152,10.354658136745302,10.358056777289084,10.361455417832866,10.364854058376649,10.368252698920433,10.371651339464215,10.375049980007997,10.37844862055178,10.381847261095562,10.385245901639344,10.388644542183126,10.392043182726908,10.395441823270692,10.398840463814475,10.402239104358257,10.40563774490204,10.409036385445821,10.412435025989604,10.415833666533386,10.41923230707717,10.422630947620952,10.426029588164734,10.429428228708517,10.432826869252299,10.436225509796081,10.439624150339863,10.443022790883646,10.44642143142743,10.449820071971212,10.453218712514994,10.456617353058776,10.460015993602559,10.463414634146341,10.466813274690123,10.470211915233907,10.47361055577769,10.477009196321472,10.480407836865254,10.483806477409036,10.487205117952819,10.4906037584966,10.494002399040383,10.497401039584167,10.50079968012795,10.504198320671732,10.507596961215514,10.510995601759296,10.514394242303078,10.51779288284686,10.521191523390645,10.524590163934427,10.527988804478209,10.531387445021991,10.534786085565774,10.538184726109556,10.541583366653338,10.54498200719712,10.548380647740904,10.551779288284687,10.555177928828469,10.558576569372251,10.561975209916033,10.565373850459816,10.568772491003598,10.572171131547382,10.575569772091164,10.578968412634946,10.582367053178729,10.58576569372251,10.589164334266293,10.592562974810075,10.595961615353858,10.599360255897642,10.602758896441424,10.606157536985206,10.609556177528988,10.61295481807277,10.616353458616553,10.619752099160335,10.62315073970412,10.626549380247901,10.629948020791684,10.633346661335466,10.636745301879248,10.64014394242303,10.643542582966813,10.646941223510595,10.650339864054379,10.653738504598161,10.657137145141943,10.660535785685726,10.663934426229508,10.66733306677329,10.670731707317072,10.674130347860856,10.677528988404639,10.680927628948421,10.684326269492203,10.687724910035985,10.691123550579768,10.69452219112355,10.697920831667332,10.701319472211116,10.704718112754898,10.70811675329868,10.711515393842463,10.714914034386245,10.718312674930027,10.72171131547381,10.725109956017594,10.728508596561376,10.731907237105158,10.73530587764894,10.738704518192723,10.742103158736505,10.745501799280287,10.74890043982407,10.752299080367854,10.755697720911636,10.759096361455418,10.7624950019992,10.765893642542983,10.769292283086765,10.772690923630547,10.776089564174331,10.779488204718113,10.782886845261896,10.786285485805678,10.78968412634946,10.793082766893242,10.796481407437025,10.799880047980807,10.80327868852459,10.806677329068373,10.810075969612155,10.813474610155938,10.81687325069972,10.820271891243502,10.823670531787284,10.827069172331068,10.83046781287485,10.833866453418633,10.837265093962415,10.840663734506197,10.84406237504998,10.847461015593762,10.850859656137544,10.854258296681328,10.85765693722511,10.861055577768893,10.864454218312675,10.867852858856457,10.87125149940024,10.874650139944022,10.878048780487806,10.881447421031588,10.88484606157537,10.888244702119152,10.891643342662935,10.895041983206717,10.8984406237505,10.901839264294281,10.905237904838065,10.908636545381848,10.91203518592563,10.915433826469412,10.918832467013194,10.922231107556977,10.925629748100759,10.929028388644543,10.932427029188325,10.935825669732107,10.93922431027589,10.942622950819672,10.946021591363454,10.949420231907236,10.952818872451019,10.956217512994803,10.959616153538585,10.963014794082367,10.96641343462615,10.969812075169932,10.973210715713714,10.976609356257496,10.98000799680128,10.983406637345063,10.986805277888845,10.990203918432627,10.99360255897641,10.997001199520192,11.000399840063974,11.003798480607758,11.00719712115154,11.010595761695322,11.013994402239105,11.017393042782887,11.020791683326669,11.024190323870451,11.027588964414234,11.030987604958018,11.0343862455018,11.037784886045582,11.041183526589364,11.044582167133147,11.047980807676929,11.051379448220711,11.054778088764495,11.058176729308277,11.06157536985206,11.064974010395842,11.068372650939624,11.071771291483406,11.075169932027189,11.07856857257097,11.081967213114755,11.085365853658537,11.08876449420232,11.092163134746102,11.095561775289884,11.098960415833666,11.102359056377448,11.105757696921232,11.109156337465015,11.112554978008797,11.11595361855258,11.119352259096361,11.122750899640144,11.126149540183926,11.129548180727708,11.132946821271492,11.136345461815274,11.139744102359057,11.143142742902839,11.146541383446621,11.149940023990403,11.153338664534186,11.15673730507797,11.160135945621752,11.163534586165534,11.166933226709316,11.170331867253099,11.173730507796881,11.177129148340663,11.180527788884445,11.18392642942823,11.187325069972012,11.190723710515794,11.194122351059576,11.197520991603358,11.20091963214714,11.204318272690923,11.207716913234707,11.21111555377849,11.214514194322271,11.217912834866054,11.221311475409836,11.224710115953618,11.2281087564974,11.231507397041183,11.234906037584967,11.238304678128749,11.241703318672531,11.245101959216314,11.248500599760096,11.251899240303878,11.25529788084766,11.258696521391444,11.262095161935227,11.265493802479009,11.268892443022791,11.272291083566573,11.275689724110356,11.279088364654138,11.28248700519792,11.285885645741704,11.289284286285486,11.292682926829269,11.29608156737305,11.299480207916833,11.302878848460615,11.306277489004398,11.309676129548182,11.313074770091964,11.316473410635746,11.319872051179528,11.32327069172331,11.326669332267093,11.330067972810875,11.333466613354657,11.336865253898441,11.340263894442224,11.343662534986006,11.347061175529788,11.35045981607357,11.353858456617353,11.357257097161135,11.360655737704919,11.364054378248701,11.367453018792483,11.370851659336266,11.374250299880048,11.37764894042383,11.381047580967612,11.384446221511395,11.387844862055179,11.391243502598961,11.394642143142743,11.398040783686525,11.401439424230308,11.40483806477409,11.408236705317872,11.411635345861656,11.415033986405438,11.41843262694922,11.421831267493003,11.425229908036785,11.428628548580567,11.43202718912435,11.435425829668132,11.438824470211916,11.442223110755698,11.44562175129948,11.449020391843263,11.452419032387045,11.455817672930827,11.45921631347461,11.462614954018393,11.466013594562176,11.469412235105958,11.47281087564974,11.476209516193522,11.479608156737305,11.483006797281087,11.48640543782487,11.489804078368653,11.493202718912436,11.496601359456218,11.5,11.503398640543782,11.506797281087564,11.510195921631347,11.51359456217513,11.516993202718913,11.520391843262695,11.523790483806478,11.52718912435026,11.530587764894042,11.533986405437824,11.537385045981607,11.54078368652539,11.544182327069173,11.547580967612955,11.550979608156737,11.55437824870052,11.557776889244302,11.561175529788084,11.564574170331868,11.56797281087565,11.571371451419433,11.574770091963215,11.578168732506997,11.58156737305078,11.584966013594562,11.588364654138344,11.591763294682128,11.59516193522591,11.598560575769692,11.601959216313475,11.605357856857257,11.608756497401039,11.612155137944821,11.615553778488605,11.618952419032388,11.62235105957617,11.625749700119952,11.629148340663734,11.632546981207517,11.635945621751299,11.639344262295081,11.642742902838865,11.646141543382647,11.64954018392643,11.652938824470212,11.656337465013994,11.659736105557776,11.663134746101559,11.666533386645343,11.669932027189125,11.673330667732907,11.67672930827669,11.680127948820472,11.683526589364254,11.686925229908036,11.690323870451818,11.693722510995602,11.697121151539385,11.700519792083167,11.70391843262695,11.707317073170731,11.710715713714514,11.714114354258296,11.71751299480208,11.720911635345862,11.724310275889644,11.727708916433427,11.731107556977209,11.734506197520991,11.737904838064773,11.741303478608556,11.74470211915234,11.748100759696122,11.751499400239904,11.754898040783686,11.758296681327469,11.761695321871251,11.765093962415033,11.768492602958817,11.7718912435026,11.775289884046382,11.778688524590164,11.782087165133946,11.785485805677729,11.78888444622151,11.792283086765293,11.795681727309077,11.79908036785286,11.802479008396642,11.805877648940424,11.809276289484206,11.812674930027988,11.81607357057177,11.819472211115555,11.822870851659337,11.826269492203119,11.829668132746901,11.833066773290684,11.836465413834466,11.839864054378248,11.84326269492203,11.846661335465814,11.850059976009597,11.853458616553379,11.856857257097161,11.860255897640943,11.863654538184726,11.867053178728508,11.870451819272292,11.873850459816074,11.877249100359856,11.880647740903639,11.88404638144742,11.887445021991203,11.890843662534985,11.894242303078768,11.897640943622552,11.901039584166334,11.904438224710116,11.907836865253898,11.91123550579768,11.914634146341463,11.918032786885245,11.92143142742903,11.924830067972811,11.928228708516594,11.931627349060376,11.935025989604158,11.93842463014794,11.941823270691723,11.945221911235505,11.948620551779289,11.952019192323071,11.955417832866853,11.958816473410636,11.962215113954418,11.9656137544982,11.969012395041982,11.972411035585766,11.975809676129549,11.979208316673331,11.982606957217113,11.986005597760895,11.989404238304678,11.99280287884846,11.996201519392242,11.999600159936026,12.002998800479808,12.00639744102359,12.009796081567373,12.013194722111155,12.016593362654937,12.01999200319872,12.023390643742504,12.026789284286286,12.030187924830068,12.03358656537385,12.036985205917633,12.040383846461415,12.043782487005197,12.047181127548981,12.050579768092764,12.053978408636546,12.057377049180328,12.06077568972411,12.064174330267893,12.067572970811675,12.070971611355457,12.074370251899241,12.077768892443023,12.081167532986806,12.084566173530588,12.08796481407437,12.091363454618152,12.094762095161935,12.098160735705719,12.1015593762495,12.104958016793283,12.108356657337065,12.111755297880848,12.11515393842463,12.118552578968412,12.121951219512194,12.125349860055978,12.12874850059976,12.132147141143543,12.135545781687325,12.138944422231107,12.14234306277489,12.145741703318672,12.149140343862456,12.152538984406238,12.15593762495002,12.159336265493803,12.162734906037585,12.166133546581367,12.16953218712515,12.172930827668932,12.176329468212716,12.179728108756498,12.18312674930028,12.186525389844062,12.189924030387845,12.193322670931627,12.19672131147541,12.200119952019193,12.203518592562975,12.206917233106758,12.21031587365054,12.213714514194322,12.217113154738104,12.220511795281887,12.223910435825669,12.227309076369453,12.230707716913235,12.234106357457017,12.2375049980008,12.240903638544582,12.244302279088364,12.247700919632146,12.25109956017593,12.254498200719713,12.257896841263495,12.261295481807277,12.26469412235106,12.268092762894842,12.271491403438624,12.274890043982406,12.27828868452619,12.281687325069973,12.285085965613755,12.288484606157537,12.29188324670132,12.295281887245102,12.298680527788884,12.302079168332668,12.30547780887645,12.308876449420232,12.312275089964015,12.315673730507797,12.319072371051579,12.322471011595361,12.325869652139144,12.329268292682928,12.33266693322671,12.336065573770492,12.339464214314274,12.342862854858057,12.346261495401839,12.349660135945621,12.353058776489405,12.356457417033187,12.35985605757697,12.363254698120752,12.366653338664534,12.370051979208316,12.373450619752099,12.37684926029588,12.380247900839665,12.383646541383447,12.38704518192723,12.390443822471012,12.393842463014794,12.397241103558576,12.400639744102358,12.404038384646142,12.407437025189925,12.410835665733707,12.41423430627749,12.417632946821271,12.421031587365054,12.424430227908836,12.427828868452618,12.431227508996402,12.434626149540184,12.438024790083967,12.441423430627749,12.444822071171531,12.448220711715313,12.451619352259096,12.45501799280288,12.458416633346662,12.461815273890444,12.465213914434226,12.468612554978009,12.472011195521791,12.475409836065573,12.478808476609355,12.48220711715314,12.485605757696922,12.489004398240704,12.492403038784486,12.495801679328268,12.49920031987205,12.502598960415833,12.505997600959617,12.5093962415034,12.512794882047181,12.516193522590964,12.519592163134746,12.522990803678528,12.52638944422231,12.529788084766093,12.533186725309877,12.536585365853659,12.539984006397441,12.543382646941224,12.546781287485006,12.550179928028788,12.55357856857257,12.556977209116354,12.560375849660137,12.563774490203919,12.567173130747701,12.570571771291483,12.573970411835266,12.577369052379048,12.58076769292283,12.584166333466614,12.587564974010396,12.590963614554179,12.59436225509796,12.597760895641743,12.601159536185525,12.604558176729308,12.607956817273092,12.611355457816874,12.614754098360656,12.618152738904438,12.62155137944822,12.624950019992003,12.628348660535785,12.631747301079567,12.635145941623351,12.638544582167134,12.641943222710916,12.645341863254698,12.64874050379848,12.652139144342263,12.655537784886045,12.658936425429829,12.662335065973611,12.665733706517393,12.669132347061176,12.672530987604958,12.67592962814874,12.679328268692522,12.682726909236305,12.686125549780089,12.689524190323871,12.692922830867653,12.696321471411435,12.699720111955218,12.703118752499,12.706517393042782,12.709916033586566,12.713314674130348,12.71671331467413,12.720111955217913,12.723510595761695,12.726909236305477,12.73030787684926,12.733706517393042,12.737105157936826,12.740503798480608,12.74390243902439,12.747301079568173,12.750699720111955,12.754098360655737,12.75749700119952,12.760895641743303,12.764294282287086,12.767692922830868,12.77109156337465,12.774490203918432,12.777888844462215,12.781287485005997,12.78468612554978,12.788084766093563,12.791483406637346,12.794882047181128,12.79828068772491,12.801679328268692,12.805077968812475,12.808476609356257,12.81187524990004,12.815273890443823,12.818672530987605,12.822071171531388,12.82546981207517,12.828868452618952,12.832267093162734,12.835665733706517,12.8390643742503,12.842463014794083,12.845861655337865,12.849260295881647,12.85265893642543,12.856057576969212,12.859456217512994,12.862854858056778,12.86625349860056,12.869652139144343,12.873050779688125,12.876449420231907,12.87984806077569,12.883246701319472,12.886645341863254,12.890043982407038,12.89344262295082,12.896841263494602,12.900239904038385,12.903638544582167,12.907037185125949,12.910435825669731,12.913834466213515,12.917233106757298,12.92063174730108,12.924030387844862,12.927429028388644,12.930827668932427,12.934226309476209,12.937624950019991,12.941023590563775,12.944422231107557,12.94782087165134,12.951219512195122,12.954618152738904,12.958016793282686,12.961415433826469,12.964814074370253,12.968212714914035,12.971611355457817,12.9750099960016,12.978408636545382,12.981807277089164,12.985205917632946,12.988604558176728,12.992003198720512,12.995401839264295,12.998800479808077,13.00219912035186,13.005597760895641,13.008996401439424,13.012395041983206,13.01579368252699,13.019192323070772,13.022590963614554,13.025989604158337,13.029388244702119,13.032786885245901,13.036185525789683,13.039584166333466,13.04298280687725,13.046381447421032,13.049780087964814,13.053178728508597,13.056577369052379,13.059976009596161,13.063374650139943,13.066773290683727,13.07017193122751,13.073570571771292,13.076969212315074,13.080367852858856,13.083766493402639,13.08716513394642,13.090563774490203,13.093962415033987,13.09736105557777,13.100759696121552,13.104158336665334,13.107556977209116,13.110955617752898,13.11435425829668,13.117752898840465,13.121151539384247,13.124550179928029,13.127948820471811,13.131347461015594,13.134746101559376,13.138144742103158,13.141543382646942,13.144942023190724,13.148340663734507,13.151739304278289,13.155137944822071,13.158536585365853,13.161935225909636,13.165333866453418,13.168732506997202,13.172131147540984,13.175529788084766,13.178928428628549,13.18232706917233,13.185725709716113,13.189124350259895,13.19252299080368,13.195921631347462,13.199320271891244,13.202718912435026,13.206117552978808,13.20951619352259,13.212914834066373,13.216313474610155,13.21971211515394,13.223110755697721,13.226509396241504,13.229908036785286,13.233306677329068,13.23670531787285,13.240103958416633,13.243502598960417,13.246901239504199,13.250299880047981,13.253698520591763,13.257097161135546,13.260495801679328,13.26389444222311,13.267293082766892,13.270691723310676,13.274090363854459,13.277489004398241,13.280887644942023,13.284286285485805,13.287684926029588,13.29108356657337,13.294482207117154,13.297880847660936,13.301279488204719,13.3046781287485,13.308076769292283,13.311475409836065,13.314874050379848,13.31827269092363,13.321671331467414,13.325069972011196,13.328468612554978,13.33186725309876,13.335265893642543,13.338664534186325,13.342063174730107,13.345461815273891,13.348860455817674,13.352259096361456,13.355657736905238,13.35905637744902,13.362455017992803,13.365853658536585,13.369252299080367,13.372650939624151,13.376049580167933,13.379448220711716,13.382846861255498,13.38624550179928,13.389644142343062,13.393042782886845,13.396441423430629,13.39984006397441,13.403238704518193,13.406637345061975,13.410035985605758,13.41343462614954,13.416833266693322,13.420231907237104,13.423630547780888,13.42702918832467,13.430427828868453,13.433826469412235,13.437225109956017,13.4406237504998,13.444022391043582,13.447421031587366,13.450819672131148,13.45421831267493,13.457616953218713,13.461015593762495,13.464414234306277,13.46781287485006,13.471211515393842,13.474610155937626,13.478008796481408,13.48140743702519,13.484806077568972,13.488204718112755,13.491603358656537,13.49500199920032,13.498400639744103,13.501799280287885,13.505197920831668,13.50859656137545,13.511995201919232,13.515393842463014,13.518792483006797,13.522191123550579,13.525589764094363,13.528988404638145,13.532387045181927,13.53578568572571,13.539184326269492,13.542582966813274,13.545981607357056,13.54938024790084,13.552778888444623,13.556177528988405,13.559576169532187,13.56297481007597,13.566373450619752,13.569772091163534,13.573170731707316,13.5765693722511,13.579968012794883,13.583366653338665,13.586765293882447,13.59016393442623,13.593562574970012,13.596961215513794,13.600359856057578,13.60375849660136,13.607157137145142,13.610555777688925,13.613954418232707,13.617353058776489,13.620751699320271,13.624150339864054,13.627548980407838,13.63094762095162,13.634346261495402,13.637744902039184,13.641143542582967,13.644542183126749,13.647940823670531,13.651339464214315,13.654738104758097,13.65813674530188,13.661535385845662,13.664934026389444,13.668332666933226,13.671731307477009,13.67512994802079,13.678528588564575,13.681927229108357,13.68532586965214,13.688724510195922,13.692123150739704,13.695521791283486,13.698920431827268,13.702319072371052,13.705717712914835,13.709116353458617,13.7125149940024,13.715913634546181,13.719312275089964,13.722710915633746,13.726109556177528,13.729508196721312,13.732906837265094,13.736305477808877,13.739704118352659,13.743102758896441,13.746501399440223,13.749900039984006,13.75329868052779,13.756697321071572,13.760095961615354,13.763494602159136,13.766893242702919,13.770291883246701,13.773690523790483,13.777089164334265,13.78048780487805,13.783886445421832,13.787285085965614,13.790683726509396,13.794082367053178,13.79748100759696,13.800879648140743,13.804278288684527,13.80767692922831,13.811075569772091,13.814474210315874,13.817872850859656,13.821271491403438,13.82467013194722,13.828068772491003,13.831467413034787,13.834866053578569,13.838264694122351,13.841663334666134,13.845061975209916,13.848460615753698,13.85185925629748,13.855257896841264,13.858656537385047,13.862055177928829,13.865453818472611,13.868852459016393,13.872251099560176,13.875649740103958,13.87904838064774,13.882447021191524,13.885845661735306,13.889244302279089,13.89264294282287,13.896041583366653,13.899440223910435,13.902838864454218,13.906237504998002,13.909636145541784,13.913034786085566,13.916433426629348,13.91983206717313,13.923230707716913,13.926629348260695,13.930027988804477,13.933426629348261,13.936825269892044,13.940223910435826,13.943622550979608,13.94702119152339,13.950419832067173,13.953818472610955,13.957217113154739,13.960615753698521,13.964014394242303,13.967413034786086,13.970811675329868,13.97421031587365,13.977608956417432,13.981007596961215,13.984406237504999,13.987804878048781,13.991203518592563,13.994602159136345,13.998000799680128,14.00139944022391,14.004798080767692,14.008196721311476,14.011595361855258,14.01499400239904,14.018392642942823,14.021791283486605,14.025189924030387,14.02858856457417,14.031987205117952,14.035385845661736,14.038784486205518,14.0421831267493,14.045581767293083,14.048980407836865,14.052379048380647,14.05577768892443,14.059176329468213,14.062574970011996,14.065973610555778,14.06937225109956,14.072770891643342,14.076169532187125,14.079568172730907,14.08296681327469,14.086365453818473,14.089764094362256,14.093162734906038,14.09656137544982,14.099960015993602,14.103358656537385,14.106757297081167,14.11015593762495,14.113554578168733,14.116953218712515,14.120351859256298,14.12375049980008,14.127149140343862,14.130547780887644,14.133946421431427,14.13734506197521,14.140743702518993,14.144142343062775,14.147540983606557,14.15093962415034,14.154338264694122,14.157736905237904,14.161135545781688,14.16453418632547,14.167932826869253,14.171331467413035,14.174730107956817,14.1781287485006,14.181527389044382,14.184926029588166,14.188324670131948,14.19172331067573,14.195121951219512,14.198520591763295,14.201919232307077,14.20531787285086,14.208716513394641,14.212115153938425,14.215513794482208,14.21891243502599,14.222311075569772,14.225709716113554,14.229108356657337,14.232506997201119,14.235905637744903,14.239304278288685,14.242702918832467,14.24610155937625,14.249500199920032,14.252898840463814,14.256297481007596,14.259696121551379,14.263094762095163,14.266493402638945,14.269892043182727,14.27329068372651,14.276689324270292,14.280087964814074,14.283486605357856,14.28688524590164,14.290283886445422,14.293682526989205,14.297081167532987,14.30047980807677,14.303878448620551,14.307277089164334,14.310675729708116,14.3140743702519,14.317473010795682,14.320871651339464,14.324270291883247,14.327668932427029,14.331067572970811,14.334466213514593,14.337864854058378,14.34126349460216,14.344662135145942,14.348060775689724,14.351459416233507,14.354858056777289,14.358256697321071,14.361655337864853,14.365053978408637,14.36845261895242,14.371851259496202,14.375249900039984,14.378648540583766,14.382047181127549,14.38544582167133,14.388844462215115,14.392243102758897,14.39564174330268,14.399040383846462,14.402439024390244,14.405837664934026,14.409236305477808,14.41263494602159,14.416033586565375,14.419432227109157,14.422830867652939,14.426229508196721,14.429628148740504,14.433026789284286,14.436425429828068,14.439824070371852,14.443222710915634,14.446621351459417,14.450019992003199,14.453418632546981,14.456817273090763,14.460215913634546,14.463614554178328,14.467013194722112,14.470411835265894,14.473810475809676,14.477209116353459,14.480607756897241,14.484006397441023,14.487405037984805,14.49080367852859,14.494202319072372,14.497600959616154,14.500999600159936,14.504398240703718,14.5077968812475,14.511195521791283,14.514594162335065,14.51799280287885,14.521391443422631,14.524790083966414,14.528188724510196,14.531587365053978,14.53498600559776,14.538384646141543,14.541783286685327,14.545181927229109,14.548580567772891,14.551979208316673,14.555377848860456,14.558776489404238,14.56217512994802,14.565573770491802,14.568972411035586,14.572371051579369,14.575769692123151,14.579168332666933,14.582566973210715,14.585965613754498,14.58936425429828,14.592762894842064,14.596161535385846,14.599560175929629,14.60295881647341,14.606357457017193,14.609756097560975,14.613154738104758,14.61655337864854,14.619952019192324,14.623350659736106,14.626749300279888,14.63014794082367,14.633546581367453,14.636945221911235,14.640343862455017,14.643742502998801,14.647141143542584,14.650539784086366,14.653938424630148,14.65733706517393,14.660735705717713,14.664134346261495,14.667532986805277,14.670931627349061,14.674330267892843,14.677728908436626,14.681127548980408,14.68452618952419,14.687924830067972,14.691323470611755,14.694722111155539,14.69812075169932,14.701519392243103,14.704918032786885,14.708316673330668,14.71171531387445,14.715113954418232,14.718512594962014,14.721911235505798,14.72530987604958,14.728708516593363,14.732107157137145,14.735505797680927,14.73890443822471,14.742303078768492,14.745701719312276,14.749100359856058,14.75249900039984,14.755897640943623,14.759296281487405,14.762694922031187,14.76609356257497,14.769492203118752,14.772890843662536,14.776289484206318,14.7796881247501,14.783086765293882,14.786485405837665,14.789884046381447,14.79328268692523,14.796681327469013,14.800079968012795,14.803478608556578,14.80687724910036,14.810275889644142,14.813674530187924,14.817073170731707,14.820471811275489,14.823870451819273,14.827269092363055,14.830667732906837,14.83406637345062,14.837465013994402,14.840863654538184,14.844262295081966,14.84766093562575,14.851059576169533,14.854458216713315,14.857856857257097,14.86125549780088,14.864654138344662,14.868052778888444,14.871451419432226,14.87485005997601,14.878248700519793,14.881647341063575,14.885045981607357,14.88844462215114,14.891843262694922,14.895241903238704,14.898640543782488,14.90203918432627,14.905437824870052,14.908836465413835,14.912235105957617,14.915633746501399,14.919032387045181,14.922431027588964,14.925829668132748,14.92922830867653,14.932626949220312,14.936025589764094,14.939424230307877,14.942822870851659,14.946221511395441,14.949620151939225,14.953018792483007,14.95641743302679,14.959816073570572,14.963214714114354,14.966613354658136,14.970011995201919,14.9734106357457,14.976809276289485,14.980207916833267,14.98360655737705,14.987005197920832,14.990403838464614,14.993802479008396,14.997201119552178,15.000599760095962,15.003998400639745,15.007397041183527,15.01079568172731,15.014194322271091,15.017592962814874,15.020991603358656,15.024390243902438,15.027788884446222,15.031187524990004,15.034586165533787,15.037984806077569,15.041383446621351,15.044782087165133,15.048180727708916,15.0515793682527,15.054978008796482,15.058376649340264,15.061775289884046,15.065173930427829,15.068572570971611,15.071971211515393,15.075369852059175,15.07876849260296,15.082167133146742,15.085565773690524,15.088964414234306,15.092363054778088,15.09576169532187,15.099160335865653,15.102558976409437,15.10595761695322,15.109356257497002,15.112754898040784,15.116153538584566,15.119552179128348,15.12295081967213,15.126349460215913,15.129748100759697,15.133146741303479,15.136545381847261,15.139944022391044,15.143342662934826,15.146741303478608,15.15013994402239,15.153538584566174,15.156937225109957,15.160335865653739,15.163734506197521,15.167133146741303,15.170531787285086,15.173930427828868,15.17732906837265,15.180727708916434,15.184126349460216,15.187524990003999,15.19092363054778,15.194322271091563,15.197720911635345,15.201119552179128,15.204518192722912,15.207916833266694,15.211315473810476,15.214714114354258,15.21811275489804,15.221511395441823,15.224910035985605,15.22830867652939,15.231707317073171,15.235105957616954,15.238504598160736,15.241903238704518,15.2453018792483,15.248700519792083,15.252099160335865,15.255497800879649,15.258896441423431,15.262295081967213,15.265693722510996,15.269092363054778,15.27249100359856,15.275889644142342,15.279288284686126,15.282686925229909,15.286085565773691,15.289484206317473,15.292882846861255,15.296281487405038,15.29968012794882,15.303078768492602,15.306477409036386,15.309876049580168,15.31327469012395,15.316673330667733,15.320071971211515,15.323470611755297,15.32686925229908,15.330267892842864,15.333666533386646,15.337065173930428,15.34046381447421,15.343862455017993,15.347261095561775,15.350659736105557,15.35405837664934,15.357457017193124,15.360855657736906,15.364254298280688,15.36765293882447,15.371051579368253,15.374450219912035,15.377848860455817,15.381247500999601,15.384646141543383,15.388044782087166,15.391443422630948,15.39484206317473,15.398240703718512,15.401639344262295,15.405037984806077,15.40843662534986,15.411835265893643,15.415233906437425,15.418632546981208,15.42203118752499,15.425429828068772,15.428828468612554,15.432227109156338,15.43562574970012,15.439024390243903,15.442423030787685,15.445821671331467,15.44922031187525,15.452618952419032,15.456017592962814,15.459416233506598,15.46281487405038,15.466213514594163,15.469612155137945,15.473010795681727,15.47640943622551,15.479808076769292,15.483206717313076,15.486605357856858,15.49000399840064,15.493402638944422,15.496801279488205,15.500199920031987,15.50359856057577,15.506997201119551,15.510395841663335,15.513794482207118,15.5171931227509,15.520591763294682,15.523990403838464,15.527389044382247,15.530787684926029,15.534186325469813,15.537584966013595,15.540983606557377,15.54438224710116,15.547780887644942,15.551179528188724,15.554578168732506,15.557976809276289,15.561375449820073,15.564774090363855,15.568172730907637,15.57157137145142,15.574970011995202,15.578368652538984,15.581767293082766,15.58516593362655,15.588564574170332,15.591963214714115,15.595361855257897,15.59876049580168,15.602159136345461,15.605557776889244,15.608956417433026,15.61235505797681,15.615753698520592,15.619152339064375,15.622550979608157,15.625949620151939,15.629348260695721,15.632746901239504,15.636145541783288,15.63954418232707,15.642942822870852,15.646341463414634,15.649740103958417,15.653138744502199,15.656537385045981,15.659936025589763,15.663334666133547,15.66673330667733,15.670131947221112,15.673530587764894,15.676929228308676,15.680327868852459,15.68372650939624,15.687125149940025,15.690523790483807,15.69392243102759,15.697321071571372,15.700719712115154,15.704118352658936,15.707516993202718,15.7109156337465,15.714314274290285,15.717712914834067,15.721111555377849,15.724510195921631,15.727908836465414,15.731307477009196,15.734706117552978,15.738104758096762,15.741503398640544,15.744902039184327,15.748300679728109,15.751699320271891,15.755097960815673,15.758496601359456,15.761895241903238,15.765293882447022,15.768692522990804,15.772091163534586,15.775489804078369,15.778888444622151,15.782287085165933,15.785685725709715,15.7890843662535,15.792483006797282,15.795881647341064,15.799280287884846,15.802678928428628,15.80607756897241,15.809476209516193,15.812874850059975,15.81627349060376,15.819672131147541,15.823070771691324,15.826469412235106,15.829868052778888,15.83326669332267,15.836665333866453,15.840063974410237,15.843462614954019,15.846861255497801,15.850259896041583,15.853658536585366,15.857057177129148,15.86045581767293,15.863854458216712,15.867253098760496,15.870651739304279,15.874050379848061,15.877449020391843,15.880847660935625,15.884246301479408,15.88764494202319,15.891043582566974,15.894442223110756,15.897840863654539,15.90123950419832,15.904638144742103,15.908036785285885,15.911435425829668,15.91483406637345,15.918232706917234,15.921631347461016,15.925029988004798,15.92842862854858,15.931827269092363,15.935225909636145,15.938624550179927,15.942023190723711,15.945421831267494,15.948820471811276,15.952219112355058,15.95561775289884,15.959016393442623,15.962415033986405,15.965813674530187,15.969212315073971,15.972610955617753,15.976009596161536,15.979408236705318,15.9828068772491,15.986205517792882,15.989604158336665,15.993002798880449,15.99640143942423,15.999800079968013,16.003198720511794,16.00659736105558,16.00999600159936,16.013394642143144,16.016793282686926,16.02019192323071,16.02359056377449,16.026989204318273,16.030387844862055,16.033786485405837,16.03718512594962,16.040583766493402,16.043982407037184,16.047381047580966,16.05077968812475,16.05417832866853,16.057576969212317,16.0609756097561,16.06437425029988,16.067772890843663,16.071171531387446,16.074570171931228,16.07796881247501,16.081367453018792,16.084766093562575,16.088164734106357,16.09156337465014,16.09496201519392,16.098360655737704,16.101759296281486,16.105157936825268,16.108556577369054,16.111955217912836,16.11535385845662,16.1187524990004,16.122151139544183,16.125549780087965,16.128948420631747,16.13234706117553,16.135745701719312,16.139144342263094,16.142542982806876,16.14594162335066,16.14934026389444,16.152738904438223,16.156137544982005,16.15953618552579,16.162934826069574,16.166333466613356,16.169732107157138,16.17313074770092,16.176529388244703,16.179928028788485,16.183326669332267,16.18672530987605,16.19012395041983,16.193522590963614,16.196921231507396,16.20031987205118,16.20371851259496,16.207117153138743,16.21051579368253,16.21391443422631,16.217313074770093,16.220711715313875,16.224110355857658,16.22750899640144,16.230907636945222,16.234306277489004,16.237704918032787,16.24110355857657,16.24450219912035,16.247900839664133,16.251299480207916,16.254698120751698,16.25809676129548,16.261495401839266,16.264894042383048,16.26829268292683,16.271691323470613,16.275089964014395,16.278488604558177,16.28188724510196,16.28528588564574,16.288684526189524,16.292083166733306,16.29548180727709,16.29888044782087,16.302279088364653,16.305677728908435,16.309076369452217,16.312475009996003,16.315873650539785,16.319272291083568,16.32267093162735,16.326069572171132,16.329468212714914,16.332866853258697,16.33626549380248,16.33966413434626,16.343062774890043,16.346461415433826,16.349860055977608,16.35325869652139,16.356657337065172,16.360055977608955,16.36345461815274,16.366853258696523,16.370251899240305,16.373650539784087,16.37704918032787,16.38044782087165,16.383846461415434,16.387245101959216,16.390643742503,16.39404238304678,16.397441023590563,16.400839664134345,16.404238304678127,16.40763694522191,16.411035585765692,16.414434226309478,16.41783286685326,16.421231507397042,16.424630147940825,16.428028788484607,16.43142742902839,16.43482606957217,16.438224710115954,16.441623350659736,16.445021991203518,16.4484206317473,16.451819272291083,16.455217912834865,16.458616553378647,16.46201519392243,16.465413834466215,16.468812475009997,16.47221111555378,16.475609756097562,16.479008396641344,16.482407037185126,16.48580567772891,16.48920431827269,16.492602958816473,16.496001599360255,16.499400239904038,16.50279888044782,16.506197520991602,16.509596161535384,16.512994802079167,16.516393442622952,16.519792083166735,16.523190723710517,16.5265893642543,16.52998800479808,16.533386645341864,16.536785285885646,16.540183926429428,16.54358256697321,16.546981207516993,16.550379848060775,16.553778488604557,16.55717712914834,16.56057576969212,16.563974410235904,16.56737305077969,16.570771691323472,16.574170331867254,16.577568972411036,16.58096761295482,16.5843662534986,16.587764894042383,16.591163534586165,16.594562175129948,16.59796081567373,16.601359456217512,16.604758096761294,16.608156737305077,16.61155537784886,16.61495401839264,16.618352658936427,16.62175129948021,16.62514994002399,16.628548580567774,16.631947221111556,16.63534586165534,16.63874450219912,16.642143142742903,16.645541783286685,16.648940423830467,16.65233906437425,16.65573770491803,16.659136345461814,16.662534986005596,16.66593362654938,16.669332267093164,16.672730907636947,16.67612954818073,16.67952818872451,16.682926829268293,16.686325469812076,16.689724110355858,16.69312275089964,16.696521391443422,16.699920031987205,16.703318672530987,16.70671731307477,16.71011595361855,16.713514594162334,16.716913234706116,16.7203118752499,16.723710515793684,16.727109156337466,16.73050779688125,16.73390643742503,16.737305077968813,16.740703718512595,16.744102359056377,16.74750099960016,16.750899640143942,16.754298280687724,16.757696921231506,16.76109556177529,16.76449420231907,16.767892842862853,16.77129148340664,16.77469012395042,16.778088764494203,16.781487405037986,16.784886045581768,16.78828468612555,16.791683326669332,16.795081967213115,16.798480607756897,16.80187924830068,16.80527788884446,16.808676529388244,16.812075169932026,16.815473810475808,16.818872451019594,16.822271091563376,16.82566973210716,16.82906837265094,16.832467013194723,16.835865653738505,16.839264294282287,16.84266293482607,16.846061575369852,16.849460215913634,16.852858856457416,16.8562574970012,16.85965613754498,16.863054778088763,16.866453418632545,16.86985205917633,16.873250699720113,16.876649340263896,16.880047980807678,16.88344662135146,16.886845261895242,16.890243902439025,16.893642542982807,16.89704118352659,16.90043982407037,16.903838464614154,16.907237105157936,16.91063574570172,16.9140343862455,16.917433026789283,16.92083166733307,16.92423030787685,16.927628948420633,16.931027588964415,16.934426229508198,16.93782487005198,16.941223510595762,16.944622151139544,16.948020791683327,16.95141943222711,16.95481807277089,16.958216713314673,16.961615353858456,16.965013994402238,16.96841263494602,16.971811275489806,16.975209916033588,16.97860855657737,16.982007197121153,16.985405837664935,16.988804478208717,16.9922031187525,16.99560175929628,16.999000399840064,17.002399040383846,17.00579768092763,17.00919632147141,17.012594962015193,17.015993602558975,17.019392243102757,17.022790883646543,17.026189524190325,17.029588164734108,17.03298680527789,17.036385445821672,17.039784086365454,17.043182726909237,17.04658136745302,17.0499800079968,17.053378648540583,17.056777289084366,17.060175929628148,17.06357457017193,17.066973210715712,17.070371851259495,17.07377049180328,17.077169132347063,17.080567772890845,17.083966413434627,17.08736505397841,17.09076369452219,17.094162335065974,17.097560975609756,17.10095961615354,17.10435825669732,17.107756897241103,17.111155537784885,17.114554178328667,17.11795281887245,17.121351459416232,17.124750099960018,17.1281487405038,17.131547381047582,17.134946021591364,17.138344662135147,17.14174330267893,17.14514194322271,17.148540583766493,17.151939224310276,17.155337864854058,17.15873650539784,17.162135145941622,17.165533786485405,17.168932427029187,17.17233106757297,17.175729708116755,17.179128348660537,17.18252698920432,17.185925629748102,17.189324270291884,17.192722910835666,17.19612155137945,17.19952019192323,17.202918832467013,17.206317473010795,17.209716113554578,17.21311475409836,17.216513394642142,17.219912035185924,17.223310675729707,17.226709316273492,17.230107956817275,17.233506597361057,17.23690523790484,17.24030387844862,17.243702518992404,17.247101159536186,17.250499800079968,17.25389844062375,17.257297081167533,17.260695721711315,17.264094362255097,17.26749300279888,17.27089164334266,17.274290283886444,17.27768892443023,17.281087564974012,17.284486205517794,17.287884846061576,17.29128348660536,17.29468212714914,17.298080767692923,17.301479408236705,17.304878048780488,17.30827668932427,17.311675329868052,17.315073970411834,17.318472610955617,17.3218712514994,17.32526989204318,17.328668532586967,17.33206717313075,17.33546581367453,17.338864454218314,17.342263094762096,17.345661735305878,17.34906037584966,17.352459016393443,17.355857656937225,17.359256297481007,17.36265493802479,17.36605357856857,17.369452219112354,17.372850859656136,17.37624950019992,17.379648140743704,17.383046781287486,17.38644542183127,17.38984406237505,17.393242702918833,17.396641343462615,17.400039984006398,17.40343862455018,17.406837265093962,17.410235905637744,17.413634546181527,17.41703318672531,17.42043182726909,17.423830467812873,17.427229108356656,17.43062774890044,17.434026389444224,17.437425029988006,17.44082367053179,17.44422231107557,17.447620951619353,17.451019592163135,17.454418232706917,17.4578168732507,17.461215513794482,17.464614154338264,17.468012794882046,17.47141143542583,17.47481007596961,17.478208716513393,17.48160735705718,17.48500599760096,17.488404638144743,17.491803278688526,17.495201919232308,17.49860055977609,17.501999200319872,17.505397840863655,17.508796481407437,17.51219512195122,17.515593762495,17.518992403038784,17.522391043582566,17.525789684126348,17.52918832467013,17.532586965213916,17.5359856057577,17.53938424630148,17.542782886845263,17.546181527389045,17.549580167932827,17.55297880847661,17.556377449020392,17.559776089564174,17.563174730107956,17.56657337065174,17.56997201119552,17.573370651739303,17.576769292283085,17.580167932826868,17.583566573370653,17.586965213914436,17.590363854458218,17.593762495002,17.597161135545782,17.600559776089565,17.603958416633347,17.60735705717713,17.61075569772091,17.614154338264694,17.617552978808476,17.620951619352258,17.62435025989604,17.627748900439823,17.631147540983605,17.63454618152739,17.637944822071173,17.641343462614955,17.644742103158737,17.64814074370252,17.651539384246302,17.654938024790084,17.658336665333866,17.66173530587765,17.66513394642143,17.668532586965213,17.671931227508995,17.675329868052778,17.67872850859656,17.682127149140342,17.685525789684128,17.68892443022791,17.692323070771693,17.695721711315475,17.699120351859257,17.70251899240304,17.70591763294682,17.709316273490604,17.712714914034386,17.71611355457817,17.71951219512195,17.722910835665733,17.726309476209515,17.729708116753297,17.73310675729708,17.736505397840865,17.739904038384648,17.74330267892843,17.746701319472212,17.750099960015994,17.753498600559777,17.75689724110356,17.76029588164734,17.763694522191123,17.767093162734906,17.770491803278688,17.77389044382247,17.777289084366252,17.780687724910035,17.784086365453817,17.787485005997603,17.790883646541385,17.794282287085167,17.79768092762895,17.80107956817273,17.804478208716514,17.807876849260296,17.81127548980408,17.81467413034786,17.818072770891643,17.821471411435425,17.824870051979207,17.82826869252299,17.831667333066772,17.835065973610554,17.83846461415434,17.841863254698122,17.845261895241904,17.848660535785687,17.85205917632947,17.85545781687325,17.858856457417033,17.862255097960816,17.865653738504598,17.86905237904838,17.872451019592162,17.875849660135945,17.879248300679727,17.88264694122351,17.88604558176729,17.889444222311077,17.89284286285486,17.89624150339864,17.899640143942424,17.903038784486206,17.90643742502999,17.90983606557377,17.913234706117553,17.916633346661335,17.920031987205117,17.9234306277489,17.926829268292682,17.930227908836464,17.933626549380246,17.93702518992403,17.940423830467815,17.943822471011597,17.94722111155538,17.95061975209916,17.954018392642944,17.957417033186726,17.960815673730508,17.96421431427429,17.967612954818073,17.971011595361855,17.974410235905637,17.97780887644942,17.9812075169932,17.984606157536984,17.988004798080766,17.991403438624552,17.994802079168334,17.998200719712116,18.0015993602559,18.00499800079968,18.008396641343463,18.011795281887245,18.015193922431028,18.01859256297481,18.021991203518592,18.025389844062374,18.028788484606157,18.03218712514994,18.03558576569372,18.038984406237503,18.04238304678129,18.04578168732507,18.049180327868854,18.052578968412636,18.055977608956418,18.0593762495002,18.062774890043983,18.066173530587765,18.069572171131547,18.07297081167533,18.07636945221911,18.079768092762894,18.083166733306676,18.08656537385046,18.08996401439424,18.093362654938026,18.09676129548181,18.10015993602559,18.103558576569373,18.106957217113155,18.110355857656938,18.11375449820072,18.117153138744502,18.120551779288284,18.123950419832067,18.12734906037585,18.13074770091963,18.134146341463413,18.137544982007196,18.140943622550978,18.144342263094764,18.147740903638546,18.151139544182328,18.15453818472611,18.157936825269893,18.161335465813675,18.164734106357457,18.16813274690124,18.17153138744502,18.174930027988804,18.178328668532586,18.18172730907637,18.18512594962015,18.188524590163933,18.191923230707715,18.1953218712515,18.198720511795283,18.202119152339066,18.205517792882848,18.20891643342663,18.212315073970412,18.215713714514195,18.219112355057977,18.22251099560176,18.22590963614554,18.229308276689324,18.232706917233106,18.236105557776888,18.23950419832067,18.242902838864453,18.24630147940824,18.24970011995202,18.253098760495803,18.256497401039585,18.259896041583367,18.26329468212715,18.266693322670932,18.270091963214714,18.273490603758496,18.27688924430228,18.28028788484606,18.283686525389843,18.287085165933625,18.290483806477408,18.29388244702119,18.297281087564976,18.300679728108758,18.30407836865254,18.307477009196322,18.310875649740105,18.314274290283887,18.31767293082767,18.32107157137145,18.324470211915234,18.327868852459016,18.331267493002798,18.33466613354658,18.338064774090363,18.341463414634145,18.344862055177927,18.348260695721713,18.351659336265495,18.355057976809277,18.35845661735306,18.361855257896842,18.365253898440624,18.368652538984406,18.37205117952819,18.37544982007197,18.378848460615753,18.382247101159535,18.385645741703318,18.3890443822471,18.392443022790882,18.395841663334664,18.39924030387845,18.402638944422232,18.406037584966015,18.409436225509797,18.41283486605358,18.41623350659736,18.419632147141144,18.423030787684926,18.426429428228708,18.42982806877249,18.433226709316273,18.436625349860055,18.440023990403837,18.44342263094762,18.4468212714914,18.450219912035188,18.45361855257897,18.457017193122752,18.460415833666534,18.463814474210317,18.4672131147541,18.47061175529788,18.474010395841663,18.477409036385446,18.480807676929228,18.48420631747301,18.487604958016792,18.491003598560575,18.494402239104357,18.49780087964814,18.501199520191925,18.504598160735707,18.50799680127949,18.51139544182327,18.514794082367054,18.518192722910836,18.52159136345462,18.5249900039984,18.528388644542183,18.531787285085965,18.535185925629747,18.53858456617353,18.541983206717312,18.545381847261094,18.548780487804876,18.552179128348662,18.555577768892444,18.558976409436227,18.56237504998001,18.56577369052379,18.569172331067573,18.572570971611356,18.575969612155138,18.57936825269892,18.582766893242702,18.586165533786485,18.589564174330267,18.59296281487405,18.59636145541783,18.599760095961614,18.6031587365054,18.60655737704918,18.609956017592964,18.613354658136746,18.61675329868053,18.62015193922431,18.623550579768093,18.626949220311875,18.630347860855657,18.63374650139944,18.637145141943222,18.640543782487004,18.643942423030786,18.64734106357457,18.65073970411835,18.654138344662137,18.65753698520592,18.6609356257497,18.664334266293483,18.667732906837266,18.671131547381048,18.67453018792483,18.677928828468612,18.681327469012395,18.684726109556177,18.68812475009996,18.69152339064374,18.694922031187524,18.698320671731306,18.701719312275088,18.705117952818874,18.708516593362656,18.71191523390644,18.71531387445022,18.718712514994003,18.722111155537785,18.725509796081568,18.72890843662535,18.732307077169132,18.735705717712914,18.739104358256697,18.74250299880048,18.74590163934426,18.749300279888043,18.752698920431826,18.75609756097561,18.759496201519394,18.762894842063176,18.766293482606958,18.76969212315074,18.773090763694523,18.776489404238305,18.779888044782087,18.78328668532587,18.78668532586965,18.790083966413434,18.793482606957216,18.796881247501,18.80027988804478,18.803678528588563,18.80707716913235,18.81047580967613,18.813874450219913,18.817273090763695,18.820671731307478,18.82407037185126,18.827469012395042,18.830867652938824,18.834266293482607,18.83766493402639,18.84106357457017,18.844462215113953,18.847860855657736,18.851259496201518,18.8546581367453,18.858056777289086,18.861455417832868,18.86485405837665,18.868252698920433,18.871651339464215,18.875049980007997,18.87844862055178,18.88184726109556,18.885245901639344,18.888644542183126,18.89204318272691,18.89544182327069,18.898840463814473,18.902239104358255,18.905637744902037,18.909036385445823,18.912435025989605,18.915833666533388,18.91923230707717,18.922630947620952,18.926029588164734,18.929428228708517,18.9328268692523,18.93622550979608,18.939624150339863,18.943022790883646,18.946421431427428,18.94982007197121,18.953218712514992,18.95661735305878,18.96001599360256,18.963414634146343,18.966813274690125,18.970211915233907,18.97361055577769,18.97700919632147,18.980407836865254,18.983806477409036,18.98720511795282,18.9906037584966,18.994002399040383,18.997401039584165,19.000799680127948,19.00419832067173,19.007596961215516,19.010995601759298,19.01439424230308,19.017792882846862,19.021191523390645,19.024590163934427,19.02798880447821,19.03138744502199,19.034786085565774,19.038184726109556,19.041583366653338,19.04498200719712,19.048380647740903,19.051779288284685,19.055177928828467,19.058576569372253,19.061975209916035,19.065373850459817,19.0687724910036,19.072171131547382,19.075569772091164,19.078968412634946,19.08236705317873,19.08576569372251,19.089164334266293,19.092562974810075,19.095961615353858,19.09936025589764,19.102758896441422,19.106157536985204,19.10955617752899,19.112954818072772,19.116353458616555,19.119752099160337,19.12315073970412,19.1265493802479,19.129948020791684,19.133346661335466,19.136745301879248,19.14014394242303,19.143542582966813,19.146941223510595,19.150339864054377,19.15373850459816,19.15713714514194,19.160535785685727,19.16393442622951,19.167333066773292,19.170731707317074,19.174130347860856,19.17752898840464,19.18092762894842,19.184326269492203,19.187724910035985,19.191123550579768,19.19452219112355,19.197920831667332,19.201319472211114,19.204718112754897,19.20811675329868,19.211515393842465,19.214914034386247,19.21831267493003,19.22171131547381,19.225109956017594,19.228508596561376,19.23190723710516,19.23530587764894,19.238704518192723,19.242103158736505,19.245501799280287,19.24890043982407,19.25229908036785,19.255697720911634,19.259096361455416,19.262495001999202,19.265893642542984,19.269292283086767,19.27269092363055,19.27608956417433,19.279488204718113,19.282886845261896,19.286285485805678,19.28968412634946,19.293082766893242,19.296481407437025,19.299880047980807,19.30327868852459,19.30667732906837,19.310075969612154,19.31347461015594,19.31687325069972,19.320271891243504,19.323670531787286,19.32706917233107,19.33046781287485,19.333866453418633,19.337265093962415,19.340663734506197,19.34406237504998,19.347461015593762,19.350859656137544,19.354258296681326,19.35765693722511,19.36105557776889,19.364454218312677,19.36785285885646,19.37125149940024,19.374650139944023,19.378048780487806,19.381447421031588,19.38484606157537,19.388244702119152,19.391643342662935,19.395041983206717,19.3984406237505,19.40183926429428,19.405237904838064,19.408636545381846,19.412035185925628,19.415433826469414,19.418832467013196,19.42223110755698,19.42562974810076,19.429028388644543,19.432427029188325,19.435825669732107,19.43922431027589,19.442622950819672,19.446021591363454,19.449420231907236,19.45281887245102,19.4562175129948,19.459616153538583,19.463014794082365,19.46641343462615,19.469812075169934,19.473210715713716,19.476609356257498,19.48000799680128,19.483406637345063,19.486805277888845,19.490203918432627,19.49360255897641,19.49700119952019,19.500399840063974,19.503798480607756,19.50719712115154,19.51059576169532,19.513994402239103,19.51739304278289,19.52079168332667,19.524190323870453,19.527588964414235,19.530987604958018,19.5343862455018,19.537784886045582,19.541183526589364,19.544582167133147,19.54798080767693,19.55137944822071,19.554778088764493,19.558176729308276,19.561575369852058,19.56497401039584,19.568372650939626,19.571771291483408,19.57516993202719,19.578568572570973,19.581967213114755,19.585365853658537,19.58876449420232,19.5921631347461,19.595561775289884,19.598960415833666,19.60235905637745,19.60575769692123,19.609156337465013,19.612554978008795,19.615953618552577,19.619352259096363,19.622750899640145,19.626149540183928,19.62954818072771,19.632946821271492,19.636345461815274,19.639744102359057,19.64314274290284,19.64654138344662,19.649940023990403,19.653338664534186,19.656737305077968,19.66013594562175,19.663534586165532,19.666933226709315,19.6703318672531,19.673730507796883,19.677129148340665,19.680527788884447,19.68392642942823,19.68732506997201,19.690723710515794,19.694122351059576,19.69752099160336,19.70091963214714,19.704318272690923,19.707716913234705,19.711115553778487,19.71451419432227,19.717912834866052,19.721311475409838,19.72471011595362,19.728108756497402,19.731507397041185,19.734906037584967,19.73830467812875,19.74170331867253,19.745101959216314,19.748500599760096,19.751899240303878,19.75529788084766,19.758696521391443,19.762095161935225,19.765493802479007,19.76889244302279,19.772291083566575,19.775689724110357,19.77908836465414,19.782487005197922,19.785885645741704,19.789284286285486,19.79268292682927,19.79608156737305,19.799480207916833,19.802878848460615,19.806277489004398,19.80967612954818,19.813074770091962,19.816473410635744,19.819872051179527,19.823270691723312,19.826669332267095,19.830067972810877,19.83346661335466,19.83686525389844,19.840263894442224,19.843662534986006,19.847061175529788,19.85045981607357,19.853858456617353,19.857257097161135,19.860655737704917,19.8640543782487,19.86745301879248,19.870851659336264,19.87425029988005,19.877648940423832,19.881047580967614,19.884446221511396,19.88784486205518,19.89124350259896,19.894642143142743,19.898040783686525,19.901439424230308,19.90483806477409,19.908236705317872,19.911635345861654,19.915033986405437,19.91843262694922,19.921831267493,19.925229908036787,19.92862854858057,19.93202718912435,19.935425829668134,19.938824470211916,19.942223110755698,19.94562175129948,19.949020391843263,19.952419032387045,19.955817672930827,19.95921631347461,19.96261495401839,19.966013594562174,19.969412235105956,19.97281087564974,19.976209516193524,19.979608156737307,19.98300679728109,19.98640543782487,19.989804078368653,19.993202718912436,19.996601359456218,20.0]}
},{}],55:[function(require,module,exports){
module.exports={"expected":[1.118034,1.1177268,1.1174198,1.1171131,1.1168066,1.1165005,1.1161945,1.1158888,1.1155834,1.1152781,1.1149732,1.1146685,1.1143641,1.1140599,1.113756,1.1134523,1.1131488,1.1128457,1.1125426,1.11224,1.1119375,1.1116353,1.1113334,1.1110317,1.1107302,1.1104289,1.1101279,1.1098272,1.1095266,1.1092265,1.1089264,1.1086266,1.1083272,1.1080278,1.1077288,1.10743,1.1071315,1.1068331,1.1065351,1.1062372,1.1059396,1.1056423,1.1053451,1.1050483,1.1047517,1.1044552,1.1041591,1.1038632,1.1035675,1.1032721,1.1029769,1.1026819,1.1023872,1.1020927,1.1017984,1.1015044,1.1012106,1.1009171,1.1006237,1.1003307,1.1000378,1.0997453,1.0994529,1.0991607,1.0988687,1.0985771,1.0982857,1.0979944,1.0977035,1.0974127,1.0971222,1.0968318,1.0965418,1.096252,1.0959623,1.095673,1.0953838,1.0950949,1.0948062,1.0945177,1.0942295,1.0939415,1.0936537,1.0933661,1.0930789,1.0927917,1.0925049,1.0922182,1.0919318,1.0916456,1.0913596,1.0910739,1.0907884,1.0905031,1.090218,1.0899332,1.0896485,1.089364,1.0890799,1.0887959,1.0885122,1.0882287,1.0879453,1.0876623,1.0873795,1.0870968,1.0868144,1.0865322,1.0862503,1.0859685,1.0856869,1.0854057,1.0851246,1.0848436,1.084563,1.0842826,1.0840024,1.0837224,1.0834426,1.0831629,1.0828836,1.0826044,1.0823256,1.0820469,1.0817683,1.08149,1.0812119,1.0809342,1.0806565,1.080379,1.0801018,1.0798248,1.0795481,1.0792716,1.0789951,1.078719,1.078443,1.0781673,1.0778918,1.0776166,1.0773414,1.0770665,1.0767919,1.0765175,1.0762432,1.0759691,1.0756953,1.0754217,1.0751482,1.0748751,1.0746021,1.0743293,1.0740567,1.0737844,1.0735122,1.0732402,1.0729685,1.0726969,1.0724255,1.0721544,1.0718834,1.0716127,1.0713422,1.0710719,1.0708019,1.0705318,1.0702622,1.0699927,1.0697234,1.0694543,1.0691854,1.0689168,1.0686482,1.06838,1.0681119,1.067844,1.0675764,1.0673089,1.0670416,1.0667745,1.0665077,1.066241,1.0659745,1.0657083,1.0654422,1.0651762,1.0649107,1.0646452,1.0643799,1.0641148,1.0638499,1.0635853,1.0633208,1.0630565,1.0627924,1.0625285,1.0622648,1.0620012,1.061738,1.0614748,1.061212,1.0609492,1.0606867,1.0604243,1.0601622,1.0599003,1.0596385,1.059377,1.0591156,1.0588545,1.0585935,1.0583327,1.0580721,1.0578117,1.0575515,1.0572915,1.0570316,1.056772,1.0565126,1.0562533,1.0559943,1.0557355,1.0554768,1.0552182,1.05496,1.0547019,1.054444,1.0541862,1.0539287,1.0536714,1.0534142,1.0531572,1.0529004,1.0526438,1.0523875,1.0521312,1.0518751,1.0516193,1.0513637,1.0511081,1.0508529,1.0505978,1.0503429,1.0500882,1.0498335,1.0495791,1.049325,1.0490711,1.0488173,1.0485636,1.0483102,1.048057,1.0478039,1.0475509,1.0472982,1.0470457,1.0467933,1.0465412,1.0462892,1.0460374,1.0457858,1.0455344,1.0452832,1.045032,1.0447812,1.0445305,1.0442799,1.0440296,1.0437795,1.0435295,1.0432796,1.04303,1.0427805,1.0425313,1.0422822,1.0420333,1.0417845,1.041536,1.0412877,1.0410395,1.0407914,1.0405436,1.0402958,1.0400484,1.0398011,1.0395539,1.0393069,1.0390601,1.0388136,1.0385671,1.0383208,1.0380747,1.0378288,1.0375831,1.0373375,1.0370921,1.0368469,1.0366019,1.036357,1.0361123,1.0358678,1.0356234,1.0353793,1.0351353,1.0348915,1.0346478,1.0344043,1.034161,1.0339179,1.0336748,1.0334321,1.0331894,1.0329471,1.0327047,1.0324626,1.0322207,1.0319788,1.0317373,1.0314958,1.0312545,1.0310135,1.0307726,1.0305318,1.0302912,1.0300508,1.0298105,1.0295705,1.0293305,1.0290908,1.0288512,1.0286118,1.0283725,1.0281334,1.0278945,1.0276557,1.0274172,1.0271788,1.0269405,1.0267024,1.0264645,1.0262268,1.0259892,1.0257517,1.0255145,1.0252774,1.0250404,1.0248036,1.024567,1.0243306,1.0240943,1.0238582,1.0236223,1.0233865,1.0231509,1.0229154,1.0226802,1.022445,1.02221,1.0219752,1.0217406,1.0215061,1.0212717,1.0210376,1.0208036,1.0205697,1.020336,1.0201025,1.0198692,1.0196359,1.0194029,1.01917,1.0189373,1.0187048,1.0184723,1.0182401,1.018008,1.017776,1.0175443,1.0173126,1.0170813,1.0168499,1.0166188,1.0163878,1.016157,1.0159264,1.0156958,1.0154655,1.0152353,1.0150052,1.0147754,1.0145457,1.0143161,1.0140866,1.0138574,1.0136282,1.0133994,1.0131705,1.012942,1.0127134,1.012485,1.0122569,1.0120289,1.011801,1.0115733,1.0113457,1.0111183,1.0108911,1.010664,1.010437,1.0102103,1.0099837,1.0097572,1.0095308,1.0093046,1.0090785,1.0088527,1.0086269,1.0084014,1.008176,1.0079507,1.0077256,1.0075005,1.0072757,1.0070511,1.0068265,1.0066022,1.0063779,1.006154,1.00593,1.0057062,1.0054826,1.0052592,1.0050358,1.0048126,1.0045896,1.0043668,1.004144,1.0039214,1.003699,1.0034766,1.0032545,1.0030326,1.0028107,1.002589,1.0023675,1.002146,1.0019248,1.0017036,1.0014827,1.001262,1.0010412,1.0008206,1.0006003,1.00038,1.00016,0.99994004,0.9997202,0.9995006,0.99928105,0.9990617,0.9988425,0.99862343,0.99840444,0.9981857,0.997967,0.99774855,0.99753016,0.99731195,0.99709386,0.996876,0.99665815,0.99644053,0.99622303,0.9960057,0.99578846,0.9955714,0.9953544,0.9951377,0.994921,0.9947045,0.9944881,0.9942719,0.9940558,0.99383986,0.9936241,0.9934084,0.9931929,0.9929775,0.99276227,0.99254715,0.9923322,0.99211735,0.9919027,0.99168813,0.99147373,0.99125946,0.99104536,0.9908314,0.9906175,0.9904038,0.99019027,0.98997676,0.9897635,0.98955035,0.9893373,0.9891244,0.98891175,0.9886991,0.98848665,0.9882743,0.9880621,0.98785,0.9876381,0.9874263,0.9872147,0.98700315,0.9867918,0.9865805,0.98636943,0.98615843,0.9859476,0.9857369,0.9855263,0.9853159,0.9851056,0.9848954,0.98468536,0.9844755,0.98426574,0.9840561,0.9838466,0.9836373,0.983428,0.98321897,0.98301,0.98280114,0.98259246,0.9823839,0.98217547,0.9819672,0.981759,0.981551,0.9813431,0.98113537,0.9809277,0.9807202,0.9805128,0.9803056,0.9800985,0.97989154,0.97968465,0.97947794,0.97927135,0.97906494,0.9788586,0.9786524,0.9784463,0.97824043,0.9780346,0.9778289,0.9776234,0.977418,0.97721267,0.97700757,0.9768025,0.9765976,0.97639287,0.9761882,0.9759837,0.9757793,0.9755751,0.97537094,0.975167,0.97496307,0.97475934,0.97455573,0.97435224,0.97414887,0.9739457,0.97374254,0.9735396,0.9733367,0.973134,0.9729314,0.97272897,0.97252655,0.9723244,0.97212225,0.9719203,0.9717185,0.9715168,0.97131515,0.97111374,0.97091234,0.9707112,0.97051007,0.97030914,0.9701083,0.9699076,0.96970695,0.96950656,0.9693062,0.96910596,0.96890587,0.96870595,0.96850604,0.96830636,0.96810675,0.96790725,0.96770793,0.9675087,0.9673096,0.9671106,0.96691173,0.966713,0.9665144,0.96631587,0.96611756,0.96591926,0.9657212,0.9655231,0.9653253,0.9651275,0.9649299,0.96473235,0.964535,0.9643377,0.96414053,0.9639435,0.9637466,0.9635498,0.96335316,0.9631566,0.9629602,0.96276385,0.9625677,0.9623716,0.96217567,0.9619798,0.9617841,0.9615885,0.96139306,0.9611977,0.96100247,0.9608073,0.96061236,0.96041745,0.9602227,0.96002805,0.9598335,0.95963913,0.9594448,0.9592507,0.9590566,0.9588627,0.9586689,0.9584752,0.9582816,0.95808816,0.9578948,0.95770156,0.95750844,0.9573155,0.95712256,0.95692986,0.95673716,0.9565447,0.95635223,0.95615995,0.9559678,0.95577574,0.95558375,0.95539194,0.9552002,0.9550086,0.9548171,0.9546258,0.95443445,0.95424336,0.9540523,0.9538614,0.9536706,0.95347995,0.95328933,0.9530989,0.9529086,0.9527184,0.95252824,0.9523382,0.9521483,0.9519586,0.9517689,0.95157933,0.9513899,0.95120054,0.9510114,0.9508223,0.95063335,0.9504444,0.9502557,0.95006704,0.9498785,0.9496901,0.9495018,0.9493136,0.9491255,0.94893754,0.9487497,0.9485619,0.94837433,0.94818676,0.94799936,0.947812,0.94762486,0.94743776,0.94725084,0.9470639,0.94687724,0.94669056,0.94650406,0.9463176,0.94613135,0.9459451,0.94575906,0.94557303,0.9453872,0.9452014,0.9450158,0.94483024,0.9446448,0.9444595,0.9442743,0.9440892,0.9439042,0.94371927,0.9435345,0.94334984,0.94316524,0.9429808,0.94279647,0.94261223,0.9424281,0.9422441,0.9420602,0.94187635,0.94169265,0.94150907,0.9413256,0.94114226,0.9409589,0.9407758,0.9405927,0.9404098,0.9402269,0.9400442,0.9398616,0.9396791,0.93949664,0.93931437,0.93913215,0.93895006,0.938768,0.9385862,0.9384044,0.9382227,0.93804115,0.9378597,0.93767834,0.9374971,0.93731594,0.9371349,0.93695396,0.9367731,0.9365924,0.9364118,0.93623126,0.93605083,0.9358705,0.9356903,0.9355102,0.93533015,0.9351503,0.9349705,0.93479085,0.9346112,0.9344318,0.9342524,0.93407315,0.9338939,0.93371487,0.9335359,0.93335706,0.9331783,0.9329997,0.9328211,0.93264264,0.93246424,0.932286,0.93210787,0.9319299,0.9317519,0.9315741,0.9313963,0.93121874,0.9310412,0.93086374,0.9306864,0.9305092,0.93033206,0.93015504,0.9299781,0.9298013,0.92962456,0.92944795,0.9292714,0.929095,0.92891866,0.92874247,0.92856634,0.9283903,0.9282144,0.92803854,0.9278628,0.92768717,0.9275117,0.9273362,0.9271609,0.9269857,0.9268106,0.92663556,0.9264606,0.9262858,0.9261111,0.92593646,0.92576194,0.9255875,0.9254132,0.9252389,0.9250648,0.92489076,0.92471683,0.92454296,0.9243693,0.9241956,0.9240221,0.92384857,0.92367524,0.92350197,0.9233289,0.9231558,0.9229828,0.92280996,0.9226372,0.9224645,0.92229193,0.92211944,0.9219471,0.9217748,0.9216026,0.9214305,0.9212585,0.9210866,0.9209148,0.9207431,0.9205715,0.92039996,0.92022854,0.92005724,0.919886,0.91971487,0.9195438,0.9193729,0.919202,0.9190313,0.9188606,0.9186901,0.9185196,0.91834927,0.918179,0.9180088,0.9178387,0.91766876,0.9174988,0.917329,0.9171593,0.91698974,0.91682017,0.9166508,0.91648144,0.9163122,0.91614306,0.915974,0.91580504,0.9156362,0.9154674,0.91529876,0.91513014,0.91496164,0.91479325,0.914625,0.9144567,0.91428864,0.91412055,0.91395265,0.9137848,0.913617,0.9134494,0.9132818,0.91311437,0.91294694,0.9127797,0.9126125,0.91244537,0.91227835,0.91211146,0.9119446,0.9117779,0.9116112,0.91144466,0.9112782,0.91111183,0.91094553,0.91077936,0.91061324,0.9104473,0.91028136,0.91011554,0.9099498,0.90978414,0.90961856,0.90945315,0.90928775,0.90912247,0.90895724,0.9087922,0.90862715,0.9084622,0.90829736,0.9081327,0.907968,0.9078034,0.9076389,0.9074746,0.90731025,0.90714604,0.9069819,0.9068179,0.90665394,0.9064901,0.9063263,0.9061626,0.90599906,0.9058355,0.90567213,0.9055088,0.9053456,0.9051824,0.9050194,0.9048564,0.90469354,0.9045307,0.90436804,0.9042054,0.9040429,0.9038804,0.9037181,0.9035558,0.9033937,0.90323156,0.90306956,0.9029076,0.90274584,0.9025841,0.9024224,0.90226084,0.9020994,0.90193796,0.9017767,0.9016154,0.90145427,0.9012932,0.9011323,0.90097135,0.9008106,0.9006499,0.9004893,0.90032876,0.9001683,0.9000079,0.8998477,0.89968747,0.8995273,0.89936733,0.89920735,0.89904755,0.89888775,0.8987281,0.89856845,0.898409,0.89824957,0.89809024,0.897931,0.8977718,0.8976127,0.8974537,0.89729476,0.897136,0.8969772,0.8968186,0.89666,0.8965015,0.89634305,0.89618474,0.8960265,0.89586836,0.89571023,0.8955523,0.8953943,0.89523655,0.8950788,0.8949211,0.8947635,0.89460605,0.89444864,0.89429134,0.8941341,0.8939769,0.89381987,0.89366287,0.89350593,0.8933491,0.89319235,0.8930357,0.8928791,0.8927226,0.8925662,0.89240986,0.89225364,0.8920974,0.89194137,0.8917853,0.8916294,0.89147353,0.89131784,0.8911621,0.8910065,0.890851,0.8906956,0.89054024,0.890385,0.89022976,0.8900747,0.88991964,0.88976467,0.8896098,0.889455,0.8893003,0.8891457,0.8889911,0.8888367,0.8886823,0.888528,0.88837373,0.88821965,0.8880656,0.8879116,0.88775766,0.8876039,0.8874501,0.8872965,0.88714284,0.88698936,0.88683593,0.8866826,0.8865293,0.88637614,0.886223,0.88607,0.88591707,0.8857642,0.8856114,0.8854587,0.88530606,0.88515353,0.88500106,0.88484865,0.88469636,0.8845441,0.88439196,0.88423985,0.88408786,0.8839359,0.8837841,0.8836323,0.88348067,0.88332903,0.8831775,0.88302606,0.88287467,0.88272333,0.8825722,0.882421,0.88227,0.88211894,0.8819681,0.8818172,0.8816665,0.88151574,0.8813652,0.8812146,0.88106424,0.88091385,0.88076353,0.8806133,0.8804632,0.8803131,0.88016313,0.8800132,0.87986344,0.87971365,0.8795639,0.8794144,0.87926483,0.8791154,0.878966,0.8788167,0.8786675,0.87851834,0.8783693,0.87822026,0.87807137,0.87792253,0.87777376,0.87762505,0.87747645,0.8773279,0.87717944,0.877031,0.87688273,0.8767345,0.8765863,0.87643826,0.8762902,0.8761423,0.8759944,0.8758466,0.8756989,0.8755513,0.8754037,0.87525624,0.8751088,0.8749615,0.8748142,0.87466705,0.8745199,0.87437284,0.87422585,0.874079,0.8739321,0.87378544,0.87363875,0.8734921,0.8733456,0.8731991,0.8730528,0.87290645,0.87276024,0.8726141,0.872468,0.87232196,0.87217605,0.87203014,0.8718844,0.8717387,0.871593,0.87144744,0.87130195,0.8711565,0.87101114,0.8708659,0.8707207,0.87057555,0.87043047,0.87028545,0.87014055,0.8699957,0.86985093,0.8697062,0.8695616,0.869417,0.8692726,0.86912817,0.8689838,0.8688395,0.8686954,0.8685512,0.8684072,0.8682632,0.8681193,0.8679754,0.86783165,0.86768794,0.86754435,0.86740077,0.8672573,0.8671139,0.86697054,0.86682725,0.8666841,0.86654097,0.86639786,0.8662549,0.866112,0.8659691,0.86582637,0.8656837,0.86554104,0.86539847,0.86525595,0.86511356,0.8649712,0.86482894,0.8646867,0.8645446,0.8644025,0.8642605,0.8641186,0.8639767,0.8638349,0.86369324,0.86355156,0.86341,0.86326844,0.863127,0.8629856,0.86284435,0.8627031,0.86256194,0.86242086,0.86227983,0.86213887,0.86199796,0.8618571,0.8617164,0.8615757,0.8614351,0.86129457,0.8611541,0.8610137,0.86087334,0.8607331,0.86059284,0.8604528,0.86031264,0.8601727,0.86003274,0.8598929,0.8597531,0.8596134,0.8594737,0.8593342,0.85919464,0.85905516,0.8589158,0.8587765,0.8586372,0.8584981,0.8583589,0.8582199,0.8580809,0.85794204,0.85780317,0.8576644,0.8575257,0.85738707,0.8572485,0.85711,0.85697156,0.8568332,0.8566949,0.85655665,0.8564185,0.8562804,0.85614234,0.85600436,0.85586643,0.8557286,0.8555909,0.8554532,0.8553155,0.85517794,0.85504043,0.854903,0.85476565,0.8546283,0.8544911,0.8543539,0.8542168,0.8540798,0.8539428,0.8538059,0.85366905,0.85353225,0.8533956,0.8532589,0.85312235,0.8529858,0.85284936,0.852713,0.8525767,0.8524404,0.8523042,0.8521681,0.85203207,0.85189605,0.85176015,0.85162425,0.8514885,0.85135275,0.8512171,0.8510815,0.85094595,0.85081047,0.85067505,0.8505397,0.85040444,0.8502692,0.8501341,0.84999895,0.849864,0.849729,0.8495941,0.8494593,0.8493245,0.8491898,0.8490552,0.84892064,0.8487861,0.84865165,0.84851724,0.84838295,0.8482487,0.84811455,0.8479804,0.8478463,0.84771234,0.8475784,0.84744453,0.8473107,0.84717697,0.84704334,0.8469097,0.8467761,0.8466426,0.8465092,0.8463758,0.84624255,0.8461093,0.8459761,0.845843,0.84571,0.845577,0.8454441,0.84531116,0.8451784,0.8450456,0.844913,0.8447804,0.8446478,0.8445153,0.84438294,0.84425056,0.84411824,0.84398603,0.84385383,0.84372175,0.84358966,0.8434577,0.84332573,0.8431939,0.84306204,0.8429303,0.84279865,0.84266704,0.84253544,0.842404,0.8422725,0.84214115,0.84200984,0.8418786,0.8417474,0.84161633,0.8414852,0.84135425,0.8412233,0.8410924,0.8409616,0.8408308,0.8407001,0.8405695,0.8404389,0.8403084,0.84017795,0.84004754,0.8399172,0.83978695,0.8396567,0.8395266,0.8393965,0.8392665,0.8391365,0.83900654,0.8388767,0.8387469,0.8386172,0.8384875,0.8383579,0.83822834,0.8380989,0.8379694,0.8378401,0.83771074,0.8375815,0.8374523,0.8373232,0.8371941,0.8370651,0.8369361,0.83680725,0.8366784,0.83654964,0.83642095,0.83629227,0.8361637,0.8360352,0.8359067,0.8357783,0.8356499,0.83552164,0.83539337,0.8352652,0.83513707,0.83500904,0.834881,0.83475304,0.8346252,0.83449733,0.83436954,0.83424187,0.8341142,0.83398664,0.8338591,0.83373165,0.8336042,0.83347684,0.8333495,0.8332223,0.83309513,0.832968,0.8328409,0.8327139,0.83258694,0.83246005,0.8323332,0.8322064,0.8320797,0.83195305,0.83182645,0.8316999,0.8315734,0.831447,0.83132064,0.8311943,0.83106804,0.83094186,0.83081573,0.8306896,0.8305636,0.8304376,0.8303117,0.83018583,0.83006006,0.8299343,0.82980865,0.829683,0.8295574,0.8294319,0.8293065,0.8291811,0.8290557,0.82893044,0.8288052,0.82868004,0.8285549,0.8284299,0.8283049,0.8281799,0.828055,0.8279302,0.8278054,0.8276807,0.8275561,0.82743144,0.82730687,0.82718235,0.8270579,0.82693356,0.8268092,0.82668495,0.82656074,0.8264366,0.8263125,0.82618845,0.8260644,0.8259405,0.82581663,0.82569283,0.82556903,0.82544535,0.8253217,0.82519805,0.8250745,0.82495105,0.8248276,0.82470423,0.8245809,0.82445765,0.82433444,0.8242113,0.82408816,0.82396513,0.8238421,0.8237192,0.8235963,0.8234735,0.82335067,0.823228,0.82310534,0.8229827,0.8228602,0.8227377,0.8226152,0.82249284,0.82237047,0.8222482,0.822126,0.8220038,0.8218817,0.82175964,0.82163763,0.8215157,0.8213938,0.8212719,0.8211501,0.8210284,0.82090676,0.8207851,0.8206635,0.820542,0.82042056,0.8202991,0.8201778,0.82005644,0.8199352,0.819814,0.8196929,0.8195718,0.81945074,0.81932974,0.81920886,0.819088,0.81896716,0.81884634,0.81872565,0.818605,0.8184844,0.81836385,0.8182433,0.81812286,0.8180025,0.8178821,0.8177619,0.8176416,0.81752145,0.8174013,0.81728125,0.8171612,0.8170413,0.8169213,0.8168014,0.8166816,0.8165619,0.8164422,0.8163225,0.81620294,0.8160834,0.81596386,0.8158444,0.815725,0.8156057,0.81548643,0.81536716,0.815248,0.81512886,0.8150098,0.81489074,0.8147718,0.81465286,0.814534,0.81441516,0.8142964,0.8141777,0.814059,0.8139404,0.81382185,0.81370336,0.8135849,0.8134665,0.8133482,0.81322986,0.8131116,0.8129934,0.8128753,0.81275713,0.8126391,0.8125211,0.8124032,0.8122853,0.81216747,0.8120497,0.81193197,0.81181425,0.8116966,0.81157905,0.8114615,0.811344,0.8112266,0.81110924,0.8109919,0.81087464,0.8107574,0.8106403,0.8105231,0.810406,0.810289,0.8101721,0.81005514,0.80993825,0.8098214,0.80970466,0.80958796,0.8094713,0.80935466,0.80923814,0.8091216,0.80900514,0.80888873,0.8087724,0.80865604,0.8085398,0.8084236,0.8083074,0.8081913,0.80807525,0.8079592,0.80784327,0.80772734,0.80761147,0.80749565,0.8073799,0.80726415,0.8071485,0.8070329,0.8069173,0.8068018,0.80668634,0.80657095,0.80645555,0.8063402,0.80622494,0.8061097,0.8059946,0.8058795,0.8057644,0.8056494,0.80553436,0.8054195,0.8053046,0.8051898,0.805075,0.80496025,0.8048456,0.80473095,0.8046164,0.80450183,0.8043874,0.80427295,0.80415857,0.80404425,0.8039299,0.8038157,0.8037015,0.8035874,0.8034733,0.8033592,0.80324525,0.8031313,0.8030174,0.80290353,0.80278975,0.802676,0.8025623,0.80244863,0.802335,0.8022215,0.80210793,0.80199444,0.8018811,0.8017677,0.8016544,0.8015411,0.8014279,0.8013147,0.8012016,0.8010885,0.8009755,0.8008625,0.80074954,0.80063665,0.8005238,0.80041105,0.8002983,0.80018556,0.80007297,0.7999603,0.7998478,0.79973525,0.79962283,0.7995104,0.79939806,0.7992857,0.7991735,0.79906124,0.79894906,0.79883695,0.79872483,0.79861283,0.79850084,0.7983889,0.798277,0.79816514,0.7980534,0.7979416,0.7978299,0.7977182,0.79760665,0.79749507,0.79738355,0.7972721,0.7971606,0.7970493,0.79693794,0.79682666,0.7967154,0.7966042,0.79649305,0.796382,0.7962709,0.7961599,0.79604894,0.7959381,0.7958272,0.7957164,0.7956056,0.7954949,0.79538417,0.79527354,0.795163,0.79505247,0.79494196,0.7948315,0.79472107,0.79461074,0.7945004,0.79439014,0.79427993,0.7941698,0.79405963,0.79394954,0.7938395,0.79372954,0.7936196,0.79350966,0.7933998,0.79329,0.7931802,0.79307055,0.7929609,0.79285127,0.79274166,0.79263216,0.7925226,0.7924132,0.7923038,0.7921944,0.7920851,0.79197586,0.79186666,0.79175746,0.7916483,0.79153925,0.79143023,0.7913212,0.79121226,0.79110336,0.7909945,0.7908857,0.79077697,0.7906682,0.79055953,0.7904509,0.79034233,0.7902338,0.79012525,0.79001683,0.7899084,0.78980005,0.78969175,0.78958344,0.7894752,0.789367,0.7892589,0.7891508,0.7890428,0.7889347,0.78882676,0.7887188,0.788611,0.7885031,0.78839535,0.7882876,0.78817993,0.7880722,0.78796464,0.78785706,0.7877495,0.78764206,0.7875346,0.78742725,0.7873199,0.7872126,0.7871053,0.7869981,0.7868909,0.7867838,0.7866767,0.7865697,0.78646266,0.78635573,0.7862488,0.786142,0.7860351,0.78592837,0.7858216,0.7857149,0.7856083,0.78550166,0.7853951,0.7852886,0.7851821,0.78507566,0.7849693,0.78486294,0.78475666,0.7846504,0.78454417,0.784438,0.78433186,0.7842258,0.7841197,0.78401375,0.7839078,0.78380185,0.783696,0.7835902,0.7834844,0.78337866,0.7832729,0.78316724,0.7830617,0.78295606,0.78285056,0.78274506,0.7826396,0.78253424,0.78242886,0.78232354,0.7822183,0.782113,0.7820079,0.78190273,0.78179765,0.78169256,0.78158754,0.7814825,0.7813776,0.7812727,0.78116786,0.7810631,0.7809583,0.78085357,0.7807489,0.78064424,0.7805397,0.7804351,0.7803306,0.7802261,0.7801217,0.7800173,0.77991295,0.77980864,0.7797044,0.77960014,0.779496,0.7793918,0.77928776,0.7791837,0.77907974,0.7789757,0.77887183,0.7787679,0.77866405,0.7785603,0.7784565,0.7783528,0.7782491,0.7781455,0.77804184,0.7779383,0.7778348,0.77773136,0.7776279,0.77752453,0.7774212,0.7773179,0.7772146,0.77711135,0.7770082,0.77690506,0.77680194,0.7766989,0.77659583,0.7764929,0.7763899,0.776287,0.7761842,0.7760814,0.77597857,0.77587587,0.77577317,0.7756705,0.7755679,0.77546537,0.7753628,0.7752603,0.77515787,0.77505547,0.77495307,0.7748508,0.77474844,0.7746462,0.774544,0.77444184,0.77433974,0.77423763,0.7741356,0.7740336,0.7739316,0.7738297,0.77372783,0.77362597,0.77352417,0.7734224,0.77332073,0.773219,0.77311736,0.7730158,0.77291423,0.77281266,0.7727112,0.7726098,0.7725084,0.772407,0.7723057,0.7722044,0.7721032,0.772002,0.77190083,0.7717997,0.7716986,0.77159756,0.77149653,0.77139556,0.77129465,0.7711938,0.77109295,0.7709921,0.77089137,0.77079064,0.77068996,0.7705893,0.7704887,0.7703881,0.77028763,0.7701871,0.77008665,0.7699863,0.76988584,0.7697855,0.7696852,0.769585,0.76948476,0.7693846,0.7692844,0.76918435,0.7690843,0.7689843,0.7688843,0.76878434,0.76868445,0.7685846,0.7684848,0.768385,0.7682852,0.76818556,0.76808584,0.76798624,0.76788664,0.7677871,0.76768756,0.7675881,0.76748866,0.76738924,0.7672899,0.7671906,0.7670913,0.76699203,0.76689285,0.76679367,0.76669455,0.7665955,0.7664964,0.7663974,0.7662984,0.76619947,0.7661006,0.76600176,0.7659029,0.7658041,0.76570535,0.76560664,0.765508,0.76540935,0.76531076,0.7652122,0.7651137,0.7650152,0.7649168,0.7648184,0.76472,0.7646217,0.7645234,0.76442516,0.76432693,0.76422876,0.7641306,0.7640325,0.76393443,0.76383644,0.76373845,0.76364046,0.7635426,0.7634447,0.76334685,0.76324904,0.76315135,0.7630536,0.7629559,0.7628583,0.76276064,0.76266307,0.76256555,0.76246804,0.7623706,0.76227313,0.7621758,0.7620784,0.7619811,0.76188385,0.7617866,0.7616894,0.7615922,0.7614951,0.761398,0.761301,0.76120394,0.76110697,0.76101005,0.76091313,0.7608163,0.7607194,0.7606226,0.7605259,0.76042914,0.7603325,0.76023585,0.7601392,0.76004267,0.75994617,0.7598496,0.75975317,0.7596567,0.75956035,0.759464,0.7593677,0.75927144,0.7591752,0.759079,0.75898284,0.7588867,0.7587906,0.7586945,0.7585985,0.75850254,0.7584066,0.7583107,0.7582148,0.7581189,0.75802314,0.75792736,0.75783163,0.75773597,0.7576403,0.7575447,0.7574491,0.75735354,0.757258,0.7571626,0.7570671,0.7569717,0.75687635,0.756781,0.7566857,0.7565904,0.75649524,0.75640005,0.75630486,0.7562098,0.75611466,0.75601965,0.75592464,0.75582963,0.7557347,0.7556398,0.75554496,0.7554501,0.7553553,0.7552606,0.7551658,0.75507116,0.7549765,0.7548819,0.7547873,0.7546928,0.75459826,0.7545038,0.7544093,0.75431496,0.75422055,0.75412625,0.75403196,0.75393766,0.7538434,0.75374925,0.7536551,0.75356096,0.7534669,0.75337285,0.75327885,0.75318485,0.7530909,0.752997,0.7529031,0.7528093,0.75271547,0.7526217,0.75252795,0.75243425,0.7523406,0.752247,0.7521534,0.7520598,0.7519663,0.7518728,0.7517794,0.7516859,0.7515926,0.7514992,0.7514059,0.7513126,0.7512194,0.7511261,0.75103295,0.75093985,0.75084674,0.75075364,0.7506606,0.7505676,0.75047463,0.7503817,0.7502888,0.7501959,0.7501031,0.7500103,0.74991757,0.7498248,0.74973214,0.74963945,0.7495468,0.74945426,0.7493617,0.7492692,0.7491767,0.74908423,0.7489918,0.74889946,0.7488071,0.74871475,0.7486225,0.7485302,0.748438,0.74834585,0.7482537,0.7481616,0.7480695,0.7479775,0.74788547,0.7477935,0.7477015,0.7476096,0.74751776,0.7474259,0.7473341,0.74724233,0.7471506,0.74705887,0.7469672,0.7468756,0.746784,0.7466924,0.74660087,0.7465094,0.7464179,0.74632645,0.7462351,0.7461437,0.7460523,0.74596107,0.74586976,0.74577856,0.74568737,0.7455962,0.74550503,0.74541396,0.7453229,0.7452318,0.74514085,0.7450499,0.74495894,0.74486804,0.7447772,0.7446863,0.7445955,0.74450475,0.74441403,0.7443233,0.74423265,0.74414206,0.74405146,0.74396086,0.7438703,0.74377984,0.74368936,0.74359894,0.7435085,0.74341816,0.7433278,0.7432375,0.74314725,0.743057,0.7429668,0.7428766,0.74278647,0.74269634,0.7426063,0.7425162,0.7424263,0.7423363,0.7422463,0.7421564,0.74206656,0.7419767,0.74188685,0.7417971,0.7417073,0.7416176,0.7415279,0.74143827,0.7413487,0.7412591,0.7411695,0.74108005,0.7409905,0.74090105,0.74081165,0.74072224,0.7406329,0.7405436,0.74045426,0.740365,0.7402758,0.7401866,0.7400974,0.7400083,0.7399192,0.73983014,0.7397411,0.7396521,0.7395631,0.7394742,0.73938525,0.7392964,0.73920757,0.73911875,0.73902994,0.7389412,0.7388525,0.7387638,0.7386752,0.73858654,0.738498,0.7384094,0.7383209,0.7382324,0.7381439,0.73805547,0.7379671,0.7378787,0.7377904,0.7377021,0.7376138,0.7375256,0.73743737,0.7373492,0.73726106,0.7371729,0.73708487,0.7369968,0.7369088,0.7368208,0.73673284,0.7366449,0.73655707,0.73646915,0.73638135,0.73629355,0.7362058,0.736118,0.73603034,0.73594266,0.73585504,0.7357674,0.73567986,0.7355923,0.7355048,0.7354173,0.73532987,0.7352424,0.73515505,0.73506767,0.73498034,0.7348931,0.7348058,0.73471856,0.73463136,0.73454416,0.7344571,0.73436993,0.73428285,0.7341958,0.73410875,0.7340218,0.7339348,0.7338479,0.733761,0.73367417,0.7335873,0.73350054,0.73341376,0.73332703,0.7332403,0.73315364,0.733067,0.7329804,0.73289376,0.7328072,0.7327207,0.7326342,0.7325477,0.73246133,0.7323749,0.73228854,0.7322022,0.73211586,0.7320296,0.73194337,0.7318571,0.73177093,0.7316848,0.7315987,0.73151255,0.7314265,0.73134047,0.73125446,0.73116845,0.73108256,0.7309966,0.7309107,0.7308249,0.73073906,0.7306532,0.7305675,0.73048174,0.73039603,0.7303104,0.7302247,0.73013914,0.73005354,0.72996795,0.7298824,0.72979695,0.7297115,0.72962606,0.72954065,0.7294553,0.72936994,0.72928464,0.72919935,0.7291141,0.7290289,0.7289437,0.72885853,0.7287734,0.7286883,0.7286032,0.7285181,0.72843313,0.72834814,0.7282632,0.72817826,0.7280934,0.7280085,0.7279237,0.7278389,0.7277541,0.72766936,0.72758466,0.72749996,0.72741526,0.7273306,0.72724605,0.72716147,0.72707695,0.7269924,0.7269079,0.7268235,0.72673905,0.7266547,0.7265703,0.72648597,0.7264017,0.7263174,0.7262331,0.72614896,0.72606474,0.7259806,0.7258965,0.7258124,0.7257283,0.72564423,0.72556025,0.72547626,0.7253923,0.72530836,0.7252245,0.72514063,0.72505677,0.72497296,0.72488916,0.7248054,0.7247217,0.72463804,0.72455436,0.72447073,0.7243871,0.72430354,0.72422,0.7241365,0.72405297,0.7239695,0.7238861,0.7238027,0.7237193,0.723636,0.72355264,0.7234694,0.7233861,0.72330284,0.72321963,0.7231365,0.72305334,0.7229702,0.72288716,0.72280407,0.72272104,0.722638,0.7225551,0.72247213,0.7223892,0.7223063,0.72222346,0.7221406,0.7220578,0.721975,0.7218923,0.7218096,0.7217269,0.7216442,0.7215616,0.721479,0.72139645,0.7213139,0.7212314,0.7211489,0.7210664,0.720984,0.7209016,0.72081923,0.72073686,0.72065455,0.7205723,0.72049,0.7204078,0.7203255,0.7202434,0.7201612,0.7200791,0.719997,0.719915,0.7198329,0.7197509,0.7196689,0.71958697,0.719505,0.7194231,0.7193413,0.7192594,0.7191776,0.7190958,0.71901405,0.71893233,0.7188506,0.71876895,0.7186873,0.7186057,0.7185241,0.7184425,0.71836096,0.7182795,0.718198,0.7181165,0.7180351,0.71795374,0.7178724,0.717791,0.7177097,0.7176284,0.7175472,0.71746594,0.7173847,0.7173035,0.7172224,0.7171413,0.71706015,0.7169791,0.7168981,0.716817,0.7167361,0.71665514,0.7165742,0.71649325,0.7164124,0.71633154,0.7162507,0.71616995,0.7160892,0.7160084,0.7159277,0.7158471,0.7157664,0.7156858,0.71560514,0.7155246,0.715444,0.7153635,0.71528304,0.71520257,0.7151221,0.7150417,0.71496135,0.714881,0.71480066,0.71472037,0.7146401,0.7145598,0.71447957,0.7143994,0.7143192,0.7142391,0.71415895,0.7140789,0.71399885,0.7139188,0.7138388,0.7137588,0.71367884,0.71359897,0.71351904,0.71343917,0.7133593,0.7132795,0.71319973,0.71312,0.71304023,0.7129605,0.7128808,0.71280116,0.7127215,0.7126419,0.7125623,0.7124828,0.7124033,0.7123238,0.7122443,0.7121648,0.7120854,0.71200603,0.7119267,0.71184736,0.71176803,0.71168876,0.7116095,0.71153027,0.71145105,0.71137184,0.71129274,0.7112136,0.7111345,0.7110554,0.71097636,0.7108973,0.71081835,0.7107394,0.71066046,0.71058154,0.7105026,0.71042377,0.710345,0.7102661,0.7101874,0.7101086,0.71002984,0.70995116,0.7098725,0.7097938,0.7097152,0.70963657,0.709558,0.70947945,0.70940095,0.70932245,0.70924395,0.7091655,0.7090871,0.7090087,0.7089303,0.708852,0.7087737,0.7086954,0.70861715,0.7085389,0.7084607,0.7083825,0.70830435,0.7082262,0.7081481,0.70807004,0.70799196,0.70791394,0.7078359,0.70775795,0.70768,0.7076021,0.7075242,0.70744634,0.70736843,0.70729065,0.7072128,0.7071351,0.7070573,0.7069796,0.7069019,0.70682424,0.7067466,0.706669,0.70659137,0.7065138,0.7064363,0.70635873,0.70628124,0.7062038,0.70612633,0.7060489,0.70597154,0.7058942,0.7058168,0.7057395,0.7056622,0.705585,0.70550776,0.7054305,0.7053533,0.7052762,0.70519906,0.70512193,0.7050448,0.7049678,0.7048907,0.7048137,0.7047367,0.7046598,0.70458287,0.7045059,0.70442903,0.7043522,0.70427537,0.70419854,0.70412177,0.70404506,0.7039683,0.7038916,0.7038149,0.7037383,0.7036616,0.703585,0.70350844,0.7034319,0.7033554,0.70327884,0.70320237,0.7031259,0.7030495,0.70297307,0.70289665,0.7028203,0.702744,0.70266765,0.70259136,0.7025151,0.7024389,0.7023627,0.7022865,0.7022103,0.70213425,0.7020581,0.701982,0.70190597,0.7018299,0.7017539,0.7016779,0.7016019,0.70152605,0.7014501,0.70137423,0.70129836,0.70122254,0.7011467,0.7010709,0.70099515,0.70091945,0.7008437,0.700768,0.70069236,0.7006167,0.7005411,0.7004655,0.7003899,0.7003144,0.7002389,0.70016336,0.7000879,0.70001245,0.69993705,0.69986165,0.69978625,0.6997109,0.6996356,0.6995603,0.699485,0.6994097,0.69933456,0.69925934,0.6991841,0.69910896,0.69903386,0.69895875,0.69888365,0.6988086,0.6987336,0.6986586,0.6985836,0.6985086,0.6984337,0.6983588,0.6982839,0.69820905,0.6981342,0.6980594,0.6979846,0.69790983,0.6978351,0.69776034,0.69768566,0.697611,0.69753635,0.6974617,0.6973871,0.69731253,0.697238,0.69716346,0.69708896,0.69701445,0.69694,0.6968656,0.6967912,0.6967168,0.69664246,0.6965681,0.69649374,0.6964195,0.6963452,0.696271,0.69619673,0.6961225,0.6960484,0.69597423,0.69590014,0.695826,0.6957519,0.6956779,0.69560385,0.6955298,0.69545585,0.69538194,0.69530797,0.69523406,0.69516015,0.6950863,0.69501245,0.69493866,0.69486487,0.6947911,0.69471735,0.6946436,0.6945699,0.6944963,0.6944226,0.69434893,0.6942753,0.69420177,0.6941282,0.69405466,0.6939812,0.6939077,0.69383425,0.69376075,0.6936873,0.69361395,0.6935406,0.69346726,0.6933939,0.6933206,0.6932473,0.69317406,0.6931008,0.6930276,0.6929544,0.6928813,0.69280815,0.692735,0.69266194,0.69258887,0.6925158,0.6924428,0.6923698,0.6922968,0.69222385,0.6921509,0.692078,0.6920051,0.69193226,0.6918594,0.6917866,0.6917138,0.69164103,0.69156826,0.6914956,0.6914229,0.69135016,0.6912775,0.6912049,0.6911323,0.6910597,0.6909871,0.6909146,0.6908421,0.69076955,0.6906971,0.69062465,0.69055223,0.6904798,0.6904074,0.6903351,0.69026273,0.69019043,0.69011813,0.69004583,0.6899736,0.6899014,0.6898292,0.689757,0.68968487,0.68961275,0.6895406,0.6894685,0.68939644,0.68932444,0.6892524,0.6891804,0.68910843,0.6890365,0.68896455,0.6888926,0.6888208,0.6887489,0.688677,0.6886052,0.6885334,0.68846166,0.6883899,0.6883182,0.6882465,0.6881748,0.68810314,0.6880315,0.6879599,0.6878883,0.68781674,0.68774515,0.6876737,0.68760216,0.68753064,0.6874592,0.68738776,0.68731636,0.68724495,0.6871736,0.6871022,0.6870309,0.6869596,0.68688834,0.68681705,0.6867458,0.6866746,0.6866034,0.68653226,0.6864611,0.68639,0.6863189,0.68624777,0.6861767,0.6861057,0.6860347,0.6859637,0.6858927,0.6858218,0.68575084,0.6856799,0.68560904,0.6855382,0.68546736,0.6853965,0.68532574,0.685255,0.6851842,0.6851135,0.6850428,0.6849721,0.6849014,0.6848308,0.68476015,0.6846896,0.68461895,0.68454844,0.6844779,0.6844074,0.6843369,0.6842664,0.684196,0.68412554,0.68405515,0.68398476,0.68391436,0.6838441,0.68377376,0.6837035,0.68363315,0.68356293,0.6834927,0.6834225,0.6833523,0.68328214,0.683212,0.6831419,0.6830718,0.6830017,0.68293166,0.6828616,0.6827916,0.6827216,0.68265164,0.68258166,0.68251175,0.6824419,0.682372,0.6823021,0.68223226,0.68216246,0.68209267,0.68202287,0.68195313,0.6818834,0.68181366,0.681744,0.6816743,0.6816047,0.68153507,0.68146545,0.6813958,0.6813263,0.6812568,0.6811872,0.6811177,0.6810482,0.6809788,0.68090934,0.68083996,0.6807705,0.6807012,0.6806318,0.6805625,0.6804932,0.6804239,0.68035465,0.6802854,0.68021613,0.680147,0.6800778,0.6800086,0.67993945,0.67987037,0.6798013,0.6797322,0.6796631,0.6795941,0.6795251,0.67945606,0.6793871,0.6793182,0.6792492,0.6791803,0.6791114,0.6790426,0.67897373,0.6789049,0.6788361,0.6787673,0.67869854,0.6786298,0.6785611,0.6784924,0.6784237,0.67835504,0.67828643,0.6782178,0.6781492,0.6780806,0.6780121,0.6779435,0.67787504,0.67780656,0.6777381,0.67766964,0.6776012,0.6775328,0.6774644,0.67739606,0.6773277,0.6772594,0.6771911,0.6771228,0.6770545,0.6769863,0.676918,0.67684984,0.6767817,0.6767135,0.6766454,0.67657727,0.6765092,0.6764411,0.676373,0.676305,0.676237,0.676169,0.676101,0.676033,0.67596513,0.6758972,0.6758293,0.6757614,0.67569363,0.67562574,0.675558,0.67549014,0.6754224,0.67535466,0.6752869,0.6752192,0.67515147,0.6750838,0.67501616,0.6749486,0.6748809,0.6748134,0.6747458,0.67467827,0.67461073,0.6745432,0.6744757,0.67440826,0.6743408,0.67427343,0.674206,0.6741386,0.67407125,0.6740039,0.67393655,0.67386925,0.67380196,0.6737347,0.6736675,0.67360026,0.673533,0.6734659,0.67339873,0.67333156,0.67326444,0.6731973,0.6731303,0.67306316,0.67299616,0.67292917,0.6728621,0.6727951,0.6727282,0.67266124,0.6725943,0.67252743,0.6724605,0.6723936,0.6723268,0.67226,0.67219317,0.6721264,0.67205966,0.6719929,0.6719262,0.67185944,0.6717928,0.6717261,0.67165947,0.67159283,0.67152625,0.6714597,0.6713931,0.6713265,0.67126006,0.67119354,0.671127,0.67106056,0.67099416,0.6709277,0.6708613,0.6707949,0.67072856,0.6706622,0.6705959,0.67052954,0.67046326,0.670397,0.67033076,0.67026454,0.6701983,0.67013216,0.67006594,0.6699998,0.6699337,0.6698676,0.6698015,0.6697354,0.6696694,0.6696033,0.6695373,0.66947126,0.6694053,0.66933936,0.66927344,0.6692075,0.6691416,0.6690757,0.66900986,0.66894406,0.6688782,0.66881245,0.66874665,0.66868085,0.6686151,0.6685494,0.66848373,0.66841805,0.66835237,0.66828674,0.6682211,0.6681555,0.66808987,0.66802436,0.6679588,0.66789323,0.6678277,0.6677623,0.6676968,0.6676313,0.6675659,0.6675005,0.6674351,0.6673697,0.66730434,0.66723907,0.66717374,0.6671084,0.66704315,0.6669779,0.6669126,0.6668474,0.6667822,0.666717,0.66665184,0.6665867,0.66652155,0.66645646,0.6663914,0.66632634,0.66626126,0.6661962,0.66613126,0.6660662,0.66600126,0.6659363,0.6658714,0.6658065,0.66574156,0.66567665,0.6656118,0.665547,0.66548216,0.6654173,0.6653526,0.6652878,0.66522306,0.66515833,0.66509366,0.6650289,0.66496426,0.6648996,0.664835,0.66477036,0.66470575,0.6646412,0.66457665,0.6645121,0.66444755,0.66438305,0.6643186,0.6642541,0.6641897,0.66412526,0.6640609,0.66399646,0.6639321,0.6638677,0.6638034,0.6637391,0.6636748,0.6636105,0.66354626,0.663482,0.6634178,0.6633536,0.6632894,0.6632253,0.6631611,0.66309696,0.6630329,0.6629688,0.66290474,0.66284066,0.6627766,0.66271263,0.6626486,0.6625846,0.66252065,0.66245675,0.6623928,0.6623289,0.662265,0.66220117,0.6621373,0.6620735,0.66200966,0.6619459,0.6618821,0.6618183,0.6617546,0.6616909,0.6616272,0.66156346,0.6614998,0.6614362,0.66137254,0.66130894,0.66124535,0.66118175,0.6611182,0.6610547,0.66099113,0.66092765,0.6608642,0.6608007,0.6607373,0.66067386,0.66061044,0.6605471,0.66048366,0.6604203,0.660357,0.6602937,0.66023034,0.6601671,0.66010386,0.66004056,0.6599774,0.65991414,0.65985096,0.6597878,0.65972465,0.6596615,0.6595984,0.6595353,0.65947217,0.6594091,0.6593461,0.65928304,0.65922004,0.65915704,0.6590941,0.65903115,0.6589682,0.65890527,0.6588424,0.6587795,0.6587166,0.6586538,0.6585909,0.65852815,0.6584653,0.65840256,0.6583398,0.6582771,0.65821433,0.6581516,0.658089,0.65802634,0.65796363,0.657901,0.6578384,0.6577758,0.65771323,0.65765065,0.6575881,0.6575256,0.65746313,0.6574006,0.65733814,0.6572757,0.6572133,0.6571508,0.6570884,0.65702605,0.6569637,0.65690136,0.656839,0.6567767,0.65671444,0.65665215,0.65658987,0.65652764,0.6564654,0.6564032,0.656341,0.65627885,0.65621674,0.6561546,0.65609246,0.65603036,0.6559683,0.6559062,0.65584415,0.6557821,0.6557201,0.6556581,0.65559614,0.6555342,0.6554723,0.65541035,0.6553484,0.65528655,0.6552247,0.6551628,0.655101,0.65503913,0.6549774,0.6549156,0.6548538,0.6547921,0.6547304,0.6546686,0.65460694,0.65454525,0.6544836,0.654422,0.6543603,0.6542987,0.65423715,0.6541756,0.654114,0.65405244,0.6539909,0.6539294,0.65386796,0.65380645,0.65374506,0.6536836,0.65362215,0.65356076,0.6534994,0.65343803,0.6533767,0.65331537,0.65325403,0.65319276,0.6531315,0.6530702,0.65300894,0.6529477,0.6528865,0.6528253,0.65276414,0.652703,0.65264183,0.65258074,0.6525196,0.65245855,0.65239745,0.6523364,0.6522753,0.65221435,0.6521533,0.65209234,0.65203136,0.65197045,0.6519095,0.65184855,0.65178764,0.6517268,0.6516659,0.65160507,0.6515442,0.6514834,0.6514226,0.6513618,0.6513011,0.65124035,0.6511796,0.6511189,0.6510582,0.6509975,0.65093684,0.65087616,0.65081555,0.650755,0.6506944,0.65063375,0.6505732,0.65051264,0.65045214,0.65039164,0.65033114,0.65027064,0.6502102,0.65014976,0.6500893,0.6500289,0.6499685,0.6499081,0.6498478,0.6497874,0.6497271,0.6496668,0.6496065,0.6495462,0.649486,0.64942575,0.6493655,0.6493053,0.64924514,0.64918494,0.6491248,0.64906466,0.6490045,0.64894444,0.6488843,0.6488242,0.6487642,0.6487042,0.6486441,0.6485841,0.64852417,0.64846414,0.6484042,0.6483442,0.6482843,0.6482244,0.6481645,0.64810467,0.64804476,0.647985,0.64792514,0.6478653,0.6478055,0.6477457,0.647686,0.6476262,0.6475665,0.64750683,0.6474471,0.64738744,0.6473278,0.6472682,0.6472085,0.6471489,0.6470893,0.64702976,0.64697015,0.6469106,0.64685106,0.6467916,0.6467321,0.6466726,0.6466131,0.6465537,0.64649427,0.64643484,0.6463755,0.6463161,0.64625674,0.6461974,0.646138,0.64607877,0.64601946,0.64596015,0.64590085,0.64584166,0.6457824,0.64572316,0.645664,0.6456048,0.6455456,0.6454865,0.64542735,0.6453682,0.64530915,0.64525,0.64519095,0.6451319,0.6450729,0.64501387,0.6449548,0.64489585,0.6448369,0.6447779,0.64471895,0.64466006,0.64460117,0.6445422,0.6444834,0.6444245,0.64436567,0.64430684,0.644248,0.64418924,0.64413047,0.6440717,0.6440129,0.6439542,0.6438955,0.6438368,0.6437781,0.64371943,0.6436608,0.64360213,0.64354354,0.6434849,0.64342636,0.64336777,0.64330924,0.64325064,0.6431922,0.64313364,0.64307517,0.64301664,0.6429582,0.64289975,0.64284134,0.6427829,0.6427245,0.64266616,0.6426078,0.64254946,0.6424911,0.6424328,0.6423745,0.6423162,0.6422579,0.6421997,0.64214146,0.6420832,0.642025,0.6419668,0.64190865,0.6418505,0.64179236,0.64173424,0.6416761,0.641618,0.64155996,0.6415019,0.64144385,0.6413858,0.6413278,0.6412698,0.6412118,0.6411538,0.6410959,0.64103794,0.64098,0.6409221,0.6408642,0.6408064,0.6407485,0.6406906,0.6406328,0.640575,0.64051723,0.6404594,0.64040166,0.6403439,0.6402862,0.64022845,0.64017075,0.64011306,0.6400554,0.6399977,0.6399401,0.63988245,0.63982487,0.6397673,0.6397097,0.63965213,0.6395946,0.63953704,0.6394795,0.63942206,0.6393646,0.6393071,0.6392496,0.63919216,0.63913476,0.63907737,0.63901997,0.63896257,0.6389052,0.6388479,0.63879055,0.63873327,0.638676,0.63861865,0.63856137,0.63850415,0.6384469,0.6383897,0.6383325,0.63827527,0.6382181,0.63816094,0.6381038,0.6380467,0.6379895,0.6379325,0.6378754,0.6378183,0.63776124,0.63770425,0.6376472,0.63759017,0.6375332,0.6374762,0.6374193,0.6373623,0.6373054,0.63724846,0.63719153,0.6371347,0.6370778,0.63702095,0.63696414,0.6369073,0.6368505,0.6367937,0.6367369,0.6366801,0.6366234,0.6365667,0.63650995,0.6364532,0.6363965,0.6363399,0.6362832,0.6362266,0.6361699,0.63611335,0.6360567,0.63600016,0.6359436,0.635887,0.6358305,0.63577396,0.63571745,0.63566095,0.6356045,0.63554806,0.6354916,0.63543516,0.6353788,0.63532233,0.63526595,0.63520956,0.63515323,0.6350969,0.6350406,0.63498425,0.634928,0.63487166,0.6348154,0.6347591,0.6347029,0.6346467,0.6345905,0.6345343,0.63447815,0.63442194,0.6343658,0.63430965,0.63425356,0.6341975,0.6341414,0.6340853,0.63402927,0.63397324,0.63391715,0.6338612,0.63380516,0.6337492,0.6336932,0.63363725,0.63358134,0.63352543,0.63346946,0.6334136,0.6333577,0.63330185,0.633246,0.63319016,0.6331343,0.6330786,0.6330227,0.63296694,0.6329112,0.6328555,0.63279974,0.632744,0.6326883,0.6326326,0.63257694,0.6325213,0.63246566,0.63241005,0.6323544,0.6322988,0.6322432,0.63218766,0.6321321,0.63207656,0.632021,0.6319655,0.63191,0.63185453,0.63179904,0.6317436,0.6316882,0.63163275,0.6315773,0.63152194,0.63146657,0.6314112,0.6313558,0.6313005,0.6312452,0.6311899,0.63113457,0.6310793,0.63102406,0.6309688,0.63091356,0.6308583,0.63080317,0.6307479,0.6306928,0.6306376,0.63058245,0.6305273,0.6304722,0.6304171,0.63036203,0.6303069,0.6302519,0.6301968,0.6301418,0.6300868,0.63003176,0.62997675,0.6299218,0.62986684,0.6298119,0.6297569,0.62970203,0.62964714,0.62959224,0.62953734,0.6294825,0.6294277,0.62937284,0.629318,0.6292632,0.62920845,0.62915367,0.6290989,0.6290442,0.6289894,0.6289347,0.62887996,0.6288253,0.62877065,0.628716,0.62866133,0.62860674,0.6285521,0.6284975,0.6284429,0.6283883,0.62833375,0.6282792,0.6282247,0.62817013,0.62811565,0.6280612,0.6280067,0.6279522,0.6278978,0.6278434,0.6277889,0.62773454,0.6276801,0.62762576,0.6275714,0.62751704,0.62746274,0.6274084,0.6273541,0.6272998,0.62724555,0.62719125,0.627137,0.62708277,0.6270286,0.62697434,0.62692016,0.626866,0.6268118,0.6267577,0.6267035,0.6266494,0.6265953,0.6265412,0.62648714,0.6264331,0.626379,0.62632495,0.62627095,0.62621695,0.6261629,0.62610894,0.626055,0.626001,0.62594706,0.6258932,0.62583923,0.62578535,0.62573147,0.6256776,0.6256237,0.6255699,0.62551606,0.62546223,0.6254085,0.62535465,0.6253009,0.6252471,0.62519336,0.62513965,0.6250859,0.62503225,0.62497854,0.62492484,0.6248712,0.62481755,0.6247639,0.62471026,0.6246567,0.6246031,0.6245495,0.6244959,0.62444234,0.6243889,0.6243353,0.6242818,0.6242283,0.62417483,0.62412137,0.6240679,0.62401444,0.62396103,0.6239076,0.6238542,0.6238008,0.6237474,0.62369406,0.6236407,0.62358737,0.6235341,0.6234808,0.6234275,0.6233742,0.62332094,0.6232677,0.6232145,0.6231612,0.623108,0.62305486,0.62300164,0.62294847,0.6228953,0.6228422,0.622789,0.6227359,0.6226828,0.62262976,0.62257665,0.6225236,0.62247056,0.6224175,0.6223645,0.6223115,0.6222585,0.62220556,0.62215257,0.6220996,0.62204665,0.6219938,0.62194085,0.6218879,0.62183505,0.6217822,0.6217293,0.6216765,0.62162364,0.6215708,0.621518,0.6214652,0.62141246,0.6213597,0.62130696,0.6212542,0.62120146,0.62114877,0.6210961,0.6210434,0.6209907,0.62093806,0.62088543,0.6208328,0.62078017,0.62072754,0.620675,0.6206224,0.6205698,0.6205173,0.6204648,0.62041223,0.6203597,0.6203072,0.62025476,0.6202023,0.62014985,0.6200974,0.62004495,0.61999255,0.61994016,0.61988777,0.6198354,0.61978304,0.61973065,0.6196783,0.61962605,0.6195737,0.6195214,0.6194691,0.61941683,0.6193646,0.61931235,0.61926013,0.61920786,0.6191557,0.6191035,0.61905134,0.6189991,0.618947,0.6188949,0.6188427,0.6187906,0.61873853,0.61868644,0.61863434,0.6185823,0.6185303,0.61847824,0.6184262,0.6183742,0.61832225,0.6182702,0.61821824,0.6181663,0.6181144,0.61806244,0.6180105,0.6179586,0.61790675,0.6178549,0.617803,0.6177511,0.6176993,0.6176475,0.6175957,0.6175439,0.61749214,0.61744034,0.61738855,0.6173368,0.61728513,0.6172334,0.61718166,0.61713,0.6170783,0.6170266,0.61697495,0.61692333,0.6168717,0.6168201,0.6167685,0.6167169,0.6166653,0.61661375,0.6165622,0.6165107,0.61645913,0.61640763,0.61635613,0.61630464,0.61625314,0.6162017,0.61615026,0.6160988,0.6160474,0.615996,0.6159446,0.61589324,0.61584187,0.6157905,0.61573917,0.61568785,0.61563647,0.6155852,0.6155339,0.6154826,0.61543137,0.6153801,0.61532885,0.61527765,0.6152264,0.61517525,0.61512405,0.61507285,0.61502165,0.6149705,0.61491936,0.6148683,0.61481714,0.614766,0.614715,0.6146639,0.6146128,0.61456174,0.6145107,0.6144597,0.6144087,0.61435765,0.6143067,0.6142557,0.61420476,0.6141538,0.6141029,0.61405194,0.61400104,0.61395013,0.6138993,0.6138484,0.61379755,0.6137467,0.61369586,0.613645,0.61359423,0.6135434,0.61349267,0.6134419,0.6133911,0.6133404,0.61328965,0.61323893,0.6131882,0.6131375,0.6130868,0.61303616,0.6129855,0.6129348,0.61288416,0.61283356,0.61278296,0.61273235,0.6126818,0.6126312,0.61258066,0.6125301,0.61247957,0.6124291,0.61237854,0.61232805,0.61227757,0.61222714,0.61217666,0.6121262,0.61207575,0.6120254,0.61197495,0.6119245,0.61187416,0.6118238,0.61177343,0.61172307,0.61167276,0.61162245,0.61157215,0.61152184,0.61147153,0.6114213,0.61137104,0.61132073,0.61127055,0.6112203,0.6111701,0.61111987,0.6110697,0.61101955,0.61096936,0.61091924,0.6108691,0.610819,0.61076885,0.6107188,0.61066866,0.6106186,0.6105685,0.6105185,0.61046845,0.61041844,0.61036843,0.6103184,0.6102684,0.61021847,0.6101685,0.61011857,0.6100686,0.6100187,0.6099688,0.60991883,0.60986894,0.60981905,0.6097692,0.6097194,0.6096695,0.6096197,0.6095699,0.6095201,0.6094703,0.6094205,0.60937077,0.609321,0.6092712,0.6092215,0.6091718,0.6091221,0.6090724,0.6090227,0.608973,0.6089234,0.6088737,0.6088241,0.6087745,0.6087249,0.6086753,0.60862565,0.6085761,0.6085266,0.608477,0.60842746,0.60837793,0.60832846,0.60827893,0.60822946,0.6081799,0.6081305,0.60808104,0.60803163,0.60798216,0.60793275,0.60788333,0.607834,0.60778457,0.6077352,0.60768586,0.6076365,0.60758716,0.60753787,0.6074886,0.6074393,0.60739,0.6073407,0.60729146,0.6072422,0.60719293,0.60714376,0.6070945,0.60704535,0.6069961,0.606947,0.60689783,0.60684866,0.6067995,0.60675037,0.60670125,0.60665214,0.6066031,0.606554,0.6065049,0.60645586,0.6064068,0.60635775,0.60630876,0.60625976,0.60621077,0.6061618,0.6061128,0.60606384,0.6060149,0.6059659,0.60591704,0.6058681,0.6058192,0.6057703,0.6057214,0.6056726,0.6056237,0.60557485,0.60552603,0.6054772,0.6054284,0.6053796,0.6053308,0.60528207,0.6052333,0.60518456,0.6051358,0.6050871,0.60503834,0.60498965,0.604941,0.6048923,0.6048436,0.604795,0.60474634,0.6046977,0.60464907,0.6046005,0.6045519,0.6045033,0.6044547,0.6044062,0.6043576,0.6043091,0.60426056,0.60421205,0.6041635,0.60411507,0.60406655,0.6040181,0.60396963,0.6039212,0.6038728,0.6038243,0.6037759,0.6037275,0.6036791,0.6036308,0.6035824,0.60353404,0.6034857,0.60343736,0.6033891,0.6033408,0.60329247,0.6032442,0.6031959,0.6031477,0.6030994,0.6030512,0.60300297,0.60295475,0.6029066,0.60285836,0.6028102,0.60276204,0.6027139,0.6026657,0.60261756,0.60256946,0.60252136,0.60247326,0.60242516,0.6023771,0.6023291,0.602281,0.60223293,0.6021849,0.6021369,0.6020889,0.6020409,0.6019929,0.601945,0.601897,0.6018491,0.6018011,0.6017532,0.6017053,0.6016574,0.60160947,0.6015616,0.60151374,0.6014659,0.601418,0.6013702,0.6013224,0.60127455,0.60122675,0.601179,0.6011312,0.60108346,0.6010357,0.600988,0.6009402,0.6008925,0.6008448,0.6007971,0.60074943,0.60070175,0.60065407,0.60060644,0.6005588,0.6005112,0.60046357,0.60041595,0.6003684,0.60032076,0.6002732,0.6002256,0.6001781,0.60013056,0.600083,0.6000355,0.599988,0.59994054,0.59989303,0.5998455,0.5997981,0.59975064,0.5997032,0.5996558,0.59960836,0.599561,0.5995136,0.5994662,0.5994188,0.5993715,0.5993241,0.5992768,0.5992295,0.5991822,0.59913486,0.59908754,0.5990403,0.598993,0.59894574,0.59889853,0.5988513,0.59880406,0.59875685,0.59870964,0.5986625,0.5986153,0.59856814,0.59852093,0.59847385,0.5984267,0.59837955,0.59833246,0.5982853,0.5982383,0.5981912,0.5981441,0.598097,0.59805,0.598003,0.59795594,0.5979089,0.59786195,0.597815,0.59776795,0.597721,0.5976741,0.5976271,0.5975802,0.5975332,0.5974863,0.59743947,0.59739256,0.59734565,0.5972988,0.59725195,0.5972051,0.59715825,0.59711146,0.5970646,0.5970178,0.59697104,0.59692425,0.5968775,0.5968307,0.596784,0.59673727,0.59669054,0.5966438,0.5965971,0.5965504,0.59650373,0.59645706,0.5964104,0.5963638,0.5963171,0.5962705,0.5962239,0.5961773,0.59613067,0.5960841,0.5960375,0.59599096,0.5959444,0.59589785,0.59585136,0.5958048,0.5957583,0.5957118,0.59566534,0.59561884,0.5955724,0.595526,0.5954795,0.59543306,0.5953867,0.59534025,0.5952939,0.59524745,0.59520113,0.59515476,0.5951084,0.595062,0.5950157,0.5949694,0.5949231,0.59487677,0.5948305,0.5947842,0.59473795,0.5946917,0.59464544,0.5945992,0.594553,0.59450674,0.59446055,0.59441435,0.59436816,0.594322,0.59427583,0.5942297,0.59418356,0.59413743,0.5940913,0.5940452,0.59399915,0.593953,0.59390694,0.5938609,0.59381485,0.5937688,0.59372276,0.59367675,0.59363073,0.5935847,0.59353876,0.5934928,0.5934468,0.59340084,0.5933549,0.593309,0.59326303,0.59321713,0.59317124,0.59312534,0.59307945,0.5930336,0.5929877,0.5929419,0.59289604,0.5928502,0.5928044,0.5927586,0.5927128,0.592667,0.5926212,0.5925755,0.5925297,0.59248394,0.5924382,0.5923925,0.5923468,0.5923011,0.5922554,0.5922097,0.59216404,0.5921184,0.5920727,0.5920271,0.5919815,0.5919359,0.5918903,0.5918447,0.5917991,0.5917535,0.59170794,0.5916624,0.59161687,0.59157133,0.5915258,0.59148026,0.5914348,0.5913893,0.5913438,0.59129834,0.5912529,0.59120744,0.59116197,0.59111655,0.5910712,0.59102577,0.59098035,0.59093493,0.5908896,0.5908442,0.59079885,0.5907535,0.5907082,0.5906629,0.59061754,0.59057224,0.590527,0.5904817,0.5904364,0.59039116,0.5903459,0.5903007,0.59025544,0.5902102,0.590165,0.59011984,0.5900746,0.5900294,0.58998424,0.5899391,0.589894,0.5898488,0.5898037,0.58975863,0.5897135,0.5896684,0.58962333,0.5895783,0.5895332,0.58948815,0.5894431,0.5893981,0.589353,0.589308,0.589263,0.589218,0.589173,0.5891281,0.5890831,0.5890382,0.58899325,0.5889483,0.58890337,0.5888585,0.58881354,0.58876866,0.5887238,0.58867896,0.5886341,0.58858925,0.58854437,0.58849955,0.5884548,0.58840996,0.58836514,0.5883204,0.5882756,0.58823085,0.5881861,0.5881413,0.5880966,0.58805186,0.58800715,0.58796245,0.58791775,0.58787304,0.5878284,0.5877837,0.5877391,0.5876944,0.5876498,0.5876052,0.5875606,0.58751595,0.58747137,0.5874268,0.5873822,0.5873377,0.5872931,0.58724856,0.58720404,0.5871595,0.587115,0.58707047,0.587026,0.58698153,0.58693707,0.5868926,0.58684814,0.58680373,0.58675927,0.58671486,0.58667046,0.58662605,0.58658165,0.58653724,0.5864929,0.58644855,0.5864042,0.58635986,0.5863155,0.5862712,0.5862269,0.5861826,0.5861383,0.586094,0.58604974,0.5860055,0.5859612,0.585917,0.58587277,0.58582854,0.5857843,0.58574015,0.585696,0.58565176,0.5856076,0.5855635,0.5855193,0.58547515,0.58543104,0.58538693,0.5853428,0.5852987,0.5852546,0.58521056,0.58516645,0.5851224,0.58507836,0.5850343,0.5849903,0.5849463,0.5849023,0.5848583,0.5848143,0.5847703,0.58472633,0.58468235,0.5846384,0.5845945,0.58455056,0.58450663,0.5844627,0.58441883,0.5843749,0.58433104,0.58428717,0.5842433,0.5841994,0.5841556,0.5841118,0.58406794,0.58402413,0.5839803,0.5839366,0.58389276,0.583849,0.58380526,0.5837615,0.58371776,0.583674,0.58363026,0.5835866,0.5835429,0.5834992,0.5834555,0.5834118,0.5833682,0.5833245,0.58328086,0.58323723,0.5831936,0.58314997,0.5831064,0.58306277,0.5830192,0.5829756,0.58293205,0.5828885,0.582845,0.5828014,0.5827579,0.5827144,0.58267087,0.58262736,0.58258384,0.5825404,0.58249694,0.5824535,0.58241004,0.5823666,0.58232313,0.58227974,0.5822363,0.5821929,0.58214957,0.5821062,0.5820628,0.5820194,0.58197606,0.5819327,0.5818894,0.58184606,0.5818028,0.58175945,0.5817161,0.58167285,0.5816296,0.5815863,0.5815431,0.5814998,0.5814566,0.5814134,0.5813701,0.5813269,0.58128375,0.58124053,0.5811974,0.58115417,0.5811111,0.5810679,0.58102477,0.5809816,0.5809385,0.5808954,0.58085227,0.5808092,0.5807661,0.58072305,0.58067995,0.5806369,0.5805939,0.58055085,0.5805078,0.5804648,0.5804218,0.58037883,0.5803358,0.5802928,0.58024985,0.58020693,0.58016396,0.58012104,0.58007807,0.5800352,0.5799923,0.5799494,0.57990646,0.5798636,0.5798207,0.57977784,0.579735,0.5796922,0.5796493,0.5796065,0.5795637,0.5795209,0.5794781,0.5794353,0.5793925,0.57934976,0.579307,0.5792642,0.5792215,0.5791788,0.5791361,0.57909334,0.5790506,0.5790079,0.57896525,0.57892257,0.5788799,0.5788373,0.57879466,0.578752,0.57870936,0.57866675,0.5786241,0.5785815,0.57853895,0.57849634,0.5784538,0.5784112,0.57836866,0.57832617,0.5782836,0.5782411,0.57819855,0.57815605,0.5781136,0.5780711,0.5780286,0.5779861,0.5779437,0.57790124,0.5778588,0.57781637,0.577774,0.57773155,0.5776892,0.57764673,0.57760435,0.577562,0.57751966,0.5774773,0.57743496,0.5773926,0.57735026],"x":[0.8,0.8004398240703718,0.8008796481407437,0.8013194722111155,0.8017592962814875,0.8021991203518593,0.8026389444222312,0.803078768492603,0.8035185925629749,0.8039584166333467,0.8043982407037185,0.8048380647740904,0.8052778888444622,0.8057177129148341,0.8061575369852059,0.8065973610555778,0.8070371851259496,0.8074770091963215,0.8079168332666933,0.8083566573370652,0.808796481407437,0.8092363054778089,0.8096761295481807,0.8101159536185526,0.8105557776889244,0.8109956017592963,0.8114354258296681,0.81187524990004,0.8123150739704118,0.8127548980407837,0.8131947221111555,0.8136345461815274,0.8140743702518992,0.8145141943222711,0.8149540183926429,0.8153938424630148,0.8158336665333866,0.8162734906037585,0.8167133146741303,0.8171531387445022,0.817592962814874,0.8180327868852459,0.8184726109556177,0.8189124350259896,0.8193522590963614,0.8197920831667334,0.8202319072371052,0.8206717313074771,0.8211115553778489,0.8215513794482208,0.8219912035185926,0.8224310275889645,0.8228708516593363,0.8233106757297081,0.82375049980008,0.8241903238704518,0.8246301479408237,0.8250699720111955,0.8255097960815674,0.8259496201519392,0.8263894442223111,0.8268292682926829,0.8272690923630548,0.8277089164334266,0.8281487405037985,0.8285885645741703,0.8290283886445422,0.829468212714914,0.8299080367852859,0.8303478608556577,0.8307876849260296,0.8312275089964014,0.8316673330667733,0.8321071571371451,0.832546981207517,0.8329868052778888,0.8334266293482607,0.8338664534186325,0.8343062774890044,0.8347461015593762,0.8351859256297481,0.8356257497001199,0.8360655737704918,0.8365053978408636,0.8369452219112355,0.8373850459816073,0.8378248700519793,0.838264694122351,0.838704518192723,0.8391443422630948,0.8395841663334667,0.8400239904038385,0.8404638144742104,0.8409036385445822,0.841343462614954,0.8417832866853259,0.8422231107556977,0.8426629348260696,0.8431027588964414,0.8435425829668133,0.8439824070371851,0.844422231107557,0.8448620551779288,0.8453018792483007,0.8457417033186725,0.8461815273890444,0.8466213514594162,0.8470611755297881,0.8475009996001599,0.8479408236705318,0.8483806477409036,0.8488204718112755,0.8492602958816473,0.8497001199520192,0.850139944022391,0.8505797680927629,0.8510195921631347,0.8514594162335066,0.8518992403038784,0.8523390643742503,0.8527788884446221,0.853218712514994,0.8536585365853658,0.8540983606557377,0.8545381847261095,0.8549780087964814,0.8554178328668532,0.8558576569372252,0.856297481007597,0.8567373050779689,0.8571771291483407,0.8576169532187126,0.8580567772890844,0.8584966013594563,0.8589364254298281,0.8593762495002,0.8598160735705718,0.8602558976409436,0.8606957217113155,0.8611355457816873,0.8615753698520592,0.862015193922431,0.8624550179928029,0.8628948420631747,0.8633346661335466,0.8637744902039184,0.8642143142742903,0.8646541383446621,0.865093962415034,0.8655337864854058,0.8659736105557777,0.8664134346261495,0.8668532586965214,0.8672930827668932,0.8677329068372651,0.8681727309076369,0.8686125549780088,0.8690523790483806,0.8694922031187525,0.8699320271891243,0.8703718512594962,0.870811675329868,0.8712514994002399,0.8716913234706117,0.8721311475409836,0.8725709716113554,0.8730107956817273,0.8734506197520991,0.873890443822471,0.8743302678928428,0.8747700919632148,0.8752099160335866,0.8756497401039585,0.8760895641743303,0.8765293882447022,0.876969212315074,0.8774090363854459,0.8778488604558177,0.8782886845261896,0.8787285085965614,0.8791683326669332,0.8796081567373051,0.8800479808076769,0.8804878048780488,0.8809276289484206,0.8813674530187925,0.8818072770891643,0.8822471011595362,0.882686925229908,0.8831267493002799,0.8835665733706517,0.8840063974410236,0.8844462215113954,0.8848860455817673,0.8853258696521391,0.885765693722511,0.8862055177928828,0.8866453418632547,0.8870851659336265,0.8875249900039984,0.8879648140743702,0.8884046381447421,0.8888444622151139,0.8892842862854858,0.8897241103558576,0.8901639344262295,0.8906037584966013,0.8910435825669732,0.891483406637345,0.891923230707717,0.8923630547780887,0.8928028788484607,0.8932427029188325,0.8936825269892044,0.8941223510595762,0.8945621751299481,0.8950019992003199,0.8954418232706918,0.8958816473410636,0.8963214714114355,0.8967612954818073,0.8972011195521792,0.897640943622551,0.8980807676929228,0.8985205917632947,0.8989604158336665,0.8994002399040384,0.8998400639744102,0.9002798880447821,0.9007197121151539,0.9011595361855258,0.9015993602558976,0.9020391843262695,0.9024790083966413,0.9029188324670132,0.903358656537385,0.9037984806077569,0.9042383046781287,0.9046781287485006,0.9051179528188724,0.9055577768892443,0.9059976009596161,0.906437425029988,0.9068772491003598,0.9073170731707317,0.9077568972411035,0.9081967213114754,0.9086365453818472,0.9090763694522191,0.9095161935225909,0.9099560175929629,0.9103958416633346,0.9108356657337066,0.9112754898040784,0.9117153138744503,0.9121551379448221,0.912594962015194,0.9130347860855658,0.9134746101559377,0.9139144342263095,0.9143542582966814,0.9147940823670532,0.9152339064374251,0.9156737305077969,0.9161135545781688,0.9165533786485406,0.9169932027189124,0.9174330267892843,0.9178728508596561,0.918312674930028,0.9187524990003998,0.9191923230707717,0.9196321471411435,0.9200719712115154,0.9205117952818872,0.9209516193522591,0.9213914434226309,0.9218312674930028,0.9222710915633746,0.9227109156337465,0.9231507397041183,0.9235905637744902,0.924030387844862,0.9244702119152339,0.9249100359856057,0.9253498600559776,0.9257896841263494,0.9262295081967213,0.9266693322670931,0.927109156337465,0.9275489804078368,0.9279888044782088,0.9284286285485805,0.9288684526189525,0.9293082766893243,0.9297481007596962,0.930187924830068,0.9306277489004399,0.9310675729708117,0.9315073970411836,0.9319472211115554,0.9323870451819273,0.9328268692522991,0.933266693322671,0.9337065173930428,0.9341463414634147,0.9345861655337865,0.9350259896041584,0.9354658136745302,0.935905637744902,0.9363454618152739,0.9367852858856457,0.9372251099560176,0.9376649340263894,0.9381047580967613,0.9385445821671331,0.938984406237505,0.9394242303078768,0.9398640543782487,0.9403038784486205,0.9407437025189924,0.9411835265893642,0.9416233506597361,0.9420631747301079,0.9425029988004798,0.9429428228708516,0.9433826469412235,0.9438224710115953,0.9442622950819672,0.944702119152339,0.945141943222711,0.9455817672930827,0.9460215913634547,0.9464614154338264,0.9469012395041984,0.9473410635745702,0.9477808876449421,0.9482207117153139,0.9486605357856858,0.9491003598560576,0.9495401839264295,0.9499800079968013,0.9504198320671732,0.950859656137545,0.9512994802079169,0.9517393042782887,0.9521791283486606,0.9526189524190324,0.9530587764894043,0.9534986005597761,0.9539384246301479,0.9543782487005198,0.9548180727708916,0.9552578968412635,0.9556977209116353,0.9561375449820072,0.956577369052379,0.9570171931227509,0.9574570171931227,0.9578968412634946,0.9583366653338664,0.9587764894042383,0.9592163134746101,0.959656137544982,0.9600959616153538,0.9605357856857257,0.9609756097560975,0.9614154338264694,0.9618552578968412,0.9622950819672131,0.9627349060375849,0.9631747301079568,0.9636145541783286,0.9640543782487005,0.9644942023190723,0.9649340263894443,0.965373850459816,0.965813674530188,0.9662534986005598,0.9666933226709317,0.9671331467413035,0.9675729708116754,0.9680127948820472,0.9684526189524191,0.9688924430227909,0.9693322670931628,0.9697720911635346,0.9702119152339065,0.9706517393042783,0.9710915633746502,0.971531387445022,0.9719712115153939,0.9724110355857657,0.9728508596561375,0.9732906837265094,0.9737305077968812,0.9741703318672531,0.9746101559376249,0.9750499800079968,0.9754898040783686,0.9759296281487405,0.9763694522191123,0.9768092762894842,0.977249100359856,0.9776889244302279,0.9781287485005997,0.9785685725709716,0.9790083966413434,0.9794482207117153,0.9798880447820871,0.980327868852459,0.9807676929228308,0.9812075169932027,0.9816473410635745,0.9820871651339464,0.9825269892043182,0.9829668132746902,0.983406637345062,0.9838464614154339,0.9842862854858057,0.9847261095561776,0.9851659336265494,0.9856057576969213,0.9860455817672931,0.986485405837665,0.9869252299080368,0.9873650539784087,0.9878048780487805,0.9882447021191524,0.9886845261895242,0.9891243502598961,0.9895641743302679,0.9900039984006398,0.9904438224710116,0.9908836465413835,0.9913234706117553,0.9917632946821271,0.992203118752499,0.9926429428228708,0.9930827668932427,0.9935225909636145,0.9939624150339864,0.9944022391043582,0.9948420631747301,0.9952818872451019,0.9957217113154738,0.9961615353858456,0.9966013594562175,0.9970411835265893,0.9974810075969612,0.997920831667333,0.9983606557377049,0.9988004798080767,0.9992403038784486,0.9996801279488204,1.0001199520191923,1.0005597760895641,1.000999600159936,1.001439424230308,1.0018792483006798,1.0023190723710516,1.0027588964414234,1.0031987205117954,1.0036385445821672,1.004078368652539,1.0045181927229108,1.0049580167932828,1.0053978408636546,1.0058376649340264,1.0062774890043982,1.0067173130747702,1.007157137145142,1.0075969612155138,1.0080367852858856,1.0084766093562576,1.0089164334266294,1.0093562574970012,1.009796081567373,1.010235905637745,1.0106757297081168,1.0111155537784886,1.0115553778488604,1.0119952019192322,1.0124350259896042,1.012874850059976,1.0133146741303478,1.0137544982007196,1.0141943222710916,1.0146341463414634,1.0150739704118352,1.015513794482207,1.015953618552579,1.0163934426229508,1.0168332666933226,1.0172730907636944,1.0177129148340665,1.0181527389044382,1.01859256297481,1.0190323870451818,1.0194722111155539,1.0199120351859257,1.0203518592562975,1.0207916833266693,1.0212315073970413,1.021671331467413,1.0221111555377849,1.0225509796081567,1.0229908036785287,1.0234306277489005,1.0238704518192723,1.024310275889644,1.024750099960016,1.025189924030388,1.0256297481007597,1.0260695721711315,1.0265093962415035,1.0269492203118753,1.027389044382247,1.027828868452619,1.028268692522991,1.0287085165933627,1.0291483406637345,1.0295881647341063,1.030027988804478,1.0304678128748501,1.030907636945222,1.0313474610155937,1.0317872850859655,1.0322271091563375,1.0326669332267093,1.0331067572970811,1.033546581367453,1.033986405437825,1.0344262295081967,1.0348660535785685,1.0353058776489403,1.0357457017193124,1.0361855257896841,1.036625349860056,1.0370651739304277,1.0375049980007998,1.0379448220711716,1.0383846461415434,1.0388244702119152,1.0392642942822872,1.039704118352659,1.0401439424230308,1.0405837664934026,1.0410235905637746,1.0414634146341464,1.0419032387045182,1.04234306277489,1.042782886845262,1.0432227109156338,1.0436625349860056,1.0441023590563774,1.0445421831267494,1.0449820071971212,1.045421831267493,1.0458616553378648,1.0463014794082368,1.0467413034786086,1.0471811275489804,1.0476209516193522,1.048060775689724,1.048500599760096,1.0489404238304678,1.0493802479008396,1.0498200719712114,1.0502598960415834,1.0506997201119552,1.051139544182327,1.0515793682526988,1.0520191923230708,1.0524590163934426,1.0528988404638144,1.0533386645341862,1.0537784886045582,1.05421831267493,1.0546581367453018,1.0550979608156736,1.0555377848860457,1.0559776089564175,1.0564174330267893,1.056857257097161,1.057297081167533,1.0577369052379049,1.0581767293082767,1.0586165533786485,1.0590563774490205,1.0594962015193923,1.059936025589764,1.0603758496601359,1.060815673730508,1.0612554978008797,1.0616953218712515,1.0621351459416233,1.0625749700119953,1.063014794082367,1.063454618152739,1.0638944422231107,1.0643342662934827,1.0647740903638545,1.0652139144342263,1.065653738504598,1.0660935625749701,1.066533386645342,1.0669732107157137,1.0674130347860855,1.0678528588564573,1.0682926829268293,1.0687325069972011,1.069172331067573,1.0696121551379447,1.0700519792083167,1.0704918032786885,1.0709316273490603,1.0713714514194321,1.0718112754898041,1.072251099560176,1.0726909236305477,1.0731307477009195,1.0735705717712916,1.0740103958416634,1.0744502199120352,1.074890043982407,1.075329868052779,1.0757696921231508,1.0762095161935226,1.0766493402638944,1.0770891643342664,1.0775289884046382,1.07796881247501,1.0784086365453818,1.0788484606157538,1.0792882846861256,1.0797281087564974,1.0801679328268692,1.0806077568972412,1.081047580967613,1.0814874050379848,1.0819272291083566,1.0823670531787286,1.0828068772491004,1.0832467013194722,1.083686525389844,1.084126349460216,1.0845661735305878,1.0850059976009596,1.0854458216713314,1.0858856457417032,1.0863254698120752,1.086765293882447,1.0872051179528188,1.0876449420231906,1.0880847660935626,1.0885245901639344,1.0889644142343062,1.089404238304678,1.08984406237505,1.0902838864454218,1.0907237105157936,1.0911635345861654,1.0916033586565375,1.0920431827269093,1.092483006797281,1.0929228308676529,1.0933626549380249,1.0938024790083967,1.0942423030787685,1.0946821271491403,1.0951219512195123,1.095561775289884,1.0960015993602559,1.0964414234306277,1.0968812475009997,1.0973210715713715,1.0977608956417433,1.098200719712115,1.098640543782487,1.099080367852859,1.0995201919232307,1.0999600159936025,1.1003998400639745,1.1008396641343463,1.101279488204718,1.10171931227509,1.102159136345462,1.1025989604158337,1.1030387844862055,1.1034786085565773,1.1039184326269493,1.1043582566973211,1.104798080767693,1.1052379048380647,1.1056777289084365,1.1061175529788085,1.1065573770491803,1.1069972011195521,1.107437025189924,1.107876849260296,1.1083166733306677,1.1087564974010395,1.1091963214714113,1.1096361455417834,1.1100759696121552,1.110515793682527,1.1109556177528987,1.1113954418232708,1.1118352658936426,1.1122750899640144,1.1127149140343862,1.1131547381047582,1.11359456217513,1.1140343862455018,1.1144742103158736,1.1149140343862456,1.1153538584566174,1.1157936825269892,1.116233506597361,1.116673330667733,1.1171131547381048,1.1175529788084766,1.1179928028788484,1.1184326269492204,1.1188724510195922,1.119312275089964,1.1197520991603358,1.1201919232307078,1.1206317473010796,1.1210715713714514,1.1215113954418232,1.1219512195121952,1.122391043582567,1.1228308676529388,1.1232706917233106,1.1237105157936824,1.1241503398640544,1.1245901639344262,1.125029988004798,1.1254698120751698,1.1259096361455418,1.1263494602159136,1.1267892842862854,1.1272291083566572,1.1276689324270293,1.128108756497401,1.1285485805677729,1.1289884046381446,1.1294282287085167,1.1298680527788885,1.1303078768492603,1.130747700919632,1.131187524990004,1.1316273490603759,1.1320671731307477,1.1325069972011195,1.1329468212714915,1.1333866453418633,1.133826469412235,1.1342662934826069,1.134706117552979,1.1351459416233507,1.1355857656937225,1.1360255897640943,1.1364654138344663,1.136905237904838,1.13734506197521,1.1377848860455817,1.1382247101159537,1.1386645341863255,1.1391043582566973,1.139544182327069,1.1399840063974411,1.140423830467813,1.1408636545381847,1.1413034786085565,1.1417433026789283,1.1421831267493003,1.1426229508196721,1.143062774890044,1.1435025989604157,1.1439424230307877,1.1443822471011595,1.1448220711715313,1.1452618952419031,1.1457017193122752,1.146141543382647,1.1465813674530188,1.1470211915233905,1.1474610155937626,1.1479008396641344,1.1483406637345062,1.148780487804878,1.14922031187525,1.1496601359456218,1.1500999600159936,1.1505397840863654,1.1509796081567374,1.1514194322271092,1.151859256297481,1.1522990803678528,1.1527389044382248,1.1531787285085966,1.1536185525789684,1.1540583766493402,1.1544982007197122,1.154938024790084,1.1553778488604558,1.1558176729308276,1.1562574970011996,1.1566973210715714,1.1571371451419432,1.157576969212315,1.158016793282687,1.1584566173530588,1.1588964414234306,1.1593362654938024,1.1597760895641744,1.1602159136345462,1.160655737704918,1.1610955617752898,1.1615353858456616,1.1619752099160336,1.1624150339864054,1.1628548580567772,1.163294682127149,1.163734506197521,1.1641743302678929,1.1646141543382647,1.1650539784086364,1.1654938024790085,1.1659336265493803,1.166373450619752,1.1668132746901239,1.1672530987604959,1.1676929228308677,1.1681327469012395,1.1685725709716113,1.1690123950419833,1.169452219112355,1.1698920431827269,1.1703318672530987,1.1707716913234707,1.1712115153938425,1.1716513394642143,1.172091163534586,1.172530987604958,1.17297081167533,1.1734106357457017,1.1738504598160735,1.1742902838864455,1.1747301079568173,1.1751699320271891,1.175609756097561,1.176049580167933,1.1764894042383047,1.1769292283086765,1.1773690523790483,1.1778088764494203,1.1782487005197921,1.178688524590164,1.1791283486605357,1.1795681727309075,1.1800079968012795,1.1804478208716513,1.1808876449420231,1.181327469012395,1.181767293082767,1.1822071171531388,1.1826469412235106,1.1830867652938823,1.1835265893642544,1.1839664134346262,1.184406237504998,1.1848460615753698,1.1852858856457418,1.1857257097161136,1.1861655337864854,1.1866053578568572,1.1870451819272292,1.187485005997601,1.1879248300679728,1.1883646541383446,1.1888044782087166,1.1892443022790884,1.1896841263494602,1.190123950419832,1.190563774490204,1.1910035985605758,1.1914434226309476,1.1918832467013194,1.1923230707716914,1.1927628948420632,1.193202718912435,1.1936425429828068,1.1940823670531788,1.1945221911235506,1.1949620151939224,1.1954018392642942,1.1958416633346662,1.196281487405038,1.1967213114754098,1.1971611355457816,1.1976009596161536,1.1980407836865254,1.1984806077568972,1.198920431827269,1.1993602558976408,1.1998000799680129,1.2002399040383847,1.2006797281087564,1.2011195521791282,1.2015593762495003,1.201999200319872,1.2024390243902439,1.2028788484606157,1.2033186725309877,1.2037584966013595,1.2041983206717313,1.204638144742103,1.205077968812475,1.2055177928828469,1.2059576169532187,1.2063974410235905,1.2068372650939625,1.2072770891643343,1.207716913234706,1.2081567373050779,1.20859656137545,1.2090363854458217,1.2094762095161935,1.2099160335865653,1.2103558576569373,1.2107956817273091,1.211235505797681,1.2116753298680527,1.2121151539384247,1.2125549780087965,1.2129948020791683,1.2134346261495401,1.2138744502199121,1.214314274290284,1.2147540983606557,1.2151939224310275,1.2156337465013995,1.2160735705717713,1.2165133946421431,1.216953218712515,1.2173930427828867,1.2178328668532588,1.2182726909236306,1.2187125149940023,1.2191523390643741,1.2195921631347462,1.220031987205118,1.2204718112754898,1.2209116353458616,1.2213514594162336,1.2217912834866054,1.2222311075569772,1.222670931627349,1.223110755697721,1.2235505797680928,1.2239904038384646,1.2244302279088364,1.2248700519792084,1.2253098760495802,1.225749700119952,1.2261895241903238,1.2266293482606958,1.2270691723310676,1.2275089964014394,1.2279488204718112,1.2283886445421832,1.228828468612555,1.2292682926829268,1.2297081167532986,1.2301479408236706,1.2305877648940424,1.2310275889644142,1.231467413034786,1.231907237105158,1.2323470611755298,1.2327868852459016,1.2332267093162734,1.2336665333866454,1.2341063574570172,1.234546181527389,1.2349860055977608,1.2354258296681329,1.2358656537385047,1.2363054778088765,1.2367453018792482,1.23718512594962,1.237624950019992,1.2380647740903639,1.2385045981607357,1.2389444222311075,1.2393842463014795,1.2398240703718513,1.240263894442223,1.2407037185125949,1.2411435425829669,1.2415833666533387,1.2420231907237105,1.2424630147940823,1.2429028388644543,1.243342662934826,1.243782487005198,1.2442223110755697,1.2446621351459417,1.2451019592163135,1.2455417832866853,1.245981607357057,1.2464214314274291,1.246861255497801,1.2473010795681727,1.2477409036385445,1.2481807277089165,1.2486205517792883,1.2490603758496601,1.249500199920032,1.249940023990404,1.2503798480607757,1.2508196721311475,1.2512594962015193,1.2516993202718913,1.2521391443422631,1.252578968412635,1.2530187924830067,1.2534586165533788,1.2538984406237506,1.2543382646941224,1.2547780887644941,1.255217912834866,1.255657736905238,1.2560975609756098,1.2565373850459816,1.2569772091163534,1.2574170331867254,1.2578568572570972,1.258296681327469,1.2587365053978408,1.2591763294682128,1.2596161535385846,1.2600559776089564,1.2604958016793282,1.2609356257497002,1.261375449820072,1.2618152738904438,1.2622550979608156,1.2626949220311876,1.2631347461015594,1.2635745701719312,1.264014394242303,1.264454218312675,1.2648940423830468,1.2653338664534186,1.2657736905237904,1.2662135145941624,1.2666533386645342,1.267093162734906,1.2675329868052778,1.2679728108756498,1.2684126349460216,1.2688524590163934,1.2692922830867652,1.2697321071571372,1.270171931227509,1.2706117552978808,1.2710515793682526,1.2714914034386247,1.2719312275089965,1.2723710515793683,1.27281087564974,1.2732506997201118,1.2736905237904839,1.2741303478608557,1.2745701719312275,1.2750099960015993,1.2754498200719713,1.275889644142343,1.2763294682127149,1.2767692922830867,1.2772091163534587,1.2776489404238305,1.2780887644942023,1.278528588564574,1.278968412634946,1.279408236705318,1.2798480607756897,1.2802878848460615,1.2807277089164335,1.2811675329868053,1.281607357057177,1.282047181127549,1.282487005197921,1.2829268292682927,1.2833666533386645,1.2838064774090363,1.2842463014794083,1.2846861255497801,1.285125949620152,1.2855657736905237,1.2860055977608957,1.2864454218312675,1.2868852459016393,1.2873250699720111,1.2877648940423831,1.288204718112755,1.2886445421831267,1.2890843662534985,1.2895241903238706,1.2899640143942424,1.2904038384646142,1.290843662534986,1.291283486605358,1.2917233106757298,1.2921631347461016,1.2926029588164734,1.2930427828868452,1.2934826069572172,1.293922431027589,1.2943622550979608,1.2948020791683326,1.2952419032387046,1.2956817273090764,1.2961215513794482,1.29656137544982,1.297001199520192,1.2974410235905638,1.2978808476609356,1.2983206717313074,1.2987604958016794,1.2992003198720512,1.299640143942423,1.3000799680127948,1.3005197920831668,1.3009596161535386,1.3013994402239104,1.3018392642942822,1.3022790883646542,1.302718912435026,1.3031587365053978,1.3035985605757696,1.3040383846461416,1.3044782087165134,1.3049180327868852,1.305357856857257,1.305797680927629,1.3062375049980008,1.3066773290683726,1.3071171531387444,1.3075569772091165,1.3079968012794883,1.30843662534986,1.3088764494202318,1.3093162734906039,1.3097560975609757,1.3101959216313475,1.3106357457017193,1.311075569772091,1.311515393842463,1.3119552179128349,1.3123950419832067,1.3128348660535785,1.3132746901239505,1.3137145141943223,1.314154338264694,1.3145941623350659,1.315033986405438,1.3154738104758097,1.3159136345461815,1.3163534586165533,1.3167932826869253,1.317233106757297,1.317672930827669,1.3181127548980407,1.3185525789684127,1.3189924030387845,1.3194322271091563,1.319872051179528,1.3203118752499001,1.320751699320272,1.3211915233906437,1.3216313474610155,1.3220711715313875,1.3225109956017593,1.3229508196721311,1.323390643742503,1.323830467812875,1.3242702918832467,1.3247101159536185,1.3251499400239903,1.3255897640943624,1.3260295881647342,1.326469412235106,1.3269092363054777,1.3273490603758498,1.3277888844462216,1.3282287085165934,1.3286685325869652,1.3291083566573372,1.329548180727709,1.3299880047980808,1.3304278288684526,1.3308676529388244,1.3313074770091964,1.3317473010795682,1.33218712514994,1.3326269492203118,1.3330667732906838,1.3335065973610556,1.3339464214314274,1.3343862455017992,1.3348260695721712,1.335265893642543,1.3357057177129148,1.3361455417832866,1.3365853658536586,1.3370251899240304,1.3374650139944022,1.337904838064774,1.338344662135146,1.3387844862055178,1.3392243102758896,1.3396641343462614,1.3401039584166334,1.3405437824870052,1.340983606557377,1.3414234306277488,1.3418632546981208,1.3423030787684926,1.3427429028388644,1.3431827269092362,1.3436225509796083,1.34406237504998,1.3445021991203518,1.3449420231907236,1.3453818472610957,1.3458216713314675,1.3462614954018393,1.346701319472211,1.347141143542583,1.3475809676129549,1.3480207916833267,1.3484606157536985,1.3489004398240703,1.3493402638944423,1.349780087964814,1.3502199120351859,1.3506597361055577,1.3510995601759297,1.3515393842463015,1.3519792083166733,1.352419032387045,1.352858856457417,1.353298680527789,1.3537385045981607,1.3541783286685325,1.3546181527389045,1.3550579768092763,1.355497800879648,1.35593762495002,1.356377449020392,1.3568172730907637,1.3572570971611355,1.3576969212315073,1.3581367453018793,1.3585765693722511,1.359016393442623,1.3594562175129947,1.3598960415833667,1.3603358656537385,1.3607756897241103,1.3612155137944821,1.3616553378648542,1.362095161935226,1.3625349860055977,1.3629748100759695,1.3634146341463416,1.3638544582167134,1.3642942822870852,1.364734106357457,1.365173930427829,1.3656137544982008,1.3660535785685726,1.3664934026389444,1.3669332267093162,1.3673730507796882,1.36781287485006,1.3682526989204318,1.3686925229908036,1.3691323470611756,1.3695721711315474,1.3700119952019192,1.370451819272291,1.370891643342663,1.3713314674130348,1.3717712914834066,1.3722111155537784,1.3726509396241504,1.3730907636945222,1.373530587764894,1.3739704118352658,1.3744102359056378,1.3748500599760096,1.3752898840463814,1.3757297081167532,1.3761695321871252,1.376609356257497,1.3770491803278688,1.3774890043982406,1.3779288284686126,1.3783686525389844,1.3788084766093562,1.379248300679728,1.3796881247501,1.3801279488204719,1.3805677728908436,1.3810075969612154,1.3814474210315875,1.3818872451019593,1.382327069172331,1.3827668932427029,1.3832067173130749,1.3836465413834467,1.3840863654538185,1.3845261895241903,1.3849660135945623,1.385405837664934,1.3858456617353059,1.3862854858056777,1.3867253098760495,1.3871651339464215,1.3876049580167933,1.388044782087165,1.3884846061575369,1.388924430227909,1.3893642542982807,1.3898040783686525,1.3902439024390243,1.3906837265093963,1.391123550579768,1.39156337465014,1.3920031987205117,1.3924430227908837,1.3928828468612555,1.3933226709316273,1.3937624950019991,1.3942023190723711,1.394642143142743,1.3950819672131147,1.3955217912834865,1.3959616153538585,1.3964014394242303,1.3968412634946021,1.397281087564974,1.397720911635346,1.3981607357057177,1.3986005597760895,1.3990403838464613,1.3994802079168334,1.3999200319872052,1.400359856057577,1.4007996801279488,1.4012395041983208,1.4016793282686926,1.4021191523390644,1.4025589764094362,1.4029988004798082,1.40343862455018,1.4038784486205518,1.4043182726909236,1.4047580967612954,1.4051979208316674,1.4056377449020392,1.406077568972411,1.4065173930427828,1.4069572171131548,1.4073970411835266,1.4078368652538984,1.4082766893242702,1.4087165133946422,1.409156337465014,1.4095961615353858,1.4100359856057576,1.4104758096761296,1.4109156337465014,1.4113554578168732,1.411795281887245,1.412235105957617,1.4126749300279888,1.4131147540983606,1.4135545781687324,1.4139944022391044,1.4144342263094762,1.414874050379848,1.4153138744502198,1.4157536985205919,1.4161935225909636,1.4166333466613354,1.4170731707317072,1.4175129948020793,1.417952818872451,1.4183926429428229,1.4188324670131947,1.4192722910835667,1.4197121151539385,1.4201519392243103,1.420591763294682,1.421031587365054,1.4214714114354259,1.4219112355057977,1.4223510595761695,1.4227908836465415,1.4232307077169133,1.423670531787285,1.4241103558576569,1.4245501799280287,1.4249900039984007,1.4254298280687725,1.4258696521391443,1.426309476209516,1.426749300279888,1.42718912435026,1.4276289484206317,1.4280687724910035,1.4285085965613755,1.4289484206317473,1.4293882447021191,1.429828068772491,1.430267892842863,1.4307077169132347,1.4311475409836065,1.4315873650539783,1.4320271891243503,1.4324670131947221,1.432906837265094,1.4333466613354657,1.4337864854058378,1.4342263094762095,1.4346661335465813,1.4351059576169531,1.4355457816873252,1.435985605757697,1.4364254298280688,1.4368652538984406,1.4373050779688126,1.4377449020391844,1.4381847261095562,1.438624550179928,1.4390643742503,1.4395041983206718,1.4399440223910436,1.4403838464614154,1.4408236705317874,1.4412634946021592,1.441703318672531,1.4421431427429028,1.4425829668132746,1.4430227908836466,1.4434626149540184,1.4439024390243902,1.444342263094762,1.444782087165134,1.4452219112355058,1.4456617353058776,1.4461015593762494,1.4465413834466214,1.4469812075169932,1.447421031587365,1.4478608556577368,1.4483006797281088,1.4487405037984806,1.4491803278688524,1.4496201519392242,1.4500599760095962,1.450499800079968,1.4509396241503398,1.4513794482207116,1.4518192722910837,1.4522590963614554,1.4526989204318272,1.453138744502199,1.453578568572571,1.4540183926429429,1.4544582167133147,1.4548980407836865,1.4553378648540585,1.4557776889244303,1.456217512994802,1.4566573370651739,1.4570971611355459,1.4575369852059177,1.4579768092762895,1.4584166333466613,1.4588564574170333,1.459296281487405,1.4597361055577769,1.4601759296281487,1.4606157536985207,1.4610555777688925,1.4614954018392643,1.461935225909636,1.462375049980008,1.46281487405038,1.4632546981207517,1.4636945221911235,1.4641343462614953,1.4645741703318673,1.4650139944022391,1.465453818472611,1.4658936425429827,1.4663334666133547,1.4667732906837265,1.4672131147540983,1.4676529388244701,1.4680927628948421,1.468532586965214,1.4689724110355857,1.4694122351059575,1.4698520591763296,1.4702918832467013,1.4707317073170731,1.471171531387445,1.471611355457817,1.4720511795281888,1.4724910035985606,1.4729308276689324,1.4733706517393044,1.4738104758096762,1.474250299880048,1.4746901239504198,1.4751299480207918,1.4755697720911636,1.4760095961615354,1.4764494202319072,1.4768892443022792,1.477329068372651,1.4777688924430228,1.4782087165133946,1.4786485405837666,1.4790883646541384,1.4795281887245102,1.479968012794882,1.4804078368652538,1.4808476609356258,1.4812874850059976,1.4817273090763694,1.4821671331467412,1.4826069572171132,1.483046781287485,1.4834866053578568,1.4839264294282286,1.4843662534986006,1.4848060775689724,1.4852459016393442,1.485685725709716,1.486125549780088,1.4865653738504598,1.4870051979208316,1.4874450219912034,1.4878848460615755,1.4883246701319472,1.488764494202319,1.4892043182726908,1.4896441423430629,1.4900839664134347,1.4905237904838065,1.4909636145541783,1.4914034386245503,1.491843262694922,1.4922830867652939,1.4927229108356657,1.4931627349060377,1.4936025589764095,1.4940423830467813,1.494482207117153,1.494922031187525,1.4953618552578969,1.4958016793282687,1.4962415033986405,1.4966813274690125,1.4971211515393843,1.497560975609756,1.498000799680128,1.4984406237504997,1.4988804478208717,1.4993202718912435,1.4997600959616153,1.500199920031987,1.5006397441023591,1.501079568172731,1.5015193922431027,1.5019592163134745,1.5023990403838465,1.5028388644542183,1.5032786885245901,1.503718512594962,1.504158336665334,1.5045981607357057,1.5050379848060775,1.5054778088764493,1.5059176329468213,1.5063574570171931,1.506797281087565,1.5072371051579367,1.5076769292283088,1.5081167532986806,1.5085565773690524,1.5089964014394242,1.5094362255097962,1.509876049580168,1.5103158736505398,1.5107556977209116,1.5111955217912836,1.5116353458616554,1.5120751699320272,1.512514994002399,1.512954818072771,1.5133946421431428,1.5138344662135146,1.5142742902838864,1.5147141143542584,1.5151539384246302,1.515593762495002,1.5160335865653738,1.5164734106357458,1.5169132347061176,1.5173530587764894,1.5177928828468612,1.518232706917233,1.518672530987605,1.5191123550579768,1.5195521791283486,1.5199920031987204,1.5204318272690924,1.5208716513394642,1.521311475409836,1.5217512994802078,1.5221911235505798,1.5226309476209516,1.5230707716913234,1.5235105957616952,1.5239504198320672,1.524390243902439,1.5248300679728108,1.5252698920431826,1.5257097161135547,1.5261495401839265,1.5265893642542983,1.52702918832467,1.527469012395042,1.5279088364654139,1.5283486605357857,1.5287884846061575,1.5292283086765295,1.5296681327469013,1.530107956817273,1.5305477808876449,1.530987604958017,1.5314274290283887,1.5318672530987605,1.5323070771691323,1.5327469012395043,1.533186725309876,1.533626549380248,1.5340663734506197,1.5345061975209917,1.5349460215913635,1.5353858456617353,1.535825669732107,1.536265493802479,1.536705317872851,1.5371451419432227,1.5375849660135945,1.5380247900839663,1.5384646141543383,1.5389044382247101,1.539344262295082,1.5397840863654537,1.5402239104358257,1.5406637345061975,1.5411035585765693,1.5415433826469411,1.5419832067173131,1.542423030787685,1.5428628548580567,1.5433026789284285,1.5437425029988006,1.5441823270691724,1.5446221511395442,1.545061975209916,1.545501799280288,1.5459416233506598,1.5463814474210316,1.5468212714914034,1.5472610955617754,1.5477009196321472,1.548140743702519,1.5485805677728908,1.5490203918432628,1.5494602159136346,1.5499000399840064,1.5503398640543782,1.5507796881247502,1.551219512195122,1.5516593362654938,1.5520991603358656,1.5525389844062376,1.5529788084766094,1.5534186325469812,1.553858456617353,1.554298280687725,1.5547381047580968,1.5551779288284686,1.5556177528988404,1.5560575769692122,1.5564974010395842,1.556937225109956,1.5573770491803278,1.5578168732506996,1.5582566973210716,1.5586965213914434,1.5591363454618152,1.559576169532187,1.560015993602559,1.5604558176729308,1.5608956417433026,1.5613354658136744,1.5617752898840465,1.5622151139544183,1.56265493802479,1.5630947620951618,1.5635345861655339,1.5639744102359057,1.5644142343062775,1.5648540583766493,1.5652938824470213,1.565733706517393,1.5661735305877649,1.5666133546581367,1.5670531787285087,1.5674930027988805,1.5679328268692523,1.568372650939624,1.568812475009996,1.569252299080368,1.5696921231507397,1.5701319472211115,1.5705717712914835,1.5710115953618553,1.571451419432227,1.571891243502599,1.572331067572971,1.5727708916433427,1.5732107157137145,1.5736505397840863,1.574090363854458,1.5745301879248301,1.574970011995202,1.5754098360655737,1.5758496601359455,1.5762894842063175,1.5767293082766893,1.5771691323470611,1.577608956417433,1.578048780487805,1.5784886045581767,1.5789284286285485,1.5793682526989203,1.5798080767692924,1.5802479008396642,1.580687724910036,1.5811275489804077,1.5815673730507798,1.5820071971211516,1.5824470211915234,1.5828868452618952,1.5833266693322672,1.583766493402639,1.5842063174730108,1.5846461415433826,1.5850859656137546,1.5855257896841264,1.5859656137544982,1.58640543782487,1.586845261895242,1.5872850859656138,1.5877249100359856,1.5881647341063574,1.5886045581767294,1.5890443822471012,1.589484206317473,1.5899240303878448,1.5903638544582168,1.5908036785285886,1.5912435025989604,1.5916833266693322,1.5921231507397042,1.592562974810076,1.5930027988804478,1.5934426229508196,1.5938824470211914,1.5943222710915634,1.5947620951619352,1.595201919232307,1.5956417433026788,1.5960815673730508,1.5965213914434226,1.5969612155137944,1.5974010395841662,1.5978408636545383,1.59828068772491,1.5987205117952819,1.5991603358656536,1.5996001599360257,1.6000399840063975,1.6004798080767693,1.600919632147141,1.601359456217513,1.6017992802878849,1.6022391043582567,1.6026789284286285,1.6031187524990005,1.6035585765693723,1.603998400639744,1.6044382247101159,1.604878048780488,1.6053178728508597,1.6057576969212315,1.6061975209916033,1.6066373450619753,1.607077169132347,1.607516993202719,1.6079568172730907,1.6083966413434627,1.6088364654138345,1.6092762894842063,1.609716113554578,1.6101559376249501,1.610595761695322,1.6110355857656937,1.6114754098360655,1.6119152339064373,1.6123550579768093,1.6127948820471811,1.613234706117553,1.6136745301879247,1.6141143542582967,1.6145541783286685,1.6149940023990403,1.6154338264694121,1.6158736505397842,1.616313474610156,1.6167532986805278,1.6171931227508995,1.6176329468212716,1.6180727708916434,1.6185125949620152,1.618952419032387,1.619392243102759,1.6198320671731308,1.6202718912435026,1.6207117153138744,1.6211515393842464,1.6215913634546182,1.62203118752499,1.6224710115953618,1.6229108356657338,1.6233506597361056,1.6237904838064774,1.6242303078768492,1.6246701319472212,1.625109956017593,1.6255497800879648,1.6259896041583366,1.6264294282287086,1.6268692522990804,1.6273090763694522,1.627748900439824,1.628188724510196,1.6286285485805678,1.6290683726509396,1.6295081967213114,1.6299480207916832,1.6303878448620552,1.630827668932427,1.6312674930027988,1.6317073170731706,1.6321471411435426,1.6325869652139144,1.6330267892842862,1.633466613354658,1.63390643742503,1.6343462614954019,1.6347860855657737,1.6352259096361454,1.6356657337065175,1.6361055577768893,1.636545381847261,1.6369852059176329,1.6374250299880049,1.6378648540583767,1.6383046781287485,1.6387445021991203,1.6391843262694923,1.639624150339864,1.6400639744102359,1.6405037984806077,1.6409436225509797,1.6413834466213515,1.6418232706917233,1.642263094762095,1.642702918832467,1.643142742902839,1.6435825669732107,1.6440223910435825,1.6444622151139545,1.6449020391843263,1.6453418632546981,1.64578168732507,1.646221511395442,1.6466613354658137,1.6471011595361855,1.6475409836065573,1.6479808076769293,1.6484206317473011,1.648860455817673,1.6493002798880447,1.6497401039584165,1.6501799280287885,1.6506197520991603,1.6510595761695321,1.651499400239904,1.651939224310276,1.6523790483806478,1.6528188724510195,1.6532586965213913,1.6536985205917634,1.6541383446621352,1.654578168732507,1.6550179928028788,1.6554578168732508,1.6558976409436226,1.6563374650139944,1.6567772890843662,1.6572171131547382,1.65765693722511,1.6580967612954818,1.6585365853658536,1.6589764094362256,1.6594162335065974,1.6598560575769692,1.660295881647341,1.660735705717713,1.6611755297880848,1.6616153538584566,1.6620551779288284,1.6624950019992004,1.6629348260695722,1.663374650139944,1.6638144742103158,1.6642542982806878,1.6646941223510596,1.6651339464214314,1.6655737704918032,1.6660135945621752,1.666453418632547,1.6668932427029188,1.6673330667732906,1.6677728908436624,1.6682127149140344,1.6686525389844062,1.669092363054778,1.6695321871251498,1.6699720111955219,1.6704118352658937,1.6708516593362654,1.6712914834066372,1.6717313074770093,1.672171131547381,1.6726109556177529,1.6730507796881247,1.6734906037584967,1.6739304278288685,1.6743702518992403,1.674810075969612,1.675249900039984,1.6756897241103559,1.6761295481807277,1.6765693722510995,1.6770091963214715,1.6774490203918433,1.677888844462215,1.6783286685325869,1.678768492602959,1.6792083166733307,1.6796481407437025,1.6800879648140743,1.6805277888844463,1.6809676129548181,1.68140743702519,1.6818472610955617,1.6822870851659337,1.6827269092363055,1.6831667333066773,1.6836065573770491,1.6840463814474211,1.684486205517793,1.6849260295881647,1.6853658536585365,1.6858056777289085,1.6862455017992803,1.6866853258696521,1.687125149940024,1.6875649740103957,1.6880047980807678,1.6884446221511396,1.6888844462215113,1.6893242702918831,1.6897640943622552,1.690203918432627,1.6906437425029988,1.6910835665733706,1.6915233906437426,1.6919632147141144,1.6924030387844862,1.692842862854858,1.69328268692523,1.6937225109956018,1.6941623350659736,1.6946021591363454,1.6950419832067174,1.6954818072770892,1.695921631347461,1.6963614554178328,1.6968012794882048,1.6972411035585766,1.6976809276289484,1.6981207516993202,1.6985605757696922,1.699000399840064,1.6994402239104358,1.6998800479808076,1.7003198720511796,1.7007596961215514,1.7011995201919232,1.701639344262295,1.702079168332667,1.7025189924030388,1.7029588164734106,1.7033986405437824,1.7038384646141544,1.7042782886845262,1.704718112754898,1.7051579368252698,1.7055977608956416,1.7060375849660137,1.7064774090363855,1.7069172331067572,1.707357057177129,1.707796881247501,1.7082367053178729,1.7086765293882447,1.7091163534586165,1.7095561775289885,1.7099960015993603,1.710435825669732,1.7108756497401039,1.7113154738104759,1.7117552978808477,1.7121951219512195,1.7126349460215913,1.7130747700919633,1.713514594162335,1.7139544182327069,1.7143942423030787,1.7148340663734507,1.7152738904438225,1.7157137145141943,1.716153538584566,1.7165933626549381,1.71703318672531,1.7174730107956817,1.7179128348660535,1.7183526589364255,1.7187924830067973,1.7192323070771691,1.719672131147541,1.720111955217913,1.7205517792882847,1.7209916033586565,1.7214314274290283,1.7218712514994003,1.7223110755697721,1.722750899640144,1.7231907237105157,1.7236305477808875,1.7240703718512596,1.7245101959216314,1.7249500199920031,1.725389844062375,1.725829668132747,1.7262694922031188,1.7267093162734906,1.7271491403438624,1.7275889644142344,1.7280287884846062,1.728468612554978,1.7289084366253498,1.7293482606957218,1.7297880847660936,1.7302279088364654,1.7306677329068372,1.7311075569772092,1.731547381047581,1.7319872051179528,1.7324270291883246,1.7328668532586966,1.7333066773290684,1.7337465013994402,1.734186325469812,1.734626149540184,1.7350659736105558,1.7355057976809276,1.7359456217512994,1.7363854458216714,1.7368252698920432,1.737265093962415,1.7377049180327868,1.7381447421031588,1.7385845661735306,1.7390243902439024,1.7394642143142742,1.7399040383846462,1.740343862455018,1.7407836865253898,1.7412235105957616,1.7416633346661337,1.7421031587365055,1.7425429828068772,1.742982806877249,1.7434226309476208,1.7438624550179929,1.7443022790883647,1.7447421031587365,1.7451819272291083,1.7456217512994803,1.746061575369852,1.7465013994402239,1.7469412235105957,1.7473810475809677,1.7478208716513395,1.7482606957217113,1.748700519792083,1.749140343862455,1.749580167932827,1.7500199920031987,1.7504598160735705,1.7508996401439425,1.7513394642143143,1.751779288284686,1.752219112355058,1.75265893642543,1.7530987604958017,1.7535385845661735,1.7539784086365453,1.7544182327069173,1.7548580567772891,1.755297880847661,1.7557377049180327,1.7561775289884047,1.7566173530587765,1.7570571771291483,1.7574970011995201,1.7579368252698921,1.758376649340264,1.7588164734106357,1.7592562974810075,1.7596961215513796,1.7601359456217514,1.7605757696921231,1.761015593762495,1.7614554178328667,1.7618952419032388,1.7623350659736106,1.7627748900439824,1.7632147141143542,1.7636545381847262,1.764094362255098,1.7645341863254698,1.7649740103958416,1.7654138344662136,1.7658536585365854,1.7662934826069572,1.766733306677329,1.767173130747701,1.7676129548180728,1.7680527788884446,1.7684926029588164,1.7689324270291884,1.7693722510995602,1.769812075169932,1.7702518992403038,1.7706917233106758,1.7711315473810476,1.7715713714514194,1.7720111955217912,1.7724510195921632,1.772890843662535,1.7733306677329068,1.7737704918032786,1.7742103158736506,1.7746501399440224,1.7750899640143942,1.775529788084766,1.775969612155138,1.7764094362255098,1.7768492602958816,1.7772890843662534,1.7777289084366255,1.7781687325069973,1.778608556577369,1.7790483806477408,1.7794882047181129,1.7799280287884847,1.7803678528588565,1.7808076769292283,1.7812475009996,1.781687325069972,1.7821271491403439,1.7825669732107157,1.7830067972810875,1.7834466213514595,1.7838864454218313,1.784326269492203,1.7847660935625749,1.785205917632947,1.7856457417033187,1.7860855657736905,1.7865253898440623,1.7869652139144343,1.787405037984806,1.787844862055178,1.7882846861255497,1.7887245101959217,1.7891643342662935,1.7896041583366653,1.790043982407037,1.7904838064774091,1.790923630547781,1.7913634546181527,1.7918032786885245,1.7922431027588965,1.7926829268292683,1.7931227508996401,1.793562574970012,1.794002399040384,1.7944422231107557,1.7948820471811275,1.7953218712514993,1.7957616953218714,1.7962015193922432,1.796641343462615,1.7970811675329867,1.7975209916033588,1.7979608156737306,1.7984006397441024,1.7988404638144742,1.799280287884846,1.799720111955218,1.8001599360255898,1.8005997600959616,1.8010395841663334,1.8014794082367054,1.8019192323070772,1.802359056377449,1.8027988804478208,1.8032387045181928,1.8036785285885646,1.8041183526589364,1.8045581767293082,1.8049980007996802,1.805437824870052,1.8058776489404238,1.8063174730107956,1.8067572970811676,1.8071971211515394,1.8076369452219112,1.808076769292283,1.808516593362655,1.8089564174330268,1.8093962415033986,1.8098360655737704,1.8102758896441424,1.8107157137145142,1.811155537784886,1.8115953618552578,1.8120351859256298,1.8124750099960016,1.8129148340663734,1.8133546581367452,1.8137944822071173,1.814234306277489,1.8146741303478608,1.8151139544182326,1.8155537784886047,1.8159936025589765,1.8164334266293483,1.81687325069972,1.817313074770092,1.8177528988404639,1.8181927229108357,1.8186325469812075,1.8190723710515793,1.8195121951219513,1.819952019192323,1.8203918432626949,1.8208316673330667,1.8212714914034387,1.8217113154738105,1.8221511395441823,1.822590963614554,1.823030787684926,1.823470611755298,1.8239104358256697,1.8243502598960415,1.8247900839664135,1.8252299080367853,1.825669732107157,1.826109556177529,1.826549380247901,1.8269892043182727,1.8274290283886445,1.8278688524590163,1.8283086765293883,1.8287485005997601,1.829188324670132,1.8296281487405037,1.8300679728108757,1.8305077968812475,1.8309476209516193,1.8313874450219911,1.8318272690923632,1.832267093162735,1.8327069172331067,1.8331467413034785,1.8335865653738506,1.8340263894442224,1.8344662135145942,1.834906037584966,1.835345861655338,1.8357856857257098,1.8362255097960816,1.8366653338664534,1.8371051579368252,1.8375449820071972,1.837984806077569,1.8384246301479408,1.8388644542183126,1.8393042782886846,1.8397441023590564,1.8401839264294282,1.8406237504998,1.841063574570172,1.8415033986405438,1.8419432227109156,1.8423830467812874,1.8428228708516594,1.8432626949220312,1.843702518992403,1.8441423430627748,1.8445821671331468,1.8450219912035186,1.8454618152738904,1.8459016393442622,1.8463414634146342,1.846781287485006,1.8472211115553778,1.8476609356257496,1.8481007596961216,1.8485405837664934,1.8489804078368652,1.849420231907237,1.849860055977609,1.8502998800479808,1.8507397041183526,1.8511795281887244,1.8516193522590965,1.8520591763294683,1.85249900039984,1.8529388244702119,1.8533786485405839,1.8538184726109557,1.8542582966813275,1.8546981207516993,1.855137944822071,1.855577768892443,1.8560175929628149,1.8564574170331867,1.8568972411035585,1.8573370651739305,1.8577768892443023,1.858216713314674,1.8586565373850459,1.859096361455418,1.8595361855257897,1.8599760095961615,1.8604158336665333,1.8608556577369053,1.861295481807277,1.861735305877649,1.8621751299480207,1.8626149540183927,1.8630547780887645,1.8634946021591363,1.8639344262295081,1.8643742502998801,1.864814074370252,1.8652538984406237,1.8656937225109955,1.8661335465813675,1.8665733706517393,1.8670131947221111,1.867453018792483,1.867892842862855,1.8683326669332267,1.8687724910035985,1.8692123150739703,1.8696521391443424,1.8700919632147142,1.870531787285086,1.8709716113554578,1.8714114354258298,1.8718512594962016,1.8722910835665734,1.8727309076369452,1.8731707317073172,1.873610555777689,1.8740503798480608,1.8744902039184326,1.8749300279888044,1.8753698520591764,1.8758096761295482,1.87624950019992,1.8766893242702918,1.8771291483406638,1.8775689724110356,1.8780087964814074,1.8784486205517792,1.8788884446221512,1.879328268692523,1.8797680927628948,1.8802079168332666,1.8806477409036386,1.8810875649740104,1.8815273890443822,1.881967213114754,1.882407037185126,1.8828468612554978,1.8832866853258696,1.8837265093962414,1.8841663334666134,1.8846061575369852,1.885045981607357,1.8854858056777288,1.8859256297481009,1.8863654538184726,1.8868052778888444,1.8872451019592162,1.8876849260295883,1.88812475009996,1.8885645741703319,1.8890043982407037,1.8894442223110757,1.8898840463814475,1.8903238704518193,1.890763694522191,1.891203518592563,1.8916433426629349,1.8920831667333067,1.8925229908036785,1.8929628148740503,1.8934026389444223,1.893842463014794,1.8942822870851659,1.8947221111555377,1.8951619352259097,1.8956017592962815,1.8960415833666533,1.896481407437025,1.896921231507397,1.897361055577769,1.8978008796481407,1.8982407037185125,1.8986805277888845,1.8991203518592563,1.8995601759296281,1.9,1.900439824070372,1.9008796481407437,1.9013194722111155,1.9017592962814873,1.9021991203518593,1.9026389444222311,1.903078768492603,1.9035185925629747,1.9039584166333468,1.9043982407037185,1.9048380647740903,1.9052778888444621,1.9057177129148342,1.906157536985206,1.9065973610555778,1.9070371851259496,1.9074770091963216,1.9079168332666934,1.9083566573370652,1.908796481407437,1.909236305477809,1.9096761295481808,1.9101159536185526,1.9105557776889244,1.9109956017592964,1.9114354258296682,1.91187524990004,1.9123150739704118,1.9127548980407836,1.9131947221111556,1.9136345461815274,1.9140743702518992,1.914514194322271,1.914954018392643,1.9153938424630148,1.9158336665333866,1.9162734906037584,1.9167133146741304,1.9171531387445022,1.917592962814874,1.9180327868852458,1.9184726109556178,1.9189124350259896,1.9193522590963614,1.9197920831667332,1.9202319072371052,1.920671731307477,1.9211115553778488,1.9215513794482206,1.9219912035185927,1.9224310275889644,1.9228708516593362,1.923310675729708,1.92375049980008,1.9241903238704519,1.9246301479408237,1.9250699720111955,1.9255097960815675,1.9259496201519393,1.926389444222311,1.9268292682926829,1.9272690923630549,1.9277089164334267,1.9281487405037985,1.9285885645741703,1.9290283886445423,1.929468212714914,1.9299080367852859,1.9303478608556577,1.9307876849260295,1.9312275089964015,1.9316673330667733,1.932107157137145,1.932546981207517,1.932986805277889,1.9334266293482607,1.9338664534186325,1.9343062774890043,1.9347461015593763,1.9351859256297481,1.93562574970012,1.9360655737704917,1.9365053978408637,1.9369452219112355,1.9373850459816073,1.9378248700519791,1.9382646941223511,1.938704518192723,1.9391443422630947,1.9395841663334665,1.9400239904038385,1.9404638144742103,1.9409036385445821,1.941343462614954,1.941783286685326,1.9422231107556978,1.9426629348260696,1.9431027588964414,1.9435425829668134,1.9439824070371852,1.944422231107557,1.9448620551779288,1.9453018792483008,1.9457417033186726,1.9461815273890444,1.9466213514594162,1.9470611755297882,1.94750099960016,1.9479408236705318,1.9483806477409036,1.9488204718112754,1.9492602958816474,1.9497001199520192,1.950139944022391,1.9505797680927628,1.9510195921631348,1.9514594162335066,1.9518992403038784,1.9523390643742502,1.9527788884446222,1.953218712514994,1.9536585365853658,1.9540983606557376,1.9545381847261096,1.9549780087964814,1.9554178328668532,1.955857656937225,1.956297481007597,1.9567373050779688,1.9571771291483406,1.9576169532187124,1.9580567772890844,1.9584966013594562,1.958936425429828,1.9593762495001998,1.9598160735705719,1.9602558976409437,1.9606957217113155,1.9611355457816873,1.9615753698520593,1.962015193922431,1.9624550179928029,1.9628948420631747,1.9633346661335467,1.9637744902039185,1.9642143142742903,1.964654138344662,1.965093962415034,1.9655337864854059,1.9659736105557777,1.9664134346261495,1.9668532586965215,1.9672930827668933,1.967732906837265,1.968172730907637,1.9686125549780087,1.9690523790483807,1.9694922031187525,1.9699320271891243,1.970371851259496,1.9708116753298681,1.97125149940024,1.9716913234706117,1.9721311475409835,1.9725709716113555,1.9730107956817273,1.9734506197520991,1.973890443822471,1.974330267892843,1.9747700919632147,1.9752099160335865,1.9756497401039583,1.9760895641743303,1.9765293882447021,1.976969212315074,1.9774090363854457,1.9778488604558178,1.9782886845261896,1.9787285085965614,1.9791683326669331,1.9796081567373052,1.980047980807677,1.9804878048780488,1.9809276289484206,1.9813674530187926,1.9818072770891644,1.9822471011595362,1.982686925229908,1.98312674930028,1.9835665733706518,1.9840063974410236,1.9844462215113954,1.9848860455817674,1.9853258696521392,1.985765693722511,1.9862055177928828,1.9866453418632546,1.9870851659336266,1.9875249900039984,1.9879648140743702,1.988404638144742,1.988844462215114,1.9892842862854858,1.9897241103558576,1.9901639344262294,1.9906037584966014,1.9910435825669732,1.991483406637345,1.9919232307077168,1.9923630547780888,1.9928028788484606,1.9932427029188324,1.9936825269892042,1.9941223510595762,1.994562175129948,1.9950019992003198,1.9954418232706916,1.9958816473410637,1.9963214714114355,1.9967612954818073,1.997201119552179,1.997640943622551,1.9980807676929229,1.9985205917632947,1.9989604158336665,1.9994002399040385,1.9998400639744103,2.000279888044782,2.000719712115154,2.0011595361855257,2.0015993602558977,2.0020391843262697,2.0024790083966413,2.0029188324670133,2.003358656537385,2.003798480607757,2.004238304678129,2.0046781287485005,2.0051179528188725,2.005557776889244,2.005997600959616,2.006437425029988,2.0068772491003597,2.0073170731707317,2.0077568972411037,2.0081967213114753,2.0086365453818473,2.009076369452219,2.009516193522591,2.009956017592963,2.0103958416633345,2.0108356657337065,2.0112754898040786,2.01171531387445,2.012155137944822,2.0125949620151937,2.0130347860855657,2.0134746101559378,2.0139144342263093,2.0143542582966814,2.0147940823670534,2.015233906437425,2.015673730507797,2.0161135545781685,2.0165533786485406,2.0169932027189126,2.017433026789284,2.017872850859656,2.018312674930028,2.0187524990003998,2.019192323070772,2.0196321471411434,2.0200719712115154,2.0205117952818874,2.020951619352259,2.021391443422631,2.021831267493003,2.0222710915633746,2.0227109156337466,2.023150739704118,2.02359056377449,2.0240303878448622,2.024470211915234,2.024910035985606,2.0253498600559774,2.0257896841263494,2.0262295081967214,2.026669332267093,2.027109156337465,2.027548980407837,2.0279888044782086,2.0284286285485806,2.028868452618952,2.0293082766893242,2.0297481007596962,2.030187924830068,2.03062774890044,2.031067572970812,2.0315073970411834,2.0319472211115555,2.032387045181927,2.032826869252299,2.033266693322671,2.0337065173930426,2.0341463414634147,2.0345861655337867,2.0350259896041583,2.0354658136745303,2.035905637744902,2.036345461815274,2.036785285885646,2.0372251099560175,2.0376649340263895,2.0381047580967615,2.038544582167133,2.038984406237505,2.0394242303078767,2.0398640543782487,2.0403038784486207,2.0407437025189923,2.0411835265893643,2.0416233506597363,2.042063174730108,2.04250299880048,2.0429428228708515,2.0433826469412235,2.0438224710115955,2.044262295081967,2.044702119152339,2.0451419432227107,2.0455817672930827,2.0460215913634547,2.0464614154338263,2.0469012395041983,2.0473410635745704,2.047780887644942,2.048220711715314,2.0486605357856855,2.0491003598560575,2.0495401839264296,2.049980007996801,2.050419832067173,2.050859656137545,2.0512994802079167,2.0517393042782888,2.0521791283486603,2.0526189524190324,2.0530587764894044,2.053498600559776,2.053938424630148,2.05437824870052,2.0548180727708916,2.0552578968412636,2.055697720911635,2.056137544982007,2.056577369052379,2.0570171931227508,2.057457017193123,2.057896841263495,2.0583366653338664,2.0587764894042384,2.05921631347461,2.059656137544982,2.060095961615354,2.0605357856857256,2.0609756097560976,2.0614154338264696,2.061855257896841,2.0622950819672132,2.062734906037585,2.063174730107957,2.063614554178329,2.0640543782487004,2.0644942023190724,2.064934026389444,2.065373850459816,2.065813674530188,2.0662534986005596,2.0666933226709316,2.0671331467413037,2.0675729708116752,2.0680127948820473,2.068452618952419,2.068892443022791,2.069332267093163,2.0697720911635344,2.0702119152339065,2.0706517393042785,2.07109156337465,2.071531387445022,2.0719712115153937,2.0724110355857657,2.0728508596561377,2.0732906837265093,2.0737305077968813,2.0741703318672533,2.074610155937625,2.075049980007997,2.0754898040783685,2.0759296281487405,2.0763694522191125,2.076809276289484,2.077249100359856,2.077688924430228,2.0781287485005997,2.0785685725709717,2.0790083966413433,2.0794482207117153,2.0798880447820873,2.080327868852459,2.080767692922831,2.0812075169932025,2.0816473410635745,2.0820871651339465,2.082526989204318,2.08296681327469,2.083406637345062,2.0838464614154337,2.0842862854858057,2.0847261095561773,2.0851659336265493,2.0856057576969214,2.086045581767293,2.086485405837665,2.086925229908037,2.0873650539784085,2.0878048780487806,2.088244702119152,2.088684526189524,2.089124350259896,2.0895641743302678,2.0900039984006398,2.090443822471012,2.0908836465413834,2.0913234706117554,2.091763294682127,2.092203118752499,2.092642942822871,2.0930827668932426,2.0935225909636146,2.0939624150339866,2.094402239104358,2.09484206317473,2.095281887245102,2.095721711315474,2.096161535385846,2.0966013594562174,2.0970411835265894,2.0974810075969614,2.097920831667333,2.098360655737705,2.0988004798080766,2.0992403038784486,2.0996801279488206,2.100119952019192,2.1005597760895642,2.100999600159936,2.101439424230308,2.10187924830068,2.1023190723710514,2.1027588964414234,2.1031987205117955,2.103638544582167,2.104078368652539,2.1045181927229106,2.1049580167932826,2.1053978408636547,2.1058376649340262,2.1062774890043983,2.1067173130747703,2.107157137145142,2.107596961215514,2.1080367852858855,2.1084766093562575,2.1089164334266295,2.109356257497001,2.109796081567373,2.110235905637745,2.1106757297081167,2.1111155537784887,2.1115553778488603,2.1119952019192323,2.1124350259896043,2.112874850059976,2.113314674130348,2.11375449820072,2.1141943222710915,2.1146341463414635,2.115073970411835,2.115513794482207,2.115953618552579,2.1163934426229507,2.1168332666933227,2.1172730907636947,2.1177129148340663,2.1181527389044383,2.11859256297481,2.119032387045182,2.119472211115554,2.1199120351859255,2.1203518592562975,2.120791683326669,2.121231507397041,2.121671331467413,2.1221111555377847,2.1225509796081568,2.1229908036785288,2.1234306277489003,2.1238704518192724,2.124310275889644,2.124750099960016,2.125189924030388,2.1256297481007596,2.1260695721711316,2.1265093962415036,2.126949220311875,2.127389044382247,2.1278288684526188,2.128268692522991,2.128708516593363,2.1291483406637344,2.1295881647341064,2.1300279888044784,2.13046781287485,2.130907636945222,2.1313474610155936,2.1317872850859656,2.1322271091563376,2.132666933226709,2.133106757297081,2.1335465813674532,2.133986405437825,2.134426229508197,2.1348660535785684,2.1353058776489404,2.1357457017193124,2.136185525789684,2.136625349860056,2.1370651739304276,2.1375049980007996,2.1379448220711716,2.138384646141543,2.1388244702119152,2.1392642942822873,2.139704118352659,2.140143942423031,2.1405837664934024,2.1410235905637744,2.1414634146341465,2.141903238704518,2.14234306277489,2.142782886845262,2.1432227109156337,2.1436625349860057,2.1441023590563772,2.1445421831267493,2.1449820071971213,2.145421831267493,2.145861655337865,2.146301479408237,2.1467413034786085,2.1471811275489805,2.147620951619352,2.148060775689724,2.148500599760096,2.1489404238304677,2.1493802479008397,2.1498200719712117,2.1502598960415833,2.1506997201119553,2.151139544182327,2.151579368252699,2.152019192323071,2.1524590163934425,2.1528988404638145,2.1533386645341865,2.153778488604558,2.15421831267493,2.1546581367453017,2.1550979608156737,2.1555377848860457,2.1559776089564173,2.1564174330267893,2.156857257097161,2.157297081167533,2.157736905237905,2.1581767293082765,2.1586165533786486,2.1590563774490206,2.159496201519392,2.159936025589764,2.1603758496601357,2.1608156737305078,2.1612554978008798,2.1616953218712514,2.1621351459416234,2.1625749700119954,2.163014794082367,2.163454618152739,2.1638944422231106,2.1643342662934826,2.1647740903638546,2.165213914434226,2.165653738504598,2.16609356257497,2.166533386645342,2.166973210715714,2.1674130347860854,2.1678528588564574,2.1682926829268294,2.168732506997201,2.169172331067573,2.169612155137945,2.1700519792083166,2.1704918032786886,2.17093162734906,2.171371451419432,2.1718112754898042,2.172251099560176,2.172690923630548,2.17313074770092,2.1735705717712914,2.1740103958416634,2.174450219912035,2.174890043982407,2.175329868052779,2.1757696921231506,2.1762095161935227,2.1766493402638942,2.1770891643342662,2.1775289884046383,2.17796881247501,2.178408636545382,2.178848460615754,2.1792882846861255,2.1797281087564975,2.180167932826869,2.180607756897241,2.181047580967613,2.1814874050379847,2.1819272291083567,2.1823670531787287,2.1828068772491003,2.1832467013194723,2.183686525389844,2.184126349460216,2.184566173530588,2.1850059976009595,2.1854458216713315,2.1858856457417035,2.186325469812075,2.186765293882447,2.1872051179528187,2.1876449420231907,2.1880847660935627,2.1885245901639343,2.1889644142343063,2.1894042383046783,2.18984406237505,2.190283886445422,2.1907237105157935,2.1911635345861655,2.1916033586565375,2.192043182726909,2.192483006797281,2.1929228308676527,2.1933626549380247,2.1938024790083968,2.1942423030787683,2.1946821271491403,2.1951219512195124,2.195561775289884,2.196001599360256,2.1964414234306275,2.1968812475009996,2.1973210715713716,2.197760895641743,2.198200719712115,2.198640543782487,2.1990803678528588,2.199520191923231,2.1999600159936024,2.2003998400639744,2.2008396641343464,2.201279488204718,2.20171931227509,2.202159136345462,2.2025989604158336,2.2030387844862056,2.203478608556577,2.203918432626949,2.204358256697321,2.204798080767693,2.205237904838065,2.205677728908437,2.2061175529788084,2.2065573770491804,2.206997201119552,2.207437025189924,2.207876849260296,2.2083166733306676,2.2087564974010396,2.2091963214714117,2.2096361455417832,2.2100759696121552,2.210515793682527,2.210955617752899,2.211395441823271,2.2118352658936424,2.2122750899640145,2.212714914034386,2.213154738104758,2.21359456217513,2.2140343862455016,2.2144742103158737,2.2149140343862457,2.2153538584566173,2.2157936825269893,2.216233506597361,2.216673330667733,2.217113154738105,2.2175529788084765,2.2179928028788485,2.2184326269492205,2.218872451019592,2.219312275089964,2.2197520991603357,2.2201919232307077,2.2206317473010797,2.2210715713714513,2.2215113954418233,2.2219512195121953,2.222391043582567,2.222830867652939,2.2232706917233105,2.2237105157936825,2.2241503398640545,2.224590163934426,2.225029988004798,2.22546981207517,2.2259096361455417,2.2263494602159137,2.2267892842862853,2.2272291083566573,2.2276689324270293,2.228108756497401,2.228548580567773,2.228988404638145,2.2294282287085165,2.2298680527788886,2.23030787684926,2.230747700919632,2.231187524990004,2.2316273490603757,2.2320671731307478,2.2325069972011193,2.2329468212714914,2.2333866453418634,2.233826469412235,2.234266293482607,2.234706117552979,2.2351459416233506,2.2355857656937226,2.236025589764094,2.236465413834466,2.236905237904838,2.2373450619752098,2.237784886045582,2.238224710115954,2.2386645341863254,2.2391043582566974,2.239544182327069,2.239984006397441,2.240423830467813,2.2408636545381846,2.2413034786085566,2.2417433026789286,2.2421831267493,2.2426229508196722,2.243062774890044,2.243502598960416,2.243942423030788,2.2443822471011594,2.2448220711715314,2.2452618952419034,2.245701719312275,2.246141543382647,2.2465813674530186,2.2470211915233906,2.2474610155937627,2.2479008396641342,2.2483406637345063,2.2487804878048783,2.24922031187525,2.249660135945622,2.2500999600159934,2.2505397840863655,2.2509796081567375,2.251419432227109,2.251859256297481,2.2522990803678526,2.2527389044382247,2.2531787285085967,2.2536185525789683,2.2540583766493403,2.2544982007197123,2.254938024790084,2.255377848860456,2.2558176729308275,2.2562574970011995,2.2566973210715715,2.257137145141943,2.257576969212315,2.258016793282687,2.2584566173530587,2.2588964414234307,2.2593362654938023,2.2597760895641743,2.2602159136345463,2.260655737704918,2.26109556177529,2.261535385845662,2.2619752099160335,2.2624150339864055,2.262854858056777,2.263294682127149,2.263734506197521,2.2641743302678927,2.2646141543382647,2.2650539784086368,2.2654938024790083,2.2659336265493804,2.266373450619752,2.266813274690124,2.267253098760496,2.2676929228308675,2.2681327469012396,2.268572570971611,2.269012395041983,2.269452219112355,2.2698920431827267,2.2703318672530988,2.270771691323471,2.2712115153938424,2.2716513394642144,2.272091163534586,2.272530987604958,2.27297081167533,2.2734106357457016,2.2738504598160736,2.2742902838864456,2.274730107956817,2.275169932027189,2.2756097560975608,2.276049580167933,2.276489404238305,2.2769292283086764,2.2773690523790484,2.2778088764494204,2.278248700519792,2.278688524590164,2.2791283486605356,2.2795681727309076,2.2800079968012796,2.280447820871651,2.2808876449420232,2.2813274690123952,2.281767293082767,2.282207117153139,2.2826469412235104,2.2830867652938824,2.2835265893642545,2.283966413434626,2.284406237504998,2.28484606157537,2.2852858856457416,2.2857257097161137,2.2861655337864852,2.2866053578568573,2.2870451819272293,2.287485005997601,2.287924830067973,2.2883646541383444,2.2888044782087165,2.2892443022790885,2.28968412634946,2.290123950419832,2.290563774490204,2.2910035985605757,2.2914434226309477,2.2918832467013193,2.2923230707716913,2.2927628948420633,2.293202718912435,2.293642542982807,2.294082367053179,2.2945221911235505,2.2949620151939225,2.295401839264294,2.295841663334666,2.296281487405038,2.2967213114754097,2.2971611355457817,2.2976009596161537,2.2980407836865253,2.2984806077568973,2.298920431827269,2.299360255897641,2.299800079968013,2.3002399040383845,2.3006797281087565,2.3011195521791286,2.3015593762495,2.301999200319872,2.3024390243902437,2.3028788484606157,2.3033186725309878,2.3037584966013593,2.3041983206717314,2.3046381447421034,2.305077968812475,2.305517792882847,2.3059576169532185,2.3063974410235906,2.3068372650939626,2.307277089164334,2.307716913234706,2.3081567373050778,2.3085965613754498,2.309036385445822,2.3094762095161934,2.3099160335865654,2.3103558576569374,2.310795681727309,2.311235505797681,2.3116753298680526,2.3121151539384246,2.3125549780087966,2.312994802079168,2.31343462614954,2.3138744502199122,2.314314274290284,2.314754098360656,2.3151939224310274,2.3156337465013994,2.3160735705717714,2.316513394642143,2.316953218712515,2.317393042782887,2.3178328668532586,2.3182726909236306,2.318712514994002,2.3191523390643742,2.3195921631347463,2.320031987205118,2.32047181127549,2.320911635345862,2.3213514594162334,2.3217912834866055,2.322231107556977,2.322670931627349,2.323110755697721,2.3235505797680926,2.3239904038384647,2.3244302279088362,2.3248700519792083,2.3253098760495803,2.325749700119952,2.326189524190324,2.326629348260696,2.3270691723310675,2.3275089964014395,2.327948820471811,2.328388644542183,2.328828468612555,2.3292682926829267,2.3297081167532987,2.3301479408236707,2.3305877648940423,2.3310275889644143,2.331467413034786,2.331907237105158,2.33234706117553,2.3327868852459015,2.3332267093162735,2.3336665333866455,2.334106357457017,2.334546181527389,2.3349860055977607,2.3354258296681327,2.3358656537385047,2.3363054778088763,2.3367453018792483,2.3371851259496204,2.337624950019992,2.338064774090364,2.3385045981607355,2.3389444222311075,2.3393842463014796,2.339824070371851,2.340263894442223,2.340703718512595,2.3411435425829668,2.3415833666533388,2.3420231907237103,2.3424630147940824,2.3429028388644544,2.343342662934826,2.343782487005198,2.3442223110755696,2.3446621351459416,2.3451019592163136,2.345541783286685,2.345981607357057,2.346421431427429,2.346861255497801,2.347301079568173,2.3477409036385444,2.3481807277089164,2.3486205517792884,2.34906037584966,2.349500199920032,2.349940023990404,2.3503798480607756,2.3508196721311476,2.351259496201519,2.351699320271891,2.3521391443422632,2.352578968412635,2.353018792483007,2.353458616553379,2.3538984406237504,2.3543382646941224,2.354778088764494,2.355217912834866,2.355657736905238,2.3560975609756096,2.3565373850459816,2.3569772091163537,2.3574170331867252,2.3578568572570973,2.358296681327469,2.358736505397841,2.359176329468213,2.3596161535385844,2.3600559776089565,2.3604958016793285,2.3609356257497,2.361375449820072,2.3618152738904437,2.3622550979608157,2.3626949220311877,2.3631347461015593,2.3635745701719313,2.364014394242303,2.364454218312675,2.364894042383047,2.3653338664534185,2.3657736905237905,2.3662135145941625,2.366653338664534,2.367093162734906,2.3675329868052777,2.3679728108756497,2.3684126349460217,2.3688524590163933,2.3692922830867653,2.3697321071571373,2.370171931227509,2.370611755297881,2.3710515793682525,2.3714914034386245,2.3719312275089965,2.372371051579368,2.37281087564974,2.373250699720112,2.3736905237904837,2.3741303478608557,2.3745701719312273,2.3750099960015993,2.3754498200719714,2.375889644142343,2.376329468212715,2.376769292283087,2.3772091163534586,2.3776489404238306,2.378088764494202,2.378528588564574,2.378968412634946,2.3794082367053178,2.3798480607756898,2.380287884846062,2.3807277089164334,2.3811675329868054,2.381607357057177,2.382047181127549,2.382487005197921,2.3829268292682926,2.3833666533386646,2.383806477409036,2.384246301479408,2.38468612554978,2.385125949620152,2.385565773690524,2.386005597760896,2.3864454218312674,2.3868852459016394,2.387325069972011,2.387764894042383,2.388204718112755,2.3886445421831266,2.3890843662534986,2.3895241903238706,2.389964014394242,2.3904038384646142,2.390843662534986,2.391283486605358,2.39172331067573,2.3921631347461014,2.3926029588164734,2.3930427828868455,2.393482606957217,2.393922431027589,2.3943622550979606,2.3948020791683327,2.3952419032387047,2.3956817273090762,2.3961215513794483,2.3965613754498203,2.397001199520192,2.397441023590564,2.3978808476609355,2.3983206717313075,2.3987604958016795,2.399200319872051,2.399640143942423,2.4000799680127947,2.4005197920831667,2.4009596161535387,2.4013994402239103,2.4018392642942823,2.4022790883646543,2.402718912435026,2.403158736505398,2.4035985605757695,2.4040383846461415,2.4044782087165135,2.404918032786885,2.405357856857257,2.405797680927629,2.4062375049980007,2.4066773290683727,2.4071171531387443,2.4075569772091163,2.4079968012794883,2.40843662534986,2.408876449420232,2.409316273490604,2.4097560975609755,2.4101959216313475,2.410635745701719,2.411075569772091,2.411515393842463,2.4119552179128347,2.4123950419832068,2.4128348660535788,2.4132746901239504,2.4137145141943224,2.414154338264694,2.414594162335066,2.415033986405438,2.4154738104758096,2.4159136345461816,2.4163534586165536,2.416793282686925,2.417233106757297,2.4176729308276688,2.418112754898041,2.418552578968413,2.4189924030387844,2.4194322271091564,2.419872051179528,2.4203118752499,2.420751699320272,2.4211915233906436,2.4216313474610156,2.4220711715313876,2.422510995601759,2.422950819672131,2.423390643742503,2.423830467812875,2.424270291883247,2.4247101159536184,2.4251499400239904,2.4255897640943624,2.426029588164734,2.426469412235106,2.4269092363054776,2.4273490603758496,2.4277888844462217,2.4282287085165932,2.4286685325869652,2.4291083566573373,2.429548180727709,2.429988004798081,2.4304278288684524,2.4308676529388245,2.4313074770091965,2.431747301079568,2.43218712514994,2.432626949220312,2.4330667732906837,2.4335065973610557,2.4339464214314273,2.4343862455017993,2.4348260695721713,2.435265893642543,2.435705717712915,2.436145541783287,2.4365853658536585,2.4370251899240305,2.437465013994402,2.437904838064774,2.438344662135146,2.4387844862055177,2.4392243102758897,2.4396641343462613,2.4401039584166333,2.4405437824870053,2.440983606557377,2.441423430627749,2.441863254698121,2.4423030787684925,2.4427429028388645,2.443182726909236,2.443622550979608,2.44406237504998,2.4445021991203517,2.4449420231907237,2.4453818472610958,2.4458216713314673,2.4462614954018393,2.446701319472211,2.447141143542583,2.447580967612955,2.4480207916833265,2.4484606157536986,2.4489004398240706,2.449340263894442,2.449780087964814,2.4502199120351857,2.4506597361055578,2.45109956017593,2.4515393842463014,2.4519792083166734,2.4524190323870454,2.452858856457417,2.453298680527789,2.4537385045981606,2.4541783286685326,2.4546181527389046,2.455057976809276,2.455497800879648,2.4559376249500198,2.456377449020392,2.456817273090764,2.4572570971611354,2.4576969212315074,2.4581367453018794,2.458576569372251,2.459016393442623,2.4594562175129946,2.4598960415833666,2.4603358656537386,2.46077568972411,2.4612155137944822,2.4616553378648542,2.462095161935226,2.462534986005598,2.4629748100759694,2.4634146341463414,2.4638544582167135,2.464294282287085,2.464734106357457,2.465173930427829,2.4656137544982006,2.4660535785685727,2.4664934026389442,2.4669332267093163,2.4673730507796883,2.46781287485006,2.468252698920432,2.468692522990804,2.4691323470611755,2.4695721711315475,2.470011995201919,2.470451819272291,2.470891643342663,2.4713314674130347,2.4717712914834067,2.4722111155537787,2.4726509396241503,2.4730907636945223,2.473530587764894,2.473970411835266,2.474410235905638,2.4748500599760095,2.4752898840463815,2.475729708116753,2.476169532187125,2.476609356257497,2.4770491803278687,2.4774890043982407,2.4779288284686127,2.4783686525389843,2.4788084766093563,2.479248300679728,2.4796881247501,2.480127948820472,2.4805677728908435,2.4810075969612155,2.4814474210315876,2.481887245101959,2.482327069172331,2.4827668932427027,2.4832067173130747,2.4836465413834468,2.4840863654538183,2.4845261895241904,2.4849660135945624,2.485405837664934,2.485845661735306,2.4862854858056775,2.4867253098760496,2.4871651339464216,2.487604958016793,2.488044782087165,2.488484606157537,2.4889244302279088,2.489364254298281,2.4898040783686524,2.4902439024390244,2.4906837265093964,2.491123550579768,2.49156337465014,2.492003198720512,2.4924430227908836,2.4928828468612556,2.493322670931627,2.493762495001999,2.494202319072371,2.494642143142743,2.495081967213115,2.4955217912834864,2.4959616153538584,2.4964014394242304,2.496841263494602,2.497281087564974,2.497720911635346,2.4981607357057176,2.4986005597760896,2.499040383846461,2.4994802079168332,2.4999200319872052,2.500359856057577,2.500799680127949,2.501239504198321,2.5016793282686924,2.5021191523390645,2.502558976409436,2.502998800479808,2.50343862455018,2.5038784486205516,2.5043182726909237,2.5047580967612957,2.5051979208316673,2.5056377449020393,2.506077568972411,2.506517393042783,2.506957217113155,2.5073970411835265,2.5078368652538985,2.5082766893242705,2.508716513394642,2.509156337465014,2.5095961615353857,2.5100359856057577,2.5104758096761297,2.5109156337465013,2.5113554578168733,2.5117952818872453,2.512235105957617,2.512674930027989,2.5131147540983605,2.5135545781687325,2.5139944022391045,2.514434226309476,2.514874050379848,2.5153138744502197,2.5157536985205917,2.5161935225909637,2.5166333466613353,2.5170731707317073,2.5175129948020794,2.517952818872451,2.518392642942823,2.5188324670131945,2.5192722910835665,2.5197121151539386,2.52015193922431,2.520591763294682,2.521031587365054,2.5214714114354257,2.5219112355057978,2.5223510595761693,2.5227908836465414,2.5232307077169134,2.523670531787285,2.524110355857657,2.524550179928029,2.5249900039984006,2.5254298280687726,2.525869652139144,2.526309476209516,2.526749300279888,2.5271891243502598,2.527628948420632,2.528068772491004,2.5285085965613754,2.5289484206317474,2.529388244702119,2.529828068772491,2.530267892842863,2.5307077169132346,2.5311475409836066,2.531587365053978,2.53202718912435,2.5324670131947222,2.532906837265094,2.533346661335466,2.533786485405838,2.5342263094762094,2.5346661335465814,2.535105957616953,2.535545781687325,2.535985605757697,2.5364254298280686,2.5368652538984406,2.5373050779688127,2.5377449020391842,2.5381847261095563,2.538624550179928,2.5390643742503,2.539504198320672,2.5399440223910434,2.5403838464614155,2.5408236705317875,2.541263494602159,2.541703318672531,2.5421431427429027,2.5425829668132747,2.5430227908836467,2.5434626149540183,2.5439024390243903,2.5443422630947623,2.544782087165134,2.545221911235506,2.5456617353058775,2.5461015593762495,2.5465413834466215,2.546981207516993,2.547421031587365,2.547860855657737,2.5483006797281087,2.5487405037984807,2.5491803278688523,2.5496201519392243,2.5500599760095963,2.550499800079968,2.55093962415034,2.5513794482207115,2.5518192722910835,2.5522590963614555,2.552698920431827,2.553138744502199,2.553578568572571,2.5540183926429427,2.5544582167133147,2.5548980407836863,2.5553378648540583,2.5557776889244304,2.556217512994802,2.556657337065174,2.557097161135546,2.5575369852059175,2.5579768092762896,2.558416633346661,2.558856457417033,2.559296281487405,2.5597361055577768,2.5601759296281488,2.560615753698521,2.5610555777688924,2.5614954018392644,2.561935225909636,2.562375049980008,2.56281487405038,2.5632546981207516,2.5636945221911236,2.5641343462614956,2.564574170331867,2.565013994402239,2.565453818472611,2.565893642542983,2.566333466613355,2.5667732906837264,2.5672131147540984,2.5676529388244704,2.568092762894842,2.568532586965214,2.5689724110355856,2.5694122351059576,2.5698520591763296,2.570291883246701,2.5707317073170732,2.571171531387445,2.571611355457817,2.572051179528189,2.5724910035985604,2.5729308276689324,2.5733706517393045,2.573810475809676,2.574250299880048,2.5746901239504196,2.5751299480207916,2.5755697720911637,2.5760095961615352,2.5764494202319073,2.5768892443022793,2.577329068372651,2.577768892443023,2.5782087165133944,2.5786485405837665,2.5790883646541385,2.57952818872451,2.579968012794882,2.580407836865254,2.5808476609356257,2.5812874850059977,2.5817273090763693,2.5821671331467413,2.5826069572171133,2.583046781287485,2.583486605357857,2.583926429428229,2.5843662534986005,2.5848060775689725,2.585245901639344,2.585685725709716,2.586125549780088,2.5865653738504597,2.5870051979208317,2.5874450219912033,2.5878848460615753,2.5883246701319473,2.588764494202319,2.589204318272691,2.589644142343063,2.5900839664134345,2.5905237904838065,2.590963614554178,2.59140343862455,2.591843262694922,2.5922830867652937,2.5927229108356658,2.5931627349060378,2.5936025589764093,2.5940423830467814,2.594482207117153,2.594922031187525,2.595361855257897,2.5958016793282686,2.5962415033986406,2.5966813274690126,2.597121151539384,2.597560975609756,2.5980007996801278,2.5984406237505,2.598880447820872,2.5993202718912434,2.5997600959616154,2.6001999200319874,2.600639744102359,2.601079568172731,2.6015193922431026,2.6019592163134746,2.6023990403838466,2.602838864454218,2.60327868852459,2.6037185125949622,2.604158336665334,2.604598160735706,2.6050379848060774,2.6054778088764494,2.6059176329468214,2.606357457017193,2.606797281087565,2.6072371051579366,2.6076769292283086,2.6081167532986806,2.608556577369052,2.6089964014394242,2.6094362255097963,2.609876049580168,2.61031587365054,2.6107556977209114,2.6111955217912834,2.6116353458616555,2.612075169932027,2.612514994002399,2.612954818072771,2.6133946421431427,2.6138344662135147,2.6142742902838862,2.6147141143542583,2.6151539384246303,2.615593762495002,2.616033586565374,2.616473410635746,2.6169132347061175,2.6173530587764895,2.617792882846861,2.618232706917233,2.618672530987605,2.6191123550579767,2.6195521791283487,2.6199920031987207,2.6204318272690923,2.6208716513394643,2.621311475409836,2.621751299480208,2.62219112355058,2.6226309476209515,2.6230707716913235,2.6235105957616955,2.623950419832067,2.624390243902439,2.6248300679728107,2.6252698920431827,2.6257097161135547,2.6261495401839263,2.6265893642542983,2.62702918832467,2.627469012395042,2.627908836465414,2.6283486605357855,2.6287884846061575,2.6292283086765296,2.629668132746901,2.630107956817273,2.6305477808876447,2.6309876049580168,2.6314274290283888,2.6318672530987604,2.6323070771691324,2.6327469012395044,2.633186725309876,2.633626549380248,2.6340663734506196,2.6345061975209916,2.6349460215913636,2.635385845661735,2.635825669732107,2.636265493802479,2.636705317872851,2.637145141943223,2.6375849660135944,2.6380247900839664,2.6384646141543384,2.63890443822471,2.639344262295082,2.639784086365454,2.6402239104358256,2.6406637345061976,2.641103558576569,2.641543382646941,2.6419832067173132,2.642423030787685,2.642862854858057,2.643302678928429,2.6437425029988004,2.6441823270691724,2.644622151139544,2.645061975209916,2.645501799280288,2.6459416233506596,2.6463814474210317,2.6468212714914032,2.6472610955617752,2.6477009196321473,2.648140743702519,2.648580567772891,2.649020391843263,2.6494602159136345,2.6499000399840065,2.650339864054378,2.65077968812475,2.651219512195122,2.6516593362654937,2.6520991603358657,2.6525389844062377,2.6529788084766093,2.6534186325469813,2.653858456617353,2.654298280687725,2.654738104758097,2.6551779288284685,2.6556177528988405,2.6560575769692125,2.656497401039584,2.656937225109956,2.6573770491803277,2.6578168732506997,2.6582566973210717,2.6586965213914433,2.6591363454618153,2.6595761695321873,2.660015993602559,2.660455817672931,2.6608956417433025,2.6613354658136745,2.6617752898840465,2.662215113954418,2.66265493802479,2.6630947620951617,2.6635345861655337,2.6639744102359058,2.6644142343062773,2.6648540583766493,2.6652938824470214,2.665733706517393,2.666173530587765,2.6666133546581365,2.6670531787285086,2.6674930027988806,2.667932826869252,2.668372650939624,2.668812475009996,2.6692522990803678,2.66969212315074,2.6701319472211114,2.6705717712914834,2.6710115953618554,2.671451419432227,2.671891243502599,2.672331067572971,2.6727708916433426,2.6732107157137146,2.673650539784086,2.674090363854458,2.67453018792483,2.674970011995202,2.675409836065574,2.675849660135946,2.6762894842063174,2.6767293082766894,2.677169132347061,2.677608956417433,2.678048780487805,2.6784886045581766,2.6789284286285486,2.6793682526989206,2.6798080767692922,2.6802479008396642,2.680687724910036,2.681127548980408,2.68156737305078,2.6820071971211514,2.6824470211915235,2.682886845261895,2.683326669332267,2.683766493402639,2.6842063174730106,2.6846461415433827,2.6850859656137547,2.6855257896841263,2.6859656137544983,2.68640543782487,2.686845261895242,2.687285085965614,2.6877249100359855,2.6881647341063575,2.6886045581767295,2.689044382247101,2.689484206317473,2.6899240303878447,2.6903638544582167,2.6908036785285887,2.6912435025989603,2.6916833266693323,2.6921231507397043,2.692562974810076,2.693002798880448,2.6934426229508195,2.6938824470211915,2.6943222710915635,2.694762095161935,2.695201919232307,2.695641743302679,2.6960815673730507,2.6965213914434227,2.6969612155137943,2.6974010395841663,2.6978408636545383,2.69828068772491,2.698720511795282,2.699160335865654,2.6996001599360255,2.7000399840063976,2.700479808076769,2.700919632147141,2.701359456217513,2.7017992802878847,2.7022391043582568,2.7026789284286283,2.7031187524990004,2.7035585765693724,2.703998400639744,2.704438224710116,2.704878048780488,2.7053178728508596,2.7057576969212316,2.706197520991603,2.706637345061975,2.707077169132347,2.7075169932027188,2.707956817273091,2.708396641343463,2.7088364654138344,2.7092762894842064,2.709716113554578,2.71015593762495,2.710595761695322,2.7110355857656936,2.7114754098360656,2.7119152339064376,2.712355057976809,2.712794882047181,2.713234706117553,2.713674530187925,2.714114354258297,2.7145541783286684,2.7149940023990404,2.7154338264694124,2.715873650539784,2.716313474610156,2.7167532986805276,2.7171931227508996,2.7176329468212717,2.7180727708916432,2.7185125949620152,2.718952419032387,2.719392243102759,2.719832067173131,2.7202718912435024,2.7207117153138745,2.7211515393842465,2.721591363454618,2.72203118752499,2.7224710115953616,2.7229108356657337,2.7233506597361057,2.7237904838064773,2.7242303078768493,2.7246701319472213,2.725109956017593,2.725549780087965,2.7259896041583365,2.7264294282287085,2.7268692522990805,2.727309076369452,2.727748900439824,2.728188724510196,2.7286285485805677,2.7290683726509397,2.7295081967213113,2.7299480207916833,2.7303878448620553,2.730827668932427,2.731267493002799,2.731707317073171,2.7321471411435425,2.7325869652139145,2.733026789284286,2.733466613354658,2.73390643742503,2.7343462614954017,2.7347860855657737,2.7352259096361458,2.7356657337065173,2.7361055577768894,2.736545381847261,2.736985205917633,2.737425029988005,2.7378648540583765,2.7383046781287486,2.73874450219912,2.739184326269492,2.739624150339864,2.7400639744102357,2.7405037984806078,2.74094362255098,2.7413834466213514,2.7418232706917234,2.742263094762095,2.742702918832467,2.743142742902839,2.7435825669732106,2.7440223910435826,2.7444622151139546,2.744902039184326,2.745341863254698,2.7457816873250698,2.746221511395442,2.746661335465814,2.7471011595361854,2.7475409836065574,2.7479808076769294,2.748420631747301,2.748860455817673,2.7493002798880446,2.7497401039584166,2.7501799280287886,2.75061975209916,2.7510595761695322,2.7514994002399042,2.751939224310276,2.752379048380648,2.7528188724510194,2.7532586965213914,2.7536985205917635,2.754138344662135,2.754578168732507,2.755017992802879,2.7554578168732506,2.7558976409436227,2.7563374650139942,2.7567772890843663,2.7572171131547383,2.75765693722511,2.758096761295482,2.7585365853658534,2.7589764094362255,2.7594162335065975,2.759856057576969,2.760295881647341,2.760735705717713,2.7611755297880847,2.7616153538584567,2.7620551779288283,2.7624950019992003,2.7629348260695723,2.763374650139944,2.763814474210316,2.764254298280688,2.7646941223510595,2.7651339464214315,2.765573770491803,2.766013594562175,2.766453418632547,2.7668932427029187,2.7673330667732907,2.7677728908436627,2.7682127149140343,2.7686525389844063,2.769092363054778,2.76953218712515,2.769972011195522,2.7704118352658935,2.7708516593362655,2.7712914834066376,2.771731307477009,2.772171131547381,2.7726109556177527,2.7730507796881247,2.7734906037584968,2.7739304278288683,2.7743702518992404,2.774810075969612,2.775249900039984,2.775689724110356,2.7761295481807275,2.7765693722510996,2.7770091963214716,2.777449020391843,2.777888844462215,2.7783286685325868,2.7787684926029588,2.779208316673331,2.7796481407437024,2.7800879648140744,2.7805277888844464,2.780967612954818,2.78140743702519,2.7818472610955616,2.7822870851659336,2.7827269092363056,2.783166733306677,2.783606557377049,2.7840463814474212,2.784486205517793,2.784926029588165,2.7853658536585364,2.7858056777289084,2.7862455017992804,2.786685325869652,2.787125149940024,2.787564974010396,2.7880047980807676,2.7884446221511396,2.788884446221511,2.7893242702918832,2.7897640943622553,2.790203918432627,2.790643742502999,2.791083566573371,2.7915233906437424,2.7919632147141145,2.792403038784486,2.792842862854858,2.79328268692523,2.7937225109956016,2.7941623350659737,2.7946021591363452,2.7950419832067173,2.7954818072770893,2.795921631347461,2.796361455417833,2.796801279488205,2.7972411035585765,2.7976809276289485,2.79812075169932,2.798560575769692,2.799000399840064,2.7994402239104357,2.7998800479808077,2.8003198720511797,2.8007596961215513,2.8011995201919233,2.801639344262295,2.802079168332667,2.802518992403039,2.8029588164734105,2.8033986405437825,2.8038384646141545,2.804278288684526,2.804718112754898,2.8051579368252697,2.8055977608956417,2.8060375849660137,2.8064774090363853,2.8069172331067573,2.8073570571771294,2.807796881247501,2.808236705317873,2.8086765293882445,2.8091163534586165,2.8095561775289886,2.80999600159936,2.810435825669732,2.810875649740104,2.8113154738104758,2.8117552978808478,2.8121951219512193,2.8126349460215914,2.8130747700919634,2.813514594162335,2.813954418232707,2.8143942423030786,2.8148340663734506,2.8152738904438226,2.815713714514194,2.816153538584566,2.816593362654938,2.81703318672531,2.817473010795682,2.8179128348660534,2.8183526589364254,2.8187924830067974,2.819232307077169,2.819672131147541,2.820111955217913,2.8205517792882846,2.8209916033586566,2.821431427429028,2.8218712514994,2.8223110755697722,2.822750899640144,2.823190723710516,2.823630547780888,2.8240703718512594,2.8245101959216314,2.824950019992003,2.825389844062375,2.825829668132747,2.8262694922031186,2.8267093162734906,2.8271491403438627,2.8275889644142342,2.8280287884846063,2.828468612554978,2.82890843662535,2.829348260695722,2.8297880847660934,2.8302279088364655,2.8306677329068375,2.831107556977209,2.831547381047581,2.8319872051179527,2.8324270291883247,2.8328668532586967,2.8333066773290683,2.8337465013994403,2.834186325469812,2.834626149540184,2.835065973610556,2.8355057976809275,2.8359456217512995,2.8363854458216715,2.836825269892043,2.837265093962415,2.8377049180327867,2.8381447421031587,2.8385845661735307,2.8390243902439023,2.8394642143142743,2.8399040383846463,2.840343862455018,2.84078368652539,2.8412235105957615,2.8416633346661335,2.8421031587365055,2.842542982806877,2.842982806877249,2.843422630947621,2.8438624550179927,2.8443022790883647,2.8447421031587363,2.8451819272291083,2.8456217512994804,2.846061575369852,2.846501399440224,2.846941223510596,2.8473810475809676,2.8478208716513396,2.848260695721711,2.848700519792083,2.849140343862455,2.8495801679328268,2.8500199920031988,2.8504598160735704,2.8508996401439424,2.8513394642143144,2.851779288284686,2.852219112355058,2.85265893642543,2.8530987604958016,2.8535385845661736,2.853978408636545,2.854418232706917,2.854858056777289,2.855297880847661,2.855737704918033,2.856177528988405,2.8566173530587764,2.8570571771291484,2.85749700119952,2.857936825269892,2.858376649340264,2.8588164734106356,2.8592562974810076,2.8596961215513796,2.860135945621751,2.8605757696921232,2.861015593762495,2.861455417832867,2.861895241903239,2.8623350659736104,2.8627748900439824,2.8632147141143545,2.863654538184726,2.864094362255098,2.8645341863254696,2.8649740103958417,2.8654138344662137,2.8658536585365852,2.8662934826069573,2.8667333066773293,2.867173130747701,2.867612954818073,2.8680527788884445,2.8684926029588165,2.8689324270291885,2.86937225109956,2.869812075169932,2.8702518992403037,2.8706917233106757,2.8711315473810477,2.8715713714514193,2.8720111955217913,2.8724510195921633,2.872890843662535,2.873330667732907,2.8737704918032785,2.8742103158736505,2.8746501399440225,2.875089964014394,2.875529788084766,2.875969612155138,2.8764094362255097,2.8768492602958817,2.8772890843662533,2.8777289084366253,2.8781687325069973,2.878608556577369,2.879048380647741,2.879488204718113,2.8799280287884845,2.8803678528588565,2.880807676929228,2.8812475009996,2.881687325069972,2.8821271491403437,2.8825669732107158,2.8830067972810878,2.8834466213514593,2.8838864454218314,2.884326269492203,2.884766093562575,2.885205917632947,2.8856457417033186,2.8860855657736906,2.8865253898440626,2.886965213914434,2.887405037984806,2.8878448620551778,2.88828468612555,2.888724510195922,2.8891643342662934,2.8896041583366654,2.890043982407037,2.890483806477409,2.890923630547781,2.8913634546181526,2.8918032786885246,2.8922431027588966,2.892682926829268,2.89312275089964,2.893562574970012,2.894002399040384,2.894442223110756,2.8948820471811274,2.8953218712514994,2.8957616953218714,2.896201519392243,2.896641343462615,2.8970811675329866,2.8975209916033586,2.8979608156737307,2.8984006397441022,2.8988404638144742,2.8992802878848463,2.899720111955218,2.90015993602559,2.9005997600959614,2.9010395841663335,2.9014794082367055,2.901919232307077,2.902359056377449,2.902798880447821,2.9032387045181927,2.9036785285885647,2.9041183526589363,2.9045581767293083,2.9049980007996803,2.905437824870052,2.905877648940424,2.9063174730107955,2.9067572970811675,2.9071971211515395,2.907636945221911,2.908076769292283,2.908516593362655,2.9089564174330267,2.9093962415033987,2.9098360655737703,2.9102758896441423,2.9107157137145143,2.911155537784886,2.911595361855258,2.91203518592563,2.9124750099960015,2.9129148340663735,2.913354658136745,2.913794482207117,2.914234306277489,2.9146741303478607,2.9151139544182327,2.9155537784886048,2.9159936025589763,2.9164334266293483,2.91687325069972,2.917313074770092,2.917752898840464,2.9181927229108355,2.9186325469812076,2.9190723710515796,2.919512195121951,2.919952019192323,2.9203918432626947,2.9208316673330668,2.921271491403439,2.9217113154738104,2.9221511395441824,2.9225909636145544,2.923030787684926,2.923470611755298,2.9239104358256696,2.9243502598960416,2.9247900839664136,2.925229908036785,2.925669732107157,2.9261095561775288,2.926549380247901,2.926989204318273,2.9274290283886444,2.9278688524590164,2.9283086765293884,2.92874850059976,2.929188324670132,2.9296281487405036,2.9300679728108756,2.9305077968812476,2.930947620951619,2.9313874450219912,2.9318272690923632,2.932267093162735,2.932706917233107,2.9331467413034784,2.9335865653738504,2.9340263894442224,2.934466213514594,2.934906037584966,2.935345861655338,2.9357856857257096,2.9362255097960817,2.9366653338664532,2.9371051579368253,2.9375449820071973,2.937984806077569,2.938424630147941,2.938864454218313,2.9393042782886845,2.9397441023590565,2.940183926429428,2.9406237504998,2.941063574570172,2.9415033986405437,2.9419432227109157,2.9423830467812877,2.9428228708516593,2.9432626949220313,2.943702518992403,2.944142343062775,2.944582167133147,2.9450219912035185,2.9454618152738905,2.945901639344262,2.946341463414634,2.946781287485006,2.9472211115553777,2.9476609356257497,2.9481007596961217,2.9485405837664933,2.9489804078368653,2.949420231907237,2.949860055977609,2.950299880047981,2.9507397041183525,2.9511795281887245,2.9516193522590966,2.952059176329468,2.95249900039984,2.9529388244702117,2.9533786485405837,2.9538184726109558,2.9542582966813273,2.9546981207516994,2.9551379448220714,2.955577768892443,2.956017592962815,2.9564574170331865,2.9568972411035586,2.9573370651739306,2.957776889244302,2.958216713314674,2.958656537385046,2.9590963614554178,2.95953618552579,2.9599760095961614,2.9604158336665334,2.9608556577369054,2.961295481807277,2.961735305877649,2.962175129948021,2.9626149540183926,2.9630547780887646,2.963494602159136,2.963934426229508,2.96437425029988,2.964814074370252,2.965253898440624,2.9656937225109954,2.9661335465813674,2.9665733706517394,2.967013194722111,2.967453018792483,2.967892842862855,2.9683326669332266,2.9687724910035986,2.96921231507397,2.9696521391443422,2.9700919632147142,2.970531787285086,2.970971611355458,2.97141143542583,2.9718512594962014,2.9722910835665735,2.972730907636945,2.973170731707317,2.973610555777689,2.9740503798480606,2.9744902039184327,2.9749300279888047,2.9753698520591763,2.9758096761295483,2.97624950019992,2.976689324270292,2.977129148340664,2.9775689724110355,2.9780087964814075,2.9784486205517795,2.978888444622151,2.979328268692523,2.9797680927628947,2.9802079168332667,2.9806477409036387,2.9810875649740103,2.9815273890443823,2.981967213114754,2.982407037185126,2.982846861255498,2.9832866853258695,2.9837265093962415,2.9841663334666135,2.984606157536985,2.985045981607357,2.9854858056777287,2.9859256297481007,2.9863654538184727,2.9868052778888443,2.9872451019592163,2.9876849260295884,2.98812475009996,2.988564574170332,2.9890043982407035,2.9894442223110755,2.9898840463814476,2.990323870451819,2.990763694522191,2.991203518592563,2.9916433426629347,2.9920831667333068,2.9925229908036783,2.9929628148740504,2.9934026389444224,2.993842463014794,2.994282287085166,2.994722111155538,2.9951619352259096,2.9956017592962816,2.996041583366653,2.996481407437025,2.996921231507397,2.9973610555777688,2.997800879648141,2.998240703718513,2.9986805277888844,2.9991203518592564,2.999560175929628,3.0]}
},{}],56:[function(require,module,exports){
module.exports={"expected":[10.0,9.921955,9.845709,9.771194,9.698346,9.627104,9.557408,9.489204,9.422441,9.357067,9.293035,9.2303,9.168818,9.108549,9.049453,8.991492,8.934631,8.878836,8.824073,8.77031,8.717519,8.665669,8.614735,8.564687,8.515502,8.4671545,8.419621,8.37288,8.326908,8.281686,8.237192,8.193408,8.150314,8.107894,8.066129,8.0250025,7.9844995,7.944603,7.905299,7.8665724,7.8284097,7.790797,7.753721,7.71717,7.6811304,7.6455913,7.610541,7.5759683,7.5418625,7.508213,7.475011,7.4422445,7.4099054,7.377984,7.3464723,7.31536,7.2846403,7.2543044,7.2243443,7.194752,7.165521,7.1366434,7.108112,7.07992,7.0520606,7.0245275,6.997315,6.9704156,6.9438243,6.917535,6.8915424,6.86584,6.8404236,6.815287,6.790426,6.7658343,6.7415085,6.717443,6.6936336,6.6700754,6.6467643,6.623696,6.600866,6.5782704,6.5559053,6.5337667,6.5118513,6.4901543,6.468673,6.447404,6.426343,6.405487,6.3848333,6.364378,6.3441176,6.32405,6.304171,6.2844787,6.26497,6.245641,6.2264905,6.207515,6.1887116,6.1700783,6.1516123,6.1333113,6.1151724,6.0971937,6.0793724,6.0617065,6.044194,6.0268326,6.009619,5.9925528,5.975631,5.958852,5.942213,5.925713,5.90935,5.8931212,5.8770256,5.861061,5.845226,5.8295183,5.813937,5.79848,5.7831454,5.767932,5.7528377,5.7378616,5.723002,5.7082567,5.6936255,5.6791058,5.6646967,5.650397,5.6362042,5.6221185,5.6081376,5.5942607,5.580486,5.5668125,5.55324,5.5397654,5.5263886,5.5131083,5.4999228,5.486832,5.4738345,5.4609284,5.448113,5.4353876,5.4227514,5.4102025,5.3977404,5.385364,5.3730726,5.3608646,5.3487396,5.336696,5.324734,5.3128524,5.301049,5.2893248,5.2776775,5.266107,5.2546124,5.2431927,5.2318473,5.220575,5.209375,5.198247,5.18719,5.1762033,5.165286,5.1544375,5.143657,5.132944,5.122298,5.111717,5.1012025,5.090752,5.0803657,5.070042,5.0597816,5.0495834,5.0394464,5.0293703,5.0193543,5.0093975,4.9995003,4.989661,4.97988,4.9701567,4.9604893,4.9508786,4.9413233,4.931823,4.9223776,4.9129863,4.9036484,4.8943634,4.885131,4.8759503,4.866822,4.857744,4.848717,4.8397403,4.830813,4.821935,4.8131056,4.8043246,4.795592,4.7869062,4.778268,4.7696757,4.76113,4.7526298,4.7441754,4.735766,4.727401,4.7190795,4.7108026,4.7025685,4.694378,4.6862297,4.678124,4.67006,4.662038,4.6540565,4.6461163,4.6382165,4.6303573,4.622537,4.614757,4.6070156,4.5993133,4.5916495,4.584024,4.576436,4.568886,4.5613728,4.553897,4.5464573,4.5390544,4.5316873,4.5243564,4.5170603,4.5098,4.502574,4.4953833,4.4882264,4.4811034,4.4740148,4.4669595,4.459937,4.452948,4.445992,4.4390683,4.4321766,4.4253173,4.4184895,4.411693,4.404928,4.398194,4.391491,4.384818,4.3781757,4.3715634,4.364981,4.3584285,4.3519053,4.345411,4.338946,4.3325095,4.326102,4.3197227,4.313371,4.307048,4.300752,4.294484,4.2882433,4.2820296,4.2758427,4.269683,4.2635493,4.2574425,4.2513614,4.2453065,4.2392774,4.233274,4.227296,4.221343,4.215415,4.209512,4.2036343,4.1977806,4.1919518,4.1861467,4.1803656,4.1746087,4.168875,4.1631656,4.1574793,4.151816,4.146176,4.1405587,4.1349645,4.129393,4.1238437,4.1183167,4.112812,4.107329,4.101868,4.096429,4.0910115,4.085615,4.0802402,4.0748863,4.069554,4.064242,4.058951,4.0536804,4.0484304,4.043201,4.0379915,4.032802,4.0276327,4.0224833,4.0173535,4.0122433,4.007152,4.002081,3.9970286,3.9919953,3.9869812,3.9819858,3.977009,3.972051,3.9671113,3.9621902,3.9572873,3.9524026,3.947536,3.9426873,3.9378562,3.933043,3.9282475,3.9234693,3.9187086,3.913965,3.9092388,3.9045296,3.8998375,3.895162,3.8905034,3.8858619,3.8812366,3.8766277,3.8720353,3.867459,3.862899,3.8583553,3.8538272,3.8493154,3.844819,3.8403387,3.8358738,3.8314245,3.8269908,3.8225725,3.818169,3.813781,3.8094082,3.8050501,3.800707,3.796379,3.7920656,3.7877667,3.7834826,3.779213,3.7749577,3.770717,3.7664902,3.7622778,3.7580795,3.753895,3.7497249,3.7455683,3.7414255,3.7372966,3.733181,3.7290792,3.7249908,3.7209163,3.7168546,3.7128065,3.7087712,3.7047493,3.7007403,3.6967444,3.6927614,3.6887913,3.684834,3.6808894,3.6769574,3.6730378,3.669131,3.6652365,3.6613543,3.6574845,3.653627,3.6497815,3.6459484,3.642127,3.6383178,3.6345205,3.6307352,3.6269615,3.6231995,3.6194494,3.615711,3.6119838,3.6082683,3.6045642,3.6008716,3.5971901,3.59352,3.5898612,3.5862134,3.5825768,3.5789511,3.5753365,3.5717328,3.56814,3.564558,3.5609868,3.5574262,3.5538764,3.550337,3.5468085,3.5432901,3.5397825,3.5362852,3.532798,3.5293214,3.525855,3.5223987,3.5189526,3.5155165,3.5120907,3.5086746,3.5052686,3.5018723,3.498486,3.4951096,3.4917428,3.4883857,3.4850385,3.481701,3.4783726,3.475054,3.4717448,3.468445,3.4651546,3.4618738,3.4586022,3.4553397,3.4520864,3.4488423,3.4456074,3.4423819,3.4391649,3.4359572,3.4327583,3.4295685,3.4263873,3.4232152,3.4200518,3.416897,3.4137511,3.410614,3.4074852,3.4043653,3.401254,3.398151,3.3950565,3.3919704,3.3888927,3.3858235,3.3827624,3.3797097,3.3766654,3.373629,3.3706012,3.3675811,3.3645694,3.3615658,3.35857,3.3555825,3.3526027,3.3496308,3.3466668,3.343711,3.3407626,3.337822,3.3348894,3.3319643,3.329047,3.3261373,3.3232353,3.3203409,3.3174539,3.3145745,3.3117027,3.3088381,3.3059812,3.3031313,3.3002892,3.297454,3.2946265,3.291806,3.288993,3.286187,3.2833881,3.2805965,3.2778118,3.2750344,3.2722638,3.2695005,3.266744,3.2639945,3.261252,3.2585163,3.2557876,3.2530656,3.2503505,3.2476423,3.2449408,3.242246,3.2395577,3.2368762,3.2342014,3.231533,3.2288716,3.2262166,3.223568,3.220926,3.2182906,3.2156615,3.213039,3.2104228,3.207813,3.2052095,3.2026124,3.2000215,3.1974368,3.1948586,3.1922865,3.1897206,3.187161,3.1846075,3.18206,3.1795187,3.1769836,3.1744542,3.1719313,3.169414,3.1669028,3.1643977,3.1618984,3.159405,3.1569176,3.1544359,3.1519604,3.1494904,3.1470263,3.144568,3.142115,3.1396682,3.137227,3.1347916,3.132362,3.1299376,3.1275191,3.125106,3.1226988,3.120297,3.1179006,3.11551,3.1131246,3.1107447,3.1083703,3.1060014,3.103638,3.1012797,3.098927,3.0965796,3.0942373,3.0919006,3.089569,3.0872428,3.0849218,3.082606,3.0802956,3.07799,3.0756898,3.0733948,3.0711048,3.06882,3.0665402,3.0642657,3.0619962,3.0597315,3.057472,3.0552175,3.0529678,3.0507233,3.0484836,3.046249,3.044019,3.041794,3.039574,3.0373588,3.0351484,3.0329428,3.0307422,3.028546,3.0263548,3.0241685,3.0219867,3.0198097,3.0176373,3.0154698,3.0133066,3.0111485,3.0089946,3.0068455,3.0047011,3.0025613,3.000426,2.998295,2.9961689,2.9940472,2.99193,2.9898171,2.9877088,2.985605,2.9835057,2.9814107,2.9793203,2.9772341,2.9751523,2.973075,2.9710016,2.9689329,2.9668684,2.9648085,2.9627526,2.960701,2.9586537,2.9566104,2.9545717,2.952537,2.9505067,2.9484804,2.9464583,2.9444404,2.9424264,2.9404168,2.9384112,2.9364097,2.9344125,2.932419,2.93043,2.9284446,2.9264636,2.9244864,2.9225132,2.920544,2.9185789,2.9166176,2.9146602,2.9127069,2.9107575,2.908812,2.9068704,2.9049325,2.9029987,2.9010687,2.8991425,2.8972201,2.8953018,2.893387,2.8914762,2.8895688,2.8876655,2.885766,2.8838701,2.8819778,2.8800895,2.8782048,2.876324,2.8744464,2.872573,2.8707027,2.8688364,2.8669736,2.8651147,2.863259,2.8614073,2.8595588,2.8577142,2.855873,2.8540356,2.8522015,2.850371,2.848544,2.8467205,2.8449004,2.8430839,2.841271,2.8394613,2.837655,2.8358524,2.8340533,2.8322573,2.830465,2.828676,2.8268905,2.825108,2.8233292,2.8215537,2.8197815,2.8180127,2.816247,2.8144848,2.812726,2.8109703,2.809218,2.807469,2.8057232,2.8039806,2.8022413,2.8005052,2.7987723,2.7970428,2.7953165,2.7935932,2.7918732,2.7901564,2.7884426,2.786732,2.7850246,2.7833202,2.781619,2.779921,2.7782261,2.7765343,2.7748456,2.7731597,2.7714772,2.7697976,2.7681212,2.7664478,2.7647772,2.76311,2.7614455,2.759784,2.7581255,2.7564702,2.7548177,2.7531686,2.751522,2.7498784,2.7482378,2.7466002,2.7449653,2.7433336,2.7417047,2.7400784,2.7384553,2.7368352,2.7352178,2.7336032,2.7319915,2.7303827,2.7287767,2.7271736,2.7255733,2.7239757,2.722381,2.7207892,2.7192,2.7176137,2.7160301,2.7144492,2.7128713,2.711296,2.7097235,2.7081537,2.7065866,2.705022,2.7034605,2.7019014,2.7003453,2.6987915,2.6972406,2.6956925,2.6941469,2.6926038,2.6910636,2.689526,2.687991,2.6864586,2.684929,2.6834018,2.6818771,2.6803553,2.6788359,2.677319,2.6758049,2.6742933,2.6727843,2.6712778,2.6697738,2.6682723,2.6667733,2.665277,2.663783,2.6622918,2.6608028,2.6593165,2.6578326,2.656351,2.6548722,2.6533957,2.6519217,2.6504502,2.648981,2.6475143,2.6460502,2.6445885,2.643129,2.6416721,2.6402175,2.6387653,2.6373155,2.635868,2.6344233,2.6329806,2.6315403,2.6301024,2.6286669,2.6272337,2.625803,2.6243744,2.6229482,2.6215243,2.6201026,2.6186836,2.6172667,2.6158519,2.6144395,2.6130295,2.6116216,2.6102161,2.608813,2.6074119,2.6060133,2.6046166,2.6032226,2.6018305,2.6004407,2.5990534,2.597668,2.5962849,2.594904,2.5935252,2.5921488,2.5907743,2.5894022,2.5880322,2.5866644,2.5852988,2.5839355,2.5825741,2.581215,2.5798578,2.5785031,2.5771503,2.5757997,2.5744512,2.5731049,2.5717607,2.5704184,2.5690782,2.5677404,2.5664043,2.5650706,2.563739,2.5624094,2.561082,2.5597563,2.5584328,2.5571115,2.555792,2.5544746,2.5531595,2.551846,2.550535,2.5492256,2.5479186,2.5466132,2.54531,2.5440087,2.5427096,2.5414124,2.5401173,2.5388238,2.5375326,2.5362434,2.534956,2.5336707,2.5323873,2.5311058,2.5298262,2.5285487,2.527273,2.5259993,2.5247273,2.5234575,2.5221894,2.5209234,2.5196593,2.5183969,2.5171366,2.5158782,2.5146215,2.5133667,2.5121138,2.5108628,2.5096138,2.5083666,2.507121,2.5058777,2.504636,2.503396,2.5021582,2.500922,2.4996877,2.4984553,2.4972246,2.4959958,2.4947686,2.4935434,2.4923198,2.4910982,2.4898784,2.4886603,2.4874442,2.4862297,2.4850168,2.483806,2.4825966,2.4813893,2.4801836,2.4789798,2.4777775,2.4765773,2.4753785,2.4741817,2.4729865,2.471793,2.4706013,2.4694111,2.4682229,2.4670365,2.4658515,2.4646685,2.463487,2.4623072,2.4611292,2.4599528,2.4587781,2.4576051,2.4564338,2.455264,2.454096,2.4529297,2.451765,2.450602,2.4494407,2.448281,2.447123,2.4459665,2.4448118,2.4436586,2.442507,2.4413571,2.440209,2.4390624,2.4379175,2.436774,2.4356322,2.4344919,2.4333534,2.4322164,2.4310808,2.4299471,2.428815,2.427684,2.4265552,2.4254277,2.4243016,2.4231772,2.4220545,2.4209332,2.4198134,2.4186952,2.4175787,2.4164636,2.4153502,2.4142382,2.4131277,2.4120188,2.4109113,2.4098055,2.4087014,2.4075985,2.4064972,2.4053974,2.404299,2.4032023,2.402107,2.4010131,2.399921,2.3988302,2.3977408,2.396653,2.3955667,2.3944817,2.3933983,2.3923163,2.3912358,2.3901567,2.3890793,2.388003,2.3869286,2.3858554,2.3847835,2.3837132,2.3826444,2.381577,2.380511,2.3794465,2.3783834,2.3773217,2.3762615,2.3752024,2.374145,2.3730888,2.3720343,2.370981,2.3699293,2.3688788,2.3678298,2.3667822,2.3657358,2.364691,2.3636475,2.3626053,2.3615646,2.3605251,2.3594873,2.3584507,2.3574154,2.3563814,2.3553488,2.354318,2.353288,2.3522594,2.3512323,2.3502066,2.3491821,2.348159,2.3471372,2.3461168,2.3450978,2.34408,2.3430636,2.3420484,2.3410344,2.340022,2.3390107,2.338001,2.3369923,2.3359852,2.334979,2.3339744,2.332971,2.331969,2.3309681,2.3299687,2.3289704,2.3279736,2.326978,2.3259835,2.3249905,2.3239987,2.323008,2.3220189,2.3210309,2.320044,2.3190584,2.3180742,2.3170912,2.3161094,2.3151288,2.3141496,2.3131716,2.3121948,2.3112192,2.3102448,2.3092718,2.3083,2.3073292,2.3063598,2.3053918,2.3044248,2.303459,2.3024945,2.301531,2.300569,2.299608,2.2986484,2.29769,2.2967324,2.2957764,2.2948215,2.2938678,2.292915,2.2919638,2.2910137,2.2900646,2.2891169,2.28817,2.2872248,2.2862804,2.2853372,2.2843952,2.2834544,2.2825148,2.2815764,2.280639,2.279703,2.2787678,2.277834,2.2769012,2.2759697,2.2750392,2.2741098,2.2731817,2.2722547,2.271329,2.270404,2.2694805,2.268558,2.2676365,2.2667162,2.2657971,2.2648792,2.2639623,2.2630465,2.2621317,2.2612183,2.2603056,2.2593944,2.2584841,2.257575,2.256667,2.25576,2.254854,2.2539494,2.2530456,2.252143,2.2512414,2.250341,2.2494416,2.2485433,2.247646,2.2467499,2.2458549,2.2449608,2.244068,2.243176,2.2422853,2.2413955,2.240507,2.2396193,2.2387326,2.237847,2.2369626,2.2360792,2.2351968,2.2343154,2.2334352,2.2325559,2.2316778,2.2308004,2.2299244,2.2290492,2.2281752,2.227302,2.22643,2.225559,2.224689,2.22382,2.2229521,2.222085,2.2212193,2.2203543,2.2194903,2.2186275,2.2177656,2.2169046,2.2160447,2.2151859,2.214328,2.2134712,2.2126153,2.2117603,2.2109063,2.2100534,2.2092016,2.2083507,2.2075007,2.2066517,2.2058036,2.2049565,2.2041104,2.2032654,2.2024212,2.2015781,2.200736,2.1998947,2.1990545,2.1982152,2.1973767,2.1965394,2.195703,2.1948676,2.1940331,2.1931994,2.1923668,2.1915352,2.1907046,2.1898746,2.189046,2.188218,2.187391,2.1865652,2.18574,2.1849158,2.1840928,2.1832705,2.182449,2.1816287,2.180809,2.1799905,2.1791728,2.1783562,2.1775403,2.1767254,2.1759114,2.1750982,2.1742861,2.1734748,2.1726644,2.171855,2.1710465,2.170239,2.1694322,2.1686263,2.1678214,2.1670175,2.1662142,2.165412,2.1646106,2.16381,2.1630104,2.1622117,2.161414,2.1606169,2.1598208,2.1590257,2.1582315,2.157438,2.1566455,2.1558537,2.155063,2.154273,2.1534839,2.1526957,2.1519084,2.1511219,2.1503363,2.1495514,2.1487677,2.1479847,2.1472025,2.1464212,2.1456406,2.144861,2.1440823,2.1433043,2.142527,2.141751,2.1409755,2.140201,2.1394272,2.1386545,2.1378822,2.1371112,2.1363409,2.1355712,2.1348026,2.1340346,2.1332676,2.1325014,2.131736,2.1309714,2.1302075,2.1294446,2.1286826,2.1279213,2.1271608,2.1264012,2.1256423,2.1248844,2.1241271,2.1233706,2.122615,2.1218603,2.1211061,2.120353,2.1196005,2.118849,2.1180983,2.1173482,2.116599,2.1158507,2.115103,2.114356,2.11361,2.112865,2.1121204,2.1113768,2.1106339,2.1098917,2.1091504,2.10841,2.1076703,2.1069312,2.106193,2.1054556,2.104719,2.103983,2.103248,2.1025136,2.10178,2.1010473,2.100315,2.0995839,2.0988533,2.0981236,2.0973947,2.0966663,2.095939,2.0952122,2.0944862,2.093761,2.0930367,2.0923128,2.09159,2.0908678,2.0901463,2.0894256,2.0887058,2.0879865,2.0872679,2.0865502,2.0858333,2.0851169,2.0844014,2.0836866,2.0829725,2.0822592,2.0815468,2.0808349,2.0801237,2.0794134,2.0787036,2.0779948,2.0772865,2.076579,2.0758722,2.0751662,2.074461,2.0737562,2.0730524,2.072349,2.0716467,2.070945,2.070244,2.0695436,2.068844,2.0681453,2.067447,2.0667496,2.0660527,2.0653565,2.0646613,2.0639665,2.0632725,2.0625794,2.0618868,2.061195,2.0605037,2.0598133,2.0591233,2.0584342,2.057746,2.057058,2.0563712,2.0556848,2.054999,2.0543141,2.0536299,2.0529463,2.0522635,2.0515811,2.0508995,2.0502188,2.0495386,2.048859,2.04818,2.047502,2.0468245,2.0461476,2.0454714,2.044796,2.044121,2.043447,2.0427735,2.0421007,2.0414286,2.040757,2.0400863,2.039416,2.0387466,2.0380776,2.0374095,2.036742,2.036075,2.0354087,2.0347433,2.0340784,2.0334141,2.0327504,2.0320876,2.0314252,2.0307634,2.0301025,2.029442,2.0287824,2.0281231,2.0274649,2.026807,2.0261497,2.0254931,2.0248373,2.024182,2.0235274,2.0228734,2.0222201,2.0215673,2.0209153,2.020264,2.019613,2.0189629,2.0183134,2.0176644,2.017016,2.0163684,2.0157213,2.0150747,2.0144289,2.0137837,2.0131392,2.0124953,2.0118518,2.011209,2.010567,2.0099254,2.0092845,2.0086443,2.0080047,2.0073655,2.006727,2.0060892,2.005452,2.0048153,2.0041795,2.003544,2.0029092,2.002275,2.0016413,2.0010083,2.000376,1.999744,1.999113,1.9984823,1.9978523,1.9972229,1.9965941,1.9959658,1.9953382,1.9947113,1.9940847,1.9934589,1.9928336,1.992209,1.9915848,1.9909613,1.9903383,1.989716,1.9890943,1.988473,1.9878525,1.9872324,1.986613,1.9859942,1.9853759,1.9847583,1.984141,1.9835246,1.9829085,1.9822931,1.9816782,1.9810641,1.9804503,1.9798373,1.9792248,1.9786127,1.9780014,1.9773904,1.9767802,1.9761704,1.9755614,1.9749527,1.9743447,1.9737372,1.9731303,1.9725239,1.9719182,1.9713129,1.9707083,1.9701041,1.9695007,1.9688976,1.9682952,1.9676932,1.9670919,1.9664911,1.9658909,1.9652911,1.964692,1.9640934,1.9634954,1.9628979,1.9623009,1.9617045,1.9611086,1.9605132,1.9599184,1.9593242,1.9587305,1.9581374,1.9575447,1.9569526,1.956361,1.95577,1.9551795,1.9545896,1.9540001,1.9534112,1.9528229,1.9522351,1.9516478,1.951061,1.9504747,1.9498891,1.9493039,1.9487193,1.9481351,1.9475515,1.9469686,1.9463859,1.9458039,1.9452224,1.9446415,1.9440609,1.943481,1.9429015,1.9423226,1.9417442,1.9411664,1.940589,1.9400122,1.9394358,1.93886,1.9382846,1.9377099,1.9371356,1.9365618,1.9359885,1.9354159,1.9348435,1.9342718,1.9337007,1.9331299,1.9325597,1.9319899,1.9314208,1.930852,1.9302838,1.9297161,1.9291489,1.9285822,1.928016,1.9274502,1.9268851,1.9263203,1.9257561,1.9251924,1.9246292,1.9240664,1.9235042,1.9229424,1.9223812,1.9218204,1.9212601,1.9207003,1.9201411,1.9195822,1.9190239,1.9184661,1.9179088,1.917352,1.9167955,1.9162396,1.9156842,1.9151293,1.9145747,1.9140209,1.9134674,1.9129144,1.9123619,1.9118098,1.9112582,1.9107071,1.9101565,1.9096063,1.9090567,1.9085076,1.9079587,1.9074106,1.9068627,1.9063154,1.9057688,1.9052223,1.9046764,1.904131,1.9035861,1.9030416,1.9024976,1.9019539,1.9014109,1.9008683,1.9003261,1.8997844,1.8992432,1.8987024,1.8981621,1.8976222,1.8970829,1.896544,1.8960055,1.8954675,1.89493,1.8943928,1.8938563,1.8933201,1.8927844,1.892249,1.8917142,1.8911799,1.890646,1.8901126,1.8895795,1.889047,1.8885149,1.8879832,1.887452,1.8869213,1.8863909,1.885861,1.8853316,1.8848027,1.8842741,1.883746,1.8832184,1.8826913,1.8821645,1.8816382,1.8811122,1.8805869,1.8800619,1.8795373,1.8790132,1.8784895,1.8779663,1.8774434,1.8769212,1.8763992,1.8758777,1.8753567,1.8748361,1.8743159,1.8737961,1.8732767,1.8727579,1.8722394,1.8717214,1.8712038,1.8706867,1.8701698,1.8696536,1.8691376,1.8686222,1.8681071,1.8675926,1.8670783,1.8665646,1.8660512,1.8655384,1.8650259,1.8645138,1.8640021,1.8634908,1.8629801,1.8624697,1.8619598,1.8614502,1.860941,1.8604323,1.8599241,1.8594161,1.8589087,1.8584017,1.857895,1.8573887,1.856883,1.8563776,1.8558726,1.855368,1.8548639,1.8543601,1.8538568,1.8533539,1.8528514,1.8523492,1.8518475,1.8513463,1.8508453,1.8503449,1.8498448,1.8493452,1.8488458,1.8483471,1.8478485,1.8473505,1.8468528,1.8463556,1.8458587,1.8453623,1.8448662,1.8443706,1.8438753,1.8433806,1.842886,1.842392,1.8418983,1.841405,1.8409122,1.8404198,1.8399277,1.8394359,1.8389448,1.8384538,1.8379633,1.8374732,1.8369836,1.8364942,1.8360053,1.8355167,1.8350285,1.8345407,1.8340534,1.8335664,1.8330798,1.8325936,1.8321078,1.8316224,1.8311373,1.8306526,1.8301684,1.8296844,1.829201,1.8287177,1.828235,1.8277526,1.8272707,1.8267891,1.8263079,1.8258271,1.8253466,1.8248665,1.8243867,1.8239075,1.8234285,1.82295,1.8224717,1.821994,1.8215164,1.8210394,1.8205627,1.8200864,1.8196104,1.8191348,1.8186597,1.8181849,1.8177103,1.8172363,1.8167626,1.8162892,1.8158162,1.8153436,1.8148713,1.8143995,1.8139281,1.8134569,1.8129861,1.8125157,1.8120457,1.811576,1.8111068,1.8106377,1.8101692,1.809701,1.8092332,1.8087656,1.8082986,1.8078318,1.8073654,1.8068993,1.8064337,1.8059683,1.8055034,1.8050387,1.8045745,1.8041106,1.8036472,1.8031839,1.8027211,1.8022587,1.8017966,1.8013349,1.8008734,1.8004124,1.7999517,1.7994914,1.7990314,1.7985718,1.7981125,1.7976536,1.797195,1.7967368,1.796279,1.7958214,1.7953643,1.7949075,1.7944509,1.7939948,1.793539,1.7930837,1.7926285,1.7921739,1.7917193,1.7912654,1.7908117,1.7903583,1.7899053,1.7894527,1.7890004,1.7885484,1.7880967,1.7876453,1.7871945,1.7867438,1.7862936,1.7858436,1.7853941,1.7849448,1.7844958,1.7840472,1.783599,1.7831511,1.7827036,1.7822564,1.7818094,1.7813629,1.7809167,1.7804707,1.7800252,1.7795801,1.7791351,1.7786907,1.7782464,1.7778026,1.777359,1.7769158,1.7764728,1.7760303,1.775588,1.7751462,1.7747046,1.7742634,1.7738224,1.773382,1.7729416,1.7725017,1.7720622,1.7716229,1.771184,1.7707454,1.7703071,1.7698691,1.7694314,1.7689941,1.7685571,1.7681205,1.7676842,1.7672482,1.7668124,1.766377,1.765942,1.7655072,1.7650728,1.7646388,1.764205,1.7637715,1.7633384,1.7629056,1.7624731,1.7620409,1.7616091,1.7611774,1.7607462,1.7603153,1.7598848,1.7594545,1.7590245,1.7585949,1.7581656,1.7577366,1.7573079,1.7568794,1.7564514,1.7560236,1.7555962,1.755169,1.7547421,1.7543157,1.7538894,1.7534636,1.753038,1.7526127,1.7521877,1.7517631,1.7513387,1.7509147,1.750491,1.7500676,1.7496444,1.7492217,1.7487991,1.748377,1.747955,1.7475334,1.7471122,1.7466912,1.7462705,1.7458502,1.7454301,1.7450104,1.7445909,1.7441717,1.7437528,1.7433343,1.7429161,1.742498,1.7420805,1.7416631,1.7412461,1.7408292,1.7404128,1.7399967,1.7395809,1.7391652,1.73875,1.738335,1.7379204,1.737506,1.7370919,1.7366781,1.7362647,1.7358514,1.7354386,1.735026,1.7346137,1.7342017,1.7337899,1.7333785,1.7329674,1.7325566,1.732146,1.7317358,1.7313259,1.7309161,1.7305068,1.7300977,1.7296889,1.7292804,1.7288722,1.7284642,1.7280566,1.7276492,1.7272421,1.7268354,1.7264289,1.7260227,1.7256167,1.7252111,1.7248058,1.7244008,1.7239959,1.7235914,1.7231872,1.7227833,1.7223797,1.7219763,1.7215732,1.7211704,1.720768,1.7203658,1.7199638,1.719562,1.7191608,1.7187597,1.7183589,1.7179582,1.717558,1.7171581,1.7167584,1.7163589,1.7159598,1.7155609,1.7151624,1.7147641,1.714366,1.7139683,1.7135708,1.7131736,1.7127767,1.71238,1.7119837,1.7115875,1.7111917,1.7107962,1.7104009,1.7100059,1.7096112,1.7092167,1.7088225,1.7084286,1.708035,1.7076416,1.7072486,1.7068558,1.7064631,1.7060709,1.7056788,1.7052871,1.7048956,1.7045045,1.7041136,1.7037228,1.7033325,1.7029424,1.7025526,1.702163,1.7017736,1.7013845,1.7009958,1.7006072,1.700219,1.699831,1.6994433,1.6990558,1.6986686,1.6982816,1.697895,1.6975086,1.6971225,1.6967366,1.696351,1.6959656,1.6955806,1.6951957,1.6948112,1.6944269,1.6940429,1.6936591,1.6932756,1.6928923,1.6925093,1.6921266,1.6917441,1.6913619,1.69098,1.6905982,1.6902168,1.6898357,1.6894547,1.689074,1.6886936,1.6883135,1.6879336,1.6875539,1.6871746,1.6867954,1.6864165,1.6860379,1.6856595,1.6852814,1.6849036,1.684526,1.6841487,1.6837715,1.6833948,1.6830181,1.6826419,1.6822656,1.6818899,1.6815143,1.681139,1.6807638,1.680389,1.6800145,1.6796402,1.6792661,1.6788923,1.6785187,1.6781454,1.6777723,1.6773995,1.6770269,1.6766546,1.6762824,1.6759106,1.6755391,1.6751677,1.6747967,1.6744257,1.6740552,1.6736848,1.6733147,1.6729448,1.6725752,1.6722058,1.6718367,1.6714678,1.6710992,1.6707308,1.6703627,1.6699947,1.6696271,1.6692597,1.6688925,1.6685255,1.6681588,1.6677923,1.6674261,1.6670601,1.6666944,1.6663289,1.6659636,1.6655988,1.6652339,1.6648694,1.6645051,1.664141,1.6637772,1.6634136,1.6630503,1.6626872,1.6623243,1.6619617,1.6615993,1.6612371,1.6608752,1.6605136,1.6601521,1.6597909,1.6594299,1.6590692,1.6587087,1.6583484,1.6579884,1.6576287,1.657269,1.6569097,1.6565506,1.6561918,1.6558331,1.6554748,1.6551167,1.6547587,1.654401,1.6540434,1.6536863,1.6533293,1.6529725,1.6526159,1.6522597,1.6519035,1.6515477,1.6511921,1.6508367,1.6504815,1.6501266,1.6497719,1.6494174,1.6490631,1.6487092,1.6483554,1.6480018,1.6476485,1.6472954,1.6469425,1.6465899,1.6462374,1.6458852,1.6455332,1.6451814,1.64483,1.6444787,1.6441276,1.6437767,1.6434261,1.6430757,1.6427256,1.6423756,1.6420258,1.6416763,1.641327,1.640978,1.6406292,1.6402805,1.6399322,1.639584,1.639236,1.6388882,1.6385407,1.6381935,1.6378465,1.6374996,1.6371529,1.6368066,1.6364604,1.6361145,1.6357687,1.6354232,1.6350778,1.6347327,1.6343879,1.6340432,1.6336988,1.6333545,1.6330105,1.6326668,1.6323231,1.63198,1.6316367,1.6312939,1.630951,1.6306087,1.6302663,1.6299243,1.6295825,1.6292409,1.6288995,1.6285583,1.6282173,1.6278765,1.627536,1.6271956,1.6268555,1.6265156,1.6261759,1.6258364,1.6254972,1.6251581,1.6248193,1.6244806,1.6241422,1.623804,1.623466,1.6231282,1.6227906,1.6224532,1.6221161,1.6217791,1.6214424,1.6211059,1.6207695,1.6204334,1.6200975,1.6197618,1.6194264,1.6190912,1.6187559,1.6184212,1.6180865,1.6177521,1.6174178,1.6170838,1.6167499,1.6164163,1.6160829,1.6157497,1.6154168,1.6150839,1.6147513,1.614419,1.6140867,1.6137549,1.613423,1.6130915,1.6127602,1.612429,1.6120981,1.6117673,1.6114367,1.6111064,1.6107763,1.6104463,1.6101166,1.6097871,1.6094577,1.6091286,1.6087997,1.6084709,1.6081425,1.6078142,1.607486,1.6071581,1.6068304,1.6065029,1.6061755,1.6058484,1.6055216,1.6051948,1.6048683,1.604542,1.6042159,1.60389,1.6035643,1.6032387,1.6029134,1.6025883,1.6022633,1.6019386,1.6016141,1.6012897,1.6009656,1.6006417,1.600318,1.5999944,1.599671,1.5993478,1.5990249,1.5987022,1.5983795,1.5980572,1.5977349,1.5974131,1.5970912,1.5967697,1.5964482,1.596127,1.595806,1.5954852,1.5951645,1.5948441,1.5945239,1.5942038,1.593884,1.5935643,1.5932449,1.5929255,1.5926065,1.5922875,1.5919689,1.5916504,1.5913321,1.5910139,1.590696,1.5903782,1.5900607,1.5897433,1.5894262,1.5891091,1.5887923,1.5884757,1.5881593,1.5878431,1.587527,1.5872113,1.5868955,1.58658,1.5862647,1.5859497,1.5856347,1.58532,1.5850054,1.5846912,1.5843769,1.5840629,1.5837492,1.5834355,1.5831221,1.582809,1.5824958,1.582183,1.5818703,1.5815579,1.5812455,1.5809335,1.5806215,1.5803097,1.5799981,1.5796868,1.5793756,1.5790646,1.5787537,1.578443,1.5781326,1.5778223,1.5775123,1.5772023,1.5768926,1.576583,1.5762737,1.5759645,1.5756555,1.5753466,1.5750381,1.5747296,1.5744213,1.5741131,1.5738052,1.5734975,1.57319,1.5728825,1.5725753,1.5722684,1.5719615,1.5716549,1.5713484,1.5710422,1.5707359,1.57043,1.5701243,1.5698187,1.5695133,1.5692081,1.568903,1.5685982,1.5682935,1.567989,1.5676847,1.5673804,1.5670764,1.5667727,1.566469,1.5661656,1.5658623,1.5655591,1.5652562,1.5649536,1.5646509,1.5643486,1.5640464,1.5637443,1.5634425,1.5631407,1.5628392,1.5625378,1.5622367,1.5619357,1.5616349,1.5613341,1.5610337,1.5607333,1.5604333,1.5601332,1.5598335,1.5595338,1.5592345,1.5589352,1.5586361,1.5583371,1.5580384,1.5577399,1.5574414,1.5571431,1.5568451,1.5565472,1.5562495,1.555952,1.5556545,1.5553573,1.5550603,1.5547634,1.5544667,1.5541703,1.5538738,1.5535777,1.5532815,1.5529858,1.55269,1.5523945,1.5520992,1.5518041,1.551509,1.5512141,1.5509194,1.550625,1.5503306,1.5500364,1.5497425,1.5494486,1.5491549,1.5488614,1.5485681,1.5482749,1.547982,1.5476891,1.5473964,1.5471039,1.5468116,1.5465194,1.5462273,1.5459355,1.5456439,1.5453523,1.545061,1.5447698,1.5444788,1.5441879,1.5438973,1.5436066,1.5433164,1.5430261,1.5427362,1.5424463,1.5421566,1.541867,1.5415776,1.5412884,1.5409993,1.5407104,1.5404217,1.5401331,1.5398448,1.5395565,1.5392684,1.5389805,1.5386927,1.5384052,1.5381176,1.5378305,1.5375433,1.5372564,1.5369695,1.536683,1.5363964,1.5361102,1.535824,1.535538,1.5352521,1.5349665,1.534681,1.5343956,1.5341104,1.5338254,1.5335405,1.5332558,1.5329713,1.5326868,1.5324025,1.5321184,1.5318346,1.5315508,1.5312672,1.5309837,1.5307004,1.5304172,1.5301343,1.5298514,1.5295688,1.5292863,1.5290039,1.5287217,1.5284396,1.5281577,1.527876,1.5275944,1.527313,1.5270318,1.5267507,1.5264697,1.5261889,1.5259082,1.5256277,1.5253475,1.5250672,1.5247872,1.5245073,1.5242276,1.5239481,1.5236686,1.5233893,1.5231103,1.5228313,1.5225525,1.5222739,1.5219954,1.5217171,1.5214388,1.5211608,1.520883,1.5206052,1.5203277,1.5200502,1.519773,1.5194958,1.5192188,1.5189421,1.5186653,1.5183889,1.5181125,1.5178363,1.5175602,1.5172843,1.5170085,1.5167329,1.5164574,1.5161822,1.5159069,1.515632,1.5153571,1.5150824,1.5148078,1.5145334,1.5142591,1.513985,1.5137111,1.5134373,1.5131636,1.5128901,1.5126168,1.5123434,1.5120704,1.5117974,1.5115247,1.511252,1.5109795,1.5107071,1.510435,1.510163,1.509891,1.5096194,1.5093477,1.5090762,1.5088049,1.5085337,1.5082628,1.5079919,1.5077212,1.5074506,1.5071801,1.5069098,1.5066397,1.5063697,1.5060998,1.50583,1.5055605,1.5052911,1.5050218,1.5047528,1.5044837,1.5042149,1.5039462,1.5036776,1.5034093,1.5031409,1.5028728,1.5026048,1.502337,1.5020694,1.5018017,1.5015343,1.5012671,1.5009999,1.500733,1.5004661,1.5001994,1.4999329,1.4996665,1.4994003,1.4991341,1.4988681,1.4986023,1.4983366,1.4980711,1.4978056,1.4975404,1.4972751,1.4970102,1.4967453,1.4964806,1.496216,1.4959515,1.4956872,1.4954231,1.4951591,1.4948952,1.4946315,1.494368,1.4941044,1.4938412,1.493578,1.4933149,1.493052,1.4927893,1.4925265,1.4922642,1.4920018,1.4917395,1.4914775,1.4912156,1.4909538,1.4906921,1.4904306,1.4901692,1.489908,1.4896469,1.489386,1.489125,1.4888644,1.4886038,1.4883434,1.4880831,1.487823,1.4875629,1.487303,1.4870433,1.4867837,1.4865242,1.486265,1.4860057,1.4857466,1.4854877,1.4852289,1.4849703,1.4847118,1.4844534,1.4841951,1.483937,1.483679,1.4834212,1.4831635,1.482906,1.4826485,1.4823912,1.482134,1.481877,1.4816201,1.4813633,1.4811066,1.4808501,1.4805937,1.4803375,1.4800813,1.4798254,1.4795696,1.4793139,1.4790583,1.4788028,1.4785476,1.4782923,1.4780374,1.4777824,1.4775276,1.477273,1.4770185,1.4767641,1.4765098,1.4762557,1.4760016,1.4757478,1.475494,1.4752405,1.474987,1.4747336,1.4744804,1.4742273,1.4739745,1.4737216,1.4734689,1.4732163,1.4729639,1.4727116,1.4724594,1.4722074,1.4719555,1.4717038,1.471452,1.4712006,1.4709492,1.4706979,1.4704467,1.4701958,1.4699448,1.4696941,1.4694434,1.469193,1.4689425,1.4686923,1.4684422,1.4681922,1.4679424,1.4676927,1.4674431,1.4671936,1.4669442,1.4666951,1.4664459,1.466197,1.4659481,1.4656994,1.4654509,1.4652023,1.464954,1.4647058,1.4644578,1.4642098,1.463962,1.4637142,1.4634666,1.4632192,1.4629719,1.4627247,1.4624777,1.4622307,1.4619838,1.4617372,1.4614905,1.4612441,1.4609978,1.4607515,1.4605055,1.4602596,1.4600137,1.4597679,1.4595225,1.459277,1.4590317,1.4587865,1.4585414,1.4582964,1.4580516,1.4578068,1.4575622,1.4573178,1.4570735,1.4568292,1.456585,1.4563411,1.4560972,1.4558536,1.4556099,1.4553664,1.4551231,1.4548798,1.4546367,1.4543937,1.4541508,1.4539081,1.4536654,1.4534229,1.4531806,1.4529382,1.4526961,1.4524541,1.4522122,1.4519703,1.4517287,1.4514872,1.4512458,1.4510044,1.4507632,1.4505222,1.4502813,1.4500403,1.4497997,1.4495591,1.4493186,1.4490783,1.4488381,1.4485979,1.4483579,1.4481181,1.4478784,1.4476388,1.4473993,1.4471599,1.4469205,1.4466814,1.4464424,1.4462035,1.4459646,1.4457259,1.4454874,1.445249,1.4450107,1.4447724,1.4445343,1.4442964,1.4440584,1.4438207,1.4435831,1.4433457,1.4431082,1.442871,1.4426337,1.4423968,1.4421598,1.441923,1.4416864,1.4414498,1.4412134,1.440977,1.4407408,1.4405047,1.4402688,1.4400328,1.439797,1.4395614,1.4393259,1.4390905,1.4388552,1.43862,1.438385,1.4381499,1.4379152,1.4376805,1.4374459,1.4372114,1.436977,1.4367427,1.4365085,1.4362745,1.4360406,1.4358068,1.4355731,1.4353396,1.4351062,1.4348727,1.4346396,1.4344064,1.4341735,1.4339405,1.4337077,1.4334751,1.4332426,1.4330101,1.4327778,1.4325455,1.4323134,1.4320815,1.4318496,1.4316179,1.4313861,1.4311546,1.4309232,1.430692,1.4304607,1.4302297,1.4299986,1.4297678,1.429537,1.4293064,1.4290758,1.4288454,1.4286152,1.4283849,1.4281548,1.4279249,1.427695,1.4274653,1.4272356,1.4270061,1.4267768,1.4265474,1.4263182,1.426089,1.4258602,1.4256313,1.4254025,1.4251739,1.4249454,1.424717,1.4244885,1.4242604,1.4240323,1.4238043,1.4235765,1.4233487,1.423121,1.4228935,1.4226661,1.4224387,1.4222114,1.4219843,1.4217573,1.4215305,1.4213036,1.421077,1.4208504,1.420624,1.4203976,1.4201714,1.4199452,1.4197192,1.4194932,1.4192674,1.4190418,1.4188162,1.4185907,1.4183652,1.4181399,1.4179149,1.4176898,1.4174649,1.41724,1.4170152,1.4167906,1.416566,1.4163417,1.4161173,1.4158932,1.4156691,1.4154451,1.4152211,1.4149973,1.4147737,1.4145502,1.4143267,1.4141033,1.41388,1.4136568,1.4134339,1.413211,1.4129881,1.4127654,1.4125428,1.4123203,1.4120978,1.4118755,1.4116534,1.4114312,1.4112092,1.4109874,1.4107656,1.4105439,1.4103223,1.4101009,1.4098796,1.4096583,1.4094371,1.409216,1.4089952,1.4087743,1.4085535,1.408333,1.4081124,1.407892,1.4076716,1.4074514,1.4072313,1.4070113,1.4067913,1.4065716,1.4063519,1.4061322,1.4059128,1.4056934,1.4054741,1.4052548,1.4050359,1.4048169,1.4045979,1.4043791,1.4041605,1.4039419,1.4037235,1.4035051,1.4032868,1.4030687,1.4028505,1.4026326,1.4024148,1.402197,1.4019793,1.4017617,1.4015443,1.4013269,1.4011097,1.4008925,1.4006755,1.4004585,1.4002416,1.4000249,1.3998083,1.3995917,1.3993752,1.399159,1.3989427,1.3987265,1.3985105,1.3982946,1.3980787,1.3978629,1.3976473,1.3974317,1.3972163,1.3970009,1.3967856,1.3965706,1.3963555,1.3961405,1.3959256,1.395711,1.3954962,1.3952817,1.3950673,1.3948529,1.3946387,1.3944244,1.3942105,1.3939965,1.3937826,1.3935688,1.3933551,1.3931416,1.3929281,1.3927147,1.3925015,1.3922883,1.3920752,1.3918622,1.3916494,1.3914366,1.3912239,1.3910112,1.3907988,1.3905864,1.3903741,1.3901619,1.3899498,1.3897377,1.3895259,1.389314,1.3891023,1.3888907,1.3886791,1.3884678,1.3882564,1.3880452,1.3878341,1.3876231,1.3874121,1.3872012,1.3869904,1.3867798,1.3865693,1.3863587,1.3861483,1.3859382,1.385728,1.3855178,1.3853079,1.385098,1.3848882,1.3846785,1.3844689,1.3842595,1.38405,1.3838407,1.3836315,1.3834224,1.3832133,1.3830043,1.3827956,1.3825867,1.3823781,1.3821695,1.3819611,1.3817527,1.3815444,1.3813362,1.3811282,1.3809202,1.3807122,1.3805044,1.3802967,1.380089,1.3798815,1.3796741,1.3794668,1.3792595,1.3790524,1.3788453,1.3786384,1.3784314,1.3782246,1.378018,1.3778114,1.3776048,1.3773985,1.3771923,1.3769859,1.3767798,1.3765738,1.3763678,1.3761619,1.3759562,1.3757505,1.375545,1.3753395,1.3751341,1.3749287,1.3747236,1.3745185,1.3743135,1.3741084,1.3739036,1.373699,1.3734943,1.3732897,1.3730853,1.3728808,1.3726765,1.3724724,1.3722682,1.3720642,1.3718603,1.3716564,1.3714527,1.371249,1.3710455,1.370842,1.3706386,1.3704352,1.3702321,1.370029,1.369826,1.3696231,1.3694202,1.3692174,1.3690147,1.3688122,1.3686097,1.3684074,1.3682051,1.3680028,1.3678007,1.3675987,1.3673967,1.3671948,1.3669931,1.3667914,1.3665898,1.3663883,1.366187,1.3659856,1.3657843,1.3655832,1.3653822,1.3651812,1.3649803,1.3647795,1.3645788,1.3643782,1.3641777,1.3639772,1.3637769,1.3635767,1.3633765,1.3631765,1.3629764,1.3627765,1.3625767,1.362377,1.3621774,1.3619778,1.3617783,1.361579,1.3613796,1.3611804,1.3609813,1.3607823,1.3605833,1.3603845,1.3601857,1.359987,1.3597884,1.3595899,1.3593915,1.3591932,1.358995,1.3587968,1.3585987,1.3584008,1.3582028,1.358005,1.3578074,1.3576096,1.3574121,1.3572147,1.3570173,1.35682,1.3566228,1.3564256,1.3562286,1.3560317,1.3558348,1.355638,1.3554413,1.3552448,1.3550482,1.3548517,1.3546554,1.3544592,1.354263,1.3540668,1.3538709,1.3536749,1.353479,1.3532833,1.3530877,1.352892,1.3526965,1.3525012,1.3523059,1.3521106,1.3519154,1.3517203,1.3515253,1.3513304,1.3511356,1.350941,1.3507463,1.3505516,1.3503572,1.3501627,1.3499684,1.3497741,1.34958,1.349386,1.349192,1.3489981,1.3488042,1.3486105,1.3484169,1.3482233,1.3480299,1.3478365,1.3476431,1.3474499,1.3472568,1.3470637,1.3468707,1.3466778,1.346485,1.3462923,1.3460995,1.345907,1.3457146,1.345522,1.3453298,1.3451375,1.3449454,1.3447533,1.3445613,1.3443694,1.3441776,1.3439858,1.3437941,1.3436025,1.3434111,1.3432196,1.3430283,1.3428371,1.3426459,1.3424548,1.3422637,1.3420728,1.341882,1.3416913,1.3415005,1.3413099,1.3411194,1.3409289,1.3407385,1.3405484,1.3403581,1.340168,1.339978,1.3397881,1.3395982,1.3394083,1.3392186,1.339029,1.3388394,1.33865,1.3384606,1.3382713,1.3380821,1.3378929,1.3377038,1.3375149,1.3373259,1.3371371,1.3369484,1.3367597,1.3365711,1.3363825,1.3361942,1.3360058,1.3358175,1.3356292,1.3354412,1.3352531,1.3350651,1.3348773,1.3346895,1.3345019,1.3343141,1.3341266,1.3339392,1.3337517,1.3335644,1.3333772,1.33319,1.3330029,1.3328159,1.332629,1.3324422,1.3322554,1.3320687,1.3318821,1.3316956,1.3315091,1.3313227,1.3311365,1.3309501,1.330764,1.330578,1.330392,1.330206,1.3300202,1.3298345,1.3296489,1.3294632,1.3292776,1.3290923,1.3289069,1.3287216,1.3285364,1.3283513,1.3281662,1.3279812,1.3277963,1.3276116,1.3274268,1.327242,1.3270575,1.326873,1.3266885,1.3265041,1.3263198,1.3261358,1.3259516,1.3257675,1.3255835,1.3253996,1.3252158,1.325032,1.3248483,1.3246648,1.3244812,1.3242978,1.3241144,1.3239312,1.323748,1.3235648,1.3233818,1.3231988,1.3230158,1.322833,1.3226503,1.3224676,1.3222849,1.3221024,1.32192,1.3217376,1.3215553,1.321373,1.321191,1.3210088,1.3208268,1.3206449,1.3204631,1.3202813,1.3200996,1.3199179,1.3197364,1.3195549,1.3193735,1.3191922,1.319011,1.3188298,1.3186486,1.3184676,1.3182867,1.3181057,1.317925,1.3177443,1.3175635,1.3173829,1.3172024,1.3170221,1.3168417,1.3166614,1.3164811,1.3163011,1.316121,1.315941,1.315761,1.3155812,1.3154014,1.3152218,1.3150421,1.3148626,1.3146831,1.3145037,1.3143244,1.3141451,1.3139659,1.3137867,1.3136078,1.3134289,1.31325,1.3130711,1.3128924,1.3127137,1.312535,1.3123566,1.3121781,1.3119998,1.3118215,1.3116432,1.311465,1.3112869,1.311109,1.310931,1.3107531,1.3105754,1.3103976,1.3102199,1.3100424,1.3098649,1.3096874,1.3095101,1.3093327,1.3091556,1.3089783,1.3088013,1.3086244,1.3084474,1.3082705,1.3080938,1.307917,1.3077403,1.3075638,1.3073874,1.3072108,1.3070345,1.3068582,1.306682,1.3065058,1.3063297,1.3061538,1.3059778,1.305802,1.3056262,1.3054504,1.3052748,1.3050992,1.3049237,1.3047483,1.3045729,1.3043976,1.3042223,1.3040472,1.3038721,1.3036971,1.3035222,1.3033473,1.3031726,1.3029978,1.3028231,1.3026485,1.302474,1.3022995,1.3021251,1.3019509,1.3017766,1.3016025,1.3014283,1.3012544,1.3010803,1.3009064,1.3007327,1.3005589,1.3003852,1.3002115,1.3000381,1.2998646,1.2996912,1.2995179,1.2993447,1.2991714,1.2989982,1.2988251,1.2986523,1.2984793,1.2983065,1.2981336,1.297961,1.2977883,1.2976158,1.2974432,1.2972708,1.2970984,1.2969261,1.2967539,1.2965817,1.2964096,1.2962376,1.2960657,1.2958938,1.2957219,1.2955501,1.2953786,1.2952069,1.2950354,1.2948638,1.2946925,1.2945211,1.2943498,1.2941786,1.2940075,1.2938364,1.2936654,1.2934945,1.2933236,1.2931528,1.2929821,1.2928114,1.2926408,1.2924702,1.2922997,1.2921294,1.291959,1.2917888,1.2916186,1.2914486,1.2912785,1.2911085,1.2909385,1.2907687,1.2905989,1.2904291,1.2902595,1.29009,1.2899204,1.2897509,1.2895815,1.2894123,1.289243,1.2890738,1.2889047,1.2887356,1.2885666,1.2883977,1.2882288,1.2880601,1.2878913,1.2877226,1.2875541,1.2873856,1.2872171,1.2870487,1.2868804,1.2867122,1.2865438,1.2863758,1.2862078,1.2860397,1.2858717,1.2857039,1.2855362,1.2853684,1.2852007,1.2850331,1.2848656,1.2846981,1.2845306,1.2843634,1.2841961,1.2840289,1.2838618,1.2836947,1.2835276,1.2833607,1.2831938,1.283027,1.2828603,1.2826935,1.2825269,1.2823604,1.2821939,1.2820275,1.2818611,1.2816948,1.2815286,1.2813624,1.2811962,1.2810303,1.2808642,1.2806983,1.2805325,1.2803668,1.280201,1.2800353,1.2798697,1.2797042,1.2795388,1.2793733,1.2792081,1.2790427,1.2788775,1.2787124,1.2785474,1.2783823,1.2782173,1.2780524,1.2778877,1.277723,1.2775582,1.2773936,1.2772291,1.2770646,1.2769,1.2767357,1.2765714,1.2764071,1.276243,1.2760788,1.2759148,1.2757508,1.2755868,1.2754229,1.2752591,1.2750953,1.2749317,1.2747681,1.2746046,1.274441,1.2742776,1.2741143,1.2739509,1.2737877,1.2736245,1.2734615,1.2732984,1.2731354,1.2729725,1.2728096,1.2726468,1.2724841,1.2723213,1.2721587,1.2719963,1.2718337,1.2716713,1.2715089,1.2713466,1.2711843,1.2710222,1.2708601,1.2706981,1.2705361,1.2703742,1.2702123,1.2700504,1.2698886,1.269727,1.2695653,1.2694038,1.2692423,1.2690809,1.2689195,1.2687582,1.2685969,1.2684357,1.2682747,1.2681135,1.2679524,1.2677916,1.2676307,1.2674699,1.2673091,1.2671484,1.2669878,1.2668272,1.2666667,1.2665062,1.2663459,1.2661855,1.2660252,1.265865,1.2657049,1.2655448,1.2653848,1.2652248,1.2650648,1.264905,1.2647452,1.2645855,1.2644258,1.2642661,1.2641066,1.2639471,1.2637877,1.2636284,1.2634691,1.2633098,1.2631507,1.2629915,1.2628325,1.2626735,1.2625145,1.2623557,1.2621968,1.262038,1.2618793,1.2617207,1.2615621,1.2614036,1.2612451,1.2610867,1.2609284,1.2607701,1.2606118,1.2604537,1.2602956,1.2601376,1.2599795,1.2598217,1.2596637,1.2595059,1.2593482,1.2591906,1.2590328,1.2588753,1.2587178,1.2585603,1.258403,1.2582456,1.2580884,1.2579311,1.2577739,1.2576168,1.2574598,1.2573028,1.2571459,1.256989,1.2568322,1.2566755,1.2565187,1.2563621,1.2562056,1.256049,1.2558925,1.2557361,1.2555798,1.2554235,1.2552674,1.2551111,1.254955,1.254799,1.254643,1.2544872,1.2543312,1.2541754,1.2540196,1.2538639,1.2537084,1.2535527,1.2533972,1.2532418,1.2530863,1.252931,1.2527757,1.2526205,1.2524652,1.2523102,1.2521551,1.2520001,1.2518451,1.2516903,1.2515354,1.2513807,1.251226,1.2510712,1.2509166,1.2507621,1.2506076,1.2504531,1.2502989,1.2501445,1.2499902,1.249836,1.249682,1.2495278,1.2493738,1.2492198,1.2490659,1.248912,1.2487582,1.2486044,1.2484508,1.2482971,1.2481436,1.24799,1.2478366,1.2476832,1.2475297,1.2473764,1.2472233,1.2470701,1.246917,1.246764,1.2466109,1.2464579,1.246305,1.2461523,1.2459995,1.2458466,1.245694,1.2455415,1.2453889,1.2452363,1.2450838,1.2449315,1.2447791,1.2446269,1.2444746,1.2443224,1.2441703,1.2440183,1.2438662,1.2437143,1.2435625,1.2434106,1.2432588,1.2431071,1.2429554,1.2428038,1.2426523,1.2425008,1.2423493,1.2421979,1.2420466,1.2418953,1.241744,1.2415929,1.2414418,1.2412907,1.2411397,1.2409887,1.2408379,1.240687,1.2405362,1.2403855,1.2402349,1.2400842,1.2399336,1.239783,1.2396327,1.2394823,1.239332,1.2391816,1.2390314,1.2388812,1.238731,1.2385811,1.238431,1.238281,1.238131,1.2379813,1.2378315,1.2376817,1.237532,1.2373824,1.2372328,1.2370832,1.2369337,1.2367843,1.236635,1.2364857,1.2363364,1.2361872,1.2360381,1.235889,1.23574,1.2355909,1.235442,1.2352931,1.2351443,1.2349955,1.2348468,1.234698,1.2345495,1.234401,1.2342525,1.2341039,1.2339556,1.2338072,1.2336589,1.2335107,1.2333626,1.2332144,1.2330663,1.2329183,1.2327703,1.2326224,1.2324746,1.2323267,1.2321789,1.2320312,1.2318836,1.231736,1.2315885,1.231441,1.2312936,1.2311462,1.2309989,1.2308515,1.2307043,1.2305572,1.23041,1.2302629,1.2301159,1.229969,1.229822,1.2296752,1.2295283,1.2293817,1.2292349,1.2290883,1.2289417,1.2287952,1.2286487,1.2285022,1.2283558,1.2282095,1.2280632,1.227917,1.2277708,1.2276247,1.2274786,1.2273326,1.2271866,1.2270406,1.2268949,1.226749,1.2266033,1.2264575,1.2263118,1.2261662,1.2260207,1.2258753,1.2257297,1.2255843,1.2254391,1.2252938,1.2251484,1.2250032,1.2248582,1.2247131,1.224568,1.224423,1.2242781,1.2241333,1.2239884,1.2238436,1.2236989,1.2235541,1.2234095,1.223265,1.2231205,1.222976,1.2228316,1.2226872,1.2225429,1.2223986,1.2222544,1.2221103,1.2219661,1.221822,1.221678,1.2215341,1.2213901,1.2212462,1.2211025,1.2209587,1.2208151,1.2206714,1.2205278,1.2203842,1.2202407,1.2200972,1.2199539,1.2198105,1.2196672,1.2195239,1.2193807,1.2192376,1.2190945,1.2189515,1.2188084,1.2186655,1.2185225,1.2183797,1.2182369,1.2180942,1.2179515,1.2178088,1.2176663,1.2175237,1.2173812,1.2172388,1.2170963,1.216954,1.2168117,1.2166694,1.2165272,1.2163851,1.216243,1.2161009,1.215959,1.215817,1.2156751,1.2155333,1.2153915,1.2152497,1.215108,1.2149664,1.2148248,1.2146832,1.2145417,1.2144003,1.2142588,1.2141175,1.2139761,1.213835,1.2136937,1.2135526,1.2134115,1.2132704,1.2131294,1.2129884,1.2128476,1.2127067,1.2125658,1.2124251,1.2122843,1.2121437,1.2120031,1.2118624,1.211722,1.2115815,1.211441,1.2113007,1.2111604,1.2110201,1.2108799,1.2107397,1.2105995,1.2104595,1.2103194,1.2101794,1.2100396,1.2098997,1.2097598,1.20962,1.2094803,1.2093406,1.209201,1.2090614,1.2089218,1.2087823,1.2086428,1.2085035,1.2083641,1.2082248,1.2080855,1.2079463,1.2078072,1.2076681,1.207529,1.20739,1.207251,1.2071121,1.2069732,1.2068344,1.2066956,1.2065568,1.2064182,1.2062795,1.206141,1.2060024,1.205864,1.2057256,1.205587,1.2054487,1.2053105,1.2051722,1.205034,1.2048959,1.2047577,1.2046196,1.2044816,1.2043437,1.2042058,1.2040678,1.20393,1.2037922,1.2036545,1.2035168,1.2033792,1.2032416,1.2031041,1.2029666,1.2028291,1.2026917,1.2025543,1.202417,1.2022798,1.2021426,1.2020054,1.2018683,1.2017312,1.2015942,1.2014573,1.2013203,1.2011834,1.2010466,1.2009099,1.200773,1.2006364,1.2004998,1.200363,1.2002265,1.20009,1.1999536,1.1998172,1.1996808,1.1995444,1.1994082,1.1992719,1.1991358,1.1989995,1.1988635,1.1987275,1.1985915,1.1984556,1.1983196,1.1981838,1.1980479,1.1979122,1.1977764,1.1976408,1.1975051,1.1973696,1.197234,1.1970985,1.1969631,1.1968277,1.1966923,1.1965569,1.1964217,1.1962866,1.1961514,1.1960162,1.1958811,1.1957461,1.1956111,1.1954762,1.1953413,1.1952064,1.1950716,1.1949369,1.1948022,1.1946675,1.1945329,1.1943983,1.1942638,1.1941292,1.1939948,1.1938604,1.1937261,1.1935917,1.1934575,1.1933233,1.1931891,1.193055,1.1929209,1.1927868,1.192653,1.192519,1.1923851,1.1922512,1.1921173,1.1919836,1.1918498,1.1917162,1.1915826,1.191449,1.1913154,1.191182,1.1910485,1.1909151,1.1907817,1.1906484,1.1905152,1.190382,1.1902487,1.1901157,1.1899825,1.1898495,1.1897165,1.1895835,1.1894506,1.1893177,1.1891849,1.1890522,1.1889194,1.1887867,1.1886541,1.1885215,1.188389,1.1882564,1.188124,1.1879915,1.1878592,1.1877269,1.1875945,1.1874623,1.1873301,1.1871979,1.1870658,1.1869338,1.1868017,1.1866697,1.1865379,1.1864059,1.186274,1.1861422,1.1860105,1.1858788,1.185747,1.1856154,1.1854839,1.1853523,1.1852208,1.1850893,1.184958,1.1848266,1.1846952,1.184564,1.1844327,1.1843015,1.1841704,1.1840394,1.1839082,1.1837772,1.1836462,1.1835153,1.1833844,1.1832535,1.1831228,1.182992,1.1828613,1.1827306,1.1826,1.1824694,1.1823388,1.1822083,1.1820779,1.1819475,1.1818172,1.1816868,1.1815566,1.1814263,1.1812961,1.1811659,1.1810359,1.1809057,1.1807758,1.1806457,1.1805158,1.180386,1.180256,1.1801262,1.1799965,1.1798668,1.1797371,1.1796074,1.1794778,1.1793482,1.1792188,1.1790893,1.1789598,1.1788305,1.1787012,1.1785718,1.1784426,1.1783134,1.1781842,1.178055,1.177926,1.177797,1.177668,1.177539,1.1774101,1.1772811,1.1771524,1.1770236,1.1768948,1.1767662,1.1766374,1.1765089,1.1763803,1.1762518,1.1761233,1.1759948,1.1758664,1.175738,1.1756097,1.1754814,1.1753532,1.1752249,1.1750969,1.1749687,1.1748406,1.1747125,1.1745846,1.1744566,1.1743287,1.1742009,1.1740731,1.1739453,1.1738175,1.1736898,1.1735622,1.1734345,1.173307,1.1731794,1.173052,1.1729245,1.1727971,1.1726698,1.1725425,1.1724151,1.1722878,1.1721606,1.1720335,1.1719064,1.1717793,1.1716523,1.1715254,1.1713984,1.1712714,1.1711446,1.1710178,1.1708909,1.1707642,1.1706375,1.1705109,1.1703842,1.1702577,1.1701311,1.1700046,1.1698781,1.1697518,1.1696254,1.169499,1.1693727,1.1692464,1.1691203,1.1689941,1.168868,1.1687418,1.1686158,1.1684898,1.1683638,1.1682379,1.168112,1.1679862,1.1678604,1.1677346,1.1676089,1.1674832,1.1673576,1.167232,1.1671064,1.1669809,1.1668553,1.16673,1.1666045,1.1664792,1.1663538,1.1662287,1.1661034,1.1659782,1.165853,1.165728,1.1656028,1.1654778,1.1653528,1.1652279,1.165103,1.164978,1.1648532,1.1647284,1.1646037,1.1644789,1.1643543,1.1642296,1.164105,1.1639805,1.163856,1.1637315,1.1636071,1.1634827,1.1633583,1.163234,1.1631098,1.1629854,1.1628613,1.1627371,1.162613,1.1624889,1.162365,1.1622409,1.162117,1.161993,1.1618692,1.1617453,1.1616216,1.1614978,1.1613741,1.1612504,1.1611267,1.1610031,1.1608796,1.160756,1.1606325,1.1605091,1.1603857,1.1602623,1.160139,1.1600157,1.1598924,1.1597693,1.159646,1.159523,1.1593999,1.1592768,1.1591538,1.1590309,1.1589079,1.158785,1.1586622,1.1585394,1.1584166,1.1582938,1.1581712,1.1580485,1.1579258,1.1578033,1.1576807,1.1575582,1.1574358,1.1573133,1.1571909,1.1570686,1.1569463,1.156824,1.1567018,1.1565796,1.1564574,1.1563354,1.1562133,1.1560912,1.1559691,1.1558473,1.1557254,1.1556034,1.1554816,1.1553599,1.155238,1.1551163,1.1549946,1.154873,1.1547513,1.1546297,1.1545082,1.1543868,1.1542653,1.1541438,1.1540225,1.1539011,1.1537797,1.1536585,1.1535373,1.1534162,1.1532949,1.1531738,1.1530527,1.1529317,1.1528107,1.1526897,1.1525688,1.1524479,1.1523271,1.1522062,1.1520855,1.1519648,1.151844,1.1517234,1.1516027,1.1514822,1.1513616,1.1512411,1.1511207,1.1510003,1.1508799,1.1507595,1.1506392,1.1505189,1.1503986,1.1502783,1.1501583,1.1500381,1.149918,1.1497979,1.149678,1.149558,1.149438,1.1493181,1.1491983,1.1490784,1.1489586,1.1488389,1.1487192,1.1485995,1.1484798,1.1483603,1.1482407,1.1481211,1.1480016,1.1478821,1.1477628,1.1476433,1.147524,1.1474047,1.1472855,1.1471661,1.1470469,1.1469278,1.1468087,1.1466897,1.1465706,1.1464516,1.1463326,1.1462137,1.1460948,1.145976,1.1458571,1.1457382,1.1456195,1.1455008,1.1453822,1.1452634,1.1451449,1.1450263,1.1449077,1.1447892,1.1446708,1.1445524,1.144434,1.1443156,1.1441973,1.1440791,1.1439608,1.1438426,1.1437244,1.1436063,1.1434883,1.1433703,1.1432523,1.1431342,1.1430162,1.1428984,1.1427805,1.1426626,1.1425449,1.1424271,1.1423094,1.1421916,1.142074,1.1419564,1.1418388,1.1417212,1.1416037,1.1414863,1.1413689,1.1412514,1.1411341,1.1410168,1.1408995,1.1407822,1.140665,1.1405479,1.1404307,1.1403136,1.1401966,1.1400795,1.1399624,1.1398455,1.1397285,1.1396117,1.1394948,1.139378,1.1392612,1.1391444,1.1390277,1.138911,1.1387944,1.1386778,1.1385612,1.1384447,1.1383282,1.1382117,1.1380954,1.1379789,1.1378626,1.1377462,1.13763,1.1375138,1.1373975,1.1372813,1.1371652,1.1370491,1.136933,1.136817,1.136701,1.136585,1.1364691,1.1363531,1.1362373,1.1361215,1.1360058,1.13589,1.1357743,1.1356586,1.135543,1.1354274,1.1353117,1.1351962,1.1350807,1.1349652,1.1348498,1.1347344,1.134619,1.1345037,1.1343884,1.1342732,1.1341579,1.1340427,1.1339276,1.1338124,1.1336974,1.1335824,1.1334673,1.1333524,1.1332374,1.1331224,1.1330076,1.1328928,1.1327779,1.1326632,1.1325485,1.1324338,1.1323191,1.1322044,1.1320899,1.1319753,1.1318609,1.1317463,1.1316319,1.1315174,1.1314031,1.1312888,1.1311744,1.1310601,1.1309458,1.1308317,1.1307175,1.1306033,1.1304892,1.1303751,1.1302611,1.1301471,1.1300331,1.1299192,1.1298053,1.1296914,1.1295775,1.1294638,1.1293501,1.1292363,1.1291226,1.129009,1.1288953,1.1287817,1.1286682,1.1285547,1.1284412,1.1283277,1.1282142,1.1281009,1.1279875,1.1278743,1.127761,1.1276476,1.1275345,1.1274213,1.1273081,1.127195,1.127082,1.1269689,1.1268559,1.126743,1.12663,1.126517,1.1264042,1.1262914,1.1261785,1.1260657,1.1259531,1.1258403,1.1257277,1.125615,1.1255023,1.1253898,1.1252773,1.1251647,1.1250523,1.1249399,1.1248275,1.1247151,1.1246028,1.1244905,1.1243782,1.124266,1.1241537,1.1240416,1.1239295,1.1238173,1.1237053,1.1235932,1.1234813,1.1233693,1.1232574,1.1231455,1.1230336,1.1229218,1.12281,1.1226982,1.1225865,1.1224748,1.1223631,1.1222515,1.1221399,1.1220284,1.1219168,1.1218053,1.1216938,1.1215824,1.1214709,1.1213596,1.1212482,1.121137,1.1210257,1.1209145,1.1208034,1.1206921,1.120581,1.1204698,1.1203588,1.1202477,1.1201367,1.1200259,1.1199149,1.119804,1.119693,1.1195823,1.1194714,1.1193607,1.1192499,1.1191393,1.1190286,1.118918,1.1188073,1.1186968,1.1185862,1.1184757,1.1183652,1.1182548,1.1181444,1.118034],"x":[0.01,0.010157936825269892,0.010315873650539785,0.010473810475809676,0.010631747301079568,0.01078968412634946,0.010947620951619353,0.011105557776889244,0.011263494602159136,0.011421431427429029,0.01157936825269892,0.011737305077968812,0.011895241903238705,0.012053178728508597,0.012211115553778488,0.012369052379048381,0.012526989204318273,0.012684926029588164,0.012842862854858058,0.01300079968012795,0.01315873650539784,0.013316673330667732,0.013474610155937625,0.013632546981207517,0.013790483806477408,0.013948420631747302,0.014106357457017193,0.014264294282287085,0.014422231107556978,0.01458016793282687,0.01473810475809676,0.014896041583366654,0.015053978408636546,0.015211915233906437,0.01536985205917633,0.015527788884446222,0.015685725709716113,0.015843662534986005,0.016001599360255896,0.01615953618552579,0.016317473010795683,0.016475409836065574,0.016633346661335466,0.016791283486605357,0.01694922031187525,0.01710715713714514,0.017265093962415035,0.017423030787684927,0.01758096761295482,0.01773890443822471,0.0178968412634946,0.018054778088764493,0.018212714914034388,0.01837065173930428,0.01852858856457417,0.018686525389844062,0.018844462215113954,0.019002399040383845,0.01916033586565374,0.01931827269092363,0.019476209516193523,0.019634146341463415,0.019792083166733306,0.019950019992003198,0.02010795681727309,0.020265893642542984,0.020423830467812876,0.020581767293082767,0.02073970411835266,0.02089764094362255,0.02105557776889244,0.021213514594162337,0.021371451419432228,0.02152938824470212,0.02168732506997201,0.021845261895241903,0.022003198720511794,0.022161135545781686,0.02231907237105158,0.022477009196321472,0.022634946021591364,0.022792882846861255,0.022950819672131147,0.023108756497401038,0.023266693322670933,0.023424630147940825,0.023582566973210716,0.023740503798480608,0.0238984406237505,0.02405637744902039,0.024214314274290286,0.024372251099560177,0.02453018792483007,0.02468812475009996,0.02484606157536985,0.025003998400639743,0.025161935225909635,0.02531987205117953,0.02547780887644942,0.025635745701719313,0.025793682526989204,0.025951619352259096,0.026109556177528987,0.026267493002798882,0.026425429828068774,0.026583366653338665,0.026741303478608557,0.026899240303878448,0.02705717712914834,0.02721511395441823,0.027373050779688126,0.027530987604958018,0.02768892443022791,0.0278468612554978,0.028004798080767692,0.028162734906037584,0.02832067173130748,0.02847860855657737,0.02863654538184726,0.028794482207117153,0.028952419032387045,0.029110355857656936,0.02926829268292683,0.029426229508196722,0.029584166333466614,0.029742103158736505,0.029900039984006397,0.03005797680927629,0.03021591363454618,0.030373850459816075,0.030531787285085966,0.030689724110355858,0.03084766093562575,0.03100559776089564,0.031163534586165532,0.031321471411435424,0.031479408236705315,0.03163734506197521,0.031795281887245105,0.031953218712515,0.03211115553778489,0.03226909236305478,0.03242702918832467,0.03258496601359456,0.032742902838864454,0.032900839664134346,0.03305877648940424,0.03321671331467413,0.03337465013994402,0.03353258696521391,0.0336905237904838,0.0338484606157537,0.03400639744102359,0.034164334266293485,0.034322271091563376,0.03448020791683327,0.03463814474210316,0.03479608156737305,0.03495401839264294,0.035111955217912834,0.035269892043182725,0.03542782886845262,0.03558576569372251,0.0357437025189924,0.0359016393442623,0.03605957616953219,0.03621751299480208,0.03637544982007197,0.036533386645341864,0.036691323470611756,0.03684926029588165,0.03700719712115154,0.03716513394642143,0.03732307077169132,0.03748100759696121,0.037638944422231105,0.037796881247500996,0.037954818072770895,0.038112754898040786,0.03827069172331068,0.03842862854858057,0.03858656537385046,0.03874450219912035,0.038902439024390244,0.039060375849660135,0.03921831267493003,0.03937624950019992,0.03953418632546981,0.0396921231507397,0.03985005997600959,0.04000799680127949,0.04016593362654938,0.040323870451819274,0.040481807277089166,0.04063974410235906,0.04079768092762895,0.04095561775289884,0.04111355457816873,0.04127149140343862,0.041429428228708515,0.041587365053978406,0.0417453018792483,0.041903238704518196,0.04206117552978809,0.04221911235505798,0.04237704918032787,0.04253498600559776,0.042692922830867654,0.042850859656137545,0.04300879648140744,0.04316673330667733,0.04332467013194722,0.04348260695721711,0.043640543782487,0.043798480607756894,0.04395641743302679,0.044114354258296684,0.044272291083566576,0.04443022790883647,0.04458816473410636,0.04474610155937625,0.04490403838464614,0.04506197520991603,0.045219912035185925,0.045377848860455816,0.04553578568572571,0.0456937225109956,0.04585165933626549,0.04600959616153539,0.04616753298680528,0.04632546981207517,0.046483406637345064,0.046641343462614955,0.04679928028788485,0.04695721711315474,0.04711515393842463,0.04727309076369452,0.04743102758896441,0.047588964414234304,0.047746901239504196,0.04790483806477409,0.048062774890043986,0.04822071171531388,0.04837864854058377,0.04853658536585366,0.04869452219112355,0.04885245901639344,0.049010395841663335,0.049168332666933226,0.04932626949220312,0.04948420631747301,0.0496421431427429,0.04980007996801279,0.049958016793282684,0.05011595361855258,0.05027389044382247,0.050431827269092365,0.050589764094362256,0.05074770091963215,0.05090563774490204,0.05106357457017193,0.05122151139544182,0.051379448220711714,0.051537385045981605,0.0516953218712515,0.05185325869652139,0.05201119552179129,0.05216913234706118,0.05232706917233107,0.05248500599760096,0.05264294282287085,0.052800879648140744,0.052958816473410636,0.05311675329868053,0.05327469012395042,0.05343262694922031,0.0535905637744902,0.05374850059976009,0.053906437425029985,0.05406437425029988,0.054222311075569775,0.054380247900839666,0.05453818472610956,0.05469612155137945,0.05485405837664934,0.05501199520191923,0.055169932027189124,0.055327868852459015,0.05548580567772891,0.0556437425029988,0.05580167932826869,0.05595961615353858,0.05611755297880848,0.05627548980407837,0.05643342662934826,0.056591363454618154,0.056749300279888046,0.05690723710515794,0.05706517393042783,0.05722311075569772,0.05738104758096761,0.0575389844062375,0.057696921231507395,0.057854858056777286,0.05801279488204718,0.058170731707317076,0.05832866853258697,0.05848660535785686,0.05864454218312675,0.05880247900839664,0.058960415833666534,0.059118352658936425,0.05927628948420632,0.05943422630947621,0.0595921631347461,0.05975009996001599,0.05990803678528588,0.060065973610555774,0.06022391043582567,0.060381847261095564,0.060539784086365456,0.06069772091163535,0.06085565773690524,0.06101359456217513,0.06117153138744502,0.06132946821271491,0.061487405037984805,0.061645341863254696,0.06180327868852459,0.06196121551379448,0.06211915233906438,0.06227708916433427,0.06243502598960416,0.06259296281487405,0.06275089964014394,0.06290883646541383,0.06306677329068372,0.06322471011595363,0.06338264694122352,0.06354058376649341,0.0636985205917633,0.06385645741703319,0.06401439424230308,0.06417233106757297,0.06433026789284287,0.06448820471811276,0.06464614154338265,0.06480407836865254,0.06496201519392243,0.06511995201919232,0.06527788884446221,0.0654358256697321,0.065593762495002,0.06575169932027189,0.06590963614554178,0.06606757297081167,0.06622550979608156,0.06638344662135146,0.06654138344662135,0.06669932027189124,0.06685725709716113,0.06701519392243102,0.06717313074770093,0.06733106757297082,0.06748900439824071,0.0676469412235106,0.06780487804878049,0.06796281487405038,0.06812075169932028,0.06827868852459017,0.06843662534986006,0.06859456217512995,0.06875249900039984,0.06891043582566973,0.06906837265093962,0.06922630947620952,0.06938424630147941,0.0695421831267493,0.06970011995201919,0.06985805677728908,0.07001599360255897,0.07017393042782887,0.07033186725309876,0.07048980407836865,0.07064774090363854,0.07080567772890843,0.07096361455417832,0.07112155137944821,0.07127948820471812,0.07143742502998801,0.0715953618552579,0.0717532986805278,0.07191123550579769,0.07206917233106758,0.07222710915633747,0.07238504598160736,0.07254298280687725,0.07270091963214714,0.07285885645741703,0.07301679328268693,0.07317473010795682,0.07333266693322671,0.0734906037584966,0.07364854058376649,0.07380647740903638,0.07396441423430627,0.07412235105957617,0.07428028788484606,0.07443822471011595,0.07459616153538584,0.07475409836065573,0.07491203518592562,0.07506997201119552,0.0752279088364654,0.07538584566173531,0.0755437824870052,0.0757017193122751,0.07585965613754499,0.07601759296281488,0.07617552978808477,0.07633346661335466,0.07649140343862455,0.07664934026389444,0.07680727708916434,0.07696521391443423,0.07712315073970412,0.07728108756497401,0.0774390243902439,0.0775969612155138,0.07775489804078368,0.07791283486605358,0.07807077169132347,0.07822870851659336,0.07838664534186325,0.07854458216713314,0.07870251899240303,0.07886045581767293,0.07901839264294282,0.07917632946821271,0.07933426629348261,0.0794922031187525,0.0796501399440224,0.07980807676929229,0.07996601359456218,0.08012395041983207,0.08028188724510196,0.08043982407037185,0.08059776089564175,0.08075569772091164,0.08091363454618153,0.08107157137145142,0.08122950819672131,0.0813874450219912,0.0815453818472611,0.08170331867253099,0.08186125549780088,0.08201919232307077,0.08217712914834066,0.08233506597361055,0.08249300279888044,0.08265093962415034,0.08280887644942023,0.08296681327469012,0.08312475009996001,0.0832826869252299,0.0834406237504998,0.0835985605757697,0.08375649740103959,0.08391443422630948,0.08407237105157937,0.08423030787684926,0.08438824470211916,0.08454618152738905,0.08470411835265894,0.08486205517792883,0.08501999200319872,0.08517792882846861,0.0853358656537385,0.0854938024790084,0.08565173930427829,0.08580967612954818,0.08596761295481807,0.08612554978008796,0.08628348660535785,0.08644142343062775,0.08659936025589764,0.08675729708116753,0.08691523390643742,0.08707317073170731,0.0872311075569772,0.08738904438224711,0.087546981207517,0.08770491803278689,0.08786285485805678,0.08802079168332667,0.08817872850859657,0.08833666533386646,0.08849460215913635,0.08865253898440624,0.08881047580967613,0.08896841263494602,0.08912634946021591,0.0892842862854858,0.0894422231107557,0.08960015993602559,0.08975809676129548,0.08991603358656537,0.09007397041183526,0.09023190723710516,0.09038984406237505,0.09054778088764494,0.09070571771291483,0.09086365453818472,0.09102159136345461,0.0911795281887245,0.0913374650139944,0.0914954018392643,0.09165333866453419,0.09181127548980408,0.09196921231507398,0.09212714914034387,0.09228508596561376,0.09244302279088365,0.09260095961615354,0.09275889644142343,0.09291683326669332,0.09307477009196322,0.09323270691723311,0.093390643742503,0.09354858056777289,0.09370651739304278,0.09386445421831267,0.09402239104358256,0.09418032786885246,0.09433826469412235,0.09449620151939224,0.09465413834466213,0.09481207516993202,0.09497001199520191,0.0951279488204718,0.0952858856457417,0.09544382247101159,0.0956017592962815,0.09575969612155139,0.09591763294682128,0.09607556977209117,0.09623350659736106,0.09639144342263095,0.09654938024790084,0.09670731707317073,0.09686525389844063,0.09702319072371052,0.09718112754898041,0.0973390643742503,0.09749700119952019,0.09765493802479008,0.09781287485005997,0.09797081167532987,0.09812874850059976,0.09828668532586965,0.09844462215113954,0.09860255897640943,0.09876049580167932,0.09891843262694922,0.0990763694522191,0.099234306277489,0.09939224310275889,0.0995501799280288,0.09970811675329869,0.09986605357856858,0.10002399040383847,0.10018192722910836,0.10033986405437825,0.10049780087964814,0.10065573770491804,0.10081367453018793,0.10097161135545782,0.10112954818072771,0.1012874850059976,0.1014454218312675,0.10160335865653738,0.10176129548180728,0.10191923230707717,0.10207716913234706,0.10223510595761695,0.10239304278288684,0.10255097960815673,0.10270891643342663,0.10286685325869652,0.10302479008396641,0.1031827269092363,0.10334066373450619,0.10349860055977608,0.10365653738504599,0.10381447421031588,0.10397241103558577,0.10413034786085566,0.10428828468612555,0.10444622151139545,0.10460415833666534,0.10476209516193523,0.10492003198720512,0.10507796881247501,0.1052359056377449,0.1053938424630148,0.10555177928828469,0.10570971611355458,0.10586765293882447,0.10602558976409436,0.10618352658936425,0.10634146341463414,0.10649940023990404,0.10665733706517393,0.10681527389044382,0.10697321071571371,0.1071311475409836,0.10728908436625349,0.10744702119152338,0.10760495801679329,0.10776289484206318,0.10792083166733307,0.10807876849260296,0.10823670531787286,0.10839464214314275,0.10855257896841264,0.10871051579368253,0.10886845261895242,0.10902638944422231,0.1091843262694922,0.1093422630947621,0.10950019992003199,0.10965813674530188,0.10981607357057177,0.10997401039584166,0.11013194722111155,0.11028988404638145,0.11044782087165134,0.11060575769692123,0.11076369452219112,0.11092163134746101,0.1110795681727309,0.1112375049980008,0.11139544182327069,0.11155337864854058,0.11171131547381048,0.11186925229908037,0.11202718912435027,0.11218512594962016,0.11234306277489005,0.11250099960015994,0.11265893642542983,0.11281687325069972,0.11297481007596961,0.1131327469012395,0.1132906837265094,0.11344862055177929,0.11360655737704918,0.11376449420231907,0.11392243102758896,0.11408036785285885,0.11423830467812875,0.11439624150339864,0.11455417832866853,0.11471211515393842,0.11487005197920831,0.1150279888044782,0.1151859256297481,0.11534386245501799,0.11550179928028788,0.11565973610555777,0.11581767293082768,0.11597560975609757,0.11613354658136746,0.11629148340663735,0.11644942023190724,0.11660735705717713,0.11676529388244702,0.11692323070771692,0.11708116753298681,0.1172391043582567,0.11739704118352659,0.11755497800879648,0.11771291483406637,0.11787085165933626,0.11802878848460616,0.11818672530987605,0.11834466213514594,0.11850259896041583,0.11866053578568572,0.11881847261095561,0.1189764094362255,0.1191343462614954,0.11929228308676529,0.11945021991203518,0.11960815673730507,0.11976609356257498,0.11992403038784487,0.12008196721311476,0.12023990403838465,0.12039784086365454,0.12055577768892443,0.12071371451419433,0.12087165133946422,0.12102958816473411,0.121187524990004,0.12134546181527389,0.12150339864054378,0.12166133546581367,0.12181927229108357,0.12197720911635346,0.12213514594162335,0.12229308276689324,0.12245101959216313,0.12260895641743302,0.12276689324270292,0.1229248300679728,0.1230827668932427,0.12324070371851259,0.12339864054378248,0.12355657736905237,0.12371451419432226,0.12387245101959217,0.12403038784486206,0.12418832467013195,0.12434626149540184,0.12450419832067174,0.12466213514594163,0.12482007197121152,0.12497800879648141,0.1251359456217513,0.1252938824470212,0.12545181927229107,0.12560975609756098,0.12576769292283088,0.12592562974810076,0.12608356657337066,0.12624150339864054,0.12639944022391045,0.12655737704918033,0.12671531387445023,0.1268732506997201,0.12703118752499,0.1271891243502599,0.1273470611755298,0.12750499800079967,0.12766293482606958,0.12782087165133946,0.12797880847660936,0.12813674530187924,0.12829468212714915,0.12845261895241902,0.12861055577768893,0.1287684926029588,0.1289264294282287,0.1290843662534986,0.1292423030787685,0.12940023990403837,0.12955817672930828,0.12971611355457816,0.12987405037984806,0.13003198720511797,0.13018992403038784,0.13034786085565775,0.13050579768092763,0.13066373450619753,0.1308216713314674,0.13097960815673731,0.1311375449820072,0.1312954818072771,0.13145341863254698,0.13161135545781688,0.13176929228308676,0.13192722910835666,0.13208516593362654,0.13224310275889645,0.13240103958416632,0.13255897640943623,0.1327169132347061,0.132874850059976,0.1330327868852459,0.1331907237105158,0.13334866053578567,0.13350659736105558,0.13366453418632546,0.13382247101159536,0.13398040783686527,0.13413834466213514,0.13429628148740505,0.13445421831267493,0.13461215513794483,0.1347700919632147,0.13492802878848462,0.1350859656137545,0.1352439024390244,0.13540183926429428,0.13555977608956418,0.13571771291483406,0.13587564974010397,0.13603358656537384,0.13619152339064375,0.13634946021591363,0.13650739704118353,0.1366653338664534,0.13682327069172331,0.1369812075169932,0.1371391443422631,0.13729708116753297,0.13745501799280288,0.13761295481807276,0.13777089164334266,0.13792882846861257,0.13808676529388245,0.13824470211915235,0.13840263894442223,0.13856057576969213,0.138718512594962,0.13887644942023192,0.1390343862455018,0.1391923230707717,0.13935025989604158,0.13950819672131148,0.13966613354658136,0.13982407037185127,0.13998200719712114,0.14013994402239105,0.14029788084766093,0.14045581767293083,0.1406137544982007,0.14077169132347062,0.1409296281487405,0.1410875649740104,0.14124550179928028,0.14140343862455018,0.14156137544982006,0.14171931227508996,0.14187724910035984,0.14203518592562975,0.14219312275089965,0.14235105957616953,0.14250899640143944,0.1426669332267093,0.14282487005197922,0.1429828068772491,0.143140743702519,0.14329868052778888,0.14345661735305879,0.14361455417832866,0.14377249100359857,0.14393042782886845,0.14408836465413835,0.14424630147940823,0.14440423830467813,0.144562175129948,0.14472011195521792,0.1448780487804878,0.1450359856057577,0.14519392243102758,0.14535185925629748,0.14550979608156736,0.14566773290683727,0.14582566973210714,0.14598360655737705,0.14614154338264695,0.14629948020791683,0.14645741703318674,0.14661535385845662,0.14677329068372652,0.1469312275089964,0.1470891643342663,0.14724710115953618,0.1474050379848061,0.14756297481007596,0.14772091163534587,0.14787884846061575,0.14803678528588565,0.14819472211115553,0.14835265893642544,0.1485105957616953,0.14866853258696522,0.1488264694122351,0.148984406237505,0.14914234306277488,0.14930027988804478,0.14945821671331466,0.14961615353858457,0.14977409036385445,0.14993202718912435,0.15008996401439426,0.15024790083966413,0.15040583766493404,0.15056377449020392,0.15072171131547382,0.1508796481407437,0.1510375849660136,0.15119552179128348,0.1513534586165534,0.15151139544182327,0.15166933226709317,0.15182726909236305,0.15198520591763295,0.15214314274290283,0.15230107956817274,0.15245901639344261,0.15261695321871252,0.1527748900439824,0.1529328268692523,0.15309076369452218,0.15324870051979209,0.15340663734506196,0.15356457417033187,0.15372251099560175,0.15388044782087165,0.15403838464614153,0.15419632147141143,0.15435425829668134,0.15451219512195122,0.15467013194722112,0.154828068772491,0.1549860055977609,0.15514394242303078,0.1553018792483007,0.15545981607357057,0.15561775289884047,0.15577568972411035,0.15593362654938026,0.15609156337465013,0.15624950019992004,0.15640743702518992,0.15656537385045982,0.1567233106757297,0.1568812475009996,0.15703918432626948,0.1571971211515394,0.15735505797680926,0.15751299480207917,0.15767093162734905,0.15782886845261895,0.15798680527788883,0.15814474210315874,0.15830267892842864,0.15846061575369852,0.15861855257896842,0.1587764894042383,0.1589344262295082,0.15909236305477809,0.159250299880048,0.15940823670531787,0.15956617353058777,0.15972411035585765,0.15988204718112756,0.16003998400639743,0.16019792083166734,0.16035585765693722,0.16051379448220712,0.160671731307477,0.1608296681327469,0.16098760495801678,0.1611455417832867,0.16130347860855657,0.16146141543382647,0.16161935225909635,0.16177728908436625,0.16193522590963613,0.16209316273490604,0.16225109956017594,0.16240903638544582,0.16256697321071573,0.1627249100359856,0.1628828468612555,0.1630407836865254,0.1631987205117953,0.16335665733706517,0.16351459416233508,0.16367253098760495,0.16383046781287486,0.16398840463814474,0.16414634146341464,0.16430427828868452,0.16446221511395442,0.1646201519392243,0.1647780887644942,0.16493602558976408,0.165093962415034,0.16525189924030387,0.16540983606557377,0.16556777289084365,0.16572570971611356,0.16588364654138343,0.16604158336665334,0.16619952019192324,0.16635745701719312,0.16651539384246303,0.1666733306677329,0.1668312674930028,0.1669892043182727,0.1671471411435426,0.16730507796881247,0.16746301479408238,0.16762095161935225,0.16777888844462216,0.16793682526989204,0.16809476209516194,0.16825269892043182,0.16841063574570173,0.1685685725709716,0.1687265093962415,0.1688844462215114,0.1690423830467813,0.16920031987205117,0.16935825669732107,0.16951619352259095,0.16967413034786086,0.16983206717313074,0.16999000399840064,0.17014794082367052,0.17030587764894042,0.17046381447421033,0.1706217512994802,0.1707796881247501,0.17093762495002,0.1710955617752899,0.17125349860055977,0.17141143542582968,0.17156937225109956,0.17172730907636946,0.17188524590163934,0.17204318272690924,0.17220111955217912,0.17235905637744903,0.1725169932027189,0.1726749300279888,0.1728328668532587,0.1729908036785286,0.17314874050379847,0.17330667732906838,0.17346461415433825,0.17362255097960816,0.17378048780487804,0.17393842463014794,0.17409636145541782,0.17425429828068772,0.17441223510595763,0.1745701719312275,0.1747281087564974,0.1748860455817673,0.1750439824070372,0.17520191923230707,0.17535985605757698,0.17551779288284686,0.17567572970811676,0.17583366653338664,0.17599160335865655,0.17614954018392642,0.17630747700919633,0.1764654138344662,0.1766233506597361,0.176781287485006,0.1769392243102759,0.17709716113554577,0.17725509796081568,0.17741303478608555,0.17757097161135546,0.17772890843662534,0.17788684526189524,0.17804478208716512,0.17820271891243503,0.17836065573770493,0.1785185925629748,0.17867652938824471,0.1788344662135146,0.1789924030387845,0.17915033986405438,0.17930827668932428,0.17946621351459416,0.17962415033986406,0.17978208716513394,0.17994002399040385,0.18009796081567372,0.18025589764094363,0.1804138344662135,0.1805717712914834,0.1807297081167533,0.1808876449420232,0.18104558176729307,0.18120351859256298,0.18136145541783286,0.18151939224310276,0.18167732906837264,0.18183526589364254,0.18199320271891242,0.18215113954418233,0.1823090763694522,0.1824670131947221,0.18262495001999202,0.1827828868452619,0.1829408236705318,0.18309876049580168,0.18325669732107158,0.18341463414634146,0.18357257097161137,0.18373050779688124,0.18388844462215115,0.18404638144742103,0.18420431827269093,0.1843622550979608,0.18452019192323071,0.1846781287485006,0.1848360655737705,0.18499400239904037,0.18515193922431028,0.18530987604958016,0.18546781287485006,0.18562574970011994,0.18578368652538985,0.18594162335065972,0.18609956017592963,0.1862574970011995,0.1864154338264694,0.18657337065173932,0.1867313074770092,0.1868892443022791,0.18704718112754898,0.18720511795281888,0.18736305477808876,0.18752099160335867,0.18767892842862854,0.18783686525389845,0.18799480207916833,0.18815273890443823,0.1883106757297081,0.18846861255497802,0.1886265493802479,0.1887844862055178,0.18894242303078768,0.18910035985605758,0.18925829668132746,0.18941623350659736,0.18957417033186724,0.18973210715713715,0.18989004398240703,0.19004798080767693,0.1902059176329468,0.1903638544582167,0.19052179128348662,0.1906797281087565,0.1908376649340264,0.19099560175929628,0.19115353858456618,0.19131147540983606,0.19146941223510597,0.19162734906037585,0.19178528588564575,0.19194322271091563,0.19210115953618553,0.1922590963614554,0.19241703318672532,0.1925749700119952,0.1927329068372651,0.19289084366253498,0.19304878048780488,0.19320671731307476,0.19336465413834467,0.19352259096361454,0.19368052778888445,0.19383846461415433,0.19399640143942423,0.1941543382646941,0.19431227508996401,0.1944702119152339,0.1946281487405038,0.1947860855657737,0.19494402239104358,0.1951019592163135,0.19525989604158336,0.19541783286685327,0.19557576969212315,0.19573370651739305,0.19589164334266293,0.19604958016793284,0.1962075169932027,0.19636545381847262,0.1965233906437425,0.1966813274690124,0.19683926429428228,0.19699720111955218,0.19715513794482206,0.19731307477009197,0.19747101159536185,0.19762894842063175,0.19778688524590163,0.19794482207117153,0.1981027588964414,0.19826069572171132,0.1984186325469812,0.1985765693722511,0.198734506197521,0.19889244302279088,0.1990503798480608,0.19920831667333067,0.19936625349860057,0.19952419032387045,0.19968212714914035,0.19984006397441023,0.19999800079968014,0.20015593762495001,0.20031387445021992,0.2004718112754898,0.2006297481007597,0.20078768492602958,0.20094562175129949,0.20110355857656936,0.20126149540183927,0.20141943222710915,0.20157736905237905,0.20173530587764893,0.20189324270291883,0.2020511795281887,0.20220911635345862,0.2023670531787285,0.2025249900039984,0.2026829268292683,0.20284086365453818,0.2029988004798081,0.20315673730507797,0.20331467413034787,0.20347261095561775,0.20363054778088766,0.20378848460615753,0.20394642143142744,0.20410435825669732,0.20426229508196722,0.2044202319072371,0.204578168732507,0.20473610555777688,0.2048940423830468,0.20505197920831666,0.20520991603358657,0.20536785285885645,0.20552578968412635,0.20568372650939623,0.20584166333466614,0.205999600159936,0.20615753698520592,0.2063154738104758,0.2064734106357457,0.2066313474610156,0.20678928428628549,0.2069472211115554,0.20710515793682527,0.20726309476209517,0.20742103158736505,0.20757896841263496,0.20773690523790483,0.20789484206317474,0.20805277888844462,0.20821071571371452,0.2083686525389844,0.2085265893642543,0.20868452618952418,0.2088424630147941,0.20900039984006397,0.20915833666533387,0.20931627349060375,0.20947421031587365,0.20963214714114353,0.20979008396641344,0.20994802079168332,0.21010595761695322,0.2102638944422231,0.210421831267493,0.21057976809276288,0.2107377049180328,0.2108956417433027,0.21105357856857257,0.21121151539384247,0.21136945221911235,0.21152738904438226,0.21168532586965214,0.21184326269492204,0.21200119952019192,0.21215913634546182,0.2123170731707317,0.2124750099960016,0.21263294682127148,0.2127908836465414,0.21294882047181127,0.21310675729708117,0.21326469412235105,0.21342263094762096,0.21358056777289083,0.21373850459816074,0.21389644142343062,0.21405437824870052,0.2142123150739704,0.2143702518992403,0.21452818872451018,0.2146861255497801,0.21484406237505,0.21500199920031987,0.21515993602558978,0.21531787285085965,0.21547580967612956,0.21563374650139944,0.21579168332666934,0.21594962015193922,0.21610755697720913,0.216265493802479,0.2164234306277489,0.21658136745301879,0.2167393042782887,0.21689724110355857,0.21705517792882847,0.21721311475409835,0.21737105157936826,0.21752898840463814,0.21768692522990804,0.21784486205517792,0.21800279888044782,0.2181607357057177,0.2183186725309876,0.21847660935625748,0.2186345461815274,0.2187924830067973,0.21895041983206717,0.21910835665733708,0.21926629348260696,0.21942423030787686,0.21958216713314674,0.21974010395841664,0.21989804078368652,0.22005597760895643,0.2202139144342263,0.2203718512594962,0.2205297880847661,0.220687724910036,0.22084566173530587,0.22100359856057578,0.22116153538584565,0.22131947221111556,0.22147740903638544,0.22163534586165534,0.22179328268692522,0.22195121951219512,0.222109156337465,0.2222670931627349,0.22242502998800479,0.2225829668132747,0.22274090363854457,0.22289884046381447,0.22305677728908438,0.22321471411435426,0.22337265093962416,0.22353058776489404,0.22368852459016395,0.22384646141543382,0.22400439824070373,0.2241623350659736,0.2243202718912435,0.2244782087165134,0.2246361455417833,0.22479408236705317,0.22495201919232308,0.22510995601759295,0.22526789284286286,0.22542582966813274,0.22558376649340264,0.22574170331867252,0.22589964014394243,0.2260575769692123,0.2262155137944822,0.2263734506197521,0.226531387445022,0.22668932427029187,0.22684726109556178,0.22700519792083168,0.22716313474610156,0.22732107157137146,0.22747900839664134,0.22763694522191125,0.22779488204718112,0.22795281887245103,0.2281107556977209,0.2282686925229908,0.2284266293482607,0.2285845661735306,0.22874250299880047,0.22890043982407038,0.22905837664934026,0.22921631347461016,0.22937425029988004,0.22953218712514994,0.22969012395041982,0.22984806077568973,0.2300059976009596,0.2301639344262295,0.2303218712514994,0.2304798080767693,0.23063774490203917,0.23079568172730908,0.23095361855257898,0.23111155537784886,0.23126949220311876,0.23142742902838864,0.23158536585365855,0.23174330267892843,0.23190123950419833,0.2320591763294682,0.23221711315473811,0.232375049980008,0.2325329868052779,0.23269092363054777,0.23284886045581768,0.23300679728108756,0.23316473410635746,0.23332267093162734,0.23348060775689725,0.23363854458216712,0.23379648140743703,0.2339544182327069,0.2341123550579768,0.2342702918832467,0.2344282287085166,0.23458616553378647,0.23474410235905638,0.23490203918432626,0.23505997600959616,0.23521791283486607,0.23537584966013594,0.23553378648540585,0.23569172331067573,0.23584966013594563,0.2360075969612155,0.23616553378648542,0.2363234706117553,0.2364814074370252,0.23663934426229508,0.23679728108756498,0.23695521791283486,0.23711315473810476,0.23727109156337464,0.23742902838864455,0.23758696521391443,0.23774490203918433,0.2379028388644542,0.2380607756897241,0.238218712514994,0.2383766493402639,0.23853458616553377,0.23869252299080368,0.23885045981607356,0.23900839664134346,0.23916633346661337,0.23932427029188325,0.23948220711715315,0.23964014394242303,0.23979808076769293,0.2399560175929628,0.24011395441823272,0.2402718912435026,0.2404298280687725,0.24058776489404238,0.24074570171931228,0.24090363854458216,0.24106157536985207,0.24121951219512194,0.24137744902039185,0.24153538584566173,0.24169332267093163,0.2418512594962015,0.24200919632147141,0.2421671331467413,0.2423250699720112,0.24248300679728108,0.24264094362255098,0.24279888044782086,0.24295681727309076,0.24311475409836067,0.24327269092363055,0.24343062774890045,0.24358856457417033,0.24374650139944024,0.2439044382247101,0.24406237504998002,0.2442203118752499,0.2443782487005198,0.24453618552578968,0.24469412235105958,0.24485205917632946,0.24500999600159937,0.24516793282686924,0.24532586965213915,0.24548380647740903,0.24564174330267893,0.2457996801279488,0.24595761695321872,0.2461155537784886,0.2462734906037585,0.24643142742902838,0.24658936425429828,0.24674730107956816,0.24690523790483807,0.24706317473010797,0.24722111155537785,0.24737904838064775,0.24753698520591763,0.24769492203118754,0.24785285885645741,0.24801079568172732,0.2481687325069972,0.2483266693322671,0.24848460615753698,0.24864254298280689,0.24880047980807676,0.24895841663334667,0.24911635345861655,0.24927429028388645,0.24943222710915633,0.24959016393442623,0.2497481007596961,0.24990603758496602,0.2500639744102359,0.2502219112355058,0.2503798480607757,0.25053778488604556,0.2506957217113155,0.25085365853658537,0.25101159536185524,0.2511695321871252,0.25132746901239505,0.25148540583766493,0.2516433426629348,0.25180127948820474,0.2519592163134746,0.2521171531387445,0.2522750899640144,0.2524330267892843,0.2525909636145542,0.25274890043982406,0.25290683726509394,0.2530647740903639,0.25322271091563375,0.25338064774090363,0.2535385845661735,0.25369652139144344,0.2538544582167133,0.2540123950419832,0.2541703318672531,0.254328268692523,0.2544862055177929,0.25464414234306276,0.25480207916833264,0.2549600159936026,0.25511795281887245,0.25527588964414233,0.25543382646941226,0.25559176329468214,0.255749700119952,0.2559076369452219,0.25606557377049183,0.2562235105957617,0.2563814474210316,0.25653938424630146,0.2566973210715714,0.25685525789684127,0.25701319472211115,0.257171131547381,0.25732906837265096,0.25748700519792084,0.2576449420231907,0.2578028788484606,0.2579608156737305,0.2581187524990004,0.2582766893242703,0.25843462614954016,0.2585925629748101,0.25875049980007997,0.25890843662534985,0.2590663734506197,0.25922431027588966,0.25938224710115954,0.2595401839264294,0.25969812075169935,0.2598560575769692,0.2600139944022391,0.260171931227509,0.2603298680527789,0.2604878048780488,0.26064574170331867,0.26080367852858855,0.2609616153538585,0.26111955217912836,0.26127748900439823,0.2614354258296681,0.26159336265493804,0.2617512994802079,0.2619092363054778,0.2620671731307477,0.2622251099560176,0.2623830467812875,0.26254098360655737,0.26269892043182724,0.2628568572570972,0.26301479408236705,0.26317273090763693,0.26333066773290686,0.26348860455817674,0.2636465413834466,0.2638044782087165,0.26396241503398643,0.2641203518592563,0.2642782886845262,0.26443622550979606,0.264594162335066,0.2647520991603359,0.26491003598560575,0.26506797281087563,0.26522590963614556,0.26538384646141544,0.2655417832866853,0.2656997201119552,0.26585765693722513,0.266015593762495,0.2661735305877649,0.26633146741303476,0.2664894042383047,0.26664734106357457,0.26680527788884445,0.2669632147141143,0.26712115153938426,0.26727908836465414,0.267437025189924,0.26759496201519395,0.2677528988404638,0.2679108356657337,0.2680687724910036,0.2682267093162735,0.2683846461415434,0.26854258296681327,0.26870051979208315,0.2688584566173531,0.26901639344262296,0.26917433026789284,0.2693322670931627,0.26949020391843265,0.2696481407437025,0.2698060775689724,0.2699640143942423,0.2701219512195122,0.2702798880447821,0.27043782487005197,0.27059576169532185,0.2707536985205918,0.27091163534586166,0.27106957217113153,0.2712275089964014,0.27138544582167135,0.2715433826469412,0.2717013194722111,0.27185925629748103,0.2720171931227509,0.2721751299480208,0.27233306677329067,0.2724910035985606,0.2726489404238305,0.27280687724910035,0.27296481407437023,0.27312275089964017,0.27328068772491004,0.2734386245501799,0.2735965613754498,0.27375449820071973,0.2739124350259896,0.2740703718512595,0.27422830867652936,0.2743862455017993,0.2745441823270692,0.27470211915233905,0.27486005597760893,0.27501799280287886,0.27517592962814874,0.2753338664534186,0.27549180327868855,0.27564974010395843,0.2758076769292283,0.2759656137544982,0.2761235505797681,0.276281487405038,0.2764394242303079,0.27659736105557775,0.2767552978808477,0.27691323470611756,0.27707117153138744,0.2772291083566573,0.27738704518192725,0.2775449820071971,0.277702918832467,0.2778608556577369,0.2780187924830068,0.2781767293082767,0.27833466613354657,0.27849260295881645,0.2786505397840864,0.27880847660935626,0.27896641343462614,0.279124350259896,0.27928228708516595,0.2794402239104358,0.2795981607357057,0.27975609756097564,0.2799140343862455,0.2800719712115154,0.28022990803678527,0.2803878448620552,0.2805457816873251,0.28070371851259496,0.28086165533786484,0.28101959216313477,0.28117752898840465,0.2813354658136745,0.2814934026389444,0.28165133946421433,0.2818092762894842,0.2819672131147541,0.28212514994002397,0.2822830867652939,0.2824410235905638,0.28259896041583366,0.28275689724110353,0.28291483406637347,0.28307277089164334,0.2832307077169132,0.2833886445421831,0.28354658136745303,0.2837045181927229,0.2838624550179928,0.2840203918432627,0.2841783286685326,0.2843362654938025,0.28449420231907235,0.2846521391443423,0.28481007596961216,0.28496801279488204,0.2851259496201519,0.28528388644542185,0.28544182327069173,0.2855997600959616,0.2857576969212315,0.2859156337465014,0.2860735705717713,0.2862315073970412,0.28638944422231105,0.286547381047581,0.28670531787285086,0.28686325469812074,0.2870211915233906,0.28717912834866055,0.28733706517393043,0.2874950019992003,0.28765293882447024,0.2878108756497401,0.28796881247501,0.28812674930027987,0.2882846861255498,0.2884426229508197,0.28860055977608956,0.28875849660135944,0.28891643342662937,0.28907437025189925,0.2892323070771691,0.289390243902439,0.28954818072770894,0.2897061175529788,0.2898640543782487,0.29002199120351857,0.2901799280287885,0.2903378648540584,0.29049580167932826,0.29065373850459814,0.29081167532986807,0.29096961215513795,0.2911275489804078,0.2912854858056777,0.29144342263094764,0.2916013594562175,0.2917592962814874,0.2919172331067573,0.2920751699320272,0.2922331067572971,0.29239104358256696,0.2925489804078369,0.29270691723310677,0.29286485405837664,0.2930227908836465,0.29318072770891646,0.29333866453418633,0.2934966013594562,0.2936545381847261,0.293812475009996,0.2939704118352659,0.2941283486605358,0.29428628548580565,0.2944442223110756,0.29460215913634547,0.29476009596161534,0.2949180327868852,0.29507596961215515,0.29523390643742503,0.2953918432626949,0.29554978008796484,0.2957077169132347,0.2958656537385046,0.2960235905637745,0.2961815273890444,0.2963394642143143,0.29649740103958416,0.29665533786485404,0.296813274690124,0.29697121151539385,0.29712914834066373,0.2972870851659336,0.29744502199120354,0.2976029588164734,0.2977608956417433,0.2979188324670132,0.2980767692922831,0.298234706117553,0.29839264294282286,0.29855057976809274,0.29870851659336267,0.29886645341863255,0.2990243902439024,0.2991823270691723,0.29934026389444224,0.2994982007197121,0.299656137544982,0.2998140743702519,0.2999720111955218,0.3001299480207917,0.30028788484606156,0.3004458216713315,0.30060375849660137,0.30076169532187125,0.3009196321471411,0.30107756897241106,0.30123550579768094,0.3013934426229508,0.3015513794482207,0.3017093162734906,0.3018672530987605,0.3020251899240304,0.30218312674930026,0.3023410635745702,0.30249900039984007,0.30265693722510995,0.3028148740503798,0.30297281087564976,0.30313074770091963,0.3032886845261895,0.3034466213514594,0.3036045581767293,0.3037624950019992,0.3039204318272691,0.304078368652539,0.3042363054778089,0.30439424230307877,0.30455217912834864,0.3047101159536186,0.30486805277888845,0.30502598960415833,0.3051839264294282,0.30534186325469814,0.305499800079968,0.3056577369052379,0.3058156737305078,0.3059736105557777,0.3061315473810476,0.30628948420631746,0.30644742103158734,0.3066053578568573,0.30676329468212715,0.30692123150739703,0.3070791683326669,0.30723710515793684,0.3073950419832067,0.3075529788084766,0.30771091563374653,0.3078688524590164,0.3080267892842863,0.30818472610955616,0.3083426629348261,0.308500599760096,0.30865853658536585,0.30881647341063573,0.30897441023590566,0.30913234706117554,0.3092902838864454,0.3094482207117153,0.3096061575369852,0.3097640943622551,0.309922031187525,0.31007996801279486,0.3102379048380648,0.31039584166333467,0.31055377848860455,0.3107117153138744,0.31086965213914436,0.31102758896441424,0.3111855257896841,0.311343462614954,0.3115013994402239,0.3116593362654938,0.3118172730907637,0.3119752099160336,0.3121331467413035,0.31229108356657337,0.31244902039184325,0.3126069572171132,0.31276489404238306,0.31292283086765293,0.3130807676929228,0.31323870451819275,0.3133966413434626,0.3135545781687325,0.3137125149940024,0.3138704518192723,0.3140283886445422,0.31418632546981207,0.31434426229508194,0.3145021991203519,0.31466013594562176,0.31481807277089163,0.3149760095961615,0.31513394642143144,0.3152918832467013,0.3154498200719712,0.3156077568972411,0.315765693722511,0.3159236305477809,0.31608156737305076,0.3162395041983207,0.3163974410235906,0.31655537784886045,0.31671331467413033,0.31687125149940026,0.31702918832467014,0.31718712514994,0.3173450619752099,0.31750299880047983,0.3176609356257497,0.3178188724510196,0.31797680927628946,0.3181347461015594,0.3182926829268293,0.31845061975209915,0.31860855657736903,0.31876649340263896,0.31892443022790884,0.3190823670531787,0.3192403038784486,0.31939824070371853,0.3195561775289884,0.3197141143542583,0.3198720511795282,0.3200299880047981,0.32018792483006797,0.32034586165533785,0.3205037984806078,0.32066173530587766,0.32081967213114754,0.3209776089564174,0.32113554578168735,0.3212934826069572,0.3214514194322271,0.321609356257497,0.3217672930827669,0.3219252299080368,0.32208316673330667,0.32224110355857655,0.3223990403838465,0.32255697720911636,0.32271491403438624,0.3228728508596561,0.32303078768492605,0.3231887245101959,0.3233466613354658,0.3235045981607357,0.3236625349860056,0.3238204718112755,0.32397840863654537,0.3241363454618153,0.3242942822870852,0.32445221911235506,0.32461015593762493,0.32476809276289487,0.32492602958816474,0.3250839664134346,0.3252419032387045,0.32539984006397443,0.3255577768892443,0.3257157137145142,0.32587365053978407,0.326031587365054,0.3261895241903239,0.32634746101559375,0.32650539784086363,0.32666333466613356,0.32682127149140344,0.3269792083166733,0.3271371451419432,0.32729508196721313,0.327453018792483,0.3276109556177529,0.32776889244302276,0.3279268292682927,0.3280847660935626,0.32824270291883245,0.3284006397441024,0.32855857656937226,0.32871651339464214,0.328874450219912,0.32903238704518195,0.32919032387045183,0.3293482606957217,0.3295061975209916,0.3296641343462615,0.3298220711715314,0.3299800079968013,0.33013794482207115,0.3302958816473411,0.33045381847261096,0.33061175529788084,0.3307696921231507,0.33092762894842065,0.3310855657736905,0.3312435025989604,0.3314014394242303,0.3315593762495002,0.3317173130747701,0.33187524990003997,0.3320331867253099,0.3321911235505798,0.33234906037584966,0.33250699720111954,0.33266493402638947,0.33282287085165935,0.3329808076769292,0.3331387445021991,0.33329668132746904,0.3334546181527389,0.3336125549780088,0.33377049180327867,0.3339284286285486,0.3340863654538185,0.33424430227908836,0.33440223910435823,0.33456017592962817,0.33471811275489805,0.3348760495801679,0.3350339864054378,0.33519192323070773,0.3353498600559776,0.3355077968812475,0.33566573370651737,0.3358236705317873,0.3359816073570572,0.33613954418232705,0.336297481007597,0.33645541783286687,0.33661335465813674,0.3367712914834066,0.33692922830867655,0.33708716513394643,0.3372451019592163,0.3374030387844862,0.3375609756097561,0.337718912435026,0.3378768492602959,0.33803478608556575,0.3381927229108357,0.33835065973610556,0.33850859656137544,0.3386665333866453,0.33882447021191525,0.33898240703718513,0.339140343862455,0.3392982806877249,0.3394562175129948,0.3396141543382647,0.3397720911635346,0.33993002798880445,0.3400879648140744,0.34024590163934426,0.34040383846461414,0.34056177528988407,0.34071971211515395,0.3408776489404238,0.3410355857656937,0.34119352259096364,0.3413514594162335,0.3415093962415034,0.34166733306677327,0.3418252698920432,0.3419832067173131,0.34214114354258296,0.34229908036785284,0.34245701719312277,0.34261495401839265,0.3427728908436625,0.3429308276689324,0.34308876449420234,0.3432467013194722,0.3434046381447421,0.34356257497001197,0.3437205117952819,0.3438784486205518,0.34403638544582166,0.3441943222710916,0.34435225909636147,0.34451019592163135,0.3446681327469012,0.34482606957217116,0.34498400639744103,0.3451419432227109,0.3452998800479808,0.3454578168732507,0.3456157536985206,0.3457736905237905,0.34593162734906036,0.3460895641743303,0.34624750099960017,0.34640543782487004,0.3465633746501399,0.34672131147540985,0.34687924830067973,0.3470371851259496,0.3471951219512195,0.3473530587764894,0.3475109956017593,0.3476689324270292,0.34782686925229905,0.347984806077569,0.34814274290283886,0.34830067972810874,0.3484586165533787,0.34861655337864855,0.34877449020391843,0.3489324270291883,0.34909036385445824,0.3492483006797281,0.349406237504998,0.3495641743302679,0.3497221111555378,0.3498800479808077,0.35003798480607756,0.35019592163134744,0.3503538584566174,0.35051179528188725,0.35066973210715713,0.350827668932427,0.35098560575769694,0.3511435425829668,0.3513014794082367,0.35145941623350657,0.3516173530587765,0.3517752898840464,0.35193322670931626,0.35209116353458614,0.35224910035985607,0.35240703718512595,0.3525649740103958,0.35272291083566576,0.35288084766093564,0.3530387844862055,0.3531967213114754,0.3533546581367453,0.3535125949620152,0.3536705317872851,0.35382846861255496,0.3539864054378249,0.35414434226309477,0.35430227908836465,0.3544602159136345,0.35461815273890446,0.35477608956417434,0.3549340263894442,0.3550919632147141,0.355249900039984,0.3554078368652539,0.3555657736905238,0.35572371051579366,0.3558816473410636,0.35603958416633347,0.35619752099160334,0.3563554578168733,0.35651339464214316,0.35667133146741303,0.3568292682926829,0.35698720511795284,0.3571451419432227,0.3573030787684926,0.3574610155937625,0.3576189524190324,0.3577768892443023,0.35793482606957217,0.35809276289484204,0.358250699720112,0.35840863654538185,0.35856657337065173,0.3587245101959216,0.35888244702119154,0.3590403838464614,0.3591983206717313,0.3593562574970012,0.3595141943222711,0.359672131147541,0.35983006797281086,0.35998800479808074,0.3601459416233507,0.36030387844862055,0.36046181527389043,0.36061975209916036,0.36077768892443024,0.3609356257497001,0.36109356257497,0.36125149940023993,0.3614094362255098,0.3615673730507797,0.36172530987604956,0.3618832467013195,0.36204118352658937,0.36219912035185925,0.3623570571771291,0.36251499400239906,0.36267293082766894,0.3628308676529388,0.3629888044782087,0.3631467413034786,0.3633046781287485,0.3634626149540184,0.36362055177928826,0.3637784886045582,0.36393642542982807,0.36409436225509795,0.3642522990803678,0.36441023590563776,0.36456817273090764,0.3647261095561775,0.36488404638144745,0.3650419832067173,0.3651999200319872,0.3653578568572571,0.365515793682527,0.3656737305077969,0.36583166733306677,0.36598960415833665,0.3661475409836066,0.36630547780887646,0.36646341463414633,0.3666213514594162,0.36677928828468614,0.366937225109956,0.3670951619352259,0.3672530987604958,0.3674110355857657,0.3675689724110356,0.36772690923630547,0.36788484606157534,0.3680427828868453,0.36820071971211515,0.36835865653738503,0.36851659336265497,0.36867453018792484,0.3688324670131947,0.3689904038384646,0.36914834066373453,0.3693062774890044,0.3694642143142743,0.36962215113954416,0.3697800879648141,0.369938024790084,0.37009596161535385,0.37025389844062373,0.37041183526589366,0.37056977209116354,0.3707277089164334,0.3708856457417033,0.37104358256697323,0.3712015193922431,0.371359456217513,0.37151739304278286,0.3716753298680528,0.3718332666933227,0.37199120351859255,0.37214914034386243,0.37230707716913236,0.37246501399440224,0.3726229508196721,0.37278088764494205,0.3729388244702119,0.3730967612954818,0.3732546981207517,0.3734126349460216,0.3735705717712915,0.37372850859656137,0.37388644542183125,0.3740443822471012,0.37420231907237106,0.37436025589764094,0.3745181927229108,0.37467612954818075,0.3748340663734506,0.3749920031987205,0.3751499400239904,0.3753078768492603,0.3754658136745302,0.37562375049980007,0.37578168732506995,0.3759396241503399,0.37609756097560976,0.37625549780087963,0.37641343462614957,0.37657137145141945,0.3767293082766893,0.3768872451019592,0.37704518192722913,0.377203118752499,0.3773610555777689,0.37751899240303877,0.3776769292283087,0.3778348660535786,0.37799280287884846,0.37815073970411833,0.37830867652938827,0.37846661335465814,0.378624550179928,0.3787824870051979,0.37894042383046783,0.3790983606557377,0.3792562974810076,0.37941423430627746,0.3795721711315474,0.3797301079568173,0.37988804478208715,0.38004598160735703,0.38020391843262696,0.38036185525789684,0.3805197920831667,0.38067772890843665,0.38083566573370653,0.3809936025589764,0.3811515393842463,0.3813094762095162,0.3814674130347861,0.381625349860056,0.38178328668532585,0.3819412235105958,0.38209916033586566,0.38225709716113554,0.3824150339864054,0.38257297081167535,0.38273090763694523,0.3828888444622151,0.383046781287485,0.3832047181127549,0.3833626549380248,0.38352059176329467,0.38367852858856455,0.3838364654138345,0.38399440223910436,0.38415233906437424,0.3843102758896441,0.38446821271491405,0.3846261495401839,0.3847840863654538,0.38494202319072374,0.3850999600159936,0.3852578968412635,0.38541583366653337,0.3855737704918033,0.3857317073170732,0.38588964414234306,0.38604758096761294,0.38620551779288287,0.38636345461815275,0.3865213914434226,0.3866793282686925,0.38683726509396243,0.3869952019192323,0.3871531387445022,0.38731107556977207,0.387469012395042,0.3876269492203119,0.38778488604558176,0.38794282287085163,0.38810075969612157,0.38825869652139144,0.3884166333466613,0.38857457017193126,0.38873250699720113,0.388890443822471,0.3890483806477409,0.3892063174730108,0.3893642542982807,0.3895221911235506,0.38968012794882045,0.3898380647740904,0.38999600159936026,0.39015393842463014,0.3903118752499,0.39046981207516995,0.39062774890043983,0.3907856857257097,0.3909436225509796,0.3911015593762495,0.3912594962015194,0.3914174330267893,0.39157536985205915,0.3917333066773291,0.39189124350259896,0.39204918032786884,0.3922071171531387,0.39236505397840865,0.39252299080367853,0.3926809276289484,0.39283886445421834,0.3929968012794882,0.3931547381047581,0.393312674930028,0.3934706117552979,0.3936285485805678,0.39378648540583766,0.39394442223110754,0.39410235905637747,0.39426029588164735,0.3944182327069172,0.3945761695321871,0.39473410635745704,0.3948920431827269,0.3950499800079968,0.39520791683326667,0.3953658536585366,0.3955237904838065,0.39568172730907636,0.39583966413434624,0.39599760095961617,0.39615553778488605,0.3963134746101559,0.3964714114354258,0.39662934826069574,0.3967872850859656,0.3969452219112355,0.3971031587365054,0.3972610955617753,0.3974190323870452,0.39757696921231506,0.397734906037585,0.39789284286285487,0.39805077968812475,0.3982087165133946,0.39836665333866456,0.39852459016393443,0.3986825269892043,0.3988404638144742,0.3989984006397441,0.399156337465014,0.3993142742902839,0.39947221111555375,0.3996301479408237,0.39978808476609357,0.39994602159136344,0.4001039584166333,0.40026189524190325,0.40041983206717313,0.400577768892443,0.40073570571771294,0.4008936425429828,0.4010515793682527,0.4012095161935226,0.4013674530187925,0.4015253898440624,0.40168332666933226,0.40184126349460214,0.4019992003198721,0.40215713714514195,0.40231507397041183,0.4024730107956817,0.40263094762095164,0.4027888844462215,0.4029468212714914,0.4031047580967613,0.4032626949220312,0.4034206317473011,0.40357856857257096,0.40373650539784084,0.4038944422231108,0.40405237904838065,0.4042103158736505,0.4043682526989204,0.40452618952419034,0.4046841263494602,0.4048420631747301,0.405,0.4051579368252699,0.4053158736505398,0.40547381047580966,0.4056317473010796,0.40578968412634947,0.40594762095161935,0.4061055577768892,0.40626349460215916,0.40642143142742904,0.4065793682526989,0.4067373050779688,0.4068952419032387,0.4070531787285086,0.4072111155537785,0.40736905237904836,0.4075269892043183,0.40768492602958817,0.40784286285485805,0.4080007996801279,0.40815873650539786,0.40831667333066773,0.4084746101559376,0.4086325469812075,0.4087904838064774,0.4089484206317473,0.4091063574570172,0.4092642942822871,0.409422231107557,0.40958016793282687,0.40973810475809674,0.4098960415833667,0.41005397840863655,0.41021191523390643,0.4103698520591763,0.41052778888444624,0.4106857257097161,0.410843662534986,0.4110015993602559,0.4111595361855258,0.4113174730107957,0.41147540983606556,0.41163334666133544,0.4117912834866054,0.41194922031187525,0.41210715713714513,0.412265093962415,0.41242303078768494,0.4125809676129548,0.4127389044382247,0.41289684126349463,0.4130547780887645,0.4132127149140344,0.41337065173930426,0.4135285885645742,0.4136865253898441,0.41384446221511395,0.41400239904038383,0.41416033586565376,0.41431827269092364,0.4144762095161935,0.4146341463414634,0.4147920831667333,0.4149500199920032,0.4151079568172731,0.41526589364254296,0.4154238304678129,0.41558176729308277,0.41573970411835265,0.4158976409436225,0.41605557776889246,0.41621351459416234,0.4163714514194322,0.4165293882447021,0.416687325069972,0.4168452618952419,0.4170031987205118,0.4171611355457817,0.4173190723710516,0.41747700919632147,0.41763494602159135,0.4177928828468613,0.41795081967213116,0.41810875649740104,0.4182666933226709,0.41842463014794085,0.4185825669732107,0.4187405037984806,0.4188984406237505,0.4190563774490204,0.4192143142742903,0.41937225109956017,0.41953018792483004,0.4196881247501,0.41984606157536986,0.42000399840063973,0.4201619352259096,0.42031987205117954,0.4204778088764494,0.4206357457017193,0.4207936825269892,0.4209516193522591,0.421109556177529,0.42126749300279887,0.4214254298280688,0.4215833666533387,0.42174130347860855,0.42189924030387843,0.42205717712914836,0.42221511395441824,0.4223730507796881,0.422530987604958,0.42268892443022793,0.4228468612554978,0.4230047980807677,0.42316273490603756,0.4233206717313075,0.4234786085565774,0.42363654538184725,0.42379448220711713,0.42395241903238706,0.42411035585765694,0.4242682926829268,0.4244262295081967,0.42458416633346663,0.4247421031587365,0.4249000399840064,0.4250579768092763,0.4252159136345462,0.42537385045981607,0.42553178728508595,0.4256897241103559,0.42584766093562576,0.42600559776089564,0.4261635345861655,0.42632147141143545,0.4264794082367053,0.4266373450619752,0.4267952818872451,0.426953218712515,0.4271111555377849,0.42726909236305477,0.42742702918832465,0.4275849660135946,0.42774290283886446,0.42790083966413434,0.4280587764894042,0.42821671331467415,0.428374650139944,0.4285325869652139,0.4286905237904838,0.4288484606157537,0.4290063974410236,0.42916433426629347,0.4293222710915634,0.4294802079168333,0.42963814474210316,0.42979608156737303,0.42995401839264297,0.43011195521791284,0.4302698920431827,0.4304278288684526,0.43058576569372253,0.4307437025189924,0.4309016393442623,0.43105957616953217,0.4312175129948021,0.431375449820072,0.43153338664534185,0.43169132347061173,0.43184926029588167,0.43200719712115154,0.4321651339464214,0.4323230707716913,0.43248100759696123,0.4326389444222311,0.432796881247501,0.43295481807277086,0.4331127548980408,0.4332706917233107,0.43342862854858055,0.4335865653738505,0.43374450219912036,0.43390243902439024,0.4340603758496601,0.43421831267493005,0.43437624950019993,0.4345341863254698,0.4346921231507397,0.4348500599760096,0.4350079968012795,0.4351659336265494,0.43532387045181925,0.4354818072770892,0.43563974410235906,0.43579768092762894,0.4359556177528988,0.43611355457816875,0.4362714914034386,0.4364294282287085,0.4365873650539784,0.4367453018792483,0.4369032387045182,0.43706117552978807,0.437219112355058,0.4373770491803279,0.43753498600559776,0.43769292283086764,0.43785085965613757,0.43800879648140745,0.4381667333066773,0.4383246701319472,0.43848260695721714,0.438640543782487,0.4387984806077569,0.43895641743302677,0.4391143542582967,0.4392722910835666,0.43943022790883646,0.43958816473410633,0.43974610155937627,0.43990403838464615,0.440061975209916,0.4402199120351859,0.44037784886045583,0.4405357856857257,0.4406937225109956,0.44085165933626547,0.4410095961615354,0.4411675329868053,0.44132546981207516,0.4414834066373451,0.44164134346261497,0.44179928028788484,0.4419572171131547,0.44211515393842465,0.44227309076369453,0.4424310275889644,0.4425889644142343,0.4427469012395042,0.4429048380647741,0.443062774890044,0.44322071171531385,0.4433786485405838,0.44353658536585366,0.44369452219112354,0.4438524590163934,0.44401039584166335,0.44416833266693323,0.4443262694922031,0.444484206317473,0.4446421431427429,0.4448000799680128,0.4449580167932827,0.4451159536185526,0.4452738904438225,0.44543182726909236,0.44558976409436224,0.4457477009196322,0.44590563774490205,0.44606357457017193,0.4462215113954418,0.44637944822071174,0.4465373850459816,0.4466953218712515,0.44685325869652137,0.4470111955217913,0.4471691323470612,0.44732706917233106,0.44748500599760094,0.44764294282287087,0.44780087964814075,0.4479588164734106,0.4481167532986805,0.44827469012395044,0.4484326269492203,0.4485905637744902,0.44874850059976007,0.44890643742503,0.4490643742502999,0.44922231107556976,0.4493802479008397,0.44953818472610957,0.44969612155137945,0.4498540583766493,0.45001199520191926,0.45016993202718913,0.450327868852459,0.4504858056777289,0.4506437425029988,0.4508016793282687,0.4509596161535386,0.45111755297880846,0.4512754898040784,0.45143342662934827,0.45159136345461814,0.451749300279888,0.45190723710515796,0.45206517393042783,0.4522231107556977,0.4523810475809676,0.4525389844062375,0.4526969212315074,0.4528548580567773,0.45301279488204715,0.4531707317073171,0.45332866853258696,0.45348660535785684,0.4536445421831268,0.45380247900839665,0.45396041583366653,0.4541183526589364,0.45427628948420634,0.4544342263094762,0.4545921631347461,0.454750099960016,0.4549080367852859,0.4550659736105558,0.45522391043582566,0.45538184726109554,0.4555397840863655,0.45569772091163535,0.45585565773690523,0.4560135945621751,0.45617153138744504,0.4563294682127149,0.4564874050379848,0.4566453418632547,0.4568032786885246,0.4569612155137945,0.45711915233906436,0.4572770891643343,0.45743502598960417,0.45759296281487405,0.4577508996401439,0.45790883646541386,0.45806677329068374,0.4582247101159536,0.4583826469412235,0.4585405837664934,0.4586985205917633,0.4588564574170332,0.45901439424230306,0.459172331067573,0.45933026789284287,0.45948820471811275,0.4596461415433826,0.45980407836865256,0.45996201519392244,0.4601199520191923,0.4602778888444622,0.4604358256697321,0.460593762495002,0.4607516993202719,0.46090963614554176,0.4610675729708117,0.46122550979608157,0.46138344662135145,0.4615413834466214,0.46169932027189126,0.46185725709716113,0.462015193922431,0.46217313074770094,0.4623310675729708,0.4624890043982407,0.4626469412235106,0.4628048780487805,0.4629628148740504,0.46312075169932027,0.46327868852459014,0.4634366253498601,0.46359456217512995,0.46375249900039983,0.4639104358256697,0.46406837265093964,0.4642263094762095,0.4643842463014794,0.4645421831267493,0.4647001199520192,0.4648580567772891,0.46501599360255896,0.46517393042782884,0.4653318672530988,0.46548980407836865,0.46564774090363853,0.46580567772890846,0.46596361455417834,0.4661215513794482,0.4662794882047181,0.46643742502998803,0.4665953618552579,0.4667532986805278,0.46691123550579766,0.4670691723310676,0.4672271091563375,0.46738504598160735,0.4675429828068772,0.46770091963214716,0.46785885645741704,0.4680167932826869,0.4681747301079568,0.4683326669332267,0.4684906037584966,0.4686485405837665,0.46880647740903636,0.4689644142343063,0.46912235105957617,0.46928028788484605,0.469438224710116,0.46959616153538586,0.46975409836065574,0.4699120351859256,0.47006997201119555,0.4702279088364654,0.4703858456617353,0.4705437824870052,0.4707017193122751,0.470859656137545,0.47101759296281487,0.47117552978808475,0.4713334666133547,0.47149140343862456,0.47164934026389443,0.4718072770891643,0.47196521391443425,0.4721231507397041,0.472281087564974,0.4724390243902439,0.4725969612155138,0.4727548980407837,0.47291283486605357,0.47307077169132344,0.4732287085165934,0.47338664534186325,0.47354458216713313,0.47370251899240307,0.47386045581767294,0.4740183926429428,0.4741763294682127,0.47433426629348263,0.4744922031187525,0.4746501399440224,0.47480807676929226,0.4749660135945622,0.4751239504198321,0.47528188724510195,0.47543982407037183,0.47559776089564176,0.47575569772091164,0.4759136345461815,0.4760715713714514,0.47622950819672133,0.4763874450219912,0.4765453818472611,0.47670331867253096,0.4768612554978009,0.4770191923230708,0.47717712914834065,0.47733506597361053,0.47749300279888046,0.47765093962415034,0.4778088764494202,0.47796681327469015,0.47812475009996,0.4782826869252299,0.4784406237504998,0.4785985605757697,0.4787564974010396,0.47891443422630947,0.47907237105157935,0.4792303078768493,0.47938824470211916,0.47954618152738904,0.4797041183526589,0.47986205517792885,0.4800199920031987,0.4801779288284686,0.4803358656537385,0.4804938024790084,0.4806517393042783,0.48080967612954817,0.48096761295481805,0.481125549780088,0.48128348660535786,0.48144142343062774,0.48159936025589767,0.48175729708116755,0.4819152339064374,0.4820731707317073,0.48223110755697723,0.4823890443822471,0.482546981207517,0.48270491803278687,0.4828628548580568,0.4830207916833267,0.48317872850859656,0.48333666533386643,0.48349460215913637,0.48365253898440624,0.4838104758096761,0.483968412634946,0.48412634946021593,0.4842842862854858,0.4844422231107557,0.48460015993602557,0.4847580967612955,0.4849160335865654,0.48507397041183525,0.48523190723710513,0.48538984406237506,0.48554778088764494,0.4857057177129148,0.48586365453818475,0.48602159136345463,0.4861795281887245,0.4863374650139944,0.4864954018392643,0.4866533386645342,0.4868112754898041,0.48696921231507395,0.4871271491403439,0.48728508596561376,0.48744302279088364,0.4876009596161535,0.48775889644142345,0.48791683326669333,0.4880747700919632,0.4882327069172331,0.488390643742503,0.4885485805677729,0.48870651739304277,0.48886445421831265,0.4890223910435826,0.48918032786885246,0.48933826469412234,0.4894962015193922,0.48965413834466215,0.489812075169932,0.4899700119952019,0.49012794882047184,0.4902858856457417,0.4904438224710116,0.49060175929628147,0.4907596961215514,0.4909176329468213,0.49107556977209116,0.49123350659736104,0.49139144342263097,0.49154938024790085,0.4917073170731707,0.4918652538984406,0.49202319072371054,0.4921811275489804,0.4923390643742503,0.49249700119952017,0.4926549380247901,0.49281287485006,0.49297081167532986,0.49312874850059973,0.49328668532586967,0.49344462215113954,0.4936025589764094,0.49376049580167936,0.49391843262694923,0.4940763694522191,0.494234306277489,0.4943922431027589,0.4945501799280288,0.4947081167532987,0.49486605357856855,0.4950239904038385,0.49518192722910837,0.49533986405437824,0.4954978008796481,0.49565573770491805,0.49581367453018793,0.4959716113554578,0.4961295481807277,0.4962874850059976,0.4964454218312675,0.4966033586565374,0.49676129548180725,0.4969192323070772,0.49707716913234706,0.49723510595761694,0.4973930427828868,0.49755097960815675,0.49770891643342663,0.4978668532586965,0.49802479008396644,0.4981827269092363,0.4983406637345062,0.4984986005597761,0.498656537385046,0.4988144742103159,0.49897241103558576,0.49913034786085564,0.49928828468612557,0.49944622151139545,0.4996041583366653,0.4997620951619352,0.49992003198720514,0.500077968812475,0.5002359056377449,0.5003938424630148,0.5005517792882846,0.5007097161135545,0.5008676529388245,0.5010255897640944,0.5011835265893643,0.5013414634146341,0.501499400239904,0.5016573370651739,0.5018152738904438,0.5019732107157138,0.5021311475409836,0.5022890843662535,0.5024470211915234,0.5026049580167933,0.5027628948420632,0.502920831667333,0.5030787684926029,0.5032367053178729,0.5033946421431428,0.5035525789684127,0.5037105157936825,0.5038684526189524,0.5040263894442223,0.5041843262694922,0.504342263094762,0.504500199920032,0.5046581367453019,0.5048160735705718,0.5049740103958417,0.5051319472211115,0.5052898840463814,0.5054478208716513,0.5056057576969212,0.5057636945221912,0.505921631347461,0.5060795681727309,0.5062375049980008,0.5063954418232707,0.5065533786485406,0.5067113154738104,0.5068692522990804,0.5070271891243503,0.5071851259496202,0.50734306277489,0.5075009996001599,0.5076589364254298,0.5078168732506997,0.5079748100759696,0.5081327469012396,0.5082906837265094,0.5084486205517793,0.5086065573770492,0.5087644942023191,0.5089224310275889,0.5090803678528588,0.5092383046781287,0.5093962415033987,0.5095541783286686,0.5097121151539384,0.5098700519792083,0.5100279888044782,0.5101859256297481,0.510343862455018,0.5105017992802879,0.5106597361055578,0.5108176729308277,0.5109756097560976,0.5111335465813674,0.5112914834066373,0.5114494202319072,0.5116073570571771,0.5117652938824471,0.511923230707717,0.5120811675329868,0.5122391043582567,0.5123970411835266,0.5125549780087965,0.5127129148340663,0.5128708516593362,0.5130287884846062,0.5131867253098761,0.513344662135146,0.5135025989604158,0.5136605357856857,0.5138184726109556,0.5139764094362255,0.5141343462614955,0.5142922830867653,0.5144502199120352,0.5146081567373051,0.514766093562575,0.5149240303878448,0.5150819672131147,0.5152399040383846,0.5153978408636546,0.5155557776889245,0.5157137145141943,0.5158716513394642,0.5160295881647341,0.516187524990004,0.5163454618152739,0.5165033986405437,0.5166613354658137,0.5168192722910836,0.5169772091163535,0.5171351459416234,0.5172930827668932,0.5174510195921631,0.517608956417433,0.5177668932427029,0.5179248300679729,0.5180827668932427,0.5182407037185126,0.5183986405437825,0.5185565773690524,0.5187145141943222,0.5188724510195921,0.5190303878448621,0.519188324670132,0.5193462614954019,0.5195041983206717,0.5196621351459416,0.5198200719712115,0.5199780087964814,0.5201359456217513,0.5202938824470212,0.5204518192722911,0.520609756097561,0.5207676929228309,0.5209256297481007,0.5210835665733706,0.5212415033986405,0.5213994402239104,0.5215573770491804,0.5217153138744502,0.5218732506997201,0.52203118752499,0.5221891243502599,0.5223470611755298,0.5225049980007996,0.5226629348260696,0.5228208716513395,0.5229788084766094,0.5231367453018793,0.5232946821271491,0.523452618952419,0.5236105557776889,0.5237684926029588,0.5239264294282288,0.5240843662534986,0.5242423030787685,0.5244002399040384,0.5245581767293083,0.5247161135545781,0.524874050379848,0.5250319872051179,0.5251899240303879,0.5253478608556578,0.5255057976809276,0.5256637345061975,0.5258216713314674,0.5259796081567373,0.5261375449820072,0.5262954818072771,0.526453418632547,0.5266113554578169,0.5267692922830868,0.5269272291083567,0.5270851659336265,0.5272431027588964,0.5274010395841663,0.5275589764094363,0.5277169132347062,0.527874850059976,0.5280327868852459,0.5281907237105158,0.5283486605357857,0.5285065973610555,0.5286645341863254,0.5288224710115954,0.5289804078368653,0.5291383446621352,0.529296281487405,0.5294542183126749,0.5296121551379448,0.5297700919632147,0.5299280287884846,0.5300859656137545,0.5302439024390244,0.5304018392642943,0.5305597760895642,0.530717712914834,0.5308756497401039,0.5310335865653738,0.5311915233906438,0.5313494602159137,0.5315073970411835,0.5316653338664534,0.5318232706917233,0.5319812075169932,0.5321391443422631,0.5322970811675329,0.5324550179928029,0.5326129548180728,0.5327708916433427,0.5329288284686126,0.5330867652938824,0.5332447021191523,0.5334026389444222,0.5335605757696921,0.5337185125949621,0.5338764494202319,0.5340343862455018,0.5341923230707717,0.5343502598960416,0.5345081967213114,0.5346661335465813,0.5348240703718513,0.5349820071971212,0.5351399440223911,0.535297880847661,0.5354558176729308,0.5356137544982007,0.5357716913234706,0.5359296281487405,0.5360875649740104,0.5362455017992803,0.5364034386245502,0.5365613754498201,0.53671931227509,0.5368772491003598,0.5370351859256297,0.5371931227508996,0.5373510595761696,0.5375089964014395,0.5376669332267093,0.5378248700519792,0.5379828068772491,0.538140743702519,0.5382986805277888,0.5384566173530588,0.5386145541783287,0.5387724910035986,0.5389304278288685,0.5390883646541383,0.5392463014794082,0.5394042383046781,0.539562175129948,0.539720111955218,0.5398780487804878,0.5400359856057577,0.5401939224310276,0.5403518592562975,0.5405097960815674,0.5406677329068372,0.5408256697321071,0.5409836065573771,0.541141543382647,0.5412994802079168,0.5414574170331867,0.5416153538584566,0.5417732906837265,0.5419312275089964,0.5420891643342662,0.5422471011595362,0.5424050379848061,0.542562974810076,0.5427209116353459,0.5428788484606157,0.5430367852858856,0.5431947221111555,0.5433526589364255,0.5435105957616954,0.5436685325869652,0.5438264694122351,0.543984406237505,0.5441423430627749,0.5443002798880447,0.5444582167133146,0.5446161535385846,0.5447740903638545,0.5449320271891244,0.5450899640143942,0.5452479008396641,0.545405837664934,0.5455637744902039,0.5457217113154738,0.5458796481407437,0.5460375849660136,0.5461955217912835,0.5463534586165534,0.5465113954418233,0.5466693322670931,0.546827269092363,0.546985205917633,0.5471431427429029,0.5473010795681728,0.5474590163934426,0.5476169532187125,0.5477748900439824,0.5479328268692523,0.5480907636945221,0.5482487005197921,0.548406637345062,0.5485645741703319,0.5487225109956018,0.5488804478208716,0.5490383846461415,0.5491963214714114,0.5493542582966813,0.5495121951219513,0.5496701319472211,0.549828068772491,0.5499860055977609,0.5501439424230308,0.5503018792483007,0.5504598160735705,0.5506177528988405,0.5507756897241104,0.5509336265493803,0.5510915633746502,0.55124950019992,0.5514074370251899,0.5515653738504598,0.5517233106757297,0.5518812475009996,0.5520391843262695,0.5521971211515394,0.5523550579768093,0.5525129948020792,0.552670931627349,0.5528288684526189,0.5529868052778888,0.5531447421031588,0.5533026789284287,0.5534606157536985,0.5536185525789684,0.5537764894042383,0.5539344262295082,0.554092363054778,0.554250299880048,0.5544082367053179,0.5545661735305878,0.5547241103558577,0.5548820471811275,0.5550399840063974,0.5551979208316673,0.5553558576569372,0.5555137944822072,0.555671731307477,0.5558296681327469,0.5559876049580168,0.5561455417832867,0.5563034786085566,0.5564614154338264,0.5566193522590963,0.5567772890843663,0.5569352259096362,0.5570931627349061,0.5572510995601759,0.5574090363854458,0.5575669732107157,0.5577249100359856,0.5578828468612554,0.5580407836865254,0.5581987205117953,0.5583566573370652,0.5585145941623351,0.5586725309876049,0.5588304678128748,0.5589884046381447,0.5591463414634147,0.5593042782886846,0.5594622151139544,0.5596201519392243,0.5597780887644942,0.5599360255897641,0.560093962415034,0.5602518992403038,0.5604098360655738,0.5605677728908437,0.5607257097161136,0.5608836465413835,0.5610415833666533,0.5611995201919232,0.5613574570171931,0.561515393842463,0.561673330667733,0.5618312674930028,0.5619892043182727,0.5621471411435426,0.5623050779688125,0.5624630147940823,0.5626209516193522,0.5627788884446222,0.5629368252698921,0.563094762095162,0.5632526989204318,0.5634106357457017,0.5635685725709716,0.5637265093962415,0.5638844462215113,0.5640423830467813,0.5642003198720512,0.5643582566973211,0.564516193522591,0.5646741303478608,0.5648320671731307,0.5649900039984006,0.5651479408236705,0.5653058776489405,0.5654638144742103,0.5656217512994802,0.5657796881247501,0.56593762495002,0.5660955617752899,0.5662534986005597,0.5664114354258297,0.5665693722510996,0.5667273090763695,0.5668852459016394,0.5670431827269092,0.5672011195521791,0.567359056377449,0.5675169932027189,0.5676749300279889,0.5678328668532587,0.5679908036785286,0.5681487405037985,0.5683066773290684,0.5684646141543382,0.5686225509796081,0.568780487804878,0.568938424630148,0.5690963614554179,0.5692542982806877,0.5694122351059576,0.5695701719312275,0.5697281087564974,0.5698860455817673,0.5700439824070371,0.5702019192323071,0.570359856057577,0.5705177928828469,0.5706757297081168,0.5708336665333866,0.5709916033586565,0.5711495401839264,0.5713074770091964,0.5714654138344663,0.5716233506597361,0.571781287485006,0.5719392243102759,0.5720971611355458,0.5722550979608156,0.5724130347860855,0.5725709716113555,0.5727289084366254,0.5728868452618953,0.5730447820871651,0.573202718912435,0.5733606557377049,0.5735185925629748,0.5736765293882446,0.5738344662135146,0.5739924030387845,0.5741503398640544,0.5743082766893243,0.5744662135145941,0.574624150339864,0.5747820871651339,0.5749400239904039,0.5750979608156738,0.5752558976409436,0.5754138344662135,0.5755717712914834,0.5757297081167533,0.5758876449420232,0.576045581767293,0.576203518592563,0.5763614554178329,0.5765193922431028,0.5766773290683727,0.5768352658936425,0.5769932027189124,0.5771511395441823,0.5773090763694522,0.5774670131947222,0.577624950019992,0.5777828868452619,0.5779408236705318,0.5780987604958017,0.5782566973210715,0.5784146341463414,0.5785725709716114,0.5787305077968813,0.5788884446221512,0.579046381447421,0.5792043182726909,0.5793622550979608,0.5795201919232307,0.5796781287485006,0.5798360655737705,0.5799940023990404,0.5801519392243103,0.5803098760495802,0.58046781287485,0.5806257497001199,0.5807836865253898,0.5809416233506597,0.5810995601759297,0.5812574970011996,0.5814154338264694,0.5815733706517393,0.5817313074770092,0.5818892443022791,0.5820471811275489,0.5822051179528188,0.5823630547780888,0.5825209916033587,0.5826789284286286,0.5828368652538984,0.5829948020791683,0.5831527389044382,0.5833106757297081,0.5834686125549781,0.5836265493802479,0.5837844862055178,0.5839424230307877,0.5841003598560576,0.5842582966813274,0.5844162335065973,0.5845741703318672,0.5847321071571372,0.5848900439824071,0.585047980807677,0.5852059176329468,0.5853638544582167,0.5855217912834866,0.5856797281087565,0.5858376649340263,0.5859956017592963,0.5861535385845662,0.5863114754098361,0.586469412235106,0.5866273490603758,0.5867852858856457,0.5869432227109156,0.5871011595361856,0.5872590963614555,0.5874170331867253,0.5875749700119952,0.5877329068372651,0.587890843662535,0.5880487804878048,0.5882067173130747,0.5883646541383447,0.5885225909636146,0.5886805277888845,0.5888384646141543,0.5889964014394242,0.5891543382646941,0.589312275089964,0.5894702119152339,0.5896281487405038,0.5897860855657737,0.5899440223910436,0.5901019592163135,0.5902598960415834,0.5904178328668532,0.5905757696921231,0.5907337065173931,0.590891643342663,0.5910495801679329,0.5912075169932027,0.5913654538184726,0.5915233906437425,0.5916813274690124,0.5918392642942822,0.5919972011195522,0.5921551379448221,0.592313074770092,0.5924710115953619,0.5926289484206317,0.5927868852459016,0.5929448220711715,0.5931027588964414,0.5932606957217114,0.5934186325469812,0.5935765693722511,0.593734506197521,0.5938924430227909,0.5940503798480608,0.5942083166733306,0.5943662534986005,0.5945241903238705,0.5946821271491404,0.5948400639744102,0.5949980007996801,0.59515593762495,0.5953138744502199,0.5954718112754898,0.5956297481007597,0.5957876849260296,0.5959456217512995,0.5961035585765694,0.5962614954018393,0.5964194322271091,0.596577369052379,0.5967353058776489,0.5968932427029189,0.5970511795281888,0.5972091163534586,0.5973670531787285,0.5975249900039984,0.5976829268292683,0.5978408636545381,0.597998800479808,0.598156737305078,0.5983146741303479,0.5984726109556178,0.5986305477808876,0.5987884846061575,0.5989464214314274,0.5991043582566973,0.5992622950819673,0.5994202319072371,0.599578168732507,0.5997361055577769,0.5998940423830468,0.6000519792083167,0.6002099160335865,0.6003678528588564,0.6005257896841264,0.6006837265093963,0.6008416633346662,0.600999600159936,0.6011575369852059,0.6013154738104758,0.6014734106357457,0.6016313474610155,0.6017892842862855,0.6019472211115554,0.6021051579368253,0.6022630947620952,0.602421031587365,0.6025789684126349,0.6027369052379048,0.6028948420631748,0.6030527788884447,0.6032107157137145,0.6033686525389844,0.6035265893642543,0.6036845261895242,0.603842463014794,0.6040003998400639,0.6041583366653339,0.6043162734906038,0.6044742103158737,0.6046321471411435,0.6047900839664134,0.6049480207916833,0.6051059576169532,0.6052638944422231,0.605421831267493,0.6055797680927629,0.6057377049180328,0.6058956417433027,0.6060535785685726,0.6062115153938424,0.6063694522191123,0.6065273890443822,0.6066853258696522,0.6068432626949221,0.6070011995201919,0.6071591363454618,0.6073170731707317,0.6074750099960016,0.6076329468212714,0.6077908836465414,0.6079488204718113,0.6081067572970812,0.6082646941223511,0.608422630947621,0.6085805677728908,0.6087385045981607,0.6088964414234306,0.6090543782487006,0.6092123150739704,0.6093702518992403,0.6095281887245102,0.6096861255497801,0.60984406237505,0.6100019992003198,0.6101599360255897,0.6103178728508597,0.6104758096761296,0.6106337465013995,0.6107916833266693,0.6109496201519392,0.6111075569772091,0.611265493802479,0.611423430627749,0.6115813674530188,0.6117393042782887,0.6118972411035586,0.6120551779288285,0.6122131147540983,0.6123710515793682,0.6125289884046381,0.6126869252299081,0.612844862055178,0.6130027988804478,0.6131607357057177,0.6133186725309876,0.6134766093562575,0.6136345461815274,0.6137924830067972,0.6139504198320672,0.6141083566573371,0.614266293482607,0.6144242303078769,0.6145821671331467,0.6147401039584166,0.6148980407836865,0.6150559776089565,0.6152139144342263,0.6153718512594962,0.6155297880847661,0.615687724910036,0.6158456617353059,0.6160035985605757,0.6161615353858456,0.6163194722111156,0.6164774090363855,0.6166353458616554,0.6167932826869252,0.6169512195121951,0.617109156337465,0.6172670931627349,0.6174250299880047,0.6175829668132747,0.6177409036385446,0.6178988404638145,0.6180567772890844,0.6182147141143542,0.6183726509396241,0.618530587764894,0.6186885245901639,0.6188464614154339,0.6190043982407037,0.6191623350659736,0.6193202718912435,0.6194782087165134,0.6196361455417833,0.6197940823670531,0.6199520191923231,0.620109956017593,0.6202678928428629,0.6204258296681328,0.6205837664934026,0.6207417033186725,0.6208996401439424,0.6210575769692123,0.6212155137944823,0.6213734506197521,0.621531387445022,0.6216893242702919,0.6218472610955618,0.6220051979208316,0.6221631347461015,0.6223210715713714,0.6224790083966414,0.6226369452219113,0.6227948820471811,0.622952818872451,0.6231107556977209,0.6232686925229908,0.6234266293482607,0.6235845661735306,0.6237425029988005,0.6239004398240704,0.6240583766493403,0.6242163134746102,0.62437425029988,0.6245321871251499,0.6246901239504198,0.6248480607756898,0.6250059976009597,0.6251639344262295,0.6253218712514994,0.6254798080767693,0.6256377449020392,0.625795681727309,0.6259536185525789,0.6261115553778489,0.6262694922031188,0.6264274290283887,0.6265853658536585,0.6267433026789284,0.6269012395041983,0.6270591763294682,0.6272171131547382,0.627375049980008,0.6275329868052779,0.6276909236305478,0.6278488604558177,0.6280067972810875,0.6281647341063574,0.6283226709316273,0.6284806077568973,0.6286385445821672,0.628796481407437,0.6289544182327069,0.6291123550579768,0.6292702918832467,0.6294282287085166,0.6295861655337864,0.6297441023590564,0.6299020391843263,0.6300599760095962,0.6302179128348661,0.6303758496601359,0.6305337864854058,0.6306917233106757,0.6308496601359456,0.6310075969612156,0.6311655337864854,0.6313234706117553,0.6314814074370252,0.6316393442622951,0.6317972810875649,0.6319552179128348,0.6321131547381048,0.6322710915633747,0.6324290283886446,0.6325869652139144,0.6327449020391843,0.6329028388644542,0.6330607756897241,0.633218712514994,0.6333766493402639,0.6335345861655338,0.6336925229908037,0.6338504598160736,0.6340083966413435,0.6341663334666133,0.6343242702918832,0.6344822071171531,0.6346401439424231,0.634798080767693,0.6349560175929628,0.6351139544182327,0.6352718912435026,0.6354298280687725,0.6355877648940423,0.6357457017193123,0.6359036385445822,0.6360615753698521,0.636219512195122,0.6363774490203918,0.6365353858456617,0.6366933226709316,0.6368512594962015,0.6370091963214715,0.6371671331467413,0.6373250699720112,0.6374830067972811,0.637640943622551,0.6377988804478208,0.6379568172730907,0.6381147540983606,0.6382726909236306,0.6384306277489005,0.6385885645741703,0.6387465013994402,0.6389044382247101,0.63906237504998,0.6392203118752499,0.6393782487005198,0.6395361855257897,0.6396941223510596,0.6398520591763295,0.6400099960015994,0.6401679328268692,0.6403258696521391,0.640483806477409,0.640641743302679,0.6407996801279489,0.6409576169532187,0.6411155537784886,0.6412734906037585,0.6414314274290284,0.6415893642542982,0.6417473010795681,0.6419052379048381,0.642063174730108,0.6422211115553779,0.6423790483806477,0.6425369852059176,0.6426949220311875,0.6428528588564574,0.6430107956817273,0.6431687325069972,0.6433266693322671,0.643484606157537,0.6436425429828069,0.6438004798080768,0.6439584166333466,0.6441163534586165,0.6442742902838865,0.6444322271091564,0.6445901639344263,0.6447481007596961,0.644906037584966,0.6450639744102359,0.6452219112355058,0.6453798480607756,0.6455377848860456,0.6456957217113155,0.6458536585365854,0.6460115953618553,0.6461695321871251,0.646327469012395,0.6464854058376649,0.6466433426629348,0.6468012794882048,0.6469592163134746,0.6471171531387445,0.6472750899640144,0.6474330267892843,0.6475909636145541,0.647748900439824,0.647906837265094,0.6480647740903639,0.6482227109156338,0.6483806477409036,0.6485385845661735,0.6486965213914434,0.6488544582167133,0.6490123950419832,0.6491703318672531,0.649328268692523,0.6494862055177929,0.6496441423430628,0.6498020791683327,0.6499600159936025,0.6501179528188724,0.6502758896441423,0.6504338264694123,0.6505917632946822,0.650749700119952,0.6509076369452219,0.6510655737704918,0.6512235105957617,0.6513814474210315,0.6515393842463015,0.6516973210715714,0.6518552578968413,0.6520131947221112,0.652171131547381,0.6523290683726509,0.6524870051979208,0.6526449420231907,0.6528028788484607,0.6529608156737305,0.6531187524990004,0.6532766893242703,0.6534346261495402,0.65359256297481,0.6537504998000799,0.6539084366253498,0.6540663734506198,0.6542243102758897,0.6543822471011596,0.6545401839264294,0.6546981207516993,0.6548560575769692,0.6550139944022391,0.6551719312275089,0.6553298680527789,0.6554878048780488,0.6556457417033187,0.6558036785285886,0.6559616153538584,0.6561195521791283,0.6562774890043982,0.6564354258296682,0.6565933626549381,0.6567512994802079,0.6569092363054778,0.6570671731307477,0.6572251099560176,0.6573830467812875,0.6575409836065573,0.6576989204318273,0.6578568572570972,0.6580147940823671,0.658172730907637,0.6583306677329068,0.6584886045581767,0.6586465413834466,0.6588044782087165,0.6589624150339864,0.6591203518592563,0.6592782886845262,0.6594362255097961,0.659594162335066,0.6597520991603358,0.6599100359856057,0.6600679728108757,0.6602259096361456,0.6603838464614155,0.6605417832866853,0.6606997201119552,0.6608576569372251,0.661015593762495,0.6611735305877648,0.6613314674130348,0.6614894042383047,0.6616473410635746,0.6618052778888445,0.6619632147141143,0.6621211515393842,0.6622790883646541,0.662437025189924,0.662594962015194,0.6627528988404638,0.6629108356657337,0.6630687724910036,0.6632267093162735,0.6633846461415434,0.6635425829668132,0.6637005197920832,0.6638584566173531,0.664016393442623,0.6641743302678929,0.6643322670931627,0.6644902039184326,0.6646481407437025,0.6648060775689724,0.6649640143942424,0.6651219512195122,0.6652798880447821,0.665437824870052,0.6655957616953219,0.6657536985205917,0.6659116353458616,0.6660695721711315,0.6662275089964015,0.6663854458216714,0.6665433826469412,0.6667013194722111,0.666859256297481,0.6670171931227509,0.6671751299480208,0.6673330667732906,0.6674910035985606,0.6676489404238305,0.6678068772491004,0.6679648140743703,0.6681227508996401,0.66828068772491,0.6684386245501799,0.6685965613754499,0.6687544982007197,0.6689124350259896,0.6690703718512595,0.6692283086765294,0.6693862455017993,0.6695441823270691,0.669702119152339,0.669860055977609,0.6700179928028789,0.6701759296281488,0.6703338664534186,0.6704918032786885,0.6706497401039584,0.6708076769292283,0.6709656137544981,0.6711235505797681,0.671281487405038,0.6714394242303079,0.6715973610555778,0.6717552978808476,0.6719132347061175,0.6720711715313874,0.6722291083566574,0.6723870451819273,0.6725449820071971,0.672702918832467,0.6728608556577369,0.6730187924830068,0.6731767293082767,0.6733346661335465,0.6734926029588165,0.6736505397840864,0.6738084766093563,0.6739664134346262,0.674124350259896,0.6742822870851659,0.6744402239104358,0.6745981607357057,0.6747560975609757,0.6749140343862455,0.6750719712115154,0.6752299080367853,0.6753878448620552,0.675545781687325,0.6757037185125949,0.6758616553378649,0.6760195921631348,0.6761775289884047,0.6763354658136745,0.6764934026389444,0.6766513394642143,0.6768092762894842,0.676967213114754,0.677125149940024,0.6772830867652939,0.6774410235905638,0.6775989604158337,0.6777568972411036,0.6779148340663734,0.6780727708916433,0.6782307077169132,0.6783886445421832,0.678546581367453,0.6787045181927229,0.6788624550179928,0.6790203918432627,0.6791783286685326,0.6793362654938024,0.6794942023190723,0.6796521391443423,0.6798100759696122,0.6799680127948821,0.6801259496201519,0.6802838864454218,0.6804418232706917,0.6805997600959616,0.6807576969212316,0.6809156337465014,0.6810735705717713,0.6812315073970412,0.6813894442223111,0.681547381047581,0.6817053178728508,0.6818632546981207,0.6820211915233907,0.6821791283486606,0.6823370651739304,0.6824950019992003,0.6826529388244702,0.6828108756497401,0.68296881247501,0.6831267493002798,0.6832846861255498,0.6834426229508197,0.6836005597760896,0.6837584966013595,0.6839164334266293,0.6840743702518992,0.6842323070771691,0.6843902439024391,0.684548180727709,0.6847061175529788,0.6848640543782487,0.6850219912035186,0.6851799280287885,0.6853378648540583,0.6854958016793282,0.6856537385045982,0.6858116753298681,0.685969612155138,0.6861275489804078,0.6862854858056777,0.6864434226309476,0.6866013594562175,0.6867592962814874,0.6869172331067573,0.6870751699320272,0.6872331067572971,0.687391043582567,0.6875489804078369,0.6877069172331067,0.6878648540583766,0.6880227908836466,0.6881807277089165,0.6883386645341864,0.6884966013594562,0.6886545381847261,0.688812475009996,0.6889704118352659,0.6891283486605357,0.6892862854858057,0.6894442223110756,0.6896021591363455,0.6897600959616154,0.6899180327868852,0.6900759696121551,0.690233906437425,0.6903918432626949,0.6905497800879649,0.6907077169132347,0.6908656537385046,0.6910235905637745,0.6911815273890444,0.6913394642143142,0.6914974010395841,0.691655337864854,0.691813274690124,0.6919712115153939,0.6921291483406637,0.6922870851659336,0.6924450219912035,0.6926029588164734,0.6927608956417433,0.6929188324670132,0.6930767692922831,0.693234706117553,0.6933926429428229,0.6935505797680928,0.6937085165933626,0.6938664534186325,0.6940243902439024,0.6941823270691724,0.6943402638944423,0.6944982007197121,0.694656137544982,0.6948140743702519,0.6949720111955218,0.6951299480207916,0.6952878848460615,0.6954458216713315,0.6956037584966014,0.6957616953218713,0.6959196321471411,0.696077568972411,0.6962355057976809,0.6963934426229508,0.6965513794482208,0.6967093162734906,0.6968672530987605,0.6970251899240304,0.6971831267493003,0.6973410635745702,0.69749900039984,0.6976569372251099,0.6978148740503799,0.6979728108756498,0.6981307477009197,0.6982886845261895,0.6984466213514594,0.6986045581767293,0.6987624950019992,0.698920431827269,0.699078368652539,0.6992363054778089,0.6993942423030788,0.6995521791283487,0.6997101159536185,0.6998680527788884,0.7000259896041583,0.7001839264294283,0.7003418632546982,0.700499800079968,0.7006577369052379,0.7008156737305078,0.7009736105557777,0.7011315473810475,0.7012894842063174,0.7014474210315874,0.7016053578568573,0.7017632946821272,0.701921231507397,0.7020791683326669,0.7022371051579368,0.7023950419832067,0.7025529788084766,0.7027109156337465,0.7028688524590164,0.7030267892842863,0.7031847261095562,0.7033426629348261,0.7035005997600959,0.7036585365853658,0.7038164734106358,0.7039744102359057,0.7041323470611756,0.7042902838864454,0.7044482207117153,0.7046061575369852,0.7047640943622551,0.704922031187525,0.7050799680127949,0.7052379048380648,0.7053958416633347,0.7055537784886046,0.7057117153138744,0.7058696521391443,0.7060275889644142,0.7061855257896841,0.7063434626149541,0.7065013994402239,0.7066593362654938,0.7068172730907637,0.7069752099160336,0.7071331467413035,0.7072910835665733,0.7074490203918432,0.7076069572171132,0.7077648940423831,0.707922830867653,0.7080807676929228,0.7082387045181927,0.7083966413434626,0.7085545781687325,0.7087125149940025,0.7088704518192723,0.7090283886445422,0.7091863254698121,0.709344262295082,0.7095021991203518,0.7096601359456217,0.7098180727708916,0.7099760095961616,0.7101339464214315,0.7102918832467013,0.7104498200719712,0.7106077568972411,0.710765693722511,0.7109236305477808,0.7110815673730507,0.7112395041983207,0.7113974410235906,0.7115553778488605,0.7117133146741303,0.7118712514994002,0.7120291883246701,0.71218712514994,0.71234506197521,0.7125029988004798,0.7126609356257497,0.7128188724510196,0.7129768092762895,0.7131347461015594,0.7132926829268292,0.7134506197520991,0.7136085565773691,0.713766493402639,0.7139244302279089,0.7140823670531787,0.7142403038784486,0.7143982407037185,0.7145561775289884,0.7147141143542582,0.7148720511795282,0.7150299880047981,0.715187924830068,0.7153458616553379,0.7155037984806077,0.7156617353058776,0.7158196721311475,0.7159776089564175,0.7161355457816874,0.7162934826069572,0.7164514194322271,0.716609356257497,0.7167672930827669,0.7169252299080368,0.7170831667333066,0.7172411035585766,0.7173990403838465,0.7175569772091164,0.7177149140343863,0.7178728508596561,0.718030787684926,0.7181887245101959,0.7183466613354658,0.7185045981607358,0.7186625349860056,0.7188204718112755,0.7189784086365454,0.7191363454618153,0.7192942822870851,0.719452219112355,0.7196101559376249,0.7197680927628949,0.7199260295881648,0.7200839664134346,0.7202419032387045,0.7203998400639744,0.7205577768892443,0.7207157137145142,0.7208736505397841,0.721031587365054,0.7211895241903239,0.7213474610155938,0.7215053978408636,0.7216633346661335,0.7218212714914034,0.7219792083166733,0.7221371451419433,0.7222950819672131,0.722453018792483,0.7226109556177529,0.7227688924430228,0.7229268292682927,0.7230847660935625,0.7232427029188324,0.7234006397441024,0.7235585765693723,0.7237165133946422,0.723874450219912,0.7240323870451819,0.7241903238704518,0.7243482606957217,0.7245061975209917,0.7246641343462615,0.7248220711715314,0.7249800079968013,0.7251379448220712,0.725295881647341,0.7254538184726109,0.7256117552978808,0.7257696921231508,0.7259276289484207,0.7260855657736905,0.7262435025989604,0.7264014394242303,0.7265593762495002,0.72671731307477,0.7268752499000399,0.7270331867253099,0.7271911235505798,0.7273490603758497,0.7275069972011196,0.7276649340263894,0.7278228708516593,0.7279808076769292,0.7281387445021992,0.728296681327469,0.7284546181527389,0.7286125549780088,0.7287704918032787,0.7289284286285486,0.7290863654538184,0.7292443022790883,0.7294022391043583,0.7295601759296282,0.7297181127548981,0.7298760495801679,0.7300339864054378,0.7301919232307077,0.7303498600559776,0.7305077968812475,0.7306657337065174,0.7308236705317873,0.7309816073570572,0.7311395441823271,0.731297481007597,0.7314554178328668,0.7316133546581367,0.7317712914834066,0.7319292283086766,0.7320871651339464,0.7322451019592163,0.7324030387844862,0.7325609756097561,0.732718912435026,0.7328768492602958,0.7330347860855658,0.7331927229108357,0.7333506597361056,0.7335085965613755,0.7336665333866453,0.7338244702119152,0.7339824070371851,0.734140343862455,0.734298280687725,0.7344562175129948,0.7346141543382647,0.7347720911635346,0.7349300279888045,0.7350879648140743,0.7352459016393442,0.7354038384646141,0.7355617752898841,0.735719712115154,0.7358776489404238,0.7360355857656937,0.7361935225909636,0.7363514594162335,0.7365093962415034,0.7366673330667733,0.7368252698920432,0.7369832067173131,0.737141143542583,0.7372990803678529,0.7374570171931227,0.7376149540183926,0.7377728908436625,0.7379308276689325,0.7380887644942024,0.7382467013194722,0.7384046381447421,0.738562574970012,0.7387205117952819,0.7388784486205517,0.7390363854458216,0.7391943222710916,0.7393522590963615,0.7395101959216314,0.7396681327469012,0.7398260695721711,0.739984006397441,0.7401419432227109,0.7402998800479809,0.7404578168732507,0.7406157536985206,0.7407736905237905,0.7409316273490604,0.7410895641743303,0.7412475009996001,0.74140543782487,0.74156337465014,0.7417213114754099,0.7418792483006798,0.7420371851259496,0.7421951219512195,0.7423530587764894,0.7425109956017593,0.7426689324270291,0.7428268692522991,0.742984806077569,0.7431427429028389,0.7433006797281088,0.7434586165533786,0.7436165533786485,0.7437744902039184,0.7439324270291883,0.7440903638544583,0.7442483006797281,0.744406237504998,0.7445641743302679,0.7447221111555378,0.7448800479808076,0.7450379848060775,0.7451959216313475,0.7453538584566174,0.7455117952818873,0.7456697321071571,0.745827668932427,0.7459856057576969,0.7461435425829668,0.7463014794082367,0.7464594162335066,0.7466173530587765,0.7467752898840464,0.7469332267093163,0.7470911635345862,0.747249100359856,0.7474070371851259,0.7475649740103958,0.7477229108356658,0.7478808476609357,0.7480387844862055,0.7481967213114754,0.7483546581367453,0.7485125949620152,0.748670531787285,0.748828468612555,0.7489864054378249,0.7491443422630948,0.7493022790883647,0.7494602159136345,0.7496181527389044,0.7497760895641743,0.7499340263894442,0.7500919632147142,0.750249900039984,0.7504078368652539,0.7505657736905238,0.7507237105157937,0.7508816473410636,0.7510395841663334,0.7511975209916033,0.7513554578168733,0.7515133946421432,0.751671331467413,0.7518292682926829,0.7519872051179528,0.7521451419432227,0.7523030787684926,0.7524610155937625,0.7526189524190324,0.7527768892443023,0.7529348260695722,0.7530927628948421,0.7532506997201119,0.7534086365453818,0.7535665733706517,0.7537245101959217,0.7538824470211916,0.7540403838464614,0.7541983206717313,0.7543562574970012,0.7545141943222711,0.754672131147541,0.7548300679728108,0.7549880047980808,0.7551459416233507,0.7553038784486206,0.7554618152738904,0.7556197520991603,0.7557776889244302,0.7559356257497001,0.75609356257497,0.75625149940024,0.7564094362255098,0.7565673730507797,0.7567253098760496,0.7568832467013195,0.7570411835265893,0.7571991203518592,0.7573570571771292,0.7575149940023991,0.757672930827669,0.7578308676529388,0.7579888044782087,0.7581467413034786,0.7583046781287485,0.7584626149540183,0.7586205517792883,0.7587784886045582,0.7589364254298281,0.759094362255098,0.7592522990803678,0.7594102359056377,0.7595681727309076,0.7597261095561775,0.7598840463814475,0.7600419832067173,0.7601999200319872,0.7603578568572571,0.760515793682527,0.7606737305077969,0.7608316673330667,0.7609896041583367,0.7611475409836066,0.7613054778088765,0.7614634146341464,0.7616213514594162,0.7617792882846861,0.761937225109956,0.7620951619352259,0.7622530987604959,0.7624110355857657,0.7625689724110356,0.7627269092363055,0.7628848460615754,0.7630427828868452,0.7632007197121151,0.763358656537385,0.763516593362655,0.7636745301879249,0.7638324670131947,0.7639904038384646,0.7641483406637345,0.7643062774890044,0.7644642143142742,0.7646221511395442,0.7647800879648141,0.764938024790084,0.7650959616153539,0.7652538984406237,0.7654118352658936,0.7655697720911635,0.7657277089164334,0.7658856457417034,0.7660435825669732,0.7662015193922431,0.766359456217513,0.7665173930427829,0.7666753298680528,0.7668332666933226,0.7669912035185925,0.7671491403438625,0.7673070771691324,0.7674650139944023,0.7676229508196721,0.767780887644942,0.7679388244702119,0.7680967612954818,0.7682546981207516,0.7684126349460216,0.7685705717712915,0.7687285085965614,0.7688864454218313,0.7690443822471011,0.769202319072371,0.7693602558976409,0.7695181927229109,0.7696761295481808,0.7698340663734506,0.7699920031987205,0.7701499400239904,0.7703078768492603,0.7704658136745302,0.7706237504998,0.77078168732507,0.7709396241503399,0.7710975609756098,0.7712554978008797,0.7714134346261495,0.7715713714514194,0.7717293082766893,0.7718872451019592,0.7720451819272292,0.772203118752499,0.7723610555777689,0.7725189924030388,0.7726769292283087,0.7728348660535785,0.7729928028788484,0.7731507397041184,0.7733086765293883,0.7734666133546582,0.773624550179928,0.7737824870051979,0.7739404238304678,0.7740983606557377,0.7742562974810075,0.7744142343062775,0.7745721711315474,0.7747301079568173,0.7748880447820872,0.775045981607357,0.7752039184326269,0.7753618552578968,0.7755197920831667,0.7756777289084367,0.7758356657337065,0.7759936025589764,0.7761515393842463,0.7763094762095162,0.7764674130347861,0.7766253498600559,0.7767832866853259,0.7769412235105958,0.7770991603358657,0.7772570971611356,0.7774150339864054,0.7775729708116753,0.7777309076369452,0.7778888444622151,0.7780467812874851,0.7782047181127549,0.7783626549380248,0.7785205917632947,0.7786785285885646,0.7788364654138344,0.7789944022391043,0.7791523390643742,0.7793102758896442,0.7794682127149141,0.7796261495401839,0.7797840863654538,0.7799420231907237,0.7800999600159936,0.7802578968412635,0.7804158336665333,0.7805737704918033,0.7807317073170732,0.7808896441423431,0.781047580967613,0.7812055177928828,0.7813634546181527,0.7815213914434226,0.7816793282686926,0.7818372650939625,0.7819952019192323,0.7821531387445022,0.7823110755697721,0.782469012395042,0.7826269492203118,0.7827848860455817,0.7829428228708517,0.7831007596961216,0.7832586965213915,0.7834166333466613,0.7835745701719312,0.7837325069972011,0.783890443822471,0.7840483806477409,0.7842063174730108,0.7843642542982807,0.7845221911235506,0.7846801279488205,0.7848380647740903,0.7849960015993602,0.7851539384246301,0.7853118752499001,0.78546981207517,0.7856277489004398,0.7857856857257097,0.7859436225509796,0.7861015593762495,0.7862594962015194,0.7864174330267892,0.7865753698520592,0.7867333066773291,0.786891243502599,0.7870491803278689,0.7872071171531387,0.7873650539784086,0.7875229908036785,0.7876809276289484,0.7878388644542184,0.7879968012794882,0.7881547381047581,0.788312674930028,0.7884706117552979,0.7886285485805677,0.7887864854058376,0.7889444222311076,0.7891023590563775,0.7892602958816474,0.7894182327069172,0.7895761695321871,0.789734106357457,0.7898920431827269,0.7900499800079968,0.7902079168332667,0.7903658536585366,0.7905237904838065,0.7906817273090764,0.7908396641343463,0.7909976009596161,0.791155537784886,0.7913134746101559,0.7914714114354259,0.7916293482606958,0.7917872850859656,0.7919452219112355,0.7921031587365054,0.7922610955617753,0.7924190323870451,0.792576969212315,0.792734906037585,0.7928928428628549,0.7930507796881248,0.7932087165133946,0.7933666533386645,0.7935245901639344,0.7936825269892043,0.7938404638144743,0.7939984006397441,0.794156337465014,0.7943142742902839,0.7944722111155538,0.7946301479408237,0.7947880847660935,0.7949460215913634,0.7951039584166334,0.7952618952419033,0.7954198320671731,0.795577768892443,0.7957357057177129,0.7958936425429828,0.7960515793682527,0.7962095161935225,0.7963674530187925,0.7965253898440624,0.7966833266693323,0.7968412634946022,0.796999200319872,0.7971571371451419,0.7973150739704118,0.7974730107956818,0.7976309476209517,0.7977888844462215,0.7979468212714914,0.7981047580967613,0.7982626949220312,0.798420631747301,0.7985785685725709,0.7987365053978409,0.7988944422231108,0.7990523790483807,0.7992103158736505,0.7993682526989204,0.7995261895241903,0.7996841263494602,0.7998420631747301,0.8]}
},{}],57:[function(require,module,exports){
module.exports={"expected":[1.0e19,1.0000999e19,1.0002e19,1.0003e19,1.0004001e19,1.0005002e19,1.0006003e19,1.0007004e19,1.0008007e19,1.0009008e19,1.0010011e19,1.0011014e19,1.0012017e19,1.001302e19,1.0014024e19,1.0015028e19,1.0016032e19,1.0017037e19,1.0018042e19,1.0019047e19,1.0020052e19,1.0021058e19,1.0022064e19,1.002307e19,1.0024077e19,1.0025084e19,1.0026091e19,1.0027099e19,1.0028107e19,1.0029115e19,1.0030123e19,1.0031133e19,1.0032141e19,1.0033151e19,1.0034161e19,1.003517e19,1.0036182e19,1.0037192e19,1.0038203e19,1.0039214e19,1.0040226e19,1.0041237e19,1.004225e19,1.0043262e19,1.0044274e19,1.0045288e19,1.0046302e19,1.0047314e19,1.0048329e19,1.0049344e19,1.0050358e19,1.0051372e19,1.0052388e19,1.0053403e19,1.0054419e19,1.0055436e19,1.0056452e19,1.0057469e19,1.0058486e19,1.0059503e19,1.006052e19,1.006154e19,1.0062558e19,1.0063576e19,1.0064595e19,1.0065614e19,1.0066634e19,1.0067654e19,1.0068674e19,1.0069694e19,1.0070715e19,1.0071737e19,1.0072758e19,1.0073779e19,1.0074802e19,1.0075823e19,1.0076846e19,1.007787e19,1.0078892e19,1.0079916e19,1.008094e19,1.0081964e19,1.0082989e19,1.0084014e19,1.0085038e19,1.0086064e19,1.008709e19,1.0088116e19,1.0089143e19,1.009017e19,1.0091196e19,1.0092224e19,1.0093252e19,1.0094279e19,1.0095308e19,1.0096337e19,1.0097366e19,1.0098394e19,1.0099424e19,1.0100455e19,1.0101484e19,1.0102515e19,1.0103545e19,1.0104577e19,1.0105608e19,1.010664e19,1.0107672e19,1.0108704e19,1.0109738e19,1.011077e19,1.0111804e19,1.0112837e19,1.0113871e19,1.0114906e19,1.011594e19,1.0116975e19,1.0118011e19,1.0119046e19,1.0120081e19,1.0121118e19,1.0122155e19,1.012319e19,1.0124228e19,1.0125266e19,1.0126303e19,1.0127342e19,1.012838e19,1.0129419e19,1.0130458e19,1.0131497e19,1.0132537e19,1.0133577e19,1.0134618e19,1.0135659e19,1.0136699e19,1.013774e19,1.0138783e19,1.0139824e19,1.0140866e19,1.014191e19,1.0142952e19,1.0143995e19,1.0145039e19,1.0146082e19,1.0147127e19,1.0148171e19,1.0149216e19,1.0150261e19,1.0151307e19,1.0152353e19,1.0153398e19,1.0154445e19,1.0155492e19,1.015654e19,1.0157586e19,1.0158634e19,1.0159682e19,1.0160731e19,1.0161779e19,1.0162829e19,1.0163878e19,1.0164928e19,1.0165978e19,1.0167028e19,1.0168079e19,1.016913e19,1.0170181e19,1.0171234e19,1.0172285e19,1.0173337e19,1.017439e19,1.0175442e19,1.0176496e19,1.017755e19,1.0178604e19,1.0179658e19,1.0180714e19,1.0181768e19,1.0182823e19,1.0183879e19,1.0184935e19,1.0185991e19,1.0187048e19,1.0188104e19,1.0189161e19,1.0190219e19,1.0191277e19,1.0192335e19,1.0193394e19,1.0194452e19,1.0195512e19,1.0196572e19,1.0197631e19,1.0198692e19,1.0199753e19,1.0200814e19,1.0201874e19,1.0202936e19,1.0203998e19,1.020506e19,1.0206122e19,1.0207185e19,1.0208249e19,1.0209312e19,1.0210376e19,1.0211439e19,1.0212505e19,1.0213569e19,1.0214635e19,1.02157e19,1.0216766e19,1.0217832e19,1.0218898e19,1.0219966e19,1.0221033e19,1.02221e19,1.0223168e19,1.0224235e19,1.0225304e19,1.0226374e19,1.0227443e19,1.0228513e19,1.0229582e19,1.0230652e19,1.0231723e19,1.0232794e19,1.0233865e19,1.0234936e19,1.0236009e19,1.0237081e19,1.0238153e19,1.0239226e19,1.0240299e19,1.0241372e19,1.0242447e19,1.0243521e19,1.0244595e19,1.024567e19,1.0246746e19,1.0247821e19,1.0248898e19,1.0249974e19,1.025105e19,1.0252127e19,1.0253204e19,1.0254282e19,1.025536e19,1.0256439e19,1.0257517e19,1.0258596e19,1.0259676e19,1.0260755e19,1.0261835e19,1.0262916e19,1.0263996e19,1.0265077e19,1.0266159e19,1.026724e19,1.0268323e19,1.0269406e19,1.0270488e19,1.0271571e19,1.0272655e19,1.0273739e19,1.0274822e19,1.0275907e19,1.0276992e19,1.0278076e19,1.0279163e19,1.0280248e19,1.0281334e19,1.028242e19,1.0283508e19,1.0284594e19,1.0285683e19,1.028677e19,1.0287859e19,1.0288947e19,1.0290037e19,1.0291125e19,1.0292215e19,1.0293306e19,1.0294395e19,1.0295486e19,1.0296577e19,1.0297669e19,1.029876e19,1.0299852e19,1.0300944e19,1.0302037e19,1.0303131e19,1.0304224e19,1.0305318e19,1.0306412e19,1.0307507e19,1.0308601e19,1.0309696e19,1.0310792e19,1.0311887e19,1.0312985e19,1.0314081e19,1.0315177e19,1.0316276e19,1.0317373e19,1.031847e19,1.0319569e19,1.0320668e19,1.0321767e19,1.0322866e19,1.0323967e19,1.0325066e19,1.0326167e19,1.0327267e19,1.0328368e19,1.032947e19,1.0330573e19,1.0331674e19,1.0332777e19,1.033388e19,1.0334983e19,1.0336087e19,1.033719e19,1.0338294e19,1.0339399e19,1.0340504e19,1.034161e19,1.0342716e19,1.0343822e19,1.0344929e19,1.0346035e19,1.0347142e19,1.034825e19,1.0349358e19,1.0350466e19,1.0351575e19,1.0352684e19,1.0353793e19,1.0354903e19,1.0356012e19,1.0357124e19,1.0358234e19,1.0359345e19,1.0360456e19,1.0361569e19,1.036268e19,1.0363793e19,1.0364906e19,1.0366019e19,1.0367132e19,1.0368246e19,1.036936e19,1.0370475e19,1.0371591e19,1.0372706e19,1.0373822e19,1.0374938e19,1.0376055e19,1.0377171e19,1.0378288e19,1.0379406e19,1.0380523e19,1.0381643e19,1.0382761e19,1.038388e19,1.0385e19,1.0386119e19,1.0387239e19,1.038836e19,1.0389481e19,1.0390601e19,1.0391723e19,1.0392846e19,1.0393967e19,1.039509e19,1.0396213e19,1.0397336e19,1.039846e19,1.0399584e19,1.0400708e19,1.0401833e19,1.0402959e19,1.0404084e19,1.040521e19,1.0406337e19,1.0407462e19,1.040859e19,1.0409718e19,1.0410845e19,1.0411973e19,1.0413102e19,1.0414231e19,1.0415359e19,1.041649e19,1.041762e19,1.041875e19,1.041988e19,1.0421012e19,1.0422143e19,1.0423275e19,1.0424407e19,1.042554e19,1.0426672e19,1.0427806e19,1.0428939e19,1.0430073e19,1.0431208e19,1.0432342e19,1.0433477e19,1.0434613e19,1.0435749e19,1.0436885e19,1.0438022e19,1.0439158e19,1.0440296e19,1.0441434e19,1.0442571e19,1.044371e19,1.0444849e19,1.0445988e19,1.0447127e19,1.0448268e19,1.0449409e19,1.0450549e19,1.045169e19,1.0452832e19,1.0453973e19,1.0455115e19,1.0456259e19,1.0457401e19,1.0458545e19,1.0459688e19,1.0460832e19,1.0461976e19,1.0463122e19,1.0464267e19,1.0465412e19,1.0466558e19,1.0467704e19,1.0468852e19,1.0469998e19,1.0471145e19,1.0472293e19,1.0473442e19,1.047459e19,1.0475739e19,1.0476889e19,1.0478038e19,1.0479188e19,1.0480339e19,1.0481489e19,1.048264e19,1.0483793e19,1.0484944e19,1.0486097e19,1.048725e19,1.0488403e19,1.0489556e19,1.0490711e19,1.0491865e19,1.0493019e19,1.0494174e19,1.049533e19,1.0496486e19,1.0497642e19,1.0498799e19,1.0499956e19,1.0501112e19,1.0502271e19,1.0503428e19,1.0504587e19,1.0505746e19,1.0506905e19,1.0508065e19,1.0509224e19,1.0510384e19,1.0511546e19,1.0512708e19,1.0513869e19,1.0515031e19,1.0516193e19,1.0517355e19,1.0518519e19,1.0519682e19,1.0520846e19,1.0522011e19,1.0523175e19,1.052434e19,1.0525505e19,1.0526672e19,1.0527838e19,1.0529004e19,1.0530171e19,1.0531339e19,1.0532506e19,1.0533674e19,1.0534843e19,1.0536012e19,1.0537181e19,1.0538351e19,1.053952e19,1.0540691e19,1.0541862e19,1.0543033e19,1.0544205e19,1.0545378e19,1.054655e19,1.0547723e19,1.0548896e19,1.0550069e19,1.0551243e19,1.0552418e19,1.0553592e19,1.0554767e19,1.0555943e19,1.0557118e19,1.0558296e19,1.0559472e19,1.0560649e19,1.0561826e19,1.0563005e19,1.0564184e19,1.0565361e19,1.0566541e19,1.0567721e19,1.05689e19,1.057008e19,1.0571261e19,1.0572442e19,1.0573624e19,1.0574806e19,1.0575988e19,1.0577171e19,1.0578354e19,1.0579537e19,1.0580721e19,1.0581906e19,1.058309e19,1.0584275e19,1.058546e19,1.0586646e19,1.0587832e19,1.0589019e19,1.0590206e19,1.0591393e19,1.0592582e19,1.0593769e19,1.0594958e19,1.0596147e19,1.0597336e19,1.0598527e19,1.0599717e19,1.0600907e19,1.0602098e19,1.060329e19,1.0604482e19,1.0605674e19,1.0606867e19,1.060806e19,1.0609253e19,1.0610447e19,1.0611642e19,1.0612836e19,1.0614031e19,1.0615227e19,1.0616422e19,1.0617619e19,1.0618816e19,1.0620012e19,1.062121e19,1.0622408e19,1.0623606e19,1.0624805e19,1.0626005e19,1.0627203e19,1.0628404e19,1.0629605e19,1.0630804e19,1.0632006e19,1.0633208e19,1.0634409e19,1.0635611e19,1.0636815e19,1.0638017e19,1.0639221e19,1.0640426e19,1.064163e19,1.0642834e19,1.064404e19,1.0645246e19,1.0646451e19,1.0647659e19,1.0648865e19,1.0650072e19,1.065128e19,1.0652489e19,1.0653696e19,1.0654905e19,1.0656115e19,1.0657324e19,1.0658535e19,1.0659745e19,1.0660956e19,1.0662168e19,1.0663379e19,1.0664591e19,1.0665804e19,1.0667018e19,1.066823e19,1.0669444e19,1.0670659e19,1.0671873e19,1.0673089e19,1.0674304e19,1.067552e19,1.0676736e19,1.0677953e19,1.067917e19,1.0680388e19,1.0681606e19,1.0682825e19,1.0684044e19,1.0685263e19,1.0686483e19,1.0687703e19,1.0688923e19,1.0690145e19,1.0691365e19,1.0692588e19,1.069381e19,1.0695032e19,1.0696256e19,1.069748e19,1.0698702e19,1.0699927e19,1.0701152e19,1.0702377e19,1.0703603e19,1.0704829e19,1.0706055e19,1.0707282e19,1.0708509e19,1.0709737e19,1.0710965e19,1.0712193e19,1.0713422e19,1.0714652e19,1.0715882e19,1.0717111e19,1.0718343e19,1.0719573e19,1.0720806e19,1.0722037e19,1.072327e19,1.0724502e19,1.0725735e19,1.0726968e19,1.0728203e19,1.0729437e19,1.0730673e19,1.0731907e19,1.0733143e19,1.0734379e19,1.0735616e19,1.0736853e19,1.0738091e19,1.0739329e19,1.0740566e19,1.0741805e19,1.0743046e19,1.0744284e19,1.0745525e19,1.0746765e19,1.0748005e19,1.0749247e19,1.0750489e19,1.0751731e19,1.0752974e19,1.0754217e19,1.075546e19,1.0756704e19,1.0757948e19,1.0759193e19,1.0760439e19,1.0761684e19,1.076293e19,1.0764176e19,1.0765424e19,1.0766672e19,1.0767919e19,1.0769167e19,1.0770416e19,1.0771665e19,1.0772915e19,1.0774165e19,1.0775414e19,1.0776665e19,1.0777918e19,1.0779168e19,1.0780421e19,1.0781674e19,1.0782926e19,1.0784179e19,1.0785434e19,1.0786687e19,1.0787943e19,1.0789199e19,1.0790453e19,1.079171e19,1.0792967e19,1.0794222e19,1.079548e19,1.0796739e19,1.0797996e19,1.0799256e19,1.0800515e19,1.0801775e19,1.0803034e19,1.0804295e19,1.0805556e19,1.0806817e19,1.080808e19,1.0809342e19,1.0810604e19,1.0811867e19,1.0813131e19,1.0814394e19,1.081566e19,1.0816924e19,1.081819e19,1.0819455e19,1.0820722e19,1.0821988e19,1.0823255e19,1.0824523e19,1.082579e19,1.0827059e19,1.0828328e19,1.0829597e19,1.0830868e19,1.0832138e19,1.0833408e19,1.083468e19,1.0835951e19,1.0837223e19,1.0838495e19,1.0839768e19,1.0841042e19,1.0842316e19,1.084359e19,1.0844866e19,1.084614e19,1.0847416e19,1.0848692e19,1.0849969e19,1.0851245e19,1.0852523e19,1.08538e19,1.0855079e19,1.0856358e19,1.0857637e19,1.0858916e19,1.0860197e19,1.0861477e19,1.0862758e19,1.086404e19,1.0865322e19,1.0866604e19,1.0867887e19,1.086917e19,1.0870455e19,1.0871739e19,1.0873023e19,1.0874309e19,1.0875595e19,1.087688e19,1.0878167e19,1.0879454e19,1.0880741e19,1.0882029e19,1.0883318e19,1.0884607e19,1.0885895e19,1.0887185e19,1.0888476e19,1.0889765e19,1.0891057e19,1.0892349e19,1.089364e19,1.0894933e19,1.0896226e19,1.0897519e19,1.0898813e19,1.0900109e19,1.0901403e19,1.0902698e19,1.0903994e19,1.090529e19,1.0906586e19,1.0907883e19,1.0909181e19,1.0910479e19,1.0911778e19,1.0913076e19,1.0914376e19,1.0915675e19,1.0916975e19,1.0918277e19,1.0919579e19,1.092088e19,1.0922182e19,1.0923485e19,1.0924787e19,1.0926091e19,1.0927395e19,1.09287e19,1.0930004e19,1.093131e19,1.0932617e19,1.0933923e19,1.0935229e19,1.0936538e19,1.0937845e19,1.0939153e19,1.0940462e19,1.0941771e19,1.0943081e19,1.0944391e19,1.0945701e19,1.0947013e19,1.0948324e19,1.0949636e19,1.0950949e19,1.0952262e19,1.0953575e19,1.095489e19,1.0956203e19,1.0957518e19,1.0958833e19,1.096015e19,1.0961466e19,1.0962783e19,1.09641e19,1.0965417e19,1.0966736e19,1.0968055e19,1.0969373e19,1.0970693e19,1.0972013e19,1.0973334e19,1.0974654e19,1.0975977e19,1.0977299e19,1.097862e19,1.0979944e19,1.0981268e19,1.0982591e19,1.0983916e19,1.098524e19,1.0986565e19,1.0987891e19,1.0989218e19,1.0990545e19,1.0991872e19,1.09932e19,1.0994528e19,1.0995857e19,1.0997187e19,1.0998515e19,1.0999846e19,1.1001177e19,1.1002507e19,1.100384e19,1.1005171e19,1.1006504e19,1.1007837e19,1.1009171e19,1.1010504e19,1.1011839e19,1.1013175e19,1.1014511e19,1.1015845e19,1.1017182e19,1.1018519e19,1.1019856e19,1.1021194e19,1.1022534e19,1.1023872e19,1.1025211e19,1.1026551e19,1.1027892e19,1.1029232e19,1.1030574e19,1.1031915e19,1.1033258e19,1.1034601e19,1.1035943e19,1.1037288e19,1.1038633e19,1.1039976e19,1.1041322e19,1.1042668e19,1.1044014e19,1.1045361e19,1.1046709e19,1.1048056e19,1.1049404e19,1.1050753e19,1.1052102e19,1.1053452e19,1.1054802e19,1.1056152e19,1.1057504e19,1.1058856e19,1.1060208e19,1.106156e19,1.1062913e19,1.1064268e19,1.1065621e19,1.1066976e19,1.1068332e19,1.1069686e19,1.1071043e19,1.10724e19,1.1073757e19,1.1075115e19,1.1076474e19,1.1077831e19,1.107919e19,1.108055e19,1.108191e19,1.1083271e19,1.1084633e19,1.1085993e19,1.1087357e19,1.1088719e19,1.1090081e19,1.1091446e19,1.109281e19,1.1094173e19,1.1095539e19,1.1096906e19,1.1098271e19,1.1099638e19,1.1101006e19,1.1102374e19,1.1103741e19,1.110511e19,1.1106479e19,1.1107849e19,1.1109219e19,1.111059e19,1.1111961e19,1.1113334e19,1.1114706e19,1.1116078e19,1.1117451e19,1.1118826e19,1.1120199e19,1.1121574e19,1.112295e19,1.1124325e19,1.1125702e19,1.1127079e19,1.1128455e19,1.1129834e19,1.1131213e19,1.113259e19,1.113397e19,1.113535e19,1.113673e19,1.1138112e19,1.1139493e19,1.1140875e19,1.1142257e19,1.114364e19,1.1145024e19,1.1146408e19,1.1147793e19,1.1149179e19,1.1150563e19,1.115195e19,1.1153337e19,1.1154724e19,1.1156111e19,1.11575e19,1.1158887e19,1.1160277e19,1.1161667e19,1.1163057e19,1.1164448e19,1.116584e19,1.116723e19,1.1168624e19,1.1170017e19,1.117141e19,1.1172804e19,1.1174198e19,1.1175592e19,1.1176989e19,1.1178385e19,1.117978e19,1.1181178e19,1.1182575e19,1.1183973e19,1.1185372e19,1.1186772e19,1.1188171e19,1.1189572e19,1.1190972e19,1.1192374e19,1.1193775e19,1.1195178e19,1.1196581e19,1.1197983e19,1.1199387e19,1.1200792e19,1.1202196e19,1.1203602e19,1.1205009e19,1.1206414e19,1.1207821e19,1.120923e19,1.1210637e19,1.1212046e19,1.1213455e19,1.1214865e19,1.1216275e19,1.1217686e19,1.1219097e19,1.1220508e19,1.1221921e19,1.1223334e19,1.1224747e19,1.1226162e19,1.1227576e19,1.1228991e19,1.1230407e19,1.1231822e19,1.123324e19,1.1234657e19,1.1236074e19,1.1237493e19,1.1238911e19,1.1240332e19,1.124175e19,1.124317e19,1.1244592e19,1.1246013e19,1.1247436e19,1.1248858e19,1.1250281e19,1.1251705e19,1.1253129e19,1.1254554e19,1.1255979e19,1.1257405e19,1.1258831e19,1.1260258e19,1.1261685e19,1.1263112e19,1.1264542e19,1.1265971e19,1.12674e19,1.1268831e19,1.1270261e19,1.1271692e19,1.1273124e19,1.1274557e19,1.1275989e19,1.1277422e19,1.1278857e19,1.1280291e19,1.1281726e19,1.1283162e19,1.1284599e19,1.1286035e19,1.1287472e19,1.128891e19,1.1290348e19,1.1291788e19,1.1293227e19,1.1294666e19,1.1296108e19,1.1297549e19,1.1298989e19,1.1300432e19,1.1301876e19,1.1303318e19,1.1304762e19,1.1306207e19,1.1307651e19,1.1309097e19,1.1310543e19,1.1311989e19,1.1313437e19,1.1314885e19,1.1316333e19,1.1317782e19,1.1319231e19,1.1320681e19,1.1322132e19,1.1323583e19,1.1325034e19,1.1326487e19,1.132794e19,1.1329392e19,1.1330847e19,1.1332301e19,1.1333757e19,1.1335212e19,1.1336667e19,1.1338125e19,1.1339581e19,1.1341039e19,1.1342498e19,1.1343956e19,1.1345416e19,1.1346876e19,1.1348337e19,1.1349798e19,1.135126e19,1.1352723e19,1.1354185e19,1.1355649e19,1.1357112e19,1.1358577e19,1.1360043e19,1.1361508e19,1.1362974e19,1.1364441e19,1.1365908e19,1.1367377e19,1.1368846e19,1.1370314e19,1.1371784e19,1.1373255e19,1.1374725e19,1.1376196e19,1.1377668e19,1.1379142e19,1.1380614e19,1.1382088e19,1.1383563e19,1.1385037e19,1.1386513e19,1.1387989e19,1.1389465e19,1.1390943e19,1.139242e19,1.1393898e19,1.1395377e19,1.1396857e19,1.1398336e19,1.1399817e19,1.1401299e19,1.140278e19,1.1404262e19,1.1405745e19,1.1407229e19,1.1408713e19,1.1410197e19,1.1411682e19,1.1413168e19,1.1414655e19,1.1416141e19,1.1417629e19,1.1419118e19,1.1420605e19,1.1422095e19,1.1423585e19,1.1425075e19,1.1426567e19,1.1428059e19,1.1429551e19,1.1431043e19,1.1432537e19,1.1434031e19,1.1435525e19,1.1437021e19,1.1438516e19,1.1440012e19,1.1441509e19,1.1443007e19,1.1444504e19,1.1446004e19,1.1447503e19,1.1449002e19,1.1450503e19,1.1452004e19,1.1453505e19,1.1455008e19,1.1456511e19,1.1458014e19,1.1459518e19,1.1461023e19,1.1462527e19,1.1464034e19,1.146554e19,1.1467046e19,1.1468554e19,1.1470062e19,1.1471571e19,1.1473081e19,1.147459e19,1.14761e19,1.1477612e19,1.1479123e19,1.1480636e19,1.1482148e19,1.1483662e19,1.1485177e19,1.1486691e19,1.1488207e19,1.1489723e19,1.1491239e19,1.1492756e19,1.1494274e19,1.1495792e19,1.149731e19,1.1498831e19,1.150035e19,1.1501871e19,1.1503393e19,1.1504914e19,1.1506436e19,1.150796e19,1.1509483e19,1.1511008e19,1.1512533e19,1.1514058e19,1.1515584e19,1.1517112e19,1.1518639e19,1.1520167e19,1.1521695e19,1.1523224e19,1.1524754e19,1.1526285e19,1.1527816e19,1.1529347e19,1.153088e19,1.1532414e19,1.1533946e19,1.153548e19,1.1537015e19,1.153855e19,1.1540086e19,1.1541623e19,1.1543159e19,1.1544697e19,1.1546237e19,1.1547775e19,1.1549314e19,1.1550855e19,1.1552395e19,1.1553936e19,1.1555479e19,1.1557022e19,1.1558564e19,1.1560109e19,1.1561653e19,1.1563199e19,1.1564745e19,1.1566291e19,1.1567838e19,1.1569386e19,1.1570933e19,1.1572482e19,1.1574032e19,1.1575581e19,1.1577133e19,1.1578684e19,1.1580237e19,1.1581788e19,1.1583342e19,1.1584897e19,1.158645e19,1.1588006e19,1.1589562e19,1.1591118e19,1.1592674e19,1.1594232e19,1.159579e19,1.159735e19,1.159891e19,1.1600469e19,1.160203e19,1.1603592e19,1.1605153e19,1.1606716e19,1.160828e19,1.1609843e19,1.1611408e19,1.1612974e19,1.1614538e19,1.1616105e19,1.1617673e19,1.161924e19,1.1620809e19,1.1622378e19,1.1623947e19,1.1625517e19,1.1627088e19,1.162866e19,1.1630232e19,1.1631805e19,1.1633378e19,1.1634952e19,1.1636527e19,1.1638103e19,1.1639679e19,1.1641255e19,1.1642833e19,1.164441e19,1.1645989e19,1.1647569e19,1.1649148e19,1.1650729e19,1.165231e19,1.1653891e19,1.1655474e19,1.1657057e19,1.1658641e19,1.1660225e19,1.1661811e19,1.1663395e19,1.1664983e19,1.1666569e19,1.1668156e19,1.1669745e19,1.1671335e19,1.1672923e19,1.1674513e19,1.1676105e19,1.1677695e19,1.1679288e19,1.1680882e19,1.1682475e19,1.1684068e19,1.1685663e19,1.168726e19,1.1688854e19,1.1690452e19,1.1692049e19,1.1693647e19,1.1695246e19,1.1696845e19,1.1698445e19,1.1700046e19,1.1701647e19,1.1703249e19,1.1704852e19,1.1706455e19,1.1708058e19,1.1709664e19,1.1711269e19,1.1712874e19,1.1714482e19,1.1716089e19,1.1717697e19,1.1719305e19,1.1720915e19,1.1722523e19,1.1724134e19,1.1725746e19,1.1727358e19,1.172897e19,1.1730584e19,1.1732198e19,1.1733812e19,1.1735427e19,1.1737044e19,1.173866e19,1.1740277e19,1.1741896e19,1.1743513e19,1.1745133e19,1.1746753e19,1.1748373e19,1.1749995e19,1.1751617e19,1.1753238e19,1.1754862e19,1.1756486e19,1.175811e19,1.1759736e19,1.1761363e19,1.1762989e19,1.1764616e19,1.1766244e19,1.1767873e19,1.1769502e19,1.1771133e19,1.1772762e19,1.1774394e19,1.1776027e19,1.1777658e19,1.1779292e19,1.1780926e19,1.178256e19,1.1784196e19,1.1785833e19,1.178747e19,1.1789107e19,1.1790745e19,1.1792384e19,1.1794024e19,1.1795664e19,1.1797306e19,1.1798946e19,1.1800589e19,1.1802233e19,1.1803875e19,1.180552e19,1.1807165e19,1.180881e19,1.1810457e19,1.1812104e19,1.1813751e19,1.18154e19,1.181705e19,1.1818699e19,1.1820349e19,1.1822001e19,1.1823652e19,1.1825305e19,1.182696e19,1.1828612e19,1.1830267e19,1.1831923e19,1.1833579e19,1.1835236e19,1.1836894e19,1.1838552e19,1.184021e19,1.184187e19,1.184353e19,1.184519e19,1.1846853e19,1.1848515e19,1.1850178e19,1.1851841e19,1.1853507e19,1.1855171e19,1.1856838e19,1.1858504e19,1.1860171e19,1.1861839e19,1.1863508e19,1.1865177e19,1.1866848e19,1.1868519e19,1.1870189e19,1.1871861e19,1.1873535e19,1.1875208e19,1.1876883e19,1.1878558e19,1.1880233e19,1.188191e19,1.1883588e19,1.1885264e19,1.1886943e19,1.1888623e19,1.1890302e19,1.1891984e19,1.1893666e19,1.1895348e19,1.189703e19,1.1898714e19,1.1900398e19,1.1902083e19,1.1903769e19,1.1905456e19,1.1907142e19,1.190883e19,1.1910519e19,1.1912208e19,1.1913898e19,1.1915589e19,1.191728e19,1.1918972e19,1.1920665e19,1.1922359e19,1.1924053e19,1.1925748e19,1.1927444e19,1.192914e19,1.1930838e19,1.1932536e19,1.1934234e19,1.1935934e19,1.1937634e19,1.1939335e19,1.1941037e19,1.1942739e19,1.1944442e19,1.1946147e19,1.1947851e19,1.1949556e19,1.1951263e19,1.1952969e19,1.1954675e19,1.1956384e19,1.1958094e19,1.1959802e19,1.1961513e19,1.1963225e19,1.1964936e19,1.1966649e19,1.1968362e19,1.1970075e19,1.197179e19,1.1973507e19,1.1975222e19,1.197694e19,1.1978658e19,1.1980375e19,1.1982095e19,1.1983816e19,1.1985535e19,1.1987257e19,1.1988979e19,1.1990702e19,1.1992426e19,1.199415e19,1.1995875e19,1.1997602e19,1.1999329e19,1.2001055e19,1.2002784e19,1.2004513e19,1.2006243e19,1.2007972e19,1.2009704e19,1.2011436e19,1.2013168e19,1.2014901e19,1.2016636e19,1.201837e19,1.2020106e19,1.2021844e19,1.202358e19,1.2025318e19,1.2027056e19,1.2028795e19,1.2030536e19,1.2032277e19,1.2034017e19,1.2035761e19,1.2037504e19,1.2039248e19,1.2040993e19,1.2042739e19,1.2044484e19,1.2046231e19,1.2047979e19,1.2049727e19,1.2051476e19,1.2053227e19,1.2054977e19,1.2056729e19,1.2058481e19,1.2060234e19,1.2061988e19,1.2063743e19,1.2065499e19,1.2067254e19,1.2069011e19,1.207077e19,1.2072527e19,1.2074287e19,1.2076047e19,1.2077806e19,1.2079569e19,1.2081332e19,1.2083094e19,1.2084858e19,1.2086622e19,1.2088387e19,1.2090154e19,1.2091921e19,1.2093688e19,1.2095457e19,1.2097227e19,1.2098996e19,1.2100766e19,1.2102539e19,1.210431e19,1.2106084e19,1.2107858e19,1.2109632e19,1.2111409e19,1.2113184e19,1.2114961e19,1.2116739e19,1.2118518e19,1.2120298e19,1.2122077e19,1.2123858e19,1.2125641e19,1.2127423e19,1.2129206e19,1.2130991e19,1.2132774e19,1.2134561e19,1.2136348e19,1.2138134e19,1.2139922e19,1.2141712e19,1.21435e19,1.2145291e19,1.2147083e19,1.2148875e19,1.2150668e19,1.2152461e19,1.2154254e19,1.215605e19,1.2157847e19,1.2159643e19,1.2161441e19,1.216324e19,1.2165037e19,1.2166838e19,1.2168639e19,1.217044e19,1.2172242e19,1.2174047e19,1.217585e19,1.2177654e19,1.2179461e19,1.2181267e19,1.2183074e19,1.2184882e19,1.2186691e19,1.21885e19,1.2190311e19,1.2192123e19,1.2193934e19,1.2195747e19,1.2197561e19,1.2199374e19,1.220119e19,1.2203007e19,1.2204823e19,1.2206641e19,1.2208459e19,1.2210278e19,1.2212099e19,1.2213919e19,1.2215741e19,1.2217564e19,1.2219387e19,1.2221211e19,1.2223037e19,1.2224863e19,1.2226688e19,1.2228517e19,1.2230345e19,1.2232174e19,1.2234003e19,1.2235835e19,1.2237667e19,1.2239498e19,1.2241331e19,1.2243166e19,1.2245e19,1.2246837e19,1.2248674e19,1.225051e19,1.2252348e19,1.2254188e19,1.2256026e19,1.2257868e19,1.225971e19,1.2261551e19,1.2263395e19,1.2265239e19,1.2267083e19,1.2268929e19,1.2270776e19,1.2272622e19,1.2274471e19,1.227632e19,1.2278169e19,1.2280021e19,1.2281873e19,1.2283724e19,1.2285578e19,1.2287432e19,1.2289285e19,1.2291143e19,1.2292998e19,1.2294856e19,1.2296714e19,1.2298573e19,1.2300433e19,1.2302294e19,1.2304155e19,1.2306019e19,1.2307881e19,1.2309745e19,1.2311611e19,1.2313476e19,1.2315343e19,1.2317211e19,1.2319078e19,1.2320948e19,1.2322818e19,1.2324689e19,1.2326561e19,1.2328434e19,1.2330306e19,1.2332181e19,1.2334056e19,1.2335932e19,1.2337809e19,1.2339687e19,1.2341565e19,1.2343445e19,1.2345325e19,1.2347207e19,1.2349089e19,1.2350971e19,1.2352855e19,1.2354739e19,1.2356626e19,1.2358513e19,1.2360399e19,1.2362288e19,1.2364176e19,1.2366065e19,1.2367957e19,1.2369849e19,1.237174e19,1.2373634e19,1.2375529e19,1.2377422e19,1.2379319e19,1.2381217e19,1.2383113e19,1.2385012e19,1.2386912e19,1.2388811e19,1.2390713e19,1.2392615e19,1.2394518e19,1.2396422e19,1.2398326e19,1.2400232e19,1.2402138e19,1.2404046e19,1.2405954e19,1.2407862e19,1.2409773e19,1.2411683e19,1.2413595e19,1.2415508e19,1.241742e19,1.2419336e19,1.2421251e19,1.2423167e19,1.2425084e19,1.2427001e19,1.2428921e19,1.243084e19,1.2432761e19,1.2434683e19,1.2436605e19,1.2438528e19,1.2440453e19,1.2442377e19,1.2444303e19,1.244623e19,1.2448157e19,1.2450086e19,1.2452015e19,1.2453945e19,1.2455877e19,1.245781e19,1.2459742e19,1.2461677e19,1.2463612e19,1.2465547e19,1.2467483e19,1.2469422e19,1.2471359e19,1.2473299e19,1.247524e19,1.247718e19,1.2479123e19,1.2481067e19,1.2483011e19,1.2484955e19,1.2486901e19,1.2488848e19,1.2490794e19,1.2492743e19,1.2494693e19,1.2496642e19,1.2498594e19,1.2500547e19,1.2502499e19,1.2504453e19,1.2506409e19,1.2508363e19,1.2510321e19,1.2512278e19,1.2514237e19,1.2516196e19,1.2518158e19,1.2520118e19,1.2522081e19,1.2524044e19,1.2526007e19,1.2527973e19,1.2529939e19,1.2531905e19,1.2533873e19,1.2535842e19,1.2537811e19,1.2539782e19,1.2541754e19,1.2543726e19,1.2545699e19,1.2547674e19,1.254965e19,1.2551625e19,1.2553603e19,1.2555581e19,1.2557559e19,1.255954e19,1.2561521e19,1.2563501e19,1.2565485e19,1.2567468e19,1.2569452e19,1.2571439e19,1.2573426e19,1.2575412e19,1.25774e19,1.257939e19,1.258138e19,1.2583372e19,1.2585364e19,1.2587356e19,1.2589351e19,1.2591347e19,1.2593341e19,1.2595339e19,1.2597337e19,1.2599335e19,1.2601335e19,1.2603336e19,1.2605337e19,1.260734e19,1.2609343e19,1.2611349e19,1.2613353e19,1.261536e19,1.2617368e19,1.2619375e19,1.2621385e19,1.2623395e19,1.2625406e19,1.2627418e19,1.2629433e19,1.2631446e19,1.2633461e19,1.2635478e19,1.2637493e19,1.2639512e19,1.2641532e19,1.264355e19,1.2645571e19,1.2647593e19,1.2649615e19,1.2651639e19,1.2653665e19,1.265569e19,1.2657716e19,1.2659745e19,1.2661772e19,1.2663803e19,1.2665834e19,1.2667865e19,1.2669898e19,1.2671932e19,1.2673965e19,1.2676001e19,1.2678038e19,1.2680076e19,1.2682113e19,1.2684153e19,1.2686194e19,1.2688234e19,1.2690277e19,1.2692321e19,1.2694364e19,1.269641e19,1.2698457e19,1.2700504e19,1.2702552e19,1.2704602e19,1.2706651e19,1.2708703e19,1.2710756e19,1.2712807e19,1.2714862e19,1.2716919e19,1.2718973e19,1.2721032e19,1.272309e19,1.2725148e19,1.2727209e19,1.272927e19,1.2731332e19,1.2733396e19,1.2735461e19,1.2737524e19,1.2739592e19,1.274166e19,1.2743727e19,1.2745796e19,1.2747868e19,1.2749939e19,1.275201e19,1.2754084e19,1.2756159e19,1.2758234e19,1.276031e19,1.2762388e19,1.2764466e19,1.2766545e19,1.2768626e19,1.2770707e19,1.2772789e19,1.2774874e19,1.2776957e19,1.2779043e19,1.278113e19,1.2783217e19,1.2785306e19,1.2787396e19,1.2789485e19,1.2791578e19,1.2793671e19,1.2795763e19,1.2797859e19,1.2799955e19,1.280205e19,1.2804149e19,1.2806248e19,1.2808347e19,1.2810448e19,1.2812551e19,1.2814654e19,1.2816757e19,1.2818863e19,1.282097e19,1.2823076e19,1.2825184e19,1.2827294e19,1.2829404e19,1.2831515e19,1.2833628e19,1.283574e19,1.2837856e19,1.2839971e19,1.2842087e19,1.2844205e19,1.2846324e19,1.2848443e19,1.2850564e19,1.2852686e19,1.2854808e19,1.2856933e19,1.2859058e19,1.2861183e19,1.2863311e19,1.2865439e19,1.2867567e19,1.2869698e19,1.287183e19,1.2873961e19,1.2876095e19,1.287823e19,1.2880364e19,1.2882502e19,1.2884639e19,1.2886779e19,1.2888917e19,1.2891059e19,1.2893201e19,1.2895343e19,1.2897488e19,1.2899633e19,1.2901778e19,1.2903926e19,1.2906075e19,1.2908224e19,1.2910374e19,1.2912526e19,1.2914678e19,1.2916832e19,1.2918988e19,1.2921142e19,1.29233e19,1.2925458e19,1.2927616e19,1.2929777e19,1.2931939e19,1.29341e19,1.2936263e19,1.2938429e19,1.2940593e19,1.294276e19,1.2944929e19,1.2947097e19,1.2949267e19,1.2951439e19,1.2953611e19,1.2955784e19,1.2957959e19,1.2960135e19,1.296231e19,1.2964488e19,1.2966667e19,1.2968846e19,1.2971028e19,1.297321e19,1.2975392e19,1.2977576e19,1.2979762e19,1.2981948e19,1.2984136e19,1.2986325e19,1.2988514e19,1.2990706e19,1.2992898e19,1.2995089e19,1.2997284e19,1.299948e19,1.3001676e19,1.3003873e19,1.3006072e19,1.3008271e19,1.3010473e19,1.3012675e19,1.3014877e19,1.3017082e19,1.3019287e19,1.3021493e19,1.3023702e19,1.3025911e19,1.3028121e19,1.3030331e19,1.3032543e19,1.3034758e19,1.3036971e19,1.3039186e19,1.3041404e19,1.3043621e19,1.304584e19,1.3048061e19,1.305028e19,1.3052503e19,1.3054727e19,1.305695e19,1.3059177e19,1.3061404e19,1.3063631e19,1.3065861e19,1.3068092e19,1.3070321e19,1.3072554e19,1.3074789e19,1.3077023e19,1.3079259e19,1.3081497e19,1.3083734e19,1.3085974e19,1.3088215e19,1.3090456e19,1.3092699e19,1.3094944e19,1.3097189e19,1.3099434e19,1.3101683e19,1.3103931e19,1.310618e19,1.3108432e19,1.3110684e19,1.3112936e19,1.3115191e19,1.3117447e19,1.3119704e19,1.3121962e19,1.3124222e19,1.312648e19,1.3128743e19,1.3131006e19,1.3133268e19,1.3135533e19,1.3137801e19,1.3140067e19,1.3142335e19,1.3144605e19,1.3146875e19,1.3149148e19,1.3151421e19,1.3153695e19,1.3155971e19,1.3158248e19,1.3160525e19,1.3162805e19,1.3165085e19,1.3167365e19,1.3169649e19,1.3171933e19,1.3174219e19,1.3176503e19,1.3178791e19,1.3181081e19,1.318337e19,1.3185661e19,1.3187954e19,1.3190246e19,1.3192541e19,1.3194837e19,1.3197134e19,1.3199431e19,1.3201732e19,1.3204031e19,1.3206333e19,1.3208637e19,1.321094e19,1.3213246e19,1.3215553e19,1.3217859e19,1.3220169e19,1.3222479e19,1.3224791e19,1.3227103e19,1.3229417e19,1.3231732e19,1.3234049e19,1.3236366e19,1.3238684e19,1.3241004e19,1.3243326e19,1.324565e19,1.3247972e19,1.3250297e19,1.3252624e19,1.3254949e19,1.3257279e19,1.3259609e19,1.3261939e19,1.3264272e19,1.3266605e19,1.3268939e19,1.3271276e19,1.3273613e19,1.327595e19,1.3278291e19,1.3280632e19,1.3282972e19,1.3285317e19,1.3287662e19,1.3290006e19,1.3292353e19,1.3294703e19,1.329705e19,1.3299402e19,1.3301754e19,1.3304107e19,1.3306462e19,1.3308819e19,1.3311174e19,1.3313533e19,1.3315893e19,1.3318252e19,1.3320615e19,1.3322979e19,1.3325344e19,1.3327708e19,1.3330077e19,1.3332445e19,1.3334813e19,1.3337185e19,1.3339558e19,1.334193e19,1.3344305e19,1.3346681e19,1.3349057e19,1.3351437e19,1.3353817e19,1.3356197e19,1.3358579e19,1.3360964e19,1.3363348e19,1.3365734e19,1.3368122e19,1.3370509e19,1.33729e19,1.3375292e19,1.3377683e19,1.3380077e19,1.3382473e19,1.3384869e19,1.3387267e19,1.3389666e19,1.3392065e19,1.3394467e19,1.3396871e19,1.3399275e19,1.3401679e19,1.3404087e19,1.3406495e19,1.3408903e19,1.3411314e19,1.3413726e19,1.3416139e19,1.3418554e19,1.342097e19,1.3423386e19,1.3425806e19,1.3428226e19,1.3430646e19,1.3433068e19,1.3435492e19,1.3437916e19,1.3440343e19,1.3442771e19,1.3445199e19,1.344763e19,1.3450062e19,1.3452493e19,1.3454928e19,1.3457364e19,1.34598e19,1.3462239e19,1.3464679e19,1.3467119e19,1.3469561e19,1.3472005e19,1.3474448e19,1.3476895e19,1.3479343e19,1.3481793e19,1.3484241e19,1.3486693e19,1.3489147e19,1.34916e19,1.3494056e19,1.3496513e19,1.349897e19,1.350143e19,1.3503892e19,1.3506352e19,1.3508816e19,1.3511283e19,1.3513748e19,1.3516215e19,1.3518685e19,1.3521154e19,1.3523626e19,1.35261e19,1.3528572e19,1.353105e19,1.3533527e19,1.3536004e19,1.3538485e19,1.3540966e19,1.3543448e19,1.3545932e19,1.3548418e19,1.3550904e19,1.3553392e19,1.3555882e19,1.3558371e19,1.3560864e19,1.3563358e19,1.3565854e19,1.3568348e19,1.3570847e19,1.3573347e19,1.3575846e19,1.3578348e19,1.3580852e19,1.3583355e19,1.3585861e19,1.3588369e19,1.3590877e19,1.3593388e19,1.35959e19,1.3598411e19,1.3600926e19,1.3603443e19,1.3605958e19,1.3608477e19,1.3610997e19,1.3613517e19,1.3616041e19,1.3618565e19,1.362109e19,1.3623618e19,1.3626146e19,1.3628674e19,1.3631206e19,1.363374e19,1.3636272e19,1.3638808e19,1.3641345e19,1.3643884e19,1.3646423e19,1.3648964e19,1.3651507e19,1.365405e19,1.3656595e19,1.3659143e19,1.3661689e19,1.366424e19,1.3666791e19,1.3669343e19,1.3671897e19,1.3674452e19,1.3677008e19,1.3679567e19,1.3682127e19,1.3684687e19,1.368725e19,1.3689815e19,1.3692379e19,1.3694946e19,1.3697515e19,1.3700083e19,1.3702655e19,1.3705228e19,1.3707801e19,1.3710377e19,1.3712954e19,1.3715531e19,1.3718112e19,1.3720693e19,1.3723275e19,1.372586e19,1.3728446e19,1.3731033e19,1.373362e19,1.3736212e19,1.3738804e19,1.3741395e19,1.374399e19,1.3746587e19,1.3749183e19,1.3751782e19,1.3754384e19,1.3756984e19,1.3759588e19,1.3762193e19,1.3764798e19,1.3767406e19,1.3770016e19,1.3772626e19,1.3775238e19,1.3777853e19,1.3780466e19,1.3783084e19,1.3785702e19,1.3788321e19,1.3790942e19,1.3793566e19,1.3796188e19,1.3798815e19,1.3801443e19,1.3804069e19,1.3806701e19,1.3809333e19,1.3811966e19,1.3814599e19,1.3817236e19,1.3819875e19,1.3822513e19,1.3825154e19,1.3827797e19,1.3830439e19,1.3833084e19,1.3835732e19,1.3838379e19,1.384103e19,1.3843682e19,1.3846332e19,1.3848988e19,1.3851644e19,1.3854301e19,1.385696e19,1.3859621e19,1.3862282e19,1.3864946e19,1.3867611e19,1.3870277e19,1.3872945e19,1.3875616e19,1.3878285e19,1.3880959e19,1.3883634e19,1.3886308e19,1.3888987e19,1.3891666e19,1.3894345e19,1.3897028e19,1.3899713e19,1.3902398e19,1.3905084e19,1.3907772e19,1.3910463e19,1.3913153e19,1.3915847e19,1.3918542e19,1.3921237e19,1.3923935e19,1.3926634e19,1.3929333e19,1.3932037e19,1.3934742e19,1.3937446e19,1.3940154e19,1.3942863e19,1.3945571e19,1.3948284e19,1.3950998e19,1.3953712e19,1.3956429e19,1.3959148e19,1.3961866e19,1.3964588e19,1.3967312e19,1.3970035e19,1.3972762e19,1.397549e19,1.3978218e19,1.398095e19,1.3983682e19,1.3986418e19,1.3989152e19,1.399189e19,1.3994629e19,1.3997369e19,1.4000111e19,1.4002856e19,1.40056e19,1.4008348e19,1.4011096e19,1.4013845e19,1.4016598e19,1.4019353e19,1.4022106e19,1.4024863e19,1.4027622e19,1.4030381e19,1.4033144e19,1.4035907e19,1.4038671e19,1.4041437e19,1.4044207e19,1.4046976e19,1.4049748e19,1.4052521e19,1.4055295e19,1.4058071e19,1.406085e19,1.4063628e19,1.4066411e19,1.4069194e19,1.4071978e19,1.4074764e19,1.4077552e19,1.4080343e19,1.4083133e19,1.4085926e19,1.4088721e19,1.4091516e19,1.4094315e19,1.4097115e19,1.4099915e19,1.4102719e19,1.4105524e19,1.4108328e19,1.4111137e19,1.4113947e19,1.4116757e19,1.4119571e19,1.4122386e19,1.41252e19,1.412802e19,1.413084e19,1.413366e19,1.4136484e19,1.4139309e19,1.4142134e19,1.4144963e19,1.4147793e19,1.4150623e19,1.4153458e19,1.4156294e19,1.4159128e19,1.4161967e19,1.4164808e19,1.416765e19,1.4170493e19,1.4173338e19,1.4176186e19,1.4179034e19,1.4181885e19,1.4184737e19,1.4187589e19,1.4190446e19,1.4193303e19,1.4196161e19,1.4199023e19,1.4201886e19,1.4204748e19,1.4207614e19,1.4210483e19,1.421335e19,1.4216222e19,1.4219097e19,1.422197e19,1.4224846e19,1.4227726e19,1.4230604e19,1.4233486e19,1.423637e19,1.4239254e19,1.4242141e19,1.424503e19,1.4247919e19,1.4250812e19,1.4253706e19,1.4256601e19,1.4259499e19,1.4262399e19,1.42653e19,1.4268202e19,1.4271107e19,1.4274014e19,1.427692e19,1.427983e19,1.4282743e19,1.4285654e19,1.428857e19,1.4291488e19,1.4294405e19,1.4297327e19,1.4300249e19,1.4303172e19,1.4306099e19,1.4309027e19,1.4311955e19,1.4314887e19,1.4317821e19,1.4320754e19,1.4323692e19,1.4326631e19,1.432957e19,1.4332512e19,1.4335457e19,1.4338401e19,1.434135e19,1.43443e19,1.434725e19,1.4350203e19,1.4353159e19,1.4356117e19,1.4359073e19,1.4362034e19,1.4364997e19,1.436796e19,1.4370926e19,1.4373895e19,1.4376862e19,1.4379834e19,1.4382808e19,1.4385783e19,1.438876e19,1.4391739e19,1.4394718e19,1.4397701e19,1.4400686e19,1.4403672e19,1.440666e19,1.4409651e19,1.441264e19,1.4415635e19,1.441863e19,1.4421627e19,1.4424627e19,1.4427629e19,1.443063e19,1.4433635e19,1.4436643e19,1.443965e19,1.4442661e19,1.4445674e19,1.4448687e19,1.4451704e19,1.4454722e19,1.4457743e19,1.4460764e19,1.4463787e19,1.4466814e19,1.446984e19,1.447287e19,1.4475902e19,1.4478934e19,1.448197e19,1.4485007e19,1.4488045e19,1.4491086e19,1.449413e19,1.4497173e19,1.4500221e19,1.450327e19,1.4506319e19,1.4509371e19,1.4512426e19,1.4515481e19,1.451854e19,1.4521601e19,1.4524662e19,1.4527726e19,1.4530793e19,1.4533859e19,1.4536929e19,1.4540002e19,1.4543074e19,1.4546151e19,1.4549228e19,1.4552307e19,1.4555389e19,1.4558473e19,1.4561559e19,1.4564646e19,1.4567735e19,1.4570827e19,1.4573919e19,1.4577015e19,1.4580112e19,1.4583211e19,1.4586313e19,1.4589416e19,1.4592519e19,1.4595628e19,1.4598737e19,1.4601846e19,1.460496e19,1.4608076e19,1.4611192e19,1.4614312e19,1.4617433e19,1.4620555e19,1.4623681e19,1.4626809e19,1.4629937e19,1.4633068e19,1.4636202e19,1.4639335e19,1.4642473e19,1.4645614e19,1.4648753e19,1.4651896e19,1.4655043e19,1.4658191e19,1.4661339e19,1.466449e19,1.4667645e19,1.4670798e19,1.4673956e19,1.4677117e19,1.4680277e19,1.468344e19,1.4686607e19,1.4689773e19,1.4692943e19,1.4696115e19,1.4699288e19,1.4702465e19,1.4705644e19,1.4708821e19,1.4712004e19,1.471519e19,1.4718374e19,1.4721562e19,1.4724753e19,1.4727945e19,1.473114e19,1.4734337e19,1.4737534e19,1.4740736e19,1.4743939e19,1.4747143e19,1.475035e19,1.4753559e19,1.4756769e19,1.4759984e19,1.47632e19,1.4766417e19,1.4769635e19,1.4772858e19,1.4776083e19,1.4779307e19,1.4782536e19,1.4785766e19,1.4788997e19,1.4792232e19,1.4795469e19,1.4798706e19,1.4801948e19,1.4805191e19,1.4808435e19,1.4811683e19,1.4814933e19,1.4818182e19,1.4821437e19,1.4824693e19,1.4827949e19,1.483121e19,1.4834472e19,1.4837736e19,1.4841002e19,1.4844272e19,1.4847541e19,1.4850814e19,1.4854091e19,1.4857366e19,1.4860646e19,1.4863929e19,1.4867214e19,1.4870498e19,1.4873786e19,1.4877077e19,1.4880368e19,1.4883664e19,1.4886962e19,1.4890259e19,1.4893561e19,1.4896865e19,1.4900169e19,1.4903478e19,1.4906788e19,1.4910099e19,1.4913415e19,1.4916732e19,1.492005e19,1.4923371e19,1.4926695e19,1.4930019e19,1.4933348e19,1.4936679e19,1.4940009e19,1.4943344e19,1.4946682e19,1.4950019e19,1.4953361e19,1.4956705e19,1.4960049e19,1.4963398e19,1.4966749e19,1.4970099e19,1.4973455e19,1.4976813e19,1.4980173e19,1.4983532e19,1.4986897e19,1.4990263e19,1.499363e19,1.4997001e19,1.5000375e19,1.5003749e19,1.5007126e19,1.5010506e19,1.5013887e19,1.5017272e19,1.5020659e19,1.5024047e19,1.5027438e19,1.5030832e19,1.5034226e19,1.5037625e19,1.5041027e19,1.5044427e19,1.5047833e19,1.5051241e19,1.5054648e19,1.5058061e19,1.5061476e19,1.506489e19,1.5068311e19,1.5071733e19,1.5075154e19,1.507858e19,1.508201e19,1.5085441e19,1.5088872e19,1.5092308e19,1.5095746e19,1.5099184e19,1.5102628e19,1.5106073e19,1.5109518e19,1.5112968e19,1.511642e19,1.5119873e19,1.5123329e19,1.512679e19,1.5130249e19,1.5133713e19,1.513718e19,1.5140647e19,1.5144118e19,1.5147591e19,1.5151066e19,1.5154545e19,1.5158025e19,1.5161506e19,1.5164992e19,1.516848e19,1.5171969e19,1.5175462e19,1.5178957e19,1.5182452e19,1.5185952e19,1.5189455e19,1.5192957e19,1.5196466e19,1.5199975e19,1.5203487e19,1.5207e19,1.5210517e19,1.5214037e19,1.5217556e19,1.5221082e19,1.5224608e19,1.5228135e19,1.5231668e19,1.5235201e19,1.5238736e19,1.5242276e19,1.5245817e19,1.5249359e19,1.5252906e19,1.5256455e19,1.5260004e19,1.5263558e19,1.5267115e19,1.5270672e19,1.5274233e19,1.5277798e19,1.5281361e19,1.5284931e19,1.5288502e19,1.5292074e19,1.529565e19,1.5299229e19,1.5302809e19,1.5306393e19,1.530998e19,1.5313569e19,1.5317158e19,1.5320752e19,1.532435e19,1.5327946e19,1.5331548e19,1.5335153e19,1.5338757e19,1.5342366e19,1.5345978e19,1.534959e19,1.5353208e19,1.5356827e19,1.5360447e19,1.5364072e19,1.5367699e19,1.5371326e19,1.5374959e19,1.5378594e19,1.538223e19,1.538587e19,1.5389514e19,1.5393156e19,1.5396804e19,1.5400455e19,1.5404105e19,1.5407761e19,1.541142e19,1.5415078e19,1.5418742e19,1.5422408e19,1.5426074e19,1.5429746e19,1.543342e19,1.5437097e19,1.5440774e19,1.5444456e19,1.5448141e19,1.5451825e19,1.5455515e19,1.5459207e19,1.54629e19,1.5466598e19,1.5470299e19,1.5473999e19,1.5477705e19,1.5481414e19,1.5485123e19,1.5488836e19,1.5492553e19,1.549627e19,1.5499991e19,1.5503715e19,1.550744e19,1.551117e19,1.5514903e19,1.5518636e19,1.5522374e19,1.5526115e19,1.5529855e19,1.5533601e19,1.553735e19,1.5541099e19,1.5544854e19,1.5548611e19,1.555237e19,1.555613e19,1.5559895e19,1.5563663e19,1.5567431e19,1.5571205e19,1.557498e19,1.5578757e19,1.5582538e19,1.5586323e19,1.5590107e19,1.5593897e19,1.559769e19,1.5601483e19,1.5605281e19,1.5609082e19,1.5612884e19,1.561669e19,1.5620499e19,1.5624309e19,1.5628123e19,1.5631942e19,1.5635759e19,1.5639582e19,1.5643408e19,1.5647235e19,1.5651066e19,1.5654902e19,1.5658736e19,1.5662576e19,1.5666419e19,1.5670262e19,1.5674111e19,1.5677963e19,1.5681816e19,1.5685671e19,1.5689532e19,1.5693394e19,1.5697257e19,1.5701126e19,1.5704997e19,1.5708869e19,1.5712746e19,1.5716626e19,1.5720506e19,1.5724393e19,1.5728281e19,1.573217e19,1.5736064e19,1.5739962e19,1.574386e19,1.5747763e19,1.5751668e19,1.5755575e19,1.5759487e19,1.5763401e19,1.5767317e19,1.5771238e19,1.5775161e19,1.5779085e19,1.5783014e19,1.5786946e19,1.5790879e19,1.5794818e19,1.5798758e19,1.58027e19,1.5806647e19,1.5810598e19,1.5814551e19,1.5818503e19,1.5822463e19,1.5826424e19,1.5830387e19,1.5834355e19,1.5838325e19,1.5842297e19,1.5846274e19,1.5850253e19,1.5854233e19,1.5858219e19,1.5862208e19,1.5866197e19,1.5870193e19,1.587419e19,1.5878188e19,1.5882193e19,1.5886199e19,1.5890207e19,1.589422e19,1.5898236e19,1.5902252e19,1.5906274e19,1.5910299e19,1.5914325e19,1.5918357e19,1.5922391e19,1.5926426e19,1.5930467e19,1.593451e19,1.5938557e19,1.5942604e19,1.5946657e19,1.5950713e19,1.5954769e19,1.5958831e19,1.5962897e19,1.5966962e19,1.5971033e19,1.5975108e19,1.5979183e19,1.5983264e19,1.5987348e19,1.5991432e19,1.5995523e19,1.5999616e19,1.600371e19,1.600781e19,1.6011912e19,1.6016015e19,1.6020124e19,1.6024236e19,1.602835e19,1.6032468e19,1.603659e19,1.6040712e19,1.604484e19,1.6048972e19,1.6053104e19,1.6057241e19,1.6061382e19,1.6065524e19,1.6069671e19,1.6073822e19,1.6077976e19,1.608213e19,1.6086289e19,1.6090453e19,1.6094617e19,1.6098788e19,1.610296e19,1.6107134e19,1.6111314e19,1.6115497e19,1.611968e19,1.612387e19,1.6128062e19,1.6132256e19,1.6136455e19,1.6140657e19,1.614486e19,1.6149069e19,1.6153282e19,1.6157495e19,1.6161714e19,1.6165936e19,1.6170159e19,1.6174388e19,1.617862e19,1.6182853e19,1.6187092e19,1.6191335e19,1.6195576e19,1.6199826e19,1.6204078e19,1.6208334e19,1.621259e19,1.6216852e19,1.6221118e19,1.6225384e19,1.6229657e19,1.6233933e19,1.6238209e19,1.6242492e19,1.6246777e19,1.6251064e19,1.6255357e19,1.6259653e19,1.626395e19,1.6268253e19,1.6272559e19,1.6276866e19,1.6281179e19,1.6285496e19,1.6289813e19,1.6294137e19,1.6298463e19,1.6302791e19,1.6307125e19,1.6311463e19,1.63158e19,1.6320145e19,1.6324492e19,1.6328841e19,1.6333196e19,1.6337554e19,1.6341913e19,1.6346278e19,1.6350646e19,1.6355019e19,1.6359392e19,1.6363771e19,1.6368154e19,1.6372536e19,1.6376927e19,1.638132e19,1.6385714e19,1.6390114e19,1.6394518e19,1.6398922e19,1.6403334e19,1.6407748e19,1.6412164e19,1.6416585e19,1.642101e19,1.6425436e19,1.6429869e19,1.6434305e19,1.6438741e19,1.6443184e19,1.6447632e19,1.6452079e19,1.6456533e19,1.6460991e19,1.6465449e19,1.6469915e19,1.6474383e19,1.6478852e19,1.6483327e19,1.6487808e19,1.6492291e19,1.6496774e19,1.6501265e19,1.650576e19,1.6510255e19,1.6514756e19,1.6519261e19,1.6523766e19,1.6528279e19,1.6532796e19,1.6537312e19,1.6541836e19,1.6546364e19,1.6550891e19,1.6555427e19,1.6559966e19,1.6564504e19,1.6569051e19,1.6573601e19,1.657815e19,1.6582708e19,1.6587269e19,1.6591831e19,1.6596399e19,1.6600972e19,1.6605545e19,1.6610124e19,1.6614708e19,1.6619293e19,1.6623885e19,1.662848e19,1.6633075e19,1.6637678e19,1.6642285e19,1.6646895e19,1.6651507e19,1.6656125e19,1.6660746e19,1.6665369e19,1.6669998e19,1.6674631e19,1.6679266e19,1.6683907e19,1.6688552e19,1.6693198e19,1.6697851e19,1.6702509e19,1.6707166e19,1.671183e19,1.6716499e19,1.6721168e19,1.6725845e19,1.6730524e19,1.6735206e19,1.6739893e19,1.6744586e19,1.6749278e19,1.6753978e19,1.6758683e19,1.6763386e19,1.6768099e19,1.6772815e19,1.6777531e19,1.6782255e19,1.6786983e19,1.6791714e19,1.6796446e19,1.6801186e19,1.6805931e19,1.6810675e19,1.6815427e19,1.6820183e19,1.6824939e19,1.6829703e19,1.6834472e19,1.683924e19,1.6844017e19,1.6848796e19,1.6853577e19,1.6858365e19,1.6863158e19,1.6867951e19,1.6872752e19,1.6877556e19,1.6882362e19,1.6887175e19,1.6891992e19,1.689681e19,1.6901636e19,1.6906465e19,1.6911295e19,1.6916133e19,1.6920975e19,1.6925817e19,1.6930667e19,1.6935521e19,1.6940377e19,1.694524e19,1.6950106e19,1.6954977e19,1.6959849e19,1.6964729e19,1.6969613e19,1.6974497e19,1.697939e19,1.6984286e19,1.6989183e19,1.6994088e19,1.6998997e19,1.7003908e19,1.7008825e19,1.7013747e19,1.701867e19,1.70236e19,1.7028535e19,1.703347e19,1.7038414e19,1.7043362e19,1.704831e19,1.7053266e19,1.7058227e19,1.7063188e19,1.7068158e19,1.7073132e19,1.7078106e19,1.7083088e19,1.7088075e19,1.7093063e19,1.7098058e19,1.7103057e19,1.7108059e19,1.7113067e19,1.711808e19,1.7123097e19,1.7128116e19,1.7133142e19,1.7138172e19,1.7143205e19,1.7148244e19,1.7153287e19,1.7158333e19,1.7163385e19,1.7168443e19,1.7173502e19,1.7178567e19,1.7183638e19,1.718871e19,1.719379e19,1.7198874e19,1.720396e19,1.7209054e19,1.7214151e19,1.7219249e19,1.7224357e19,1.7229468e19,1.7234581e19,1.7239701e19,1.7244826e19,1.7249952e19,1.7255087e19,1.7260226e19,1.7265366e19,1.7270514e19,1.7275666e19,1.7280824e19,1.7285982e19,1.7291149e19,1.729632e19,1.7301492e19,1.7306673e19,1.7311858e19,1.7317044e19,1.7322238e19,1.7327437e19,1.7332638e19,1.7337846e19,1.734306e19,1.7348274e19,1.7353496e19,1.7358723e19,1.7363952e19,1.7369189e19,1.737443e19,1.7379672e19,1.7384924e19,1.7390179e19,1.7395437e19,1.7400702e19,1.7405972e19,1.7411244e19,1.7416524e19,1.7421808e19,1.7427093e19,1.7432387e19,1.7437686e19,1.7442987e19,1.7448295e19,1.7453609e19,1.7458927e19,1.7464247e19,1.7469575e19,1.7474908e19,1.7480241e19,1.7485585e19,1.7490932e19,1.7496281e19,1.7501639e19,1.7507001e19,1.7512365e19,1.7517737e19,1.7523114e19,1.7528492e19,1.753388e19,1.7539272e19,1.7544665e19,1.7550067e19,1.7555474e19,1.7560883e19,1.7566299e19,1.7571722e19,1.7577145e19,1.7582577e19,1.7588014e19,1.7593453e19,1.75989e19,1.7604352e19,1.7609806e19,1.7615268e19,1.7620736e19,1.7626208e19,1.7631683e19,1.7637166e19,1.7642654e19,1.7648142e19,1.7653641e19,1.7659144e19,1.7664649e19,1.7670162e19,1.7675682e19,1.7681201e19,1.7686731e19,1.7692266e19,1.7697801e19,1.7703346e19,1.7708896e19,1.7714447e19,1.7720008e19,1.7725573e19,1.773114e19,1.7736717e19,1.7742298e19,1.7747881e19,1.7753473e19,1.775907e19,1.7764669e19,1.7770277e19,1.777589e19,1.7781504e19,1.7787128e19,1.7792758e19,1.7798388e19,1.7804029e19,1.7809674e19,1.7815324e19,1.7820977e19,1.7826638e19,1.7832305e19,1.7837973e19,1.7843651e19,1.7849333e19,1.7855019e19,1.7860712e19,1.7866412e19,1.7872113e19,1.7877823e19,1.7883539e19,1.7889255e19,1.7894983e19,1.7900715e19,1.7906448e19,1.7912192e19,1.7917941e19,1.7923691e19,1.7929451e19,1.7935216e19,1.7940983e19,1.794676e19,1.7952542e19,1.7958326e19,1.7964119e19,1.7969919e19,1.7975719e19,1.798153e19,1.7987345e19,1.7993167e19,1.799899e19,1.8004823e19,1.8010661e19,1.8016501e19,1.8022351e19,1.8028206e19,1.8034064e19,1.8039931e19,1.8045804e19,1.8051677e19,1.8057562e19,1.8063452e19,1.8069343e19,1.8075245e19,1.8081153e19,1.8087062e19,1.8092981e19,1.8098905e19,1.8104831e19,1.8110769e19,1.811671e19,1.8122654e19,1.8128608e19,1.8134567e19,1.8140529e19,1.81465e19,1.8152478e19,1.8158458e19,1.8164447e19,1.8170442e19,1.8176439e19,1.8182447e19,1.8188459e19,1.8194479e19,1.82005e19,1.820653e19,1.8212567e19,1.8218606e19,1.8224655e19,1.823071e19,1.8236767e19,1.8242834e19,1.8248908e19,1.8254983e19,1.8261067e19,1.8267159e19,1.8273252e19,1.8279357e19,1.8285466e19,1.8291578e19,1.82977e19,1.8303827e19,1.8309958e19,1.8316098e19,1.8322245e19,1.8328394e19,1.8334552e19,1.8340718e19,1.8346885e19,1.8353062e19,1.8359247e19,1.8365433e19,1.837163e19,1.8377832e19,1.8384041e19,1.8390252e19,1.8396474e19,1.8402702e19,1.8408932e19,1.8415173e19,1.842142e19,1.8427669e19,1.8433928e19,1.8440194e19,1.8446463e19,1.845274e19,1.8459028e19,1.8465315e19,1.8471613e19,1.8477917e19,1.8484224e19,1.8490542e19,1.8496866e19,1.850319e19,1.8509528e19,1.8515873e19,1.8522217e19,1.8528574e19,1.8534938e19,1.8541302e19,1.854768e19,1.8554063e19,1.8560447e19,1.8566844e19,1.8573245e19,1.857965e19,1.8586068e19,1.8592489e19,1.8598919e19,1.860535e19,1.8611792e19,1.8618241e19,1.8624693e19,1.8631156e19,1.8637626e19,1.8644098e19,1.865058e19,1.865707e19,1.8663561e19,1.8670066e19,1.8676575e19,1.8683088e19,1.868961e19,1.8696142e19,1.8702675e19,1.870922e19,1.871577e19,1.8722323e19,1.872889e19,1.873546e19,1.8742036e19,1.8748622e19,1.8755214e19,1.876181e19,1.8768415e19,1.877503e19,1.8781644e19,1.8788272e19,1.8794907e19,1.8801548e19,1.8808193e19,1.8814847e19,1.882151e19,1.8828176e19,1.8834854e19,1.8841537e19,1.8848224e19,1.8854922e19,1.8861627e19,1.8868336e19,1.8875057e19,1.8881783e19,1.8888512e19,1.8895252e19,1.8902001e19,1.8908752e19,1.8915516e19,1.8922287e19,1.892906e19,1.8935844e19,1.8942637e19,1.8949432e19,1.8956238e19,1.8963053e19,1.896987e19,1.8976698e19,1.8983534e19,1.8990373e19,1.8997226e19,1.9004082e19,1.9010945e19,1.9017817e19,1.9024698e19,1.9031588e19,1.9038477e19,1.9045382e19,1.9052291e19,1.9059205e19,1.9066132e19,1.9073065e19,1.9080001e19,1.908695e19,1.9093906e19,1.9100866e19,1.9107836e19,1.9114816e19,1.9121798e19,1.912879e19,1.9135793e19,1.9142799e19,1.9149816e19,1.9156842e19,1.916387e19,1.9170909e19,1.9177959e19,1.918501e19,1.9192072e19,1.9199144e19,1.920622e19,1.9213308e19,1.9220402e19,1.92275e19,1.9234612e19,1.924173e19,1.9248853e19,1.9255987e19,1.926313e19,1.927028e19,1.9277434e19,1.92846e19,1.9291776e19,1.9298954e19,1.9306144e19,1.9313342e19,1.9320544e19,1.9327759e19,1.9334982e19,1.9342208e19,1.9349448e19,1.9356693e19,1.9363946e19,1.937121e19,1.937848e19,1.9385756e19,1.9393043e19,1.940034e19,1.9407638e19,1.9414952e19,1.9422273e19,1.9429598e19,1.9436936e19,1.944428e19,1.945163e19,1.9458992e19,1.9466363e19,1.9473739e19,1.9481127e19,1.9488523e19,1.9495927e19,1.9503335e19,1.9510757e19,1.9518187e19,1.952562e19,1.9533068e19,1.9540523e19,1.9547982e19,1.9555454e19,1.9562935e19,1.957042e19,1.957792e19,1.9585427e19,1.9592937e19,1.9600462e19,1.9607993e19,1.9615532e19,1.962308e19,1.963064e19,1.9638203e19,1.964578e19,1.9653366e19,1.9660955e19,1.9668557e19,1.967617e19,1.9683785e19,1.9691415e19,1.9699053e19,1.9706694e19,1.9714351e19,1.9722017e19,1.9729685e19,1.9737368e19,1.974506e19,1.9752762e19,1.9760467e19,1.9768186e19,1.9775913e19,1.9783645e19,1.9791392e19,1.9799148e19,1.9806906e19,1.981468e19,1.9822464e19,1.983025e19,1.983805e19,1.9845862e19,1.9853677e19,1.9861505e19,1.9869343e19,1.9877185e19,1.9885042e19,1.9892908e19,1.9900778e19,1.9908664e19,1.9916558e19,1.9924455e19,1.993237e19,1.994029e19,1.9948217e19,1.9956158e19,1.996411e19,1.9972064e19,1.9980035e19,1.9988013e19,1.9996002e19,2.0003996e19,2.0012004e19,2.0020022e19,2.0028044e19,2.0036082e19,2.0044128e19,2.0052178e19,2.0060244e19,2.0068321e19,2.00764e19,2.0084495e19,2.00926e19,2.010071e19,2.0108836e19,2.011697e19,2.012511e19,2.0133265e19,2.0141428e19,2.0149597e19,2.0157782e19,2.0165976e19,2.0174176e19,2.018239e19,2.0190613e19,2.0198842e19,2.0207086e19,2.0215342e19,2.02236e19,2.0231876e19,2.0240162e19,2.024845e19,2.0256756e19,2.0265072e19,2.0273398e19,2.0281728e19,2.0290075e19,2.0298432e19,2.0306792e19,2.031517e19,2.0323558e19,2.0331951e19,2.034036e19,2.0348778e19,2.0357203e19,2.0365643e19,2.0374093e19,2.0382549e19,2.0391021e19,2.0399503e19,2.040799e19,2.0416493e19,2.0425007e19,2.0433526e19,2.044206e19,2.0450608e19,2.0459158e19,2.0467726e19,2.0476304e19,2.0484887e19,2.0493487e19,2.0502099e19,2.0510714e19,2.0519348e19,2.052799e19,2.0536645e19,2.0545305e19,2.055398e19,2.0562668e19,2.0571361e19,2.058007e19,2.058879e19,2.0597516e19,2.0606257e19,2.0615012e19,2.062377e19,2.0632547e19,2.0641334e19,2.0650128e19,2.0658937e19,2.0667758e19,2.0676584e19,2.068543e19,2.0694284e19,2.0703144e19,2.0712022e19,2.072091e19,2.0729805e19,2.0738718e19,2.0747641e19,2.0756572e19,2.0765517e19,2.0774476e19,2.078344e19,2.0792422e19,2.0801414e19,2.0810415e19,2.081943e19,2.082846e19,2.08375e19,2.0846545e19,2.085561e19,2.0864684e19,2.0873764e19,2.0882864e19,2.0891977e19,2.0901094e19,2.0910228e19,2.0919374e19,2.0928529e19,2.0937699e19,2.0946882e19,2.0956072e19,2.0965279e19,2.09745e19,2.0983724e19,2.0992967e19,2.1002225e19,2.1011485e19,2.1020767e19,2.103006e19,2.103936e19,2.1048677e19,2.1058007e19,2.1067342e19,2.1076697e19,2.1086065e19,2.109544e19,2.110483e19,2.1114236e19,2.1123652e19,2.1133077e19,2.114252e19,2.1151976e19,2.1161436e19,2.1170918e19,2.1180411e19,2.1189911e19,2.119943e19,2.1208964e19,2.12185e19,2.122806e19,2.123763e19,2.1247207e19,2.1256803e19,2.1266413e19,2.127603e19,2.1285666e19,2.1295315e19,2.1304969e19,2.1314644e19,2.1324333e19,2.1334029e19,2.1343744e19,2.1353472e19,2.1363205e19,2.137296e19,2.1382728e19,2.1392505e19,2.14023e19,2.1412107e19,2.1421924e19,2.1431758e19,2.1441607e19,2.145147e19,2.1461339e19,2.147123e19,2.1481132e19,2.1491043e19,2.1500974e19,2.151092e19,2.152087e19,2.1530843e19,2.1540831e19,2.1550824e19,2.1560838e19,2.1570866e19,2.1580902e19,2.1590958e19,2.1601027e19,2.1611106e19,2.1621203e19,2.1631317e19,2.1641437e19,2.1651579e19,2.1661734e19,2.1671895e19,2.168208e19,2.1692278e19,2.1702484e19,2.1712711e19,2.1722952e19,2.1733202e19,2.1743474e19,2.1753758e19,2.1764059e19,2.1774365e19,2.1784694e19,2.1795038e19,2.180539e19,2.1815764e19,2.1826152e19,2.1836547e19,2.1846966e19,2.1857398e19,2.186784e19,2.1878302e19,2.188878e19,2.1899266e19,2.1909775e19,2.1920297e19,2.1930828e19,2.1941383e19,2.1951952e19,2.1962527e19,2.1973129e19,2.1983743e19,2.1994365e19,2.200501e19,2.2015673e19,2.202634e19,2.2037034e19,2.2047741e19,2.2058457e19,2.2069197e19,2.207995e19,2.2090715e19,2.21015e19,2.2112303e19,2.212312e19,2.2133948e19,2.2144798e19,2.2155663e19,2.2166537e19,2.2177433e19,2.2188347e19,2.219927e19,2.2210216e19,2.2221178e19,2.223215e19,2.2243144e19,2.2254155e19,2.2265176e19,2.227622e19,2.228728e19,2.2298349e19,2.2309443e19,2.2320552e19,2.2331673e19,2.2342815e19,2.2353975e19,2.2365144e19,2.2376337e19,2.2387548e19,2.2398767e19,2.241001e19,2.2421272e19,2.2432542e19,2.2443838e19,2.245515e19,2.246647e19,2.2477818e19,2.248918e19,2.2500562e19,2.251195e19,2.2523368e19,2.25348e19,2.2546242e19,2.255771e19,2.2569196e19,2.258069e19,2.259221e19,2.260375e19,2.2615296e19,2.262687e19,2.263846e19,2.2650063e19,2.266169e19,2.2673335e19,2.2684988e19,2.2696669e19,2.2708368e19,2.2720077e19,2.2731811e19,2.2743565e19,2.275533e19,2.2767119e19,2.2778928e19,2.2790745e19,2.2802591e19,2.2814455e19,2.2826328e19,2.2838229e19,2.2850147e19,2.2862086e19,2.2874035e19,2.2886011e19,2.2898005e19,2.291001e19,2.2922042e19,2.2934093e19,2.2946155e19,2.2958243e19,2.2970353e19,2.2982471e19,2.2994617e19,2.3006784e19,2.301896e19,2.3031164e19,2.3043389e19,2.3055624e19,2.3067888e19,2.308017e19,2.3092464e19,2.3104786e19,2.3117129e19,2.312948e19,2.314186e19,2.3154264e19,2.3166675e19,2.3179117e19,2.3191579e19,2.3204052e19,2.3216553e19,2.3229074e19,2.3241609e19,2.325417e19,2.3266752e19,2.3279357e19,2.329197e19,2.3304615e19,2.3317282e19,2.3329957e19,2.3342665e19,2.335539e19,2.336813e19,2.33809e19,2.3393689e19,2.3406491e19,2.3419323e19,2.3432176e19,2.344504e19,2.3457935e19,2.3470853e19,2.3483783e19,2.3496742e19,2.3509722e19,2.3522716e19,2.353574e19,2.3548786e19,2.3561844e19,2.3574932e19,2.3588045e19,2.3601169e19,2.3614323e19,2.36275e19,2.364069e19,2.365391e19,2.3667155e19,2.368042e19,2.36937e19,2.370701e19,2.3720343e19,2.3733689e19,2.3747065e19,2.3760466e19,2.377388e19,2.3787325e19,2.3800794e19,2.3814276e19,2.3827791e19,2.3841329e19,2.3854881e19,2.3868464e19,2.3882072e19,2.3895693e19,2.3909347e19,2.3923024e19,2.3936716e19,2.395044e19,2.3964188e19,2.397795e19,2.3991746e19,2.4005565e19,2.4019399e19,2.4033266e19,2.4047157e19,2.4061062e19,2.4075001e19,2.4088965e19,2.4102944e19,2.4116956e19,2.4130993e19,2.4145053e19,2.415913e19,2.417324e19,2.4187376e19,2.4201526e19,2.4215712e19,2.4229922e19,2.4244148e19,2.4258408e19,2.4272693e19,2.4286994e19,2.430133e19,2.431569e19,2.4330068e19,2.434448e19,2.435892e19,2.4373373e19,2.4387863e19,2.4402379e19,2.441691e19,2.4431476e19,2.444607e19,2.446068e19,2.4475327e19,2.4489999e19,2.4504686e19,2.4519413e19,2.4534164e19,2.4548932e19,2.4563736e19,2.4578569e19,2.4593427e19,2.4608304e19,2.4623218e19,2.4638156e19,2.4653113e19,2.4668109e19,2.468313e19,2.469817e19,2.4713246e19,2.472835e19,2.4743473e19,2.4758634e19,2.4773822e19,2.4789026e19,2.480427e19,2.4819542e19,2.4834832e19,2.4850161e19,2.486552e19,2.4880895e19,2.4896308e19,2.4911751e19,2.4927213e19,2.4942714e19,2.4958243e19,2.497379e19,2.498938e19,2.5004994e19,2.5020632e19,2.5036306e19,2.5052012e19,2.5067735e19,2.50835e19,2.5099293e19,2.5115117e19,2.5130961e19,2.5146845e19,2.516276e19,2.5178693e19,2.5194667e19,2.5210674e19,2.5226698e19,2.5242764e19,2.525886e19,2.5274977e19,2.5291138e19,2.5307327e19,2.5323536e19,2.533979e19,2.5356073e19,2.5372377e19,2.5388724e19,2.5405102e19,2.54215e19,2.5437943e19,2.5454415e19,2.547091e19,2.5487447e19,2.5504017e19,2.5520608e19,2.5537244e19,2.555391e19,2.5570599e19,2.5587333e19,2.5604099e19,2.5620897e19,2.5637717e19,2.5654584e19,2.567148e19,2.56884e19,2.5705366e19,2.5722366e19,2.5739387e19,2.5756454e19,2.5773555e19,2.5790677e19,2.5807847e19,2.582505e19,2.5842275e19,2.5859548e19,2.5876854e19,2.5894185e19,2.5911562e19,2.5928973e19,2.5946407e19,2.596389e19,2.5981407e19,2.5998949e19,2.6016536e19,2.6034162e19,2.6051809e19,2.6069504e19,2.6087237e19,2.6104994e19,2.6122798e19,2.614064e19,2.6158505e19,2.617642e19,2.6194371e19,2.621236e19,2.6230374e19,2.6248437e19,2.6266537e19,2.628466e19,2.6302836e19,2.632105e19,2.6339287e19,2.6357576e19,2.6375903e19,2.6394256e19,2.641266e19,2.6431103e19,2.644957e19,2.646809e19,2.648665e19,2.6505234e19,2.652387e19,2.6542547e19,2.656125e19,2.6580005e19,2.65988e19,2.6617624e19,2.6636498e19,2.6655414e19,2.6674357e19,2.6693354e19,2.671239e19,2.6731454e19,2.6750573e19,2.6769733e19,2.6788935e19,2.6808163e19,2.6827446e19,2.684677e19,2.6866127e19,2.6885535e19,2.6904986e19,2.6924467e19,2.6944003e19,2.696358e19,2.698319e19,2.7002853e19,2.702256e19,2.7042297e19,2.706209e19,2.7081928e19,2.7101796e19,2.7121721e19,2.714169e19,2.7161689e19,2.7181746e19,2.720185e19,2.7221982e19,2.7242173e19,2.7262408e19,2.7282677e19,2.7303002e19,2.7323376e19,2.7343779e19,2.7364243e19,2.7384753e19,2.7405294e19,2.7425897e19,2.7446546e19,2.746724e19,2.7487969e19,2.7508758e19,2.7529596e19,2.7550465e19,2.7571398e19,2.7592376e19,2.761339e19,2.7634466e19,2.765559e19,2.7676746e19,2.769797e19,2.7719238e19,2.7740542e19,2.776191e19,2.7783328e19,2.780478e19,2.7826297e19,2.7847865e19,2.7869469e19,2.7891136e19,2.7912853e19,2.7934608e19,2.795643e19,2.79783e19,2.8000207e19,2.8022182e19,2.804421e19,2.8066272e19,2.8088401e19,2.8110585e19,2.8132804e19,2.8155093e19,2.8177435e19,2.819983e19,2.8222262e19,2.8244765e19,2.826732e19,2.8289913e19,2.8312578e19,2.8335296e19,2.8358054e19,2.8380882e19,2.8403767e19,2.842669e19,2.8449685e19,2.8472735e19,2.8495825e19,2.851899e19,2.854221e19,2.8565468e19,2.8588802e19,2.8612193e19,2.8635626e19,2.8659131e19,2.8682696e19,2.87063e19,2.8729982e19,2.875372e19,2.8777502e19,2.880136e19,2.8825276e19,2.8849237e19,2.8873272e19,2.889737e19,2.8921527e19,2.8945728e19,2.8970007e19,2.8994346e19,2.901873e19,2.9043193e19,2.9067719e19,2.9092288e19,2.9116937e19,2.914165e19,2.9166408e19,2.9191246e19,2.9216148e19,2.9241098e19,2.9266128e19,2.9291223e19,2.9316364e19,2.9341587e19,2.9366876e19,2.9392213e19,2.9417634e19,2.944312e19,2.9468655e19,2.9494276e19,2.9519963e19,2.9545698e19,2.957152e19,2.9597408e19,2.9623346e19,2.9649373e19,2.9675467e19,2.9701611e19,2.9727843e19,2.9754146e19,2.9780519e19,2.9806942e19,2.9833454e19,2.9860038e19,2.9886674e19,2.9913401e19,2.9940199e19,2.996705e19,2.9993993e19,3.0021008e19,3.0048078e19,3.007524e19,3.0102476e19,3.0129768e19,3.0157152e19,3.0184611e19,3.0212125e19,3.0239736e19,3.0267422e19,3.0295165e19,3.0323002e19,3.0350917e19,3.037889e19,3.040696e19,3.0435109e19,3.0463315e19,3.049162e19,3.0520004e19,3.0548446e19,3.057699e19,3.0605612e19,3.0634316e19,3.0663081e19,3.0691948e19,3.0720894e19,3.0749903e19,3.0779016e19,3.080821e19,3.0837468e19,3.086683e19,3.0896275e19,3.0925785e19,3.09554e19,3.09851e19,3.1014866e19,3.1044737e19,3.1074694e19,3.110472e19,3.113485e19,3.1165072e19,3.119536e19,3.1225756e19,3.1256241e19,3.1286795e19,3.131746e19,3.1348216e19,3.1379042e19,3.140998e19,3.1441008e19,3.1472106e19,3.1503322e19,3.153463e19,3.1566007e19,3.1597501e19,3.162909e19,3.1660774e19,3.169253e19,3.1724405e19,3.1756376e19,3.1788423e19,3.1820588e19,3.1852852e19,3.188519e19,3.191765e19,3.1950211e19,3.1982847e19,3.2015608e19,3.2048468e19,3.2081407e19,3.2114472e19,3.2147638e19,3.2180885e19,3.2214257e19,3.2247733e19,3.2281292e19,3.2314979e19,3.2348771e19,3.2382645e19,3.241665e19,3.2450762e19,3.2484959e19,3.2519288e19,3.2553727e19,3.258825e19,3.2622906e19,3.2657675e19,3.2692555e19,3.2727522e19,3.2762627e19,3.2797845e19,3.2833152e19,3.2868598e19,3.2904159e19,3.293981e19,3.2975603e19,3.3011513e19,3.3047515e19,3.308366e19,3.3119925e19,3.3156281e19,3.3192785e19,3.322941e19,3.3266131e19,3.3303e19,3.333999e19,3.3377078e19,3.3414319e19,3.3451683e19,3.3489145e19,3.352676e19,3.3564503e19,3.3602346e19,3.3640346e19,3.3678474e19,3.3716704e19,3.3755093e19,3.3793613e19,3.3832239e19,3.3871023e19,3.3909941e19,3.3948994e19,3.3988156e19,3.402748e19,3.406694e19,3.4106512e19,3.4146248e19,3.4186125e19,3.4226113e19,3.426627e19,3.4306568e19,3.4346982e19,3.4387567e19,3.4428295e19,3.446914e19,3.4510158e19,3.4551326e19,3.459261e19,3.4634073e19,3.4675685e19,3.4717418e19,3.4759332e19,3.4801397e19,3.4843585e19,3.4885958e19,3.4928485e19,3.497114e19,3.5013979e19,3.5056978e19,3.5100103e19,3.514342e19,3.5186899e19,3.5230536e19,3.5274308e19,3.5318273e19,3.5362403e19,3.540667e19,3.5451131e19,3.5495763e19,3.554053e19,3.55855e19,3.5630642e19,3.5675922e19,3.5721409e19,3.576707e19,3.5812873e19,3.5858885e19,3.5905076e19,3.5951413e19,3.5997962e19,3.6044694e19,3.6091575e19,3.6138671e19,3.6185952e19,3.6233388e19,3.6281043e19,3.6328885e19,3.6376885e19,3.642511e19,3.6473525e19,3.6522102e19,3.6570907e19,3.6619908e19,3.6669071e19,3.6718468e19,3.6768065e19,3.6817864e19,3.686783e19,3.691804e19,3.696845e19,3.701903e19,3.706986e19,3.7120894e19,3.7172104e19,3.7223566e19,3.7275243e19,3.7327096e19,3.7379204e19,3.743153e19,3.7484045e19,3.7536812e19,3.7589804e19,3.7642986e19,3.769643e19,3.77501e19,3.7803967e19,3.78581e19,3.7912467e19,3.796703e19,3.802187e19,3.8076945e19,3.8132224e19,3.818778e19,3.8243583e19,3.829959e19,3.8355887e19,3.841243e19,3.8469225e19,3.852623e19,3.858353e19,3.8641087e19,3.8698864e19,3.875694e19,3.8815276e19,3.887384e19,3.893271e19,3.8991845e19,3.905121e19,3.9110886e19,3.917084e19,3.923103e19,3.929154e19,3.9352326e19,3.9413358e19,3.9474715e19,3.9536362e19,3.959825e19,3.966048e19,3.9722998e19,3.978577e19,3.9848887e19,3.9912307e19,3.997598e19,4.004001e19,4.0104344e19,4.0168946e19,4.0233906e19,4.0299186e19,4.0364734e19,4.043065e19,4.049689e19,4.0563456e19,4.0630306e19,4.0697534e19,4.0765097e19,4.083295e19,4.090119e19,4.0969774e19,4.1038656e19,4.110794e19,4.117757e19,4.1247506e19,4.131785e19,4.1388556e19,4.1459575e19,4.153101e19,4.160282e19,4.1674948e19,4.1747507e19,4.1820444e19,4.1893715e19,4.196742e19,4.204152e19,4.211596e19,4.219085e19,4.226614e19,4.2341784e19,4.2417888e19,4.24944e19,4.257128e19,4.2648627e19,4.2726397e19,4.280454e19,4.2883174e19,4.296224e19,4.304174e19,4.312163e19,4.320203e19,4.3282873e19,4.336412e19,4.344588e19,4.35281e19,4.361074e19,4.36939e19,4.377755e19,4.3861612e19,4.3946226e19,4.403133e19,4.411687e19,4.420297e19,4.4289577e19,4.4376637e19,4.446427e19,4.4552422e19,4.4641043e19,4.4730257e19,4.482001e19,4.4910234e19,4.5001076e19,4.5092467e19,4.5184356e19,4.5276873e19,4.536996e19,4.546356e19,4.5557807e19,4.565264e19,4.574807e19,4.584403e19,4.594067e19,4.603792e19,4.6135723e19,4.623422e19,4.633335e19,4.6433053e19,4.653347e19,4.6634545e19,4.6736206e19,4.683861e19,4.6941687e19,4.7045376e19,4.714983e19,4.7254982e19,4.7360764e19,4.7467338e19,4.7574632e19,4.7682582e19,4.7791346e19,4.790086e19,4.801105e19,4.8122084e19,4.823389e19,4.83464e19,4.8459783e19,4.8573965e19,4.868888e19,4.8804696e19,4.892134e19,4.903874e19,4.9157076e19,4.927627e19,4.939634e19,4.95172e19,4.9639045e19,4.976179e19,4.988536e19,5.0009945e19,5.013547e19,5.0261856e19,5.038929e19,5.05177e19,5.0647006e19,5.07774e19,5.090881e19,5.1041146e19,5.117462e19,5.130914e19,5.1444636e19,5.1581305e19,5.171907e19,5.185785e19,5.199785e19,5.2138987e19,5.228118e19,5.2424644e19,5.2569296e19,5.271505e19,5.2862127e19,5.301044e19,5.3159905e19,5.331075e19,5.346288e19,5.3616326e19,5.3770987e19,5.392711e19,5.4084594e19,5.424336e19,5.440364e19,5.4565354e19,5.4728402e19,5.4893034e19,5.505916e19,5.5226692e19,5.5395876e19,5.5566626e19,5.5738845e19,5.5912796e19,5.6088384e19,5.6265515e19,5.6444463e19,5.6625126e19,5.6807407e19,5.699159e19,5.7177573e19,5.736526e19,5.755494e19,5.7746513e19,5.793988e19,5.813533e19,5.833278e19,5.8532114e19,5.8733646e19,5.8937276e19,5.9142893e19,5.9350824e19,5.9560963e19,5.977335e19,5.9987872e19,6.0204876e19,6.042425e19,6.0645886e19,6.087014e19,6.1096892e19,6.132604e19,6.155795e19,6.179251e19,6.2029604e19,6.226962e19,6.251244e19,6.275795e19,6.3006555e19,6.3258137e19,6.3512572e19,6.377029e19,6.403117e19,6.429509e19,6.4562487e19,6.4833253e19,6.510726e19,6.5384966e19,6.566625e19,6.5951003e19,6.6239695e19,6.653221e19,6.6828427e19,6.712885e19,6.7433356e19,6.7742046e19,6.8054796e19,6.8372137e19,6.8693964e19,6.9020145e19,6.935125e19,6.968717e19,7.0027777e19,7.0373674e19,7.0724744e19,7.108087e19,7.144269e19,7.181009e19,7.218295e19,7.256195e19,7.2946985e19,7.3337936e19,7.373552e19,7.413965e19,7.45502e19,7.496794e19,7.539278e19,7.582463e19,7.626429e19,7.6711695e19,7.716674e19,7.763031e19,7.810233e19,7.858274e19,7.907246e19,7.957145e19,8.007966e19,8.059809e19,8.112673e19,8.16659e19,8.221558e19,8.277691e19,8.3349895e19,8.393454e19,8.453207e19,8.514256e19,8.5766015e19,8.640383e19,8.7056085e19,8.772287e19,8.84057e19,8.910472e19,8.982009e19,9.055349e19,9.130514e19,9.207529e19,9.2865825e19,9.367707e19,9.4509375e19,9.5364866e19,9.624401e19,9.714729e19,9.807715e19,9.9034235e19,1.00019195e20,1.0103486e20,1.0208211e20,1.03161846e20,1.04277375e20,1.054299e20,1.066215e20,1.0785356e20,1.0913025e20,1.10453385e20,1.1182485e20,1.1324974e20,1.1473052e20,1.1626984e20,1.1787398e20,1.195464e20,1.2129084e20,1.2311525e20,1.25024535e20,1.2702407e20,1.2912423e20,1.3133211e20,1.33655596e20,1.361087e20,1.3870204e20,1.4144751e20,1.4436485e20,1.47470475e20,1.5078317e20,1.5433218e20,1.5814424e20,1.6225046e20,1.6669736e20,1.7153115e20,1.7680752e20,1.8260708e20,1.8901755e20,1.9614902e20,2.0415975e20,2.132396e20,2.236497e20,2.3574106e20,2.500436e20,2.6731119e20,2.8871705e20,3.162774e20,3.5361504e20,4.082837e20,5.000434e20,7.0716816e20,2.6713738e22],"x":[1.0e-38,9.998000799880047e-39,9.996001599760096e-39,9.994002399640143e-39,9.992003199520192e-39,9.990003999400239e-39,9.988004799280288e-39,9.986005599160335e-39,9.984006399040384e-39,9.982007198920431e-39,9.98000799880048e-39,9.978008798680527e-39,9.976009598560576e-39,9.974010398440623e-39,9.972011198320672e-39,9.970011998200719e-39,9.968012798080768e-39,9.966013597960815e-39,9.964014397840864e-39,9.962015197720911e-39,9.96001599760096e-39,9.958016797481007e-39,9.956017597361055e-39,9.954018397241103e-39,9.952019197121151e-39,9.950019997001199e-39,9.948020796881247e-39,9.946021596761295e-39,9.944022396641343e-39,9.942023196521391e-39,9.94002399640144e-39,9.938024796281487e-39,9.936025596161535e-39,9.934026396041583e-39,9.932027195921631e-39,9.930027995801679e-39,9.928028795681727e-39,9.926029595561775e-39,9.924030395441823e-39,9.922031195321871e-39,9.92003199520192e-39,9.918032795081967e-39,9.916033594962015e-39,9.914034394842063e-39,9.912035194722111e-39,9.910035994602159e-39,9.908036794482207e-39,9.906037594362255e-39,9.904038394242303e-39,9.90203919412235e-39,9.900039994002399e-39,9.898040793882447e-39,9.896041593762494e-39,9.894042393642543e-39,9.89204319352259e-39,9.890043993402639e-39,9.888044793282686e-39,9.886045593162735e-39,9.884046393042782e-39,9.88204719292283e-39,9.880047992802878e-39,9.878048792682927e-39,9.876049592562974e-39,9.874050392443023e-39,9.87205119232307e-39,9.870051992203119e-39,9.868052792083166e-39,9.866053591963215e-39,9.864054391843262e-39,9.86205519172331e-39,9.860055991603358e-39,9.858056791483407e-39,9.856057591363454e-39,9.854058391243502e-39,9.85205919112355e-39,9.850059991003598e-39,9.848060790883646e-39,9.846061590763694e-39,9.844062390643742e-39,9.84206319052379e-39,9.840063990403838e-39,9.838064790283886e-39,9.836065590163934e-39,9.834066390043982e-39,9.83206718992403e-39,9.830067989804078e-39,9.828068789684126e-39,9.826069589564174e-39,9.824070389444222e-39,9.82207118932427e-39,9.820071989204318e-39,9.818072789084366e-39,9.816073588964414e-39,9.814074388844462e-39,9.81207518872451e-39,9.810075988604558e-39,9.808076788484606e-39,9.806077588364654e-39,9.804078388244702e-39,9.80207918812475e-39,9.800079988004798e-39,9.798080787884846e-39,9.796081587764894e-39,9.794082387644941e-39,9.79208318752499e-39,9.790083987405037e-39,9.788084787285086e-39,9.786085587165133e-39,9.784086387045182e-39,9.782087186925229e-39,9.780087986805278e-39,9.778088786685325e-39,9.776089586565374e-39,9.774090386445421e-39,9.77209118632547e-39,9.770091986205517e-39,9.768092786085566e-39,9.766093585965613e-39,9.764094385845662e-39,9.762095185725709e-39,9.760095985605758e-39,9.758096785485805e-39,9.756097585365854e-39,9.754098385245901e-39,9.75209918512595e-39,9.750099985005997e-39,9.748100784886046e-39,9.746101584766093e-39,9.744102384646141e-39,9.742103184526189e-39,9.740103984406237e-39,9.738104784286285e-39,9.736105584166333e-39,9.734106384046381e-39,9.73210718392643e-39,9.730107983806477e-39,9.728108783686525e-39,9.726109583566573e-39,9.724110383446621e-39,9.722111183326669e-39,9.720111983206717e-39,9.718112783086765e-39,9.716113582966813e-39,9.714114382846861e-39,9.71211518272691e-39,9.710115982606957e-39,9.708116782487005e-39,9.706117582367053e-39,9.704118382247101e-39,9.702119182127149e-39,9.700119982007197e-39,9.698120781887245e-39,9.696121581767293e-39,9.694122381647341e-39,9.692123181527389e-39,9.690123981407437e-39,9.688124781287484e-39,9.686125581167533e-39,9.68412638104758e-39,9.682127180927629e-39,9.680127980807676e-39,9.678128780687725e-39,9.676129580567772e-39,9.67413038044782e-39,9.672131180327868e-39,9.670131980207917e-39,9.668132780087964e-39,9.666133579968013e-39,9.66413437984806e-39,9.662135179728109e-39,9.660135979608156e-39,9.658136779488205e-39,9.656137579368252e-39,9.6541383792483e-39,9.652139179128348e-39,9.650139979008397e-39,9.648140778888444e-39,9.646141578768493e-39,9.64414237864854e-39,9.642143178528589e-39,9.640143978408636e-39,9.638144778288684e-39,9.636145578168732e-39,9.63414637804878e-39,9.632147177928828e-39,9.630147977808876e-39,9.628148777688924e-39,9.626149577568972e-39,9.62415037744902e-39,9.622151177329068e-39,9.620151977209116e-39,9.618152777089164e-39,9.616153576969212e-39,9.61415437684926e-39,9.612155176729308e-39,9.610155976609356e-39,9.608156776489404e-39,9.606157576369452e-39,9.6041583762495e-39,9.602159176129548e-39,9.600159976009596e-39,9.598160775889644e-39,9.596161575769692e-39,9.59416237564974e-39,9.592163175529788e-39,9.590163975409836e-39,9.588164775289884e-39,9.586165575169931e-39,9.58416637504998e-39,9.582167174930027e-39,9.580167974810076e-39,9.578168774690123e-39,9.576169574570172e-39,9.574170374450219e-39,9.572171174330268e-39,9.570171974210315e-39,9.568172774090364e-39,9.566173573970411e-39,9.56417437385046e-39,9.562175173730507e-39,9.560175973610556e-39,9.558176773490603e-39,9.556177573370652e-39,9.554178373250699e-39,9.552179173130748e-39,9.550179973010795e-39,9.548180772890844e-39,9.546181572770891e-39,9.54418237265094e-39,9.542183172530987e-39,9.540183972411036e-39,9.538184772291083e-39,9.536185572171132e-39,9.534186372051179e-39,9.532187171931228e-39,9.530187971811275e-39,9.528188771691323e-39,9.526189571571371e-39,9.52419037145142e-39,9.522191171331467e-39,9.520191971211515e-39,9.518192771091563e-39,9.516193570971611e-39,9.514194370851659e-39,9.512195170731707e-39,9.510195970611755e-39,9.508196770491803e-39,9.506197570371851e-39,9.5041983702519e-39,9.502199170131947e-39,9.500199970011995e-39,9.498200769892043e-39,9.496201569772091e-39,9.494202369652139e-39,9.492203169532187e-39,9.490203969412235e-39,9.488204769292283e-39,9.486205569172331e-39,9.484206369052378e-39,9.482207168932427e-39,9.480207968812474e-39,9.478208768692523e-39,9.47620956857257e-39,9.474210368452619e-39,9.472211168332666e-39,9.470211968212715e-39,9.468212768092762e-39,9.46621356797281e-39,9.464214367852858e-39,9.462215167732907e-39,9.460215967612954e-39,9.458216767493003e-39,9.45621756737305e-39,9.454218367253099e-39,9.452219167133146e-39,9.450219967013195e-39,9.448220766893242e-39,9.44622156677329e-39,9.444222366653338e-39,9.442223166533387e-39,9.440223966413434e-39,9.438224766293483e-39,9.43622556617353e-39,9.434226366053579e-39,9.432227165933626e-39,9.430227965813675e-39,9.428228765693722e-39,9.42622956557377e-39,9.424230365453818e-39,9.422231165333866e-39,9.420231965213914e-39,9.418232765093962e-39,9.41623356497401e-39,9.414234364854058e-39,9.412235164734106e-39,9.410235964614154e-39,9.408236764494202e-39,9.40623756437425e-39,9.404238364254298e-39,9.402239164134346e-39,9.400239964014394e-39,9.398240763894442e-39,9.39624156377449e-39,9.394242363654538e-39,9.392243163534586e-39,9.390243963414634e-39,9.388244763294682e-39,9.38624556317473e-39,9.384246363054778e-39,9.382247162934825e-39,9.380247962814874e-39,9.378248762694921e-39,9.37624956257497e-39,9.374250362455017e-39,9.372251162335066e-39,9.370251962215113e-39,9.368252762095162e-39,9.366253561975209e-39,9.364254361855258e-39,9.362255161735305e-39,9.360255961615354e-39,9.358256761495401e-39,9.35625756137545e-39,9.354258361255497e-39,9.352259161135546e-39,9.350259961015593e-39,9.348260760895642e-39,9.346261560775689e-39,9.344262360655738e-39,9.342263160535785e-39,9.340263960415834e-39,9.338264760295881e-39,9.33626556017593e-39,9.334266360055977e-39,9.332267159936026e-39,9.330267959816073e-39,9.328268759696122e-39,9.326269559576169e-39,9.324270359456218e-39,9.322271159336265e-39,9.320271959216314e-39,9.318272759096361e-39,9.31627355897641e-39,9.314274358856457e-39,9.312275158736505e-39,9.310275958616553e-39,9.308276758496601e-39,9.306277558376649e-39,9.304278358256697e-39,9.302279158136745e-39,9.300279958016793e-39,9.298280757896841e-39,9.29628155777689e-39,9.294282357656937e-39,9.292283157536985e-39,9.290283957417033e-39,9.288284757297081e-39,9.286285557177129e-39,9.284286357057177e-39,9.282287156937225e-39,9.280287956817273e-39,9.278288756697321e-39,9.276289556577368e-39,9.274290356457417e-39,9.272291156337464e-39,9.270291956217513e-39,9.26829275609756e-39,9.266293555977609e-39,9.264294355857656e-39,9.262295155737705e-39,9.260295955617752e-39,9.258296755497801e-39,9.256297555377848e-39,9.254298355257897e-39,9.252299155137944e-39,9.250299955017993e-39,9.24830075489804e-39,9.246301554778089e-39,9.244302354658136e-39,9.242303154538185e-39,9.240303954418232e-39,9.23830475429828e-39,9.236305554178328e-39,9.234306354058377e-39,9.232307153938424e-39,9.230307953818473e-39,9.22830875369852e-39,9.226309553578569e-39,9.224310353458616e-39,9.222311153338665e-39,9.220311953218712e-39,9.21831275309876e-39,9.216313552978808e-39,9.214314352858857e-39,9.212315152738904e-39,9.210315952618953e-39,9.208316752499e-39,9.206317552379048e-39,9.204318352259096e-39,9.202319152139144e-39,9.200319952019192e-39,9.19832075189924e-39,9.196321551779288e-39,9.194322351659336e-39,9.192323151539384e-39,9.190323951419432e-39,9.18832475129948e-39,9.186325551179528e-39,9.184326351059576e-39,9.182327150939624e-39,9.180327950819672e-39,9.17832875069972e-39,9.176329550579768e-39,9.174330350459815e-39,9.172331150339864e-39,9.170331950219911e-39,9.16833275009996e-39,9.166333549980007e-39,9.164334349860056e-39,9.162335149740103e-39,9.160335949620152e-39,9.158336749500199e-39,9.156337549380248e-39,9.154338349260295e-39,9.152339149140344e-39,9.150339949020391e-39,9.14834074890044e-39,9.146341548780487e-39,9.144342348660536e-39,9.142343148540583e-39,9.140343948420632e-39,9.138344748300679e-39,9.136345548180728e-39,9.134346348060775e-39,9.132347147940824e-39,9.130347947820871e-39,9.12834874770092e-39,9.126349547580967e-39,9.124350347461016e-39,9.122351147341063e-39,9.120351947221112e-39,9.118352747101159e-39,9.116353546981208e-39,9.114354346861255e-39,9.112355146741304e-39,9.110355946621351e-39,9.1083567465014e-39,9.106357546381447e-39,9.104358346261496e-39,9.102359146141543e-39,9.100359946021591e-39,9.098360745901639e-39,9.096361545781687e-39,9.094362345661735e-39,9.092363145541783e-39,9.090363945421831e-39,9.08836474530188e-39,9.086365545181927e-39,9.084366345061975e-39,9.082367144942023e-39,9.080367944822071e-39,9.078368744702119e-39,9.076369544582167e-39,9.074370344462215e-39,9.072371144342262e-39,9.070371944222311e-39,9.068372744102358e-39,9.066373543982407e-39,9.064374343862454e-39,9.062375143742503e-39,9.06037594362255e-39,9.058376743502599e-39,9.056377543382646e-39,9.054378343262695e-39,9.052379143142742e-39,9.050379943022791e-39,9.048380742902838e-39,9.046381542782887e-39,9.044382342662934e-39,9.042383142542983e-39,9.04038394242303e-39,9.038384742303079e-39,9.036385542183126e-39,9.034386342063175e-39,9.032387141943222e-39,9.03038794182327e-39,9.028388741703318e-39,9.026389541583367e-39,9.024390341463414e-39,9.022391141343463e-39,9.02039194122351e-39,9.018392741103559e-39,9.016393540983606e-39,9.014394340863655e-39,9.012395140743702e-39,9.01039594062375e-39,9.008396740503798e-39,9.006397540383847e-39,9.004398340263894e-39,9.002399140143943e-39,9.00039994002399e-39,8.998400739904039e-39,8.996401539784086e-39,8.994402339664135e-39,8.992403139544182e-39,8.99040393942423e-39,8.988404739304278e-39,8.986405539184326e-39,8.984406339064374e-39,8.982407138944422e-39,8.98040793882447e-39,8.978408738704518e-39,8.976409538584566e-39,8.974410338464614e-39,8.972411138344662e-39,8.970411938224709e-39,8.968412738104758e-39,8.966413537984805e-39,8.964414337864854e-39,8.962415137744901e-39,8.96041593762495e-39,8.958416737504997e-39,8.956417537385046e-39,8.954418337265093e-39,8.952419137145142e-39,8.950419937025189e-39,8.948420736905238e-39,8.946421536785285e-39,8.944422336665334e-39,8.942423136545381e-39,8.94042393642543e-39,8.938424736305477e-39,8.936425536185526e-39,8.934426336065573e-39,8.932427135945622e-39,8.930427935825669e-39,8.928428735705718e-39,8.926429535585765e-39,8.924430335465814e-39,8.922431135345861e-39,8.92043193522591e-39,8.918432735105957e-39,8.916433534986006e-39,8.914434334866053e-39,8.912435134746102e-39,8.910435934626149e-39,8.908436734506198e-39,8.906437534386245e-39,8.904438334266294e-39,8.902439134146341e-39,8.90043993402639e-39,8.898440733906437e-39,8.896441533786486e-39,8.894442333666533e-39,8.892443133546582e-39,8.890443933426629e-39,8.888444733306678e-39,8.886445533186725e-39,8.884446333066773e-39,8.882447132946821e-39,8.88044793282687e-39,8.878448732706917e-39,8.876449532586965e-39,8.874450332467013e-39,8.872451132347061e-39,8.870451932227109e-39,8.868452732107157e-39,8.866453531987205e-39,8.864454331867252e-39,8.862455131747301e-39,8.860455931627348e-39,8.858456731507397e-39,8.856457531387444e-39,8.854458331267493e-39,8.85245913114754e-39,8.850459931027589e-39,8.848460730907636e-39,8.846461530787685e-39,8.844462330667732e-39,8.842463130547781e-39,8.840463930427828e-39,8.838464730307877e-39,8.836465530187924e-39,8.834466330067973e-39,8.83246712994802e-39,8.830467929828069e-39,8.828468729708116e-39,8.826469529588165e-39,8.824470329468212e-39,8.82247112934826e-39,8.820471929228308e-39,8.818472729108357e-39,8.816473528988404e-39,8.814474328868453e-39,8.8124751287485e-39,8.810475928628549e-39,8.808476728508596e-39,8.806477528388645e-39,8.804478328268692e-39,8.80247912814874e-39,8.800479928028788e-39,8.798480727908837e-39,8.796481527788884e-39,8.794482327668933e-39,8.79248312754898e-39,8.790483927429029e-39,8.788484727309076e-39,8.786485527189125e-39,8.784486327069172e-39,8.78248712694922e-39,8.780487926829268e-39,8.778488726709317e-39,8.776489526589364e-39,8.774490326469412e-39,8.77249112634946e-39,8.770491926229508e-39,8.768492726109556e-39,8.766493525989604e-39,8.764494325869652e-39,8.762495125749699e-39,8.760495925629748e-39,8.758496725509795e-39,8.756497525389844e-39,8.754498325269891e-39,8.75249912514994e-39,8.750499925029987e-39,8.748500724910036e-39,8.746501524790083e-39,8.744502324670132e-39,8.742503124550179e-39,8.740503924430228e-39,8.738504724310275e-39,8.736505524190324e-39,8.734506324070371e-39,8.73250712395042e-39,8.730507923830467e-39,8.728508723710516e-39,8.726509523590563e-39,8.724510323470612e-39,8.722511123350659e-39,8.720511923230708e-39,8.718512723110755e-39,8.716513522990804e-39,8.714514322870851e-39,8.7125151227509e-39,8.710515922630947e-39,8.708516722510996e-39,8.706517522391043e-39,8.704518322271092e-39,8.702519122151139e-39,8.700519922031188e-39,8.698520721911235e-39,8.696521521791284e-39,8.694522321671331e-39,8.69252312155138e-39,8.690523921431427e-39,8.688524721311476e-39,8.686525521191523e-39,8.684526321071572e-39,8.682527120951619e-39,8.680527920831668e-39,8.678528720711715e-39,8.676529520591764e-39,8.674530320471811e-39,8.67253112035186e-39,8.670531920231907e-39,8.668532720111955e-39,8.666533519992003e-39,8.664534319872051e-39,8.662535119752099e-39,8.660535919632146e-39,8.658536719512195e-39,8.656537519392242e-39,8.654538319272291e-39,8.652539119152338e-39,8.650539919032387e-39,8.648540718912434e-39,8.646541518792483e-39,8.64454231867253e-39,8.642543118552579e-39,8.640543918432626e-39,8.638544718312675e-39,8.636545518192722e-39,8.634546318072771e-39,8.632547117952818e-39,8.630547917832867e-39,8.628548717712914e-39,8.626549517592963e-39,8.62455031747301e-39,8.622551117353059e-39,8.620551917233106e-39,8.618552717113155e-39,8.616553516993202e-39,8.614554316873251e-39,8.612555116753298e-39,8.610555916633347e-39,8.608556716513394e-39,8.606557516393443e-39,8.60455831627349e-39,8.602559116153539e-39,8.600559916033586e-39,8.598560715913635e-39,8.596561515793682e-39,8.59456231567373e-39,8.592563115553778e-39,8.590563915433827e-39,8.588564715313874e-39,8.586565515193923e-39,8.58456631507397e-39,8.582567114954019e-39,8.580567914834066e-39,8.578568714714115e-39,8.576569514594162e-39,8.57457031447421e-39,8.572571114354258e-39,8.570571914234307e-39,8.568572714114354e-39,8.566573513994403e-39,8.56457431387445e-39,8.562575113754499e-39,8.560575913634546e-39,8.558576713514593e-39,8.556577513394642e-39,8.554578313274689e-39,8.552579113154738e-39,8.550579913034785e-39,8.548580712914834e-39,8.546581512794881e-39,8.54458231267493e-39,8.542583112554977e-39,8.540583912435026e-39,8.538584712315073e-39,8.536585512195122e-39,8.534586312075169e-39,8.532587111955218e-39,8.530587911835265e-39,8.528588711715314e-39,8.526589511595361e-39,8.52459031147541e-39,8.522591111355457e-39,8.520591911235506e-39,8.518592711115553e-39,8.516593510995602e-39,8.514594310875649e-39,8.512595110755698e-39,8.510595910635745e-39,8.508596710515794e-39,8.506597510395841e-39,8.50459831027589e-39,8.502599110155937e-39,8.500599910035986e-39,8.498600709916033e-39,8.496601509796082e-39,8.494602309676129e-39,8.492603109556178e-39,8.490603909436225e-39,8.488604709316274e-39,8.486605509196321e-39,8.48460630907637e-39,8.482607108956417e-39,8.480607908836466e-39,8.478608708716513e-39,8.476609508596562e-39,8.474610308476609e-39,8.472611108356658e-39,8.470611908236705e-39,8.468612708116754e-39,8.466613507996801e-39,8.46461430787685e-39,8.462615107756897e-39,8.460615907636946e-39,8.458616707516993e-39,8.456617507397042e-39,8.454618307277089e-39,8.452619107157136e-39,8.450619907037185e-39,8.448620706917232e-39,8.446621506797281e-39,8.444622306677328e-39,8.442623106557377e-39,8.440623906437424e-39,8.438624706317473e-39,8.43662550619752e-39,8.434626306077569e-39,8.432627105957616e-39,8.430627905837665e-39,8.428628705717712e-39,8.426629505597761e-39,8.424630305477808e-39,8.422631105357857e-39,8.420631905237904e-39,8.418632705117953e-39,8.416633504998e-39,8.414634304878049e-39,8.412635104758096e-39,8.410635904638145e-39,8.408636704518192e-39,8.406637504398241e-39,8.404638304278288e-39,8.402639104158337e-39,8.400639904038384e-39,8.398640703918433e-39,8.39664150379848e-39,8.394642303678529e-39,8.392643103558576e-39,8.390643903438625e-39,8.388644703318672e-39,8.38664550319872e-39,8.384646303078768e-39,8.382647102958817e-39,8.380647902838864e-39,8.378648702718913e-39,8.37664950259896e-39,8.374650302479009e-39,8.372651102359056e-39,8.370651902239105e-39,8.368652702119152e-39,8.3666535019992e-39,8.364654301879248e-39,8.362655101759297e-39,8.360655901639344e-39,8.358656701519393e-39,8.35665750139944e-39,8.354658301279489e-39,8.352659101159536e-39,8.350659901039583e-39,8.348660700919632e-39,8.346661500799679e-39,8.344662300679728e-39,8.342663100559775e-39,8.340663900439824e-39,8.338664700319871e-39,8.33666550019992e-39,8.334666300079967e-39,8.332667099960016e-39,8.330667899840063e-39,8.328668699720112e-39,8.326669499600159e-39,8.324670299480208e-39,8.322671099360255e-39,8.320671899240304e-39,8.318672699120351e-39,8.3166734990004e-39,8.314674298880447e-39,8.312675098760496e-39,8.310675898640543e-39,8.308676698520592e-39,8.306677498400639e-39,8.304678298280688e-39,8.302679098160735e-39,8.300679898040784e-39,8.298680697920831e-39,8.29668149780088e-39,8.294682297680927e-39,8.292683097560976e-39,8.290683897441023e-39,8.288684697321072e-39,8.286685497201119e-39,8.284686297081168e-39,8.282687096961215e-39,8.280687896841264e-39,8.278688696721311e-39,8.27668949660136e-39,8.274690296481407e-39,8.272691096361456e-39,8.270691896241503e-39,8.268692696121552e-39,8.266693496001599e-39,8.264694295881648e-39,8.262695095761695e-39,8.260695895641744e-39,8.258696695521791e-39,8.25669749540184e-39,8.254698295281887e-39,8.252699095161936e-39,8.250699895041983e-39,8.24870069492203e-39,8.246701494802079e-39,8.244702294682126e-39,8.242703094562175e-39,8.240703894442222e-39,8.238704694322271e-39,8.236705494202318e-39,8.234706294082367e-39,8.232707093962414e-39,8.230707893842463e-39,8.22870869372251e-39,8.226709493602559e-39,8.224710293482606e-39,8.222711093362655e-39,8.220711893242702e-39,8.218712693122751e-39,8.216713493002798e-39,8.214714292882847e-39,8.212715092762894e-39,8.210715892642943e-39,8.20871669252299e-39,8.206717492403039e-39,8.204718292283086e-39,8.202719092163135e-39,8.200719892043182e-39,8.198720691923231e-39,8.196721491803278e-39,8.194722291683327e-39,8.192723091563374e-39,8.190723891443423e-39,8.18872469132347e-39,8.186725491203519e-39,8.184726291083566e-39,8.182727090963615e-39,8.180727890843662e-39,8.178728690723711e-39,8.176729490603758e-39,8.174730290483807e-39,8.172731090363854e-39,8.170731890243903e-39,8.16873269012395e-39,8.166733490003999e-39,8.164734289884046e-39,8.162735089764095e-39,8.160735889644142e-39,8.15873668952419e-39,8.156737489404238e-39,8.154738289284287e-39,8.152739089164334e-39,8.150739889044383e-39,8.14874068892443e-39,8.146741488804477e-39,8.144742288684526e-39,8.142743088564573e-39,8.140743888444622e-39,8.138744688324669e-39,8.136745488204718e-39,8.134746288084765e-39,8.132747087964814e-39,8.130747887844861e-39,8.12874868772491e-39,8.126749487604957e-39,8.124750287485006e-39,8.122751087365053e-39,8.120751887245102e-39,8.118752687125149e-39,8.116753487005198e-39,8.114754286885245e-39,8.112755086765294e-39,8.110755886645341e-39,8.10875668652539e-39,8.106757486405437e-39,8.104758286285486e-39,8.102759086165533e-39,8.100759886045582e-39,8.098760685925629e-39,8.096761485805678e-39,8.094762285685725e-39,8.092763085565774e-39,8.090763885445821e-39,8.08876468532587e-39,8.086765485205917e-39,8.084766285085966e-39,8.082767084966013e-39,8.080767884846062e-39,8.078768684726109e-39,8.076769484606158e-39,8.074770284486205e-39,8.072771084366254e-39,8.070771884246301e-39,8.06877268412635e-39,8.066773484006397e-39,8.064774283886446e-39,8.062775083766493e-39,8.060775883646542e-39,8.058776683526589e-39,8.056777483406638e-39,8.054778283286685e-39,8.052779083166734e-39,8.050779883046781e-39,8.04878068292683e-39,8.046781482806877e-39,8.044782282686926e-39,8.042783082566973e-39,8.04078388244702e-39,8.038784682327069e-39,8.036785482207116e-39,8.034786282087165e-39,8.032787081967212e-39,8.030787881847261e-39,8.028788681727308e-39,8.026789481607357e-39,8.024790281487404e-39,8.022791081367453e-39,8.0207918812475e-39,8.018792681127549e-39,8.016793481007596e-39,8.014794280887645e-39,8.012795080767692e-39,8.010795880647741e-39,8.008796680527788e-39,8.006797480407837e-39,8.004798280287884e-39,8.002799080167933e-39,8.00079988004798e-39,7.998800679928029e-39,7.996801479808076e-39,7.994802279688125e-39,7.992803079568172e-39,7.990803879448221e-39,7.988804679328268e-39,7.986805479208317e-39,7.984806279088364e-39,7.982807078968413e-39,7.98080787884846e-39,7.978808678728509e-39,7.976809478608556e-39,7.974810278488605e-39,7.972811078368652e-39,7.970811878248701e-39,7.968812678128748e-39,7.966813478008797e-39,7.964814277888844e-39,7.962815077768893e-39,7.96081587764894e-39,7.958816677528989e-39,7.956817477409036e-39,7.954818277289085e-39,7.952819077169132e-39,7.95081987704918e-39,7.948820676929228e-39,7.946821476809277e-39,7.944822276689324e-39,7.942823076569373e-39,7.94082387644942e-39,7.938824676329467e-39,7.936825476209516e-39,7.934826276089563e-39,7.932827075969612e-39,7.930827875849659e-39,7.928828675729708e-39,7.926829475609755e-39,7.924830275489804e-39,7.922831075369851e-39,7.9208318752499e-39,7.918832675129947e-39,7.916833475009996e-39,7.914834274890043e-39,7.912835074770092e-39,7.910835874650139e-39,7.908836674530188e-39,7.906837474410235e-39,7.904838274290284e-39,7.902839074170331e-39,7.90083987405038e-39,7.898840673930427e-39,7.896841473810476e-39,7.894842273690523e-39,7.892843073570572e-39,7.890843873450619e-39,7.888844673330668e-39,7.886845473210715e-39,7.884846273090764e-39,7.882847072970811e-39,7.88084787285086e-39,7.878848672730907e-39,7.876849472610956e-39,7.874850272491003e-39,7.872851072371052e-39,7.870851872251099e-39,7.868852672131148e-39,7.866853472011195e-39,7.864854271891244e-39,7.862855071771291e-39,7.86085587165134e-39,7.858856671531387e-39,7.856857471411436e-39,7.854858271291483e-39,7.852859071171532e-39,7.850859871051579e-39,7.848860670931628e-39,7.846861470811675e-39,7.844862270691724e-39,7.842863070571771e-39,7.84086387045182e-39,7.838864670331867e-39,7.836865470211914e-39,7.834866270091963e-39,7.83286706997201e-39,7.830867869852059e-39,7.828868669732106e-39,7.826869469612155e-39,7.824870269492202e-39,7.822871069372251e-39,7.820871869252298e-39,7.818872669132347e-39,7.816873469012394e-39,7.814874268892443e-39,7.81287506877249e-39,7.810875868652539e-39,7.808876668532586e-39,7.806877468412635e-39,7.804878268292682e-39,7.802879068172731e-39,7.800879868052778e-39,7.798880667932827e-39,7.796881467812874e-39,7.794882267692923e-39,7.79288306757297e-39,7.790883867453019e-39,7.788884667333066e-39,7.786885467213115e-39,7.784886267093162e-39,7.782887066973211e-39,7.780887866853258e-39,7.778888666733307e-39,7.776889466613354e-39,7.774890266493403e-39,7.77289106637345e-39,7.770891866253499e-39,7.768892666133546e-39,7.766893466013595e-39,7.764894265893642e-39,7.762895065773691e-39,7.760895865653738e-39,7.758896665533787e-39,7.756897465413834e-39,7.754898265293883e-39,7.75289906517393e-39,7.750899865053979e-39,7.748900664934026e-39,7.746901464814075e-39,7.744902264694122e-39,7.74290306457417e-39,7.740903864454218e-39,7.738904664334267e-39,7.736905464214314e-39,7.734906264094361e-39,7.73290706397441e-39,7.730907863854457e-39,7.728908663734506e-39,7.726909463614553e-39,7.724910263494602e-39,7.722911063374649e-39,7.720911863254698e-39,7.718912663134745e-39,7.716913463014794e-39,7.714914262894841e-39,7.71291506277489e-39,7.710915862654937e-39,7.708916662534986e-39,7.706917462415033e-39,7.704918262295082e-39,7.702919062175129e-39,7.700919862055178e-39,7.698920661935225e-39,7.696921461815274e-39,7.694922261695321e-39,7.69292306157537e-39,7.690923861455417e-39,7.688924661335466e-39,7.686925461215513e-39,7.684926261095562e-39,7.682927060975609e-39,7.680927860855658e-39,7.678928660735705e-39,7.676929460615754e-39,7.674930260495801e-39,7.67293106037585e-39,7.670931860255897e-39,7.668932660135946e-39,7.666933460015993e-39,7.664934259896042e-39,7.662935059776089e-39,7.660935859656138e-39,7.658936659536185e-39,7.656937459416234e-39,7.654938259296281e-39,7.65293905917633e-39,7.650939859056377e-39,7.648940658936426e-39,7.646941458816473e-39,7.644942258696522e-39,7.642943058576569e-39,7.640943858456618e-39,7.638944658336665e-39,7.636945458216714e-39,7.634946258096761e-39,7.63294705797681e-39,7.630947857856857e-39,7.628948657736904e-39,7.626949457616953e-39,7.624950257497e-39,7.622951057377049e-39,7.620951857257096e-39,7.618952657137145e-39,7.616953457017192e-39,7.614954256897241e-39,7.612955056777288e-39,7.610955856657337e-39,7.608956656537384e-39,7.606957456417433e-39,7.60495825629748e-39,7.602959056177529e-39,7.600959856057576e-39,7.598960655937625e-39,7.596961455817672e-39,7.594962255697721e-39,7.592963055577768e-39,7.590963855457817e-39,7.588964655337864e-39,7.586965455217913e-39,7.58496625509796e-39,7.582967054978009e-39,7.580967854858056e-39,7.578968654738105e-39,7.576969454618152e-39,7.574970254498201e-39,7.572971054378248e-39,7.570971854258297e-39,7.568972654138344e-39,7.566973454018393e-39,7.56497425389844e-39,7.562975053778489e-39,7.560975853658536e-39,7.558976653538585e-39,7.556977453418632e-39,7.554978253298681e-39,7.552979053178728e-39,7.550979853058777e-39,7.548980652938824e-39,7.546981452818873e-39,7.54498225269892e-39,7.542983052578969e-39,7.540983852459016e-39,7.538984652339065e-39,7.536985452219112e-39,7.534986252099161e-39,7.532987051979208e-39,7.530987851859257e-39,7.528988651739304e-39,7.526989451619351e-39,7.5249902514994e-39,7.522991051379447e-39,7.520991851259496e-39,7.518992651139543e-39,7.516993451019592e-39,7.514994250899639e-39,7.512995050779688e-39,7.510995850659735e-39,7.508996650539784e-39,7.506997450419831e-39,7.50499825029988e-39,7.502999050179927e-39,7.500999850059976e-39,7.499000649940023e-39,7.497001449820072e-39,7.495002249700119e-39,7.493003049580168e-39,7.491003849460215e-39,7.489004649340264e-39,7.487005449220311e-39,7.48500624910036e-39,7.483007048980407e-39,7.481007848860456e-39,7.479008648740503e-39,7.477009448620552e-39,7.475010248500599e-39,7.473011048380648e-39,7.471011848260695e-39,7.469012648140744e-39,7.467013448020791e-39,7.46501424790084e-39,7.463015047780887e-39,7.461015847660936e-39,7.459016647540983e-39,7.457017447421032e-39,7.455018247301079e-39,7.453019047181128e-39,7.451019847061175e-39,7.449020646941224e-39,7.447021446821271e-39,7.44502224670132e-39,7.443023046581367e-39,7.441023846461416e-39,7.439024646341463e-39,7.437025446221512e-39,7.435026246101559e-39,7.433027045981608e-39,7.431027845861655e-39,7.429028645741704e-39,7.427029445621751e-39,7.425030245501798e-39,7.423031045381847e-39,7.421031845261894e-39,7.419032645141943e-39,7.41703344502199e-39,7.415034244902039e-39,7.413035044782086e-39,7.411035844662135e-39,7.409036644542182e-39,7.407037444422231e-39,7.405038244302278e-39,7.403039044182327e-39,7.401039844062374e-39,7.399040643942423e-39,7.39704144382247e-39,7.395042243702519e-39,7.393043043582566e-39,7.391043843462615e-39,7.389044643342662e-39,7.387045443222711e-39,7.385046243102758e-39,7.383047042982807e-39,7.381047842862854e-39,7.379048642742903e-39,7.37704944262295e-39,7.375050242502999e-39,7.373051042383046e-39,7.371051842263095e-39,7.369052642143142e-39,7.367053442023191e-39,7.365054241903238e-39,7.363055041783287e-39,7.361055841663334e-39,7.359056641543383e-39,7.35705744142343e-39,7.355058241303479e-39,7.353059041183526e-39,7.351059841063575e-39,7.349060640943622e-39,7.347061440823671e-39,7.345062240703718e-39,7.343063040583767e-39,7.341063840463814e-39,7.339064640343863e-39,7.33706544022391e-39,7.335066240103959e-39,7.333067039984006e-39,7.331067839864055e-39,7.329068639744102e-39,7.327069439624151e-39,7.325070239504198e-39,7.323071039384245e-39,7.321071839264294e-39,7.319072639144341e-39,7.31707343902439e-39,7.315074238904437e-39,7.313075038784486e-39,7.311075838664533e-39,7.309076638544582e-39,7.307077438424629e-39,7.305078238304678e-39,7.303079038184725e-39,7.301079838064774e-39,7.299080637944821e-39,7.29708143782487e-39,7.295082237704917e-39,7.293083037584966e-39,7.291083837465013e-39,7.289084637345062e-39,7.287085437225109e-39,7.285086237105158e-39,7.283087036985205e-39,7.281087836865254e-39,7.279088636745301e-39,7.27708943662535e-39,7.275090236505397e-39,7.273091036385446e-39,7.271091836265493e-39,7.269092636145542e-39,7.267093436025589e-39,7.265094235905638e-39,7.263095035785685e-39,7.261095835665734e-39,7.259096635545781e-39,7.25709743542583e-39,7.255098235305877e-39,7.253099035185926e-39,7.251099835065973e-39,7.249100634946022e-39,7.247101434826069e-39,7.245102234706118e-39,7.243103034586165e-39,7.241103834466214e-39,7.239104634346261e-39,7.23710543422631e-39,7.235106234106357e-39,7.233107033986406e-39,7.231107833866453e-39,7.229108633746502e-39,7.227109433626549e-39,7.225110233506598e-39,7.223111033386645e-39,7.221111833266694e-39,7.219112633146741e-39,7.217113433026788e-39,7.215114232906837e-39,7.213115032786884e-39,7.211115832666933e-39,7.20911663254698e-39,7.207117432427029e-39,7.205118232307076e-39,7.203119032187125e-39,7.201119832067172e-39,7.199120631947221e-39,7.197121431827268e-39,7.195122231707317e-39,7.193123031587364e-39,7.191123831467413e-39,7.18912463134746e-39,7.187125431227509e-39,7.185126231107556e-39,7.183127030987605e-39,7.181127830867652e-39,7.179128630747701e-39,7.177129430627748e-39,7.175130230507797e-39,7.173131030387844e-39,7.171131830267893e-39,7.16913263014794e-39,7.167133430027989e-39,7.165134229908036e-39,7.163135029788085e-39,7.161135829668132e-39,7.159136629548181e-39,7.157137429428228e-39,7.155138229308277e-39,7.153139029188324e-39,7.151139829068373e-39,7.14914062894842e-39,7.147141428828469e-39,7.145142228708516e-39,7.143143028588565e-39,7.141143828468612e-39,7.139144628348661e-39,7.137145428228708e-39,7.135146228108757e-39,7.133147027988804e-39,7.131147827868853e-39,7.1291486277489e-39,7.127149427628949e-39,7.125150227508996e-39,7.123151027389045e-39,7.121151827269092e-39,7.119152627149141e-39,7.117153427029188e-39,7.115154226909235e-39,7.113155026789284e-39,7.111155826669331e-39,7.10915662654938e-39,7.107157426429427e-39,7.105158226309476e-39,7.103159026189523e-39,7.101159826069572e-39,7.099160625949619e-39,7.097161425829668e-39,7.095162225709715e-39,7.093163025589764e-39,7.091163825469811e-39,7.08916462534986e-39,7.087165425229907e-39,7.085166225109956e-39,7.083167024990003e-39,7.081167824870052e-39,7.079168624750099e-39,7.077169424630148e-39,7.075170224510195e-39,7.073171024390244e-39,7.071171824270291e-39,7.06917262415034e-39,7.067173424030387e-39,7.065174223910436e-39,7.063175023790483e-39,7.061175823670532e-39,7.059176623550579e-39,7.057177423430628e-39,7.055178223310675e-39,7.053179023190724e-39,7.051179823070771e-39,7.04918062295082e-39,7.047181422830867e-39,7.045182222710916e-39,7.043183022590963e-39,7.041183822471012e-39,7.039184622351059e-39,7.037185422231108e-39,7.035186222111155e-39,7.033187021991204e-39,7.031187821871251e-39,7.0291886217513e-39,7.027189421631347e-39,7.025190221511396e-39,7.023191021391443e-39,7.021191821271492e-39,7.019192621151539e-39,7.017193421031588e-39,7.015194220911635e-39,7.013195020791682e-39,7.011195820671731e-39,7.009196620551778e-39,7.007197420431827e-39,7.005198220311874e-39,7.003199020191923e-39,7.00119982007197e-39,6.999200619952019e-39,6.997201419832066e-39,6.995202219712115e-39,6.993203019592162e-39,6.991203819472211e-39,6.989204619352258e-39,6.987205419232307e-39,6.985206219112354e-39,6.983207018992403e-39,6.98120781887245e-39,6.979208618752499e-39,6.977209418632546e-39,6.975210218512595e-39,6.973211018392642e-39,6.971211818272691e-39,6.969212618152738e-39,6.967213418032787e-39,6.965214217912834e-39,6.963215017792883e-39,6.96121581767293e-39,6.959216617552979e-39,6.957217417433026e-39,6.955218217313075e-39,6.953219017193122e-39,6.951219817073171e-39,6.949220616953218e-39,6.947221416833267e-39,6.945222216713314e-39,6.943223016593363e-39,6.94122381647341e-39,6.939224616353459e-39,6.937225416233506e-39,6.935226216113555e-39,6.933227015993602e-39,6.931227815873651e-39,6.929228615753698e-39,6.927229415633747e-39,6.925230215513794e-39,6.923231015393843e-39,6.92123181527389e-39,6.919232615153939e-39,6.917233415033986e-39,6.915234214914035e-39,6.913235014794082e-39,6.91123581467413e-39,6.909236614554178e-39,6.907237414434225e-39,6.905238214314274e-39,6.903239014194321e-39,6.90123981407437e-39,6.899240613954417e-39,6.897241413834466e-39,6.895242213714513e-39,6.893243013594562e-39,6.89124381347461e-39,6.889244613354658e-39,6.887245413234705e-39,6.885246213114754e-39,6.883247012994801e-39,6.88124781287485e-39,6.879248612754897e-39,6.877249412634946e-39,6.875250212514993e-39,6.873251012395042e-39,6.871251812275089e-39,6.869252612155138e-39,6.867253412035185e-39,6.865254211915234e-39,6.863255011795281e-39,6.86125581167533e-39,6.859256611555377e-39,6.857257411435426e-39,6.855258211315473e-39,6.853259011195522e-39,6.851259811075569e-39,6.849260610955618e-39,6.847261410835665e-39,6.845262210715714e-39,6.843263010595761e-39,6.84126381047581e-39,6.839264610355857e-39,6.837265410235906e-39,6.835266210115953e-39,6.833267009996002e-39,6.831267809876049e-39,6.829268609756098e-39,6.827269409636145e-39,6.825270209516194e-39,6.823271009396241e-39,6.82127180927629e-39,6.819272609156337e-39,6.817273409036386e-39,6.815274208916433e-39,6.813275008796482e-39,6.811275808676529e-39,6.809276608556578e-39,6.807277408436625e-39,6.805278208316672e-39,6.803279008196721e-39,6.801279808076768e-39,6.799280607956817e-39,6.797281407836864e-39,6.795282207716913e-39,6.79328300759696e-39,6.791283807477009e-39,6.789284607357056e-39,6.787285407237105e-39,6.785286207117152e-39,6.783287006997201e-39,6.781287806877248e-39,6.779288606757297e-39,6.777289406637344e-39,6.775290206517393e-39,6.77329100639744e-39,6.771291806277489e-39,6.769292606157536e-39,6.767293406037585e-39,6.765294205917632e-39,6.763295005797681e-39,6.761295805677728e-39,6.759296605557777e-39,6.757297405437824e-39,6.755298205317873e-39,6.75329900519792e-39,6.751299805077969e-39,6.749300604958016e-39,6.747301404838065e-39,6.745302204718112e-39,6.743303004598161e-39,6.741303804478208e-39,6.739304604358257e-39,6.737305404238304e-39,6.735306204118353e-39,6.7333070039984e-39,6.731307803878449e-39,6.729308603758496e-39,6.727309403638545e-39,6.725310203518592e-39,6.723311003398641e-39,6.721311803278688e-39,6.719312603158737e-39,6.717313403038784e-39,6.715314202918833e-39,6.71331500279888e-39,6.711315802678929e-39,6.709316602558976e-39,6.707317402439025e-39,6.705318202319072e-39,6.70331900219912e-39,6.701319802079168e-39,6.699320601959215e-39,6.697321401839264e-39,6.695322201719311e-39,6.69332300159936e-39,6.691323801479407e-39,6.689324601359456e-39,6.687325401239503e-39,6.685326201119552e-39,6.6833270009996e-39,6.681327800879648e-39,6.679328600759695e-39,6.677329400639744e-39,6.675330200519791e-39,6.67333100039984e-39,6.671331800279887e-39,6.669332600159936e-39,6.667333400039983e-39,6.665334199920032e-39,6.663334999800079e-39,6.661335799680128e-39,6.659336599560175e-39,6.657337399440224e-39,6.655338199320271e-39,6.65333899920032e-39,6.651339799080367e-39,6.649340598960416e-39,6.647341398840463e-39,6.645342198720512e-39,6.643342998600559e-39,6.641343798480608e-39,6.639344598360655e-39,6.637345398240704e-39,6.635346198120751e-39,6.6333469980008e-39,6.631347797880847e-39,6.629348597760896e-39,6.627349397640943e-39,6.625350197520992e-39,6.623350997401039e-39,6.621351797281088e-39,6.619352597161135e-39,6.617353397041184e-39,6.615354196921231e-39,6.61335499680128e-39,6.611355796681327e-39,6.609356596561376e-39,6.607357396441423e-39,6.605358196321472e-39,6.603358996201519e-39,6.601359796081566e-39,6.599360595961615e-39,6.597361395841662e-39,6.595362195721711e-39,6.593362995601758e-39,6.591363795481807e-39,6.589364595361854e-39,6.587365395241903e-39,6.58536619512195e-39,6.583366995001999e-39,6.581367794882046e-39,6.579368594762095e-39,6.577369394642142e-39,6.575370194522191e-39,6.573370994402238e-39,6.571371794282287e-39,6.569372594162334e-39,6.567373394042383e-39,6.56537419392243e-39,6.563374993802479e-39,6.561375793682526e-39,6.559376593562575e-39,6.557377393442622e-39,6.555378193322671e-39,6.553378993202718e-39,6.551379793082767e-39,6.549380592962814e-39,6.547381392842863e-39,6.54538219272291e-39,6.543382992602959e-39,6.541383792483006e-39,6.539384592363055e-39,6.537385392243102e-39,6.535386192123151e-39,6.533386992003198e-39,6.531387791883247e-39,6.529388591763294e-39,6.527389391643343e-39,6.52539019152339e-39,6.523390991403439e-39,6.521391791283486e-39,6.519392591163535e-39,6.517393391043582e-39,6.515394190923631e-39,6.513394990803678e-39,6.511395790683727e-39,6.509396590563774e-39,6.507397390443823e-39,6.50539819032387e-39,6.503398990203919e-39,6.501399790083966e-39,6.499400589964013e-39,6.497401389844062e-39,6.49540218972411e-39,6.493402989604158e-39,6.491403789484205e-39,6.489404589364254e-39,6.487405389244301e-39,6.48540618912435e-39,6.483406989004397e-39,6.481407788884446e-39,6.479408588764493e-39,6.477409388644542e-39,6.47541018852459e-39,6.473410988404638e-39,6.471411788284685e-39,6.469412588164734e-39,6.467413388044781e-39,6.46541418792483e-39,6.463414987804877e-39,6.461415787684926e-39,6.459416587564973e-39,6.457417387445022e-39,6.45541818732507e-39,6.453418987205118e-39,6.451419787085165e-39,6.449420586965214e-39,6.447421386845261e-39,6.44542218672531e-39,6.443422986605357e-39,6.441423786485406e-39,6.439424586365453e-39,6.437425386245502e-39,6.435426186125549e-39,6.433426986005598e-39,6.431427785885645e-39,6.429428585765694e-39,6.427429385645741e-39,6.42543018552579e-39,6.423430985405837e-39,6.421431785285886e-39,6.419432585165933e-39,6.417433385045982e-39,6.415434184926029e-39,6.413434984806078e-39,6.411435784686125e-39,6.409436584566174e-39,6.407437384446221e-39,6.40543818432627e-39,6.403438984206317e-39,6.401439784086366e-39,6.399440583966413e-39,6.397441383846462e-39,6.395442183726509e-39,6.393442983606557e-39,6.391443783486605e-39,6.389444583366652e-39,6.387445383246701e-39,6.385446183126748e-39,6.383446983006797e-39,6.381447782886844e-39,6.379448582766893e-39,6.37744938264694e-39,6.375450182526989e-39,6.373450982407036e-39,6.371451782287085e-39,6.369452582167132e-39,6.367453382047181e-39,6.365454181927228e-39,6.363454981807277e-39,6.361455781687324e-39,6.359456581567373e-39,6.35745738144742e-39,6.355458181327469e-39,6.353458981207516e-39,6.351459781087565e-39,6.349460580967612e-39,6.347461380847661e-39,6.345462180727708e-39,6.343462980607757e-39,6.341463780487804e-39,6.339464580367853e-39,6.3374653802479e-39,6.335466180127949e-39,6.333466980007996e-39,6.331467779888045e-39,6.329468579768092e-39,6.327469379648141e-39,6.325470179528188e-39,6.323470979408237e-39,6.321471779288284e-39,6.319472579168333e-39,6.31747337904838e-39,6.315474178928429e-39,6.313474978808476e-39,6.311475778688525e-39,6.309476578568572e-39,6.307477378448621e-39,6.305478178328668e-39,6.303478978208717e-39,6.301479778088764e-39,6.299480577968813e-39,6.29748137784886e-39,6.295482177728909e-39,6.293482977608956e-39,6.291483777489004e-39,6.289484577369052e-39,6.2874853772491e-39,6.285486177129148e-39,6.283486977009195e-39,6.281487776889244e-39,6.279488576769291e-39,6.27748937664934e-39,6.275490176529387e-39,6.273490976409436e-39,6.271491776289483e-39,6.269492576169532e-39,6.26749337604958e-39,6.265494175929628e-39,6.263494975809675e-39,6.261495775689724e-39,6.259496575569771e-39,6.25749737544982e-39,6.255498175329867e-39,6.253498975209916e-39,6.251499775089963e-39,6.249500574970012e-39,6.24750137485006e-39,6.245502174730108e-39,6.243502974610155e-39,6.241503774490204e-39,6.239504574370251e-39,6.2375053742503e-39,6.235506174130347e-39,6.233506974010396e-39,6.231507773890443e-39,6.229508573770492e-39,6.227509373650539e-39,6.225510173530588e-39,6.223510973410635e-39,6.221511773290684e-39,6.219512573170731e-39,6.21751337305078e-39,6.215514172930827e-39,6.213514972810876e-39,6.211515772690923e-39,6.209516572570972e-39,6.207517372451019e-39,6.205518172331068e-39,6.203518972211115e-39,6.201519772091164e-39,6.199520571971211e-39,6.19752137185126e-39,6.195522171731307e-39,6.193522971611356e-39,6.191523771491403e-39,6.18952457137145e-39,6.187525371251499e-39,6.185526171131547e-39,6.183526971011595e-39,6.181527770891643e-39,6.179528570771691e-39,6.177529370651739e-39,6.175530170531787e-39,6.173530970411834e-39,6.171531770291883e-39,6.16953257017193e-39,6.167533370051979e-39,6.165534169932026e-39,6.163534969812075e-39,6.161535769692122e-39,6.159536569572171e-39,6.157537369452218e-39,6.155538169332267e-39,6.153538969212314e-39,6.151539769092363e-39,6.14954056897241e-39,6.147541368852459e-39,6.145542168732506e-39,6.143542968612555e-39,6.141543768492602e-39,6.139544568372651e-39,6.137545368252698e-39,6.135546168132747e-39,6.133546968012794e-39,6.131547767892843e-39,6.12954856777289e-39,6.127549367652939e-39,6.125550167532986e-39,6.123550967413035e-39,6.121551767293082e-39,6.119552567173131e-39,6.117553367053178e-39,6.115554166933227e-39,6.113554966813274e-39,6.111555766693323e-39,6.10955656657337e-39,6.107557366453419e-39,6.105558166333466e-39,6.103558966213515e-39,6.101559766093562e-39,6.099560565973611e-39,6.097561365853658e-39,6.095562165733707e-39,6.093562965613754e-39,6.091563765493803e-39,6.08956456537385e-39,6.087565365253898e-39,6.085566165133946e-39,6.083566965013994e-39,6.081567764894042e-39,6.07956856477409e-39,6.077569364654138e-39,6.075570164534186e-39,6.073570964414234e-39,6.071571764294282e-39,6.06957256417433e-39,6.067573364054377e-39,6.065574163934426e-39,6.063574963814473e-39,6.061575763694522e-39,6.05957656357457e-39,6.057577363454618e-39,6.055578163334665e-39,6.053578963214714e-39,6.051579763094761e-39,6.04958056297481e-39,6.047581362854857e-39,6.045582162734906e-39,6.043582962614953e-39,6.041583762495002e-39,6.03958456237505e-39,6.037585362255098e-39,6.035586162135145e-39,6.033586962015194e-39,6.031587761895241e-39,6.02958856177529e-39,6.027589361655337e-39,6.025590161535386e-39,6.023590961415433e-39,6.021591761295482e-39,6.019592561175529e-39,6.017593361055578e-39,6.015594160935625e-39,6.013594960815674e-39,6.011595760695721e-39,6.00959656057577e-39,6.007597360455817e-39,6.005598160335866e-39,6.003598960215913e-39,6.001599760095962e-39,5.999600559976009e-39,5.997601359856058e-39,5.995602159736105e-39,5.993602959616154e-39,5.991603759496201e-39,5.98960455937625e-39,5.987605359256297e-39,5.985606159136346e-39,5.983606959016393e-39,5.98160775889644e-39,5.979608558776489e-39,5.977609358656537e-39,5.975610158536585e-39,5.973610958416633e-39,5.971611758296681e-39,5.969612558176729e-39,5.967613358056777e-39,5.965614157936825e-39,5.963614957816873e-39,5.96161575769692e-39,5.959616557576969e-39,5.957617357457016e-39,5.955618157337065e-39,5.953618957217112e-39,5.951619757097161e-39,5.949620556977208e-39,5.947621356857257e-39,5.945622156737304e-39,5.943622956617353e-39,5.9416237564974e-39,5.939624556377449e-39,5.937625356257496e-39,5.935626156137545e-39,5.933626956017592e-39,5.931627755897641e-39,5.929628555777688e-39,5.927629355657737e-39,5.925630155537784e-39,5.923630955417833e-39,5.92163175529788e-39,5.919632555177929e-39,5.917633355057976e-39,5.915634154938025e-39,5.913634954818072e-39,5.911635754698121e-39,5.909636554578168e-39,5.907637354458217e-39,5.905638154338264e-39,5.903638954218313e-39,5.90163975409836e-39,5.899640553978409e-39,5.897641353858456e-39,5.895642153738505e-39,5.893642953618552e-39,5.891643753498601e-39,5.889644553378648e-39,5.887645353258697e-39,5.885646153138744e-39,5.883646953018793e-39,5.88164775289884e-39,5.879648552778888e-39,5.877649352658936e-39,5.875650152538984e-39,5.873650952419032e-39,5.87165175229908e-39,5.869652552179128e-39,5.867653352059176e-39,5.865654151939224e-39,5.863654951819272e-39,5.86165575169932e-39,5.859656551579368e-39,5.857657351459416e-39,5.855658151339464e-39,5.853658951219512e-39,5.85165975109956e-39,5.849660550979608e-39,5.847661350859656e-39,5.845662150739704e-39,5.843662950619752e-39,5.8416637504998e-39,5.839664550379848e-39,5.837665350259896e-39,5.835666150139944e-39,5.833666950019992e-39,5.83166774990004e-39,5.8296685497800874e-39,5.8276693496601354e-39,5.8256701495401834e-39,5.8236709494202314e-39,5.8216717493002794e-39,5.8196725491803274e-39,5.8176733490603754e-39,5.8156741489404234e-39,5.8136749488204714e-39,5.8116757487005194e-39,5.8096765485805674e-39,5.8076773484606154e-39,5.8056781483406633e-39,5.8036789482207113e-39,5.8016797481007593e-39,5.799680547980807e-39,5.797681347860855e-39,5.795682147740903e-39,5.793682947620951e-39,5.791683747500999e-39,5.789684547381047e-39,5.787685347261095e-39,5.785686147141143e-39,5.783686947021191e-39,5.781687746901239e-39,5.779688546781287e-39,5.777689346661335e-39,5.775690146541383e-39,5.773690946421431e-39,5.771691746301479e-39,5.769692546181527e-39,5.767693346061575e-39,5.765694145941623e-39,5.763694945821671e-39,5.761695745701719e-39,5.759696545581767e-39,5.757697345461815e-39,5.755698145341863e-39,5.753698945221911e-39,5.751699745101959e-39,5.749700544982007e-39,5.747701344862055e-39,5.745702144742103e-39,5.743702944622151e-39,5.741703744502199e-39,5.739704544382247e-39,5.737705344262295e-39,5.735706144142343e-39,5.733706944022391e-39,5.731707743902439e-39,5.729708543782487e-39,5.727709343662535e-39,5.7257101435425824e-39,5.7237109434226304e-39,5.7217117433026784e-39,5.7197125431827264e-39,5.7177133430627744e-39,5.7157141429428224e-39,5.7137149428228704e-39,5.7117157427029184e-39,5.7097165425829664e-39,5.7077173424630144e-39,5.7057181423430624e-39,5.7037189422231104e-39,5.7017197421031584e-39,5.6997205419832064e-39,5.6977213418632543e-39,5.6957221417433023e-39,5.6937229416233503e-39,5.691723741503398e-39,5.689724541383446e-39,5.687725341263494e-39,5.685726141143542e-39,5.68372694102359e-39,5.681727740903638e-39,5.679728540783686e-39,5.677729340663734e-39,5.675730140543782e-39,5.67373094042383e-39,5.671731740303878e-39,5.669732540183926e-39,5.667733340063974e-39,5.665734139944022e-39,5.66373493982407e-39,5.661735739704118e-39,5.659736539584166e-39,5.657737339464214e-39,5.655738139344262e-39,5.65373893922431e-39,5.651739739104358e-39,5.649740538984406e-39,5.647741338864454e-39,5.645742138744502e-39,5.64374293862455e-39,5.641743738504598e-39,5.639744538384646e-39,5.637745338264694e-39,5.635746138144742e-39,5.63374693802479e-39,5.631747737904838e-39,5.629748537784886e-39,5.627749337664934e-39,5.625750137544982e-39,5.6237509374250295e-39,5.6217517373050774e-39,5.6197525371851254e-39,5.6177533370651734e-39,5.6157541369452214e-39,5.6137549368252694e-39,5.6117557367053174e-39,5.6097565365853654e-39,5.6077573364654134e-39,5.6057581363454614e-39,5.6037589362255094e-39,5.6017597361055574e-39,5.5997605359856054e-39,5.5977613358656534e-39,5.5957621357457014e-39,5.5937629356257494e-39,5.5917637355057973e-39,5.5897645353858453e-39,5.5877653352658933e-39,5.5857661351459413e-39,5.583766935025989e-39,5.581767734906037e-39,5.579768534786085e-39,5.577769334666133e-39,5.575770134546181e-39,5.573770934426229e-39,5.571771734306277e-39,5.569772534186325e-39,5.567773334066373e-39,5.565774133946421e-39,5.563774933826469e-39,5.561775733706517e-39,5.559776533586565e-39,5.557777333466613e-39,5.555778133346661e-39,5.553778933226709e-39,5.551779733106757e-39,5.549780532986805e-39,5.547781332866853e-39,5.545782132746901e-39,5.543782932626949e-39,5.541783732506997e-39,5.539784532387045e-39,5.537785332267093e-39,5.535786132147141e-39,5.533786932027189e-39,5.531787731907237e-39,5.529788531787285e-39,5.527789331667333e-39,5.525790131547381e-39,5.523790931427429e-39,5.521791731307477e-39,5.5197925311875245e-39,5.5177933310675725e-39,5.5157941309476205e-39,5.5137949308276684e-39,5.5117957307077164e-39,5.5097965305877644e-39,5.5077973304678124e-39,5.5057981303478604e-39,5.5037989302279084e-39,5.5017997301079564e-39,5.4998005299880044e-39,5.4978013298680524e-39,5.4958021297481004e-39,5.4938029296281484e-39,5.4918037295081964e-39,5.4898045293882444e-39,5.4878053292682924e-39,5.4858061291483404e-39,5.4838069290283883e-39,5.4818077289084363e-39,5.4798085287884843e-39,5.4778093286685323e-39,5.47581012854858e-39,5.473810928428628e-39,5.471811728308676e-39,5.469812528188724e-39,5.467813328068772e-39,5.46581412794882e-39,5.463814927828868e-39,5.461815727708916e-39,5.459816527588964e-39,5.457817327469012e-39,5.45581812734906e-39,5.453818927229108e-39,5.451819727109156e-39,5.449820526989204e-39,5.447821326869252e-39,5.4458221267493e-39,5.443822926629348e-39,5.441823726509396e-39,5.439824526389444e-39,5.437825326269492e-39,5.43582612614954e-39,5.433826926029588e-39,5.431827725909636e-39,5.429828525789684e-39,5.427829325669732e-39,5.42583012554978e-39,5.423830925429828e-39,5.421831725309876e-39,5.419832525189924e-39,5.4178333250699715e-39,5.4158341249500195e-39,5.4138349248300675e-39,5.4118357247101155e-39,5.4098365245901635e-39,5.4078373244702115e-39,5.4058381243502594e-39,5.4038389242303074e-39,5.4018397241103554e-39,5.3998405239904034e-39,5.3978413238704514e-39,5.3958421237504994e-39,5.3938429236305474e-39,5.3918437235105954e-39,5.3898445233906434e-39,5.3878453232706914e-39,5.3858461231507394e-39,5.3838469230307874e-39,5.3818477229108354e-39,5.3798485227908834e-39,5.3778493226709314e-39,5.3758501225509793e-39,5.3738509224310273e-39,5.3718517223110753e-39,5.3698525221911233e-39,5.367853322071171e-39,5.365854121951219e-39,5.363854921831267e-39,5.361855721711315e-39,5.359856521591363e-39,5.357857321471411e-39,5.355858121351459e-39,5.353858921231507e-39,5.351859721111555e-39,5.349860520991603e-39,5.347861320871651e-39,5.345862120751699e-39,5.343862920631747e-39,5.341863720511795e-39,5.339864520391843e-39,5.337865320271891e-39,5.335866120151939e-39,5.333866920031987e-39,5.331867719912035e-39,5.329868519792083e-39,5.327869319672131e-39,5.325870119552179e-39,5.323870919432227e-39,5.321871719312275e-39,5.319872519192323e-39,5.317873319072371e-39,5.315874118952419e-39,5.3138749188324665e-39,5.3118757187125145e-39,5.3098765185925625e-39,5.3078773184726105e-39,5.3058781183526585e-39,5.3038789182327065e-39,5.3018797181127545e-39,5.2998805179928025e-39,5.2978813178728504e-39,5.2958821177528984e-39,5.2938829176329464e-39,5.2918837175129944e-39,5.2898845173930424e-39,5.2878853172730904e-39,5.2858861171531384e-39,5.2838869170331864e-39,5.2818877169132344e-39,5.2798885167932824e-39,5.2778893166733304e-39,5.2758901165533784e-39,5.2738909164334264e-39,5.2718917163134744e-39,5.2698925161935224e-39,5.2678933160735703e-39,5.2658941159536183e-39,5.2638949158336663e-39,5.2618957157137143e-39,5.259896515593762e-39,5.25789731547381e-39,5.255898115353858e-39,5.253898915233906e-39,5.251899715113954e-39,5.249900514994002e-39,5.24790131487405e-39,5.245902114754098e-39,5.243902914634146e-39,5.241903714514194e-39,5.239904514394242e-39,5.23790531427429e-39,5.235906114154338e-39,5.233906914034386e-39,5.231907713914434e-39,5.229908513794482e-39,5.22790931367453e-39,5.225910113554578e-39,5.223910913434626e-39,5.221911713314674e-39,5.219912513194722e-39,5.21791331307477e-39,5.215914112954818e-39,5.213914912834866e-39,5.2119157127149135e-39,5.2099165125949615e-39,5.2079173124750095e-39,5.2059181123550575e-39,5.2039189122351055e-39,5.2019197121151535e-39,5.1999205119952015e-39,5.1979213118752495e-39,5.1959221117552975e-39,5.1939229116353455e-39,5.1919237115153935e-39,5.1899245113954414e-39,5.1879253112754894e-39,5.1859261111555374e-39,5.1839269110355854e-39,5.1819277109156334e-39,5.1799285107956814e-39,5.1779293106757294e-39,5.1759301105557774e-39,5.1739309104358254e-39,5.1719317103158734e-39,5.1699325101959214e-39,5.1679333100759694e-39,5.1659341099560174e-39,5.1639349098360654e-39,5.1619357097161134e-39,5.1599365095961613e-39,5.1579373094762093e-39,5.1559381093562573e-39,5.1539389092363053e-39,5.151939709116353e-39,5.149940508996401e-39,5.147941308876449e-39,5.145942108756497e-39,5.143942908636545e-39,5.141943708516593e-39,5.139944508396641e-39,5.137945308276689e-39,5.135946108156737e-39,5.133946908036785e-39,5.131947707916833e-39,5.129948507796881e-39,5.127949307676929e-39,5.125950107556977e-39,5.123950907437025e-39,5.121951707317073e-39,5.119952507197121e-39,5.117953307077169e-39,5.115954106957217e-39,5.113954906837265e-39,5.111955706717313e-39,5.109956506597361e-39,5.1079573064774085e-39,5.1059581063574565e-39,5.1039589062375045e-39,5.1019597061175525e-39,5.0999605059976005e-39,5.0979613058776485e-39,5.0959621057576965e-39,5.0939629056377445e-39,5.0919637055177925e-39,5.0899645053978405e-39,5.0879653052778885e-39,5.0859661051579365e-39,5.0839669050379845e-39,5.0819677049180324e-39,5.0799685047980804e-39,5.0779693046781284e-39,5.0759701045581764e-39,5.0739709044382244e-39,5.0719717043182724e-39,5.0699725041983204e-39,5.0679733040783684e-39,5.0659741039584164e-39,5.0639749038384644e-39,5.0619757037185124e-39,5.0599765035985604e-39,5.0579773034786084e-39,5.0559781033586564e-39,5.0539789032387044e-39,5.0519797031187523e-39,5.0499805029988003e-39,5.0479813028788483e-39,5.0459821027588963e-39,5.043982902638944e-39,5.041983702518992e-39,5.03998450239904e-39,5.037985302279088e-39,5.035986102159136e-39,5.033986902039184e-39,5.031987701919232e-39,5.02998850179928e-39,5.027989301679328e-39,5.025990101559376e-39,5.023990901439424e-39,5.021991701319472e-39,5.01999250119952e-39,5.017993301079568e-39,5.015994100959616e-39,5.013994900839664e-39,5.011995700719712e-39,5.00999650059976e-39,5.007997300479808e-39,5.0059981003598555e-39,5.0039989002399035e-39,5.0019997001199515e-39,5.0000004999999995e-39,4.9980012998800475e-39,4.9960020997600955e-39,4.9940028996401435e-39,4.9920036995201915e-39,4.9900044994002395e-39,4.9880052992802875e-39,4.9860060991603355e-39,4.9840068990403835e-39,4.9820076989204315e-39,4.9800084988004795e-39,4.9780092986805275e-39,4.9760100985605754e-39,4.9740108984406234e-39,4.9720116983206714e-39,4.9700124982007194e-39,4.9680132980807674e-39,4.9660140979608154e-39,4.9640148978408634e-39,4.9620156977209114e-39,4.9600164976009594e-39,4.9580172974810074e-39,4.9560180973610554e-39,4.9540188972411034e-39,4.9520196971211514e-39,4.9500204970011994e-39,4.9480212968812474e-39,4.9460220967612954e-39,4.9440228966413433e-39,4.9420236965213913e-39,4.9400244964014393e-39,4.9380252962814873e-39,4.936026096161535e-39,4.934026896041583e-39,4.932027695921631e-39,4.930028495801679e-39,4.928029295681727e-39,4.926030095561775e-39,4.924030895441823e-39,4.922031695321871e-39,4.920032495201919e-39,4.918033295081967e-39,4.916034094962015e-39,4.914034894842063e-39,4.912035694722111e-39,4.910036494602159e-39,4.908037294482207e-39,4.906038094362255e-39,4.904038894242303e-39,4.9020396941223506e-39,4.9000404940023986e-39,4.8980412938824465e-39,4.8960420937624945e-39,4.8940428936425425e-39,4.8920436935225905e-39,4.8900444934026385e-39,4.8880452932826865e-39,4.8860460931627345e-39,4.8840468930427825e-39,4.8820476929228305e-39,4.8800484928028785e-39,4.8780492926829265e-39,4.8760500925629745e-39,4.8740508924430225e-39,4.8720516923230705e-39,4.8700524922031185e-39,4.8680532920831664e-39,4.8660540919632144e-39,4.8640548918432624e-39,4.8620556917233104e-39,4.8600564916033584e-39,4.8580572914834064e-39,4.8560580913634544e-39,4.8540588912435024e-39,4.8520596911235504e-39,4.8500604910035984e-39,4.8480612908836464e-39,4.8460620907636944e-39,4.8440628906437424e-39,4.8420636905237904e-39,4.8400644904038384e-39,4.8380652902838864e-39,4.8360660901639343e-39,4.8340668900439823e-39,4.8320676899240303e-39,4.8300684898040783e-39,4.828069289684126e-39,4.826070089564174e-39,4.824070889444222e-39,4.82207168932427e-39,4.820072489204318e-39,4.818073289084366e-39,4.816074088964414e-39,4.814074888844462e-39,4.81207568872451e-39,4.810076488604558e-39,4.808077288484606e-39,4.806078088364654e-39,4.804078888244702e-39,4.80207968812475e-39,4.8000804880047976e-39,4.7980812878848456e-39,4.7960820877648936e-39,4.7940828876449416e-39,4.7920836875249896e-39,4.7900844874050375e-39,4.7880852872850855e-39,4.7860860871651335e-39,4.7840868870451815e-39,4.7820876869252295e-39,4.7800884868052775e-39,4.7780892866853255e-39,4.7760900865653735e-39,4.7740908864454215e-39,4.7720916863254695e-39,4.7700924862055175e-39,4.7680932860855655e-39,4.7660940859656135e-39,4.7640948858456615e-39,4.7620956857257095e-39,4.7600964856057574e-39,4.7580972854858054e-39,4.7560980853658534e-39,4.7540988852459014e-39,4.7520996851259494e-39,4.7501004850059974e-39,4.7481012848860454e-39,4.7461020847660934e-39,4.7441028846461414e-39,4.7421036845261894e-39,4.7401044844062374e-39,4.7381052842862854e-39,4.7361060841663334e-39,4.7341068840463814e-39,4.7321076839264294e-39,4.7301084838064774e-39,4.7281092836865253e-39,4.7261100835665733e-39,4.7241108834466213e-39,4.722111683326669e-39,4.720112483206717e-39,4.718113283086765e-39,4.716114082966813e-39,4.714114882846861e-39,4.712115682726909e-39,4.710116482606957e-39,4.708117282487005e-39,4.706118082367053e-39,4.704118882247101e-39,4.702119682127149e-39,4.700120482007197e-39,4.698121281887245e-39,4.6961220817672926e-39,4.6941228816473406e-39,4.6921236815273886e-39,4.6901244814074366e-39,4.6881252812874846e-39,4.6861260811675326e-39,4.6841268810475806e-39,4.6821276809276285e-39,4.6801284808076765e-39,4.6781292806877245e-39,4.6761300805677725e-39,4.6741308804478205e-39,4.6721316803278685e-39,4.6701324802079165e-39,4.6681332800879645e-39,4.6661340799680125e-39,4.6641348798480605e-39,4.6621356797281085e-39,4.6601364796081565e-39,4.6581372794882045e-39,4.6561380793682525e-39,4.6541388792483005e-39,4.6521396791283484e-39,4.6501404790083964e-39,4.6481412788884444e-39,4.6461420787684924e-39,4.6441428786485404e-39,4.6421436785285884e-39,4.6401444784086364e-39,4.6381452782886844e-39,4.6361460781687324e-39,4.6341468780487804e-39,4.6321476779288284e-39,4.6301484778088764e-39,4.6281492776889244e-39,4.6261500775689724e-39,4.6241508774490204e-39,4.6221516773290684e-39,4.6201524772091163e-39,4.6181532770891643e-39,4.6161540769692123e-39,4.61415487684926e-39,4.612155676729308e-39,4.610156476609356e-39,4.608157276489404e-39,4.606158076369452e-39,4.6041588762495e-39,4.602159676129548e-39,4.600160476009596e-39,4.598161275889644e-39,4.596162075769692e-39,4.5941628756497396e-39,4.5921636755297876e-39,4.5901644754098356e-39,4.5881652752898836e-39,4.5861660751699316e-39,4.5841668750499796e-39,4.5821676749300276e-39,4.5801684748100756e-39,4.5781692746901236e-39,4.5761700745701716e-39,4.5741708744502195e-39,4.5721716743302675e-39,4.5701724742103155e-39,4.5681732740903635e-39,4.5661740739704115e-39,4.5641748738504595e-39,4.5621756737305075e-39,4.5601764736105555e-39,4.5581772734906035e-39,4.5561780733706515e-39,4.5541788732506995e-39,4.5521796731307475e-39,4.5501804730107955e-39,4.5481812728908435e-39,4.5461820727708915e-39,4.5441828726509394e-39,4.5421836725309874e-39,4.5401844724110354e-39,4.5381852722910834e-39,4.5361860721711314e-39,4.5341868720511794e-39,4.5321876719312274e-39,4.5301884718112754e-39,4.5281892716913234e-39,4.5261900715713714e-39,4.5241908714514194e-39,4.5221916713314674e-39,4.5201924712115154e-39,4.5181932710915634e-39,4.5161940709716114e-39,4.5141948708516594e-39,4.5121956707317073e-39,4.5101964706117553e-39,4.5081972704918033e-39,4.506198070371851e-39,4.504198870251899e-39,4.502199670131947e-39,4.500200470011995e-39,4.498201269892043e-39,4.496202069772091e-39,4.494202869652139e-39,4.492203669532187e-39,4.4902044694122346e-39,4.4882052692922826e-39,4.4862060691723306e-39,4.4842068690523786e-39,4.4822076689324266e-39,4.4802084688124746e-39,4.4782092686925226e-39,4.4762100685725706e-39,4.4742108684526186e-39,4.4722116683326666e-39,4.4702124682127146e-39,4.4682132680927626e-39,4.4662140679728105e-39,4.4642148678528585e-39,4.4622156677329065e-39,4.4602164676129545e-39,4.4582172674930025e-39,4.4562180673730505e-39,4.4542188672530985e-39,4.4522196671331465e-39,4.4502204670131945e-39,4.4482212668932425e-39,4.4462220667732905e-39,4.4442228666533385e-39,4.4422236665333865e-39,4.4402244664134345e-39,4.4382252662934825e-39,4.4362260661735304e-39,4.4342268660535784e-39,4.4322276659336264e-39,4.4302284658136744e-39,4.4282292656937224e-39,4.4262300655737704e-39,4.4242308654538184e-39,4.4222316653338664e-39,4.4202324652139144e-39,4.4182332650939624e-39,4.4162340649740104e-39,4.4142348648540584e-39,4.4122356647341064e-39,4.4102364646141544e-39,4.4082372644942024e-39,4.4062380643742504e-39,4.4042388642542983e-39,4.4022396641343463e-39,4.4002404640143943e-39,4.398241263894442e-39,4.39624206377449e-39,4.394242863654538e-39,4.392243663534586e-39,4.390244463414634e-39,4.3882452632946816e-39,4.3862460631747296e-39,4.3842468630547776e-39,4.3822476629348256e-39,4.3802484628148736e-39,4.3782492626949216e-39,4.3762500625749696e-39,4.3742508624550176e-39,4.3722516623350656e-39,4.3702524622151136e-39,4.3682532620951616e-39,4.3662540619752096e-39,4.3642548618552576e-39,4.3622556617353056e-39,4.3602564616153535e-39,4.3582572614954015e-39,4.3562580613754495e-39,4.3542588612554975e-39,4.3522596611355455e-39,4.3502604610155935e-39,4.3482612608956415e-39,4.3462620607756895e-39,4.3442628606557375e-39,4.3422636605357855e-39,4.3402644604158335e-39,4.3382652602958815e-39,4.3362660601759295e-39,4.3342668600559775e-39,4.3322676599360255e-39,4.3302684598160735e-39,4.3282692596961214e-39,4.3262700595761694e-39,4.3242708594562174e-39,4.3222716593362654e-39,4.3202724592163134e-39,4.3182732590963614e-39,4.3162740589764094e-39,4.3142748588564574e-39,4.3122756587365054e-39,4.3102764586165534e-39,4.3082772584966014e-39,4.3062780583766494e-39,4.3042788582566974e-39,4.3022796581367454e-39,4.3002804580167934e-39,4.2982812578968413e-39,4.2962820577768893e-39,4.2942828576569373e-39,4.2922836575369853e-39,4.290284457417033e-39,4.288285257297081e-39,4.286286057177129e-39,4.2842868570571767e-39,4.2822876569372246e-39,4.2802884568172726e-39,4.2782892566973206e-39,4.2762900565773686e-39,4.2742908564574166e-39,4.2722916563374646e-39,4.2702924562175126e-39,4.2682932560975606e-39,4.2662940559776086e-39,4.2642948558576566e-39,4.2622956557377046e-39,4.2602964556177526e-39,4.2582972554978006e-39,4.2562980553778486e-39,4.2542988552578966e-39,4.2522996551379445e-39,4.2503004550179925e-39,4.2483012548980405e-39,4.2463020547780885e-39,4.2443028546581365e-39,4.2423036545381845e-39,4.2403044544182325e-39,4.2383052542982805e-39,4.2363060541783285e-39,4.2343068540583765e-39,4.2323076539384245e-39,4.2303084538184725e-39,4.2283092536985205e-39,4.2263100535785685e-39,4.2243108534586165e-39,4.2223116533386645e-39,4.2203124532187124e-39,4.2183132530987604e-39,4.2163140529788084e-39,4.2143148528588564e-39,4.2123156527389044e-39,4.2103164526189524e-39,4.2083172524990004e-39,4.2063180523790484e-39,4.2043188522590964e-39,4.2023196521391444e-39,4.2003204520191924e-39,4.1983212518992404e-39,4.1963220517792884e-39,4.1943228516593364e-39,4.1923236515393844e-39,4.1903244514194323e-39,4.1883252512994803e-39,4.1863260511795283e-39,4.1843268510595763e-39,4.1823276509396237e-39,4.1803284508196717e-39,4.1783292506997197e-39,4.1763300505797677e-39,4.1743308504598156e-39,4.1723316503398636e-39,4.1703324502199116e-39,4.1683332500999596e-39,4.1663340499800076e-39,4.1643348498600556e-39,4.1623356497401036e-39,4.1603364496201516e-39,4.1583372495001996e-39,4.1563380493802476e-39,4.1543388492602956e-39,4.1523396491403436e-39,4.1503404490203916e-39,4.1483412489004396e-39,4.1463420487804876e-39,4.1443428486605355e-39,4.1423436485405835e-39,4.1403444484206315e-39,4.1383452483006795e-39,4.1363460481807275e-39,4.1343468480607755e-39,4.1323476479408235e-39,4.1303484478208715e-39,4.1283492477009195e-39,4.1263500475809675e-39,4.1243508474610155e-39,4.1223516473410635e-39,4.1203524472211115e-39,4.1183532471011595e-39,4.1163540469812075e-39,4.1143548468612555e-39,4.1123556467413034e-39,4.1103564466213514e-39,4.1083572465013994e-39,4.1063580463814474e-39,4.1043588462614954e-39,4.1023596461415434e-39,4.1003604460215914e-39,4.0983612459016394e-39,4.0963620457816874e-39,4.0943628456617354e-39,4.0923636455417834e-39,4.0903644454218314e-39,4.0883652453018794e-39,4.0863660451819274e-39,4.0843668450619754e-39,4.0823676449420233e-39,4.0803684448220713e-39,4.078369244702119e-39,4.076370044582167e-39,4.0743708444622147e-39,4.0723716443422627e-39,4.0703724442223107e-39,4.0683732441023587e-39,4.0663740439824066e-39,4.0643748438624546e-39,4.0623756437425026e-39,4.0603764436225506e-39,4.0583772435025986e-39,4.0563780433826466e-39,4.0543788432626946e-39,4.0523796431427426e-39,4.0503804430227906e-39,4.0483812429028386e-39,4.0463820427828866e-39,4.0443828426629346e-39,4.0423836425429826e-39,4.0403844424230306e-39,4.0383852423030786e-39,4.0363860421831265e-39,4.0343868420631745e-39,4.0323876419432225e-39,4.0303884418232705e-39,4.0283892417033185e-39,4.0263900415833665e-39,4.0243908414634145e-39,4.0223916413434625e-39,4.0203924412235105e-39,4.0183932411035585e-39,4.0163940409836065e-39,4.0143948408636545e-39,4.0123956407437025e-39,4.0103964406237505e-39,4.0083972405037985e-39,4.0063980403838465e-39,4.0043988402638944e-39,4.0023996401439424e-39,4.0004004400239904e-39,3.9984012399040384e-39,3.9964020397840864e-39,3.9944028396641344e-39,3.9924036395441824e-39,3.9904044394242304e-39,3.9884052393042784e-39,3.9864060391843264e-39,3.9844068390643744e-39,3.9824076389444224e-39,3.9804084388244704e-39,3.9784092387045184e-39,3.976410038584566e-39,3.974410838464614e-39,3.972411638344662e-39,3.97041243822471e-39,3.968413238104758e-39,3.9664140379848057e-39,3.9644148378648537e-39,3.9624156377449017e-39,3.9604164376249497e-39,3.9584172375049976e-39,3.9564180373850456e-39,3.9544188372650936e-39,3.9524196371451416e-39,3.9504204370251896e-39,3.9484212369052376e-39,3.9464220367852856e-39,3.9444228366653336e-39,3.9424236365453816e-39,3.9404244364254296e-39,3.9384252363054776e-39,3.9364260361855256e-39,3.9344268360655736e-39,3.9324276359456216e-39,3.9304284358256696e-39,3.9284292357057175e-39,3.9264300355857655e-39,3.9244308354658135e-39,3.9224316353458615e-39,3.9204324352259095e-39,3.9184332351059575e-39,3.9164340349860055e-39,3.9144348348660535e-39,3.9124356347461015e-39,3.9104364346261495e-39,3.9084372345061975e-39,3.9064380343862455e-39,3.9044388342662935e-39,3.9024396341463415e-39,3.9004404340263895e-39,3.8984412339064375e-39,3.8964420337864854e-39,3.8944428336665334e-39,3.8924436335465814e-39,3.8904444334266294e-39,3.8884452333066774e-39,3.8864460331867254e-39,3.8844468330667734e-39,3.8824476329468214e-39,3.8804484328268694e-39,3.8784492327069174e-39,3.8764500325869654e-39,3.8744508324670134e-39,3.872451632347061e-39,3.870452432227109e-39,3.868453232107157e-39,3.866454031987205e-39,3.864454831867253e-39,3.862455631747301e-39,3.860456431627349e-39,3.8584572315073967e-39,3.8564580313874447e-39,3.8544588312674927e-39,3.8524596311475407e-39,3.8504604310275886e-39,3.8484612309076366e-39,3.8464620307876846e-39,3.8444628306677326e-39,3.8424636305477806e-39,3.8404644304278286e-39,3.8384652303078766e-39,3.8364660301879246e-39,3.8344668300679726e-39,3.8324676299480206e-39,3.8304684298280686e-39,3.8284692297081166e-39,3.8264700295881646e-39,3.8244708294682126e-39,3.8224716293482606e-39,3.8204724292283085e-39,3.8184732291083565e-39,3.8164740289884045e-39,3.8144748288684525e-39,3.8124756287485005e-39,3.8104764286285485e-39,3.8084772285085965e-39,3.8064780283886445e-39,3.8044788282686925e-39,3.8024796281487405e-39,3.8004804280287885e-39,3.7984812279088365e-39,3.7964820277888845e-39,3.7944828276689325e-39,3.7924836275489805e-39,3.7904844274290285e-39,3.7884852273090764e-39,3.7864860271891244e-39,3.7844868270691724e-39,3.7824876269492204e-39,3.7804884268292684e-39,3.7784892267093164e-39,3.7764900265893644e-39,3.7744908264694124e-39,3.7724916263494604e-39,3.770492426229508e-39,3.768493226109556e-39,3.766494025989604e-39,3.764494825869652e-39,3.7624956257497e-39,3.760496425629748e-39,3.758497225509796e-39,3.756498025389844e-39,3.754498825269892e-39,3.75249962514994e-39,3.7505004250299877e-39,3.7485012249100357e-39,3.7465020247900837e-39,3.7445028246701316e-39,3.7425036245501796e-39,3.7405044244302276e-39,3.7385052243102756e-39,3.7365060241903236e-39,3.7345068240703716e-39,3.7325076239504196e-39,3.7305084238304676e-39,3.7285092237105156e-39,3.7265100235905636e-39,3.7245108234706116e-39,3.7225116233506596e-39,3.7205124232307076e-39,3.7185132231107556e-39,3.7165140229908036e-39,3.7145148228708516e-39,3.7125156227508995e-39,3.7105164226309475e-39,3.7085172225109955e-39,3.7065180223910435e-39,3.7045188222710915e-39,3.7025196221511395e-39,3.7005204220311875e-39,3.6985212219112355e-39,3.6965220217912835e-39,3.6945228216713315e-39,3.6925236215513795e-39,3.6905244214314275e-39,3.6885252213114755e-39,3.6865260211915235e-39,3.6845268210715715e-39,3.6825276209516194e-39,3.6805284208316674e-39,3.6785292207117154e-39,3.6765300205917634e-39,3.6745308204718114e-39,3.6725316203518594e-39,3.6705324202319074e-39,3.668533220111955e-39,3.666534019992003e-39,3.664534819872051e-39,3.662535619752099e-39,3.660536419632147e-39,3.658537219512195e-39,3.656538019392243e-39,3.654538819272291e-39,3.652539619152339e-39,3.650540419032387e-39,3.648541218912435e-39,3.646542018792483e-39,3.644542818672531e-39,3.6425436185525787e-39,3.6405444184326267e-39,3.6385452183126747e-39,3.6365460181927226e-39,3.6345468180727706e-39,3.6325476179528186e-39,3.6305484178328666e-39,3.6285492177129146e-39,3.6265500175929626e-39,3.6245508174730106e-39,3.6225516173530586e-39,3.6205524172331066e-39,3.6185532171131546e-39,3.6165540169932026e-39,3.6145548168732506e-39,3.6125556167532986e-39,3.6105564166333466e-39,3.6085572165133946e-39,3.6065580163934426e-39,3.6045588162734905e-39,3.6025596161535385e-39,3.6005604160335865e-39,3.5985612159136345e-39,3.5965620157936825e-39,3.5945628156737305e-39,3.5925636155537785e-39,3.5905644154338265e-39,3.5885652153138745e-39,3.5865660151939225e-39,3.5845668150739705e-39,3.5825676149540185e-39,3.5805684148340665e-39,3.5785692147141145e-39,3.5765700145941625e-39,3.5745708144742104e-39,3.5725716143542584e-39,3.5705724142343064e-39,3.5685732141143544e-39,3.5665740139944024e-39,3.56457481387445e-39,3.562575613754498e-39,3.560576413634546e-39,3.558577213514594e-39,3.556578013394642e-39,3.55457881327469e-39,3.552579613154738e-39,3.550580413034786e-39,3.548581212914834e-39,3.546582012794882e-39,3.54458281267493e-39,3.542583612554978e-39,3.540584412435026e-39,3.538585212315074e-39,3.536586012195122e-39,3.5345868120751697e-39,3.5325876119552177e-39,3.5305884118352657e-39,3.5285892117153136e-39,3.5265900115953616e-39,3.5245908114754096e-39,3.5225916113554576e-39,3.5205924112355056e-39,3.5185932111155536e-39,3.5165940109956016e-39,3.5145948108756496e-39,3.5125956107556976e-39,3.5105964106357456e-39,3.5085972105157936e-39,3.5065980103958416e-39,3.5045988102758896e-39,3.5025996101559376e-39,3.5006004100359856e-39,3.4986012099160336e-39,3.4966020097960815e-39,3.4946028096761295e-39,3.4926036095561775e-39,3.4906044094362255e-39,3.4886052093162735e-39,3.4866060091963215e-39,3.4846068090763695e-39,3.4826076089564175e-39,3.4806084088364655e-39,3.4786092087165135e-39,3.4766100085965615e-39,3.4746108084766095e-39,3.4726116083566575e-39,3.4706124082367055e-39,3.4686132081167535e-39,3.4666140079968014e-39,3.4646148078768494e-39,3.462615607756897e-39,3.460616407636945e-39,3.458617207516993e-39,3.456618007397041e-39,3.454618807277089e-39,3.452619607157137e-39,3.450620407037185e-39,3.448621206917233e-39,3.446622006797281e-39,3.444622806677329e-39,3.442623606557377e-39,3.440624406437425e-39,3.438625206317473e-39,3.436626006197521e-39,3.434626806077569e-39,3.432627605957617e-39,3.430628405837665e-39,3.4286292057177127e-39,3.4266300055977607e-39,3.4246308054778087e-39,3.4226316053578567e-39,3.4206324052379046e-39,3.4186332051179526e-39,3.4166340049980006e-39,3.4146348048780486e-39,3.4126356047580966e-39,3.4106364046381446e-39,3.4086372045181926e-39,3.4066380043982406e-39,3.4046388042782886e-39,3.4026396041583366e-39,3.4006404040383846e-39,3.3986412039184326e-39,3.3966420037984806e-39,3.3946428036785286e-39,3.3926436035585766e-39,3.3906444034386246e-39,3.3886452033186725e-39,3.3866460031987205e-39,3.3846468030787685e-39,3.3826476029588165e-39,3.3806484028388645e-39,3.3786492027189125e-39,3.3766500025989605e-39,3.3746508024790085e-39,3.3726516023590565e-39,3.3706524022391045e-39,3.3686532021191525e-39,3.3666540019992005e-39,3.3646548018792485e-39,3.3626556017592965e-39,3.3606564016393445e-39,3.358657201519392e-39,3.35665800139944e-39,3.354658801279488e-39,3.352659601159536e-39,3.350660401039584e-39,3.348661200919632e-39,3.34666200079968e-39,3.344662800679728e-39,3.342663600559776e-39,3.340664400439824e-39,3.338665200319872e-39,3.33666600019992e-39,3.334666800079968e-39,3.332667599960016e-39,3.330668399840064e-39,3.328669199720112e-39,3.32666999960016e-39,3.324670799480208e-39,3.322671599360256e-39,3.3206723992403037e-39,3.3186731991203517e-39,3.3166739990003997e-39,3.3146747988804477e-39,3.3126755987604956e-39,3.3106763986405436e-39,3.3086771985205916e-39,3.3066779984006396e-39,3.3046787982806876e-39,3.3026795981607356e-39,3.3006803980407836e-39,3.2986811979208316e-39,3.2966819978008796e-39,3.2946827976809276e-39,3.2926835975609756e-39,3.2906843974410236e-39,3.2886851973210716e-39,3.2866859972011196e-39,3.2846867970811676e-39,3.2826875969612156e-39,3.2806883968412635e-39,3.2786891967213115e-39,3.2766899966013595e-39,3.2746907964814075e-39,3.2726915963614555e-39,3.2706923962415035e-39,3.2686931961215515e-39,3.2666939960015995e-39,3.2646947958816475e-39,3.2626955957616955e-39,3.2606963956417435e-39,3.2586971955217915e-39,3.256697995401839e-39,3.254698795281887e-39,3.252699595161935e-39,3.250700395041983e-39,3.248701194922031e-39,3.246701994802079e-39,3.244702794682127e-39,3.242703594562175e-39,3.240704394442223e-39,3.238705194322271e-39,3.236705994202319e-39,3.234706794082367e-39,3.232707593962415e-39,3.230708393842463e-39,3.228709193722511e-39,3.226709993602559e-39,3.224710793482607e-39,3.222711593362655e-39,3.220712393242703e-39,3.218713193122751e-39,3.216713993002799e-39,3.214714792882847e-39,3.2127155927628947e-39,3.2107163926429427e-39,3.2087171925229907e-39,3.2067179924030387e-39,3.2047187922830866e-39,3.2027195921631346e-39,3.2007203920431826e-39,3.1987211919232306e-39,3.1967219918032786e-39,3.1947227916833266e-39,3.1927235915633746e-39,3.1907243914434226e-39,3.1887251913234706e-39,3.1867259912035186e-39,3.1847267910835666e-39,3.1827275909636146e-39,3.1807283908436626e-39,3.1787291907237106e-39,3.1767299906037586e-39,3.1747307904838066e-39,3.1727315903638545e-39,3.1707323902439025e-39,3.1687331901239505e-39,3.1667339900039985e-39,3.1647347898840465e-39,3.1627355897640945e-39,3.1607363896441425e-39,3.1587371895241905e-39,3.1567379894042385e-39,3.1547387892842865e-39,3.152739589164334e-39,3.150740389044382e-39,3.14874118892443e-39,3.146741988804478e-39,3.144742788684526e-39,3.142743588564574e-39,3.140744388444622e-39,3.13874518832467e-39,3.136745988204718e-39,3.134746788084766e-39,3.132747587964814e-39,3.130748387844862e-39,3.12874918772491e-39,3.126749987604958e-39,3.124750787485006e-39,3.122751587365054e-39,3.120752387245102e-39,3.11875318712515e-39,3.116753987005198e-39,3.114754786885246e-39,3.112755586765294e-39,3.110756386645342e-39,3.10875718652539e-39,3.106757986405438e-39,3.1047587862854857e-39,3.1027595861655337e-39,3.1007603860455817e-39,3.0987611859256297e-39,3.0967619858056776e-39,3.0947627856857256e-39,3.0927635855657736e-39,3.0907643854458216e-39,3.0887651853258696e-39,3.0867659852059176e-39,3.0847667850859656e-39,3.0827675849660136e-39,3.0807683848460616e-39,3.0787691847261096e-39,3.0767699846061576e-39,3.0747707844862056e-39,3.0727715843662536e-39,3.0707723842463016e-39,3.0687731841263496e-39,3.0667739840063975e-39,3.0647747838864455e-39,3.0627755837664935e-39,3.0607763836465415e-39,3.0587771835265895e-39,3.0567779834066375e-39,3.0547787832866855e-39,3.0527795831667335e-39,3.050780383046781e-39,3.048781182926829e-39,3.046781982806877e-39,3.044782782686925e-39,3.042783582566973e-39,3.040784382447021e-39,3.038785182327069e-39,3.036785982207117e-39,3.034786782087165e-39,3.032787581967213e-39,3.030788381847261e-39,3.028789181727309e-39,3.026789981607357e-39,3.024790781487405e-39,3.022791581367453e-39,3.020792381247501e-39,3.018793181127549e-39,3.016793981007597e-39,3.014794780887645e-39,3.012795580767693e-39,3.010796380647741e-39,3.008797180527789e-39,3.006797980407837e-39,3.004798780287885e-39,3.002799580167933e-39,3.000800380047981e-39,2.998801179928029e-39,2.9968019798080767e-39,2.9948027796881247e-39,2.9928035795681727e-39,2.9908043794482207e-39,2.9888051793282686e-39,2.9868059792083166e-39,2.9848067790883646e-39,2.9828075789684126e-39,2.9808083788484606e-39,2.9788091787285086e-39,2.9768099786085566e-39,2.9748107784886046e-39,2.9728115783686526e-39,2.9708123782487006e-39,2.9688131781287486e-39,2.9668139780087966e-39,2.9648147778888446e-39,2.9628155777688926e-39,2.9608163776489406e-39,2.9588171775289885e-39,2.9568179774090365e-39,2.9548187772890845e-39,2.9528195771691325e-39,2.9508203770491805e-39,2.9488211769292285e-39,2.946821976809276e-39,2.944822776689324e-39,2.942823576569372e-39,2.94082437644942e-39,2.938825176329468e-39,2.936825976209516e-39,2.934826776089564e-39,2.932827575969612e-39,2.93082837584966e-39,2.928829175729708e-39,2.926829975609756e-39,2.924830775489804e-39,2.922831575369852e-39,2.9208323752498998e-39,2.9188331751299478e-39,2.9168339750099958e-39,2.9148347748900438e-39,2.9128355747700917e-39,2.9108363746501397e-39,2.9088371745301877e-39,2.9068379744102357e-39,2.9048387742902837e-39,2.9028395741703317e-39,2.9008403740503797e-39,2.8988411739304277e-39,2.8968419738104757e-39,2.8948427736905237e-39,2.8928435735705717e-39,2.8908443734506197e-39,2.8888451733306677e-39,2.8868459732107157e-39,2.8848467730907637e-39,2.8828475729708117e-39,2.8808483728508596e-39,2.8788491727309076e-39,2.8768499726109556e-39,2.8748507724910036e-39,2.8728515723710516e-39,2.8708523722510996e-39,2.8688531721311473e-39,2.8668539720111953e-39,2.8648547718912433e-39,2.8628555717712913e-39,2.8608563716513393e-39,2.8588571715313872e-39,2.8568579714114352e-39,2.8548587712914832e-39,2.8528595711715312e-39,2.8508603710515792e-39,2.8488611709316272e-39,2.8468619708116752e-39,2.8448627706917232e-39,2.8428635705717712e-39,2.8408643704518192e-39,2.8388651703318672e-39,2.8368659702119152e-39,2.8348667700919632e-39,2.8328675699720112e-39,2.830868369852059e-39,2.828869169732107e-39,2.826869969612155e-39,2.824870769492203e-39,2.822871569372251e-39,2.820872369252299e-39,2.8188731691323468e-39,2.8168739690123948e-39,2.8148747688924428e-39,2.8128755687724908e-39,2.8108763686525388e-39,2.8088771685325868e-39,2.8068779684126348e-39,2.8048787682926827e-39,2.8028795681727307e-39,2.8008803680527787e-39,2.7988811679328267e-39,2.7968819678128747e-39,2.7948827676929227e-39,2.7928835675729707e-39,2.7908843674530187e-39,2.7888851673330667e-39,2.7868859672131147e-39,2.7848867670931627e-39,2.7828875669732107e-39,2.7808883668532587e-39,2.7788891667333067e-39,2.7768899666133547e-39,2.7748907664934027e-39,2.7728915663734506e-39,2.7708923662534986e-39,2.7688931661335466e-39,2.7668939660135943e-39,2.7648947658936423e-39,2.7628955657736903e-39,2.7608963656537383e-39,2.7588971655337863e-39,2.7568979654138343e-39,2.7548987652938823e-39,2.7528995651739303e-39,2.7509003650539782e-39,2.7489011649340262e-39,2.7469019648140742e-39,2.7449027646941222e-39,2.7429035645741702e-39,2.7409043644542182e-39,2.7389051643342662e-39,2.7369059642143142e-39,2.7349067640943622e-39,2.7329075639744102e-39,2.7309083638544582e-39,2.7289091637345062e-39,2.7269099636145542e-39,2.7249107634946022e-39,2.72291156337465e-39,2.720912363254698e-39,2.718913163134746e-39,2.716913963014794e-39,2.7149147628948418e-39,2.7129155627748898e-39,2.7109163626549378e-39,2.7089171625349858e-39,2.7069179624150338e-39,2.7049187622950818e-39,2.7029195621751298e-39,2.7009203620551778e-39,2.6989211619352258e-39,2.6969219618152737e-39,2.6949227616953217e-39,2.6929235615753697e-39,2.6909243614554177e-39,2.6889251613354657e-39,2.6869259612155137e-39,2.6849267610955617e-39,2.6829275609756097e-39,2.6809283608556577e-39,2.6789291607357057e-39,2.6769299606157537e-39,2.6749307604958017e-39,2.6729315603758497e-39,2.6709323602558977e-39,2.6689331601359457e-39,2.6669339600159937e-39,2.6649347598960416e-39,2.6629355597760893e-39,2.6609363596561373e-39,2.6589371595361853e-39,2.6569379594162333e-39,2.6549387592962813e-39,2.6529395591763293e-39,2.6509403590563773e-39,2.6489411589364253e-39,2.6469419588164733e-39,2.6449427586965213e-39,2.6429435585765692e-39,2.6409443584566172e-39,2.6389451583366652e-39,2.6369459582167132e-39,2.6349467580967612e-39,2.6329475579768092e-39,2.6309483578568572e-39,2.6289491577369052e-39,2.6269499576169532e-39,2.6249507574970012e-39,2.6229515573770492e-39,2.6209523572570972e-39,2.6189531571371452e-39,2.616953957017193e-39,2.614954756897241e-39,2.6129555567772888e-39,2.6109563566573368e-39,2.6089571565373848e-39,2.6069579564174328e-39,2.6049587562974808e-39,2.6029595561775288e-39,2.6009603560575768e-39,2.5989611559376248e-39,2.5969619558176728e-39,2.5949627556977208e-39,2.5929635555777688e-39,2.5909643554578168e-39,2.5889651553378647e-39,2.5869659552179127e-39,2.5849667550979607e-39,2.5829675549780087e-39,2.5809683548580567e-39,2.5789691547381047e-39,2.5769699546181527e-39,2.5749707544982007e-39,2.5729715543782487e-39,2.5709723542582967e-39,2.5689731541383447e-39,2.5669739540183927e-39,2.5649747538984407e-39,2.5629755537784887e-39,2.5609763536585363e-39,2.5589771535385843e-39,2.5569779534186323e-39,2.5549787532986803e-39,2.5529795531787283e-39,2.5509803530587763e-39,2.5489811529388243e-39,2.5469819528188723e-39,2.5449827526989203e-39,2.5429835525789683e-39,2.5409843524590163e-39,2.5389851523390643e-39,2.5369859522191123e-39,2.5349867520991602e-39,2.5329875519792082e-39,2.5309883518592562e-39,2.5289891517393042e-39,2.5269899516193522e-39,2.5249907514994002e-39,2.5229915513794482e-39,2.5209923512594962e-39,2.5189931511395442e-39,2.5169939510195922e-39,2.5149947508996402e-39,2.5129955507796882e-39,2.5109963506597362e-39,2.5089971505397838e-39,2.5069979504198318e-39,2.5049987502998798e-39,2.5029995501799278e-39,2.5010003500599758e-39,2.4990011499400238e-39,2.4970019498200718e-39,2.4950027497001198e-39,2.4930035495801678e-39,2.4910043494602158e-39,2.4890051493402638e-39,2.4870059492203118e-39,2.4850067491003598e-39,2.4830075489804078e-39,2.4810083488604557e-39,2.4790091487405037e-39,2.4770099486205517e-39,2.4750107485005997e-39,2.4730115483806477e-39,2.4710123482606957e-39,2.4690131481407437e-39,2.4670139480207917e-39,2.4650147479008397e-39,2.4630155477808877e-39,2.4610163476609357e-39,2.4590171475409837e-39,2.4570179474210313e-39,2.4550187473010793e-39,2.4530195471811273e-39,2.4510203470611753e-39,2.4490211469412233e-39,2.4470219468212713e-39,2.4450227467013193e-39,2.4430235465813673e-39,2.4410243464614153e-39,2.4390251463414633e-39,2.4370259462215113e-39,2.4350267461015593e-39,2.4330275459816073e-39,2.4310283458616553e-39,2.4290291457417033e-39,2.4270299456217512e-39,2.4250307455017992e-39,2.4230315453818472e-39,2.4210323452618952e-39,2.4190331451419432e-39,2.4170339450219912e-39,2.4150347449020392e-39,2.4130355447820872e-39,2.4110363446621352e-39,2.4090371445421832e-39,2.407037944422231e-39,2.405038744302279e-39,2.403039544182327e-39,2.4010403440623748e-39,2.3990411439424228e-39,2.3970419438224708e-39,2.3950427437025188e-39,2.3930435435825668e-39,2.3910443434626148e-39,2.3890451433426628e-39,2.3870459432227108e-39,2.3850467431027588e-39,2.3830475429828068e-39,2.3810483428628548e-39,2.3790491427429028e-39,2.3770499426229508e-39,2.3750507425029988e-39,2.3730515423830467e-39,2.3710523422630947e-39,2.3690531421431427e-39,2.3670539420231907e-39,2.3650547419032387e-39,2.3630555417832867e-39,2.3610563416633347e-39,2.3590571415433827e-39,2.3570579414234307e-39,2.3550587413034784e-39,2.3530595411835264e-39,2.3510603410635743e-39,2.3490611409436223e-39,2.3470619408236703e-39,2.3450627407037183e-39,2.3430635405837663e-39,2.3410643404638143e-39,2.3390651403438623e-39,2.3370659402239103e-39,2.3350667401039583e-39,2.3330675399840063e-39,2.3310683398640543e-39,2.3290691397441023e-39,2.3270699396241503e-39,2.3250707395041983e-39,2.3230715393842463e-39,2.3210723392642943e-39,2.3190731391443422e-39,2.3170739390243902e-39,2.3150747389044382e-39,2.3130755387844862e-39,2.3110763386645342e-39,2.3090771385445822e-39,2.3070779384246302e-39,2.3050787383046782e-39,2.303079538184726e-39,2.301080338064774e-39,2.299081137944822e-39,2.29708193782487e-39,2.295082737704918e-39,2.2930835375849658e-39,2.2910843374650138e-39,2.2890851373450618e-39,2.2870859372251098e-39,2.2850867371051578e-39,2.2830875369852058e-39,2.2810883368652538e-39,2.2790891367453018e-39,2.2770899366253498e-39,2.2750907365053978e-39,2.2730915363854458e-39,2.2710923362654938e-39,2.2690931361455418e-39,2.2670939360255898e-39,2.2650947359056377e-39,2.2630955357856857e-39,2.2610963356657337e-39,2.2590971355457817e-39,2.2570979354258297e-39,2.2550987353058777e-39,2.2530995351859257e-39,2.2511003350659734e-39,2.2491011349460214e-39,2.2471019348260694e-39,2.2451027347061174e-39,2.2431035345861653e-39,2.2411043344662133e-39,2.2391051343462613e-39,2.2371059342263093e-39,2.2351067341063573e-39,2.2331075339864053e-39,2.2311083338664533e-39,2.2291091337465013e-39,2.2271099336265493e-39,2.2251107335065973e-39,2.2231115333866453e-39,2.2211123332666933e-39,2.2191131331467413e-39,2.2171139330267893e-39,2.2151147329068373e-39,2.2131155327868853e-39,2.2111163326669332e-39,2.2091171325469812e-39,2.2071179324270292e-39,2.2051187323070772e-39,2.2031195321871252e-39,2.201120332067173e-39,2.199121131947221e-39,2.197121931827269e-39,2.195122731707317e-39,2.193123531587365e-39,2.191124331467413e-39,2.189125131347461e-39,2.187125931227509e-39,2.1851267311075568e-39,2.1831275309876048e-39,2.1811283308676528e-39,2.1791291307477008e-39,2.1771299306277488e-39,2.1751307305077968e-39,2.1731315303878448e-39,2.1711323302678928e-39,2.1691331301479408e-39,2.1671339300279888e-39,2.1651347299080368e-39,2.1631355297880848e-39,2.1611363296681328e-39,2.1591371295481808e-39,2.1571379294282287e-39,2.1551387293082767e-39,2.1531395291883247e-39,2.1511403290683727e-39,2.1491411289484204e-39,2.1471419288284684e-39,2.1451427287085164e-39,2.1431435285885644e-39,2.1411443284686124e-39,2.1391451283486604e-39,2.1371459282287084e-39,2.1351467281087563e-39,2.1331475279888043e-39,2.1311483278688523e-39,2.1291491277489003e-39,2.1271499276289483e-39,2.1251507275089963e-39,2.1231515273890443e-39,2.1211523272690923e-39,2.1191531271491403e-39,2.1171539270291883e-39,2.1151547269092363e-39,2.1131555267892843e-39,2.1111563266693323e-39,2.1091571265493803e-39,2.1071579264294283e-39,2.1051587263094763e-39,2.1031595261895242e-39,2.1011603260695722e-39,2.0991611259496202e-39,2.097161925829668e-39,2.095162725709716e-39,2.093163525589764e-39,2.091164325469812e-39,2.08916512534986e-39,2.087165925229908e-39,2.085166725109956e-39,2.083167524990004e-39,2.081168324870052e-39,2.0791691247501e-39,2.0771699246301478e-39,2.0751707245101958e-39,2.0731715243902438e-39,2.0711723242702918e-39,2.0691731241503398e-39,2.0671739240303878e-39,2.0651747239104358e-39,2.0631755237904838e-39,2.0611763236705318e-39,2.0591771235505798e-39,2.0571779234306278e-39,2.0551787233106758e-39,2.0531795231907238e-39,2.0511803230707718e-39,2.0491811229508197e-39,2.0471819228308677e-39,2.0451827227109154e-39,2.0431835225909634e-39,2.0411843224710114e-39,2.0391851223510594e-39,2.0371859222311074e-39,2.0351867221111554e-39,2.0331875219912034e-39,2.0311883218712514e-39,2.0291891217512994e-39,2.0271899216313473e-39,2.0251907215113953e-39,2.0231915213914433e-39,2.0211923212714913e-39,2.0191931211515393e-39,2.0171939210315873e-39,2.0151947209116353e-39,2.0131955207916833e-39,2.0111963206717313e-39,2.0091971205517793e-39,2.0071979204318273e-39,2.0051987203118753e-39,2.0031995201919233e-39,2.0012003200719713e-39,1.9992011199520193e-39,1.9972019198320673e-39,1.995202719712115e-39,1.993203519592163e-39,1.991204319472211e-39,1.989205119352259e-39,1.987205919232307e-39,1.985206719112355e-39,1.983207518992403e-39,1.981208318872451e-39,1.979209118752499e-39,1.977209918632547e-39,1.975210718512595e-39,1.973211518392643e-39,1.971212318272691e-39,1.9692131181527388e-39,1.9672139180327868e-39,1.9652147179128348e-39,1.9632155177928828e-39,1.9612163176729308e-39,1.9592171175529788e-39,1.9572179174330268e-39,1.9552187173130748e-39,1.9532195171931228e-39,1.9512203170731708e-39,1.9492211169532188e-39,1.9472219168332668e-39,1.9452227167133148e-39,1.9432235165933624e-39,1.9412243164734104e-39,1.9392251163534584e-39,1.9372259162335064e-39,1.9352267161135544e-39,1.9332275159936024e-39,1.9312283158736504e-39,1.9292291157536984e-39,1.9272299156337464e-39,1.9252307155137944e-39,1.9232315153938424e-39,1.9212323152738904e-39,1.9192331151539383e-39,1.9172339150339863e-39,1.9152347149140343e-39,1.9132355147940823e-39,1.9112363146741303e-39,1.9092371145541783e-39,1.9072379144342263e-39,1.9052387143142743e-39,1.9032395141943223e-39,1.9012403140743703e-39,1.8992411139544183e-39,1.8972419138344663e-39,1.8952427137145143e-39,1.8932435135945623e-39,1.89124431347461e-39,1.889245113354658e-39,1.887245913234706e-39,1.885246713114754e-39,1.883247512994802e-39,1.88124831287485e-39,1.879249112754898e-39,1.877249912634946e-39,1.875250712514994e-39,1.873251512395042e-39,1.87125231227509e-39,1.869253112155138e-39,1.867253912035186e-39,1.865254711915234e-39,1.863255511795282e-39,1.8612563116753298e-39,1.8592571115553778e-39,1.8572579114354258e-39,1.8552587113154738e-39,1.8532595111955218e-39,1.8512603110755698e-39,1.8492611109556178e-39,1.8472619108356658e-39,1.8452627107157138e-39,1.8432635105957618e-39,1.8412643104758098e-39,1.8392651103558574e-39,1.8372659102359054e-39,1.8352667101159534e-39,1.8332675099960014e-39,1.8312683098760494e-39,1.8292691097560974e-39,1.8272699096361454e-39,1.8252707095161934e-39,1.8232715093962414e-39,1.8212723092762894e-39,1.8192731091563374e-39,1.8172739090363854e-39,1.8152747089164334e-39,1.8132755087964814e-39,1.8112763086765293e-39,1.8092771085565773e-39,1.8072779084366253e-39,1.8052787083166733e-39,1.8032795081967213e-39,1.8012803080767693e-39,1.7992811079568173e-39,1.7972819078368653e-39,1.7952827077169133e-39,1.7932835075969613e-39,1.7912843074770093e-39,1.789285107357057e-39,1.787285907237105e-39,1.785286707117153e-39,1.783287506997201e-39,1.781288306877249e-39,1.779289106757297e-39,1.777289906637345e-39,1.775290706517393e-39,1.773291506397441e-39,1.771292306277489e-39,1.769293106157537e-39,1.767293906037585e-39,1.765294705917633e-39,1.763295505797681e-39,1.761296305677729e-39,1.759297105557777e-39,1.757297905437825e-39,1.755298705317873e-39,1.7532995051979208e-39,1.7513003050779688e-39,1.7493011049580168e-39,1.7473019048380648e-39,1.7453027047181128e-39,1.7433035045981608e-39,1.7413043044782088e-39,1.7393051043582568e-39,1.7373059042383045e-39,1.7353067041183524e-39,1.7333075039984004e-39,1.7313083038784484e-39,1.7293091037584964e-39,1.7273099036385444e-39,1.7253107035185924e-39,1.7233115033986404e-39,1.7213123032786884e-39,1.7193131031587364e-39,1.7173139030387844e-39,1.7153147029188324e-39,1.7133155027988804e-39,1.7113163026789284e-39,1.7093171025589764e-39,1.7073179024390244e-39,1.7053187023190724e-39,1.7033195021991203e-39,1.7013203020791683e-39,1.6993211019592163e-39,1.6973219018392643e-39,1.6953227017193123e-39,1.6933235015993603e-39,1.6913243014794083e-39,1.6893251013594563e-39,1.6873259012395043e-39,1.685326701119552e-39,1.6833275009996e-39,1.681328300879648e-39,1.679329100759696e-39,1.677329900639744e-39,1.675330700519792e-39,1.67333150039984e-39,1.671332300279888e-39,1.669333100159936e-39,1.667333900039984e-39,1.665334699920032e-39,1.66333549980008e-39,1.661336299680128e-39,1.659337099560176e-39,1.657337899440224e-39,1.655338699320272e-39,1.65333949920032e-39,1.651340299080368e-39,1.649341098960416e-39,1.647341898840464e-39,1.6453426987205118e-39,1.6433434986005598e-39,1.6413442984806078e-39,1.6393450983606558e-39,1.6373458982407038e-39,1.6353466981207518e-39,1.6333474980007995e-39,1.6313482978808475e-39,1.6293490977608955e-39,1.6273498976409434e-39,1.6253506975209914e-39,1.6233514974010394e-39,1.6213522972810874e-39,1.6193530971611354e-39,1.6173538970411834e-39,1.6153546969212314e-39,1.6133554968012794e-39,1.6113562966813274e-39,1.6093570965613754e-39,1.6073578964414234e-39,1.6053586963214714e-39,1.6033594962015194e-39,1.6013602960815674e-39,1.5993610959616154e-39,1.5973618958416634e-39,1.5953626957217113e-39,1.5933634956017593e-39,1.5913642954818073e-39,1.5893650953618553e-39,1.5873658952419033e-39,1.5853666951219513e-39,1.583367495001999e-39,1.581368294882047e-39,1.579369094762095e-39,1.577369894642143e-39,1.575370694522191e-39,1.573371494402239e-39,1.571372294282287e-39,1.569373094162335e-39,1.567373894042383e-39,1.565374693922431e-39,1.563375493802479e-39,1.561376293682527e-39,1.559377093562575e-39,1.557377893442623e-39,1.555378693322671e-39,1.553379493202719e-39,1.551380293082767e-39,1.549381092962815e-39,1.547381892842863e-39,1.545382692722911e-39,1.543383492602959e-39,1.541384292483007e-39,1.539385092363055e-39,1.5373858922431028e-39,1.5353866921231508e-39,1.5333874920031988e-39,1.5313882918832465e-39,1.5293890917632945e-39,1.5273898916433425e-39,1.5253906915233905e-39,1.5233914914034385e-39,1.5213922912834865e-39,1.5193930911635344e-39,1.5173938910435824e-39,1.5153946909236304e-39,1.5133954908036784e-39,1.5113962906837264e-39,1.5093970905637744e-39,1.5073978904438224e-39,1.5053986903238704e-39,1.5033994902039184e-39,1.5014002900839664e-39,1.4994010899640144e-39,1.4974018898440624e-39,1.4954026897241104e-39,1.4934034896041584e-39,1.4914042894842064e-39,1.4894050893642544e-39,1.4874058892443023e-39,1.4854066891243503e-39,1.4834074890043983e-39,1.4814082888844463e-39,1.479409088764494e-39,1.477409888644542e-39,1.47541068852459e-39,1.473411488404638e-39,1.471412288284686e-39,1.469413088164734e-39,1.467413888044782e-39,1.46541468792483e-39,1.463415487804878e-39,1.461416287684926e-39,1.459417087564974e-39,1.457417887445022e-39,1.4554186873250699e-39,1.4534194872051179e-39,1.4514202870851659e-39,1.4494210869652139e-39,1.4474218868452619e-39,1.4454226867253099e-39,1.4434234866053579e-39,1.4414242864854057e-39,1.4394250863654537e-39,1.4374258862455017e-39,1.4354266861255497e-39,1.4334274860055977e-39,1.4314282858856457e-39,1.4294290857656937e-39,1.4274298856457417e-39,1.4254306855257897e-39,1.4234314854058376e-39,1.4214322852858856e-39,1.4194330851659336e-39,1.4174338850459816e-39,1.4154346849260295e-39,1.4134354848060775e-39,1.4114362846861254e-39,1.4094370845661734e-39,1.4074378844462214e-39,1.4054386843262694e-39,1.4034394842063174e-39,1.4014402840863654e-39,1.3994410839664134e-39,1.3974418838464614e-39,1.3954426837265094e-39,1.3934434836065574e-39,1.3914442834866054e-39,1.3894450833666532e-39,1.3874458832467012e-39,1.3854466831267492e-39,1.3834474830067972e-39,1.3814482828868452e-39,1.3794490827668932e-39,1.3774498826469412e-39,1.3754506825269892e-39,1.3734514824070372e-39,1.3714522822870852e-39,1.3694530821671331e-39,1.3674538820471811e-39,1.3654546819272291e-39,1.363455481807277e-39,1.361456281687325e-39,1.359457081567373e-39,1.357457881447421e-39,1.355458681327469e-39,1.353459481207517e-39,1.351460281087565e-39,1.349461080967613e-39,1.3474618808476609e-39,1.3454626807277089e-39,1.3434634806077569e-39,1.3414642804878049e-39,1.3394650803678529e-39,1.3374658802479007e-39,1.3354666801279487e-39,1.3334674800079967e-39,1.3314682798880447e-39,1.3294690797680927e-39,1.3274698796481407e-39,1.3254706795281887e-39,1.3234714794082367e-39,1.3214722792882847e-39,1.3194730791683327e-39,1.3174738790483807e-39,1.3154746789284286e-39,1.3134754788084765e-39,1.3114762786885245e-39,1.3094770785685725e-39,1.3074778784486205e-39,1.3054786783286685e-39,1.3034794782087164e-39,1.3014802780887644e-39,1.2994810779688124e-39,1.2974818778488604e-39,1.2954826777289084e-39,1.2934834776089564e-39,1.2914842774890044e-39,1.2894850773690524e-39,1.2874858772491002e-39,1.2854866771291482e-39,1.2834874770091962e-39,1.2814882768892442e-39,1.2794890767692922e-39,1.2774898766493402e-39,1.2754906765293882e-39,1.2734914764094362e-39,1.2714922762894842e-39,1.2694930761695322e-39,1.2674938760495802e-39,1.2654946759296282e-39,1.2634954758096762e-39,1.261496275689724e-39,1.259497075569772e-39,1.25749787544982e-39,1.255498675329868e-39,1.253499475209916e-39,1.251500275089964e-39,1.249501074970012e-39,1.24750187485006e-39,1.245502674730108e-39,1.243503474610156e-39,1.241504274490204e-39,1.2395050743702519e-39,1.2375058742502999e-39,1.2355066741303477e-39,1.2335074740103957e-39,1.2315082738904437e-39,1.2295090737704917e-39,1.2275098736505397e-39,1.2255106735305877e-39,1.2235114734106357e-39,1.2215122732906837e-39,1.2195130731707317e-39,1.2175138730507797e-39,1.2155146729308277e-39,1.2135154728108757e-39,1.2115162726909237e-39,1.2095170725709715e-39,1.2075178724510195e-39,1.2055186723310675e-39,1.2035194722111155e-39,1.2015202720911635e-39,1.1995210719712115e-39,1.1975218718512595e-39,1.1955226717313074e-39,1.1935234716113554e-39,1.1915242714914034e-39,1.1895250713714514e-39,1.1875258712514994e-39,1.1855266711315474e-39,1.1835274710115952e-39,1.1815282708916432e-39,1.1795290707716912e-39,1.1775298706517392e-39,1.1755306705317872e-39,1.1735314704118352e-39,1.1715322702918832e-39,1.1695330701719312e-39,1.1675338700519792e-39,1.1655346699320272e-39,1.1635354698120752e-39,1.1615362696921232e-39,1.1595370695721712e-39,1.157537869452219e-39,1.155538669332267e-39,1.153539469212315e-39,1.151540269092363e-39,1.149541068972411e-39,1.147541868852459e-39,1.145542668732507e-39,1.143543468612555e-39,1.141544268492603e-39,1.139545068372651e-39,1.137545868252699e-39,1.135546668132747e-39,1.133547468012795e-39,1.1315482678928427e-39,1.1295490677728907e-39,1.1275498676529387e-39,1.1255506675329867e-39,1.1235514674130347e-39,1.1215522672930827e-39,1.1195530671731307e-39,1.1175538670531787e-39,1.1155546669332267e-39,1.1135554668132747e-39,1.1115562666933227e-39,1.1095570665733707e-39,1.1075578664534185e-39,1.1055586663334665e-39,1.1035594662135145e-39,1.1015602660935625e-39,1.0995610659736105e-39,1.0975618658536585e-39,1.0955626657337065e-39,1.0935634656137545e-39,1.0915642654938025e-39,1.0895650653738505e-39,1.0875658652538984e-39,1.0855666651339464e-39,1.0835674650139944e-39,1.0815682648940423e-39,1.0795690647740903e-39,1.0775698646541382e-39,1.0755706645341862e-39,1.0735714644142342e-39,1.0715722642942822e-39,1.0695730641743302e-39,1.0675738640543782e-39,1.0655746639344262e-39,1.0635754638144742e-39,1.0615762636945222e-39,1.0595770635745702e-39,1.0575778634546182e-39,1.055578663334666e-39,1.053579463214714e-39,1.051580263094762e-39,1.04958106297481e-39,1.047581862854858e-39,1.045582662734906e-39,1.043583462614954e-39,1.041584262495002e-39,1.03958506237505e-39,1.037585862255098e-39,1.035586662135146e-39,1.033587462015194e-39,1.031588261895242e-39,1.0295890617752898e-39,1.0275898616553378e-39,1.0255906615353858e-39,1.0235914614154337e-39,1.0215922612954817e-39,1.0195930611755297e-39,1.0175938610555777e-39,1.0155946609356257e-39,1.0135954608156737e-39,1.0115962606957217e-39,1.0095970605757697e-39,1.0075978604558177e-39,1.0055986603358657e-39,1.0035994602159135e-39,1.0016002600959615e-39,9.996010599760095e-40,9.976018598560575e-40,9.956026597361055e-40,9.936034596161535e-40,9.916042594962015e-40,9.896050593762495e-40,9.876058592562975e-40,9.856066591363455e-40,9.836074590163935e-40,9.816082588964415e-40,9.796090587764894e-40,9.776098586565373e-40,9.756106585365853e-40,9.736114584166333e-40,9.716122582966813e-40,9.696130581767292e-40,9.676138580567772e-40,9.656146579368252e-40,9.636154578168732e-40,9.616162576969212e-40,9.596170575769692e-40,9.576178574570172e-40,9.556186573370652e-40,9.536194572171132e-40,9.51620257097161e-40,9.49621056977209e-40,9.47621856857257e-40,9.45622656737305e-40,9.43623456617353e-40,9.41624256497401e-40,9.39625056377449e-40,9.37625856257497e-40,9.35626656137545e-40,9.33627456017593e-40,9.31628255897641e-40,9.29629055777689e-40,9.27629855657737e-40,9.256306555377848e-40,9.236314554178328e-40,9.216322552978808e-40,9.196330551779288e-40,9.176338550579768e-40,9.156346549380247e-40,9.136354548180727e-40,9.116362546981207e-40,9.096370545781687e-40,9.076378544582167e-40,9.056386543382647e-40,9.036394542183127e-40,9.016402540983605e-40,8.996410539784085e-40,8.976418538584565e-40,8.956426537385045e-40,8.936434536185525e-40,8.916442534986005e-40,8.896450533786485e-40,8.876458532586965e-40,8.856466531387445e-40,8.836474530187925e-40,8.816482528988405e-40,8.796490527788885e-40,8.776498526589365e-40,8.756506525389843e-40,8.736514524190323e-40,8.716522522990803e-40,8.696530521791283e-40,8.676538520591763e-40,8.656546519392243e-40,8.636554518192723e-40,8.616562516993202e-40,8.596570515793682e-40,8.576578514594162e-40,8.556586513394642e-40,8.536594512195122e-40,8.516602510995602e-40,8.49661050979608e-40,8.47661850859656e-40,8.45662650739704e-40,8.43663450619752e-40,8.416642504998e-40,8.39665050379848e-40,8.37665850259896e-40,8.35666650139944e-40,8.33667450019992e-40,8.3166824990004e-40,8.29669049780088e-40,8.27669849660136e-40,8.25670649540184e-40,8.236714494202318e-40,8.216722493002798e-40,8.196730491803278e-40,8.176738490603758e-40,8.156746489404238e-40,8.136754488204718e-40,8.116762487005198e-40,8.096770485805678e-40,8.076778484606157e-40,8.056786483406637e-40,8.036794482207117e-40,8.016802481007597e-40,7.996810479808077e-40,7.976818478608556e-40,7.956826477409035e-40,7.936834476209515e-40,7.916842475009995e-40,7.896850473810475e-40,7.876858472610955e-40,7.856866471411435e-40,7.836874470211915e-40,7.816882469012395e-40,7.796890467812875e-40,7.776898466613355e-40,7.756906465413835e-40,7.736914464214315e-40,7.716922463014793e-40,7.696930461815273e-40,7.676938460615753e-40,7.656946459416233e-40,7.636954458216713e-40,7.616962457017193e-40,7.596970455817673e-40,7.576978454618153e-40,7.556986453418633e-40,7.536994452219112e-40,7.517002451019592e-40,7.497010449820072e-40,7.477018448620552e-40,7.45702644742103e-40,7.43703444622151e-40,7.41704244502199e-40,7.39705044382247e-40,7.37705844262295e-40,7.35706644142343e-40,7.33707444022391e-40,7.31708243902439e-40,7.29709043782487e-40,7.277098436625349e-40,7.257106435425829e-40,7.237114434226309e-40,7.217122433026789e-40,7.197130431827269e-40,7.177138430627749e-40,7.157146429428229e-40,7.137154428228708e-40,7.117162427029188e-40,7.097170425829668e-40,7.077178424630148e-40,7.057186423430628e-40,7.037194422231108e-40,7.017202421031587e-40,6.997210419832067e-40,6.977218418632547e-40,6.9572264174330265e-40,6.9372344162335065e-40,6.917242415033986e-40,6.897250413834466e-40,6.8772584126349455e-40,6.857266411435425e-40,6.837274410235905e-40,6.817282409036385e-40,6.797290407836865e-40,6.777298406637345e-40,6.757306405437824e-40,6.737314404238304e-40,6.717322403038784e-40,6.697330401839264e-40,6.677338400639744e-40,6.657346399440224e-40,6.637354398240704e-40,6.617362397041183e-40,6.597370395841663e-40,6.577378394642143e-40,6.557386393442623e-40,6.537394392243103e-40,6.517402391043583e-40,6.497410389844062e-40,6.477418388644542e-40,6.457426387445022e-40,6.437434386245502e-40,6.4174423850459815e-40,6.3974503838464615e-40,6.3774583826469406e-40,6.3574663814474205e-40,6.3374743802479005e-40,6.31748237904838e-40,6.29749037784886e-40,6.27749837664934e-40,6.25750637544982e-40,6.237514374250299e-40,6.217522373050779e-40,6.197530371851259e-40,6.177538370651739e-40,6.157546369452219e-40,6.137554368252699e-40,6.117562367053178e-40,6.097570365853658e-40,6.077578364654138e-40,6.057586363454618e-40,6.037594362255098e-40,6.017602361055578e-40,5.997610359856058e-40,5.977618358656537e-40,5.957626357457017e-40,5.937634356257497e-40,5.917642355057977e-40,5.8976503538584566e-40,5.8776583526589365e-40,5.857666351459416e-40,5.8376743502598956e-40,5.8176823490603755e-40,5.7976903478608555e-40,5.777698346661335e-40,5.757706345461815e-40,5.737714344262295e-40,5.717722343062774e-40,5.697730341863254e-40,5.677738340663734e-40,5.657746339464214e-40,5.637754338264694e-40,5.617762337065174e-40,5.597770335865653e-40,5.577778334666133e-40,5.557786333466613e-40,5.537794332267093e-40,5.517802331067573e-40,5.497810329868053e-40,5.477818328668532e-40,5.457826327469012e-40,5.437834326269492e-40,5.417842325069972e-40,5.397850323870452e-40,5.377858322670932e-40,5.3578663214714116e-40,5.337874320271891e-40,5.317882319072371e-40,5.2978903178728506e-40,5.2778983166733305e-40,5.2579063154738105e-40,5.23791431427429e-40,5.2179223130747695e-40,5.1979303118752494e-40,5.177938310675729e-40,5.157946309476209e-40,5.137954308276689e-40,5.117962307077169e-40,5.097970305877649e-40,5.077978304678128e-40,5.057986303478608e-40,5.037994302279088e-40,5.018002301079568e-40,4.998010299880048e-40,4.978018298680528e-40,4.958026297481007e-40,4.938034296281487e-40,4.918042295081967e-40,4.898050293882447e-40,4.878058292682927e-40,4.858066291483407e-40,4.838074290283887e-40,4.818082289084366e-40,4.798090287884846e-40,4.778098286685326e-40,4.7581062854858056e-40,4.7381142842862855e-40,4.7181222830867654e-40,4.6981302818872446e-40,4.6781382806877245e-40,4.6581462794882044e-40,4.638154278288684e-40,4.618162277089164e-40,4.598170275889644e-40,4.578178274690124e-40,4.558186273490603e-40,4.538194272291083e-40,4.518202271091563e-40,4.498210269892043e-40,4.478218268692523e-40,4.458226267493003e-40,4.438234266293482e-40,4.418242265093962e-40,4.398250263894442e-40,4.378258262694922e-40,4.358266261495402e-40,4.338274260295882e-40,4.318282259096361e-40,4.298290257896841e-40,4.278298256697321e-40,4.258306255497801e-40,4.238314254298281e-40,4.2183222530987606e-40,4.1983302518992405e-40,4.17833825069972e-40,4.1583462495001996e-40,4.1383542483006795e-40,4.1183622471011594e-40,4.098370245901639e-40,4.078378244702119e-40,4.0583862435025984e-40,4.038394242303078e-40,4.018402241103558e-40,3.998410239904038e-40,3.978418238704518e-40,3.958426237504998e-40,3.938434236305478e-40,3.918442235105957e-40,3.898450233906437e-40,3.878458232706917e-40,3.858466231507397e-40,3.838474230307877e-40,3.818482229108357e-40,3.798490227908836e-40,3.778498226709316e-40,3.758506225509796e-40,3.738514224310276e-40,3.718522223110756e-40,3.698530221911236e-40,3.6785382207117156e-40,3.658546219512195e-40,3.6385542183126746e-40,3.6185622171131546e-40,3.5985702159136345e-40,3.578578214714114e-40,3.558586213514594e-40,3.538594212315074e-40,3.518602211115554e-40,3.4986102099160334e-40,3.4786182087165133e-40,3.4586262075169932e-40,3.4386342063174728e-40,3.4186422051179527e-40,3.3986502039184326e-40,3.378658202718912e-40,3.358666201519392e-40,3.338674200319872e-40,3.3186821991203516e-40,3.2986901979208315e-40,3.2786981967213114e-40,3.258706195521791e-40,3.238714194322271e-40,3.218722193122751e-40,3.1987301919232308e-40,3.1787381907237103e-40,3.1587461895241902e-40,3.13875418832467e-40,3.1187621871251497e-40,3.0987701859256296e-40,3.0787781847261096e-40,3.058786183526589e-40,3.038794182327069e-40,3.018802181127549e-40,2.9988101799280285e-40,2.9788181787285084e-40,2.9588261775289884e-40,2.9388341763294683e-40,2.918842175129948e-40,2.8988501739304278e-40,2.8788581727309077e-40,2.8588661715313872e-40,2.838874170331867e-40,2.818882169132347e-40,2.7988901679328266e-40,2.7788981667333066e-40,2.7589061655337865e-40,2.738914164334266e-40,2.718922163134746e-40,2.698930161935226e-40,2.6789381607357054e-40,2.6589461595361854e-40,2.6389541583366653e-40,2.6189621571371452e-40,2.5989701559376248e-40,2.5789781547381047e-40,2.5589861535385846e-40,2.538994152339064e-40,2.519002151139544e-40,2.499010149940024e-40,2.4790181487405035e-40,2.4590261475409835e-40,2.4390341463414634e-40,2.419042145141943e-40,2.399050143942423e-40,2.379058142742903e-40,2.3590661415433828e-40,2.3390741403438623e-40,2.3190821391443422e-40,2.299090137944822e-40,2.2790981367453017e-40,2.2591061355457816e-40,2.2391141343462616e-40,2.219122133146741e-40,2.199130131947221e-40,2.179138130747701e-40,2.1591461295481805e-40,2.1391541283486604e-40,2.1191621271491403e-40,2.09917012594962e-40,2.0791781247501e-40,2.0591861235505797e-40,2.0391941223510597e-40,2.0192021211515392e-40,1.999210119952019e-40,1.979218118752499e-40,1.9592261175529786e-40,1.9392341163534585e-40,1.9192421151539385e-40,1.899250113954418e-40,1.879258112754898e-40,1.859266111555378e-40,1.8392741103558574e-40,1.8192821091563373e-40,1.7992901079568173e-40,1.779298106757297e-40,1.7593061055577767e-40,1.7393141043582567e-40,1.7193221031587364e-40,1.6993301019592163e-40,1.679338100759696e-40,1.6593460995601758e-40,1.6393540983606557e-40,1.6193620971611355e-40,1.5993700959616152e-40,1.5793780947620951e-40,1.5593860935625749e-40,1.5393940923630548e-40,1.5194020911635345e-40,1.4994100899640143e-40,1.4794180887644942e-40,1.459426087564974e-40,1.4394340863654537e-40,1.4194420851659336e-40,1.3994500839664133e-40,1.3794580827668933e-40,1.359466081567373e-40,1.3394740803678527e-40,1.3194820791683327e-40,1.2994900779688124e-40,1.2794980767692921e-40,1.259506075569772e-40,1.2395140743702518e-40,1.2195220731707317e-40,1.1995300719712115e-40,1.1795380707716912e-40,1.1595460695721711e-40,1.1395540683726509e-40,1.1195620671731308e-40,1.0995700659736105e-40,1.0795780647740903e-40,1.0595860635745702e-40,1.03959406237505e-40,1.0196020611755297e-40,9.996100599760096e-41,9.796180587764893e-41,9.596260575769693e-41,9.39634056377449e-41,9.196420551779287e-41,8.996500539784086e-41,8.796580527788884e-41,8.596660515793682e-41,8.396740503798481e-41,8.196820491803278e-41,7.996900479808076e-41,7.796980467812875e-41,7.597060455817673e-41,7.39714044382247e-41,7.197220431827269e-41,6.997300419832067e-41,6.797380407836865e-41,6.597460395841663e-41,6.397540383846461e-41,6.197620371851259e-41,5.997700359856058e-41,5.797780347860855e-41,5.597860335865653e-41,5.397940323870452e-41,5.19802031187525e-41,4.998100299880047e-41,4.798180287884846e-41,4.598260275889644e-41,4.3983402638944423e-41,4.19842025189924e-41,3.9985002399040385e-41,3.7985802279088363e-41,3.5986602159136346e-41,3.3987402039184325e-41,3.198820191923231e-41,2.9989001799280286e-41,2.798980167932827e-41,2.599060155937625e-41,2.399140143942423e-41,2.199220131947221e-41,1.999300119952019e-41,1.799380107956817e-41,1.5994600959616152e-41,1.3995400839664133e-41,1.1996200719712113e-41,9.997000599760096e-42,7.997800479808076e-42,5.998600359856057e-42,3.999400239904038e-42,2.000200119952019e-42,1.0e-45]}
},{}],58:[function(require,module,exports){
module.exports={"expected":[1.0e15,1.0001e15,1.0002e15,1.0003e15,1.0004001e15,1.0005002e15,1.00060034e15,1.0007004e15,1.0008006e15,1.00090086e15,1.0010011e15,1.0011014e15,1.0012017e15,1.001302e15,1.00140236e15,1.0015028e15,1.0016032e15,1.0017037e15,1.00180414e15,1.0019047e15,1.0020052e15,1.0021058e15,1.0022064e15,1.00230706e15,1.0024077e15,1.0025084e15,1.0026091e15,1.0027099e15,1.0028107e15,1.0029115e15,1.0030123e15,1.00311323e15,1.00321417e15,1.0033151e15,1.003416e15,1.0035171e15,1.0036181e15,1.00371916e15,1.0038203e15,1.0039214e15,1.00402256e15,1.00412376e15,1.0042249e15,1.00432616e15,1.0044274e15,1.00452876e15,1.0046301e15,1.0047315e15,1.0048329e15,1.0049343e15,1.0050358e15,1.0051373e15,1.00523884e15,1.0053403e15,1.0054419e15,1.0055435e15,1.0056452e15,1.00574685e15,1.0058486e15,1.0059503e15,1.0060521e15,1.00615394e15,1.00625574e15,1.0063576e15,1.0064595e15,1.0065614e15,1.00666336e15,1.00676537e15,1.0068674e15,1.00696944e15,1.0070715e15,1.00717366e15,1.0072758e15,1.00737794e15,1.00748014e15,1.0075824e15,1.0076847e15,1.0077869e15,1.00788924e15,1.00799165e15,1.008094e15,1.00819646e15,1.0082989e15,1.0084014e15,1.0085039e15,1.0086064e15,1.00870904e15,1.00881165e15,1.0089143e15,1.00901694e15,1.0091196e15,1.00922236e15,1.00932517e15,1.009428e15,1.0095308e15,1.00963367e15,1.00973654e15,1.0098395e15,1.00994243e15,1.01004545e15,1.0101484e15,1.0102515e15,1.01035455e15,1.0104576e15,1.0105608e15,1.010664e15,1.0107672e15,1.0108704e15,1.0109737e15,1.01107704e15,1.0111804e15,1.01128374e15,1.0113871e15,1.0114905e15,1.011594e15,1.01169746e15,1.011801e15,1.01190456e15,1.0120082e15,1.0121118e15,1.0122155e15,1.01231916e15,1.01242284e15,1.0125266e15,1.01263034e15,1.01273416e15,1.012838e15,1.01294186e15,1.0130458e15,1.0131498e15,1.0132537e15,1.01335774e15,1.01346176e15,1.01356584e15,1.0136699e15,1.013774e15,1.0138782e15,1.0139824e15,1.0140866e15,1.0141909e15,1.0142952e15,1.01439954e15,1.0145039e15,1.01460824e15,1.01471267e15,1.01481715e15,1.01492164e15,1.0150261e15,1.0151307e15,1.01523524e15,1.01533987e15,1.01544456e15,1.01554924e15,1.01565393e15,1.0157587e15,1.01586345e15,1.0159683e15,1.0160731e15,1.016178e15,1.0162829e15,1.0163878e15,1.0164928e15,1.01659775e15,1.01670285e15,1.0168079e15,1.016913e15,1.0170181e15,1.0171233e15,1.0172285e15,1.01733374e15,1.01743896e15,1.01754426e15,1.0176496e15,1.017755e15,1.0178604e15,1.01796584e15,1.01807126e15,1.01817676e15,1.0182823e15,1.0183879e15,1.01849345e15,1.0185991e15,1.0187047e15,1.0188104e15,1.01891616e15,1.0190219e15,1.0191277e15,1.0192335e15,1.01933935e15,1.01944525e15,1.0195512e15,1.0196572e15,1.01976314e15,1.0198692e15,1.0199752e15,1.02008124e15,1.0201874e15,1.0202936e15,1.02039974e15,1.020506e15,1.0206122e15,1.0207185e15,1.0208249e15,1.0209312e15,1.0210376e15,1.021144e15,1.0212504e15,1.0213569e15,1.0214634e15,1.02157e15,1.02167655e15,1.0217832e15,1.0218899e15,1.0219965e15,1.0221033e15,1.02221e15,1.02231684e15,1.0224236e15,1.02253045e15,1.02263735e15,1.02274425e15,1.0228512e15,1.0229582e15,1.02306524e15,1.0231723e15,1.0232794e15,1.0233865e15,1.02349366e15,1.0236009e15,1.0237081e15,1.0238153e15,1.0239226e15,1.0240299e15,1.0241373e15,1.0242447e15,1.0243521e15,1.02445956e15,1.02456707e15,1.02467464e15,1.02478215e15,1.0248897e15,1.0249974e15,1.025105e15,1.0252127e15,1.0253204e15,1.0254282e15,1.02553605e15,1.0256439e15,1.02575174e15,1.02585965e15,1.02596756e15,1.02607554e15,1.0261835e15,1.02629156e15,1.0263996e15,1.0265077e15,1.0266159e15,1.0267241e15,1.02683226e15,1.0269405e15,1.0270488e15,1.0271571e15,1.02726545e15,1.0273738e15,1.0274822e15,1.02759066e15,1.0276991e15,1.0278077e15,1.0279162e15,1.0280248e15,1.0281334e15,1.0282421e15,1.0283508e15,1.0284595e15,1.0285682e15,1.028677e15,1.02878586e15,1.0288947e15,1.0290036e15,1.02911255e15,1.02922154e15,1.0293305e15,1.0294396e15,1.0295486e15,1.02965774e15,1.02976686e15,1.02987605e15,1.02998523e15,1.0300944e15,1.03020374e15,1.03031306e15,1.0304224e15,1.0305318e15,1.0306412e15,1.0307507e15,1.0308601e15,1.03096965e15,1.03107924e15,1.0311888e15,1.0312984e15,1.0314081e15,1.0315177e15,1.0316275e15,1.03173725e15,1.0318471e15,1.0319569e15,1.0320668e15,1.0321767e15,1.03228667e15,1.03239666e15,1.0325066e15,1.03261664e15,1.0327267e15,1.0328368e15,1.032947e15,1.0330572e15,1.0331674e15,1.03327766e15,1.033388e15,1.0334983e15,1.0336087e15,1.0337191e15,1.0338295e15,1.03393996e15,1.0340504e15,1.034161e15,1.03427154e15,1.0343822e15,1.0344929e15,1.0346035e15,1.03471426e15,1.034825e15,1.0349358e15,1.03504665e15,1.03515745e15,1.0352683e15,1.0353793e15,1.03549024e15,1.03560124e15,1.0357123e15,1.0358234e15,1.0359345e15,1.03604563e15,1.03615683e15,1.036268e15,1.0363793e15,1.03649057e15,1.0366019e15,1.0367132e15,1.03682463e15,1.0369361e15,1.0370476e15,1.03715904e15,1.03727064e15,1.0373822e15,1.03749384e15,1.03760545e15,1.0377171e15,1.03782885e15,1.0379406e15,1.0380524e15,1.0381642e15,1.03827606e15,1.038388e15,1.03849994e15,1.03861194e15,1.03872395e15,1.03883595e15,1.0389481e15,1.03906016e15,1.0391723e15,1.0392845e15,1.0393967e15,1.039509e15,1.0396213e15,1.0397337e15,1.039846e15,1.0399584e15,1.0400709e15,1.04018337e15,1.0402959e15,1.0404084e15,1.040521e15,1.0406336e15,1.0407463e15,1.040859e15,1.04097176e15,1.0410845e15,1.0411973e15,1.0413102e15,1.0414231e15,1.041536e15,1.04164896e15,1.0417619e15,1.041875e15,1.04198806e15,1.04210114e15,1.0422143e15,1.0423275e15,1.0424407e15,1.042554e15,1.04266727e15,1.0427806e15,1.04289396e15,1.0430073e15,1.0431207e15,1.0432342e15,1.04334775e15,1.0434613e15,1.0435749e15,1.0436885e15,1.0438022e15,1.0439159e15,1.04402964e15,1.0441434e15,1.0442572e15,1.044371e15,1.0444849e15,1.0445988e15,1.0447128e15,1.04482676e15,1.04494085e15,1.0450549e15,1.045169e15,1.0452832e15,1.0453973e15,1.0455116e15,1.04562576e15,1.0457401e15,1.0458544e15,1.0459688e15,1.0460832e15,1.04619766e15,1.04631215e15,1.04642664e15,1.04654126e15,1.0466558e15,1.04677044e15,1.0468851e15,1.0469998e15,1.0471146e15,1.0472293e15,1.04734415e15,1.04745904e15,1.0475739e15,1.0476889e15,1.04780385e15,1.0479189e15,1.0480339e15,1.048149e15,1.04826415e15,1.04837924e15,1.04849446e15,1.0486097e15,1.048725e15,1.0488403e15,1.04895563e15,1.04907106e15,1.0491865e15,1.049302e15,1.0494175e15,1.04953304e15,1.04964853e15,1.04976416e15,1.04987986e15,1.04999555e15,1.05011125e15,1.050227e15,1.05034284e15,1.05045874e15,1.0505746e15,1.0506905e15,1.0508065e15,1.0509225e15,1.0510385e15,1.0511546e15,1.0512707e15,1.05138685e15,1.0515031e15,1.0516193e15,1.05173555e15,1.0518519e15,1.0519682e15,1.05208465e15,1.0522011e15,1.0523175e15,1.052434e15,1.0525505e15,1.05266716e15,1.0527837e15,1.0529004e15,1.0530171e15,1.0531338e15,1.0532506e15,1.05336744e15,1.05348434e15,1.0536012e15,1.0537181e15,1.05383505e15,1.0539521e15,1.0540691e15,1.05418623e15,1.05430334e15,1.0544205e15,1.05453775e15,1.054655e15,1.0547722e15,1.0548896e15,1.055007e15,1.0551243e15,1.0552417e15,1.0553592e15,1.05547674e15,1.0555943e15,1.0557119e15,1.0558295e15,1.05594724e15,1.05606495e15,1.0561827e15,1.0563005e15,1.05641834e15,1.0565361e15,1.0566541e15,1.056772e15,1.05689e15,1.057008e15,1.05712614e15,1.05724425e15,1.05736236e15,1.0574806e15,1.0575988e15,1.0577171e15,1.05783535e15,1.05795366e15,1.0580721e15,1.0581905e15,1.058309e15,1.0584275e15,1.058546e15,1.0586646e15,1.05878326e15,1.0589019e15,1.0590206e15,1.0591394e15,1.0592581e15,1.059377e15,1.0594958e15,1.05961474e15,1.05973365e15,1.05985264e15,1.0599717e15,1.06009074e15,1.06020986e15,1.06032904e15,1.0604482e15,1.0605674e15,1.0606867e15,1.060806e15,1.0609253e15,1.0610447e15,1.06116415e15,1.0612836e15,1.0614031e15,1.06152264e15,1.0616423e15,1.0617619e15,1.06188154e15,1.06200126e15,1.062121e15,1.0622408e15,1.0623606e15,1.0624805e15,1.0626004e15,1.06272033e15,1.0628404e15,1.0629604e15,1.0630805e15,1.0632006e15,1.06332076e15,1.0634409e15,1.06356114e15,1.0636815e15,1.0638017e15,1.0639221e15,1.0640425e15,1.064163e15,1.06428343e15,1.06440396e15,1.06452456e15,1.06464515e15,1.0647658e15,1.0648865e15,1.0650072e15,1.065128e15,1.0652488e15,1.06536966e15,1.0654905e15,1.06561145e15,1.06573245e15,1.06585345e15,1.0659745e15,1.06609564e15,1.0662168e15,1.0663379e15,1.0664592e15,1.06658044e15,1.0667017e15,1.0668231e15,1.0669445e15,1.0670659e15,1.0671874e15,1.0673089e15,1.06743044e15,1.06755204e15,1.06767364e15,1.0677953e15,1.06791704e15,1.06803885e15,1.06816065e15,1.06828245e15,1.0684044e15,1.0685263e15,1.06864826e15,1.0687703e15,1.06889234e15,1.0690145e15,1.06913655e15,1.06925875e15,1.06938096e15,1.0695032e15,1.0696256e15,1.0697479e15,1.0698703e15,1.0699927e15,1.0701152e15,1.07023773e15,1.0703603e15,1.0704829e15,1.0706055e15,1.07072817e15,1.0708509e15,1.07097365e15,1.07109646e15,1.07121934e15,1.0713423e15,1.0714652e15,1.07158817e15,1.0717112e15,1.07183425e15,1.0719573e15,1.0720805e15,1.0722037e15,1.0723269e15,1.0724502e15,1.0725735e15,1.0726969e15,1.0728203e15,1.07294377e15,1.07306725e15,1.0731908e15,1.07331434e15,1.07343796e15,1.0735616e15,1.0736853e15,1.0738091e15,1.0739329e15,1.0740567e15,1.0741806e15,1.07430446e15,1.0744285e15,1.0745525e15,1.0746765e15,1.0748006e15,1.0749247e15,1.0750489e15,1.0751731e15,1.07529734e15,1.0754217e15,1.07554605e15,1.0756704e15,1.0757949e15,1.0759194e15,1.07604386e15,1.0761684e15,1.076293e15,1.07641766e15,1.07654234e15,1.0766671e15,1.07679185e15,1.0769167e15,1.0770416e15,1.0771665e15,1.0772915e15,1.07741644e15,1.0775415e15,1.0776666e15,1.07779164e15,1.0779169e15,1.0780421e15,1.0781673e15,1.0782926e15,1.078418e15,1.0785434e15,1.0786688e15,1.0787943e15,1.0789198e15,1.0790454e15,1.079171e15,1.0792966e15,1.0794223e15,1.0795481e15,1.07967384e15,1.0797997e15,1.0799256e15,1.0800515e15,1.0801774e15,1.08030346e15,1.0804295e15,1.0805556e15,1.0806817e15,1.08080785e15,1.0809341e15,1.0810604e15,1.0811867e15,1.08131305e15,1.0814395e15,1.0815659e15,1.0816924e15,1.081819e15,1.08194555e15,1.0820722e15,1.0821988e15,1.0823255e15,1.0824523e15,1.08257905e15,1.08270596e15,1.08283286e15,1.08295976e15,1.0830867e15,1.0832138e15,1.0833409e15,1.083468e15,1.08359515e15,1.0837223e15,1.08384956e15,1.08397687e15,1.08410424e15,1.0842316e15,1.08435905e15,1.0844865e15,1.08461406e15,1.0847416e15,1.0848692e15,1.08499685e15,1.0851245e15,1.0852523e15,1.08538004e15,1.0855079e15,1.0856358e15,1.0857637e15,1.0858917e15,1.0860197e15,1.0861478e15,1.0862759e15,1.08640406e15,1.08653224e15,1.0866604e15,1.0867887e15,1.08691704e15,1.0870455e15,1.08717386e15,1.0873024e15,1.0874309e15,1.0875595e15,1.08768805e15,1.0878167e15,1.0879454e15,1.0880742e15,1.0882029e15,1.08833176e15,1.0884606e15,1.0885895e15,1.0887185e15,1.08884756e15,1.0889766e15,1.0891057e15,1.0892349e15,1.0893641e15,1.08949335e15,1.0896227e15,1.0897519e15,1.0898813e15,1.09001076e15,1.0901403e15,1.0902698e15,1.0903994e15,1.090529e15,1.0906586e15,1.09078835e15,1.09091814e15,1.0910479e15,1.0911777e15,1.09130764e15,1.09143756e15,1.09156755e15,1.0916976e15,1.09182766e15,1.0919578e15,1.092088e15,1.09221824e15,1.0923485e15,1.0924788e15,1.09260915e15,1.09273954e15,1.09287e15,1.09300046e15,1.09313105e15,1.09326165e15,1.0933923e15,1.093523e15,1.0936537e15,1.0937845e15,1.09391535e15,1.0940462e15,1.09417714e15,1.0943081e15,1.0944391e15,1.09457013e15,1.09470126e15,1.0948324e15,1.09496366e15,1.09509486e15,1.0952262e15,1.0953575e15,1.0954889e15,1.0956204e15,1.0957518e15,1.0958834e15,1.0960149e15,1.0961466e15,1.09627826e15,1.09641e15,1.0965418e15,1.0966736e15,1.09680546e15,1.0969374e15,1.09706933e15,1.09720134e15,1.09733334e15,1.0974655e15,1.0975976e15,1.0977298e15,1.0978621e15,1.0979944e15,1.0981268e15,1.0982592e15,1.0983916e15,1.09852405e15,1.09865666e15,1.0987892e15,1.0989218e15,1.0990545e15,1.0991872e15,1.09931996e15,1.09945284e15,1.0995857e15,1.09971866e15,1.0998516e15,1.0999846e15,1.1001177e15,1.1002508e15,1.1003839e15,1.1005171e15,1.1006504e15,1.1007837e15,1.1009171e15,1.1010505e15,1.1011839e15,1.10131746e15,1.101451e15,1.1015846e15,1.10171823e15,1.101852e15,1.10198566e15,1.1021194e15,1.1022533e15,1.1023872e15,1.1025211e15,1.10265514e15,1.10278916e15,1.10292324e15,1.1030574e15,1.1031916e15,1.1033258e15,1.1034601e15,1.1035944e15,1.10372875e15,1.10386323e15,1.10399765e15,1.1041322e15,1.1042668e15,1.10440145e15,1.10453614e15,1.1046708e15,1.10480564e15,1.10494047e15,1.1050753e15,1.1052102e15,1.1053451e15,1.1054802e15,1.10561525e15,1.1057504e15,1.10588556e15,1.1060208e15,1.1061561e15,1.1062914e15,1.1064268e15,1.10656215e15,1.1066976e15,1.10683314e15,1.1069687e15,1.1071043e15,1.10723995e15,1.1073757e15,1.1075115e15,1.1076473e15,1.1077832e15,1.1079191e15,1.10805506e15,1.1081911e15,1.1083271e15,1.1084632e15,1.1085994e15,1.1087356e15,1.1088719e15,1.1090082e15,1.1091446e15,1.109281e15,1.1094175e15,1.109554e15,1.10969057e15,1.1098271e15,1.1099638e15,1.11010053e15,1.1102373e15,1.11037414e15,1.11051104e15,1.11064794e15,1.1107849e15,1.11092195e15,1.11105905e15,1.11119615e15,1.1113333e15,1.1114705e15,1.1116078e15,1.1117451e15,1.11188254e15,1.1120199e15,1.1121574e15,1.112295e15,1.1124326e15,1.1125702e15,1.1127079e15,1.1128456e15,1.1129834e15,1.11312124e15,1.1132591e15,1.11339706e15,1.113535e15,1.1136731e15,1.1138112e15,1.11394936e15,1.11408754e15,1.1142258e15,1.1143641e15,1.1145025e15,1.11464085e15,1.1147793e15,1.1149178e15,1.1150564e15,1.115195e15,1.1153336e15,1.1154724e15,1.1156111e15,1.11574996e15,1.1158888e15,1.1160278e15,1.1161668e15,1.1163057e15,1.1164448e15,1.1165839e15,1.1167231e15,1.11686236e15,1.1170017e15,1.117141e15,1.1172804e15,1.1174198e15,1.11755935e15,1.1176989e15,1.1178385e15,1.1179781e15,1.11811776e15,1.11825755e15,1.11839734e15,1.11853726e15,1.1186772e15,1.1188171e15,1.11895716e15,1.1190972e15,1.11923734e15,1.1193775e15,1.1195177e15,1.119658e15,1.1197983e15,1.1199387e15,1.12007915e15,1.1202197e15,1.1203602e15,1.1205008e15,1.12064146e15,1.1207822e15,1.120923e15,1.1210638e15,1.1212046e15,1.1213455e15,1.1214865e15,1.1216275e15,1.1217686e15,1.12190975e15,1.1220509e15,1.12219214e15,1.1223335e15,1.1224748e15,1.1226162e15,1.1227577e15,1.1228991e15,1.1230407e15,1.12318227e15,1.1233239e15,1.1234657e15,1.1236075e15,1.1237493e15,1.12389114e15,1.1240331e15,1.1241751e15,1.12431714e15,1.1244592e15,1.12460135e15,1.12474355e15,1.12488576e15,1.1250281e15,1.1251705e15,1.1253129e15,1.1254554e15,1.1255979e15,1.1257405e15,1.1258831e15,1.1260258e15,1.1261685e15,1.1263113e15,1.1264542e15,1.126597e15,1.12674e15,1.126883e15,1.1270261e15,1.1271692e15,1.1273124e15,1.1274556e15,1.127599e15,1.1277423e15,1.1278857e15,1.1280291e15,1.1281726e15,1.1283162e15,1.1284598e15,1.1286035e15,1.1287472e15,1.128891e15,1.1290348e15,1.1291787e15,1.1293227e15,1.1294666e15,1.1296108e15,1.1297549e15,1.129899e15,1.1300432e15,1.1301875e15,1.1303318e15,1.1304762e15,1.1306206e15,1.1307652e15,1.1309097e15,1.1310543e15,1.131199e15,1.1313438e15,1.1314885e15,1.1316333e15,1.1317782e15,1.1319232e15,1.1320682e15,1.1322132e15,1.1323583e15,1.1325034e15,1.1326486e15,1.132794e15,1.1329394e15,1.1330847e15,1.1332302e15,1.1333756e15,1.1335212e15,1.1336668e15,1.1338124e15,1.1339582e15,1.134104e15,1.1342499e15,1.1343958e15,1.1345416e15,1.1346877e15,1.1348337e15,1.1349799e15,1.135126e15,1.1352722e15,1.1354185e15,1.1355649e15,1.1357114e15,1.1358578e15,1.1360042e15,1.1361508e15,1.1362975e15,1.1364442e15,1.1365909e15,1.1367377e15,1.1368846e15,1.1370314e15,1.1371785e15,1.1373255e15,1.1374726e15,1.1376197e15,1.1377669e15,1.1379141e15,1.1380614e15,1.1382089e15,1.1383563e15,1.1385038e15,1.1386513e15,1.1387989e15,1.1389465e15,1.1390942e15,1.139242e15,1.1393899e15,1.1395378e15,1.1396857e15,1.1398337e15,1.1399818e15,1.1401298e15,1.140278e15,1.1404263e15,1.1405745e15,1.1407229e15,1.1408714e15,1.1410198e15,1.1411682e15,1.1413168e15,1.1414655e15,1.1416143e15,1.141763e15,1.1419117e15,1.1420607e15,1.1422095e15,1.1423585e15,1.1425076e15,1.1426567e15,1.1428058e15,1.1429551e15,1.1431043e15,1.1432537e15,1.1434031e15,1.1435525e15,1.143702e15,1.1438517e15,1.1440013e15,1.144151e15,1.1443008e15,1.1444505e15,1.1446003e15,1.1447502e15,1.1449003e15,1.1450504e15,1.1452004e15,1.1453506e15,1.1455008e15,1.1456511e15,1.1458014e15,1.1459518e15,1.1461022e15,1.1462528e15,1.1464034e15,1.146554e15,1.1467047e15,1.1468555e15,1.1470063e15,1.1471572e15,1.147308e15,1.147459e15,1.1476102e15,1.1477612e15,1.1479124e15,1.1480635e15,1.148215e15,1.1483662e15,1.1485176e15,1.1486691e15,1.1488207e15,1.1489722e15,1.1491239e15,1.1492757e15,1.1494273e15,1.1495793e15,1.1497311e15,1.149883e15,1.1500351e15,1.1501871e15,1.1503392e15,1.1504914e15,1.1506438e15,1.150796e15,1.1509484e15,1.1511008e15,1.1512534e15,1.1514058e15,1.1515584e15,1.1517112e15,1.1518639e15,1.1520167e15,1.1521695e15,1.1523225e15,1.1524754e15,1.1526284e15,1.1527816e15,1.1529347e15,1.153088e15,1.1532413e15,1.1533945e15,1.153548e15,1.1537015e15,1.153855e15,1.1540086e15,1.1541623e15,1.154316e15,1.1544698e15,1.1546236e15,1.1547775e15,1.1549315e15,1.1550856e15,1.1552395e15,1.1553937e15,1.1555479e15,1.1557021e15,1.1558565e15,1.156011e15,1.1561653e15,1.1563198e15,1.1564744e15,1.156629e15,1.1567838e15,1.1569386e15,1.1570933e15,1.1572482e15,1.1574032e15,1.1575582e15,1.1577133e15,1.1578684e15,1.1580236e15,1.1581789e15,1.1583343e15,1.1584896e15,1.1586451e15,1.1588006e15,1.1589561e15,1.1591118e15,1.1592675e15,1.1594232e15,1.1595792e15,1.159735e15,1.159891e15,1.1600469e15,1.160203e15,1.1603591e15,1.1605153e15,1.1606716e15,1.1608279e15,1.1609843e15,1.1611408e15,1.1612973e15,1.1614539e15,1.1616105e15,1.1617673e15,1.1619241e15,1.1620808e15,1.1622377e15,1.1623948e15,1.1625518e15,1.1627089e15,1.162866e15,1.1630232e15,1.1631805e15,1.1633378e15,1.1634952e15,1.1636528e15,1.1638102e15,1.163968e15,1.1641255e15,1.1642832e15,1.164441e15,1.1645989e15,1.1647569e15,1.1649149e15,1.165073e15,1.165231e15,1.1653892e15,1.1655474e15,1.1657058e15,1.1658642e15,1.1660226e15,1.166181e15,1.1663396e15,1.1664982e15,1.166657e15,1.1668158e15,1.1669746e15,1.1671335e15,1.1672924e15,1.1674514e15,1.1676105e15,1.1677697e15,1.1679288e15,1.1680882e15,1.1682475e15,1.1684069e15,1.1685664e15,1.168726e15,1.1688856e15,1.1690451e15,1.169205e15,1.1693647e15,1.1695246e15,1.1696845e15,1.1698445e15,1.1700047e15,1.1701648e15,1.1703249e15,1.1704852e15,1.1706455e15,1.170806e15,1.1709663e15,1.1711269e15,1.1712875e15,1.1714482e15,1.171609e15,1.1717696e15,1.1719305e15,1.1720915e15,1.1722524e15,1.1724135e15,1.1725747e15,1.1727359e15,1.172897e15,1.1730584e15,1.1732198e15,1.1733813e15,1.1735428e15,1.1737044e15,1.173866e15,1.1740277e15,1.1741896e15,1.1743514e15,1.1745133e15,1.1746753e15,1.1748373e15,1.1749994e15,1.1751617e15,1.175324e15,1.1754862e15,1.1756486e15,1.175811e15,1.1759736e15,1.1761363e15,1.1762989e15,1.1764616e15,1.1766244e15,1.1767874e15,1.1769503e15,1.1771132e15,1.1772763e15,1.1774394e15,1.1776026e15,1.1777659e15,1.1779293e15,1.1780926e15,1.1782561e15,1.1784197e15,1.1785833e15,1.1787469e15,1.1789107e15,1.1790746e15,1.1792384e15,1.1794023e15,1.1795665e15,1.1797305e15,1.1798946e15,1.1800589e15,1.1802232e15,1.1803875e15,1.180552e15,1.1807164e15,1.1808811e15,1.1810457e15,1.1812104e15,1.1813752e15,1.18154e15,1.181705e15,1.1818699e15,1.182035e15,1.1822001e15,1.1823653e15,1.1825305e15,1.1826959e15,1.1828612e15,1.1830267e15,1.1831922e15,1.1833578e15,1.1835236e15,1.1836894e15,1.1838551e15,1.184021e15,1.184187e15,1.1843531e15,1.1845191e15,1.1846853e15,1.1848516e15,1.1850178e15,1.1851841e15,1.1853507e15,1.1855171e15,1.1856837e15,1.1858504e15,1.1860171e15,1.186184e15,1.1863508e15,1.1865177e15,1.1866847e15,1.1868518e15,1.187019e15,1.1871861e15,1.1873535e15,1.1875209e15,1.1876882e15,1.1878557e15,1.1880234e15,1.188191e15,1.1883588e15,1.1885266e15,1.1886943e15,1.1888624e15,1.1890303e15,1.1891983e15,1.1893665e15,1.1895348e15,1.189703e15,1.1898714e15,1.1900399e15,1.1902083e15,1.1903769e15,1.1905456e15,1.1907143e15,1.190883e15,1.1910519e15,1.1912209e15,1.1913898e15,1.191559e15,1.191728e15,1.1918973e15,1.1920666e15,1.192236e15,1.1924053e15,1.1925748e15,1.1927445e15,1.1929141e15,1.1930838e15,1.1932536e15,1.1934235e15,1.1935934e15,1.1937635e15,1.1939335e15,1.1941037e15,1.1942739e15,1.1944442e15,1.1946147e15,1.1947851e15,1.1949556e15,1.1951262e15,1.1952969e15,1.1954676e15,1.1956385e15,1.1958094e15,1.1959802e15,1.1961513e15,1.1963225e15,1.1964936e15,1.1966649e15,1.1968363e15,1.1970077e15,1.197179e15,1.1973507e15,1.1975222e15,1.197694e15,1.1978658e15,1.1980376e15,1.1982096e15,1.1983815e15,1.1985536e15,1.1987258e15,1.198898e15,1.1990702e15,1.1992426e15,1.1994151e15,1.1995876e15,1.1997602e15,1.1999328e15,1.2001055e15,1.2002784e15,1.2004513e15,1.2006243e15,1.2007973e15,1.2009704e15,1.2011436e15,1.2013168e15,1.2014901e15,1.2016635e15,1.2018371e15,1.2020106e15,1.2021843e15,1.202358e15,1.2025318e15,1.2027056e15,1.2028795e15,1.2030536e15,1.2032277e15,1.2034018e15,1.2035761e15,1.2037505e15,1.2039248e15,1.2040993e15,1.2042738e15,1.2044484e15,1.2046232e15,1.2047979e15,1.2049728e15,1.2051477e15,1.2053227e15,1.2054977e15,1.2056729e15,1.2058482e15,1.2060235e15,1.2061989e15,1.2063743e15,1.2065499e15,1.2067254e15,1.2069011e15,1.207077e15,1.2072528e15,1.2074287e15,1.2076047e15,1.2077808e15,1.2079569e15,1.2081331e15,1.2083095e15,1.2084858e15,1.2086623e15,1.2088388e15,1.2090154e15,1.2091921e15,1.2093688e15,1.2095457e15,1.2097226e15,1.2098997e15,1.2100767e15,1.2102539e15,1.2104312e15,1.2106085e15,1.2107858e15,1.2109633e15,1.2111409e15,1.2113185e15,1.2114962e15,1.211674e15,1.2118519e15,1.2120298e15,1.2122078e15,1.2123859e15,1.212564e15,1.2127423e15,1.2129206e15,1.213099e15,1.2132775e15,1.213456e15,1.2136347e15,1.2138135e15,1.2139922e15,1.2141711e15,1.21435e15,1.2145291e15,1.2147083e15,1.2148875e15,1.2150668e15,1.2152461e15,1.2154255e15,1.2156051e15,1.2157847e15,1.2159643e15,1.2161441e15,1.216324e15,1.2165039e15,1.2166838e15,1.216864e15,1.2170441e15,1.2172243e15,1.2174047e15,1.217585e15,1.2177655e15,1.217946e15,1.2181267e15,1.2183075e15,1.2184883e15,1.218669e15,1.2188501e15,1.219031e15,1.2192122e15,1.2193934e15,1.2195746e15,1.2197561e15,1.2199375e15,1.220119e15,1.2203006e15,1.2204823e15,1.220664e15,1.2208459e15,1.2210279e15,1.2212099e15,1.2213919e15,1.2215742e15,1.2217565e15,1.2219387e15,1.2221211e15,1.2223037e15,1.2224862e15,1.222669e15,1.2228517e15,1.2230345e15,1.2232174e15,1.2234004e15,1.2235834e15,1.2237666e15,1.2239498e15,1.2241332e15,1.2243167e15,1.2245001e15,1.2246836e15,1.2248674e15,1.225051e15,1.2252348e15,1.2254187e15,1.2256027e15,1.2257869e15,1.2259709e15,1.2261552e15,1.2263395e15,1.2265239e15,1.2267084e15,1.226893e15,1.2270775e15,1.2272623e15,1.2274472e15,1.2276321e15,1.227817e15,1.2280022e15,1.2281872e15,1.2283725e15,1.2285578e15,1.2287432e15,1.2289287e15,1.2291143e15,1.2292999e15,1.2294857e15,1.2296714e15,1.2298573e15,1.2300433e15,1.2302295e15,1.2304155e15,1.2306018e15,1.2307881e15,1.2309745e15,1.2311611e15,1.2313477e15,1.2315344e15,1.231721e15,1.2319079e15,1.2320949e15,1.2322818e15,1.2324689e15,1.2326562e15,1.2328434e15,1.2330308e15,1.2332181e15,1.2334056e15,1.2335933e15,1.2337809e15,1.2339687e15,1.2341566e15,1.2343446e15,1.2345326e15,1.2347207e15,1.2349089e15,1.2350972e15,1.2352856e15,1.235474e15,1.2356626e15,1.2358512e15,1.2360399e15,1.2362288e15,1.2364176e15,1.2366066e15,1.2367957e15,1.2369848e15,1.237174e15,1.2373634e15,1.2375528e15,1.2377423e15,1.237932e15,1.2381216e15,1.2383114e15,1.2385012e15,1.2386911e15,1.2388812e15,1.2390714e15,1.2392615e15,1.2394519e15,1.2396422e15,1.2398326e15,1.2400232e15,1.2402138e15,1.2404045e15,1.2405954e15,1.2407863e15,1.2409772e15,1.2411684e15,1.2413595e15,1.2415508e15,1.2417422e15,1.2419335e15,1.2421251e15,1.2423167e15,1.2425084e15,1.2427002e15,1.2428921e15,1.243084e15,1.2432761e15,1.2434683e15,1.2436605e15,1.2438529e15,1.2440452e15,1.2442377e15,1.2444303e15,1.244623e15,1.2448157e15,1.2450086e15,1.2452016e15,1.2453946e15,1.2455878e15,1.245781e15,1.2459743e15,1.2461677e15,1.2463611e15,1.2465548e15,1.2467485e15,1.2469422e15,1.247136e15,1.2473299e15,1.247524e15,1.247718e15,1.2479123e15,1.2481066e15,1.248301e15,1.2484955e15,1.2486901e15,1.2488848e15,1.2490796e15,1.2492743e15,1.2494693e15,1.2496644e15,1.2498595e15,1.2500547e15,1.25025e15,1.2504454e15,1.2506408e15,1.2508365e15,1.2510322e15,1.2512279e15,1.2514238e15,1.2516196e15,1.2518157e15,1.2520118e15,1.252208e15,1.2524044e15,1.2526008e15,1.2527973e15,1.2529939e15,1.2531905e15,1.2533874e15,1.2535843e15,1.2537812e15,1.2539782e15,1.2541754e15,1.2543727e15,1.25457e15,1.2547674e15,1.2549649e15,1.2551626e15,1.2553603e15,1.2555581e15,1.255756e15,1.2559539e15,1.256152e15,1.2563503e15,1.2565485e15,1.2567469e15,1.2569454e15,1.2571439e15,1.2573425e15,1.2575412e15,1.2577401e15,1.257939e15,1.258138e15,1.2583372e15,1.2585364e15,1.2587357e15,1.258935e15,1.2591346e15,1.2593342e15,1.2595339e15,1.2597336e15,1.2599335e15,1.2601335e15,1.2603336e15,1.2605337e15,1.2607341e15,1.2609343e15,1.2611349e15,1.2613354e15,1.261536e15,1.2617367e15,1.2619375e15,1.2621386e15,1.2623395e15,1.2625407e15,1.2627419e15,1.2629432e15,1.2631445e15,1.2633461e15,1.2635477e15,1.2637494e15,1.2639512e15,1.2641532e15,1.264355e15,1.2645572e15,1.2647594e15,1.2649617e15,1.2651641e15,1.2653665e15,1.265569e15,1.2657717e15,1.2659745e15,1.2661774e15,1.2663804e15,1.2665834e15,1.2667865e15,1.2669899e15,1.2671932e15,1.2673967e15,1.2676001e15,1.2678039e15,1.2680075e15,1.2682114e15,1.2684154e15,1.2686194e15,1.2688235e15,1.2690277e15,1.2692321e15,1.2694365e15,1.269641e15,1.2698457e15,1.2700504e15,1.2702552e15,1.2704602e15,1.2706651e15,1.2708704e15,1.2710756e15,1.2712809e15,1.2714863e15,1.2716918e15,1.2718974e15,1.2721031e15,1.272309e15,1.2725149e15,1.272721e15,1.2729271e15,1.2731333e15,1.2733397e15,1.2735461e15,1.2737525e15,1.2739592e15,1.274166e15,1.2743728e15,1.2745797e15,1.2747867e15,1.2749939e15,1.275201e15,1.2754084e15,1.2756159e15,1.2758234e15,1.276031e15,1.2762388e15,1.2764466e15,1.2766546e15,1.2768626e15,1.2770708e15,1.277279e15,1.2774873e15,1.2776957e15,1.2779043e15,1.278113e15,1.2783217e15,1.2785306e15,1.2787395e15,1.2789487e15,1.2791578e15,1.279367e15,1.2795764e15,1.2797859e15,1.2799954e15,1.2802052e15,1.280415e15,1.2806249e15,1.2808348e15,1.281045e15,1.281255e15,1.2814654e15,1.2816758e15,1.2818864e15,1.282097e15,1.2823077e15,1.2825184e15,1.2827294e15,1.2829404e15,1.2831515e15,1.2833628e15,1.2835742e15,1.2837856e15,1.2839971e15,1.2842088e15,1.2844206e15,1.2846324e15,1.2848443e15,1.2850565e15,1.2852686e15,1.2854809e15,1.2856934e15,1.2859058e15,1.2861184e15,1.286331e15,1.2865439e15,1.2867568e15,1.2869699e15,1.287183e15,1.2873962e15,1.2876096e15,1.287823e15,1.2880365e15,1.2882502e15,1.288464e15,1.2886778e15,1.2888918e15,1.2891058e15,1.28932e15,1.2895344e15,1.2897487e15,1.2899632e15,1.2901778e15,1.2903926e15,1.2906075e15,1.2908225e15,1.2910375e15,1.2912527e15,1.2914678e15,1.2916832e15,1.2918988e15,1.2921143e15,1.29233e15,1.2925458e15,1.2927617e15,1.2929778e15,1.2931938e15,1.2934101e15,1.2936264e15,1.2938429e15,1.2940594e15,1.2942762e15,1.294493e15,1.2947098e15,1.2949267e15,1.2951439e15,1.295361e15,1.2955785e15,1.2957959e15,1.2960135e15,1.296231e15,1.2964488e15,1.2966667e15,1.2968847e15,1.2971028e15,1.297321e15,1.2975393e15,1.2977577e15,1.2979763e15,1.298195e15,1.2984137e15,1.2986325e15,1.2988514e15,1.2990706e15,1.2992897e15,1.299509e15,1.2997285e15,1.2999481e15,1.3001677e15,1.3003874e15,1.3006072e15,1.3008272e15,1.3010473e15,1.3012676e15,1.3014878e15,1.3017082e15,1.3019289e15,1.3021495e15,1.3023702e15,1.3025911e15,1.302812e15,1.3030332e15,1.3032544e15,1.3034757e15,1.3036972e15,1.3039187e15,1.3041404e15,1.3043621e15,1.304584e15,1.304806e15,1.3050281e15,1.3052504e15,1.3054726e15,1.3056952e15,1.3059177e15,1.3061404e15,1.3063632e15,1.3065861e15,1.3068092e15,1.3070322e15,1.3072556e15,1.3074789e15,1.3077024e15,1.307926e15,1.3081496e15,1.3083735e15,1.3085975e15,1.3088215e15,1.3090456e15,1.3092699e15,1.3094943e15,1.3097189e15,1.3099436e15,1.3101682e15,1.310393e15,1.3106181e15,1.3108432e15,1.3110684e15,1.3112938e15,1.3115191e15,1.3117448e15,1.3119704e15,1.3121961e15,1.3124221e15,1.3126482e15,1.3128743e15,1.3131005e15,1.3133269e15,1.3135533e15,1.31378e15,1.3140067e15,1.3142336e15,1.3144605e15,1.3146876e15,1.3149148e15,1.3151422e15,1.3153696e15,1.3155972e15,1.3158248e15,1.3160526e15,1.3162805e15,1.3165085e15,1.3167367e15,1.3169649e15,1.3171933e15,1.3174218e15,1.3176505e15,1.3178792e15,1.318108e15,1.318337e15,1.3185661e15,1.3187953e15,1.3190247e15,1.3192541e15,1.3194837e15,1.3197134e15,1.3199432e15,1.3201731e15,1.3204031e15,1.3206333e15,1.3208636e15,1.3210941e15,1.3213247e15,1.3215553e15,1.3217861e15,1.322017e15,1.322248e15,1.3224791e15,1.3227103e15,1.3229417e15,1.3231733e15,1.3234049e15,1.3236367e15,1.3238685e15,1.3241006e15,1.3243326e15,1.3245648e15,1.3247973e15,1.3250298e15,1.3252624e15,1.3254951e15,1.325728e15,1.3259608e15,1.326194e15,1.3264271e15,1.3266605e15,1.326894e15,1.3271276e15,1.3273613e15,1.3275952e15,1.327829e15,1.3280631e15,1.3282974e15,1.3285316e15,1.3287661e15,1.3290007e15,1.3292355e15,1.3294702e15,1.3297052e15,1.3299402e15,1.3301755e15,1.3304108e15,1.3306462e15,1.3308818e15,1.3311175e15,1.3313534e15,1.3315894e15,1.3318255e15,1.3320616e15,1.3322979e15,1.3325344e15,1.3327709e15,1.3330077e15,1.3332446e15,1.3334814e15,1.3337185e15,1.3339558e15,1.3341931e15,1.3344305e15,1.334668e15,1.3349058e15,1.3351437e15,1.3353817e15,1.3356198e15,1.335858e15,1.3360963e15,1.3363348e15,1.3365734e15,1.3368122e15,1.3370511e15,1.33729e15,1.3375292e15,1.3377684e15,1.3380078e15,1.3382473e15,1.338487e15,1.3387267e15,1.3389665e15,1.3392066e15,1.3394468e15,1.339687e15,1.3399275e15,1.340168e15,1.3404087e15,1.3406495e15,1.3408904e15,1.3411315e15,1.3413726e15,1.341614e15,1.3418554e15,1.342097e15,1.3423387e15,1.3425806e15,1.3428225e15,1.3430646e15,1.3433069e15,1.3435493e15,1.3437917e15,1.3440343e15,1.3442771e15,1.3445199e15,1.344763e15,1.3450062e15,1.3452494e15,1.3454929e15,1.3457365e15,1.3459801e15,1.346224e15,1.3464678e15,1.346712e15,1.3469561e15,1.3472005e15,1.3474449e15,1.3476896e15,1.3479343e15,1.3481792e15,1.3484242e15,1.3486694e15,1.3489146e15,1.3491601e15,1.3494056e15,1.3496513e15,1.3498971e15,1.3501431e15,1.3503891e15,1.3506354e15,1.3508817e15,1.3511283e15,1.3513748e15,1.3516215e15,1.3518685e15,1.3521156e15,1.3523627e15,1.35261e15,1.3528574e15,1.353105e15,1.3533527e15,1.3536006e15,1.3538486e15,1.3540966e15,1.3543449e15,1.3545932e15,1.3548418e15,1.3550905e15,1.3553392e15,1.3555882e15,1.3558373e15,1.3560865e15,1.3563358e15,1.3565853e15,1.3568349e15,1.3570847e15,1.3573346e15,1.3575847e15,1.3578349e15,1.3580852e15,1.3583356e15,1.3585862e15,1.3588369e15,1.3590878e15,1.3593388e15,1.3595899e15,1.3598413e15,1.3600927e15,1.3603443e15,1.360596e15,1.3608478e15,1.3610998e15,1.3613519e15,1.3616042e15,1.3618566e15,1.3621091e15,1.3623617e15,1.3626146e15,1.3628676e15,1.3631207e15,1.3633739e15,1.3636273e15,1.3638808e15,1.3641345e15,1.3643884e15,1.3646424e15,1.3648964e15,1.3651507e15,1.365405e15,1.3656596e15,1.3659142e15,1.3661691e15,1.366424e15,1.3666791e15,1.3669343e15,1.3671897e15,1.3674452e15,1.3677009e15,1.3679567e15,1.3682127e15,1.3684688e15,1.368725e15,1.3689815e15,1.369238e15,1.3694946e15,1.3697515e15,1.3700084e15,1.3702656e15,1.3705229e15,1.3707802e15,1.3710377e15,1.3712954e15,1.3715532e15,1.3718112e15,1.3720693e15,1.3723275e15,1.372586e15,1.3728446e15,1.3731033e15,1.3733622e15,1.3736211e15,1.3738803e15,1.3741396e15,1.374399e15,1.3746586e15,1.3749184e15,1.3751783e15,1.3754383e15,1.3756984e15,1.3759588e15,1.3762193e15,1.37648e15,1.3767408e15,1.3770015e15,1.3772626e15,1.3775239e15,1.3777852e15,1.3780468e15,1.3783084e15,1.3785703e15,1.3788321e15,1.3790943e15,1.3793565e15,1.379619e15,1.3798815e15,1.3801443e15,1.380407e15,1.3806701e15,1.3809333e15,1.3811967e15,1.38146e15,1.3817236e15,1.3819875e15,1.3822513e15,1.3825155e15,1.3827796e15,1.383044e15,1.3833084e15,1.3835731e15,1.383838e15,1.384103e15,1.3843681e15,1.3846334e15,1.3848988e15,1.3851644e15,1.3854302e15,1.385696e15,1.385962e15,1.3862282e15,1.3864946e15,1.3867612e15,1.3870279e15,1.3872947e15,1.3875617e15,1.3878286e15,1.388096e15,1.3883635e15,1.388631e15,1.3888987e15,1.3891666e15,1.3894347e15,1.3897028e15,1.3899713e15,1.3902397e15,1.3905084e15,1.3907773e15,1.3910462e15,1.3913153e15,1.3915847e15,1.3918541e15,1.3921237e15,1.3923935e15,1.3926634e15,1.3929335e15,1.3932038e15,1.3934741e15,1.3937447e15,1.3940154e15,1.3942862e15,1.3945572e15,1.3948285e15,1.3950999e15,1.3953714e15,1.3956429e15,1.3959148e15,1.3961868e15,1.396459e15,1.3967311e15,1.3970036e15,1.3972762e15,1.3975491e15,1.397822e15,1.3980951e15,1.3983683e15,1.3986417e15,1.3989153e15,1.3991891e15,1.3994629e15,1.399737e15,1.4000112e15,1.4002855e15,1.4005601e15,1.4008349e15,1.4011097e15,1.4013847e15,1.4016599e15,1.4019352e15,1.4022107e15,1.4024864e15,1.4027622e15,1.4030383e15,1.4033144e15,1.4035907e15,1.4038672e15,1.4041439e15,1.4044208e15,1.4046976e15,1.4049748e15,1.4052521e15,1.4055295e15,1.4058072e15,1.406085e15,1.406363e15,1.4066411e15,1.4069193e15,1.4071979e15,1.4074765e15,1.4077553e15,1.4080343e15,1.4083133e15,1.4085926e15,1.4088721e15,1.4091518e15,1.4094315e15,1.4097115e15,1.4099916e15,1.4102718e15,1.4105524e15,1.410833e15,1.4111138e15,1.4113947e15,1.4116758e15,1.4119571e15,1.4122385e15,1.4125203e15,1.412802e15,1.413084e15,1.4133661e15,1.4136484e15,1.4139309e15,1.4142135e15,1.4144963e15,1.4147794e15,1.4150625e15,1.4153458e15,1.4156293e15,1.415913e15,1.4161969e15,1.4164809e15,1.416765e15,1.4170493e15,1.4173338e15,1.4176185e15,1.4179035e15,1.4181885e15,1.4184736e15,1.4187591e15,1.4190446e15,1.4193303e15,1.4196162e15,1.4199024e15,1.4201885e15,1.420475e15,1.4207615e15,1.4210483e15,1.4213353e15,1.4216224e15,1.4219096e15,1.4221971e15,1.4224847e15,1.4227725e15,1.4230605e15,1.4233487e15,1.423637e15,1.4239255e15,1.4242142e15,1.4245031e15,1.424792e15,1.4250813e15,1.4253707e15,1.4256602e15,1.42595e15,1.4262399e15,1.42653e15,1.4268202e15,1.4271107e15,1.4274014e15,1.4276921e15,1.4279831e15,1.4282743e15,1.4285656e15,1.4288571e15,1.4291488e15,1.4294407e15,1.4297327e15,1.4300249e15,1.4303174e15,1.43061e15,1.4309027e15,1.4311957e15,1.4314888e15,1.4317821e15,1.4320755e15,1.4323693e15,1.4326631e15,1.4329572e15,1.4332514e15,1.4335457e15,1.4338403e15,1.4341351e15,1.43443e15,1.4347251e15,1.4350205e15,1.4353159e15,1.4356116e15,1.4359074e15,1.4362035e15,1.4364997e15,1.4367961e15,1.4370926e15,1.4373895e15,1.4376863e15,1.4379835e15,1.4382808e15,1.4385784e15,1.438876e15,1.4391739e15,1.439472e15,1.4397702e15,1.4400687e15,1.4403672e15,1.440666e15,1.440965e15,1.4412642e15,1.4415636e15,1.4418631e15,1.4421628e15,1.4424628e15,1.4427629e15,1.4430631e15,1.4433636e15,1.4436643e15,1.4439652e15,1.4442662e15,1.4445674e15,1.4448689e15,1.4451705e15,1.4454723e15,1.4457743e15,1.4460764e15,1.4463788e15,1.4466814e15,1.4469841e15,1.4472871e15,1.4475901e15,1.4478935e15,1.4481971e15,1.4485007e15,1.4488047e15,1.4491087e15,1.449413e15,1.4497174e15,1.450022e15,1.450327e15,1.450632e15,1.4509373e15,1.4512426e15,1.4515482e15,1.4518541e15,1.4521601e15,1.4524663e15,1.4527727e15,1.4530792e15,1.453386e15,1.453693e15,1.4540002e15,1.4543076e15,1.4546151e15,1.4549229e15,1.4552309e15,1.455539e15,1.4558473e15,1.4561559e15,1.4564646e15,1.4567736e15,1.4570827e15,1.457392e15,1.4577016e15,1.4580113e15,1.4583211e15,1.4586313e15,1.4589416e15,1.4592522e15,1.4595629e15,1.4598737e15,1.4601849e15,1.4604961e15,1.4608076e15,1.4611194e15,1.4614313e15,1.4617434e15,1.4620556e15,1.4623682e15,1.4626809e15,1.4629938e15,1.4633069e15,1.4636203e15,1.4639337e15,1.4642474e15,1.4645613e15,1.4648755e15,1.4651898e15,1.4655043e15,1.465819e15,1.4661339e15,1.4664491e15,1.4667645e15,1.46708e15,1.4673957e15,1.4677117e15,1.4680277e15,1.4683441e15,1.4686607e15,1.4689775e15,1.4692944e15,1.4696115e15,1.469929e15,1.4702465e15,1.4705643e15,1.4708823e15,1.4712005e15,1.4715189e15,1.4718375e15,1.4721564e15,1.4724754e15,1.4727946e15,1.473114e15,1.4734338e15,1.4737536e15,1.4740737e15,1.474394e15,1.4747145e15,1.4750351e15,1.475356e15,1.4756771e15,1.4759984e15,1.47632e15,1.4766417e15,1.4769637e15,1.4772858e15,1.4776082e15,1.4779309e15,1.4782537e15,1.4785766e15,1.4788998e15,1.4792232e15,1.479547e15,1.4798708e15,1.4801948e15,1.4805191e15,1.4808437e15,1.4811683e15,1.4814933e15,1.4818185e15,1.4821438e15,1.4824693e15,1.482795e15,1.483121e15,1.4834473e15,1.4837738e15,1.4841004e15,1.4844273e15,1.4847542e15,1.4850816e15,1.4854091e15,1.4857368e15,1.4860649e15,1.4863929e15,1.4867213e15,1.4870499e15,1.4873787e15,1.4877078e15,1.4880369e15,1.4883664e15,1.488696e15,1.4890261e15,1.4893561e15,1.4896866e15,1.490017e15,1.4903479e15,1.4906789e15,1.4910101e15,1.4913415e15,1.4916733e15,1.492005e15,1.4923371e15,1.4926696e15,1.493002e15,1.4933349e15,1.4936679e15,1.494001e15,1.4943345e15,1.4946682e15,1.4950021e15,1.4953362e15,1.4956706e15,1.496005e15,1.4963399e15,1.4966749e15,1.4970102e15,1.4973456e15,1.4976814e15,1.4980172e15,1.4983533e15,1.4986898e15,1.4990264e15,1.4993632e15,1.4997003e15,1.5000375e15,1.500375e15,1.5007127e15,1.5010507e15,1.5013889e15,1.5017273e15,1.5020659e15,1.5024048e15,1.502744e15,1.5030833e15,1.5034228e15,1.5037625e15,1.5041026e15,1.5044429e15,1.5047834e15,1.505124e15,1.5054651e15,1.5058061e15,1.5061476e15,1.5064893e15,1.5068312e15,1.5071733e15,1.5075157e15,1.5078582e15,1.508201e15,1.508544e15,1.5088874e15,1.5092308e15,1.5095746e15,1.5099186e15,1.5102628e15,1.5106072e15,1.5109519e15,1.5112969e15,1.511642e15,1.5119874e15,1.512333e15,1.5126789e15,1.513025e15,1.5133715e15,1.513718e15,1.5140648e15,1.5144119e15,1.5147591e15,1.5151068e15,1.5154545e15,1.5158025e15,1.5161507e15,1.5164993e15,1.5168481e15,1.517197e15,1.5175463e15,1.5178957e15,1.5182454e15,1.5185953e15,1.5189455e15,1.519296e15,1.5196467e15,1.5199975e15,1.5203488e15,1.5207001e15,1.5210518e15,1.5214037e15,1.5217559e15,1.5221081e15,1.5224608e15,1.5228137e15,1.5231668e15,1.5235202e15,1.5238739e15,1.5242275e15,1.5245817e15,1.524936e15,1.5252907e15,1.5256455e15,1.5260005e15,1.526356e15,1.5267115e15,1.5270673e15,1.5274235e15,1.5277799e15,1.5281363e15,1.5284931e15,1.5288502e15,1.5292077e15,1.5295652e15,1.529923e15,1.530281e15,1.5306394e15,1.530998e15,1.5313569e15,1.5317159e15,1.5320754e15,1.532435e15,1.5327948e15,1.5331549e15,1.5335153e15,1.5338759e15,1.5342368e15,1.5345979e15,1.5349592e15,1.5353209e15,1.5356827e15,1.536045e15,1.5364074e15,1.5367699e15,1.5371328e15,1.537496e15,1.5378595e15,1.5382232e15,1.5385872e15,1.5389513e15,1.5393157e15,1.5396805e15,1.5400455e15,1.5404108e15,1.5407762e15,1.541142e15,1.541508e15,1.5418743e15,1.5422409e15,1.5426077e15,1.5429747e15,1.543342e15,1.5437096e15,1.5440775e15,1.5444457e15,1.5448141e15,1.5451827e15,1.5455515e15,1.5459207e15,1.5462902e15,1.5466599e15,1.5470299e15,1.5474001e15,1.5477705e15,1.5481414e15,1.5485125e15,1.5488837e15,1.5492554e15,1.549627e15,1.5499992e15,1.5503715e15,1.5507442e15,1.5511171e15,1.5514904e15,1.5518638e15,1.5522374e15,1.5526115e15,1.5529857e15,1.5533603e15,1.553735e15,1.5541102e15,1.5544854e15,1.5548611e15,1.555237e15,1.5556131e15,1.5559895e15,1.5563662e15,1.5567432e15,1.5571205e15,1.5574981e15,1.5578759e15,1.5582539e15,1.5586322e15,1.5590109e15,1.5593899e15,1.559769e15,1.5601485e15,1.5605282e15,1.5609082e15,1.5612885e15,1.561669e15,1.56205e15,1.5624311e15,1.5628124e15,1.5631941e15,1.5635761e15,1.5639584e15,1.5643409e15,1.5647237e15,1.5651068e15,1.5654901e15,1.5658738e15,1.5662578e15,1.566642e15,1.5670265e15,1.5674111e15,1.5677963e15,1.5681817e15,1.5685673e15,1.5689532e15,1.5693393e15,1.5697259e15,1.5701127e15,1.5704998e15,1.5708871e15,1.5712747e15,1.5716626e15,1.5720508e15,1.5724393e15,1.5728282e15,1.5732173e15,1.5736066e15,1.5739961e15,1.5743862e15,1.5747763e15,1.5751669e15,1.5755577e15,1.5759489e15,1.5763401e15,1.5767319e15,1.5771238e15,1.5775161e15,1.5779087e15,1.5783016e15,1.5786947e15,1.5790881e15,1.5794819e15,1.579876e15,1.5802703e15,1.5806649e15,1.5810597e15,1.581455e15,1.5818505e15,1.5822464e15,1.5826424e15,1.5830388e15,1.5834355e15,1.5838325e15,1.5842298e15,1.5846275e15,1.5850253e15,1.5854236e15,1.585822e15,1.5862208e15,1.58662e15,1.5870194e15,1.5874191e15,1.587819e15,1.5882193e15,1.58862e15,1.5890209e15,1.5894222e15,1.5898236e15,1.5902255e15,1.5906276e15,1.59103e15,1.5914328e15,1.5918358e15,1.5922391e15,1.5926429e15,1.5930467e15,1.593451e15,1.5938557e15,1.5942605e15,1.5946658e15,1.5950713e15,1.595477e15,1.5958831e15,1.5962897e15,1.5966964e15,1.5971035e15,1.5975108e15,1.5979184e15,1.5983264e15,1.5987349e15,1.5991434e15,1.5995524e15,1.5999616e15,1.6003711e15,1.600781e15,1.6011913e15,1.6016018e15,1.6020126e15,1.6024237e15,1.6028352e15,1.603247e15,1.603659e15,1.6040715e15,1.6044842e15,1.6048972e15,1.6053106e15,1.6057243e15,1.6061383e15,1.6065526e15,1.6069672e15,1.6073822e15,1.6077975e15,1.6082132e15,1.608629e15,1.6090453e15,1.609462e15,1.6098788e15,1.610296e15,1.6107137e15,1.6111315e15,1.6115497e15,1.6119682e15,1.6123871e15,1.6128063e15,1.6132258e15,1.6136455e15,1.6140658e15,1.6144863e15,1.614907e15,1.6153282e15,1.6157498e15,1.6161715e15,1.6165936e15,1.6170161e15,1.6174389e15,1.6178621e15,1.6182856e15,1.6187093e15,1.6191335e15,1.619558e15,1.6199827e15,1.620408e15,1.6208333e15,1.6212592e15,1.6216853e15,1.6221117e15,1.6225387e15,1.6229657e15,1.6233932e15,1.6238211e15,1.6242493e15,1.6246777e15,1.6251066e15,1.6255357e15,1.6259652e15,1.6263951e15,1.6268254e15,1.6272559e15,1.6276868e15,1.6281181e15,1.6285496e15,1.6289815e15,1.6294138e15,1.6298464e15,1.6302794e15,1.6307126e15,1.6311463e15,1.6315802e15,1.6320147e15,1.6324493e15,1.6328843e15,1.6333197e15,1.6337555e15,1.6341916e15,1.6346279e15,1.6350647e15,1.6355018e15,1.6359394e15,1.6363772e15,1.6368154e15,1.6372539e15,1.6376928e15,1.638132e15,1.6385715e15,1.6390115e15,1.6394518e15,1.6398925e15,1.6403335e15,1.6407748e15,1.6412165e15,1.6416586e15,1.642101e15,1.6425438e15,1.642987e15,1.6434306e15,1.6438744e15,1.6443186e15,1.6447632e15,1.6452082e15,1.6456535e15,1.6460992e15,1.6465452e15,1.6469916e15,1.6474383e15,1.6478854e15,1.648333e15,1.6487809e15,1.649229e15,1.6496776e15,1.6501266e15,1.6505759e15,1.6510256e15,1.6514756e15,1.651926e15,1.6523769e15,1.652828e15,1.6532796e15,1.6537315e15,1.6541837e15,1.6546364e15,1.6550894e15,1.6555428e15,1.6559966e15,1.6564506e15,1.6569051e15,1.6573601e15,1.6578154e15,1.6582709e15,1.658727e15,1.6591833e15,1.65964e15,1.6600972e15,1.6605547e15,1.6610126e15,1.6614709e15,1.6619295e15,1.6623886e15,1.662848e15,1.6633078e15,1.6637679e15,1.6642286e15,1.6646895e15,1.6651508e15,1.6656125e15,1.6660746e15,1.6665371e15,1.667e15,1.6674632e15,1.6679268e15,1.6683909e15,1.6688552e15,1.6693201e15,1.6697853e15,1.6702508e15,1.6707168e15,1.6711832e15,1.6716499e15,1.6721171e15,1.6725846e15,1.6730524e15,1.6735209e15,1.6739895e15,1.6744586e15,1.6749281e15,1.675398e15,1.6758683e15,1.676339e15,1.67681e15,1.6772815e15,1.6777534e15,1.6782257e15,1.6786983e15,1.6791714e15,1.679645e15,1.6801187e15,1.680593e15,1.6810678e15,1.6815428e15,1.6820183e15,1.6824942e15,1.6829705e15,1.6834472e15,1.6839242e15,1.6844018e15,1.6848797e15,1.6853579e15,1.6858367e15,1.6863158e15,1.6867954e15,1.6872754e15,1.6877557e15,1.6882365e15,1.6887177e15,1.6891992e15,1.6896812e15,1.6901637e15,1.6906465e15,1.6911297e15,1.6916134e15,1.6920975e15,1.692582e15,1.693067e15,1.6935523e15,1.6940379e15,1.6945242e15,1.6950107e15,1.6954977e15,1.6959851e15,1.696473e15,1.6969613e15,1.69745e15,1.6979391e15,1.6984286e15,1.6989186e15,1.6994089e15,1.6998997e15,1.700391e15,1.7008826e15,1.7013747e15,1.7018672e15,1.7023602e15,1.7028535e15,1.7033473e15,1.7038414e15,1.7043362e15,1.7048313e15,1.7053268e15,1.7058228e15,1.7063191e15,1.706816e15,1.7073133e15,1.707811e15,1.708309e15,1.7088075e15,1.7093065e15,1.709806e15,1.7103059e15,1.7108061e15,1.7113069e15,1.7118081e15,1.7123098e15,1.7128118e15,1.7133143e15,1.7138173e15,1.7143206e15,1.7148245e15,1.7153289e15,1.7158335e15,1.7163387e15,1.7168443e15,1.7173503e15,1.7178569e15,1.718364e15,1.7188713e15,1.7193792e15,1.7198876e15,1.7203963e15,1.7209055e15,1.7214151e15,1.7219253e15,1.7224358e15,1.7229468e15,1.7234583e15,1.7239703e15,1.7244827e15,1.7249955e15,1.7255089e15,1.7260227e15,1.7265369e15,1.7270516e15,1.7275667e15,1.7280824e15,1.7285984e15,1.7291149e15,1.7296319e15,1.7301495e15,1.7306674e15,1.7311858e15,1.7317046e15,1.7322239e15,1.7327438e15,1.733264e15,1.7337847e15,1.7343059e15,1.7348276e15,1.7353497e15,1.7358724e15,1.7363956e15,1.736919e15,1.7374431e15,1.7379676e15,1.7384926e15,1.739018e15,1.739544e15,1.7400704e15,1.7405972e15,1.7411246e15,1.7416525e15,1.7421809e15,1.7427097e15,1.7432389e15,1.7437688e15,1.744299e15,1.7448298e15,1.745361e15,1.7458927e15,1.7464248e15,1.7469575e15,1.7474908e15,1.7480244e15,1.7485586e15,1.7490932e15,1.7496283e15,1.750164e15,1.7507001e15,1.7512367e15,1.7517738e15,1.7523114e15,1.7528496e15,1.7533882e15,1.7539272e15,1.7544668e15,1.755007e15,1.7555475e15,1.7560885e15,1.7566302e15,1.7571722e15,1.7577148e15,1.758258e15,1.7588015e15,1.7593456e15,1.7598902e15,1.7604353e15,1.760981e15,1.761527e15,1.7620737e15,1.7626209e15,1.7631685e15,1.7637166e15,1.7642653e15,1.7648145e15,1.7653642e15,1.7659145e15,1.7664652e15,1.7670164e15,1.7675682e15,1.7681205e15,1.7686733e15,1.7692265e15,1.7697803e15,1.7703348e15,1.7708896e15,1.771445e15,1.772001e15,1.7725574e15,1.7731143e15,1.7736718e15,1.7742299e15,1.7747884e15,1.7753475e15,1.7759071e15,1.7764672e15,1.777028e15,1.7775891e15,1.7781508e15,1.778713e15,1.779276e15,1.7798393e15,1.7804031e15,1.7809675e15,1.7815324e15,1.7820979e15,1.7826639e15,1.7832304e15,1.7837976e15,1.7843652e15,1.7849334e15,1.785502e15,1.7860714e15,1.7866412e15,1.7872116e15,1.7877824e15,1.7883539e15,1.788926e15,1.7894984e15,1.7900715e15,1.7906451e15,1.7912193e15,1.7917942e15,1.7923694e15,1.7929452e15,1.7935217e15,1.7940987e15,1.7946762e15,1.7952543e15,1.7958329e15,1.7964122e15,1.7969919e15,1.7975723e15,1.7981532e15,1.7987346e15,1.7993167e15,1.7998992e15,1.8004824e15,1.8010661e15,1.8016503e15,1.8022353e15,1.8028206e15,1.8034067e15,1.8039932e15,1.8045803e15,1.805168e15,1.8057565e15,1.8063453e15,1.8069348e15,1.8075248e15,1.8081153e15,1.8087064e15,1.8092983e15,1.8098905e15,1.8104835e15,1.811077e15,1.811671e15,1.8122657e15,1.812861e15,1.8134568e15,1.8140533e15,1.8146504e15,1.8152479e15,1.8158461e15,1.816445e15,1.8170443e15,1.8176443e15,1.8182449e15,1.818846e15,1.8194479e15,1.8200502e15,1.8206531e15,1.8212567e15,1.821861e15,1.8224656e15,1.8230711e15,1.8236771e15,1.8242836e15,1.8248908e15,1.8254985e15,1.826107e15,1.826716e15,1.8273255e15,1.8279358e15,1.8285466e15,1.8291581e15,1.8297702e15,1.8303829e15,1.8309961e15,1.83161e15,1.8322246e15,1.8328397e15,1.8334555e15,1.834072e15,1.8346888e15,1.8353065e15,1.8359248e15,1.8365437e15,1.8371631e15,1.8377834e15,1.8384041e15,1.8390255e15,1.8396475e15,1.8402701e15,1.8408934e15,1.8415174e15,1.842142e15,1.8427671e15,1.843393e15,1.8440195e15,1.8446466e15,1.8452743e15,1.8459027e15,1.8465318e15,1.8471614e15,1.8477917e15,1.8484228e15,1.8490543e15,1.8496866e15,1.8503196e15,1.850953e15,1.8515872e15,1.8522222e15,1.8528576e15,1.8534938e15,1.8541307e15,1.8547682e15,1.8554063e15,1.8560452e15,1.8566846e15,1.8573247e15,1.8579655e15,1.858607e15,1.859249e15,1.8598918e15,1.8605353e15,1.8611794e15,1.8618243e15,1.8624696e15,1.8631157e15,1.8637627e15,1.86441e15,1.8650583e15,1.8657071e15,1.8663566e15,1.8670067e15,1.8676577e15,1.8683092e15,1.8689615e15,1.8696143e15,1.870268e15,1.8709222e15,1.8715771e15,1.8722327e15,1.8728892e15,1.8735462e15,1.8742039e15,1.8748623e15,1.8755215e15,1.8761813e15,1.8768418e15,1.877503e15,1.8781649e15,1.8788275e15,1.8794908e15,1.8801548e15,1.8808196e15,1.8814849e15,1.8821512e15,1.882818e15,1.8834854e15,1.8841537e15,1.8848228e15,1.8854924e15,1.8861628e15,1.8868339e15,1.8875058e15,1.8881784e15,1.8888516e15,1.8895255e15,1.8902002e15,1.8908757e15,1.8915518e15,1.8922288e15,1.8929064e15,1.8935846e15,1.8942638e15,1.8949436e15,1.8956241e15,1.8963054e15,1.8969873e15,1.8976701e15,1.8983535e15,1.8990378e15,1.8997227e15,1.9004084e15,1.9010948e15,1.9017821e15,1.90247e15,1.9031587e15,1.9038481e15,1.9045383e15,1.9052291e15,1.9059209e15,1.9066133e15,1.9073065e15,1.9080004e15,1.9086951e15,1.9093905e15,1.9100868e15,1.9107838e15,1.9114815e15,1.9121801e15,1.9128794e15,1.9135793e15,1.9142802e15,1.9149819e15,1.9156841e15,1.9163873e15,1.9170913e15,1.9177959e15,1.9185014e15,1.9192076e15,1.9199145e15,1.9206224e15,1.921331e15,1.9220404e15,1.9227506e15,1.9234614e15,1.9241731e15,1.9248857e15,1.925599e15,1.9263131e15,1.9270281e15,1.9277437e15,1.9284603e15,1.9291776e15,1.9298956e15,1.9306145e15,1.9313343e15,1.9320548e15,1.9327761e15,1.9334983e15,1.9342212e15,1.9349449e15,1.9356696e15,1.9363949e15,1.9371211e15,1.937848e15,1.9385759e15,1.9393046e15,1.940034e15,1.9407643e15,1.9414954e15,1.9422274e15,1.9429601e15,1.9436938e15,1.9444282e15,1.9451634e15,1.9458996e15,1.9466366e15,1.9473743e15,1.948113e15,1.9488524e15,1.9495928e15,1.9503339e15,1.9510759e15,1.9518186e15,1.9525625e15,1.9533068e15,1.9540523e15,1.9547987e15,1.9555456e15,1.9562936e15,1.9570425e15,1.9577921e15,1.9585427e15,1.9592942e15,1.9600463e15,1.9607995e15,1.9615536e15,1.9623084e15,1.9630642e15,1.9638208e15,1.9645783e15,1.9653366e15,1.9660959e15,1.966856e15,1.9676171e15,1.968379e15,1.9691417e15,1.9699054e15,1.97067e15,1.9714355e15,1.9722019e15,1.972969e15,1.9737372e15,1.9745063e15,1.9752761e15,1.976047e15,1.9768188e15,1.9775914e15,1.9783649e15,1.9791395e15,1.9799147e15,1.980691e15,1.9814683e15,1.9822463e15,1.9830255e15,1.9838054e15,1.9845861e15,1.9853681e15,1.9861509e15,1.9869344e15,1.9877189e15,1.9885045e15,1.9892909e15,1.9900783e15,1.9908666e15,1.9916558e15,1.992446e15,1.9932371e15,1.9940292e15,1.9948223e15,1.9956163e15,1.9964111e15,1.9972069e15,1.9980038e15,1.9988015e15,1.9996003e15,2.0004e15,2.0012006e15,2.0020022e15,2.0028047e15,2.0036083e15,2.0044128e15,2.0052182e15,2.0060246e15,2.006832e15,2.0076405e15,2.0084498e15,2.0092602e15,2.0100715e15,2.0108838e15,2.0116972e15,2.0125113e15,2.0133267e15,2.014143e15,2.0149602e15,2.0157785e15,2.0165977e15,2.017418e15,2.0182392e15,2.0190616e15,2.0198847e15,2.0207091e15,2.0215344e15,2.0223606e15,2.023188e15,2.0240164e15,2.0248456e15,2.025676e15,2.0265074e15,2.0273397e15,2.0281732e15,2.0290078e15,2.0298432e15,2.0306797e15,2.0315174e15,2.0323558e15,2.0331955e15,2.0340362e15,2.0348779e15,2.0357208e15,2.0365645e15,2.0374094e15,2.0382554e15,2.0391023e15,2.0399504e15,2.0407995e15,2.0416496e15,2.0425008e15,2.0433531e15,2.0442065e15,2.0450609e15,2.0459164e15,2.046773e15,2.0476306e15,2.0484893e15,2.0493491e15,2.05021e15,2.0510721e15,2.051935e15,2.0527992e15,2.0536645e15,2.0545308e15,2.0553982e15,2.0562669e15,2.0571365e15,2.0580073e15,2.0588791e15,2.059752e15,2.0606261e15,2.0615014e15,2.0623775e15,2.063255e15,2.0641336e15,2.0650132e15,2.065894e15,2.0667758e15,2.067659e15,2.0685431e15,2.0694284e15,2.0703149e15,2.0712025e15,2.0720911e15,2.0729811e15,2.0738722e15,2.0747643e15,2.0756577e15,2.0765521e15,2.0774478e15,2.0783446e15,2.0792427e15,2.0801416e15,2.081042e15,2.0819435e15,2.0828461e15,2.08375e15,2.084655e15,2.0855611e15,2.0864684e15,2.087377e15,2.0882867e15,2.0891976e15,2.0901099e15,2.0910231e15,2.0919376e15,2.0928533e15,2.0937701e15,2.0946883e15,2.0956077e15,2.0965282e15,2.09745e15,2.098373e15,2.0992971e15,2.1002225e15,2.1011491e15,2.102077e15,2.1030062e15,2.1039364e15,2.104868e15,2.1058009e15,2.1067347e15,2.1076701e15,2.1086067e15,2.1095445e15,2.1104834e15,2.1114238e15,2.1123653e15,2.1133082e15,2.1142523e15,2.1151976e15,2.1161442e15,2.117092e15,2.1180411e15,2.1189916e15,2.1199434e15,2.1208963e15,2.1218506e15,2.1228062e15,2.1237631e15,2.1247213e15,2.1256808e15,2.1266414e15,2.1276035e15,2.1285669e15,2.1295315e15,2.1304976e15,2.1314649e15,2.1324334e15,2.1334034e15,2.1343747e15,2.1353473e15,2.1363213e15,2.1372964e15,2.1382731e15,2.1392511e15,2.1402303e15,2.141211e15,2.1421929e15,2.1431762e15,2.144161e15,2.145147e15,2.1461344e15,2.1471231e15,2.1481134e15,2.1491049e15,2.1500978e15,2.1510921e15,2.1520876e15,2.1530847e15,2.1540831e15,2.1550829e15,2.1560842e15,2.1570868e15,2.1580907e15,2.1590962e15,2.160103e15,2.161111e15,2.1621208e15,2.1631318e15,2.1641442e15,2.1651581e15,2.1661735e15,2.1671902e15,2.1682085e15,2.1692281e15,2.170249e15,2.1712716e15,2.1722954e15,2.1733208e15,2.1743477e15,2.175376e15,2.1764058e15,2.177437e15,2.1784697e15,2.1795038e15,2.1805396e15,2.1815766e15,2.1826153e15,2.1836553e15,2.1846969e15,2.18574e15,2.1867846e15,2.1878306e15,2.1888781e15,2.1899273e15,2.1909777e15,2.1920298e15,2.1930836e15,2.1941385e15,2.1951952e15,2.1962535e15,2.1973132e15,2.1983744e15,2.1994373e15,2.2005015e15,2.2015674e15,2.2026349e15,2.2037038e15,2.2047744e15,2.2058465e15,2.2069201e15,2.2079953e15,2.2090723e15,2.2101506e15,2.2112305e15,2.212312e15,2.2133952e15,2.2144799e15,2.2155663e15,2.2166542e15,2.2177438e15,2.2188349e15,2.2199277e15,2.2210221e15,2.222118e15,2.2232156e15,2.2243148e15,2.2254157e15,2.2265182e15,2.2276224e15,2.228728e15,2.2298356e15,2.2309448e15,2.2320554e15,2.2331678e15,2.234282e15,2.2353976e15,2.2365151e15,2.2376342e15,2.2387549e15,2.2398774e15,2.2410016e15,2.2421274e15,2.243255e15,2.2443843e15,2.2455152e15,2.2466479e15,2.2477823e15,2.2489183e15,2.2500562e15,2.2511957e15,2.252337e15,2.25348e15,2.2546248e15,2.2557713e15,2.2569197e15,2.2580697e15,2.2592215e15,2.260375e15,2.2615303e15,2.2626873e15,2.263846e15,2.2650068e15,2.2661694e15,2.2673336e15,2.2684997e15,2.2696674e15,2.270837e15,2.2720084e15,2.2731818e15,2.2743567e15,2.2755338e15,2.2767125e15,2.277893e15,2.2790755e15,2.2802596e15,2.2814458e15,2.2826337e15,2.2838234e15,2.2850152e15,2.2862087e15,2.287404e15,2.2886012e15,2.2898006e15,2.2910016e15,2.2922045e15,2.2934092e15,2.294616e15,2.2958248e15,2.2970352e15,2.2982477e15,2.2994621e15,2.3006784e15,2.3018968e15,2.303117e15,2.304339e15,2.3055631e15,2.306789e15,2.3080172e15,2.3092471e15,2.310479e15,2.311713e15,2.312949e15,2.3141866e15,2.3154265e15,2.3166683e15,2.3179122e15,2.319158e15,2.320406e15,2.3216558e15,2.3229078e15,2.3241617e15,2.3254177e15,2.3266756e15,2.3279356e15,2.3291978e15,2.330462e15,2.331728e15,2.3329964e15,2.334267e15,2.3355393e15,2.3368136e15,2.3380903e15,2.339369e15,2.3406498e15,2.3419327e15,2.3432177e15,2.3445048e15,2.345794e15,2.3470855e15,2.3483789e15,2.3496746e15,2.3509725e15,2.3522725e15,2.3535744e15,2.3548788e15,2.3561852e15,2.3574939e15,2.3588046e15,2.3601178e15,2.361433e15,2.3627504e15,2.36407e15,2.3653918e15,2.3667157e15,2.368042e15,2.3693705e15,2.3707014e15,2.3720342e15,2.3733694e15,2.374707e15,2.3760468e15,2.3773887e15,2.378733e15,2.3800797e15,2.3814284e15,2.3827797e15,2.384133e15,2.385489e15,2.386847e15,2.3882074e15,2.38957e15,2.3909353e15,2.3923027e15,2.3936725e15,2.3950445e15,2.3964191e15,2.397796e15,2.3991752e15,2.4005568e15,2.4019409e15,2.403327e15,2.404716e15,2.4061073e15,2.4075007e15,2.4088968e15,2.4102954e15,2.4116963e15,2.4130995e15,2.4145055e15,2.4159137e15,2.4173244e15,2.4187377e15,2.4201534e15,2.4215715e15,2.4229924e15,2.4244156e15,2.4258413e15,2.4272694e15,2.4287e15,2.4301336e15,2.4315692e15,2.4330077e15,2.4344487e15,2.435892e15,2.437338e15,2.4387869e15,2.440238e15,2.4416919e15,2.4431484e15,2.4446073e15,2.446069e15,2.4475333e15,2.449e15,2.4504697e15,2.4519418e15,2.4534166e15,2.4548943e15,2.4563745e15,2.4578573e15,2.4593428e15,2.460831e15,2.4623222e15,2.4638158e15,2.4653123e15,2.4668112e15,2.4683131e15,2.4698177e15,2.471325e15,2.4728352e15,2.474348e15,2.4758637e15,2.4773822e15,2.4789037e15,2.4804276e15,2.4819545e15,2.4834843e15,2.4850168e15,2.4865523e15,2.4880904e15,2.4896315e15,2.4911755e15,2.4927222e15,2.494272e15,2.4958246e15,2.4973801e15,2.4989387e15,2.5005e15,2.502064e15,2.5036315e15,2.5052015e15,2.5067746e15,2.5083508e15,2.5099298e15,2.511512e15,2.5130968e15,2.514685e15,2.516276e15,2.51787e15,2.5194673e15,2.5210674e15,2.5226705e15,2.524277e15,2.5258864e15,2.5274986e15,2.5291143e15,2.530733e15,2.5323546e15,2.5339797e15,2.5356075e15,2.5372388e15,2.538873e15,2.5405105e15,2.5421511e15,2.5437948e15,2.545442e15,2.547092e15,2.5487455e15,2.550402e15,2.552062e15,2.553725e15,2.5553915e15,2.557061e15,2.558734e15,2.5604104e15,2.5620897e15,2.5637725e15,2.5654589e15,2.567148e15,2.568841e15,2.570537e15,2.5722369e15,2.5739395e15,2.575646e15,2.5773557e15,2.5790688e15,2.5807852e15,2.5825053e15,2.5842287e15,2.5859552e15,2.5876859e15,2.5894194e15,2.5911567e15,2.5928975e15,2.5946418e15,2.5963896e15,2.5981411e15,2.599896e15,2.6016544e15,2.6034164e15,2.6051822e15,2.6069512e15,2.6087242e15,2.6105007e15,2.6122807e15,2.6140645e15,2.615852e15,2.617643e15,2.6194377e15,2.6212363e15,2.6230383e15,2.624844e15,2.6266538e15,2.628467e15,2.6302841e15,2.6321052e15,2.6339298e15,2.6357583e15,2.6375904e15,2.6394268e15,2.6412666e15,2.6431105e15,2.6449582e15,2.6468098e15,2.6486653e15,2.6505247e15,2.652388e15,2.6542552e15,2.6561262e15,2.6580014e15,2.6598805e15,2.6617636e15,2.6636507e15,2.6655418e15,2.667437e15,2.669336e15,2.6712393e15,2.6731468e15,2.6750584e15,2.6769737e15,2.6788935e15,2.6808174e15,2.6827453e15,2.6846772e15,2.6866137e15,2.6885542e15,2.6904988e15,2.692448e15,2.694401e15,2.6963585e15,2.6983202e15,2.700286e15,2.7022563e15,2.704231e15,2.70621e15,2.7081932e15,2.7101807e15,2.712173e15,2.7141694e15,2.71617e15,2.7181755e15,2.7201853e15,2.7221994e15,2.7242183e15,2.7262412e15,2.728269e15,2.7303013e15,2.732338e15,2.7343794e15,2.7364254e15,2.738476e15,2.7405309e15,2.7425908e15,2.744655e15,2.7467242e15,2.748798e15,2.7508766e15,2.7529597e15,2.7550476e15,2.7571406e15,2.7592379e15,2.7613402e15,2.7634472e15,2.7655592e15,2.7676759e15,2.7697976e15,2.771924e15,2.7740555e15,2.776192e15,2.7783333e15,2.7804794e15,2.7826307e15,2.784787e15,2.7869482e15,2.7891144e15,2.7912858e15,2.7934623e15,2.795644e15,2.7978305e15,2.8000223e15,2.8022192e15,2.8044214e15,2.8066288e15,2.8088412e15,2.811059e15,2.8132822e15,2.8155105e15,2.8177442e15,2.8199832e15,2.8222273e15,2.824477e15,2.8267322e15,2.8289927e15,2.8312585e15,2.83353e15,2.8358066e15,2.8380892e15,2.840377e15,2.8426703e15,2.8449694e15,2.847274e15,2.849584e15,2.8519e15,2.8542213e15,2.8565484e15,2.858881e15,2.86122e15,2.8635642e15,2.865914e15,2.86827e15,2.8706319e15,2.8729992e15,2.8753727e15,2.877752e15,2.8801372e15,2.8825284e15,2.8849255e15,2.8873285e15,2.8897375e15,2.8921529e15,2.8945742e15,2.8970013e15,2.8994347e15,2.9018743e15,2.90432e15,2.906772e15,2.9092302e15,2.9116947e15,2.914165e15,2.9166422e15,2.9191255e15,2.9216153e15,2.9241112e15,2.9266138e15,2.9291226e15,2.931638e15,2.9341598e15,2.9366882e15,2.939223e15,2.9417646e15,2.9443126e15,2.9468675e15,2.9494287e15,2.9519968e15,2.9545716e15,2.9571532e15,2.9597414e15,2.9623364e15,2.9649386e15,2.9675473e15,2.9701632e15,2.9727858e15,2.9754154e15,2.978052e15,2.9806958e15,2.9833463e15,2.986004e15,2.988669e15,2.991341e15,2.99402e15,2.9967066e15,2.9994003e15,3.0021013e15,3.0048096e15,3.007525e15,3.010248e15,3.0129783e15,3.0157164e15,3.0184617e15,3.0212142e15,3.0239748e15,3.0267426e15,3.0295183e15,3.0323014e15,3.0350923e15,3.037891e15,3.0406975e15,3.0435115e15,3.0463333e15,3.0491634e15,3.052001e15,3.0548468e15,3.0577002e15,3.060562e15,3.0634319e15,3.0663095e15,3.0691957e15,3.0720897e15,3.074992e15,3.0779027e15,3.0808214e15,3.0837484e15,3.086684e15,3.089628e15,3.0925802e15,3.095541e15,3.0985105e15,3.1014882e15,3.1044748e15,3.10747e15,3.1104738e15,3.1134862e15,3.1165077e15,3.1195378e15,3.1225768e15,3.125625e15,3.1286815e15,3.1317473e15,3.1348223e15,3.1379063e15,3.1409992e15,3.1441015e15,3.147213e15,3.1503335e15,3.1534638e15,3.156603e15,3.1597516e15,3.16291e15,3.1660776e15,3.1692548e15,3.1724414e15,3.175638e15,3.178844e15,3.18206e15,3.1852855e15,3.188521e15,3.1917663e15,3.1950213e15,3.1982866e15,3.201562e15,3.2048474e15,3.2081427e15,3.2114485e15,3.2147642e15,3.2180907e15,3.221427e15,3.224774e15,3.2281315e15,3.2314993e15,3.2348778e15,3.2382668e15,3.2416666e15,3.245077e15,3.2484982e15,3.2519305e15,3.2553734e15,3.2588274e15,3.2622926e15,3.2657686e15,3.2692558e15,3.272754e15,3.276264e15,3.2797847e15,3.2833173e15,3.286861e15,3.2904163e15,3.293983e15,3.2975615e15,3.3011516e15,3.3047537e15,3.3083674e15,3.311993e15,3.3156305e15,3.31928e15,3.3229418e15,3.3266154e15,3.3303015e15,3.3339998e15,3.3377104e15,3.3414336e15,3.3451688e15,3.348917e15,3.3526778e15,3.3564512e15,3.3602375e15,3.3640364e15,3.3678484e15,3.3716733e15,3.3755114e15,3.3793624e15,3.3832268e15,3.3871044e15,3.3909953e15,3.3948997e15,3.3988178e15,3.4027493e15,3.4066945e15,3.4106534e15,3.4146262e15,3.418613e15,3.4226138e15,3.4266285e15,3.4306575e15,3.4347006e15,3.4387583e15,3.4428302e15,3.4469166e15,3.4510175e15,3.4551334e15,3.4592638e15,3.463409e15,3.4675692e15,3.4717447e15,3.475935e15,3.4801406e15,3.4843615e15,3.488598e15,3.4928497e15,3.497117e15,3.5014001e15,3.505699e15,3.5100137e15,3.5143444e15,3.5186911e15,3.523054e15,3.5274333e15,3.5318286e15,3.5362407e15,3.5406693e15,3.5451146e15,3.5495768e15,3.5540556e15,3.5585517e15,3.5630646e15,3.567595e15,3.5721426e15,3.5767076e15,3.58129e15,3.5858905e15,3.5905086e15,3.5951443e15,3.5997984e15,3.6044705e15,3.6091606e15,3.6138692e15,3.618596e15,3.623342e15,3.6281065e15,3.6328898e15,3.6376918e15,3.6425134e15,3.647354e15,3.6522136e15,3.657093e15,3.6619922e15,3.6669107e15,3.6718494e15,3.676808e15,3.681787e15,3.6867857e15,3.6918052e15,3.6968453e15,3.7019059e15,3.7069876e15,3.71209e15,3.7172137e15,3.7223588e15,3.727525e15,3.7327129e15,3.7379227e15,3.7431542e15,3.7484077e15,3.7536833e15,3.7589814e15,3.764302e15,3.7696453e15,3.7750113e15,3.7804004e15,3.7858123e15,3.791248e15,3.796707e15,3.8021896e15,3.807696e15,3.8132263e15,3.818781e15,3.82436e15,3.8299633e15,3.8355916e15,3.8412448e15,3.8469228e15,3.8526262e15,3.858355e15,3.8641093e15,3.8698898e15,3.8756958e15,3.8815284e15,3.8873875e15,3.8932727e15,3.8991853e15,3.9051244e15,3.9110912e15,3.917085e15,3.9231066e15,3.9291563e15,3.935234e15,3.9413398e15,3.947474e15,3.9536374e15,3.9598294e15,3.9660506e15,3.9723012e15,3.9785815e15,3.9848919e15,3.991232e15,3.9976028e15,4.0040042e15,4.0104362e15,4.0168996e15,4.023394e15,4.0299203e15,4.0364784e15,4.0430685e15,4.049691e15,4.0563464e15,4.0630342e15,4.0697556e15,4.0765105e15,4.083299e15,4.0901215e15,4.0969784e15,4.10387e15,4.1107964e15,4.1177578e15,4.1247548e15,4.1317878e15,4.1388565e15,4.145962e15,4.153104e15,4.160283e15,4.1674996e15,4.1747536e15,4.182046e15,4.1893763e15,4.1967454e15,4.2041537e15,4.2116012e15,4.2190886e15,4.226616e15,4.2341836e15,4.2417924e15,4.2494423e15,4.2571335e15,4.2648668e15,4.2726423e15,4.2804602e15,4.2883216e15,4.2962263e15,4.304175e15,4.312168e15,4.3202053e15,4.3282882e15,4.3364167e15,4.3445905e15,4.3528114e15,4.3610787e15,4.3693934e15,4.377756e15,4.3861666e15,4.394626e15,4.4031347e15,4.4116924e15,4.420301e15,4.4289595e15,4.4376695e15,4.446431e15,4.4552442e15,4.4641106e15,4.47303e15,4.4820027e15,4.4910301e15,4.500112e15,4.509249e15,4.5184425e15,4.527692e15,4.536999e15,4.546363e15,4.5557856e15,4.565267e15,4.5748075e15,4.5844084e15,4.5940704e15,4.603793e15,4.613578e15,4.6234255e15,4.6333366e15,4.643311e15,4.653351e15,4.663456e15,4.673627e15,4.6838653e15,4.6941705e15,4.7045445e15,4.714987e15,4.7255e15,4.7360835e15,4.746739e15,4.7574655e15,4.7682657e15,4.77914e15,4.7900884e15,4.801113e15,4.812214e15,4.823392e15,4.8346487e15,4.845984e15,4.8573997e15,4.868897e15,4.8804755e15,4.8921374e15,4.903883e15,4.915714e15,4.927631e15,4.939635e15,4.951727e15,4.9639085e15,4.97618e15,4.9885433e15,5.000999e15,5.013549e15,5.0261935e15,5.038934e15,5.051772e15,5.0647087e15,5.0777455e15,5.090883e15,5.1041236e15,5.1174675e15,5.130917e15,5.1444726e15,5.158137e15,5.1719105e15,5.1857945e15,5.1997913e15,5.2139024e15,5.2281284e15,5.2424714e15,5.2569337e15,5.271516e15,5.2862205e15,5.3010484e15,5.3160024e15,5.331083e15,5.346293e15,5.3616337e15,5.3771074e15,5.3927164e15,5.408461e15,5.424345e15,5.4403696e15,5.4565374e15,5.47285e15,5.4893097e15,5.505919e15,5.52268e15,5.5395946e15,5.5566655e15,5.573896e15,5.591287e15,5.6088424e15,5.6265634e15,5.644454e15,5.6625166e15,5.680753e15,5.699167e15,5.7177616e15,5.736539e15,5.755503e15,5.774656e15,5.794002e15,5.813543e15,5.833284e15,5.8532265e15,5.873376e15,5.893734e15,5.914305e15,5.935094e15,5.9561033e15,5.977337e15,5.9987996e15,6.0204956e15,6.042428e15,6.0646023e15,6.087022e15,6.109693e15,6.1326184e15,6.1558043e15,6.179255e15,6.202976e15,6.226972e15,6.2512487e15,6.2758116e15,6.3006666e15,6.325819e15,6.3512747e15,6.377041e15,6.403123e15,6.429528e15,6.456262e15,6.483332e15,6.5107463e15,6.5385106e15,6.5666335e15,6.595122e15,6.6239847e15,6.6532297e15,6.682866e15,6.7129013e15,6.7433456e15,6.7742076e15,6.8054976e15,6.8372245e15,6.8694e15,6.902034e15,6.9351374e15,6.968722e15,7.0027987e15,7.0373807e15,7.07248e15,7.10811e15,7.144284e15,7.1810157e15,7.2183196e15,7.2562114e15,7.294706e15,7.3338204e15,7.3735703e15,7.4139736e15,7.4550485e15,7.496814e15,7.539289e15,7.582494e15,7.626451e15,7.6711815e15,7.716708e15,7.763055e15,7.810247e15,7.858311e15,7.9072726e15,7.9571614e15,8.008006e15,8.0598385e15,8.1126907e15,8.166596e15,8.2215907e15,8.277711e15,8.334997e15,8.3934887e15,8.45323e15,8.514265e15,8.576641e15,8.6404085e15,8.70562e15,8.7723306e15,8.840599e15,8.9104857e15,8.9820576e15,9.055381e15,9.130531e15,9.207583e15,9.28662e15,9.367727e15,9.450997e15,9.536528e15,9.624425e15,9.714796e15,9.807763e15,9.90345e15,1.0001995e16,1.010354e16,1.0208243e16,1.031627e16,1.0427799e16,1.0543028e16,1.0662162e16,1.0785427e16,1.0913071e16,1.1045355e16,1.1182569e16,1.1325028e16,1.1473073e16,1.1627081e16,1.1787462e16,1.1954668e16,1.2129198e16,1.2311601e16,1.250249e16,1.2702542e16,1.2912515e16,1.3133257e16,1.3365722e16,1.3610985e16,1.3870265e16,1.414495e16,1.4436628e16,1.4747129e16,1.5078565e16,1.5433402e16,1.581453e16,1.6225365e16,1.6669976e16,1.7153263e16,1.7681177e16,1.826104e16,1.8901969e16,1.9615498e16,2.0416453e16,2.1324287e16,2.2365095e16,2.3574874e16,2.5004922e16,2.6731374e16,2.8873167e16,3.1628942e16,3.5362188e16,4.0832654e16,5.0009375e16,7.072305e16,1.0e19],"x":[1.0e-30,9.998000799700121e-31,9.99600159940024e-31,9.99400239910036e-31,9.992003198800481e-31,9.9900039985006e-31,9.98800479820072e-31,9.986005597900841e-31,9.98400639760096e-31,9.98200719730108e-31,9.980007997001201e-31,9.97800879670132e-31,9.97600959640144e-31,9.974010396101561e-31,9.97201119580168e-31,9.9700119955018e-31,9.96801279520192e-31,9.96601359490204e-31,9.96401439460216e-31,9.96201519430228e-31,9.9600159940024e-31,9.95801679370252e-31,9.956017593402639e-31,9.95401839310276e-31,9.95201919280288e-31,9.950019992502999e-31,9.94802079220312e-31,9.94602159190324e-31,9.944022391603359e-31,9.94202319130348e-31,9.9400239910036e-31,9.938024790703719e-31,9.93602559040384e-31,9.93402639010396e-31,9.932027189804079e-31,9.9300279895042e-31,9.92802878920432e-31,9.926029588904439e-31,9.92403038860456e-31,9.92203118830468e-31,9.920031988004799e-31,9.918032787704919e-31,9.91603358740504e-31,9.914034387105158e-31,9.912035186805279e-31,9.910035986505398e-31,9.908036786205518e-31,9.906037585905639e-31,9.904038385605758e-31,9.902039185305878e-31,9.900039985005999e-31,9.898040784706118e-31,9.896041584406238e-31,9.894042384106359e-31,9.892043183806478e-31,9.890043983506598e-31,9.888044783206719e-31,9.886045582906837e-31,9.884046382606958e-31,9.882047182307079e-31,9.880047982007197e-31,9.878048781707318e-31,9.876049581407439e-31,9.874050381107557e-31,9.872051180807678e-31,9.870051980507798e-31,9.868052780207917e-31,9.866053579908038e-31,9.864054379608158e-31,9.862055179308277e-31,9.860055979008398e-31,9.858056778708518e-31,9.856057578408637e-31,9.854058378108758e-31,9.852059177808876e-31,9.850059977508997e-31,9.848060777209118e-31,9.846061576909236e-31,9.844062376609357e-31,9.842063176309477e-31,9.840063976009596e-31,9.838064775709717e-31,9.836065575409837e-31,9.834066375109956e-31,9.832067174810077e-31,9.830067974510197e-31,9.828068774210316e-31,9.826069573910437e-31,9.824070373610557e-31,9.822071173310676e-31,9.820071973010797e-31,9.818072772710917e-31,9.816073572411036e-31,9.814074372111156e-31,9.812075171811277e-31,9.810075971511396e-31,9.808076771211516e-31,9.806077570911637e-31,9.804078370611756e-31,9.802079170311876e-31,9.800079970011997e-31,9.798080769712116e-31,9.796081569412236e-31,9.794082369112355e-31,9.792083168812476e-31,9.790083968512596e-31,9.788084768212715e-31,9.786085567912835e-31,9.784086367612956e-31,9.782087167313075e-31,9.780087967013195e-31,9.778088766713316e-31,9.776089566413435e-31,9.774090366113555e-31,9.772091165813676e-31,9.770091965513795e-31,9.768092765213915e-31,9.766093564914036e-31,9.764094364614155e-31,9.762095164314275e-31,9.760095964014396e-31,9.758096763714515e-31,9.756097563414635e-31,9.754098363114756e-31,9.752099162814874e-31,9.750099962514995e-31,9.748100762215116e-31,9.746101561915234e-31,9.744102361615355e-31,9.742103161315475e-31,9.740103961015594e-31,9.738104760715715e-31,9.736105560415834e-31,9.734106360115954e-31,9.732107159816075e-31,9.730107959516194e-31,9.728108759216314e-31,9.726109558916435e-31,9.724110358616553e-31,9.722111158316674e-31,9.720111958016795e-31,9.718112757716913e-31,9.716113557417034e-31,9.714114357117154e-31,9.712115156817273e-31,9.710115956517394e-31,9.708116756217514e-31,9.706117555917633e-31,9.704118355617754e-31,9.702119155317874e-31,9.700119955017993e-31,9.698120754718114e-31,9.696121554418234e-31,9.694122354118353e-31,9.692123153818474e-31,9.690123953518594e-31,9.688124753218713e-31,9.686125552918833e-31,9.684126352618954e-31,9.682127152319073e-31,9.680127952019193e-31,9.678128751719314e-31,9.676129551419433e-31,9.674130351119553e-31,9.672131150819672e-31,9.670131950519793e-31,9.668132750219913e-31,9.666133549920032e-31,9.664134349620153e-31,9.662135149320273e-31,9.660135949020392e-31,9.658136748720513e-31,9.656137548420633e-31,9.654138348120752e-31,9.652139147820872e-31,9.650139947520993e-31,9.648140747221112e-31,9.646141546921232e-31,9.644142346621353e-31,9.642143146321472e-31,9.640143946021592e-31,9.638144745721713e-31,9.636145545421832e-31,9.634146345121952e-31,9.632147144822073e-31,9.630147944522192e-31,9.628148744222312e-31,9.626149543922433e-31,9.624150343622551e-31,9.622151143322672e-31,9.620151943022793e-31,9.618152742722911e-31,9.616153542423032e-31,9.61415434212315e-31,9.612155141823271e-31,9.610155941523392e-31,9.60815674122351e-31,9.606157540923631e-31,9.604158340623752e-31,9.60215914032387e-31,9.600159940023991e-31,9.598160739724112e-31,9.59616153942423e-31,9.594162339124351e-31,9.592163138824472e-31,9.59016393852459e-31,9.588164738224711e-31,9.586165537924831e-31,9.58416633762495e-31,9.58216713732507e-31,9.580167937025191e-31,9.57816873672531e-31,9.57616953642543e-31,9.574170336125551e-31,9.57217113582567e-31,9.57017193552579e-31,9.568172735225911e-31,9.56617353492603e-31,9.56417433462615e-31,9.562175134326271e-31,9.56017593402639e-31,9.55817673372651e-31,9.55617753342663e-31,9.55417833312675e-31,9.55217913282687e-31,9.55017993252699e-31,9.54818073222711e-31,9.54618153192723e-31,9.54418233162735e-31,9.54218313132747e-31,9.54018393102759e-31,9.538184730727709e-31,9.53618553042783e-31,9.53418633012795e-31,9.532187129828069e-31,9.53018792952819e-31,9.52818872922831e-31,9.526189528928429e-31,9.52419032862855e-31,9.52219112832867e-31,9.520191928028789e-31,9.51819272772891e-31,9.51619352742903e-31,9.514194327129149e-31,9.51219512682927e-31,9.51019592652939e-31,9.508196726229509e-31,9.50619752592963e-31,9.50419832562975e-31,9.502199125329869e-31,9.500199925029989e-31,9.498200724730108e-31,9.496201524430228e-31,9.494202324130349e-31,9.492203123830468e-31,9.490203923530588e-31,9.488204723230709e-31,9.486205522930828e-31,9.484206322630948e-31,9.482207122331069e-31,9.480207922031188e-31,9.478208721731308e-31,9.476209521431429e-31,9.474210321131548e-31,9.472211120831668e-31,9.470211920531789e-31,9.468212720231907e-31,9.466213519932028e-31,9.464214319632149e-31,9.462215119332267e-31,9.460215919032388e-31,9.458216718732509e-31,9.456217518432627e-31,9.454218318132748e-31,9.452219117832868e-31,9.450219917532987e-31,9.448220717233108e-31,9.446221516933228e-31,9.444222316633347e-31,9.442223116333468e-31,9.440223916033587e-31,9.438224715733707e-31,9.436225515433828e-31,9.434226315133946e-31,9.432227114834067e-31,9.430227914534188e-31,9.428228714234306e-31,9.426229513934427e-31,9.424230313634547e-31,9.422231113334666e-31,9.420231913034787e-31,9.418232712734907e-31,9.416233512435026e-31,9.414234312135147e-31,9.412235111835267e-31,9.410235911535386e-31,9.408236711235507e-31,9.406237510935627e-31,9.404238310635746e-31,9.402239110335867e-31,9.400239910035987e-31,9.398240709736106e-31,9.396241509436226e-31,9.394242309136347e-31,9.392243108836466e-31,9.390243908536586e-31,9.388244708236707e-31,9.386245507936826e-31,9.384246307636946e-31,9.382247107337065e-31,9.380247907037186e-31,9.378248706737306e-31,9.376249506437425e-31,9.374250306137546e-31,9.372251105837666e-31,9.370251905537785e-31,9.368252705237905e-31,9.366253504938026e-31,9.364254304638145e-31,9.362255104338265e-31,9.360255904038386e-31,9.358256703738505e-31,9.356257503438625e-31,9.354258303138746e-31,9.352259102838865e-31,9.350259902538985e-31,9.348260702239106e-31,9.346261501939225e-31,9.344262301639345e-31,9.342263101339466e-31,9.340263901039585e-31,9.338264700739705e-31,9.336265500439826e-31,9.334266300139944e-31,9.332267099840065e-31,9.330267899540186e-31,9.328268699240304e-31,9.326269498940425e-31,9.324270298640544e-31,9.322271098340664e-31,9.320271898040785e-31,9.318272697740904e-31,9.316273497441024e-31,9.314274297141145e-31,9.312275096841264e-31,9.310275896541384e-31,9.308276696241505e-31,9.306277495941623e-31,9.304278295641744e-31,9.302279095341865e-31,9.300279895041983e-31,9.298280694742104e-31,9.296281494442224e-31,9.294282294142343e-31,9.292283093842464e-31,9.290283893542584e-31,9.288284693242703e-31,9.286285492942824e-31,9.284286292642944e-31,9.282287092343063e-31,9.280287892043184e-31,9.278288691743304e-31,9.276289491443423e-31,9.274290291143544e-31,9.272291090843664e-31,9.270291890543783e-31,9.268292690243904e-31,9.266293489944022e-31,9.264294289644143e-31,9.262295089344263e-31,9.260295889044382e-31,9.258296688744503e-31,9.256297488444623e-31,9.254298288144742e-31,9.252299087844863e-31,9.250299887544983e-31,9.248300687245102e-31,9.246301486945223e-31,9.244302286645343e-31,9.242303086345462e-31,9.240303886045583e-31,9.238304685745703e-31,9.236305485445822e-31,9.234306285145942e-31,9.232307084846063e-31,9.230307884546182e-31,9.228308684246302e-31,9.226309483946423e-31,9.224310283646542e-31,9.222311083346662e-31,9.220311883046783e-31,9.218312682746902e-31,9.216313482447022e-31,9.214314282147143e-31,9.212315081847262e-31,9.210315881547382e-31,9.208316681247501e-31,9.206317480947621e-31,9.204318280647742e-31,9.20231908034786e-31,9.200319880047981e-31,9.198320679748102e-31,9.19632147944822e-31,9.194322279148341e-31,9.192323078848462e-31,9.19032387854858e-31,9.188324678248701e-31,9.186325477948822e-31,9.18432627764894e-31,9.182327077349061e-31,9.180327877049182e-31,9.1783286767493e-31,9.176329476449421e-31,9.174330276149542e-31,9.17233107584966e-31,9.170331875549781e-31,9.168332675249902e-31,9.16633347495002e-31,9.16433427465014e-31,9.162335074350261e-31,9.16033587405038e-31,9.1583366737505e-31,9.156337473450621e-31,9.15433827315074e-31,9.15233907285086e-31,9.15033987255098e-31,9.1483406722511e-31,9.14634147195122e-31,9.14434227165134e-31,9.14234307135146e-31,9.14034387105158e-31,9.1383446707517e-31,9.13634547045182e-31,9.13434627015194e-31,9.13234706985206e-31,9.13034786955218e-31,9.1283486692523e-31,9.12634946895242e-31,9.12435026865254e-31,9.12235106835266e-31,9.120351868052779e-31,9.1183526677529e-31,9.11635346745302e-31,9.114354267153139e-31,9.11235506685326e-31,9.11035586655338e-31,9.108356666253499e-31,9.10635746595362e-31,9.10435826565374e-31,9.102359065353859e-31,9.10035986505398e-31,9.0983606647541e-31,9.096361464454219e-31,9.09436226415434e-31,9.092363063854458e-31,9.090363863554579e-31,9.0883646632547e-31,9.086365462954818e-31,9.084366262654939e-31,9.08236706235506e-31,9.080367862055178e-31,9.078368661755298e-31,9.076369461455419e-31,9.074370261155538e-31,9.072371060855658e-31,9.070371860555779e-31,9.068372660255898e-31,9.066373459956018e-31,9.064374259656139e-31,9.062375059356258e-31,9.060375859056378e-31,9.058376658756499e-31,9.056377458456618e-31,9.054378258156738e-31,9.052379057856859e-31,9.050379857556978e-31,9.048380657257098e-31,9.046381456957219e-31,9.044382256657337e-31,9.042383056357458e-31,9.040383856057579e-31,9.038384655757697e-31,9.036385455457818e-31,9.034386255157938e-31,9.032387054858057e-31,9.030387854558178e-31,9.028388654258297e-31,9.026389453958417e-31,9.024390253658538e-31,9.022391053358657e-31,9.020391853058777e-31,9.018392652758898e-31,9.016393452459016e-31,9.014394252159137e-31,9.012395051859258e-31,9.010395851559376e-31,9.008396651259497e-31,9.006397450959617e-31,9.004398250659736e-31,9.002399050359857e-31,9.000399850059977e-31,8.998400649760096e-31,8.996401449460217e-31,8.994402249160337e-31,8.992403048860456e-31,8.990403848560577e-31,8.988404648260697e-31,8.986405447960816e-31,8.984406247660937e-31,8.982407047361057e-31,8.980407847061176e-31,8.978408646761296e-31,8.976409446461417e-31,8.974410246161536e-31,8.972411045861656e-31,8.970411845561775e-31,8.968412645261896e-31,8.966413444962016e-31,8.964414244662135e-31,8.962415044362256e-31,8.960415844062376e-31,8.958416643762495e-31,8.956417443462616e-31,8.954418243162736e-31,8.952419042862855e-31,8.950419842562976e-31,8.948420642263096e-31,8.946421441963215e-31,8.944422241663335e-31,8.942423041363456e-31,8.940423841063575e-31,8.938424640763695e-31,8.936425440463816e-31,8.934426240163935e-31,8.932427039864055e-31,8.930427839564176e-31,8.928428639264295e-31,8.926429438964415e-31,8.924430238664536e-31,8.922431038364655e-31,8.920431838064775e-31,8.918432637764896e-31,8.916433437465014e-31,8.914434237165135e-31,8.912435036865254e-31,8.910435836565374e-31,8.908436636265495e-31,8.906437435965614e-31,8.904438235665734e-31,8.902439035365855e-31,8.900439835065974e-31,8.898440634766094e-31,8.896441434466215e-31,8.894442234166334e-31,8.892443033866454e-31,8.890443833566575e-31,8.888444633266693e-31,8.886445432966814e-31,8.884446232666935e-31,8.882447032367053e-31,8.880447832067174e-31,8.878448631767295e-31,8.876449431467413e-31,8.874450231167534e-31,8.872451030867654e-31,8.870451830567773e-31,8.868452630267894e-31,8.866453429968014e-31,8.864454229668133e-31,8.862455029368254e-31,8.860455829068374e-31,8.858456628768493e-31,8.856457428468614e-31,8.854458228168732e-31,8.852459027868853e-31,8.850459827568974e-31,8.848460627269092e-31,8.846461426969213e-31,8.844462226669333e-31,8.842463026369452e-31,8.840463826069573e-31,8.838464625769693e-31,8.836465425469812e-31,8.834466225169933e-31,8.832467024870053e-31,8.830467824570172e-31,8.828468624270293e-31,8.826469423970413e-31,8.824470223670532e-31,8.822471023370653e-31,8.820471823070773e-31,8.818472622770892e-31,8.816473422471012e-31,8.814474222171133e-31,8.812475021871252e-31,8.810475821571372e-31,8.808476621271493e-31,8.806477420971612e-31,8.804478220671732e-31,8.802479020371853e-31,8.800479820071972e-31,8.798480619772092e-31,8.796481419472211e-31,8.794482219172332e-31,8.792483018872452e-31,8.790483818572571e-31,8.788484618272691e-31,8.786485417972812e-31,8.78448621767293e-31,8.782487017373051e-31,8.780487817073172e-31,8.77848861677329e-31,8.776489416473411e-31,8.774490216173532e-31,8.77249101587365e-31,8.770491815573771e-31,8.768492615273892e-31,8.76649341497401e-31,8.764494214674131e-31,8.762495014374252e-31,8.76049581407437e-31,8.758496613774491e-31,8.756497413474612e-31,8.75449821317473e-31,8.752499012874851e-31,8.750499812574972e-31,8.74850061227509e-31,8.746501411975211e-31,8.744502211675331e-31,8.74250301137545e-31,8.74050381107557e-31,8.73850461077569e-31,8.73650541047581e-31,8.73450621017593e-31,8.73250700987605e-31,8.73050780957617e-31,8.72850860927629e-31,8.72650940897641e-31,8.72451020867653e-31,8.72251100837665e-31,8.72051180807677e-31,8.71851260777689e-31,8.71651340747701e-31,8.71451420717713e-31,8.71251500687725e-31,8.71051580657737e-31,8.70851660627749e-31,8.70651740597761e-31,8.70451820567773e-31,8.702519005377849e-31,8.70051980507797e-31,8.69852060477809e-31,8.696521404478209e-31,8.69452220417833e-31,8.69252300387845e-31,8.690523803578569e-31,8.68852460327869e-31,8.68652540297881e-31,8.684526202678929e-31,8.68252700237905e-31,8.680527802079168e-31,8.678528601779289e-31,8.67652940147941e-31,8.674530201179528e-31,8.672531000879649e-31,8.67053180057977e-31,8.668532600279888e-31,8.666533399980009e-31,8.66453419968013e-31,8.662534999380248e-31,8.660535799080369e-31,8.658536598780489e-31,8.656537398480608e-31,8.654538198180728e-31,8.652538997880849e-31,8.650539797580968e-31,8.648540597281088e-31,8.646541396981209e-31,8.644542196681328e-31,8.642542996381448e-31,8.640543796081569e-31,8.638544595781688e-31,8.636545395481808e-31,8.634546195181929e-31,8.632546994882048e-31,8.630547794582168e-31,8.628548594282289e-31,8.626549393982407e-31,8.624550193682528e-31,8.622550993382647e-31,8.620551793082767e-31,8.618552592782888e-31,8.616553392483007e-31,8.614554192183127e-31,8.612554991883248e-31,8.610555791583367e-31,8.608556591283487e-31,8.606557390983608e-31,8.604558190683727e-31,8.602558990383847e-31,8.600559790083968e-31,8.598560589784086e-31,8.596561389484207e-31,8.594562189184328e-31,8.592562988884446e-31,8.590563788584567e-31,8.588564588284687e-31,8.586565387984806e-31,8.584566187684927e-31,8.582566987385047e-31,8.580567787085166e-31,8.578568586785287e-31,8.576569386485407e-31,8.574570186185526e-31,8.572570985885647e-31,8.570571785585767e-31,8.568572585285886e-31,8.566573384986007e-31,8.564574184686125e-31,8.562574984386246e-31,8.560575784086367e-31,8.558576583786485e-31,8.556577383486606e-31,8.554578183186726e-31,8.552578982886845e-31,8.550579782586966e-31,8.548580582287086e-31,8.546581381987205e-31,8.544582181687326e-31,8.542582981387446e-31,8.540583781087565e-31,8.538584580787686e-31,8.536585380487806e-31,8.534586180187925e-31,8.532586979888046e-31,8.530587779588166e-31,8.528588579288285e-31,8.526589378988405e-31,8.524590178688526e-31,8.522590978388645e-31,8.520591778088765e-31,8.518592577788886e-31,8.516593377489005e-31,8.514594177189125e-31,8.512594976889246e-31,8.510595776589365e-31,8.508596576289485e-31,8.506597375989604e-31,8.504598175689725e-31,8.502598975389845e-31,8.500599775089964e-31,8.498600574790084e-31,8.496601374490205e-31,8.494602174190324e-31,8.492602973890444e-31,8.490603773590565e-31,8.488604573290684e-31,8.486605372990804e-31,8.484606172690925e-31,8.482606972391044e-31,8.480607772091164e-31,8.478608571791285e-31,8.476609371491404e-31,8.474610171191524e-31,8.472610970891645e-31,8.470611770591763e-31,8.468612570291884e-31,8.466613369992005e-31,8.464614169692123e-31,8.462614969392244e-31,8.460615769092365e-31,8.458616568792483e-31,8.456617368492604e-31,8.454618168192724e-31,8.452618967892843e-31,8.450619767592964e-31,8.448620567293083e-31,8.446621366993203e-31,8.444622166693324e-31,8.442622966393443e-31,8.440623766093563e-31,8.438624565793684e-31,8.436625365493802e-31,8.434626165193923e-31,8.432626964894044e-31,8.430627764594162e-31,8.428628564294283e-31,8.426629363994403e-31,8.424630163694522e-31,8.422630963394643e-31,8.420631763094763e-31,8.418632562794882e-31,8.416633362495003e-31,8.414634162195123e-31,8.412634961895242e-31,8.410635761595363e-31,8.408636561295483e-31,8.406637360995602e-31,8.404638160695723e-31,8.402638960395843e-31,8.400639760095962e-31,8.398640559796082e-31,8.396641359496203e-31,8.394642159196322e-31,8.392642958896442e-31,8.390643758596563e-31,8.388644558296682e-31,8.386645357996802e-31,8.384646157696921e-31,8.382646957397042e-31,8.380647757097162e-31,8.378648556797281e-31,8.376649356497402e-31,8.374650156197522e-31,8.372650955897641e-31,8.370651755597762e-31,8.368652555297882e-31,8.366653354998e-31,8.364654154698121e-31,8.362654954398242e-31,8.36065575409836e-31,8.358656553798481e-31,8.356657353498602e-31,8.35465815319872e-31,8.352658952898841e-31,8.350659752598962e-31,8.34866055229908e-31,8.346661351999201e-31,8.344662151699322e-31,8.34266295139944e-31,8.340663751099561e-31,8.338664550799682e-31,8.3366653504998e-31,8.334666150199921e-31,8.332666949900042e-31,8.33066774960016e-31,8.328668549300281e-31,8.3266693490004e-31,8.32467014870052e-31,8.32267094840064e-31,8.32067174810076e-31,8.31867254780088e-31,8.316673347501e-31,8.31467414720112e-31,8.31267494690124e-31,8.31067574660136e-31,8.30867654630148e-31,8.3066773460016e-31,8.30467814570172e-31,8.30267894540184e-31,8.30067974510196e-31,8.29868054480208e-31,8.2966813445022e-31,8.29468214420232e-31,8.29268294390244e-31,8.29068374360256e-31,8.28868454330268e-31,8.2866853430028e-31,8.284686142702919e-31,8.28268694240304e-31,8.28068774210316e-31,8.278688541803279e-31,8.2766893415034e-31,8.27469014120352e-31,8.272690940903639e-31,8.27069174060376e-31,8.268692540303878e-31,8.266693340003999e-31,8.26469413970412e-31,8.262694939404238e-31,8.260695739104359e-31,8.25869653880448e-31,8.256697338504598e-31,8.254698138204719e-31,8.25269893790484e-31,8.250699737604958e-31,8.248700537305079e-31,8.2467013370052e-31,8.244702136705318e-31,8.242702936405439e-31,8.240703736105559e-31,8.238704535805678e-31,8.236705335505798e-31,8.234706135205919e-31,8.232706934906038e-31,8.230707734606158e-31,8.228708534306279e-31,8.226709334006398e-31,8.224710133706518e-31,8.222710933406639e-31,8.220711733106758e-31,8.218712532806878e-31,8.216713332506999e-31,8.214714132207118e-31,8.212714931907238e-31,8.210715731607357e-31,8.208716531307477e-31,8.206717331007598e-31,8.204718130707717e-31,8.202718930407837e-31,8.200719730107958e-31,8.198720529808077e-31,8.196721329508197e-31,8.194722129208318e-31,8.192722928908437e-31,8.190723728608557e-31,8.188724528308678e-31,8.186725328008797e-31,8.184726127708917e-31,8.182726927409038e-31,8.180727727109156e-31,8.178728526809277e-31,8.176729326509398e-31,8.174730126209516e-31,8.172730925909637e-31,8.170731725609758e-31,8.168732525309876e-31,8.166733325009997e-31,8.164734124710117e-31,8.162734924410236e-31,8.160735724110357e-31,8.158736523810477e-31,8.156737323510596e-31,8.154738123210717e-31,8.152738922910836e-31,8.150739722610956e-31,8.148740522311077e-31,8.146741322011195e-31,8.144742121711316e-31,8.142742921411437e-31,8.140743721111555e-31,8.138744520811676e-31,8.136745320511796e-31,8.134746120211915e-31,8.132746919912036e-31,8.130747719612156e-31,8.128748519312275e-31,8.126749319012396e-31,8.124750118712516e-31,8.122750918412635e-31,8.120751718112756e-31,8.118752517812876e-31,8.116753317512995e-31,8.114754117213116e-31,8.112754916913236e-31,8.110755716613355e-31,8.108756516313475e-31,8.106757316013596e-31,8.104758115713715e-31,8.102758915413835e-31,8.100759715113956e-31,8.098760514814075e-31,8.096761314514195e-31,8.094762114214314e-31,8.092762913914435e-31,8.090763713614555e-31,8.088764513314674e-31,8.086765313014795e-31,8.084766112714915e-31,8.082766912415034e-31,8.080767712115154e-31,8.078768511815275e-31,8.076769311515394e-31,8.074770111215514e-31,8.072770910915635e-31,8.070771710615754e-31,8.068772510315874e-31,8.066773310015995e-31,8.064774109716114e-31,8.062774909416234e-31,8.060775709116355e-31,8.058776508816474e-31,8.056777308516594e-31,8.054778108216715e-31,8.052778907916834e-31,8.050779707616954e-31,8.048780507317075e-31,8.046781307017193e-31,8.044782106717314e-31,8.042782906417435e-31,8.040783706117553e-31,8.038784505817674e-31,8.036785305517793e-31,8.034786105217913e-31,8.032786904918034e-31,8.030787704618153e-31,8.028788504318273e-31,8.026789304018394e-31,8.024790103718513e-31,8.022790903418633e-31,8.020791703118754e-31,8.018792502818872e-31,8.016793302518993e-31,8.014794102219114e-31,8.012794901919232e-31,8.010795701619353e-31,8.008796501319473e-31,8.006797301019592e-31,8.004798100719713e-31,8.002798900419833e-31,8.000799700119952e-31,7.998800499820073e-31,7.996801299520193e-31,7.994802099220312e-31,7.992802898920433e-31,7.990803698620553e-31,7.988804498320672e-31,7.986805298020793e-31,7.984806097720913e-31,7.982806897421032e-31,7.980807697121152e-31,7.978808496821271e-31,7.976809296521392e-31,7.974810096221512e-31,7.972810895921631e-31,7.970811695621752e-31,7.968812495321872e-31,7.966813295021991e-31,7.964814094722112e-31,7.962814894422232e-31,7.960815694122351e-31,7.958816493822472e-31,7.956817293522592e-31,7.954818093222711e-31,7.952818892922832e-31,7.950819692622952e-31,7.948820492323071e-31,7.946821292023191e-31,7.944822091723312e-31,7.94282289142343e-31,7.940823691123551e-31,7.938824490823672e-31,7.93682529052379e-31,7.934826090223911e-31,7.932826889924032e-31,7.93082768962415e-31,7.928828489324271e-31,7.926829289024392e-31,7.92483008872451e-31,7.922830888424631e-31,7.92083168812475e-31,7.91883248782487e-31,7.916833287524991e-31,7.91483408722511e-31,7.91283488692523e-31,7.910835686625351e-31,7.90883648632547e-31,7.90683728602559e-31,7.90483808572571e-31,7.90283888542583e-31,7.90083968512595e-31,7.89884048482607e-31,7.89684128452619e-31,7.89484208422631e-31,7.89284288392643e-31,7.89084368362655e-31,7.88884448332667e-31,7.88684528302679e-31,7.88484608272691e-31,7.88284688242703e-31,7.88084768212715e-31,7.87884848182727e-31,7.87684928152739e-31,7.8748500812275095e-31,7.872850880927629e-31,7.87085168062775e-31,7.8688524803278695e-31,7.866853280027989e-31,7.86485407972811e-31,7.862854879428229e-31,7.860855679128349e-31,7.85885647882847e-31,7.856857278528589e-31,7.854858078228709e-31,7.8528588779288295e-31,7.850859677628949e-31,7.848860477329069e-31,7.846861277029189e-31,7.844862076729309e-31,7.842862876429429e-31,7.8408636761295485e-31,7.838864475829669e-31,7.836865275529789e-31,7.834866075229908e-31,7.832866874930029e-31,7.830867674630149e-31,7.828868474330268e-31,7.826869274030389e-31,7.8248700737305085e-31,7.822870873430628e-31,7.820871673130749e-31,7.8188724728308685e-31,7.816873272530988e-31,7.814874072231108e-31,7.812874871931228e-31,7.810875671631348e-31,7.808876471331468e-31,7.806877271031588e-31,7.804878070731708e-31,7.802878870431828e-31,7.800879670131948e-31,7.798880469832068e-31,7.796881269532188e-31,7.794882069232308e-31,7.792882868932428e-31,7.7908836686325475e-31,7.788884468332667e-31,7.786885268032788e-31,7.784886067732907e-31,7.782886867433027e-31,7.780887667133148e-31,7.778888466833267e-31,7.776889266533387e-31,7.7748900662335075e-31,7.772890865933627e-31,7.770891665633747e-31,7.7688924653338675e-31,7.766893265033987e-31,7.764894064734107e-31,7.762894864434227e-31,7.760895664134347e-31,7.758896463834467e-31,7.756897263534586e-31,7.754898063234707e-31,7.752898862934827e-31,7.750899662634946e-31,7.748900462335067e-31,7.746901262035187e-31,7.744902061735306e-31,7.742902861435427e-31,7.7409036611355465e-31,7.738904460835666e-31,7.736905260535787e-31,7.734906060235906e-31,7.732906859936026e-31,7.730907659636146e-31,7.728908459336266e-31,7.726909259036386e-31,7.724910058736506e-31,7.722910858436626e-31,7.720911658136746e-31,7.718912457836866e-31,7.716913257536986e-31,7.714914057237106e-31,7.7129148569372255e-31,7.710915656637346e-31,7.708916456337466e-31,7.706917256037585e-31,7.704918055737706e-31,7.702918855437826e-31,7.700919655137945e-31,7.698920454838065e-31,7.696921254538186e-31,7.694922054238305e-31,7.692922853938425e-31,7.6909236536385455e-31,7.688924453338665e-31,7.686925253038785e-31,7.684926052738905e-31,7.682926852439025e-31,7.680927652139145e-31,7.678928451839265e-31,7.676929251539385e-31,7.674930051239505e-31,7.672930850939624e-31,7.670931650639745e-31,7.668932450339865e-31,7.666933250039984e-31,7.664934049740105e-31,7.6629348494402245e-31,7.660935649140344e-31,7.658936448840465e-31,7.656937248540584e-31,7.654938048240704e-31,7.652938847940825e-31,7.650939647640944e-31,7.648940447341064e-31,7.646941247041185e-31,7.644942046741304e-31,7.642942846441424e-31,7.640943646141544e-31,7.638944445841664e-31,7.636945245541784e-31,7.6349460452419035e-31,7.632946844942024e-31,7.630947644642144e-31,7.6289484443422634e-31,7.626949244042384e-31,7.624950043742504e-31,7.622950843442623e-31,7.620951643142744e-31,7.618952442842864e-31,7.616953242542983e-31,7.614954042243103e-31,7.6129548419432235e-31,7.610955641643343e-31,7.608956441343463e-31,7.606957241043583e-31,7.604958040743703e-31,7.602958840443823e-31,7.600959640143943e-31,7.598960439844063e-31,7.596961239544183e-31,7.594962039244303e-31,7.592962838944423e-31,7.590963638644543e-31,7.588964438344663e-31,7.586965238044783e-31,7.5849660377449025e-31,7.582966837445022e-31,7.580967637145143e-31,7.5789684368452625e-31,7.576969236545382e-31,7.574970036245503e-31,7.572970835945622e-31,7.570971635645742e-31,7.568972435345863e-31,7.566973235045982e-31,7.564974034746102e-31,7.5629748344462225e-31,7.560975634146342e-31,7.558976433846462e-31,7.556977233546582e-31,7.554978033246702e-31,7.552978832946822e-31,7.5509796326469415e-31,7.548980432347062e-31,7.546981232047182e-31,7.544982031747301e-31,7.542982831447422e-31,7.540983631147542e-31,7.538984430847661e-31,7.536985230547782e-31,7.5349860302479015e-31,7.532986829948021e-31,7.530987629648142e-31,7.5289884293482615e-31,7.526989229048381e-31,7.524990028748501e-31,7.522990828448621e-31,7.520991628148741e-31,7.518992427848861e-31,7.516993227548981e-31,7.514994027249101e-31,7.512994826949221e-31,7.510995626649341e-31,7.508996426349461e-31,7.5069972260495806e-31,7.504998025749701e-31,7.502998825449821e-31,7.5009996251499405e-31,7.499000424850061e-31,7.497001224550181e-31,7.4950020242503e-31,7.49300282395042e-31,7.491003623650541e-31,7.48900442335066e-31,7.48700522305078e-31,7.4850060227509005e-31,7.48300682245102e-31,7.48100762215114e-31,7.4790084218512605e-31,7.47700922155138e-31,7.4750100212515e-31,7.47301082095162e-31,7.47101162065174e-31,7.46901242035186e-31,7.467013220051979e-31,7.4650140197521e-31,7.46301481945222e-31,7.461015619152339e-31,7.45901641885246e-31,7.45701721855258e-31,7.455018018252699e-31,7.45301881795282e-31,7.4510196176529395e-31,7.449020417353059e-31,7.44702121705318e-31,7.445022016753299e-31,7.443022816453419e-31,7.44102361615354e-31,7.439024415853659e-31,7.437025215553779e-31,7.435026015253899e-31,7.433026814954019e-31,7.431027614654139e-31,7.429028414354259e-31,7.427029214054379e-31,7.425030013754499e-31,7.4230308134546185e-31,7.421031613154739e-31,7.419032412854859e-31,7.417033212554978e-31,7.415034012255099e-31,7.413034811955219e-31,7.411035611655338e-31,7.409036411355458e-31,7.407037211055579e-31,7.405038010755698e-31,7.403038810455818e-31,7.4010396101559385e-31,7.399040409856058e-31,7.397041209556178e-31,7.395042009256298e-31,7.393042808956418e-31,7.391043608656538e-31,7.389044408356658e-31,7.387045208056778e-31,7.385046007756898e-31,7.383046807457018e-31,7.381047607157138e-31,7.379048406857258e-31,7.377049206557377e-31,7.375050006257498e-31,7.3730508059576175e-31,7.371051605657737e-31,7.369052405357858e-31,7.367053205057977e-31,7.365054004758097e-31,7.363054804458218e-31,7.361055604158337e-31,7.359056403858457e-31,7.357057203558578e-31,7.355058003258697e-31,7.353058802958817e-31,7.351059602658937e-31,7.349060402359057e-31,7.347061202059177e-31,7.3450620017592965e-31,7.343062801459417e-31,7.341063601159537e-31,7.3390644008596564e-31,7.337065200559777e-31,7.335066000259897e-31,7.333066799960016e-31,7.331067599660137e-31,7.329068399360257e-31,7.327069199060376e-31,7.325069998760497e-31,7.3230707984606165e-31,7.321071598160736e-31,7.319072397860856e-31,7.317073197560976e-31,7.315073997261096e-31,7.313074796961216e-31,7.311075596661336e-31,7.309076396361456e-31,7.307077196061576e-31,7.305077995761696e-31,7.303078795461816e-31,7.301079595161936e-31,7.299080394862056e-31,7.297081194562176e-31,7.2950819942622955e-31,7.293082793962415e-31,7.291083593662536e-31,7.2890843933626554e-31,7.287085193062775e-31,7.285085992762896e-31,7.283086792463015e-31,7.281087592163135e-31,7.279088391863256e-31,7.277089191563375e-31,7.275089991263495e-31,7.2730907909636155e-31,7.271091590663735e-31,7.269092390363855e-31,7.267093190063975e-31,7.265093989764095e-31,7.263094789464215e-31,7.2610955891643345e-31,7.259096388864455e-31,7.257097188564575e-31,7.255097988264694e-31,7.253098787964815e-31,7.251099587664935e-31,7.249100387365054e-31,7.247101187065175e-31,7.2451019867652945e-31,7.243102786465414e-31,7.241103586165535e-31,7.2391043858656544e-31,7.237105185565774e-31,7.235105985265895e-31,7.233106784966014e-31,7.231107584666134e-31,7.229108384366254e-31,7.227109184066374e-31,7.225109983766494e-31,7.223110783466614e-31,7.221111583166734e-31,7.219112382866854e-31,7.2171131825669736e-31,7.215113982267094e-31,7.213114781967214e-31,7.2111155816673335e-31,7.209116381367454e-31,7.207117181067574e-31,7.205117980767693e-31,7.203118780467813e-31,7.201119580167934e-31,7.199120379868053e-31,7.197121179568173e-31,7.1951219792682935e-31,7.193122778968413e-31,7.191123578668533e-31,7.1891243783686534e-31,7.187125178068773e-31,7.185125977768893e-31,7.183126777469013e-31,7.181127577169133e-31,7.179128376869253e-31,7.177129176569373e-31,7.175129976269493e-31,7.173130775969613e-31,7.171131575669732e-31,7.169132375369853e-31,7.1671331750699726e-31,7.165133974770092e-31,7.163134774470213e-31,7.1611355741703325e-31,7.159136373870452e-31,7.157137173570573e-31,7.155137973270692e-31,7.153138772970812e-31,7.151139572670933e-31,7.149140372371052e-31,7.147141172071172e-31,7.145141971771292e-31,7.143142771471412e-31,7.141143571171532e-31,7.139144370871652e-31,7.137145170571772e-31,7.135145970271892e-31,7.1331467699720115e-31,7.131147569672132e-31,7.129148369372252e-31,7.127149169072371e-31,7.125149968772492e-31,7.123150768472612e-31,7.121151568172731e-31,7.119152367872852e-31,7.1171531675729716e-31,7.115153967273091e-31,7.113154766973211e-31,7.1111555666733315e-31,7.109156366373451e-31,7.107157166073571e-31,7.105157965773691e-31,7.103158765473811e-31,7.101159565173931e-31,7.099160364874051e-31,7.097161164574171e-31,7.095161964274291e-31,7.093162763974411e-31,7.091163563674531e-31,7.089164363374651e-31,7.08716516307477e-31,7.085165962774891e-31,7.0831667624750105e-31,7.08116756217513e-31,7.079168361875251e-31,7.07716916157537e-31,7.07516996127549e-31,7.073170760975611e-31,7.07117156067573e-31,7.06917236037585e-31,7.0671731600759706e-31,7.06517395977609e-31,7.06317475947621e-31,7.0611755591763305e-31,7.05917635887645e-31,7.05717715857657e-31,7.0551779582766895e-31,7.05317875797681e-31,7.05117955767693e-31,7.049180357377049e-31,7.04718115707717e-31,7.04518195677729e-31,7.043182756477409e-31,7.04118355617753e-31,7.03918435587765e-31,7.037185155577769e-31,7.03518595527789e-31,7.0331867549780095e-31,7.031187554678129e-31,7.029188354378249e-31,7.027189154078369e-31,7.025189953778489e-31,7.023190753478609e-31,7.021191553178729e-31,7.019192352878849e-31,7.017193152578969e-31,7.015193952279089e-31,7.013194751979209e-31,7.011195551679329e-31,7.009196351379449e-31,7.007197151079569e-31,7.0051979507796885e-31,7.003198750479809e-31,7.001199550179929e-31,6.999200349880048e-31,6.997201149580168e-31,6.995201949280289e-31,6.993202748980408e-31,6.991203548680528e-31,6.989204348380649e-31,6.987205148080768e-31,6.985205947780888e-31,6.9832067474810085e-31,6.981207547181128e-31,6.979208346881248e-31,6.977209146581368e-31,6.975209946281488e-31,6.973210745981608e-31,6.9712115456817275e-31,6.969212345381848e-31,6.967213145081968e-31,6.965213944782087e-31,6.963214744482208e-31,6.961215544182328e-31,6.959216343882447e-31,6.957217143582568e-31,6.9552179432826875e-31,6.953218742982807e-31,6.951219542682928e-31,6.949220342383047e-31,6.947221142083167e-31,6.945221941783288e-31,6.943222741483407e-31,6.941223541183527e-31,6.939224340883647e-31,6.937225140583767e-31,6.935225940283887e-31,6.933226739984007e-31,6.931227539684127e-31,6.929228339384247e-31,6.9272291390843665e-31,6.925229938784487e-31,6.923230738484607e-31,6.9212315381847265e-31,6.919232337884847e-31,6.917233137584967e-31,6.915233937285086e-31,6.913234736985207e-31,6.911235536685327e-31,6.909236336385446e-31,6.907237136085566e-31,6.9052379357856865e-31,6.903238735485806e-31,6.901239535185926e-31,6.8992403348860464e-31,6.897241134586166e-31,6.895241934286286e-31,6.893242733986406e-31,6.891243533686526e-31,6.889244333386646e-31,6.887245133086766e-31,6.885245932786886e-31,6.883246732487006e-31,6.881247532187125e-31,6.879248331887246e-31,6.8772491315873655e-31,6.875249931287485e-31,6.873250730987606e-31,6.8712515306877255e-31,6.869252330387845e-31,6.867253130087966e-31,6.865253929788085e-31,6.863254729488205e-31,6.861255529188326e-31,6.859256328888445e-31,6.857257128588565e-31,6.8552579282886855e-31,6.853258727988805e-31,6.851259527688925e-31,6.849260327389045e-31,6.847261127089165e-31,6.845261926789285e-31,6.8432627264894045e-31,6.841263526189525e-31,6.839264325889645e-31,6.837265125589764e-31,6.835265925289885e-31,6.833266724990005e-31,6.831267524690124e-31,6.829268324390245e-31,6.8272691240903645e-31,6.825269923790484e-31,6.823270723490604e-31,6.8212715231907245e-31,6.819272322890844e-31,6.817273122590964e-31,6.815273922291084e-31,6.813274721991204e-31,6.811275521691324e-31,6.809276321391444e-31,6.807277121091564e-31,6.805277920791684e-31,6.803278720491804e-31,6.801279520191924e-31,6.799280319892044e-31,6.797281119592164e-31,6.795281919292284e-31,6.7932827189924035e-31,6.791283518692523e-31,6.789284318392644e-31,6.787285118092763e-31,6.785285917792883e-31,6.783286717493004e-31,6.781287517193123e-31,6.779288316893243e-31,6.7772891165933636e-31,6.775289916293483e-31,6.773290715993603e-31,6.7712915156937235e-31,6.769292315393843e-31,6.767293115093963e-31,6.7652939147940825e-31,6.763294714494203e-31,6.761295514194323e-31,6.759296313894442e-31,6.757297113594563e-31,6.755297913294683e-31,6.753298712994802e-31,6.751299512694923e-31,6.749300312395043e-31,6.747301112095162e-31,6.745301911795283e-31,6.7433027114954025e-31,6.741303511195522e-31,6.739304310895643e-31,6.737305110595762e-31,6.735305910295882e-31,6.733306709996002e-31,6.731307509696122e-31,6.729308309396242e-31,6.727309109096362e-31,6.725309908796482e-31,6.723310708496602e-31,6.721311508196722e-31,6.719312307896842e-31,6.717313107596962e-31,6.7153139072970815e-31,6.713314706997202e-31,6.711315506697322e-31,6.709316306397441e-31,6.707317106097561e-31,6.705317905797682e-31,6.703318705497801e-31,6.701319505197921e-31,6.699320304898042e-31,6.697321104598161e-31,6.695321904298281e-31,6.6933227039984015e-31,6.691323503698521e-31,6.689324303398641e-31,6.687325103098761e-31,6.685325902798881e-31,6.683326702499001e-31,6.681327502199121e-31,6.679328301899241e-31,6.677329101599361e-31,6.67532990129948e-31,6.673330700999601e-31,6.671331500699721e-31,6.66933230039984e-31,6.667333100099961e-31,6.6653338998000805e-31,6.6633346995002e-31,6.661335499200321e-31,6.65933629890044e-31,6.65733709860056e-31,6.655337898300681e-31,6.6533386980008e-31,6.65133949770092e-31,6.64934029740104e-31,6.64734109710116e-31,6.64534189680128e-31,6.6433426965014e-31,6.64134349620152e-31,6.63934429590164e-31,6.6373450956017595e-31,6.63534589530188e-31,6.633346695002e-31,6.6313474947021194e-31,6.62934829440224e-31,6.62734909410236e-31,6.625349893802479e-31,6.6233506935026e-31,6.62135149320272e-31,6.619352292902839e-31,6.617353092602959e-31,6.6153538923030795e-31,6.613354692003199e-31,6.611355491703319e-31,6.609356291403439e-31,6.607357091103559e-31,6.605357890803679e-31,6.603358690503799e-31,6.601359490203919e-31,6.599360289904039e-31,6.597361089604159e-31,6.595361889304279e-31,6.593362689004399e-31,6.591363488704519e-31,6.589364288404639e-31,6.5873650881047585e-31,6.585365887804878e-31,6.583366687504999e-31,6.5813674872051185e-31,6.579368286905238e-31,6.577369086605359e-31,6.575369886305478e-31,6.573370686005598e-31,6.571371485705719e-31,6.569372285405838e-31,6.567373085105958e-31,6.5653738848060785e-31,6.563374684506198e-31,6.561375484206318e-31,6.5593762839064376e-31,6.557377083606558e-31,6.555377883306678e-31,6.5533786830067975e-31,6.551379482706918e-31,6.549380282407038e-31,6.547381082107157e-31,6.545381881807278e-31,6.543382681507398e-31,6.541383481207517e-31,6.539384280907638e-31,6.5373850806077575e-31,6.535385880307877e-31,6.533386680007998e-31,6.5313874797081175e-31,6.529388279408237e-31,6.527389079108357e-31,6.525389878808477e-31,6.523390678508597e-31,6.521391478208717e-31,6.519392277908837e-31,6.517393077608957e-31,6.515393877309077e-31,6.513394677009197e-31,6.511395476709317e-31,6.5093962764094366e-31,6.507397076109557e-31,6.505397875809677e-31,6.5033986755097965e-31,6.501399475209916e-31,6.499400274910037e-31,6.497401074610156e-31,6.495401874310276e-31,6.493402674010397e-31,6.491403473710516e-31,6.489404273410636e-31,6.4874050731107565e-31,6.485405872810876e-31,6.483406672510996e-31,6.4814074722111165e-31,6.479408271911236e-31,6.477409071611356e-31,6.475409871311476e-31,6.473410671011596e-31,6.471411470711716e-31,6.469412270411835e-31,6.467413070111956e-31,6.465413869812076e-31,6.463414669512195e-31,6.461415469212316e-31,6.459416268912436e-31,6.457417068612555e-31,6.455417868312676e-31,6.4534186680127955e-31,6.451419467712915e-31,6.449420267413036e-31,6.447421067113155e-31,6.445421866813275e-31,6.443422666513395e-31,6.441423466213515e-31,6.439424265913635e-31,6.437425065613755e-31,6.435425865313875e-31,6.433426665013995e-31,6.431427464714115e-31,6.429428264414235e-31,6.427429064114355e-31,6.4254298638144745e-31,6.423430663514595e-31,6.421431463214715e-31,6.419432262914834e-31,6.417433062614955e-31,6.415433862315075e-31,6.413434662015194e-31,6.411435461715314e-31,6.409436261415435e-31,6.407437061115554e-31,6.405437860815674e-31,6.4034386605157945e-31,6.401439460215914e-31,6.399440259916034e-31,6.397441059616154e-31,6.395441859316274e-31,6.393442659016394e-31,6.391443458716514e-31,6.389444258416634e-31,6.387445058116754e-31,6.385445857816873e-31,6.383446657516994e-31,6.381447457217114e-31,6.379448256917233e-31,6.377449056617354e-31,6.3754498563174735e-31,6.373450656017593e-31,6.371451455717714e-31,6.369452255417833e-31,6.367453055117953e-31,6.365453854818074e-31,6.363454654518193e-31,6.361455454218313e-31,6.359456253918434e-31,6.357457053618553e-31,6.355457853318673e-31,6.353458653018793e-31,6.351459452718913e-31,6.349460252419033e-31,6.3474610521191525e-31,6.345461851819273e-31,6.343462651519393e-31,6.3414634512195124e-31,6.339464250919633e-31,6.337465050619753e-31,6.335465850319872e-31,6.333466650019993e-31,6.331467449720113e-31,6.329468249420232e-31,6.327469049120352e-31,6.3254698488204725e-31,6.323470648520592e-31,6.321471448220712e-31,6.319472247920832e-31,6.317473047620952e-31,6.315473847321072e-31,6.313474647021192e-31,6.311475446721312e-31,6.309476246421432e-31,6.307477046121552e-31,6.305477845821672e-31,6.303478645521792e-31,6.301479445221912e-31,6.299480244922032e-31,6.2974810446221515e-31,6.295481844322271e-31,6.293482644022392e-31,6.2914834437225114e-31,6.289484243422631e-31,6.287485043122752e-31,6.285485842822871e-31,6.283486642522991e-31,6.281487442223112e-31,6.279488241923231e-31,6.277489041623351e-31,6.2754898413234715e-31,6.273490641023591e-31,6.271491440723711e-31,6.269492240423831e-31,6.267493040123951e-31,6.265493839824071e-31,6.2634946395241905e-31,6.261495439224311e-31,6.259496238924431e-31,6.25749703862455e-31,6.255497838324671e-31,6.253498638024791e-31,6.25149943772491e-31,6.249500237425031e-31,6.2475010371251505e-31,6.24550183682527e-31,6.243502636525391e-31,6.2415034362255104e-31,6.23950423592563e-31,6.23750503562575e-31,6.23550583532587e-31,6.23350663502599e-31,6.23150743472611e-31,6.22950823442623e-31,6.22750903412635e-31,6.22550983382647e-31,6.22351063352659e-31,6.22151143322671e-31,6.2195122329268296e-31,6.21751303262695e-31,6.21551383232707e-31,6.2135146320271895e-31,6.21151543172731e-31,6.20951623142743e-31,6.207517031127549e-31,6.205517830827669e-31,6.20351863052779e-31,6.201519430227909e-31,6.199520229928029e-31,6.1975210296281495e-31,6.195521829328269e-31,6.193522629028389e-31,6.1915234287285094e-31,6.189524228428629e-31,6.187525028128749e-31,6.185525827828869e-31,6.183526627528989e-31,6.181527427229109e-31,6.179528226929228e-31,6.177529026629349e-31,6.175529826329469e-31,6.173530626029588e-31,6.171531425729709e-31,6.1695322254298286e-31,6.167533025129948e-31,6.165533824830069e-31,6.1635346245301885e-31,6.161535424230308e-31,6.159536223930429e-31,6.157537023630548e-31,6.155537823330668e-31,6.153538623030789e-31,6.151539422730908e-31,6.149540222431028e-31,6.147541022131148e-31,6.145541821831268e-31,6.143542621531388e-31,6.141543421231508e-31,6.139544220931628e-31,6.137545020631748e-31,6.1355458203318675e-31,6.133546620031988e-31,6.131547419732108e-31,6.129548219432227e-31,6.127549019132348e-31,6.125549818832468e-31,6.123550618532587e-31,6.121551418232707e-31,6.1195522179328276e-31,6.117553017632947e-31,6.115553817333067e-31,6.1135546170331875e-31,6.111555416733307e-31,6.109556216433427e-31,6.107557016133547e-31,6.105557815833667e-31,6.103558615533787e-31,6.101559415233907e-31,6.099560214934027e-31,6.097561014634147e-31,6.095561814334267e-31,6.093562614034387e-31,6.091563413734507e-31,6.089564213434626e-31,6.087565013134747e-31,6.0855658128348665e-31,6.083566612534986e-31,6.081567412235107e-31,6.079568211935226e-31,6.077569011635346e-31,6.075569811335467e-31,6.073570611035586e-31,6.071571410735706e-31,6.0695722104358266e-31,6.067573010135946e-31,6.065573809836066e-31,6.063574609536186e-31,6.061575409236306e-31,6.059576208936426e-31,6.0575770086365455e-31,6.055577808336666e-31,6.053578608036786e-31,6.051579407736905e-31,6.049580207437026e-31,6.047581007137146e-31,6.045581806837265e-31,6.043582606537386e-31,6.041583406237506e-31,6.039584205937625e-31,6.037585005637746e-31,6.0355858053378655e-31,6.033586605037985e-31,6.031587404738105e-31,6.029588204438225e-31,6.027589004138345e-31,6.025589803838465e-31,6.023590603538585e-31,6.021591403238705e-31,6.019592202938825e-31,6.017593002638945e-31,6.015593802339065e-31,6.013594602039185e-31,6.011595401739305e-31,6.009596201439425e-31,6.0075970011395445e-31,6.005597800839664e-31,6.003598600539785e-31,6.001599400239904e-31,5.999600199940024e-31,5.997600999640145e-31,5.995601799340264e-31,5.993602599040384e-31,5.991603398740505e-31,5.989604198440624e-31,5.987604998140744e-31,5.9856057978408645e-31,5.983606597540984e-31,5.981607397241104e-31,5.979608196941224e-31,5.977608996641344e-31,5.975609796341464e-31,5.9736105960415835e-31,5.971611395741704e-31,5.969612195441824e-31,5.967612995141943e-31,5.965613794842064e-31,5.963614594542184e-31,5.961615394242303e-31,5.959616193942424e-31,5.9576169936425435e-31,5.955617793342663e-31,5.953618593042784e-31,5.9516193927429034e-31,5.949620192443023e-31,5.947620992143144e-31,5.945621791843263e-31,5.943622591543383e-31,5.941623391243503e-31,5.939624190943623e-31,5.937624990643743e-31,5.935625790343863e-31,5.933626590043983e-31,5.931627389744103e-31,5.9296281894442225e-31,5.927628989144343e-31,5.925629788844463e-31,5.9236305885445825e-31,5.921631388244703e-31,5.919632187944823e-31,5.917632987644942e-31,5.915633787345062e-31,5.913634587045183e-31,5.911635386745302e-31,5.909636186445422e-31,5.9076369861455425e-31,5.905637785845662e-31,5.903638585545782e-31,5.9016393852459024e-31,5.899640184946022e-31,5.897640984646142e-31,5.895641784346262e-31,5.893642584046382e-31,5.891643383746502e-31,5.889644183446622e-31,5.887644983146742e-31,5.885645782846862e-31,5.883646582546981e-31,5.881647382247102e-31,5.8796481819472215e-31,5.877648981647341e-31,5.875649781347462e-31,5.8736505810475815e-31,5.871651380747701e-31,5.869652180447822e-31,5.867652980147941e-31,5.865653779848061e-31,5.863654579548182e-31,5.861655379248301e-31,5.859656178948421e-31,5.857656978648541e-31,5.855657778348661e-31,5.853658578048781e-31,5.851659377748901e-31,5.849660177449021e-31,5.847660977149141e-31,5.8456617768492605e-31,5.843662576549381e-31,5.841663376249501e-31,5.83966417594962e-31,5.837664975649741e-31,5.835665775349861e-31,5.83366657504998e-31,5.831667374750101e-31,5.8296681744502206e-31,5.82766897415034e-31,5.82566977385046e-31,5.8236705735505805e-31,5.8216713732507e-31,5.81967217295082e-31,5.81767297265094e-31,5.81567377235106e-31,5.81367457205118e-31,5.8116753717513e-31,5.80967617145142e-31,5.80767697115154e-31,5.80567777085166e-31,5.80367857055178e-31,5.8016793702519e-31,5.799680169952019e-31,5.79768096965214e-31,5.7956817693522595e-31,5.793682569052379e-31,5.7916833687525e-31,5.789684168452619e-31,5.787684968152739e-31,5.78568576785286e-31,5.783686567552979e-31,5.781687367253099e-31,5.7796881669532196e-31,5.777688966653339e-31,5.775689766353459e-31,5.7736905660535795e-31,5.771691365753699e-31,5.769692165453819e-31,5.7676929651539385e-31,5.765693764854059e-31,5.763694564554179e-31,5.761695364254298e-31,5.759696163954419e-31,5.757696963654539e-31,5.755697763354658e-31,5.753698563054779e-31,5.751699362754899e-31,5.749700162455018e-31,5.747700962155139e-31,5.7457017618552585e-31,5.743702561555378e-31,5.741703361255498e-31,5.739704160955618e-31,5.737704960655738e-31,5.735705760355858e-31,5.733706560055978e-31,5.731707359756098e-31,5.729708159456218e-31,5.727708959156338e-31,5.725709758856458e-31,5.723710558556578e-31,5.721711358256698e-31,5.719712157956818e-31,5.7177129576569375e-31,5.715713757357058e-31,5.713714557057178e-31,5.711715356757297e-31,5.709716156457417e-31,5.707716956157538e-31,5.705717755857657e-31,5.703718555557777e-31,5.701719355257898e-31,5.699720154958017e-31,5.697720954658137e-31,5.6957217543582575e-31,5.693722554058377e-31,5.691723353758497e-31,5.689724153458617e-31,5.687724953158737e-31,5.685725752858857e-31,5.6837265525589764e-31,5.681727352259097e-31,5.679728151959217e-31,5.677728951659336e-31,5.675729751359457e-31,5.673730551059577e-31,5.671731350759696e-31,5.669732150459817e-31,5.6677329501599365e-31,5.665733749860056e-31,5.663734549560177e-31,5.661735349260296e-31,5.659736148960416e-31,5.657736948660537e-31,5.655737748360656e-31,5.653738548060776e-31,5.651739347760896e-31,5.649740147461016e-31,5.647740947161136e-31,5.645741746861256e-31,5.643742546561376e-31,5.641743346261496e-31,5.6397441459616155e-31,5.637744945661736e-31,5.635745745361856e-31,5.6337465450619755e-31,5.631747344762096e-31,5.629748144462216e-31,5.627748944162335e-31,5.625749743862456e-31,5.623750543562576e-31,5.621751343262695e-31,5.619752142962815e-31,5.6177529426629355e-31,5.615753742363055e-31,5.613754542063175e-31,5.611755341763295e-31,5.609756141463415e-31,5.607756941163535e-31,5.605757740863655e-31,5.603758540563775e-31,5.601759340263895e-31,5.599760139964015e-31,5.597760939664135e-31,5.595761739364255e-31,5.593762539064374e-31,5.591763338764495e-31,5.5897641384646145e-31,5.587764938164734e-31,5.585765737864855e-31,5.5837665375649745e-31,5.581767337265094e-31,5.579768136965215e-31,5.577768936665334e-31,5.575769736365454e-31,5.573770536065575e-31,5.571771335765694e-31,5.569772135465814e-31,5.5677729351659345e-31,5.565773734866054e-31,5.563774534566174e-31,5.5617753342662936e-31,5.559776133966414e-31,5.557776933666534e-31,5.5557777333666535e-31,5.553778533066774e-31,5.551779332766894e-31,5.549780132467013e-31,5.547780932167134e-31,5.545781731867254e-31,5.543782531567373e-31,5.541783331267494e-31,5.5397841309676135e-31,5.537784930667733e-31,5.535785730367853e-31,5.5337865300679735e-31,5.531787329768093e-31,5.529788129468213e-31,5.527788929168333e-31,5.525789728868453e-31,5.523790528568573e-31,5.521791328268693e-31,5.519792127968813e-31,5.517792927668933e-31,5.515793727369053e-31,5.513794527069173e-31,5.511795326769293e-31,5.509796126469413e-31,5.507796926169533e-31,5.5057977258696525e-31,5.503798525569772e-31,5.501799325269893e-31,5.499800124970012e-31,5.497800924670132e-31,5.495801724370253e-31,5.493802524070372e-31,5.491803323770492e-31,5.4898041234706125e-31,5.487804923170732e-31,5.485805722870852e-31,5.4838065225709725e-31,5.481807322271092e-31,5.479808121971212e-31,5.4778089216713315e-31,5.475809721371452e-31,5.473810521071572e-31,5.471811320771691e-31,5.469812120471812e-31,5.467812920171932e-31,5.465813719872051e-31,5.463814519572172e-31,5.461815319272292e-31,5.459816118972411e-31,5.457816918672532e-31,5.4558177183726515e-31,5.453818518072771e-31,5.451819317772892e-31,5.449820117473011e-31,5.447820917173131e-31,5.445821716873251e-31,5.443822516573371e-31,5.441823316273491e-31,5.439824115973611e-31,5.437824915673731e-31,5.435825715373851e-31,5.433826515073971e-31,5.431827314774091e-31,5.429828114474211e-31,5.4278289141743305e-31,5.425829713874451e-31,5.423830513574571e-31,5.42183131327469e-31,5.41983211297481e-31,5.417832912674931e-31,5.41583371237505e-31,5.41383451207517e-31,5.411835311775291e-31,5.40983611147541e-31,5.40783691117553e-31,5.4058377108756505e-31,5.40383851057577e-31,5.40183931027589e-31,5.39984010997601e-31,5.39784090967613e-31,5.39584170937625e-31,5.39384250907637e-31,5.39184330877649e-31,5.38984410847661e-31,5.387844908176729e-31,5.38584570787685e-31,5.38384650757697e-31,5.381847307277089e-31,5.37984810697721e-31,5.3778489066773295e-31,5.375849706377449e-31,5.37385050607757e-31,5.371851305777689e-31,5.369852105477809e-31,5.36785290517793e-31,5.365853704878049e-31,5.363854504578169e-31,5.361855304278289e-31,5.359856103978409e-31,5.357856903678529e-31,5.355857703378649e-31,5.353858503078769e-31,5.351859302778889e-31,5.3498601024790085e-31,5.347860902179129e-31,5.345861701879249e-31,5.3438625015793684e-31,5.341863301279489e-31,5.339864100979609e-31,5.337864900679728e-31,5.335865700379849e-31,5.333866500079969e-31,5.331867299780088e-31,5.329868099480208e-31,5.3278688991803285e-31,5.325869698880448e-31,5.323870498580568e-31,5.321871298280688e-31,5.319872097980808e-31,5.317872897680928e-31,5.315873697381048e-31,5.313874497081168e-31,5.311875296781288e-31,5.309876096481408e-31,5.307876896181528e-31,5.305877695881648e-31,5.303878495581768e-31,5.301879295281888e-31,5.2998800949820075e-31,5.297880894682127e-31,5.295881694382248e-31,5.2938824940823674e-31,5.291883293782487e-31,5.289884093482608e-31,5.287884893182727e-31,5.285885692882847e-31,5.283886492582968e-31,5.281887292283087e-31,5.279888091983207e-31,5.2778888916833275e-31,5.275889691383447e-31,5.273890491083567e-31,5.2718912907836866e-31,5.269892090483807e-31,5.267892890183927e-31,5.2658936898840465e-31,5.263894489584167e-31,5.261895289284287e-31,5.259896088984406e-31,5.257896888684527e-31,5.255897688384647e-31,5.253898488084766e-31,5.251899287784887e-31,5.2499000874850065e-31,5.247900887185126e-31,5.245901686885247e-31,5.2439024865853664e-31,5.241903286285486e-31,5.239904085985606e-31,5.237904885685726e-31,5.235905685385846e-31,5.233906485085966e-31,5.231907284786086e-31,5.229908084486206e-31,5.227908884186326e-31,5.225909683886446e-31,5.223910483586566e-31,5.2219112832866856e-31,5.219912082986806e-31,5.217912882686926e-31,5.2159136823870455e-31,5.213914482087165e-31,5.211915281787286e-31,5.209916081487405e-31,5.207916881187525e-31,5.205917680887646e-31,5.203918480587765e-31,5.201919280287885e-31,5.1999200799880055e-31,5.197920879688125e-31,5.195921679388245e-31,5.1939224790883655e-31,5.191923278788485e-31,5.189924078488605e-31,5.187924878188725e-31,5.185925677888845e-31,5.183926477588965e-31,5.181927277289084e-31,5.179928076989205e-31,5.177928876689325e-31,5.175929676389444e-31,5.173930476089565e-31,5.1719312757896846e-31,5.169932075489804e-31,5.167932875189925e-31,5.1659336748900445e-31,5.163934474590164e-31,5.161935274290285e-31,5.159936073990404e-31,5.157936873690524e-31,5.155937673390644e-31,5.153938473090764e-31,5.151939272790884e-31,5.149940072491004e-31,5.147940872191124e-31,5.145941671891244e-31,5.143942471591364e-31,5.141943271291484e-31,5.139944070991604e-31,5.1379448706917235e-31,5.135945670391844e-31,5.133946470091964e-31,5.131947269792083e-31,5.129948069492204e-31,5.127948869192324e-31,5.125949668892443e-31,5.123950468592563e-31,5.1219512682926836e-31,5.119952067992803e-31,5.117952867692923e-31,5.1159536673930435e-31,5.113954467093163e-31,5.111955266793283e-31,5.109956066493403e-31,5.107956866193523e-31,5.105957665893643e-31,5.103958465593763e-31,5.101959265293883e-31,5.099960064994003e-31,5.097960864694122e-31,5.095961664394243e-31,5.093962464094363e-31,5.091963263794482e-31,5.089964063494603e-31,5.0879648631947225e-31,5.085965662894842e-31,5.083966462594963e-31,5.081967262295082e-31,5.079968061995202e-31,5.077968861695323e-31,5.075969661395442e-31,5.073970461095562e-31,5.071971260795683e-31,5.069972060495802e-31,5.067972860195922e-31,5.065973659896042e-31,5.063974459596162e-31,5.061975259296282e-31,5.0599760589964015e-31,5.057976858696522e-31,5.055977658396642e-31,5.053978458096761e-31,5.051979257796882e-31,5.049980057497002e-31,5.047980857197121e-31,5.045981656897242e-31,5.043982456597362e-31,5.041983256297481e-31,5.039984055997601e-31,5.0379848556977215e-31,5.035985655397841e-31,5.033986455097961e-31,5.031987254798081e-31,5.029988054498201e-31,5.027988854198321e-31,5.025989653898441e-31,5.023990453598561e-31,5.021991253298681e-31,5.019992052998801e-31,5.017992852698921e-31,5.015993652399041e-31,5.013994452099161e-31,5.011995251799281e-31,5.0099960514994005e-31,5.00799685119952e-31,5.005997650899641e-31,5.00399845059976e-31,5.00199925029988e-31,5.000000050000001e-31,4.99800084970012e-31,4.99600164940024e-31,4.994002449100361e-31,4.99200324880048e-31,4.9900040485006e-31,4.9880048482007205e-31,4.98600564790084e-31,4.98400644760096e-31,4.98200724730108e-31,4.9800080470012e-31,4.97800884670132e-31,4.9760096464014395e-31,4.97401044610156e-31,4.97201124580168e-31,4.970012045501799e-31,4.96801284520192e-31,4.96601364490204e-31,4.964014444602159e-31,4.96201524430228e-31,4.9600160440023995e-31,4.958016843702519e-31,4.95601764340264e-31,4.9540184431027594e-31,4.952019242802879e-31,4.950020042502999e-31,4.948020842203119e-31,4.946021641903239e-31,4.944022441603359e-31,4.942023241303479e-31,4.940024041003599e-31,4.938024840703719e-31,4.936025640403839e-31,4.934026440103959e-31,4.9320272398040785e-31,4.930028039504199e-31,4.928028839204319e-31,4.9260296389044385e-31,4.924030438604559e-31,4.922031238304679e-31,4.920032038004798e-31,4.918032837704918e-31,4.916033637405039e-31,4.914034437105158e-31,4.912035236805278e-31,4.9100360365053985e-31,4.908036836205518e-31,4.906037635905638e-31,4.9040384356057584e-31,4.902039235305878e-31,4.900040035005998e-31,4.898040834706118e-31,4.896041634406238e-31,4.894042434106358e-31,4.892043233806477e-31,4.890044033506598e-31,4.888044833206718e-31,4.886045632906837e-31,4.884046432606958e-31,4.8820472323070775e-31,4.880048032007197e-31,4.878048831707318e-31,4.8760496314074375e-31,4.874050431107557e-31,4.872051230807678e-31,4.870052030507797e-31,4.868052830207917e-31,4.866053629908038e-31,4.864054429608157e-31,4.862055229308277e-31,4.860056029008397e-31,4.858056828708517e-31,4.856057628408637e-31,4.854058428108757e-31,4.852059227808877e-31,4.850060027508997e-31,4.8480608272091165e-31,4.846061626909237e-31,4.844062426609357e-31,4.842063226309476e-31,4.840064026009597e-31,4.838064825709717e-31,4.836065625409836e-31,4.834066425109956e-31,4.8320672248100766e-31,4.830068024510196e-31,4.828068824210316e-31,4.8260696239104365e-31,4.824070423610556e-31,4.822071223310676e-31,4.820072023010796e-31,4.818072822710916e-31,4.816073622411036e-31,4.814074422111156e-31,4.812075221811276e-31,4.810076021511396e-31,4.808076821211516e-31,4.806077620911636e-31,4.804078420611756e-31,4.802079220311875e-31,4.800080020011996e-31,4.7980808197121155e-31,4.796081619412235e-31,4.794082419112356e-31,4.792083218812475e-31,4.790084018512595e-31,4.788084818212716e-31,4.786085617912835e-31,4.784086417612955e-31,4.7820872173130756e-31,4.780088017013195e-31,4.778088816713315e-31,4.776089616413435e-31,4.774090416113555e-31,4.772091215813675e-31,4.7700920155137945e-31,4.768092815213915e-31,4.766093614914035e-31,4.764094414614154e-31,4.762095214314275e-31,4.760096014014395e-31,4.758096813714514e-31,4.756097613414635e-31,4.754098413114755e-31,4.752099212814874e-31,4.750100012514995e-31,4.7481008122151145e-31,4.746101611915234e-31,4.744102411615354e-31,4.742103211315474e-31,4.740104011015594e-31,4.738104810715714e-31,4.736105610415834e-31,4.734106410115954e-31,4.732107209816074e-31,4.730108009516194e-31,4.728108809216314e-31,4.726109608916434e-31,4.724110408616554e-31,4.722111208316674e-31,4.7201120080167935e-31,4.718112807716913e-31,4.716113607417034e-31,4.714114407117153e-31,4.712115206817273e-31,4.710116006517394e-31,4.708116806217513e-31,4.706117605917633e-31,4.704118405617754e-31,4.702119205317873e-31,4.700120005017993e-31,4.6981208047181135e-31,4.696121604418233e-31,4.694122404118353e-31,4.692123203818473e-31,4.690124003518593e-31,4.688124803218713e-31,4.6861256029188324e-31,4.684126402618953e-31,4.682127202319073e-31,4.680128002019192e-31,4.678128801719313e-31,4.676129601419433e-31,4.674130401119552e-31,4.672131200819673e-31,4.6701320005197925e-31,4.668132800219912e-31,4.666133599920033e-31,4.664134399620152e-31,4.662135199320272e-31,4.660135999020393e-31,4.658136798720512e-31,4.656137598420632e-31,4.654138398120752e-31,4.652139197820872e-31,4.650139997520992e-31,4.648140797221112e-31,4.646141596921232e-31,4.644142396621352e-31,4.6421431963214715e-31,4.640143996021592e-31,4.638144795721712e-31,4.6361455954218315e-31,4.634146395121952e-31,4.632147194822072e-31,4.630147994522191e-31,4.628148794222311e-31,4.626149593922432e-31,4.624150393622551e-31,4.622151193322671e-31,4.6201519930227915e-31,4.618152792722911e-31,4.616153592423031e-31,4.614154392123151e-31,4.612155191823271e-31,4.610155991523391e-31,4.608156791223511e-31,4.606157590923631e-31,4.604158390623751e-31,4.602159190323871e-31,4.600159990023991e-31,4.598160789724111e-31,4.59616158942423e-31,4.594162389124351e-31,4.5921631888244705e-31,4.59016398852459e-31,4.588164788224711e-31,4.5861655879248305e-31,4.58416638762495e-31,4.582167187325071e-31,4.58016798702519e-31,4.57816878672531e-31,4.576169586425431e-31,4.57417038612555e-31,4.57217118582567e-31,4.57017198552579e-31,4.56817278522591e-31,4.56617358492603e-31,4.5641743846261496e-31,4.56217518432627e-31,4.56017598402639e-31,4.5581767837265095e-31,4.55617758342663e-31,4.55417838312675e-31,4.552179182826869e-31,4.55017998252699e-31,4.54818078222711e-31,4.546181581927229e-31,4.54418238162735e-31,4.5421831813274695e-31,4.540183981027589e-31,4.538184780727709e-31,4.5361855804278295e-31,4.534186380127949e-31,4.532187179828069e-31,4.530187979528189e-31,4.528188779228309e-31,4.526189578928429e-31,4.524190378628549e-31,4.522191178328669e-31,4.520191978028789e-31,4.518192777728909e-31,4.516193577429029e-31,4.514194377129149e-31,4.512195176829268e-31,4.510195976529389e-31,4.5081967762295085e-31,4.506197575929628e-31,4.504198375629749e-31,4.502199175329868e-31,4.500199975029988e-31,4.498200774730109e-31,4.496201574430228e-31,4.494202374130348e-31,4.4922031738304685e-31,4.490203973530588e-31,4.488204773230708e-31,4.4862055729308285e-31,4.484206372630948e-31,4.482207172331068e-31,4.4802079720311875e-31,4.478208771731308e-31,4.476209571431428e-31,4.474210371131547e-31,4.472211170831668e-31,4.470211970531788e-31,4.468212770231907e-31,4.466213569932028e-31,4.464214369632148e-31,4.462215169332267e-31,4.460215969032388e-31,4.4582167687325075e-31,4.456217568432627e-31,4.454218368132747e-31,4.452219167832867e-31,4.450219967532987e-31,4.448220767233107e-31,4.446221566933227e-31,4.444222366633347e-31,4.442223166333467e-31,4.440223966033587e-31,4.438224765733707e-31,4.436225565433827e-31,4.434226365133947e-31,4.432227164834067e-31,4.4302279645341865e-31,4.428228764234307e-31,4.426229563934427e-31,4.424230363634546e-31,4.422231163334666e-31,4.420231963034787e-31,4.418232762734906e-31,4.416233562435026e-31,4.414234362135147e-31,4.412235161835266e-31,4.410235961535386e-31,4.4082367612355065e-31,4.406237560935626e-31,4.404238360635746e-31,4.402239160335866e-31,4.400239960035986e-31,4.398240759736106e-31,4.3962415594362254e-31,4.394242359136346e-31,4.392243158836466e-31,4.390243958536585e-31,4.388244758236706e-31,4.386245557936826e-31,4.384246357636945e-31,4.382247157337066e-31,4.3802479570371855e-31,4.378248756737305e-31,4.376249556437426e-31,4.374250356137545e-31,4.372251155837665e-31,4.370251955537786e-31,4.368252755237905e-31,4.366253554938025e-31,4.364254354638145e-31,4.362255154338265e-31,4.360255954038385e-31,4.358256753738505e-31,4.356257553438625e-31,4.354258353138745e-31,4.3522591528388645e-31,4.350259952538985e-31,4.348260752239105e-31,4.3462615519392244e-31,4.344262351639345e-31,4.342263151339465e-31,4.340263951039584e-31,4.338264750739705e-31,4.336265550439825e-31,4.334266350139944e-31,4.332267149840064e-31,4.3302679495401845e-31,4.328268749240304e-31,4.326269548940424e-31,4.324270348640544e-31,4.322271148340664e-31,4.320271948040784e-31,4.318272747740904e-31,4.316273547441024e-31,4.314274347141144e-31,4.312275146841264e-31,4.310275946541384e-31,4.308276746241504e-31,4.306277545941623e-31,4.304278345641744e-31,4.3022791453418635e-31,4.300279945041983e-31,4.298280744742104e-31,4.2962815444422234e-31,4.294282344142343e-31,4.292283143842464e-31,4.290283943542583e-31,4.288284743242703e-31,4.286285542942824e-31,4.284286342642943e-31,4.282287142343063e-31,4.2802879420431835e-31,4.278288741743303e-31,4.276289541443423e-31,4.2742903411435426e-31,4.272291140843663e-31,4.270291940543783e-31,4.2682927402439025e-31,4.266293539944023e-31,4.264294339644143e-31,4.262295139344262e-31,4.260295939044383e-31,4.258296738744503e-31,4.256297538444622e-31,4.254298338144743e-31,4.2522991378448625e-31,4.250299937544982e-31,4.248300737245102e-31,4.2463015369452224e-31,4.244302336645342e-31,4.242303136345462e-31,4.240303936045582e-31,4.238304735745702e-31,4.236305535445822e-31,4.234306335145942e-31,4.232307134846062e-31,4.230307934546182e-31,4.228308734246302e-31,4.226309533946422e-31,4.2243103336465416e-31,4.222311133346662e-31,4.220311933046782e-31,4.2183127327469015e-31,4.216313532447021e-31,4.214314332147142e-31,4.212315131847261e-31,4.210315931547381e-31,4.208316731247502e-31,4.206317530947621e-31,4.204318330647741e-31,4.2023191303478615e-31,4.200319930047981e-31,4.198320729748101e-31,4.1963215294482215e-31,4.194322329148341e-31,4.192323128848461e-31,4.1903239285485805e-31,4.188324728248701e-31,4.186325527948821e-31,4.18432632764894e-31,4.182327127349061e-31,4.180327927049181e-31,4.1783287267493e-31,4.176329526449421e-31,4.1743303261495406e-31,4.17233112584966e-31,4.170331925549781e-31,4.1683327252499005e-31,4.16633352495002e-31,4.164334324650141e-31,4.16233512435026e-31,4.16033592405038e-31,4.1583367237505e-31,4.15633752345062e-31,4.15433832315074e-31,4.15233912285086e-31,4.15033992255098e-31,4.1483407222511e-31,4.14634152195122e-31,4.14434232165134e-31,4.14234312135146e-31,4.1403439210515795e-31,4.1383447207517e-31,4.13634552045182e-31,4.134346320151939e-31,4.132347119852059e-31,4.13034791955218e-31,4.128348719252299e-31,4.126349518952419e-31,4.1243503186525396e-31,4.122351118352659e-31,4.120351918052779e-31,4.1183527177528995e-31,4.116353517453019e-31,4.114354317153139e-31,4.112355116853259e-31,4.110355916553379e-31,4.108356716253499e-31,4.106357515953619e-31,4.104358315653739e-31,4.102359115353859e-31,4.100359915053978e-31,4.098360714754099e-31,4.096361514454219e-31,4.094362314154338e-31,4.092363113854459e-31,4.0903639135545785e-31,4.088364713254698e-31,4.086365512954819e-31,4.084366312654938e-31,4.082367112355058e-31,4.080367912055179e-31,4.078368711755298e-31,4.076369511455418e-31,4.074370311155538e-31,4.072371110855658e-31,4.070371910555778e-31,4.068372710255898e-31,4.066373509956018e-31,4.064374309656138e-31,4.0623751093562575e-31,4.060375909056378e-31,4.058376708756498e-31,4.056377508456617e-31,4.054378308156738e-31,4.052379107856858e-31,4.050379907556977e-31,4.048380707257098e-31,4.046381506957218e-31,4.044382306657337e-31,4.042383106357457e-31,4.0403839060575775e-31,4.038384705757697e-31,4.036385505457817e-31,4.034386305157937e-31,4.032387104858057e-31,4.030387904558177e-31,4.028388704258297e-31,4.026389503958417e-31,4.024390303658537e-31,4.022391103358657e-31,4.020391903058777e-31,4.018392702758897e-31,4.016393502459017e-31,4.014394302159137e-31,4.0123951018592565e-31,4.010395901559376e-31,4.008396701259497e-31,4.0063975009596164e-31,4.004398300659736e-31,4.002399100359857e-31,4.000399900059976e-31,3.998400699760096e-31,3.996401499460217e-31,3.994402299160336e-31,3.992403098860456e-31,3.9904038985605765e-31,3.988404698260696e-31,3.986405497960816e-31,3.9844062976609355e-31,3.982407097361056e-31,3.980407897061176e-31,3.9784086967612955e-31,3.976409496461416e-31,3.974410296161536e-31,3.972411095861655e-31,3.970411895561776e-31,3.968412695261896e-31,3.966413494962015e-31,3.964414294662136e-31,3.9624150943622555e-31,3.960415894062375e-31,3.958416693762496e-31,3.9564174934626154e-31,3.954418293162735e-31,3.952419092862855e-31,3.950419892562975e-31,3.948420692263095e-31,3.946421491963215e-31,3.944422291663335e-31,3.942423091363455e-31,3.940423891063575e-31,3.9384246907636947e-31,3.936425490463815e-31,3.9344262901639345e-31,3.9324270898640547e-31,3.930427889564175e-31,3.9284286892642945e-31,3.9264294889644146e-31,3.9244302886645347e-31,3.9224310883646544e-31,3.9204318880647745e-31,3.918432687764894e-31,3.9164334874650143e-31,3.9144342871651344e-31,3.912435086865254e-31,3.910435886565374e-31,3.9084366862654943e-31,3.906437485965614e-31,3.904438285665734e-31,3.902439085365854e-31,3.900439885065974e-31,3.898440684766094e-31,3.8964414844662137e-31,3.894442284166334e-31,3.892443083866454e-31,3.8904438835665736e-31,3.8884446832666938e-31,3.8864454829668134e-31,3.8844462826669336e-31,3.8824470823670537e-31,3.8804478820671733e-31,3.8784486817672935e-31,3.876449481467413e-31,3.8744502811675333e-31,3.8724510808676534e-31,3.870451880567773e-31,3.868452680267893e-31,3.8664534799680133e-31,3.864454279668133e-31,3.862455079368253e-31,3.8604558790683728e-31,3.858456678768493e-31,3.856457478468613e-31,3.8544582781687327e-31,3.852459077868853e-31,3.850459877568973e-31,3.8484606772690926e-31,3.8464614769692127e-31,3.8444622766693324e-31,3.8424630763694525e-31,3.8404638760695726e-31,3.8384646757696923e-31,3.8364654754698124e-31,3.8344662751699326e-31,3.8324670748700522e-31,3.8304678745701724e-31,3.828468674270292e-31,3.826469473970412e-31,3.8244702736705323e-31,3.822471073370652e-31,3.820471873070772e-31,3.8184726727708917e-31,3.816473472471012e-31,3.814474272171132e-31,3.8124750718712517e-31,3.8104758715713718e-31,3.808476671271492e-31,3.8064774709716116e-31,3.8044782706717317e-31,3.8024790703718514e-31,3.8004798700719715e-31,3.7984806697720916e-31,3.7964814694722113e-31,3.7944822691723314e-31,3.7924830688724515e-31,3.790483868572571e-31,3.7884846682726913e-31,3.786485467972811e-31,3.784486267672931e-31,3.7824870673730512e-31,3.780487867073171e-31,3.778488666773291e-31,3.776489466473411e-31,3.774490266173531e-31,3.772491065873651e-31,3.7704918655737706e-31,3.7684926652738907e-31,3.766493464974011e-31,3.7644942646741305e-31,3.7624950643742507e-31,3.7604958640743708e-31,3.7584966637744905e-31,3.7564974634746106e-31,3.7544982631747303e-31,3.7524990628748504e-31,3.7504998625749705e-31,3.74850066227509e-31,3.7465014619752103e-31,3.74450226167533e-31,3.74250306137545e-31,3.74050386107557e-31,3.73850466077569e-31,3.73650546047581e-31,3.73450626017593e-31,3.73250705987605e-31,3.73050785957617e-31,3.7285086592762896e-31,3.7265094589764097e-31,3.72451025867653e-31,3.7225110583766495e-31,3.7205118580767696e-31,3.7185126577768897e-31,3.7165134574770094e-31,3.7145142571771295e-31,3.7125150568772492e-31,3.7105158565773693e-31,3.7085166562774895e-31,3.706517455977609e-31,3.7045182556777293e-31,3.7025190553778494e-31,3.700519855077969e-31,3.698520654778089e-31,3.696521454478209e-31,3.694522254178329e-31,3.692523053878449e-31,3.6905238535785688e-31,3.688524653278689e-31,3.6865254529788086e-31,3.6845262526789287e-31,3.682527052379049e-31,3.6805278520791685e-31,3.6785286517792886e-31,3.6765294514794087e-31,3.6745302511795284e-31,3.6725310508796485e-31,3.670531850579768e-31,3.6685326502798883e-31,3.6665334499800084e-31,3.664534249680128e-31,3.6625350493802482e-31,3.6605358490803683e-31,3.658536648780488e-31,3.656537448480608e-31,3.654538248180728e-31,3.652539047880848e-31,3.650539847580968e-31,3.6485406472810877e-31,3.646541446981208e-31,3.644542246681328e-31,3.6425430463814477e-31,3.6405438460815678e-31,3.6385446457816875e-31,3.6365454454818076e-31,3.6345462451819277e-31,3.6325470448820474e-31,3.6305478445821675e-31,3.6285486442822876e-31,3.6265494439824073e-31,3.6245502436825274e-31,3.622551043382647e-31,3.620551843082767e-31,3.6185526427828873e-31,3.616553442483007e-31,3.614554242183127e-31,3.612555041883247e-31,3.610555841583367e-31,3.608556641283487e-31,3.6065574409836067e-31,3.604558240683727e-31,3.602559040383847e-31,3.6005598400839666e-31,3.5985606397840867e-31,3.5965614394842064e-31,3.5945622391843265e-31,3.5925630388844467e-31,3.5905638385845663e-31,3.5885646382846865e-31,3.5865654379848066e-31,3.5845662376849263e-31,3.5825670373850464e-31,3.580567837085166e-31,3.578568636785286e-31,3.5765694364854063e-31,3.574570236185526e-31,3.572571035885646e-31,3.570571835585766e-31,3.568572635285886e-31,3.566573434986006e-31,3.5645742346861257e-31,3.562575034386246e-31,3.560575834086366e-31,3.5585766337864856e-31,3.5565774334866057e-31,3.5545782331867254e-31,3.5525790328868455e-31,3.5505798325869656e-31,3.5485806322870853e-31,3.5465814319872054e-31,3.5445822316873255e-31,3.5425830313874452e-31,3.5405838310875653e-31,3.538584630787685e-31,3.536585430487805e-31,3.5345862301879253e-31,3.532587029888045e-31,3.530587829588165e-31,3.528588629288285e-31,3.526589428988405e-31,3.524590228688525e-31,3.5225910283886447e-31,3.5205918280887648e-31,3.518592627788885e-31,3.5165934274890046e-31,3.5145942271891247e-31,3.512595026889245e-31,3.5105958265893645e-31,3.5085966262894846e-31,3.5065974259896043e-31,3.5045982256897244e-31,3.5025990253898445e-31,3.500599825089964e-31,3.4986006247900843e-31,3.496601424490204e-31,3.494602224190324e-31,3.4926030238904442e-31,3.490603823590564e-31,3.488604623290684e-31,3.486605422990804e-31,3.484606222690924e-31,3.482607022391044e-31,3.4806078220911636e-31,3.4786086217912837e-31,3.476609421491404e-31,3.4746102211915235e-31,3.4726110208916437e-31,3.4706118205917638e-31,3.4686126202918835e-31,3.4666134199920036e-31,3.4646142196921232e-31,3.4626150193922434e-31,3.4606158190923635e-31,3.458616618792483e-31,3.4566174184926033e-31,3.4546182181927234e-31,3.452619017892843e-31,3.450619817592963e-31,3.448620617293083e-31,3.446621416993203e-31,3.444622216693323e-31,3.442623016393443e-31,3.440623816093563e-31,3.438624615793683e-31,3.4366254154938027e-31,3.434626215193923e-31,3.4326270148940425e-31,3.4306278145941626e-31,3.4286286142942827e-31,3.4266294139944024e-31,3.4246302136945225e-31,3.422631013394642e-31,3.4206318130947623e-31,3.4186326127948825e-31,3.416633412495002e-31,3.4146342121951223e-31,3.4126350118952424e-31,3.410635811595362e-31,3.408636611295482e-31,3.406637410995602e-31,3.404638210695722e-31,3.402639010395842e-31,3.4006398100959618e-31,3.398640609796082e-31,3.396641409496202e-31,3.3946422091963217e-31,3.392643008896442e-31,3.3906438085965615e-31,3.3886446082966816e-31,3.3866454079968017e-31,3.3846462076969214e-31,3.3826470073970415e-31,3.3806478070971616e-31,3.3786486067972813e-31,3.3766494064974014e-31,3.374650206197521e-31,3.3726510058976412e-31,3.3706518055977613e-31,3.368652605297881e-31,3.366653404998001e-31,3.364654204698121e-31,3.362655004398241e-31,3.360655804098361e-31,3.3586566037984807e-31,3.356657403498601e-31,3.354658203198721e-31,3.3526590028988406e-31,3.3506598025989608e-31,3.3486606022990804e-31,3.3466614019992006e-31,3.3446622016993207e-31,3.3426630013994404e-31,3.3406638010995605e-31,3.3386646007996806e-31,3.3366654004998003e-31,3.3346662001999204e-31,3.33266699990004e-31,3.33066779960016e-31,3.3286685993002803e-31,3.3266693990004e-31,3.32467019870052e-31,3.3226709984006402e-31,3.32067179810076e-31,3.31867259780088e-31,3.3166733975009997e-31,3.31467419720112e-31,3.31267499690124e-31,3.3106757966013596e-31,3.3086765963014797e-31,3.3066773960016e-31,3.3046781957017195e-31,3.3026789954018397e-31,3.3006797951019593e-31,3.2986805948020794e-31,3.2966813945021996e-31,3.2946821942023192e-31,3.2926829939024394e-31,3.290683793602559e-31,3.288684593302679e-31,3.2866853930027993e-31,3.284686192702919e-31,3.282686992403039e-31,3.280687792103159e-31,3.278688591803279e-31,3.276689391503399e-31,3.2746901912035187e-31,3.272690990903639e-31,3.270691790603759e-31,3.2686925903038786e-31,3.2666933900039987e-31,3.264694189704119e-31,3.2626949894042385e-31,3.2606957891043586e-31,3.2586965888044783e-31,3.2566973885045984e-31,3.2546981882047185e-31,3.252698987904838e-31,3.2506997876049583e-31,3.2487005873050785e-31,3.246701387005198e-31,3.2447021867053182e-31,3.242702986405438e-31,3.240703786105558e-31,3.238704585805678e-31,3.236705385505798e-31,3.234706185205918e-31,3.2327069849060376e-31,3.2307077846061578e-31,3.228708584306278e-31,3.2267093840063976e-31,3.2247101837065177e-31,3.222710983406638e-31,3.2207117831067575e-31,3.2187125828068776e-31,3.2167133825069973e-31,3.2147141822071174e-31,3.2127149819072375e-31,3.210715781607357e-31,3.2087165813074773e-31,3.2067173810075974e-31,3.204718180707717e-31,3.2027189804078372e-31,3.200719780107957e-31,3.198720579808077e-31,3.196721379508197e-31,3.194722179208317e-31,3.192722978908437e-31,3.190723778608557e-31,3.1887245783086767e-31,3.186725378008797e-31,3.1847261777089165e-31,3.1827269774090366e-31,3.1807277771091568e-31,3.1787285768092764e-31,3.1767293765093966e-31,3.1747301762095162e-31,3.1727309759096364e-31,3.1707317756097565e-31,3.168732575309876e-31,3.1667333750099963e-31,3.1647341747101164e-31,3.162734974410236e-31,3.160735774110356e-31,3.158736573810476e-31,3.156737373510596e-31,3.154738173210716e-31,3.152738972910836e-31,3.150739772610956e-31,3.148740572311076e-31,3.1467413720111957e-31,3.144742171711316e-31,3.1427429714114355e-31,3.1407437711115556e-31,3.1387445708116757e-31,3.1367453705117954e-31,3.1347461702119155e-31,3.1327469699120356e-31,3.1307477696121553e-31,3.1287485693122754e-31,3.126749369012395e-31,3.1247501687125152e-31,3.1227509684126354e-31,3.120751768112755e-31,3.118752567812875e-31,3.1167533675129953e-31,3.114754167213115e-31,3.112754966913235e-31,3.1107557666133548e-31,3.108756566313475e-31,3.106757366013595e-31,3.1047581657137147e-31,3.102758965413835e-31,3.1007597651139545e-31,3.0987605648140746e-31,3.0967613645141947e-31,3.0947621642143144e-31,3.0927629639144345e-31,3.0907637636145546e-31,3.0887645633146743e-31,3.0867653630147944e-31,3.084766162714914e-31,3.082766962415034e-31,3.0807677621151543e-31,3.078768561815274e-31,3.076769361515394e-31,3.0747701612155142e-31,3.072770960915634e-31,3.070771760615754e-31,3.0687725603158737e-31,3.066773360015994e-31,3.064774159716114e-31,3.0627749594162336e-31,3.0607757591163538e-31,3.058776558816474e-31,3.0567773585165936e-31,3.0547781582167137e-31,3.0527789579168334e-31,3.0507797576169535e-31,3.0487805573170736e-31,3.0467813570171933e-31,3.0447821567173134e-31,3.042782956417433e-31,3.040783756117553e-31,3.0387845558176733e-31,3.036785355517793e-31,3.034786155217913e-31,3.032786954918033e-31,3.030787754618153e-31,3.028788554318273e-31,3.0267893540183927e-31,3.024790153718513e-31,3.022790953418633e-31,3.0207917531187526e-31,3.0187925528188727e-31,3.016793352518993e-31,3.0147941522191125e-31,3.0127949519192326e-31,3.0107957516193523e-31,3.0087965513194724e-31,3.0067973510195926e-31,3.0047981507197122e-31,3.0027989504198324e-31,3.0007997501199525e-31,2.998800549820072e-31,2.9968013495201923e-31,2.994802149220312e-31,2.992802948920432e-31,2.990803748620552e-31,2.988804548320672e-31,2.986805348020792e-31,2.984806147720912e-31,2.982806947421032e-31,2.980807747121152e-31,2.9788085468212716e-31,2.9768093465213917e-31,2.974810146221512e-31,2.9728109459216315e-31,2.9708117456217516e-31,2.9688125453218713e-31,2.9668133450219914e-31,2.9648141447221115e-31,2.962814944422231e-31,2.9608157441223513e-31,2.9588165438224714e-31,2.956817343522591e-31,2.9548181432227112e-31,2.952818942922831e-31,2.950819742622951e-31,2.948820542323071e-31,2.946821342023191e-31,2.944822141723311e-31,2.942822941423431e-31,2.9408237411235508e-31,2.938824540823671e-31,2.9368253405237905e-31,2.9348261402239107e-31,2.932826939924031e-31,2.9308277396241505e-31,2.9288285393242706e-31,2.9268293390243907e-31,2.9248301387245104e-31,2.9228309384246305e-31,2.92083173812475e-31,2.9188325378248703e-31,2.9168333375249904e-31,2.91483413722511e-31,2.91283493692523e-31,2.91083573662535e-31,2.90883653632547e-31,2.90683733602559e-31,2.90483813572571e-31,2.90283893542583e-31,2.90083973512595e-31,2.8988405348260697e-31,2.89684133452619e-31,2.8948421342263095e-31,2.8928429339264296e-31,2.8908437336265498e-31,2.8888445333266694e-31,2.8868453330267896e-31,2.8848461327269097e-31,2.8828469324270293e-31,2.8808477321271495e-31,2.878848531827269e-31,2.8768493315273893e-31,2.8748501312275094e-31,2.872850930927629e-31,2.870851730627749e-31,2.8688525303278693e-31,2.866853330027989e-31,2.864854129728109e-31,2.8628549294282288e-31,2.860855729128349e-31,2.858856528828469e-31,2.8568573285285887e-31,2.854858128228709e-31,2.8528589279288285e-31,2.8508597276289486e-31,2.8488605273290687e-31,2.8468613270291884e-31,2.8448621267293085e-31,2.8428629264294286e-31,2.8408637261295483e-31,2.8388645258296684e-31,2.836865325529788e-31,2.8348661252299082e-31,2.8328669249300284e-31,2.830867724630148e-31,2.828868524330268e-31,2.8268693240303883e-31,2.824870123730508e-31,2.822870923430628e-31,2.8208717231307477e-31,2.818872522830868e-31,2.816873322530988e-31,2.8148741222311077e-31,2.8128749219312278e-31,2.810875721631348e-31,2.8088765213314676e-31,2.8068773210315877e-31,2.8048781207317074e-31,2.8028789204318275e-31,2.8008797201319476e-31,2.7988805198320673e-31,2.7968813195321874e-31,2.7948821192323075e-31,2.792882918932427e-31,2.7908837186325473e-31,2.788884518332667e-31,2.786885318032787e-31,2.7848861177329072e-31,2.782886917433027e-31,2.780887717133147e-31,2.7788885168332667e-31,2.776889316533387e-31,2.774890116233507e-31,2.7728909159336266e-31,2.7708917156337467e-31,2.768892515333867e-31,2.7668933150339865e-31,2.7648941147341067e-31,2.7628949144342263e-31,2.7608957141343465e-31,2.7588965138344666e-31,2.7568973135345863e-31,2.7548981132347064e-31,2.7528989129348265e-31,2.750899712634946e-31,2.7489005123350663e-31,2.746901312035186e-31,2.744902111735306e-31,2.742902911435426e-31,2.740903711135546e-31,2.738904510835666e-31,2.736905310535786e-31,2.734906110235906e-31,2.732906909936026e-31,2.7309077096361456e-31,2.7289085093362657e-31,2.726909309036386e-31,2.7249101087365055e-31,2.7229109084366256e-31,2.7209117081367453e-31,2.7189125078368654e-31,2.7169133075369855e-31,2.7149141072371052e-31,2.7129149069372253e-31,2.7109157066373455e-31,2.708916506337465e-31,2.7069173060375853e-31,2.704918105737705e-31,2.702918905437825e-31,2.700919705137945e-31,2.698920504838065e-31,2.696921304538185e-31,2.694922104238305e-31,2.6929229039384248e-31,2.690923703638545e-31,2.6889245033386646e-31,2.6869253030387847e-31,2.684926102738905e-31,2.6829269024390245e-31,2.6809277021391446e-31,2.6789285018392647e-31,2.6769293015393844e-31,2.6749301012395045e-31,2.672930900939624e-31,2.6709317006397443e-31,2.6689325003398644e-31,2.666933300039984e-31,2.6649340997401042e-31,2.6629348994402243e-31,2.660935699140344e-31,2.658936498840464e-31,2.656937298540584e-31,2.654938098240704e-31,2.652938897940824e-31,2.6509396976409437e-31,2.648940497341064e-31,2.6469412970411835e-31,2.6449420967413037e-31,2.6429428964414238e-31,2.6409436961415435e-31,2.6389444958416636e-31,2.6369452955417837e-31,2.6349460952419034e-31,2.6329468949420235e-31,2.630947694642143e-31,2.6289484943422633e-31,2.6269492940423834e-31,2.624950093742503e-31,2.622950893442623e-31,2.6209516931427433e-31,2.618952492842863e-31,2.616953292542983e-31,2.614954092243103e-31,2.612954891943223e-31,2.610955691643343e-31,2.6089564913434627e-31,2.606957291043583e-31,2.604958090743703e-31,2.6029588904438226e-31,2.6009596901439427e-31,2.5989604898440624e-31,2.5969612895441825e-31,2.5949620892443027e-31,2.5929628889444223e-31,2.5909636886445425e-31,2.588964488344662e-31,2.5869652880447823e-31,2.5849660877449024e-31,2.582966887445022e-31,2.580967687145142e-31,2.5789684868452623e-31,2.576969286545382e-31,2.574970086245502e-31,2.5729708859456218e-31,2.570971685645742e-31,2.568972485345862e-31,2.5669732850459817e-31,2.564974084746102e-31,2.562974884446222e-31,2.5609756841463416e-31,2.5589764838464617e-31,2.5569772835465814e-31,2.5549780832467015e-31,2.5529788829468216e-31,2.5509796826469413e-31,2.5489804823470614e-31,2.5469812820471815e-31,2.5449820817473012e-31,2.5429828814474213e-31,2.540983681147541e-31,2.538984480847661e-31,2.5369852805477813e-31,2.534986080247901e-31,2.532986879948021e-31,2.5309876796481407e-31,2.528988479348261e-31,2.526989279048381e-31,2.5249900787485007e-31,2.5229908784486208e-31,2.520991678148741e-31,2.5189924778488606e-31,2.5169932775489807e-31,2.5149940772491004e-31,2.5129948769492205e-31,2.5109956766493406e-31,2.5089964763494603e-31,2.5069972760495804e-31,2.5049980757497005e-31,2.50299887544982e-31,2.5009996751499403e-31,2.49900047485006e-31,2.49700127455018e-31,2.4950020742503002e-31,2.49300287395042e-31,2.49100367365054e-31,2.48900447335066e-31,2.48700527305078e-31,2.4850060727509e-31,2.4830068724510196e-31,2.4810076721511397e-31,2.47900847185126e-31,2.4770092715513795e-31,2.4750100712514997e-31,2.4730108709516198e-31,2.4710116706517395e-31,2.4690124703518596e-31,2.4670132700519793e-31,2.4650140697520994e-31,2.4630148694522195e-31,2.461015669152339e-31,2.4590164688524593e-31,2.457017268552579e-31,2.455018068252699e-31,2.453018867952819e-31,2.451019667652939e-31,2.449020467353059e-31,2.447021267053179e-31,2.445022066753299e-31,2.443022866453419e-31,2.4410236661535386e-31,2.4390244658536587e-31,2.437025265553779e-31,2.4350260652538985e-31,2.4330268649540186e-31,2.4310276646541387e-31,2.4290284643542584e-31,2.4270292640543785e-31,2.4250300637544982e-31,2.4230308634546183e-31,2.4210316631547385e-31,2.419032462854858e-31,2.4170332625549783e-31,2.4150340622550984e-31,2.413034861955218e-31,2.411035661655338e-31,2.409036461355458e-31,2.407037261055578e-31,2.405038060755698e-31,2.4030388604558178e-31,2.401039660155938e-31,2.3990404598560576e-31,2.3970412595561777e-31,2.395042059256298e-31,2.3930428589564175e-31,2.3910436586565376e-31,2.3890444583566577e-31,2.3870452580567774e-31,2.3850460577568975e-31,2.383046857457017e-31,2.3810476571571373e-31,2.3790484568572574e-31,2.377049256557377e-31,2.3750500562574972e-31,2.3730508559576173e-31,2.371051655657737e-31,2.369052455357857e-31,2.367053255057977e-31,2.365054054758097e-31,2.363054854458217e-31,2.3610556541583367e-31,2.359056453858457e-31,2.357057253558577e-31,2.3550580532586966e-31,2.3530588529588168e-31,2.3510596526589364e-31,2.3490604523590566e-31,2.3470612520591767e-31,2.3450620517592964e-31,2.3430628514594165e-31,2.3410636511595366e-31,2.3390644508596563e-31,2.3370652505597764e-31,2.335066050259896e-31,2.333066849960016e-31,2.3310676496601363e-31,2.329068449360256e-31,2.327069249060376e-31,2.325070048760496e-31,2.323070848460616e-31,2.321071648160736e-31,2.3190724478608557e-31,2.317073247560976e-31,2.315074047261096e-31,2.3130748469612156e-31,2.3110756466613357e-31,2.3090764463614554e-31,2.3070772460615755e-31,2.3050780457616957e-31,2.3030788454618153e-31,2.3010796451619355e-31,2.2990804448620556e-31,2.2970812445621752e-31,2.2950820442622954e-31,2.293082843962415e-31,2.291083643662535e-31,2.2890844433626553e-31,2.287085243062775e-31,2.285086042762895e-31,2.283086842463015e-31,2.281087642163135e-31,2.279088441863255e-31,2.2770892415633747e-31,2.275090041263495e-31,2.273090840963615e-31,2.2710916406637346e-31,2.2690924403638547e-31,2.2670932400639744e-31,2.2650940397640945e-31,2.2630948394642146e-31,2.2610956391643343e-31,2.2590964388644544e-31,2.2570972385645745e-31,2.255098038264694e-31,2.2530988379648143e-31,2.251099637664934e-31,2.249100437365054e-31,2.2471012370651743e-31,2.245102036765294e-31,2.243102836465414e-31,2.241103636165534e-31,2.239104435865654e-31,2.237105235565774e-31,2.2351060352658936e-31,2.2331068349660138e-31,2.231107634666134e-31,2.2291084343662536e-31,2.2271092340663737e-31,2.225110033766494e-31,2.2231108334666135e-31,2.2211116331667336e-31,2.2191124328668533e-31,2.2171132325669734e-31,2.2151140322670935e-31,2.213114831967213e-31,2.2111156316673333e-31,2.209116431367453e-31,2.207117231067573e-31,2.2051180307676932e-31,2.203118830467813e-31,2.201119630167933e-31,2.199120429868053e-31,2.197121229568173e-31,2.195122029268293e-31,2.1931228289684126e-31,2.1911236286685327e-31,2.189124428368653e-31,2.1871252280687725e-31,2.1851260277688926e-31,2.1831268274690128e-31,2.1811276271691324e-31,2.1791284268692526e-31,2.1771292265693722e-31,2.1751300262694924e-31,2.1731308259696125e-31,2.171131625669732e-31,2.1691324253698523e-31,2.1671332250699724e-31,2.165134024770092e-31,2.163134824470212e-31,2.161135624170332e-31,2.159136423870452e-31,2.157137223570572e-31,2.155138023270692e-31,2.153138822970812e-31,2.151139622670932e-31,2.1491404223710517e-31,2.147141222071172e-31,2.1451420217712915e-31,2.1431428214714116e-31,2.1411436211715317e-31,2.1391444208716514e-31,2.1371452205717715e-31,2.135146020271891e-31,2.1331468199720113e-31,2.1311476196721314e-31,2.129148419372251e-31,2.1271492190723712e-31,2.1251500187724914e-31,2.123150818472611e-31,2.121151618172731e-31,2.119152417872851e-31,2.117153217572971e-31,2.115154017273091e-31,2.1131548169732108e-31,2.111155616673331e-31,2.109156416373451e-31,2.1071572160735707e-31,2.105158015773691e-31,2.1031588154738105e-31,2.1011596151739306e-31,2.0991604148740507e-31,2.0971612145741704e-31,2.0951620142742905e-31,2.0931628139744106e-31,2.0911636136745303e-31,2.0891644133746504e-31,2.08716521307477e-31,2.08516601277489e-31,2.0831668124750103e-31,2.08116761217513e-31,2.07916841187525e-31,2.07716921157537e-31,2.07517001127549e-31,2.07317081097561e-31,2.0711716106757297e-31,2.06917241037585e-31,2.06717321007597e-31,2.0651740097760896e-31,2.0631748094762098e-31,2.0611756091763294e-31,2.0591764088764496e-31,2.0571772085765697e-31,2.0551780082766894e-31,2.0531788079768095e-31,2.0511796076769296e-31,2.0491804073770493e-31,2.0471812070771694e-31,2.045182006777289e-31,2.043182806477409e-31,2.0411836061775293e-31,2.039184405877649e-31,2.037185205577769e-31,2.035186005277889e-31,2.033186804978009e-31,2.031187604678129e-31,2.0291884043782487e-31,2.027189204078369e-31,2.025190003778489e-31,2.0231908034786086e-31,2.0211916031787287e-31,2.019192402878849e-31,2.0171932025789685e-31,2.0151940022790886e-31,2.0131948019792083e-31,2.0111956016793284e-31,2.0091964013794486e-31,2.0071972010795682e-31,2.0051980007796884e-31,2.003198800479808e-31,2.001199600179928e-31,1.9992003998800483e-31,1.997201199580168e-31,1.995201999280288e-31,1.993202798980408e-31,1.991203598680528e-31,1.989204398380648e-31,1.9872051980807677e-31,1.985205997780888e-31,1.983206797481008e-31,1.9812075971811276e-31,1.9792083968812477e-31,1.977209196581368e-31,1.9752099962814875e-31,1.9732107959816076e-31,1.9712115956817275e-31,1.9692123953818474e-31,1.9672131950819673e-31,1.9652139947820874e-31,1.9632147944822073e-31,1.9612155941823272e-31,1.9592163938824471e-31,1.9572171935825672e-31,1.9552179932826871e-31,1.953218792982807e-31,1.951219592682927e-31,1.9492203923830468e-31,1.947221192083167e-31,1.9452219917832869e-31,1.9432227914834068e-31,1.9412235911835267e-31,1.9392243908836468e-31,1.9372251905837667e-31,1.9352259902838866e-31,1.9332267899840065e-31,1.9312275896841266e-31,1.9292283893842465e-31,1.9272291890843664e-31,1.9252299887844863e-31,1.9232307884846064e-31,1.9212315881847263e-31,1.9192323878848462e-31,1.917233187584966e-31,1.9152339872850862e-31,1.9132347869852061e-31,1.911235586685326e-31,1.909236386385446e-31,1.907237186085566e-31,1.905237985785686e-31,1.9032387854858058e-31,1.9012395851859257e-31,1.8992403848860458e-31,1.8972411845861657e-31,1.8952419842862856e-31,1.8932427839864055e-31,1.8912435836865257e-31,1.8892443833866456e-31,1.8872451830867655e-31,1.8852459827868854e-31,1.8832467824870052e-31,1.8812475821871254e-31,1.8792483818872453e-31,1.8772491815873652e-31,1.875249981287485e-31,1.8732507809876052e-31,1.871251580687725e-31,1.869252380387845e-31,1.8672531800879649e-31,1.865253979788085e-31,1.863254779488205e-31,1.8612555791883248e-31,1.8592563788884447e-31,1.8572571785885648e-31,1.8552579782886847e-31,1.8532587779888046e-31,1.8512595776889245e-31,1.8492603773890446e-31,1.8472611770891645e-31,1.8452619767892844e-31,1.8432627764894043e-31,1.8412635761895244e-31,1.8392643758896443e-31,1.8372651755897642e-31,1.8352659752898841e-31,1.8332667749900043e-31,1.8312675746901242e-31,1.829268374390244e-31,1.827269174090364e-31,1.825269973790484e-31,1.823270773490604e-31,1.8212715731907239e-31,1.8192723728908438e-31,1.8172731725909637e-31,1.8152739722910838e-31,1.8132747719912037e-31,1.8112755716913236e-31,1.8092763713914435e-31,1.8072771710915636e-31,1.8052779707916835e-31,1.8032787704918034e-31,1.8012795701919233e-31,1.7992803698920434e-31,1.7972811695921633e-31,1.7952819692922832e-31,1.793282768992403e-31,1.7912835686925232e-31,1.7892843683926431e-31,1.787285168092763e-31,1.785285967792883e-31,1.783286767493003e-31,1.781287567193123e-31,1.7792883668932428e-31,1.7772891665933627e-31,1.7752899662934829e-31,1.7732907659936028e-31,1.7712915656937226e-31,1.7692923653938425e-31,1.7672931650939627e-31,1.7652939647940826e-31,1.7632947644942025e-31,1.7612955641943224e-31,1.7592963638944423e-31,1.7572971635945624e-31,1.7552979632946823e-31,1.7532987629948022e-31,1.751299562694922e-31,1.7493003623950422e-31,1.747301162095162e-31,1.745301961795282e-31,1.7433027614954019e-31,1.741303561195522e-31,1.739304360895642e-31,1.7373051605957618e-31,1.7353059602958817e-31,1.7333067599960018e-31,1.7313075596961217e-31,1.7293083593962416e-31,1.7273091590963615e-31,1.7253099587964816e-31,1.7233107584966015e-31,1.7213115581967214e-31,1.7193123578968413e-31,1.7173131575969614e-31,1.7153139572970813e-31,1.7133147569972012e-31,1.7113155566973211e-31,1.7093163563974413e-31,1.7073171560975612e-31,1.705317955797681e-31,1.703318755497801e-31,1.701319555197921e-31,1.699320354898041e-31,1.6973211545981609e-31,1.6953219542982808e-31,1.6933227539984007e-31,1.6913235536985208e-31,1.6893243533986407e-31,1.6873251530987606e-31,1.6853259527988805e-31,1.6833267524990006e-31,1.6813275521991205e-31,1.6793283518992404e-31,1.6773291515993603e-31,1.6753299512994804e-31,1.6733307509996003e-31,1.6713315506997202e-31,1.6693323503998401e-31,1.6673331500999602e-31,1.6653339498000801e-31,1.6633347495002e-31,1.66133554920032e-31,1.65933634890044e-31,1.65733714860056e-31,1.6553379483006798e-31,1.6533387480007997e-31,1.6513395477009199e-31,1.6493403474010398e-31,1.6473411471011597e-31,1.6453419468012796e-31,1.6433427465013997e-31,1.6413435462015196e-31,1.6393443459016395e-31,1.6373451456017594e-31,1.6353459453018795e-31,1.6333467450019994e-31,1.6313475447021193e-31,1.6293483444022392e-31,1.627349144102359e-31,1.6253499438024792e-31,1.623350743502599e-31,1.621351543202719e-31,1.619352342902839e-31,1.617353142602959e-31,1.615353942303079e-31,1.6133547420031988e-31,1.6113555417033187e-31,1.6093563414034388e-31,1.6073571411035587e-31,1.6053579408036786e-31,1.6033587405037985e-31,1.6013595402039186e-31,1.5993603399040385e-31,1.5973611396041584e-31,1.5953619393042783e-31,1.5933627390043985e-31,1.5913635387045184e-31,1.5893643384046383e-31,1.5873651381047582e-31,1.5853659378048783e-31,1.5833667375049982e-31,1.581367537205118e-31,1.579368336905238e-31,1.577369136605358e-31,1.575369936305478e-31,1.5733707360055979e-31,1.5713715357057178e-31,1.569372335405838e-31,1.5673731351059578e-31,1.5653739348060777e-31,1.5633747345061976e-31,1.5613755342063175e-31,1.5593763339064376e-31,1.5573771336065575e-31,1.5553779333066774e-31,1.5533787330067973e-31,1.5513795327069174e-31,1.5493803324070373e-31,1.5473811321071572e-31,1.5453819318072771e-31,1.5433827315073972e-31,1.5413835312075171e-31,1.539384330907637e-31,1.537385130607757e-31,1.535385930307877e-31,1.533386730007997e-31,1.5313875297081169e-31,1.5293883294082368e-31,1.5273891291083569e-31,1.5253899288084768e-31,1.5233907285085967e-31,1.5213915282087166e-31,1.5193923279088367e-31,1.5173931276089566e-31,1.5153939273090765e-31,1.5133947270091964e-31,1.5113955267093165e-31,1.5093963264094364e-31,1.5073971261095563e-31,1.5053979258096762e-31,1.5033987255097963e-31,1.5013995252099162e-31,1.4994003249100361e-31,1.497401124610156e-31,1.495401924310276e-31,1.493402724010396e-31,1.491403523710516e-31,1.4894043234106358e-31,1.4874051231107557e-31,1.4854059228108758e-31,1.4834067225109957e-31,1.4814075222111156e-31,1.4794083219112355e-31,1.4774091216113557e-31,1.4754099213114756e-31,1.4734107210115955e-31,1.4714115207117154e-31,1.4694123204118355e-31,1.4674131201119554e-31,1.4654139198120753e-31,1.4634147195121952e-31,1.4614155192123153e-31,1.4594163189124352e-31,1.457417118612555e-31,1.455417918312675e-31,1.453418718012795e-31,1.451419517712915e-31,1.449420317413035e-31,1.4474211171131548e-31,1.445421916813275e-31,1.4434227165133948e-31,1.4414235162135147e-31,1.4394243159136346e-31,1.4374251156137545e-31,1.4354259153138746e-31,1.4334267150139945e-31,1.4314275147141144e-31,1.4294283144142343e-31,1.4274291141143544e-31,1.4254299138144743e-31,1.4234307135145942e-31,1.4214315132147141e-31,1.4194323129148343e-31,1.4174331126149542e-31,1.415433912315074e-31,1.413434712015194e-31,1.411435511715314e-31,1.409436311415434e-31,1.4074371111155539e-31,1.4054379108156738e-31,1.4034387105157939e-31,1.4014395102159138e-31,1.3994403099160337e-31,1.3974411096161536e-31,1.3954419093162737e-31,1.3934427090163936e-31,1.3914435087165135e-31,1.3894443084166334e-31,1.3874451081167535e-31,1.3854459078168734e-31,1.3834467075169933e-31,1.3814475072171132e-31,1.3794483069172333e-31,1.3774491066173532e-31,1.3754499063174731e-31,1.373450706017593e-31,1.371451505717713e-31,1.369452305417833e-31,1.367453105117953e-31,1.3654539048180728e-31,1.3634547045181927e-31,1.3614555042183129e-31,1.3594563039184328e-31,1.3574571036185527e-31,1.3554579033186725e-31,1.3534587030187927e-31,1.3514595027189126e-31,1.3494603024190325e-31,1.3474611021191524e-31,1.3454619018192725e-31,1.3434627015193924e-31,1.3414635012195123e-31,1.3394643009196322e-31,1.3374651006197523e-31,1.3354659003198722e-31,1.333466700019992e-31,1.331467499720112e-31,1.3294682994202321e-31,1.327469099120352e-31,1.325469898820472e-31,1.3234706985205918e-31,1.321471498220712e-31,1.3194722979208318e-31,1.3174730976209517e-31,1.3154738973210716e-31,1.3134746970211917e-31,1.3114754967213116e-31,1.3094762964214315e-31,1.3074770961215514e-31,1.3054778958216713e-31,1.3034786955217915e-31,1.3014794952219114e-31,1.2994802949220312e-31,1.2974810946221511e-31,1.2954818943222713e-31,1.2934826940223912e-31,1.291483493722511e-31,1.289484293422631e-31,1.287485093122751e-31,1.285485892822871e-31,1.2834866925229909e-31,1.2814874922231108e-31,1.279488291923231e-31,1.2774890916233508e-31,1.2754898913234707e-31,1.2734906910235906e-31,1.2714914907237107e-31,1.2694922904238306e-31,1.2674930901239505e-31,1.2654938898240704e-31,1.2634946895241905e-31,1.2614954892243104e-31,1.2594962889244303e-31,1.2574970886245502e-31,1.2554978883246703e-31,1.2534986880247902e-31,1.2514994877249101e-31,1.24950028742503e-31,1.2475010871251502e-31,1.24550188682527e-31,1.24350268652539e-31,1.2415034862255098e-31,1.2395042859256297e-31,1.2375050856257499e-31,1.2355058853258698e-31,1.2335066850259897e-31,1.2315074847261096e-31,1.2295082844262297e-31,1.2275090841263496e-31,1.2255098838264695e-31,1.2235106835265894e-31,1.2215114832267095e-31,1.2195122829268294e-31,1.2175130826269493e-31,1.2155138823270692e-31,1.2135146820271893e-31,1.2115154817273092e-31,1.209516281427429e-31,1.207517081127549e-31,1.2055178808276691e-31,1.203518680527789e-31,1.201519480227909e-31,1.1995202799280288e-31,1.197521079628149e-31,1.1955218793282688e-31,1.1935226790283887e-31,1.1915234787285086e-31,1.1895242784286287e-31,1.1875250781287486e-31,1.1855258778288685e-31,1.1835266775289884e-31,1.1815274772291086e-31,1.1795282769292285e-31,1.1775290766293484e-31,1.1755298763294683e-31,1.1735306760295882e-31,1.1715314757297083e-31,1.1695322754298282e-31,1.167533075129948e-31,1.165533874830068e-31,1.163534674530188e-31,1.161535474230308e-31,1.1595362739304279e-31,1.1575370736305478e-31,1.155537873330668e-31,1.1535386730307878e-31,1.1515394727309077e-31,1.1495402724310276e-31,1.1475410721311477e-31,1.1455418718312676e-31,1.1435426715313875e-31,1.1415434712315074e-31,1.1395442709316275e-31,1.1375450706317474e-31,1.1355458703318673e-31,1.1335466700319872e-31,1.1315474697321073e-31,1.1295482694322272e-31,1.1275490691323471e-31,1.125549868832467e-31,1.1235506685325872e-31,1.121551468232707e-31,1.119552267932827e-31,1.1175530676329469e-31,1.1155538673330668e-31,1.1135546670331869e-31,1.1115554667333068e-31,1.1095562664334267e-31,1.1075570661335466e-31,1.1055578658336667e-31,1.1035586655337866e-31,1.1015594652339065e-31,1.0995602649340264e-31,1.0975610646341465e-31,1.0955618643342664e-31,1.0935626640343863e-31,1.0915634637345062e-31,1.0895642634346263e-31,1.0875650631347462e-31,1.0855658628348661e-31,1.083566662534986e-31,1.0815674622351061e-31,1.079568261935226e-31,1.077569061635346e-31,1.0755698613354658e-31,1.073570661035586e-31,1.0715714607357058e-31,1.0695722604358257e-31,1.0675730601359456e-31,1.0655738598360658e-31,1.0635746595361857e-31,1.0615754592363056e-31,1.0595762589364255e-31,1.0575770586365456e-31,1.0555778583366655e-31,1.0535786580367854e-31,1.0515794577369053e-31,1.0495802574370252e-31,1.0475810571371453e-31,1.0455818568372652e-31,1.043582656537385e-31,1.041583456237505e-31,1.039584255937625e-31,1.037585055637745e-31,1.035585855337865e-31,1.0335866550379848e-31,1.031587454738105e-31,1.0295882544382248e-31,1.0275890541383447e-31,1.0255898538384646e-31,1.0235906535385847e-31,1.0215914532387046e-31,1.0195922529388245e-31,1.0175930526389444e-31,1.0155938523390645e-31,1.0135946520391844e-31,1.0115954517393043e-31,1.0095962514394242e-31,1.0075970511395444e-31,1.0055978508396643e-31,1.0035986505397842e-31,1.001599450239904e-31,9.996002499400242e-32,9.97601049640144e-32,9.95601849340264e-32,9.936026490403839e-32,9.91603448740504e-32,9.896042484406239e-32,9.876050481407438e-32,9.856058478408637e-32,9.836066475409837e-32,9.816074472411036e-32,9.796082469412236e-32,9.776090466413435e-32,9.756098463414635e-32,9.736106460415834e-32,9.716114457417034e-32,9.696122454418233e-32,9.676130451419433e-32,9.656138448420632e-32,9.636146445421832e-32,9.616154442423031e-32,9.596162439424231e-32,9.57617043642543e-32,9.55617843342663e-32,9.536186430427829e-32,9.51619442742903e-32,9.496202424430228e-32,9.476210421431429e-32,9.456218418432628e-32,9.436226415433828e-32,9.416234412435027e-32,9.396242409436227e-32,9.376250406437426e-32,9.356258403438626e-32,9.336266400439825e-32,9.316274397441025e-32,9.296282394442224e-32,9.276290391443424e-32,9.256298388444623e-32,9.236306385445823e-32,9.216314382447022e-32,9.196322379448221e-32,9.176330376449421e-32,9.15633837345062e-32,9.13634637045182e-32,9.116354367453019e-32,9.096362364454219e-32,9.076370361455418e-32,9.056378358456618e-32,9.036386355457817e-32,9.016394352459017e-32,8.996402349460216e-32,8.976410346461416e-32,8.956418343462615e-32,8.936426340463815e-32,8.916434337465014e-32,8.896442334466215e-32,8.876450331467414e-32,8.856458328468614e-32,8.836466325469813e-32,8.816474322471013e-32,8.796482319472212e-32,8.776490316473412e-32,8.756498313474611e-32,8.736506310475811e-32,8.71651430747701e-32,8.69652230447821e-32,8.676530301479409e-32,8.656538298480609e-32,8.636546295481808e-32,8.616554292483008e-32,8.596562289484207e-32,8.576570286485406e-32,8.556578283486606e-32,8.536586280487805e-32,8.516594277489005e-32,8.496602274490204e-32,8.476610271491404e-32,8.456618268492603e-32,8.436626265493803e-32,8.416634262495002e-32,8.396642259496202e-32,8.376650256497401e-32,8.356658253498601e-32,8.3366662504998e-32,8.316674247501e-32,8.2966822445022e-32,8.2766902415034e-32,8.256698238504599e-32,8.236706235505799e-32,8.216714232506998e-32,8.196722229508198e-32,8.176730226509397e-32,8.156738223510597e-32,8.136746220511796e-32,8.116754217512996e-32,8.096762214514195e-32,8.076770211515395e-32,8.056778208516594e-32,8.036786205517794e-32,8.016794202518993e-32,7.996802199520193e-32,7.976810196521392e-32,7.956818193522592e-32,7.936826190523791e-32,7.91683418752499e-32,7.89684218452619e-32,7.876850181527389e-32,7.856858178528589e-32,7.836866175529788e-32,7.816874172530988e-32,7.796882169532187e-32,7.776890166533387e-32,7.756898163534586e-32,7.736906160535787e-32,7.716914157536985e-32,7.696922154538186e-32,7.676930151539385e-32,7.656938148540585e-32,7.636946145541784e-32,7.616954142542984e-32,7.596962139544183e-32,7.576970136545383e-32,7.556978133546582e-32,7.536986130547782e-32,7.516994127548981e-32,7.497002124550181e-32,7.47701012155138e-32,7.45701811855258e-32,7.437026115553779e-32,7.417034112554979e-32,7.397042109556178e-32,7.377050106557378e-32,7.357058103558577e-32,7.337066100559777e-32,7.317074097560976e-32,7.297082094562175e-32,7.277090091563375e-32,7.257098088564574e-32,7.237106085565774e-32,7.217114082566973e-32,7.197122079568173e-32,7.177130076569372e-32,7.157138073570572e-32,7.137146070571771e-32,7.117154067572972e-32,7.09716206457417e-32,7.077170061575371e-32,7.05717805857657e-32,7.03718605557777e-32,7.017194052578969e-32,6.997202049580169e-32,6.977210046581368e-32,6.957218043582568e-32,6.937226040583767e-32,6.917234037584967e-32,6.897242034586166e-32,6.877250031587366e-32,6.857258028588565e-32,6.837266025589765e-32,6.817274022590964e-32,6.797282019592164e-32,6.777290016593363e-32,6.757298013594563e-32,6.737306010595762e-32,6.717314007596962e-32,6.697322004598161e-32,6.677330001599361e-32,6.65733799860056e-32,6.637345995601759e-32,6.617353992602959e-32,6.597361989604158e-32,6.577369986605358e-32,6.557377983606557e-32,6.537385980607758e-32,6.517393977608957e-32,6.497401974610157e-32,6.477409971611356e-32,6.457417968612556e-32,6.437425965613755e-32,6.417433962614955e-32,6.397441959616154e-32,6.377449956617354e-32,6.357457953618553e-32,6.337465950619753e-32,6.317473947620952e-32,6.297481944622152e-32,6.277489941623351e-32,6.257497938624551e-32,6.23750593562575e-32,6.21751393262695e-32,6.197521929628149e-32,6.177529926629349e-32,6.157537923630548e-32,6.137545920631748e-32,6.117553917632947e-32,6.097561914634147e-32,6.077569911635346e-32,6.057577908636546e-32,6.037585905637745e-32,6.017593902638945e-32,5.997601899640144e-32,5.977609896641343e-32,5.957617893642544e-32,5.937625890643743e-32,5.917633887644943e-32,5.897641884646142e-32,5.877649881647342e-32,5.857657878648541e-32,5.837665875649741e-32,5.81767387265094e-32,5.79768186965214e-32,5.777689866653339e-32,5.757697863654539e-32,5.737705860655738e-32,5.717713857656938e-32,5.697721854658137e-32,5.677729851659337e-32,5.657737848660536e-32,5.637745845661736e-32,5.617753842662935e-32,5.597761839664135e-32,5.577769836665334e-32,5.557777833666534e-32,5.537785830667733e-32,5.517793827668933e-32,5.497801824670132e-32,5.477809821671332e-32,5.457817818672531e-32,5.437825815673731e-32,5.41783381267493e-32,5.39784180967613e-32,5.37784980667733e-32,5.357857803678528e-32,5.337865800679729e-32,5.317873797680928e-32,5.297881794682128e-32,5.277889791683327e-32,5.257897788684527e-32,5.237905785685726e-32,5.217913782686926e-32,5.197921779688125e-32,5.177929776689325e-32,5.157937773690524e-32,5.137945770691724e-32,5.117953767692923e-32,5.097961764694123e-32,5.077969761695322e-32,5.057977758696522e-32,5.037985755697721e-32,5.017993752698921e-32,4.99800174970012e-32,4.97800974670132e-32,4.958017743702519e-32,4.938025740703719e-32,4.9180337377049183e-32,4.898041734706118e-32,4.8780497317073173e-32,4.858057728708517e-32,4.8380657257097164e-32,4.818073722710916e-32,4.7980817197121155e-32,4.778089716713315e-32,4.7580977137145146e-32,4.738105710715714e-32,4.7181137077169136e-32,4.698121704718113e-32,4.6781297017193127e-32,4.658137698720512e-32,4.638145695721712e-32,4.6181536927229113e-32,4.598161689724111e-32,4.5781696867253104e-32,4.55817768372651e-32,4.5381856807277095e-32,4.518193677728909e-32,4.4982016747301085e-32,4.478209671731308e-32,4.4582176687325076e-32,4.438225665733707e-32,4.4182336627349067e-32,4.3982416597361057e-32,4.378249656737305e-32,4.3582576537385047e-32,4.338265650739704e-32,4.318273647740904e-32,4.2982816447421033e-32,4.278289641743303e-32,4.2582976387445024e-32,4.238305635745702e-32,4.2183136327469015e-32,4.198321629748101e-32,4.1783296267493005e-32,4.1583376237505e-32,4.1383456207516996e-32,4.118353617752899e-32,4.0983616147540987e-32,4.078369611755298e-32,4.058377608756498e-32,4.0383856057576973e-32,4.018393602758897e-32,3.9984015997600964e-32,3.978409596761296e-32,3.9584175937624954e-32,3.938425590763695e-32,3.9184335877648945e-32,3.898441584766094e-32,3.8784495817672936e-32,3.858457578768493e-32,3.8384655757696926e-32,3.818473572770892e-32,3.7984815697720917e-32,3.778489566773291e-32,3.758497563774491e-32,3.73850556077569e-32,3.7185135577768893e-32,3.698521554778089e-32,3.6785295517792884e-32,3.658537548780488e-32,3.6385455457816875e-32,3.618553542782887e-32,3.5985615397840865e-32,3.578569536785286e-32,3.5585775337864856e-32,3.538585530787685e-32,3.5185935277888847e-32,3.498601524790084e-32,3.478609521791284e-32,3.4586175187924833e-32,3.438625515793683e-32,3.4186335127948823e-32,3.398641509796082e-32,3.3786495067972814e-32,3.358657503798481e-32,3.3386655007996805e-32,3.31867349780088e-32,3.2986814948020796e-32,3.278689491803279e-32,3.2586974888044786e-32,3.238705485805678e-32,3.2187134828068777e-32,3.198721479808077e-32,3.178729476809277e-32,3.1587374738104763e-32,3.138745470811676e-32,3.1187534678128754e-32,3.0987614648140744e-32,3.078769461815274e-32,3.0587774588164734e-32,3.038785455817673e-32,3.0187934528188725e-32,2.998801449820072e-32,2.9788094468212716e-32,2.958817443822471e-32,2.9388254408236707e-32,2.91883343782487e-32,2.8988414348260697e-32,2.878849431827269e-32,2.858857428828469e-32,2.8388654258296683e-32,2.818873422830868e-32,2.7988814198320674e-32,2.778889416833267e-32,2.7588974138344665e-32,2.738905410835666e-32,2.7189134078368655e-32,2.698921404838065e-32,2.6789294018392646e-32,2.658937398840464e-32,2.6389453958416637e-32,2.618953392842863e-32,2.598961389844063e-32,2.5789693868452623e-32,2.558977383846462e-32,2.5389853808476614e-32,2.518993377848861e-32,2.4990013748500604e-32,2.47900937185126e-32,2.4590173688524592e-32,2.4390253658536588e-32,2.4190333628548583e-32,2.3990413598560578e-32,2.3790493568572574e-32,2.359057353858457e-32,2.3390653508596564e-32,2.319073347860856e-32,2.2990813448620552e-32,2.2790893418632548e-32,2.2590973388644543e-32,2.2391053358656538e-32,2.2191133328668534e-32,2.199121329868053e-32,2.1791293268692525e-32,2.159137323870452e-32,2.1391453208716515e-32,2.119153317872851e-32,2.0991613148740506e-32,2.07916931187525e-32,2.0591773088764497e-32,2.0391853058776492e-32,2.0191933028788487e-32,1.9992012998800483e-32,1.9792092968812475e-32,1.959217293882447e-32,1.9392252908836466e-32,1.9192332878848461e-32,1.8992412848860457e-32,1.8792492818872452e-32,1.8592572788884447e-32,1.8392652758896443e-32,1.8192732728908438e-32,1.7992812698920434e-32,1.779289266893243e-32,1.7592972638944424e-32,1.739305260895642e-32,1.7193132578968415e-32,1.699321254898041e-32,1.6793292518992406e-32,1.6593372489004398e-32,1.6393452459016394e-32,1.619353242902839e-32,1.5993612399040384e-32,1.579369236905238e-32,1.5593772339064375e-32,1.539385230907637e-32,1.5193932279088366e-32,1.499401224910036e-32,1.4794092219112357e-32,1.4594172189124352e-32,1.4394252159136347e-32,1.4194332129148343e-32,1.3994412099160338e-32,1.3794492069172333e-32,1.359457203918433e-32,1.339465200919632e-32,1.3194731979208317e-32,1.2994811949220312e-32,1.2794891919232307e-32,1.2594971889244303e-32,1.2395051859256298e-32,1.2195131829268293e-32,1.1995211799280289e-32,1.1795291769292284e-32,1.159537173930428e-32,1.1395451709316275e-32,1.119553167932827e-32,1.0995611649340264e-32,1.079569161935226e-32,1.0595771589364255e-32,1.039585155937625e-32,1.0195931529388246e-32,9.996011499400241e-33,9.796091469412236e-33,9.596171439424232e-33,9.396251409436226e-33,9.196331379448221e-33,8.996411349460216e-33,8.796491319472212e-33,8.596571289484207e-33,8.396651259496202e-33,8.196731229508198e-33,7.996811199520193e-33,7.796891169532187e-33,7.596971139544182e-33,7.397051109556178e-33,7.197131079568173e-33,6.997211049580169e-33,6.797291019592164e-33,6.597370989604159e-33,6.397450959616155e-33,6.19753092962815e-33,5.9976108996401446e-33,5.79769086965214e-33,5.5977708396641346e-33,5.39785080967613e-33,5.197930779688125e-33,4.998010749700121e-33,4.7980907197121154e-33,4.598170689724111e-33,4.398250659736106e-33,4.1983306297481014e-33,3.998410599760096e-33,3.7984905697720915e-33,3.598570539784087e-33,3.398650509796082e-33,3.198730479808077e-33,2.9988104498200722e-33,2.7988904198320676e-33,2.5989703898440626e-33,2.399050359856058e-33,2.199130329868053e-33,1.9992102998800483e-33,1.7992902698920433e-33,1.5993702399040387e-33,1.3994502099160337e-33,1.1995301799280289e-33,9.99610149940024e-34,7.996901199520192e-34,5.997700899640144e-34,3.998500599760096e-34,1.999300299880048e-34,1.0e-38]}
},{}],59:[function(require,module,exports){
module.exports={"expected":[0.14142136,0.1412943,0.14116758,0.1410412,0.14091517,0.14078948,0.14066412,0.14053908,0.14041439,0.14029002,0.14016598,0.14004228,0.13991891,0.13979585,0.13967313,0.13955072,0.13942863,0.13930686,0.13918541,0.13906428,0.13894346,0.13882297,0.13870278,0.1385829,0.13846333,0.13834408,0.13822514,0.1381065,0.13798815,0.13787012,0.13775238,0.13763496,0.13751782,0.137401,0.13728446,0.13716823,0.13705228,0.13693663,0.13682127,0.1367062,0.13659142,0.13647693,0.13636273,0.13624881,0.13613519,0.13602184,0.13590878,0.135796,0.13568349,0.13557127,0.13545933,0.13534766,0.13523626,0.13512515,0.13501431,0.13490373,0.13479343,0.1346834,0.13457364,0.13446414,0.13435492,0.13424596,0.13413726,0.13402884,0.13392065,0.13381276,0.13370511,0.13359772,0.13349058,0.1333837,0.13327709,0.13317074,0.13306463,0.13295877,0.13285317,0.13274781,0.13264272,0.13253787,0.13243327,0.13232891,0.1322248,0.13212094,0.13201731,0.13191393,0.1318108,0.1317079,0.13160527,0.13150285,0.13140067,0.13129874,0.13119704,0.13109557,0.13099435,0.13089335,0.1307926,0.13069206,0.13059177,0.1304917,0.13039187,0.13029227,0.13019288,0.13009372,0.1299948,0.1298961,0.12979762,0.12969938,0.12960134,0.12950353,0.12940595,0.12930858,0.12921143,0.12911451,0.12901779,0.1289213,0.12882502,0.12872896,0.12863311,0.12853748,0.12844205,0.12834685,0.12825185,0.12815706,0.12806249,0.12796812,0.12787396,0.12778,0.12768626,0.12759273,0.12749939,0.12740625,0.12731333,0.12722062,0.12712808,0.12703577,0.12694365,0.12685174,0.12676002,0.1266685,0.12657717,0.12648605,0.12639512,0.12630439,0.12621385,0.1261235,0.12603337,0.1259434,0.12585364,0.12576407,0.12567468,0.1255855,0.12549649,0.12540768,0.12531906,0.12523063,0.12514238,0.12505431,0.124966435,0.12487874,0.12479123,0.124703914,0.12461677,0.12452981,0.12444303,0.12435644,0.12427002,0.12418378,0.12409773,0.12401185,0.123926155,0.12384063,0.12375528,0.12367011,0.12358513,0.1235003,0.12341566,0.12333119,0.12324689,0.12316277,0.123078816,0.122995034,0.12291143,0.122827984,0.12274472,0.12266161,0.12257869,0.12249592,0.12241332,0.12233089,0.12224863,0.12216653,0.122084595,0.122002825,0.12192122,0.121839784,0.121758506,0.12167739,0.12159643,0.12151565,0.12143502,0.12135454,0.121274225,0.12119408,0.12111409,0.12103425,0.12095457,0.12087505,0.12079569,0.12071648,0.12063743,0.12055853,0.12047979,0.1204012,0.12032277,0.12024449,0.12016636,0.12008838,0.120010555,0.11993288,0.11985536,0.119777985,0.11970076,0.11962368,0.11954676,0.119469985,0.119393356,0.11931687,0.11924054,0.11916435,0.11908831,0.11901241,0.11893665,0.11886105,0.11878558,0.11871026,0.11863508,0.118560046,0.11848515,0.1184104,0.11833579,0.11826132,0.118186995,0.1181128,0.11803875,0.11796485,0.11789107,0.11781744,0.11774394,0.11767058,0.117597364,0.11752428,0.11745133,0.11737852,0.117305845,0.1172333,0.11716089,0.117088616,0.11701648,0.11694447,0.116872594,0.116800845,0.116729245,0.11665776,0.11658641,0.11651519,0.1164441,0.11637315,0.11630233,0.11623162,0.116161056,0.11609062,0.1160203,0.115950115,0.11588006,0.115810126,0.11574032,0.115670644,0.115601085,0.11553167,0.11546236,0.115393184,0.115324125,0.1152552,0.11518639,0.11511771,0.115049146,0.114980705,0.11491239,0.114844196,0.11477612,0.11470816,0.11464034,0.11457262,0.11450503,0.11443756,0.114370205,0.11430297,0.114235856,0.11416885,0.114101976,0.11403521,0.113968566,0.11390203,0.11383562,0.11376933,0.11370315,0.113637075,0.11357113,0.1135053,0.11343957,0.113373965,0.11330847,0.11324309,0.11317782,0.113112666,0.11304762,0.1129827,0.11291788,0.11285316,0.112788565,0.11272409,0.11265971,0.11259545,0.11253129,0.112467244,0.11240331,0.11233948,0.112275764,0.11221215,0.11214865,0.11208525,0.11202197,0.11195879,0.11189572,0.111832745,0.111769885,0.11170713,0.111644484,0.11158194,0.1115195,0.11145716,0.111394934,0.11133281,0.111270785,0.11120887,0.11114705,0.11108534,0.11102373,0.11096223,0.11090082,0.110839516,0.11077832,0.110717215,0.11065622,0.110595316,0.11053452,0.11047382,0.11041322,0.110352725,0.11029232,0.110232025,0.110171825,0.11011172,0.110051714,0.10999181,0.109932,0.10987229,0.10981268,0.10975316,0.109693736,0.109634414,0.10957519,0.109516054,0.109457016,0.109398074,0.10933923,0.10928048,0.10922182,0.109163254,0.10910479,0.109046414,0.108988136,0.10892995,0.108871855,0.10881385,0.108755946,0.10869813,0.1086404,0.10858277,0.10852523,0.10846778,0.10841042,0.10835315,0.10829598,0.10823889,0.108181894,0.10812499,0.108068176,0.10801145,0.10795481,0.10789826,0.1078418,0.107785426,0.107729144,0.107672945,0.10761684,0.10756082,0.10750489,0.10744904,0.10739329,0.10733762,0.10728203,0.10722653,0.10717112,0.10711579,0.10706055,0.107005395,0.10695032,0.10689534,0.10684044,0.10678562,0.106730886,0.10667624,0.106621675,0.1065672,0.1065128,0.106458485,0.10640425,0.1063501,0.10629604,0.10624206,0.106188156,0.10613433,0.1060806,0.10602694,0.10597337,0.105919875,0.10586646,0.10581313,0.10575988,0.10570671,0.105653614,0.1056006,0.105547674,0.10549483,0.105442055,0.10538936,0.10533675,0.10528421,0.105231754,0.10517937,0.105127074,0.10507485,0.105022706,0.104970634,0.104918644,0.104866736,0.1048149,0.104763135,0.10471146,0.104659855,0.10460832,0.104556866,0.10450549,0.10445419,0.10440296,0.10435181,0.10430073,0.10424973,0.104198806,0.104147956,0.10409717,0.10404647,0.103995845,0.103945285,0.1038948,0.1038444,0.10379406,0.1037438,0.10369361,0.10364349,0.103593454,0.103543475,0.10349358,0.10344375,0.103394,0.103344314,0.1032947,0.10324516,0.10319569,0.10314629,0.10309696,0.103047706,0.10299852,0.10294941,0.10290036,0.10285138,0.10280248,0.10275365,0.102704875,0.10265618,0.10260755,0.10255899,0.102510504,0.10246208,0.10241373,0.10236545,0.10231723,0.10226908,0.102221,0.102172986,0.10212505,0.102077164,0.10202935,0.10198161,0.10193394,0.10188633,0.10183878,0.10179131,0.1017439,0.10169656,0.10164928,0.10160206,0.10155492,0.10150784,0.10146083,0.101413876,0.101367,0.10132017,0.10127342,0.101226725,0.1011801,0.10113354,0.10108704,0.10104061,0.10099424,0.10094794,0.10090169,0.100855514,0.1008094,0.10076335,0.100717366,0.10067143,0.100625575,0.100579776,0.10053404,0.10048836,0.100442745,0.10039719,0.100351706,0.10030628,0.10026091,0.10021561,0.10017037,0.100125186,0.100080065,0.100035004,0.09999001,0.09994507,0.099900186,0.09985537,0.099810615,0.09976592,0.09972128,0.099676706,0.09963219,0.09958773,0.09954333,0.099498995,0.09945471,0.0994105,0.09936633,0.09932223,0.09927818,0.0992342,0.09919027,0.0991464,0.09910259,0.09905884,0.09901515,0.09897151,0.09892792,0.0988844,0.09884094,0.09879753,0.09875418,0.09871089,0.09866765,0.098624475,0.09858135,0.09853828,0.098495275,0.09845232,0.09840942,0.09836658,0.0983238,0.09828106,0.09823839,0.09819577,0.09815321,0.0981107,0.098068245,0.09802585,0.09798351,0.09794122,0.09789899,0.097856805,0.09781468,0.09777261,0.0977306,0.09768864,0.09764673,0.09760488,0.09756307,0.09752133,0.097479634,0.097438,0.09739641,0.09735488,0.0973134,0.09727197,0.0972306,0.09718928,0.09714801,0.09710679,0.097065635,0.09702452,0.09698346,0.096942455,0.0969015,0.096860595,0.09681974,0.096778944,0.0967382,0.0966975,0.09665685,0.09661626,0.09657572,0.09653523,0.09649479,0.0964544,0.09641405,0.09637377,0.096333526,0.09629334,0.0962532,0.09621312,0.09617308,0.09613308,0.09609315,0.096053265,0.09601342,0.09597363,0.09593389,0.0958942,0.095854566,0.09581497,0.095775425,0.09573594,0.09569649,0.09565709,0.09561774,0.09557844,0.09553919,0.09549999,0.09546083,0.095421724,0.09538267,0.09534366,0.0953047,0.09526578,0.09522691,0.095188096,0.09514932,0.095110595,0.09507192,0.09503329,0.09499471,0.09495617,0.09491768,0.09487924,0.09484084,0.09480249,0.09476419,0.09472593,0.09468772,0.09464955,0.094611436,0.09457337,0.09453534,0.09449736,0.09445942,0.094421536,0.094383694,0.0943459,0.09430814,0.09427044,0.094232775,0.09419516,0.094157584,0.094120055,0.09408257,0.09404514,0.094007745,0.093970396,0.09393309,0.09389583,0.093858615,0.09382144,0.09378432,0.093747236,0.0937102,0.0936732,0.09363625,0.09359934,0.093562484,0.093525656,0.09348888,0.09345215,0.09341546,0.09337881,0.09334221,0.09330565,0.09326913,0.093232654,0.09319622,0.09315983,0.09312349,0.09308718,0.09305092,0.0930147,0.09297852,0.09294239,0.09290629,0.09287024,0.092834234,0.09279826,0.092762336,0.092726454,0.09269061,0.09265481,0.09261905,0.09258333,0.092547655,0.09251202,0.09247643,0.09244087,0.092405364,0.09236989,0.09233446,0.09229907,0.09226372,0.09222841,0.09219314,0.092157915,0.092122726,0.09208758,0.092052475,0.092017405,0.09198238,0.09194739,0.09191244,0.091877535,0.091842666,0.09180784,0.091773055,0.091738306,0.091703594,0.091668926,0.091634296,0.0915997,0.091565154,0.091530636,0.09149616,0.09146173,0.09142733,0.09139297,0.091358654,0.091324374,0.09129013,0.09125593,0.091221765,0.09118764,0.091153555,0.0911195,0.09108549,0.09105152,0.09101758,0.09098368,0.090949826,0.090916,0.09088222,0.09084847,0.09081476,0.09078109,0.09074745,0.09071386,0.090680294,0.09064677,0.09061329,0.09057984,0.09054643,0.09051306,0.09047972,0.09044642,0.09041315,0.09037993,0.09034674,0.09031358,0.090280466,0.09024738,0.09021434,0.09018133,0.09014836,0.09011542,0.09008252,0.090049654,0.09001683,0.08998404,0.08995128,0.08991856,0.089885876,0.08985322,0.08982061,0.089788035,0.08975549,0.089722976,0.08969051,0.089658074,0.08962567,0.0895933,0.08956097,0.08952867,0.08949641,0.08946419,0.08943199,0.08939984,0.08936771,0.08933562,0.08930357,0.08927155,0.08923957,0.08920761,0.0891757,0.08914382,0.08911197,0.089080155,0.08904838,0.08901663,0.08898492,0.08895324,0.0889216,0.08888999,0.08885841,0.088826865,0.08879536,0.08876388,0.08873244,0.08870103,0.08866965,0.08863831,0.088607006,0.08857573,0.08854448,0.08851327,0.0884821,0.08845095,0.08841984,0.08838876,0.08835772,0.08832671,0.08829572,0.08826478,0.08823386,0.088202976,0.08817212,0.08814131,0.08811052,0.08807977,0.08804905,0.08801836,0.0879877,0.08795708,0.087926485,0.08789592,0.0878654,0.087834895,0.08780443,0.08777399,0.087743595,0.08771322,0.08768288,0.08765257,0.0876223,0.08759205,0.08756184,0.087531656,0.0875015,0.08747138,0.087441295,0.08741123,0.087381214,0.08735121,0.087321244,0.087291315,0.08726141,0.08723153,0.08720169,0.087171875,0.087142095,0.08711235,0.08708263,0.087052934,0.08702328,0.08699365,0.08696405,0.08693448,0.086904936,0.08687543,0.08684596,0.086816505,0.08678709,0.0867577,0.086728334,0.08669901,0.086669706,0.08664044,0.086611204,0.08658199,0.086552806,0.08652365,0.086494535,0.08646544,0.086436376,0.08640734,0.08637834,0.08634936,0.086320415,0.0862915,0.086262606,0.08623375,0.086204916,0.08617611,0.086147346,0.0861186,0.08608989,0.0860612,0.08603254,0.086003914,0.08597531,0.08594674,0.085918196,0.08588968,0.08586119,0.08583274,0.085804306,0.085775904,0.085747525,0.08571918,0.08569086,0.08566257,0.08563431,0.08560608,0.085577875,0.0855497,0.08552155,0.08549342,0.08546533,0.08543726,0.085409224,0.08538121,0.085353225,0.08532527,0.08529734,0.085269436,0.08524156,0.08521371,0.0851859,0.08515811,0.08513034,0.0851026,0.08507489,0.08504721,0.08501955,0.08499192,0.08496431,0.08493674,0.08490919,0.08488167,0.08485417,0.0848267,0.08479926,0.08477184,0.08474445,0.084717095,0.08468976,0.084662445,0.08463516,0.08460791,0.084580675,0.084553465,0.084526286,0.084499136,0.084472016,0.08444491,0.084417835,0.08439079,0.084363766,0.08433677,0.0843098,0.08428285,0.08425594,0.084229045,0.08420218,0.08417534,0.084148526,0.084121734,0.08409497,0.08406823,0.08404151,0.08401483,0.08398817,0.08396153,0.08393492,0.083908334,0.083881766,0.083855234,0.083828725,0.08380224,0.08377578,0.08374934,0.083722934,0.083696544,0.083670184,0.083643846,0.08361754,0.08359125,0.08356499,0.083538756,0.083512545,0.083486356,0.08346019,0.08343405,0.08340794,0.08338185,0.08335579,0.08332975,0.083303735,0.08327774,0.083251774,0.08322583,0.08319991,0.08317401,0.08314815,0.083122306,0.08309648,0.08307068,0.08304491,0.08301916,0.08299343,0.08296773,0.082942046,0.0829164,0.082890764,0.08286516,0.08283958,0.082814015,0.08278848,0.082762964,0.082737476,0.08271202,0.08268657,0.08266116,0.08263576,0.08261039,0.082585044,0.08255971,0.08253442,0.08250914,0.08248389,0.08245865,0.08243344,0.08240826,0.082383096,0.08235795,0.082332835,0.08230774,0.08228268,0.08225763,0.0822326,0.0822076,0.08218262,0.082157664,0.08213273,0.08210782,0.08208293,0.082058065,0.082033224,0.08200841,0.0819836,0.08195883,0.08193407,0.08190934,0.08188464,0.08185995,0.08183529,0.081810646,0.08178603,0.08176143,0.081736855,0.081712306,0.08168777,0.081663266,0.08163878,0.081614316,0.08158987,0.081565455,0.081541054,0.081516676,0.08149232,0.081467986,0.08144368,0.081419386,0.08139512,0.081370875,0.081346646,0.08132245,0.08129826,0.08127411,0.08124997,0.08122585,0.081201755,0.08117768,0.08115363,0.0811296,0.08110559,0.0810816,0.08105763,0.08103369,0.08100977,0.08098586,0.08096198,0.080938116,0.080914274,0.08089046,0.08086666,0.08084289,0.08081913,0.08079539,0.08077168,0.080747984,0.080724314,0.08070066,0.08067703,0.08065342,0.08062983,0.08060627,0.080582716,0.08055919,0.08053568,0.080512196,0.08048873,0.08046528,0.08044186,0.08041845,0.08039507,0.08037171,0.080348365,0.08032504,0.08030174,0.080278456,0.080255195,0.08023196,0.08020873,0.08018553,0.08016235,0.08013919,0.08011605,0.08009292,0.080069825,0.08004674,0.08002368,0.08000064,0.07997762,0.07995462,0.07993163,0.07990867,0.07988573,0.0798628,0.07983991,0.07981703,0.07979416,0.07977132,0.07974849,0.07972569,0.0797029,0.07968014,0.07965739,0.07963467,0.07961196,0.07958927,0.079566605,0.079543956,0.07952132,0.079498716,0.07947612,0.07945355,0.079431,0.07940847,0.07938595,0.07936346,0.07934098,0.07931852,0.07929608,0.07927367,0.07925127,0.079228885,0.07920653,0.07918418,0.07916186,0.07913955,0.07911727,0.079095,0.07907275,0.079050526,0.07902831,0.07900612,0.07898395,0.07896179,0.078939654,0.07891753,0.078895435,0.07887336,0.07885129,0.07882925,0.07880723,0.07878522,0.07876323,0.07874126,0.07871931,0.078697376,0.078675464,0.07865357,0.078631684,0.078609824,0.07858798,0.07856616,0.078544356,0.07852257,0.0785008,0.078479044,0.07845731,0.0784356,0.0784139,0.07839222,0.07837056,0.07834892,0.0783273,0.078305684,0.0782841,0.07826252,0.07824097,0.078219436,0.07819792,0.07817642,0.07815494,0.07813347,0.07811202,0.07809059,0.07806918,0.07804779,0.07802641,0.07800505,0.077983715,0.07796238,0.07794108,0.07791979,0.07789852,0.07787726,0.07785603,0.07783481,0.0778136,0.07779242,0.077771254,0.0777501,0.07772897,0.07770785,0.07768675,0.07766567,0.07764461,0.07762356,0.07760253,0.07758152,0.07756052,0.07753954,0.07751858,0.07749763,0.0774767,0.0774558,0.077434905,0.07741403,0.07739317,0.07737232,0.077351496,0.077330686,0.07730989,0.07728911,0.077268355,0.07724761,0.077226885,0.07720618,0.07718548,0.07716481,0.077144146,0.0771235,0.07710288,0.07708227,0.077061675,0.0770411,0.07702054,0.07699999,0.076979466,0.076958954,0.07693846,0.07691798,0.076897524,0.07687707,0.07685664,0.07683623,0.076815836,0.07679545,0.07677509,0.07675474,0.07673441,0.07671409,0.076693796,0.07667351,0.07665324,0.07663299,0.076612756,0.076592535,0.076572336,0.076552145,0.07653198,0.076511815,0.076491676,0.07647155,0.07645144,0.07643135,0.07641128,0.07639122,0.07637117,0.07635114,0.07633113,0.076311134,0.07629115,0.076271184,0.07625123,0.0762313,0.076211385,0.07619148,0.07617159,0.076151714,0.07613186,0.07611202,0.07609219,0.07607239,0.07605259,0.07603281,0.07601304,0.0759933,0.07597356,0.07595385,0.07593414,0.07591446,0.07589479,0.07587513,0.075855486,0.07583586,0.07581625,0.07579666,0.075777076,0.07575751,0.07573796,0.075718425,0.075698905,0.0756794,0.07565991,0.07564043,0.07562098,0.07560153,0.0755821,0.075562686,0.07554329,0.075523905,0.075504534,0.07548518,0.075465836,0.07544651,0.075427204,0.07540791,0.075388625,0.07536936,0.07535011,0.075330876,0.07531165,0.075292446,0.07527325,0.075254075,0.07523491,0.075215764,0.07519663,0.07517751,0.0751584,0.075139314,0.07512024,0.075101174,0.07508214,0.0750631,0.07504408,0.07502508,0.07500609,0.07498712,0.07496816,0.07494921,0.07493028,0.07491136,0.07489246,0.074873574,0.0748547,0.07483584,0.074816994,0.07479817,0.07477935,0.07476055,0.07474176,0.07472298,0.07470422,0.07468548,0.074666746,0.07464802,0.07462932,0.074610636,0.07459196,0.07457329,0.074554645,0.07453601,0.07451739,0.07449879,0.07448019,0.07446162,0.07444306,0.074424505,0.07440597,0.074387446,0.07436894,0.07435044,0.07433196,0.07431349,0.074295044,0.074276604,0.07425817,0.07423976,0.074221365,0.07420298,0.074184604,0.074166246,0.0741479,0.074129574,0.07411126,0.074092954,0.07407466,0.07405639,0.074038126,0.07401987,0.07400164,0.073983416,0.07396521,0.07394701,0.07392883,0.07391066,0.073892504,0.07387436,0.073856235,0.07383812,0.073820025,0.073801935,0.07378386,0.07376579,0.07374775,0.07372971,0.073711686,0.07369368,0.073675685,0.0736577,0.073639736,0.07362177,0.07360383,0.073585905,0.07356799,0.07355008,0.073532194,0.07351431,0.073496446,0.073478594,0.07346076,0.07344293,0.07342512,0.073407315,0.07338953,0.07337176,0.073354,0.07333625,0.07331851,0.073300794,0.073283084,0.07326538,0.0732477,0.07323003,0.07321237,0.07319473,0.07317709,0.07315947,0.073141865,0.073124275,0.07310669,0.07308912,0.07307156,0.07305402,0.07303649,0.07301897,0.07300147,0.07298397,0.072966486,0.07294902,0.072931565,0.07291412,0.07289669,0.07287927,0.072861865,0.072844476,0.07282709,0.072809726,0.072792366,0.07277503,0.07275769,0.072740376,0.07272307,0.072705775,0.07268849,0.07267122,0.072653964,0.07263672,0.07261949,0.072602265,0.07258506,0.072567865,0.07255068,0.0725335,0.072516344,0.0724992,0.072482064,0.07246494,0.07244783,0.07243073,0.072413646,0.07239657,0.07237951,0.07236246,0.07234542,0.072328396,0.07231138,0.07229438,0.07227739,0.07226041,0.072243445,0.07222649,0.07220955,0.07219262,0.0721757,0.07215879,0.07214189,0.07212501,0.07210814,0.07209128,0.072074436,0.072057605,0.072040774,0.072023965,0.072007164,0.07199038,0.0719736,0.071956836,0.07194008,0.07192334,0.07190661,0.07188989,0.07187318,0.07185649,0.0718398,0.071823135,0.07180647,0.07178982,0.07177319,0.071756564,0.07173995,0.07172334,0.07170676,0.07169017,0.07167361,0.07165705,0.07164051,0.07162397,0.07160745,0.07159094,0.07157444,0.071557954,0.07154147,0.07152501,0.07150856,0.07149211,0.071475685,0.07145926,0.07144286,0.07142646,0.071410075,0.0713937,0.07137734,0.07136098,0.071344644,0.07132831,0.071311995,0.071295686,0.07127939,0.071263105,0.07124683,0.071230575,0.07121432,0.071198076,0.07118185,0.07116563,0.07114942,0.071133226,0.07111704,0.07110087,0.07108471,0.071068555,0.07105242,0.07103629,0.07102016,0.071004055,0.07098796,0.07097188,0.070955805,0.070939735,0.070923686,0.070907645,0.07089161,0.07087559,0.07085958,0.07084358,0.07082759,0.070811614,0.07079565,0.070779696,0.07076375,0.070747815,0.07073189,0.07071598,0.07070008,0.07068419,0.07066831,0.07065244,0.07063658,0.07062073,0.07060489,0.070589066,0.07057325,0.070557445,0.07054165,0.07052586,0.07051009,0.070494324,0.07047857,0.07046283,0.0704471,0.07043138,0.07041567,0.07039997,0.07038428,0.0703686,0.070352934,0.07033727,0.07032163,0.07030599,0.07029036,0.07027475,0.07025914,0.070243545,0.07022796,0.07021239,0.070196815,0.070181265,0.070165716,0.07015019,0.07013466,0.07011915,0.070103645,0.070088156,0.07007267,0.0700572,0.07004174,0.07002629,0.07001085,0.06999542,0.069979995,0.06996459,0.06994919,0.069933794,0.06991842,0.069903046,0.06988769,0.069872335,0.069856994,0.06984167,0.06982635,0.06981104,0.069795735,0.06978045,0.06976517,0.06974991,0.06973464,0.0697194,0.06970415,0.06968892,0.06967371,0.069658495,0.0696433,0.06962811,0.06961293,0.06959776,0.069582604,0.06956745,0.06955231,0.069537185,0.06952206,0.06950695,0.069491856,0.06947676,0.06946168,0.06944661,0.06943155,0.0694165,0.06940146,0.06938642,0.0693714,0.0693564,0.06934139,0.0693264,0.06931142,0.06929644,0.06928148,0.06926652,0.06925158,0.06923664,0.06922172,0.069206804,0.0691919,0.069177,0.069162115,0.069147244,0.06913237,0.06911752,0.06910267,0.06908783,0.06907301,0.06905819,0.069043376,0.06902857,0.06901378,0.068999,0.06898423,0.068969466,0.06895471,0.06893998,0.06892524,0.06891052,0.0688958,0.068881094,0.0688664,0.06885171,0.06883703,0.06882237,0.068807706,0.06879306,0.06877842,0.068763785,0.06874917,0.06873456,0.06871995,0.06870536,0.06869078,0.0686762,0.06866164,0.06864708,0.068632536,0.068618,0.06860347,0.06858895,0.068574436,0.06855994,0.068545446,0.06853096,0.06851649,0.06850203,0.06848758,0.06847313,0.06845869,0.06844427,0.06842984,0.06841543,0.06840103,0.068386644,0.068372265,0.06835789,0.06834353,0.06832917,0.06831483,0.068300486,0.06828616,0.068271846,0.06825753,0.068243235,0.068228945,0.06821466,0.06820039,0.06818612,0.068171866,0.06815761,0.06814338,0.06812915,0.06811493,0.06810072,0.06808652,0.06807233,0.06805814,0.06804396,0.0680298,0.06801564,0.068001494,0.06798735,0.06797322,0.06795909,0.06794498,0.06793088,0.06791678,0.06790269,0.06788862,0.06787454,0.067860484,0.06784643,0.06783239,0.06781835,0.06780432,0.06779031,0.0677763,0.0677623,0.06774831,0.06773432,0.067720346,0.067706384,0.06769243,0.067678474,0.06766454,0.06765061,0.06763668,0.06762277,0.06760886,0.06759497,0.06758108,0.0675672,0.06755333,0.06753947,0.06752561,0.06751177,0.06749793,0.0674841,0.06747028,0.06745647,0.06744266,0.06742887,0.06741509,0.067401305,0.067387536,0.067373775,0.06736002,0.06734628,0.06733254,0.06731882,0.0673051,0.06729139,0.067277685,0.06726399,0.06725031,0.06723663,0.06722296,0.0672093,0.067195654,0.067182004,0.06716837,0.06715474,0.06714112,0.06712752,0.06711391,0.06710032,0.067086734,0.06707316,0.067059584,0.067046024,0.06703247,0.067018926,0.06700539,0.066991866,0.06697834,0.066964835,0.06695133,0.066937834,0.06692435,0.06691087,0.0668974,0.06688394,0.06687048,0.06685703,0.06684359,0.066830166,0.06681674,0.06680333,0.06678992,0.06677652,0.06676313,0.06674975,0.06673638,0.06672301,0.06670965,0.0666963,0.066682965,0.06666963,0.0666563,0.066642985,0.06662968,0.06661637,0.06660308,0.066589795,0.06657652,0.06656325,0.06654999,0.06653673,0.066523485,0.066510245,0.06649701,0.066483796,0.06647058,0.06645737,0.06644417,0.06643098,0.0664178,0.066404626,0.06639145,0.066378295,0.066365145,0.066351995,0.06633886,0.06632573,0.06631261,0.0662995,0.06628639,0.0662733,0.06626021,0.06624713,0.06623405,0.066220984,0.06620792,0.06619488,0.06618183,0.0661688,0.06615577,0.06614275,0.06612974,0.066116735,0.066103734,0.06609075,0.06607777,0.06606479,0.066051826,0.06603886,0.06602591,0.06601297,0.06600004,0.0659871,0.06597418,0.06596127,0.06594837,0.06593547,0.06592258,0.06590969,0.06589682,0.06588395,0.06587109,0.06585824,0.06584539,0.065832555,0.065819725,0.0658069,0.06579409,0.06578128,0.06576848,0.06575569,0.0657429,0.065730125,0.065717354,0.06570459,0.065691836,0.06567909,0.06566635,0.065653615,0.06564089,0.06562817,0.06561546,0.06560276,0.065590054,0.065577365,0.065564685,0.06555201,0.065539345,0.06552669,0.065514036,0.06550139,0.06548875,0.06547612,0.0654635,0.065450884,0.06543827,0.06542567,0.06541308,0.06540049,0.06538791,0.06537534,0.065362774,0.06535022,0.065337665,0.065325126,0.06531259,0.06530006,0.06528754,0.06527502,0.06526252,0.06525002,0.06523752,0.065225035,0.06521256,0.06520009,0.065187626,0.06517517,0.06516272,0.065150276,0.06513784,0.06512541,0.06511299,0.06510058,0.06508817,0.06507577,0.06506338,0.06505099,0.065038614,0.06502624,0.06501388,0.06500152,0.06498917,0.06497683,0.06496449,0.06495216,0.064939834,0.06492752,0.06491521,0.06490291,0.064890616,0.06487833,0.06486605,0.06485377,0.06484151,0.064829245,0.064817,0.06480475,0.064792514,0.06478028,0.06476805,0.064755835,0.06474362,0.06473142,0.06471922,0.06470703,0.06469485,0.06468268,0.0646705,0.064658344,0.064646184,0.06463404,0.064621896,0.06460976,0.06459763,0.06458551,0.06457339,0.064561285,0.064549185,0.06453709,0.064525,0.06451292,0.064500846,0.06448878,0.06447672,0.064464666,0.06445262,0.06444058,0.064428546,0.06441652,0.064404495,0.064392485,0.06438048,0.06436848,0.06435648,0.064344496,0.064332515,0.06432054,0.06430858,0.06429662,0.06428467,0.06427272,0.06426078,0.064248845,0.06423692,0.064224996,0.06421308,0.064201176,0.06418928,0.06417739,0.0641655,0.06415362,0.06414174,0.06412988,0.06411802,0.06410617,0.06409431,0.06408247,0.06407064,0.06405882,0.064046994,0.06403518,0.06402337,0.06401157,0.06399977,0.063987985,0.063976206,0.06396443,0.06395266,0.0639409,0.06392914,0.06391739,0.06390565,0.063893914,0.06388219,0.06387046,0.06385874,0.063847035,0.06383533,0.06382363,0.063811935,0.06380025,0.06378858,0.0637769,0.063765235,0.063753575,0.06374192,0.06373028,0.06371864,0.063707,0.06369538,0.063683756,0.06367214,0.06366053,0.06364893,0.06363734,0.063625745,0.06361416,0.06360259,0.06359102,0.063579455,0.0635679,0.06355634,0.0635448,0.06353326,0.06352173,0.0635102,0.06349868,0.06348717,0.06347566,0.06346416,0.06345266,0.06344117,0.06342969,0.06341822,0.06340674,0.063395284,0.063383825,0.06337237,0.06336093,0.06334949,0.063338056,0.06332663,0.06331521,0.0633038,0.06329239,0.063280985,0.06326959,0.0632582,0.06324682,0.06323544,0.06322407,0.0632127,0.063201346,0.06318999,0.06317864,0.063167304,0.06315597,0.06314464,0.06313332,0.063122004,0.063110694,0.06309939,0.0630881,0.0630768,0.063065514,0.063054234,0.06304296,0.063031696,0.06302043,0.06300918,0.06299793,0.06298669,0.062975444,0.062964216,0.06295299,0.06294177,0.062930554,0.06291935,0.06290815,0.06289695,0.06288576,0.06287458,0.0628634,0.062852226,0.062841065,0.062829904,0.06281875,0.062807605,0.06279646,0.06278533,0.062774196,0.06276307,0.06275195,0.06274084,0.06272973,0.06271864,0.062707536,0.06269645,0.06268536,0.06267429,0.06266322,0.062652156,0.06264109,0.06263004,0.06261899,0.06260795,0.06259692,0.06258588,0.06257486,0.062563844,0.062552825,0.06254182,0.06253082,0.062519826,0.06250884,0.062497854,0.062486876,0.062475905,0.062464938,0.062453978,0.06244302,0.062432073,0.06242113,0.06241019,0.06239926,0.062388334,0.062377412,0.062366497,0.06235559,0.062344685,0.06233379,0.062322896,0.062312014,0.062301133,0.06229026,0.06227939,0.062268525,0.062257666,0.062246814,0.06223597,0.06222513,0.062214293,0.062203463,0.06219264,0.062181823,0.06217101,0.0621602,0.0621494,0.062138606,0.06212782,0.062117036,0.062106255,0.062095482,0.062084716,0.062073953,0.0620632,0.062052447,0.062041704,0.062030964,0.062020227,0.0620095,0.061998777,0.06198806,0.06197735,0.061966643,0.06195594,0.06194525,0.06193456,0.061923876,0.061913196,0.061902523,0.061891858,0.061881196,0.061870538,0.061859887,0.061849244,0.061838605,0.06182797,0.06181734,0.061806716,0.0617961,0.061785486,0.06177488,0.06176428,0.061753683,0.06174309,0.06173251,0.06172193,0.061711352,0.061700784,0.061690222,0.061679665,0.06166911,0.061658565,0.061648022,0.061637484,0.061626956,0.06161643,0.061605908,0.061595395,0.061584886,0.061574385,0.061563883,0.061553393,0.061542902,0.06153242,0.061521944,0.061511472,0.061501004,0.061490543,0.061480086,0.061469637,0.06145919,0.061448753,0.06143832,0.061427888,0.061417464,0.06140705,0.061396636,0.061386228,0.061375827,0.061365426,0.061355036,0.06134465,0.061334267,0.06132389,0.061313517,0.061303154,0.061292794,0.061282437,0.06127209,0.061261743,0.061251402,0.061241068,0.06123074,0.06122042,0.0612101,0.061199784,0.061189476,0.061179176,0.061168876,0.061158583,0.061148297,0.061138015,0.061127737,0.061117467,0.0611072,0.061096936,0.06108668,0.06107643,0.061066188,0.061055947,0.06104571,0.06103548,0.061025254,0.061015032,0.061004817,0.060994606,0.060984403,0.060974203,0.060964007,0.06095382,0.060943633,0.060933456,0.06092328,0.060913112,0.060902946,0.06089279,0.060882635,0.060872488,0.060862344,0.060852207,0.06084207,0.06083194,0.06082182,0.060811702,0.060801588,0.060791478,0.060781375,0.06077128,0.060761184,0.060751095,0.06074101,0.060730934,0.060720865,0.060710795,0.060700733,0.060690675,0.06068062,0.060670573,0.06066053,0.06065049,0.060640458,0.06063043,0.06062041,0.060610387,0.060600374,0.060590368,0.06058036,0.060570363,0.06056037,0.060550384,0.0605404,0.060530424,0.06052045,0.060510483,0.060500517,0.060490556,0.060480602,0.060470656,0.06046071,0.06045077,0.060440835,0.060430907,0.060420983,0.060411062,0.060401145,0.060391236,0.060381334,0.060371436,0.060361538,0.060351647,0.060341764,0.06033188,0.060322005,0.060312137,0.06030227,0.060292408,0.06028255,0.060272697,0.06026285,0.06025301,0.06024317,0.06023334,0.060223512,0.060213692,0.060203876,0.06019406,0.06018425,0.06017445,0.06016465,0.060154855,0.060145065,0.060135283,0.060125504,0.06011573,0.060105957,0.060096193,0.06008643,0.060076676,0.060066923,0.06005718,0.06004744,0.060037702,0.06002797,0.06001824,0.06000852,0.059998803,0.059989087,0.05997938,0.059969675,0.059959974,0.05995028,0.05994059,0.059930906,0.059921227,0.05991155,0.05990188,0.05989221,0.059882555,0.059872895,0.059863243,0.0598536,0.059843954,0.059834316,0.059824683,0.059815053,0.05980543,0.059795808,0.059786193,0.05977658,0.059766978,0.059757378,0.059747778,0.05973819,0.0597286,0.059719022,0.05970944,0.05969987,0.0596903,0.059680738,0.059671175,0.05966162,0.05965207,0.059642524,0.059632983,0.059623446,0.059613913,0.059604388,0.059594862,0.059585344,0.05957583,0.059566323,0.05955682,0.05954732,0.059537824,0.059528332,0.059518844,0.059509363,0.059499886,0.059490412,0.059480943,0.05947148,0.059462022,0.059452567,0.059443116,0.05943367,0.05942423,0.05941479,0.05940536,0.05939593,0.05938651,0.05937709,0.059367675,0.059358265,0.05934886,0.05933946,0.05933006,0.05932067,0.059311282,0.059301898,0.05929252,0.059283145,0.059273776,0.05926441,0.05925505,0.059245694,0.059236344,0.059226997,0.059217654,0.059208315,0.05919898,0.059189647,0.059180323,0.059171002,0.059161685,0.059152372,0.059143063,0.05913376,0.059124462,0.059115168,0.059105877,0.05909659,0.05908731,0.059078034,0.05906876,0.059059493,0.05905023,0.059040967,0.05903171,0.05902246,0.059013214,0.05900397,0.058994733,0.058985498,0.05897627,0.058967043,0.058957823,0.058948606,0.058939394,0.05893019,0.058920987,0.058911785,0.05890259,0.0588934,0.058884215,0.05887503,0.058865853,0.05885668,0.058847513,0.058838345,0.058829185,0.058820028,0.05881088,0.05880173,0.058792587,0.058783446,0.058774315,0.058765184,0.058756057,0.058746934,0.05873782,0.058728702,0.058719594,0.05871049,0.05870139,0.05869229,0.058683198,0.05867411,0.058665026,0.058655944,0.05864687,0.058637798,0.05862873,0.05861967,0.05861061,0.05860156,0.058592506,0.05858346,0.05857442,0.05856538,0.058556344,0.058547318,0.05853829,0.05852927,0.058520254,0.05851124,0.05850223,0.058493227,0.058484226,0.05847523,0.05846624,0.05845725,0.05844827,0.05843929,0.058430314,0.058421344,0.058412373,0.05840341,0.05839445,0.0583855,0.058376547,0.0583676,0.058358658,0.058349717,0.058340784,0.058331855,0.05832293,0.05831401,0.058305092,0.058296178,0.058287267,0.058278363,0.05826946,0.058260564,0.058251668,0.05824278,0.058233894,0.058225013,0.058216136,0.058207262,0.058198392,0.05818953,0.058180667,0.05817181,0.05816296,0.05815411,0.058145266,0.058136426,0.05812759,0.058118757,0.058109928,0.058101103,0.05809228,0.058083467,0.058074653,0.058065843,0.05805704,0.05804824,0.05803944,0.05803065,0.058021862,0.058013078,0.058004297,0.05799552,0.05798675,0.057977982,0.057969216,0.057960454,0.0579517,0.057942946,0.0579342,0.05792545,0.057916712,0.057907972,0.05789924,0.057890512,0.057881787,0.05787307,0.057864353,0.05785564,0.05784693,0.057838224,0.05782952,0.057820823,0.057812132,0.05780344,0.057794753,0.057786074,0.057777394,0.05776872,0.057760052,0.057751384,0.057742722,0.057734065,0.05772541,0.05771676,0.057708114,0.05769947,0.057690833,0.057682198,0.057673566,0.05766494,0.057656314,0.057647694,0.05763908,0.05763047,0.05762186,0.057613257,0.057604656,0.057596058,0.057587467,0.05757888,0.057570294,0.057561714,0.057553135,0.057544563,0.057535995,0.057527427,0.057518866,0.05751031,0.057501752,0.057493202,0.057484657,0.057476114,0.057467572,0.057459038,0.057450507,0.05744198,0.05743346,0.057424936,0.05741642,0.05740791,0.0573994,0.057390895,0.057382394,0.057373896,0.057365403,0.057356913,0.057348426,0.057339944,0.057331465,0.05732299,0.05731452,0.05730605,0.05729759,0.05728913,0.05728068,0.057272226,0.057263777,0.05725533,0.05724689,0.057238452,0.057230018,0.057221588,0.05721316,0.05720474,0.057196323,0.057187907,0.057179496,0.057171088,0.057162683,0.057154283,0.05714589,0.057137497,0.057129107,0.05712072,0.05711234,0.05710396,0.057095587,0.057087217,0.05707885,0.057070486,0.057062127,0.05705377,0.05704542,0.05703707,0.057028726,0.057020385,0.057012048,0.057003714,0.056995384,0.05698706,0.056978736,0.056970417,0.0569621,0.056953788,0.05694548,0.056937177,0.056928873,0.056920577,0.056912284,0.05690399,0.056895707,0.05688742,0.056879144,0.056870867,0.056862596,0.05685433,0.056846064,0.0568378,0.056829546,0.05682129,0.05681304,0.056804795,0.05679655,0.05678831,0.056780074,0.05677184,0.05676361,0.056755386,0.056747165,0.056738947,0.056730732,0.05672252,0.056714315,0.056706112,0.05669791,0.056689713,0.05668152,0.05667333,0.056665145,0.05665696,0.056648783,0.056640606,0.056632433,0.056624264,0.0566161,0.05660794,0.05659978,0.056591626,0.05658348,0.05657533,0.056567185,0.056559045,0.05655091,0.056542777,0.056534644,0.05652652,0.0565184,0.056510277,0.05650216,0.05649405,0.05648594,0.056477834,0.05646973,0.056461632,0.05645354,0.05644545,0.056437362,0.056429278,0.056421198,0.056413118,0.056405045,0.056396976,0.056388907,0.056380842,0.056372784,0.056364726,0.056356672,0.05634862,0.056340575,0.056332532,0.056324493,0.05631646,0.05630843,0.056300398,0.056292374,0.05628435,0.056276333,0.056268316,0.056260303,0.056252297,0.05624429,0.05623629,0.05622829,0.056220293,0.056212302,0.056204315,0.056196332,0.05618835,0.056180373,0.0561724,0.05616443,0.05615646,0.056148496,0.056140535,0.056132577,0.056124624,0.05611667,0.056108724,0.05610078,0.05609284,0.0560849,0.056076966,0.05606904,0.05606111,0.056053188,0.056045268,0.05603735,0.056029435,0.056021526,0.056013618,0.056005716,0.055997815,0.055989917,0.055982023,0.055974133,0.055966247,0.055958364,0.05595048,0.055942606,0.05593473,0.05592686,0.055918995,0.05591113,0.05590327,0.055895414,0.05588756,0.055879712,0.055871863,0.055864017,0.05585618,0.05584834,0.055840507,0.055832677,0.05582485,0.055817027,0.055809204,0.055801388,0.055793572,0.05578576,0.055777956,0.05577015,0.05576235,0.055754554,0.055746756,0.055738967,0.055731177,0.05572339,0.055715613,0.055707835,0.055700056,0.055692285,0.055684518,0.05567675,0.05566899,0.05566123,0.055653475,0.055645727,0.055637978,0.05563023,0.05562249,0.05561475,0.055607013,0.05559928,0.05559155,0.055583823,0.0555761,0.055568382,0.055560663,0.05555295,0.05554524,0.055537533,0.05552983,0.05552213,0.055514432,0.05550674,0.055499047,0.055491358,0.055483673,0.05547599,0.055468313,0.05546064,0.055452965,0.0554453,0.055437632,0.05542997,0.05542231,0.055414654,0.055407003,0.05539935,0.055391703,0.055384062,0.05537642,0.055368785,0.05536115,0.055353522,0.055345893,0.055338267,0.05533065,0.05532303,0.055315413,0.0553078,0.055300195,0.055292588,0.055284984,0.055277385,0.05526979,0.055262197,0.05525461,0.055247024,0.05523944,0.055231858,0.05522428,0.055216707,0.055209134,0.055201568,0.055194,0.05518644,0.05517888,0.055171326,0.05516377,0.055156223,0.055148676,0.055141132,0.055133596,0.055126056,0.055118524,0.055110995,0.055103466,0.05509594,0.05508842,0.055080898,0.055073384,0.05506587,0.055058364,0.055050857,0.05504335,0.055035852,0.055028357,0.05502086,0.05501337,0.055005886,0.0549984,0.054990917,0.05498344,0.054975964,0.05496849,0.054961022,0.054953553,0.05494609,0.05493863,0.05493117,0.054923717,0.054916266,0.05490882,0.054901373,0.05489393,0.05488649,0.05487906,0.054871626,0.054864194,0.054856766,0.05484934,0.05484192,0.054834504,0.05482709,0.054819677,0.054812267,0.05480486,0.05479746,0.054790057,0.05478266,0.054775268,0.054767877,0.054760486,0.054753106,0.054745723,0.054738343,0.054730967,0.054723594,0.054716222,0.054708857,0.054701492,0.05469413,0.054686774,0.054679416,0.054672062,0.054664716,0.05465737,0.054650024,0.054642685,0.054635346,0.054628015,0.054620683,0.05461335,0.054606028,0.054598704,0.054591384,0.054584067,0.054576755,0.05456944,0.054562133,0.054554828,0.054547526,0.054540228,0.05453293,0.054525636,0.054518346,0.05451106,0.054503776,0.054496497,0.054489218,0.054481942,0.054474667,0.0544674,0.05446013,0.054452866,0.054445606,0.054438345,0.05443109,0.05442384,0.054416586,0.05440934,0.054402098,0.054394856,0.054387618,0.054380383,0.054373153,0.05436592,0.054358695,0.05435147,0.05434425,0.054337032,0.054329816,0.054322604,0.054315396,0.054308187,0.054300986,0.054293785,0.054286588,0.05427939,0.054272197,0.05426501,0.054257825,0.054250643,0.05424346,0.05423628,0.054229107,0.054221936,0.054214764,0.0542076,0.054200437,0.054193273,0.054186117,0.05417896,0.054171808,0.05416466,0.054157514,0.05415037,0.054143228,0.05413609,0.054128956,0.054121822,0.054114692,0.054107565,0.054100443,0.05409332,0.0540862,0.054079086,0.054071974,0.054064862,0.054057755,0.05405065,0.05404355,0.05403645,0.054029353,0.054022264,0.054015175,0.054008085,0.054001,0.053993918,0.05398684,0.053979762,0.053972688,0.053965617,0.05395855,0.053951483,0.05394442,0.05393736,0.053930305,0.05392325,0.053916197,0.05390915,0.053902104,0.05389506,0.053888023,0.053880982,0.05387395,0.053866915,0.053859886,0.05385286,0.053845834,0.053838816,0.053831797,0.05382478,0.053817768,0.053810757,0.05380375,0.053796742,0.053789742,0.053782746,0.053775746,0.053768754,0.05376176,0.053754773,0.053747788,0.053740807,0.053733826,0.05372685,0.053719874,0.0537129,0.05370593,0.053698964,0.053692,0.05368504,0.05367808,0.053671125,0.053664174,0.053657223,0.053650275,0.05364333,0.053636387,0.053629447,0.05362251,0.053615578,0.053608645,0.053601716,0.05359479,0.053587865,0.053580943,0.053574026,0.05356711,0.053560197,0.053553287,0.053546384,0.053539477,0.053532578,0.053525675,0.05351878,0.053511884,0.053504996,0.053498104,0.05349122,0.053484336,0.053477455,0.053470578,0.0534637,0.053456828,0.05344996,0.05344309,0.053436223,0.053429365,0.053422507,0.05341565,0.053408794,0.053401943,0.053395092,0.053388245,0.053381402,0.053374562,0.053367723,0.053360887,0.053354055,0.053347223,0.053340394,0.05333357,0.05332675,0.053319927,0.05331311,0.053306296,0.053299483,0.053292673,0.053285867,0.05327906,0.05327226,0.05326546,0.053258665,0.05325187,0.05324508,0.053238288,0.053231504,0.05322472,0.053217936,0.05321116,0.053204384,0.05319761,0.053190842,0.053184073,0.05317731,0.053170543,0.053163785,0.053157028,0.05315027,0.05314352,0.05313677,0.05313002,0.053123277,0.053116534,0.05310979,0.053103056,0.05309632,0.05308959,0.05308286,0.053076133,0.05306941,0.05306269,0.053055968,0.05304925,0.05304254,0.053035825,0.053029116,0.05302241,0.053015705,0.053009003,0.053002305,0.052995607,0.052988913,0.052982222,0.05297553,0.05296885,0.052962165,0.052955486,0.052948806,0.05294213,0.052935455,0.052928783,0.052922115,0.05291545,0.052908786,0.052902125,0.052895468,0.05288881,0.052882157,0.052875504,0.052868858,0.052862212,0.05285557,0.052848928,0.05284229,0.052835654,0.05282902,0.05282239,0.05281576,0.052809134,0.05280251,0.05279589,0.05278927,0.052782655,0.052776042,0.05276943,0.05276282,0.052756216,0.052749615,0.052743014,0.052736413,0.05272982,0.052723225,0.05271663,0.052710045,0.05270346,0.052696873,0.052690294,0.05268371,0.052677136,0.05267056,0.05266399,0.05265742,0.052650854,0.05264429,0.05263773,0.052631173,0.052624617,0.05261806,0.052611507,0.05260496,0.052598413,0.052591868,0.052585326,0.052578785,0.052572247,0.052565712,0.052559182,0.05255265,0.052546125,0.0525396,0.052533075,0.052526556,0.05252004,0.052513525,0.052507013,0.0525005,0.052493993,0.052487485,0.052480984,0.052474484,0.052467983,0.052461486,0.052454993,0.052448504,0.052442014,0.05243553,0.052429043,0.05242256,0.052416086,0.052409608,0.052403133,0.052396663,0.05239019,0.052383725,0.05237726,0.052370798,0.05236434,0.052357882,0.052351426,0.052344974,0.052338522,0.052332073,0.05232563,0.052319184,0.052312743,0.052306306,0.052299872,0.05229344,0.052287005,0.052280575,0.05227415,0.052267727,0.052261304,0.052254885,0.052248467,0.05224205,0.05223564,0.05222923,0.05222282,0.052216414,0.052210014,0.05220361,0.052197218,0.05219082,0.052184425,0.052178036,0.052171648,0.05216526,0.052158874,0.052152492,0.052146114,0.052139737,0.052133363,0.05212699,0.05212062,0.052114252,0.052107885,0.052101523,0.05209516,0.052088805,0.05208245,0.052076094,0.052069742,0.052063394,0.052057046,0.052050702,0.052044358,0.05203802,0.05203168,0.052025348,0.052019015,0.052012682,0.052006353,0.052000027,0.051993705,0.051987384,0.051981065,0.051974747,0.051968433,0.051962122,0.05195581,0.051949505,0.051943198,0.051936895,0.051930595,0.051924296,0.051918,0.051911708,0.051905416,0.051899124,0.05189284,0.051886555,0.05188027,0.051873993,0.051867716,0.05186144,0.051855166,0.051848896,0.051842626,0.05183636,0.051830094,0.051823832,0.051817574,0.051811315,0.05180506,0.05179881,0.05179256,0.051786307,0.051780064,0.05177382,0.05176758,0.05176134,0.051755104,0.051748868,0.051742636,0.051736403,0.051730175,0.05172395,0.05171773,0.051711507,0.051705286,0.05169907,0.051692855,0.05168664,0.05168043,0.051674224,0.05166802,0.051661815,0.051655617,0.051649418,0.05164322,0.051637027,0.051630832,0.051624645,0.051618457,0.05161227,0.051606085,0.051599905,0.051593725,0.051587548,0.051581375,0.051575202,0.051569033,0.051562868,0.051556703,0.051550537,0.051544376,0.051538218,0.05153206,0.051525906,0.05151975,0.051513605,0.051507454,0.051501308,0.051495165,0.051489025,0.051482886,0.051476747,0.05147061,0.05146448,0.05145835,0.051452223,0.0514461,0.051439974,0.051433854,0.051427733,0.051421616,0.0514155,0.051409386,0.051403277,0.051397167,0.05139106,0.051384956,0.051378854,0.051372755,0.051366657,0.051360562,0.05135447,0.05134838,0.05134229,0.051336203,0.05133012,0.051324036,0.051317956,0.051311877,0.0513058,0.05129973,0.051293656,0.051287584,0.05128152,0.051275454,0.05126939,0.05126333,0.05125727,0.051251214,0.05124516,0.051239107,0.051233057,0.05122701,0.051220965,0.05121492,0.05120888,0.051202837,0.051196802,0.051190767,0.051184732,0.0511787,0.051172674,0.051166646,0.051160622,0.0511546,0.051148582,0.051142562,0.051136546,0.051130533,0.05112452,0.05111851,0.051112503,0.051106498,0.051100492,0.05109449,0.051088493,0.051082496,0.0510765,0.051070508,0.051064517,0.05105853,0.051052544,0.05104656,0.05104058,0.051034596,0.05102862,0.051022645,0.05101667,0.051010698,0.051004726,0.05099876,0.050992794,0.05098683,0.05098087,0.05097491,0.050968952,0.050963,0.050957046,0.050951093,0.050945148,0.050939202,0.050933257,0.050927315,0.050921373,0.050915435,0.050909497,0.050903562,0.05089763,0.0508917,0.050885774,0.050879847,0.050873924,0.050868,0.05086208,0.050856166,0.05085025,0.050844338,0.050838426,0.050832517,0.05082661,0.050820705,0.0508148,0.0508089,0.050803,0.0507971,0.050791208,0.050785314,0.050779425,0.050773535,0.05076765,0.050761763,0.05075588,0.050750002,0.050744124,0.050738245,0.05073237,0.0507265,0.05072063,0.05071476,0.050708894,0.05070303,0.050697166,0.050691307,0.050685447,0.05067959,0.050673738,0.050667886,0.050662033,0.05065619,0.050650343,0.0506445,0.050638657,0.050632816,0.05062698,0.05062114,0.050615307,0.050609477,0.050603647,0.050597817,0.050591994,0.050586168,0.050580345,0.050574526,0.050568707,0.050562892,0.050557077,0.05055127,0.050545458,0.05053965,0.050533846,0.050528042,0.050522238,0.050516438,0.05051064,0.050504845,0.05049905,0.05049326,0.05048747,0.05048168,0.050475895,0.050470114,0.05046433,0.05045855,0.050452773,0.050447,0.050441224,0.050435454,0.050429683,0.050423913,0.050418146,0.050412383,0.05040662,0.05040086,0.0503951,0.050389346,0.050383594,0.05037784,0.05037209,0.050366342,0.050360594,0.050354853,0.05034911,0.05034337,0.05033763,0.050331894,0.05032616,0.050320428,0.0503147,0.05030897,0.05030324,0.050297517,0.050291795,0.050286073,0.050280355,0.050274637,0.050268922,0.050263207,0.0502575,0.05025179,0.050246082,0.05024038,0.050234675,0.050228972,0.050223272,0.050217576,0.05021188,0.050206188,0.050200496,0.050194804,0.050189115,0.05018343,0.050177746,0.050172064,0.050166383,0.05016071,0.050155032,0.05014936,0.050143685,0.050138015,0.050132345,0.05012668,0.050121013,0.05011535,0.050109692,0.050104033,0.050098374,0.05009272,0.05008707,0.050081417,0.050075766,0.05007012,0.050064474,0.05005883,0.05005319,0.05004755,0.05004191,0.050036274,0.05003064,0.05002501,0.05001938,0.05001375,0.050008122,0.0500025,0.049996875,0.049991254,0.049985636,0.04998002,0.049974404,0.049968794,0.04996318,0.049957573,0.049951963,0.049946357,0.049940754,0.04993515,0.04992955,0.049923953,0.049918357,0.049912762,0.04990717,0.04990158,0.04989599,0.049890406,0.04988482,0.049879238,0.049873658,0.049868077,0.0498625,0.049856924,0.04985135,0.049845777,0.04984021,0.04983464,0.049829073,0.04982351,0.049817946,0.049812388,0.049806826,0.04980127,0.049795717,0.049790163,0.049784612,0.04977906,0.049773514,0.04976797,0.049762424,0.049756885,0.04975134,0.049745806,0.049740266,0.049734734,0.0497292,0.04972367,0.04971814,0.049712613,0.04970709,0.049701564,0.04969604,0.049690522,0.049685005,0.049679488,0.049673975,0.04966846,0.04966295,0.04965744,0.049651936,0.04964643,0.049640924,0.049635425,0.049629923,0.049624424,0.04961893,0.049613435,0.049607944,0.049602453,0.049596965,0.049591478,0.049585994,0.04958051,0.049575027,0.049569547,0.04956407,0.049558595,0.04955312,0.049547646,0.049542177,0.04953671,0.04953124,0.049525775,0.04952031,0.04951485,0.04950939,0.049503934,0.049498476,0.049493022,0.049487572,0.04948212,0.049476672,0.049471222,0.04946578,0.049460333,0.049454894,0.04944945,0.049444012,0.049438577,0.049433142,0.04942771,0.04942228,0.04941685,0.049411424,0.049406,0.049400575,0.04939515,0.04938973,0.049384315,0.049378898,0.04937348,0.04936807,0.049362656,0.049357247,0.049351837,0.049346432,0.049341027,0.049335625,0.049330223,0.049324825,0.04931943,0.049314033,0.049308643,0.04930325,0.049297858,0.04929247,0.049287084,0.049281698,0.049276315,0.049270935,0.049265556,0.049260177,0.0492548,0.049249426,0.049244054,0.049238686,0.049233314,0.04922795,0.049222585,0.04921722,0.04921186,0.0492065,0.04920114,0.04919578,0.049190428,0.049185075,0.04917972,0.049174372,0.049169026,0.049163677,0.049158335,0.049152993,0.04914765,0.049142312,0.049136974,0.04913164,0.049126305,0.049120974,0.049115643,0.049110312,0.049104985,0.04909966,0.049094338,0.049089015,0.049083695,0.049078375,0.04907306,0.049067743,0.04906243,0.04905712,0.04905181,0.049046505,0.049041197,0.049035892,0.04903059,0.04902529,0.04901999,0.04901469,0.049009394,0.0490041,0.048998807,0.048993517,0.048988227,0.04898294,0.048977654,0.04897237,0.04896709,0.048961807,0.04895653,0.048951253,0.04894598,0.048940703,0.048935432,0.04893016,0.048924893,0.048919626,0.048914358,0.048909094,0.048903834,0.048898574,0.048893314,0.048888057,0.048882805,0.04887755,0.0488723,0.04886705,0.0488618,0.048856553,0.04885131,0.048846066,0.048840825,0.048835583,0.048830345,0.04882511,0.048819873,0.048814643,0.04880941,0.04880418,0.048798952,0.048793726,0.0487885,0.04878328,0.048778057,0.048772838,0.04876762,0.048762403,0.048757188,0.048751976,0.048746765,0.048741553,0.048736345,0.04873114,0.048725937,0.048720732,0.04871553,0.04871033,0.048705135,0.048699938,0.048694745,0.04868955,0.04868436,0.04867917,0.04867398,0.048668794,0.04866361,0.048658427,0.048653245,0.048648067,0.04864289,0.04863771,0.048632536,0.04862736,0.04862219,0.04861702,0.048611853,0.04860669,0.048601523,0.04859636,0.0485912,0.048586037,0.04858088,0.048575725,0.04857057,0.048565414,0.04856026,0.048555113,0.048549965,0.048544817,0.048539672,0.048534527,0.048529387,0.048524246,0.04851911,0.04851397,0.048508838,0.048503704,0.04849857,0.04849344,0.04848831,0.048483185,0.04847806,0.048472933,0.04846781,0.048462693,0.04845757,0.048452456,0.048447337,0.048442226,0.04843711,0.048432004,0.048426893,0.048421785,0.048416678,0.048411574,0.04840647,0.04840137,0.04839627,0.04839117,0.048386075,0.04838098,0.048375886,0.048370793,0.048365705,0.048360616,0.04835553,0.048350446,0.04834536,0.04834028,0.0483352,0.04833012,0.048325043,0.04831997,0.04831489,0.04830982,0.04830475,0.04829968,0.04829461,0.04828955,0.048284482,0.04827942,0.048274357,0.048269298,0.04826424,0.048259184,0.048254132,0.048249077,0.048244026,0.048238974,0.048233926,0.04822888,0.048223834,0.04821879,0.048213746,0.048208706,0.04820367,0.04819863,0.048193593,0.04818856,0.048183527,0.048178498,0.04817347,0.04816844,0.048163414,0.04815839,0.048153363,0.04814834,0.048143324,0.048138306,0.048133288,0.048128273,0.04812326,0.048118245,0.048113234,0.048108224,0.048103217,0.04809821,0.048093207,0.048088204,0.048083205,0.048078205,0.048073206,0.04806821,0.048063215,0.04805822,0.048053227,0.04804824,0.048043247,0.048038263,0.048033275,0.04802829,0.04802331,0.04801833,0.048013348,0.04800837,0.048003394,0.04799842,0.047993448,0.047988474,0.047983505,0.047978535,0.047973566,0.0479686,0.047963638,0.047958676,0.047953714,0.047948755,0.047943797,0.04793884,0.047933884,0.04792893,0.047923982,0.04791903,0.04791408,0.047909133,0.04790419,0.047899242,0.047894303,0.04788936,0.04788442,0.047879484,0.047874548,0.04786961,0.047864676,0.047859743,0.047854815,0.047849886,0.047844958,0.047840033,0.047835108,0.047830187,0.047825266,0.047820345,0.047815427,0.04781051,0.047805596,0.047800682,0.04779577,0.04779086,0.04778595,0.047781043,0.047776137,0.04777123,0.047766328,0.047761425,0.047756527,0.047751628,0.04774673,0.047741834,0.047736943,0.047732048,0.047727156,0.04772227,0.047717378,0.047712494,0.047707606,0.047702722,0.047697842,0.047692962,0.04768808,0.047683205,0.04767833,0.047673456,0.047668584,0.04766371,0.04765884,0.047653973,0.047649104,0.04764424,0.047639374,0.047634512,0.04762965,0.04762479,0.04761993,0.047615077,0.04761022,0.047605366,0.047600515,0.047595665,0.047590815,0.047585968,0.04758112,0.047576275,0.04757143,0.047566593,0.04756175,0.04755691,0.047552075,0.04754724,0.047542404,0.04753757,0.047532737,0.04752791,0.04752308,0.047518253,0.047513425,0.047508605,0.04750378,0.04749896,0.04749414,0.047489323,0.047484506,0.04747969,0.047474876,0.047470063,0.047465254,0.047460444,0.047455635,0.04745083,0.047446024,0.047441218,0.047436416,0.047431614,0.04742682,0.04742202,0.047417223,0.04741243,0.047407635,0.047402844,0.047398053,0.047393262,0.047388475,0.04738369,0.047378905,0.04737412,0.04736934,0.04736456,0.04735978,0.047355,0.047350224,0.047345452,0.04734068,0.047335908,0.047331136,0.047326367,0.0473216,0.047316834,0.04731207,0.047307305,0.047302544,0.047297783,0.047293026,0.04728827,0.04728351,0.04727876,0.047274005,0.047269255,0.047264505,0.047259755,0.04725501,0.047250263,0.047245517,0.047240775,0.047236033,0.04723129,0.047226552,0.047221817,0.04721708,0.047212344,0.047207613,0.04720288,0.04719815,0.047193423,0.047188696,0.047183968,0.047179244,0.04717452,0.0471698,0.04716508,0.04716036,0.047155645,0.04715093,0.047146212,0.0471415,0.047136787,0.04713208,0.047127366,0.04712266,0.047117952,0.04711325,0.047108546,0.047103845,0.047099143,0.047094446,0.047089748,0.04708505,0.047080357,0.047075663,0.047070973,0.04706628,0.047061592,0.047056902,0.047052216,0.04704753,0.047042847,0.047038164,0.047033485,0.047028806,0.047024127,0.04701945,0.047014777,0.0470101,0.04700543,0.04700076,0.046996087,0.04699142,0.04698675,0.046982087,0.046977423,0.04697276,0.0469681,0.04696344,0.04695878,0.04695412,0.04694947,0.046944816,0.04694016,0.04693551,0.046930857,0.046926208,0.046921562,0.046916917,0.04691227,0.046907626,0.046902984,0.046898346,0.046893705,0.046889067,0.046884432,0.046879794,0.04687516,0.04687053,0.0468659,0.04686127,0.04685664,0.046852015,0.04684739,0.046842765,0.046838142,0.04683352,0.0468289,0.04682428,0.046819665,0.04681505,0.046810433,0.04680582,0.04680121,0.046796598,0.04679199,0.04678738,0.046782777,0.046778172,0.046773568,0.046768963,0.046764363,0.046759766,0.046755165,0.046750568,0.046745975,0.046741378,0.046736784,0.046732195,0.046727605,0.046723016,0.046718426,0.046713844,0.046709258,0.046704676,0.046700094,0.04669551,0.046690933,0.046686355,0.046681777,0.046677202,0.046672627,0.046668056,0.046663485,0.046658915,0.046654347,0.04664978,0.046645213,0.04664065,0.046636086,0.046631522,0.046626963,0.046622403,0.046617847,0.04661329,0.046608735,0.04660418,0.046599627,0.046595078,0.046590526,0.046585977,0.046581432,0.046576884,0.04657234,0.046567798,0.046563257,0.046558715,0.046554178,0.04654964,0.046545103,0.046540566,0.046536032,0.0465315,0.04652697,0.04652244,0.04651791,0.046513382,0.046508856,0.046504334,0.046499807,0.046495285,0.046490766,0.046486247,0.04648173,0.046477214,0.0464727,0.046468183,0.046463672,0.04645916,0.04645465,0.046450138,0.04644563,0.046441127,0.046436623,0.04643212,0.046427615,0.046423115,0.046418615,0.046414115,0.04640962,0.046405125,0.04640063,0.046396136,0.046391644,0.046387155,0.046382666,0.046378177,0.04637369,0.046369206,0.04636472,0.04636024,0.046355758,0.046351276,0.0463468,0.04634232,0.046337843,0.04633337,0.046328895,0.046324424,0.046319954,0.046315484,0.046311013,0.046306547,0.04630208,0.046297617,0.046293154,0.04628869,0.046284232,0.04627977,0.046275314,0.046270855,0.0462664,0.046261948,0.046257496,0.046253044,0.046248592,0.046244144,0.046239696,0.04623525,0.046230804,0.04622636,0.046221916,0.046217475,0.046213035,0.046208598,0.046204157,0.04619972,0.046195287,0.046190854,0.04618642,0.04618199,0.046177562,0.046173133,0.046168704,0.046164278,0.046159852,0.04615543,0.04615101,0.046146587,0.04614217,0.046137746,0.046133332,0.046128914,0.0461245,0.046120085,0.046115674,0.046111263,0.046106856,0.046102446,0.04609804,0.046093635,0.04608923,0.046084825,0.046080425,0.046076022,0.046071623,0.046067227,0.046062827,0.04605843,0.04605404,0.046049643,0.04604525,0.046040863,0.04603647,0.046032086,0.046027698,0.046023313,0.04601893,0.046014544,0.046010163,0.04600578,0.0460014,0.045997024,0.045992646,0.045988273,0.045983896,0.045979522,0.045975152,0.045970783,0.045966413,0.045962043,0.045957677,0.04595331,0.04594895,0.045944583,0.045940224,0.04593586,0.045931503,0.045927145,0.045922786,0.04591843,0.045914076,0.04590972,0.04590537,0.04590102,0.04589667,0.04589232,0.045887973,0.04588363,0.045879286,0.045874942,0.0458706,0.04586626,0.04586192,0.045857582,0.045853242,0.045848906,0.045844574,0.045840237,0.045835905,0.045831576,0.045827243,0.04582292,0.04581859,0.045814265,0.04580994,0.045805614,0.045801293,0.04579697,0.04579265,0.045788333,0.045784015,0.045779698,0.045775384,0.04577107,0.045766756,0.045762446,0.045758136,0.045753825,0.04574952,0.04574521,0.045740906,0.045736603,0.0457323,0.045727998,0.045723695,0.045719396,0.045715097,0.045710802,0.045706507,0.04570221,0.04569792,0.045693625,0.045689337,0.045685045,0.045680758,0.04567647,0.045672182,0.0456679,0.045663618,0.045659333,0.045655053,0.045650773,0.045646492,0.045642216,0.04563794,0.045633662,0.04562939,0.045625117,0.045620844,0.045616575,0.045612305,0.045608036,0.04560377,0.045599505,0.045595244,0.045590978,0.045586716,0.045582455,0.045578197,0.04557394,0.04556968,0.045565423,0.04556117,0.045556914,0.045552664,0.045548413,0.045544162,0.04553991,0.045535665,0.04553142,0.04552717,0.04552293,0.045518685,0.045514446,0.045510203,0.045505963,0.045501728,0.04549749,0.045493253,0.045489017,0.045484785,0.045480553,0.04547632,0.045472093,0.04546786,0.045463637,0.04545941,0.045455184,0.04545096,0.04544674,0.045442514,0.045438293,0.045434076,0.04542986,0.04542564,0.045421425,0.04541721,0.045412995,0.045408785,0.045404572,0.045400362,0.045396153,0.045391947,0.04538774,0.045383535,0.045379333,0.045375127,0.045370925,0.045366727,0.045362525,0.045358326,0.04535413,0.045349933,0.04534574,0.045341548,0.045337353,0.045333162,0.04532897,0.045324784,0.045320597,0.04531641,0.045312222,0.04530804,0.045303855,0.045299675,0.04529549,0.045291312,0.045287136,0.045282956,0.04527878,0.045274608,0.04527043,0.04526626,0.045262087,0.04525792,0.045253746,0.04524958,0.045245413,0.045241248,0.045237083,0.045232918,0.045228757,0.045224596,0.045220435,0.045216277,0.04521212,0.045207962,0.045203805,0.04519965,0.045195498,0.045191348,0.045187194,0.045183044,0.045178898,0.045174748,0.0451706,0.04516646,0.045162316,0.04515817,0.04515403,0.04514989,0.04514575,0.04514161,0.045137472,0.045133337,0.045129202,0.045125067,0.045120936,0.045116805,0.045112673,0.045108546,0.045104418,0.04510029,0.045096166,0.04509204,0.045087915,0.045083795,0.04507967,0.04507555,0.045071434,0.045067314,0.045063198,0.04505908,0.04505497,0.045050852,0.045046743,0.04504263,0.04503852,0.045034412,0.045030303,0.045026198,0.045022093,0.045017987,0.045013882,0.04500978,0.04500568,0.04500158,0.04499748,0.044993382,0.044989288,0.04498519,0.044981096,0.044977,0.04497291,0.04496882,0.04496473,0.044960644,0.044956554,0.044952467,0.044948384,0.044944298,0.044940215,0.04493613,0.044932052,0.044927973,0.044923894,0.044919815,0.04491574,0.044911664,0.04490759,0.044903517,0.04489944,0.044895373,0.0448913,0.044887234,0.044883166,0.0448791,0.044875033,0.04487097,0.044866905,0.044862844,0.044858783,0.044854723,0.044850662,0.044846606,0.04484255,0.044838496,0.04483444,0.044830386,0.044826332,0.044822283,0.044818234,0.044814184,0.044810135,0.04480609,0.044802044,0.044797998,0.044793956,0.044789914,0.044785872,0.04478183,0.044777792,0.044773754,0.044769716,0.04476568,0.044761647,0.044757612,0.04475358,0.04474955,0.04474552,0.04474149,0.044737462,0.044733435,0.044729408,0.044725385,0.04472136],"x":[50.0,50.08996401439424,50.17992802878848,50.26989204318273,50.35985605757697,50.44982007197121,50.53978408636545,50.6297481007597,50.71971211515394,50.80967612954818,50.89964014394242,50.98960415833667,51.07956817273091,51.16953218712515,51.25949620151939,51.34946021591364,51.43942423030788,51.52938824470212,51.61935225909636,51.7093162734906,51.79928028788485,51.88924430227909,51.97920831667333,52.06917233106757,52.15913634546182,52.24910035985606,52.3390643742503,52.42902838864454,52.51899240303879,52.60895641743303,52.69892043182727,52.78888444622151,52.87884846061576,52.96881247501,53.05877648940424,53.14874050379848,53.238704518192726,53.32866853258697,53.41863254698121,53.50859656137545,53.59856057576969,53.68852459016394,53.77848860455818,53.86845261895242,53.95841663334666,54.048380647740906,54.13834466213515,54.22830867652939,54.31827269092363,54.408236705317876,54.498200719712116,54.58816473410636,54.6781287485006,54.768092762894845,54.858056777289086,54.94802079168333,55.03798480607757,55.12794882047181,55.217912834866056,55.307876849260296,55.39784086365454,55.48780487804878,55.577768892443025,55.667732906837266,55.757696921231506,55.84766093562575,55.937624950019995,56.027588964414235,56.117552978808476,56.20751699320272,56.297481007596964,56.387445021991205,56.477409036385446,56.567373050779686,56.657337065173934,56.747301079568174,56.837265093962415,56.927229108356656,57.017193122750896,57.107157137145144,57.197121151539385,57.287085165933625,57.377049180327866,57.467013194722114,57.556977209116354,57.646941223510595,57.736905237904836,57.82686925229908,57.916833266693324,58.006797281087564,58.096761295481805,58.18672530987605,58.27668932427029,58.366653338664534,58.456617353058775,58.546581367453015,58.63654538184726,58.726509396241504,58.816473410635744,58.906437425029985,58.99640143942423,59.08636545381847,59.176329468212714,59.266293482606955,59.3562574970012,59.44622151139544,59.53618552578968,59.626149540183924,59.71611355457817,59.80607756897241,59.89604158336665,59.986005597760894,60.07596961215514,60.16593362654938,60.25589764094362,60.34586165533786,60.435825669732104,60.52578968412635,60.61575369852059,60.70571771291483,60.79568172730907,60.88564574170332,60.97560975609756,61.0655737704918,61.15553778488604,61.24550179928029,61.33546581367453,61.42542982806877,61.51539384246301,61.60535785685726,61.6953218712515,61.78528588564574,61.87524990003998,61.96521391443422,62.05517792882847,62.14514194322271,62.23510595761695,62.32506997201119,62.41503398640544,62.50499800079968,62.59496201519392,62.68492602958816,62.77489004398241,62.86485405837665,62.95481807277089,63.04478208716513,63.13474610155938,63.22471011595362,63.31467413034786,63.4046381447421,63.49460215913635,63.58456617353059,63.67453018792483,63.76449420231907,63.85445821671331,63.94442223110756,64.03438624550179,64.12435025989605,64.21431427429029,64.30427828868453,64.39424230307877,64.48420631747301,64.57417033186725,64.66413434626149,64.75409836065573,64.84406237504999,64.93402638944423,65.02399040383847,65.11395441823271,65.20391843262695,65.29388244702119,65.38384646141543,65.47381047580967,65.56377449020391,65.65373850459817,65.74370251899241,65.83366653338665,65.92363054778089,66.01359456217513,66.10355857656937,66.19352259096361,66.28348660535785,66.3734506197521,66.46341463414635,66.55337864854059,66.64334266293483,66.73330667732907,66.82327069172331,66.91323470611755,67.00319872051179,67.09316273490603,67.18312674930029,67.27309076369453,67.36305477808877,67.45301879248301,67.54298280687725,67.63294682127149,67.72291083566573,67.81287485005997,67.90283886445422,67.99280287884847,68.0827668932427,68.17273090763695,68.26269492203119,68.35265893642543,68.44262295081967,68.53258696521391,68.62255097960815,68.7125149940024,68.80247900839665,68.89244302279089,68.98240703718513,69.07237105157937,69.16233506597361,69.25229908036785,69.34226309476209,69.43222710915634,69.52219112355058,69.61215513794482,69.70211915233907,69.7920831667333,69.88204718112755,69.97201119552179,70.06197520991603,70.15193922431028,70.24190323870452,70.33186725309876,70.421831267493,70.51179528188725,70.60175929628149,70.69172331067573,70.78168732506997,70.87165133946421,70.96161535385846,71.0515793682527,71.14154338264694,71.23150739704118,71.32147141143543,71.41143542582967,71.5013994402239,71.59136345461815,71.6813274690124,71.77129148340664,71.86125549780088,71.95121951219512,72.04118352658936,72.1311475409836,72.22111155537785,72.31107556977209,72.40103958416633,72.49100359856058,72.58096761295482,72.67093162734906,72.7608956417433,72.85085965613754,72.94082367053178,73.03078768492603,73.12075169932027,73.21071571371452,73.30067972810876,73.390643742503,73.48060775689724,73.57057177129148,73.66053578568572,73.75049980007996,73.8404638144742,73.93042782886845,74.0203918432627,74.11035585765694,74.20031987205118,74.29028388644542,74.38024790083966,74.4702119152339,74.56017592962814,74.65013994402238,74.74010395841664,74.83006797281088,74.92003198720512,75.00999600159936,75.0999600159936,75.18992403038784,75.27988804478208,75.36985205917632,75.45981607357056,75.54978008796482,75.63974410235906,75.7297081167533,75.81967213114754,75.90963614554178,75.99960015993602,76.08956417433026,76.1795281887245,76.26949220311876,76.359456217513,76.44942023190724,76.53938424630148,76.62934826069572,76.71931227508996,76.8092762894842,76.89924030387844,76.9892043182727,77.07916833266694,77.16913234706118,77.25909636145542,77.34906037584966,77.4390243902439,77.52898840463814,77.61895241903238,77.70891643342662,77.79888044782088,77.88884446221512,77.97880847660936,78.0687724910036,78.15873650539784,78.24870051979208,78.33866453418632,78.42862854858056,78.51859256297482,78.60855657736906,78.6985205917633,78.78848460615754,78.87844862055178,78.96841263494602,79.05837664934026,79.1483406637345,79.23830467812874,79.328268692523,79.41823270691724,79.50819672131148,79.59816073570572,79.68812475009996,79.7780887644942,79.86805277888844,79.95801679328268,80.04798080767694,80.13794482207118,80.22790883646542,80.31787285085966,80.4078368652539,80.49780087964814,80.58776489404238,80.67772890843662,80.76769292283086,80.85765693722512,80.94762095161936,81.0375849660136,81.12754898040784,81.21751299480208,81.30747700919632,81.39744102359056,81.4874050379848,81.57736905237905,81.6673330667733,81.75729708116754,81.84726109556178,81.93722510995602,82.02718912435026,82.1171531387445,82.20711715313874,82.29708116753298,82.38704518192723,82.47700919632148,82.56697321071572,82.65693722510996,82.7469012395042,82.83686525389844,82.92682926829268,83.01679328268692,83.10675729708117,83.19672131147541,83.28668532586966,83.3766493402639,83.46661335465814,83.55657736905238,83.64654138344662,83.73650539784086,83.82646941223511,83.91643342662935,84.0063974410236,84.09636145541783,84.18632546981208,84.27628948420632,84.36625349860056,84.4562175129948,84.54618152738904,84.63614554178329,84.72610955617753,84.81607357057177,84.90603758496601,84.99600159936026,85.0859656137545,85.17592962814874,85.26589364254298,85.35585765693723,85.44582167133147,85.53578568572571,85.62574970011995,85.7157137145142,85.80567772890844,85.89564174330268,85.98560575769692,86.07556977209116,86.16553378648541,86.25549780087965,86.3454618152739,86.43542582966813,86.52538984406237,86.61535385845661,86.70531787285086,86.7952818872451,86.88524590163935,86.97520991603359,87.06517393042783,87.15513794482207,87.24510195921631,87.33506597361055,87.4250299880048,87.51499400239904,87.60495801679328,87.69492203118753,87.78488604558177,87.87485005997601,87.96481407437025,88.0547780887645,88.14474210315873,88.23470611755297,88.32467013194722,88.41463414634147,88.50459816073571,88.59456217512995,88.68452618952419,88.77449020391843,88.86445421831267,88.95441823270691,89.04438224710115,89.1343462614954,89.22431027588965,89.31427429028389,89.40423830467813,89.49420231907237,89.58416633346661,89.67413034786085,89.7640943622551,89.85405837664933,89.94402239104359,90.03398640543783,90.12395041983207,90.21391443422631,90.30387844862055,90.39384246301479,90.48380647740903,90.57377049180327,90.66373450619751,90.75369852059177,90.84366253498601,90.93362654938025,91.02359056377449,91.11355457816873,91.20351859256297,91.29348260695721,91.38344662135145,91.47341063574571,91.56337465013995,91.65333866453419,91.74330267892843,91.83326669332267,91.92323070771691,92.01319472211115,92.10315873650539,92.19312275089965,92.28308676529389,92.37305077968813,92.46301479408237,92.55297880847661,92.64294282287085,92.73290683726509,92.82287085165933,92.91283486605357,93.00279888044783,93.09276289484207,93.18272690923631,93.27269092363055,93.36265493802479,93.45261895241903,93.54258296681327,93.63254698120751,93.72251099560177,93.812475009996,93.90243902439025,93.99240303878449,94.08236705317873,94.17233106757297,94.26229508196721,94.35225909636145,94.44222311075569,94.53218712514995,94.62215113954419,94.71211515393843,94.80207916833267,94.89204318272691,94.98200719712115,95.07197121151539,95.16193522590963,95.25189924030389,95.34186325469813,95.43182726909237,95.5217912834866,95.61175529788085,95.70171931227509,95.79168332666933,95.88164734106357,95.97161135545781,96.06157536985206,96.1515393842463,96.24150339864055,96.33146741303479,96.42143142742903,96.51139544182327,96.60135945621751,96.69132347061175,96.781287485006,96.87125149940024,96.96121551379449,97.05117952818873,97.14114354258297,97.23110755697721,97.32107157137145,97.41103558576569,97.50099960015993,97.59096361455418,97.68092762894842,97.77089164334267,97.8608556577369,97.95081967213115,98.04078368652539,98.13074770091963,98.22071171531387,98.31067572970812,98.40063974410236,98.4906037584966,98.58056777289084,98.67053178728509,98.76049580167933,98.85045981607357,98.94042383046781,99.03038784486206,99.1203518592563,99.21031587365054,99.30027988804478,99.39024390243902,99.48020791683327,99.5701719312275,99.66013594562175,99.75009996001599,99.84006397441024,99.93002798880448,100.01999200319872,100.10995601759296,100.1999200319872,100.28988404638145,100.37984806077569,100.46981207516993,100.55977608956418,100.64974010395842,100.73970411835266,100.8296681327469,100.91963214714114,101.00959616153538,101.09956017592962,101.18952419032387,101.2794882047181,101.36945221911236,101.4594162335066,101.54938024790084,101.63934426229508,101.72930827668932,101.81927229108356,101.9092363054778,101.99920031987205,102.0891643342663,102.17912834866054,102.26909236305478,102.35905637744902,102.44902039184326,102.5389844062375,102.62894842063174,102.71891243502598,102.80887644942023,102.89884046381448,102.98880447820872,103.07876849260296,103.1687325069972,103.25869652139144,103.34866053578568,103.43862455017992,103.52858856457416,103.61855257896842,103.70851659336266,103.7984806077569,103.88844462215114,103.97840863654538,104.06837265093962,104.15833666533386,104.2483006797281,104.33826469412234,104.4282287085166,104.51819272291084,104.60815673730508,104.69812075169932,104.78808476609356,104.8780487804878,104.96801279488204,105.05797680927628,105.14794082367054,105.23790483806478,105.32786885245902,105.41783286685326,105.5077968812475,105.59776089564174,105.68772491003598,105.77768892443022,105.86765293882446,105.95761695321872,106.04758096761296,106.1375449820072,106.22750899640144,106.31747301079568,106.40743702518992,106.49740103958416,106.5873650539784,106.67732906837266,106.7672930827669,106.85725709716114,106.94722111155538,107.03718512594962,107.12714914034386,107.2171131547381,107.30707716913234,107.3970411835266,107.48700519792084,107.57696921231508,107.66693322670932,107.75689724110356,107.8468612554978,107.93682526989204,108.02678928428628,108.11675329868052,108.20671731307478,108.29668132746902,108.38664534186326,108.4766093562575,108.56657337065174,108.65653738504598,108.74650139944022,108.83646541383446,108.92642942822872,109.01639344262296,109.1063574570172,109.19632147141144,109.28628548580568,109.37624950019992,109.46621351459416,109.5561775289884,109.64614154338264,109.7361055577769,109.82606957217114,109.91603358656538,110.00599760095962,110.09596161535386,110.1859256297481,110.27588964414234,110.36585365853658,110.45581767293083,110.54578168732507,110.63574570171932,110.72570971611356,110.8156737305078,110.90563774490204,110.99560175929628,111.08556577369052,111.17552978808476,111.26549380247901,111.35545781687325,111.4454218312675,111.53538584566174,111.62534986005598,111.71531387445022,111.80527788884446,111.8952419032387,111.98520591763295,112.0751699320272,112.16513394642143,112.25509796081568,112.34506197520992,112.43502598960416,112.5249900039984,112.61495401839264,112.70491803278688,112.79488204718113,112.88484606157537,112.97481007596961,113.06477409036385,113.1547381047581,113.24470211915234,113.33466613354658,113.42463014794082,113.51459416233507,113.60455817672931,113.69452219112355,113.7844862055178,113.87445021991203,113.96441423430628,114.05437824870052,114.14434226309476,114.23430627748901,114.32427029188325,114.41423430627749,114.50419832067173,114.59416233506597,114.68412634946021,114.77409036385446,114.8640543782487,114.95401839264294,115.04398240703719,115.13394642143143,115.22391043582567,115.31387445021991,115.40383846461415,115.4938024790084,115.58376649340263,115.67373050779688,115.76369452219113,115.85365853658537,115.94362255097961,116.03358656537385,116.1235505797681,116.21351459416233,116.30347860855657,116.39344262295081,116.48340663734506,116.57337065173931,116.66333466613355,116.75329868052779,116.84326269492203,116.93322670931627,117.02319072371051,117.11315473810475,117.203118752499,117.29308276689325,117.38304678128749,117.47301079568173,117.56297481007597,117.65293882447021,117.74290283886445,117.8328668532587,117.92283086765293,118.01279488204717,118.10275889644143,118.19272291083567,118.28268692522991,118.37265093962415,118.46261495401839,118.55257896841263,118.64254298280687,118.73250699720111,118.82247101159537,118.91243502598961,119.00239904038385,119.09236305477809,119.18232706917233,119.27229108356657,119.36225509796081,119.45221911235505,119.5421831267493,119.63214714114355,119.72211115553779,119.81207516993203,119.90203918432627,119.99200319872051,120.08196721311475,120.17193122750899,120.26189524190323,120.35185925629749,120.44182327069173,120.53178728508597,120.62175129948021,120.71171531387445,120.80167932826869,120.89164334266293,120.98160735705717,121.07157137145141,121.16153538584567,121.25149940023991,121.34146341463415,121.43142742902839,121.52139144342263,121.61135545781687,121.70131947221111,121.79128348660535,121.8812475009996,121.97121151539385,122.06117552978809,122.15113954418233,122.24110355857657,122.33106757297081,122.42103158736505,122.51099560175929,122.60095961615355,122.69092363054779,122.78088764494203,122.87085165933627,122.96081567373051,123.05077968812475,123.14074370251899,123.23070771691323,123.32067173130747,123.41063574570173,123.50059976009597,123.5905637744902,123.68052778888445,123.77049180327869,123.86045581767293,123.95041983206717,124.04038384646141,124.13034786085566,124.2203118752499,124.31027588964415,124.40023990403839,124.49020391843263,124.58016793282687,124.67013194722111,124.76009596161535,124.85005997600959,124.94002399040384,125.02998800479808,125.11995201919233,125.20991603358657,125.2998800479808,125.38984406237505,125.47980807676929,125.56977209116353,125.65973610555778,125.74970011995202,125.83966413434626,125.9296281487405,126.01959216313475,126.10955617752899,126.19952019192323,126.28948420631747,126.37944822071171,126.46941223510596,126.5593762495002,126.64934026389444,126.73930427828869,126.82926829268293,126.91923230707717,127.0091963214714,127.09916033586565,127.1891243502599,127.27908836465414,127.36905237904838,127.45901639344262,127.54898040783686,127.6389444222311,127.72890843662535,127.81887245101959,127.90883646541383,127.99880047980808,128.0887644942023,128.17872850859655,128.2686925229908,128.35865653738506,128.4486205517793,128.53858456617354,128.62854858056778,128.71851259496202,128.80847660935626,128.8984406237505,128.98840463814474,129.07836865253898,129.16833266693322,129.25829668132747,129.3482606957217,129.43822471011595,129.5281887245102,129.61815273890443,129.70811675329867,129.7980807676929,129.88804478208718,129.97800879648142,130.06797281087566,130.1579368252699,130.24790083966414,130.33786485405838,130.42782886845262,130.51779288284686,130.6077568972411,130.69772091163534,130.78768492602958,130.87764894042382,130.96761295481807,131.0575769692123,131.14754098360655,131.2375049980008,131.32746901239503,131.4174330267893,131.50739704118354,131.59736105557778,131.68732506997202,131.77728908436626,131.8672530987605,131.95721711315474,132.04718112754898,132.13714514194322,132.22710915633746,132.3170731707317,132.40703718512594,132.49700119952018,132.58696521391443,132.67692922830867,132.7668932427029,132.85685725709718,132.94682127149142,133.03678528588566,133.1267493002799,133.21671331467414,133.30667732906838,133.39664134346262,133.48660535785686,133.5765693722511,133.66653338664534,133.75649740103958,133.84646141543382,133.93642542982806,134.0263894442223,134.11635345861654,134.20631747301078,134.29628148740503,134.3862455017993,134.47620951619353,134.56617353058778,134.65613754498202,134.74610155937626,134.8360655737705,134.92602958816474,135.01599360255898,135.10595761695322,135.19592163134746,135.2858856457417,135.37584966013594,135.46581367453018,135.55577768892442,135.64574170331866,135.7357057177129,135.82566973210714,135.9156337465014,136.00559776089565,136.0955617752899,136.18552578968414,136.27548980407838,136.36545381847262,136.45541783286686,136.5453818472611,136.63534586165534,136.72530987604958,136.81527389044382,136.90523790483806,136.9952019192323,137.08516593362654,137.17512994802078,137.26509396241502,137.35505797680926,137.44502199120353,137.53498600559777,137.624950019992,137.71491403438625,137.8048780487805,137.89484206317474,137.98480607756898,138.07477009196322,138.16473410635746,138.2546981207517,138.34466213514594,138.43462614954018,138.52459016393442,138.61455417832866,138.7045181927229,138.79448220711714,138.88444622151138,138.97441023590565,139.0643742502999,139.15433826469413,139.24430227908837,139.3342662934826,139.42423030787685,139.5141943222711,139.60415833666534,139.69412235105958,139.78408636545382,139.87405037984806,139.9640143942423,140.05397840863654,140.14394242303078,140.23390643742502,140.32387045181926,140.4138344662135,140.50379848060777,140.593762495002,140.68372650939625,140.7736905237905,140.86365453818473,140.95361855257897,141.0435825669732,141.13354658136745,141.2235105957617,141.31347461015594,141.40343862455018,141.49340263894442,141.58336665333866,141.6733306677329,141.76329468212714,141.85325869652138,141.94322271091562,142.0331867253099,142.12315073970413,142.21311475409837,142.3030787684926,142.39304278288685,142.4830067972811,142.57297081167533,142.66293482606957,142.7528988404638,142.84286285485805,142.9328268692523,143.02279088364654,143.11275489804078,143.20271891243502,143.29268292682926,143.3826469412235,143.47261095561774,143.562574970012,143.65253898440625,143.7425029988005,143.83246701319473,143.92243102758897,144.0123950419832,144.10235905637745,144.1923230707717,144.28228708516593,144.37225109956017,144.46221511395441,144.55217912834866,144.6421431427429,144.73210715713714,144.82207117153138,144.91203518592562,145.00199920031986,145.09196321471413,145.18192722910837,145.2718912435026,145.36185525789685,145.4518192722911,145.54178328668533,145.63174730107957,145.7217113154738,145.81167532986805,145.9016393442623,145.99160335865653,146.08156737305077,146.17153138744501,146.26149540183926,146.3514594162335,146.44142343062774,146.53138744502198,146.62135145941625,146.7113154738105,146.80127948820473,146.89124350259897,146.9812075169932,147.07117153138745,147.1611355457817,147.25109956017593,147.34106357457017,147.4310275889644,147.52099160335865,147.6109556177529,147.70091963214713,147.79088364654137,147.88084766093561,147.97081167532986,148.06077568972412,148.15073970411837,148.2407037185126,148.33066773290685,148.4206317473011,148.51059576169533,148.60055977608957,148.6905237904838,148.78048780487805,148.8704518192723,148.96041583366653,149.05037984806077,149.140343862455,149.23030787684925,149.3202718912435,149.41023590563773,149.50019992003197,149.59016393442624,149.68012794882048,149.77009196321472,149.86005597760897,149.9500199920032,150.03998400639745,150.1299480207917,150.21991203518593,150.30987604958017,150.3998400639744,150.48980407836865,150.5797680927629,150.66973210715713,150.75969612155137,150.8496601359456,150.93962415033985,151.0295881647341,151.11955217912836,151.2095161935226,151.29948020791684,151.38944422231108,151.47940823670532,151.56937225109957,151.6593362654938,151.74930027988805,151.8392642942823,151.92922830867653,152.01919232307077,152.109156337465,152.19912035185925,152.2890843662535,152.37904838064773,152.46901239504197,152.5589764094362,152.64894042383048,152.73890443822472,152.82886845261896,152.9188324670132,153.00879648140744,153.09876049580168,153.18872451019593,153.27868852459017,153.3686525389844,153.45861655337865,153.5485805677729,153.63854458216713,153.72850859656137,153.8184726109556,153.90843662534985,153.9984006397441,154.08836465413833,154.1783286685326,154.26829268292684,154.35825669732108,154.44822071171532,154.53818472610956,154.6281487405038,154.71811275489804,154.80807676929228,154.89804078368653,154.98800479808077,155.077968812475,155.16793282686925,155.2578968412635,155.34786085565773,155.43782487005197,155.5277888844462,155.61775289884045,155.70771691323472,155.79768092762896,155.8876449420232,155.97760895641744,156.06757297081168,156.15753698520592,156.24750099960016,156.3374650139944,156.42742902838864,156.51739304278289,156.60735705717713,156.69732107157137,156.7872850859656,156.87724910035985,156.9672131147541,157.05717712914833,157.14714114354257,157.23710515793684,157.32706917233108,157.41703318672532,157.50699720111956,157.5969612155138,157.68692522990804,157.77688924430228,157.86685325869652,157.95681727309076,158.046781287485,158.13674530187924,158.22670931627349,158.31667333066773,158.40663734506197,158.4966013594562,158.58656537385045,158.6765293882447,158.76649340263896,158.8564574170332,158.94642143142744,159.03638544582168,159.12634946021592,159.21631347461016,159.3062774890044,159.39624150339864,159.48620551779288,159.57616953218712,159.66613354658136,159.7560975609756,159.84606157536984,159.93602558976409,160.02598960415833,160.11595361855257,160.2059176329468,160.29588164734108,160.38584566173532,160.47580967612956,160.5657736905238,160.65573770491804,160.74570171931228,160.83566573370652,160.92562974810076,161.015593762495,161.10555777688924,161.19552179128348,161.28548580567772,161.37544982007196,161.4654138344662,161.55537784886045,161.64534186325469,161.73530587764893,161.8252698920432,161.91523390643744,162.00519792083168,162.09516193522592,162.18512594962016,162.2750899640144,162.36505397840864,162.45501799280288,162.54498200719712,162.63494602159136,162.7249100359856,162.81487405037984,162.90483806477408,162.99480207916832,163.08476609356256,163.1747301079568,163.26469412235107,163.35465813674531,163.44462215113955,163.5345861655338,163.62455017992804,163.71451419432228,163.80447820871652,163.89444222311076,163.984406237505,164.07437025189924,164.16433426629348,164.25429828068772,164.34426229508196,164.4342263094762,164.52419032387044,164.61415433826468,164.70411835265892,164.7940823670532,164.88404638144743,164.97401039584167,165.06397441023591,165.15393842463016,165.2439024390244,165.33386645341864,165.42383046781288,165.51379448220712,165.60375849660136,165.6937225109956,165.78368652538984,165.87365053978408,165.96361455417832,166.05357856857256,166.1435425829668,166.23350659736104,166.3234706117553,166.41343462614955,166.5033986405438,166.59336265493803,166.68332666933227,166.77329068372651,166.86325469812076,166.953218712515,167.04318272690924,167.13314674130348,167.22311075569772,167.31307477009196,167.4030387844862,167.49300279888044,167.58296681327468,167.67293082766892,167.76289484206316,167.85285885645743,167.94282287085167,168.0327868852459,168.12275089964015,168.2127149140344,168.30267892842863,168.39264294282287,168.48260695721711,168.57257097161136,168.6625349860056,168.75249900039984,168.84246301479408,168.93242702918832,169.02239104358256,169.1123550579768,169.20231907237104,169.29228308676528,169.38224710115955,169.4722111155538,169.56217512994803,169.65213914434227,169.7421031587365,169.83206717313075,169.922031187525,170.01199520191923,170.10195921631347,170.19192323070772,170.28188724510196,170.3718512594962,170.46181527389044,170.55177928828468,170.64174330267892,170.73170731707316,170.8216713314674,170.91163534586167,171.0015993602559,171.09156337465015,171.1815273890444,171.27149140343863,171.36145541783287,171.4514194322271,171.54138344662135,171.6313474610156,171.72131147540983,171.81127548980407,171.90123950419832,171.99120351859256,172.0811675329868,172.17113154738104,172.26109556177528,172.35105957616952,172.4410235905638,172.53098760495803,172.62095161935227,172.7109156337465,172.80087964814075,172.890843662535,172.98080767692923,173.07077169132347,173.1607357057177,173.25069972011195,173.3406637345062,173.43062774890043,173.52059176329468,173.61055577768892,173.70051979208316,173.7904838064774,173.88044782087164,173.9704118352659,174.06037584966015,174.1503398640544,174.24030387844863,174.33026789284287,174.4202319072371,174.51019592163135,174.6001599360256,174.69012395041983,174.78008796481407,174.8700519792083,174.96001599360255,175.0499800079968,175.13994402239103,175.22990803678528,175.31987205117952,175.40983606557376,175.49980007996803,175.58976409436227,175.6797281087565,175.76969212315075,175.859656137545,175.94962015193923,176.03958416633347,176.1295481807277,176.21951219512195,176.3094762095162,176.39944022391043,176.48940423830467,176.5793682526989,176.66933226709315,176.7592962814874,176.84926029588163,176.93922431027588,177.02918832467014,177.11915233906439,177.20911635345863,177.29908036785287,177.3890443822471,177.47900839664135,177.5689724110356,177.65893642542983,177.74890043982407,177.8388644542183,177.92882846861255,178.0187924830068,178.10875649740103,178.19872051179527,178.2886845261895,178.37864854058375,178.46861255497802,178.55857656937226,178.6485405837665,178.73850459816074,178.82846861255499,178.91843262694923,179.00839664134347,179.0983606557377,179.18832467013195,179.2782886845262,179.36825269892043,179.45821671331467,179.5481807277089,179.63814474210315,179.7281087564974,179.81807277089163,179.90803678528587,179.99800079968014,180.08796481407438,180.17792882846862,180.26789284286286,180.3578568572571,180.44782087165134,180.53778488604559,180.62774890043983,180.71771291483407,180.8076769292283,180.89764094362255,180.9876049580168,181.07756897241103,181.16753298680527,181.2574970011995,181.34746101559375,181.437425029988,181.52738904438226,181.6173530587765,181.70731707317074,181.79728108756498,181.88724510195922,181.97720911635346,182.0671731307477,182.15713714514195,182.2471011595362,182.33706517393043,182.42702918832467,182.5169932027189,182.60695721711315,182.6969212315074,182.78688524590163,182.87684926029587,182.9668132746901,183.05677728908438,183.14674130347862,183.23670531787286,183.3266693322671,183.41663334666134,183.50659736105558,183.59656137544982,183.68652538984406,183.7764894042383,183.86645341863255,183.9564174330268,184.04638144742103,184.13634546181527,184.2263094762095,184.31627349060375,184.406237504998,184.49620151939223,184.5861655337865,184.67612954818074,184.76609356257498,184.85605757696922,184.94602159136346,185.0359856057577,185.12594962015194,185.21591363454618,185.30587764894042,185.39584166333466,185.4858056777289,185.57576969212315,185.6657337065174,185.75569772091163,185.84566173530587,185.9356257497001,186.02558976409435,186.11555377848862,186.20551779288286,186.2954818072771,186.38544582167134,186.47540983606558,186.56537385045982,186.65533786485406,186.7453018792483,186.83526589364254,186.92522990803678,187.01519392243102,187.10515793682526,187.1951219512195,187.28508596561375,187.375049980008,187.46501399440223,187.55497800879647,187.64494202319074,187.73490603758498,187.82487005197922,187.91483406637346,188.0047980807677,188.09476209516194,188.18472610955618,188.27469012395042,188.36465413834466,188.4546181527389,188.54458216713314,188.63454618152738,188.72451019592162,188.81447421031586,188.9044382247101,188.99440223910435,189.0843662534986,189.17433026789286,189.2642942822871,189.35425829668134,189.44422231107558,189.53418632546982,189.62415033986406,189.7141143542583,189.80407836865254,189.89404238304678,189.98400639744102,190.07397041183526,190.1639344262295,190.25389844062374,190.34386245501798,190.43382646941222,190.52379048380647,190.6137544982007,190.70371851259497,190.79368252698922,190.88364654138346,190.9736105557777,191.06357457017194,191.15353858456618,191.24350259896042,191.33346661335466,191.4234306277489,191.51339464214314,191.60335865653738,191.69332267093162,191.78328668532586,191.8732506997201,191.96321471411434,192.05317872850858,192.14314274290282,192.2331067572971,192.32307077169133,192.41303478608557,192.50299880047982,192.59296281487406,192.6829268292683,192.77289084366254,192.86285485805678,192.95281887245102,193.04278288684526,193.1327469012395,193.22271091563374,193.31267493002798,193.40263894442222,193.49260295881646,193.5825669732107,193.67253098760497,193.7624950019992,193.85245901639345,193.9424230307877,194.03238704518193,194.12235105957618,194.21231507397042,194.30227908836466,194.3922431027589,194.48220711715314,194.57217113154738,194.66213514594162,194.75209916033586,194.8420631747301,194.93202718912434,195.02199120351858,195.11195521791282,195.2019192323071,195.29188324670133,195.38184726109557,195.4718112754898,195.56177528988405,195.6517393042783,195.74170331867253,195.83166733306678,195.92163134746102,196.01159536185526,196.1015593762495,196.19152339064374,196.28148740503798,196.37145141943222,196.46141543382646,196.5513794482207,196.64134346261494,196.7313074770092,196.82127149140345,196.9112355057977,197.00119952019193,197.09116353458617,197.1811275489804,197.27109156337465,197.3610555777689,197.45101959216314,197.54098360655738,197.63094762095162,197.72091163534586,197.8108756497401,197.90083966413434,197.99080367852858,198.08076769292282,198.17073170731706,198.26069572171133,198.35065973610557,198.4406237504998,198.53058776489405,198.6205517792883,198.71051579368253,198.80047980807677,198.890443822471,198.98040783686525,199.0703718512595,199.16033586565374,199.25029988004798,199.34026389444222,199.43022790883646,199.5201919232307,199.61015593762494,199.70011995201918,199.79008396641345,199.8800479808077,199.97001199520193,200.05997600959617,200.1499400239904,200.23990403838465,200.3298680527789,200.41983206717313,200.50979608156737,200.5997600959616,200.68972411035585,200.7796881247501,200.86965213914434,200.95961615353858,201.04958016793282,201.13954418232706,201.2295081967213,201.31947221111557,201.4094362255098,201.49940023990405,201.5893642542983,201.67932826869253,201.76929228308677,201.859256297481,201.94922031187525,202.0391843262695,202.12914834066373,202.21911235505797,202.3090763694522,202.39904038384645,202.4890043982407,202.57896841263494,202.66893242702918,202.75889644142342,202.8488604558177,202.93882447021193,203.02878848460617,203.1187524990004,203.20871651339465,203.2986805277889,203.38864454218313,203.47860855657737,203.5685725709716,203.65853658536585,203.7485005997601,203.83846461415433,203.92842862854857,204.0183926429428,204.10835665733705,204.1983206717313,204.28828468612554,204.3782487005198,204.46821271491405,204.5581767293083,204.64814074370253,204.73810475809677,204.828068772491,204.91803278688525,205.0079968012795,205.09796081567373,205.18792483006797,205.2778888444622,205.36785285885645,205.4578168732507,205.54778088764493,205.63774490203917,205.72770891643341,205.81767293082765,205.90763694522192,205.99760095961616,206.0875649740104,206.17752898840465,206.2674930027989,206.35745701719313,206.44742103158737,206.5373850459816,206.62734906037585,206.7173130747701,206.80727708916433,206.89724110355857,206.9872051179528,207.07716913234705,207.1671331467413,207.25709716113553,207.34706117552977,207.43702518992404,207.52698920431828,207.61695321871252,207.70691723310676,207.796881247501,207.88684526189525,207.9768092762895,208.06677329068373,208.15673730507797,208.2467013194722,208.33666533386645,208.4266293482607,208.51659336265493,208.60655737704917,208.6965213914434,208.78648540583765,208.87644942023192,208.96641343462616,209.0563774490204,209.14634146341464,209.23630547780888,209.32626949220312,209.41623350659737,209.5061975209916,209.59616153538585,209.6861255497801,209.77608956417433,209.86605357856857,209.9560175929628,210.04598160735705,210.1359456217513,210.22590963614553,210.31587365053977,210.40583766493404,210.49580167932828,210.58576569372252,210.67572970811676,210.765693722511,210.85565773690524,210.94562175129948,211.03558576569372,211.12554978008797,211.2155137944822,211.30547780887645,211.3954418232707,211.48540583766493,211.57536985205917,211.6653338664534,211.75529788084765,211.8452618952419,211.93522590963616,212.0251899240304,212.11515393842464,212.20511795281888,212.29508196721312,212.38504598160736,212.4750099960016,212.56497401039584,212.65493802479008,212.74490203918432,212.83486605357857,212.9248300679728,213.01479408236705,213.1047580967613,213.19472211115553,213.28468612554977,213.374650139944,213.46461415433828,213.55457816873252,213.64454218312676,213.734506197521,213.82447021191524,213.91443422630948,214.00439824070372,214.09436225509796,214.1843262694922,214.27429028388644,214.36425429828068,214.45421831267493,214.54418232706917,214.6341463414634,214.72411035585765,214.8140743702519,214.90403838464613,214.9940023990404,215.08396641343464,215.17393042782888,215.26389444222312,215.35385845661736,215.4438224710116,215.53378648540584,215.62375049980008,215.71371451419432,215.80367852858856,215.8936425429828,215.98360655737704,216.07357057177128,216.16353458616553,216.25349860055977,216.343462614954,216.43342662934825,216.52339064374252,216.61335465813676,216.703318672531,216.79328268692524,216.88324670131948,216.97321071571372,217.06317473010796,217.1531387445022,217.24310275889644,217.33306677329068,217.42303078768492,217.51299480207916,217.6029588164734,217.69292283086764,217.78288684526188,217.87285085965613,217.96281487405037,218.05277888844464,218.14274290283888,218.23270691723312,218.32267093162736,218.4126349460216,218.50259896041584,218.59256297481008,218.68252698920432,218.77249100359856,218.8624550179928,218.95241903238704,219.04238304678128,219.13234706117552,219.22231107556976,219.312275089964,219.40223910435824,219.49220311875249,219.58216713314675,219.672131147541,219.76209516193524,219.85205917632948,219.94202319072372,220.03198720511796,220.1219512195122,220.21191523390644,220.30187924830068,220.39184326269492,220.48180727708916,220.5717712914834,220.66173530587764,220.75169932027188,220.84166333466612,220.93162734906036,221.0215913634546,221.11155537784887,221.2015193922431,221.29148340663735,221.3814474210316,221.47141143542584,221.56137544982008,221.65133946421432,221.74130347860856,221.8312674930028,221.92123150739704,222.01119552179128,222.10115953618552,222.19112355057976,222.281087564974,222.37105157936824,222.46101559376248,222.55097960815675,222.640943622551,222.73090763694523,222.82087165133947,222.9108356657337,223.00079968012795,223.0907636945222,223.18072770891644,223.27069172331068,223.36065573770492,223.45061975209916,223.5405837664934,223.63054778088764,223.72051179528188,223.81047580967612,223.90043982407036,223.9904038384646,224.08036785285887,224.1703318672531,224.26029588164735,224.3502598960416,224.44022391043583,224.53018792483007,224.62015193922431,224.71011595361855,224.8000799680128,224.89004398240704,224.98000799680128,225.06997201119552,225.15993602558976,225.249900039984,225.33986405437824,225.42982806877248,225.51979208316672,225.609756097561,225.69972011195523,225.78968412634947,225.8796481407437,225.96961215513795,226.0595761695322,226.14954018392643,226.23950419832067,226.32946821271491,226.41943222710916,226.5093962415034,226.59936025589764,226.68932427029188,226.77928828468612,226.86925229908036,226.9592163134746,227.04918032786884,227.1391443422631,227.22910835665735,227.3190723710516,227.40903638544583,227.49900039984007,227.5889644142343,227.67892842862855,227.7688924430228,227.85885645741703,227.94882047181127,228.03878448620551,228.12874850059976,228.218712514994,228.30867652938824,228.39864054378248,228.48860455817672,228.57856857257096,228.66853258696523,228.75849660135947,228.8484606157537,228.93842463014795,229.0283886445422,229.11835265893643,229.20831667333067,229.2982806877249,229.38824470211915,229.4782087165134,229.56817273090763,229.65813674530187,229.74810075969611,229.83806477409036,229.9280287884846,230.01799280287884,230.10795681727308,230.19792083166735,230.2878848460616,230.37784886045583,230.46781287485007,230.5577768892443,230.64774090363855,230.7377049180328,230.82766893242703,230.91763294682127,231.0075969612155,231.09756097560975,231.187524990004,231.27748900439823,231.36745301879247,231.45741703318672,231.54738104758096,231.6373450619752,231.72730907636947,231.8172730907637,231.90723710515795,231.9972011195522,232.08716513394643,232.17712914834067,232.2670931627349,232.35705717712915,232.4470211915234,232.53698520591763,232.62694922031187,232.7169132347061,232.80687724910035,232.8968412634946,232.98680527788883,233.07676929228307,233.16673330667732,233.25669732107158,233.34666133546583,233.43662534986007,233.5265893642543,233.61655337864855,233.7065173930428,233.79648140743703,233.88644542183127,233.9764094362255,234.06637345061975,234.156337465014,234.24630147940823,234.33626549380247,234.4262295081967,234.51619352259095,234.6061575369852,234.69612155137943,234.7860855657737,234.87604958016794,234.96601359456218,235.05597760895643,235.14594162335067,235.2359056377449,235.32586965213915,235.4158336665334,235.50579768092763,235.59576169532187,235.6857257097161,235.77568972411035,235.8656537385046,235.95561775289883,236.04558176729307,236.1355457816873,236.22550979608155,236.31547381047582,236.40543782487006,236.4954018392643,236.58536585365854,236.67532986805278,236.76529388244703,236.85525789684127,236.9452219112355,237.03518592562975,237.125149940024,237.21511395441823,237.30507796881247,237.3950419832067,237.48500599760095,237.5749700119952,237.66493402638943,237.7548980407837,237.84486205517794,237.93482606957218,238.02479008396642,238.11475409836066,238.2047181127549,238.29468212714914,238.38464614154339,238.47461015593763,238.56457417033187,238.6545381847261,238.74450219912035,238.8344662135146,238.92443022790883,239.01439424230307,239.1043582566973,239.19432227109155,239.28428628548582,239.37425029988006,239.4642143142743,239.55417832866854,239.64414234306278,239.73410635745702,239.82407037185126,239.9140343862455,240.00399840063974,240.09396241503399,240.18392642942823,240.27389044382247,240.3638544582167,240.45381847261095,240.5437824870052,240.63374650139943,240.72371051579367,240.81367453018794,240.90363854458218,240.99360255897642,241.08356657337066,241.1735305877649,241.26349460215914,241.35345861655338,241.44342263094762,241.53338664534186,241.6233506597361,241.71331467413034,241.80327868852459,241.89324270291883,241.98320671731307,242.0731707317073,242.16313474610155,242.2530987604958,242.34306277489006,242.4330267892843,242.52299080367854,242.61295481807278,242.70291883246702,242.79288284686126,242.8828468612555,242.97281087564974,243.06277489004398,243.15273890443822,243.24270291883246,243.3326669332267,243.42263094762095,243.51259496201519,243.60255897640943,243.69252299080367,243.7824870051979,243.87245101959218,243.96241503398642,244.05237904838066,244.1423430627749,244.23230707716914,244.32227109156338,244.41223510595762,244.50219912035186,244.5921631347461,244.68212714914034,244.77209116353458,244.86205517792882,244.95201919232306,245.0419832067173,245.13194722111155,245.2219112355058,245.31187524990003,245.4018392642943,245.49180327868854,245.58176729308278,245.67173130747702,245.76169532187126,245.8516593362655,245.94162335065974,246.03158736505398,246.12155137944822,246.21151539384246,246.3014794082367,246.39144342263094,246.48140743702518,246.57137145141942,246.66133546581366,246.7512994802079,246.84126349460215,246.93122750899641,247.02119152339066,247.1111555377849,247.20111955217914,247.29108356657338,247.38104758096762,247.47101159536186,247.5609756097561,247.65093962415034,247.74090363854458,247.83086765293882,247.92083166733306,248.0107956817273,248.10075969612154,248.19072371051578,248.28068772491002,248.37065173930426,248.46061575369853,248.55057976809277,248.64054378248701,248.73050779688126,248.8204718112755,248.91043582566974,249.00039984006398,249.09036385445822,249.18032786885246,249.2702918832467,249.36025589764094,249.45021991203518,249.54018392642942,249.63014794082366,249.7201119552179,249.81007596961214,249.90003998400638,249.99000399840065,250.0799680127949,250.16993202718913,250.25989604158337,250.34986005597762,250.43982407037186,250.5297880847661,250.61975209916034,250.70971611355458,250.79968012794882,250.88964414234306,250.9796081567373,251.06957217113154,251.15953618552578,251.24950019992002,251.33946421431426,251.4294282287085,251.51939224310277,251.609356257497,251.69932027189125,251.7892842862855,251.87924830067973,251.96921231507397,252.05917632946822,252.14914034386246,252.2391043582567,252.32906837265094,252.41903238704518,252.50899640143942,252.59896041583366,252.6889244302279,252.77888844462214,252.86885245901638,252.95881647341065,253.0487804878049,253.13874450219913,253.22870851659337,253.3186725309876,253.40863654538185,253.4986005597761,253.58856457417033,253.67852858856457,253.76849260295882,253.85845661735306,253.9484206317473,254.03838464614154,254.12834866053578,254.21831267493002,254.30827668932426,254.3982407037185,254.48820471811277,254.578168732507,254.66813274690125,254.7580967612955,254.84806077568973,254.93802479008397,255.0279888044782,255.11795281887245,255.2079168332667,255.29788084766093,255.38784486205518,255.47780887644942,255.56777289084366,255.6577369052379,255.74770091963214,255.83766493402638,255.92762894842062,256.0175929628149,256.10755697720913,256.19752099160337,256.2874850059976,256.37744902039185,256.4674130347861,256.55737704918033,256.6473410635746,256.7373050779688,256.82726909236305,256.9172331067573,257.00719712115153,257.0971611355458,257.18712514994,257.27708916433426,257.3670531787285,257.45701719312274,257.546981207517,257.6369452219112,257.72690923630546,257.8168732506997,257.90683726509394,257.9968012794882,258.0867652938824,258.17672930827666,258.2666933226709,258.3566573370652,258.44662135145944,258.5365853658537,258.6265493802479,258.71651339464216,258.8064774090364,258.89644142343064,258.9864054378249,259.0763694522191,259.16633346661337,259.2562974810076,259.34626149540185,259.4362255097961,259.52618952419033,259.61615353858457,259.7061175529788,259.79608156737305,259.8860455817673,259.97600959616153,260.0659736105558,260.15593762495,260.24590163934425,260.3358656537385,260.42582966813274,260.515793682527,260.6057576969212,260.69572171131546,260.7856857257097,260.87564974010394,260.9656137544982,261.0555777688924,261.14554178328666,261.2355057976809,261.3254698120752,261.41543382646944,261.5053978408637,261.5953618552579,261.68532586965216,261.7752898840464,261.86525389844064,261.9552179128349,262.0451819272291,262.13514594162336,262.2251099560176,262.31507397041185,262.4050379848061,262.4950019992003,262.58496601359457,262.6749300279888,262.76489404238305,262.8548580567773,262.94482207117153,263.03478608556577,263.12475009996,263.21471411435425,263.3046781287485,263.39464214314273,263.484606157537,263.5745701719312,263.66453418632545,263.7544982007197,263.84446221511394,263.9344262295082,264.0243902439024,264.11435425829666,264.2043182726909,264.29428228708514,264.38424630147944,264.4742103158737,264.5641743302679,264.65413834466216,264.7441023590564,264.83406637345064,264.9240303878449,265.0139944022391,265.10395841663336,265.1939224310276,265.28388644542184,265.3738504598161,265.4638144742103,265.55377848860456,265.6437425029988,265.73370651739305,265.8236705317873,265.9136345461815,266.00359856057577,266.09356257497,266.18352658936425,266.2734906037585,266.36345461815273,266.45341863254697,266.5433826469412,266.63334666133545,266.7233106757297,266.81327469012393,266.9032387045182,266.9932027189124,267.08316673330665,267.1731307477009,267.26309476209514,267.3530587764894,267.4430227908837,267.5329868052779,267.62295081967216,267.7129148340664,267.80287884846064,267.8928428628549,267.9828068772491,268.07277089164336,268.1627349060376,268.25269892043184,268.3426629348261,268.4326269492203,268.52259096361456,268.6125549780088,268.70251899240304,268.7924830067973,268.8824470211915,268.97241103558576,269.06237504998,269.15233906437425,269.2423030787685,269.3322670931627,269.42223110755697,269.5121951219512,269.60215913634545,269.6921231507397,269.78208716513393,269.87205117952817,269.9620151939224,270.05197920831665,270.1419432227109,270.23190723710513,270.3218712514994,270.4118352658936,270.5017992802879,270.59176329468215,270.6817273090764,270.77169132347063,270.8616553378649,270.9516193522591,271.04158336665336,271.1315473810476,271.22151139544184,271.3114754098361,271.4014394242303,271.49140343862456,271.5813674530188,271.67133146741304,271.7612954818073,271.8512594962015,271.94122351059576,272.03118752499,272.12115153938424,272.2111155537785,272.3010795681727,272.39104358256697,272.4810075969612,272.57097161135545,272.6609356257497,272.7508996401439,272.84086365453817,272.9308276689324,273.02079168332665,273.1107556977209,273.20071971211513,273.29068372650937,273.3806477409036,273.47061175529785,273.56057576969215,273.6505397840864,273.74050379848063,273.8304678128749,273.9204318272691,274.01039584166335,274.1003598560576,274.19032387045183,274.2802878848461,274.3702518992403,274.46021591363456,274.5501799280288,274.64014394242304,274.7301079568173,274.8200719712115,274.91003598560576,275.0,275.08996401439424,275.1799280287885,275.2698920431827,275.35985605757696,275.4498200719712,275.53978408636544,275.6297481007597,275.7197121151539,275.80967612954817,275.8996401439424,275.98960415833665,276.0795681727309,276.1695321871251,276.25949620151937,276.3494602159136,276.43942423030785,276.52938824470215,276.6193522590964,276.70931627349063,276.79928028788487,276.8892443022791,276.97920831667335,277.0691723310676,277.15913634546183,277.2491003598561,277.3390643742503,277.42902838864455,277.5189924030388,277.60895641743303,277.6989204318273,277.7888844462215,277.87884846061576,277.96881247501,278.05877648940424,278.1487405037985,278.2387045181927,278.32866853258696,278.4186325469812,278.50859656137544,278.5985605757697,278.6885245901639,278.77848860455816,278.8684526189524,278.95841663334664,279.0483806477409,279.1383446621351,279.22830867652937,279.3182726909236,279.40823670531785,279.4982007197121,279.5881647341064,279.6781287485006,279.76809276289487,279.8580567772891,279.94802079168335,280.0379848060776,280.12794882047183,280.21791283486607,280.3078768492603,280.39784086365455,280.4878048780488,280.57776889244303,280.6677329068373,280.7576969212315,280.84766093562575,280.93762495002,281.02758896441424,281.1175529788085,281.2075169932027,281.29748100759696,281.3874450219912,281.47740903638544,281.5673730507797,281.6573370651739,281.74730107956816,281.8372650939624,281.92722910835664,282.0171931227509,282.1071571371451,282.19712115153936,282.2870851659336,282.37704918032784,282.4670131947221,282.5569772091163,282.6469412235106,282.73690523790486,282.8268692522991,282.91683326669335,283.0067972810876,283.0967612954818,283.18672530987607,283.2766893242703,283.36665333866455,283.4566173530588,283.54658136745303,283.63654538184727,283.7265093962415,283.81647341063575,283.90643742503,283.99640143942423,284.0863654538185,284.1763294682127,284.26629348260695,284.3562574970012,284.44622151139544,284.5361855257897,284.6261495401839,284.71611355457816,284.8060775689724,284.89604158336664,284.9860055977609,285.0759696121551,285.16593362654936,285.2558976409436,285.34586165533784,285.4358256697321,285.5257896841263,285.61575369852056,285.70571771291486,285.7956817273091,285.88564574170334,285.9756097560976,286.0655737704918,286.15553778488606,286.2455017992803,286.33546581367455,286.4254298280688,286.515393842463,286.60535785685727,286.6953218712515,286.78528588564575,286.87524990004,286.96521391443423,287.05517792882847,287.1451419432227,287.23510595761695,287.3250699720112,287.41503398640543,287.5049980007997,287.5949620151939,287.68492602958815,287.7748900439824,287.86485405837664,287.9548180727709,288.0447820871651,288.13474610155936,288.2247101159536,288.31467413034784,288.4046381447421,288.4946021591363,288.58456617353056,288.6745301879248,288.7644942023191,288.85445821671334,288.9444222311076,289.0343862455018,289.12435025989606,289.2143142742903,289.30427828868454,289.3942423030788,289.484206317473,289.57417033186726,289.6641343462615,289.75409836065575,289.84406237505,289.9340263894442,290.02399040383847,290.1139544182327,290.20391843262695,290.2938824470212,290.38384646141543,290.47381047580967,290.5637744902039,290.65373850459815,290.7437025189924,290.83366653338663,290.9236305477809,291.0135945621751,291.10355857656936,291.1935225909636,291.28348660535784,291.3734506197521,291.4634146341463,291.55337864854056,291.6433426629348,291.7333066773291,291.82327069172334,291.9132347061176,292.0031987205118,292.09316273490606,292.1831267493003,292.27309076369454,292.3630547780888,292.453018792483,292.54298280687726,292.6329468212715,292.72291083566574,292.81287485006,292.9028388644542,292.99280287884847,293.0827668932427,293.17273090763695,293.2626949220312,293.3526589364254,293.44262295081967,293.5325869652139,293.62255097960815,293.7125149940024,293.80247900839663,293.89244302279087,293.9824070371851,294.07237105157935,294.1623350659736,294.25229908036783,294.3422630947621,294.4322271091563,294.52219112355056,294.6121551379448,294.70211915233904,294.79208316673333,294.8820471811276,294.9720111955218,295.06197520991606,295.1519392243103,295.24190323870454,295.3318672530988,295.421831267493,295.51179528188726,295.6017592962815,295.69172331067574,295.78168732507,295.8716513394642,295.96161535385846,296.0515793682527,296.14154338264694,296.2315073970412,296.3214714114354,296.41143542582967,296.5013994402239,296.59136345461815,296.6813274690124,296.7712914834066,296.86125549780087,296.9512195121951,297.04118352658935,297.1311475409836,297.22111155537783,297.3110755697721,297.4010395841663,297.49100359856055,297.5809676129548,297.67093162734903,297.7608956417433,297.8508596561376,297.9408236705318,298.03078768492605,298.1207516993203,298.21071571371454,298.3006797281088,298.390643742503,298.48060775689726,298.5705717712915,298.66053578568574,298.75049980008,298.8404638144742,298.93042782886846,299.0203918432627,299.11035585765694,299.2003198720512,299.2902838864454,299.38024790083966,299.4702119152339,299.56017592962814,299.6501399440224,299.7401039584166,299.83006797281087,299.9200319872051,300.00999600159935,300.0999600159936,300.18992403038783,300.27988804478207,300.3698520591763,300.45981607357055,300.5497800879648,300.63974410235903,300.7297081167533,300.8196721311475,300.9096361455418,300.99960015993605,301.0895641743303,301.17952818872453,301.2694922031188,301.359456217513,301.44942023190725,301.5393842463015,301.62934826069574,301.71931227509,301.8092762894842,301.89924030387846,301.9892043182727,302.07916833266694,302.1691323470612,302.2590963614554,302.34906037584966,302.4390243902439,302.52898840463814,302.6189524190324,302.7089164334266,302.79888044782086,302.8888444622151,302.97880847660934,303.0687724910036,303.1587365053978,303.24870051979207,303.3386645341863,303.42862854858055,303.5185925629748,303.60855657736903,303.69852059176327,303.7884846061575,303.87844862055175,303.96841263494605,304.0583766493403,304.14834066373453,304.23830467812877,304.328268692523,304.41823270691725,304.5081967213115,304.59816073570573,304.6881247501,304.7780887644942,304.86805277888845,304.9580167932827,305.04798080767694,305.1379448220712,305.2279088364654,305.31787285085966,305.4078368652539,305.49780087964814,305.5877648940424,305.6777289084366,305.76769292283086,305.8576569372251,305.94762095161934,306.0375849660136,306.1275489804078,306.21751299480206,306.3074770091963,306.39744102359055,306.4874050379848,306.577369052379,306.66733306677327,306.7572970811675,306.84726109556175,306.93722510995605,307.0271891243503,307.1171531387445,307.20711715313877,307.297081167533,307.38704518192725,307.4770091963215,307.56697321071573,307.65693722510997,307.7469012395042,307.83686525389845,307.9268292682927,308.01679328268693,308.1067572970812,308.1967213114754,308.28668532586966,308.3766493402639,308.46661335465814,308.5565773690524,308.6465413834466,308.73650539784086,308.8264694122351,308.91643342662934,309.0063974410236,309.0963614554178,309.18632546981206,309.2762894842063,309.36625349860054,309.4562175129948,309.546181527389,309.63614554178326,309.7261095561775,309.81607357057175,309.906037584966,309.9960015993603,310.0859656137545,310.17592962814877,310.265893642543,310.35585765693725,310.4458216713315,310.5357856857257,310.62574970011997,310.7157137145142,310.80567772890845,310.8956417433027,310.98560575769693,311.07556977209117,311.1655337864854,311.25549780087965,311.3454618152739,311.43542582966813,311.5253898440624,311.6153538584566,311.70531787285086,311.7952818872451,311.88524590163934,311.9752099160336,312.0651739304278,312.15513794482206,312.2451019592163,312.33506597361054,312.4250299880048,312.514994002399,312.60495801679326,312.6949220311875,312.78488604558174,312.874850059976,312.9648140743702,313.0547780887645,313.14474210315876,313.234706117553,313.32467013194724,313.4146341463415,313.5045981607357,313.59456217512997,313.6845261895242,313.77449020391845,313.8644542183127,313.9544182327069,314.04438224710117,314.1343462614954,314.22431027588965,314.3142742902839,314.40423830467813,314.4942023190724,314.5841663334666,314.67413034786085,314.7640943622551,314.85405837664933,314.9440223910436,315.0339864054378,315.12395041983206,315.2139144342263,315.30387844862054,315.3938424630148,315.483806477409,315.57377049180326,315.6637345061975,315.75369852059174,315.843662534986,315.9336265493802,316.02359056377446,316.11355457816876,316.203518592563,316.29348260695724,316.3834466213515,316.4734106357457,316.56337465013996,316.6533386645342,316.74330267892844,316.8332666933227,316.9232307077169,317.01319472211117,317.1031587365054,317.19312275089965,317.2830867652939,317.3730507796881,317.46301479408237,317.5529788084766,317.64294282287085,317.7329068372651,317.82287085165933,317.9128348660536,318.0027988804478,318.09276289484205,318.1827269092363,318.27269092363053,318.3626549380248,318.452618952419,318.54258296681326,318.6325469812075,318.72251099560174,318.812475009996,318.9024390243902,318.99240303878446,319.0823670531787,319.172331067573,319.26229508196724,319.3522590963615,319.4422231107557,319.53218712514996,319.6221511395442,319.71211515393844,319.8020791683327,319.8920431827269,319.98200719712116,320.0719712115154,320.16193522590964,320.2518992403039,320.3418632546981,320.43182726909237,320.5217912834866,320.61175529788085,320.7017193122751,320.79168332666933,320.88164734106357,320.9716113554578,321.06157536985205,321.1515393842463,321.24150339864053,321.3314674130348,321.421431427429,321.51139544182325,321.6013594562175,321.69132347061174,321.781287485006,321.8712514994002,321.96121551379446,322.0511795281887,322.141143542583,322.23110755697724,322.3210715713715,322.4110355857657,322.50099960015996,322.5909636145542,322.68092762894844,322.7708916433427,322.8608556577369,322.95081967213116,323.0407836865254,323.13074770091964,323.2207117153139,323.3106757297081,323.40063974410236,323.4906037584966,323.58056777289084,323.6705317872851,323.7604958016793,323.85045981607357,323.9404238304678,324.03038784486205,324.1203518592563,324.21031587365053,324.30027988804477,324.390243902439,324.48020791683325,324.5701719312275,324.66013594562173,324.750099960016,324.8400639744102,324.93002798880445,325.0199920031987,325.10995601759294,325.19992003198723,325.2898840463815,325.3798480607757,325.46981207516995,325.5597760895642,325.64974010395844,325.7397041183527,325.8296681327469,325.91963214714116,326.0095961615354,326.09956017592964,326.1895241903239,326.2794882047181,326.36945221911236,326.4594162335066,326.54938024790084,326.6393442622951,326.7293082766893,326.81927229108356,326.9092363054778,326.99920031987205,327.0891643342663,327.1791283486605,327.26909236305477,327.359056377449,327.44902039184325,327.5389844062375,327.62894842063173,327.71891243502597,327.8088764494202,327.89884046381445,327.9888044782087,328.07876849260293,328.1687325069972,328.25869652139147,328.3486605357857,328.43862455017995,328.5285885645742,328.61855257896843,328.7085165933627,328.7984806077569,328.88844462215116,328.9784086365454,329.06837265093964,329.1583366653339,329.2483006797281,329.33826469412236,329.4282287085166,329.51819272291084,329.6081567373051,329.6981207516993,329.78808476609356,329.8780487804878,329.96801279488204,330.0579768092763,330.1479408236705,330.23790483806476,330.327868852459,330.41783286685325,330.5077968812475,330.5977608956417,330.68772491003597,330.7776889244302,330.86765293882445,330.9576169532187,331.04758096761293,331.13754498200717,331.2275089964014,331.3174730107957,331.40743702518995,331.4974010395842,331.58736505397843,331.67732906837267,331.7672930827669,331.85725709716115,331.9472211115554,332.03718512594963,332.1271491403439,332.2171131547381,332.30707716913236,332.3970411835266,332.48700519792084,332.5769692123151,332.6669332267093,332.75689724110356,332.8468612554978,332.93682526989204,333.0267892842863,333.1167532986805,333.20671731307476,333.296681327469,333.38664534186324,333.4766093562575,333.5665733706517,333.65653738504597,333.7465013994402,333.83646541383445,333.9264294282287,334.0163934426229,334.10635745701717,334.1963214714114,334.28628548580565,334.37624950019995,334.4662135145942,334.5561775289884,334.64614154338267,334.7361055577769,334.82606957217115,334.9160335865654,335.00599760095963,335.0959616153539,335.1859256297481,335.27588964414235,335.3658536585366,335.45581767293083,335.5457816873251,335.6357457017193,335.72570971611356,335.8156737305078,335.90563774490204,335.9956017592963,336.0855657736905,336.17552978808476,336.265493802479,336.35545781687324,336.4454218312675,336.5353858456617,336.62534986005596,336.7153138744502,336.80527788884444,336.8952419032387,336.9852059176329,337.07516993202717,337.1651339464214,337.25509796081565,337.34506197520994,337.4350259896042,337.5249900039984,337.61495401839267,337.7049180327869,337.79488204718115,337.8848460615754,337.97481007596963,338.06477409036387,338.1547381047581,338.24470211915235,338.3346661335466,338.42463014794083,338.5145941623351,338.6045581767293,338.69452219112355,338.7844862055178,338.87445021991203,338.9644142343063,339.0543782487005,339.14434226309476,339.234306277489,339.32427029188324,339.4142343062775,339.5041983206717,339.59416233506596,339.6841263494602,339.77409036385444,339.8640543782487,339.9540183926429,340.04398240703716,340.1339464214314,340.22391043582564,340.3138744502199,340.4038384646142,340.4938024790084,340.58376649340266,340.6737305077969,340.76369452219114,340.8536585365854,340.9436225509796,341.03358656537387,341.1235505797681,341.21351459416235,341.3034786085566,341.39344262295083,341.48340663734507,341.5733706517393,341.66333466613355,341.7532986805278,341.84326269492203,341.9332267093163,342.0231907237105,342.11315473810475,342.203118752499,342.29308276689324,342.3830467812875,342.4730107956817,342.56297481007596,342.6529388244702,342.74290283886444,342.8328668532587,342.9228308676529,343.01279488204716,343.1027588964414,343.19272291083564,343.2826869252299,343.3726509396241,343.4626149540184,343.55257896841266,343.6425429828069,343.73250699720114,343.8224710115954,343.9124350259896,344.00239904038386,344.0923630547781,344.18232706917235,344.2722910835666,344.3622550979608,344.45221911235507,344.5421831267493,344.63214714114355,344.7221111555378,344.81207516993203,344.90203918432627,344.9920031987205,345.08196721311475,345.171931227509,345.26189524190323,345.3518592562975,345.4418232706917,345.53178728508595,345.6217512994802,345.71171531387444,345.8016793282687,345.8916433426629,345.98160735705716,346.0715713714514,346.16153538584564,346.2514994002399,346.3414634146341,346.43142742902836,346.52139144342266,346.6113554578169,346.70131947221114,346.7912834866054,346.8812475009996,346.97121151539386,347.0611755297881,347.15113954418234,347.2411035585766,347.3310675729708,347.42103158736506,347.5109956017593,347.60095961615355,347.6909236305478,347.780887644942,347.87085165933627,347.9608156737305,348.05077968812475,348.140743702519,348.23070771691323,348.32067173130747,348.4106357457017,348.50059976009595,348.5905637744902,348.68052778888443,348.7704918032787,348.8604558176729,348.95041983206715,349.0403838464614,349.13034786085564,349.2203118752499,349.3102758896441,349.40023990403836,349.4902039184326,349.5801679328269,349.67013194722114,349.7600959616154,349.8500599760096,349.94002399040386,350.0299880047981,350.11995201919234,350.2099160335866,350.2998800479808,350.38984406237506,350.4798080767693,350.56977209116354,350.6597361055578,350.749700119952,350.83966413434626,350.9296281487405,351.01959216313475,351.109556177529,351.1995201919232,351.28948420631747,351.3794482207117,351.46941223510595,351.5593762495002,351.64934026389443,351.73930427828867,351.8292682926829,351.91923230707715,352.0091963214714,352.09916033586563,352.1891243502599,352.2790883646541,352.36905237904836,352.4590163934426,352.5489804078369,352.63894442223113,352.7289084366254,352.8188724510196,352.90883646541386,352.9988004798081,353.08876449420234,353.1787285085966,353.2686925229908,353.35865653738506,353.4486205517793,353.53858456617354,353.6285485805678,353.718512594962,353.80847660935626,353.8984406237505,353.98840463814474,354.078368652539,354.1683326669332,354.25829668132747,354.3482606957217,354.43822471011595,354.5281887245102,354.6181527389044,354.70811675329867,354.7980807676929,354.88804478208715,354.9780087964814,355.06797281087563,355.15793682526987,355.2479008396641,355.33786485405835,355.4278288684526,355.51779288284683,355.60775689724113,355.6977209116354,355.7876849260296,355.87764894042385,355.9676129548181,356.05757696921233,356.1475409836066,356.2375049980008,356.32746901239506,356.4174330267893,356.50739704118354,356.5973610555778,356.687325069972,356.77728908436626,356.8672530987605,356.95721711315474,357.047181127549,357.1371451419432,357.22710915633746,357.3170731707317,357.40703718512594,357.4970011995202,357.5869652139144,357.67692922830867,357.7668932427029,357.85685725709715,357.9468212714914,358.0367852858856,358.12674930027987,358.2167133146741,358.30667732906835,358.3966413434626,358.48660535785683,358.5765693722511,358.66653338664537,358.7564974010396,358.84646141543385,358.9364254298281,359.02638944422233,359.1163534586166,359.2063174730108,359.29628148740505,359.3862455017993,359.47620951619353,359.5661735305878,359.656137544982,359.74610155937626,359.8360655737705,359.92602958816474,360.015993602559,360.1059576169532,360.19592163134746,360.2858856457417,360.37584966013594,360.4658136745302,360.5557776889244,360.64574170331866,360.7357057177129,360.82566973210714,360.9156337465014,361.0055977608956,361.09556177528987,361.1855257896841,361.27548980407835,361.3654538184726,361.45541783286683,361.54538184726107,361.6353458616553,361.7253098760496,361.81527389044385,361.9052379048381,361.99520191923233,362.08516593362657,362.1751299480208,362.26509396241505,362.3550579768093,362.44502199120353,362.5349860055978,362.624950019992,362.71491403438625,362.8048780487805,362.89484206317474,362.984806077569,363.0747700919632,363.16473410635746,363.2546981207517,363.34466213514594,363.4346261495402,363.5245901639344,363.61455417832866,363.7045181927229,363.79448220711714,363.8844462215114,363.9744102359056,364.06437425029986,364.1543382646941,364.24430227908834,364.3342662934826,364.4242303078768,364.51419432227107,364.6041583366653,364.69412235105955,364.78408636545385,364.8740503798481,364.9640143942423,365.05397840863657,365.1439424230308,365.23390643742505,365.3238704518193,365.41383446621353,365.50379848060777,365.593762495002,365.68372650939625,365.7736905237905,365.86365453818473,365.953618552579,366.0435825669732,366.13354658136745,366.2235105957617,366.31347461015594,366.4034386245502,366.4934026389444,366.58336665333866,366.6733306677329,366.76329468212714,366.8532586965214,366.9432227109156,367.03318672530986,367.1231507397041,367.21311475409834,367.3030787684926,367.3930427828868,367.48300679728106,367.5729708116753,367.66293482606955,367.75289884046384,367.8428628548581,367.9328268692523,368.02279088364656,368.1127548980408,368.20271891243505,368.2926829268293,368.3826469412235,368.47261095561777,368.562574970012,368.65253898440625,368.7425029988005,368.83246701319473,368.92243102758897,369.0123950419832,369.10235905637745,369.1923230707717,369.28228708516593,369.3722510995602,369.4622151139544,369.55217912834866,369.6421431427429,369.73210715713714,369.8220711715314,369.9120351859256,370.00199920031986,370.0919632147141,370.18192722910834,370.2718912435026,370.3618552578968,370.45181927229106,370.5417832866853,370.63174730107954,370.7217113154738,370.8116753298681,370.9016393442623,370.99160335865656,371.0815673730508,371.17153138744504,371.2614954018393,371.3514594162335,371.44142343062776,371.531387445022,371.62135145941625,371.7113154738105,371.8012794882047,371.89124350259897,371.9812075169932,372.07117153138745,372.1611355457817,372.25109956017593,372.34106357457017,372.4310275889644,372.52099160335865,372.6109556177529,372.70091963214713,372.7908836465414,372.8808476609356,372.97081167532986,373.0607756897241,373.15073970411834,373.2407037185126,373.3306677329068,373.42063174730106,373.5105957616953,373.60055977608954,373.6905237904838,373.780487804878,373.8704518192723,373.96041583366656,374.0503798480608,374.14034386245504,374.2303078768493,374.3202718912435,374.41023590563776,374.500199920032,374.59016393442624,374.6801279488205,374.7700919632147,374.86005597760897,374.9500199920032,375.03998400639745,375.1299480207917,375.2199120351859,375.30987604958017,375.3998400639744,375.48980407836865,375.5797680927629,375.66973210715713,375.75969612155137,375.8496601359456,375.93962415033985,376.0295881647341,376.11955217912833,376.2095161935226,376.2994802079168,376.38944422231106,376.4794082367053,376.56937225109954,376.6593362654938,376.749300279888,376.83926429428226,376.92922830867656,377.0191923230708,377.10915633746504,377.1991203518593,377.2890843662535,377.37904838064776,377.469012395042,377.55897640943624,377.6489404238305,377.7389044382247,377.82886845261896,377.9188324670132,378.00879648140744,378.0987604958017,378.1887245101959,378.27868852459017,378.3686525389844,378.45861655337865,378.5485805677729,378.6385445821671,378.72850859656137,378.8184726109556,378.90843662534985,378.9984006397441,379.08836465413833,379.1783286685326,379.2682926829268,379.35825669732105,379.4482207117153,379.53818472610953,379.6281487405038,379.718112754898,379.80807676929226,379.8980407836865,379.9880047980808,380.07796881247504,380.1679328268693,380.2578968412635,380.34786085565776,380.437824870052,380.52778888444624,380.6177528988405,380.7077169132347,380.79768092762896,380.8876449420232,380.97760895641744,381.0675729708117,381.1575369852059,381.24750099960016,381.3374650139944,381.42742902838864,381.5173930427829,381.6073570571771,381.69732107157137,381.7872850859656,381.87724910035985,381.9672131147541,382.05717712914833,382.14714114354257,382.2371051579368,382.32706917233105,382.4170331867253,382.50699720111953,382.5969612155138,382.686925229908,382.77688924430225,382.8668532586965,382.9568172730908,383.04678128748503,383.1367453018793,383.2267093162735,383.31667333066775,383.406637345062,383.49660135945624,383.5865653738505,383.6765293882447,383.76649340263896,383.8564574170332,383.94642143142744,384.0363854458217,384.1263494602159,384.21631347461016,384.3062774890044,384.39624150339864,384.4862055177929,384.5761695321871,384.66613354658136,384.7560975609756,384.84606157536984,384.9360255897641,385.0259896041583,385.11595361855257,385.2059176329468,385.29588164734105,385.3858456617353,385.47580967612953,385.56577369052377,385.655737704918,385.74570171931225,385.8356657337065,385.92562974810073,386.01559376249503,386.10555777688927,386.1955217912835,386.28548580567775,386.375449820072,386.46541383446623,386.5553778488605,386.6453418632547,386.73530587764895,386.8252698920432,386.91523390643744,387.0051979208317,387.0951619352259,387.18512594962016,387.2750899640144,387.36505397840864,387.4550179928029,387.5449820071971,387.63494602159136,387.7249100359856,387.81487405037984,387.9048380647741,387.9948020791683,388.08476609356256,388.1747301079568,388.26469412235105,388.3546581367453,388.4446221511395,388.53458616553377,388.624550179928,388.71451419432225,388.8044782087165,388.89444222311073,388.98440623750497,389.07437025189927,389.1643342662935,389.25429828068775,389.344262295082,389.43422630947623,389.52419032387047,389.6141543382647,389.70411835265895,389.7940823670532,389.88404638144743,389.9740103958417,390.0639744102359,390.15393842463016,390.2439024390244,390.33386645341864,390.4238304678129,390.5137944822071,390.60375849660136,390.6937225109956,390.78368652538984,390.8736505397841,390.9636145541783,391.05357856857256,391.1435425829668,391.23350659736104,391.3234706117553,391.4134346261495,391.50339864054376,391.593362654938,391.68332666933225,391.7732906837265,391.8632546981207,391.95321871251497,392.0431827269092,392.1331467413035,392.22311075569775,392.313074770092,392.4030387844862,392.49300279888047,392.5829668132747,392.67293082766895,392.7628948420632,392.85285885645743,392.94282287085167,393.0327868852459,393.12275089964015,393.2127149140344,393.30267892842863,393.3926429428229,393.4826069572171,393.57257097161136,393.6625349860056,393.75249900039984,393.8424630147941,393.9324270291883,394.02239104358256,394.1123550579768,394.20231907237104,394.2922830867653,394.3822471011595,394.47221111555376,394.562175129948,394.65213914434224,394.7421031587365,394.8320671731307,394.92203118752496,395.0119952019192,395.1019592163135,395.19192323070774,395.281887245102,395.3718512594962,395.46181527389047,395.5517792882847,395.64174330267895,395.7317073170732,395.8216713314674,395.91163534586167,396.0015993602559,396.09156337465015,396.1815273890444,396.27149140343863,396.3614554178329,396.4514194322271,396.54138344662135,396.6313474610156,396.72131147540983,396.8112754898041,396.9012395041983,396.99120351859256,397.0811675329868,397.17113154738104,397.2610955617753,397.3510595761695,397.44102359056376,397.530987604958,397.62095161935224,397.7109156337465,397.8008796481407,397.89084366253496,397.9808076769292,398.07077169132344,398.16073570571774,398.250699720112,398.3406637345062,398.43062774890046,398.5205917632947,398.61055577768894,398.7005197920832,398.7904838064774,398.88044782087167,398.9704118352659,399.06037584966015,399.1503398640544,399.24030387844863,399.33026789284287,399.4202319072371,399.51019592163135,399.6001599360256,399.69012395041983,399.7800879648141,399.8700519792083,399.96001599360255,400.0499800079968,400.13994402239103,400.2299080367853,400.3198720511795,400.40983606557376,400.499800079968,400.58976409436224,400.6797281087565,400.7696921231507,400.85965613754496,400.9496201519392,401.03958416633344,401.1295481807277,401.219512195122,401.3094762095162,401.39944022391046,401.4894042383047,401.57936825269894,401.6693322670932,401.7592962814874,401.84926029588166,401.9392243102759,402.02918832467014,402.1191523390644,402.2091163534586,402.29908036785287,402.3890443822471,402.47900839664135,402.5689724110356,402.65893642542983,402.74890043982407,402.8388644542183,402.92882846861255,403.0187924830068,403.10875649740103,403.1987205117953,403.2886845261895,403.37864854058375,403.468612554978,403.55857656937224,403.6485405837665,403.7385045981607,403.82846861255496,403.9184326269492,404.00839664134344,404.0983606557377,404.1883246701319,404.2782886845262,404.36825269892046,404.4582167133147,404.54818072770894,404.6381447421032,404.7281087564974,404.81807277089166,404.9080367852859,404.99800079968014,405.0879648140744,405.1779288284686,405.26789284286286,405.3578568572571,405.44782087165134,405.5377848860456,405.6277489004398,405.71771291483407,405.8076769292283,405.89764094362255,405.9876049580168,406.07756897241103,406.16753298680527,406.2574970011995,406.34746101559375,406.437425029988,406.52738904438223,406.6173530587765,406.7073170731707,406.79728108756495,406.8872451019592,406.97720911635344,407.0671731307477,407.1571371451419,407.24710115953616,407.33706517393045,407.4270291883247,407.51699320271894,407.6069572171132,407.6969212315074,407.78688524590166,407.8768492602959,407.96681327469014,408.0567772890844,408.1467413034786,408.23670531787286,408.3266693322671,408.41663334666134,408.5065973610556,408.5965613754498,408.68652538984406,408.7764894042383,408.86645341863255,408.9564174330268,409.046381447421,409.13634546181527,409.2263094762095,409.31627349060375,409.406237504998,409.49620151939223,409.58616553378647,409.6761295481807,409.76609356257495,409.8560575769692,409.94602159136343,410.0359856057577,410.1259496201519,410.21591363454615,410.30587764894045,410.3958416633347,410.48580567772893,410.5757696921232,410.6657337065174,410.75569772091166,410.8456617353059,410.93562574970014,411.0255897640944,411.1155537784886,411.20551779288286,411.2954818072771,411.38544582167134,411.4754098360656,411.5653738504598,411.65533786485406,411.7453018792483,411.83526589364254,411.9252299080368,412.015193922431,412.10515793682526,412.1951219512195,412.28508596561375,412.375049980008,412.4650139944022,412.55497800879647,412.6449420231907,412.73490603758495,412.8248700519792,412.91483406637343,413.00479808076767,413.0947620951619,413.18472610955615,413.2746901239504,413.3646541383447,413.45461815273893,413.54458216713317,413.6345461815274,413.72451019592165,413.8144742103159,413.90443822471013,413.9944022391044,414.0843662534986,414.17433026789286,414.2642942822871,414.35425829668134,414.4442223110756,414.5341863254698,414.62415033986406,414.7141143542583,414.80407836865254,414.8940423830468,414.984006397441,415.07397041183526,415.1639344262295,415.25389844062374,415.343862455018,415.4338264694122,415.52379048380647,415.6137544982007,415.70371851259495,415.7936825269892,415.8836465413834,415.97361055577767,416.0635745701719,416.15353858456615,416.2435025989604,416.33346661335463,416.4234306277489,416.51339464214317,416.6033586565374,416.69332267093165,416.7832866853259,416.87325069972013,416.9632147141144,417.0531787285086,417.14314274290285,417.2331067572971,417.32307077169133,417.4130347860856,417.5029988004798,417.59296281487406,417.6829268292683,417.77289084366254,417.8628548580568,417.952818872451,418.04278288684526,418.1327469012395,418.22271091563374,418.312674930028,418.4026389444222,418.49260295881646,418.5825669732107,418.67253098760494,418.7624950019992,418.8524590163934,418.94242303078767,419.0323870451819,419.12235105957615,419.2123150739704,419.3022790883646,419.39224310275887,419.48220711715317,419.5721711315474,419.66213514594165,419.7520991603359,419.84206317473013,419.93202718912437,420.0219912035186,420.11195521791285,420.2019192323071,420.29188324670133,420.3818472610956,420.4718112754898,420.56177528988405,420.6517393042783,420.74170331867253,420.8316673330668,420.921631347461,421.01159536185526,421.1015593762495,421.19152339064374,421.281487405038,421.3714514194322,421.46141543382646,421.5513794482207,421.64134346261494,421.7313074770092,421.8212714914034,421.91123550579766,422.0011995201919,422.09116353458614,422.1811275489804,422.2710915633746,422.36105557776887,422.4510195921631,422.5409836065574,422.63094762095164,422.7209116353459,422.8108756497401,422.90083966413437,422.9908036785286,423.08076769292285,423.1707317073171,423.26069572171133,423.35065973610557,423.4406237504998,423.53058776489405,423.6205517792883,423.71051579368253,423.8004798080768,423.890443822471,423.98040783686525,424.0703718512595,424.16033586565374,424.250299880048,424.3402638944422,424.43022790883646,424.5201919232307,424.61015593762494,424.7001199520192,424.7900839664134,424.88004798080766,424.9700119952019,425.05997600959614,425.1499400239904,425.2399040383846,425.32986805277886,425.4198320671731,425.5097960815674,425.59976009596164,425.6897241103559,425.7796881247501,425.86965213914436,425.9596161535386,426.04958016793285,426.1395441823271,426.2295081967213,426.31947221111557,426.4094362255098,426.49940023990405,426.5893642542983,426.67932826869253,426.76929228308677,426.859256297481,426.94922031187525,427.0391843262695,427.12914834066373,427.219112355058,427.3090763694522,427.39904038384645,427.4890043982407,427.57896841263494,427.6689324270292,427.7588964414234,427.84886045581766,427.9388244702119,428.02878848460614,428.1187524990004,428.2087165133946,428.29868052778886,428.3886445421831,428.47860855657734,428.56857257097164,428.6585365853659,428.7485005997601,428.83846461415436,428.9284286285486,429.01839264294284,429.1083566573371,429.1983206717313,429.28828468612556,429.3782487005198,429.46821271491405,429.5581767293083,429.6481407437025,429.73810475809677,429.828068772491,429.91803278688525,430.0079968012795,430.09796081567373,430.18792483006797,430.2778888444622,430.36785285885645,430.4578168732507,430.54778088764493,430.6377449020392,430.7277089164334,430.81767293082765,430.9076369452219,430.99760095961614,431.0875649740104,431.1775289884046,431.26749300279886,431.3574570171931,431.44742103158734,431.5373850459816,431.6273490603759,431.7173130747701,431.80727708916436,431.8972411035586,431.98720511795284,432.0771691323471,432.1671331467413,432.25709716113556,432.3470611755298,432.43702518992404,432.5269892043183,432.6169532187125,432.70691723310676,432.796881247501,432.88684526189525,432.9768092762895,433.0667732906837,433.15673730507797,433.2467013194722,433.33666533386645,433.4266293482607,433.51659336265493,433.60655737704917,433.6965213914434,433.78648540583765,433.8764494202319,433.96641343462613,434.0563774490204,434.1463414634146,434.23630547780886,434.3262694922031,434.41623350659734,434.5061975209916,434.5961615353858,434.6861255497801,434.77608956417436,434.8660535785686,434.95601759296284,435.0459816073571,435.1359456217513,435.22590963614556,435.3158736505398,435.40583766493404,435.4958016793283,435.5857656937225,435.67572970811676,435.765693722511,435.85565773690524,435.9456217512995,436.0355857656937,436.12554978008797,436.2155137944822,436.30547780887645,436.3954418232707,436.4854058376649,436.57536985205917,436.6653338664534,436.75529788084765,436.8452618952419,436.93522590963613,437.02518992403037,437.1151539384246,437.20511795281885,437.2950819672131,437.38504598160733,437.4750099960016,437.5649740103958,437.65493802479006,437.74490203918435,437.8348660535786,437.92483006797283,438.0147940823671,438.1047580967613,438.19472211115556,438.2846861255498,438.37465013994404,438.4646141543383,438.5545781687325,438.64454218312676,438.734506197521,438.82447021191524,438.9144342263095,439.0043982407037,439.09436225509796,439.1843262694922,439.27429028388644,439.3642542982807,439.4542183126749,439.54418232706917,439.6341463414634,439.72411035585765,439.8140743702519,439.9040383846461,439.99400239904037,440.0839664134346,440.17393042782885,440.2638944422231,440.35385845661733,440.4438224710116,440.5337864854058,440.62375049980005,440.71371451419435,440.8036785285886,440.89364254298283,440.9836065573771,441.0735705717713,441.16353458616555,441.2534986005598,441.34346261495403,441.4334266293483,441.5233906437425,441.61335465813676,441.703318672531,441.79328268692524,441.8832467013195,441.9732107157137,442.06317473010796,442.1531387445022,442.24310275889644,442.3330667732907,442.4230307876849,442.51299480207916,442.6029588164734,442.69292283086764,442.7828868452619,442.8728508596561,442.96281487405037,443.0527788884446,443.14274290283885,443.2327069172331,443.32267093162733,443.41263494602157,443.5025989604158,443.59256297481005,443.6825269892043,443.7724910035986,443.86245501799283,443.95241903238707,444.0423830467813,444.13234706117555,444.2223110755698,444.31227508996403,444.4022391043583,444.4922031187525,444.58216713314675,444.672131147541,444.76209516193524,444.8520591763295,444.9420231907237,445.03198720511796,445.1219512195122,445.21191523390644,445.3018792483007,445.3918432626949,445.48180727708916,445.5717712914834,445.66173530587764,445.7516993202719,445.8416633346661,445.93162734906036,446.0215913634546,446.11155537784884,446.2015193922431,446.2914834066373,446.38144742103157,446.4714114354258,446.56137544982005,446.6513394642143,446.74130347860853,446.8312674930028,446.92123150739707,447.0111955217913,447.10115953618555,447.1911235505798,447.28108756497403,447.37105157936827,447.4610155937625,447.55097960815675,447.640943622551,447.73090763694523,447.8208716513395,447.9108356657337,448.00079968012795,448.0907636945222,448.18072770891644,448.2706917233107,448.3606557377049,448.45061975209916,448.5405837664934,448.63054778088764,448.7205117952819,448.8104758096761,448.90043982407036,448.9904038384646,449.08036785285884,449.1703318672531,449.2602958816473,449.35025989604156,449.4402239104358,449.53018792483005,449.6201519392243,449.7101159536185,449.80007996801277,449.89004398240706,449.9800079968013,450.06997201119555,450.1599360255898,450.249900039984,450.33986405437827,450.4298280687725,450.51979208316675,450.609756097561,450.69972011195523,450.78968412634947,450.8796481407437,450.96961215513795,451.0595761695322,451.14954018392643,451.2395041983207,451.3294682127149,451.41943222710916,451.5093962415034,451.59936025589764,451.6893242702919,451.7792882846861,451.86925229908036,451.9592163134746,452.04918032786884,452.1391443422631,452.2291083566573,452.31907237105156,452.4090363854458,452.49900039984004,452.5889644142343,452.6789284286285,452.76889244302276,452.858856457417,452.9488204718113,453.03878448620554,453.1287485005998,453.218712514994,453.30867652938826,453.3986405437825,453.48860455817675,453.578568572571,453.6685325869652,453.75849660135947,453.8484606157537,453.93842463014795,454.0283886445422,454.11835265893643,454.20831667333067,454.2982806877249,454.38824470211915,454.4782087165134,454.56817273090763,454.6581367453019,454.7481007596961,454.83806477409036,454.9280287884846,455.01799280287884,455.1079568172731,455.1979208316673,455.28788484606156,455.3778488604558,455.46781287485004,455.5577768892443,455.6477409036385,455.73770491803276,455.827668932427,455.9176329468213,456.00759696121554,456.0975609756098,456.187524990004,456.27748900439826,456.3674530187925,456.45741703318674,456.547381047581,456.6373450619752,456.72730907636947,456.8172730907637,456.90723710515795,456.9972011195522,457.0871651339464,457.17712914834067,457.2670931627349,457.35705717712915,457.4470211915234,457.53698520591763,457.6269492203119,457.7169132347061,457.80687724910035,457.8968412634946,457.98680527788883,458.0767692922831,458.1667333066773,458.25669732107156,458.3466613354658,458.43662534986004,458.5265893642543,458.6165533786485,458.70651739304276,458.796481407437,458.88644542183124,458.97640943622554,459.0663734506198,459.156337465014,459.24630147940826,459.3362654938025,459.42622950819674,459.516193522591,459.6061575369852,459.69612155137946,459.7860855657737,459.87604958016794,459.9660135945622,460.0559776089564,460.14594162335067,460.2359056377449,460.32586965213915,460.4158336665334,460.5057976809276,460.59576169532187,460.6857257097161,460.77568972411035,460.8656537385046,460.95561775289883,461.0455817672931,461.1355457816873,461.22550979608155,461.3154738104758,461.40543782487003,461.4954018392643,461.5853658536585,461.67532986805276,461.765293882447,461.85525789684124,461.9452219112355,462.0351859256298,462.125149940024,462.21511395441826,462.3050779688125,462.39504198320674,462.485005997601,462.5749700119952,462.66493402638946,462.7548980407837,462.84486205517794,462.9348260695722,463.0247900839664,463.11475409836066,463.2047181127549,463.29468212714914,463.3846461415434,463.4746101559376,463.56457417033187,463.6545381847261,463.74450219912035,463.8344662135146,463.92443022790883,464.01439424230307,464.1043582566973,464.19432227109155,464.2842862854858,464.37425029988003,464.4642143142743,464.5541783286685,464.64414234306275,464.734106357457,464.82407037185123,464.9140343862455,465.0039984006397,465.093962415034,465.18392642942825,465.2738904438225,465.36385445821674,465.453818472611,465.5437824870052,465.63374650139946,465.7237105157937,465.81367453018794,465.9036385445822,465.9936025589764,466.08356657337066,466.1735305877649,466.26349460215914,466.3534586165534,466.4434226309476,466.53338664534186,466.6233506597361,466.71331467413034,466.8032786885246,466.8932427029188,466.98320671731307,467.0731707317073,467.16313474610155,467.2530987604958,467.34306277489003,467.43302678928427,467.5229908036785,467.61295481807275,467.702918832467,467.79288284686123,467.8828468612555,467.9728108756497,468.06277489004395,468.15273890443825,468.2427029188325,468.33266693322673,468.422630947621,468.5125949620152,468.60255897640945,468.6925229908037,468.78248700519794,468.8724510195922,468.9624150339864,469.05237904838066,469.1423430627749,469.23230707716914,469.3222710915634,469.4122351059576,469.50219912035186,469.5921631347461,469.68212714914034,469.7720911635346,469.8620551779288,469.95201919232306,470.0419832067173,470.13194722111155,470.2219112355058,470.3118752499,470.40183926429427,470.4918032786885,470.58176729308275,470.671731307477,470.76169532187123,470.85165933626547,470.9416233506597,471.03158736505395,471.12155137944825,471.2115153938425,471.30147940823673,471.39144342263097,471.4814074370252,471.57137145141945,471.6613354658137,471.75129948020793,471.8412634946022,471.9312275089964,472.02119152339066,472.1111555377849,472.20111955217914,472.2910835665734,472.3810475809676,472.47101159536186,472.5609756097561,472.65093962415034,472.7409036385446,472.8308676529388,472.92083166733306,473.0107956817273,473.10075969612154,473.1907237105158,473.28068772491,473.37065173930426,473.4606157536985,473.55057976809275,473.640543782487,473.7305077968812,473.82047181127547,473.9104358256697,474.00039984006395,474.0903638544582,474.1803278688525,474.2702918832467,474.36025589764097,474.4502199120352,474.54018392642945,474.6301479408237,474.72011195521793,474.81007596961217,474.9000399840064,474.99000399840065,475.0799680127949,475.16993202718913,475.2598960415834,475.3498600559776,475.43982407037186,475.5297880847661,475.61975209916034,475.7097161135546,475.7996801279488,475.88964414234306,475.9796081567373,476.06957217113154,476.1595361855258,476.24950019992,476.33946421431426,476.4294282287085,476.51939224310274,476.609356257497,476.6993202718912,476.78928428628546,476.8792483006797,476.96921231507395,477.0591763294682,477.1491403438624,477.2391043582567,477.32906837265097,477.4190323870452,477.50899640143945,477.5989604158337,477.6889244302279,477.77888844462217,477.8688524590164,477.95881647341065,478.0487804878049,478.13874450219913,478.2287085165934,478.3186725309876,478.40863654538185,478.4986005597761,478.58856457417033,478.6785285885646,478.7684926029588,478.85845661735306,478.9484206317473,479.03838464614154,479.1283486605358,479.21831267493,479.30827668932426,479.3982407037185,479.48820471811274,479.578168732507,479.6681327469012,479.75809676129546,479.8480607756897,479.93802479008394,480.0279888044782,480.1179528188724,480.20791683326667,480.29788084766096,480.3878448620552,480.47780887644944,480.5677728908437,480.6577369052379,480.74770091963217,480.8376649340264,480.92762894842065,481.0175929628149,481.10755697720913,481.19752099160337,481.2874850059976,481.37744902039185,481.4674130347861,481.55737704918033,481.6473410635746,481.7373050779688,481.82726909236305,481.9172331067573,482.00719712115153,482.0971611355458,482.18712514994,482.27708916433426,482.3670531787285,482.45701719312274,482.546981207517,482.6369452219112,482.72690923630546,482.8168732506997,482.90683726509394,482.9968012794882,483.0867652938824,483.17672930827666,483.2666933226709,483.3566573370652,483.44662135145944,483.5365853658537,483.6265493802479,483.71651339464216,483.8064774090364,483.89644142343064,483.9864054378249,484.0763694522191,484.16633346661337,484.2562974810076,484.34626149540185,484.4362255097961,484.52618952419033,484.61615353858457,484.7061175529788,484.79608156737305,484.8860455817673,484.97600959616153,485.0659736105558,485.15593762495,485.24590163934425,485.3358656537385,485.42582966813274,485.515793682527,485.6057576969212,485.69572171131546,485.7856857257097,485.87564974010394,485.9656137544982,486.0555777688924,486.14554178328666,486.2355057976809,486.3254698120752,486.41543382646944,486.5053978408637,486.5953618552579,486.68532586965216,486.7752898840464,486.86525389844064,486.9552179128349,487.0451819272291,487.13514594162336,487.2251099560176,487.31507397041185,487.4050379848061,487.4950019992003,487.58496601359457,487.6749300279888,487.76489404238305,487.8548580567773,487.94482207117153,488.03478608556577,488.12475009996,488.21471411435425,488.3046781287485,488.39464214314273,488.484606157537,488.5745701719312,488.66453418632545,488.7544982007197,488.84446221511394,488.9344262295082,489.0243902439024,489.11435425829666,489.2043182726909,489.29428228708514,489.38424630147944,489.4742103158737,489.5641743302679,489.65413834466216,489.7441023590564,489.83406637345064,489.9240303878449,490.0139944022391,490.10395841663336,490.1939224310276,490.28388644542184,490.3738504598161,490.4638144742103,490.55377848860456,490.6437425029988,490.73370651739305,490.8236705317873,490.9136345461815,491.00359856057577,491.09356257497,491.18352658936425,491.2734906037585,491.36345461815273,491.45341863254697,491.5433826469412,491.63334666133545,491.7233106757297,491.81327469012393,491.9032387045182,491.9932027189124,492.08316673330665,492.1731307477009,492.26309476209514,492.3530587764894,492.4430227908837,492.5329868052779,492.62295081967216,492.7129148340664,492.80287884846064,492.8928428628549,492.9828068772491,493.07277089164336,493.1627349060376,493.25269892043184,493.3426629348261,493.4326269492203,493.52259096361456,493.6125549780088,493.70251899240304,493.7924830067973,493.8824470211915,493.97241103558576,494.06237504998,494.15233906437425,494.2423030787685,494.3322670931627,494.42223110755697,494.5121951219512,494.60215913634545,494.6921231507397,494.78208716513393,494.87205117952817,494.9620151939224,495.05197920831665,495.1419432227109,495.23190723710513,495.3218712514994,495.4118352658936,495.5017992802879,495.59176329468215,495.6817273090764,495.77169132347063,495.8616553378649,495.9516193522591,496.04158336665336,496.1315473810476,496.22151139544184,496.3114754098361,496.4014394242303,496.49140343862456,496.5813674530188,496.67133146741304,496.7612954818073,496.8512594962015,496.94122351059576,497.03118752499,497.12115153938424,497.2111155537785,497.3010795681727,497.39104358256697,497.4810075969612,497.57097161135545,497.6609356257497,497.7508996401439,497.84086365453817,497.9308276689324,498.02079168332665,498.1107556977209,498.20071971211513,498.29068372650937,498.3806477409036,498.47061175529785,498.56057576969215,498.6505397840864,498.74050379848063,498.8304678128749,498.9204318272691,499.01039584166335,499.1003598560576,499.19032387045183,499.2802878848461,499.3702518992403,499.46021591363456,499.5501799280288,499.64014394242304,499.7301079568173,499.8200719712115,499.91003598560576,500.0]}
},{}],60:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var rsqrtf = require( './../lib' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof rsqrtf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[50,500]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[20,50]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[3,20]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[0.8,3]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[0.0,0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[1e-300,1e-308]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of subnormal `x`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` (huge positive)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = rsqrtf( NaN );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', function test( t ) {
	var v = rsqrtf( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', function test( t ) {
	var v = rsqrtf( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', function test( t ) {
	var v = rsqrtf( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `NaN` if provided a negative number', function test( t ) {
	var v = rsqrtf( -4.0 );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = rsqrtf( NINF );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rsqrtf/test/test.js")
},{"./../lib":50,"./fixtures/julia/huge_positive.json":52,"./fixtures/julia/large_positive.json":53,"./fixtures/julia/medium_positive.json":54,"./fixtures/julia/small_positive.json":55,"./fixtures/julia/smaller.json":56,"./fixtures/julia/subnormal.json":57,"./fixtures/julia/tiny_positive.json":58,"./fixtures/julia/very_large_positive.json":59,"@stdlib/constants/float32/eps":41,"@stdlib/constants/float32/ninf":42,"@stdlib/constants/float32/pinf":43,"@stdlib/math/base/assert/is-nanf":46,"@stdlib/math/base/special/abs":48,"tape":208}],61:[function(require,module,exports){
(function (__filename,__dirname){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var tryRequire = require( '@stdlib/utils/try-require' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );


// VARIABLES //

var rsqrtf = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( rsqrtf instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof rsqrtf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[50,500]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[20,50]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[3,20]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[0.8,3]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[0.0,0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` on the interval `[1e-300,1e-308]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of subnormal `x`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal square root of `x` (huge positive)', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rsqrtf( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', opts, function test( t ) {
	var v = rsqrtf( NaN );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', opts, function test( t ) {
	var v = rsqrtf( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', opts, function test( t ) {
	var v = rsqrtf( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', opts, function test( t ) {
	var v = rsqrtf( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `NaN` if provided a negative number', opts, function test( t ) {
	var v = rsqrtf( -4.0 );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', opts, function test( t ) {
	var v = rsqrtf( NINF );
	t.equal( isnanf( v ), true, 'returns NaN' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rsqrtf/test/test.native.js","/lib/node_modules/@stdlib/math/base/special/rsqrtf/test")
},{"./fixtures/julia/huge_positive.json":52,"./fixtures/julia/large_positive.json":53,"./fixtures/julia/medium_positive.json":54,"./fixtures/julia/small_positive.json":55,"./fixtures/julia/smaller.json":56,"./fixtures/julia/subnormal.json":57,"./fixtures/julia/tiny_positive.json":58,"./fixtures/julia/very_large_positive.json":59,"@stdlib/constants/float32/eps":41,"@stdlib/constants/float32/ninf":42,"@stdlib/constants/float32/pinf":43,"@stdlib/math/base/assert/is-nanf":46,"@stdlib/math/base/special/abs":48,"@stdlib/utils/try-require":96,"path":109,"tape":208}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the principal square root of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

var sqrt = require( './main.js' );


// EXPORTS //

module.exports = sqrt;

},{"./main.js":63}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Compute the principal square root of a double-precision floating-point number.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/
var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = sqrt;

},{}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert a double-precision floating-point number to the nearest single-precision floating-point number.
*
* @module @stdlib/number/float64/base/to-float32
*
* @example
* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
*
* var y = float64ToFloat32( 1.337 );
* // returns 1.3370000123977661
*/

// MODULES //

var float64ToFloat32 = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

if ( typeof float64ToFloat32 !== 'function' ) {
	float64ToFloat32 = polyfill;
}


// EXPORTS //

module.exports = float64ToFloat32;

},{"./main.js":65,"./polyfill.js":66}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = fround;

},{}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );


// MAIN //

/**
* Converts a double-precision floating-point number to the nearest single-precision floating-point number.
*
* @param {number} x - double-precision floating-point number
* @returns {number} nearest single-precision floating-point number
*
* @example
* var y = float64ToFloat32( 1.337 );
* // returns 1.3370000123977661
*/
function float64ToFloat32( x ) {
	FLOAT32_VIEW[ 0 ] = x;
	return FLOAT32_VIEW[ 0 ];
}


// EXPORTS //

module.exports = float64ToFloat32;

},{"@stdlib/array/float32":2}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
*
* @example
* var reFunctionName = require( '@stdlib/regexp/function-name' );
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var reFunctionName = require( './main.js' );
var REGEXP = require( './regexp.js' );


// MAIN //

setReadOnly( reFunctionName, 'REGEXP', REGEXP );


// EXPORTS //

module.exports = reFunctionName;

},{"./main.js":68,"./regexp.js":69,"@stdlib/utils/define-nonenumerable-read-only-property":72}],68:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @returns {RegExp} regular expression
*
* @example
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/
function reFunctionName() {
	return /^\s*function\s*([^(]*)/i;
}


// EXPORTS //

module.exports = reFunctionName;

},{}],69:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var reFunctionName = require( './main.js' );


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = reFunctionName();


// EXPORTS //

module.exports = RE_FUNCTION_NAME;

},{"./main.js":68}],70:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

var constructorName = require( './main.js' );


// EXPORTS //

module.exports = constructorName;

},{"./main.js":71}],71:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var RE = require( '@stdlib/regexp/function-name' ).REGEXP;
var isBuffer = require( '@stdlib/assert/is-buffer' );


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/
function constructorName( v ) {
	var match;
	var name;
	var ctor;
	name = nativeClass( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		match = RE.exec( ctor.toString() );
		if ( match ) {
			return match[ 1 ];
		}
	}
	if ( isBuffer( v ) ) {
		return 'Buffer';
	}
	return name;
}


// EXPORTS //

module.exports = constructorName;

},{"@stdlib/assert/is-buffer":27,"@stdlib/regexp/function-name":67,"@stdlib/utils/native-class":91}],72:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

var setNonEnumerableReadOnly = require( './main.js' );


// EXPORTS //

module.exports = setNonEnumerableReadOnly;

},{"./main.js":73}],73:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	defineProperty( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

module.exports = setNonEnumerableReadOnly;

},{"@stdlib/utils/define-property":77}],74:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var defineProperty = Object.defineProperty;


// EXPORTS //

module.exports = defineProperty;

},{}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

module.exports = main;

},{}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( './define_property.js' );


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @private
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	// Test basic support...
	try {
		defineProperty( {}, 'x', {} );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = hasDefinePropertySupport;

},{"./define_property.js":75}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var hasDefinePropertySupport = require( './has_define_property_support.js' );
var builtin = require( './builtin.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var defineProperty;
if ( hasDefinePropertySupport() ) {
	defineProperty = builtin;
} else {
	defineProperty = polyfill;
}


// EXPORTS //

module.exports = defineProperty;

},{"./builtin.js":74,"./has_define_property_support.js":76,"./polyfill.js":78}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// VARIABLES //

var objectProtoype = Object.prototype;
var toStr = objectProtoype.toString;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function defineProperty( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {
		throw new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );
	}
	if ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {
		throw new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );
	}
	hasValue = ( 'value' in descriptor );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = ( 'get' in descriptor );
	hasSet = ( 'set' in descriptor );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

module.exports = defineProperty;

},{}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var builtin = require( './native.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var getProto;
if ( isFunction( Object.getPrototypeOf ) ) {
	getProto = builtin;
} else {
	getProto = polyfill;
}


// EXPORTS //

module.exports = getProto;

},{"./native.js":82,"./polyfill.js":83,"@stdlib/assert/is-function":33}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getProto = require( './detect.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/
function getPrototypeOf( value ) {
	if (
		value === null ||
		value === void 0
	) {
		return null;
	}
	// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
	value = Object( value );

	return getProto( value );
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./detect.js":79}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

// MODULES //

var getPrototype = require( './get_prototype_of.js' );


// EXPORTS //

module.exports = getPrototype;

},{"./get_prototype_of.js":80}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var getProto = Object.getPrototypeOf;


// EXPORTS //

module.exports = getProto;

},{}],83:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var getProto = require( './proto.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/
function getPrototypeOf( obj ) {
	var proto = getProto( obj );
	if ( proto || proto === null ) {
		return proto;
	}
	if ( nativeClass( obj.constructor ) === '[object Function]' ) {
		// May break if the constructor has been tampered with...
		return obj.constructor.prototype;
	}
	if ( obj instanceof Object ) {
		return Object.prototype;
	}
	// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
	return null;
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./proto.js":84,"@stdlib/utils/native-class":91}],84:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/
function getProto( obj ) {
	// eslint-disable-next-line no-proto
	return obj.__proto__;
}


// EXPORTS //

module.exports = getProto;

},{}],85:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the global object using code generation.
*
* @private
* @returns {Object} global object
*/
function getGlobal() {
	return new Function( 'return this;' )(); // eslint-disable-line no-new-func
}


// EXPORTS //

module.exports = getGlobal;

},{}],86:[function(require,module,exports){
(function (global){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof global === 'object' ) ? global : null;


// EXPORTS //

module.exports = obj;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],87:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the global object.
*
* @module @stdlib/utils/global
*
* @example
* var getGlobal = require( '@stdlib/utils/global' );
*
* var g = getGlobal();
* // returns {...}
*/

// MODULES //

var getGlobal = require( './main.js' );


// EXPORTS //

module.exports = getGlobal;

},{"./main.js":88}],88:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var getThis = require( './codegen.js' );
var Self = require( './self.js' );
var Win = require( './window.js' );
var Global = require( './global.js' );


// MAIN //

/**
* Returns the global object.
*
* ## Notes
*
* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
*
* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
* @throws {TypeError} must provide a boolean
* @throws {Error} unable to resolve global object
* @returns {Object} global object
*
* @example
* var g = getGlobal();
* // returns {...}
*/
function getGlobal( codegen ) {
	if ( arguments.length ) {
		if ( !isBoolean( codegen ) ) {
			throw new TypeError( 'invalid argument. Must provide a boolean primitive. Value: `'+codegen+'`.' );
		}
		if ( codegen ) {
			return getThis();
		}
		// Fall through...
	}
	// Case: browsers and web workers
	if ( Self ) {
		return Self;
	}
	// Case: browsers
	if ( Win ) {
		return Win;
	}
	// Case: Node.js
	if ( Global ) {
		return Global;
	}
	// Case: unknown
	throw new Error( 'unexpected error. Unable to resolve global object.' );
}


// EXPORTS //

module.exports = getGlobal;

},{"./codegen.js":85,"./global.js":86,"./self.js":89,"./window.js":90,"@stdlib/assert/is-boolean":21}],89:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof self === 'object' ) ? self : null;


// EXPORTS //

module.exports = obj;

},{}],90:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof window === 'object' ) ? window : null;


// EXPORTS //

module.exports = obj;

},{}],91:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":92,"./polyfill.js":93,"@stdlib/assert/has-tostringtag-support":14}],92:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":94}],93:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":94,"./tostringtag.js":95,"@stdlib/assert/has-own-property":10}],94:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],95:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],96:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Wrap `require` in a try/catch block.
*
* @module @stdlib/utils/try-require
*
* @example
* var tryRequire = require( '@stdlib/utils/try-require' );
*
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.log( out.message );
* }
*/

// MODULES //

var tryRequire = require( './try_require.js' );


// EXPORTS //

module.exports = tryRequire;

},{"./try_require.js":97}],97:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isError = require( '@stdlib/assert/is-error' );


// MAIN //

/**
* Wraps `require` in a try/catch block.
*
* @param {string} id - module id
* @returns {*|Error} `module.exports` of the resolved module or an error
*
* @example
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.error( out.message );
* }
*/
function tryRequire( id ) {
	try {
		return require( id ); // eslint-disable-line stdlib/no-dynamic-require
	} catch ( error ) {
		if ( isError( error ) ) {
			return error;
		}
		// Handle case where a literal is thrown...
		if ( typeof error === 'object' ) {
			return new Error( JSON.stringify( error ) );
		}
		return new Error( error.toString() );
	}
}


// EXPORTS //

module.exports = tryRequire;

},{"@stdlib/assert/is-error":29}],98:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var RE = require( './fixtures/re.js' );
var nodeList = require( './fixtures/nodelist.js' );
var typedarray = require( './fixtures/typedarray.js' );


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof RE === 'function' ||

		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof typedarray === 'object' ||

		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof nodeList === 'function'
	) {
		return true;
	}
	return false;
}


// EXPORTS //

module.exports = check;

},{"./fixtures/nodelist.js":99,"./fixtures/re.js":100,"./fixtures/typedarray.js":101}],99:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getGlobal = require( '@stdlib/utils/global' );


// MAIN //

var root = getGlobal();
var nodeList = root.document && root.document.childNodes;


// EXPORTS //

module.exports = nodeList;

},{"@stdlib/utils/global":87}],100:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var RE = /./;


// EXPORTS //

module.exports = RE;

},{}],101:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var typedarray = Int8Array; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = typedarray;

},{}],102:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

var usePolyfill = require( './check.js' );
var typeOf = require( './typeof.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var main = ( usePolyfill() ) ? polyfill : typeOf;


// EXPORTS //

module.exports = main;

},{"./check.js":98,"./polyfill.js":103,"./typeof.js":104}],103:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	return ctorName( v ).toLowerCase();
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":70}],104:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return ctorName( v ).toLowerCase();
	}
	return type;
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":70}],105:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],106:[function(require,module,exports){

},{}],107:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],108:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],109:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":200}],110:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":108,"inherits":195,"readable-stream/lib/_stream_duplex.js":112,"readable-stream/lib/_stream_passthrough.js":113,"readable-stream/lib/_stream_readable.js":114,"readable-stream/lib/_stream_transform.js":115,"readable-stream/lib/_stream_writable.js":116,"readable-stream/lib/internal/streams/end-of-stream.js":120,"readable-stream/lib/internal/streams/pipeline.js":122}],111:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],112:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":114,"./_stream_writable":116,"_process":200,"inherits":195}],113:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":115,"inherits":195}],114:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":111,"./_stream_duplex":112,"./internal/streams/async_iterator":117,"./internal/streams/buffer_list":118,"./internal/streams/destroy":119,"./internal/streams/from":121,"./internal/streams/state":123,"./internal/streams/stream":124,"_process":200,"buffer":125,"events":108,"inherits":195,"string_decoder/":207,"util":106}],115:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":111,"./_stream_duplex":112,"inherits":195}],116:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":111,"./_stream_duplex":112,"./internal/streams/destroy":119,"./internal/streams/state":123,"./internal/streams/stream":124,"_process":200,"buffer":125,"inherits":195,"util-deprecate":216}],117:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":120,"_process":200}],118:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":125,"util":106}],119:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":200}],120:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":111}],121:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],122:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":111,"./end-of-stream":120}],123:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":111}],124:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":108}],125:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":105,"buffer":125,"ieee754":194}],126:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":127,"get-intrinsic":190}],127:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":189,"get-intrinsic":190}],128:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":129,"./lib/keys.js":130}],129:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],130:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],131:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"object-keys":198}],132:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],133:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":163,"./ToPrimitive":165,"./Type":170}],134:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = GetIntrinsic('%TypeError%');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (Type(LeftFirst) !== 'Boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = Type(px) === 'String' && Type(py) === 'String';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":179,"../helpers/isNaN":180,"../helpers/isPrefixOf":181,"./ToNumber":163,"./ToPrimitive":165,"./Type":170,"get-intrinsic":190}],135:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

},{"get-intrinsic":190}],136:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":139,"./InLeapYear":143,"./MonthFromTime":153,"get-intrinsic":190}],137:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":185,"./floor":174}],138:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":174}],139:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":137,"./DayFromYear":138,"./YearFromTime":172}],140:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":175}],141:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else {
		throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
	}
};

},{"../helpers/assertRecord":178,"./IsAccessorDescriptor":144,"./IsDataDescriptor":146,"./Type":170,"get-intrinsic":190}],142:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":185,"./floor":174,"./modulo":175}],143:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":140,"./YearFromTime":172,"get-intrinsic":190}],144:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":178,"./Type":170,"has":193}],145:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":196}],146:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":178,"./Type":170,"has":193}],147:[function(require,module,exports){
'use strict';

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"../helpers/assertRecord":178,"./IsAccessorDescriptor":144,"./IsDataDescriptor":146,"./Type":170}],148:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor({
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor,
		Type: Type
	}, Desc);
};

},{"../helpers/isPropertyDescriptor":182,"./IsAccessorDescriptor":144,"./IsDataDescriptor":146,"./Type":170}],149:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":179,"../helpers/timeConstants":185}],150:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":179,"./DateFromTime":136,"./Day":137,"./MonthFromTime":153,"./ToInteger":162,"./YearFromTime":172,"./floor":174,"./modulo":175,"get-intrinsic":190}],151:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":179,"../helpers/timeConstants":185,"./ToInteger":162}],152:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":185,"./floor":174,"./modulo":175}],153:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":139,"./InLeapYear":143}],154:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":180}],155:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":185,"./floor":174,"./modulo":175}],156:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":170}],157:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":179,"./ToNumber":163,"./abs":173,"get-intrinsic":190}],158:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":185,"./DayFromYear":138}],159:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":185,"./modulo":175}],160:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],161:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":163}],162:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":179,"../helpers/isNaN":180,"../helpers/sign":184,"./ToNumber":163,"./abs":173,"./floor":174}],163:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":165}],164:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Object = GetIntrinsic('%Object%');

var CheckObjectCoercible = require('./CheckObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = function ToObject(value) {
	CheckObjectCoercible(value);
	return $Object(value);
};

},{"./CheckObjectCoercible":135,"get-intrinsic":190}],165:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":186}],166:[function(require,module,exports){
'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (has(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (has(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (has(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (has(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (has(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (has(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":145,"./ToBoolean":160,"./Type":170,"get-intrinsic":190,"has":193}],167:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":190}],168:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":179,"../helpers/isNaN":180,"../helpers/sign":184,"./ToNumber":163,"./abs":173,"./floor":174,"./modulo":175}],169:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":163}],170:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],171:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":137,"./modulo":175}],172:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":126,"get-intrinsic":190}],173:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":190}],174:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],175:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":183}],176:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":185,"./modulo":175}],177:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":133,"./5/AbstractRelationalComparison":134,"./5/CheckObjectCoercible":135,"./5/DateFromTime":136,"./5/Day":137,"./5/DayFromYear":138,"./5/DayWithinYear":139,"./5/DaysInYear":140,"./5/FromPropertyDescriptor":141,"./5/HourFromTime":142,"./5/InLeapYear":143,"./5/IsAccessorDescriptor":144,"./5/IsCallable":145,"./5/IsDataDescriptor":146,"./5/IsGenericDescriptor":147,"./5/IsPropertyDescriptor":148,"./5/MakeDate":149,"./5/MakeDay":150,"./5/MakeTime":151,"./5/MinFromTime":152,"./5/MonthFromTime":153,"./5/SameValue":154,"./5/SecFromTime":155,"./5/StrictEqualityComparison":156,"./5/TimeClip":157,"./5/TimeFromYear":158,"./5/TimeWithinDay":159,"./5/ToBoolean":160,"./5/ToInt32":161,"./5/ToInteger":162,"./5/ToNumber":163,"./5/ToObject":164,"./5/ToPrimitive":165,"./5/ToPropertyDescriptor":166,"./5/ToString":167,"./5/ToUint16":168,"./5/ToUint32":169,"./5/Type":170,"./5/WeekDay":171,"./5/YearFromTime":172,"./5/abs":173,"./5/floor":174,"./5/modulo":175,"./5/msFromTime":176}],178:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
	'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
		if (Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	}
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
	var predicate = predicates[recordType];
	if (typeof predicate !== 'function') {
		throw new $SyntaxError('unknown record type: ' + recordType);
	}
	if (!predicate(Type, value)) {
		throw new $TypeError(argumentName + ' must be a ' + recordType);
	}
};

},{"get-intrinsic":190,"has":193}],179:[function(require,module,exports){
'use strict';

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],180:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],181:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":126}],182:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var has = require('has');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
	if (ES.Type(Desc) !== 'Object') {
		return false;
	}
	var allowed = {
		'[[Configurable]]': true,
		'[[Enumerable]]': true,
		'[[Get]]': true,
		'[[Set]]': true,
		'[[Value]]': true,
		'[[Writable]]': true
	};

	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
		if (has(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"get-intrinsic":190,"has":193}],183:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],184:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],185:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],186:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":187,"is-callable":196}],187:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],188:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],189:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":188}],190:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":189,"has":193,"has-symbols":191}],191:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":192}],192:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],193:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":189}],194:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],195:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],196:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};

},{}],197:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":199}],198:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":197,"./isArguments":199}],199:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],200:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],201:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":200,"through":214,"timers":215}],202:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":125}],203:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":177,"function-bind":189}],204:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":203,"./polyfill":205,"./shim":206,"define-properties":131,"function-bind":189}],205:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":203}],206:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":205,"define-properties":131}],207:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":202}],208:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":209,"./lib/results":211,"./lib/test":212,"_process":200,"defined":132,"through":214,"timers":215}],209:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":200,"fs":107,"through":214}],210:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":200,"timers":215}],211:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":200,"events":108,"function-bind":189,"has":193,"inherits":195,"object-inspect":213,"resumer":201,"through":214,"timers":215}],212:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":210,"deep-equal":128,"defined":132,"events":108,"has":193,"inherits":195,"path":109,"string.prototype.trim":204}],213:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],214:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":200,"stream":110}],215:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":200,"timers":215}],216:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[60,61]);
