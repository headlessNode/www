// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of single-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float32
*
* @example
* var ctor = require( '@stdlib/array/float32' );
*
* var arr = new ctor( 10 );
* // returns <Float32Array>
*/

// MODULES //

var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":2,"./polyfill.js":3,"@stdlib/assert/has-float32array-support":17}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float32Array === 'function' ) ? Float32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of single-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":5,"./polyfill.js":6,"@stdlib/assert/has-float64array-support":20}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":8,"./polyfill.js":9,"@stdlib/assert/has-uint16array-support":28}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":11,"./polyfill.js":12,"@stdlib/assert/has-uint32array-support":31}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":14,"./polyfill.js":15,"@stdlib/assert/has-uint8array-support":34}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float32Array === 'function' ) ? Float32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float32Array` support.
*
* @module @stdlib/assert/has-float32array-support
*
* @example
* var hasFloat32ArraySupport = require( '@stdlib/assert/has-float32array-support' );
*
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat32ArraySupport;

},{"./main.js":18}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat32Array = require( '@stdlib/assert/is-float32array' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var GlobalFloat32Array = require( './float32array.js' );


// MAIN //

/**
* Tests for native `Float32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float32Array` support
*
* @example
* var bool = hasFloat32ArraySupport();
* // returns <boolean>
*/
function hasFloat32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat32Array( [ 1.0, 3.14, -3.14, 5.0e40 ] );
		bool = (
			isFloat32Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.140000104904175 &&
			arr[ 2 ] === -3.140000104904175 &&
			arr[ 3 ] === PINF
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat32ArraySupport;

},{"./float32array.js":16,"@stdlib/assert/is-float32array":49,"@stdlib/constants/float64/pinf":76}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":19,"@stdlib/assert/is-float64array":51}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":25}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":27}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":24}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":29}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":30,"@stdlib/assert/is-uint16array":60,"@stdlib/constants/uint16/max":78}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":33,"@stdlib/assert/is-uint32array":62,"@stdlib/constants/uint32/max":79}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":35}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":36,"@stdlib/assert/is-uint8array":64,"@stdlib/constants/uint8/max":80}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":38}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( nativeClass( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

module.exports = f;

},{"@stdlib/utils/native-class":168}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( main, 'isPrimitive', isPrimitive );
setReadOnly( main, 'isObject', isObject );


// EXPORTS //

module.exports = main;

},{"./main.js":40,"./object.js":41,"./primitive.js":42,"@stdlib/utils/define-nonenumerable-read-only-property":150}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/
function isBoolean( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isBoolean;

},{"./object.js":41,"./primitive.js":42}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var nativeClass = require( '@stdlib/utils/native-class' );
var Boolean = require( '@stdlib/boolean/ctor' );
var test = require( './try2serialize.js' );


// VARIABLES //

var FLG = hasToStringTag();


// MAIN //

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/
function isBoolean( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof Boolean ) {
			return true;
		}
		if ( FLG ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Boolean]' );
	}
	return false;
}


// EXPORTS //

module.exports = isBoolean;

},{"./try2serialize.js":44,"@stdlib/assert/has-tostringtag-support":26,"@stdlib/boolean/ctor":68,"@stdlib/utils/native-class":168}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/
function isBoolean( value ) {
	return ( typeof value === 'boolean' );
}


// EXPORTS //

module.exports = isBoolean;

},{}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var toString = Boolean.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = test;

},{"./tostring.js":43}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":46}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		isObjectLike( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&

				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
}


// EXPORTS //

module.exports = isBuffer;

},{"@stdlib/assert/is-object-like":58}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":48}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/
function isError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof Error ) {
		return true;
	}
	// Walk the prototype tree until we find an object having the desired native class...
	while ( value ) {
		if ( nativeClass( value ) === '[object Error]' ) {
			return true;
		}
		value = getPrototypeOf( value );
	}
	return false;
}


// EXPORTS //

module.exports = isError;

},{"@stdlib/utils/get-prototype-of":158,"@stdlib/utils/native-class":168}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float32Array.
*
* @module @stdlib/assert/is-float32array
*
* @example
* var isFloat32Array = require( '@stdlib/assert/is-float32array' );
*
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* bool = isFloat32Array( [] );
* // returns false
*/

// MODULES //

var isFloat32Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat32Array;

},{"./main.js":50}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat32Array = ( typeof Float32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float32Array
*
* @example
* var bool = isFloat32Array( new Float32Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat32Array( [] );
* // returns false
*/
function isFloat32Array( value ) {
	return (
		( hasFloat32Array && value instanceof Float32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float32Array]'
	);
}


// EXPORTS //

module.exports = isFloat32Array;

},{"@stdlib/utils/native-class":168}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":52}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":168}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":54}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var typeOf = require( '@stdlib/utils/type-of' );


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( typeOf( value ) === 'function' );
}


// EXPORTS //

module.exports = isFunction;

},{"@stdlib/utils/type-of":179}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":7,"@stdlib/array/uint8":13}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":57}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":55}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var main = require( './main.js' );


// VARIABLES //

var isObjectLikeArray = arrayfun( main );


// MAIN //

setReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );


// EXPORTS //

module.exports = main;

},{"./main.js":59,"@stdlib/assert/tools/array-function":66,"@stdlib/utils/define-nonenumerable-read-only-property":150}],59:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
}


// EXPORTS //

module.exports = isObjectLike;

},{}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":61}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":168}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":63}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":168}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":65}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":168}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":67}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );
	}
	return every;

	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArray( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	}
}


// EXPORTS //

module.exports = arrayfcn;

},{"@stdlib/assert/is-array":37,"@stdlib/string/format":143}],68:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Boolean constructor.
*
* @module @stdlib/boolean/ctor
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var b = Boolean( null );
* // returns false
*
* b = Boolean( [] );
* // returns true
*
* b = Boolean( {} );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var b = new Boolean( false );
* // returns <Boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":69}],69:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a boolean.
*
* @name Boolean
* @constructor
* @type {Function}
* @param {*} value - input value
* @returns {(boolean|Boolean)} boolean
*
* @example
* var b = Boolean( null );
* // returns false
*
* b = Boolean( [] );
* // returns true
*
* b = Boolean( {} );
* // returns true
*
* @example
* var b = new Boolean( false );
* // returns <Boolean>
*/
var Bool = Boolean; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Bool;

},{}],70:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.
*
* @module @stdlib/constants/float32/eps
* @type {number}
*
* @example
* var FLOAT32_EPSILON = require( '@stdlib/constants/float32/eps' );
* // returns 1.1920928955078125e-7
*/

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.
*
* ## Notes
*
* The difference is equal to
*
* ```tex
* \frac{1}{2^{23}}
* ```
*
* @constant
* @type {number}
* @default 1.1920928955078125e-7
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT32_EPSILON = float64ToFloat32( 1.1920928955078125e-7 );


// EXPORTS //

module.exports = FLOAT32_EPSILON;

},{"@stdlib/number/float64/base/to-float32":121}],71:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Single-precision floating-point negative infinity.
*
* @module @stdlib/constants/float32/ninf
* @type {number}
*
* @example
* var FLOAT32_NINF = require( '@stdlib/constants/float32/ninf' );
* // returns -infinity
*/

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );
var Uint32Array = require( '@stdlib/array/uint32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );
var v;


// MAIN //

/**
* Single-precision floating-point negative infinity.
*
* ## Notes
*
* Single-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111 00000000000000000000000
* ```
*
* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.
*
* @constant
* @type {number}
* @default 0xff800000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_NINF = 0xff800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = FLOAT32_NINF;

v = FLOAT32_VIEW[ 0 ];


// EXPORTS //

module.exports = v;

},{"@stdlib/array/float32":1,"@stdlib/array/uint32":10}],72:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Single-precision floating-point positive infinity.
*
* @module @stdlib/constants/float32/pinf
* @type {number}
*
* @example
* var FLOAT32_PINF = require( '@stdlib/constants/float32/pinf' );
* // returns +infinity
*/

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );
var Uint32Array = require( '@stdlib/array/uint32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );
var v;


// MAIN //

/**
* Single-precision floating-point positive infinity.
*
* ## Notes
*
* Single-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111 00000000000000000000000
* ```
*
* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.
*
* @constant
* @type {number}
* @default 0x7f800000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT32_PINF = 0x7f800000;

// Set the ArrayBuffer bit sequence:
UINT32_VIEW[ 0 ] = FLOAT32_PINF;

v = FLOAT32_VIEW[ 0 ];


// EXPORTS //

module.exports = v;

},{"@stdlib/array/float32":1,"@stdlib/array/uint32":10}],73:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for excluding the sign bit of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-abs-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_ABS_MASK = require( '@stdlib/constants/float64/high-word-abs-mask' );
* // returns 2147483647
*/


// MAIN //

/**
* High word mask for excluding the sign bit of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2147483647 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 11111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7fffffff
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_ABS_MASK;

},{}],74:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the sign bit of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-sign-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_SIGN_MASK = require( '@stdlib/constants/float64/high-word-sign-mask' );
* // returns 2147483648
*/


// MAIN //

/**
* High word mask for the sign bit of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2147483648 \\), which corresponds to the bit sequence
*
* ```binarystring
* 1 00000000000 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x80000000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_SIGN_MASK;

},{}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":110}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/float64/smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":82}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/float64/ninf":75,"@stdlib/constants/float64/pinf":76}],83:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":84}],84:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],85:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a single-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nanf
*
* @example
* var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
*
* var bool = isnanf( NaN );
* // returns true
*
* bool = isnanf( 7.0 );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":86}],86:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a single-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnanf( NaN );
* // returns true
*
* @example
* var bool = isnanf( 7.0 );
* // returns false
*/
function isnanf( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnanf;

},{}],87:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":88}],88:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],89:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cube root of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/cbrt
*
* @example
* var cbrt = require( '@stdlib/math/base/special/cbrt' );
*
* var v = cbrt( 64.0 );
* // returns 4.0
*
* v = cbrt( 27.0 );
* // returns 3.0
*
* v = cbrt( 0.0 );
* // returns 0.0
*
* v = cbrt( -0.0 );
* // returns -0.0
*
* v = cbrt( -9.0 );
* // returns ~-2.08
*
* v = cbrt( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":90}],90:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
var SIGN_MASK = require( '@stdlib/constants/float64/high-word-sign-mask' );
var ABS_MASK = require( '@stdlib/constants/float64/high-word-abs-mask' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var polyval = require( './polyval_p.js' );


// VARIABLES //

// 2**32 - 1 = 4294967295 => 11111111111111111111111111111111
var HIGH_WORD_MASK = 4294967295>>>0; // asm type annotation

// 2**31 + 2**30 = 3221225472 => 11000000000000000000000000000000
var LOW_WORD_MASK = 3221225472>>>0; // asm type annotation

// 2**54
var TWO_54 = 18014398509481984.0;

// 2**31 = 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000
var TWO_31 = 0x80000000>>>0; // asm type annotation

// 0x00000001 = 1 => 0 00000000000 00000000000000000001
var ONE = 0x00000001>>>0; // asm type annotation

// B1 = (1023-1023/3-0.03306235651)*2**20
var B1 = 715094163>>>0; // asm type annotation

// B2 = (1023-1023/3-54/3-0.03306235651)*2**20
var B2 = 696219795>>>0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000
var FLOAT64_SMALLEST_NORMAL_HIGH_WORD = getHighWord( FLOAT64_SMALLEST_NORMAL ); // eslint-disable-line id-length

// Words workspace:
var WORDS = [ 0>>>0, 0>>>0 ]; // asm type annotation


// MAIN //

/**
* Computes the cube root of a double-precision floating-point number.
*
* ## Method
*
* 1.  Rough cube root to \\( 5 \\) bits:
*
*     ```tex
*     \sqrt\[3\]{2^e (1+m)} \approx 2^(e/3) \biggl(1 + \frac{(e \mathrm{mod}\ 3) + m}{3}\biggr)
*     ```
*
*     where \\( e \\) is a nonnegative integer, \\( m \\) is real and in \\( \[0, 1) \\), and \\( / \\) and \\( \mathrm{mod} \\) are integer division and modulus with rounding toward \\( -\infty \\).
*
*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\( 1 \\) in \\( 16 \\).
*
*     Adding a bias of \\( -0.03306235651 \\) to the \\( (e \mathrm{mod} 3+ m )/ 3 \\) term reduces the error to about \\( 1 \\) in \\( 32 \\).
*
*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\( 1023 \\) for doubles) and later add it back.
*
*     We do the subtraction virtually to keep \\( e \geq 0 \\) so that ordinary integer division rounds toward \\( -\infty \\); this is also efficient.
*
* 2.  New cube root to \\( 23 \\) bits:
*
*     ```tex
*     \sqrt[3]{x} = t \cdot \sqrt\[3\]{x/t^3} \approx t \mathrm{P}(t^3/x)
*     ```
*
*     where \\( \mathrm{P}(r) \\) is a polynomial of degree \\( 4 \\) that approximates \\( 1 / \sqrt\[3\]{r} \\) to within \\( 2^{-23.5} \\) when \\( |r - 1| < 1/10 \\).
*
*     The rough approximation has produced \\( t \\) such than \\( |t/sqrt\[3\]{x} - 1| \lesssim 1/32 \\), and cubing this gives us bounds for \\( r = t^3/x \\).
*
* 3.  Round \\( t \\) away from \\( 0 \\) to \\( 23 \\) bits (sloppily except for ensuring that the result is larger in magnitude than \\( \sqrt\[3\]{x} \\) but not much more than \\( 2 \\) 23-bit ulps larger).
*
*     With rounding toward zero, the error bound would be \\( \approx 5/6 \\) instead of \\( \approx 4/6 \\).
*
*     With a maximum error of \\( 2 \\) 23-bit ulps in the rounded \\( t \\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\( 0.667 \\); the error in the rounded \\( t \\) can be up to about \\( 3 \\) 23-bit ulps before the final error is larger than \\( 0.667 \\) ulps.
*
* 4.  Perform one step of a Newton iteration to get \\( 53 \\) bits with an error of \\( < 0.667 \\) ulps.
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
*
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
*
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
*
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
*
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var sgn;
	var hx;
	var hw;
	var r;
	var s;
	var t;
	var w;
	if (
		x === 0.0 || // handles +-0
		isnan( x ) ||
		isinfinite( x )
	) {
		return x;
	}
	hx = getHighWord( x )>>>0;
	sgn = (hx & SIGN_MASK)>>>0;
	hx &= ABS_MASK;

	// Rough cbrt...
	if ( hx < FLOAT64_SMALLEST_NORMAL_HIGH_WORD ) {
		t = TWO_54 * x;
		hw = ( getHighWord( t )&ABS_MASK )>>>0;
		hw = ( ( (hw/3)>>>0 ) + B2 )>>>0;
		t = fromWords( sgn|hw, 0 );
	} else {
		t = 0.0;
		hw = ( ( (hx/3)>>>0 ) + B1 )>>>0;
		t = setHighWord( t, sgn|hw );
	}
	// New cbrt...
	r = ( t*t ) * ( t/x );
	t *= polyval( r );

	// Round `t` away from `0` to `23` bits...
	toWords.assign( t, WORDS, 1, 0 );
	if ( WORDS[ 1 ]&TWO_31 ) {
		// Perform manual addition, since we are split across two words...
		WORDS[ 0 ] += ONE;  // carry the one
		WORDS[ 1 ] &= ~TWO_31; // clear the bit
	} else {
		WORDS[ 1 ] |= TWO_31;
	}
	t = fromWords( WORDS[0]&HIGH_WORD_MASK, WORDS[1]&LOW_WORD_MASK );

	// Newton iteration...
	s = t * t; // `t*t` is exact
	r = x / s; // error `<= 0.5` ulps; `|r| < |t|`
	w = t + t; // `t+t` is exact
	r = ( r-t ) / ( w+r ); // `r-t` is exact; `w+r ~= 3*t`
	t += t * r; // error `<= 0.5 + 0.5/3 + eps`

	return t;
}


// EXPORTS //

module.exports = cbrt;

},{"./polyval_p.js":91,"@stdlib/constants/float64/high-word-abs-mask":73,"@stdlib/constants/float64/high-word-sign-mask":74,"@stdlib/constants/float64/smallest-normal":77,"@stdlib/math/base/assert/is-infinite":81,"@stdlib/math/base/assert/is-nan":83,"@stdlib/number/float64/base/from-words":112,"@stdlib/number/float64/base/get-high-word":116,"@stdlib/number/float64/base/set-high-word":119,"@stdlib/number/float64/base/to-words":125}],91:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.87595182427177;
	}
	return 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],92:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the reciprocal cube root of a single-precision floating-point number.
*
* @module @stdlib/math/base/special/rcbrtf
*
* @example
* var rcbrtf = require( '@stdlib/math/base/special/rcbrtf' );
*
* var v = rcbrtf( 8.0 );
* // returns 0.5
*
* v = rcbrtf( 1000.0 );
* // returns ~0.1
*
* v = rcbrtf( 0.0 );
* // returns 0.0
*
* v = rcbrtf( Infinity );
* // returns 0.0
*
* v = rcbrtf( -8.0 );
* // returns -0.5
*
* v = rcbrtf( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":93}],93:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var cbrt = require( '@stdlib/math/base/special/cbrt' );


// MAIN //

/**
* Compute the reciprocal cube root of a single-precision floating-point number.
*
* @param {number} x - input value
* @returns {number} reciprocal cube root
*
* @example
* var v = rcbrtf( 8.0 );
* // returns 0.5
*
* @example
* var v = rcbrtf( 1000.0 );
* // returns ~0.1
*
* @example
* var v = rcbrtf( 0.0 );
* // returns Infinity
*
* @example
* var v = rcbrtf( Infinity );
* // returns 0.0
*
* @example
* var v = rcbrtf( -8.0 );
* // returns -0.5
*
* @example
* var v = rcbrtf( NaN );
* // returns NaN
*/
function rcbrtf( x ) {
	// As the cube root is a fundamental numerical operation, compute in extend precision in order to avoid precision loss:
	return float64ToFloat32( 1.0 / cbrt( float64ToFloat32( x ) ) );
}


// EXPORTS //

module.exports = rcbrtf;

},{"@stdlib/math/base/special/cbrt":89,"@stdlib/number/float64/base/to-float32":121}],94:[function(require,module,exports){
module.exports={"expected":[-2.1544346756396299e-7,-3.688930904619601e-9,-2.9279087717118372e-9,-2.557764662118514e-9,-2.3238837184623296e-9,-2.1573027434175883e-9,-2.0300997320881377e-9,-1.9284207101839173e-9,-1.8444681566756207e-9,-1.7734556194802418e-9,-1.7122525864224897e-9,-1.6587093158559494e-9,-1.6112914323943205e-9,-1.5688691744716972e-9,-1.5305887344723155e-9,-1.4957905025356277e-9,-1.4639554590861106e-9,-1.4346684853210782e-9,-1.4075928028206747e-9,-1.3824517983339566e-9,-1.359015904309593e-9,-1.3370924769415537e-9,-1.3165185303363012e-9,-1.2971551667788504e-9,-1.2788829560949775e-9,-1.2615986170176062e-9,-1.245212377678376e-9,-1.2296456029632147e-9,-1.2148291371857152e-9,-1.200701946982165e-9,-1.1872097819170477e-9,-1.1743043149948163e-9,-1.161942307559703e-9,-1.1500849125957994e-9,-1.1386971727636636e-9,-1.1277475113655025e-9,-1.1172071862873628e-9,-1.1070501838365859e-9,-1.0972527907895364e-9,-1.08779323341652e-9,-1.0786516713666103e-9,-1.0698098890989257e-9,-1.0612510334361946e-9,-1.052959661667521e-9,-1.044921508639668e-9,-1.0371232872547755e-9,-1.0295527657899466e-9,-1.0221985850965823e-9,-1.015050101034773e-9,-1.0080974769451639e-9,-1.0013315353615232e-9,-9.94743629459376e-10,-9.883257425923084e-10,-9.820703646270627e-10,-9.759703841613555e-10,-9.700191904126986e-10,-9.642105676834193e-10,-9.58538602911124e-10,-9.52997787157259e-10,-9.475829238055382e-10,-9.42289047751797e-10,-9.37111543869382e-10,-9.320459710380574e-10,-9.270881982452975e-10,-9.222342206733149e-10,-9.174803635856232e-10,-9.128230342071294e-10,-9.082588204574726e-10,-9.037845777798489e-10,-8.993972157973668e-10,-8.950937929480591e-10,-8.908716002606735e-10,-8.867279618018499e-10,-8.826603252462052e-10,-8.786663425232714e-10,-8.747436824168682e-10,-8.708901171871763e-10,-8.671036001063233e-10,-8.633820888584714e-10,-8.597236283771704e-10,-8.561264253438305e-10,-8.525886812588548e-10,-8.491086716808086e-10,-8.456848177952733e-10,-8.423155282015876e-10,-8.389992747492652e-10,-8.357346613028348e-10,-8.325202734277194e-10,-8.293547510194035e-10,-8.262368543982412e-10,-8.231653211903371e-10,-8.201389359397642e-10,-8.171565936694486e-10,-8.14217163344866e-10,-8.1131955465136e-10,-8.084627791554243e-10,-8.056458198151063e-10,-8.028676950946395e-10,-8.001275178562327e-10,-7.974243704446626e-10,-7.947573663009071e-10,-7.921257067089373e-10,-7.895285610356015e-10,-7.869651259943129e-10,-7.844346803649687e-10,-7.819364700158277e-10,-7.794697649578964e-10,-7.770339121494263e-10,-7.746282249655312e-10,-7.722520381739624e-10,-7.699047589289189e-10,-7.675857603878187e-10,-7.652944347297573e-10,-7.630302424367899e-10,-7.607926097864854e-10,-7.585809963146355e-10,-7.563948610305068e-10,-7.542337264299799e-10,-7.520970807772574e-10,-7.499844269797129e-10,-7.47895328220122e-10,-7.458293135746967e-10,-7.437859252749004e-10,-7.417647629105492e-10,-7.39765392186361e-10,-7.377874052335007e-10,-7.358303905809438e-10,-7.338939763511542e-10,-7.319778142718984e-10,-7.300814808050171e-10,-7.282046471579921e-10,-7.263469924981261e-10,-7.245081223806005e-10,-7.226877335974083e-10,-7.208855300963105e-10,-7.191011438402594e-10,-7.173342947601836e-10,-7.155847092330377e-10,-7.138520432470049e-10,-7.12136037705587e-10,-7.104364393301855e-10,-7.087529260147289e-10,-7.070852577111932e-10,-7.054331996321751e-10,-7.037964496869371e-10,-7.021747851626835e-10,-7.005679881116396e-10,-6.989757747680797e-10,-6.973979382252457e-10,-6.958342758996506e-10,-6.942845208355365e-10,-6.927484805641094e-10,-6.912259665452394e-10,-6.89716727272062e-10,-6.882205834870953e-10,-6.867373595082914e-10,-6.852668180522194e-10,-6.838087919705127e-10,-6.823631173734152e-10,-6.809295700952229e-10,-6.795079941042854e-10,-6.780982363428516e-10,-6.767000847632431e-10,-6.753133935552283e-10,-6.739380196261479e-10,-6.725737621407111e-10,-6.71220484700876e-10,-6.698780533949932e-10,-6.685462777781749e-10,-6.672250301317985e-10,-6.659141850147836e-10,-6.646135616252196e-10,-6.633230402592034e-10,-6.620425033013868e-10,-6.607717789120074e-10,-6.59510754797906e-10,-6.582593205831968e-10,-6.570173127690428e-10,-6.55784625923332e-10,-6.545611563757592e-10,-6.53346748400641e-10,-6.521413029258302e-10,-6.509447224996672e-10,-6.497568586498787e-10,-6.485776182068167e-10,-6.474069094926823e-10,-6.462445908121017e-10,-6.450905744796659e-10,-6.439447741845637e-10,-6.428070545707932e-10,-6.416773330542273e-10,-6.405555283183232e-10,-6.394415109441412e-10,-6.383352030977168e-10,-6.372365281148802e-10,-6.361453621433083e-10,-6.350616317768441e-10,-6.339852646896555e-10,-6.329161422544682e-10,-6.318541951966031e-10,-6.307993552397525e-10,-6.297515086663376e-10,-6.287105900604103e-10,-6.276765349292419e-10,-6.266492341734263e-10,-6.256286259844025e-10,-6.246146494078386e-10,-6.236071996926751e-10,-6.226062184058448e-10,-6.216116479051095e-10,-6.206233875377127e-10,-6.196413820318893e-10,-6.186655768483818e-10,-6.176958752007536e-10,-6.167322247804824e-10,-6.157745739578506e-10,-6.148228295972717e-10,-6.138769421701257e-10,-6.129368627771024e-10,-6.120025017331111e-10,-6.110738121195444e-10,-6.101507476014435e-10,-6.092332217577169e-10,-6.083211901221806e-10,-6.074146087701419e-10,-6.065133943707265e-10,-6.056175047638552e-10,-6.047268982919803e-10,-6.038414945523495e-10,-6.029612665589738e-10,-6.020861357764687e-10,-6.012160635907797e-10,-6.003510118318355e-10,-5.994909046456795e-10,-5.986357053824227e-10,-5.977853778044698e-10,-5.96939848604015e-10,-5.96099082982967e-10,-5.952630465261608e-10,-5.94431668345316e-10,-5.936049153893617e-10,-5.927827549629178e-10,-5.919651184785968e-10,-5.911519745345666e-10,-5.903432920594074e-10,-5.895390046553845e-10,-5.887390824785739e-10,-5.879434959919893e-10,-5.871521808831487e-10,-5.863651087806651e-10,-5.855822515982736e-10,-5.848035355037809e-10,-5.840289680391807e-10,-5.832584879698883e-10,-5.824920350464736e-10,-5.81729617586275e-10,-5.809711761962974e-10,-5.802166524304761e-10,-5.794660553261925e-10,-5.787193272485441e-10,-5.779764114733641e-10,-5.772373177065823e-10,-5.765019899927317e-10,-5.757703732527822e-10,-5.750424778132351e-10,-5.743182493239056e-10,-5.7359763427852e-10,-5.72880643579428e-10,-5.721672244117682e-10,-5.71457324773724e-10,-5.707509561017818e-10,-5.700480670503558e-10,-5.69348607057591e-10,-5.686525880551896e-10,-5.679599601044411e-10,-5.672706740225077e-10,-5.665847421999722e-10,-5.659021160460047e-10,-5.652227476991571e-10,-5.645466499749551e-10,-5.638737755746393e-10,-5.63204077903621e-10,-5.625375701706601e-10,-5.618742063162314e-10,-5.612139409609768e-10,-5.605567876772473e-10,-5.599027015947039e-10,-5.592516385003017e-10,-5.58603612302264e-10,-5.579585792719966e-10,-5.573164963163941e-10,-5.566773776536203e-10,-5.560411806518309e-10,-5.554078632938683e-10,-5.547774400835684e-10,-5.541498694431357e-10,-5.535251103896042e-10,-5.529031776897639e-10,-5.522840307793178e-10,-5.51667629669835e-10,-5.510539893697841e-10,-5.504430702898396e-10,-5.498348333984195e-10,-5.492292939257413e-10,-5.486264132208242e-10,-5.480261709212737e-10,-5.474285292158675e-10,-5.468335036016436e-10,-5.462410566248422e-10,-5.456511513501747e-10,-5.450638034546627e-10,-5.44478976344196e-10,-5.43896633927497e-10,-5.433167920455094e-10,-5.42739414932706e-10,-5.421644673114112e-10,-5.415919651714296e-10,-5.410218735462119e-10,-5.404541579427053e-10,-5.398888344854468e-10,-5.393258689786407e-10,-5.387652276862241e-10,-5.382069268542117e-10,-5.376509330306387e-10,-5.370972132100709e-10,-5.365457837475626e-10,-5.359966119092874e-10,-5.354496653952778e-10,-5.349049606579562e-10,-5.343624656571019e-10,-5.338221487741873e-10,-5.332840265480469e-10,-5.327480676086316e-10,-5.322142409958989e-10,-5.31682563324811e-10,-5.311530038730939e-10,-5.306255323172494e-10,-5.301001653387122e-10,-5.295768728415699e-10,-5.290556251178874e-10,-5.285364389065069e-10,-5.280192847173932e-10,-5.275041334381028e-10,-5.269910018563738e-10,-5.264798610684452e-10,-5.259706825381532e-10,-5.254634830941407e-10,-5.249582344001526e-10,-5.244549084779095e-10,-5.239535221894554e-10,-5.234540477480637e-10,-5.229564577157188e-10,-5.224607689808195e-10,-5.219669542889424e-10,-5.21474986725449e-10,-5.209848831984767e-10,-5.204966169693928e-10,-5.200101616307457e-10,-5.195255341042006e-10,-5.190427081510797e-10,-5.185616578555901e-10,-5.180824001470942e-10,-5.176049092716757e-10,-5.171291597903021e-10,-5.166551686345597e-10,-5.161829105207117e-10,-5.157123604721851e-10,-5.15243535417653e-10,-5.147764105295581e-10,-5.143109612800549e-10,-5.138472045900824e-10,-5.133851160748154e-10,-5.129246716419445e-10,-5.124658882001527e-10,-5.120087417944251e-10,-5.115532087553129e-10,-5.110993059750005e-10,-5.106470099158637e-10,-5.101962973191285e-10,-5.097471850565029e-10,-5.092996499958107e-10,-5.088536692772342e-10,-5.084092597482759e-10,-5.079663986707201e-10,-5.075250635724323e-10,-5.070852712732154e-10,-5.066469994177592e-10,-5.062102259107651e-10,-5.05774967541062e-10,-5.053412023256058e-10,-5.049089085354894e-10,-5.044781029255031e-10,-5.04048763874623e-10,-5.036208700102773e-10,-5.031944380503482e-10,-5.027694467259634e-10,-5.023458750111987e-10,-5.019237395843449e-10,-5.015030195191717e-10,-5.010836941270675e-10,-5.006657800442225e-10,-5.002492566778834e-10,-4.998341036677524e-10,-4.994203376055753e-10,-4.990079382232385e-10,-4.985968854800814e-10,-4.981871959212164e-10,-4.977788495946476e-10,-4.973718267709818e-10,-4.969661439466565e-10,-4.965617814775708e-10,-4.961587199375238e-10,-4.957569757723755e-10,-4.953565296379839e-10,-4.949573624035477e-10,-4.945594904625766e-10,-4.941628947632276e-10,-4.937675564625747e-10,-4.933734919001284e-10,-4.929806823089478e-10,-4.925891091267164e-10,-4.921987886374132e-10,-4.918097023518543e-10,-4.914218319813136e-10,-4.910351937528171e-10,-4.906497694480342e-10,-4.90265541045047e-10,-4.898825247126107e-10,-4.895007024965759e-10,-4.891200566352779e-10,-4.88740603237981e-10,-4.883623246082672e-10,-4.879852032383871e-10,-4.876092551769877e-10,-4.872344629791448e-10,-4.868608093848954e-10,-4.864883103812301e-10,-4.861169487686852e-10,-4.857467075291553e-10,-4.853776025870184e-10,-4.850096169824343e-10,-4.84642733933418e-10,-4.842769693008575e-10,-4.839123063588862e-10,-4.835487285560876e-10,-4.831862516890558e-10,-4.828248592604293e-10,-4.824645349439844e-10,-4.821052944712878e-10,-4.817471215681873e-10,-4.813900001284474e-10,-4.81033945817939e-10,-4.80678942580591e-10,-4.803249745251139e-10,-4.799720572510779e-10,-4.796201749155242e-10,-4.792693118372247e-10,-4.789194835489025e-10,-4.785706744158965e-10,-4.78222868962306e-10,-4.778760826535173e-10,-4.775303000584996e-10,-4.771855059020919e-10,-4.768417155819047e-10,-4.764989138660143e-10,-4.761570856755501e-10,-4.758162463399596e-10,-4.754763808220379e-10,-4.751374742348914e-10,-4.747995418394629e-10,-4.744625687890114e-10,-4.74126540384435e-10,-4.737914718178756e-10,-4.734573484289276e-10,-4.731241557022204e-10,-4.727919087608405e-10,-4.724605931267115e-10,-4.721301944642536e-10,-4.718007278272833e-10,-4.714721789161642e-10,-4.711445335712835e-10,-4.708178067770095e-10,-4.704919844083715e-10,-4.701670524780096e-10,-4.698430259007023e-10,-4.695198907224781e-10,-4.691976331246247e-10,-4.688762679522216e-10,-4.685557814187367e-10,-4.682361598706021e-10,-4.679174180831213e-10,-4.675995424337427e-10,-4.672825194306404e-10,-4.669663637792943e-10,-4.666510620177724e-10,-4.663366008126842e-10,-4.660229947996663e-10,-4.657102306741404e-10,-4.653982952579377e-10,-4.650872031168586e-10,-4.6477694110050325e-10,-4.644675053401497e-10,-4.641588919927816e-10],"x":[-1.0e20,-1.9920418525896414e25,-3.984073705179283e25,-5.976105557768924e25,-7.968137410358566e25,-9.960169262948207e25,-1.1952201115537847e26,-1.394423296812749e26,-1.593626482071713e26,-1.7928296673306773e26,-1.9920328525896412e26,-2.1912360378486055e26,-2.3904392231075697e26,-2.5896424083665336e26,-2.788845593625498e26,-2.988048778884462e26,-3.187251964143426e26,-3.3864551494023906e26,-3.5856583346613545e26,-3.7848615199203184e26,-3.984064705179283e26,-4.183267890438247e26,-4.382471075697211e26,-4.5816742609561754e26,-4.780877446215139e26,-4.980080631474103e26,-5.179283816733068e26,-5.378487001992032e26,-5.5776901872509956e26,-5.77689337250996e26,-5.976096557768924e26,-6.175299743027888e26,-6.374502928286853e26,-6.573706113545816e26,-6.77290929880478e26,-6.972112484063744e26,-7.171315669322708e26,-7.370518854581673e26,-7.569722039840637e26,-7.768925225099601e26,-7.968128410358565e26,-8.167331595617529e26,-8.366534780876493e26,-8.565737966135458e26,-8.764941151394422e26,-8.964144336653386e26,-9.16334752191235e26,-9.362550707171314e26,-9.561753892430279e26,-9.760957077689243e26,-9.960160262948207e26,-1.0159363448207171e27,-1.0358566633466135e27,-1.0557769818725099e27,-1.0756973003984064e27,-1.0956176189243028e27,-1.1155379374501992e27,-1.1354582559760956e27,-1.155378574501992e27,-1.1752988930278883e27,-1.1952192115537849e27,-1.2151395300796813e27,-1.2350598486055777e27,-1.2549801671314742e27,-1.2749004856573704e27,-1.294820804183267e27,-1.3147411227091632e27,-1.3346614412350597e27,-1.354581759760956e27,-1.3745020782868525e27,-1.394422396812749e27,-1.4143427153386453e27,-1.4342630338645418e27,-1.454183352390438e27,-1.4741036709163346e27,-1.4940239894422311e27,-1.5139443079681274e27,-1.533864626494024e27,-1.5537849450199202e27,-1.5737052635458167e27,-1.593625582071713e27,-1.6135459005976095e27,-1.633466219123506e27,-1.6533865376494023e27,-1.6733068561752988e27,-1.693227174701195e27,-1.7131474932270916e27,-1.733067811752988e27,-1.7529881302788844e27,-1.772908448804781e27,-1.792828767330677e27,-1.8127490858565737e27,-1.83266940438247e27,-1.8525897229083664e27,-1.872510041434263e27,-1.8924303599601592e27,-1.9123506784860558e27,-1.932270997011952e27,-1.9521913155378485e27,-1.972111634063745e27,-1.9920319525896413e27,-2.0119522711155378e27,-2.031872589641434e27,-2.0517929081673306e27,-2.071713226693227e27,-2.0916335452191234e27,-2.11155386374502e27,-2.1314741822709162e27,-2.1513945007968127e27,-2.171314819322709e27,-2.1912351378486055e27,-2.211155456374502e27,-2.2310757749003983e27,-2.2509960934262948e27,-2.270916411952191e27,-2.2908367304780876e27,-2.3107570490039838e27,-2.3306773675298804e27,-2.350597686055777e27,-2.3705180045816731e27,-2.3904383231075697e27,-2.410358641633466e27,-2.4302789601593625e27,-2.450199278685259e27,-2.4701195972111552e27,-2.4900399157370515e27,-2.509960234262948e27,-2.5298805527888445e27,-2.549800871314741e27,-2.5697211898406376e27,-2.5896415083665336e27,-2.60956182689243e27,-2.6294821454183266e27,-2.649402463944223e27,-2.669322782470119e27,-2.6892431009960157e27,-2.709163419521912e27,-2.7290837380478087e27,-2.749004056573705e27,-2.768924375099601e27,-2.788844693625498e27,-2.8087650121513943e27,-2.828685330677291e27,-2.8486056492031873e27,-2.8685259677290833e27,-2.88844628625498e27,-2.9083666047808764e27,-2.928286923306773e27,-2.9482072418326694e27,-2.9681275603585654e27,-2.988047878884462e27,-3.0079681974103585e27,-3.027888515936255e27,-3.0478088344621515e27,-3.0677291529880475e27,-3.087649471513944e27,-3.1075697900398405e27,-3.127490108565737e27,-3.1474104270916336e27,-3.1673307456175296e27,-3.187251064143426e27,-3.2071713826693226e27,-3.227091701195219e27,-3.247012019721115e27,-3.2669323382470117e27,-3.286852656772908e27,-3.306772975298805e27,-3.326693293824701e27,-3.346613612350597e27,-3.366533930876494e27,-3.3864542494023903e27,-3.406374567928287e27,-3.4262948864541833e27,-3.4462152049800793e27,-3.466135523505976e27,-3.4860558420318724e27,-3.505976160557769e27,-3.5258964790836654e27,-3.5458167976095614e27,-3.565737116135458e27,-3.5856574346613545e27,-3.605577753187251e27,-3.6254980717131475e27,-3.6454183902390435e27,-3.66533870876494e27,-3.6852590272908366e27,-3.705179345816733e27,-3.725099664342629e27,-3.7450199828685256e27,-3.764940301394422e27,-3.7848606199203186e27,-3.804780938446215e27,-3.824701256972111e27,-3.8446215754980077e27,-3.864541894023904e27,-3.884462212549801e27,-3.904382531075697e27,-3.924302849601593e27,-3.94422316812749e27,-3.9641434866533863e27,-3.984063805179283e27,-4.0039841237051794e27,-4.0239044422310753e27,-4.043824760756972e27,-4.0637450792828684e27,-4.083665397808765e27,-4.1035857163346614e27,-4.1235060348605574e27,-4.143426353386454e27,-4.1633466719123505e27,-4.183266990438247e27,-4.203187308964143e27,-4.2231076274900395e27,-4.243027946015936e27,-4.2629482645418326e27,-4.282868583067729e27,-4.302788901593625e27,-4.3227092201195216e27,-4.342629538645418e27,-4.3625498571713147e27,-4.382470175697211e27,-4.402390494223107e27,-4.4223108127490037e27,-4.4422311312749e27,-4.462151449800797e27,-4.482071768326693e27,-4.501992086852589e27,-4.521912405378486e27,-4.5418327239043823e27,-4.561753042430279e27,-4.5816733609561754e27,-4.6015936794820713e27,-4.621513998007968e27,-4.6414343165338644e27,-4.661354635059761e27,-4.6812749535856574e27,-4.7011952721115534e27,-4.72111559063745e27,-4.7410359091633465e27,-4.760956227689243e27,-4.780876546215139e27,-4.8007968647410355e27,-4.820717183266932e27,-4.8406375017928286e27,-4.860557820318725e27,-4.880478138844621e27,-4.9003984573705176e27,-4.920318775896414e27,-4.9402390944223107e27,-4.960159412948207e27,-4.980079731474103e27,-5.00000005e27,-5.019920368525896e27,-5.039840687051793e27,-5.059761005577689e27,-5.079681324103586e27,-5.099601642629482e27,-5.119521961155378e27,-5.139442279681274e27,-5.159362598207171e27,-5.179282916733067e27,-5.199203235258964e27,-5.21912355378486e27,-5.239043872310757e27,-5.258964190836653e27,-5.27888450936255e27,-5.298804827888447e27,-5.318725146414342e27,-5.338645464940238e27,-5.358565783466135e27,-5.378486101992032e27,-5.398406420517928e27,-5.418326739043825e27,-5.438247057569721e27,-5.458167376095618e27,-5.478087694621514e27,-5.49800801314741e27,-5.517928331673306e27,-5.537848650199203e27,-5.557768968725099e27,-5.577689287250996e27,-5.597609605776892e27,-5.617529924302789e27,-5.637450242828685e27,-5.657370561354582e27,-5.677290879880478e27,-5.697211198406374e27,-5.71713151693227e27,-5.737051835458167e27,-5.756972153984063e27,-5.77689247250996e27,-5.796812791035856e27,-5.816733109561753e27,-5.83665342808765e27,-5.856573746613546e27,-5.876494065139443e27,-5.896414383665338e27,-5.916334702191234e27,-5.936255020717131e27,-5.956175339243028e27,-5.976095657768924e27,-5.996015976294821e27,-6.015936294820717e27,-6.035856613346614e27,-6.05577693187251e27,-6.075697250398406e27,-6.095617568924302e27,-6.115537887450199e27,-6.135458205976095e27,-6.155378524501992e27,-6.175298843027888e27,-6.195219161553785e27,-6.215139480079681e27,-6.235059798605578e27,-6.254980117131474e27,-6.27490043565737e27,-6.294820754183266e27,-6.314741072709163e27,-6.334661391235059e27,-6.354581709760956e27,-6.374502028286852e27,-6.394422346812749e27,-6.414342665338645e27,-6.434262983864542e27,-6.454183302390439e27,-6.474103620916334e27,-6.49402393944223e27,-6.513944257968127e27,-6.533864576494024e27,-6.55378489501992e27,-6.573705213545817e27,-6.593625532071713e27,-6.61354585059761e27,-6.633466169123506e27,-6.653386487649402e27,-6.673306806175298e27,-6.693227124701195e27,-6.713147443227091e27,-6.733067761752988e27,-6.752988080278884e27,-6.772908398804781e27,-6.792828717330677e27,-6.812749035856574e27,-6.83266935438247e27,-6.852589672908366e27,-6.872509991434262e27,-6.892430309960159e27,-6.912350628486055e27,-6.932270947011952e27,-6.952191265537848e27,-6.972111584063745e27,-6.992031902589641e27,-7.011952221115538e27,-7.031872539641433e27,-7.05179285816733e27,-7.071713176693226e27,-7.091633495219123e27,-7.11155381374502e27,-7.131474132270916e27,-7.151394450796813e27,-7.171314769322709e27,-7.191235087848606e27,-7.211155406374502e27,-7.231075724900398e27,-7.250996043426294e27,-7.270916361952191e27,-7.290836680478087e27,-7.310756999003984e27,-7.33067731752988e27,-7.350597636055777e27,-7.370517954581673e27,-7.39043827310757e27,-7.410358591633466e27,-7.430278910159362e27,-7.450199228685258e27,-7.470119547211155e27,-7.490039865737051e27,-7.509960184262948e27,-7.529880502788844e27,-7.549800821314741e27,-7.569721139840637e27,-7.589641458366534e27,-7.609561776892429e27,-7.629482095418326e27,-7.649402413944222e27,-7.669322732470119e27,-7.689243050996016e27,-7.709163369521912e27,-7.729083688047809e27,-7.749004006573705e27,-7.768924325099602e27,-7.788844643625498e27,-7.808764962151394e27,-7.82868528067729e27,-7.848605599203187e27,-7.868525917729083e27,-7.88844623625498e27,-7.908366554780876e27,-7.928286873306773e27,-7.948207191832669e27,-7.968127510358566e27,-7.988047828884461e27,-8.007968147410358e27,-8.027888465936254e27,-8.047808784462151e27,-8.067729102988047e27,-8.087649421513944e27,-8.10756974003984e27,-8.127490058565737e27,-8.147410377091633e27,-8.16733069561753e27,-8.187251014143425e27,-8.207171332669322e27,-8.227091651195219e27,-8.247011969721115e27,-8.266932288247012e27,-8.286852606772908e27,-8.306772925298805e27,-8.326693243824701e27,-8.346613562350598e27,-8.366533880876494e27,-8.38645419940239e27,-8.406374517928286e27,-8.426294836454183e27,-8.446215154980079e27,-8.466135473505976e27,-8.486055792031872e27,-8.505976110557769e27,-8.525896429083665e27,-8.545816747609562e27,-8.565737066135457e27,-8.585657384661354e27,-8.60557770318725e27,-8.625498021713147e27,-8.645418340239043e27,-8.66533865876494e27,-8.685258977290836e27,-8.705179295816733e27,-8.72509961434263e27,-8.745019932868526e27,-8.764940251394421e27,-8.784860569920318e27,-8.804780888446215e27,-8.824701206972111e27,-8.844621525498008e27,-8.864541844023904e27,-8.884462162549801e27,-8.904382481075697e27,-8.924302799601594e27,-8.94422311812749e27,-8.964143436653386e27,-8.984063755179282e27,-9.003984073705179e27,-9.023904392231075e27,-9.043824710756972e27,-9.063745029282868e27,-9.083665347808765e27,-9.103585666334661e27,-9.123505984860558e27,-9.143426303386453e27,-9.16334662191235e27,-9.183266940438246e27,-9.203187258964143e27,-9.223107577490039e27,-9.243027896015936e27,-9.262948214541832e27,-9.282868533067729e27,-9.302788851593626e27,-9.322709170119522e27,-9.342629488645417e27,-9.362549807171314e27,-9.38247012569721e27,-9.402390444223107e27,-9.422310762749004e27,-9.4422310812749e27,-9.462151399800797e27,-9.482071718326693e27,-9.50199203685259e27,-9.521912355378485e27,-9.541832673904382e27,-9.561752992430278e27,-9.581673310956175e27,-9.601593629482071e27,-9.621513948007968e27,-9.641434266533864e27,-9.661354585059761e27,-9.681274903585657e27,-9.701195222111554e27,-9.721115540637449e27,-9.741035859163346e27,-9.760956177689242e27,-9.780876496215139e27,-9.800796814741035e27,-9.820717133266932e27,-9.840637451792828e27,-9.860557770318725e27,-9.880478088844622e27,-9.900398407370518e27,-9.920318725896413e27,-9.94023904442231e27,-9.960159362948207e27,-9.980079681474103e27,-1.0e28]}

},{}],95:[function(require,module,exports){
module.exports={"expected":[9.99999994984178e-11,3.684461234109689e-12,2.9243832043032847e-12,2.5546910868122338e-12,2.3210941647998486e-12,2.1547147392769254e-12,2.0276652953477893e-12,1.9261089490529303e-12,1.8422574999732516e-12,1.7713304809716305e-12,1.710201045850526e-12,1.6567221361428974e-12,1.609361270256481e-12,1.56699000256992e-12,1.5287555251264773e-12,1.4939990631897355e-12,1.4622022557547335e-12,1.4329504234061592e-12,1.4059072241551715e-12,1.38079642270231e-12,1.3573886351448598e-12,1.335491497661448e-12,1.3149422178143359e-12,1.2956020702184074e-12,1.2773517655409662e-12,1.2600881777777562e-12,1.2437215791303917e-12,1.2281734618115072e-12,1.213374779956669e-12,1.1992645187769004e-12,1.1857885210551867e-12,1.1728984928239056e-12,1.160551298347607e-12,1.148708132628841e-12,1.1373340792182195e-12,1.1263974934667814e-12,1.1158697946494295e-12,1.1057249984529448e-12,1.0959393041536809e-12,1.086491114307572e-12,1.0773605006356148e-12,1.0685293097826817e-12,1.0599807042066695e-12,1.0516992943423969e-12,1.043670737256352e-12,1.035881854550685e-12,1.0283204284958743e-12,1.0209750268410305e-12,1.0138351308959254e-12,1.0068908316292436e-12,1.0001329929930266e-12,9.935529750257781e-13,9.871427975363586e-13,9.808948857549636e-13,9.748022087971412e-13,9.688581636314687e-13,9.630564736803159e-13,9.573913219606252e-13,9.518571394988481e-13,9.46448760004725e-13,9.411612215214063e-13,9.359899171899e-13,9.309304085321747e-13,9.259785721050557e-13,9.21130423094446e-13,9.163822391484347e-13,9.117304862984972e-13,9.071717530896214e-13,9.02702867330475e-13,8.983207582109216e-13,8.940224854889183e-13,8.898053478886361e-13,8.856666704356602e-13,8.816039017780612e-13,8.776147008646137e-13,8.736967371489751e-13,8.698478138233998e-13,8.660657998811496e-13,8.623487441582619e-13,8.586946905331459e-13,8.551017937065686e-13,8.515682568582261e-13,8.480924391542254e-13,8.446726839423543e-13,8.413074012281029e-13,8.379951423727682e-13,8.347344369591503e-13,8.315238969790893e-13,8.283621623323106e-13,8.252479980973882e-13,8.221801417626769e-13,8.191574015567754e-13,8.161786056081066e-13,8.132426940075344e-13,8.103485752516922e-13,8.074951967596448e-13,8.04681609525947e-13,8.019068308291396e-13,7.991699334870759e-13,7.964700003867947e-13,7.938062084264434e-13,7.911776988387096e-13,7.885836414258751e-13,7.860232938234876e-13,7.834958770485637e-13,7.810006569637715e-13,7.78536903186512e-13,7.761039660079536e-13,7.737011583415646e-13,7.713278332260725e-13,7.689833448954886e-13,7.666671221087667e-13,7.643785559301409e-13,7.621170557640072e-13,7.598821014760959e-13,7.576731352181988e-13,7.55489632730142e-13,7.533310677197655e-13,7.511969795475322e-13,7.49086870053613e-13,7.470002552358603e-13,7.449367135284471e-13,7.428957861169339e-13,7.408770428338502e-13,7.388800493638141e-13,7.369044299796997e-13,7.349497721932407e-13,7.330156898662353e-13,7.311017918521802e-13,7.292077421739425e-13,7.273331686858778e-13,7.254777089645974e-13,7.236410534333541e-13,7.218228568408917e-13,7.200227827625596e-13,7.182405595347003e-13,7.164758241189285e-13,7.147283058459852e-13,7.129977401959878e-13,7.112837875009733e-13,7.095861973193995e-13,7.079047247599628e-13,7.062390514826345e-13,7.045889714631633e-13,7.029541795547238e-13,7.013344550274738e-13,6.997295818484744e-13,6.981392732676206e-13,6.96563324295021e-13,6.950015341993985e-13,6.93453633109738e-13,6.919194304118847e-13,6.903987393589033e-13,6.888913055953126e-13,6.873969752452864e-13,6.859155036071751e-13,6.844467213702912e-13,6.829904625278143e-13,6.81546495914707e-13,6.801146636030291e-13,6.786948106763833e-13,6.772867184705058e-13,6.758902395166911e-13,6.745052290948466e-13,6.731314801035978e-13,6.717688762121674e-13,6.704172175501051e-13,6.690763722666284e-13,6.67746210877697e-13,6.664265437013241e-13,6.651172472934682e-13,6.638182003769333e-13,6.625292227319197e-13,6.612501986795952e-13,6.599810145270604e-13,6.587214988546723e-13,6.574715431656088e-13,6.562310407849989e-13,6.549998284888696e-13,6.537778237305724e-13,6.525648684397999e-13,6.513608649329713e-13,6.501657171079729e-13,6.489792741948573e-13,6.47801444377497e-13,6.466321372941511e-13,6.45471208997185e-13,6.443185731212269e-13,6.431741446395081e-13,6.420377859877113e-13,6.40909433693716e-13,6.397889542224158e-13,6.386762694610653e-13,6.375713024646184e-13,6.364739254263507e-13,6.353840647359755e-13,6.343016478600197e-13,6.332265523679479e-13,6.321587088484487e-13,6.310980488838455e-13,6.300444550947228e-13,6.289978785249667e-13,6.27958204994239e-13,6.269253714800591e-13,6.258993158301055e-13,6.248799284270473e-13,6.238671497508339e-13,6.228609210855454e-13,6.218611371127066e-13,6.208677415898835e-13,6.198806790181054e-13,6.188998481328346e-13,6.179252111630068e-13,6.169566694193763e-13,6.15994171668381e-13,6.15037667329416e-13,6.140870613972747e-13,6.13142305396096e-13,6.122033514543441e-13,6.11270108049531e-13,6.103425292944169e-13,6.094205698612493e-13,6.085041415228329e-13,6.075932008237299e-13,6.066877048266143e-13,6.057875684249108e-13,6.048927645920768e-13,6.040032102107315e-13,6.031188655600203e-13,6.022396913751378e-13,6.013656073937789e-13,6.004965759611061e-13,5.996325598448045e-13,5.987734814921851e-13,5.979193051944516e-13,5.970699956343042e-13,5.962254778326175e-13,5.953857311891867e-13,5.945506823693227e-13,5.937202986630287e-13,5.928945477050909e-13,5.92073358526597e-13,5.912567000820671e-13,5.904445416454798e-13,5.89636814499359e-13,5.888334891698505e-13,5.880345364790616e-13,5.872398898536567e-13,5.864495337997425e-13,5.856634031170405e-13,5.848814707609844e-13,5.841037099474802e-13,5.833300574558285e-13,5.825604875939293e-13,5.817949749108548e-13,5.810334580745541e-13,5.802759126726875e-13,5.795223145161395e-13,5.787726040759247e-13,5.780267699439512e-13,5.772847537481951e-13,5.765465330599652e-13,5.758120856466121e-13,5.750813548074077e-13,5.743543192210327e-13,5.736309577473869e-13,5.729112266646153e-13,5.721950828831706e-13,5.714825064694328e-13,5.707734664410488e-13,5.700679321986394e-13,5.693658735196688e-13,5.686672826467837e-13,5.679720857966731e-13,5.672802760448434e-13,5.66591824617171e-13,5.659067030874694e-13,5.652249049362435e-13,5.645463591851629e-13,5.638710600880021e-13,5.631989805568496e-13,5.625300938255059e-13,5.618643734445339e-13,5.612018142331826e-13,5.605423483491723e-13,5.598859713204957e-13,5.592326579170985e-13,5.585823832023013e-13,5.579351430014598e-13,5.572908719109105e-13,5.566495664161472e-13,5.560112027105967e-13,5.553757572597637e-13,5.547432067972012e-13,5.541135482384476e-13,5.534867189156025e-13,5.528627163514931e-13,5.522415183130147e-13,5.51623102816036e-13,5.510074481217862e-13,5.50394552121833e-13,5.497843546946561e-13,5.491768542915551e-13,5.485720301203366e-13,5.479698616170436e-13,5.473703474086055e-13,5.467734293634703e-13,5.461791066322573e-13,5.455873595320475e-13,5.449981685924822e-13,5.444115145527884e-13,5.438273968384576e-13,5.432457595610327e-13,5.426666026302777e-13,5.420899075950173e-13,5.415156561995348e-13,5.409438484716589e-13,5.403744302809964e-13,5.398074021096669e-13,5.392427464573995e-13,5.38680446006409e-13,5.381204836189305e-13,5.375628599775043e-13,5.370075229389572e-13,5.364544736072184e-13,5.359036955407431e-13,5.353551724662732e-13,5.348089055605481e-13,5.342648442421145e-13,5.337229900839916e-13,5.331833274641017e-13,5.326458409178493e-13,5.321105151360625e-13,5.315773518329341e-13,5.310463021968591e-13,5.30517368310665e-13,5.299905354669474e-13,5.294657891039212e-13,5.289431313415981e-13,5.284225147627453e-13,5.279039418348466e-13,5.273873985601924e-13,5.268728710776367e-13,5.263603456608707e-13,5.258498248712862e-13,5.253412628756442e-13,5.248346625594381e-13,5.243300107189623e-13,5.238272942771056e-13,5.23326516128493e-13,5.228276316907363e-13,5.223306441646188e-13,5.218355409639077e-13,5.213423096213339e-13,5.208509377871335e-13,5.203614287182286e-13,5.198737392563597e-13,5.19387872944737e-13,5.189038178894728e-13,5.184215623072181e-13,5.179411097282498e-13,5.174624181213523e-13,5.169854912877922e-13,5.165103178732499e-13,5.160368866274787e-13,5.15565186403069e-13,5.150952210272218e-13,5.146269497545664e-13,5.141603766663069e-13,5.136954910143659e-13,5.132322821475839e-13,5.127707541169213e-13,5.123108671966699e-13,5.118526256786814e-13,5.11396019288294e-13,5.109410378422586e-13,5.104876712476835e-13,5.100359237982074e-13,5.095857569337174e-13,5.09137175174148e-13,5.086901687777864e-13,5.082447280882245e-13,5.07800857581633e-13,5.073585196239501e-13,5.069177189063486e-13,5.064784461040848e-13,5.060406919730096e-13,5.056044473486653e-13,5.051697169047328e-13,5.047364640676607e-13,5.043046937135308e-13,5.038743969878623e-13,5.034455651115326e-13,5.030181893799449e-13,5.0259227464288e-13,5.021677853355151e-13,5.017447264983791e-13,5.013230897168839e-13,5.009028666469755e-13,5.004840622702691e-13,5.000666418255142e-13,4.996506104760256e-13,4.992359601523156e-13,4.988226828516973e-13,4.984107706375681e-13,4.98000228633407e-13,4.975910230005944e-13,4.971831590341787e-13,4.967766290549056e-13,4.963714254461581e-13,4.959675534371344e-13,4.955649799253753e-13,4.95163710303765e-13,4.947637371996927e-13,4.943650532999568e-13,4.939676513501436e-13,4.935715366926054e-13,4.931766770714177e-13,4.927830779837754e-13,4.923907324043649e-13,4.91999633363674e-13,4.91609786287849e-13,4.912211595974233e-13,4.908337588664902e-13,4.904475773430643e-13,4.900626083281589e-13,4.896788451752463e-13,4.892962933994982e-13,4.88914922200457e-13,4.885347372334911e-13,4.881557320566457e-13,4.877779002778269e-13,4.874012474775564e-13,4.870257434787542e-13,4.866513939960837e-13,4.862781928319481e-13,4.859061338361693e-13,4.855352109055176e-13,4.851654296892241e-13,4.847967607290716e-13,4.844292098016146e-13,4.840627709868226e-13,4.83697438409345e-13,4.833332177682211e-13,4.829700801812453e-13,4.826080314694444e-13,4.822470659318637e-13,4.818871779100937e-13,4.815283617878572e-13,4.811706233157729e-13,4.80813934276731e-13,4.804583005373177e-13,4.801037166457649e-13,4.797501771904506e-13,4.793976879586886e-13,4.790462212669663e-13,4.786957830138461e-13,4.783463679444978e-13,4.779979708423645e-13,4.776505865288002e-13,4.773042208282373e-13,4.76958846674032e-13,4.766144699965327e-13,4.762710857652045e-13,4.759286889856779e-13,4.755872855080059e-13,4.752468487610367e-13,4.749073846965519e-13,4.745688884615068e-13,4.742313552373741e-13,4.738947802398245e-13,4.735591693438125e-13,4.732244965516596e-13,4.7289076783531e-13,4.725579785441139e-13,4.722261240600809e-13,4.718951997975823e-13,4.715652116506279e-13,4.712361341731589e-13,4.709079733517249e-13,4.705807247272338e-13,4.702543838715169e-13,4.699289566903686e-13,4.69604418181565e-13,4.692807743399383e-13,4.689580208582597e-13,4.686361534588632e-13,4.68315167893382e-13,4.679950700772466e-13,4.676758355227688e-13,4.673574702304437e-13,4.67039970066525e-13,4.667233309252927e-13,4.664075587267476e-13,4.660926293976234e-13,4.657785489398534e-13,4.654653133573801e-13,4.651529186809656e-13,4.648413609679574e-13,4.645306461400348e-13,4.642207506048473e-13,4.639116803624486e-13,4.63603431574243e-13,4.632960004270902e-13,4.629893928411459e-13,4.62683585611781e-13,4.623785847347172e-13,4.620743864964664e-13,4.617709872079233e-13,4.614683832041578e-13,4.611665804002858e-13,4.608655560420339e-13,4.605653161168892e-13,4.602658570545872e-13,4.599671753080323e-13,4.59669276785676e-13,4.593721390966636e-13,4.590757682192922e-13,4.587801606972095e-13,4.584853130962762e-13,4.581912220043809e-13,4.578978933192711e-13,4.576053050725982e-13,4.573134632290788e-13,4.570223644628983e-13,4.567320054693719e-13,4.564423921352526e-13,4.561535028334348e-13,4.558653435153645e-13,4.555779109591512e-13,4.552912019631807e-13,4.550052133459495e-13,4.54719941945901e-13,4.544353846212632e-13,4.54151538249888e-13,4.5386841765982897e-13,4.53585983861647e-13,4.533042517666381e-13,4.5302321832957426e-13,4.5274288052407146e-13,4.5246323534243884e-13,4.5218427979552875e-13,4.5190601091258856e-13,4.516284257411134e-13,4.51351521346701e-13,4.510752948129077e-13,4.507997606918109e-13,4.505248811585229e-13,4.502506708430357e-13,4.4997712689932606e-13,4.4970424649863027e-13,4.494320268293077e-13,4.4916046509670663e-13,4.4888955852303125e-13,4.486193043472092e-13,4.483496998247614e-13,4.4808074222767225e-13,4.478124458369826e-13,4.4754477393118774e-13,4.472777408643814e-13,4.4701134397313217e-13,4.4674558060984396e-13,4.464804481426336e-13,4.4621594395520943e-13,4.4595206544675203e-13,4.456888100317952e-13,4.4542617514010807e-13,4.451641582165791e-13,4.4490277327646437e-13,4.446419846450346e-13,4.443818064061528e-13,4.441222360640395e-13,4.4386327113746797e-13,4.4360490915965405e-13,4.433471476781473e-13,4.430899842547223e-13,4.428334164652725e-13,4.4257744189970325e-13,4.423220581618272e-13,4.4206727900659293e-13,4.418130697535632e-13,4.415594442222197e-13,4.4130640007097083e-13,4.4105393497162116e-13,4.408020466092714e-13,4.4055073268222036e-13,4.402999909018671e-13,4.4004981899261426e-13,4.3980021469177167e-13,4.3955117574946234e-13,4.3930271566595807e-13,4.390548007063689e-13,4.388074444317592e-13,4.3856064464256814e-13,4.3831439915158516e-13,4.380687057838598e-13,4.3782356237661305e-13,4.3757896677914793e-13,4.37334916852763e-13,4.370914104706647e-13,4.368484455178819e-13,4.366060352457346e-13,4.3636414681953325e-13,4.36122793547949e-13,4.35881973362453e-13,4.3564168420591983e-13,4.354019240325458e-13,4.351626908077675e-13,4.349239825081826e-13,4.3468579712146967e-13,4.3444813264630967e-13,4.342109870923078e-13,4.3397437346760356e-13,4.3373825979545396e-13,4.335026591381774e-13,4.3326756954830845e-13,4.3303298908892584e-13,4.3279891583357787e-13,4.325653478662096e-13,4.3233228328108953e-13,4.320997201827378e-13,4.3186765668585417e-13,4.316360909152476e-13,4.314050356416548e-13,4.3117445970684793e-13,4.3094437593281414e-13,4.307147824840997e-13,4.3048567753501393e-13,4.302570592695621e-13,4.3002892588137813e-13,4.298012755736586e-13,4.2957410655909716e-13,4.293474170598189e-13,4.2912120530731635e-13,4.288954838406775e-13,4.2867022228333753e-13,4.2844543322292567e-13,4.2822111492776717e-13,4.279972656752394e-13,4.277738837517106e-13,4.275509674524789e-13,4.273285150817119e-13,4.271065249523867e-13,4.2688499538623055e-13,4.2666392471366204e-13,4.264433252478237e-13,4.262231673593248e-13,4.260034634073389e-13,4.2578421175646993e-13,4.2556541077972545e-13,4.253470588584609e-13,4.2512915438232407e-13,4.2491169574920004e-13,4.2469468136515603e-13,4.2447810964438774e-13,4.242619790091652e-13,4.2404630155231795e-13,4.2383104835930793e-13,4.23616231566667e-13,4.234018496284329e-13,4.2318790100645544e-13,4.2297438417034486e-13,4.2276129759742145e-13,4.225486397726648e-13,4.2233640918866383e-13,4.221246043455673e-13,4.219132237510347e-13,4.217022792831286e-13,4.21491742711834e-13,4.2128162595675133e-13,4.2107192755509734e-13,4.208626460513593e-13,4.2065377999724773e-13,4.204453279516502e-13,4.2023728848058484e-13,4.2002966015715494e-13,4.1982244156150307e-13,4.196156312807664e-13,4.1940924098368745e-13,4.1920324309627854e-13,4.1899764932680497e-13,4.1879245828993733e-13,4.1858766860712056e-13,4.183832789065305e-13,4.18179287823032e-13,4.17975693998136e-13,4.1777249607995763e-13,4.175696927231749e-13,4.1736728258898656e-13,4.1716527714215235e-13,4.1696364943790746e-13,4.1676241097865634e-13,4.1656156045127536e-13,4.163610965489601e-13,4.1616101797118587e-13,4.159613234236686e-13,4.157620116183258e-13,4.155630812732383e-13,4.1536453111261143e-13,4.151663598667377e-13,4.149685788016143e-13,4.147711615764565e-13,4.145741194931536e-13,4.143774513059708e-13,4.141811557750744e-13,4.1398523166649595e-13,4.137896777520955e-13,4.135944928095264e-13,4.133996756221998e-13,4.1320522497924923e-13,4.130111396754957e-13,4.1281741851141295e-13,4.1262407254197767e-13,4.124310760581973e-13,4.1223844014915837e-13,4.120461636376043e-13,4.118542453517615e-13,4.116626841253067e-13,4.114714787973338e-13,4.112806282123214e-13,4.1109013122010017e-13,4.108999866758207e-13,4.1071019343992146e-13,4.1052076237913514e-13,4.1033166834021004e-13,4.101429222224646e-13,4.099545229071743e-13,4.097664692807467e-13,4.095787602346903e-13,4.093913946655849e-13,4.092043714750507e-13,4.09017689569719e-13,4.0883134786120205e-13,4.0864534526606426e-13,4.08459692467628e-13,4.082743648472699e-13,4.0808937311947003e-13,4.079047162203091e-13,4.077203930906751e-13,4.0753640267623553e-13,4.073527439274094e-13,4.0716941579933936e-13,4.069864172518639e-13,4.068037472494903e-13,4.0662140476136716e-13,4.064394002921121e-13,4.0625770973776173e-13,4.060763436327514e-13,4.058953009645269e-13,4.0571458072504234e-13,4.05534181910734e-13,4.053541035224946e-13,4.051743445656474e-13,4.049949040499209e-13,4.0481578098942344e-13,4.0463697440261793e-13,4.0445849461999333e-13,4.0428031803334236e-13,4.041024550017127e-13,4.0392490456073787e-13,4.037476657502827e-13,4.0357073761441986e-13,4.033941192014051e-13,4.0321780956365425e-13,4.030418077577191e-13,4.028661128442641e-13,4.026907238880433e-13,4.025156510498646e-13,4.0234087119936366e-13,4.021663945247233e-13,4.019922201068256e-13,4.0181834703052783e-13,4.0164477438464035e-13,4.014715012619047e-13,4.012985267589711e-13,4.0112584997637704e-13,4.0095347001852525e-13,4.007813859936622e-13,4.006096078972354e-13,4.004381130597338e-13,4.002669115028657e-13,4.0009600235003975e-13,3.9992538472840287e-13,3.997550577688194e-13,3.995850206058506e-13,3.994152723777342e-13,3.992458122263641e-13,3.9907663929727034e-13,3.9890775273959894e-13,3.9873916238763187e-13,3.9857084601658425e-13,3.984028134859487e-13,3.9823506395913797e-13,3.980675966030827e-13,3.9790041058821267e-13,3.9773350508843725e-13,3.9756687928112663e-13,3.9740053234709287e-13,3.972344634705715e-13,3.970686718392028e-13,3.9690316713017464e-13,3.9673792754810685e-13,3.9657296279440727e-13,3.9640827207015155e-13,3.962438545797289e-13,3.9607970953082444e-13,3.9591583613440136e-13,3.957522336046833e-13,3.9558890115913687e-13,3.954258380184546e-13,3.9526304340653704e-13,3.9510052684742904e-13,3.9493826696058633e-13,3.947762732933382e-13,3.9461454508224836e-13,3.9445308156700396e-13,3.942918819903995e-13,3.9413094559832023e-13,3.939702716397254e-13,3.9380985936663245e-13,3.9364970803410067e-13,3.9348981690021495e-13,3.9333019533970897e-13,3.931708223730121e-13,3.930117073972583e-13,3.928528496824769e-13,3.9269424850164426e-13,3.9253590313066836e-13,3.923778128483734e-13,3.9221997693648434e-13,3.920623946796123e-13,3.9190506536523875e-13,3.9174798828370135e-13,3.9159117266413916e-13,3.9143459791475367e-13,3.9127827328624786e-13,3.911221980802345e-13,3.9096637160110883e-13,3.908107931560343e-13,3.9065546205492794e-13,3.9050037761044627e-13,3.9034553913797144e-13,3.9019094595559664e-13,3.9003659738411283e-13,3.898825025106683e-13,3.89728641118656e-13,3.8957502231599606e-13,3.8942164543413105e-13,3.892685098071328e-13,3.8911561477168853e-13,3.8896295966708794e-13,3.888105438352094e-13,3.8865836662050757e-13,3.885064273699995e-13,3.8835472543325206e-13,3.8820326975891717e-13,3.8805204049358104e-13,3.8790104660591643e-13,3.8775028745556065e-13,3.8759976240463664e-13,3.87449470817741e-13,3.8729941206193096e-13,3.8714958550671246e-13,3.8699999052402773e-13,3.868506264882428e-13,3.867014927761358e-13,3.865525982012495e-13,3.8640392326191324e-13,3.862554767909788e-13,3.861072581747514e-13,3.859592668018886e-13,3.858115020633885e-13,3.856639633525781e-13,3.855166500651018e-13,3.853695615989095e-13,3.852226973542461e-13,3.8507605673363894e-13,3.8492964841880615e-13,3.8478345324888507e-13,3.846374799242265e-13,3.844917278563778e-13,3.843461964591139e-13,3.842008851484261e-13,3.8405579334251093e-13,3.8391092046175996e-13,3.8376626592874826e-13,3.8362182916822453e-13,3.8347760960709977e-13,3.8333361579845066e-13,3.831898289117732e-13,3.8304625751813455e-13,3.8290290105299115e-13,3.827597589539099e-13,3.8261683066055786e-13,3.824741156146925e-13,3.823316132601508e-13,3.8218932304283965e-13,3.8204724441072586e-13,3.819053768138261e-13,3.817637197041971e-13,3.816222814980959e-13,3.814810437140293e-13,3.8134001478557983e-13,3.811991941728664e-13,3.810585813379995e-13,3.809181757450714e-13,3.8077797686014675e-13,3.8063798415125333e-13,3.8049819708837247e-13,3.8035861514343004e-13,3.802192377902866e-13,3.800800733229035e-13,3.7994110356974496e-13,3.798023368415192e-13,3.7966377261973556e-13,3.79525410387793e-13,3.7938724963097096e-13,3.7924928983642063e-13,3.791115304931562e-13,3.7897397109204565e-13,3.7883661112580283e-13,3.7869945008897773e-13,3.7856249615612843e-13,3.7842573145655927e-13,3.782891641810242e-13,3.781527938313342e-13,3.780166199110942e-13,3.778806419256948e-13,3.777448593823037e-13,3.776092717898578e-13,3.774738786590546e-13,3.773386795023441e-13,3.7720367383392075e-13,3.7706886971174355e-13,3.7693424955722267e-13,3.7679982144398803e-13,3.7666558489313084e-13,3.7653153942744664e-13,3.763976845714273e-13,3.762640198512536e-13,3.7613054479478687e-13,3.759972589315615e-13,3.7586416179277734e-13,3.7573125291129197e-13,3.755985402311847e-13,3.7546600645759904e-13,3.753336595497846e-13,3.7520149904715383e-13,3.7506952449073954e-13,3.749377354231872e-13,3.748061313887474e-13,3.7467471193326895e-13,3.745434766041913e-13,3.7441242495053754e-13,3.7428155652290673e-13,3.741508791541354e-13,3.740203758250709e-13,3.7389005438324184e-13,3.737599143854815e-13,3.7362995539016395e-13,3.7350017695719735e-13,3.733705786480168e-13,3.732411600255777e-13,3.731119206543486e-13,3.7298286010030474e-13,3.72853977930921e-13,3.7272528187034807e-13,3.7259675516743186e-13,3.724684055605589e-13,3.723402326231362e-13,3.7221223593003706e-13,3.720844150575947e-13,3.7195676958359577e-13,3.7182929908727394e-13,3.717020031493033e-13,3.7157488135179213e-13,3.714479332782763e-13,3.713211665467011e-13,3.711945646665132e-13,3.7106813526945764e-13,3.7094187794471815e-13,3.708157922828749e-13,3.706898778758982e-13,3.7056413431714254e-13,3.7043856120134023e-13,3.7031315812459576e-13,3.701879246843795e-13,3.700628604795214e-13,3.6993797302416746e-13,3.698132460812588e-13,3.6968868717832404e-13,3.695642959195737e-13,3.6944007191054835e-13,3.6931601475811346e-13,3.691921240704532e-13,3.6906839945706483e-13,3.6894484052875287e-13,3.6882144689762364e-13,3.686982181770793e-13,3.685751617798004e-13,3.6845226171539304e-13,3.683295254095217e-13,3.682069524807165e-13,3.6808454254877596e-13,3.679622952347614e-13,3.678402101609911e-13,3.6771828695103555e-13,3.6759652522971133e-13,3.674749246230765e-13,3.673534847584246e-13,3.672322129492356e-13,3.6711109344521364e-13,3.669901335724408e-13,3.668693329631008e-13,3.6674869125058717e-13,3.666282080694976e-13,3.665078830556293e-13,3.6638771584597325e-13,3.6626770607870965e-13,3.661478533932027e-13,3.660281574299954e-13,3.659086254055649e-13,3.657892418033963e-13,3.6567001385220286e-13,3.655509411971936e-13,3.6543202348473164e-13,3.653132603623294e-13,3.651946514786439e-13,3.6507619648347157e-13,3.649578950277437e-13,3.6483974676352176e-13,3.6472175134399243e-13,3.6460391589076304e-13,3.644862251150196e-13,3.643686861502552e-13,3.642512986541104e-13,3.6413406228532806e-13,3.64016976703748e-13,3.6390004157030297e-13,3.637832565470138e-13,3.6366662129698485e-13,3.635501354843998e-13,3.634337987745167e-13,3.6331761819614396e-13,3.6320157868231406e-13,3.6308568727338493e-13,3.629699436388686e-13,3.6285434744932976e-13,3.627388983763813e-13,3.6262359609267973e-13,3.6250844027192135e-13,3.623934305888375e-13,3.622785667191907e-13,3.6216384833976985e-13,3.620492823885946e-13,3.619348540149048e-13,3.618205701679469e-13,3.617064305285747e-13,3.615924347786481e-13,3.614785826010284e-13,3.6136487367957485e-13,3.6125130769913985e-13,3.6113788434556567e-13,3.6102460330567973e-13,3.609114714366618e-13,3.607984669191859e-13,3.6068561810256587e-13,3.6057289605383543e-13,3.604603290526052e-13,3.603478882393176e-13,3.602356018241774e-13,3.6012345523462965e-13,3.6001143397000453e-13,3.59899566136953e-13,3.5978782305800947e-13,3.5967623277115383e-13,3.595647666711927e-13,3.5945345272772593e-13,3.593422624075119e-13,3.5923122361205957e-13,3.591203078797612e-13,3.590095430443222e-13,3.5889891473702923e-13,3.587884086593399e-13,3.586780525437916e-13,3.585678181064804e-13,3.584577330128515e-13,3.5834776904953703e-13,3.582379538151714e-13,3.581282591666138e-13,3.5801871263596755e-13,3.5790928615001173e-13,3.5780000717459663e-13,3.5769086153985733e-13,3.575818351444437e-13,3.574729553553466e-13,3.573641942728112e-13,3.5725557919826377e-13,3.571470823008091e-13,3.570387308165813e-13,3.569304969832461e-13,3.5682240797191616e-13,3.5671443608852154e-13,3.566066084394227e-13,3.5649891104878464e-13,3.5639133000768637e-13,3.562838923258636e-13,3.5617657047861835e-13,3.5606939141160046e-13,3.5596232766735173e-13,3.558554061276999e-13,3.5574859940213787e-13,3.556419343089337e-13,3.555353835242445e-13,3.554289738030393e-13,3.553226913588609e-13,3.552165224706188e-13,3.5511049379882074e-13,3.5500457818503933e-13,3.5489880222712836e-13,3.5479313883233426e-13,3.546876145361127e-13,3.5458220231110517e-13,3.544769286306228e-13,3.543717665324248e-13,3.542667424279305e-13,3.541618427155681e-13,3.540570538576355e-13,3.5395240217318653e-13,3.5384786086157026e-13,3.5374345618057367e-13,3.536391613937063e-13,3.535350026977355e-13,3.534309534200612e-13,3.533270396966776e-13,3.5322323491860694e-13,3.531195651613145e-13,3.5301601700377333e-13,3.5291257708737794e-13,3.5280927139725854e-13,3.527060734823278e-13,3.5260300926779297e-13,3.525000523652626e-13,3.5239722864026093e-13,3.522945117668314e-13,3.521919275510534e-13,3.5208944972914626e-13,3.5198710404798144e-13,3.518848772628816e-13,3.5178275619018927e-13,3.5168076648840825e-13,3.515788820480694e-13,3.514771284690559e-13,3.5137547970317784e-13,3.5127396129193053e-13,3.5117254724815056e-13,3.5107126305517623e-13,3.509700827866198e-13,3.5086903186789265e-13,3.507680972266106e-13,3.5066726585005285e-13,3.505665630771701e-13,3.504659631324225e-13,3.5036549129740274e-13,3.502651218564791e-13,3.501648800341118e-13,3.5006474017433256e-13,3.4996472744469333e-13,3.498648162486463e-13,3.4976503169705784e-13,3.496653482525588e-13,3.495657909695518e-13,3.494663469742251e-13,3.493670034508813e-13,3.49267785369642e-13,3.491686673400348e-13,3.490696742762663e-13,3.4897078084620795e-13,3.488720119083687e-13,3.4877334218872825e-13,3.486747964903144e-13,3.4857634959698086e-13,3.4847802625648913e-13,3.4837981375892574e-13,3.482816994512259e-13,3.48183707998654e-13,3.480858143287322e-13,3.479880430519909e-13,3.478903691530177e-13,3.477928171878203e-13,3.4769536219782343e-13,3.475980286847215e-13,3.4750079174655007e-13,3.474036758308989e-13,3.4730666838810117e-13,3.47209756924112e-13,3.4711296580575483e-13,3.470162702716062e-13,3.469196946349016e-13,3.4682321419004436e-13,3.467268531968869e-13,3.466305870054386e-13,3.46534439822372e-13,3.4643838705308277e-13,3.4634245285126645e-13,3.4624662482396723e-13,3.4615089063266203e-13,3.4605527435195977e-13,3.459597515247663e-13,3.4586434617321474e-13,3.4576903389483766e-13,3.456738386594913e-13,3.455787361191206e-13,3.454837501915024e-13,3.4538885658278126e-13,3.4529407915885103e-13,3.4519940568004256e-13,3.451048239599666e-13,3.450103577870608e-13,3.4491598300204236e-13,3.44821723341953e-13,3.4472755470097313e-13,3.4463350076494135e-13,3.445395374812935e-13,3.4444568848485707e-13,3.4435192977611687e-13,3.442582849390799e-13,3.441647418840462e-13,3.440712885734773e-13,3.439779485155072e-13,3.4388469784234494e-13,3.4379156001177704e-13,3.436985112083473e-13,3.4360557483968217e-13,3.435127271424589e-13,3.434199914743299e-13,3.433273441239056e-13,3.432348083990501e-13,3.4314237235681746e-13,3.430500241053381e-13,3.4295778687814054e-13,3.4286563709279685e-13,3.4277359793350635e-13,3.426816458690814e-13,3.4258980403457414e-13,3.424980489498419e-13,3.4240640370097074e-13,3.423148448586685e-13,3.422233954602352e-13,3.421320437063622e-13,3.4204077784776416e-13,3.4194962084889937e-13,3.41858549406757e-13,3.417675864374553e-13,3.416767086881621e-13,3.4158593902683257e-13,3.4149525425062337e-13,3.4140467717950263e-13,3.4131418466042727e-13,3.412237994655532e-13,3.4113350993618665e-13,3.410433044626354e-13,3.4095320574566485e-13,3.4086319075591234e-13,3.4077328214676486e-13,3.406834569380075e-13,3.405937377358208e-13,3.4050410160895354e-13,3.404145711165507e-13,3.403251233761417e-13,3.40235780900006e-13,3.40146532167133e-13,3.4005736570452163e-13,3.39968303954471e-13,3.398793241556664e-13,3.397904487039632e-13,3.39701654886194e-13,3.396129650519371e-13,3.3952435653599385e-13,3.3943585164183183e-13,3.393474277520432e-13,3.3925910712415027e-13,3.3917087837198163e-13,3.39082730156411e-13,3.389946846663522e-13,3.389067194031013e-13,3.3881885651003653e-13,3.3873107353562993e-13,3.386433925778866e-13,3.3855579123228084e-13,3.384682915516062e-13,3.3838087117816664e-13,3.3829355211970504e-13,3.382063231221287e-13,3.3811917297745314e-13,3.380321236261465e-13,3.3794515282683554e-13,3.378582824753362e-13,3.3777149037650754e-13,3.3768479838167134e-13,3.3759818434175026e-13,3.37511670063729e-13,3.3742523344442614e-13,3.3733889624664593e-13,3.3725264734569416e-13,3.3716647566207503e-13,3.3708040289261475e-13,3.3699440704814183e-13,3.369085097816897e-13,3.368226891494022e-13,3.367369667606735e-13,3.366513207167991e-13,3.365657725836869e-13,3.3648030050762103e-13,3.3639492601117515e-13,3.3630963809645145e-13,3.3622442580986574e-13,3.3613931060927583e-13,3.360542707527279e-13,3.359693276551226e-13,3.3588445961893076e-13,3.357996880162457e-13,3.357149911938034e-13,3.3563039048103854e-13,3.355458642687939e-13,3.354614338439937e-13,3.353770883330087e-13,3.352928169056634e-13,3.3520864078539344e-13,3.351245384726194e-13,3.3504053114863333e-13,3.349565973574143e-13,3.3487275823825633e-13,3.3478899237854227e-13,3.3470532087571293e-13,3.346217223604007e-13,3.345382178883375e-13,3.34454796707707e-13,3.343714481093103e-13,3.3428819308658575e-13,3.342050103776195e-13,3.34121920934498e-13,3.3403890353802387e-13,3.3395597909907345e-13,3.338731264410153e-13,3.3379036643365664e-13,3.3370767794278204e-13,3.3362508179727e-13,3.335425673647305e-13,3.3346012405457744e-13,3.3337777263455907e-13,3.332954920758482e-13,3.3321330310561193e-13,3.331311847369208e-13,3.3304915765649865e-13,3.329672009191673e-13,3.328853351713448e-13,3.328035395094583e-13,3.327218345397567e-13,3.3264020974695633e-13,3.3255865465678646e-13,3.324771898154979e-13,3.323957944228974e-13,3.3231448898540533e-13,3.322332527439296e-13,3.321521061651941e-13,3.3207102853106556e-13,3.3199004026870534e-13,3.3190912070079677e-13,3.318282902150718e-13,3.31747538411098e-13,3.3166685492868514e-13,3.315862600966703e-13,3.315057333391619e-13,3.314252949458972e-13,3.3134492438131095e-13,3.3126464189617147e-13,3.3118442699510086e-13,3.3110429989002903e-13,3.3102424012562743e-13,3.3094426787511695e-13,3.308643728507223e-13,3.307845448041611e-13,3.307048038508336e-13,3.306251296349346e-13,3.305455422334765e-13,3.304660213302261e-13,3.303865869639356e-13,3.303072188578086e-13,3.30227937012464e-13,3.3014872119040796e-13,3.3006959135425245e-13,3.299905373267456e-13,3.2991154896939883e-13,3.2983264618804996e-13,3.2975380884287736e-13,3.296750568020248e-13,3.2959636996450844e-13,3.2951776816090227e-13,3.294392313289287e-13,3.2936077926171556e-13,3.2928239193556095e-13,3.292040891062696e-13,3.2912586070503687e-13,3.29047696701111e-13,3.289696167945426e-13,3.2889160105749966e-13,3.2881366915301476e-13,3.2873580119137896e-13,3.286580167987277e-13,3.285802961233472e-13,3.2850265875459645e-13,3.284250848786293e-13,3.283475940481482e-13,3.282701763007756e-13,3.2819282171149415e-13,3.281155497782464e-13,3.280383407813013e-13,3.27961214182242e-13,3.278841502987645e-13,3.2780716855621095e-13,3.2773024930957945e-13,3.2765341194808845e-13,3.2757663686391445e-13,3.27499943410269e-13,3.2742332172923454e-13,3.2734676199957947e-13,3.272702835207244e-13,3.271938667772519e-13,3.271175310328656e-13,3.27041256808897e-13,3.26965063333448e-13,3.2688893116447755e-13,3.2681287949460035e-13,3.267368889182822e-13,3.2666097859276443e-13,3.2658513876267424e-13,3.265093597086682e-13,3.264336605351415e-13,3.2635802192730085e-13,3.2628246295445083e-13,3.2620696433788657e-13,3.261315451119344e-13,3.260561860338594e-13,3.259809061031214e-13,3.2590568611283796e-13,3.258305450277132e-13,3.257554731930544e-13,3.256804609895579e-13,3.256055273300029e-13,3.2553065309662585e-13,3.254558571677261e-13,3.253811204609849e-13,3.253064618203313e-13,3.252318621987761e-13,3.251573404059869e-13,3.2508287743018925e-13,3.2500849204689786e-13,3.249341747002836e-13,3.2485991586928217e-13,3.247857342783822e-13,3.247116110033467e-13,3.2463756473478037e-13,3.245635765832637e-13,3.2448966520562415e-13,3.2441581174714725e-13,3.2434203483098955e-13,3.2426831563703004e-13,3.2419467275485994e-13,3.241210967257437e-13,3.2404757812510237e-13,3.239741354923776e-13,3.2390075009344495e-13,3.2382744043444335e-13,3.237541878154543e-13,3.236810107094181e-13,3.236078904505127e-13,3.235348454785836e-13,3.2346185716179596e-13,3.2338894390700376e-13,3.233160963508405e-13,3.2324330516350294e-13,3.2317058870255083e-13,3.2309792842064333e-13,3.2302534264260466e-13,3.229528128547037e-13,3.228803573491306e-13,3.2280795764565735e-13,3.2273563200394125e-13,3.226633619771508e-13,3.2259116579251135e-13,3.2251903418034474e-13,3.224469579039572e-13,3.2237495514211486e-13,3.223030075310148e-13,3.222311332172412e-13,3.2215931387001947e-13,3.2208756760385074e-13,3.220158761208846e-13,3.2194425750363803e-13,3.218726934870812e-13,3.2180120212184513e-13,3.2172977423030117e-13,3.216584006672406e-13,3.215870994356503e-13,3.2151585235209974e-13,3.2144467738793413e-13,3.213735563921841e-13,3.213025073046497e-13,3.212315120067213e-13,3.2116058840675035e-13,3.2108971841838563e-13,3.2101891991862593e-13,3.209481838202943e-13,3.208775010680829e-13,3.208068894921419e-13,3.2073633108632533e-13,3.20665843649669e-13,3.205954092079349e-13,3.2052504552913894e-13,3.204547346708519e-13,3.20384494370164e-13,3.2031430671635613e-13,3.202441894156865e-13,3.2017413346987165e-13,3.2010412991195976e-13,3.2003419640213693e-13,3.1996431510852926e-13,3.1989450366072353e-13,3.19824744258214e-13,3.1975505450008035e-13,3.1968541661708804e-13,3.196158481779018e-13,3.1954633144446205e-13,3.1947688395510995e-13,3.194074967989355e-13,3.1933816109583585e-13,3.192688943388385e-13,3.191996788674019e-13,3.19130532144457e-13,3.190614365403035e-13,3.1899240948786624e-13,3.1892343338819143e-13,3.1885452564428775e-13,3.187856686878541e-13,3.187168798920721e-13,3.186481417191999e-13,3.1857947151268105e-13,3.185108604629565e-13,3.184422997906701e-13,3.183738067948257e-13,3.1830536401367134e-13,3.1823698871669387e-13,3.181686634723762e-13,3.181004055207758e-13,3.180321974605184e-13,3.179640565023197e-13,3.17895965274857e-13,3.178279409595911e-13,3.177599748311472e-13,3.176920581938556e-13,3.176242081854579e-13,3.1755640750936214e-13,3.1748867327427086e-13,3.174209882133268e-13,3.1735336940627924e-13,3.172857996159161e-13,3.172182958931187e-13,3.1715084103023095e-13,3.1708345204935104e-13,3.1701612030788253e-13,3.1694883719244796e-13,3.168816196821304e-13,3.16814450642775e-13,3.167473470248929e-13,3.166802917235759e-13,3.1661330166084673e-13,3.165463597609564e-13,3.1647948291752274e-13,3.1641265408386876e-13,3.1634589012529053e-13,3.162791824805974e-13,3.1621252261734266e-13,3.161459273584956e-13,3.160793797296794e-13,3.160128965257475e-13,3.1594646080109316e-13,3.1588008932253603e-13,3.158137651731537e-13,3.157475050918134e-13,3.1568129219019224e-13,3.1561514317928637e-13,3.1554904957797084e-13,3.1548300293340086e-13,3.154170199149182e-13,3.153510837053274e-13,3.1528521094630043e-13,3.152193848489461e-13,3.151536220273469e-13,3.150879057208322e-13,3.150222525159747e-13,3.149566456802413e-13,3.1489110177277403e-13,3.1482561239120523e-13,3.1476016916099387e-13,3.1469478860028505e-13,3.146294540465274e-13,3.1456418199063246e-13,3.1449895579789796e-13,3.144337919320803e-13,3.1436867378624477e-13,3.143036177970704e-13,3.1423860738530896e-13,3.141736589606395e-13,3.1410876419817323e-13,3.140439148004051e-13,3.1397912713666e-13,3.1391438469655185e-13,3.138497038225982e-13,3.1378506803181775e-13,3.1372049363999723e-13,3.1365596419148034e-13,3.135914959753993e-13,3.135270725633434e-13,3.1346271021786615e-13,3.133984006903093e-13,3.1333413575896526e-13,3.1326993164666203e-13,3.1320577199275673e-13,3.1314167299368693e-13,3.1307761831578e-13,3.13013624129158e-13,3.129496741270407e-13,3.12885784453309e-13,3.1282193882799736e-13,3.1275815336882e-13,3.1269441990212914e-13,3.1263073028080475e-13,3.1256710058345005e-13,3.1250351459679793e-13,3.124399883734689e-13,3.123765057267417e-13,3.1231308268332737e-13,3.122497030829738e-13,3.1218638292655574e-13,3.1212310608021453e-13,3.120598885190608e-13,3.119967221432654e-13,3.1193359887911304e-13,3.118705346632044e-13,3.1180751342733443e-13,3.1174455108251976e-13,3.116816315866858e-13,3.116187708253372e-13,3.115559527824551e-13,3.1149319331810327e-13,3.1143047644224457e-13,3.113678179895729e-13,3.1130520993291265e-13,3.1124264427079765e-13,3.111801367999999e-13,3.1111767159511357e-13,3.1105526442771703e-13,3.1099289939812915e-13,3.109305922528046e-13,3.1086832711771385e-13,3.1080611971425767e-13,3.1074395419398575e-13,3.1068184625331455e-13,3.1061978793658347e-13,3.105577713134452e-13,3.1049581204297004e-13,3.1043389434033937e-13,3.1037203383981135e-13,3.103102147818951e-13,3.102484527761054e-13,3.1018673208820765e-13,3.101250683030415e-13,3.1006344571155786e-13,3.10001879873989e-13,3.09940362905076e-13,3.0987888694448607e-13,3.098174675156684e-13,3.097560889722282e-13,3.096947668131765e-13,3.096334854170577e-13,3.0957226025851144e-13,3.0951107574095206e-13,3.094499473147145e-13,3.093888594080134e-13,3.093278274469457e-13,3.0926684361556523e-13,3.092059001224735e-13,3.091450123575352e-13,3.090841648106634e-13,3.0902337284765016e-13,3.08962620982968e-13,3.089019245584017e-13,3.0884126811291553e-13,3.0878066696435233e-13,3.0872010567609986e-13,3.086595995421243e-13,3.08599140814728e-13,3.0853872177039e-13,3.08478357667384e-13,3.084180331298606e-13,3.0835776339237857e-13,3.0829753310327655e-13,3.082373574734624e-13,3.081772211753965e-13,3.0811713939639987e-13,3.0805709683298786e-13,3.0799710864895847e-13,3.0793716716382077e-13,3.0787726472089864e-13,3.0781741644882546e-13,3.0775760710396435e-13,3.0769785179158396e-13,3.0763813529187223e-13,3.0757847268679585e-13,3.075188487803021e-13,3.074592786311187e-13,3.0739974706688716e-13,3.0734026912315856e-13,3.0728083718563033e-13,3.072214436634598e-13,3.0716210355755036e-13,3.071028017544958e-13,3.070435532321777e-13,3.0698434290065884e-13,3.069251857148606e-13,3.068660666082508e-13,3.068070005128521e-13,3.0674797238547355e-13,3.066889971353003e-13,3.0663006721322153e-13,3.065711750932391e-13,3.0651233565039654e-13,3.0645353389957874e-13,3.0639478469314354e-13,3.0633607306909644e-13,3.062774138571697e-13,3.0621879211842703e-13,3.061602226600352e-13,3.061016905660538e-13,3.0604321062114407e-13,3.059847753404117e-13,3.0592637726173507e-13,3.0586803113612934e-13,3.058097221048724e-13,3.057514648966225e-13,3.056932446754371e-13,3.0563507614767673e-13,3.055769445001175e-13,3.05518864416881e-13,3.0546082110740084e-13,3.0540282923361837e-13,3.053448813739012e-13,3.052869701290571e-13,3.0522911012786693e-13,3.0517128663614237e-13,3.051135142606297e-13,3.0505577828958683e-13,3.049980933077831e-13,3.0494044462586246e-13,3.0488284680667514e-13,3.048252851831917e-13,3.0476777429640034e-13,3.047103067869968e-13,3.046528753177906e-13,3.0459549439708527e-13,3.045381494134072e-13,3.044808548533408e-13,3.044235961275319e-13,3.043663877009024e-13,3.043092150061588e-13,3.0425209248661706e-13,3.0419500559698594e-13,3.0413796875903163e-13,3.0408097467486325e-13,3.040240160683843e-13,3.0396710732914244e-13,3.0391023396659674e-13,3.038534103488848e-13,3.0379662200726544e-13,3.0373988328852165e-13,3.0368317974565406e-13,3.0362652570414664e-13,3.035699067386848e-13,3.035133371535086e-13,3.0345680971124516e-13,3.034003171960032e-13,3.0334387388026065e-13,3.0328746539266475e-13,3.0323110598458634e-13,3.031747813061587e-13,3.0311850558770007e-13,3.030622645007734e-13,3.030060722546988e-13,3.0294991454241277e-13,3.0289380555229094e-13,3.0283773810660153e-13,3.027817050487884e-13,3.027257205359122e-13,3.026697703140991e-13,3.0261386851959963e-13,3.0255800091971905e-13,3.025021816299512e-13,3.0244639643872506e-13,3.02390659440831e-13,3.0233495644576687e-13,3.0227930152767244e-13,3.022236875675983e-13,3.0216810746747075e-13,3.0211257527055287e-13,3.0205707683877545e-13,3.0200162619488244e-13,3.0194620922168293e-13,3.018908399214541e-13,3.018355041978292e-13,3.017802160326707e-13,3.0172496135038236e-13,3.016697541124637e-13,3.0161458725790703e-13,3.015594537462859e-13,3.015043675086532e-13,3.01449314521104e-13,3.013943086944573e-13,3.013393360253918e-13,3.0128441040454373e-13,3.0122951784912266e-13,3.0117467222963313e-13,3.011198595837626e-13,3.010650937619351e-13,3.0101036776026033e-13,3.009556745951414e-13,3.0090102808697685e-13,3.008464143244189e-13,3.007918471079118e-13,3.007373125464026e-13,3.006828244204315e-13,3.0062836885918867e-13,3.005739596233602e-13,3.005195828623276e-13,3.004652523169729e-13,3.0041096103971626e-13,3.003567021029888e-13,3.0030248921806005e-13,3.002483085845644e-13,3.001941738940912e-13,3.001400713662868e-13,3.000860146731096e-13,3.00031990054167e-13,2.999780111618356e-13,2.9992406425563316e-13,2.9987016296840345e-13,2.998163004080861e-13,2.9976246970235493e-13,2.99708684454846e-13,2.996549309746323e-13,2.996012228459386e-13,2.995475463975722e-13,2.9949391519439504e-13,2.994403155848991e-13,2.9938676111463115e-13,2.993332381517185e-13,2.992797602224408e-13,2.9922632048948224e-13,2.9917291213498953e-13,2.9911954865643203e-13,2.990662164708081e-13,2.990129290564393e-13,2.989596728497865e-13,2.9890646131007086e-13,2.9885328089316715e-13,2.9880014503924326e-13,2.9874704022353914e-13,2.9869397986721644e-13,2.986409571869441e-13,2.985879654185874e-13,2.9853501795488734e-13,2.984821013192842e-13,2.9842922888562946e-13,2.983763871965597e-13,2.983235896070834e-13,2.982708226789855e-13,2.9821809974847795e-13,2.9816540739644593e-13,2.9811275894035133e-13,2.9806014765010305e-13,2.9800756681454577e-13,2.9795502972310237e-13,2.97902523004201e-13,2.978500599286288e-13,2.977976271437487e-13,2.9774523790175754e-13,2.976928788689062e-13,2.976405632788467e-13,2.9758827781667086e-13,2.9753603569753144e-13,2.974838302438475e-13,2.974316547967181e-13,2.973795225436319e-13,2.9732742021657874e-13,2.972753609846602e-13,2.9722333159854477e-13,2.9717134520899166e-13,2.971193885853017e-13,2.9706747485993654e-13,2.970155908207834e-13,2.969637495820506e-13,2.9691193795016624e-13,2.9686016902112945e-13,2.968084361784953e-13,2.9675673282420273e-13,2.9670507202702043e-13,2.9665344063952874e-13,2.966018517123975e-13,2.965502921165888e-13,2.9649877488471725e-13,2.9644728690608186e-13,2.963958411952852e-13,2.963444246599186e-13,2.9629305029661623e-13,2.9624171153989957e-13,2.9619040184242875e-13,2.9613913417396703e-13,2.9608789548763994e-13,2.9603669873535023e-13,2.959855308883598e-13,2.9593440488075376e-13,2.9588330770188604e-13,2.958322522680671e-13,2.9578122558669883e-13,2.957302405563595e-13,2.956792906618514e-13,2.956283694058746e-13,2.955774896604892e-13,2.9552663847802524e-13,2.9547582871291653e-13,2.954250474353882e-13,2.9537430748229e-13,2.9532359594169894e-13,2.9527292563292245e-13,2.952222836618465e-13,2.95171682830278e-13,2.951211166726271e-13,2.950705787409662e-13,2.950200818109298e-13,2.949696130327376e-13,2.9491918516462776e-13,2.9486878537447853e-13,2.948184264031731e-13,2.947680954362059e-13,2.947178051971462e-13,2.9466754288906224e-13,2.9461732121825043e-13,2.9456713376806934e-13,2.945169741393076e-13,2.944668550124292e-13,2.944167636342525e-13,2.943667126680706e-13,2.943166893781285e-13,2.9426670641058894e-13,2.942167510470821e-13,2.941668359166808e-13,2.941169483183586e-13,2.940671008641387e-13,2.940172871856807e-13,2.9396750093184676e-13,2.939177546891613e-13,2.9386803579977525e-13,2.9381835683326367e-13,2.937687051489765e-13,2.9371909329957907e-13,2.936695086615796e-13,2.9361996377077343e-13,2.9357044602078606e-13,2.935209679305824e-13,2.9347152317948784e-13,2.934221054638071e-13,2.933727272773339e-13,2.933233760563091e-13,2.932740642777942e-13,2.9322477939500584e-13,2.9317553386831246e-13,2.931263151678662e-13,2.930771357373814e-13,2.930279830639057e-13,2.9297886957453825e-13,2.9292978899564693e-13,2.928807350703601e-13,2.9283172020092706e-13,2.927827319164594e-13,2.927337826026876e-13,2.9268485980547955e-13,2.9263597589408556e-13,2.925871184310904e-13,2.9253829976930225e-13,2.9248950748798354e-13,2.9244075392353867e-13,2.923920328487664e-13,2.923433380530112e-13,2.9229468184814305e-13,2.922460518549471e-13,2.921974603689841e-13,2.9214889502758024e-13,2.9210036811002494e-13,2.920518672701467e-13,2.9200340477100113e-13,2.919549682828804e-13,2.9190657005264387e-13,2.9185820389892097e-13,2.918098636566759e-13,2.917615615485435e-13,2.917132852858072e-13,2.9166504707499846e-13,2.9161683464373057e-13,2.915686601824686e-13,2.915205114351176e-13,2.914724005761132e-13,2.914243153656144e-13,2.913762679620641e-13,2.913282522293336e-13,2.912802620474213e-13,2.912323095508503e-13,2.911843825402489e-13,2.9113649313423906e-13,2.910886291495712e-13,2.9104080268900246e-13,2.9099300158536825e-13,2.9094523792559696e-13,2.9089749955857194e-13,2.908497985554289e-13,2.9080212882470225e-13,2.9075448429085014e-13,2.9070687700138747e-13,2.9065929484515456e-13,2.9061174985396366e-13,2.905642299325736e-13,2.905167470971296e-13,2.904692892682724e-13,2.904218684465158e-13,2.90374472568346e-13,2.903271136186807e-13,2.9027978555014963e-13,2.9023248233110647e-13,2.9018521592314157e-13,2.9013797430219526e-13,2.900907694143503e-13,2.900435892512654e-13,2.899964457435506e-13,2.8994932689854723e-13,2.8990224463142763e-13,2.898551869651796e-13,2.8980816579957283e-13,2.897611751307747e-13,2.8971420897048035e-13,2.896672791954205e-13,2.8962037386754304e-13,2.895735048482626e-13,2.8952666021504894e-13,2.89479851814035e-13,2.894330677381772e-13,2.893863198183611e-13,2.893395961629946e-13,2.8929290858775007e-13,2.8924625113178534e-13,2.8919961784959285e-13,2.8915302053408985e-13,2.8910644733215884e-13,2.8905991002158895e-13,2.8901339676459177e-13,2.8896691932386237e-13,2.889204658769066e-13,2.88874048171359e-13,2.888276543999852e-13,2.8878129629539317e-13,2.8873496793919317e-13,2.8868866342814107e-13,2.886423944723678e-13,2.8859614930263717e-13,2.885499396141371e-13,2.8850375365277074e-13,2.884576030988162e-13,2.8841147621328203e-13,2.883653846615698e-13,2.883193167197591e-13,2.882732840384081e-13,2.882272807410517e-13,2.8818130096618395e-13,2.881353563421599e-13,2.8808943518258906e-13,2.88043549101065e-13,2.8799768642615034e-13,2.879518587567101e-13,2.8790605443622675e-13,2.87860285048869e-13,2.8781453895300566e-13,2.8776882771814197e-13,2.8772314550921864e-13,2.876774865059527e-13,2.8763186225591535e-13,2.875862611545449e-13,2.8754069473482986e-13,2.8749515140697885e-13,2.874496426894296e-13,2.8740415700712804e-13,2.8735870586399343e-13,2.87313277699676e-13,2.872678840036083e-13,2.8722251898162723e-13,2.871771768541663e-13,2.871318690889881e-13,2.8708658416236095e-13,2.8704133352764017e-13,2.8699610567568423e-13,2.86950912045473e-13,2.869057411424231e-13,2.8686060439117007e-13,2.8681549031165633e-13,2.8677041031420465e-13,2.8672535864504747e-13,2.8668032956483724e-13,2.866353344624867e-13,2.865903618941119e-13,2.8654542323439087e-13,2.8650050705385343e-13,2.8645562471297385e-13,2.864107647966638e-13,2.863659329680147e-13,2.863211405555743e-13,2.8627636480290666e-13,2.862316170457675e-13,2.86186908591562e-13,2.861422167265946e-13,2.860975527654544e-13,2.8605291667766714e-13,2.860083197425542e-13,2.8596373930319e-13,2.859191866460483e-13,2.8587466174084423e-13,2.85830175838937e-13,2.8578570633992316e-13,2.8574126450228263e-13,2.856968615564827e-13,2.856524749443489e-13,2.8560811590344574e-13,2.8556378440381633e-13,2.8551949164817677e-13,2.8547521513444426e-13,2.8543096607240114e-13,2.8538674443227577e-13,2.8534256138915257e-13,2.852983944967968e-13,2.8525425493732804e-13,2.8521015386518543e-13,2.8516606887586013e-13,2.8512201113080344e-13,2.850779806005646e-13,2.850339884121586e-13,2.849900122165015e-13,2.849460631475898e-13,2.8490214117615407e-13,2.848582574019027e-13,2.848143895309369e-13,2.8477054866991616e-13,2.847267458981463e-13,2.8468295896295995e-13,2.8463919895059127e-13,2.8459546583208447e-13,2.845517706596428e-13,2.845080912353682e-13,2.8446443861836214e-13,2.8442081277984623e-13,2.843772247450368e-13,2.8433365237056917e-13,2.842901066885282e-13,2.842465987039658e-13,2.842031063142629e-13,2.841596405313177e-13,2.8411620132665874e-13,2.8407279967855155e-13,2.840294135385019e-13,2.83986053891592e-13,2.839427207095239e-13,2.8389942494389056e-13,2.8385614460009076e-13,2.838128906365046e-13,2.8376967398479526e-13,2.837264726906292e-13,2.8368329769243473e-13,2.8364014896221425e-13,2.8359703740515567e-13,2.8355394112041615e-13,2.8351087101991983e-13,2.8346782707583874e-13,2.8342482016699737e-13,2.8338182844581597e-13,2.833388627978262e-13,2.8329593408215326e-13,2.832530204910152e-13,2.8321013289022286e-13,2.831672712522423e-13,2.8312444641002933e-13,2.8308163660866945e-13,2.830388526877757e-13,2.829960946199801e-13,2.8295337321217916e-13,2.829106667621019e-13,2.8286798608327355e-13,2.828253419631181e-13,2.827827127387003e-13,2.8274010920405177e-13,2.8269753133209216e-13,2.8265498988437696e-13,2.826124632502256e-13,2.825699621977731e-13,2.8252748670010153e-13,2.8248504749300616e-13,2.8244262301784085e-13,2.824002240169522e-13,2.8235786120688613e-13,2.8231551306787765e-13,2.8227319032300334e-13,2.822308929456268e-13,2.821886316267214e-13,2.82146384898174e-13,2.8210416345746106e-13,2.8206196727810524e-13,2.820198070256138e-13,2.8197766128330874e-13,2.819355407231729e-13,2.8189345599168377e-13,2.8185138571059745e-13,2.818093405328465e-13,2.817673204322292e-13,2.8172533602994156e-13,2.8168336599879874e-13,2.8164142096642476e-13,2.815995009067734e-13,2.8155761641586433e-13,2.8151574621735826e-13,2.814739009136756e-13,2.814320910820218e-13,2.8139029548405233e-13,2.813485247033535e-13,2.8130677871414884e-13,2.8126506806864905e-13,2.812233715789852e-13,2.8118169980372206e-13,2.811400527172355e-13,2.810984408468444e-13,2.810568430549459e-13,2.8101526987518605e-13,2.809737318162823e-13,2.809322077781937e-13,2.8089070827594524e-13,2.8084923328417684e-13,2.80807793286893e-13,2.807663672339547e-13,2.8072496561564745e-13,2.806835884067606e-13,2.806422460666868e-13,2.8060091759498274e-13,2.8055961345729616e-13,2.8051834409462726e-13,2.804770885436692e-13,2.804358572516579e-13,2.803946501936412e-13,2.803534777861835e-13,2.803123191153157e-13,2.8027118460381187e-13,2.802300742268661e-13,2.801889983767068e-13,2.801479361884993e-13,2.8010689806065605e-13,2.80065894367219e-13,2.8002490428007115e-13,2.7998393817941915e-13,2.799429960407102e-13,2.799020882138233e-13,2.798611939194237e-13,2.7982032351352973e-13,2.7977947697173165e-13,2.7973866461984395e-13,2.7969786572711413e-13,2.796570906254706e-13,2.7961634962274373e-13,2.7957562202448675e-13,2.7953491814462504e-13,2.7949423795899696e-13,2.7945359175153835e-13,2.7941295887603834e-13,2.7937234962250296e-13,2.7933176396691055e-13,2.7929121216939953e-13,2.79250673631798e-13,2.7921015862028955e-13,2.7916967737722774e-13,2.79129209340341e-13,2.790887647580095e-13,2.7904834360645444e-13,2.7900795610439937e-13,2.7896758173727066e-13,2.7892723072979394e-13,2.7888690305832766e-13,2.788466089180606e-13,2.7880632784192354e-13,2.7876607003108283e-13,2.787258456631387e-13,2.7868563430652314e-13,2.7864544614479564e-13,2.7860528115455234e-13,2.785651494900237e-13,2.7852503076681054e-13,2.7848493514507825e-13,2.784448626015575e-13,2.784048232672027e-13,2.7836479680459284e-13,2.783247933505931e-13,2.7828482301876224e-13,2.78244865506788e-13,2.78204930934122e-13,2.7816501927772787e-13,2.7812514062805065e-13,2.7808527472942604e-13,2.7804543167816815e-13,2.7800561145137226e-13,2.7796582411646214e-13,2.779260494642337e-13,2.7788629756795594e-13,2.7784657847784687e-13,2.7780687201942477e-13,2.777671882487352e-13,2.77727527143102e-13,2.7768789872988164e-13,2.776482828807274e-13,2.776086896288001e-13,2.7756911895155247e-13,2.775295808535704e-13,2.7749005525245774e-13,2.774505521585812e-13,2.774110815595081e-13,2.7737162340718435e-13,2.773321876949406e-13,2.7729277440045325e-13,2.772533934886765e-13,2.7721402495718647e-13,2.771746787766776e-13,2.7713535492495275e-13,2.770960633444422e-13,2.7705678407817095e-13,2.770175270742865e-13,2.769783022583849e-13,2.7693908970745845e-13,2.7689989935280337e-13,2.7686073117244153e-13,2.7682159506960025e-13,2.7678247116640537e-13,2.7674336937176145e-13,2.7670428966381444e-13,2.7666524192351074e-13,2.7662620631793103e-13,2.765871927336763e-13,2.765482110350402e-13,2.7650924142270207e-13,2.764702937665931e-13,2.7643136804507414e-13,2.763924741003105e-13,2.7635359217762587e-13,2.763147321248011e-13,2.762758939203184e-13,2.762370873843015e-13,2.761982928065427e-13,2.761595200127589e-13,2.761207788065997e-13,2.7608204951109293e-13,2.760433419354648e-13,2.760046560584078e-13,2.759660016616805e-13,2.7592735911247346e-13,2.758887381980996e-13,2.758501388973707e-13,2.7581157097023916e-13,2.757730148278853e-13,2.757344802357941e-13,2.756959769376199e-13,2.756574853774212e-13,2.756190153043683e-13,2.755805666974791e-13,2.7554214927875014e-13,2.7550374353592847e-13,2.7546535919650497e-13,2.7542699623961437e-13,2.753886643656792e-13,2.753503441059646e-13,2.753120451663662e-13,2.7527377723118127e-13,2.752355208642014e-13,2.7519728575518087e-13,2.751590718834565e-13,2.751208889118978e-13,2.75082717447518e-13,2.75044567158622e-13,2.750064380246611e-13,2.7496833968715953e-13,2.7493025279618416e-13,2.7489218699867347e-13,2.748541519201972e-13,2.74816128243002e-13,2.747781255980559e-13,2.7474014396500843e-13,2.747021929482278e-13,2.746642532727224e-13,2.746263345482377e-13,2.745884367545355e-13,2.745505694748637e-13,2.7451271347682726e-13,2.7447487834903057e-13,2.744370736589353e-13,2.743992802059847e-13,2.7436150756298107e-13,2.743237557098805e-13,2.7428603419316594e-13,2.742483238545897e-13,2.742106342459548e-13,2.7417296534732715e-13,2.741353266842917e-13,2.740976991407464e-13,2.740600922475754e-13,2.740225155147426e-13,2.739849498576484e-13,2.7394740479154056e-13,2.7390988029667563e-13,2.738723858622585e-13,2.7383490244555257e-13,2.7379743954102625e-13,2.7375999712904384e-13,2.737225846781305e-13,2.736851831872518e-13,2.7364780213017617e-13,2.7361045095997056e-13,2.73573110706772e-13,2.735357908288756e-13,2.7349849130683273e-13,2.7346122157316796e-13,2.734239626994417e-13,2.7338672412338645e-13,2.733495058256594e-13,2.733123172183204e-13,2.732751394141952e-13,2.732379818305318e-13,2.7320085386409297e-13,2.7316373665854937e-13,2.731266396158369e-13,2.7308956271679594e-13,2.7305251533785965e-13,2.7301547866368966e-13,2.7297846207587257e-13,2.7294146555535243e-13,2.7290449845830997e-13,2.7286754201024164e-13,2.7283060557246174e-13,2.7279368912601726e-13,2.727568020069129e-13,2.7271992548132474e-13,2.7268306889037136e-13,2.7264624155497543e-13,2.7260942477172123e-13,2.7257262786663073e-13,2.7253585082092935e-13,2.72499102935496e-13,2.724623655473259e-13,2.724256479623778e-13,2.723889501619783e-13,2.723522814270378e-13,2.7231562313480965e-13,2.722789845712649e-13,2.722423750023871e-13,2.7220577583552294e-13,2.7216919634170214e-13,2.721326365024263e-13,2.7209610556384116e-13,2.720595849732863e-13,2.7202308398193467e-13,2.719866025713869e-13,2.7195014996802496e-13,2.7191370765903116e-13,2.718772848757956e-13,2.718408908299263e-13,2.718045070383886e-13,2.7176814271778447e-13,2.717317978498862e-13,2.716954816266669e-13,2.7165917560467317e-13,2.7162288898085323e-13,2.715866217370768e-13,2.7155038304575464e-13,2.715141545028669e-13,2.7147794528578106e-13,2.714417645522846e-13,2.7140559392783493e-13,2.7136944257516217e-13,2.7133331047630436e-13,2.712972067696141e-13,2.7126111311972457e-13,2.7122503866991213e-13,2.7118898340231027e-13,2.711529564359085e-13,2.7111693947436967e-13,2.7108094164158865e-13,2.710449720420799e-13,2.710090124086827e-13,2.7097307185080306e-13,2.7093715035073985e-13,2.7090125699376937e-13,2.7086537355150703e-13,2.708295091141025e-13,2.7079366366394823e-13,2.7075784626715343e-13,2.7072203873396556e-13,2.7068625013534913e-13,2.706504895230847e-13,2.706147387362992e-13,2.705790068316148e-13,2.7054329379158613e-13,2.7050760864894995e-13,2.7047193328121526e-13,2.704362767259425e-13,2.70400638965778e-13,2.703650290144845e-13,2.703294287878115e-13,2.702938473043274e-13,2.7025829356361045e-13,2.702227495099971e-13,2.70187224147858e-13,2.7015171745999866e-13,2.7011623842714493e-13,2.700807690316271e-13,2.7004531825894564e-13,2.700098860919962e-13,2.69974481492721e-13,2.699390864813046e-13,2.6990371002444615e-13,2.698683610700455e-13,2.6983302166658593e-13,2.69797700766711e-13,2.697623983534728e-13,2.697271233561072e-13,2.6969185786070886e-13,2.6965661080124006e-13,2.6962138216084127e-13,2.695861808501526e-13,2.695509889927422e-13,2.69515815503959e-13,2.6948066928054105e-13,2.6944553247407107e-13,2.6941041398598276e-13,2.6937531379956994e-13,2.6934024079309263e-13,2.693051771553678e-13,2.6927013176933407e-13,2.692351046183721e-13,2.6920010456233094e-13,2.69165113827126e-13,2.69130141277268e-13,2.6909519575884193e-13,2.6906025952549776e-13,2.6902534142796917e-13,2.6899044144978717e-13,2.689555684187425e-13,2.6892070462534723e-13,2.6888585890202375e-13,2.6885103123238823e-13,2.6881623042600296e-13,2.687814388101086e-13,2.687466651988821e-13,2.687119183882578e-13,2.6867718073293473e-13,2.6864246103344943e-13,2.6860775927356584e-13,2.6857308423110435e-13,2.6853841829726026e-13,2.6850377025443936e-13,2.6846914008648924e-13,2.684345365531819e-13,2.683999420820764e-13,2.6836536543751333e-13,2.68330815365771e-13,2.6829627432159466e-13,2.682617510558189e-13,2.6822724555243633e-13,2.6819276653978963e-13,2.681582965087589e-13,2.681238441922265e-13,2.680894095742673e-13,2.680550013653527e-13,2.680206020923672e-13,2.679862204703056e-13,2.6795186519627805e-13,2.67917518824087e-13,2.678831900553536e-13,2.678488788742951e-13,2.678145939602617e-13,2.677803179028345e-13,2.677460593858585e-13,2.677118183936316e-13,2.676776035878075e-13,2.6764339759361755e-13,2.676092090771941e-13,2.6757504668696027e-13,2.6754089307480055e-13,2.675067568936046e-13,2.6747263812781e-13,2.674385454082533e-13,2.674044614222463e-13,2.6737039480507617e-13,2.673363455412594e-13,2.6730232224410886e-13,2.672683076362369e-13,2.672343103353906e-13,2.672003389417805e-13,2.671663762044117e-13,2.6713243072791725e-13,2.670985024969511e-13,2.6706460009430824e-13,2.670307063040747e-13,2.6699682971345205e-13,2.6696297030717205e-13,2.669291366506757e-13,2.668953115630052e-13,2.668615036139924e-13,2.6682772135610313e-13,2.667939476345149e-13,2.6676019100607275e-13,2.667264514556432e-13,2.6669273751844497e-13,2.6665903207439513e-13,2.66625343663076e-13,2.665916722694305e-13,2.6655802641149087e-13,2.665243890037908e-13,2.664907685687106e-13,2.664571736114329e-13,2.664235870723727e-13,2.6639001746104904e-13,2.6635646476253715e-13,2.6632293746493863e-13,2.6628941854307135e-13,2.6625591648935813e-13,2.6622243128894907e-13,2.661889714129249e-13,2.661555198703849e-13,2.661220851367155e-13,2.6608867567027093e-13,2.66055274505782e-13,2.660218901058971e-13,2.659885224558967e-13,2.65955179997218e-13,2.6592184579866243e-13,2.6588852830594647e-13,2.65855227504424e-13,2.6582195181867445e-13,2.6578868435145036e-13,2.6575543353159507e-13,2.6572220777108343e-13,2.656889901980526e-13,2.6565578922873023e-13,2.656226048485979e-13,2.655894454528752e-13,2.6555629420344236e-13,2.6552315949975687e-13,2.654900413273726e-13,2.654569480648122e-13,2.6542386290758103e-13,2.653907942384247e-13,2.653577504233812e-13,2.653247146830974e-13,2.652916953878232e-13,2.652586925232381e-13,2.6522571443878435e-13,2.651927443885289e-13,2.6515979072611105e-13,2.651268534372815e-13,2.6509394085494413e-13,2.650610362664696e-13,2.650281480089445e-13,2.649952844029067e-13,2.649624287606282e-13,2.6492958940681865e-13,2.6489676632735173e-13,2.648639678263271e-13,2.648311772491182e-13,2.647984029039815e-13,2.6476564477686067e-13,2.647329111554736e-13,2.6470018541818035e-13,2.646674758568413e-13,2.646347907469254e-13,2.6460211349145716e-13,2.645694523700372e-13,2.645368073687301e-13,2.645041867467216e-13,2.644715739398235e-13,2.644389772113386e-13,2.6440639654740035e-13,2.64373840190967e-13,2.6434129161052436e-13,2.643087590531337e-13,2.6427625074961993e-13,2.6424375019289953e-13,2.642112656178897e-13,2.6417879701084256e-13,2.641463525864528e-13,2.6411391587011416e-13,2.640814950805995e-13,2.640490902042283e-13,2.6401670943962055e-13,2.6398433634453514e-13,2.63951979121656e-13,2.6391964595758314e-13,2.6388732043427606e-13,2.638550107423883e-13,2.6382271686835635e-13,2.637904469828012e-13,2.6375818469985357e-13,2.63725938194174e-13,2.6369370745226525e-13,2.636615006288237e-13,2.636293013700411e-13,2.6359711783463964e-13,2.635649581654081e-13,2.635328060325114e-13,2.635006695827539e-13,2.634685488027529e-13,2.634364518194675e-13,2.634043623349321e-13,2.63372288480107e-13,2.63340230241675e-13,2.633081957308188e-13,2.6327616868133343e-13,2.632441572083895e-13,2.6321216941137294e-13,2.631801890478277e-13,2.631482242211174e-13,2.6311627491803744e-13,2.6308434922229115e-13,2.63052430922994e-13,2.630205281078132e-13,2.6298864076360823e-13,2.629567769584524e-13,2.6292492051292577e-13,2.62893079499052e-13,2.628612619732172e-13,2.6282945177952883e-13,2.6279765697831315e-13,2.627658775565406e-13,2.6273412155505956e-13,2.627023728492553e-13,2.6267063948390313e-13,2.626389214460362e-13,2.626072267610176e-13,2.6257553933540455e-13,2.6254386719847364e-13,2.625122183640083e-13,2.6248057676187515e-13,2.624489504097612e-13,2.6241733929480874e-13,2.6238575141540673e-13,2.623541707324098e-13,2.6232260524809725e-13,2.6229105494967323e-13,2.6225952782018386e-13,2.6222800785136724e-13,2.6219650303014674e-13,2.6216502132809547e-13,2.6213354676004536e-13,2.6210208730143683e-13,2.620706429395811e-13,2.620392216307983e-13,2.620078074206222e-13,2.61976408269227e-13,2.6194502416398487e-13,2.6191366304601366e-13,2.6188230899144594e-13,2.6185096994524094e-13,2.6181965383714863e-13,2.6178834476618274e-13,2.617570506659247e-13,2.6172577152385205e-13,2.616945152546011e-13,2.616632659876051e-13,2.616320316413191e-13,2.616008122032803e-13,2.615696155730619e-13,2.6153842591041477e-13,2.615072511187181e-13,2.6147609908628085e-13,2.614449539955253e-13,2.614138237385566e-13,2.613827083030155e-13,2.613516155622351e-13,2.6132052972877855e-13,2.612894586797626e-13,2.612584024028865e-13,2.6122736875655735e-13,2.6119634198337864e-13,2.6116532994552837e-13,2.611343404902516e-13,2.611033578826162e-13,2.6107238997362867e-13,2.610414367510902e-13,2.6101050604740593e-13,2.6097958215750955e-13,2.609486729175553e-13,2.609177783154019e-13,2.608869061686637e-13,2.608560408020413e-13,2.608251900368853e-13,2.6079436167974923e-13,2.6076354007759345e-13,2.6073273304069845e-13,2.607019405570231e-13,2.6067117041841533e-13,2.6064040700142974e-13,2.606096581016289e-13,2.605789237070284e-13,2.6054821159481875e-13,2.6051750617105126e-13,2.604868152166188e-13,2.6045614649775064e-13,2.6042548444255623e-13,2.6039483682095805e-13,2.6036420362107014e-13,2.6033359259454866e-13,2.6030298819882945e-13,2.602723981892496e-13,2.60241822553979e-13,2.602112690301482e-13,2.601807221044231e-13,2.6015018951760304e-13,2.6011967899595593e-13,2.6008917504800665e-13,2.600586854036827e-13,2.6002821005125083e-13,2.5999775670253633e-13,2.5996730989512617e-13,2.599368773444934e-13,2.599064590389595e-13,2.5987606267595455e-13,2.598456728220322e-13,2.5981529717825813e-13,2.5978494343129687e-13,2.597545961693644e-13,2.59724263082752e-13,2.5969394415987625e-13,2.596636470730884e-13,2.5963335643940547e-13,2.596030799347933e-13,2.5957281754772255e-13,2.5954257693627754e-13,2.595123427461821e-13,2.594821226391235e-13,2.594519242625165e-13,2.594217322835533e-13,2.5939155435324255e-13,2.593613904601486e-13,2.5933124823750024e-13,2.5930111238103296e-13,2.5927099052755786e-13,2.5924088266569217e-13,2.592107964145247e-13,2.5918071649824143e-13,2.591506505395016e-13,2.591206061468192e-13,2.5909056806565686e-13,2.590605439080903e-13,2.59030533662829e-13,2.5900054492432684e-13,2.5897056246633513e-13,2.58940593886858e-13,2.5891063917465706e-13,2.5888070591017135e-13,2.5885077889534945e-13,2.588208657141691e-13,2.587909739365883e-13,2.587610883856429e-13,2.587312166348209e-13,2.587013586729744e-13,2.5867152205612556e-13,2.586416916353478e-13,2.586118749701819e-13,2.585820720495311e-13,2.585522904155266e-13,2.585225149471889e-13,2.584927531901562e-13,2.584630126761706e-13,2.584332783051535e-13,2.584035576123456e-13,2.5837385058673943e-13,2.58344164746264e-13,2.583144850186302e-13,2.582848189252544e-13,2.5825516645517943e-13,2.582255351125654e-13,2.5819590985282344e-13,2.581662981835895e-13,2.581367075987261e-13,2.581071230743605e-13,2.5807755210782275e-13,2.580479946882435e-13,2.580184582957931e-13,2.579889279341437e-13,2.579594110869219e-13,2.579299077433082e-13,2.5790042536982444e-13,2.578709489975992e-13,2.578414860965997e-13,2.578120441231404e-13,2.57782608128884e-13,2.5775318557358194e-13,2.577237764465007e-13,2.576943881903824e-13,2.576650058841924e-13,2.5763563697409883e-13,2.5760628144941704e-13,2.5757694673935985e-13,2.5754761795010826e-13,2.5751830251429017e-13,2.574890078509999e-13,2.5745971908677266e-13,2.574304436441096e-13,2.5740118151241095e-13,2.573719400973167e-13,2.573427045524262e-13,2.573134822867754e-13,2.572842732898126e-13,2.5725508495376606e-13,2.5722590245921317e-13,2.571967332017674e-13,2.571675845636263e-13,2.5713844174554414e-13,2.571093121330953e-13,2.570801957158117e-13,2.5705109986255325e-13,2.5702200980090244e-13,2.5699293290308534e-13,2.5696386915868105e-13,2.569348259232542e-13,2.569057884511302e-13,2.5687676410122907e-13,2.568477602191716e-13,2.5681876207928455e-13,2.567897770305362e-13,2.567608050625875e-13,2.567318535078369e-13,2.567029076672065e-13,2.5667397487643144e-13,2.566450551252194e-13,2.56616155732788e-13,2.565872620265706e-13,2.5655838132911116e-13,2.56529520949769e-13,2.565006662358058e-13,2.5647182449989915e-13,2.5644299573183763e-13,2.5641418722787213e-13,2.563853843616294e-13,2.5635659443266824e-13,2.5632781743082285e-13,2.562990606392768e-13,2.562703094579391e-13,2.5624157117329066e-13,2.562128530587415e-13,2.5618414053385775e-13,2.56155440875339e-13,2.5612675407309896e-13,2.560980873875515e-13,2.5606942626440086e-13,2.560407779673402e-13,2.5601214248632825e-13,2.559835270688235e-13,2.559549171865862e-13,2.559263200903437e-13,2.558977430178645e-13,2.558691714603971e-13,2.558406126589712e-13,2.558120666036237e-13,2.557835405192383e-13,2.5575501992297686e-13,2.5572651204297405e-13,2.5569801686931115e-13,2.556695416140267e-13,2.556410718201156e-13,2.5561261470285715e-13,2.555841774646827e-13,2.555557456679081e-13,2.5552732651819797e-13,2.554989200057106e-13,2.55470533320102e-13,2.554421520493801e-13,2.554137833864241e-13,2.553854273214358e-13,2.5535709103133574e-13,2.553287601297437e-13,2.553004417967932e-13,2.552721431998787e-13,2.552438499717766e-13,2.55215569283087e-13,2.5518730112408777e-13,2.5515905264950646e-13,2.551308095175926e-13,2.551025788862692e-13,2.550743607458572e-13,2.5504616223845655e-13,2.550179690477105e-13,2.5498978831890465e-13,2.549616271846938e-13,2.549334713477148e-13,2.549053279438007e-13,2.5487719696334684e-13,2.548490855264483e-13,2.5482097936099855e-13,2.5479288559026097e-13,2.5476480420467317e-13,2.547367423118091e-13,2.547086856647409e-13,2.546806413742009e-13,2.5465261653839776e-13,2.5462459692923597e-13,2.545965896480753e-13,2.545685946854268e-13,2.545406191270449e-13,2.5451264876987737e-13,2.5448469070282003e-13,2.5445674491642563e-13,2.5442881848403274e-13,2.5440089722755506e-13,2.543729882234629e-13,2.543450985358081e-13,2.543172140051781e-13,2.5428934169874904e-13,2.5426148160714595e-13,2.542336407820713e-13,2.542058050889443e-13,2.5417798158258207e-13,2.5415017025365055e-13,2.541223781415405e-13,2.5409459113642673e-13,2.5406681628080506e-13,2.540390606048573e-13,2.5401131001727474e-13,2.5398357155133725e-13,2.539558451977819e-13,2.539281379745442e-13,2.539004358149388e-13,2.538727457399898e-13,2.5384506774047464e-13,2.5381740882211987e-13,2.5378975494278824e-13,2.537621131112854e-13,2.537344903242057e-13,2.5370687255777337e-13,2.536792668116548e-13,2.536516730766976e-13,2.5362409833735185e-13,2.53596528594259e-13,2.535689708349319e-13,2.5354142505025785e-13,2.5351389821257975e-13,2.534863763468817e-13,2.534588664285601e-13,2.534313754209014e-13,2.534038893670981e-13,2.533764152334831e-13,2.533489530110126e-13,2.5332150965093e-13,2.5329407122064117e-13,2.532666446744265e-13,2.5323923000328135e-13,2.5321183414644207e-13,2.5318444319545474e-13,2.5315706409258347e-13,2.531297037680836e-13,2.531023483315577e-13,2.530750047162818e-13,2.530476729133192e-13,2.5302035984098155e-13,2.529930516328836e-13,2.5296575521034883e-13,2.529384705644788e-13,2.529112046016775e-13,2.528839434794996e-13,2.5285669410735147e-13,2.5282946338273e-13,2.528022374810968e-13,2.5277502330294433e-13,2.527478208394412e-13,2.527206369762392e-13,2.5269345791261327e-13,2.526662905372018e-13,2.5263913484121127e-13,2.526119976984837e-13,2.5258486533203594e-13,2.525577446186876e-13,2.525306424234469e-13,2.5250354498708976e-13,2.524764591775951e-13,2.524493849862355e-13,2.524223292662711e-13,2.523952782820949e-13,2.5236823888992915e-13,2.5234121108108354e-13,2.523142016971057e-13,2.5228719702593464e-13,2.522602039120709e-13,2.5223322918830066e-13,2.5220625916017584e-13,2.521793006634289e-13,2.5215235368943443e-13,2.5212542505932693e-13,2.5209850110208114e-13,2.5207158864176896e-13,2.520446876698019e-13,2.520178049956973e-13,2.5199092697178275e-13,2.519640604105044e-13,2.5193721211268994e-13,2.5191036844813526e-13,2.5188353622059015e-13,2.518567154215297e-13,2.5182991284022513e-13,2.518031148697031e-13,2.517763283021481e-13,2.5174955312907154e-13,2.517227961282222e-13,2.516960437157886e-13,2.51669302672424e-13,2.5164257976725816e-13,2.51615861433805e-13,2.515891544440924e-13,2.515624587896947e-13,2.5153578122827893e-13,2.515091082164003e-13,2.5148244651461537e-13,2.514557961145341e-13,2.514291637623949e-13,2.5140253593772565e-13,2.513759193896457e-13,2.513493208558439e-13,2.513227268330331e-13,2.512961440617765e-13,2.5126957253374627e-13,2.5124301897526174e-13,2.512164699058892e-13,2.5118993205481374e-13,2.511634054137426e-13,2.511368966976589e-13,2.51110392448915e-13,2.5108389938535135e-13,2.510574242134709e-13,2.510309534926712e-13,2.5100449393230614e-13,2.509780455241439e-13,2.5095161496340953e-13,2.5092518883216894e-13,2.508987738284897e-13,2.508723699441745e-13,2.508459838632037e-13,2.5081960219024467e-13,2.507932316121119e-13,2.5076687880437364e-13,2.507405303886047e-13,2.5071419304320127e-13,2.5068786676002624e-13,2.5066155820346083e-13,2.50635254017565e-13,2.5060896086953956e-13,2.5058267875128135e-13,2.5055641431601717e-13,2.505301542302262e-13,2.5050390514994654e-13,2.504776737200605e-13,2.504514466238182e-13,2.5042523050890716e-13,2.503990253672835e-13,2.503728378327323e-13,2.5034665461080785e-13,2.503204823380919e-13,2.5029432100657416e-13,2.502681772389746e-13,2.502420377630865e-13,2.502159092044182e-13,2.5018979817741203e-13,2.5016369142649755e-13,2.501375955688994e-13,2.5011151059666574e-13,2.500854431132301e-13,2.5005937988514724e-13,2.50033327518625e-13,2.500072860057445e-13,2.499812619389625e-13,2.499552421068946e-13,2.4992923310476344e-13,2.499032349246833e-13,2.498772541481659e-13,2.4985127758582326e-13,2.4982531182192503e-13,2.497993634297955e-13,2.497734192365013e-13,2.4974748581811875e-13,2.497215631668189e-13,2.496956578450366e-13,2.4966975670172306e-13,2.4964386630205687e-13,2.4961798663824173e-13,2.495921242618544e-13,2.495662660436671e-13,2.4954041853799246e-13,2.495145882882844e-13,2.49488762181639e-13,2.4946294676424026e-13,2.494371420283481e-13,2.494113545066135e-13,2.4938557110784277e-13,2.493597983674087e-13,2.493340362776034e-13,2.4930829136030565e-13,2.492825505459693e-13,2.492568203591873e-13,2.4923110731378004e-13,2.492053983563956e-13,2.491797000035625e-13,2.4915401224762827e-13,2.4912834159169537e-13,2.491026750039501e-13,2.4907701899019543e-13,2.4905137354281025e-13,2.490257451542101e-13,2.4900012081405723e-13,2.4897450701745975e-13,2.489489102488382e-13,2.489233175139209e-13,2.4889773529981517e-13,2.488721635989546e-13,2.488466088851264e-13,2.488210581854268e-13,2.4879551797632183e-13,2.487699882502762e-13,2.4874447547047414e-13,2.4871896668531825e-13,2.4869346836066406e-13,2.4866798695176347e-13,2.486425095229586e-13,2.4861704253216695e-13,2.48591585971907e-13,2.4856614628688096e-13,2.485407105626303e-13,2.4851528524651484e-13,2.484898703310838e-13,2.4846447225051944e-13,2.4843907811150204e-13,2.48413694350864e-13,2.483883273949175e-13,2.48362964366157e-13,2.48337611693539e-13,2.483122693696659e-13,2.482869438103824e-13,2.4826162215921593e-13,2.4823631083464814e-13,2.482110098293114e-13,2.481857255486129e-13,2.4816044515705293e-13,2.48135175062668e-13,2.4810992166305657e-13,2.480846721384093e-13,2.480594328889483e-13,2.480342039073583e-13,2.480089915808519e-13,2.479837831104883e-13,2.479585848860962e-13,2.4793339690039004e-13,2.479082255302261e-13,2.4788305799747256e-13,2.478579006815943e-13,2.478327599516998e-13,2.478076230452248e-13,2.4778249633388086e-13,2.4775737981043386e-13,2.477322798336872e-13,2.477071836617823e-13,2.4768209765611806e-13,2.4765702180948983e-13,2.476319624704247e-13,2.4760690691771133e-13,2.475818615024652e-13,2.4755683256552565e-13,2.4753180740112773e-13,2.475067923526937e-13,2.4748178741306954e-13,2.474567989128694e-13,2.47431814166873e-13,2.4740683950826987e-13,2.4738187492993494e-13,2.4735692675228576e-13,2.473319823105888e-13,2.4730704792782966e-13,2.472821299167975e-13,2.472572156280855e-13,2.472323113770454e-13,2.472074171566023e-13,2.471825392693989e-13,2.471576650864139e-13,2.4713280091284543e-13,2.47107946741647e-13,2.4708310886534337e-13,2.4705827467524146e-13,2.4703345046641413e-13,2.470086425238166e-13,2.4698383825396404e-13,2.469590439443542e-13,2.4693425958799005e-13,2.4690949145975834e-13,2.4688472698640225e-13,2.468599724453443e-13,2.4683522782961535e-13,2.468104994040619e-13,2.4678577461559864e-13,2.4676105973160063e-13,2.4673636100940285e-13,2.467116659110111e-13,2.4668698069628337e-13,2.4666230535829935e-13,2.4663764614440287e-13,2.466129905366721e-13,2.46588344784967e-13,2.465637088823947e-13,2.465390890663358e-13,2.465144728388848e-13,2.4648986643993125e-13,2.464652760994016e-13,2.464406893343655e-13,2.4641611237725314e-13,2.463915452212198e-13,2.46366994086277e-13,2.4634244650941307e-13,2.4631790871313627e-13,2.462933806906291e-13,2.4626886865201593e-13,2.4624436015414796e-13,2.462198614096393e-13,2.461953786212171e-13,2.461708993605931e-13,2.461464298329789e-13,2.461219700316043e-13,2.460975261493573e-13,2.460730857777156e-13,2.4604865511204477e-13,2.460242341456015e-13,2.459998290614616e-13,2.4597542747081425e-13,2.4595103555920595e-13,2.4592665950237166e-13,2.459022869262477e-13,2.4587792400903447e-13,2.4585357074403514e-13,2.458292332972201e-13,2.458048993141413e-13,2.457805749632276e-13,2.4575626023780877e-13,2.457319612941176e-13,2.4570766579726716e-13,2.45683379905942e-13,2.456591097690895e-13,2.4563484306645776e-13,2.4561058594944084e-13,2.455863384114145e-13,2.4556210659163536e-13,2.455378781893182e-13,2.4551365934615967e-13,2.454894500555615e-13,2.454652564471164e-13,2.4544106623945204e-13,2.4541688556459416e-13,2.4539272054490517e-13,2.453685589135367e-13,2.4534440679527915e-13,2.4532026418357973e-13,2.452961371911832e-13,2.4527201357056046e-13,2.452478994368777e-13,2.452237947836077e-13,2.4519970571390425e-13,2.4517561999950414e-13,2.4515154374597573e-13,2.451274830492966e-13,2.451034256956181e-13,2.450793777833276e-13,2.4505533930594263e-13,2.450313163498958e-13,2.4500729672051164e-13,2.4498328650662567e-13,2.44959285701781e-13,2.4493530038289085e-13,2.449113183744007e-13,2.4488734575562037e-13,2.44863388596341e-13,2.448394347353139e-13,2.4481549024472187e-13,2.447915551181519e-13,2.447676354159216e-13,2.4474371899581143e-13,2.4471981192052387e-13,2.44695914183671e-13,2.4467203183612256e-13,2.446481527546361e-13,2.4462428299245977e-13,2.4460042859339434e-13,2.445765774483959e-13,2.445527356036388e-13,2.445289030527786e-13,2.445050858302134e-13,2.444812718457856e-13,2.444574671362602e-13,2.4443367169531753e-13,2.4440989154797817e-13,2.443861146229197e-13,2.443623469475232e-13,2.443385945397932e-13,2.4431484534249945e-13,2.4429110537600214e-13,2.442673746340244e-13,2.442436591252379e-13,2.4421994681115777e-13,2.441962437028048e-13,2.441725497939266e-13,2.4414887108388715e-13,2.4412519555289593e-13,2.4410152920265984e-13,2.44077878025579e-13,2.4405423001584993e-13,2.4403059116821084e-13,2.4400696147645144e-13,2.439833469237083e-13,2.4395973552278363e-13,2.439361332591457e-13,2.4391254012660825e-13,2.4388896209906927e-13,2.4386538720788626e-13,2.438418214292825e-13,2.438182707302436e-13,2.437947231560102e-13,2.437711846758885e-13,2.43747655283734e-13,2.4372414093733723e-13,2.4370062970040634e-13,2.4367712753304623e-13,2.436536344291361e-13,2.4363015633729626e-13,2.436066813396524e-13,2.4358321538713286e-13,2.435597644214967e-13,2.435363165386498e-13,2.4351287768265465e-13,2.434894478474315e-13,2.4346603296561207e-13,2.434426211514332e-13,2.4341921833982387e-13,2.433958245247277e-13,2.433724456296738e-13,2.433490697871803e-13,2.4332570292306744e-13,2.433023509540533e-13,2.4327900202633464e-13,2.4325566205891607e-13,2.432323310457818e-13,2.4320901489459005e-13,2.43185701769733e-13,2.4316239758114907e-13,2.4313910232284544e-13,2.4311582189344464e-13,2.430925444754854e-13,2.430692759698642e-13,2.430460222684426e-13,2.430227715673372e-13,2.4299952976067903e-13,2.429762968425153e-13,2.4295307869571403e-13,2.429298635344534e-13,2.429066572438647e-13,2.4288345981801787e-13,2.4286027713081135e-13,2.428370974144366e-13,2.4281392654504923e-13,2.427907703898361e-13,2.427676171944669e-13,2.4274447282838123e-13,2.427213372856886e-13,2.4269821642464797e-13,2.426750985088583e-13,2.426519893988251e-13,2.426288890886805e-13,2.4260580342777917e-13,2.425827206976014e-13,2.4255964674974275e-13,2.4253658742689553e-13,2.4251353102391955e-13,2.424904833857433e-13,2.4246744450653767e-13,2.4244442022013224e-13,2.424213988391848e-13,2.4239838619975506e-13,2.4237538229603606e-13,2.42352392953018e-13,2.423294065011094e-13,2.4230642876752477e-13,2.4228346557064043e-13,2.422605052541467e-13,2.4223755363863967e-13,2.422146107183507e-13,2.4219168230285745e-13,2.4216875675351894e-13,2.4214583988212674e-13,2.42122931682934e-13,2.4210003795674326e-13,2.420771470825349e-13,2.420542648633197e-13,2.420313970933338e-13,2.4200853216474317e-13,2.4198567587398775e-13,2.419628282153587e-13,2.419399949743576e-13,2.419171645606903e-13,2.4189434276205633e-13,2.418715295727682e-13,2.4184873076961577e-13,2.418259347797987e-13,2.4180314738229874e-13,2.4178037434738723e-13,2.417576041153535e-13,2.417348424586563e-13,2.4171208937164566e-13,2.4168935061592107e-13,2.4166661464918495e-13,2.416438872352186e-13,2.416211683683932e-13,2.415984638016594e-13,2.415757620100866e-13,2.415530687488017e-13,2.415303897642833e-13,2.415077135445961e-13,2.4148504583839096e-13,2.414623866400757e-13,2.414397416875201e-13,2.41417099486076e-13,2.413944657757791e-13,2.413718405510584e-13,2.4134922954119666e-13,2.413266212687878e-13,2.4130402146527503e-13,2.412814358535158e-13,2.412588529690056e-13,2.412362785367581e-13,2.4121371255123866e-13,2.4119116072675733e-13,2.411686116159724e-13,2.4114607093534437e-13,2.4112353867935933e-13,2.41101020553802e-13,2.4107850512844867e-13,2.41055998111229e-13,2.4103350520154836e-13,2.41011014981992e-13,2.40988533154106e-13,2.4096605971241237e-13,2.409436003478302e-13,2.409211436599845e-13,2.408986953419292e-13,2.4087625538820684e-13,2.4085382948127214e-13,2.408314062377453e-13,2.408089913422104e-13,2.4078659047078865e-13,2.407641922528173e-13,2.407418023665426e-13,2.407194208065425e-13,2.40697053240512e-13,2.406746883147065e-13,2.406523316989407e-13,2.4062998338781254e-13,2.4060764904061324e-13,2.405853173204718e-13,2.4056299388879347e-13,2.405406843985807e-13,2.4051837752558894e-13,2.4049607892493055e-13,2.4047378859123864e-13,2.404515121691496e-13,2.4042923835121604e-13,2.4040697278417893e-13,2.4038471546269113e-13,2.403624720230447e-13,2.403402311745459e-13,2.403179985555859e-13,2.402957797962127e-13,2.4027356361826906e-13,2.402513556538981e-13,2.402291558977871e-13,2.402069699716773e-13,2.4018478661408944e-13,2.401626114488543e-13,2.4014044447067876e-13,2.4011829129301884e-13,2.400961406710299e-13,2.4007399822025204e-13,2.4005186954794135e-13,2.400297434217007e-13,2.400076254508663e-13,2.399855156301792e-13,2.3996341955864733e-13,2.399413260204333e-13,2.399192406166199e-13,2.3989716334196737e-13,2.39875099787257e-13,2.398530387531682e-13,2.398309858325515e-13,2.3980894661003206e-13,2.3978690989864876e-13,2.39764881285092e-13,2.397428607641557e-13,2.397208539122751e-13,2.396988495589317e-13,2.3967685328262056e-13,2.396548650781548e-13,2.3963289051380056e-13,2.396109184354398e-13,2.395889544133932e-13,2.3956700400981436e-13,2.395450560828572e-13,2.3952311619672595e-13,2.395011843462668e-13,2.3947926608550063e-13,2.394573502889084e-13,2.3943544251255647e-13,2.394135427513099e-13,2.3939165655107794e-13,2.3936977280262645e-13,2.393478970539049e-13,2.3932603484475254e-13,2.3930417507812135e-13,2.3928232329588676e-13,2.392604794929466e-13,2.392386492010646e-13,2.392168213394049e-13,2.3919500144176215e-13,2.3917318950305284e-13,2.3915139104698585e-13,2.3912959500889577e-13,2.391078069145173e-13,2.390860322815318e-13,2.390642600573745e-13,2.390424957617486e-13,2.3902073938960293e-13,2.389989964505995e-13,2.389772559082723e-13,2.3895552327430017e-13,2.3893379854365023e-13,2.389120872179859e-13,2.388903782768986e-13,2.388686772240633e-13,2.388469895551579e-13,2.388253042617899e-13,2.388036268416448e-13,2.387819572897217e-13,2.387603010937351e-13,2.387386472612785e-13,2.387170012820692e-13,2.3869536315112436e-13,2.3867373834821527e-13,2.386521158968812e-13,2.3863050127889105e-13,2.386088999680723e-13,2.385873009998964e-13,2.385657098501845e-13,2.3854412651398525e-13,2.38522556457218e-13,2.385009887312291e-13,2.3847942880392665e-13,2.3845787667037706e-13,2.3843633778861166e-13,2.384148012258116e-13,2.3839327244199175e-13,2.3837175688928064e-13,2.383502436467087e-13,2.383287381683843e-13,2.3830724044940506e-13,2.3828575593404605e-13,2.382642737171025e-13,2.3824279924482444e-13,2.3822133251232707e-13,2.38199878956052e-13,2.3817842768651935e-13,2.3815698414214057e-13,2.381355537534953e-13,2.3811412564287084e-13,2.3809270524281304e-13,2.3807129254846766e-13,2.380498929826151e-13,2.3802849568319857e-13,2.380071060749595e-13,2.3798572415306135e-13,2.379643553325048e-13,2.379429887668493e-13,2.3792162987305184e-13,2.3790028406029154e-13,2.3787894049381386e-13,2.378576045847504e-13,2.378362763282948e-13,2.3781496112588055e-13,2.377936481583009e-13,2.37772342828937e-13,2.377510451329996e-13,2.377297604641963e-13,2.377084780188287e-13,2.37687203192547e-13,2.37665941373277e-13,2.37644681768926e-13,2.376234297693588e-13,2.37602185369816e-13,2.3758095395053113e-13,2.3755972473485215e-13,2.3753850310494653e-13,2.37517289056072e-13,2.3749608796078884e-13,2.3747488905784705e-13,2.3745369772173606e-13,2.374325193192739e-13,2.3741134310073664e-13,2.3739017443486793e-13,2.3736901331695507e-13,2.373478651061762e-13,2.3732671906814216e-13,2.373055805639521e-13,2.3728444958890993e-13,2.372633314945732e-13,2.372422155618492e-13,2.3722110714421143e-13,2.372000115875144e-13,2.371789181841125e-13,2.3715783228177264e-13,2.3713675387582805e-13,2.3711568830454547e-13,2.3709462487550926e-13,2.370735689288938e-13,2.370525204600489e-13,2.3703148479967253e-13,2.370104512705409e-13,2.36989425205255e-13,2.3696841192884854e-13,2.3694740077546676e-13,2.3692639707204283e-13,2.3690540081395523e-13,2.3688441731870165e-13,2.368634359355534e-13,2.3684246198390285e-13,2.368214954591448e-13,2.368005416712595e-13,2.367795899846068e-13,2.3675864571105693e-13,2.367377141549642e-13,2.3671678469198015e-13,2.3669586262834565e-13,2.36674947959484e-13,2.366540459822646e-13,2.366331460873622e-13,2.3661225357352796e-13,2.3659136843620137e-13,2.365704959647852e-13,2.3654962556494035e-13,2.365287625279467e-13,2.365079121376195e-13,2.3648706381083445e-13,2.3646622283328035e-13,2.364453892004247e-13,2.364245681886483e-13,2.3640374922974836e-13,2.3638293760197447e-13,2.363621333008102e-13,2.3634134159522e-13,2.363205519318859e-13,2.362997695816367e-13,2.3627899980788696e-13,2.362582320684577e-13,2.3623747162862434e-13,2.362167184838981e-13,2.3619597789030926e-13,2.361752393204992e-13,2.361545080323546e-13,2.361337840214023e-13,2.361130725363064e-13,2.360923630644925e-13,2.360716608564764e-13,2.360509711554094e-13,2.360302834597811e-13,2.3600960301459117e-13,2.35988929815394e-13,2.3596826909800617e-13,2.3594761037563793e-13,2.3592695888594976e-13,2.3590631462451146e-13,2.35885682819823e-13,2.3586505299977913e-13,2.358444303947191e-13,2.3582382022766697e-13,2.3580321203750724e-13,2.3578261104909994e-13,2.3576201725804194e-13,2.357414358800719e-13,2.3572085646869594e-13,2.3570028424148405e-13,2.356797191940485e-13,2.356591665348602e-13,2.3563861583201114e-13,2.3561807229579916e-13,2.355975411292561e-13,2.3557701191138984e-13,2.355564898470557e-13,2.355359749318927e-13,2.3551547236169563e-13,2.354949717299963e-13,2.354744782344087e-13,2.354539918705869e-13,2.3543351782710655e-13,2.3541304571198784e-13,2.3539258071562087e-13,2.353721280211787e-13,2.353516772475241e-13,2.353312335796413e-13,2.3531079701321064e-13,2.3529037272421653e-13,2.3526995034594844e-13,2.352495350561976e-13,2.352291268506593e-13,2.352087308981467e-13,2.3518833684634095e-13,2.351679498658576e-13,2.3514757512014276e-13,2.3512720226764823e-13,2.3510683647361935e-13,2.3508647773377755e-13,2.3506613120442814e-13,2.350457865583535e-13,2.350254489536537e-13,2.3500511838606495e-13,2.34984800004769e-13,2.3496448349684393e-13,2.3494417401326203e-13,2.349238766978735e-13,2.349035812484556e-13,2.348832928106458e-13,2.348630113802061e-13,2.3484274209389334e-13,2.3482247466372e-13,2.3480221422822575e-13,2.3478196078318715e-13,2.347617194582846e-13,2.3474147997973155e-13,2.347212474789869e-13,2.347010270804348e-13,2.3468080852091696e-13,2.3466059692659284e-13,2.3464039229326443e-13,2.346201997382693e-13,2.346000090125901e-13,2.3457982523533535e-13,2.3455964840232156e-13,2.345394836238564e-13,2.345193206650296e-13,2.3449916463791557e-13,2.344790206475611e-13,2.344588784696134e-13,2.3443874321088275e-13,2.3441861486721066e-13,2.3439849853664347e-13,2.343783840088762e-13,2.343582763837145e-13,2.3433817565701425e-13,2.343180869198382e-13,2.342979999758953e-13,2.3427791991800346e-13,2.3425785183199904e-13,2.34237785532079e-13,2.342177261058317e-13,2.3419767354913755e-13,2.3417763294087866e-13,2.341575941092072e-13,2.3413756213475276e-13,2.341175370134102e-13,2.340975238171237e-13,2.340775123879672e-13,2.3405750779962846e-13,2.3403751511885963e-13,2.340175241981537e-13,2.339975401060031e-13,2.3397756283832695e-13,2.3395759745496864e-13,2.339376338222846e-13,2.3391767700185433e-13,2.3389772698961095e-13,2.338777888385055e-13,2.3385785242872476e-13,2.3383792281495183e-13,2.338180050449794e-13,2.337980890093453e-13,2.3377817975757104e-13,2.337582772856139e-13,2.3373838663440305e-13,2.3371849770824874e-13,2.3369861554980493e-13,2.336787401550426e-13,2.3365887655804355e-13,2.33639014676858e-13,2.336191595472884e-13,2.3359931619829195e-13,2.335794745582019e-13,2.335596396576931e-13,2.335398114927604e-13,2.335199950855419e-13,2.3350018037805386e-13,2.3348037239414787e-13,2.334605711298325e-13,2.334407816004431e-13,2.3342099376164606e-13,2.334012126304862e-13,2.3338144321720767e-13,2.333616754876929e-13,2.333419144538924e-13,2.333221601118381e-13,2.333024174649996e-13,2.332826764928529e-13,2.3326294220056984e-13,2.3324321458419587e-13,2.3322349864044187e-13,2.332037843623453e-13,2.331840767483152e-13,2.3316437579441054e-13,2.331446864905995e-13,2.331249988434488e-13,2.3310531784462086e-13,2.3308564847903753e-13,2.330659807633913e-13,2.3304631968429515e-13,2.330266652378311e-13,2.3300702240220625e-13,2.3298738120758625e-13,2.329677466338653e-13,2.3294811867713874e-13,2.329285023089144e-13,2.329088875727997e-13,2.328892794419857e-13,2.3286968288296657e-13,2.3285008794940975e-13,2.3283049960948963e-13,2.328109178593244e-13,2.327913476587366e-13,2.3277177907477994e-13,2.327522170689532e-13,2.327326616373877e-13,2.327131177332502e-13,2.3269357543694885e-13,2.3267403970332286e-13,2.326545154805574e-13,2.326349928590559e-13,2.3261547678867305e-13,2.3259596726556263e-13,2.325764692312813e-13,2.325569727895324e-13,2.3253748288353797e-13,2.3251799950946474e-13,2.324985276022563e-13,2.3247905727888454e-13,2.3245959347595454e-13,2.3244014112346033e-13,2.3242069034830453e-13,2.324012460821399e-13,2.323818083211555e-13,2.3236238198875927e-13,2.3234295722506827e-13,2.323235389551451e-13,2.323041271751916e-13,2.322847268020452e-13,2.3226532798900604e-13,2.322459356545623e-13,2.322265547106334e-13,2.3220717532038664e-13,2.321878023973894e-13,2.3216843593786574e-13,2.321490808471912e-13,2.321297273016625e-13,2.321103802082993e-13,2.320910395633382e-13,2.3207171026562605e-13,2.320523825045584e-13,2.3203306118062246e-13,2.3201375118777863e-13,2.3199444272522626e-13,2.319751406885632e-13,2.31955845074048e-13,2.3193656076913896e-13,2.3191727798608084e-13,2.3189800161396555e-13,2.31878731649064e-13,2.318594729723475e-13,2.3184021580907593e-13,2.318209650418503e-13,2.318017255467867e-13,2.3178248755888615e-13,2.317632559558916e-13,2.317440307340954e-13,2.3172481676315317e-13,2.3170560429102776e-13,2.3168639818899785e-13,2.316671984533681e-13,2.316480099473482e-13,2.316288229318332e-13,2.316096422716521e-13,2.3159047282519e-13,2.3157130486302126e-13,2.3155214324514753e-13,2.315329879678949e-13,2.3151384388322893e-13,2.314947012746035e-13,2.314755649955968e-13,2.314564350425472e-13,2.314373162610152e-13,2.314181989473046e-13,2.313990879485849e-13,2.3137998810562294e-13,2.313608897243401e-13,2.3134179764710926e-13,2.3132271187028984e-13,2.3130363722826957e-13,2.3128456403976764e-13,2.312654971407743e-13,2.3124643652766076e-13,2.3122738702845053e-13,2.312083389746312e-13,2.3118929719582465e-13,2.3117026651529086e-13,2.3115123727407406e-13,2.3113221429703e-13,2.3111319758055087e-13,2.3109419194155773e-13,2.3107518773381177e-13,2.3105618977582625e-13,2.3103719806400523e-13,2.310182174089455e-13,2.3099923817709584e-13,2.3098026518064164e-13,2.3096130322544605e-13,2.3094234268745426e-13,2.3092338837411536e-13,2.3090444028185403e-13,2.3088550321023466e-13,2.308665675478389e-13,2.308476380958133e-13,2.3082871485059446e-13,2.308098026054621e-13,2.307908917616056e-13,2.3077198711388343e-13,2.307530934508717e-13,2.307342011831962e-13,2.307153151010089e-13,2.306964352007667e-13,2.3067756626478633e-13,2.306586987162506e-13,2.306398373390485e-13,2.3062098212964856e-13,2.306021378641225e-13,2.305832949781814e-13,2.3056445824946576e-13,2.3054563244937303e-13,2.3052680802299147e-13,2.305079897432846e-13,2.304891776067409e-13,2.304703763785378e-13,2.3045157651624164e-13,2.3043278278659234e-13,2.3041399518608976e-13,2.3039521847370544e-13,2.3037644311945547e-13,2.303576738838701e-13,2.303389155212758e-13,2.3032015851100704e-13,2.303014076089463e-13,2.302826628116136e-13,2.30263928867154e-13,2.30245196267302e-13,2.302264697617555e-13,2.302077493470455e-13,2.301890397651501e-13,2.3017033152017555e-13,2.3015162935564893e-13,2.3013293800893204e-13,2.301142479933914e-13,2.300955640479353e-13,2.300768861691145e-13,2.300582190881481e-13,2.3003955333072537e-13,2.3002089362960814e-13,2.300022399813585e-13,2.299835971110667e-13,2.299649555567165e-13,2.299463200449376e-13,2.299276952962328e-13,2.2990907185778834e-13,2.298904544516437e-13,2.298718430743805e-13,2.2985324244039707e-13,2.2983464310912526e-13,2.298160497964967e-13,2.2979746249910405e-13,2.2977888592525473e-13,2.297603106465988e-13,2.2974174137297366e-13,2.297231828081279e-13,2.297046255328568e-13,2.2968607425243614e-13,2.296675289634776e-13,2.296489943636632e-13,2.296304610459579e-13,2.296119337095673e-13,2.295934123511141e-13,2.29574901662227e-13,2.2955639224801345e-13,2.295378888016225e-13,2.295193960101522e-13,2.2950090448779833e-13,2.2948241892317663e-13,2.294639393129289e-13,2.294454703381238e-13,2.294270026250517e-13,2.2940854085629553e-13,2.293900850285078e-13,2.293716398167417e-13,2.293531958593545e-13,2.2933475783291013e-13,2.29316330407959e-13,2.292979042318907e-13,2.292794839767638e-13,2.2926106963924964e-13,2.292426658839064e-13,2.2922426337014336e-13,2.292058667640237e-13,2.291874760622293e-13,2.291690959233398e-13,2.291507170187571e-13,2.291323440085623e-13,2.291139815468599e-13,2.290956203140284e-13,2.290772649656712e-13,2.290589154984889e-13,2.290405765606308e-13,2.290222388444209e-13,2.29003906999504e-13,2.2898558102259126e-13,2.2896726555589005e-13,2.289489513036431e-13,2.2893064290955015e-13,2.2891234501137084e-13,2.2889404832226937e-13,2.288757574814952e-13,2.288574724857777e-13,2.2883919796695803e-13,2.288209246500724e-13,2.2880265716844827e-13,2.2878439551882544e-13,2.2876614432713946e-13,2.287478943302723e-13,2.2872965015564236e-13,2.287114164247649e-13,2.286931838833883e-13,2.2867495715450843e-13,2.2865673623488313e-13,2.286385257401451e-13,2.286203164278421e-13,2.286021129150841e-13,2.285839151986393e-13,2.28565727888271e-13,2.285475417533e-13,2.285293614049635e-13,2.2851119144863115e-13,2.284930226624363e-13,2.284748596532202e-13,2.284567024177691e-13,2.2843855555560607e-13,2.284204098565916e-13,2.2840226992171705e-13,2.2838413574777887e-13,2.283660119284665e-13,2.2834788926534153e-13,2.283297723535584e-13,2.283116657824399e-13,2.282935603623061e-13,2.282754606839424e-13,2.2825736674416297e-13,2.282392831264795e-13,2.2822120065286795e-13,2.2820312390829917e-13,2.2818505288959753e-13,2.281669921744765e-13,2.281489325965418e-13,2.28130878734963e-13,2.2811283516311344e-13,2.2809479272330405e-13,2.280767559903618e-13,2.2805872496112853e-13,2.280407042032018e-13,2.280226845704774e-13,2.2800467063200327e-13,2.2798666238463114e-13,2.279686643901956e-13,2.2795066751415156e-13,2.279326763197806e-13,2.2791469536460356e-13,2.2789671552272757e-13,2.278787413531182e-13,2.278607728526444e-13,2.2784281457308625e-13,2.278248574000654e-13,2.278069058868033e-13,2.2778896003017883e-13,2.277710243762438e-13,2.2775308982210906e-13,2.277351609152646e-13,2.277172421974742e-13,2.276993245744489e-13,2.276814125893884e-13,2.2766350623918896e-13,2.2764561005990816e-13,2.276277149687018e-13,2.2760982550306034e-13,2.2759194165988963e-13,2.275740679695538e-13,2.2755619536062816e-13,2.2753832836490636e-13,2.275204715084905e-13,2.2750261572850404e-13,2.2748476555247627e-13,2.2746692097733014e-13,2.274490865234958e-13,2.274312531394725e-13,2.2741342534711465e-13,2.2739560314335474e-13,2.2737779104296357e-13,2.2735998000579123e-13,2.2734217906303573e-13,2.2732437466662032e-13,2.2730658487068785e-13,2.2728880064217516e-13,2.2727101295932178e-13,2.2725323985932673e-13,2.2723546330454124e-13,2.2721770132088304e-13,2.2719994488942337e-13,2.2718218500250507e-13,2.2716443966914838e-13,2.2714669987888626e-13,2.271289566325047e-13,2.2711122792215438e-13,2.2709350474581595e-13,2.2707577811270487e-13,2.2705806599812963e-13,2.2704035042635027e-13,2.270226493614616e-13,2.270049538154938e-13,2.2698725481168103e-13,2.2696957029732188e-13,2.2695189129285746e-13,2.2693420882991449e-13,2.26916540839023e-13,2.2689887834902118e-13,2.268812123999146e-13,2.2686356090549195e-13,2.2684590595155127e-13,2.2682826544073445e-13,2.2681063041584503e-13,2.267929919308235e-13,2.267753678716161e-13,2.2675774928938683e-13,2.267401272464188e-13,2.2672251961198958e-13,2.2670491744561026e-13,2.2668731181789258e-13,2.2666972058147284e-13,2.2665212588331905e-13,2.2663454556498738e-13,2.2661697069987066e-13,2.2659939237243241e-13,2.2658182840763245e-13,2.2656426988717446e-13,2.2654670790381452e-13,2.2652916026594326e-13,2.2651161806356147e-13,2.2649407239770452e-13,2.2647654106022065e-13,2.2645900625888342e-13,2.264414857745268e-13,2.2642397071095072e-13,2.2640645218295971e-13,2.2638894795489033e-13,2.263714491388037e-13,2.2635394685774777e-13,2.263364588595882e-13,2.2631897626463395e-13,2.2630149020416304e-13,2.2628401840959695e-13,2.262665431491531e-13,2.262490821433041e-13,2.262316265260761e-13,2.262141674424345e-13,2.2619672259645226e-13,2.2617928313036762e-13,2.2616184019734052e-13,2.2614441148507068e-13,2.261269881439953e-13,2.2610956133545547e-13,2.2609214873080424e-13,2.260747326583444e-13,2.2605733077854486e-13,2.260399342554786e-13,2.2602253426409313e-13,2.2600514844855472e-13,2.259877679810998e-13,2.259703840448221e-13,2.2595301426761122e-13,2.2593564982985402e-13,2.2591828192277709e-13,2.259009281580199e-13,2.2588357092361536e-13,2.2586622782038316e-13,2.2584889004226543e-13,2.258315487940146e-13,2.25814221660244e-13,2.2579689984301083e-13,2.2577957455516566e-13,2.2576226336514124e-13,2.2574495748309712e-13,2.257276481299687e-13,2.257103528580342e-13,2.256930541147042e-13,2.2567576944150091e-13,2.2565849006205917e-13,2.256412072107607e-13,2.2562393841301648e-13,2.2560667490052894e-13,2.2558940791573002e-13,2.255721549679455e-13,2.2555490729693226e-13,2.2553765615315961e-13,2.2552041902989375e-13,2.2550317843357337e-13,2.2548595184677194e-13,2.2546873052264215e-13,2.2545150572502067e-13,2.2543429492046434e-13,2.254170893701461e-13,2.2539988034590546e-13,2.253826852983084e-13,2.2536549549653512e-13,2.2534830222041522e-13,2.2533112290454939e-13,2.2531394011405775e-13,2.252967712729107e-13,2.2527960766360572e-13,2.2526244057926145e-13,2.2524528742792553e-13,2.2522813950006855e-13,2.2521098809676517e-13,2.2519385061016568e-13,2.251767183387011e-13,2.251595825913894e-13,2.2514246074450897e-13,2.2512533542151785e-13,2.2510822398812622e-13,2.2509111775600448e-13,2.2507400804738177e-13,2.2505691221213876e-13,2.2503982156987205e-13,2.2502272745072062e-13,2.250056471887604e-13,2.2498857211150198e-13,2.2497149355698124e-13,2.2495442884349474e-13,2.2493736065249765e-13,2.2492030629178006e-13,2.2490325710201458e-13,2.2488620443437132e-13,2.248691655809028e-13,2.2485213189016188e-13,2.2483509472118218e-13,2.2481807135030374e-13,2.2480105313394706e-13,2.247840314389967e-13,2.2476702352610524e-13,2.2475001213438699e-13,2.2473301451404905e-13,2.2471602203459734e-13,2.2469902607597417e-13,2.2468204387274072e-13,2.2466506680223717e-13,2.246480862522237e-13,2.2463111944164013e-13,2.2461415775564867e-13,2.2459719258981474e-13,2.245802411474819e-13,2.245632862250883e-13,2.2454634501559262e-13,2.2452940891716643e-13,2.2451246933835718e-13,2.244955434565681e-13,2.244786226777597e-13,2.2446169841825185e-13,2.2444478783991705e-13,2.2442788235649228e-13,2.244109733920577e-13,2.2439407809297964e-13,2.2437717931268806e-13,2.2436029418722466e-13,2.2434341414326038e-13,2.2432653061778211e-13,2.2430966073136616e-13,2.2429279591842719e-13,2.242759276236797e-13,2.2425907295225887e-13,2.2424222334631112e-13,2.2422537025826605e-13,2.2420853077784243e-13,2.241916878151322e-13,2.2417485844958906e-13,2.2415803413621857e-13,2.2414120634028252e-13,2.2412439212585845e-13,2.2410758295565093e-13,2.2409077030260478e-13,2.2407397121544548e-13,2.2405717716456457e-13,2.2404037963057763e-13,2.2402359564688243e-13,2.2400680817990612e-13,2.239900342528405e-13,2.2397326534886215e-13,2.2395649296134494e-13,2.2393973409819298e-13,2.239229802502376e-13,2.239062229184913e-13,2.2388947909559459e-13,2.2387274028002138e-13,2.2385599798041092e-13,2.2383926917416399e-13,2.2382253688371871e-13,2.238058180763285e-13,2.2378910426317882e-13,2.2377238696559387e-13,2.2375568313562723e-13,2.2373898429207505e-13,2.2372228196385637e-13,2.2370559308784855e-13,2.2368890919044667e-13,2.236722218081526e-13,2.2365554786269142e-13,2.236388704321907e-13,2.2362220642828632e-13,2.2360554739001187e-13,2.235888848664815e-13,2.2357223575421823e-13,2.235555915998228e-13,2.2353894395996056e-13,2.2352230971606545e-13,2.2350568042229324e-13,2.2348904764284903e-13,2.2347242824410093e-13,2.234558053595469e-13,2.2343919584552362e-13,2.234225912687532e-13,2.234059832059807e-13,2.2338938849851622e-13,2.2337279872060573e-13,2.2335620545650254e-13,2.2333962553251357e-13,2.2332305053039687e-13,2.2330647204190213e-13,2.2328990687835666e-13,2.232733382283127e-13,2.2325678289312303e-13,2.2324023246704031e-13,2.232236785542828e-13,2.232071379412625e-13,2.2319060222971282e-13,2.231740630313174e-13,2.2315753711757073e-13,2.2314101609767536e-13,2.231244915907687e-13,2.2310798035345076e-13,2.230914656290141e-13,2.2307496416414115e-13,2.2305846758045773e-13,2.230419675094989e-13,2.2302548068309116e-13,2.2300899873029864e-13,2.2299251329007934e-13,2.2297604107942676e-13,2.2295957373483187e-13,2.2294310290266404e-13,2.2292664528510693e-13,2.2291018417988232e-13,2.2289373627931256e-13,2.2287729323224134e-13,2.2286084669736517e-13,2.2284441335223474e-13,2.228279848530898e-13,2.2281155286600765e-13,2.227951340537903e-13,2.227787200800619e-13,2.2276230261826935e-13,2.2274589831648847e-13,2.227294905265615e-13,2.2271309588675887e-13,2.226967060729875e-13,2.2268031277095163e-13,2.2266393260423353e-13,2.226475572560943e-13,2.226311784195773e-13,2.2261481270359917e-13,2.2259845179876404e-13,2.2258208740544278e-13,2.2256573611790948e-13,2.2254938134182065e-13,2.2253303966170024e-13,2.225167027803655e-13,2.2250036241037547e-13,2.224840351216489e-13,2.2246771262431554e-13,2.2245138663823219e-13,2.2243507371873476e-13,2.2241876558325446e-13,2.2240245395893444e-13,2.2238615538655024e-13,2.2236985332526927e-13,2.223535643061719e-13,2.2233728005883373e-13,2.223209923225173e-13,2.2230471761378008e-13,2.2228844766946905e-13,2.2227217423610331e-13,2.2225591381573963e-13,2.2223965815248524e-13,2.2222339900010462e-13,2.222071528461761e-13,2.221909032030764e-13,2.221746665487431e-13,2.2215843463935947e-13,2.2214219924074125e-13,2.2212597681638468e-13,2.2210975912970357e-13,2.2209353795372948e-13,2.2207732973753927e-13,2.2206112625176616e-13,2.2204491927664644e-13,2.2202872524685983e-13,2.2201252772769358e-13,2.219963431442406e-13,2.2198016327914241e-13,2.2196397992461904e-13,2.21947809491403e-13,2.2193164376932564e-13,2.219154745577823e-13,2.2189931825316695e-13,2.2188316665249006e-13,2.2186701156231122e-13,2.218508693647077e-13,2.21834723677581e-13,2.2181859087347528e-13,2.218024627613419e-13,2.217863311596572e-13,2.2177021242668523e-13,2.217540983785271e-13,2.217379808407944e-13,2.2172187615749261e-13,2.2170577615186176e-13,2.2168967265663764e-13,2.2167358200158918e-13,2.2165748785693775e-13,2.2164140654297222e-13,2.216253298948069e-13,2.2160924975702776e-13,2.215931824357231e-13,2.2157711977311713e-13,2.2156105362089114e-13,2.2154500027095455e-13,2.2152895157263043e-13,2.2151289938468485e-13,2.2149685998486972e-13,2.214808170954347e-13,2.2146478698470456e-13,2.214487615138104e-13,2.214327325533025e-13,2.2141671635738407e-13,2.2140070479425646e-13,2.2138468974152584e-13,2.2136868743929522e-13,2.2135268976282554e-13,2.2133668859676808e-13,2.2132070016714724e-13,2.2130470824795141e-13,2.2128872905583005e-13,2.2127275447778652e-13,2.2125677641019087e-13,2.2124081105564931e-13,2.2122485030819616e-13,2.2120888607121825e-13,2.211929345332999e-13,2.2117698759549561e-13,2.2116103716819842e-13,2.2114509942599188e-13,2.211291581943162e-13,2.21113229638432e-13,2.2109730567107118e-13,2.2108137821428044e-13,2.210654634193551e-13,2.210495532060189e-13,2.2103363950329646e-13,2.210177384485388e-13,2.210018419684511e-13,2.2098594199902533e-13,2.209700546636891e-13,2.2095416383904932e-13,2.2093828563926235e-13,2.20922412002646e-13,2.209065348767816e-13,2.2089067036193713e-13,2.2087481040338368e-13,2.2085894695564206e-13,2.2084309610511272e-13,2.2082724980400977e-13,2.2081140001378275e-13,2.207955628069857e-13,2.2077972211110984e-13,2.2076389398948892e-13,2.2074807040588555e-13,2.2073224333327466e-13,2.2071642882117836e-13,2.2070061884027412e-13,2.2068480537043809e-13,2.2066900444740125e-13,2.2065320804874572e-13,2.2063740816123832e-13,2.2062162080683975e-13,2.2060582996364496e-13,2.205900516444452e-13,2.2057427783830753e-13,2.205585005434607e-13,2.2054273575896e-13,2.205269754807495e-13,2.2051121171392112e-13,2.204954604438149e-13,2.2047971367324147e-13,2.204639634141456e-13,2.2044822563817274e-13,2.204324843737434e-13,2.204167555833838e-13,2.2040103128132645e-13,2.2038530349091509e-13,2.2036958816101547e-13,2.2035387731269905e-13,2.2033816297613534e-13,2.2032246108654982e-13,2.2030676367184305e-13,2.2029106276899965e-13,2.2027537429962554e-13,2.2025968234219095e-13,2.2024400280923258e-13,2.2022832774001009e-13,2.2021264918284478e-13,2.2019698303668746e-13,2.201813213475996e-13,2.201656561706906e-13,2.2015000339134585e-13,2.201343550624183e-13,2.2011870324579544e-13,2.2010306381331736e-13,2.2008742089323004e-13,2.2007179034835397e-13,2.2005616424283914e-13,2.2004053464984764e-13,2.200249174186883e-13,2.2000930462027564e-13,2.1999368833452291e-13,2.1997808439724744e-13,2.199624848861182e-13,2.199468818877895e-13,2.199312912246072e-13,2.1991569707432142e-13,2.1990011525030742e-13,2.1988453784146975e-13,2.198689569456758e-13,2.1985338836286283e-13,2.1983782418866303e-13,2.1982225652765824e-13,2.1980670116636757e-13,2.1979115020714089e-13,2.197755957612643e-13,2.1976005360185891e-13,2.1974450795590927e-13,2.1972897458761467e-13,2.1971344561049916e-13,2.1969791314700114e-13,2.1968239294795484e-13,2.1966687713357544e-13,2.1965135783297904e-13,2.1963585078365482e-13,2.19620348112499e-13,2.196048419552957e-13,2.1958934803620868e-13,2.1957385063118934e-13,2.1955836545552793e-13,2.1954288464723437e-13,2.1952740035318445e-13,2.1951192827537584e-13,2.1949646055847324e-13,2.1948098935599405e-13,2.19465530356663e-13,2.1945007571178976e-13,2.1943461758152355e-13,2.1941917164133575e-13,2.194037222158796e-13,2.1938828497180102e-13,2.1937285207146307e-13,2.1935741568604658e-13,2.1934199146897703e-13,2.1932657158923606e-13,2.1931114822461023e-13,2.1929573701532393e-13,2.192803301369677e-13,2.1926491977392417e-13,2.1924952155323588e-13,2.1923411984799396e-13,2.192187302764633e-13,2.1920334502522824e-13,2.1918795628964323e-13,2.191725796748239e-13,2.1915720737393741e-13,2.1914183158890851e-13,2.1912646791172273e-13,2.1911110854212058e-13,2.190957456885871e-13,2.1908039492999721e-13,2.1906504068761885e-13,2.1904969853159638e-13,2.1903436067260477e-13,2.1901901933004193e-13,2.1900369006097375e-13,2.1898836508262266e-13,2.1897303662092126e-13,2.1895772021987615e-13,2.1894240810324755e-13,2.189270925034933e-13,2.1891178895157967e-13,2.1889648191669214e-13,2.1888118692111347e-13,2.1886589619947943e-13,2.1885060199510215e-13,2.1883531981725598e-13,2.1882004190708915e-13,2.1880476051441323e-13,2.1878949113551345e-13,2.1877422601804073e-13,2.1875895741829674e-13,2.1874370081959644e-13,2.1872844073878545e-13,2.1871319265054175e-13,2.1869794881333332e-13,2.186827014942579e-13,2.1866746615505495e-13,2.1865223506066983e-13,2.1863700048466498e-13,2.186217778758602e-13,2.1860655950566879e-13,2.1859133765410853e-13,2.185761277570983e-13,2.1856091437888843e-13,2.1854571294680702e-13,2.1853051574302657e-13,2.1851531505830303e-13,2.1850012630709531e-13,2.1848494177801848e-13,2.1846975376825878e-13,2.184545776794243e-13,2.184394058065636e-13,2.1842423045328367e-13,2.1840906700836066e-13,2.1839390008319612e-13,2.1837874505802128e-13,2.1836359423858636e-13,2.183484399391793e-13,2.1833329752723055e-13,2.183181593148986e-13,2.183030176228673e-13,2.1828788780578507e-13,2.1827276218220926e-13,2.1825763307921036e-13,2.1824251583867314e-13,2.1822739511889885e-13,2.1821228625327286e-13,2.1819718157099733e-13,2.1818207340976662e-13,2.181669770902335e-13,2.181518849479742e-13,2.18136789327045e-13,2.1812170553538452e-13,2.1810662591493387e-13,2.18091542816102e-13,2.1807647153413169e-13,2.180613967739745e-13,2.1804633382241883e-13,2.1803127503199404e-13,2.1801621276367652e-13,2.1800116229158973e-13,2.1798611597460328e-13,2.1797106618002162e-13,2.1795602816932155e-13,2.1794099430770375e-13,2.1792595696879158e-13,2.1791093140143343e-13,2.178959023569834e-13,2.1788088507588028e-13,2.1786587193385665e-13,2.1785085531504735e-13,2.1783585044729343e-13,2.178208497126341e-13,2.1780584550149864e-13,2.177908530291484e-13,2.1777586468392013e-13,2.1776087286252862e-13,2.1774589276767363e-13,2.1773090919686578e-13,2.1771593734443982e-13,2.1770096960920854e-13,2.1768599839834268e-13,2.1767103889364556e-13,2.1765608350020333e-13,2.176411246314479e-13,2.1762617745666944e-13,2.1761123438721826e-13,2.1759628784277862e-13,2.1758135298014534e-13,2.1756641464274178e-13,2.1755148797904192e-13,2.1753656541081688e-13,2.175216393681515e-13,2.1750672498705458e-13,2.1749181469553735e-13,2.174769009299129e-13,2.174619988137427e-13,2.1744710078126925e-13,2.1743219927502483e-13,2.1741730940614154e-13,2.1740241606371326e-13,2.1738753435059495e-13,2.173726567113949e-13,2.173577755989914e-13,2.1734290610383972e-13,2.173280406767554e-13,2.1731317177681226e-13,2.1729831448208366e-13,2.1728346124958364e-13,2.1726860454457243e-13,2.1725375943275944e-13,2.1723891084866888e-13,2.172240738497765e-13,2.1720924090340742e-13,2.1719440448511366e-13,2.1717957964003635e-13,2.1716475884167535e-13,2.1714993457174555e-13,2.1713512186307127e-13,2.1712031319531817e-13,2.1710550105635523e-13,2.1709070046670744e-13,2.1707589640609085e-13,2.1706110388684e-13,2.1704631539887784e-13,2.1703152344031088e-13,2.1701674301120372e-13,2.1700196660762166e-13,2.1698718673380178e-13,2.169724183775564e-13,2.1695765404108425e-13,2.169428862347443e-13,2.16928129934114e-13,2.1691337016386428e-13,2.168986218914249e-13,2.1688387762919812e-13,2.1686912989772698e-13,2.1685439365223539e-13,2.1683966141123576e-13,2.168249257013697e-13,2.1681020146567274e-13,2.1679548122875885e-13,2.1678075752335945e-13,2.16766045280339e-13,2.167513295690887e-13,2.1673662531236788e-13,2.1672192504494067e-13,2.1670722130966939e-13,2.1669252901717124e-13,2.1667784070828862e-13,2.166631489319507e-13,2.1664846858664972e-13,2.1663379221929783e-13,2.1661911238488218e-13,2.1660444396978758e-13,2.1658977208789196e-13,2.165751116175172e-13,2.1656045511567257e-13,2.1654579514742331e-13,2.1653114657901244e-13,2.1651650197349574e-13,2.1650185390197381e-13,2.164872172186277e-13,2.1647258449255132e-13,2.1645794830087194e-13,2.1644332348572574e-13,2.1642869520524624e-13,2.1641407829354877e-13,2.1639946532977188e-13,2.1638484890106865e-13,2.16370243829538e-13,2.163556427003339e-13,2.1634103810661304e-13,2.1632644485847535e-13,2.1631185554708134e-13,2.162972627715832e-13,2.162826813300985e-13,2.1626809642478624e-13,2.1625352284578455e-13,2.1623895319424669e-13,2.1622438007929845e-13,2.16209818279124e-13,2.1619526040086049e-13,2.1618069905960668e-13,2.1616614902160947e-13,2.1615160289998166e-13,2.161370533157863e-13,2.1612251502335e-13,2.1610797326862953e-13,2.1609344279801337e-13,2.160789162345552e-13,2.1606438620924011e-13,2.1604986745656452e-13,2.1603535260553502e-13,2.1602083429307873e-13,2.1600632724181643e-13,2.1599182408669955e-13,2.1597731747058868e-13,2.1596282210424584e-13,2.1594832327719912e-13,2.1593383569231323e-13,2.1591935199442917e-13,2.1590486483627846e-13,2.1589038890889507e-13,2.1587591686304227e-13,2.158614413573627e-13,2.158469770710762e-13,2.1583251666085998e-13,2.1581805279125975e-13,2.1580360012969753e-13,2.157891440090479e-13,2.1577469908887637e-13,2.1576025803569874e-13,2.157458135238808e-13,2.1573138020121798e-13,2.1571695074011798e-13,2.157025178208274e-13,2.1568809607938824e-13,2.1567367819409163e-13,2.1565925685105684e-13,2.156448466745888e-13,2.156304330406856e-13,2.1561603056583603e-13,2.1560163193811922e-13,2.1558722985342396e-13,2.1557283891652951e-13,2.155584518213765e-13,2.1554406126970443e-13,2.1552968185459921e-13,2.1551530627585501e-13,2.155009272410536e-13,2.1548655933160423e-13,2.1547218796640707e-13,2.1545782771909522e-13,2.1544347129920043e-13],"x":[1.0e30,1.999300299880048e34,3.998500599760096e34,5.9977008996401435e34,7.9969011995201915e34,9.99610149940024e34,1.1995301799280288e35,1.3994502099160336e35,1.5993702399040384e35,1.799290269892043e35,1.999210299880048e35,2.1991303298680528e35,2.3990503598560576e35,2.5989703898440624e35,2.798890419832067e35,2.998810449820072e35,3.1987304798080768e35,3.398650509796081e35,3.598570539784086e35,3.798490569772091e35,3.998410599760096e35,4.1983306297481004e35,4.3982506597361056e35,4.59817068972411e35,4.798090719712115e35,4.9980107497001196e35,5.197930779688125e35,5.397850809676129e35,5.5977708396641344e35,5.797690869652139e35,5.997610899640144e35,6.1975309296281484e35,6.3974509596161536e35,6.597370989604158e35,6.797291019592162e35,6.997211049580168e35,7.197131079568173e35,7.397051109556177e35,7.596971139544182e35,7.796891169532188e35,7.996811199520192e35,8.196731229508196e35,8.396651259496201e35,8.596571289484207e35,8.796491319472211e35,8.996411349460216e35,9.19633137944822e35,9.396251409436226e35,9.59617143942423e35,9.796091469412235e35,9.996011499400239e35,1.0195931529388245e36,1.039585155937625e36,1.0595771589364254e36,1.0795691619352258e36,1.0995611649340264e36,1.1195531679328269e36,1.1395451709316273e36,1.1595371739304278e36,1.1795291769292282e36,1.1995211799280288e36,1.2195131829268292e36,1.2395051859256297e36,1.2594971889244301e36,1.2794891919232307e36,1.2994811949220312e36,1.3194731979208316e36,1.339465200919632e36,1.3594572039184325e36,1.379449206917233e36,1.3994412099160337e36,1.419433212914834e36,1.4394252159136346e36,1.459417218912435e36,1.4794092219112354e36,1.499401224910036e36,1.5193932279088363e36,1.5393852309076368e36,1.5593772339064375e36,1.579369236905238e36,1.5993612399040384e36,1.6193532429028388e36,1.6393452459016393e36,1.6593372489004397e36,1.6793292518992402e36,1.6993212548980406e36,1.7193132578968414e36,1.7393052608956418e36,1.7592972638944422e36,1.7792892668932427e36,1.799281269892043e36,1.8192732728908436e36,1.839265275889644e36,1.8592572788884445e36,1.8792492818872452e36,1.8992412848860456e36,1.919233287884846e36,1.9392252908836465e36,1.959217293882447e36,1.9792092968812474e36,1.999201299880048e36,2.0191933028788483e36,2.039185305877649e36,2.0591773088764495e36,2.07916931187525e36,2.0991613148740504e36,2.1191533178728508e36,2.1391453208716513e36,2.1591373238704517e36,2.179129326869252e36,2.1991213298680526e36,2.2191133328668533e36,2.2391053358656538e36,2.2590973388644542e36,2.2790893418632547e36,2.299081344862055e36,2.3190733478608555e36,2.339065350859656e36,2.3590573538584564e36,2.3790493568572572e36,2.3990413598560576e36,2.419033362854858e36,2.4390253658536585e36,2.459017368852459e36,2.4790093718512594e36,2.4990013748500598e36,2.5189933778488603e36,2.538985380847661e36,2.5589773838464614e36,2.578969386845262e36,2.5989613898440623e36,2.6189533928428628e36,2.6389453958416632e36,2.6589373988404637e36,2.6789294018392644e36,2.6989214048380645e36,2.718913407836865e36,2.7389054108356654e36,2.758897413834466e36,2.778889416833267e36,2.798881419832067e36,2.818873422830868e36,2.838865425829668e36,2.8588574288284687e36,2.878849431827269e36,2.8988414348260696e36,2.91883343782487e36,2.9388254408236705e36,2.958817443822471e36,2.9788094468212713e36,2.998801449820072e36,3.018793452818872e36,3.038785455817673e36,3.058777458816473e36,3.078769461815274e36,3.0987614648140746e36,3.118753467812875e36,3.1387454708116755e36,3.1587374738104756e36,3.1787294768092764e36,3.1987214798080765e36,3.218713482806877e36,3.2387054858056774e36,3.258697488804478e36,3.278689491803279e36,3.298681494802079e36,3.31867349780088e36,3.33866550079968e36,3.3586575037984806e36,3.378649506797281e36,3.3986415097960815e36,3.4186335127948817e36,3.4386255157936824e36,3.458617518792483e36,3.4786095217912833e36,3.498601524790084e36,3.518593527788884e36,3.538585530787685e36,3.558577533786485e36,3.578569536785286e36,3.5985615397840866e36,3.618553542782887e36,3.6385455457816874e36,3.6585375487804876e36,3.6785295517792883e36,3.6985215547780885e36,3.718513557776889e36,3.7385055607756894e36,3.75849756377449e36,3.778489566773291e36,3.798481569772091e36,3.818473572770892e36,3.838465575769692e36,3.8584575787684926e36,3.878449581767293e36,3.8984415847660935e36,3.918433587764894e36,3.9384255907636944e36,3.958417593762495e36,3.978409596761295e36,3.998401599760096e36,4.018393602758896e36,4.038385605757697e36,4.058377608756497e36,4.078369611755298e36,4.0983616147540985e36,4.1183536177528987e36,4.1383456207516994e36,4.1583376237504996e36,4.1783296267493e36,4.1983216297481004e36,4.218313632746901e36,4.2383056357457013e36,4.258297638744502e36,4.278289641743303e36,4.298281644742103e36,4.3182736477409037e36,4.338265650739704e36,4.3582576537385046e36,4.378249656737305e36,4.3982416597361055e36,4.418233662734906e36,4.4382256657337064e36,4.458217668732507e36,4.478209671731307e36,4.498201674730108e36,4.518193677728908e36,4.538185680727709e36,4.558177683726509e36,4.57816968672531e36,4.5981616897241105e36,4.6181536927229106e36,4.6381456957217114e36,4.6581376987205115e36,4.678129701719312e36,4.6981217047181124e36,4.718113707716913e36,4.738105710715714e36,4.758097713714514e36,4.778089716713315e36,4.798081719712115e36,4.8180737227109157e36,4.838065725709716e36,4.8580577287085165e36,4.8780497317073167e36,4.8980417347061174e36,4.918033737704918e36,4.9380257407037183e36,4.958017743702519e36,4.978009746701319e36,4.99800174970012e36,5.01799375269892e36,5.037985755697721e36,5.0579777586965216e36,5.077969761695322e36,5.0979617646941225e36,5.1179537676929226e36,5.1379457706917233e36,5.1579377736905235e36,5.177929776689324e36,5.1979217796881244e36,5.217913782686925e36,5.237905785685726e36,5.257897788684526e36,5.277889791683327e36,5.297881794682127e36,5.317873797680928e36,5.337865800679728e36,5.357857803678528e36,5.377849806677329e36,5.397841809676129e36,5.41783381267493e36,5.437825815673731e36,5.45781781867253e36,5.477809821671331e36,5.497801824670132e36,5.517793827668933e36,5.537785830667732e36,5.557777833666533e36,5.577769836665334e36,5.597761839664134e36,5.617753842662935e36,5.637745845661735e36,5.657737848660535e36,5.677729851659336e36,5.697721854658137e36,5.717713857656938e36,5.737705860655737e36,5.757697863654538e36,5.777689866653339e36,5.79768186965214e36,5.817673872650939e36,5.83766587564974e36,5.85765787864854e36,5.877649881647341e36,5.897641884646142e36,5.917633887644942e36,5.937625890643742e36,5.957617893642543e36,5.977609896641344e36,5.997601899640143e36,6.017593902638944e36,6.037585905637745e36,6.057577908636545e36,6.077569911635346e36,6.097561914634146e36,6.117553917632947e36,6.137545920631747e36,6.157537923630548e36,6.177529926629348e36,6.197521929628148e36,6.217513932626949e36,6.23750593562575e36,6.25749793862455e36,6.27748994162335e36,6.297481944622151e36,6.317473947620952e36,6.337465950619752e36,6.357457953618552e36,6.377449956617353e36,6.397441959616153e36,6.417433962614954e36,6.437425965613755e36,6.457417968612554e36,6.477409971611355e36,6.497401974610156e36,6.517393977608957e36,6.537385980607757e36,6.557377983606557e36,6.577369986605358e36,6.597361989604158e36,6.617353992602959e36,6.637345995601759e36,6.657337998600559e36,6.67733000159936e36,6.697322004598161e36,6.717314007596962e36,6.737306010595761e36,6.757298013594562e36,6.777290016593363e36,6.797282019592163e36,6.817274022590963e36,6.837266025589764e36,6.857258028588564e36,6.877250031587365e36,6.897242034586166e36,6.917234037584965e36,6.937226040583766e36,6.957218043582567e36,6.977210046581368e36,6.997202049580167e36,7.017194052578968e36,7.037186055577769e36,7.05717805857657e36,7.07717006157537e36,7.09716206457417e36,7.11715406757297e36,7.137146070571771e36,7.157138073570572e36,7.177130076569373e36,7.197122079568172e36,7.217114082566973e36,7.237106085565774e36,7.257098088564574e36,7.277090091563374e36,7.297082094562175e36,7.317074097560975e36,7.337066100559776e36,7.357058103558577e36,7.377050106557377e36,7.397042109556177e36,7.417034112554978e36,7.437026115553779e36,7.457018118552578e36,7.477010121551379e36,7.49700212455018e36,7.51699412754898e36,7.536986130547781e36,7.556978133546581e36,7.576970136545382e36,7.596962139544182e36,7.616954142542983e36,7.636946145541783e36,7.656938148540583e36,7.676930151539384e36,7.696922154538185e36,7.716914157536986e36,7.736906160535785e36,7.756898163534586e36,7.776890166533387e36,7.796882169532187e36,7.816874172530987e36,7.836866175529788e36,7.856858178528588e36,7.876850181527389e36,7.89684218452619e36,7.916834187524989e36,7.93682619052379e36,7.956818193522591e36,7.976810196521392e36,7.996802199520192e36,8.016794202518992e36,8.036786205517793e36,8.056778208516593e36,8.076770211515394e36,8.096762214514194e36,8.116754217512994e36,8.136746220511795e36,8.156738223510596e36,8.176730226509397e36,8.196722229508196e36,8.216714232506997e36,8.236706235505798e36,8.256698238504598e36,8.276690241503398e36,8.296682244502199e36,8.316674247501e36,8.3366662504998e36,8.356658253498601e36,8.3766502564974e36,8.396642259496201e36,8.416634262495002e36,8.436626265493803e36,8.456618268492602e36,8.476610271491403e36,8.496602274490204e36,8.516594277489004e36,8.536586280487805e36,8.556578283486605e36,8.576570286485405e36,8.596562289484206e36,8.616554292483007e36,8.636546295481807e36,8.656538298480607e36,8.676530301479408e36,8.696522304478209e36,8.71651430747701e36,8.736506310475809e36,8.75649831347461e36,8.77649031647341e36,8.796482319472211e36,8.816474322471012e36,8.836466325469812e36,8.856458328468612e36,8.876450331467413e36,8.896442334466214e36,8.916434337465013e36,8.936426340463814e36,8.956418343462615e36,8.976410346461416e36,8.996402349460216e36,9.016394352459016e36,9.036386355457817e36,9.056378358456617e36,9.076370361455418e36,9.096362364454218e36,9.116354367453018e36,9.136346370451819e36,9.15633837345062e36,9.17633037644942e36,9.19632237944822e36,9.216314382447021e36,9.236306385445822e36,9.256298388444622e36,9.276290391443422e36,9.296282394442223e36,9.316274397441023e36,9.336266400439824e36,9.356258403438625e36,9.376250406437424e36,9.396242409436225e36,9.416234412435026e36,9.436226415433827e36,9.456218418432626e36,9.476210421431427e36,9.496202424430228e36,9.516194427429028e36,9.536186430427829e36,9.556178433426629e36,9.576170436425429e36,9.59616243942423e36,9.616154442423031e36,9.636146445421832e36,9.656138448420631e36,9.676130451419432e36,9.696122454418233e36,9.716114457417033e36,9.736106460415833e36,9.756098463414634e36,9.776090466413434e36,9.796082469412235e36,9.816074472411036e36,9.836066475409835e36,9.856058478408636e36,9.876050481407437e36,9.896042484406238e36,9.916034487405037e36,9.936026490403838e36,9.956018493402639e36,9.97601049640144e36,9.99600249940024e36,1.001599450239904e37,1.003598650539784e37,1.0055978508396641e37,1.0075970511395442e37,1.0095962514394242e37,1.0115954517393042e37,1.0135946520391843e37,1.0155938523390644e37,1.0175930526389444e37,1.0195922529388244e37,1.0215914532387045e37,1.0235906535385846e37,1.0255898538384646e37,1.0275890541383447e37,1.0295882544382247e37,1.0315874547381047e37,1.0335866550379848e37,1.0355858553378649e37,1.0375850556377448e37,1.0395842559376249e37,1.041583456237505e37,1.043582656537385e37,1.0455818568372651e37,1.0475810571371451e37,1.0495802574370252e37,1.0515794577369052e37,1.0535786580367853e37,1.0555778583366653e37,1.0575770586365453e37,1.0595762589364254e37,1.0615754592363055e37,1.0635746595361854e37,1.0655738598360656e37,1.0675730601359456e37,1.0695722604358255e37,1.0715714607357057e37,1.0735706610355857e37,1.0755698613354659e37,1.0775690616353458e37,1.0795682619352258e37,1.081567462235106e37,1.083566662534986e37,1.0855658628348661e37,1.087565063134746e37,1.089564263434626e37,1.0915634637345062e37,1.0935626640343862e37,1.0955618643342664e37,1.0975610646341463e37,1.0995602649340263e37,1.1015594652339065e37,1.1035586655337864e37,1.1055578658336664e37,1.1075570661335466e37,1.1095562664334265e37,1.1115554667333067e37,1.1135546670331867e37,1.1155538673330666e37,1.1175530676329468e37,1.1195522679328268e37,1.121551468232707e37,1.123550668532587e37,1.125549868832467e37,1.127549069132347e37,1.129548269432227e37,1.1315474697321072e37,1.1335466700319872e37,1.1355458703318672e37,1.1375450706317473e37,1.1395442709316273e37,1.1415434712315073e37,1.1435426715313874e37,1.1455418718312674e37,1.1475410721311476e37,1.1495402724310275e37,1.1515394727309075e37,1.1535386730307877e37,1.1555378733306677e37,1.1575370736305478e37,1.1595362739304278e37,1.1615354742303078e37,1.163534674530188e37,1.165533874830068e37,1.167533075129948e37,1.169532275429828e37,1.171531475729708e37,1.1735306760295882e37,1.1755298763294682e37,1.1775290766293483e37,1.1795282769292283e37,1.1815274772291083e37,1.1835266775289884e37,1.1855258778288684e37,1.1875250781287484e37,1.1895242784286286e37,1.1915234787285085e37,1.1935226790283887e37,1.1955218793282687e37,1.1975210796281486e37,1.1995202799280288e37,1.2015194802279088e37,1.203518680527789e37,1.205517880827669e37,1.2075170811275489e37,1.209516281427429e37,1.211515481727309e37,1.2135146820271892e37,1.2155138823270692e37,1.217513082626949e37,1.2195122829268293e37,1.2215114832267093e37,1.2235106835265895e37,1.2255098838264694e37,1.2275090841263494e37,1.2295082844262296e37,1.2315074847261095e37,1.2335066850259895e37,1.2355058853258697e37,1.2375050856257496e37,1.2395042859256298e37,1.2415034862255098e37,1.2435026865253897e37,1.24550188682527e37,1.2475010871251499e37,1.24950028742503e37,1.25149948772491e37,1.25349868802479e37,1.2554978883246702e37,1.2574970886245501e37,1.2594962889244303e37,1.2614954892243103e37,1.2634946895241902e37,1.2654938898240704e37,1.2674930901239504e37,1.2694922904238303e37,1.2714914907237105e37,1.2734906910235905e37,1.2754898913234707e37,1.2774890916233506e37,1.2794882919232306e37,1.2814874922231108e37,1.2834866925229907e37,1.285485892822871e37,1.2874850931227509e37,1.2894842934226308e37,1.291483493722511e37,1.293482694022391e37,1.2954818943222712e37,1.2974810946221511e37,1.299480294922031e37,1.3014794952219113e37,1.3034786955217912e37,1.3054778958216714e37,1.3074770961215514e37,1.3094762964214313e37,1.3114754967213115e37,1.3134746970211915e37,1.3154738973210714e37,1.3174730976209516e37,1.3194722979208316e37,1.3214714982207118e37,1.3234706985205917e37,1.3254698988204717e37,1.3274690991203519e37,1.3294682994202318e37,1.331467499720112e37,1.333466700019992e37,1.335465900319872e37,1.3374651006197521e37,1.339464300919632e37,1.3414635012195123e37,1.3434627015193922e37,1.3454619018192722e37,1.3474611021191524e37,1.3494603024190323e37,1.3514595027189123e37,1.3534587030187925e37,1.3554579033186724e37,1.3574571036185526e37,1.3594563039184326e37,1.3614555042183125e37,1.3634547045181927e37,1.3654539048180727e37,1.3674531051179529e37,1.3694523054178328e37,1.3714515057177128e37,1.373450706017593e37,1.375449906317473e37,1.3774491066173531e37,1.379448306917233e37,1.381447507217113e37,1.3834467075169932e37,1.3854459078168732e37,1.3874451081167534e37,1.3894443084166333e37,1.3914435087165133e37,1.3934427090163935e37,1.3954419093162734e37,1.3974411096161534e37,1.3994403099160336e37,1.4014395102159135e37,1.4034387105157937e37,1.4054379108156737e37,1.4074371111155536e37,1.4094363114154338e37,1.4114355117153138e37,1.413434712015194e37,1.415433912315074e37,1.417433112614954e37,1.419432312914834e37,1.421431513214714e37,1.4234307135145942e37,1.4254299138144742e37,1.4274291141143542e37,1.4294283144142343e37,1.4314275147141143e37,1.4334267150139943e37,1.4354259153138744e37,1.4374251156137544e37,1.4394243159136346e37,1.4414235162135146e37,1.4434227165133945e37,1.4454219168132747e37,1.4474211171131547e37,1.4494203174130348e37,1.4514195177129148e37,1.4534187180127948e37,1.455417918312675e37,1.457417118612555e37,1.459416318912435e37,1.461415519212315e37,1.463414719512195e37,1.4654139198120752e37,1.4674131201119552e37,1.4694123204118353e37,1.4714115207117153e37,1.4734107210115953e37,1.4754099213114755e37,1.4774091216113554e37,1.4794083219112354e37,1.4814075222111156e37,1.4834067225109955e37,1.4854059228108757e37,1.4874051231107557e37,1.4894043234106356e37,1.4914035237105158e37,1.4934027240103958e37,1.495401924310276e37,1.497401124610156e37,1.4994003249100359e37,1.501399525209916e37,1.503398725509796e37,1.5053979258096762e37,1.5073971261095562e37,1.509396326409436e37,1.5113955267093163e37,1.5133947270091963e37,1.5153939273090762e37,1.5173931276089564e37,1.5193923279088364e37,1.5213915282087166e37,1.5233907285085965e37,1.5253899288084765e37,1.5273891291083567e37,1.5293883294082366e37,1.5313875297081168e37,1.5333867300079968e37,1.5353859303078767e37,1.537385130607757e37,1.5393843309076369e37,1.541383531207517e37,1.543382731507397e37,1.545381931807277e37,1.5473811321071572e37,1.5493803324070371e37,1.5513795327069173e37,1.5533787330067973e37,1.5553779333066772e37,1.5573771336065574e37,1.5593763339064374e37,1.5613755342063173e37,1.5633747345061975e37,1.5653739348060775e37,1.5673731351059577e37,1.5693723354058376e37,1.5713715357057176e37,1.5733707360055978e37,1.5753699363054777e37,1.577369136605358e37,1.5793683369052379e37,1.5813675372051178e37,1.583366737504998e37,1.585365937804878e37,1.5873651381047582e37,1.5893643384046381e37,1.591363538704518e37,1.5933627390043983e37,1.5953619393042782e37,1.5973611396041582e37,1.5993603399040384e37,1.6013595402039183e37,1.6033587405037985e37,1.6053579408036785e37,1.6073571411035584e37,1.6093563414034386e37,1.6113555417033186e37,1.6133547420031988e37,1.6153539423030787e37,1.6173531426029587e37,1.6193523429028389e37,1.6213515432027188e37,1.623350743502599e37,1.625349943802479e37,1.627349144102359e37,1.6293483444022391e37,1.631347544702119e37,1.6333467450019993e37,1.6353459453018792e37,1.6373451456017592e37,1.6393443459016394e37,1.6413435462015193e37,1.6433427465013993e37,1.6453419468012795e37,1.6473411471011594e37,1.6493403474010396e37,1.6513395477009196e37,1.6533387480007995e37,1.6553379483006797e37,1.6573371486005597e37,1.65933634890044e37,1.6613355492003198e37,1.6633347495001998e37,1.66533394980008e37,1.66733315009996e37,1.6693323503998401e37,1.67133155069972e37,1.6733307509996e37,1.6753299512994802e37,1.6773291515993602e37,1.6793283518992401e37,1.6813275521991203e37,1.6833267524990003e37,1.6853259527988805e37,1.6873251530987604e37,1.6893243533986404e37,1.6913235536985206e37,1.6933227539984005e37,1.6953219542982807e37,1.6973211545981607e37,1.6993203548980407e37,1.7013195551979208e37,1.7033187554978008e37,1.705317955797681e37,1.707317156097561e37,1.709316356397441e37,1.711315556697321e37,1.713314756997201e37,1.7153139572970812e37,1.7173131575969612e37,1.7193123578968412e37,1.7213115581967213e37,1.7233107584966013e37,1.7253099587964813e37,1.7273091590963614e37,1.7293083593962414e37,1.7313075596961216e37,1.7333067599960016e37,1.7353059602958815e37,1.7373051605957617e37,1.7393043608956417e37,1.7413035611955218e37,1.7433027614954018e37,1.7453019617952818e37,1.747301162095162e37,1.749300362395042e37,1.751299562694922e37,1.753298762994802e37,1.755297963294682e37,1.7572971635945622e37,1.7592963638944422e37,1.761295564194322e37,1.7632947644942023e37,1.7652939647940823e37,1.7672931650939625e37,1.7692923653938424e37,1.7712915656937224e37,1.7732907659936026e37,1.7752899662934825e37,1.7772891665933627e37,1.7792883668932427e37,1.7812875671931226e37,1.7832867674930028e37,1.7852859677928828e37,1.787285168092763e37,1.789284368392643e37,1.7912835686925229e37,1.793282768992403e37,1.795281969292283e37,1.7972811695921632e37,1.7992803698920432e37,1.8012795701919231e37,1.8032787704918033e37,1.8052779707916833e37,1.8072771710915632e37,1.8092763713914434e37,1.8112755716913234e37,1.8132747719912036e37,1.8152739722910835e37,1.8172731725909635e37,1.8192723728908437e37,1.8212715731907236e37,1.8232707734906038e37,1.8252699737904838e37,1.8272691740903637e37,1.829268374390244e37,1.8312675746901239e37,1.833266774990004e37,1.835265975289884e37,1.837265175589764e37,1.8392643758896442e37,1.8412635761895241e37,1.8432627764894043e37,1.8452619767892843e37,1.8472611770891642e37,1.8492603773890444e37,1.8512595776889244e37,1.8532587779888043e37,1.8552579782886845e37,1.8572571785885645e37,1.8592563788884447e37,1.8612555791883246e37,1.8632547794882046e37,1.8652539797880848e37,1.8672531800879647e37,1.869252380387845e37,1.8712515806877249e37,1.8732507809876048e37,1.875249981287485e37,1.877249181587365e37,1.8792483818872452e37,1.8812475821871251e37,1.883246782487005e37,1.8852459827868853e37,1.8872451830867652e37,1.8892443833866452e37,1.8912435836865254e37,1.8932427839864053e37,1.8952419842862855e37,1.8972411845861655e37,1.8992403848860454e37,1.9012395851859256e37,1.9032387854858056e37,1.9052379857856858e37,1.9072371860855657e37,1.9092363863854457e37,1.9112355866853259e37,1.9132347869852058e37,1.915233987285086e37,1.917233187584966e37,1.919232387884846e37,1.9212315881847261e37,1.923230788484606e37,1.9252299887844863e37,1.9272291890843662e37,1.9292283893842462e37,1.9312275896841264e37,1.9332267899840063e37,1.9352259902838863e37,1.9372251905837665e37,1.9392243908836464e37,1.9412235911835266e37,1.9432227914834066e37,1.9452219917832865e37,1.9472211920831667e37,1.9492203923830467e37,1.951219592682927e37,1.9532187929828068e37,1.9552179932826868e37,1.957217193582567e37,1.959216393882447e37,1.9612155941823271e37,1.963214794482207e37,1.965213994782087e37,1.9672131950819672e37,1.9692123953818472e37,1.9712115956817272e37,1.9732107959816073e37,1.9752099962814873e37,1.9772091965813675e37,1.9792083968812474e37,1.9812075971811274e37,1.9832067974810076e37,1.9852059977808875e37,1.9872051980807677e37,1.9892043983806477e37,1.9912035986805277e37,1.9932027989804078e37,1.9952019992802878e37,1.997201199580168e37,1.999200399880048e37,2.001199600179928e37,2.003198800479808e37,2.005198000779688e37,2.0071972010795682e37,2.0091964013794482e37,2.0111956016793282e37,2.0131948019792083e37,2.0151940022790883e37,2.0171932025789683e37,2.0191924028788485e37,2.0211916031787284e37,2.0231908034786086e37,2.0251900037784886e37,2.0271892040783685e37,2.0291884043782487e37,2.0311876046781287e37,2.0331868049780088e37,2.0351860052778888e37,2.0371852055777688e37,2.039184405877649e37,2.041183606177529e37,2.043182806477409e37,2.045182006777289e37,2.047181207077169e37,2.0491804073770492e37,2.0511796076769292e37,2.053178807976809e37,2.0551780082766893e37,2.0571772085765693e37,2.0591764088764495e37,2.0611756091763294e37,2.0631748094762094e37,2.0651740097760896e37,2.0671732100759695e37,2.0691724103758497e37,2.0711716106757297e37,2.0731708109756096e37,2.0751700112754898e37,2.0771692115753698e37,2.07916841187525e37,2.08116761217513e37,2.0831668124750099e37,2.08516601277489e37,2.08716521307477e37,2.0891644133746502e37,2.0911636136745302e37,2.0931628139744101e37,2.0951620142742903e37,2.0971612145741703e37,2.0991604148740502e37,2.1011596151739304e37,2.1031588154738104e37,2.1051580157736906e37,2.1071572160735705e37,2.1091564163734505e37,2.1111556166733307e37,2.1131548169732106e37,2.1151540172730908e37,2.1171532175729708e37,2.1191524178728507e37,2.121151618172731e37,2.1231508184726109e37,2.125150018772491e37,2.127149219072371e37,2.129148419372251e37,2.131147619672131e37,2.1331468199720114e37,2.135146020271891e37,2.1371452205717713e37,2.1391444208716515e37,2.141143621171531e37,2.1431428214714114e37,2.1451420217712916e37,2.1471412220711713e37,2.1491404223710515e37,2.1511396226709317e37,2.153138822970812e37,2.1551380232706916e37,2.157137223570572e37,2.159136423870452e37,2.1611356241703317e37,2.163134824470212e37,2.165134024770092e37,2.167133225069972e37,2.169132425369852e37,2.171131625669732e37,2.173130825969612e37,2.175130026269492e37,2.1771292265693723e37,2.1791284268692525e37,2.181127627169132e37,2.1831268274690124e37,2.1851260277688926e37,2.1871252280687723e37,2.1891244283686525e37,2.1911236286685327e37,2.1931228289684124e37,2.1951220292682926e37,2.197121229568173e37,2.1991204298680525e37,2.2011196301679327e37,2.203118830467813e37,2.205118030767693e37,2.207117231067573e37,2.209116431367453e37,2.211115631667333e37,2.213114831967213e37,2.215114032267093e37,2.2171132325669733e37,2.219112432866853e37,2.221111633166733e37,2.2231108334666134e37,2.2251100337664936e37,2.2271092340663733e37,2.2291084343662535e37,2.2311076346661337e37,2.2331068349660134e37,2.2351060352658936e37,2.237105235565774e37,2.2391044358656535e37,2.2411036361655337e37,2.243102836465414e37,2.2451020367652936e37,2.247101237065174e37,2.249100437365054e37,2.251099637664934e37,2.253098837964814e37,2.255098038264694e37,2.2570972385645743e37,2.259096438864454e37,2.261095639164334e37,2.2630948394642144e37,2.265094039764094e37,2.2670932400639743e37,2.2690924403638545e37,2.2710916406637347e37,2.2730908409636144e37,2.2750900412634946e37,2.277089241563375e37,2.2790884418632545e37,2.2810876421631347e37,2.283086842463015e37,2.2850860427628946e37,2.287085243062775e37,2.289084443362655e37,2.2910836436625347e37,2.293082843962415e37,2.295082044262295e37,2.2970812445621753e37,2.299080444862055e37,2.301079645161935e37,2.3030788454618154e37,2.305078045761695e37,2.3070772460615753e37,2.3090764463614555e37,2.311075646661335e37,2.3130748469612154e37,2.3150740472610956e37,2.317073247560976e37,2.3190724478608555e37,2.3210716481607357e37,2.323070848460616e37,2.3250700487604956e37,2.327069249060376e37,2.329068449360256e37,2.3310676496601357e37,2.333066849960016e37,2.335066050259896e37,2.337065250559776e37,2.339064450859656e37,2.341063651159536e37,2.3430628514594164e37,2.345062051759296e37,2.3470612520591763e37,2.3490604523590565e37,2.351059652658936e37,2.3530588529588164e37,2.3550580532586966e37,2.3570572535585763e37,2.3590564538584565e37,2.3610556541583367e37,2.3630548544582164e37,2.3650540547580966e37,2.367053255057977e37,2.369052455357857e37,2.3710516556577367e37,2.373050855957617e37,2.375050056257497e37,2.377049256557377e37,2.379048456857257e37,2.381047657157137e37,2.383046857457017e37,2.385046057756897e37,2.3870452580567773e37,2.3890444583566575e37,2.391043658656537e37,2.3930428589564174e37,2.3950420592562976e37,2.3970412595561773e37,2.3990404598560575e37,2.4010396601559377e37,2.4030388604558174e37,2.4050380607556976e37,2.407037261055578e37,2.4090364613554575e37,2.4110356616553377e37,2.413034861955218e37,2.415034062255098e37,2.417033262554978e37,2.419032462854858e37,2.421031663154738e37,2.423030863454618e37,2.425030063754498e37,2.4270292640543783e37,2.429028464354258e37,2.431027664654138e37,2.4330268649540184e37,2.4350260652538986e37,2.4370252655537783e37,2.4390244658536585e37,2.4410236661535387e37,2.4430228664534184e37,2.4450220667532986e37,2.447021267053179e37,2.4490204673530585e37,2.4510196676529387e37,2.453018867952819e37,2.4550180682526986e37,2.457017268552579e37,2.459016468852459e37,2.461015669152339e37,2.463014869452219e37,2.465014069752099e37,2.4670132700519793e37,2.469012470351859e37,2.471011670651739e37,2.4730108709516194e37,2.475010071251499e37,2.4770092715513793e37,2.4790084718512595e37,2.4810076721511397e37,2.4830068724510194e37,2.4850060727508996e37,2.48700527305078e37,2.4890044733506595e37,2.4910036736505397e37,2.49300287395042e37,2.4950020742502996e37,2.49700127455018e37,2.49900047485006e37,2.5009996751499398e37,2.50299887544982e37,2.5049980757497e37,2.5069972760495803e37,2.50899647634946e37,2.5109956766493402e37,2.5129948769492204e37,2.5149940772491e37,2.5169932775489803e37,2.5189924778488605e37,2.5209916781487403e37,2.5229908784486204e37,2.5249900787485006e37,2.5269892790483804e37,2.5289884793482605e37,2.5309876796481407e37,2.532986879948021e37,2.5349860802479007e37,2.536985280547781e37,2.538984480847661e37,2.5409836811475408e37,2.542982881447421e37,2.544982081747301e37,2.546981282047181e37,2.548980482347061e37,2.5509796826469412e37,2.5529788829468214e37,2.554978083246701e37,2.5569772835465813e37,2.5589764838464615e37,2.5609756841463413e37,2.5629748844462215e37,2.5649740847461016e37,2.5669732850459814e37,2.5689724853458616e37,2.5709716856457417e37,2.5729708859456215e37,2.5749700862455017e37,2.576969286545382e37,2.578968486845262e37,2.5809676871451418e37,2.582966887445022e37,2.584966087744902e37,2.586965288044782e37,2.588964488344662e37,2.5909636886445422e37,2.592962888944422e37,2.594962089244302e37,2.5969612895441824e37,2.5989604898440625e37,2.6009596901439423e37,2.6029588904438225e37,2.6049580907437026e37,2.6069572910435824e37,2.6089564913434626e37,2.6109556916433427e37,2.6129548919432225e37,2.6149540922431027e37,2.616953292542983e37,2.6189524928428626e37,2.620951693142743e37,2.622950893442623e37,2.624950093742503e37,2.626949294042383e37,2.628948494342263e37,2.6309476946421433e37,2.632946894942023e37,2.634946095241903e37,2.6369452955417834e37,2.638944495841663e37,2.6409436961415433e37,2.6429428964414235e37,2.6449420967413037e37,2.6469412970411834e37,2.6489404973410636e37,2.6509396976409438e37,2.6529388979408235e37,2.6549380982407037e37,2.656937298540584e37,2.6589364988404636e37,2.660935699140344e37,2.662934899440224e37,2.6649340997401037e37,2.666933300039984e37,2.668932500339864e37,2.6709317006397443e37,2.672930900939624e37,2.674930101239504e37,2.6769293015393844e37,2.678928501839264e37,2.6809277021391443e37,2.6829269024390245e37,2.684926102738904e37,2.6869253030387844e37,2.6889245033386646e37,2.6909237036385443e37,2.6929229039384245e37,2.6949221042383047e37,2.696921304538185e37,2.6989205048380646e37,2.700919705137945e37,2.702918905437825e37,2.7049181057377047e37,2.706917306037585e37,2.708916506337465e37,2.710915706637345e37,2.712914906937225e37,2.714914107237105e37,2.7169133075369854e37,2.718912507836865e37,2.7209117081367453e37,2.7229109084366255e37,2.724910108736505e37,2.7269093090363854e37,2.7289085093362656e37,2.7309077096361453e37,2.7329069099360255e37,2.7349061102359057e37,2.7369053105357854e37,2.7389045108356656e37,2.740903711135546e37,2.742902911435426e37,2.7449021117353057e37,2.746901312035186e37,2.748900512335066e37,2.750899712634946e37,2.752898912934826e37,2.754898113234706e37,2.756897313534586e37,2.758896513834466e37,2.7608957141343463e37,2.7628949144342265e37,2.764894114734106e37,2.7668933150339864e37,2.7688925153338666e37,2.7708917156337463e37,2.7728909159336265e37,2.7748901162335067e37,2.7768893165333864e37,2.7788885168332666e37,2.780887717133147e37,2.7828869174330265e37,2.7848861177329067e37,2.786885318032787e37,2.788884518332667e37,2.790883718632547e37,2.792882918932427e37,2.794882119232307e37,2.796881319532187e37,2.798880519832067e37,2.8008797201319473e37,2.802878920431827e37,2.804878120731707e37,2.8068773210315874e37,2.8088765213314676e37,2.8108757216313473e37,2.8128749219312275e37,2.8148741222311077e37,2.8168733225309874e37,2.8188725228308676e37,2.820871723130748e37,2.8228709234306275e37,2.8248701237305077e37,2.826869324030388e37,2.8288685243302676e37,2.830867724630148e37,2.832866924930028e37,2.834866125229908e37,2.836865325529788e37,2.838864525829668e37,2.8408637261295483e37,2.842862926429428e37,2.844862126729308e37,2.8468613270291884e37,2.848860527329068e37,2.8508597276289483e37,2.8528589279288285e37,2.8548581282287087e37,2.8568573285285884e37,2.8588565288284686e37,2.860855729128349e37,2.8628549294282285e37,2.8648541297281087e37,2.866853330027989e37,2.8688525303278686e37,2.870851730627749e37,2.872850930927629e37,2.8748501312275087e37,2.876849331527389e37,2.878848531827269e37,2.8808477321271493e37,2.882846932427029e37,2.884846132726909e37,2.8868453330267894e37,2.888844533326669e37,2.8908437336265493e37,2.8928429339264295e37,2.894842134226309e37,2.8968413345261894e37,2.8988405348260696e37,2.9008397351259493e37,2.9028389354258295e37,2.9048381357257097e37,2.90683733602559e37,2.9088365363254696e37,2.91083573662535e37,2.91283493692523e37,2.9148341372251097e37,2.91683333752499e37,2.91883253782487e37,2.92083173812475e37,2.92283093842463e37,2.92483013872451e37,2.9268293390243904e37,2.92882853932427e37,2.9308277396241503e37,2.9328269399240305e37,2.93482614022391e37,2.9368253405237904e37,2.9388245408236706e37,2.9408237411235503e37,2.9428229414234305e37,2.9448221417233107e37,2.9468213420231904e37,2.9488205423230706e37,2.950819742622951e37,2.952818942922831e37,2.9548181432227107e37,2.956817343522591e37,2.958816543822471e37,2.960815744122351e37,2.962814944422231e37,2.964814144722111e37,2.966813345021991e37,2.968812545321871e37,2.9708117456217513e37,2.9728109459216315e37,2.974810146221511e37,2.9768093465213914e37,2.9788085468212716e37,2.9808077471211513e37,2.9828069474210315e37,2.9848061477209117e37,2.9868053480207914e37,2.9888045483206716e37,2.990803748620552e37,2.9928029489204315e37,2.9948021492203117e37,2.996801349520192e37,2.998800549820072e37,3.000799750119952e37,3.002798950419832e37,3.004798150719712e37,3.006797351019592e37,3.008796551319472e37,3.0107957516193523e37,3.012794951919232e37,3.014794152219112e37,3.0167933525189924e37,3.0187925528188726e37,3.0207917531187523e37,3.0227909534186325e37,3.0247901537185127e37,3.0267893540183924e37,3.0287885543182726e37,3.030787754618153e37,3.0327869549180325e37,3.0347861552179127e37,3.036785355517793e37,3.0387845558176726e37,3.040783756117553e37,3.042782956417433e37,3.044782156717313e37,3.046781357017193e37,3.048780557317073e37,3.0507797576169533e37,3.052778957916833e37,3.0547781582167132e37,3.0567773585165934e37,3.058776558816473e37,3.0607757591163533e37,3.0627749594162335e37,3.0647741597161133e37,3.0667733600159934e37,3.0687725603158736e37,3.070771760615754e37,3.0727709609156335e37,3.0747701612155137e37,3.076769361515394e37,3.0787685618152737e37,3.080767762115154e37,3.082766962415034e37,3.0847661627149138e37,3.086765363014794e37,3.088764563314674e37,3.0907637636145543e37,3.092762963914434e37,3.0947621642143142e37,3.0967613645141944e37,3.098760564814074e37,3.1007597651139543e37,3.1027589654138345e37,3.1047581657137143e37,3.1067573660135944e37,3.1087565663134746e37,3.1107557666133544e37,3.1127549669132346e37,3.1147541672131147e37,3.116753367512995e37,3.1187525678128747e37,3.120751768112755e37,3.122750968412635e37,3.1247501687125148e37,3.126749369012395e37,3.128748569312275e37,3.130747769612155e37,3.132746969912035e37,3.1347461702119152e37,3.1367453705117954e37,3.138744570811675e37,3.1407437711115554e37,3.1427429714114355e37,3.1447421717113153e37,3.1467413720111955e37,3.1487405723110756e37,3.1507397726109554e37,3.1527389729108356e37,3.1547381732107157e37,3.1567373735105955e37,3.1587365738104757e37,3.160735774110356e37,3.162734974410236e37,3.164734174710116e37,3.166733375009996e37,3.168732575309876e37,3.170731775609756e37,3.172730975909636e37,3.1747301762095163e37,3.176729376509396e37,3.178728576809276e37,3.1807277771091564e37,3.1827269774090365e37,3.1847261777089163e37,3.1867253780087965e37,3.1887245783086767e37,3.1907237786085564e37,3.1927229789084366e37,3.1947221792083168e37,3.1967213795081965e37,3.1987205798080767e37,3.200719780107957e37,3.2027189804078366e37,3.204718180707717e37,3.206717381007597e37,3.208716581307477e37,3.210715781607357e37,3.212714981907237e37,3.2147141822071173e37,3.216713382506997e37,3.218712582806877e37,3.2207117831067574e37,3.222710983406637e37,3.2247101837065173e37,3.2267093840063975e37,3.228708584306277e37,3.2307077846061574e37,3.2327069849060376e37,3.2347061852059178e37,3.2367053855057975e37,3.2387045858056777e37,3.240703786105558e37,3.2427029864054376e37,3.244702186705318e37,3.246701387005198e37,3.2487005873050777e37,3.250699787604958e37,3.252698987904838e37,3.2546981882047183e37,3.256697388504598e37,3.258696588804478e37,3.2606957891043584e37,3.262694989404238e37,3.2646941897041183e37,3.2666933900039985e37,3.268692590303878e37,3.2706917906037584e37,3.2726909909036386e37,3.2746901912035183e37,3.2766893915033985e37,3.2786885918032787e37,3.280687792103159e37,3.2826869924030386e37,3.284686192702919e37,3.286685393002799e37,3.2886845933026787e37,3.290683793602559e37,3.292682993902439e37,3.294682194202319e37,3.296681394502199e37,3.298680594802079e37,3.3006797951019594e37,3.302678995401839e37,3.3046781957017193e37,3.3066773960015995e37,3.308676596301479e37,3.3106757966013594e37,3.3126749969012396e37,3.3146741972011193e37,3.3166733975009995e37,3.3186725978008797e37,3.3206717981007594e37,3.3226709984006396e37,3.32467019870052e37,3.3266693990004e37,3.3286685993002797e37,3.33066779960016e37,3.33266699990004e37,3.33466620019992e37,3.3366654004998e37,3.33866460079968e37,3.34066380109956e37,3.34266300139944e37,3.3446622016993203e37,3.3466614019992005e37,3.34866060229908e37,3.3506598025989604e37,3.3526590028988406e37,3.3546582031987203e37,3.3566574034986005e37,3.3586566037984807e37,3.3606558040983604e37,3.3626550043982406e37,3.364654204698121e37,3.3666534049980005e37,3.3686526052978807e37,3.370651805597761e37,3.372651005897641e37,3.374650206197521e37,3.376649406497401e37,3.378648606797281e37,3.380647807097161e37,3.382647007397041e37,3.3846462076969213e37,3.386645407996801e37,3.388644608296681e37,3.3906438085965614e37,3.392643008896441e37,3.3946422091963213e37,3.3966414094962015e37,3.3986406097960817e37,3.4006398100959614e37,3.4026390103958416e37,3.404638210695722e37,3.4066374109956015e37,3.4086366112954817e37,3.410635811595362e37,3.4126350118952416e37,3.414634212195122e37,3.416633412495002e37,3.418632612794882e37,3.420631813094762e37,3.422631013394642e37,3.4246302136945223e37,3.426629413994402e37,3.428628614294282e37,3.4306278145941624e37,3.432627014894042e37,3.4346262151939223e37,3.4366254154938025e37,3.438624615793682e37,3.4406238160935624e37,3.4426230163934426e37,3.444622216693323e37,3.4466214169932025e37,3.4486206172930827e37,3.450619817592963e37,3.4526190178928426e37,3.454618218192723e37,3.456617418492603e37,3.4586166187924827e37,3.460615819092363e37,3.462615019392243e37,3.4646142196921233e37,3.466613419992003e37,3.468612620291883e37,3.4706118205917634e37,3.472611020891643e37,3.4746102211915233e37,3.4766094214914035e37,3.478608621791283e37,3.4806078220911634e37,3.4826070223910436e37,3.4846062226909233e37,3.4866054229908035e37,3.4886046232906837e37,3.490603823590564e37,3.4926030238904436e37,3.494602224190324e37,3.496601424490204e37,3.4986006247900837e37,3.500599825089964e37,3.502599025389844e37,3.504598225689724e37,3.506597425989604e37,3.508596626289484e37,3.5105958265893644e37,3.512595026889244e37,3.5145942271891243e37,3.5165934274890045e37,3.518592627788884e37,3.5205918280887644e37,3.5225910283886446e37,3.5245902286885243e37,3.5265894289884045e37,3.5285886292882847e37,3.5305878295881644e37,3.5325870298880446e37,3.534586230187925e37,3.536585430487805e37,3.5385846307876847e37,3.540583831087565e37,3.542583031387445e37,3.544582231687325e37,3.546581431987205e37,3.548580632287085e37,3.550579832586965e37,3.552579032886845e37,3.5545782331867253e37,3.5565774334866055e37,3.558576633786485e37,3.5605758340863654e37,3.5625750343862456e37,3.5645742346861253e37,3.5665734349860055e37,3.5685726352858857e37,3.5705718355857654e37,3.5725710358856456e37,3.574570236185526e37,3.5765694364854055e37,3.5785686367852857e37,3.580567837085166e37,3.582567037385046e37,3.584566237684926e37,3.586565437984806e37,3.588564638284686e37,3.590563838584566e37,3.592563038884446e37,3.5945622391843263e37,3.596561439484206e37,3.5985606397840862e37,3.6005598400839664e37,3.602559040383846e37,3.6045582406837263e37,3.6065574409836065e37,3.6085566412834867e37,3.6105558415833664e37,3.6125550418832466e37,3.614554242183127e37,3.6165534424830065e37,3.6185526427828867e37,3.620551843082767e37,3.6225510433826467e37,3.624550243682527e37,3.626549443982407e37,3.628548644282287e37,3.630547844582167e37,3.632547044882047e37,3.6345462451819273e37,3.636545445481807e37,3.6385446457816872e37,3.6405438460815674e37,3.642543046381447e37,3.6445422466813273e37,3.6465414469812075e37,3.6485406472810873e37,3.6505398475809674e37,3.6525390478808476e37,3.654538248180728e37,3.6565374484806076e37,3.6585366487804877e37,3.660535849080368e37,3.6625350493802477e37,3.664534249680128e37,3.666533449980008e37,3.6685326502798878e37,3.670531850579768e37,3.672531050879648e37,3.6745302511795283e37,3.676529451479408e37,3.6785286517792882e37,3.6805278520791684e37,3.682527052379048e37,3.6845262526789283e37,3.6865254529788085e37,3.6885246532786883e37,3.6905238535785685e37,3.6925230538784486e37,3.6945222541783284e37,3.6965214544782086e37,3.6985206547780887e37,3.700519855077969e37,3.7025190553778487e37,3.704518255677729e37,3.706517455977609e37,3.7085166562774888e37,3.710515856577369e37,3.712515056877249e37,3.714514257177129e37,3.716513457477009e37,3.7185126577768893e37,3.7205118580767694e37,3.722511058376649e37,3.7245102586765294e37,3.7265094589764095e37,3.7285086592762893e37,3.7305078595761695e37,3.7325070598760496e37,3.7345062601759294e37,3.7365054604758096e37,3.7385046607756898e37,3.7405038610755695e37,3.7425030613754497e37,3.74450226167533e37,3.74650146197521e37,3.74850066227509e37,3.75049986257497e37,3.75249906287485e37,3.75449826317473e37,3.75649746347461e37,3.7584966637744903e37,3.76049586407437e37,3.76249506437425e37,3.7644942646741304e37,3.76649346497401e37,3.7684926652738903e37,3.7704918655737705e37,3.7724910658736507e37,3.7744902661735304e37,3.7764894664734106e37,3.7784886667732908e37,3.7804878670731705e37,3.7824870673730507e37,3.784486267672931e37,3.7864854679728106e37,3.788484668272691e37,3.790483868572571e37,3.792483068872451e37,3.794482269172331e37,3.796481469472211e37,3.7984806697720913e37,3.800479870071971e37,3.802479070371851e37,3.8044782706717314e37,3.806477470971611e37,3.8084766712714913e37,3.8104758715713715e37,3.812475071871251e37,3.8144742721711314e37,3.8164734724710116e37,3.8184726727708918e37,3.8204718730707715e37,3.8224710733706517e37,3.824470273670532e37,3.8264694739704116e37,3.828468674270292e37,3.830467874570172e37,3.8324670748700517e37,3.834466275169932e37,3.836465475469812e37,3.8384646757696923e37,3.840463876069572e37,3.842463076369452e37,3.8444622766693324e37,3.846461476969212e37,3.8484606772690923e37,3.8504598775689725e37,3.852459077868852e37,3.8544582781687324e37,3.8564574784686126e37,3.8584566787684923e37,3.8604558790683725e37,3.8624550793682527e37,3.864454279668133e37,3.8664534799680126e37,3.868452680267893e37,3.870451880567773e37,3.8724510808676527e37,3.874450281167533e37,3.876449481467413e37,3.878448681767293e37,3.880447882067173e37,3.882447082367053e37,3.8844462826669334e37,3.886445482966813e37,3.8884446832666933e37,3.8904438835665735e37,3.892443083866453e37,3.8944422841663334e37,3.8964414844662136e37,3.8984406847660933e37,3.9004398850659735e37,3.9024390853658537e37,3.9044382856657334e37,3.9064374859656136e37,3.908436686265494e37,3.910435886565374e37,3.9124350868652537e37,3.914434287165134e37,3.916433487465014e37,3.918432687764894e37,3.920431888064774e37,3.922431088364654e37,3.924430288664534e37,3.926429488964414e37,3.9284286892642943e37,3.930427889564174e37,3.932427089864054e37,3.9344262901639344e37,3.9364254904638146e37,3.9384246907636943e37,3.9404238910635745e37,3.9424230913634547e37,3.9444222916633344e37,3.9464214919632146e37,3.948420692263095e37,3.9504198925629745e37,3.9524190928628547e37,3.954418293162735e37,3.956417493462615e37,3.958416693762495e37,3.960415894062375e37,3.962415094362255e37,3.964414294662135e37,3.966413494962015e37,3.9684126952618953e37,3.970411895561775e37,3.972411095861655e37,3.9744102961615354e37,3.976409496461415e37,3.9784086967612953e37,3.9804078970611755e37,3.9824070973610557e37,3.9844062976609354e37,3.9864054979608156e37,3.988404698260696e37,3.9904038985605755e37,3.9924030988604557e37,3.994402299160336e37,3.9964014994602156e37,3.998400699760096e37,4.000399900059976e37,4.002399100359856e37,4.004398300659736e37,4.006397500959616e37,4.0083967012594963e37,4.010395901559376e37,4.012395101859256e37,4.0143943021591364e37,4.016393502459016e37,4.0183927027588963e37,4.0203919030587765e37,4.022391103358656e37,4.0243903036585364e37,4.0263895039584166e37,4.028388704258297e37,4.0303879045581765e37,4.0323871048580567e37,4.034386305157937e37,4.0363855054578166e37,4.038384705757697e37,4.040383906057577e37,4.0423831063574567e37,4.044382306657337e37,4.046381506957217e37,4.0483807072570973e37,4.050379907556977e37,4.052379107856857e37,4.0543783081567374e37,4.056377508456617e37,4.0583767087564973e37,4.0603759090563775e37,4.062375109356257e37,4.0643743096561374e37,4.0663735099560176e37,4.0683727102558973e37,4.0703719105557775e37,4.0723711108556577e37,4.074370311155538e37,4.0763695114554176e37,4.078368711755298e37,4.080367912055178e37,4.0823671123550577e37,4.084366312654938e37,4.086365512954818e37,4.088364713254698e37,4.090363913554578e37,4.092363113854458e37,4.094362314154338e37,4.096361514454218e37,4.0983607147540983e37,4.1003599150539785e37,4.102359115353858e37,4.1043583156537384e37,4.1063575159536186e37,4.1083567162534983e37,4.1103559165533785e37,4.1123551168532587e37,4.1143543171531384e37,4.1163535174530186e37,4.118352717752899e37,4.120351918052779e37,4.1223511183526587e37,4.124350318652539e37,4.126349518952419e37,4.128348719252299e37,4.130347919552179e37,4.132347119852059e37,4.134346320151939e37,4.136345520451819e37,4.1383447207516993e37,4.140343921051579e37,4.1423431213514592e37,4.1443423216513394e37,4.1463415219512196e37,4.1483407222510993e37,4.1503399225509795e37,4.1523391228508597e37,4.1543383231507394e37,4.1563375234506196e37,4.1583367237505e37,4.1603359240503795e37,4.1623351243502597e37,4.16433432465014e37,4.16633352495002e37,4.1683327252499e37,4.17033192554978e37,4.17233112584966e37,4.17433032614954e37,4.17632952644942e37,4.1783287267493003e37,4.18032792704918e37,4.1823271273490602e37,4.1843263276489404e37,4.18632552794882e37,4.1883247282487003e37,4.1903239285485805e37,4.1923231288484607e37,4.1943223291483404e37,4.1963215294482206e37,4.198320729748101e37,4.2003199300479806e37,4.2023191303478607e37,4.204318330647741e37,4.2063175309476207e37,4.208316731247501e37,4.210315931547381e37,4.212315131847261e37,4.214314332147141e37,4.216313532447021e37,4.2183127327469013e37,4.220311933046781e37,4.2223111333466612e37,4.2243103336465414e37,4.226309533946421e37,4.2283087342463013e37,4.2303079345461815e37,4.2323071348460613e37,4.2343063351459415e37,4.2363055354458216e37,4.238304735745702e37,4.2403039360455816e37,4.2423031363454617e37,4.244302336645342e37,4.2463015369452217e37,4.248300737245102e37,4.250299937544982e37,4.2522991378448618e37,4.254298338144742e37,4.256297538444622e37,4.258296738744502e37,4.260295939044383e37,4.262295139344262e37,4.264294339644142e37,4.266293539944022e37,4.268292740243902e37,4.270291940543783e37,4.272291140843663e37,4.274290341143543e37,4.276289541443422e37,4.278288741743302e37,4.280287942043183e37,4.282287142343063e37,4.284286342642943e37,4.286285542942823e37,4.288284743242702e37,4.290283943542583e37,4.292283143842463e37,4.294282344142343e37,4.296281544442223e37,4.298280744742103e37,4.300279945041984e37,4.302279145341863e37,4.304278345641743e37,4.306277545941623e37,4.308276746241503e37,4.310275946541384e37,4.312275146841264e37,4.314274347141143e37,4.316273547441023e37,4.318272747740903e37,4.320271948040784e37,4.322271148340664e37,4.324270348640544e37,4.326269548940424e37,4.328268749240303e37,4.330267949540184e37,4.332267149840064e37,4.334266350139944e37,4.336265550439824e37,4.338264750739704e37,4.340263951039585e37,4.342263151339464e37,4.344262351639344e37,4.346261551939224e37,4.348260752239104e37,4.350259952538985e37,4.352259152838865e37,4.354258353138744e37,4.356257553438624e37,4.358256753738504e37,4.360255954038385e37,4.362255154338265e37,4.364254354638145e37,4.366253554938025e37,4.368252755237904e37,4.370251955537785e37,4.372251155837665e37,4.374250356137545e37,4.376249556437425e37,4.378248756737305e37,4.380247957037185e37,4.382247157337065e37,4.384246357636945e37,4.386245557936825e37,4.388244758236705e37,4.390243958536586e37,4.392243158836466e37,4.394242359136345e37,4.396241559436225e37,4.398240759736105e37,4.400239960035986e37,4.402239160335866e37,4.404238360635746e37,4.406237560935625e37,4.408236761235505e37,4.410235961535386e37,4.412235161835266e37,4.414234362135146e37,4.416233562435026e37,4.418232762734906e37,4.420231963034786e37,4.422231163334666e37,4.424230363634546e37,4.426229563934426e37,4.428228764234306e37,4.430227964534187e37,4.432227164834066e37,4.434226365133946e37,4.436225565433826e37,4.438224765733706e37,4.440223966033587e37,4.442223166333467e37,4.444222366633347e37,4.446221566933226e37,4.448220767233106e37,4.450219967532987e37,4.452219167832867e37,4.454218368132747e37,4.456217568432627e37,4.458216768732507e37,4.460215969032387e37,4.462215169332267e37,4.464214369632147e37,4.466213569932027e37,4.468212770231907e37,4.470211970531788e37,4.472211170831667e37,4.474210371131547e37,4.476209571431427e37,4.478208771731307e37,4.480207972031188e37,4.482207172331068e37,4.484206372630948e37,4.486205572930827e37,4.488204773230707e37,4.490203973530588e37,4.492203173830468e37,4.494202374130348e37,4.496201574430228e37,4.498200774730107e37,4.500199975029988e37,4.502199175329868e37,4.504198375629748e37,4.506197575929628e37,4.508196776229508e37,4.510195976529389e37,4.512195176829268e37,4.514194377129148e37,4.516193577429028e37,4.518192777728908e37,4.520191978028789e37,4.522191178328669e37,4.524190378628548e37,4.526189578928428e37,4.528188779228308e37,4.530187979528189e37,4.532187179828069e37,4.534186380127949e37,4.536185580427829e37,4.538184780727708e37,4.540183981027589e37,4.542183181327469e37,4.544182381627349e37,4.546181581927229e37,4.548180782227109e37,4.550179982526989e37,4.552179182826869e37,4.554178383126749e37,4.556177583426629e37,4.558176783726509e37,4.56017598402639e37,4.56217518432627e37,4.564174384626149e37,4.566173584926029e37,4.568172785225909e37,4.57017198552579e37,4.57217118582567e37,4.57417038612555e37,4.57616958642543e37,4.578168786725309e37,4.58016798702519e37,4.58216718732507e37,4.58416638762495e37,4.58616558792483e37,4.58816478822471e37,4.59016398852459e37,4.59216318882447e37,4.59416238912435e37,4.59616158942423e37,4.59816078972411e37,4.600159990023991e37,4.602159190323871e37,4.60415839062375e37,4.60615759092363e37,4.60815679122351e37,4.610155991523391e37,4.612155191823271e37,4.614154392123151e37,4.61615359242303e37,4.61815279272291e37,4.620151993022791e37,4.622151193322671e37,4.624150393622551e37,4.626149593922431e37,4.628148794222311e37,4.630147994522191e37,4.632147194822071e37,4.634146395121951e37,4.636145595421831e37,4.638144795721711e37,4.640143996021592e37,4.642143196321471e37,4.644142396621351e37,4.646141596921231e37,4.648140797221111e37,4.650139997520992e37,4.652139197820872e37,4.654138398120752e37,4.656137598420631e37,4.658136798720511e37,4.660135999020392e37,4.662135199320272e37,4.664134399620152e37,4.666133599920032e37,4.668132800219912e37,4.670132000519792e37,4.672131200819672e37,4.674130401119552e37,4.676129601419432e37,4.678128801719312e37,4.680128002019193e37,4.682127202319072e37,4.684126402618952e37,4.686125602918832e37,4.688124803218712e37,4.690124003518593e37,4.692123203818473e37,4.694122404118353e37,4.696121604418232e37,4.698120804718112e37,4.700120005017993e37,4.702119205317873e37,4.704118405617753e37,4.706117605917633e37,4.708116806217512e37,4.710116006517393e37,4.712115206817273e37,4.714114407117153e37,4.716113607417033e37,4.718112807716913e37,4.720112008016794e37,4.722111208316673e37,4.724110408616553e37,4.726109608916433e37,4.728108809216313e37,4.730108009516194e37,4.732107209816074e37,4.734106410115953e37,4.736105610415833e37,4.738104810715713e37,4.740104011015594e37,4.742103211315474e37,4.744102411615354e37,4.746101611915234e37,4.748100812215113e37,4.750100012514994e37,4.752099212814874e37,4.754098413114754e37,4.756097613414634e37,4.758096813714514e37,4.760096014014394e37,4.762095214314274e37,4.764094414614154e37,4.766093614914034e37,4.768092815213914e37,4.770092015513795e37,4.772091215813675e37,4.774090416113554e37,4.776089616413434e37,4.778088816713314e37,4.780088017013195e37,4.782087217313075e37,4.784086417612955e37,4.786085617912835e37,4.788084818212714e37,4.790084018512595e37,4.792083218812475e37,4.794082419112355e37,4.796081619412235e37,4.798080819712115e37,4.800080020011995e37,4.802079220311875e37,4.804078420611755e37,4.806077620911635e37,4.808076821211515e37,4.810076021511396e37,4.812075221811276e37,4.814074422111155e37,4.816073622411035e37,4.818072822710915e37,4.820072023010796e37,4.822071223310676e37,4.824070423610556e37,4.826069623910435e37,4.828068824210315e37,4.830068024510196e37,4.832067224810076e37,4.834066425109956e37,4.836065625409836e37,4.838064825709716e37,4.840064026009596e37,4.842063226309476e37,4.844062426609356e37,4.846061626909236e37,4.848060827209116e37,4.850060027508997e37,4.852059227808876e37,4.854058428108756e37,4.856057628408636e37,4.858056828708516e37,4.860056029008397e37,4.862055229308277e37,4.864054429608157e37,4.866053629908036e37,4.8680528302079165e37,4.870052030507797e37,4.872051230807677e37,4.874050431107557e37,4.876049631407437e37,4.878048831707317e37,4.880048032007197e37,4.882047232307077e37,4.884046432606957e37,4.886045632906837e37,4.888044833206717e37,4.890044033506598e37,4.892043233806477e37,4.894042434106357e37,4.896041634406237e37,4.898040834706117e37,4.900040035005998e37,4.902039235305878e37,4.904038435605758e37,4.906037635905637e37,4.9080368362055175e37,4.910036036505398e37,4.912035236805278e37,4.914034437105158e37,4.916033637405038e37,4.9180328377049175e37,4.920032038004798e37,4.922031238304678e37,4.924030438604558e37,4.926029638904438e37,4.928028839204318e37,4.930028039504199e37,4.932027239804078e37,4.934026440103958e37,4.936025640403838e37,4.938024840703718e37,4.940024041003599e37,4.942023241303479e37,4.944022441603358e37,4.946021641903238e37,4.9480208422031185e37,4.950020042502999e37,4.952019242802879e37,4.954018443102759e37,4.956017643402639e37,4.9580168437025185e37,4.960016044002399e37,4.962015244302279e37,4.964014444602159e37,4.966013644902039e37,4.968012845201919e37,4.970012045501799e37,4.972011245801679e37,4.974010446101559e37,4.976009646401439e37,4.9780088467013195e37,4.9800080470012e37,4.98200724730108e37,4.984006447600959e37,4.986005647900839e37,4.9880048482007195e37,4.9900040485006e37,4.99200324880048e37,4.99400244910036e37,4.99600164940024e37,4.9980008497001195e37,5.00000005e37,5.00199925029988e37,5.00399845059976e37,5.00599765089964e37,5.00799685119952e37,5.0099960514994e37,5.01199525179928e37,5.01399445209916e37,5.01599365239904e37,5.0179928526989205e37,5.019992052998801e37,5.021991253298681e37,5.02399045359856e37,5.02598965389844e37,5.0279888541983205e37,5.029988054498201e37,5.031987254798081e37,5.033986455097961e37,5.03598565539784e37,5.0379848556977205e37,5.039984055997601e37,5.041983256297481e37,5.043982456597361e37,5.045981656897241e37,5.047980857197121e37,5.049980057497001e37,5.051979257796881e37,5.053978458096761e37,5.055977658396641e37,5.0579768586965215e37,5.059976058996402e37,5.061975259296281e37,5.063974459596161e37,5.065973659896041e37,5.0679728601959215e37,5.069972060495802e37,5.071971260795682e37,5.073970461095562e37,5.075969661395441e37,5.0779688616953215e37,5.079968061995202e37,5.081967262295082e37,5.083966462594962e37,5.085965662894842e37,5.0879648631947215e37,5.089964063494602e37,5.091963263794482e37,5.093962464094362e37,5.095961664394242e37,5.0979608646941225e37,5.099960064994003e37,5.101959265293882e37,5.103958465593762e37,5.105957665893642e37,5.1079568661935225e37,5.109956066493403e37,5.111955266793283e37,5.113954467093163e37,5.115953667393042e37,5.1179528676929225e37,5.119952067992803e37,5.121951268292683e37,5.123950468592563e37,5.125949668892443e37,5.127948869192323e37,5.129948069492203e37,5.131947269792083e37,5.133946470091963e37,5.135945670391843e37,5.1379448706917235e37,5.139944070991604e37,5.141943271291483e37,5.143942471591363e37,5.145941671891243e37,5.1479408721911235e37,5.149940072491004e37,5.151939272790884e37,5.153938473090763e37,5.155937673390643e37,5.1579368736905235e37,5.159936073990404e37,5.161935274290284e37,5.163934474590164e37,5.165933674890044e37,5.167932875189924e37,5.169932075489804e37,5.171931275789684e37,5.173930476089564e37,5.175929676389444e37,5.1779288766893245e37,5.179928076989204e37,5.181927277289084e37,5.183926477588964e37,5.185925677888844e37,5.1879248781887245e37,5.189924078488605e37,5.191923278788485e37,5.193922479088364e37,5.195921679388244e37,5.1979208796881245e37,5.199920079988005e37,5.201919280287885e37,5.203918480587765e37,5.205917680887645e37,5.207916881187525e37,5.209916081487405e37,5.211915281787285e37,5.213914482087165e37,5.215913682387045e37,5.2179128826869255e37,5.219912082986805e37,5.221911283286685e37,5.223910483586565e37,5.225909683886445e37,5.2279088841863255e37,5.229908084486206e37,5.231907284786086e37,5.233906485085965e37,5.235905685385845e37,5.237904885685726e37,5.239904085985606e37,5.241903286285486e37,5.243902486585366e37,5.245901686885245e37,5.247900887185126e37,5.249900087485006e37,5.251899287784886e37,5.253898488084766e37,5.255897688384646e37,5.2578968886845265e37,5.259896088984406e37,5.261895289284286e37,5.263894489584166e37,5.265893689884046e37,5.2678928901839265e37,5.269892090483807e37,5.271891290783686e37,5.273890491083566e37,5.275889691383446e37,5.277888891683327e37,5.279888091983207e37,5.281887292283087e37,5.283886492582967e37,5.285885692882846e37,5.287884893182727e37,5.289884093482607e37,5.291883293782487e37,5.293882494082367e37,5.295881694382247e37,5.297880894682127e37,5.299880094982007e37,5.301879295281887e37,5.303878495581767e37,5.305877695881647e37,5.3078768961815275e37,5.309876096481408e37,5.311875296781287e37,5.313874497081167e37,5.315873697381047e37,5.317872897680928e37,5.319872097980808e37,5.321871298280688e37,5.323870498580568e37,5.325869698880447e37,5.327868899180328e37,5.329868099480208e37,5.331867299780088e37,5.333866500079968e37,5.335865700379848e37,5.337864900679728e37,5.339864100979608e37,5.341863301279488e37,5.343862501579368e37,5.345861701879248e37,5.347860902179129e37,5.349860102479009e37,5.351859302778888e37,5.353858503078768e37,5.355857703378648e37,5.357856903678529e37,5.359856103978409e37,5.361855304278289e37,5.363854504578168e37,5.365853704878048e37,5.367852905177929e37,5.369852105477809e37,5.371851305777689e37,5.373850506077569e37,5.375849706377449e37,5.377848906677329e37,5.379848106977209e37,5.381847307277089e37,5.383846507576969e37,5.385845707876849e37,5.38784490817673e37,5.389844108476609e37,5.391843308776489e37,5.393842509076369e37,5.395841709376249e37,5.39784090967613e37,5.39984010997601e37,5.40183931027589e37,5.403838510575769e37,5.405837710875649e37,5.40783691117553e37,5.40983611147541e37,5.41183531177529e37,5.41383451207517e37,5.415833712375049e37,5.41783291267493e37,5.41983211297481e37,5.42183131327469e37,5.42383051357457e37,5.42582971387445e37,5.427828914174331e37,5.42982811447421e37,5.43182731477409e37,5.43382651507397e37,5.43582571537385e37,5.437824915673731e37,5.439824115973611e37,5.441823316273491e37,5.44382251657337e37,5.44582171687325e37,5.447820917173131e37,5.449820117473011e37,5.451819317772891e37,5.453818518072771e37,5.45581771837265e37,5.457816918672531e37,5.459816118972411e37,5.461815319272291e37,5.463814519572171e37,5.465813719872051e37,5.467812920171932e37,5.469812120471811e37,5.471811320771691e37,5.473810521071571e37,5.475809721371451e37,5.477808921671332e37,5.479808121971212e37,5.481807322271091e37,5.483806522570971e37,5.485805722870851e37,5.487804923170732e37,5.489804123470612e37,5.491803323770492e37,5.493802524070372e37,5.495801724370251e37,5.497800924670132e37,5.499800124970012e37,5.501799325269892e37,5.503798525569772e37,5.505797725869652e37,5.507796926169532e37,5.509796126469412e37,5.511795326769292e37,5.513794527069172e37,5.515793727369052e37,5.517792927668933e37,5.519792127968813e37,5.521791328268692e37,5.523790528568572e37,5.525789728868452e37,5.527788929168333e37,5.529788129468213e37,5.531787329768093e37,5.533786530067973e37,5.535785730367852e37,5.537784930667733e37,5.539784130967613e37,5.541783331267493e37,5.543782531567373e37,5.545781731867253e37,5.547780932167133e37,5.549780132467013e37,5.551779332766893e37,5.553778533066773e37,5.555777733366653e37,5.557776933666534e37,5.559776133966414e37,5.561775334266293e37,5.563774534566173e37,5.565773734866053e37,5.567772935165934e37,5.569772135465814e37,5.571771335765694e37,5.573770536065573e37,5.575769736365453e37,5.577768936665334e37,5.579768136965214e37,5.581767337265094e37,5.583766537564974e37,5.585765737864854e37,5.587764938164734e37,5.589764138464614e37,5.591763338764494e37,5.593762539064374e37,5.595761739364254e37,5.597760939664135e37,5.599760139964014e37,5.601759340263894e37,5.603758540563774e37,5.605757740863654e37,5.607756941163535e37,5.609756141463415e37,5.611755341763295e37,5.613754542063174e37,5.615753742363054e37,5.617752942662935e37,5.619752142962815e37,5.621751343262695e37,5.623750543562575e37,5.625749743862454e37,5.627748944162335e37,5.629748144462215e37,5.631747344762095e37,5.633746545061975e37,5.635745745361855e37,5.637744945661736e37,5.639744145961615e37,5.641743346261495e37,5.643742546561375e37,5.645741746861255e37,5.647740947161136e37,5.649740147461016e37,5.651739347760896e37,5.653738548060775e37,5.655737748360655e37,5.657736948660536e37,5.659736148960416e37,5.661735349260296e37,5.663734549560176e37,5.665733749860055e37,5.667732950159936e37,5.669732150459816e37,5.671731350759696e37,5.673730551059576e37,5.675729751359456e37,5.677728951659337e37,5.679728151959216e37,5.681727352259096e37,5.683726552558976e37,5.685725752858856e37,5.687724953158737e37,5.689724153458617e37,5.691723353758496e37,5.693722554058376e37,5.695721754358256e37,5.697720954658137e37,5.699720154958017e37,5.701719355257897e37,5.703718555557777e37,5.705717755857656e37,5.707716956157537e37,5.709716156457417e37,5.711715356757297e37,5.713714557057177e37,5.715713757357057e37,5.717712957656937e37,5.719712157956817e37,5.721711358256697e37,5.723710558556577e37,5.725709758856457e37,5.727708959156338e37,5.729708159456218e37,5.731707359756097e37,5.733706560055977e37,5.735705760355857e37,5.737704960655738e37,5.739704160955618e37,5.741703361255498e37,5.743702561555378e37,5.745701761855257e37,5.747700962155138e37,5.749700162455018e37,5.751699362754898e37,5.753698563054778e37,5.755697763354658e37,5.757696963654538e37,5.759696163954418e37,5.761695364254298e37,5.763694564554178e37,5.765693764854058e37,5.767692965153939e37,5.769692165453819e37,5.771691365753698e37,5.773690566053578e37,5.775689766353458e37,5.777688966653339e37,5.779688166953219e37,5.781687367253099e37,5.783686567552978e37,5.785685767852858e37,5.787684968152739e37,5.789684168452619e37,5.791683368752499e37,5.793682569052379e37,5.795681769352259e37,5.797680969652139e37,5.799680169952019e37,5.801679370251899e37,5.803678570551779e37,5.805677770851659e37,5.80767697115154e37,5.809676171451419e37,5.811675371751299e37,5.813674572051179e37,5.815673772351059e37,5.81767297265094e37,5.81967217295082e37,5.8216713732507e37,5.823670573550579e37,5.825669773850459e37,5.82766897415034e37,5.82966817445022e37,5.8316673747501e37,5.83366657504998e37,5.835665775349859e37,5.83766497564974e37,5.83966417594962e37,5.8416633762495e37,5.84366257654938e37,5.84566177684926e37,5.847660977149141e37,5.84966017744902e37,5.8516593777489e37,5.85365857804878e37,5.85565777834866e37,5.857656978648541e37,5.859656178948421e37,5.861655379248301e37,5.86365457954818e37,5.86565377984806e37,5.867652980147941e37,5.869652180447821e37,5.871651380747701e37,5.873650581047581e37,5.87564978134746e37,5.877648981647341e37,5.879648181947221e37,5.881647382247101e37,5.883646582546981e37,5.885645782846861e37,5.887644983146742e37,5.889644183446621e37,5.891643383746501e37,5.893642584046381e37,5.895641784346261e37,5.897640984646142e37,5.899640184946022e37,5.901639385245901e37,5.903638585545781e37,5.905637785845661e37,5.907636986145542e37,5.909636186445422e37,5.911635386745302e37,5.913634587045182e37,5.915633787345061e37,5.917632987644942e37,5.919632187944822e37,5.921631388244702e37,5.923630588544582e37,5.925629788844462e37,5.927628989144342e37,5.929628189444222e37,5.931627389744102e37,5.933626590043982e37,5.935625790343862e37,5.937624990643743e37,5.939624190943623e37,5.941623391243502e37,5.943622591543382e37,5.945621791843262e37,5.947620992143143e37,5.949620192443023e37,5.951619392742903e37,5.953618593042782e37,5.9556177933426625e37,5.957616993642543e37,5.959616193942423e37,5.961615394242303e37,5.963614594542183e37,5.965613794842063e37,5.967612995141943e37,5.969612195441823e37,5.971611395741703e37,5.973610596041583e37,5.975609796341463e37,5.977608996641344e37,5.979608196941224e37,5.981607397241103e37,5.983606597540983e37,5.985605797840863e37,5.987604998140744e37,5.989604198440624e37,5.991603398740504e37,5.993602599040383e37,5.9956017993402635e37,5.997600999640144e37,5.999600199940024e37,6.001599400239904e37,6.003598600539784e37,6.005597800839664e37,6.007597001139544e37,6.009596201439424e37,6.011595401739304e37,6.013594602039184e37,6.015593802339064e37,6.017593002638945e37,6.019592202938824e37,6.021591403238704e37,6.023590603538584e37,6.025589803838464e37,6.027589004138345e37,6.029588204438225e37,6.031587404738105e37,6.033586605037984e37,6.0355858053378645e37,6.037585005637745e37,6.039584205937625e37,6.041583406237505e37,6.043582606537385e37,6.0455818068372645e37,6.047581007137145e37,6.049580207437025e37,6.051579407736905e37,6.053578608036785e37,6.055577808336665e37,6.057577008636546e37,6.059576208936425e37,6.061575409236305e37,6.063574609536185e37,6.065573809836065e37,6.067573010135946e37,6.069572210435826e37,6.071571410735706e37,6.073570611035585e37,6.0755698113354655e37,6.077569011635346e37,6.079568211935226e37,6.081567412235106e37,6.083566612534986e37,6.0855658128348655e37,6.087565013134746e37,6.089564213434626e37,6.091563413734506e37,6.093562614034386e37,6.095561814334266e37,6.097561014634147e37,6.099560214934026e37,6.101559415233906e37,6.103558615533786e37,6.1055578158336665e37,6.107557016133547e37,6.109556216433427e37,6.111555416733306e37,6.113554617033186e37,6.1155538173330665e37,6.117553017632947e37,6.119552217932827e37,6.121551418232707e37,6.123550618532587e37,6.1255498188324665e37,6.127549019132347e37,6.129548219432227e37,6.131547419732107e37,6.133546620031987e37,6.135545820331867e37,6.137545020631747e37,6.139544220931627e37,6.141543421231507e37,6.143542621531387e37,6.1455418218312675e37,6.147541022131148e37,6.149540222431028e37,6.151539422730907e37,6.153538623030787e37,6.1555378233306675e37,6.157537023630548e37,6.159536223930428e37,6.161535424230308e37,6.163534624530187e37,6.1655338248300675e37,6.167533025129948e37,6.169532225429828e37,6.171531425729708e37,6.173530626029588e37,6.175529826329468e37,6.177529026629348e37,6.179528226929228e37,6.181527427229108e37,6.183526627528988e37,6.1855258278288685e37,6.187525028128749e37,6.189524228428629e37,6.191523428728508e37,6.193522629028388e37,6.1955218293282685e37,6.197521029628149e37,6.199520229928029e37,6.201519430227909e37,6.203518630527788e37,6.2055178308276685e37,6.207517031127549e37,6.209516231427429e37,6.211515431727309e37,6.213514632027189e37,6.2155138323270695e37,6.217513032626949e37,6.219512232926829e37,6.221511433226709e37,6.223510633526589e37,6.2255098338264695e37,6.22750903412635e37,6.229508234426229e37,6.231507434726109e37,6.233506635025989e37,6.2355058353258695e37,6.23750503562575e37,6.23950423592563e37,6.24150343622551e37,6.243502636525389e37,6.2455018368252695e37,6.24750103712515e37,6.24950023742503e37,6.25149943772491e37,6.25349863802479e37,6.25549783832467e37,6.25749703862455e37,6.25949623892443e37,6.26149543922431e37,6.26349463952419e37,6.2654938398240705e37,6.267493040123951e37,6.26949224042383e37,6.27149144072371e37,6.27349064102359e37,6.2754898413234705e37,6.277489041623351e37,6.279488241923231e37,6.281487442223111e37,6.28348664252299e37,6.2854858428228705e37,6.287485043122751e37,6.289484243422631e37,6.291483443722511e37,6.293482644022391e37,6.295481844322271e37,6.297481044622151e37,6.299480244922031e37,6.301479445221911e37,6.303478645521791e37,6.3054778458216715e37,6.307477046121552e37,6.309476246421431e37,6.311475446721311e37,6.313474647021191e37,6.3154738473210715e37,6.317473047620952e37,6.319472247920832e37,6.321471448220711e37,6.323470648520591e37,6.325469848820472e37,6.327469049120352e37,6.329468249420232e37,6.331467449720112e37,6.333466650019992e37,6.335465850319872e37,6.337465050619752e37,6.339464250919632e37,6.341463451219512e37,6.343462651519392e37,6.3454618518192725e37,6.347461052119152e37,6.349460252419032e37,6.351459452718912e37,6.353458653018792e37,6.3554578533186725e37,6.357457053618553e37,6.359456253918433e37,6.361455454218312e37,6.363454654518192e37,6.365453854818073e37,6.367453055117953e37,6.369452255417833e37,6.371451455717713e37,6.373450656017592e37,6.375449856317473e37,6.377449056617353e37,6.379448256917233e37,6.381447457217113e37,6.383446657516993e37,6.3854458578168735e37,6.387445058116753e37,6.389444258416633e37,6.391443458716513e37,6.393442659016393e37,6.3954418593162735e37,6.397441059616154e37,6.399440259916034e37,6.401439460215913e37,6.403438660515793e37,6.405437860815674e37,6.407437061115554e37,6.409436261415434e37,6.411435461715314e37,6.413434662015193e37,6.415433862315074e37,6.417433062614954e37,6.419432262914834e37,6.421431463214714e37,6.423430663514594e37,6.4254298638144745e37,6.427429064114354e37,6.429428264414234e37,6.431427464714114e37,6.433426665013994e37,6.4354258653138745e37,6.437425065613755e37,6.439424265913634e37,6.441423466213514e37,6.443422666513394e37,6.445421866813275e37,6.447421067113155e37,6.449420267413035e37,6.451419467712915e37,6.453418668012794e37,6.455417868312675e37,6.457417068612555e37,6.459416268912435e37,6.461415469212315e37,6.463414669512195e37,6.465413869812075e37,6.467413070111955e37,6.469412270411835e37,6.471411470711715e37,6.473410671011595e37,6.475409871311476e37,6.477409071611356e37,6.479408271911235e37,6.481407472211115e37,6.483406672510995e37,6.485405872810876e37,6.487405073110756e37,6.489404273410636e37,6.491403473710515e37,6.493402674010395e37,6.495401874310276e37,6.497401074610156e37,6.499400274910036e37,6.501399475209916e37,6.503398675509796e37,6.505397875809676e37,6.507397076109556e37,6.509396276409436e37,6.511395476709316e37,6.513394677009196e37,6.515393877309077e37,6.517393077608957e37,6.519392277908836e37,6.521391478208716e37,6.523390678508596e37,6.525389878808477e37,6.527389079108357e37,6.529388279408237e37,6.531387479708116e37,6.533386680007996e37,6.535385880307877e37,6.537385080607757e37,6.539384280907637e37,6.541383481207517e37,6.543382681507397e37,6.545381881807277e37,6.547381082107157e37,6.549380282407037e37,6.551379482706917e37,6.553378683006797e37,6.555377883306678e37,6.557377083606557e37,6.559376283906437e37,6.561375484206317e37,6.563374684506197e37,6.565373884806078e37,6.567373085105958e37,6.569372285405838e37,6.571371485705717e37,6.573370686005597e37,6.575369886305478e37,6.577369086605358e37,6.579368286905238e37,6.581367487205118e37,6.583366687504997e37,6.585365887804878e37,6.587365088104758e37,6.589364288404638e37,6.591363488704518e37,6.593362689004398e37,6.595361889304279e37,6.597361089604158e37,6.599360289904038e37,6.601359490203918e37,6.603358690503798e37,6.605357890803679e37,6.607357091103559e37,6.609356291403439e37,6.611355491703318e37,6.613354692003198e37,6.615353892303079e37,6.617353092602959e37,6.619352292902839e37,6.621351493202719e37,6.623350693502598e37,6.625349893802479e37,6.627349094102359e37,6.629348294402239e37,6.631347494702119e37,6.633346695001999e37,6.63534589530188e37,6.637345095601759e37,6.639344295901639e37,6.641343496201519e37,6.643342696501399e37,6.64534189680128e37,6.64734109710116e37,6.649340297401039e37,6.651339497700919e37,6.653338698000799e37,6.65533789830068e37,6.65733709860056e37,6.65933629890044e37,6.66133549920032e37,6.663334699500199e37,6.66533389980008e37,6.66733310009996e37,6.66933230039984e37,6.67133150069972e37,6.6733307009996e37,6.67532990129948e37,6.67732910159936e37,6.67932830189924e37,6.68132750219912e37,6.683326702499e37,6.685325902798881e37,6.687325103098761e37,6.68932430339864e37,6.69132350369852e37,6.6933227039984e37,6.695321904298281e37,6.697321104598161e37,6.699320304898041e37,6.70131950519792e37,6.7033187054978e37,6.705317905797681e37,6.707317106097561e37,6.709316306397441e37,6.711315506697321e37,6.713314706997201e37,6.715313907297081e37,6.717313107596961e37,6.719312307896841e37,6.721311508196721e37,6.723310708496601e37,6.725309908796482e37,6.727309109096362e37,6.729308309396241e37,6.731307509696121e37,6.733306709996001e37,6.735305910295882e37,6.737305110595762e37,6.739304310895642e37,6.741303511195521e37,6.743302711495401e37,6.745301911795282e37,6.747301112095162e37,6.749300312395042e37,6.751299512694922e37,6.753298712994802e37,6.755297913294682e37,6.757297113594562e37,6.759296313894442e37,6.761295514194322e37,6.763294714494202e37,6.765293914794083e37,6.767293115093962e37,6.769292315393842e37,6.771291515693722e37,6.773290715993602e37,6.775289916293483e37,6.777289116593363e37,6.779288316893243e37,6.781287517193122e37,6.783286717493002e37,6.785285917792883e37,6.787285118092763e37,6.789284318392643e37,6.791283518692523e37,6.793282718992402e37,6.795281919292283e37,6.797281119592163e37,6.799280319892043e37,6.801279520191923e37,6.803278720491803e37,6.805277920791684e37,6.807277121091563e37,6.809276321391443e37,6.811275521691323e37,6.813274721991203e37,6.815273922291084e37,6.817273122590964e37,6.819272322890844e37,6.821271523190723e37,6.823270723490603e37,6.825269923790484e37,6.827269124090364e37,6.829268324390244e37,6.831267524690124e37,6.833266724990003e37,6.835265925289884e37,6.837265125589764e37,6.839264325889644e37,6.841263526189524e37,6.843262726489404e37,6.845261926789285e37,6.847261127089164e37,6.849260327389044e37,6.851259527688924e37,6.853258727988804e37,6.855257928288685e37,6.857257128588565e37,6.859256328888444e37,6.861255529188324e37,6.863254729488204e37,6.865253929788085e37,6.867253130087965e37,6.869252330387845e37,6.871251530687725e37,6.873250730987604e37,6.875249931287485e37,6.877249131587365e37,6.879248331887245e37,6.881247532187125e37,6.883246732487005e37,6.885245932786885e37,6.887245133086765e37,6.889244333386645e37,6.891243533686525e37,6.893242733986405e37,6.895241934286286e37,6.897241134586166e37,6.899240334886045e37,6.901239535185925e37,6.903238735485805e37,6.905237935785686e37,6.907237136085566e37,6.909236336385446e37,6.911235536685325e37,6.913234736985205e37,6.915233937285086e37,6.917233137584966e37,6.919232337884846e37,6.921231538184726e37,6.923230738484606e37,6.925229938784486e37,6.927229139084366e37,6.929228339384246e37,6.931227539684126e37,6.933226739984006e37,6.935225940283887e37,6.937225140583767e37,6.939224340883646e37,6.941223541183526e37,6.943222741483406e37,6.945221941783287e37,6.947221142083167e37,6.949220342383047e37,6.951219542682926e37,6.953218742982806e37,6.955217943282687e37,6.957217143582567e37,6.959216343882447e37,6.961215544182327e37,6.963214744482207e37,6.965213944782087e37,6.967213145081967e37,6.969212345381847e37,6.971211545681727e37,6.973210745981607e37,6.975209946281488e37,6.977209146581367e37,6.979208346881247e37,6.981207547181127e37,6.983206747481007e37,6.985205947780888e37,6.987205148080768e37,6.989204348380648e37,6.991203548680527e37,6.993202748980407e37,6.995201949280288e37,6.997201149580168e37,6.999200349880048e37,7.001199550179928e37,7.003198750479807e37,7.005197950779688e37,7.007197151079568e37,7.009196351379448e37,7.011195551679328e37,7.013194751979208e37,7.015193952279089e37,7.017193152578968e37,7.019192352878848e37,7.021191553178728e37,7.023190753478608e37,7.025189953778489e37,7.027189154078369e37,7.029188354378248e37,7.031187554678128e37,7.033186754978008e37,7.035185955277889e37,7.037185155577769e37,7.039184355877649e37,7.041183556177529e37,7.043182756477408e37,7.045181956777289e37,7.047181157077169e37,7.049180357377049e37,7.051179557676929e37,7.053178757976809e37,7.05517795827669e37,7.057177158576569e37,7.059176358876449e37,7.061175559176329e37,7.063174759476209e37,7.06517395977609e37,7.06717316007597e37,7.069172360375849e37,7.071171560675729e37,7.073170760975609e37,7.07516996127549e37,7.07716916157537e37,7.07916836187525e37,7.08116756217513e37,7.0831667624750095e37,7.08516596277489e37,7.08716516307477e37,7.08916436337465e37,7.09116356367453e37,7.09316276397441e37,7.09516196427429e37,7.09716116457417e37,7.09916036487405e37,7.10115956517393e37,7.10315876547381e37,7.105157965773691e37,7.107157166073571e37,7.10915636637345e37,7.11115556667333e37,7.11315476697321e37,7.115153967273091e37,7.117153167572971e37,7.119152367872851e37,7.12115156817273e37,7.1231507684726105e37,7.125149968772491e37,7.127149169072371e37,7.129148369372251e37,7.131147569672131e37,7.133146769972011e37,7.135145970271891e37,7.137145170571771e37,7.139144370871651e37,7.141143571171531e37,7.143142771471411e37,7.145141971771292e37,7.147141172071172e37,7.149140372371051e37,7.151139572670931e37,7.153138772970811e37,7.155137973270692e37,7.157137173570572e37,7.159136373870452e37,7.161135574170331e37,7.1631347744702115e37,7.165133974770092e37,7.167133175069972e37,7.169132375369852e37,7.171131575669732e37,7.173130775969612e37,7.175129976269492e37,7.177129176569372e37,7.179128376869252e37,7.181127577169132e37,7.183126777469012e37,7.185125977768893e37,7.187125178068772e37,7.189124378368652e37,7.191123578668532e37,7.1931227789684125e37,7.195121979268293e37,7.197121179568173e37,7.199120379868053e37,7.201119580167932e37,7.2031187804678125e37,7.205117980767693e37,7.207117181067573e37,7.209116381367453e37,7.211115581667333e37,7.2131147819672125e37,7.215113982267093e37,7.217113182566973e37,7.219112382866853e37,7.221111583166733e37,7.223110783466613e37,7.225109983766494e37,7.227109184066373e37,7.229108384366253e37,7.231107584666133e37,7.2331067849660135e37,7.235105985265894e37,7.237105185565774e37,7.239104385865653e37,7.241103586165533e37,7.2431027864654135e37,7.245101986765294e37,7.247101187065174e37,7.249100387365054e37,7.251099587664934e37,7.2530987879648135e37,7.255097988264694e37,7.257097188564574e37,7.259096388864454e37,7.261095589164334e37,7.263094789464214e37,7.265093989764095e37,7.267093190063974e37,7.269092390363854e37,7.271091590663734e37,7.2730907909636145e37,7.275089991263495e37,7.277089191563375e37,7.279088391863254e37,7.281087592163134e37,7.2830867924630145e37,7.285085992762895e37,7.287085193062775e37,7.289084393362655e37,7.291083593662535e37,7.2930827939624145e37,7.295081994262295e37,7.297081194562175e37,7.299080394862055e37,7.301079595161935e37,7.3030787954618155e37,7.305077995761695e37,7.307077196061575e37,7.309076396361455e37,7.311075596661335e37,7.3130747969612155e37,7.315073997261096e37,7.317073197560976e37,7.319072397860855e37,7.321071598160735e37,7.3230707984606155e37,7.325069998760496e37,7.327069199060376e37,7.329068399360256e37,7.331067599660135e37,7.3330667999600155e37,7.335066000259896e37,7.337065200559776e37,7.339064400859656e37,7.341063601159536e37,7.3430628014594165e37,7.345062001759296e37,7.347061202059176e37,7.349060402359056e37,7.351059602658936e37,7.3530588029588165e37,7.355058003258697e37,7.357057203558576e37,7.359056403858456e37,7.361055604158336e37,7.3630548044582165e37,7.365054004758097e37,7.367053205057977e37,7.369052405357857e37,7.371051605657736e37,7.3730508059576165e37,7.375050006257497e37,7.377049206557377e37,7.379048406857257e37,7.381047607157137e37,7.3830468074570175e37,7.385046007756897e37,7.387045208056777e37,7.389044408356657e37,7.391043608656537e37,7.3930428089564175e37,7.395042009256298e37,7.397041209556177e37,7.399040409856057e37,7.401039610155937e37,7.4030388104558175e37,7.405038010755698e37,7.407037211055578e37,7.409036411355458e37,7.411035611655337e37,7.4130348119552175e37,7.415034012255098e37,7.417033212554978e37,7.419032412854858e37,7.421031613154738e37,7.423030813454618e37,7.425030013754498e37,7.427029214054378e37,7.429028414354258e37,7.431027614654138e37,7.4330268149540185e37,7.435026015253899e37,7.437025215553778e37,7.439024415853658e37,7.441023616153538e37,7.4430228164534185e37,7.445022016753299e37,7.447021217053179e37,7.449020417353058e37,7.451019617652938e37,7.453018817952819e37,7.455018018252699e37,7.457017218552579e37,7.459016418852459e37,7.461015619152339e37,7.463014819452219e37,7.465014019752099e37,7.467013220051979e37,7.469012420351859e37,7.471011620651739e37,7.4730108209516195e37,7.4750100212515e37,7.477009221551379e37,7.479008421851259e37,7.481007622151139e37,7.4830068224510195e37,7.4850060227509e37,7.48700522305078e37,7.489004423350659e37,7.491003623650539e37,7.49300282395042e37,7.4950020242503e37,7.49700122455018e37,7.49900042485006e37,7.50099962514994e37,7.50299882544982e37,7.5049980257497e37,7.50699722604958e37,7.50899642634946e37,7.51099562664934e37,7.5129948269492205e37,7.5149940272491e37,7.51699322754898e37,7.51899242784886e37,7.52099162814874e37,7.5229908284486205e37,7.524990028748501e37,7.526989229048381e37,7.52898842934826e37,7.53098762964814e37,7.532986829948021e37,7.534986030247901e37,7.536985230547781e37,7.538984430847661e37,7.54098363114754e37,7.542982831447421e37,7.544982031747301e37,7.546981232047181e37,7.548980432347061e37,7.550979632646941e37,7.5529788329468215e37,7.554978033246701e37,7.556977233546581e37,7.558976433846461e37,7.560975634146341e37,7.562974834446222e37,7.564974034746102e37,7.566973235045981e37,7.568972435345861e37,7.570971635645741e37,7.572970835945622e37,7.574970036245502e37,7.576969236545382e37,7.578968436845262e37,7.580967637145141e37,7.582966837445022e37,7.584966037744902e37,7.586965238044782e37,7.588964438344662e37,7.590963638644542e37,7.5929628389444225e37,7.594962039244302e37,7.596961239544182e37,7.598960439844062e37,7.600959640143942e37,7.602958840443823e37,7.604958040743703e37,7.606957241043582e37,7.608956441343462e37,7.610955641643342e37,7.612954841943223e37,7.614954042243103e37,7.616953242542983e37,7.618952442842863e37,7.620951643142742e37,7.622950843442623e37,7.624950043742503e37,7.626949244042383e37,7.628948444342263e37,7.630947644642143e37,7.632946844942023e37,7.634946045241903e37,7.636945245541783e37,7.638944445841663e37,7.640943646141543e37,7.642942846441424e37,7.644942046741304e37,7.646941247041183e37,7.648940447341063e37,7.650939647640943e37,7.652938847940824e37,7.654938048240704e37,7.656937248540584e37,7.658936448840463e37,7.660935649140343e37,7.662934849440224e37,7.664934049740104e37,7.666933250039984e37,7.668932450339864e37,7.670931650639744e37,7.672930850939624e37,7.674930051239504e37,7.676929251539384e37,7.678928451839264e37,7.680927652139144e37,7.682926852439025e37,7.684926052738905e37,7.686925253038784e37,7.688924453338664e37,7.690923653638544e37,7.692922853938425e37,7.694922054238305e37,7.696921254538185e37,7.698920454838064e37,7.700919655137944e37,7.702918855437825e37,7.704918055737705e37,7.706917256037585e37,7.708916456337465e37,7.710915656637345e37,7.712914856937225e37,7.714914057237105e37,7.716913257536985e37,7.718912457836865e37,7.720911658136745e37,7.722910858436626e37,7.724910058736505e37,7.726909259036385e37,7.728908459336265e37,7.730907659636145e37,7.732906859936026e37,7.734906060235906e37,7.736905260535786e37,7.738904460835665e37,7.740903661135545e37,7.742902861435426e37,7.744902061735306e37,7.746901262035186e37,7.748900462335066e37,7.750899662634945e37,7.752898862934826e37,7.754898063234706e37,7.756897263534586e37,7.758896463834466e37,7.760895664134346e37,7.762894864434227e37,7.764894064734106e37,7.766893265033986e37,7.768892465333866e37,7.770891665633746e37,7.772890865933627e37,7.774890066233507e37,7.776889266533386e37,7.778888466833266e37,7.780887667133146e37,7.782886867433027e37,7.784886067732907e37,7.786885268032787e37,7.788884468332667e37,7.790883668632546e37,7.792882868932427e37,7.794882069232307e37,7.796881269532187e37,7.798880469832067e37,7.800879670131947e37,7.802878870431828e37,7.804878070731707e37,7.806877271031587e37,7.808876471331467e37,7.810875671631347e37,7.812874871931228e37,7.814874072231108e37,7.816873272530987e37,7.818872472830867e37,7.820871673130747e37,7.822870873430628e37,7.824870073730508e37,7.826869274030388e37,7.828868474330268e37,7.830867674630147e37,7.832866874930028e37,7.834866075229908e37,7.836865275529788e37,7.838864475829668e37,7.840863676129548e37,7.842862876429428e37,7.844862076729308e37,7.846861277029188e37,7.848860477329068e37,7.850859677628948e37,7.852858877928829e37,7.854858078228709e37,7.856857278528588e37,7.858856478828468e37,7.860855679128348e37,7.862854879428229e37,7.864854079728109e37,7.866853280027989e37,7.868852480327868e37,7.870851680627748e37,7.872850880927629e37,7.874850081227509e37,7.876849281527389e37,7.878848481827269e37,7.880847682127149e37,7.882846882427029e37,7.884846082726909e37,7.886845283026789e37,7.888844483326669e37,7.890843683626549e37,7.89284288392643e37,7.894842084226309e37,7.896841284526189e37,7.898840484826069e37,7.900839685125949e37,7.90283888542583e37,7.90483808572571e37,7.90683728602559e37,7.908836486325469e37,7.910835686625349e37,7.91283488692523e37,7.91483408722511e37,7.91683328752499e37,7.91883248782487e37,7.92083168812475e37,7.92283088842463e37,7.92483008872451e37,7.92682928902439e37,7.92882848932427e37,7.93082768962415e37,7.932826889924031e37,7.93482609022391e37,7.93682529052379e37,7.93882449082367e37,7.94082369112355e37,7.942822891423431e37,7.944822091723311e37,7.946821292023191e37,7.94882049232307e37,7.95081969262295e37,7.952818892922831e37,7.954818093222711e37,7.956817293522591e37,7.958816493822471e37,7.96081569412235e37,7.962814894422231e37,7.964814094722111e37,7.966813295021991e37,7.968812495321871e37,7.970811695621751e37,7.972810895921632e37,7.974810096221511e37,7.976809296521391e37,7.978808496821271e37,7.980807697121151e37,7.982806897421032e37,7.984806097720912e37,7.986805298020791e37,7.988804498320671e37,7.990803698620551e37,7.992802898920432e37,7.994802099220312e37,7.996801299520192e37,7.998800499820072e37,8.000799700119951e37,8.002798900419832e37,8.004798100719712e37,8.006797301019592e37,8.008796501319472e37,8.010795701619352e37,8.012794901919233e37,8.014794102219112e37,8.016793302518992e37,8.018792502818872e37,8.020791703118752e37,8.022790903418633e37,8.024790103718513e37,8.026789304018392e37,8.028788504318272e37,8.030787704618152e37,8.032786904918033e37,8.034786105217913e37,8.036785305517793e37,8.038784505817673e37,8.040783706117552e37,8.042782906417433e37,8.044782106717313e37,8.046781307017193e37,8.048780507317073e37,8.050779707616953e37,8.052778907916833e37,8.054778108216713e37,8.056777308516593e37,8.058776508816473e37,8.060775709116353e37,8.062774909416234e37,8.064774109716114e37,8.066773310015993e37,8.068772510315873e37,8.070771710615753e37,8.072770910915634e37,8.074770111215514e37,8.076769311515394e37,8.078768511815273e37,8.080767712115153e37,8.082766912415034e37,8.084766112714914e37,8.086765313014794e37,8.088764513314674e37,8.090763713614554e37,8.092762913914434e37,8.094762114214314e37,8.096761314514194e37,8.098760514814074e37,8.100759715113954e37,8.102758915413835e37,8.104758115713714e37,8.106757316013594e37,8.108756516313474e37,8.110755716613354e37,8.112754916913235e37,8.114754117213115e37,8.116753317512995e37,8.118752517812874e37,8.120751718112754e37,8.122750918412635e37,8.124750118712515e37,8.126749319012395e37,8.128748519312275e37,8.130747719612155e37,8.132746919912035e37,8.134746120211915e37,8.136745320511795e37,8.138744520811675e37,8.140743721111555e37,8.142742921411436e37,8.144742121711315e37,8.146741322011195e37,8.148740522311075e37,8.150739722610955e37,8.152738922910836e37,8.154738123210716e37,8.156737323510596e37,8.158736523810475e37,8.160735724110355e37,8.162734924410236e37,8.164734124710116e37,8.166733325009996e37,8.168732525309876e37,8.1707317256097555e37,8.172730925909636e37,8.174730126209516e37,8.176729326509396e37,8.178728526809276e37,8.180727727109156e37,8.182726927409037e37,8.184726127708916e37,8.186725328008796e37,8.188724528308676e37,8.190723728608556e37,8.192722928908437e37,8.194722129208317e37,8.196721329508196e37,8.198720529808076e37,8.200719730107956e37,8.202718930407837e37,8.204718130707717e37,8.206717331007597e37,8.208716531307477e37,8.2107157316073565e37,8.212714931907237e37,8.214714132207117e37,8.216713332506997e37,8.218712532806877e37,8.220711733106757e37,8.222710933406638e37,8.224710133706517e37,8.226709334006397e37,8.228708534306277e37,8.230707734606157e37,8.232706934906038e37,8.234706135205918e37,8.236705335505797e37,8.238704535805677e37,8.240703736105557e37,8.242702936405438e37,8.244702136705318e37,8.246701337005198e37,8.248700537305078e37,8.2506997376049575e37,8.252698937904838e37,8.254698138204718e37,8.256697338504598e37,8.258696538804478e37,8.260695739104358e37,8.262694939404238e37,8.264694139704118e37,8.266693340003998e37,8.268692540303878e37,8.270691740603758e37,8.272690940903639e37,8.274690141203519e37,8.276689341503398e37,8.278688541803278e37,8.2806877421031585e37,8.282686942403039e37,8.284686142702919e37,8.286685343002799e37,8.288684543302678e37,8.2906837436025585e37,8.292682943902439e37,8.294682144202319e37,8.296681344502199e37,8.298680544802079e37,8.300679745101959e37,8.302678945401839e37,8.304678145701719e37,8.306677346001599e37,8.308676546301479e37,8.310675746601359e37,8.31267494690124e37,8.314674147201119e37,8.316673347500999e37,8.318672547800879e37,8.3206717481007595e37,8.32267094840064e37,8.32467014870052e37,8.3266693490004e37,8.328668549300279e37,8.3306677496001595e37,8.33266694990004e37,8.33466615019992e37,8.3366653504998e37,8.33866455079968e37,8.34066375109956e37,8.34266295139944e37,8.34466215169932e37,8.3466613519992e37,8.34866055229908e37,8.35065975259896e37,8.352658952898841e37,8.35465815319872e37,8.3566573534986e37,8.35865655379848e37,8.3606557540983605e37,8.362654954398241e37,8.364654154698121e37,8.366653354998001e37,8.36865255529788e37,8.3706517555977605e37,8.372650955897641e37,8.374650156197521e37,8.376649356497401e37,8.378648556797281e37,8.3806477570971605e37,8.382646957397041e37,8.384646157696921e37,8.386645357996801e37,8.388644558296681e37,8.390643758596561e37,8.392642958896442e37,8.394642159196321e37,8.396641359496201e37,8.398640559796081e37,8.4006397600959615e37,8.402638960395842e37,8.404638160695722e37,8.406637360995601e37,8.408636561295481e37,8.4106357615953615e37,8.412634961895242e37,8.414634162195122e37,8.416633362495002e37,8.418632562794882e37,8.4206317630947615e37,8.422630963394642e37,8.424630163694522e37,8.426629363994402e37,8.428628564294282e37,8.4306277645941625e37,8.432626964894042e37,8.434626165193922e37,8.436625365493802e37,8.438624565793682e37,8.4406237660935625e37,8.442622966393443e37,8.444622166693323e37,8.446621366993202e37,8.448620567293082e37,8.4506197675929625e37,8.452618967892843e37,8.454618168192723e37,8.456617368492603e37,8.458616568792483e37,8.4606157690923625e37,8.462614969392243e37,8.464614169692123e37,8.466613369992003e37,8.468612570291883e37,8.4706117705917635e37,8.472610970891643e37,8.474610171191523e37,8.476609371491403e37,8.478608571791283e37,8.4806077720911635e37,8.482606972391044e37,8.484606172690924e37,8.486605372990803e37,8.488604573290683e37,8.4906037735905635e37,8.492602973890444e37,8.494602174190324e37,8.496601374490204e37,8.498600574790083e37,8.5005997750899635e37,8.502598975389844e37,8.504598175689724e37,8.506597375989604e37,8.508596576289484e37,8.510595776589364e37,8.512594976889245e37,8.514594177189124e37,8.516593377489005e37,8.518592577788884e37,8.520591778088764e37,8.522590978388645e37,8.524590178688524e37,8.526589378988405e37,8.528588579288284e37,8.530587779588165e37,8.532586979888045e37,8.534586180187924e37,8.536585380487805e37,8.538584580787684e37,8.540583781087565e37,8.542582981387445e37,8.544582181687324e37,8.546581381987205e37,8.548580582287084e37,8.550579782586965e37,8.552578982886845e37,8.554578183186726e37,8.556577383486605e37,8.558576583786484e37,8.560575784086366e37,8.562574984386245e37,8.564574184686126e37,8.566573384986005e37,8.568572585285886e37,8.570571785585766e37,8.572570985885645e37,8.574570186185526e37,8.576569386485405e37,8.578568586785286e37,8.580567787085166e37,8.582566987385047e37,8.584566187684926e37,8.586565387984805e37,8.588564588284686e37,8.590563788584566e37,8.592562988884447e37,8.594562189184326e37,8.596561389484205e37,8.598560589784086e37,8.600559790083966e37,8.602558990383847e37,8.604558190683726e37,8.606557390983607e37,8.608556591283486e37,8.610555791583366e37,8.612554991883247e37,8.614554192183126e37,8.616553392483007e37,8.618552592782886e37,8.620551793082767e37,8.622550993382647e37,8.624550193682526e37,8.626549393982407e37,8.628548594282286e37,8.630547794582167e37,8.632546994882047e37,8.634546195181928e37,8.636545395481807e37,8.638544595781686e37,8.640543796081568e37,8.642542996381447e37,8.644542196681328e37,8.646541396981207e37,8.648540597281088e37,8.650539797580968e37,8.652538997880847e37,8.654538198180728e37,8.656537398480607e37,8.658536598780488e37,8.660535799080368e37,8.662534999380247e37,8.664534199680128e37,8.666533399980007e37,8.668532600279888e37,8.670531800579768e37,8.672531000879649e37,8.674530201179528e37,8.676529401479407e37,8.678528601779288e37,8.680527802079168e37,8.682527002379049e37,8.684526202678928e37,8.68652540297881e37,8.688524603278688e37,8.690523803578568e37,8.692523003878449e37,8.694522204178328e37,8.69652140447821e37,8.698520604778088e37,8.70051980507797e37,8.702519005377849e37,8.704518205677728e37,8.70651740597761e37,8.708516606277488e37,8.71051580657737e37,8.712515006877249e37,8.71451420717713e37,8.71651340747701e37,8.718512607776888e37,8.72051180807677e37,8.722511008376649e37,8.72451020867653e37,8.72650940897641e37,8.728508609276288e37,8.73050780957617e37,8.732507009876049e37,8.73450621017593e37,8.73650541047581e37,8.73850461077569e37,8.74050381107557e37,8.742503011375449e37,8.74450221167533e37,8.74650141197521e37,8.74850061227509e37,8.75049981257497e37,8.75249901287485e37,8.75449821317473e37,8.75649741347461e37,8.75849661377449e37,8.76049581407437e37,8.76249501437425e37,8.76449421467413e37,8.766493414974011e37,8.76849261527389e37,8.77049181557377e37,8.77249101587365e37,8.77449021617353e37,8.776489416473411e37,8.77848861677329e37,8.78048781707317e37,8.78248701737305e37,8.78448621767293e37,8.786485417972811e37,8.78848461827269e37,8.790483818572572e37,8.79248301887245e37,8.79448221917233e37,8.796481419472211e37,8.79848061977209e37,8.800479820071972e37,8.80247902037185e37,8.804478220671732e37,8.806477420971611e37,8.80847662127149e37,8.810475821571372e37,8.81247502187125e37,8.814474222171132e37,8.816473422471011e37,8.818472622770892e37,8.820471823070772e37,8.82247102337065e37,8.824470223670532e37,8.826469423970411e37,8.828468624270292e37,8.830467824570172e37,8.832467024870053e37,8.834466225169932e37,8.836465425469811e37,8.838464625769692e37,8.840463826069572e37,8.842463026369453e37,8.844462226669332e37,8.846461426969211e37,8.848460627269092e37,8.850459827568972e37,8.852459027868853e37,8.854458228168732e37,8.856457428468613e37,8.858456628768492e37,8.860455829068372e37,8.862455029368253e37,8.864454229668132e37,8.866453429968013e37,8.868452630267892e37,8.870451830567774e37,8.872451030867653e37,8.874450231167532e37,8.876449431467413e37,8.878448631767292e37,8.880447832067174e37,8.882447032367053e37,8.884446232666934e37,8.886445432966813e37,8.888444633266692e37,8.890443833566574e37,8.892443033866453e37,8.894442234166334e37,8.896441434466213e37,8.898440634766092e37,8.900439835065974e37,8.902439035365853e37,8.904438235665734e37,8.906437435965613e37,8.908436636265494e37,8.910435836565374e37,8.912435036865253e37,8.914434237165134e37,8.916433437465013e37,8.918432637764894e37,8.920431838064774e37,8.922431038364655e37,8.924430238664534e37,8.926429438964413e37,8.928428639264294e37,8.930427839564174e37,8.932427039864055e37,8.934426240163934e37,8.936425440463815e37,8.938424640763694e37,8.940423841063574e37,8.942423041363455e37,8.944422241663334e37,8.946421441963215e37,8.948420642263094e37,8.950419842562976e37,8.952419042862855e37,8.954418243162734e37,8.956417443462615e37,8.958416643762494e37,8.960415844062376e37,8.962415044362255e37,8.964414244662134e37,8.966413444962015e37,8.968412645261894e37,8.970411845561776e37,8.972411045861655e37,8.974410246161536e37,8.976409446461415e37,8.978408646761294e37,8.980407847061176e37,8.982407047361055e37,8.984406247660936e37,8.986405447960815e37,8.988404648260696e37,8.990403848560576e37,8.992403048860455e37,8.994402249160336e37,8.996401449460215e37,8.998400649760096e37,9.000399850059976e37,9.002399050359857e37,9.004398250659736e37,9.006397450959615e37,9.008396651259496e37,9.010395851559376e37,9.012395051859257e37,9.014394252159136e37,9.016393452459015e37,9.018392652758896e37,9.020391853058776e37,9.022391053358657e37,9.024390253658536e37,9.026389453958417e37,9.028388654258296e37,9.030387854558176e37,9.032387054858057e37,9.034386255157936e37,9.036385455457817e37,9.038384655757696e37,9.040383856057578e37,9.042383056357457e37,9.044382256657336e37,9.046381456957217e37,9.048380657257096e37,9.050379857556978e37,9.052379057856857e37,9.054378258156738e37,9.056377458456617e37,9.058376658756496e37,9.060375859056378e37,9.062375059356257e37,9.064374259656138e37,9.066373459956017e37,9.068372660255898e37,9.070371860555778e37,9.072371060855657e37,9.074370261155538e37,9.076369461455417e37,9.078368661755298e37,9.080367862055178e37,9.082367062355057e37,9.084366262654938e37,9.086365462954817e37,9.088364663254698e37,9.090363863554578e37,9.092363063854459e37,9.094362264154338e37,9.096361464454217e37,9.098360664754098e37,9.100359865053978e37,9.102359065353859e37,9.104358265653738e37,9.10635746595362e37,9.108356666253498e37,9.110355866553378e37,9.112355066853259e37,9.114354267153138e37,9.11635346745302e37,9.118352667752898e37,9.12035186805278e37,9.122351068352659e37,9.124350268652538e37,9.12634946895242e37,9.128348669252298e37,9.13034786955218e37,9.132347069852059e37,9.134346270151938e37,9.13634547045182e37,9.138344670751698e37,9.14034387105158e37,9.142343071351459e37,9.14434227165134e37,9.14634147195122e37,9.148340672251098e37,9.15033987255098e37,9.152339072850859e37,9.15433827315074e37,9.15633747345062e37,9.1583366737505e37,9.16033587405038e37,9.162335074350259e37,9.16433427465014e37,9.16633347495002e37,9.1683326752499e37,9.17033187554978e37,9.17233107584966e37,9.17433027614954e37,9.17632947644942e37,9.1783286767493e37,9.18032787704918e37,9.18232707734906e37,9.18432627764894e37,9.186325477948821e37,9.1883246782487e37,9.19032387854858e37,9.19232307884846e37,9.19432227914834e37,9.196321479448221e37,9.1983206797481e37,9.20031988004798e37,9.20231908034786e37,9.20431828064774e37,9.206317480947621e37,9.2083166812475e37,9.210315881547382e37,9.21231508184726e37,9.21431428214714e37,9.216313482447021e37,9.2183126827469e37,9.220311883046782e37,9.22231108334666e37,9.224310283646542e37,9.226309483946421e37,9.2283086842463e37,9.230307884546182e37,9.23230708484606e37,9.234306285145942e37,9.236305485445821e37,9.238304685745702e37,9.240303886045582e37,9.24230308634546e37,9.244302286645342e37,9.246301486945221e37,9.248300687245102e37,9.250299887544982e37,9.252299087844863e37,9.254298288144742e37,9.256297488444621e37,9.258296688744502e37,9.260295889044382e37,9.262295089344263e37,9.264294289644142e37,9.266293489944021e37,9.268292690243902e37,9.270291890543782e37,9.272291090843663e37,9.274290291143542e37,9.276289491443423e37,9.278288691743302e37,9.280287892043182e37,9.282287092343063e37,9.284286292642942e37,9.286285492942823e37,9.288284693242702e37,9.290283893542584e37,9.292283093842463e37,9.294282294142342e37,9.296281494442223e37,9.298280694742102e37,9.300279895041984e37,9.302279095341863e37,9.304278295641744e37,9.306277495941623e37,9.308276696241502e37,9.310275896541384e37,9.312275096841263e37,9.314274297141144e37,9.316273497441023e37,9.318272697740903e37,9.320271898040784e37,9.322271098340663e37,9.324270298640544e37,9.326269498940423e37,9.328268699240304e37,9.330267899540184e37,9.332267099840063e37,9.334266300139944e37,9.336265500439823e37,9.338264700739704e37,9.340263901039584e37,9.342263101339465e37,9.344262301639344e37,9.346261501939223e37,9.348260702239104e37,9.350259902538984e37,9.352259102838865e37,9.354258303138744e37,9.356257503438625e37,9.358256703738504e37,9.360255904038384e37,9.362255104338265e37,9.364254304638144e37,9.366253504938025e37,9.368252705237904e37,9.370251905537786e37,9.372251105837665e37,9.374250306137544e37,9.376249506437425e37,9.378248706737304e37,9.380247907037186e37,9.382247107337065e37,9.384246307636944e37,9.386245507936825e37,9.388244708236705e37,9.390243908536586e37,9.392243108836465e37,9.394242309136346e37,9.396241509436225e37,9.398240709736105e37,9.400239910035986e37,9.402239110335865e37,9.404238310635746e37,9.406237510935625e37,9.408236711235506e37,9.410235911535386e37,9.412235111835265e37,9.414234312135146e37,9.416233512435025e37,9.418232712734906e37,9.420231913034786e37,9.422231113334667e37,9.424230313634546e37,9.426229513934425e37,9.428228714234306e37,9.430227914534186e37,9.432227114834067e37,9.434226315133946e37,9.436225515433825e37,9.438224715733706e37,9.440223916033586e37,9.442223116333467e37,9.444222316633346e37,9.446221516933227e37,9.448220717233106e37,9.450219917532986e37,9.452219117832867e37,9.454218318132746e37,9.456217518432627e37,9.458216718732506e37,9.460215919032388e37,9.462215119332267e37,9.464214319632146e37,9.466213519932027e37,9.468212720231907e37,9.470211920531788e37,9.472211120831667e37,9.474210321131548e37,9.476209521431427e37,9.478208721731307e37,9.480207922031188e37,9.482207122331067e37,9.484206322630948e37,9.486205522930827e37,9.488204723230708e37,9.490203923530588e37,9.492203123830467e37,9.494202324130348e37,9.496201524430227e37,9.498200724730108e37,9.500199925029988e37,9.502199125329867e37,9.504198325629748e37,9.506197525929627e37,9.508196726229508e37,9.510195926529388e37,9.512195126829269e37,9.514194327129148e37,9.516193527429027e37,9.518192727728908e37,9.520191928028788e37,9.522191128328669e37,9.524190328628548e37,9.52618952892843e37,9.528188729228308e37,9.530187929528188e37,9.532187129828069e37,9.534186330127948e37,9.53618553042783e37,9.538184730727709e37,9.54018393102759e37,9.542183131327469e37,9.544182331627348e37,9.54618153192723e37,9.548180732227109e37,9.55017993252699e37,9.552179132826869e37,9.554178333126748e37,9.55617753342663e37,9.558176733726509e37,9.56017593402639e37,9.562175134326269e37,9.56417433462615e37,9.56617353492603e37,9.568172735225909e37,9.57017193552579e37,9.572171135825669e37,9.57417033612555e37,9.57616953642543e37,9.57816873672531e37,9.58016793702519e37,9.582167137325069e37,9.58416633762495e37,9.58616553792483e37,9.58816473822471e37,9.59016393852459e37,9.59216313882447e37,9.59416233912435e37,9.59616153942423e37,9.59816073972411e37,9.60015994002399e37,9.60215914032387e37,9.60415834062375e37,9.606157540923631e37,9.60815674122351e37,9.61015594152339e37,9.61215514182327e37,9.61415434212315e37,9.616153542423031e37,9.61815274272291e37,9.62015194302279e37,9.62215114332267e37,9.62415034362255e37,9.626149543922431e37,9.62814874422231e37,9.630147944522192e37,9.63214714482207e37,9.63414634512195e37,9.636145545421831e37,9.63814474572171e37,9.640143946021592e37,9.64214314632147e37,9.644142346621352e37,9.646141546921231e37,9.64814074722111e37,9.650139947520992e37,9.65213914782087e37,9.654138348120752e37,9.656137548420631e37,9.658136748720512e37,9.660135949020392e37,9.662135149320271e37,9.664134349620152e37,9.666133549920031e37,9.668132750219912e37,9.670131950519792e37,9.672131150819671e37,9.674130351119552e37,9.676129551419431e37,9.678128751719312e37,9.680127952019192e37,9.682127152319073e37,9.684126352618952e37,9.686125552918831e37,9.688124753218713e37,9.690123953518592e37,9.692123153818473e37,9.694122354118352e37,9.696121554418233e37,9.698120754718113e37,9.700119955017992e37,9.702119155317873e37,9.704118355617752e37,9.706117555917633e37,9.708116756217513e37,9.710115956517394e37,9.712115156817273e37,9.714114357117152e37,9.716113557417033e37,9.718112757716913e37,9.720111958016794e37,9.722111158316673e37,9.724110358616554e37,9.726109558916433e37,9.728108759216313e37,9.730107959516194e37,9.732107159816073e37,9.734106360115954e37,9.736105560415833e37,9.738104760715713e37,9.740103961015594e37,9.742103161315473e37,9.744102361615354e37,9.746101561915233e37,9.748100762215114e37,9.750099962514994e37,9.752099162814873e37,9.754098363114754e37,9.756097563414633e37,9.758096763714515e37,9.760095964014394e37,9.762095164314275e37,9.764094364614154e37,9.766093564914033e37,9.768092765213915e37,9.770091965513794e37,9.772091165813675e37,9.774090366113554e37,9.776089566413435e37,9.778088766713315e37,9.780087967013194e37,9.782087167313075e37,9.784086367612954e37,9.786085567912835e37,9.788084768212715e37,9.790083968512596e37,9.792083168812475e37,9.794082369112354e37,9.796081569412235e37,9.798080769712115e37,9.800079970011996e37,9.802079170311875e37,9.804078370611754e37,9.806077570911635e37,9.808076771211515e37,9.810075971511396e37,9.812075171811275e37,9.814074372111156e37,9.816073572411035e37,9.818072772710915e37,9.820071973010796e37,9.822071173310675e37,9.824070373610556e37,9.826069573910435e37,9.828068774210316e37,9.830067974510196e37,9.832067174810075e37,9.834066375109956e37,9.836065575409835e37,9.838064775709717e37,9.840063976009596e37,9.842063176309477e37,9.844062376609356e37,9.846061576909235e37,9.848060777209117e37,9.850059977508996e37,9.852059177808877e37,9.854058378108756e37,9.856057578408635e37,9.858056778708517e37,9.860055979008396e37,9.862055179308277e37,9.864054379608156e37,9.866053579908037e37,9.868052780207917e37,9.870051980507796e37,9.872051180807677e37,9.874050381107556e37,9.876049581407437e37,9.878048781707317e37,9.880047982007198e37,9.882047182307077e37,9.884046382606956e37,9.886045582906837e37,9.888044783206717e37,9.890043983506598e37,9.892043183806477e37,9.894042384106358e37,9.896041584406237e37,9.898040784706117e37,9.900039985005998e37,9.902039185305877e37,9.904038385605758e37,9.906037585905637e37,9.908036786205519e37,9.910035986505398e37,9.912035186805277e37,9.914034387105158e37,9.916033587405037e37,9.918032787704919e37,9.920031988004798e37,9.922031188304677e37,9.924030388604558e37,9.926029588904437e37,9.928028789204319e37,9.930027989504198e37,9.932027189804079e37,9.934026390103958e37,9.936025590403837e37,9.938024790703719e37,9.940023991003598e37,9.942023191303479e37,9.944022391603358e37,9.94602159190324e37,9.948020792203119e37,9.950019992502998e37,9.952019192802879e37,9.954018393102758e37,9.95601759340264e37,9.958016793702519e37,9.9600159940024e37,9.962015194302279e37,9.964014394602158e37,9.96601359490204e37,9.968012795201919e37,9.9700119955018e37,9.972011195801679e37,9.974010396101558e37,9.97600959640144e37,9.978008796701319e37,9.9800079970012e37,9.982007197301079e37,9.98400639760096e37,9.98600559790084e37,9.988004798200719e37,9.9900039985006e37,9.992003198800479e37,9.99400239910036e37,9.99600159940024e37,9.99800079970012e37,1.0e38]}

},{}],96:[function(require,module,exports){
module.exports={"expected":[-0.27144176165949063,-0.27154999220372544,-0.27165839557148086,-0.2717669722462769,-0.27187572271356825,-0.2719846474607547,-0.2720937469771909,-0.2722030217541971,-0.2723124722850687,-0.2724220990650874,-0.27253190259153093,-0.27264188336368395,-0.27275204188284824,-0.27286237865235374,-0.27297289417756887,-0.2730835889659114,-0.27319446352685933,-0.27330551837196154,-0.2734167540148491,-0.2735281709712461,-0.27363976975898074,-0.2737515437568958,-0.27386350775757273,-0.2739756551557753,-0.27408798647786053,-0.2742005022523464,-0.27431320300992285,-0.27442608928346407,-0.27453916160803965,-0.2746524205209267,-0.27476586656162144,-0.2748795002718514,-0.2749933221955872,-0.2751073328790547,-0.27522153287074735,-0.2753359227214381,-0.27545050298419205,-0.2755652742143788,-0.2756802369696848,-0.27579539181012597,-0.2759107392980604,-0.2760262799982014,-0.27614201447762976,-0.276257943305807,-0.2763740670545885,-0.27649038629823625,-0.2766069016134324,-0.2767236135792923,-0.27684052277737786,-0.2769576297917111,-0.2770749352087878,-0.2771924396175908,-0.2773101436096041,-0.2774280477788264,-0.2775461527217852,-0.2776644590375507,-0.27778296732775004,-0.27790167819658135,-0.2780205922508281,-0.2781397100998736,-0.27825903235571536,-0.27837855963297986,-0.27849829254893693,-0.27861822406090136,-0.27873837010347624,-0.2788587236525235,-0.27897928533603616,-0.2791000557847259,-0.2792210356320382,-0.27934222551416804,-0.27946362607007513,-0.27958523794149964,-0.2797070617729782,-0.2798290982118595,-0.2799513479083201,-0.28007381151538097,-0.2801964896889234,-0.2803193830877054,-0.2804424923733779,-0.2805658182105017,-0.2806893612665637,-0.280813122211994,-0.2809371017201826,-0.2810613004674965,-0.2811857191332968,-0.281310358399956,-0.2814352189528752,-0.28156030148050193,-0.2816856066743474,-0.2818111352290045,-0.2819368878421656,-0.2820628652146405,-0.28218906805037486,-0.28231549705646786,-0.28244215294319125,-0.28256903642400744,-0.28269614821558836,-0.2828234890378341,-0.28295105961389216,-0.283078860670176,-0.2832068929363848,-0.2833351571455224,-0.2834636540339169,-0.2835923843412405,-0.28372134881052885,-0.28385053993356874,-0.2839799749543817,-0.28410964638660047,-0.2842395549869159,-0.2843697015154835,-0.28450008673594424,-0.28463071141544516,-0.2847615763246605,-0.2848926822378126,-0.2850240299326935,-0.28515562019068597,-0.2852874537967854,-0.2854195315396213,-0.28555185421147955,-0.285684422608324,-0.28581723752981913,-0.2859502997793521,-0.2860836101640556,-0.28621716949483034,-0.28635097858636827,-0.28648503825717514,-0.28661934932959443,-0.28675391262982997,-0.2868887289879703,-0.2870237992380119,-0.2871591242178836,-0.2872947047694701,-0.287430541738637,-0.28756663597525467,-0.2877029883332235,-0.2878395996704982,-0.28797647084911343,-0.2881136027352086,-0.28825099619905353,-0.28838865211507414,-0.2885265713618782,-0.28866475482228127,-0.2888032033833332,-0.2889419179363444,-0.2890808993769123,-0.28922014860494855,-0.289359666524706,-0.28949944511319486,-0.28963950312935705,-0.28977983257626033,-0.28992043437579634,-0.29006130945433634,-0.2902024587427595,-0.2903438831764814,-0.2904855836954829,-0.29062756124433897,-0.2907698167722484,-0.2909123512330624,-0.29105516558531536,-0.2911982607922539,-0.29134163782186745,-0.2914852976469186,-0.29162924124497375,-0.29177346959843375,-0.2919179836945656,-0.2920627845255332,-0.29220787308842927,-0.29235325038530724,-0.29249891742321343,-0.29264487521421917,-0.29279112477545377,-0.29293766712913727,-0.29308450330261354,-0.2932316343283839,-0.29337906124414076,-0.2935267850928014,-0.29367480692254266,-0.29382312778683506,-0.2939717487444778,-0.29412067085963367,-0.29426989520186486,-0.2944194228461681,-0.294569254873011,-0.2947193923683681,-0.29486983642375736,-0.29502058813627724,-0.2951716486086437,-0.29532301894922763,-0.2954747002720927,-0.2956266839849281,-0.29577899061747764,-0.2959316116089655,-0.2960845480966094,-0.2962378012235138,-0.2963913721387087,-0.2965452619971902,-0.29669947195996055,-0.29685400319406885,-0.2970088568726522,-0.29716403417497694,-0.29731953628648033,-0.2974753643988126,-0.2976315197098795,-0.2977880034238848,-0.2979448167513735,-0.29810196090927554,-0.29825943712094927,-0.29841724661622593,-0.29857539063145416,-0.298733870409545,-0.29889268720001716,-0.29905184225904274,-0.29921133684949364,-0.2993711722409878,-0.29953134970993617,-0.29969187053959,-0.29985273602008883,-0.3000139474485084,-0.3001755061289091,-0.30033741337238534,-0.3004996704971145,-0.30066227882840707,-0.30082523969875685,-0.3009885544478915,-0.301152224422824,-0.30131625097790365,-0.3014806354748688,-0.3016453792828988,-0.30181048377866737,-0.30197595034639557,-0.30214178037790607,-0.3023079646523669,-0.3024745257941629,-0.3026414546212732,-0.30280875255647394,-0.3029764210304196,-0.30314446148169943,-0.30331287535689483,-0.3034816641106372,-0.30365082920566633,-0.30382037211288915,-0.30399029431143904,-0.3041605972887361,-0.3043312825405473,-0.3045023515710473,-0.30467380589288057,-0.3048456470272229,-0.3050178765038444,-0.3051904958611727,-0.3053635066463566,-0.30553691041533065,-0.30571070873287987,-0.30588490317270556,-0.3060594953174914,-0.3062344867589699,-0.30640987909799045,-0.30658567394458663,-0.30676187291804513,-0.306938477646975,-0.3071154897693777,-0.30729291093271716,-0.30747074279399145,-0.3076489870198044,-0.30782764528643825,-0.30800671927992657,-0.30818621069612845,-0.308366121240803,-0.30854645262968433,-0.30872720658855807,-0.3089083848533374,-0.30908998917014097,-0.3092720212953708,-0.3094544713350567,-0.3096373643602825,-0.30982069052551897,-0.31000445162909723,-0.3101886494800338,-0.3103732858981131,-0.3105583627139709,-0.31074388176917894,-0.31092984491632963,-0.3111162540191219,-0.31130311095244845,-0.31149041760248264,-0.3116781758667674,-0.31186638765430413,-0.31205505488564306,-0.31224417949297406,-0.3124337634202187,-0.3126238086231229,-0.3128143170693506,-0.31300529073857825,-0.3131967316225906,-0.31338864172537695,-0.3135810230632286,-0.31377387766483716,-0.31396720757139396,-0.3141610148366902,-0.31435530152721847,-0.31455006972227484,-0.3147453215140624,-0.3149410590077954,-0.31513728432180477,-0.31533399958764435,-0.3155312006482034,-0.315728902249987,-0.31592710027861215,-0.3161257969196105,-0.31632499437228534,-0.31652469484982426,-0.3167249005794139,-0.3169256138023544,-0.3171268367741769,-0.3173285717647605,-0.31753082105845143,-0.317733586954183,-0.3179368717655972,-0.318140677821167,-0.3183450074643202,-0.3185498630535648,-0.318755246962615,-0.3189611615805191,-0.3191676093117889,-0.3193745925765293,-0.3195821138105705,-0.3197901688164029,-0.3199987733427377,-0.3202079232414738,-0.3204176210126866,-0.32062786917285635,-0.3208386702550083,-0.32105002680885414,-0.3212619414009356,-0.3214744166147688,-0.32168745505099067,-0.32190105932750657,-0.32211523207964005,-0.3223299759602832,-0.3225452936400498,-0.3227611878074291,-0.3229776611689419,-0.3231947164492981,-0.32341235639155574,-0.32363058375728215,-0.3238494013267165,-0.3240688118989345,-0.3242888112606967,-0.32450941629273455,-0.3247306228393808,-0.32495243377673644,-0.3251748520005884,-0.3253978804265849,-0.3256215219904132,-0.32584577964797873,-0.3260706563755865,-0.3262961551701249,-0.3265222790492506,-0.32674903105157616,-0.3269764142368601,-0.32720443168619784,-0.32743308650221614,-0.3276623818092688,-0.32789232075363517,-0.32812290650372,-0.3283541422502569,-0.32858603120651275,-0.3288185766084954,-0.3290517742615679,-0.3292856423338286,-0.32952017669828687,-0.3297553806840337,-0.3299912576439732,-0.33022781095504483,-0.33046504401844773,-0.3307029602598676,-0.3309415631297069,-0.33118085610331643,-0.33142084268123106,-0.33166152638940716,-0.331902910779463,-0.33214499942892217,-0.33238779594146023,-0.33263130394715296,-0.3328755271027288,-0.3331204690918239,-0.33336613362524,-0.3336125244412051,-0.3338596374067763,-0.3341074920900716,-0.3343560844376941,-0.33460541830025003,-0.33485549755712435,-0.3351063261167611,-0.3353579079169474,-0.3356102469250998,-0.33586334713855526,-0.3361172125848651,-0.3363718473220923,-0.3366272554391131,-0.3368834410559212,-0.3371404083239372,-0.3373981614263202,-0.3376567045782843,-0.33791604202741854,-0.3381761780540111,-0.3384371169713772,-0.33869886312619096,-0.33896142089882186,-0.3392247862847011,-0.3394889805443035,-0.339753999768284,-0.34001984847523825,-0.3402865312192018,-0.3405540525900128,-0.340822417213678,-0.34109162975274493,-0.3413616949066775,-0.34163261741223716,-0.3419044020438685,-0.34217705361408995,-0.34245057697388936,-0.3427249770131248,-0.34300025866093065,-0.34327642688612814,-0.34355348669764235,-0.34383144314492353,-0.34411030131837483,-0.34439006634978486,-0.34467074341276605,-0.3449523287210715,-0.3452348455080285,-0.3455182901026399,-0.3458026678503135,-0.34608798414056136,-0.3463742444074741,-0.34666145413020094,-0.3469496188334372,-0.34723874408791744,-0.3475288355109154,-0.34781989876675085,-0.3481119395673031,-0.3484049636725313,-0.34869897689100215,-0.3489939850804243,-0.3492899941481901,-0.3495870100519252,-0.34988503880004496,-0.35018408645231885,-0.35048415912044273,-0.3507852629686182,-0.35108739455430443,-0.35139057943475066,-0.3516948143086084,-0.3520001055560633,-0.3523064596128297,-0.35261388297077995,-0.35292238217858335,-0.35323196384235395,-0.3535426346263073,-0.3538544012534263,-0.3541672705061371,-0.35448124922699364,-0.354796344319373,-0.3551125627481798,-0.3554299115405609,-0.3557483977866311,-0.3560680286402077,-0.3563888113195571,-0.35671075310815176,-0.3570338613554378,-0.3573581434776138,-0.35768359655191534,-0.3580102489053748,-0.3583380977905536,-0.35866715089867873,-0.3589974159917992,-0.35932890090363584,-0.3596616135404443,-0.35999556188189036,-0.36033075398193876,-0.3606671979697547,-0.36100490205061964,-0.3613438745068601,-0.36168412369879077,-0.3620256580656722,-0.3623684861266823,-0.3627126164819032,-0.36305805781332284,-0.36340481888585197,-0.36375290854835673,-0.3641023357347071,-0.3644531094648414,-0.3648052275854671,-0.36515872176897174,-0.36551359008308293,-0.3658698419029895,-0.3662274866955248,-0.3665865340203344,-0.3669469935310629,-0.36730887497655884,-0.3676721882020986,-0.3680369431506308,-0.3684031498640387],"x":[-50.0,-49.940239043824704,-49.8804780876494,-49.820717131474105,-49.7609561752988,-49.701195219123505,-49.64143426294821,-49.581673306772906,-49.52191235059761,-49.462151394422314,-49.40239043824701,-49.342629482071715,-49.28286852589641,-49.223107569721115,-49.16334661354582,-49.103585657370516,-49.04382470119522,-48.98406374501992,-48.92430278884462,-48.864541832669325,-48.80478087649402,-48.745019920318725,-48.68525896414343,-48.625498007968126,-48.56573705179283,-48.50597609561753,-48.44621513944223,-48.386454183266935,-48.32669322709163,-48.266932270916335,-48.20717131474104,-48.147410358565736,-48.08764940239044,-48.02788844621514,-47.96812749003984,-47.908366533864545,-47.84860557768924,-47.788844621513945,-47.72908366533864,-47.669322709163346,-47.60956175298805,-47.54980079681275,-47.49003984063745,-47.430278884462155,-47.37051792828685,-47.310756972111555,-47.25099601593625,-47.191235059760956,-47.13147410358566,-47.07171314741036,-47.01195219123506,-46.95219123505976,-46.89243027888446,-46.832669322709165,-46.77290836653386,-46.713147410358566,-46.65338645418327,-46.59362549800797,-46.53386454183267,-46.47410358565737,-46.41434262948207,-46.354581673306775,-46.29482071713147,-46.235059760956176,-46.17529880478088,-46.11553784860558,-46.05577689243028,-45.99601593625498,-45.93625498007968,-45.876494023904385,-45.81673306772908,-45.756972111553786,-45.69721115537848,-45.63745019920319,-45.57768924302789,-45.51792828685259,-45.45816733067729,-45.398406374501995,-45.33864541832669,-45.278884462151396,-45.21912350597609,-45.1593625498008,-45.0996015936255,-45.0398406374502,-44.9800796812749,-44.9203187250996,-44.8605577689243,-44.800796812749006,-44.7410358565737,-44.68127490039841,-44.62151394422311,-44.56175298804781,-44.50199203187251,-44.44223107569721,-44.38247011952191,-44.322709163346616,-44.26294820717131,-44.20318725099602,-44.14342629482072,-44.08366533864542,-44.02390438247012,-43.96414342629482,-43.90438247011952,-43.844621513944226,-43.78486055776892,-43.72509960159363,-43.66533864541832,-43.60557768924303,-43.54581673306773,-43.48605577689243,-43.42629482071713,-43.366533864541836,-43.30677290836653,-43.24701195219124,-43.18725099601593,-43.12749003984064,-43.06772908366534,-43.00796812749004,-42.94820717131474,-42.88844621513944,-42.82868525896414,-42.76892430278885,-42.70916334661354,-42.64940239043825,-42.58964143426295,-42.52988047808765,-42.47011952191235,-42.41035856573705,-42.35059760956175,-42.29083665338646,-42.23107569721115,-42.17131474103586,-42.11155378486056,-42.05179282868526,-41.99203187250996,-41.93227091633466,-41.87250996015936,-41.81274900398407,-41.75298804780876,-41.69322709163347,-41.633466135458164,-41.57370517928287,-41.51394422310757,-41.45418326693227,-41.39442231075697,-41.33466135458168,-41.27490039840637,-41.21513944223108,-41.155378486055774,-41.09561752988048,-41.03585657370518,-40.97609561752988,-40.91633466135458,-40.85657370517928,-40.79681274900398,-40.73705179282869,-40.677290836653384,-40.61752988047809,-40.55776892430279,-40.49800796812749,-40.43824701195219,-40.37848605577689,-40.31872509960159,-40.2589641434263,-40.199203187250994,-40.1394422310757,-40.0796812749004,-40.0199203187251,-39.9601593625498,-39.9003984063745,-39.8406374501992,-39.78087649402391,-39.721115537848604,-39.66135458167331,-39.601593625498005,-39.54183266932271,-39.48207171314741,-39.42231075697211,-39.36254980079681,-39.30278884462152,-39.243027888446214,-39.18326693227092,-39.123505976095615,-39.06374501992032,-39.00398406374502,-38.94422310756972,-38.88446215139442,-38.82470119521912,-38.764940239043824,-38.70517928286853,-38.645418326693225,-38.58565737051793,-38.52589641434263,-38.46613545816733,-38.40637450199203,-38.34661354581673,-38.286852589641434,-38.22709163346614,-38.167330677290835,-38.10756972111554,-38.04780876494024,-37.98804780876494,-37.92828685258964,-37.86852589641434,-37.808764940239044,-37.74900398406375,-37.689243027888445,-37.62948207171315,-37.569721115537845,-37.50996015936255,-37.45019920318725,-37.39043824701195,-37.330677290836654,-37.27091633466136,-37.211155378486055,-37.15139442231076,-37.091633466135455,-37.03187250996016,-36.97211155378486,-36.91235059760956,-36.852589641434264,-36.79282868525896,-36.733067729083665,-36.67330677290837,-36.613545816733065,-36.55378486055777,-36.49402390438247,-36.43426294820717,-36.374501992031874,-36.31474103585657,-36.254980079681275,-36.19521912350598,-36.135458167330675,-36.07569721115538,-36.01593625498008,-35.95617529880478,-35.896414342629484,-35.83665338645418,-35.776892430278885,-35.71713147410359,-35.657370517928285,-35.59760956175299,-35.537848605577686,-35.47808764940239,-35.418326693227094,-35.35856573705179,-35.298804780876495,-35.2390438247012,-35.179282868525895,-35.1195219123506,-35.059760956175296,-35.0,-34.940239043824704,-34.8804780876494,-34.820717131474105,-34.7609561752988,-34.701195219123505,-34.64143426294821,-34.581673306772906,-34.52191235059761,-34.462151394422314,-34.40239043824701,-34.342629482071715,-34.28286852589641,-34.223107569721115,-34.16334661354582,-34.103585657370516,-34.04382470119522,-33.98406374501992,-33.92430278884462,-33.864541832669325,-33.80478087649402,-33.745019920318725,-33.68525896414343,-33.625498007968126,-33.56573705179283,-33.50597609561753,-33.44621513944223,-33.386454183266935,-33.32669322709163,-33.266932270916335,-33.20717131474104,-33.147410358565736,-33.08764940239044,-33.02788844621514,-32.96812749003984,-32.908366533864545,-32.84860557768924,-32.788844621513945,-32.72908366533864,-32.669322709163346,-32.60956175298805,-32.54980079681275,-32.49003984063745,-32.430278884462155,-32.37051792828685,-32.310756972111555,-32.25099601593625,-32.191235059760956,-32.13147410358566,-32.07171314741036,-32.01195219123506,-31.95219123505976,-31.89243027888446,-31.83266932270916,-31.772908366533866,-31.713147410358566,-31.653386454183266,-31.593625498007967,-31.53386454183267,-31.47410358565737,-31.41434262948207,-31.35458167330677,-31.294820717131476,-31.235059760956176,-31.175298804780876,-31.115537848605577,-31.05577689243028,-30.99601593625498,-30.93625498007968,-30.87649402390438,-30.816733067729082,-30.756972111553786,-30.697211155378486,-30.637450199203187,-30.577689243027887,-30.51792828685259,-30.45816733067729,-30.39840637450199,-30.338645418326692,-30.278884462151396,-30.219123505976096,-30.159362549800797,-30.099601593625497,-30.0398406374502,-29.9800796812749,-29.9203187250996,-29.860557768924302,-29.800796812749002,-29.741035856573706,-29.681274900398407,-29.621513944223107,-29.561752988047807,-29.50199203187251,-29.44223107569721,-29.382470119521912,-29.322709163346612,-29.262948207171316,-29.203187250996017,-29.143426294820717,-29.083665338645417,-29.02390438247012,-28.96414342629482,-28.904382470119522,-28.844621513944222,-28.784860557768923,-28.725099601593627,-28.665338645418327,-28.605577689243027,-28.545816733067728,-28.48605577689243,-28.426294820717132,-28.366533864541832,-28.306772908366533,-28.247011952191237,-28.187250996015937,-28.127490039840637,-28.067729083665338,-28.00796812749004,-27.948207171314742,-27.888446215139442,-27.828685258964143,-27.768924302788843,-27.709163346613547,-27.649402390438247,-27.589641434262948,-27.529880478087648,-27.470119521912352,-27.410358565737052,-27.350597609561753,-27.290836653386453,-27.231075697211157,-27.171314741035857,-27.111553784860558,-27.051792828685258,-26.99203187250996,-26.932270916334662,-26.872509960159363,-26.812749003984063,-26.752988047808763,-26.693227091633467,-26.633466135458168,-26.573705179282868,-26.51394422310757,-26.454183266932272,-26.394422310756973,-26.334661354581673,-26.274900398406373,-26.215139442231077,-26.155378486055778,-26.095617529880478,-26.03585657370518,-25.97609561752988,-25.916334661354583,-25.856573705179283,-25.796812749003983,-25.737051792828684,-25.677290836653388,-25.617529880478088,-25.55776892430279,-25.49800796812749,-25.438247011952193,-25.378486055776893,-25.318725099601593,-25.258964143426294,-25.199203187250998,-25.139442231075698,-25.0796812749004,-25.0199203187251,-24.9601593625498,-24.900398406374503,-24.840637450199203,-24.780876494023904,-24.721115537848604,-24.661354581673308,-24.60159362549801,-24.54183266932271,-24.48207171314741,-24.422310756972113,-24.362549800796813,-24.302788844621514,-24.243027888446214,-24.183266932270918,-24.12350597609562,-24.06374501992032,-24.00398406374502,-23.94422310756972,-23.884462151394423,-23.824701195219124,-23.764940239043824,-23.705179282868524,-23.64541832669323,-23.58565737051793,-23.52589641434263,-23.46613545816733,-23.406374501992033,-23.346613545816734,-23.286852589641434,-23.227091633466134,-23.16733067729084,-23.10756972111554,-23.04780876494024,-22.98804780876494,-22.92828685258964,-22.868525896414344,-22.808764940239044,-22.749003984063744,-22.689243027888445,-22.62948207171315,-22.56972111553785,-22.50996015936255,-22.45019920318725,-22.390438247011954,-22.330677290836654,-22.270916334661354,-22.211155378486055,-22.15139442231076,-22.09163346613546,-22.03187250996016,-21.97211155378486,-21.91235059760956,-21.852589641434264,-21.792828685258964,-21.733067729083665,-21.673306772908365,-21.61354581673307,-21.55378486055777,-21.49402390438247,-21.43426294820717,-21.374501992031874,-21.314741035856574,-21.254980079681275,-21.195219123505975,-21.13545816733068,-21.07569721115538,-21.01593625498008,-20.95617529880478,-20.89641434262948,-20.836653386454184,-20.776892430278885,-20.717131474103585,-20.657370517928285,-20.59760956175299,-20.53784860557769,-20.47808764940239,-20.41832669322709,-20.358565737051794,-20.298804780876495,-20.239043824701195,-20.179282868525895,-20.1195219123506,-20.0597609561753,-20.0]}

},{}],97:[function(require,module,exports){
module.exports={"expected":[0.3684031498640387,0.3683663371442962,0.3683295274323395,0.36829274412628493,0.3682559638168032,0.3682192098833331,0.36818245893525076,0.3681457343333436,0.3681090127056669,0.36807231739438306,0.36803562504620024,0.36799895898468143,0.36796229587516205,0.36792565902263163,0.3678890251110266,0.3678524174267889,0.3678158126724302,0.3677792341158706,0.3677426701056323,0.36770610900875567,0.367669574065428,0.36763304202448427,0.3675965361076541,0.3675600330822572,0.36752355615159166,0.36748708210143594,0.3674506341166819,0.36741418900154155,0.3673777699225259,0.3673413537022549,0.36730496348888414,0.36726857612341585,0.36723221473567585,0.367195856185023,0.3671595235829788,0.3671232053565462,0.36708688995102895,0.3670506004505409,0.3670143137602199,0.36697805294593855,0.3669417949311026,0.3669055627633686,0.3668693333843849,0.3668331298236171,0.366796929040931,0.3667607540476264,0.36672458182176126,0.3666884353564948,0.36665229164805185,0.3666161736714761,0.36658005844113417,0.366543968913979,0.3665078935945734,0.36647182100556713,0.3664357740768252,0.3663997298679584,0.366363711290803,0.3663276954230244,0.36629170515845516,0.36625571759279046,0.3662197556018837,0.36618379629943487,0.36614786254334325,0.3661119314652889,0.3660760259052412,0.3660401230128358,0.36600424561013695,0.36596837086471107,0.3659325215807417,0.36589668633944605,0.3658608537399181,0.36582504655956777,0.3657892420106795,0.365753462852844,0.36571768631619034,0.36568193514251407,0.3656461865797648,0.3656104633519673,0.36557474272486706,0.3655390474047426,0.3655033546751109,0.36546768722452827,0.3654320223542591,0.36539638273516145,0.3653607570153486,0.36532513386062776,0.36528953591535684,0.365253940525061,0.3652183703164603,0.36518280265274267,0.3651472601430143,0.36511172016810167,0.36507620531952123,0.36504069299571396,0.36500520577063045,0.3649697210603021,0.36493426142113766,0.364898804286735,0.36486337219598464,0.3648279426000273,0.364792538020259,0.36475714717978325,0.3647217588191936,0.36468639543369086,0.36465103451816644,0.3646156985503857,0.3645803650426998,0.3645450564554626,0.36450975031846056,0.36447446907466,0.3644391902712594,0.3644039363338605,0.36436868482705037,0.36433345815908985,0.36429823391193084,0.36426303447651687,0.36422783745214093,0.3641926652124528,0.3641575065546829,0.36412235029335155,0.36408721877621264,0.3640520896458086,0.3640169852326574,0.36398188319656105,0.363946805850825,0.3639117308724873,0.3638766805576642,0.36384163260060653,0.3638066092802645,0.3637715883080784,0.3637365919458556,0.36370159792220286,0.36366662848180753,0.3636316613704195,0.36359671881562944,0.3635617896879458,0.36352686287497005,0.3634919605786918,0.363457060587617,0.3634221850866957,0.36338731188149653,0.3633524631399528,0.3633176166846729,0.3632827946665964,0.3632479749253485,0.36321317959489763,0.36317838653186313,0.363143617853265,0.36310885143269384,0.363074109370244,0.3630393695564545,0.36300465407451676,0.3629699518673824,0.3629352518949019,0.36290057621495586,0.3628659027603539,0.3628312535721301,0.3627966065999631,0.36276198386806296,0.36272736334295497,0.36269276703204756,0.3626581729186902,0.3626236029935119,0.36258903525666386,0.36255449168201836,0.36251995028650563,0.36248543302726355,0.3624509179379791,0.36241642695907794,0.36238194910513294,0.3623474734074254,0.36231302178135544,0.3622785723024032,0.36224414686931206,0.3622097235742411,0.36217532429929916,0.3621409271533018,0.36210655400174535,0.3620721829700798,0.3620378359072112,0.3620034909552018,0.36196916994638917,0.3619348510394258,0.3619005560501029,0.36186626315364107,0.3618319941493071,0.36179773812248706,0.36176348417508736,0.3617292540816303,0.36169502605865966,0.36166082186422777,0.36162661973136984,0.36159244140169033,0.36155826512469386,0.3615241126255585,0.3614899621702368,0.3614558354675021,0.36142171079973306,0.36138760985932,0.3613535109450458,0.36131943573293956,0.36128536253816673,0.36125131302041663,0.36121727633509293,0.36118324165393506,0.36114923061216403,0.36111522156580633,0.361081236133797,0.36104725268846943,0.3610132928324942,0.3609793349544904,0.36094540064088526,0.36091146829656207,0.3608775594917261,0.3608436526475036,0.3608097693178993,0.3607758879402606,0.3607420300524132,0.3607081741079043,0.36067434162840173,0.36064052183854434,0.36060670397912464,0.3605729095476143,0.3605391170379664,0.3605053479315475,0.3604715807384363,0.36043783692391557,0.3604040950141685,0.3603703764584145,0.3603366597989206,0.36030296646886434,0.36026927502657485,0.3602356068892088,0.3602019406311366,0.360168297653515,0.36013466724143245,0.36010103869597315,0.3600674333943343,0.36003382995089644,0.36000024972690897,0.3599666713527204,0.35993311617365326,0.35989956283600305,0.359866032669186,0.3598325043354241,0.35979899914824787,0.3597654957857849,0.35973201554570094,0.35969853712200833,0.3596650817965286,0.3596316282791382,0.35959819783583513,0.3595647798195031,0.3595313635988452,0.3594979704161639,0.35946457902090423,0.3594312106395963,0.3593978440374772,0.3593645004253254,0.3593311585841493,0.359297839708996,0.3592645225966248,0.3592312284263719,0.3591979360107272,0.3591646665133363,0.3591313987623991,0.3590981539058909,0.3590649107877014,0.35903169054015605,0.3589984825831865,0.35896527635237,0.35893209295659634,0.35889891127888907,0.35886575241253865,0.35883259525618716,0.35879946088754583,0.3587663282208554,0.3587332183182679,0.35870011010960207,0.35866702464147115,0.3586339408592521,0.3586008797940391,0.358567820406747,0.3585347837129711,0.35850174868914436,0.3584687363353829,0.3584357361379307,0.35840273759850594,0.35836976169404505,0.3583367874396871,0.35830383579693914,0.35827088579638844,0.35823795838413264,0.3582050326061871,0.35817212939326,0.3581392278067749,0.35810634876207015,0.35807347133595785,0.3580406164284264,0.3580077631316564,0.3579749323303059,0.3579421031319046,0.35790929640579977,0.357876501703823,0.35784370859311226,0.3578109379200868,0.357778168830561,0.3577454221556928,0.35771267705657667,0.357679954349128,0.3576472332097022,0.3576145344389919,0.3575818372285932,0.3575491623639958,0.35751648905201727,0.35748383806296347,0.3574511886188539,0.3574185614748301,0.3573859358680942,0.3573533325386425,0.3573207411031816,0.35728815119355856,0.35725558352708947,0.35722301737884693,0.35719047345105054,0.3571579310338873,0.3571254108144995,0.35709289209816947,0.35706039555698116,0.35702790051129335,0.35699542761815073,0.3569629562129689,0.3569305069377727,0.35689805914301553,0.35686563345572125,0.3568332092413621,0.3568008071119799,0.356768416748454,0.3567360278466409,0.35670366099614664,0.35667129559990535,0.3566389522325887,0.35660661031208274,0.35657429039814376,0.35654197192359083,0.3565096754332836,0.35647738037495513,0.35644510727858764,0.35641283560680914,0.35638058587474297,0.35634833755989354,0.356316111162544,0.35628388617505624,0.3562516830828922,0.3562194916304129,0.35618730157679573,0.35615513338530735,0.35612296658536935,0.35609082162547395,0.3560586780498343,0.3560265562921867,0.3559944359115175,0.35596233732682586,0.35593024011185215,0.35589816467087704,0.35586609059237656,0.35583403826593135,0.35580198729473456,0.3557699580536852,0.35573793016067506,0.35570592397594,0.35567392930664204,0.3556419359746016,0.3556099643180959,0.3555779939916805,0.3555460453190159,0.3555140979692914,0.35548217225156875,0.3554502478496528,0.355418345058025,0.3553864435750872,0.35535456368075874,0.3553226850880202,0.3552908280622473,0.3552589723309809,0.3552271381450714,0.3551953052466014,0.3551634938719143,0.3551316938903028,0.35509989518556223,0.35506811797231014,0.35503634202890355,0.35500458755549813,0.354972834344929,0.3549411025829082,0.354909372076731,0.35487766299768375,0.35484595516750383,0.3548142687430699,0.35478258356054326,0.35475091976241296,0.35471925719924613,0.3546876159991602,0.35465598608572063,0.35462435739686,0.35459275003917273,0.3545611438991612,0.35452955906909284,0.35449797544981315,0.3544664131192804,0.3544348519926653,0.35440331213363485,0.354371773471667,0.3543402560561553,0.3543087398308673,0.3542772448309408,0.3542457510144149,0.35421427840218944,0.3541828069665575,0.3541513567141985,0.35411991762957484,0.3540884797113643,0.35405706294495015,0.3540256473381817,0.3539942528622658,0.35396285953924395,0.3539314873261643,0.3539001162592426,0.35386876628138614,0.3538374174429673,0.3538060896727698,0.3537747630353052,0.3537434574452512,0.3537121529812412,0.3536808695438641,0.3536495872258574,0.353618325913739,0.3535870756522264,0.3535558265001036,0.3535245983228155,0.3534933712482825,0.3534621651279216,0.35343096010369646,0.35339977601301376,0.35336859301186285,0.3533374309236574,0.3533062699183951,0.3532751298055137,0.35324399076900237,0.35321287260434,0.3531817555094895,0.35315065926598865,0.35311956408575695,0.3530884897364077,0.35305742632228204,0.35302636396164033,0.3529953224012427,0.3529642818878243,0.3529332621542636,0.3529022434611923,0.3528712455276246,0.35284024862807145,0.3528092724676998,0.3527782973348829,0.35274734292095744,0.3527163895281421,0.35268545683395996,0.3526545251544581,0.3526236141533633,0.3525927041605338,0.35256181482591675,0.35253093631285426,0.3525000587984632,0.35246920191205394,0.3524383460179382,0.3524075107316892,0.35237667643137066,0.3523458627188351,0.35231504998588165,0.3522842578206591,0.352253466628685,0.352222695984421,0.35219192630708646,0.3521611771574728,0.3521304289684842,0.3520997012872583,0.35206897456036773,0.3520382683213131,0.35200757279182454,0.3519768782072642,0.35194620408070976,0.35191553089282995,0.35188487814310704,0.3518542263258197,0.3518235949268713,0.3517929644541338,0.3517623543799482,0.3517317452257631,0.3517011564503738,0.35167056858878903,0.35164000108627474,0.3516094344913832,0.35157888823586764,0.3515483428818074,0.3515178178474591,0.35148730341233675,0.3514567898694457,0.3514262966168297,0.3513958042503132,0.3513653321544843,0.35133486093863686,0.3513044099739201,0.35127395988308124,0.35124353002384623,0.35121310103239956,0.3511826922530604,0.3511522843354339,0.35112189661044896,0.35109150974111497,0.3510611430449867,0.35103077719846176,0.35100043150573673,0.3509700963035143,0.3509397619418501,0.3509094477049353,0.35087913430256584,0.3508488410056151,0.35081854853721045,0.35078827615492386,0.35075800459519807,0.3507277531023194,0.35069750242603,0.3506672717973465,0.3506370419792946,0.3506068321896371,0.3505766232046669,0.35054643422890963,0.3505162460519092,0.3504860778649693,0.35045592006139503,0.35042576304770773,0.3503956259954099,0.3503654897271025,0.35033537340110626,0.3503052578532175,0.35027516222859073,0.3502450673762021,0.35021499242805576,0.35018491824629144,0.35015486394977907,0.35012481041380616,0.35009477674412387,0.350064743829152,0.35003473076153857,0.35000472798405147,0.34997472595255635,0.3499447437400777,0.3499147622677952,0.34988480059566973,0.3498548396579578,0.3498248985015722,0.349794958073831,0.3497650374086144,0.34973511746628594,0.3497052172677093,0.34967531778627786,0.3496454380298541,0.3496155589848457,0.34958569964612957,0.3495558410131121,0.3495260020676999,0.3494961733081821,0.34946634524581305,0.349436536843074,0.34940672913179965,0.34937694106153994,0.3493471536770737,0.3493173859150349,0.3492876188331318,0.3492578713550972,0.3492281245515531,0.3491983973333472,0.3491686707839994,0.3491389638014875,0.3491092574822146,0.34907957071130347,0.34904988459802466,0.3490202180146618,0.34899056151446317,0.34896090566351146,0.3489312693148609,0.3489016336098826,0.3488720173888297,0.3488424018058872,0.3488128056885222,0.3487832102037184,0.34875363416617194,0.34872405875565016,0.34869450277409353,0.34866494741403764,0.3486354114646824,0.3486058761313166,0.34857636019041466,0.34854684486000337,0.3485173489038467,0.3484878629295978,0.34845837755761544,0.34842891153262706,0.3483994461044378,0.3483700000051021,0.34834055449711043,0.3483111282998595,0.34828170268851,0.34825229636981575,0.34822289063159273,0.3481935041679666,0.34816411827939403,0.34813475164738744,0.3481053855850287,0.3480760387612323,0.34804669250169057,0.3480173654627346,0.34798804830587626,0.34795873170520636,0.34792943429820944,0.3479001374420383,0.3478708597616313,0.3478415826266995,0.34781232464964995,0.34778306721273744,0.34775382891585205,0.34772459115377763,0.34769537251390203,0.3476661544035234,0.3476369553975423,0.3476077569157561,0.3475785775205928,0.3475493986443345,0.3475202388369511,0.347491088813275,0.347461939300592,0.34743280883021327,0.3474036788655677,0.34737456792554483,0.34734545748600715,0.3473163660534372,0.3472872751161163,0.3472582031681345,0.34722913171017755,0.3472000792239577,0.34717102722255017,0.34714199417530384,0.34711296160766947,0.34708394797664666,0.347054934820047,0.3470259405825356,0.3469969560317347,0.3469679719475962,0.3469390067563114,0.3469100420265297,0.3468810961721437,0.346852150774113,0.34682322423404605,0.34679429814519835,0.34676539089690844,0.34673648409471336,0.34670759611569596,0.34667870857766053,0.3466498398454487,0.3466209715491176,0.34659212204128176,0.34656327296423695,0.3465344426583849,0.34650562194361434,0.3464768016520221,0.34644800010571847,0.34641919897753215,0.3463904165773961,0.3463616345903278,0.3463328713140971,0.346304108445896,0.34627536427134525,0.34624662049979743,0.34621789540473824,0.3461891707076666,0.3461604646699474,0.3461317590252116,0.3461030720227175,0.34607438540821395,0.34604571741886664,0.34601705892631485,0.3459884008142861,0.345959761301834,0.3459311221649403,0.3459025016106009,0.3458738814268664,0.345845279808689,0.34581667855617443,0.34578809585224474,0.3457595135090467,0.3457309496974865,0.3457023862417381,0.3456738413007055,0.34564529671057576,0.3456167706182648,0.34558825394065185,0.3455597376065995,0.34553123974506844,0.3455027422222168,0.3454742631550514,0.34544578442169527,0.34541732412721526,0.34538886416168524,0.345360422618246,0.34533198139890836,0.3453035585849008,0.3452751360901575,0.34524673198400824,0.34521832819229664,0.34518994277246773,0.34516155766226086,0.34513319090724964,0.34510483347511256,0.3450764763453949,0.3450481375458897,0.3450197990440153,0.3449914788557275,0.34496315896029267,0.3449348573618431,0.3449065560514794,0.34487827302152385,0.34484999027489777,0.34482172579212705,0.3447934615879402,0.34476521563108004,0.34473696994806874,0.3447087424958797,0.34468051531281524,0.34465230634409266,0.34462410660769466,0.344595907133355,0.34456772584868317,0.3445395448213719,0.3445113819673083,0.34448321936591786,0.34445507492137883,0.3444269307248363,0.34439880466877276,0.3443706788560395,0.3443425711674368,0.34431446371750846,0.34428637437538606,0.34425828526729274,0.34423021425070444,0.34420214346351036,0.34417409075154404,0.3441460471826037,0.3441180038361251,0.3440899785405042,0.3440619534627361,0.34403394641960755,0.3440059395897332,0.3439779507783039,0.3439499621755404,0.343921991575051,0.3438940211786495,0.3438660687683744,0.3438381165576195,0.3438101823168669,0.34378224827107684,0.3437543321791884,0.3437264162777152,0.3436985183140662,0.3436706294053735,0.3436427406802946,0.34361486986896855,0.3435869992367344,0.3435591465022339,0.34353129394231346,0.34350345926413045,0.343475624756026,0.34344780811368586,0.34341999163693265,0.3433921930099938,0.3433643945441604,0.3433366139122145,0.34330883343690244,0.3432810707795738,0.3432533082744177,0.343225563571364,0.3431978278364038,0.34317009224694284,0.343142374435807,0.34311465676573377,0.3430869568581618,0.34305925708722584,0.34303157506299004,0.34300389317097346,0.3429762290098786,0.34294856497659615,0.3429209186584798,0.3428932724637787,0.3428656439685107,0.34283801559227084,0.34281040489975356,0.34278279432188696,0.3427552014120552,0.3427276173846395,0.3427000334653271,0.3426724671905611,0.34264490101954537,0.3426173524774443,0.3425898040347502,0.34256227320536164,0.34253474247104637,0.3425072293344497,0.3424797162886024,0.34245222082490917,0.342424725447651,0.3423972476370046,0.34236976990848866,0.3423423097310644,0.3423148496314754,0.3422874070674803,0.3422599733013886,0.3422325396067079,0.3422051234244169,0.3421777073092659,0.3421503086910619,0.34212291013573626,0.3420955290619372,0.3420681480467643,0.3420407844977193,0.3420134210030578,0.3419860749591477,0.3419587289653878,0.34193140040702463,0.341904071894588,0.3418767608022151,0.3418494497515544,0.3418221561056464,0.34179487117427315,0.34176758627830844,0.34174031876417194,0.3417130512812531,0.3416858011649058,0.3416585510755946,0.34163131833762,0.3416040856225091,0.34157687024352146,0.3415496548832346,0.3415224568438792,0.3414952588190707,0.34146807810002366,0.34144089739137895,0.34141373397334696,0.34138657056158206,0.34135942442530254,0.34133228692131307,0.3413051494174053,0.3412780291663335,0.3412509089112312,0.341223805893891,0.3411967028684171,0.3411696170656529,0.341142531250661,0.34111546264334763,0.3410883940197215,0.34106134258876414,0.34103429113741807,0.34100725686375194,0.3409802225656304,0.3409532054302213,0.3409261968554511,0.3408991882501425,0.34087219678513575,0.3408452052855463,0.34081823091134383,0.34079125649852327,0.34076429919619605,0.34073734185122434,0.3407104016018731,0.34068346130585997,0.34065653809061547,0.34062961482470056,0.3406027086247232,0.3405758023700759,0.340548913166556,0.3405220239043754,0.34049515167853295,0.3404682879331476,0.34044142412313233,0.34041457732731134,0.3403877304628919,0.34036090059792906,0.34033407066040805,0.340307257707627,0.3402804446783365,0.3402536486190898,0.3402268524793915,0.3402000732950614,0.3401732940263462,0.34014653169834413,0.3401197692820322,0.3400930237917989,0.34006627820933955,0.3400395495383449,0.3400128292686942,0.3399861089009597,0.3399594054228085,0.33993270184267904,0.33990601513756985,0.33987932832659656,0.33985265837610096,0.3398259883158641,0.33979933510158244,0.3397726817736909,0.33974604527725266,0.3397194086633443,0.3396927888664074,0.3396661689481489,0.3396395658324002,0.3396129625914869,0.3395863761386419,0.3395597980090777,0.33953321974860057,0.33950665825456844,0.3394800966258016,0.33945355174908837,0.33942700673382714,0.3394004784562483,0.33937395003631654,0.33934743833971587,0.33932092649696577,0.33929443136321547,0.33926793607952765,0.3392414574905282,0.3392149787478114,0.3391885166854915,0.3391620544656829,0.33913560891199945,0.3391091716045657,0.33908273413400225,0.33905631330819447,0.3390298923155064,0.33900348795335167,0.3389770834205744,0.33895069550412776,0.33892430741332463,0.3388979359246692,0.3388715642579315,0.33884520917917815,0.338818853918625,0.3387925152319124,0.33876617635969064,0.3387398540471853,0.33871353154546974,0.3386872255893658,0.33866092780349516,0.33863462982287806,0.33860834836675335,0.3385820667122015,0.33855580156808585,0.3385295362218705,0.33850328737205465,0.33847703831647463,0.3384508057432768,0.3384245729606583,0.338398356646424,0.33837214011912065,0.33834594004622276,0.3383197397566156,0.33829355590745425,0.3382673718379514,0.3382412041949541,0.33821504464717056,0.3381888848736123,0.33816274150568615,0.33813659790837314,0.33811047070279976,0.33808434326423514,0.33805823220353676,0.3380321209062508,0.33800602597297674,0.3379799307995266,0.33795385197625305,0.33792777290922293,0.33790171017855297,0.3378756472005539,0.33784960054511753,0.3378235536387872,0.337797523041241,0.33777150046486926,0.3377454776322714,0.33771947108782646,0.33769346428361025,0.3376674737538154,0.3376414829607119,0.3376155084283171,0.3375895336290841,0.33756357507686596,0.33753761625428785,0.33751167366504925,0.3374857308019366,0.337459804158507,0.3374338772376971,0.33740796652293226,0.3373820555272885,0.3373561607240706,0.3373302738689514,0.3373043867277201,0.3372785157585216,0.3372526444997315,0.3372267893994013,0.33720093400600787,0.33717509475751967,0.3371492552125043,0.3371234317988581,0.3370976080852282,0.33707180048945,0.33704599259023915,0.3370202007953807,0.33699440869364844,0.3369686326827877,0.33694286455633454,0.3369170961178601,0.3368913437500711,0.33686559106683855,0.33683985444085635,0.33681411749601553,0.33678839659500825,0.33676267537173504,0.3367369701788965,0.33671126466039214,0.3366855751589419,0.3366598853284335,0.33663421150161665,0.3366085373423567,0.33658287917344404,0.3365572206687107,0.33653157814099827,0.3365059434263878,0.33648030837090454,0.33645468927248756,0.3364290698298389,0.3364034663309752,0.33637786248452817,0.33635227456860267,0.33632668630174956,0.33630111395217255,0.3362755412483311,0.3362499844485381,0.33622442729115104,0.33619888602460274,0.33617334439713803,0.33614781864732013,0.3361222925332709,0.33609678228369433,0.3360712797768317,0.3360457769007793,0.33602028986947247,0.3359948024656789,0.33596933089350123,0.3359438589455472,0.33591840281609675,0.33589294630758765,0.3358675056044876,0.33584206451905363,0.3358166392259518,0.33579121354724806,0.335765803647817,0.33574039335952327,0.3357149988374603,0.33568960392328107,0.3356642247623082,0.33563885327456383,0.33561348138983627,0.3355881252388124,0.33556276868756935,0.33553742785704926,0.33551208662308135,0.3354867610968729,0.33546143516399496,0.3354361249259305,0.335410814277982,0.3353855193119182,0.3353602239327627,0.3353349442225807,0.33530966409610635,0.3352843996257114,0.3352591347358306,0.3352338854891522,0.3352086438471042,0.3351834017807934,0.3351581753384031,0.3351329484685739,0.335107737209831,0.3350825255204803,0.3350573294293991,0.3350321329045478,0.3350069519651664,0.3349817705888596,0.3349566047852399,0.33493143854154656,0.3349062878577747,0.33488113673078773,0.33485600115097364,0.3348308651248098,0.3348057446330872,0.33478063167826955,0.3347555182724135,0.3347304203819339,0.3347053220372984,0.3346802391953499,0.33465515589613487,0.3346300880869344,0.33460501981736357,0.3345799670251515,0.3345549137694721,0.33452987597851264,0.33450483772099554,0.3344798149155762,0.3344547916405158,0.33442978380494776,0.33440477549666187,0.3343797826152797,0.3343547972039355,0.33432981131527134,0.33430484083466,0.3342798698736687,0.3342549143081832,0.3342299582592645,0.3342050175933212,0.3341800764408981,0.3341551506589365,0.3341302243874551,0.33410531347393796,0.3340804020678679,0.33405550600728107,0.3340306094511147,0.3340057282279673,0.33398084650622034,0.3339559801050445,0.3339311211078839,0.3339062616076064,0.3338814174092599,0.33385657270479296,0.3338317432898501,0.3338069133657898,0.33378209871886305,0.3337572835598285,0.33373248366555325,0.3337076832561863,0.33368289809922075,0.33365811242418614,0.33363334198921135,0.3336085710331965,0.33358381530491604,0.3335590590526313,0.33353431801577155,0.3335095843177349,0.3334848500912599,0.3334601310617773,0.3334354115009081,0.33341070712476256,0.3333860022142886,0.33336131247628553,0.3333366222010188,0.3333119470859862,0.3332872714307611,0.3332626109235494,0.3332379498732227,0.33321330395870485,0.33318865749815574,0.333164026161227,0.3331394021062776,0.3331147775009349,0.3330901680009604,0.3330655579476924,0.33304096298764374,0.3330163674714076,0.33299178703625804,0.33296720604203334,0.33294264011677815,0.33291807362956655,0.3328935221992232,0.3328689702040485,0.3328444332536566,0.33281989573556453,0.3327953732501857,0.33277085019424424,0.3327463421589621,0.3327218413419939,0.3326973399501813,0.3326728535609776,0.33264836659408253,0.3326238946177818,0.33259942206094906,0.33257496448271157,0.33255050632110766,0.3325260631261156,0.3325016193449287,0.332477190518386,0.33245276110282634,0.33242834662995857,0.33240393156525794,0.3323795314313125,0.3323551307027244,0.33233074489297015,0.33230636623865667,0.33228198698549744,0.3322576226333203,0.332233257679503,0.33220890761478533,0.332184556945639,0.3321602211537252,0.3321358847546003,0.3321115632208563,0.3320872410771249,0.3320629337869379,0.3320386258839934,0.3320143328227723,0.3319900391460294,0.33196576029920416,0.331941480834099,0.331917216187121,0.3318929586334898,0.3318687004574529,0.33184445708188703,0.3318202130811722,0.33179598386917614,0.331771754029294,0.33174753896639325,0.33172332327287524,0.3316991223446167,0.3316749207830156,0.3316507339749669,0.3316265465308564,0.3316023738286065,0.33157820048758146,0.3315540418767403,0.33152988262441635,0.33150573809061473,0.33148160058883286,0.33145746244151825,0.33143333899526245,0.33140921490078123,0.3313851054957346,0.3313609954397756,0.33133690006164196,0.331312804029915,0.331288722664419,0.3312646406426545,0.3312405732755417,0.3312165052494908,0.3311924518665273,0.3311683978219621,0.33114435840893447,0.33112031833164757,0.33109629287436343,0.33107227438852677,0.3310482552344552,0.3310242506831128,0.33100024546089213,0.3309762548299028,0.33095226352539764,0.3309282868006407,0.33090430939973614,0.3308803465671113,0.33085638305571274,0.3308324341011402,0.3308084844651736,0.3307845493745939,0.33076061360000547,0.3307366923593795,0.33071277043213587,0.3306888630274448,0.33066496253437166,0.33064106135077814,0.3306171746726508,0.3305932873014083,0.3305694144242585,0.3305455408514045,0.33052168176128416,0.33049782197287614,0.33047397665585737,0.33045013063797307,0.3304262990801481,0.3304024668188852,0.3303786490063662,0.3303548304878426,0.33033102640676176,0.33030722161711523,0.3302834312536248,0.3302596477426534,0.3302358635192853,0.330212093705171,0.33018832317611296,0.3301645670450579,0.33014081019651736,0.3301170677347433,0.3300933245529477,0.33006959574669636,0.33004586621789284,0.3300221510534255,0.329998435163881,0.329974733627479,0.32995103136348014,0.32992734344144425,0.32990365478929745,0.3298799804679482,0.3298563129407384,0.32983264467965695,0.32980899073265246,0.32978533604927596,0.3297616956688463,0.3297380545495496,0.3297144277220838,0.3296908001532614,0.32966718686516816,0.32964357283323403,0.3296199730709412,0.3295963725623289,0.329572786312284,0.32954919931344623,0.32952562656211615,0.3295020530595251,0.329478493793396,0.3294549412637347,0.32943138797912075,0.32940784891442704,0.329384309092326,0.3293607834791342,0.32933725710608597,0.32931374493094984,0.32929023199351326,0.3292667332430056,0.32924323372775893,0.32921974838847173,0.3291962622820122,0.3291727903405566,0.3291493176295007,0.3291258590725069,0.3291024072016733,0.32907895455760744,0.3290555160512177,0.32903207676918095,0.3290086516139129,0.3289852256805882,0.3289618138631386,0.32893840126522805,0.3289150027723125,0.3288916034965369,0.32886821831489005,0.3288448323479892,0.3288214604643644,0.32879808779309694,0.3287747291942665,0.32875136980540987,0.32872802447816474,0.32870468578071066,0.32868134628966517,0.3286580208440192,0.32863469460241124,0.32861138239541116,0.3285880693900837,0.32856477040858617,0.328541470626401,0.328518184857281,0.3284948982851183,0.3284716257152697,0.32844835234002834,0.3284250929563634,0.3284018327649609,0.3283785865544105,0.3283553395337827,0.3283321064832962,0.32830888000690817,0.3282856527169427,0.32826243938107824,0.32823922522930926,0.3282160250209637,0.32819282399439165,0.3281696369005789,0.3281464489862226,0.3281232749939748,0.3281001001788715,0.3280769392752391,0.3280537775464443,0.32803062971849606,0.32800748106308353,0.32798434629790646,0.3279612107029681,0.32793808898766735,0.32791497379143836,0.3278918577620124,0.32786875559635265,0.3278456525952115,0.32782256344727156,0.3277994734615707,0.32777639731851926,0.32775332033543236,0.3277302571844561,0.32770719319117486,0.32768414301947857,0.32766109200321264,0.32763805479801905,0.32761501674599613,0.32759199249454596,0.3275689673940117,0.3275459560835636,0.3275229512378163,0.327499945539612,0.32747695361578927,0.327453960837267,0.32743098182267216,0.32740800195114017,0.32738503583309436,0.32736206885587854,0.3273391156217207,0.32731616152616483,0.3272932211632516,0.3272702799367173,0.3272473524324231,0.3272244240622894,0.3272015094040063,0.32717859387767023,0.3271556920528079,0.32713279663892075,0.32710990035366977,0.32708701775435206,0.32706413428146897,0.32704126448417437,0.32701839381111775,0.32699553680331744,0.32697267891756326,0.3269498346867461,0.326926989575788,0.3269041581094601,0.32688132576080897,0.32685850704649416,0.32683568744767844,0.32681288147291776,0.32679007461148324,0.3267672813638352,0.32674449447407244,0.3267217066943855,0.3266989325131066,0.3266761574397424,0.32665339595454906,0.32663063357511407,0.3266078847736255,0.32658513507574344,0.32656239894559586,0.32653966191690786,0.32651693844575475,0.3264942140739189,0.32647150324943097,0.3264487915221226,0.3264260933319878,0.32640339423689935,0.3263807086688226,0.3263580294061669,0.326335349235367,0.32631268257635987,0.3262900150070869,0.3262673609394758,0.326244705959482,0.32622206447103164,0.3261994220680863,0.3261767931465781,0.32615416330846736,0.3261315469417001,0.3261089296562271,0.3260863258320161,0.32606372108700094,0.3260411297931785,0.32601853757645805,0.3259959588008735,0.3259733862788623,0.32595081283082084,0.32592825280885374,0.3259056918587739,0.3258831443247422,0.3258605958605196,0.32583806080233124,0.3258155248118785,0.3257930022174581,0.32577047868870435,0.32574796854599336,0.3257254574668844,0.32570295976384095,0.32568046112233934,0.32565797584693784,0.32563549677986603,0.3256130167712547,0.325590550113819,0.32556808251279495,0.3255456282530115,0.32552317304759526,0.32550073117349665,0.3254782883517254,0.32545585885136075,0.32543342840128797,0.3254110112627229,0.32538859317241864,0.32536618838373516,0.32534378264128583,0.3253213901905824,0.3252989967840909,0.3252766166594823,0.32525424269249026,0.3252318677666853,0.3252095061079919,0.3251871434884743,0.32516479412623517,0.3251424438011649,0.325120106723552,0.3250977686811055,0.325075443876307,0.3250531181046767,0.3250308055608968,0.3250084920482914,0.3249861917537509,0.3249638904883953,0.3249416024313307,0.324919313401466,0.32489703757013033,0.3248747678462879,0.32485249714667574,0.3248302396309725,0.32480798113752535,0.3247857358182544,0.3247634895192695,0.3247412563847399,0.32471902226853055,0.32469680130706746,0.32467457936196314,0.3246523705619076,0.32463016077625356,0.3246079641259626,0.32458576648812015,0.3245635819759666,0.32454139647431296,0.32451922408868566,0.32449705776100907,0.32447489044091743,0.3244527362223811,0.32443058100949146,0.32440843888852355,0.32438629577126865,0.32436416573631355,0.32434203470314177,0.3243199167426593,0.32429779778203477,0.3242756918845008,0.32425358498490336,0.32423149113880917,0.32420939628873446,0.32418731448258725,0.3241652316705465,0.3241431618928689,0.3241210981241716,0.32409903334671947,0.32407698158930615,0.32405492882123543,0.32403288906366773,0.3240108482935444,0.32398882052439965,0.323966791740805,0.3239447759486761,0.3239227591402071,0.3239007553137023,0.3238787504689715,0.3238567585967146,0.3238347657043498,0.3238127857749801,0.3237908048236247,0.3237688368257968,0.32374687478854236,0.3237249117264934,0.3237029616037926,0.3236810104544296,0.32365907223497536,0.32363713298699553,0.3236152066594963,0.3235932793016121,0.3235713648547916,0.3235494493757307,0.3235275467983279,0.3235056431868334,0.32348375246760247,0.32346186071243255,0.323439981840143,0.32341810193007114,0.3233962348935075,0.3233743737696657,0.3233525116052844,0.32333066230037477,0.3233088119530924,0.3232869744559374,0.3232651359145805,0.32324331021401764,0.3232214834674277,0.3231996695523097,0.3231778545893433,0.3231560524485378,0.3231342492580666,0.3231124588804563,0.32309066745136694,0.32306888882584955,0.32304710914704365,0.32302534226253177,0.3230035812434369,0.3229818191683472,0.32296006987365566,0.32293831952116975,0.3229165819398315,0.3228948432989033,0.32287311741988317,0.32285139047948136,0.32282967629175896,0.3228079610408671,0.32278625853343695,0.32276455496105344,0.3227428641229248,0.32272117221806285,0.3226994930382596,0.3226778127899471,0.32265614525750824,0.3226344835437205,0.3226128207587667,0.32259117067592985,0.32256951952016055,0.3225478810573501,0.3225262415198447,0.3225046146661509,0.32248298673600334,0.32246137148053095,0.32243975514684997,0.32241815147871833,0.3223965467306272,0.3223749546389703,0.32235336146560667,0.32233178093957315,0.3223102061913678,0.32228863035884225,0.32226706716001113,0.32224550287512205,0.32222395121484987,0.3222023984667859,0.32218085833427196,0.32215931711223605,0.32213778849669406,0.3221162587899038,0.32209474168056185,0.32207322347824907,0.32205171786434955,0.3220302111557605,0.3220087170265604,0.32198722180095574,0.3219657391457261,0.3219442622225516,0.3219227842004072,0.3219013187351377,0.3218798521691927,0.32185839815113515,0.3218369430307001,0.3218155004491757,0.3217940567635756,0.3217726256079196,0.32175119334649355,0.32172977360605576,0.32170835275815696,0.321686944422301,0.32166553497729705,0.321644138035401,0.32162273998267343,0.3216013544241292,0.32157997455238313,0.32155859356728766,0.3215372250630088,0.32151585544370637,0.321494498296322,0.32147314003224353,0.321451794231195,0.3214304473117855,0.3214091128465281,0.32138777726124645,0.3213664541212496,0.3213451298595688,0.3213238180343157,0.32130250508572267,0.32128120456471054,0.32125990291870626,0.32123861369144624,0.32121733010623627,0.3211960453935626,0.3211747730863984,0.3211534996501272,0.3211322386105547,0.3211109764402354,0.3210897266578142,0.3210684757430101,0.32104723720731376,0.321025997537602,0.3210047702382178,0.3209835418031892,0.32096232572971817,0.32094110851897745,0.32091990366103446,0.32089869766419993,0.32087750401141346,0.3208563159564302,0.32083512676012954,0.32081394989477213,0.3207927718864843,0.32077160620041545,0.3207504393698068,0.32072928485270286,0.3207081291894533,0.32068698583100425,0.32066584132480713,0.3206447091147166,0.3206235757552791,0.32060245468326415,0.32058133246030696,0.3205602225160983,0.3205391114193555,0.32051801259269724,0.32049691932008945,0.3204758248925665,0.3204547427221516,0.32043365939523843,0.3204125883167943,0.3203915160802723,0.32037045608359027,0.3203493949272541,0.320328346002139,0.32030729591579704,0.3202862580520669,0.32026521902554067,0.32024419221302713,0.3202231642361516,0.32020214846469947,0.3201811315273229,0.3201601267867904,0.3201391275570425,0.3201181271590331,0.32009713894501785,0.3200761495611873,0.32005517235279607,0.3200341939730391,0.3200132277601766,0.31999226037440137,0.3199713051469854,0.3199503487451132,0.3199294044930749,0.3199084590650401,0.3198875257783237,0.319866591314074,0.31984566898263694,0.31982474547213313,0.319803834085946,0.31978292816775744,0.3197620210682084,0.31974112608025096,0.3197202299094079,0.31969934584168486,0.31967846058955457,0.31965758743208217,0.3196367130886842,0.31961585083149197,0.31959498738685904,0.3195741360199893,0.3195532834641672,0.31953244297767536,0.3195116013007228,0.3194907716846771,0.31946994087666575,0.31944912212114757,0.319428308791315,0.3194074942672655,0.3193866917831074,0.31936588810323563,0.31934509645486553,0.3193243036092883,0.31930352278683266,0.3192827407656797,0.31926197075927776,0.31924119955269165,0.3192204403524955,0.3191996799506316,0.3191789315468062,0.3191581819398327,0.31913744432255575,0.3191167055006535,0.31909597866011546,0.3190752572034162,0.3190545345398823,0.3190338238452322,0.31901311194227855,0.3189924119998999,0.318971710847752,0.3189510216478798,0.3189303312367758,0.3189096527696576,0.31888897308984826,0.3188683053457444,0.3188476363874933,0.31882697935667653,0.31880632111025975,0.31878567478301556,0.31876503380306853,0.3187443916053483,0.3187237613144264,0.3187031298042865,0.31868251019270666,0.3186618893604671,0.3186412804185587,0.3186206702545522,0.31860007197265716,0.3185794724672287,0.31855888483570144,0.3185382959792086,0.318517718988416,0.3184971407712288,0.31847657441155014,0.318456006824051,0.318435451085878,0.3184149006540149,0.3183943489921987,0.3183738091674528,0.31835326811133585,0.3183327388841299,0.31831220842413804,0.31829168978490713,0.3182711699114786,0.3182506618506699,0.3182301525542551,0.3182096550623285,0.3181891563333902,0.3181686694008175,0.3181481812298308,0.31812770484709635,0.3181072272245485,0.3180867613821487,0.31806630080551895,0.3180458389869829,0.31802538893645615,0.3180049376426316,0.31798449810873486,0.3179640573301519,0.3179436283034243,0.3179231980306251,0.31790277950161805,0.31788235972515705,0.31786195168443393,0.3178415423948776,0.31782114483301405,0.31780074602094105,0.31778035892852463,0.31775997058452565,0.31773959395215623,0.31771922254545804,0.31769884988512326,0.31767848892439493,0.3176581267086645,0.3176377761845358,0.3176174244040425,0.3175970843071554,0.31757674295254407,0.3175564132735522,0.31753608233547975,0.3175157630650491,0.31749544253418416,0.3174751336629923,0.3174548235300157,0.3174345250487523,0.3174142253043567,0.3173939372037233,0.31737365428909714,0.3173533701093232,0.31733309756140243,0.3173128237469938,0.31729256155650953,0.31727229809820034,0.31725204625589576,0.3172317931444321,0.31721155164106196,0.31719130886720165,0.3171710776935326,0.31715084524804527,0.31713062439485573,0.3171104022685227,0.317090191726603,0.31706997991021746,0.31704977967036946,0.31702958457729336,0.3170093882077736,0.3169892034029947,0.31696901732045724,0.31694884279480684,0.31692866699008576,0.3169085027344067,0.31688833719834775,0.3168681832034946,0.3168480279269552,0.31682788418379393,0.3168077391576432,0.3167876056570516,0.3167674708721702,0.3167473476050376,0.31672722305231765,0.316707110009545,0.31668700207473155,0.3166668928523901,0.31664679512831034,0.31662669611541217,0.31660660859299583,0.31658651978047364,0.316566442450662,0.3165463638294599,0.31652629668320564,0.31650622824427926,0.31648617127254663,0.31646611300686306,0.31644606620062776,0.3164260180991654,0.31640598144941445,0.31638594350316335,0.31636591700089534,0.3163458955681907,0.3163258728370815,0.3163058615383796,0.3162858489400071,0.3162658477663349,0.3162458452917287,0.31622585423412447,0.31620586187432587,0.31618588092383915,0.3161658986699005,0.3161459278175923,0.3161259556605774,0.31610599489751995,0.3160860328285037,0.3160660821457805,0.31604613015584926,0.316026189544555,0.31600625396483933,0.3159863170760471,0.31596639155442424,0.31594646472248256,0.3159265492500754,0.3159066324661099,0.31588672703405235,0.3158668202891997,0.315846924888637,0.31582702817404523,0.31580714279613364,0.31578725610296177,0.31576738073886873,0.3157475040582869,0.315727638699191,0.3157077783384943,0.31568791665947143,0.31566806629056116,0.3156482146021032,0.3156283742161856,0.31560853250950144,0.31558870209779394,0.31556887036410364,0.3155490499178345,0.31552922814836915,0.3155094176587778,0.31548960584477953,0.31546980530311625,0.31545000343583807,0.31543021283336425,0.31541042090407023,0.3153906402320582,0.31537086452121876,0.31535108748175633,0.31533132168830835,0.31531155456503884,0.31529179868028184,0.31527204146450755,0.3152522954797522,0.31523254816278634,0.315212812069354,0.3151930746425206,0.31517334843174355,0.31515362088637766,0.31513390454959905,0.3151141868770464,0.31509448040562016,0.3150747725972373,0.31505507598252824,0.3150353842921599,0.3150156912630664,0.3149960094164832,0.31497633248778195,0.3149566479623735,0.31493698086611227,0.3149173186812854,0.31489766140574704,0.3148779965374071,0.31485834907713234,0.3148387065197147,0.3148190688630133,0.3147994236174157,0.31477979575884457,0.31476017279457436,0.31474055472246987,0.314720929065374,0.3147013207743089,0.31468171736901007,0.31466211884734757,0.3146425252071927,0.31462292398692676,0.3146033401065082,0.3145837611012178,0.3145641869689321,0.3145446052604393,0.3145250408708948,0.31450548134799133,0.314485926689611,0.3144663644589269,0.31444681952633463,0.31442727945191756,0.3144077442335629,0.3143882014468075,0.31436867593733003,0.31434915527758295,0.31432963946545855,0.31431012849885065,0.31429060996871994,0.31427110868991026,0.3142516122503046,0.314232120647802,0.31421262148567836,0.31419313955415734,0.3141736624534425,0.3141541901814381,0.31413471035371404,0.3141152477359162,0.3140957899405476,0.31407633696551746,0.3140568888087365,0.31403743310111165,0.31401799457762763,0.31399856086613104,0.3139791319645376,0.31395969551600045,0.3139402762310223,0.3139208617497011,0.31390145206995773,0.31388203484717014,0.31386263476740167,0.3138432394829802,0.31382384899183186,0.31380445096153825,0.3137850700537654,0.3137656939330502,0.31374632259732393,0.313726956044519,0.31370758195744153,0.31368822496732107,0.31366887275392574,0.31364952531519313,0.3136301703460855,0.31361083245352994,0.3135914993294561,0.31357217097180656,0.3135528350876791,0.31353351625974,0.3135142021920595,0.3134948928825853,0.3134755760505294,0.31345627625433947,0.3134369812102053,0.3134176909160795,0.3133984053699162,0.3133791123060406,0.31335983625268643,0.313340564941163,0.31332129836942946,0.3133020242838785,0.3132827671886187,0.3132635148270321,0.3132442671970828,0.3132250120572102,0.3132057738874394,0.3131865404432043,0.31316731172247403,0.31314807549571383,0.31312885621890674,0.31310964165951777,0.313090431815521,0.3130712266848917,0.31305201405309824,0.3130328183461298,0.3130136273464608,0.31299444105207164,0.3129752472604102,0.31295607037351614,0.3129368981858487,0.31291773069539314,0.3128985557115564,0.31287939761246986,0.3128602442045568,0.3128410954858074,0.3128219392775673,0.31280279993410026,0.3127836652737734,0.31276453529458165,0.3127454099945214,0.3127262772098321,0.31270716126500175,0.31268804999329775,0.3126689433927212,0.3126498293114043,0.3126307320500594,0.3126116394538515,0.31259255152078663,0.3125734561108693,0.31255437750107673,0.31253530354845144,0.3125162342510043,0.31249715748059154,0.3124780974904963,0.31245904214961795,0.3124399914559722,0.312420945407576,0.31240189189107176,0.31238285513018227,0.3123638230085992,0.31234479552434435,0.31232576057586675,0.31230674236328543,0.3122877287821037,0.31226871983034815,0.31224970341825414,0.31223070372237743,0.31221170865001263,0.31219271819919125,0.31217372029191487,0.31215473908121605,0.3121357624861607,0.3121167905047851,0.3120978231351266,0.31207884831386606,0.3120598901646892,0.31204093662134746,0.312021987681883,0.31200303129469814,0.3119840915600451,0.3119651564234016,0.31194622588281473,0.31192728789838803,0.3119083665469802,0.3118894497857755,0.31187053761282546,0.31185161799991534,0.31183271500055004,0.31181381658360025,0.3117949227471222,0.3117760334891736,0.31175713679611305,0.31173825669230987,0.31171938116121445,0.311700510200889,0.3116816318093294,0.31166276998764,0.31164391273091296,0.3116250600372154,0.31160619991616034,0.31158735634562673,0.31156851733232893,0.3115496828743388,0.31153084099286693,0.31151201564260605,0.31149319484187327,0.31147437858874477,0.3114555668812981,0.31143674775521285,0.31141794513625515,0.3113991470572171,0.3113803535161809,0.3113615525603797,0.3113427680924815,0.31132398815683693,0.3113052127515328,0.3112864299353361,0.31126766358785607,0.311248901764982,0.3112301444648053,0.3112113797576078,0.31119263149997817,0.3111738877593255,0.3111551485337455,0.3111364138213352,0.3111176717067421,0.31109894601783505,0.31108022483639447,0.3110615081605221,0.311042784086336,0.3110240764187723,0.3110053732510871,0.31098667458138674,0.310967968517241,0.31094927884069146,0.3109305936564507,0.3109119129626296,0.31089322487823035,0.31087455316243856,0.3108558859314041,0.31083722318324225,0.31081856491606935,0.3107998992631507,0.31078124995515694,0.31076260512250686,0.3107439647633214,0.3107253170222549,0.3107066856072086,0.3106880586599951,0.3106694361787399,0.31065080631946745,0.31063219276734744,0.31061358367556746,0.31059497904225736,0.31057636703479274,0.3105577713156498,0.31053918004937203,0.31052059323409376,0.31050201086795043,0.3104834211324792,0.31046484766184396,0.3104462786347557,0.3104277140493543,0.31040914209848514,0.31039058639370426,0.3103720351250356,0.3103534882906235,0.31033493409460267,0.31031639612595907,0.3102978625860107,0.31027933347290637,0.3102607970020512,0.31024227673989885,0.31022376089904247,0.31020524947763517,0.3101867424738313,0.31016822811709727,0.31014972994577505,0.3101312361865248,0.31011274683750506,0.31009425013941044,0.31007576960813527,0.31005729348157224,0.3100388217578846,0.3100203426889762,0.310001879768331,0.3099834212450559,0.3099649671173184,0.309946505648213,0.30992806030885084,0.3099096193595341,0.30989118279843464,0.3098727506237255,0.30985431111246287,0.30983588770784476,0.30981746868414106,0.30979905403952906,0.3097806320622139,0.30976222617310434,0.3097438246576235,0.30972542751395327,0.3097070230414289,0.3096886346387069,0.3096702506023455,0.30965187093053065,0.30963348393370954,0.3096151129883234,0.3095967464020469,0.3095783841730702,0.3095600262995846,0.3095416611059008,0.3095233119407435,0.3095049671256565,0.3094866266588354,0.3094682788756611,0.309449947102726,0.3094316196726488,0.3094132965836294,0.3093949661821006,0.30937665177255913,0.30935834169868026,0.30934003595866805,0.3093217229099891,0.3093034258350809,0.309285133088657,0.3092668446689257,0.3092485605740964,0.30923026917540164,0.30921199372775726,0.3091937225996484,0.3091754557892887,0.3091571816789032,0.30913892350143074,0.30912066963635354,0.30910242008188954,0.3090841632312382,0.30906592229539753,0.3090476856648288,0.30902945333775406,0.3090112137183292,0.3089929899956475,0.30897477057113126,0.30895655544300654,0.3089383446095008,0.3089201264884393,0.3089019242415866,0.3088837262840398,0.30886553261403044,0.3088473316602996,0.30882914656278837,0.3088109657475141,0.3087927892127125,0.3087746053980223,0.3087564374215972,0.3087382737203567,0.3087201142925407,0.30870194758866765,0.30868379670513973,0.30866565008976077,0.30864750774077454,0.3086293696564262,0.3086112243008081,0.3085930947431844,0.30857496944493845,0.30855684840431935,0.30853872009625904,0.3085206075683505,0.3085024992928211,0.3084843952679239,0.30846628397941284,0.3084481884532451,0.3084300971724743,0.3084120101353577,0.30839392734015353,0.3083758372861173,0.3083577629722128,0.3083396928950006,0.3083216270527433,0.30830355395547787,0.3082854965806126,0.3082674434354942,0.3082493945183893,0.30823133835009897,0.30821329788651103,0.3081952616457409,0.3081772296260589,0.3081591903590129,0.30814116677900544,0.30812314741490276,0.3081051322649793,0.3080871213275107,0.30806910314745256,0.3080511006324013,0.3080331023246365,0.3080151082224378,0.3079971068814676,0.3079791211879163,0.30796113969477484,0.30794316240032665,0.3079251778709237,0.30790720897138524,0.3078892442653959,0.3078712837512432,0.307853316005951,0.30783536387300225,0.307817415926758,0.3077994721655097,0.3077815325875499,0.30776358578321766,0.30774565456937525,0.30772772753370403,0.3077098046745007,0.30769187459273684,0.3076739600840168,0.30765604974665917,0.30763814357896446,0.30762023019251983,0.3076023323617062,0.307584438695462,0.3075665491920916,0.3075486524737803,0.3075307712937205,0.30751289427145273,0.30749502140528545,0.3074771526935282,0.3074592767715893,0.30744141636622413,0.307423560110202,0.30740570800183614,0.3073878486870945,0.30737000487162097,0.3073521651987486,0.3073343296667946,0.30731648693226904,0.30729865967973885,0.3072808365630835,0.3072630175806243,0.3072451913993964,0.3072273806829237,0.30720957409561533,0.3071917716357962,0.30717397330179236,0.3071561677737711,0.3071383776890016,0.3071205917250302,0.30710280988018673,0.30708502084512523,0.3070672472361488,0.3070494777412947,0.3070317123588966,0.30701393979007846,0.306996182630211,0.30697842957780563,0.30696068063119986,0.30694292450197036,0.30692518376458966,0.3069074471280261,0.306889714590621,0.3068719861507169,0.30685425053293225,0.30683653028566504,0.3068188141309306,0.30680110206707517,0.3067833828291322,0.3067656789446771,0.3067479791461444,0.3067302834318841,0.3067125805473276,0.30669489299926156,0.30667720953052274,0.3066595301394649,0.3066418435819008,0.3066241723438616,0.3066065051785697,0.3065888420843826,0.3065711830596588,0.30655351687316373,0.30653586598503235,0.3065182191614448,0.3065005764007633,0.3064829264820968,0.3064652918449003,0.30644766126570155,0.3064300347428668,0.3064124010658316,0.3063947826534045,0.3063771682924442,0.3063595579813207,0.30634194051978,0.3063243383060169,0.30630674013720477,0.3062891460117172,0.30627155592792876,0.3062539586984496,0.30623637669575526,0.3062187987298882,0.3062012247992268,0.30618364372665424,0.30616607786410693,0.3061485160319047,0.3061309582284294,0.30611339328682097,0.30609584353850966,0.3060782978140759,0.3060607561119054,0.30604320727537815,0.30602567361545113,0.30600814397294895,0.3059906183462611,0.305973096733778,0.305955567991656,0.3059380544053078,0.3059205448283397,0.3059030392591457,0.3058855265640857,0.3058680290081726,0.3058505354552202,0.3058330459036261,0.3058155492299371,0.30579806767879925,0.3057805901242172,0.30576311656459243,0.30574563588664205,0.3057281703146781,0.30571070873287987,0.3056932511396523,0.30567579753340135,0.3056583368135341,0.30564089117899135,0.3056234495266474,0.30560601185491165,0.30558856707332543,0.3055711373605682,0.3055537116236523,0.30553628986099085,0.305518860992243,0.3055014471758593,0.3054840373289741,0.305466631450004,0.3054492184687099,0.30543182052334583,0.3054144265411516,0.3053970365205478,0.3053796504599555,0.3053622573017397,0.3053448791589547,0.3053275049714495,0.30531013473764906,0.3052927574099837,0.3052753950813835,0.305258036701767,0.3052406822695627,0.3052233207472504,0.30520597420766793,0.3051886316107874,0.30517129295504075,0.30515394721294137,0.30513661643726686,0.3051192895980267,0.3051019666936564,0.3050846477225926,0.3050673216698675,0.30505001056322906,0.30503270338521077,0.30501540013425266,0.3049980898053847,0.30498079440636616,0.3049635029297322,0.30494621537392624,0.3049289207439603,0.30491164102763646,0.3048943652274757,0.3048770933419251,0.3048598143859624,0.3048425503274645,0.3048252901789224,0.3048080339387865,0.3047907816055084,0.3047735222065005,0.3047562776847786,0.30473903706527306,0.304721800346439,0.30470455656561923,0.3046873276459752,0.30467010262237176,0.3046528814932674,0.3046356533059198,0.3046184399636673,0.3046012305112935,0.3045840249472604,0.3045668123287246,0.3045496145392332,0.30453242063347236,0.30451523060990765,0.3044980444670054,0.3044808512742737,0.30446367289056475,0.30444649838292126,0.30442932774981296,0.304412150070612,0.30439498718444913,0.30437782816823494,0.3043606730204425,0.30434351083029243,0.30432636341722513,0.30430921986800347,0.304292080181104,0.30427493345558,0.3042578014912129,0.30424067338460203,0.30422354913422756,0.3042064287385704,0.30418930130895244,0.3041721886206256,0.304155079782463,0.30413797479294885,0.3041208627732032,0.3041037654788883,0.304086672028679,0.30406958242106313,0.3040524857869431,0.30403540386242256,0.30401832577596266,0.3040012515260546,0.30398417025336816,0.30396710367447877,0.3039500409276187,0.3039329820112825,0.3039159269239656,0.30389886481852446,0.3038818173871688,0.30386477378032256,0.30384773399648446,0.30383068719824385,0.3038136550583512,0.303796626736967,0.3037796022325933,0.30376257071753693,0.30374555384511975,0.30372854078522354,0.30371153153635366,0.30369451528051905,0.30367751365164364,0.30366051582931497,0.3036435218120419,0.3036265315983341,0.30360953438230637,0.30359255177367844,0.30357557296414867,0.30355859795223006,0.3035416159417055,0.3035246485229648,0.30350768489737817,0.3034907250634619,0.3034737582346517,0.303456805982038,0.30343985751664754,0.30342291283699985,0.3034059611661686,0.3033890240559746,0.30337209072708626,0.30335516117802647,0.303338235407319,0.30332130265006296,0.3033043844340357,0.3032874699919358,0.30327055932229047,0.3032536416698027,0.303236738543048,0.3032198391843329,0.3032029435921875,0.3031860410209041,0.30316915295988617,0.303152268661033,0.3031353881228781,0.3031185006092875,0.303101627590523,0.3030847583280614,0.3030678928204396,0.30305103106619524,0.30303416234114045,0.3030173080916524,0.30300045759115857,0.3029836108382,0.3029667571181293,0.3029499178582486,0.3029330823415298,0.30291625056651694,0.3028994118280883,0.3028825875345009,0.30286576697825585,0.3028489501579005,0.30283213707198287,0.30281531702726733,0.30279851140824654,0.30278170951931205,0.3027649113590153,0.3027481062436127,0.30273131553861826,0.30271452855791964,0.3026977453000715,0.3026809550908078,0.30266417927669337,0.30264740718109706,0.3026306388025766,0.30261386347632924,0.3025971025299996,0.3025803452964232,0.30256359177416103,0.3025468419617749,0.30253008520626945,0.3025133428116817,0.3024966041226593,0.30247986913776703,0.3024631272134398,0.3024463996348604,0.30242967575611,0.30241295557575687,0.302396228459651,0.30237951567415033,0.3023628065827553,0.30234610118403704,0.30232938885324645,0.3023126908379458,0.3022959965110398,0.30227930587110285,0.3022626189167103,0.30224592503484304,0.30222924544961033,0.3022125695456516,0.30219589732154517,0.30217921817364024,0.3021625533073155,0.3021458921165821,0.30212923460002156,0.3021125701633367,0.3020959199932047,0.30207927349299396,0.3020626306612892,0.30204598091313223,0.3020293454165278,0.3020127135841871,0.3019960854146978,0.30197946090664857,0.3019628294867347,0.3019462122996612,0.3019295987697971,0.30191298889573404,0.30189637211347436,0.30187976954911494,0.30186317063633533,0.3018465753737303,0.3018299732065946,0.3018133852424458,0.30179680092425953,0.3017802202506337,0.3017636326761413,0.30174705928974904,0.30173048954371445,0.3017139234366384,0.30169736096712263,0.30168079160131756,0.30166423640504214,0.3016476848421358,0.3016311369112032,0.30161458208764097,0.30159804141878144,0.3015815043777137,0.3015649709630454,0.30154843065940534,0.30153190449566736,0.301515381954156,0.30149886303348217,0.3014823372274924,0.30146582554663043,0.3014493174824422,0.30143281303354175,0.30141631219854365,0.3013998044827964,0.3013833108737467,0.301366820874447,0.301350334483515,0.30133384121548534,0.3013173620394381,0.30130088646761516,0.30128441449863747,0.3012679356562115,0.3012514708910789,0.3012350097246572,0.3012185521555702,0.3012020877166824,0.301185637340425,0.30116919055737706,0.3011527473661653,0.3011363077654172,0.30111986129942486,0.30110342887777136,0.3010870000424675,0.30107057479214394,0.3010541426802192,0.3010377245980287,0.30102131009671346,0.30100489917490686,0.30098848139514023,0.3009720776305292,0.3009556774413309,0.3009392808261816,0.30092287735671136,0.30090648788784397,0.30089010198893856,0.3008737196586345,0.30085734089557203,0.30084095528273447,0.3008245836523455,0.30080821558512205,0.30079185107970724,0.300775479728152,0.3007591223445503,0.3007427685186902,0.3007264182492176,0.30071006113723725,0.30069371797874106,0.30067737837257413,0.3006610423173855,0.3006446994233197,0.3006283704682942,0.3006120450601975,0.3005957231976815,0.3005794048793989,0.3005630797267745,0.3005467684951719,0.3005304608037643,0.30051415665120706,0.3004978456679342,0.3004815485912966,0.3004652550494797,0.30044896504114194,0.30043266820571274,0.30041638526255743,0.30040010584886034,0.30038382996328283,0.300367547254236,0.300351278423127,0.30033501311612526,0.3003187513318952,0.3003024930691017,0.30028622798736354,0.30026997676567924,0.3002537290614301,0.30023748487328406,0.30022123386981087,0.30020499671211215,0.30018876306652376,0.30017253293171636,0.3001562959851975,0.3001400728701987,0.30012385326199686,0.3001076371592656,0.3000914142484363,0.3000752051548978,0.3000589995628543,0.30004279747098234,0.3000265988779591,0.30001039348135194,0.29999420188428444,0.29997801378210087,0.29996182917348135,0.2999456377648868,0.29992946014165867,0.2999132860080383,0.2998971153627086,0.2998809379210108,0.29986477425053093,0.299848614064394,0.2998324573612857,0.2998162938654143,0.29980014412663714,0.2997839978669493,0.29976785508503956,0.29975171577959714,0.2997355696858947,0.2997194373316671,0.2997033084499781,0.29968718303951997,0.2996710508444021,0.29965493237469076,0.29963881737229003,0.29962270583589484,0.2996065875184382,0.2995904829123444,0.29957438176834433,0.29955828408513563,0.2995421796244619,0.2995260888611317,0.29951000155468954,0.299493917703836,0.2994778373072723,0.2994617501377358,0.2994456766480536,0.29942960660876844,0.29941354001858417,0.29939746665901873,0.29938140696534327,0.2993653507168842,0.2993492979123483,0.29933323834202086,0.29931719242364324,0.29930114994531265,0.29928511090573856,0.2992690651039603,0.29925303294021616,0.2992370042113606,0.299220978916106,0.2992049570531653,0.29918892843250183,0.2991729134325123,0.299156901860979,0.2991408937166179,0.29912487881811683,0.2991088775264281,0.29909287965806225,0.29907688521173764,0.2990608840148539,0.2990448964109451,0.2990289122252365,0.2990129314564493,0.2989969439406817,0.29898097000407553,0.29896499948055794,0.2989490323688529,0.29893306866768504,0.2989170982240071,0.2989011413422579,0.29888518786722335,0.29886923779763064,0.2988532809891019,0.2988373377287423,0.29882139787001005,0.29880546141163533,0.29878951821789657,0.2987735885585909,0.2987576622958364,0.2987417394283658,0.298725809829101,0.29870989375055723,0.2986939810634991,0.298678071766662,0.29866216585878236,0.2986462532235678,0.29863035409196786,0.29861445834553707,0.29859856598301426,0.29858266689672186,0.29856678130038505,0.29855089908417615,0.29853502024683665,0.29851913468929064,0.29850326260806487,0.29848739390193646,0.2984715285696496,0.2984556565207172,0.29843979793449316,0.2984239427183466,0.2984080908710245,0.2983922423912743,0.2983763871993268,0.29836054545310625,0.2983447070707035,0.29832887205086894,0.2983130303223933,0.29829720202608534,0.29828137708859936,0.2982655555086883,0.29824972722369025,0.2982339123573241,0.2982181008447945,0.29820229268485715,0.29818647782338503,0.29817067636703193,0.29815487825954085,0.2981390834996698,0.2981232920861776,0.2981074939755877,0.29809170925325923,0.2980759278735892,0.2980601498353392,0.29804436510353877,0.2980285937465391,0.2980128257272469,0.2979970610444262,0.29798128967160037,0.29796553166013784,0.29794977698144215,0.29793402563427995,0.2979182776174185,0.2979025229149804,0.29788678155714177,0.297871043525909,0.297855308820052,0.29783956743215895,0.29782383937547946,0.2978081146404888,0.29779239322595935,0.2977766651329321,0.2977609503577557,0.29774523889936116,0.2977295307565238,0.2977138159387248,0.2976981144254367,0.297682416224034,0.29766672133329464,0.29765102975199675,0.2976353315001546,0.2976196465361807,0.29760396487798657,0.29758828652435293,0.2975726015037065,0.2975569297576396,0.2975412613124791,0.29752559616700847,0.29750992435805446,0.29749426581041377,0.2974786105588164,0.2974629586020485,0.2974472999853245,0.29743165461667026,0.2974160125392066,0.2974003737517221,0.2973847382530062,0.29736909609873996,0.29735346717602135,0.2973378415384419,0.2973222191847934,0.2973065901791171,0.29729097439179547,0.2972753618847832,0.29725975265687465,0.2972441367804585,0.29722853410922667,0.2972129347134844,0.2971973385920286,0.29718173582558355,0.29716614625117466,0.29715055994744577,0.29713497691319624,0.29711939714722607,0.2971038107406611,0.29708823750972924,0.2970726675434798,0.29705710084071507,0.29704152750086904,0.2970259673235582,0.29701041040614273,0.2969948567474276,0.29697929645514237,0.2969637493123166,0.2969482054246093,0.29693266479082797,0.2969171175269855,0.2969015833995491,0.29688605252246414,0.29687052489454063,0.2968550005145893,0.29683946950895995,0.29682395162345143,0.29680843698234993,0.29679292558446846,0.2967774075644133,0.29676190265147506,0.29674640097819927,0.29673090254340145,0.29671539748993203,0.2966999055305977,0.2966844168061911,0.29666893131553035,0.29665343920969794,0.2966379601850407,0.29662248439058636,0.29660701182515553,0.2965915424875693,0.2965760665391833,0.2965606036558037,0.2965451439967352,0.2965296875608013,0.29651422451756265,0.2964987745264197,0.2964833277548852,0.296467884201785,0.2964524340448731,0.2964369969271679,0.2964215630243782,0.2964061323353325,0.29639069504596577,0.2963752707829385,0.2963598497301437,0.2963444318864122,0.29632901725057553,0.2963135960187782,0.29629818779726724,0.29628278278014863,0.29626738096625643,0.2962519725598895,0.2962365771509902,0.29622118494182215,0.29620579593122165,0.2961904003316302,0.29617501771670934,0.29615963829686814,0.29614426207094546,0.2961288792595133,0.2961135094199763,0.296098142770877,0.29608277931105675,0.29606741903935724,0.2960520521864972,0.29603669828959345,0.2960213475773388,0.29600600004857747,0.29599064594213237,0.29597530477891615,0.2959599667957288,0.2959446319914169,0.29592929061289575,0.2959139621648974,0.2958986368923173,0.29588331479400437,0.2958679861249546,0.2958526703737428,0.2958373577933481,0.2958220483826218,0.2958067421404159,0.29579142933181046,0.29577612942521747,0.2957608326837037,0.29574553910612333,0.29573023896561096,0.295714951714474,0.2956996676238364,0.295684386692555,0.29566909920180673,0.2956538245878181,0.29563855312975845,0.29562328482648703,0.295608009967212,0.29559274797210155,0.29557748912835935,0.29556223343484683,0.295546980890426,0.2955317217943273,0.29551647554667965,0.2955012324447126,0.2954859924872905,0.2954707459816487,0.2954555123119104,0.295440281783313,0.29542505439472305,0.29540982046136954,0.29539459935139284,0.29537938137802655,0.2953641665401398,0.29534894516094323,0.29533373659261763,0.2953185311563815,0.2953033288511061,0.2952881296756635,0.29527292396322513,0.2952577310460553,0.29524254125533683,0.2952273545899439,0.29521216139100437,0.2951969809748742,0.2951818036806952,0.29516662950734396,0.2951514488038929,0.29513628087081273,0.29512111605519287,0.29510595435591225,0.2950907861299763,0.2950756306619936,0.29506047830698956,0.2950453290638453,0.29503018293144256,0.29501503027668713,0.2949998903643922,0.29498475355948695,0.2949696198608554,0.2949544796433107,0.2949393521558552,0.29492422777132826,0.2949091064886163,0.2948939786904287,0.2948788636099794,0.29486375162800676,0.2948486427433995,0.29483352734675183,0.29481842465551206,0.2948033250583062,0.2947882285540252,0.29477313514156056,0.2947580352213465,0.2947429479911563,0.2947278638494596,0.2947127827951501,0.2946976952365215,0.2946826203556322,0.29466754855881405,0.29465247984496307,0.2946374046302211,0.2946223420809541,0.294607282611345,0.294592226220292,0.29457716333177403,0.29456211309648694,0.29454706593645347,0.2945320218505741,0.2945169808377499,0.2945019333317399,0.29448689846368464,0.2944718666653905,0.2944568379357607,0.2944418027163661,0.29442678012272766,0.29441176059446617,0.2943967441304872,0.2943817211801623,0.2943667108434149,0.29435170356766943,0.2943366993518336,0.2943216886530683,0.2943066905557221,0.29429169551501155,0.2942767035298467,0.294261714599138,0.2942467191897674,0.29423173636664646,0.29421675659471597,0.29420177987288887,0.2941867966758115,0.2941718260528701,0.2941568584767731,0.29414189394643536,0.2941269229442568,0.2941119645041206,0.29409700910649134,0.2940820567502862,0.29406709792564734,0.29405215165097726,0.29403720841448544,0.2940222682150913,0.29400733105171484,0.29399238742416056,0.293977456331511,0.29396252827164165,0.29394760324347446,0.2939326717545317,0.29391775278846455,0.2939028368508686,0.2938879239406682,0.2938730045730924,0.2938580977163825,0.2938431938838438,0.2938282930744027,0.293813385810984,0.2937984910464414,0.29378359930177855,0.29376871057592413,0.2937538248678075,0.29373893270995716,0.2937240530360237,0.2937091763766182,0.29369430273067204,0.29367942263838503,0.29366455501806915,0.29364969040800937,0.2936348288071392,0.293619960763319,0.29360510517954347,0.29359025260176086,0.29357540302890683,0.2935605470164912,0.2935457034522135,0.29353086288967406,0.29351602532781085,0.29350119076556214,0.29348634976798404,0.2934715212036883,0.2934566956358248,0.2934418730633342,0.2934270440588977,0.2934122274758803,0.29339741388505997,0.29338260328537935,0.29336778625713406,0.2933529816384641,0.2933381800077644,0.2933233813639799,0.2933085762950097,0.2932937836237903,0.29327899393632306,0.2932642072315548,0.2932494235084331,0.29323463336434624,0.2932198556032571,0.2932050808206594,0.29319030901550275,0.29317553079275505,0.29316076494122373,0.2931460020639848,0.2931312421599898,0.2931164758417757,0.2931017218830158,0.29308697089435753,0.2930722228747548,0.2930574778231619,0.29304272636156137,0.29302798724473966,0.29301325109279336,0.2929985179046788,0.29298377830992345,0.2929690510482278,0.2929543267472357,0.2929396054059058,0.29292487766129977,0.29291016223805305,0.2928954497713467,0.2928807402601412,0.292866024349022,0.29285132074758086,0.292836620098525,0.2928219224008172,0.2928072276534207,0.2927925265103102,0.2927778376623032,0.2927631517614997,0.29274846880686495,0.29273377945987356,0.292719102396347,0.29270442827588766,0.2926897570974629,0.2926750795300367,0.29266041423445527,0.29264575187781317,0.29263109245907976,0.2926164266546978,0.2926017731105595,0.29258712250124075,0.2925724748257131,0.29255783008294856,0.2925431789587234,0.2925285400802672,0.2925139041314927,0.29249927111137397,0.2924846317131426,0.29247000454912114,0.2924553803106802,0.29244075899679584,0.29242613130814454,0.2924115158421628,0.2923969032976685,0.2923822936736399,0.29236767767818783,0.2923530738938835,0.29233847302698174,0.29232387507646296,0.29230928004130785,0.2922946786389054,0.2922800894332748,0.2922655031399526,0.2922509197579214,0.29223633001198135,0.2922217524513331,0.2922071777989266,0.2921926060537467,0.2921780279479942,0.2921634620160718,0.2921488989883328,0.29213433886376405,0.29211977238195674,0.29210521806253614,0.29209066664324873,0.29207611812308326,0.2920615725010291,0.2920470205259007,0.2920324806988812,0.2920179437669435,0.2920034097290789,0.291988869341469,0.2919743410905661,0.2919598157307128,0.2919452932609024,0.2919307644446735,0.2919162477537679,0.2919017339498877,0.2918872230320283,0.29187270577107494,0.2918582006240794,0.29184369836009316,0.29182919897811344,0.29181470247713814,0.2918001996372215,0.2917857088970818,0.2917712210349425,0.2917567360498035,0.29174224472904253,0.29172776549673407,0.29171328913842776,0.2916988156531254,0.2916843358355184,0.2916698680950575,0.2916554032246084,0.29164094122317497,0.291626472892752,0.29161201662818664,0.2915975632296508,0.29158311269615006,0.2915686650266908,0.29155421103238266,0.2915397690898475,0.291525330008375,0.29151089378697337,0.2914964512440329,0.29148202074161755,0.29146759309630016,0.29145316830709095,0.29143873719965074,0.2914243181215057,0.2914099018965018,0.2913954885236511,0.2913810688358751,0.2913666611661822,0.2913522563456814,0.29133785437338683,0.2913234552483131,0.2913090498124427,0.291294656380666,0.2912802657931562,0.2912658780489299,0.2912514839972075,0.29123710193840696,0.29122272271994176,0.2912083463408306,0.2911939636575217,0.2911795929559805,0.29116522509085097,0.29115086006115354,0.2911364887305546,0.2911221293705869,0.29110777284311484,0.29109341914716097,0.29107906828174795,0.2910647111195503,0.2910503659140886,0.2910360235362387,0.2910216839850253,0.2910073381403184,0.2909930042412508,0.29097867316589626,0.2909643449132815,0.2909500103704621,0.2909356877622029,0.2909213679737659,0.2909070510041795,0.29089272774767516,0.2908784164146696,0.2908641078976028,0.29084980219550527,0.2908354993074081,0.2908211901364978,0.2908068928752846,0.29079259842516686,0.2907783067851775,0.29076400886565684,0.290749722844811,0.29073543963119447,0.2907211592238421,0.2907068725402377,0.2906925977443035,0.29067832575174,0.290664056561584,0.2906497810984532,0.29063551751200517,0.29062125672507694,0.29060699873670703,0.2905927435459345,0.29057848208628023,0.29056423248959967,0.2905499856876358,0.2905357416794296,0.29052149140561384,0.29050725298382346,0.29049301735291577,0.29047878451193354,0.2904645454086117,0.29045031814638417,0.29043609367121276,0.29042187198214225,0.2904076440339997,0.2903934279160377,0.29037921458131283,0.29036500402887166,0.2903507962577612,0.29033658223166003,0.29032238002212174,0.2903081805910574,0.290293983937516,0.2902797810322465,0.2902655899326647,0.2902514016077547,0.29023721605656716,0.2902230242569119,0.29020884425208643,0.29019466701813773,0.29018049255411865,0.29016631184488995,0.29015214291965,0.2901379767614996,0.2901238133694931,0.29010965274268546,0.2900954858747377,0.2900813307772519,0.2900671784421318,0.29005302886843426,0.2900388730568497,0.29002472900492443,0.29001058771159405,0.2899964491759172,0.28998230440560435,0.2899681713841649,0.28995404111755696,0.28993991360484095,0.28992577986073753,0.28991165785473877,0.2898975385998153,0.2898834220950295,0.28986930833944397,0.2898551883565286,0.2898410800982811,0.2898269745864241,0.28981287182002224,0.28979876282953426,0.28978466555298316,0.2897705710190828,0.28975647922689984,0.2897423812138721,0.28972829490406704,0.2897142113331805,0.28970013050028054,0.28968604344977505,0.28967196809179485,0.289657895469008,0.2896438255804843,0.28962975842529437,0.28961568505654456,0.2896016233669723,0.28958756440794714,0.2895735081785414,0.2895594457388099,0.2895453949675962,0.28953134692322063,0.28951730160475725,0.2895032500792002,0.2894892102115177,0.2894751730669716,0.2894611386446378,0.2894470980184399,0.28943306903949007,0.2894190427799821,0.28940501923899353,0.28939099841560256,0.28937697139238133,0.2893629560031487,0.2893489433287499,0.2893349333682648,0.28932091721117414,0.2893069126774827,0.2892929108549466,0.2892789117426475,0.28926490643696534,0.2892509127441095,0.2892369217587376,0.2892229334799331,0.2892089390109657,0.28919495614426827,0.28918097598139053,0.28916699852141764,0.2891530237634352,0.28913904281931196,0.28912507346428656,0.2891111068085106,0.28909714285107146,0.28908317271070666,0.28906921414892023,0.2890552582827348,0.28904130511123965,0.28902734576003175,0.28901339797689896,0.2889994528857259,0.2889855104856035,0.2889715619089791,0.28895762488994287,0.28894369055923214,0.2889297589159394,0.2889158299591579,0.28890189482988454,0.288887971245114,0.288874050344136,0.2888601321260454,0.2888462077386686,0.28883229488534423,0.28881838471219384,0.28880447721831404,0.28879056355835153,0.2887766614220072,0.2887627619622253,0.28874886517810405,0.28873496223110134,0.2887210707972988,0.28870718203645396,0.2886932959476669,0.2886794125300381,0.28866552295352615,0.28865164487721484,0.28863776946936526,0.2886238967290797,0.28861001783310725,0.2885961504269536,0.2885822856856725,0.2885684236083681,0.28855455537857083,0.28854069862822646,0.28852684453917254,0.2885129931105148,0.28849914434135926,0.2884852894237001,0.28847144597255947,0.28845760517824137,0.28844376703985364,0.2884299227561513,0.2884160899286375,0.2884022597543795,0.28838843223248684,0.28837459856846626,0.28836077635032037,0.2883469567818703,0.2883331398622273,0.28831931680364103,0.28830550518063125,0.28829169620376427,0.288277889872153,0.28826408618491084,0.2882502763627027,0.2882364779632211,0.2882226822054507,0.28820888908850645,0.28819508983977576,0.2881813020035092,0.28816751680541597,0.28815373424461277,0.28813994555520045,0.2881261682680055,0.2881123936154529,0.28809862159666083,0.28808484345243485,0.28807107670019527,0.2880573125790736,0.28804355108819,0.2880297922266651,0.28801602724367165,0.2880022736398984,0.28798852266284736,0.2879747743116407,0.2879610198421357,0.2879472767416551,0.28793353626438756,0.28791979840945686,0.2879060544393957,0.2878923218281789,0.2878785918366727,0.28786486446400245,0.2878511309793674,0.28783740884341225,0.2878236893236718,0.2878099724192733,0.28779625812934434,0.2877825377314043,0.2877688286694608,0.28775512221937183,0.2877414183802666,0.2877277084363108,0.2877140098182222,0.28770031380850714,0.2876866204062967,0.2876729209023941,0.28765923271424465,0.28764554713099455,0.28763186415177644,0.2876181750740223,0.28760449730192283,0.28759082213125503,0.2875771495611533,0.2875634795907523,0.2875498035257572,0.2875361387538156,0.2875224765789806,0.2875088170003886,0.28749515133035375,0.28748149694330843,0.2874678451499169,0.2874541959493172,0.28744054066042357,0.28742689664447096,0.2874132552187259,0.28739961638232797,0.2873859714607829,0.2873723378021455,0.28735870673027597,0.2873450782443155,0.28733145234340574,0.287317820361279,0.2873041996295403,0.28729058148027903,0.28727696591263857,0.28726334426692285,0.2872497338615962,0.287236126035322,0.2872225207872451,0.2872089094642325,0.28719530937162524,0.2871817118546518,0.2871681169124587,0.28715451589846724,0.28714092610491254,0.2871273388835796,0.28711375423361646,0.2871001721541718,0.287086584006847,0.28707300706752004,0.28705943269615886,0.28704586089191364,0.28703228302292066,0.287018716351991,0.2870051522456295,0.2869915907029879,0.2869780230987288,0.28696446668261333,0.286950912827675,0.28693736153306687,0.28692380417996904,0.28691025800511066,0.2868967143880444,0.28688317332792534,0.28686963482390876,0.286856090265309,0.2868425568725896,0.2868290260334405,0.2868154977470187,0.2868019634091366,0.2867884402272642,0.28677491959559165,0.2867614015132775,0.2867478773826238,0.28673436439812394,0.2867208539604599,0.2867073460687917,0.28669383213190247,0.2866803293313262,0.28666682907422797,0.2866533313597694,0.2866398361871127,0.28662633497312967,0.2866128448831799,0.28659935733251996,0.2865858723203136,0.28657238126989437,0.28655890133370093,0.2865454239334538,0.28653194906831814,0.2865184681680811,0.28650499837227705,0.28649153110908204,0.2864780663776629,0.28646459561425125,0.2864511359454949,0.28643767880601645,0.2864242241949845,0.28641077211156757,0.28639731400004137,0.2863838669709691,0.28637042246702005,0.28635698048736447,0.28634353248270367,0.28633009555075206,0.28631666114060667,0.28630322925143936,0.28628979134036875,0.2862763644922772,0.2862629401626811,0.286249518350754,0.2862360905200232,0.286222673742556,0.28620925948027975,0.2861958477323695,0.2861824384980005,0.2861690232486992,0.2861556190405381,0.2861422173434462,0.28612881815660024,0.2861154129579168,0.2861020187906908,0.2860886271312434,0.2860752379787529,0.28606184281751734,0.28604845867807116,0.2860350770431191,0.28602169791184107,0.28600831277490824,0.28599493865011116,0.2859815670265299,0.2859681979033458,0.28595483127974103,0.285941458654341,0.28592809702903044,0.28591473790084654,0.28590138126897263,0.285888018638389,0.28587466699827363,0.28586131785202035,0.28584797119881405,0.28583461854998116,0.2858212768820098,0.28580793770464213,0.28579460101706455,0.2857812583369412,0.28576792662808714,0.2857545974065844,0.28574127067162075,0.28572794642238475,0.285714616184451,0.28570129690581664,0.2856879801104767,0.285674665797621,0.28566134549914357,0.2856480361504055,0.28563472928172307,0.28562142489228765,0.2856081145203042,0.28559481508851436,0.28558151813354743,0.28556822365459633,0.28555492319616876,0.2855416336684032,0.2855283466142338,0.28551506203285504,0.28550177992346165,0.28548849183842806,0.2854752146721624,0.2854619399754681,0.28544866774754146,0.2854353895470413,0.2854221222558094,0.2854088574309357,0.2853955950716179,0.28538232674279096,0.2853690693137469,0.2853558143478537,0.2853425618443106,0.2853293033743207,0.28531605579464225,0.2853028106749134,0.2852895680143349,0.2852763278121079,0.2852630816472585,0.2852498463609016,0.28523661353050117,0.28522338315525986,0.2852101468204535,0.2851969213546999,0.2851836983417148,0.28517047778070226,0.28515725126317987,0.2851440356052846,0.28513082239697585,0.285117611637459,0.28510439492448525,0.285091189061727,0.28507798564537895,0.2850647846746482,0.28505158614874215,0.28503838167319206,0.28502518803611293,0.28501199684148226,0.2849988080885089,0.2849856133889396,0.28497242951846086,0.28495924808726764,0.28494606909457026,0.2849328841583227,0.28491971004179933,0.2849065383614044,0.2848933691163497,0.2848801939307884,0.28486702955559884,0.28485386761338644,0.2848407081033644,0.28482755102474644,0.28481438800942305,0.28480123579280064,0.28478808600522465,0.28477493864591014,0.2847617853529289,0.28474864284932727,0.28473550277163384,0.2847223651190651,0.28470922153586625,0.28469608873273927,0.28468295835238816,0.28466983039403077,0.2846566965080775,0.28464357339290236,0.28463045269737636,0.2846173344207189,0.2846042185621498,0.2845910967797745,0.2845779857565796,0.28456487714913387,0.28455177095665835,0.2845386588434061,0.28452555748007125,0.2845124585293718,0.28449936199053044,0.28448625953393947,0.28447316781801646,0.28446007851162103,0.2844469916139771,0.28443390712430905,0.28442081672067226,0.2844077370461613,0.284394659777301,0.2843815849133173,0.28436850413838705,0.2843554340833639,0.28434236643089633,0.28432930118021166,0.2843162300216006,0.28430316957369134,0.2842901115252483,0.2842770558755001,0.28426399432084354,0.28425094346769714,0.28423789501093316,0.2842248489497817,0.28421180528347323,0.2841987557160255,0.28418571683861776,0.28417268035374593,0.2841596462606417,0.28414660626941135,0.28413357695905966,0.28412055003817277,0.28410752550598395,0.2840944950786798,0.2840814753231065,0.2840684579539326,0.2840554429703927,0.28404242209474617,0.2840294118816961,0.28401640405198564,0.28400339860485074,0.283990395539528,0.2839773865858562,0.28396438828338205,0.28395139236043065,0.28393839881624,0.28392539938670414,0.2839124105992615,0.2838994241882945,0.2838864401530424,0.2838734502354467,0.28386047095085315,0.2838474940396937,0.2838345195012088,0.2838215390833798,0.2838085692894753,0.28379560186596875,0.2837826368121021,0.28376967412711757,0.28375670556653515,0.2837437476185491,0.2837307920371738,0.2837178388216529,0.28370487973352865,0.2836919312489529,0.28367898512796424,0.28366604136980783,0.28365309174204034,0.2836401527087868,0.2836272160361022,0.2836142817232331,0.2836013415437431,0.28358841194974566,0.2835754847133045,0.2835625598336676,0.28354963731008315,0.28353670892361243,0.28352379111137616,0.28351087565293837,0.28349796254754867,0.283485043582258,0.28347213518221,0.28345922913296007,0.28344632543375936,0.2834334158776409,0.2834205168777862,0.28340762022573496,0.2833947259207393,0.283381825761807,0.2833689361501727,0.2833560488833525,0.2833431639605999,0.2833302813811689,0.28331739295152436,0.28330451505798937,0.2832916395055395,0.28327876629343,0.28326588723408314,0.28325301870190933,0.2832401525078435,0.28322728865114233,0.2832144189501776,0.2832015597674627,0.28318870291988396,0.2831758484066994,0.28316298805222323,0.2831501382070863,0.28313729069411925,0.2831244455125813,0.28311160266173235,0.2830987539733034,0.2830859157830941,0.2830730799213544,0.2830602463873453,0.2830474070187232,0.2830345781394394,0.28302175158567083,0.28300892735668,0.28299609729604097,0.2829832777158717,0.28297046045826874,0.2829576455224959,0.28294482475803756,0.2829320144651933,0.2829192064919718,0.28290640083763813,0.28289359750145776,0.282880788340292,0.28286798963968907,0.28285519325503705,0.2828423991856027,0.2828295992941408,0.2828168098544148,0.2828040227277082,0.2827912379132889,0.2827784472797978,0.28276566708922846,0.28275288920875213,0.2827401136376382,0.28272733225040586,0.28271456129729394,0.28270179265135403,0.28268902631185683,0.2826762622780732,0.28266349243186,0.2826507330087838,0.2826379758892357,0.2826252210724882,0.2826124604462598,0.28259971023439545,0.2825869623231502,0.2825742167117976,0.2825614652939106,0.28254872428162753,0.2825359855670595,0.2825232491494816,0.2825105069283137,0.2824977751040021,0.282485045574507,0.28247231833910447,0.2824595933970713,0.28244686265512536,0.28243414229911945,0.2824214242343141,0.28240870845998706,0.2823959868886869,0.2823832756946075,0.2823705667888417,0.28235786017066855,0.28234514775845965,0.2823324457147649,0.28231974595650183,0.2823070484829511,0.2822943452182998,0.28228165231346847,0.28226896169119237,0.2822562733507531,0.28224358729143295,0.28223089544467816,0.2822182139468936,0.28220553472807586,0.2821928577875083,0.28218017506243664,0.28216750267766905,0.28215483256900326,0.28214216473572395,0.2821294911208689,0.28211682783766423,0.28210416682770156,0.28209150809026684,0.2820788435741825,0.28206618938110734,0.28205353745841943,0.2820408878054061,0.2820282404213548,0.28201558726230846,0.2820029444154875,0.2819903038354928,0.28197766552161313,0.28196502143565977,0.28195238765331837,0.28193975613496,0.2819271268798747,0.28191449185563494,0.28190186712640614,0.2818892446583222,0.2818766244506746,0.28186399847678956,0.28185138278932664,0.2818387693601756,0.28182615818862905,0.28181354927398006,0.2818009345967368,0.28178833019519745,0.2817757280484358,0.2817631281557463,0.28175052250337485,0.28173792711814605,0.2817253339848734,0.28171274310285244,0.2817001464640598,0.28168756008386076,0.28167497595280133,0.2816623940701782,0.28164980643369136,0.28163722904726146,0.28162465390715963,0.2816120810126837,0.2815995103631321,0.2815869339633487,0.28157436780296885,0.2815618038854096,0.28154924220997063,0.2815366747872032,0.2815241175953298,0.2815115626434768,0.281499009930945,0.2814864514739858,0.28147390323942345,0.2814613572420862,0.281448813481276,0.2814362639789375,0.2814237246905106,0.28141118763651846,0.28139865281626436,0.2813861202290519,0.2813735819039317,0.28136105378213405,0.28134852789129033,0.28133600423070537,0.2813234748351069,0.2813109556343729,0.2812984386618137,0.2812859239167353,0.2812734034395355,0.2812608931487542,0.2812483850833734,0.28123587924270044,0.2812233676727961,0.2812108662808762,0.2811983671115875,0.2811858701642386,0.2811733754381385,0.2811608749864162,0.28114838470215303,0.2811358966370665,0.28112341079046677,0.2811109192211302,0.2810984378108456,0.2810859586169794,0.28107348163884294,0.28106099894085274,0.2810485263935193,0.281036056059851,0.28102358793916027,0.28101111410149676,0.2809986504061068,0.28098618892163346,0.2809737296473904,0.2809612725826919,0.2809488098046187,0.2809363571583569,0.2809239067195831,0.2809114584876126,0.2808990045451437,0.28088656072612955,0.2808741191118659,0.28086167970166925,0.2808492345838483,0.2808367995811373,0.2808243667804441,0.28081193618108646,0.2807994998769765,0.28078707367964345,0.2807746496816005,0.28076222788216637,0.28074980828066043,0.2807373829779891,0.2807249677716953,0.2807125547612886,0.28070014394608944,0.2806877274325922,0.2806753210071659,0.28066291677490973,0.2806505147351453,0.28063810699994796,0.2806257093445267,0.28061331387956334,0.28060092060438074,0.2805885216366283,0.28057613274036874,0.28056374603185974,0.2805513615104253,0.2805389791753897,0.2805265911513601,0.280514213188486,0.28050183740998513,0.2804894638151828,0.2804770845342448,0.2804647153062055,0.2804523482598426,0.2804399833944829,0.28042761284584367,0.2804152523418578,0.2804028940168565,0.2803905378701676,0.28037818390111935,0.28036582425235873,0.28035347463796145,0.2803411271991907,0.2803287819353757,0.28031643099469983,0.28030409008016816,0.2802917513385816,0.28027941476927076,0.28026707252594857,0.28025474030056274,0.28024241024544555,0.2802300823599287,0.28021774880324773,0.28020542525630704,0.2801931038769631,0.2801807846645489,0.2801684676183975,0.28015614490463814,0.2801438321903902,0.280131521640406,0.2801192132540199,0.28010689920286835,0.2800945951430579,0.2800822932448499,0.2800699935075799,0.280057688108385,0.2800453926923722,0.2800330994353053,0.28002080833652093,0.2800085115786501,0.2799962247958139,0.27998394016927164,0.27997165769836113,0.27995937738242055,0.2799470914109384,0.2799348154043229,0.2799225415506931,0.2799102698493882,0.27989799249537545,0.27988572509810755,0.27987345985118384,0.27986119675394466,0.27984892800682926,0.2798366692083482,0.27982441255757445,0.27981215805384957,0.279799897903078,0.27978764769284165,0.2797753996276802,0.27976315370693666,0.2797509099299539,0.27973866050945834,0.2797264210193902,0.2797141836711134,0.27970194846397206,0.2796897076161427,0.2796774766906671,0.2796652479043608,0.2796530212565693,0.27964078897091266,0.2796285665995471,0.27961634636473365,0.27960412826581876,0.27959190453185934,0.27957969070413985,0.2795674790103597,0.2795552694498665,0.2795430620220081,0.27953084896262814,0.27951864579944,0.27950644476693187,0.2794942458644526,0.27948204133326776,0.27946984669024866,0.27945765417530705,0.279445463787793,0.27943326777438726,0.27942108164113244,0.279408897633357,0.27939671575041247,0.27938452824438803,0.27937235061051074,0.2793601750995195,0.27934800171076674,0.2793358304436052,0.2793236535568756,0.2793114865323044,0.27929932162738397,0.279287158841468,0.2792749904387913,0.2792628318902941,0.2792506754588644,0.2792385211438571,0.2792263612148941,0.279214211132143,0.2792020631638805,0.27918991730946285,0.2791777658438925,0.27916562421657737,0.2791534847011767,0.27914134729704754,0.27912921200354746,0.27911707110239553,0.27910494002956887,0.2790928110654451,0.2790806842093828,0.2790685517484671,0.2790564291079448,0.27904430857356116,0.27903219014467584,0.2790200661137334,0.27900795189526356,0.27899583978037246,0.2789837297684211,0.2789716141572069,0.27895950835055533,0.27894740464492723,0.2789353030396846,0.27892320353418965,0.27891109843292167,0.2788990031263446,0.2788869099176032,0.27887481880606074,0.2788627221015349,0.27885063518381464,0.2788385503613846,0.2788264676336093,0.2788143793156382,0.2788023007765981,0.27879022433030737,0.27877814997613143,0.27876607003454523,0.2787539998640265,0.2787419317837205,0.27872986579299375,0.27871780189121337,0.2787057324055015,0.2786936726810433,0.27868161504363326,0.2786695594926395,0.27865749836049525,0.27864544698176535,0.27863339768755696,0.27862135047723924,0.27860929768854986,0.27859725464544643,0.27858521368434214,0.27857317480460725,0.2785611303492775,0.27854909563171604,0.27853706299363573,0.27852503243440796,0.27851300395340417,0.2785009699002735,0.2784889455751545,0.27847692332637547,0.27846490315330896,0.27845287741088776,0.27844086138868474,0.27842884744031343,0.2784168355651476,0.27840481812339707,0.2783928103940821,0.27838080473609494,0.2783688011488103,0.2783567919977092,0.27834479255127154,0.27833279517366205,0.2783207998642567,0.27830880662243157,0.278296807820247,0.2782848187130261,0.2782728316715152,0.2782608466950913,0.2782488561610715,0.2782368753142673,0.2782248965306831,0.2782129198096972,0.2782009375338767,0.2781889649375344,0.2781769944019265,0.27816502592643233,0.27815305189886297,0.27814108754304495,0.27812912524548,0.2781171650055485,0.2781052068226312,0.2780932430910849,0.2780812890216466,0.27806933700736575,0.2780573870476241,0.2780454315420083,0.27803348569079744,0.2780215418922723,0.27800960014581566,0.27799765285623756,0.27798571521337195,0.27797377962072445,0.2779618460776791,0.277949906994263,0.27793797754987726,0.2779260501532465,0.27791412480375555,0.2779022015007897,0.2778902726608885,0.2778783534504303,0.27786643628465396,0.27785452116294573,0.27784260050704834,0.2778306894729355,0.2778187804810507,0.2778068735307813,0.27779496104906687,0.277783058181489,0.2777711573536896,0.2777592585650571,0.2777473542477216,0.27773545953688517,0.2777235668633818,0.27771167622660103,0.2776997876259324,0.27768789349998535,0.2776760089710055,0.2776641264763079,0.27765224601528343,0.2776403600317181,0.2776284836375057,0.2776166092751397,0.2776047369440119,0.2775928590930786,0.27758099082389454,0.2775691245841251,0.277557260373163,0.2775453906451289,0.2775335304912506,0.2775216723643592,0.27750981626384863,0.2774979621891129,0.277486102600719,0.277474252577004,0.2774624045772472,0.27745055860084383,0.27743870711351126,0.27742686518328724,0.2774150252746032,0.2774031873868553,0.2773913439909051,0.27737951014450346,0.27736767831722764,0.27735584850847467,0.27734401319424423,0.2773321874220128,0.27732036366649704,0.27730854192709514,0.2772967222032055,0.2772848969772415,0.2772730812838542,0.2772612676041757,0.27724945593760564,0.2772376387716815,0.2772258311308073,0.2772140255012412,0.2772022218823836,0.27719041276689016,0.27717861316893033,0.27716681557988176,0.27715501999914594,0.2771432189244906,0.27713142735986257,0.2771196378017531,0.2771078502495647,0.27709606470270015,0.2770842736653086,0.27707249212857604,0.27706071259537696,0.2770489350651152,0.2770371520470381,0.27702537852213655,0.277013606998385,0.27700183747518814,0.27699006246688573,0.2769782969442856,0.27696653342045585,0.2769547718948024,0.276943004886751,0.27693124735693875,0.27691949182352144,0.27690773828590587,0.27689598674349925,0.2768842297220765,0.2768724821695782,0.27686073661051136,0.27684899304428395,0.27683724400174364,0.27682550442068726,0.27681376683069586,0.27680203123117847,0.27679029015804946,0.2767785585389739,0.27676682890860077,0.27675510126634034,0.27674336815316747,0.2767316444866275,0.27671992280643165,0.276708203111991,0.2766964854027171,0.27668476222590177,0.276673048486458,0.27666133673041615,0.2766496269571885,0.27663791171911417,0.2766262059110134,0.27661450208396504,0.2766028002373825,0.27659109292864603,0.27657939504249496,0.27656769913505086,0.2765560052057281,0.27654431325394124,0.27653261584336347,0.2765209278461503,0.27650924182471787,0.27649755777848184,0.27648586827614313,0.2764741881798033,0.2764625100569077,0.2764508339068729,0.27643915230342164,0.27642748009861334,0.2764158098649167,0.2764041416017493,0.27639246788784966,0.2763808035652469,0.27636914121142725,0.2763574808258091,0.27634582240781125,0.2763341585424336,0.2763225040591845,0.27631085154181323,0.27629920098973954,0.2762875449929657,0.2762758983709967,0.27626425371258556,0.2762526110171532,0.27624096287969846,0.2762293241097345,0.27621768730101254,0.2762060524529543,0.2761944121655495,0.2761827812383313,0.276171152270043,0.27615952526010745,0.2761479002079475,0.27613626971978283,0.2761246485826884,0.2761130294016395,0.27610141217606005,0.27608978951714724,0.27607817620202235,0.27606656484063974,0.2760549554324242,0.27604334059354463,0.2760317350911805,0.27602013154025923,0.27600852994020664,0.2759969229121573,0.27598532521336067,0.2759737294637113,0.275962135662636,0.2759505438095618,0.27593894653182227,0.2759273585742708,0.2759157725630027,0.2759041884974459,0.2758925990098867,0.2758810188352745,0.2758694406046588,0.2758578643174685,0.2758462826109367,0.27583471021012057,0.27582313975101785,0.2758115712330585,0.27579999729841653,0.2757884326622686,0.27577686996555484,0.2757653092077062,0.2757537503881538,0.27574218615523954,0.27573063121180597,0.27571907820496305,0.27570752713414287,0.27569597065261536,0.2756844234533684,0.27567287818844155,0.27566133485726774,0.2756497861180391,0.2756382466539006,0.27562670912181525,0.27561517352121706,0.2756036325152147,0.2755921007771215,0.27558057096881844,0.27556904308974045,0.2755575171393226,0.275545985786811,0.275534463693246,0.2755229435266478,0.2755114252864525,0.27549990164680943,0.27548838725895364,0.27547687479580996,0.2754653642568156,0.2754538483210177,0.2754423416298571,0.2754308368611578,0.27541933401435803,0.27540782577339695,0.2753963267699326,0.27538482968668265,0.2753733345230861,0.27536184127858204,0.2753503426432166,0.27533885323643587,0.2753273657470661,0.27531588017454756,0.2753043892138054,0.2752929074745288,0.2752814276504245,0.27526994974093383,0.2752584664458553,0.27524699236513256,0.2752355201973474,0.27522404994194183,0.27521257430358237,0.27520110787247826,0.2751896433520806,0.27517818074183237,0.27516672004117654,0.2751552539608564,0.2751437970789296,0.27513234210492576,0.2751208890382888,0.2751094305946169,0.27509798134225927,0.2750865339956017,0.27507508855408913,0.2750636377381692,0.2750521961064937,0.27504075637829906,0.27502931855303137,0.27501787535598193,0.2750064413361162,0.2749950092175161,0.2749835789996284,0.2749721506819002,0.27496071699566926,0.27494929247780986,0.2749378698584521,0.27492644913704384,0.2749150230497542,0.27490360612379644,0.27489219109413315,0.2748807779602132,0.27486935946303115,0.2748579501201506,0.27484654267136105,0.2748351371161124,0.27482372620021883,0.27481232443160575,0.2748009245548839,0.274789526569504,0.274778130474917,0.2747667290229539,0.2747553367095083,0.2747439462852093,0.27473255774950894,0.2747211638590454,0.274709779100099,0.27469839622810777,0.2746870152425243,0.27467562890478875,0.2746642516915793,0.27465287636313696,0.27464150291891537,0.27463012412515075,0.2746187544489303,0.2746073866552927,0.2745960207436924,0.2745846567135842,0.2745732873371914,0.27456192706962873,0.2745505686819235,0.27453921217353144,0.27452785032145954,0.27451649757125646,0.27450514669873466,0.27449379770335064,0.27448244336688954,0.2744710981253452,0.27445975475930945,0.2744484132682398,0.2744370664386938,0.2744257286971217,0.2744143928288891,0.27440305883345445,0.27439172671027634,0.27438038925187014,0.2743690608727721,0.27435773436430744,0.2743464097259356,0.2743350797549322,0.2743237588563144,0.274312439826169,0.27430112266395634,0.2742898001717066,0.27427848674492905,0.2742671751844664,0.27425586548978004,0.27424455046764923,0.27423324450408615,0.2742219404046841,0.27421063816890534,0.27419933779621225,0.2741880320993127,0.27417673545236326,0.2741654406668877,0.27415414774234925,0.27414284949619255,0.27413156029310193,0.27412027294933927,0.2741089874643687,0.27409769666036626,0.2740864148925548,0.27407513498192887,0.27406385692795354,0.2740525735575309,0.274041299216433,0.27403002673038185,0.2740187560988433,0.2740074873212836,0.2739962132305042,0.2739849481604799,0.27397368494283375,0.2739624235770328,0.2739511569005924,0.273939899238061,0.27392864342577683,0.2739173894632078,0.27390613019257753,0.27389487992901923,0.2738836315135807,0.27387238494573074,0.27386113307239585,0.2738498901993047,0.27383864917220946,0.27382740999057975,0.2738161726538853,0.27380493001492356,0.27379369636768314,0.27378246456378863,0.27377123460271074,0.2737599993419375,0.27374877306607737,0.2737375486314471,0.27372632603751823,0.27371509814646405,0.2737038792335237,0.2736926621597005,0.2736814469244669,0.2736702263946762,0.27365901483620886,0.27364780511474945,0.27363659722977135,0.27362539118074813,0.2736141798403752,0.27360297746285017,0.2735917769197016,0.2735805782104038,0.2735693742123203,0.273558179170314,0.27354698596058274,0.27353579458260174,0.2735245979183969,0.27351341020350745,0.273502224318795,0.2734910402637357,0.2734798509250127,0.27346867052885204,0.27345749196077374,0.2734463152202549,0.27343514030677274,0.2734239601128241,0.273412788853009,0.2734016194186631,0.2733904518092643,0.27337927892195496,0.27336811496204566,0.2733569528255187,0.2733457925118529,0.2733346269228304,0.2733234702544832,0.273312315407435,0.27330116238116525,0.2732900040820908,0.27327885469697577,0.2732677071310795,0.2732565613838826,0.2732454174548659,0.27323426825623165,0.2732231279631744,0.2732119894867406,0.27320085282641204,0.2731897108990137,0.2731785778704958,0.27316744665652903,0.27315631725659584,0.27314518259213877,0.2731340568198743,0.2731229328600918,0.27311181071227475,0.2731006903759067,0.2730895647781941,0.2730784480643269,0.27306733316036025,0.27305622006577845,0.2730451017123939,0.2730339922361862,0.27302288456781754,0.2730117787067731,0.2730006675894657,0.2729895653426752,0.27297846490166566,0.2729673662659231,0.27295626237645526,0.2729451673508532,0.27293407412897736,0.2729229827103144,0.2729118930943516,0.2729007982278331,0.2728897122168787,0.2728786280070866,0.2728675455979449,0.27285645794078106,0.2728453791325493,0.2728343021234327,0.2728232269129199,0.27281214645691665,0.27280107484322214,0.2727900050265987,0.27277893700653605,0.2727678637435127,0.2727567993161832,0.2727457366838841,0.27273467584610595,0.2727236168023393,0.2727125525187716,0.2727014970626412,0.27269044339899523,0.27267939152732507,0.2726683344183794,0.2726572861302753,0.2726462396326224,0.2726351949249129,0.27262414498245163,0.2726131038542446,0.2726020645144588,0.2725910269625873,0.2725799841784859,0.27256895020205985,0.2725579180120284,0.2725468876078854,0.27253585898912513,0.2725248251412845,0.2725138000929077,0.2725027768283969,0.27249175534724707,0.27248072863953443,0.2724697107247258,0.2724586945917639,0.2724476802401445,0.272436660664478,0.27242564987516404,0.27241464086568085,0.27240363363552483,0.2723926211838358,0.27238161751195605,0.2723706156178943,0.27235961550114784,0.2723486171612144,0.27233761360288744,0.272326618816203,0.27231562580482527,0.27230463456825255,0.27229363811579604,0.2722826504284578,0.27227166451442075,0.27226068037318407,0.2722496910185715,0.2722387104225612,0.27222773159784985,0.2722167545439375,0.27220577227915527,0.27219479876646757,0.2721838270230799,0.2721728570484931,0.27216188884220816,0.27215091542818304,0.2721399507581299,0.27212898785488265,0.2721180267179431,0.2721070603757651,0.2720961027710702,0.27208514693118946,0.27207419285562545,0.2720632335773229,0.2720522830300228,0.27204133424554827,0.2720303872234028,0.27201943500101683,0.27200849150316087,0.27199754976614515,0.2719866097894739,0.2719756715726516,0.27196472815870876,0.2719537934612172,0.27194286052208877,0.27193192934082877,0.27192099296494204,0.27191006529905276,0.27189913938954846,0.27188821523593515,0.2718772858901872,0.27186636524799107,0.27185544636020487,0.2718445292263355,0.27183360690282166,0.27182269327642217,0.27181178140246076,0.2718008712804452,0.2717899629098832,0.2717790493527869,0.27176814448476977,0.2717572413667305,0.2717463399981779,0.2717354334455768,0.27172453557563586,0.2717136394537082,0.2717027450793031,0.27169184552333386,0.27168095464361386,0.27167006550994544,0.27165917812183893,0.2716482855546506,0.27163740165730865,0.27162651950405997,0.2716156390944155,0.27160476042788645,0.27159387658537576,0.2715830014047197,0.2715721279657134,0.2715612562678687,0.27155037939652066,0.2715395111806427,0.2715286447044631,0.2715177799674945,0.271506910059499,0.2714960488005971,0.2714851892794453,0.2714743314955571,0.2714634685431165,0.27145261423340106,0.27144176165949063],"x":[20.0,20.005997600959617,20.011995201919234,20.017992802878847,20.023990403838464,20.02998800479808,20.0359856057577,20.041983206717312,20.04798080767693,20.053978408636546,20.059976009596163,20.065973610555776,20.071971211515393,20.07796881247501,20.083966413434627,20.08996401439424,20.095961615353858,20.101959216313475,20.10795681727309,20.11395441823271,20.119952019192322,20.12594962015194,20.131947221111556,20.137944822071173,20.143942423030786,20.149940023990403,20.15593762495002,20.161935225909637,20.16793282686925,20.173930427828868,20.179928028788485,20.185925629748102,20.191923230707715,20.197920831667332,20.20391843262695,20.209916033586566,20.215913634546183,20.221911235505797,20.227908836465414,20.23390643742503,20.239904038384648,20.24590163934426,20.251899240303878,20.257896841263495,20.263894442223112,20.269892043182725,20.275889644142342,20.28188724510196,20.287884846061576,20.29388244702119,20.299880047980807,20.305877648940424,20.31187524990004,20.317872850859658,20.32387045181927,20.329868052778888,20.335865653738505,20.341863254698122,20.347860855657736,20.353858456617353,20.35985605757697,20.365853658536587,20.3718512594962,20.377848860455817,20.383846461415434,20.38984406237505,20.395841663334664,20.40183926429428,20.4078368652539,20.413834466213515,20.419832067173132,20.425829668132746,20.431827269092363,20.43782487005198,20.443822471011597,20.44982007197121,20.455817672930827,20.461815273890444,20.46781287485006,20.473810475809675,20.47980807676929,20.48580567772891,20.491803278688526,20.49780087964814,20.503798480607756,20.509796081567373,20.51579368252699,20.521791283486607,20.52778888444622,20.533786485405837,20.539784086365454,20.54578168732507,20.551779288284685,20.557776889244302,20.56377449020392,20.569772091163536,20.57576969212315,20.581767293082766,20.587764894042383,20.593762495002,20.599760095961614,20.60575769692123,20.611755297880848,20.617752898840465,20.62375049980008,20.629748100759695,20.635745701719312,20.64174330267893,20.647740903638546,20.65373850459816,20.659736105557776,20.665733706517393,20.67173130747701,20.677728908436624,20.68372650939624,20.689724110355858,20.695721711315475,20.701719312275088,20.707716913234705,20.713714514194322,20.71971211515394,20.725709716113556,20.73170731707317,20.737704918032787,20.743702518992404,20.74970011995202,20.755697720911634,20.76169532187125,20.767692922830868,20.773690523790485,20.7796881247501,20.785685725709715,20.791683326669332,20.79768092762895,20.803678528588563,20.80967612954818,20.815673730507797,20.821671331467414,20.82766893242703,20.833666533386644,20.83966413434626,20.845661735305878,20.851659336265495,20.85765693722511,20.863654538184726,20.869652139144343,20.87564974010396,20.881647341063573,20.88764494202319,20.893642542982807,20.899640143942424,20.905637744902037,20.911635345861654,20.91763294682127,20.92363054778089,20.929628148740505,20.93562574970012,20.941623350659736,20.947620951619353,20.95361855257897,20.959616153538583,20.9656137544982,20.971611355457817,20.977608956417434,20.983606557377048,20.989604158336665,20.99560175929628,21.0015993602559,21.007596961215516,21.01359456217513,21.019592163134746,21.025589764094363,21.03158736505398,21.037584966013593,21.04358256697321,21.049580167932827,21.055577768892444,21.061575369852058,21.067572970811675,21.073570571771292,21.07956817273091,21.085565773690522,21.09156337465014,21.097560975609756,21.103558576569373,21.10955617752899,21.115553778488604,21.12155137944822,21.127548980407838,21.133546581367455,21.139544182327068,21.145541783286685,21.151539384246302,21.15753698520592,21.163534586165532,21.16953218712515,21.175529788084766,21.181527389044383,21.187524990003997,21.193522590963614,21.19952019192323,21.205517792882848,21.211515393842465,21.217512994802078,21.223510595761695,21.229508196721312,21.23550579768093,21.241503398640543,21.24750099960016,21.253498600559777,21.259496201519394,21.265493802479007,21.271491403438624,21.27748900439824,21.283486605357858,21.28948420631747,21.29548180727709,21.301479408236705,21.307477009196322,21.31347461015594,21.319472211115553,21.32546981207517,21.331467413034787,21.337465013994404,21.343462614954017,21.349460215913634,21.35545781687325,21.361455417832868,21.36745301879248,21.3734506197521,21.379448220711716,21.385445821671333,21.391443422630946,21.397441023590563,21.40343862455018,21.409436225509797,21.415433826469414,21.421431427429027,21.427429028388644,21.43342662934826,21.43942423030788,21.445421831267492,21.45141943222711,21.457417033186726,21.463414634146343,21.469412235105956,21.475409836065573,21.48140743702519,21.487405037984807,21.49340263894442,21.499400239904038,21.505397840863655,21.51139544182327,21.51739304278289,21.523390643742502,21.52938824470212,21.535385845661736,21.541383446621353,21.547381047580966,21.553378648540583,21.5593762495002,21.565373850459817,21.57137145141943,21.577369052379048,21.583366653338665,21.58936425429828,21.595361855257895,21.601359456217512,21.60735705717713,21.613354658136746,21.619352259096363,21.625349860055977,21.631347461015594,21.63734506197521,21.643342662934828,21.64934026389444,21.655337864854058,21.661335465813675,21.667333066773292,21.673330667732905,21.679328268692522,21.68532586965214,21.691323470611756,21.69732107157137,21.703318672530987,21.709316273490604,21.71531387445022,21.721311475409838,21.72730907636945,21.733306677329068,21.739304278288685,21.745301879248302,21.751299480207916,21.757297081167533,21.76329468212715,21.769292283086767,21.77528988404638,21.781287485005997,21.787285085965614,21.79328268692523,21.799280287884844,21.80527788884446,21.81127548980408,21.817273090763695,21.823270691723312,21.829268292682926,21.835265893642543,21.84126349460216,21.847261095561777,21.85325869652139,21.859256297481007,21.865253898440624,21.87125149940024,21.877249100359855,21.88324670131947,21.88924430227909,21.895241903238706,21.90123950419832,21.907237105157936,21.913234706117553,21.91923230707717,21.925229908036787,21.9312275089964,21.937225109956017,21.943222710915634,21.94922031187525,21.955217912834865,21.961215513794482,21.9672131147541,21.973210715713716,21.97920831667333,21.985205917632946,21.991203518592563,21.99720111955218,22.003198720511794,22.00919632147141,22.015193922431028,22.021191523390645,22.02718912435026,22.033186725309875,22.039184326269492,22.04518192722911,22.051179528188726,22.05717712914834,22.063174730107956,22.069172331067573,22.07516993202719,22.081167532986804,22.08716513394642,22.093162734906038,22.099160335865655,22.105157936825268,22.111155537784885,22.117153138744502,22.12315073970412,22.129148340663736,22.13514594162335,22.141143542582967,22.147141143542584,22.1531387445022,22.159136345461814,22.16513394642143,22.171131547381048,22.177129148340665,22.18312674930028,22.189124350259895,22.195121951219512,22.20111955217913,22.207117153138743,22.21311475409836,22.219112355057977,22.225109956017594,22.23110755697721,22.237105157936824,22.24310275889644,22.249100359856058,22.255097960815675,22.26109556177529,22.267093162734906,22.273090763694523,22.27908836465414,22.285085965613753,22.29108356657337,22.297081167532987,22.303078768492604,22.309076369452217,22.315073970411834,22.32107157137145,22.32706917233107,22.333066773290685,22.3390643742503,22.345061975209916,22.351059576169533,22.35705717712915,22.363054778088763,22.36905237904838,22.375049980007997,22.381047580967614,22.387045181927228,22.393042782886845,22.39904038384646,22.40503798480608,22.411035585765692,22.41703318672531,22.423030787684926,22.429028388644543,22.43502598960416,22.441023590563773,22.44702119152339,22.453018792483007,22.459016393442624,22.465013994402238,22.471011595361855,22.47700919632147,22.48300679728109,22.489004398240702,22.49500199920032,22.500999600159936,22.506997201119553,22.512994802079167,22.518992403038784,22.5249900039984,22.530987604958018,22.536985205917635,22.542982806877248,22.548980407836865,22.554978008796482,22.5609756097561,22.566973210715712,22.57297081167533,22.578968412634946,22.584966013594563,22.590963614554177,22.596961215513794,22.60295881647341,22.608956417433028,22.61495401839264,22.620951619352258,22.626949220311875,22.632946821271492,22.63894442223111,22.644942023190723,22.65093962415034,22.656937225109957,22.662934826069574,22.668932427029187,22.674930027988804,22.68092762894842,22.686925229908038,22.69292283086765,22.69892043182727,22.704918032786885,22.710915633746502,22.716913234706116,22.722910835665733,22.72890843662535,22.734906037584967,22.740903638544584,22.746901239504197,22.752898840463814,22.75889644142343,22.764894042383048,22.77089164334266,22.77688924430228,22.782886845261896,22.788884446221513,22.794882047181126,22.800879648140743,22.80687724910036,22.812874850059977,22.818872451019594,22.824870051979207,22.830867652938824,22.83686525389844,22.84286285485806,22.848860455817672,22.85485805677729,22.860855657736906,22.866853258696523,22.872850859656136,22.878848460615753,22.88484606157537,22.890843662534987,22.8968412634946,22.902838864454218,22.908836465413835,22.91483406637345,22.92083166733307,22.926829268292682,22.9328268692523,22.938824470211916,22.944822071171533,22.950819672131146,22.956817273090763,22.96281487405038,22.968812475009997,22.97481007596961,22.980807676929228,22.986805277888845,22.99280287884846,22.998800479808075,23.004798080767692,23.01079568172731,23.016793282686926,23.022790883646543,23.028788484606157,23.034786085565774,23.04078368652539,23.046781287485008,23.05277888844462,23.058776489404238,23.064774090363855,23.070771691323472,23.076769292283085,23.082766893242702,23.08876449420232,23.094762095161936,23.10075969612155,23.106757297081167,23.112754898040784,23.1187524990004,23.124750099960018,23.13074770091963,23.136745301879248,23.142742902838865,23.148740503798482,23.154738104758096,23.160735705717713,23.16673330667733,23.172730907636947,23.17872850859656,23.184726109556177,23.190723710515794,23.19672131147541,23.202718912435024,23.20871651339464,23.21471411435426,23.220711715313875,23.226709316273492,23.232706917233106,23.238704518192723,23.24470211915234,23.250699720111957,23.25669732107157,23.262694922031187,23.268692522990804,23.27469012395042,23.280687724910035,23.28668532586965,23.29268292682927,23.298680527788886,23.3046781287485,23.310675729708116,23.316673330667733,23.32267093162735,23.328668532586967,23.33466613354658,23.340663734506197,23.346661335465814,23.35265893642543,23.358656537385045,23.36465413834466,23.37065173930428,23.376649340263896,23.38264694122351,23.388644542183126,23.394642143142743,23.40063974410236,23.406637345061974,23.41263494602159,23.418632546981208,23.424630147940825,23.43062774890044,23.436625349860055,23.442622950819672,23.44862055177929,23.454618152738906,23.46061575369852,23.466613354658136,23.472610955617753,23.47860855657737,23.484606157536984,23.4906037584966,23.496601359456218,23.502598960415835,23.508596561375448,23.514594162335065,23.520591763294682,23.5265893642543,23.532586965213916,23.53858456617353,23.544582167133147,23.550579768092764,23.55657736905238,23.562574970011994,23.56857257097161,23.574570171931228,23.580567772890845,23.58656537385046,23.592562974810075,23.598560575769692,23.60455817672931,23.610555777688923,23.61655337864854,23.622550979608157,23.628548580567774,23.63454618152739,23.640543782487004,23.64654138344662,23.652538984406238,23.658536585365855,23.66453418632547,23.670531787285086,23.676529388244703,23.68252698920432,23.688524590163933,23.69452219112355,23.700519792083167,23.706517393042784,23.712514994002397,23.718512594962014,23.72451019592163,23.73050779688125,23.736505397840865,23.74250299880048,23.748500599760096,23.754498200719713,23.76049580167933,23.766493402638943,23.77249100359856,23.778488604558177,23.784486205517794,23.790483806477408,23.796481407437025,23.80247900839664,23.80847660935626,23.814474210315872,23.82047181127549,23.826469412235106,23.832467013194723,23.83846461415434,23.844462215113953,23.85045981607357,23.856457417033187,23.862455017992804,23.868452618952418,23.874450219912035,23.88044782087165,23.88644542183127,23.892443022790882,23.8984406237505,23.904438224710116,23.910435825669733,23.916433426629347,23.922431027588964,23.92842862854858,23.934426229508198,23.940423830467815,23.946421431427428,23.952419032387045,23.958416633346662,23.96441423430628,23.970411835265892,23.97640943622551,23.982407037185126,23.988404638144743,23.994402239104357,24.000399840063974,24.00639744102359,24.012395041983208,24.01839264294282,24.024390243902438,24.030387844862055,24.036385445821672,24.04238304678129,24.048380647740903,24.05437824870052,24.060375849660137,24.066373450619754,24.072371051579367,24.078368652538984,24.0843662534986,24.090363854458218,24.09636145541783,24.10235905637745,24.108356657337065,24.114354258296682,24.120351859256296,24.126349460215913,24.13234706117553,24.138344662135147,24.144342263094764,24.150339864054377,24.156337465013994,24.16233506597361,24.168332666933228,24.17433026789284,24.18032786885246,24.186325469812076,24.192323070771693,24.198320671731306,24.204318272690923,24.21031587365054,24.216313474610157,24.22231107556977,24.228308676529387,24.234306277489004,24.24030387844862,24.24630147940824,24.25229908036785,24.25829668132747,24.264294282287086,24.270291883246703,24.276289484206316,24.282287085165933,24.28828468612555,24.294282287085167,24.30027988804478,24.306277489004398,24.312275089964015,24.31827269092363,24.324270291883245,24.330267892842862,24.33626549380248,24.342263094762096,24.348260695721713,24.354258296681326,24.360255897640943,24.36625349860056,24.372251099560177,24.37824870051979,24.384246301479408,24.390243902439025,24.39624150339864,24.402239104358255,24.408236705317872,24.41423430627749,24.420231907237106,24.42622950819672,24.432227109156337,24.438224710115954,24.44422231107557,24.450219912035188,24.4562175129948,24.462215113954418,24.468212714914035,24.474210315873652,24.480207916833265,24.486205517792882,24.4922031187525,24.498200719712116,24.50419832067173,24.510195921631347,24.516193522590964,24.52219112355058,24.528188724510194,24.53418632546981,24.540183926429428,24.546181527389045,24.552179128348662,24.558176729308276,24.564174330267893,24.57017193122751,24.576169532187127,24.58216713314674,24.588164734106357,24.594162335065974,24.60015993602559,24.606157536985204,24.61215513794482,24.61815273890444,24.624150339864055,24.63014794082367,24.636145541783286,24.642143142742903,24.64814074370252,24.654138344662137,24.66013594562175,24.666133546581367,24.672131147540984,24.6781287485006,24.684126349460215,24.69012395041983,24.69612155137945,24.702119152339066,24.70811675329868,24.714114354258296,24.720111955217913,24.72610955617753,24.732107157137147,24.73810475809676,24.744102359056377,24.750099960015994,24.75609756097561,24.762095161935225,24.76809276289484,24.77409036385446,24.780087964814076,24.78608556577369,24.792083166733306,24.798080767692923,24.80407836865254,24.810075969612154,24.81607357057177,24.822071171531388,24.828068772491005,24.83406637345062,24.840063974410235,24.846061575369852,24.85205917632947,24.858056777289086,24.8640543782487,24.870051979208316,24.876049580167933,24.88204718112755,24.888044782087164,24.89404238304678,24.900039984006398,24.906037584966015,24.912035185925628,24.918032786885245,24.924030387844862,24.93002798880448,24.936025589764096,24.94202319072371,24.948020791683327,24.954018392642944,24.96001599360256,24.966013594562174,24.97201119552179,24.978008796481408,24.984006397441025,24.99000399840064,24.996001599360255,25.001999200319872,25.00799680127949,25.013994402239103,25.01999200319872,25.025989604158337,25.031987205117954,25.03798480607757,25.043982407037184,25.0499800079968,25.055977608956418,25.061975209916035,25.06797281087565,25.073970411835266,25.079968012794883,25.0859656137545,25.091963214714113,25.09796081567373,25.103958416633347,25.109956017592964,25.115953618552577,25.121951219512194,25.12794882047181,25.13394642143143,25.139944022391045,25.14594162335066,25.151939224310276,25.157936825269893,25.16393442622951,25.169932027189123,25.17592962814874,25.181927229108357,25.187924830067974,25.193922431027588,25.199920031987205,25.20591763294682,25.21191523390644,25.217912834866052,25.22391043582567,25.229908036785286,25.235905637744903,25.24190323870452,25.247900839664133,25.25389844062375,25.259896041583367,25.265893642542984,25.271891243502598,25.277888844462215,25.28388644542183,25.28988404638145,25.295881647341062,25.30187924830068,25.307876849260296,25.313874450219913,25.319872051179527,25.325869652139144,25.33186725309876,25.337864854058378,25.343862455017995,25.349860055977608,25.355857656937225,25.361855257896842,25.36785285885646,25.373850459816072,25.37984806077569,25.385845661735306,25.391843262694923,25.397840863654537,25.403838464614154,25.40983606557377,25.415833666533388,25.421831267493,25.427828868452618,25.433826469412235,25.439824070371852,25.44582167133147,25.451819272291083,25.4578168732507,25.463814474210317,25.469812075169934,25.475809676129547,25.481807277089164,25.48780487804878,25.493802479008398,25.49980007996801,25.50579768092763,25.511795281887245,25.517792882846862,25.523790483806476,25.529788084766093,25.53578568572571,25.541783286685327,25.547780887644944,25.553778488604557,25.559776089564174,25.56577369052379,25.571771291483408,25.57776889244302,25.58376649340264,25.589764094362256,25.595761695321873,25.601759296281486,25.607756897241103,25.61375449820072,25.619752099160337,25.62574970011995,25.631747301079567,25.637744902039184,25.6437425029988,25.64974010395842,25.65573770491803,25.66173530587765,25.667732906837266,25.673730507796883,25.679728108756496,25.685725709716113,25.69172331067573,25.697720911635347,25.70371851259496,25.709716113554578,25.715713714514195,25.72171131547381,25.727708916433425,25.733706517393042,25.73970411835266,25.745701719312276,25.751699320271893,25.757696921231506,25.763694522191123,25.76969212315074,25.775689724110357,25.78168732506997,25.787684926029588,25.793682526989205,25.79968012794882,25.805677728908435,25.811675329868052,25.81767293082767,25.823670531787286,25.8296681327469,25.835665733706517,25.841663334666134,25.84766093562575,25.853658536585368,25.85965613754498,25.865653738504598,25.871651339464215,25.877648940423832,25.883646541383445,25.889644142343062,25.89564174330268,25.901639344262296,25.90763694522191,25.913634546181527,25.919632147141144,25.92562974810076,25.931627349060374,25.93762495001999,25.943622550979608,25.949620151939225,25.955617752898842,25.961615353858456,25.967612954818073,25.97361055577769,25.979608156737307,25.98560575769692,25.991603358656537,25.997600959616154,26.00359856057577,26.009596161535384,26.015593762495,26.02159136345462,26.027588964414235,26.03358656537385,26.039584166333466,26.045581767293083,26.0515793682527,26.057576969212317,26.06357457017193,26.069572171131547,26.075569772091164,26.08156737305078,26.087564974010395,26.09356257497001,26.09956017592963,26.105557776889246,26.11155537784886,26.117552978808476,26.123550579768093,26.12954818072771,26.135545781687323,26.14154338264694,26.147540983606557,26.153538584566174,26.15953618552579,26.165533786485405,26.17153138744502,26.17752898840464,26.183526589364256,26.18952419032387,26.195521791283486,26.201519392243103,26.20751699320272,26.213514594162334,26.21951219512195,26.225509796081568,26.231507397041185,26.237504998000798,26.243502598960415,26.249500199920032,26.25549780087965,26.261495401839266,26.26749300279888,26.273490603758496,26.279488204718113,26.28548580567773,26.291483406637344,26.29748100759696,26.303478608556578,26.309476209516195,26.315473810475808,26.321471411435425,26.327469012395042,26.33346661335466,26.339464214314273,26.34546181527389,26.351459416233507,26.357457017193124,26.36345461815274,26.369452219112354,26.37544982007197,26.381447421031588,26.387445021991205,26.39344262295082,26.399440223910435,26.405437824870052,26.41143542582967,26.417433026789283,26.4234306277489,26.429428228708517,26.435425829668134,26.441423430627747,26.447421031587364,26.45341863254698,26.459416233506598,26.465413834466215,26.47141143542583,26.477409036385446,26.483406637345063,26.48940423830468,26.495401839264293,26.50139944022391,26.507397041183527,26.513394642143144,26.519392243102757,26.525389844062374,26.53138744502199,26.53738504598161,26.54338264694122,26.54938024790084,26.555377848860456,26.561375449820073,26.56737305077969,26.573370651739303,26.57936825269892,26.585365853658537,26.591363454618154,26.597361055577768,26.603358656537385,26.609356257497,26.61535385845662,26.621351459416232,26.62734906037585,26.633346661335466,26.639344262295083,26.6453418632547,26.651339464214313,26.65733706517393,26.663334666133547,26.669332267093164,26.675329868052778,26.681327469012395,26.68732506997201,26.69332267093163,26.699320271891242,26.70531787285086,26.711315473810476,26.717313074770093,26.723310675729707,26.729308276689324,26.73530587764894,26.741303478608557,26.747301079568174,26.753298680527788,26.759296281487405,26.765293882447022,26.77129148340664,26.777289084366252,26.78328668532587,26.789284286285486,26.795281887245103,26.801279488204717,26.807277089164334,26.81327469012395,26.819272291083568,26.82526989204318,26.831267493002798,26.837265093962415,26.843262694922032,26.84926029588165,26.855257896841263,26.86125549780088,26.867253098760496,26.873250699720113,26.879248300679727,26.885245901639344,26.89124350259896,26.897241103558578,26.90323870451819,26.90923630547781,26.915233906437425,26.921231507397042,26.927229108356656,26.933226709316273,26.93922431027589,26.945221911235507,26.951219512195124,26.957217113154737,26.963214714114354,26.96921231507397,26.975209916033588,26.9812075169932,26.98720511795282,26.993202718912436,26.999200319872052,27.005197920831666,27.011195521791283,27.0171931227509,27.023190723710517,27.02918832467013,27.035185925629747,27.041183526589364,27.04718112754898,27.0531787285086,27.05917632946821,27.06517393042783,27.071171531387446,27.077169132347063,27.083166733306676,27.089164334266293,27.09516193522591,27.101159536185527,27.10715713714514,27.113154738104758,27.119152339064375,27.12514994002399,27.131147540983605,27.137145141943222,27.14314274290284,27.149140343862456,27.155137944822073,27.161135545781686,27.167133146741303,27.17313074770092,27.179128348660537,27.18512594962015,27.191123550579768,27.197121151539385,27.203118752499,27.209116353458615,27.215113954418232,27.22111155537785,27.227109156337466,27.23310675729708,27.239104358256697,27.245101959216314,27.25109956017593,27.257097161135547,27.26309476209516,27.269092363054778,27.275089964014395,27.281087564974012,27.287085165933625,27.293082766893242,27.29908036785286,27.305077968812476,27.31107556977209,27.317073170731707,27.323070771691324,27.32906837265094,27.335065973610554,27.34106357457017,27.347061175529788,27.353058776489405,27.359056377449022,27.365053978408636,27.371051579368253,27.37704918032787,27.383046781287486,27.3890443822471,27.395041983206717,27.401039584166334,27.40703718512595,27.413034786085564,27.41903238704518,27.4250299880048,27.431027588964415,27.43702518992403,27.443022790883646,27.449020391843263,27.45501799280288,27.461015593762497,27.46701319472211,27.473010795681727,27.479008396641344,27.48500599760096,27.491003598560575,27.49700119952019,27.50299880047981,27.508996401439425,27.51499400239904,27.520991603358656,27.526989204318273,27.53298680527789,27.538984406237503,27.54498200719712,27.550979608156737,27.556977209116354,27.56297481007597,27.568972411035585,27.5749700119952,27.58096761295482,27.586965213914436,27.59296281487405,27.598960415833666,27.604958016793283,27.6109556177529,27.616953218712514,27.62295081967213,27.628948420631747,27.634946021591364,27.640943622550978,27.646941223510595,27.652938824470212,27.65893642542983,27.664934026389446,27.67093162734906,27.676929228308676,27.682926829268293,27.68892443022791,27.694922031187524,27.70091963214714,27.706917233106758,27.712914834066375,27.718912435025988,27.724910035985605,27.730907636945222,27.73690523790484,27.742902838864453,27.74890043982407,27.754898040783686,27.760895641743303,27.76689324270292,27.772890843662534,27.77888844462215,27.784886045581768,27.790883646541385,27.796881247501,27.802878848460615,27.808876449420232,27.81487405037985,27.820871651339463,27.82686925229908,27.832866853258697,27.838864454218314,27.844862055177927,27.850859656137544,27.85685725709716,27.862854858056778,27.868852459016395,27.87485005997601,27.880847660935625,27.886845261895242,27.89284286285486,27.898840463814473,27.90483806477409,27.910835665733707,27.916833266693324,27.922830867652937,27.928828468612554,27.93482606957217,27.94082367053179,27.9468212714914,27.95281887245102,27.958816473410636,27.964814074370253,27.97081167532987,27.976809276289483,27.9828068772491,27.988804478208717,27.994802079168334,28.000799680127948,28.006797281087564,28.01279488204718,28.0187924830068,28.024790083966412,28.03078768492603,28.036785285885646,28.042782886845263,28.048780487804876,28.054778088764493,28.06077568972411,28.066773290683727,28.072770891643344,28.078768492602958,28.084766093562575,28.09076369452219,28.09676129548181,28.102758896441422,28.10875649740104,28.114754098360656,28.120751699320273,28.126749300279887,28.132746901239504,28.13874450219912,28.144742103158737,28.15073970411835,28.156737305077968,28.162734906037585,28.168732506997202,28.17473010795682,28.180727708916432,28.18672530987605,28.192722910835666,28.198720511795283,28.204718112754897,28.210715713714514,28.21671331467413,28.222710915633748,28.22870851659336,28.234706117552978,28.240703718512595,28.246701319472212,28.252698920431826,28.258696521391443,28.26469412235106,28.270691723310676,28.276689324270293,28.282686925229907,28.288684526189524,28.29468212714914,28.300679728108758,28.30667732906837,28.31267493002799,28.318672530987605,28.324670131947222,28.330667732906836,28.336665333866453,28.34266293482607,28.348660535785687,28.3546581367453,28.360655737704917,28.366653338664534,28.37265093962415,28.378648540583768,28.38464614154338,28.390643742503,28.396641343462615,28.402638944422232,28.408636545381846,28.414634146341463,28.42063174730108,28.426629348260697,28.43262694922031,28.438624550179927,28.444622151139544,28.45061975209916,28.45661735305878,28.46261495401839,28.46861255497801,28.474610155937626,28.480607756897243,28.486605357856856,28.492602958816473,28.49860055977609,28.504598160735707,28.51059576169532,28.516593362654937,28.522590963614554,28.52858856457417,28.534586165533785,28.540583766493402,28.54658136745302,28.552578968412636,28.558576569372253,28.564574170331866,28.570571771291483,28.5765693722511,28.582566973210717,28.58856457417033,28.594562175129948,28.600559776089565,28.60655737704918,28.612554978008795,28.618552578968412,28.62455017992803,28.630547780887646,28.63654538184726,28.642542982806876,28.648540583766493,28.65453818472611,28.660535785685727,28.66653338664534,28.672530987604958,28.678528588564575,28.684526189524192,28.690523790483805,28.696521391443422,28.70251899240304,28.708516593362656,28.71451419432227,28.720511795281887,28.726509396241504,28.73250699720112,28.738504598160734,28.74450219912035,28.750499800079968,28.756497401039585,28.762495001999202,28.768492602958815,28.774490203918432,28.78048780487805,28.786485405837666,28.79248300679728,28.798480607756897,28.804478208716514,28.81047580967613,28.816473410635744,28.82247101159536,28.82846861255498,28.834466213514595,28.84046381447421,28.846461415433826,28.852459016393443,28.85845661735306,28.864454218312677,28.87045181927229,28.876449420231907,28.882447021191524,28.88844462215114,28.894442223110754,28.90043982407037,28.90643742502999,28.912435025989605,28.91843262694922,28.924430227908836,28.930427828868453,28.93642542982807,28.942423030787683,28.9484206317473,28.954418232706917,28.960415833666534,28.96641343462615,28.972411035585765,28.97840863654538,28.984406237505,28.990403838464616,28.99640143942423,29.002399040383846,29.008396641343463,29.01439424230308,29.020391843262693,29.02638944422231,29.032387045181927,29.038384646141544,29.044382247101158,29.050379848060775,29.056377449020392,29.06237504998001,29.068372650939626,29.07437025189924,29.080367852858856,29.086365453818473,29.09236305477809,29.098360655737704,29.10435825669732,29.110355857656938,29.116353458616555,29.122351059576168,29.128348660535785,29.134346261495402,29.14034386245502,29.146341463414632,29.15233906437425,29.158336665333866,29.164334266293483,29.1703318672531,29.176329468212714,29.18232706917233,29.188324670131948,29.194322271091565,29.20031987205118,29.206317473010795,29.212315073970412,29.21831267493003,29.224310275889643,29.23030787684926,29.236305477808877,29.242303078768494,29.248300679728107,29.254298280687724,29.26029588164734,29.266293482606958,29.272291083566575,29.27828868452619,29.284286285485805,29.290283886445422,29.29628148740504,29.302279088364653,29.30827668932427,29.314274290283887,29.320271891243504,29.326269492203117,29.332267093162734,29.33826469412235,29.34426229508197,29.35025989604158,29.3562574970012,29.362255097960816,29.368252698920433,29.37425029988005,29.380247900839663,29.38624550179928,29.392243102758897,29.398240703718514,29.404238304678127,29.410235905637744,29.41623350659736,29.42223110755698,29.428228708516592,29.43422630947621,29.440223910435826,29.446221511395443,29.452219112355056,29.458216713314673,29.46421431427429,29.470211915233907,29.476209516193524,29.482207117153138,29.488204718112755,29.49420231907237,29.50019992003199,29.506197520991602,29.51219512195122,29.518192722910836,29.524190323870453,29.530187924830066,29.536185525789683,29.5421831267493,29.548180727708917,29.55417832866853,29.560175929628148,29.566173530587765,29.572171131547382,29.578168732507,29.584166333466612,29.59016393442623,29.596161535385846,29.602159136345463,29.608156737305077,29.614154338264694,29.62015193922431,29.626149540183928,29.63214714114354,29.638144742103158,29.644142343062775,29.650139944022392,29.656137544982005,29.662135145941622,29.66813274690124,29.674130347860856,29.680127948820473,29.686125549780087,29.692123150739704,29.69812075169932,29.704118352658938,29.71011595361855,29.71611355457817,29.722111155537785,29.728108756497402,29.734106357457016,29.740103958416633,29.74610155937625,29.752099160335867,29.75809676129548,29.764094362255097,29.770091963214714,29.77608956417433,29.782087165133948,29.78808476609356,29.79408236705318,29.800079968012795,29.806077568972412,29.812075169932026,29.818072770891643,29.82407037185126,29.830067972810877,29.83606557377049,29.842063174730107,29.848060775689724,29.85405837664934,29.860055977608955,29.86605357856857,29.87205117952819,29.878048780487806,29.884046381447423,29.890043982407036,29.896041583366653,29.90203918432627,29.908036785285887,29.9140343862455,29.920031987205117,29.926029588164734,29.93202718912435,29.938024790083965,29.944022391043582,29.9500199920032,29.956017592962816,29.96201519392243,29.968012794882046,29.974010395841663,29.98000799680128,29.986005597760897,29.99200319872051,29.998000799680128,30.003998400639745,30.00999600159936,30.015993602558975,30.021991203518592,30.02798880447821,30.033986405437826,30.03998400639744,30.045981607357056,30.051979208316673,30.05797680927629,30.063974410235904,30.06997201119552,30.075969612155138,30.081967213114755,30.087964814074372,30.093962415033985,30.099960015993602,30.10595761695322,30.111955217912836,30.11795281887245,30.123950419832067,30.129948020791684,30.1359456217513,30.141943222710914,30.14794082367053,30.153938424630148,30.159936025589765,30.16593362654938,30.171931227508995,30.177928828468612,30.18392642942823,30.189924030387846,30.19592163134746,30.201919232307077,30.207916833266694,30.21391443422631,30.219912035185924,30.22590963614554,30.23190723710516,30.237904838064775,30.24390243902439,30.249900039984006,30.255897640943623,30.26189524190324,30.267892842862853,30.27389044382247,30.279888044782087,30.285885645741704,30.29188324670132,30.297880847660934,30.30387844862055,30.30987604958017,30.315873650539785,30.3218712514994,30.327868852459016,30.333866453418633,30.33986405437825,30.345861655337863,30.35185925629748,30.357856857257097,30.363854458216714,30.36985205917633,30.375849660135945,30.38184726109556,30.38784486205518,30.393842463014796,30.39984006397441,30.405837664934026,30.411835265893643,30.41783286685326,30.423830467812873,30.42982806877249,30.435825669732107,30.441823270691724,30.447820871651338,30.453818472610955,30.459816073570572,30.46581367453019,30.471811275489806,30.47780887644942,30.483806477409036,30.489804078368653,30.49580167932827,30.501799280287884,30.5077968812475,30.513794482207118,30.519792083166735,30.525789684126348,30.531787285085965,30.537784886045582,30.5437824870052,30.549780087964812,30.55577768892443,30.561775289884046,30.567772890843663,30.57377049180328,30.579768092762894,30.58576569372251,30.591763294682128,30.597760895641745,30.60375849660136,30.609756097560975,30.615753698520592,30.62175129948021,30.627748900439823,30.63374650139944,30.639744102359057,30.645741703318674,30.651739304278287,30.657736905237904,30.66373450619752,30.669732107157138,30.675729708116755,30.68172730907637,30.687724910035985,30.693722510995602,30.69972011195522,30.705717712914833,30.71171531387445,30.717712914834067,30.723710515793684,30.729708116753297,30.735705717712914,30.74170331867253,30.74770091963215,30.75369852059176,30.75969612155138,30.765693722510996,30.771691323470613,30.77768892443023,30.783686525389843,30.78968412634946,30.795681727309077,30.801679328268694,30.807676929228307,30.813674530187924,30.81967213114754,30.82566973210716,30.831667333066772,30.83766493402639,30.843662534986006,30.849660135945623,30.855657736905236,30.861655337864853,30.86765293882447,30.873650539784087,30.879648140743704,30.885645741703318,30.891643342662935,30.89764094362255,30.90363854458217,30.909636145541782,30.9156337465014,30.921631347461016,30.927628948420633,30.933626549380246,30.939624150339863,30.94562175129948,30.951619352259097,30.95761695321871,30.963614554178328,30.969612155137945,30.975609756097562,30.98160735705718,30.987604958016792,30.99360255897641,30.999600159936026,31.005597760895643,31.011595361855257,31.017592962814874,31.02359056377449,31.029588164734108,31.03558576569372,31.041583366653338,31.047580967612955,31.053578568572572,31.059576169532185,31.065573770491802,31.07157137145142,31.077568972411036,31.083566573370653,31.089564174330267,31.095561775289884,31.1015593762495,31.107556977209118,31.11355457816873,31.11955217912835,31.125549780087965,31.131547381047582,31.137544982007196,31.143542582966813,31.14954018392643,31.155537784886047,31.16153538584566,31.167532986805277,31.173530587764894,31.17952818872451,31.185525789684128,31.19152339064374,31.19752099160336,31.203518592562975,31.209516193522592,31.215513794482206,31.221511395441823,31.22750899640144,31.233506597361057,31.23950419832067,31.245501799280287,31.251499400239904,31.25749700119952,31.263494602159135,31.26949220311875,31.27548980407837,31.281487405037986,31.287485005997603,31.293482606957216,31.299480207916833,31.30547780887645,31.311475409836067,31.31747301079568,31.323470611755297,31.329468212714914,31.33546581367453,31.341463414634145,31.347461015593762,31.35345861655338,31.359456217512996,31.36545381847261,31.371451419432226,31.377449020391843,31.38344662135146,31.389444222311077,31.39544182327069,31.401439424230308,31.407437025189925,31.41343462614954,31.419432227109155,31.425429828068772,31.43142742902839,31.437425029988006,31.44342263094762,31.449420231907236,31.455417832866853,31.46141543382647,31.467413034786084,31.4734106357457,31.479408236705318,31.485405837664935,31.491403438624552,31.497401039584165,31.503398640543782,31.5093962415034,31.515393842463016,31.52139144342263,31.527389044382247,31.533386645341864,31.53938424630148,31.545381847261094,31.55137944822071,31.557377049180328,31.563374650139945,31.56937225109956,31.575369852059175,31.581367453018792,31.58736505397841,31.593362654938026,31.59936025589764,31.605357856857257,31.611355457816874,31.61735305877649,31.623350659736104,31.62934826069572,31.63534586165534,31.641343462614955,31.64734106357457,31.653338664534186,31.659336265493803,31.66533386645342,31.671331467413033,31.67732906837265,31.683326669332267,31.689324270291884,31.6953218712515,31.701319472211114,31.70731707317073,31.71331467413035,31.719312275089965,31.72530987604958,31.731307477009196,31.737305077968813,31.74330267892843,31.749300279888043,31.75529788084766,31.761295481807277,31.767293082766894,31.773290683726508,31.779288284686125,31.78528588564574,31.79128348660536,31.797281087564976,31.80327868852459,31.809276289484206,31.815273890443823,31.82127149140344,31.827269092363053,31.83326669332267,31.839264294282287,31.845261895241904,31.851259496201518,31.857257097161135,31.863254698120752,31.86925229908037,31.875249900039982,31.8812475009996,31.887245101959216,31.893242702918833,31.89924030387845,31.905237904838064,31.91123550579768,31.917233106757298,31.923230707716915,31.929228308676528,31.935225909636145,31.941223510595762,31.94722111155538,31.953218712514992,31.95921631347461,31.965213914434226,31.971211515393843,31.977209116353457,31.983206717313074,31.98920431827269,31.995201919232308,32.001199520191925,32.00719712115154,32.01319472211116,32.01919232307077,32.025189924030386,32.03118752499,32.03718512594962,32.04318272690924,32.049180327868854,32.05517792882847,32.06117552978809,32.0671731307477,32.073170731707314,32.07916833266693,32.08516593362655,32.091163534586165,32.09716113554578,32.1031587365054,32.109156337465016,32.11515393842463,32.12115153938424,32.12714914034386,32.13314674130348,32.139144342263094,32.14514194322271,32.15113954418233,32.157137145141945,32.16313474610156,32.16913234706117,32.17512994802079,32.181127548980406,32.18712514994002,32.19312275089964,32.19912035185926,32.205117952818874,32.21111555377849,32.21711315473811,32.22311075569772,32.229108356657335,32.23510595761695,32.24110355857657,32.247101159536186,32.2530987604958,32.25909636145542,32.26509396241504,32.27109156337465,32.277089164334264,32.28308676529388,32.2890843662535,32.295081967213115,32.30107956817273,32.30707716913235,32.313074770091966,32.31907237105158,32.32506997201119,32.33106757297081,32.33706517393043,32.34306277489004,32.34906037584966,32.35505797680928,32.361055577768894,32.36705317872851,32.37305077968812,32.37904838064774,32.385045981607355,32.39104358256697,32.39704118352659,32.403038784486206,32.40903638544582,32.41503398640544,32.42103158736506,32.42702918832467,32.433026789284284,32.4390243902439,32.44502199120352,32.451019592163135,32.45701719312275,32.46301479408237,32.469012395041986,32.475009996001596,32.48100759696121,32.48700519792083,32.49300279888045,32.499000399840064,32.50499800079968,32.5109956017593,32.516993202718915,32.52299080367853,32.52898840463814,32.53498600559776,32.540983606557376,32.54698120751699,32.55297880847661,32.55897640943623,32.564974010395844,32.57097161135546,32.57696921231507,32.58296681327469,32.588964414234304,32.59496201519392,32.60095961615354,32.606957217113155,32.61295481807277,32.61895241903239,32.624950019992006,32.630947620951616,32.63694522191123,32.64294282287085,32.64894042383047,32.654938024790084,32.6609356257497,32.66693322670932,32.672930827668935,32.678928428628545,32.68492602958816,32.69092363054778,32.696921231507396,32.70291883246701,32.70891643342663,32.71491403438625,32.720911635345864,32.72690923630548,32.73290683726509,32.73890443822471,32.744902039184325,32.75089964014394,32.75689724110356,32.762894842063176,32.76889244302279,32.77489004398241,32.78088764494202,32.78688524590164,32.792882846861254,32.79888044782087,32.80487804878049,32.810875649740105,32.81687325069972,32.82287085165934,32.828868452618956,32.834866053578565,32.84086365453818,32.8468612554978,32.852858856457416,32.85885645741703,32.86485405837665,32.87085165933627,32.876849260295884,32.882846861255494,32.88884446221511,32.89484206317473,32.900839664134345,32.90683726509396,32.91283486605358,32.918832467013196,32.92483006797281,32.93082766893243,32.93682526989204,32.94282287085166,32.948820471811274,32.95481807277089,32.96081567373051,32.966813274690125,32.97281087564974,32.97880847660936,32.98480607756897,32.990803678528586,32.9968012794882,33.00279888044782,33.00879648140744,33.014794082367054,33.02079168332667,33.02678928428629,33.032786885245905,33.038784486205515,33.04478208716513,33.05077968812475,33.056777289084366,33.06277489004398,33.0687724910036,33.07477009196322,33.080767692922834,33.08676529388244,33.09276289484206,33.09876049580168,33.104758096761294,33.11075569772091,33.11675329868053,33.122750899640145,33.12874850059976,33.13474610155938,33.14074370251899,33.146741303478606,33.15273890443822,33.15873650539784,33.16473410635746,33.170731707317074,33.17672930827669,33.18272690923631,33.188724510195925,33.194722111155535,33.20071971211515,33.20671731307477,33.212714914034386,33.218712514994,33.22471011595362,33.23070771691324,33.236705317872854,33.242702918832464,33.24870051979208,33.2546981207517,33.260695721711315,33.26669332267093,33.27269092363055,33.278688524590166,33.28468612554978,33.2906837265094,33.29668132746901,33.30267892842863,33.308676529388244,33.31467413034786,33.32067173130748,33.326669332267095,33.33266693322671,33.33866453418633,33.34466213514594,33.350659736105555,33.35665733706517,33.36265493802479,33.368652538984406,33.37465013994402,33.38064774090364,33.38664534186326,33.392642942822874,33.398640543782484,33.4046381447421,33.41063574570172,33.416633346661335,33.42263094762095,33.42862854858057,33.434626149540186,33.4406237504998,33.44662135145941,33.45261895241903,33.45861655337865,33.464614154338264,33.47061175529788,33.4766093562575,33.482606957217115,33.48860455817673,33.49460215913635,33.50059976009596,33.506597361055576,33.51259496201519,33.51859256297481,33.52459016393443,33.530587764894044,33.53658536585366,33.54258296681328,33.54858056777289,33.554578168732505,33.56057576969212,33.56657337065174,33.572570971611356,33.57856857257097,33.58456617353059,33.59056377449021,33.596561375449824,33.60255897640943,33.60855657736905,33.61455417832867,33.620551779288284,33.6265493802479,33.63254698120752,33.638544582167135,33.64454218312675,33.65053978408636,33.65653738504598,33.662534986005596,33.66853258696521,33.67453018792483,33.68052778888445,33.686525389844064,33.69252299080368,33.6985205917633,33.70451819272291,33.710515793682525,33.71651339464214,33.72251099560176,33.728508596561376,33.73450619752099,33.74050379848061,33.74650139944023,33.75249900039984,33.758496601359454,33.76449420231907,33.77049180327869,33.776489404238305,33.78248700519792,33.78848460615754,33.794482207117156,33.80047980807677,33.80647740903638,33.812475009996,33.81847261095562,33.824470211915234,33.83046781287485,33.83646541383447,33.842463014794085,33.8484606157537,33.85445821671331,33.86045581767293,33.866453418632545,33.87245101959216,33.87844862055178,33.884446221511396,33.89044382247101,33.89644142343063,33.90243902439025,33.90843662534986,33.914434226309474,33.92043182726909,33.92642942822871,33.932427029188325,33.93842463014794,33.94442223110756,33.950419832067176,33.956417433026786,33.9624150339864,33.96841263494602,33.97441023590564,33.980407836865254,33.98640543782487,33.99240303878449,33.998400639744105,34.00439824070372,34.01039584166333,34.01639344262295,34.022391043582566,34.02838864454218,34.0343862455018,34.04038384646142,34.046381447421034,34.05237904838065,34.05837664934026,34.06437425029988,34.070371851259495,34.07636945221911,34.08236705317873,34.088364654138346,34.09436225509796,34.10035985605758,34.1063574570172,34.11235505797681,34.11835265893642,34.12435025989604,34.13034786085566,34.136345461815274,34.14234306277489,34.14834066373451,34.154338264694125,34.160335865653735,34.16633346661335,34.17233106757297,34.178328668532586,34.1843262694922,34.19032387045182,34.19632147141144,34.202319072371054,34.20831667333067,34.21431427429028,34.2203118752499,34.226309476209515,34.23230707716913,34.23830467812875,34.244302279088366,34.25029988004798,34.2562974810076,34.26229508196721,34.26829268292683,34.274290283886444,34.28028788484606,34.28628548580568,34.292283086765295,34.29828068772491,34.30427828868453,34.310275889644146,34.316273490603756,34.32227109156337,34.32826869252299,34.33426629348261,34.340263894442224,34.34626149540184,34.35225909636146,34.358256697321075,34.364254298280684,34.3702518992403,34.37624950019992,34.382247101159535,34.38824470211915,34.39424230307877,34.400239904038386,34.406237504998,34.41223510595762,34.41823270691723,34.42423030787685,34.430227908836464,34.43622550979608,34.4422231107557,34.448220711715315,34.45421831267493,34.46021591363455,34.46621351459416,34.472211115553776,34.47820871651339,34.48420631747301,34.49020391843263,34.496201519392244,34.50219912035186,34.50819672131148,34.514194322271095,34.520191923230705,34.52618952419032,34.53218712514994,34.538184726109556,34.54418232706917,34.55017992802879,34.55617752898841,34.562175129948024,34.568172730907634,34.57417033186725,34.58016793282687,34.586165533786485,34.5921631347461,34.59816073570572,34.604158336665336,34.61015593762495,34.61615353858457,34.62215113954418,34.628148740503796,34.63414634146341,34.64014394242303,34.64614154338265,34.652139144342264,34.65813674530188,34.6641343462615,34.67013194722111,34.676129548180725,34.68212714914034,34.68812475009996,34.694122351059576,34.70011995201919,34.70611755297881,34.71211515393843,34.718112754898044,34.724110355857654,34.73010795681727,34.73610555777689,34.742103158736505,34.74810075969612,34.75409836065574,34.760095961615356,34.76609356257497,34.77209116353458,34.7780887644942,34.78408636545382,34.790083966413434,34.79608156737305,34.80207916833267,34.808076769292285,34.8140743702519,34.82007197121152,34.82606957217113,34.832067173130746,34.83806477409036,34.84406237504998,34.8500599760096,34.856057576969214,34.86205517792883,34.86805277888845,34.87405037984806,34.880047980807674,34.88604558176729,34.89204318272691,34.898040783686525,34.90403838464614,34.91003598560576,34.916033586565376,34.92203118752499,34.9280287884846,34.93402638944422,34.94002399040384,34.946021591363454,34.95201919232307,34.95801679328269,34.964014394242305,34.97001199520192,34.97600959616153,34.98200719712115,34.988004798080766,34.99400239904038,35.0,35.00599760095962,35.011995201919234,35.01799280287885,35.02399040383847,35.02998800479808,35.035985605757695,35.04198320671731,35.04798080767693,35.053978408636546,35.05997600959616,35.06597361055578,35.0719712115154,35.07796881247501,35.083966413434624,35.08996401439424,35.09596161535386,35.101959216313475,35.10795681727309,35.11395441823271,35.119952019192326,35.12594962015194,35.13194722111155,35.13794482207117,35.143942423030786,35.1499400239904,35.15593762495002,35.16193522590964,35.167932826869254,35.17393042782887,35.17992802878848,35.1859256297481,35.191923230707715,35.19792083166733,35.20391843262695,35.209916033586566,35.21591363454618,35.2219112355058,35.22790883646542,35.23390643742503,35.239904038384644,35.24590163934426,35.25189924030388,35.257896841263495,35.26389444222311,35.26989204318273,35.275889644142346,35.281887245101956,35.28788484606157,35.29388244702119,35.29988004798081,35.305877648940424,35.31187524990004,35.31787285085966,35.323870451819275,35.32986805277889,35.3358656537385,35.34186325469812,35.347860855657736,35.35385845661735,35.35985605757697,35.36585365853659,35.371851259496204,35.37784886045582,35.38384646141543,35.38984406237505,35.395841663334664,35.40183926429428,35.4078368652539,35.413834466213515,35.41983206717313,35.42582966813275,35.431827269092366,35.437824870051976,35.44382247101159,35.44982007197121,35.45581767293083,35.461815273890444,35.46781287485006,35.47381047580968,35.479808076769295,35.485805677728905,35.49180327868852,35.49780087964814,35.503798480607756,35.50979608156737,35.51579368252699,35.52179128348661,35.527788884446224,35.53378648540584,35.53978408636545,35.54578168732507,35.551779288284685,35.5577768892443,35.56377449020392,35.569772091163536,35.57576969212315,35.58176729308277,35.58776489404238,35.593762495002,35.599760095961614,35.60575769692123,35.61175529788085,35.617752898840465,35.62375049980008,35.6297481007597,35.635745701719316,35.641743302678925,35.64774090363854,35.65373850459816,35.659736105557776,35.66573370651739,35.67173130747701,35.67772890843663,35.683726509396244,35.689724110355854,35.69572171131547,35.70171931227509,35.707716913234705,35.71371451419432,35.71971211515394,35.725709716113556,35.73170731707317,35.73770491803279,35.7437025189924,35.74970011995202,35.755697720911634,35.76169532187125,35.76769292283087,35.773690523790485,35.7796881247501,35.78568572570972,35.79168332666933,35.797680927628946,35.80367852858856,35.80967612954818,35.8156737305078,35.821671331467414,35.82766893242703,35.83366653338665,35.839664134346265,35.845661735305875,35.85165933626549,35.85765693722511,35.863654538184726,35.86965213914434,35.87564974010396,35.88164734106358,35.88764494202319,35.8936425429828,35.89964014394242,35.90563774490204,35.911635345861654,35.91763294682127,35.92363054778089,35.929628148740505,35.93562574970012,35.94162335065974,35.94762095161935,35.953618552578966,35.95961615353858,35.9656137544982,35.97161135545782,35.977608956417434,35.98360655737705,35.98960415833667,35.99560175929628,36.001599360255895,36.00759696121551,36.01359456217513,36.019592163134746,36.02558976409436,36.03158736505398,36.0375849660136,36.043582566973214,36.049580167932824,36.05557776889244,36.06157536985206,36.067572970811675,36.07357057177129,36.07956817273091,36.085565773690526,36.09156337465014,36.09756097560975,36.10355857656937,36.10955617752899,36.115553778488604,36.12155137944822,36.12754898040784,36.133546581367455,36.13954418232707,36.14554178328669,36.1515393842463,36.157536985205915,36.16353458616553,36.16953218712515,36.175529788084766,36.18152738904438,36.187524990004,36.19352259096362,36.19952019192323,36.205517792882844,36.21151539384246,36.21751299480208,36.223510595761695,36.22950819672131,36.23550579768093,36.241503398640546,36.24750099960016,36.25349860055977,36.25949620151939,36.26549380247901,36.271491403438624,36.27748900439824,36.28348660535786,36.289484206317475,36.29548180727709,36.3014794082367,36.30747700919632,36.313474610155936,36.31947221111555,36.32546981207517,36.33146741303479,36.337465013994404,36.34346261495402,36.34946021591364,36.35545781687325,36.361455417832865,36.36745301879248,36.3734506197521,36.379448220711716,36.38544582167133,36.39144342263095,36.39744102359057,36.403438624550176,36.40943622550979,36.41543382646941,36.42143142742903,36.427429028388644,36.43342662934826,36.43942423030788,36.445421831267495,36.45141943222711,36.45741703318672,36.46341463414634,36.469412235105956,36.47540983606557,36.48140743702519,36.48740503798481,36.493402638944424,36.49940023990404,36.50539784086365,36.51139544182327,36.517393042782885,36.5233906437425,36.52938824470212,36.535385845661736,36.54138344662135,36.54738104758097,36.55337864854059,36.5593762495002,36.565373850459814,36.57137145141943,36.57736905237905,36.583366653338665,36.58936425429828,36.5953618552579,36.601359456217516,36.607357057177126,36.61335465813674,36.61935225909636,36.62534986005598,36.631347461015594,36.63734506197521,36.64334266293483,36.649340263894445,36.65533786485406,36.66133546581367,36.66733306677329,36.673330667732905,36.67932826869252,36.68532586965214,36.691323470611756,36.69732107157137,36.70331867253099,36.7093162734906,36.71531387445022,36.721311475409834,36.72730907636945,36.73330667732907,36.739304278288685,36.7453018792483,36.75129948020792,36.757297081167536,36.763294682127146,36.76929228308676,36.77528988404638,36.781287485006,36.787285085965614,36.79328268692523,36.79928028788485,36.805277888844465,36.811275489804075,36.81727309076369,36.82327069172331,36.829268292682926,36.83526589364254,36.84126349460216,36.84726109556178,36.853258696521394,36.85925629748101,36.86525389844062,36.87125149940024,36.877249100359855,36.88324670131947,36.88924430227909,36.895241903238706,36.90123950419832,36.90723710515794,36.91323470611756,36.919232307077166,36.92522990803678,36.9312275089964,36.93722510995602,36.943222710915634,36.94922031187525,36.95521791283487,36.961215513794485,36.967213114754095,36.97321071571371,36.97920831667333,36.985205917632946,36.99120351859256,36.99720111955218,37.0031987205118,37.009196321471414,37.01519392243103,37.02119152339064,37.02718912435026,37.033186725309875,37.03918432626949,37.04518192722911,37.051179528188726,37.05717712914834,37.06317473010796,37.06917233106757,37.07516993202719,37.081167532986804,37.08716513394642,37.09316273490604,37.099160335865655,37.10515793682527,37.11115553778489,37.117153138744506,37.123150739704116,37.12914834066373,37.13514594162335,37.14114354258297,37.147141143542584,37.1531387445022,37.15913634546182,37.165133946421435,37.171131547381044,37.17712914834066,37.18312674930028,37.189124350259895,37.19512195121951,37.20111955217913,37.207117153138746,37.21311475409836,37.21911235505798,37.22510995601759,37.23110755697721,37.237105157936824,37.24310275889644,37.24910035985606,37.255097960815675,37.26109556177529,37.26709316273491,37.27309076369452,37.279088364654136,37.28508596561375,37.29108356657337,37.29708116753299,37.303078768492604,37.30907636945222,37.31507397041184,37.321071571371455,37.327069172331065,37.33306677329068,37.3390643742503,37.345061975209916,37.35105957616953,37.35705717712915,37.36305477808877,37.369052379048384,37.375049980007994,37.38104758096761,37.38704518192723,37.393042782886845,37.39904038384646,37.40503798480608,37.411035585765696,37.41703318672531,37.42303078768493,37.42902838864454,37.435025989604156,37.44102359056377,37.44702119152339,37.45301879248301,37.459016393442624,37.46501399440224,37.47101159536186,37.47700919632147,37.483006797281085,37.4890043982407,37.49500199920032,37.500999600159936,37.50699720111955,37.51299480207917,37.51899240303879,37.524990003998404,37.530987604958014,37.53698520591763,37.54298280687725,37.548980407836865,37.55497800879648,37.5609756097561,37.566973210715716,37.57297081167533,37.57896841263494,37.58496601359456,37.59096361455418,37.596961215513794,37.60295881647341,37.60895641743303,37.614954018392645,37.62095161935226,37.62694922031188,37.63294682127149,37.638944422231106,37.64494202319072,37.65093962415034,37.65693722510996,37.66293482606957,37.66893242702919,37.67493002798881,37.68092762894842,37.686925229908034,37.69292283086765,37.69892043182727,37.704918032786885,37.7109156337465,37.71691323470612,37.722910835665736,37.72890843662535,37.73490603758496,37.74090363854458,37.7469012395042,37.752898840463814,37.75889644142343,37.76489404238305,37.770891643342665,37.77688924430228,37.78288684526189,37.78888444622151,37.794882047181126,37.80087964814074,37.80687724910036,37.81287485005998,37.818872451019594,37.82487005197921,37.83086765293883,37.83686525389844,37.842862854858055,37.84886045581767,37.85485805677729,37.860855657736906,37.86685325869652,37.87285085965614,37.87884846061576,37.88484606157537,37.890843662534984,37.8968412634946,37.90283886445422,37.908836465413835,37.91483406637345,37.92083166733307,37.926829268292686,37.9328268692523,37.93882447021191,37.94482207117153,37.950819672131146,37.95681727309076,37.96281487405038,37.96881247501,37.974810075969614,37.98080767692923,37.98680527788884,37.99280287884846,37.998800479808075,38.00479808076769,38.01079568172731,38.016793282686926,38.02279088364654,38.02878848460616,38.03478608556578,38.04078368652539,38.046781287485004,38.05277888844462,38.05877648940424,38.064774090363855,38.07077169132347,38.07676929228309,38.082766893242706,38.088764494202316,38.09476209516193,38.10075969612155,38.10675729708117,38.112754898040784,38.1187524990004,38.12475009996002,38.130747700919635,38.13674530187925,38.14274290283886,38.14874050379848,38.154738104758096,38.16073570571771,38.16673330667733,38.17273090763695,38.17872850859656,38.18472610955618,38.19072371051579,38.19672131147541,38.202718912435024,38.20871651339464,38.21471411435426,38.220711715313875,38.22670931627349,38.23270691723311,38.238704518192726,38.244702119152336,38.25069972011195,38.25669732107157,38.26269492203119,38.268692522990804,38.27469012395042,38.28068772491004,38.286685325869655,38.292682926829265,38.29868052778888,38.3046781287485,38.310675729708116,38.31667333066773,38.32267093162735,38.32866853258697,38.334666133546584,38.3406637345062,38.34666133546581,38.35265893642543,38.358656537385045,38.36465413834466,38.37065173930428,38.376649340263896,38.38264694122351,38.38864454218313,38.39464214314274,38.40063974410236,38.406637345061974,38.41263494602159,38.41863254698121,38.424630147940825,38.43062774890044,38.43662534986006,38.442622950819676,38.448620551779285,38.4546181527389,38.46061575369852,38.466613354658136,38.47261095561775,38.47860855657737,38.48460615753699,38.490603758496604,38.496601359456214,38.50259896041583,38.50859656137545,38.514594162335065,38.52059176329468,38.5265893642543,38.532586965213916,38.53858456617353,38.54458216713315,38.55057976809276,38.55657736905238,38.562574970011994,38.56857257097161,38.57457017193123,38.580567772890845,38.58656537385046,38.59256297481008,38.59856057576969,38.604558176729306,38.61055577768892,38.61655337864854,38.62255097960816,38.628548580567774,38.63454618152739,38.64054378248701,38.646541383446625,38.652538984406235,38.65853658536585,38.66453418632547,38.670531787285086,38.6765293882447,38.68252698920432,38.68852459016394,38.69452219112355,38.70051979208316,38.70651739304278,38.7125149940024,38.718512594962014,38.72451019592163,38.73050779688125,38.736505397840865,38.74250299880048,38.7485005997601,38.75449820071971,38.760495801679326,38.76649340263894,38.77249100359856,38.77848860455818,38.784486205517794,38.79048380647741,38.79648140743703,38.80247900839664,38.808476609356255,38.81447421031587,38.82047181127549,38.826469412235106,38.83246701319472,38.83846461415434,38.84446221511396,38.850459816073574,38.856457417033184,38.8624550179928,38.86845261895242,38.874450219912035,38.88044782087165,38.88644542183127,38.892443022790886,38.8984406237505,38.90443822471011,38.91043582566973,38.91643342662935,38.922431027588964,38.92842862854858,38.9344262295082,38.940423830467815,38.94642143142743,38.95241903238705,38.95841663334666,38.964414234306275,38.97041183526589,38.97640943622551,38.982407037185126,38.98840463814474,38.99440223910436,39.00039984006398,39.00639744102359,39.012395041983204,39.01839264294282,39.02439024390244,39.030387844862055,39.03638544582167,39.04238304678129,39.048380647740906,39.05437824870052,39.06037584966013,39.06637345061975,39.07237105157937,39.078368652538984,39.0843662534986,39.09036385445822,39.096361455417835,39.10235905637745,39.10835665733706,39.11435425829668,39.120351859256296,39.12634946021591,39.13234706117553,39.13834466213515,39.144342263094764,39.15033986405438,39.156337465014,39.16233506597361,39.168332666933225,39.17433026789284,39.18032786885246,39.186325469812076,39.19232307077169,39.19832067173131,39.20431827269093,39.210315873650536,39.21631347461015,39.22231107556977,39.22830867652939,39.234306277489004,39.24030387844862,39.24630147940824,39.252299080367855,39.25829668132747,39.26429428228708,39.2702918832467,39.276289484206316,39.28228708516593,39.28828468612555,39.29428228708517,39.300279888044784,39.3062774890044,39.31227508996401,39.31827269092363,39.324270291883245,39.33026789284286,39.33626549380248,39.342263094762096,39.34826069572171,39.35425829668133,39.36025589764095,39.36625349860056,39.372251099560174,39.37824870051979,39.38424630147941,39.390243902439025,39.39624150339864,39.40223910435826,39.408236705317876,39.414234306277486,39.4202319072371,39.42622950819672,39.43222710915634,39.43822471011595,39.44422231107557,39.45021991203519,39.456217512994805,39.46221511395442,39.46821271491403,39.47421031587365,39.480207916833265,39.48620551779288,39.4922031187525,39.498200719712116,39.50419832067173,39.51019592163135,39.51619352259096,39.52219112355058,39.528188724510194,39.53418632546981,39.54018392642943,39.546181527389045,39.55217912834866,39.55817672930828,39.564174330267896,39.570171931227506,39.57616953218712,39.58216713314674,39.58816473410636,39.594162335065974,39.60015993602559,39.60615753698521,39.612155137944825,39.618152738904435,39.62415033986405,39.63014794082367,39.636145541783286,39.6421431427429,39.64814074370252,39.65413834466214,39.660135945621754,39.66613354658137,39.67213114754098,39.6781287485006,39.684126349460215,39.69012395041983,39.69612155137945,39.702119152339066,39.70811675329868,39.7141143542583,39.72011195521791,39.726109556177526,39.73210715713714,39.73810475809676,39.74410235905638,39.750099960015994,39.75609756097561,39.76209516193523,39.768092762894845,39.774090363854455,39.78008796481407,39.78608556577369,39.792083166733306,39.79808076769292,39.80407836865254,39.81007596961216,39.816073570571774,39.822071171531384,39.828068772491,39.83406637345062,39.840063974410235,39.84606157536985,39.85205917632947,39.858056777289086,39.8640543782487,39.87005197920832,39.87604958016793,39.88204718112755,39.888044782087164,39.89404238304678,39.9000399840064,39.906037584966015,39.91203518592563,39.91803278688525,39.92403038784486,39.930027988804476,39.93602558976409,39.94202319072371,39.94802079168333,39.95401839264294,39.96001599360256,39.96601359456218,39.972011195521794,39.978008796481404,39.98400639744102,39.99000399840064,39.996001599360255,40.00199920031987,40.00799680127949,40.013994402239106,40.01999200319872,40.02598960415833,40.03198720511795,40.03798480607757,40.043982407037184,40.0499800079968,40.05597760895642,40.061975209916035,40.06797281087565,40.07397041183527,40.07996801279488,40.085965613754496,40.09196321471411,40.09796081567373,40.10395841663335,40.109956017592964,40.11595361855258,40.1219512195122,40.12794882047181,40.133946421431425,40.13994402239104,40.14594162335066,40.151939224310276,40.15793682526989,40.16393442622951,40.16993202718913,40.175929628148744,40.181927229108354,40.18792483006797,40.19392243102759,40.199920031987205,40.20591763294682,40.21191523390644,40.217912834866056,40.22391043582567,40.22990803678528,40.2359056377449,40.241903238704516,40.24790083966413,40.25389844062375,40.25989604158337,40.265893642542984,40.2718912435026,40.27788884446222,40.28388644542183,40.289884046381445,40.29588164734106,40.30187924830068,40.307876849260296,40.31387445021991,40.31987205117953,40.32586965213915,40.33186725309876,40.337864854058374,40.34386245501799,40.34986005597761,40.355857656937225,40.36185525789684,40.36785285885646,40.373850459816076,40.37984806077569,40.3858456617353,40.39184326269492,40.39784086365454,40.403838464614154,40.40983606557377,40.41583366653339,40.421831267493005,40.42782886845262,40.43382646941223,40.43982407037185,40.445821671331466,40.45181927229108,40.4578168732507,40.46381447421032,40.46981207516993,40.47580967612955,40.48180727708917,40.48780487804878,40.493802479008394,40.49980007996801,40.50579768092763,40.511795281887245,40.51779288284686,40.52379048380648,40.529788084766096,40.535785685725706,40.54178328668532,40.54778088764494,40.55377848860456,40.559776089564174,40.56577369052379,40.57177129148341,40.577768892443025,40.58376649340264,40.58976409436225,40.59576169532187,40.601759296281486,40.6077568972411,40.61375449820072,40.61975209916034,40.625749700119954,40.63174730107957,40.63774490203919,40.6437425029988,40.649740103958415,40.65573770491803,40.66173530587765,40.667732906837266,40.67373050779688,40.6797281087565,40.68572570971612,40.69172331067573,40.697720911635344,40.70371851259496,40.70971611355458,40.715713714514195,40.72171131547381,40.72770891643343,40.733706517393045,40.73970411835266,40.74570171931227,40.75169932027189,40.757696921231506,40.76369452219112,40.76969212315074,40.77568972411036,40.781687325069974,40.78768492602959,40.7936825269892,40.79968012794882,40.805677728908435,40.81167532986805,40.81767293082767,40.823670531787286,40.8296681327469,40.83566573370652,40.84166333466614,40.84766093562575,40.853658536585364,40.85965613754498,40.8656537385046,40.871651339464215,40.87764894042383,40.88364654138345,40.889644142343066,40.895641743302676,40.90163934426229,40.90763694522191,40.91363454618153,40.919632147141144,40.92562974810076,40.93162734906038,40.937624950019995,40.94362255097961,40.94962015193922,40.95561775289884,40.961615353858456,40.96761295481807,40.97361055577769,40.97960815673731,40.98560575769692,40.99160335865654,40.99760095961615,41.00359856057577,41.009596161535384,41.015593762495,41.02159136345462,41.027588964414235,41.03358656537385,41.03958416633347,41.045581767293086,41.051579368252696,41.05757696921231,41.06357457017193,41.06957217113155,41.075569772091164,41.08156737305078,41.0875649740104,41.093562574970015,41.099560175929625,41.10555777688924,41.11155537784886,41.117552978808476,41.12355057976809,41.12954818072771,41.13554578168733,41.141543382646944,41.14754098360656,41.15353858456617,41.15953618552579,41.165533786485405,41.17153138744502,41.17752898840464,41.183526589364256,41.18952419032387,41.19552179128349,41.2015193922431,41.20751699320272,41.21351459416233,41.21951219512195,41.22550979608157,41.231507397041185,41.2375049980008,41.24350259896042,41.249500199920035,41.255497800879645,41.26149540183926,41.26749300279888,41.273490603758496,41.27948820471811,41.28548580567773,41.29148340663735,41.297481007596964,41.303478608556574,41.30947620951619,41.31547381047581,41.321471411435425,41.32746901239504,41.33346661335466,41.339464214314276,41.34546181527389,41.35145941623351,41.35745701719312,41.36345461815274,41.369452219112354,41.37544982007197,41.38144742103159,41.387445021991205,41.39344262295082,41.39944022391044,41.40543782487005,41.411435425829666,41.41743302678928,41.4234306277489,41.42942822870852,41.435425829668134,41.44142343062775,41.44742103158737,41.453418632546985,41.459416233506595,41.46541383446621,41.47141143542583,41.477409036385446,41.48340663734506,41.48940423830468,41.4954018392643,41.50139944022391,41.50739704118352,41.51339464214314,41.51939224310276,41.525389844062374,41.53138744502199,41.53738504598161,41.543382646941225,41.54938024790084,41.55537784886046,41.56137544982007,41.567373050779686,41.5733706517393,41.57936825269892,41.58536585365854,41.591363454618154,41.59736105557777,41.60335865653739,41.609356257497,41.615353858456615,41.62135145941623,41.62734906037585,41.633346661335466,41.63934426229508,41.6453418632547,41.65133946421432,41.657337065173934,41.663334666133544,41.66933226709316,41.67532986805278,41.681327469012395,41.68732506997201,41.69332267093163,41.699320271891246,41.70531787285086,41.71131547381047,41.71731307477009,41.72331067572971,41.72930827668932,41.73530587764894,41.74130347860856,41.747301079568174,41.75329868052779,41.75929628148741,41.76529388244702,41.771291483406635,41.77728908436625,41.78328668532587,41.789284286285486,41.7952818872451,41.80127948820472,41.80727708916434,41.81327469012395,41.819272291083564,41.82526989204318,41.8312674930028,41.837265093962415,41.84326269492203,41.84926029588165,41.855257896841266,41.86125549780088,41.86725309876049,41.87325069972011,41.87924830067973,41.885245901639344,41.89124350259896,41.89724110355858,41.903238704518195,41.90923630547781,41.91523390643742,41.92123150739704,41.927229108356656,41.93322670931627,41.93922431027589,41.94522191123551,41.951219512195124,41.95721711315474,41.96321471411436,41.96921231507397,41.975209916033585,41.9812075169932,41.98720511795282,41.993202718912436,41.99920031987205,42.00519792083167,42.01119552179129,42.017193122750896,42.02319072371051,42.02918832467013,42.03518592562975,42.041183526589364,42.04718112754898,42.0531787285086,42.059176329468215,42.06517393042783,42.07117153138744,42.07716913234706,42.083166733306676,42.08916433426629,42.09516193522591,42.10115953618553,42.107157137145144,42.11315473810476,42.11915233906437,42.12514994002399,42.131147540983605,42.13714514194322,42.14314274290284,42.149140343862456,42.15513794482207,42.16113554578169,42.16713314674131,42.17313074770092,42.179128348660534,42.18512594962015,42.19112355057977,42.197121151539385,42.203118752499,42.20911635345862,42.215113954418236,42.221111555377846,42.22710915633746,42.23310675729708,42.2391043582567,42.24510195921631,42.25109956017593,42.25709716113555,42.263094762095164,42.26909236305478,42.27508996401439,42.28108756497401,42.287085165933625,42.29308276689324,42.29908036785286,42.305077968812476,42.31107556977209,42.31707317073171,42.32307077169132,42.32906837265094,42.335065973610554,42.34106357457017,42.34706117552979,42.353058776489405,42.35905637744902,42.36505397840864,42.371051579368256,42.377049180327866,42.38304678128748,42.3890443822471,42.39504198320672,42.401039584166334,42.40703718512595,42.41303478608557,42.419032387045185,42.425029988004795,42.43102758896441,42.43702518992403,42.443022790883646,42.44902039184326,42.45501799280288,42.4610155937625,42.467013194722114,42.47301079568173,42.47900839664134,42.48500599760096,42.491003598560575,42.49700119952019,42.50299880047981,42.508996401439425,42.51499400239904,42.52099160335866,42.52698920431827,42.532986805277886,42.5389844062375,42.54498200719712,42.55097960815674,42.556977209116354,42.56297481007597,42.56897241103559,42.574970011995205,42.580967612954815,42.58696521391443,42.59296281487405,42.598960415833666,42.60495801679328,42.6109556177529,42.61695321871252,42.622950819672134,42.628948420631744,42.63494602159136,42.64094362255098,42.646941223510595,42.65293882447021,42.65893642542983,42.664934026389446,42.67093162734906,42.67692922830868,42.68292682926829,42.68892443022791,42.694922031187524,42.70091963214714,42.70691723310676,42.712914834066375,42.71891243502599,42.72491003598561,42.73090763694522,42.736905237904836,42.74290283886445,42.74890043982407,42.75489804078369,42.7608956417433,42.76689324270292,42.77289084366254,42.778888444622154,42.784886045581764,42.79088364654138,42.796881247501,42.802878848460615,42.80887644942023,42.81487405037985,42.820871651339466,42.82686925229908,42.83286685325869,42.83886445421831,42.84486205517793,42.850859656137544,42.85685725709716,42.86285485805678,42.868852459016395,42.87485005997601,42.88084766093563,42.88684526189524,42.892842862854856,42.89884046381447,42.90483806477409,42.91083566573371,42.916833266693324,42.92283086765294,42.92882846861256,42.93482606957217,42.940823670531785,42.9468212714914,42.95281887245102,42.958816473410636,42.96481407437025,42.97081167532987,42.97680927628949,42.982806877249104,42.98880447820871,42.99480207916833,43.00079968012795,43.006797281087564,43.01279488204718,43.0187924830068,43.024790083966415,43.03078768492603,43.03678528588564,43.04278288684526,43.048780487804876,43.05477808876449,43.06077568972411,43.06677329068373,43.072770891643344,43.07876849260296,43.08476609356258,43.09076369452219,43.096761295481805,43.10275889644142,43.10875649740104,43.114754098360656,43.12075169932027,43.12674930027989,43.13274690123951,43.13874450219912,43.144742103158734,43.15073970411835,43.15673730507797,43.162734906037585,43.1687325069972,43.17473010795682,43.180727708916436,43.18672530987605,43.19272291083566,43.19872051179528,43.2047181127549,43.210715713714514,43.21671331467413,43.22271091563375,43.228708516593365,43.23470611755298,43.24070371851259,43.24670131947221,43.252698920431826,43.25869652139144,43.26469412235106,43.27069172331068,43.27668932427029,43.28268692522991,43.28868452618953,43.29468212714914,43.300679728108754,43.30667732906837,43.31267493002799,43.318672530987605,43.32467013194722,43.33066773290684,43.336665333866456,43.342662934826066,43.34866053578568,43.3546581367453,43.36065573770492,43.366653338664534,43.37265093962415,43.37864854058377,43.384646141543385,43.390643742503,43.39664134346261,43.40263894442223,43.408636545381846,43.41463414634146,43.42063174730108,43.4266293482607,43.432626949220314,43.43862455017993,43.44462215113954,43.45061975209916,43.456617353058775,43.46261495401839,43.46861255497801,43.474610155937626,43.48060775689724,43.48660535785686,43.49260295881648,43.49860055977609,43.5045981607357,43.51059576169532,43.51659336265494,43.522590963614554,43.52858856457417,43.53458616553379,43.540583766493405,43.546581367453015,43.55257896841263,43.55857656937225,43.564574170331866,43.57057177129148,43.5765693722511,43.58256697321072,43.588564574170334,43.59456217512995,43.60055977608956,43.60655737704918,43.612554978008795,43.61855257896841,43.62455017992803,43.630547780887646,43.63654538184726,43.64254298280688,43.64854058376649,43.65453818472611,43.660535785685724,43.66653338664534,43.67253098760496,43.678528588564575,43.68452618952419,43.69052379048381,43.696521391443426,43.702518992403036,43.70851659336265,43.71451419432227,43.72051179528189,43.726509396241504,43.73250699720112,43.73850459816074,43.744502199120355,43.750499800079965,43.75649740103958,43.7624950019992,43.768492602958815,43.77449020391843,43.78048780487805,43.78648540583767,43.79248300679728,43.7984806077569,43.80447820871651,43.81047580967613,43.816473410635744,43.82247101159536,43.82846861255498,43.834466213514595,43.84046381447421,43.84646141543383,43.85245901639344,43.858456617353056,43.86445421831267,43.87045181927229,43.87644942023191,43.882447021191524,43.88844462215114,43.89444222311076,43.900439824070375,43.906437425029985,43.9124350259896,43.91843262694922,43.924430227908836,43.93042782886845,43.93642542982807,43.94242303078769,43.948420631747304,43.954418232706914,43.96041583366653,43.96641343462615,43.972411035585765,43.97840863654538,43.984406237505,43.990403838464616,43.99640143942423,44.00239904038385,44.00839664134346,44.01439424230308,44.02039184326269,44.02638944422231,44.03238704518193,44.038384646141544,44.04438224710116,44.05037984806078,44.05637744902039,44.062375049980005,44.06837265093962,44.07437025189924,44.080367852858856,44.08636545381847,44.09236305477809,44.09836065573771,44.104358256697324,44.110355857656934,44.11635345861655,44.12235105957617,44.128348660535785,44.1343462614954,44.14034386245502,44.146341463414636,44.15233906437425,44.15833666533386,44.16433426629348,44.1703318672531,44.176329468212714,44.18232706917233,44.18832467013195,44.194322271091565,44.20031987205118,44.2063174730108,44.21231507397041,44.218312674930026,44.22431027588964,44.23030787684926,44.23630547780888,44.242303078768494,44.24830067972811,44.25429828068773,44.26029588164734,44.266293482606955,44.27229108356657,44.27828868452619,44.284286285485805,44.29028388644542,44.29628148740504,44.302279088364656,44.30827668932427,44.31427429028388,44.3202718912435,44.32626949220312,44.332267093162734,44.33826469412235,44.34426229508197,44.350259896041585,44.3562574970012,44.36225509796081,44.36825269892043,44.374250299880046,44.38024790083966,44.38624550179928,44.3922431027589,44.398240703718514,44.40423830467813,44.41023590563775,44.41623350659736,44.422231107556975,44.42822870851659,44.43422630947621,44.440223910435826,44.44622151139544,44.45221911235506,44.45821671331468,44.464214314274294,44.470211915233904,44.47620951619352,44.48220711715314,44.488204718112755,44.49420231907237,44.50019992003199,44.506197520991606,44.51219512195122,44.51819272291083,44.52419032387045,44.53018792483007,44.53618552578968,44.5421831267493,44.54818072770892,44.554178328668534,44.56017592962815,44.56617353058777,44.57217113154738,44.578168732506995,44.58416633346661,44.59016393442623,44.596161535385846,44.60215913634546,44.60815673730508,44.6141543382647,44.62015193922431,44.626149540183924,44.63214714114354,44.63814474210316,44.644142343062775,44.65013994402239,44.65613754498201,44.662135145941626,44.66813274690124,44.67413034786085,44.68012794882047,44.68612554978009,44.692123150739704,44.69812075169932,44.70411835265894,44.710115953618555,44.71611355457817,44.72211115553778,44.7281087564974,44.734106357457016,44.74010395841663,44.74610155937625,44.75209916033587,44.758096761295484,44.7640943622551,44.77009196321472,44.77608956417433,44.782087165133944,44.78808476609356,44.79408236705318,44.800079968012795,44.80607756897241,44.81207516993203,44.818072770891646,44.824070371851256,44.83006797281087,44.83606557377049,44.84206317473011,44.848060775689724,44.85405837664934,44.86005597760896,44.866053578568575,44.87205117952819,44.8780487804878,44.88404638144742,44.890043982407036,44.89604158336665,44.90203918432627,44.90803678528589,44.914034386245504,44.92003198720512,44.92602958816473,44.93202718912435,44.938024790083965,44.94402239104358,44.9500199920032,44.956017592962816,44.96201519392243,44.96801279488205,44.97401039584167,44.98000799680128,44.986005597760894,44.99200319872051,44.99800079968013,45.003998400639745,45.00999600159936,45.01599360255898,45.021991203518596,45.027988804478206,45.03398640543782,45.03998400639744,45.04598160735706,45.05197920831667,45.05797680927629,45.06397441023591,45.069972011195524,45.07596961215514,45.08196721311475,45.08796481407437,45.093962415033985,45.0999600159936,45.10595761695322,45.111955217912836,45.11795281887245,45.12395041983207,45.12994802079168,45.1359456217513,45.141943222710914,45.14794082367053,45.15393842463015,45.159936025589765,45.16593362654938,45.171931227509,45.177928828468616,45.183926429428226,45.18992403038784,45.19592163134746,45.20191923230708,45.207916833266694,45.21391443422631,45.21991203518593,45.225909636145545,45.231907237105155,45.23790483806477,45.24390243902439,45.249900039984006,45.25589764094362,45.26189524190324,45.26789284286286,45.273890443822474,45.27988804478209,45.2858856457417,45.29188324670132,45.297880847660934,45.30387844862055,45.30987604958017,45.315873650539785,45.3218712514994,45.32786885245902,45.33386645341863,45.339864054378246,45.34586165533786,45.35185925629748,45.3578568572571,45.363854458216714,45.36985205917633,45.37584966013595,45.381847261095565,45.387844862055175,45.39384246301479,45.39984006397441,45.405837664934026,45.41183526589364,45.41783286685326,45.42383046781288,45.429828068772494,45.435825669732104,45.44182327069172,45.44782087165134,45.453818472610955,45.45981607357057,45.46581367453019,45.471811275489806,45.47780887644942,45.48380647740904,45.48980407836865,45.49580167932827,45.501799280287884,45.5077968812475,45.51379448220712,45.519792083166735,45.52578968412635,45.53178728508597,45.53778488604558,45.543782487005195,45.54978008796481,45.55577768892443,45.56177528988405,45.56777289084366,45.57377049180328,45.5797680927629,45.585765693722514,45.591763294682124,45.59776089564174,45.60375849660136,45.609756097560975,45.61575369852059,45.62175129948021,45.627748900439826,45.63374650139944,45.63974410235905,45.64574170331867,45.65173930427829,45.657736905237904,45.66373450619752,45.66973210715714,45.675729708116755,45.68172730907637,45.68772491003599,45.6937225109956,45.699720111955216,45.70571771291483,45.71171531387445,45.71771291483407,45.723710515793684,45.7297081167533,45.73570571771292,45.74170331867253,45.747700919632145,45.75369852059176,45.75969612155138,45.765693722510996,45.77169132347061,45.77768892443023,45.78368652538985,45.789684126349464,45.79568172730907,45.80167932826869,45.80767692922831,45.813674530187924,45.81967213114754,45.82566973210716,45.831667333066775,45.83766493402639,45.843662534986,45.84966013594562,45.855657736905236,45.86165533786485,45.86765293882447,45.87365053978409,45.879648140743704,45.88564574170332,45.89164334266294,45.89764094362255,45.903638544582165,45.90963614554178,45.9156337465014,45.921631347461016,45.92762894842063,45.93362654938025,45.93962415033987,45.94562175129948,45.951619352259094,45.95761695321871,45.96361455417833,45.969612155137945,45.97560975609756,45.98160735705718,45.987604958016796,45.99360255897641,45.99960015993602,46.00559776089564,46.01159536185526,46.017592962814874,46.02359056377449,46.02958816473411,46.035585765693725,46.04158336665334,46.04758096761295,46.05357856857257,46.059576169532185,46.0655737704918,46.07157137145142,46.077568972411036,46.08356657337065,46.08956417433027,46.09556177528989,46.1015593762495,46.107556977209114,46.11355457816873,46.11955217912835,46.125549780087965,46.13154738104758,46.1375449820072,46.143542582966816,46.149540183926426,46.15553778488604,46.16153538584566,46.16753298680528,46.173530587764894,46.17952818872451,46.18552578968413,46.191523390643745,46.19752099160336,46.20351859256297,46.20951619352259,46.215513794482206,46.22151139544182,46.22750899640144,46.23350659736106,46.239504198320674,46.24550179928029,46.2514994002399,46.25749700119952,46.263494602159135,46.26949220311875,46.27548980407837,46.281487405037986,46.2874850059976,46.29348260695722,46.29948020791684,46.30547780887645,46.31147540983606,46.31747301079568,46.3234706117553,46.329468212714914,46.33546581367453,46.34146341463415,46.347461015593765,46.353458616553375,46.35945621751299,46.36545381847261,46.371451419432226,46.37744902039184,46.38344662135146,46.38944422231108,46.395441823270694,46.40143942423031,46.40743702518992,46.41343462614954,46.419432227109155,46.42542982806877,46.43142742902839,46.437425029988006,46.44342263094762,46.44942023190724,46.45541783286685,46.46141543382647,46.467413034786084,46.4734106357457,46.47940823670532,46.485405837664935,46.49140343862455,46.49740103958417,46.503398640543786,46.509396241503396,46.51539384246301,46.52139144342263,46.52738904438225,46.533386645341864,46.53938424630148,46.5453818472611,46.551379448220715,46.557377049180324,46.56337465013994,46.56937225109956,46.575369852059175,46.58136745301879,46.58736505397841,46.593362654938026,46.59936025589764,46.60535785685726,46.61135545781687,46.61735305877649,46.623350659736104,46.62934826069572,46.63534586165534,46.641343462614955,46.64734106357457,46.65333866453419,46.6593362654938,46.665333866453416,46.67133146741303,46.67732906837265,46.68332666933227,46.689324270291884,46.6953218712515,46.70131947221112,46.707317073170735,46.713314674130345,46.71931227508996,46.72530987604958,46.731307477009196,46.73730507796881,46.74330267892843,46.74930027988805,46.755297880847664,46.761295481807274,46.76729308276689,46.77329068372651,46.779288284686125,46.78528588564574,46.79128348660536,46.797281087564976,46.80327868852459,46.80927628948421,46.81527389044382,46.82127149140344,46.82726909236305,46.83326669332267,46.83926429428229,46.845261895241904,46.85125949620152,46.85725709716114,46.86325469812075,46.869252299080365,46.87524990003998,46.8812475009996,46.887245101959216,46.89324270291883,46.89924030387845,46.90523790483807,46.911235505797684,46.917233106757294,46.92323070771691,46.92922830867653,46.935225909636145,46.94122351059576,46.94722111155538,46.953218712514996,46.95921631347461,46.96521391443422,46.97121151539384,46.97720911635346,46.983206717313074,46.98920431827269,46.99520191923231,47.001199520191925,47.00719712115154,47.01319472211116,47.01919232307077,47.025189924030386,47.03118752499,47.03718512594962,47.04318272690924,47.049180327868854,47.05517792882847,47.06117552978809,47.0671731307477,47.073170731707314,47.07916833266693,47.08516593362655,47.091163534586165,47.09716113554578,47.1031587365054,47.109156337465016,47.11515393842463,47.12115153938424,47.12714914034386,47.13314674130348,47.139144342263094,47.14514194322271,47.15113954418233,47.157137145141945,47.16313474610156,47.16913234706117,47.17512994802079,47.181127548980406,47.18712514994002,47.19312275089964,47.19912035185926,47.205117952818874,47.21111555377849,47.21711315473811,47.22311075569772,47.229108356657335,47.23510595761695,47.24110355857657,47.247101159536186,47.2530987604958,47.25909636145542,47.26509396241504,47.27109156337465,47.277089164334264,47.28308676529388,47.2890843662535,47.295081967213115,47.30107956817273,47.30707716913235,47.313074770091966,47.31907237105158,47.32506997201119,47.33106757297081,47.33706517393043,47.34306277489004,47.34906037584966,47.35505797680928,47.361055577768894,47.36705317872851,47.37305077968812,47.37904838064774,47.385045981607355,47.39104358256697,47.39704118352659,47.403038784486206,47.40903638544582,47.41503398640544,47.42103158736506,47.42702918832467,47.433026789284284,47.4390243902439,47.44502199120352,47.451019592163135,47.45701719312275,47.46301479408237,47.469012395041986,47.475009996001596,47.48100759696121,47.48700519792083,47.49300279888045,47.499000399840064,47.50499800079968,47.5109956017593,47.516993202718915,47.52299080367853,47.52898840463814,47.53498600559776,47.540983606557376,47.54698120751699,47.55297880847661,47.55897640943623,47.564974010395844,47.57097161135546,47.57696921231507,47.58296681327469,47.588964414234304,47.59496201519392,47.60095961615354,47.606957217113155,47.61295481807277,47.61895241903239,47.624950019992006,47.630947620951616,47.63694522191123,47.64294282287085,47.64894042383047,47.654938024790084,47.6609356257497,47.66693322670932,47.672930827668935,47.678928428628545,47.68492602958816,47.69092363054778,47.696921231507396,47.70291883246701,47.70891643342663,47.71491403438625,47.720911635345864,47.72690923630548,47.73290683726509,47.73890443822471,47.744902039184325,47.75089964014394,47.75689724110356,47.762894842063176,47.76889244302279,47.77489004398241,47.78088764494202,47.78688524590164,47.792882846861254,47.79888044782087,47.80487804878049,47.810875649740105,47.81687325069972,47.82287085165934,47.828868452618956,47.834866053578565,47.84086365453818,47.8468612554978,47.852858856457416,47.85885645741703,47.86485405837665,47.87085165933627,47.876849260295884,47.882846861255494,47.88884446221511,47.89484206317473,47.900839664134345,47.90683726509396,47.91283486605358,47.918832467013196,47.92483006797281,47.93082766893243,47.93682526989204,47.94282287085166,47.948820471811274,47.95481807277089,47.96081567373051,47.966813274690125,47.97281087564974,47.97880847660936,47.98480607756897,47.990803678528586,47.9968012794882,48.00279888044782,48.00879648140744,48.014794082367054,48.02079168332667,48.02678928428629,48.032786885245905,48.038784486205515,48.04478208716513,48.05077968812475,48.056777289084366,48.06277489004398,48.0687724910036,48.07477009196322,48.080767692922834,48.08676529388244,48.09276289484206,48.09876049580168,48.104758096761294,48.11075569772091,48.11675329868053,48.122750899640145,48.12874850059976,48.13474610155938,48.14074370251899,48.146741303478606,48.15273890443822,48.15873650539784,48.16473410635746,48.170731707317074,48.17672930827669,48.18272690923631,48.188724510195925,48.194722111155535,48.20071971211515,48.20671731307477,48.212714914034386,48.218712514994,48.22471011595362,48.23070771691324,48.236705317872854,48.242702918832464,48.24870051979208,48.2546981207517,48.260695721711315,48.26669332267093,48.27269092363055,48.278688524590166,48.28468612554978,48.2906837265094,48.29668132746901,48.30267892842863,48.308676529388244,48.31467413034786,48.32067173130748,48.326669332267095,48.33266693322671,48.33866453418633,48.34466213514594,48.350659736105555,48.35665733706517,48.36265493802479,48.368652538984406,48.37465013994402,48.38064774090364,48.38664534186326,48.392642942822874,48.398640543782484,48.4046381447421,48.41063574570172,48.416633346661335,48.42263094762095,48.42862854858057,48.434626149540186,48.4406237504998,48.44662135145941,48.45261895241903,48.45861655337865,48.464614154338264,48.47061175529788,48.4766093562575,48.482606957217115,48.48860455817673,48.49460215913635,48.50059976009596,48.506597361055576,48.51259496201519,48.51859256297481,48.52459016393443,48.530587764894044,48.53658536585366,48.54258296681328,48.54858056777289,48.554578168732505,48.56057576969212,48.56657337065174,48.572570971611356,48.57856857257097,48.58456617353059,48.59056377449021,48.596561375449824,48.60255897640943,48.60855657736905,48.61455417832867,48.620551779288284,48.6265493802479,48.63254698120752,48.638544582167135,48.64454218312675,48.65053978408636,48.65653738504598,48.662534986005596,48.66853258696521,48.67453018792483,48.68052778888445,48.686525389844064,48.69252299080368,48.6985205917633,48.70451819272291,48.710515793682525,48.71651339464214,48.72251099560176,48.728508596561376,48.73450619752099,48.74050379848061,48.74650139944023,48.75249900039984,48.758496601359454,48.76449420231907,48.77049180327869,48.776489404238305,48.78248700519792,48.78848460615754,48.794482207117156,48.80047980807677,48.80647740903638,48.812475009996,48.81847261095562,48.824470211915234,48.83046781287485,48.83646541383447,48.842463014794085,48.8484606157537,48.85445821671331,48.86045581767293,48.866453418632545,48.87245101959216,48.87844862055178,48.884446221511396,48.89044382247101,48.89644142343063,48.90243902439025,48.90843662534986,48.914434226309474,48.92043182726909,48.92642942822871,48.932427029188325,48.93842463014794,48.94442223110756,48.950419832067176,48.956417433026786,48.9624150339864,48.96841263494602,48.97441023590564,48.980407836865254,48.98640543782487,48.99240303878449,48.998400639744105,49.00439824070372,49.01039584166333,49.01639344262295,49.022391043582566,49.02838864454218,49.0343862455018,49.04038384646142,49.046381447421034,49.05237904838065,49.05837664934026,49.06437425029988,49.070371851259495,49.07636945221911,49.08236705317873,49.088364654138346,49.09436225509796,49.10035985605758,49.1063574570172,49.11235505797681,49.11835265893642,49.12435025989604,49.13034786085566,49.136345461815274,49.14234306277489,49.14834066373451,49.154338264694125,49.160335865653735,49.16633346661335,49.17233106757297,49.178328668532586,49.1843262694922,49.19032387045182,49.19632147141144,49.202319072371054,49.20831667333067,49.21431427429028,49.2203118752499,49.226309476209515,49.23230707716913,49.23830467812875,49.244302279088366,49.25029988004798,49.2562974810076,49.26229508196721,49.26829268292683,49.274290283886444,49.28028788484606,49.28628548580568,49.292283086765295,49.29828068772491,49.30427828868453,49.310275889644146,49.316273490603756,49.32227109156337,49.32826869252299,49.33426629348261,49.340263894442224,49.34626149540184,49.35225909636146,49.358256697321075,49.364254298280684,49.3702518992403,49.37624950019992,49.382247101159535,49.38824470211915,49.39424230307877,49.400239904038386,49.406237504998,49.41223510595762,49.41823270691723,49.42423030787685,49.430227908836464,49.43622550979608,49.4422231107557,49.448220711715315,49.45421831267493,49.46021591363455,49.46621351459416,49.472211115553776,49.47820871651339,49.48420631747301,49.49020391843263,49.496201519392244,49.50219912035186,49.50819672131148,49.514194322271095,49.520191923230705,49.52618952419032,49.53218712514994,49.538184726109556,49.54418232706917,49.55017992802879,49.55617752898841,49.562175129948024,49.568172730907634,49.57417033186725,49.58016793282687,49.586165533786485,49.5921631347461,49.59816073570572,49.604158336665336,49.61015593762495,49.61615353858457,49.62215113954418,49.628148740503796,49.63414634146341,49.64014394242303,49.64614154338265,49.652139144342264,49.65813674530188,49.6641343462615,49.67013194722111,49.676129548180725,49.68212714914034,49.68812475009996,49.694122351059576,49.70011995201919,49.70611755297881,49.71211515393843,49.718112754898044,49.724110355857654,49.73010795681727,49.73610555777689,49.742103158736505,49.74810075969612,49.75409836065574,49.760095961615356,49.76609356257497,49.77209116353458,49.7780887644942,49.78408636545382,49.790083966413434,49.79608156737305,49.80207916833267,49.808076769292285,49.8140743702519,49.82007197121152,49.82606957217113,49.832067173130746,49.83806477409036,49.84406237504998,49.8500599760096,49.856057576969214,49.86205517792883,49.86805277888845,49.87405037984806,49.880047980807674,49.88604558176729,49.89204318272691,49.898040783686525,49.90403838464614,49.91003598560576,49.916033586565376,49.92203118752499,49.9280287884846,49.93402638944422,49.94002399040384,49.946021591363454,49.95201919232307,49.95801679328269,49.964014394242305,49.97001199520192,49.97600959616153,49.98200719712115,49.988004798080766,49.99400239904038,50.0]}

},{}],98:[function(require,module,exports){
module.exports={"expected":[-0.6933612743506348,-0.690771811174984,-0.6882206026367497,-0.6857066529968705,-0.683229054822874,-0.6807868811623607,-0.6783792550441098,-0.6760053301862671,-0.6736642896146866,-0.6713553282123929,-0.6690777162811529,-0.6668307008459206,-0.6646135697912565,-0.6624256344452462,-0.6602662134818773,-0.6581346925893891,-0.6560304323649964,-0.6539528284737202,-0.6519012955396223,-0.6498752663797989,-0.6478741772743897,-0.6458975234508579,-0.6439447739005657,-0.6420154272756302,-0.6401089971156246,-0.6382249980919139,-0.6363629983619439,-0.6345225394724316,-0.6327031890752243,-0.6309045271132052,-0.6291261329198805,-0.6273676347277831,-0.6256286341387012,-0.6239087559519111,-0.6222076351968553,-0.6205249167734684,-0.6188602551079414,-0.6172133138231451,-0.6155837654229743,-0.6139712684038329,-0.6123755575430366,-0.6107963073985033,-0.6092332230967956,-0.6076860172531421,-0.6061544097260667,-0.60463812738184,-0.6031369038682868,-0.6016504793975137,-0.6001786005371414,-0.5987210200096489,-0.5972774762714366,-0.5958477744323721,-0.5944316641270346,-0.593028920840497,-0.5916393253187483,-0.5902626634095537,-0.5888987259091981,-0.5875473084148568,-0.5862082111823502,-0.5848812389890496,-0.5835662010017161,-0.5822628923796168,-0.5809711673909658,-0.5796908291904526,-0.5784217032723556,-0.5771636189265321,-0.5759164091317905,-0.5746799104529278,-0.573453962941279,-0.572238410038642,-0.5710330984844374,-0.5698378614667502,-0.5686525857115109,-0.5674771104242227,-0.5663112946668291,-0.5651550003789644,-0.5640080923020352,-0.5628704379057504,-0.5617419073170102,-0.56062237325106,-0.5595117109448292,-0.5584097980923688,-0.5573164994482771,-0.556231728222287,-0.555155353657617,-0.554087262670565,-0.5530273443406285,-0.5519754898570174,-0.5509315924667854,-0.5498955474245211,-0.5488672519435454,-0.5478466051485601,-0.5468335080296982,-0.5458278492897252,-0.5448295618364776,-0.5438385377815317,-0.5428546851436159,-0.5418779135965075,-0.5409081344305273,-0.5399452605151303,-0.5389892062625561,-0.5380398875925038,-0.5370972218977971,-0.5361611280110072,-0.5352315131278579,-0.5343083250420063,-0.5333914735791278,-0.5324808830150977,-0.5315764789119503,-0.5306781880896242,-0.5297859385984678,-0.5288996596924799,-0.5280192818032644,-0.5271447365146741,-0.5262759565381235,-0.525412863575551,-0.5245554168268786,-0.5237035400516903,-0.5228571702374487,-0.5220162453850674,-0.5211807044878234,-0.5203504875108063,-0.5195255353708897,-0.5187057899172077,-0.5178911939121216,-0.5170816910126637,-0.5162772144601864,-0.5154777323015217,-0.5146831794081337,-0.5138935028392174,-0.5131086504625184,-0.5123285709383516,-0.5115532137040092,-0.510782528958542,-0.5100164676479084,-0.5092549814504765,-0.5084980227628714,-0.5077455341220383,-0.506997490510346,-0.5062538357707066,-0.5055145250378197,-0.5047795140987225,-0.5040487593805119,-0.5033222179383521,-0.5025998474437552,-0.5018816061731313,-0.5011674529965988,-0.5004573473670484,-0.499751239395101,-0.49904911941042335,-0.4983509090042874,-0.4976566091815965,-0.49696614304720177,-0.4962794929401706,-0.49559664128249176,-0.49491751336239376,-0.49424211167488286,-0.4935703629084907,-0.4929022701059775,-0.4922377613140195,-0.4915768400974974,-0.49091943582074415,-0.4902655525463379,-0.48961512091737075,-0.488968127298911,-0.48832455809121783,-0.4876843457858895,-0.4870474955902774,-0.48641394118396175,-0.48578368819515566,-0.4851566714575171,-0.4845328970004081,-0.48391230077894004,-0.48329488920481467,-0.4826805993231925,-0.48206942074226217,-0.48146134307069754,-0.48085630493239273,-0.48025431361812987,-0.47965530876832524,-0.4790592979967405,-0.4784662219327637,-0.4778760884978596,-0.4772888392838294,-0.4767044825052453,-0.476122960690712,-0.47554426607687655,-0.47496839087569753,-0.47439527897494616,-0.47382493926228164,-0.473257316502137,-0.4726924198290911,-0.4721301948616363,-0.47157065096935236,-0.4710137346029662,-0.47045945535565814,-0.46990776048931043,-0.4693586443822053,-0.46881210136979096,-0.468268079892718,-0.46772659005647627,-0.46718758106323266,-0.4666510632059152,-0.4661169864294996,-0.4655853612049988,-0.46505613820210656,-0.4645293280609652,-0.46400488215848723,-0.4634827966259358,-0.4629630675388098,-0.4624456473032785,-0.46193054694557956,-0.4614177195377862,-0.4609071762468018,-0.4603988707949937,-0.4598928144825535,-0.4593889616670264,-0.4588873237748237,-0.4583878557840252,-0.4578905552663312,-0.4573954197286377,-0.4569024050533662,-0.45641152295345333,-0.45592272989720156,-0.4554360377012619,-0.45495140340669443,-0.45446883892802187,-0.4539883018663355,-0.45350980422842857,-0.4530333041630799,-0.4525588004294142,-0.45208629171562403,-0.4516157369696818,-0.4511471484060342,-0.45068048549106543,-0.450215760513633,-0.44975293344742134,-0.4492920166510566,-0.448832970594735,-0.4483758077023981,-0.4479204889302772,-0.4474670140188521,-0.4470153826337274,-0.4465655564412015,-0.44611754801018927,-0.44567131946812505,-0.44522688343502637,-0.44478420248999384,-0.44434328930044986,-0.44390410688795623,-0.4434666679637918,-0.4430309359830305,-0.442596911498735,-0.4421645949867901,-0.4417339505363002,-0.4413049909535835,-0.4408776807399466,-0.4404520327342312,-0.44002801184182627,-0.4396056309311466,-0.439184855303762,-0.4387656978548286,-0.4383481242744073,-0.43793213578921114,-0.4375177335477048,-0.4371048838087153,-0.4366935995225973,-0.4362838473183241,-0.4358756401639451,-0.43546894505157735,-0.4350637749646095,-0.43466009725148086,-0.4342579249086587,-0.43385722563425955,-0.43345800121374456,-0.4330602533541763,-0.4326639502661017,-0.4322691049693792,-0.43187568600835435,-0.43148370640874184,-0.4310931350426138,-0.4307039849396615,-0.43031622529376407,-0.4299298691367848,-0.4295448859786376,-0.42916127806809606,-0.4287790475760708,-0.42839816447601786,-0.42801864179780874,-0.4276404498171188,-0.42726360156023174,-0.426888067599751,-0.4265138609568748,-0.4261409524959714,-0.42576935523171583,-0.42539904031520226,-0.425030010378942,-0.4246622679786239,-0.4242957846862472,-0.4239305734942712,-0.42356660624934267,-0.42320389593281493,-0.4228424146613493,-0.42248217540400274,-0.4221231505429266,-0.4217653530337401,-0.4214087555196655,-0.42105336095036594,-0.4206991722000908,-0.4203461622956071,-0.41999434415425263,-0.41964369105325766,-0.4192942158928893,-0.4189458921967661,-0.4185987328471428,-0.4182527116100442,-0.4179078413488106,-0.4175640960679803,-0.4172214789784723,-0.41687999321746294,-0.4165396131401531,-0.41620035155889973,-0.4158621830580609,-0.4155251204282157,-0.4151891384792805,-0.41485424997931686,-0.41452042996027944,-0.41418769116700455,-0.4138560088500422,-0.41352538643451014,-0.4131958272736356,-0.4128673069395696,-0.41253983811619094,-0.41221339658596007,-0.411887995007292,-0.4115636093697653,-0.4112402523057551,-0.41091790000883477,-0.41059656508479014,-0.41027622392813207,-0.4099568801384583,-0.4096385372454472,-0.4093211719394244,-0.4090047967574617,-0.4086893885834558,-0.40837495992615896,-0.40806148786019875,-0.4077489848655656,-0.4074374282048363,-0.40712683032881825,-0.40681716868531276,-0.4065084470147961,-0.4062006689898683,-0.4058938123311799,-0.40558788941487334,-0.4052828781402508,-0.4049787908529566,-0.40467560562840765,-0.4043733347814165,-0.40407195656102834,-0.403771483250908,-0.4034718932712922,-0.4031731904750537,-0.4028753786492671,-0.40257843646649294,-0.40228237613125345,-0.40198717648141563,-0.4016928496893773,-0.4013993747560386,-0.40110676382142785,-0.4008149960472486,-0.4005240835409296,-0.400234005622791,-0.3999447662339184,-0.3996563692516849,-0.3993687942303277,-0.39908205319485834,-0.3987961258528451,-0.3985110241959989,-0.3982267280831745,-0.39794324947261117,-0.3976605683724438,-0.397378688780493,-0.3970976146325642,-0.39681732615703497,-0.3965378273678814,-0.39625913005545804,-0.39598119896644907,-0.39570404598961106,-0.3954276673206464,-0.39515207468299196,-0.39487723327962154,-0.3946031549295771,-0.3943298359331937,-0.39405727261637863,-0.393785476618273,-0.39351441369741147,-0.3932440955851958,-0.39297451870755323,-0.3927056946357601,-0.392437589561381,-0.39217021514539213,-0.39190356791022984,-0.3916376593589991,-0.39137245610650573,-0.3911079697430912,-0.39084419688434013,-0.3905811341686166,-0.3903187930134765,-0.3900571405494957,-0.3897961882785165,-0.3895359329280506,-0.3892763858470185,-0.3890175145683531,-0.38875933052299944,-0.38850183052456816,-0.38824501140773354,-0.38798888443546337,-0.3877334176312901,-0.3874786223374954,-0.3872244954712194,-0.3869710482266021,-0.38671824901011087,-0.38646610909311957,-0.3862146254724626,-0.3859638092734433,-0.385713629277266,-0.38546409668446224,-0.38521520856890357,-0.3849669620233184,-0.384719368087014,-0.3844723959984727,-0.38422605686982403,-0.3839803478676628,-0.38373527996258733,-0.38349082275027924,-0.38324698727231005,-0.3830037707667198,-0.38276117048904335,-0.3825191973241601,-0.38227782130385185,-0.38203705338175037,-0.38179689088194485,-0.3815573446209131,-0.3813183849712646,-0.38108002281652203,-0.38084225554711937,-0.3806050939113193,-0.3803685086156307,-0.38013251047371216,-0.3798970969402198,-0.3796622654855435,-0.3794280267729809,-0.3791943519169812,-0.3789612516442547,-0.37872872348687664,-0.37849677804044596,-0.378265386738452,-0.37803456023838,-0.37780429613204897,-0.37757459202591975,-0.37734545843134704,-0.3771168671717871,-0.37688882881864394,-0.3766613410358002,-0.37643441426754415,-0.37620802064245423,-0.37598217066345274,-0.37575686205006614,-0.37553210517982927,-0.37530787248053876,-0.3750841743869941,-0.374861008672655,-0.37463837312420506,-0.3744162780362029,-0.3741946962024166,-0.37397363797302025,-0.37375310118658217,-0.3735330960716724,-0.3733135957085858,-0.37309461038023584,-0.3728761379755056,-0.37265817639561827,-0.37244073578717135,-0.3722237895810557,-0.3720073479766789,-0.3717914089236976,-0.3715759825035579,-0.3713610424217529,-0.37114659881135553,-0.3709326496690127,-0.37071920501141026,-0.370506238813575,-0.370293761142673,-0.3700817700409512,-0.3698702635618452,-0.36965925164165686,-0.369448708585407,-0.36923864437849413,-0.36902905711828643,-0.36881995667724277,-0.36861131761899785,-0.3684031498640387],"x":[-3.0,-3.0338645418326693,-3.0677290836653386,-3.101593625498008,-3.135458167330677,-3.1693227091633465,-3.2031872509960158,-3.237051792828685,-3.270916334661355,-3.304780876494024,-3.3386454183266934,-3.3725099601593627,-3.406374501992032,-3.4402390438247012,-3.4741035856573705,-3.50796812749004,-3.541832669322709,-3.5756972111553784,-3.6095617529880477,-3.643426294820717,-3.6772908366533863,-3.7111553784860556,-3.745019920318725,-3.7788844621513946,-3.812749003984064,-3.846613545816733,-3.8804780876494025,-3.914342629482072,-3.948207171314741,-3.9820717131474104,-4.01593625498008,-4.049800796812749,-4.083665338645418,-4.117529880478088,-4.151394422310757,-4.185258964143427,-4.219123505976095,-4.252988047808765,-4.286852589641434,-4.320717131474104,-4.354581673306773,-4.388446215139442,-4.422310756972111,-4.456175298804781,-4.49003984063745,-4.5239043824701195,-4.557768924302789,-4.591633466135458,-4.625498007968128,-4.659362549800797,-4.693227091633466,-4.727091633466135,-4.760956175298805,-4.794820717131474,-4.828685258964144,-4.862549800796812,-4.896414342629482,-4.930278884462151,-4.964143426294821,-4.99800796812749,-5.031872509960159,-5.065737051792829,-5.099601593625498,-5.133466135458168,-5.1673306772908365,-5.201195219123506,-5.235059760956175,-5.268924302788845,-5.302788844621514,-5.336653386454183,-5.370517928286852,-5.404382470119522,-5.438247011952191,-5.472111553784861,-5.50597609561753,-5.539840637450199,-5.573705179282869,-5.607569721115538,-5.6414342629482075,-5.675298804780876,-5.709163346613546,-5.743027888446215,-5.776892430278885,-5.8107569721115535,-5.844621513944223,-5.878486055776892,-5.912350597609562,-5.946215139442231,-5.9800796812749,-6.01394422310757,-6.047808764940239,-6.081673306772909,-6.115537848605578,-6.149402390438247,-6.183266932270916,-6.217131474103586,-6.250996015936255,-6.2848605577689245,-6.318725099601593,-6.352589641434263,-6.386454183266932,-6.420318725099602,-6.4541832669322705,-6.48804780876494,-6.52191235059761,-6.555776892430279,-6.589641434262949,-6.623505976095617,-6.657370517928287,-6.691235059760956,-6.725099601593626,-6.758964143426295,-6.792828685258964,-6.826693227091633,-6.860557768924303,-6.894422310756972,-6.9282868525896415,-6.96215139442231,-6.99601593625498,-7.02988047808765,-7.063745019920319,-7.097609561752988,-7.131474103585657,-7.165338645418327,-7.199203187250996,-7.233067729083666,-7.266932270916334,-7.300796812749004,-7.334661354581673,-7.368525896414343,-7.402390438247012,-7.436254980079681,-7.47011952191235,-7.50398406374502,-7.53784860557769,-7.5717131474103585,-7.605577689243028,-7.639442231075697,-7.673306772908367,-7.707171314741036,-7.741035856573705,-7.774900398406374,-7.808764940239044,-7.842629482071713,-7.876494023904383,-7.910358565737051,-7.944223107569721,-7.97808764940239,-8.01195219123506,-8.04581673306773,-8.079681274900398,-8.113545816733067,-8.147410358565738,-8.181274900398407,-8.215139442231076,-8.249003984063744,-8.282868525896415,-8.316733067729084,-8.350597609561753,-8.384462151394422,-8.418326693227092,-8.452191235059761,-8.48605577689243,-8.5199203187251,-8.55378486055777,-8.587649402390438,-8.621513944223107,-8.655378486055778,-8.689243027888446,-8.723107569721115,-8.756972111553784,-8.790836653386455,-8.824701195219124,-8.858565737051793,-8.892430278884461,-8.926294820717132,-8.9601593625498,-8.99402390438247,-9.02788844621514,-9.06175298804781,-9.095617529880478,-9.129482071713147,-9.163346613545817,-9.197211155378486,-9.231075697211155,-9.264940239043824,-9.298804780876495,-9.332669322709163,-9.366533864541832,-9.400398406374501,-9.434262948207172,-9.46812749003984,-9.50199203187251,-9.53585657370518,-9.569721115537849,-9.603585657370518,-9.637450199203187,-9.671314741035857,-9.705179282868526,-9.739043824701195,-9.772908366533864,-9.806772908366534,-9.840637450199203,-9.874501992031872,-9.908366533864541,-9.942231075697212,-9.97609561752988,-10.00996015936255,-10.04382470119522,-10.077689243027889,-10.111553784860558,-10.145418326693227,-10.179282868525897,-10.213147410358566,-10.247011952191235,-10.280876494023904,-10.314741035856574,-10.348605577689243,-10.382470119521912,-10.41633466135458,-10.450199203187251,-10.48406374501992,-10.51792828685259,-10.55179282868526,-10.585657370517929,-10.619521912350598,-10.653386454183266,-10.687250996015937,-10.721115537848606,-10.754980079681275,-10.788844621513944,-10.822709163346614,-10.856573705179283,-10.890438247011952,-10.92430278884462,-10.958167330677291,-10.99203187250996,-11.025896414342629,-11.0597609561753,-11.093625498007968,-11.127490039840637,-11.161354581673306,-11.195219123505977,-11.229083665338646,-11.262948207171315,-11.296812749003983,-11.330677290836654,-11.364541832669323,-11.398406374501992,-11.43227091633466,-11.466135458167331,-11.5,-11.533864541832669,-11.56772908366534,-11.601593625498008,-11.635458167330677,-11.669322709163346,-11.703187250996017,-11.737051792828685,-11.770916334661354,-11.804780876494023,-11.838645418326694,-11.872509960159363,-11.906374501992032,-11.9402390438247,-11.974103585657371,-12.00796812749004,-12.041832669322709,-12.07569721115538,-12.109561752988048,-12.143426294820717,-12.177290836653386,-12.211155378486056,-12.245019920318725,-12.278884462151394,-12.312749003984063,-12.346613545816734,-12.380478087649402,-12.414342629482071,-12.44820717131474,-12.48207171314741,-12.51593625498008,-12.549800796812749,-12.58366533864542,-12.617529880478088,-12.651394422310757,-12.685258964143426,-12.719123505976096,-12.752988047808765,-12.786852589641434,-12.820717131474103,-12.854581673306773,-12.888446215139442,-12.922310756972111,-12.95617529880478,-12.99003984063745,-13.02390438247012,-13.057768924302788,-13.091633466135459,-13.125498007968128,-13.159362549800797,-13.193227091633466,-13.227091633466136,-13.260956175298805,-13.294820717131474,-13.328685258964143,-13.362549800796813,-13.396414342629482,-13.430278884462151,-13.46414342629482,-13.49800796812749,-13.53187250996016,-13.565737051792828,-13.599601593625499,-13.633466135458168,-13.667330677290837,-13.701195219123505,-13.735059760956176,-13.768924302788845,-13.802788844621514,-13.836653386454183,-13.870517928286853,-13.904382470119522,-13.93824701195219,-13.97211155378486,-14.00597609561753,-14.0398406374502,-14.073705179282868,-14.107569721115539,-14.141434262948207,-14.175298804780876,-14.209163346613545,-14.243027888446216,-14.276892430278885,-14.310756972111554,-14.344621513944222,-14.378486055776893,-14.412350597609562,-14.44621513944223,-14.4800796812749,-14.51394422310757,-14.547808764940239,-14.581673306772908,-14.615537848605578,-14.649402390438247,-14.683266932270916,-14.717131474103585,-14.750996015936256,-14.784860557768924,-14.818725099601593,-14.852589641434262,-14.886454183266933,-14.920318725099602,-14.95418326693227,-14.98804780876494,-15.02191235059761,-15.055776892430279,-15.089641434262948,-15.123505976095618,-15.157370517928287,-15.191235059760956,-15.225099601593625,-15.258964143426295,-15.292828685258964,-15.326693227091633,-15.360557768924302,-15.394422310756973,-15.428286852589641,-15.46215139442231,-15.49601593625498,-15.52988047808765,-15.563745019920319,-15.597609561752988,-15.631474103585658,-15.665338645418327,-15.699203187250996,-15.733067729083665,-15.766932270916335,-15.800796812749004,-15.834661354581673,-15.868525896414342,-15.902390438247012,-15.936254980079681,-15.97011952191235,-16.00398406374502,-16.03784860557769,-16.07171314741036,-16.105577689243027,-16.139442231075698,-16.173306772908365,-16.207171314741036,-16.241035856573706,-16.274900398406373,-16.308764940239044,-16.342629482071715,-16.37649402390438,-16.410358565737052,-16.44422310756972,-16.47808764940239,-16.51195219123506,-16.545816733067728,-16.5796812749004,-16.61354581673307,-16.647410358565736,-16.681274900398407,-16.715139442231077,-16.749003984063744,-16.782868525896415,-16.816733067729082,-16.850597609561753,-16.884462151394423,-16.91832669322709,-16.95219123505976,-16.98605577689243,-17.0199203187251,-17.05378486055777,-17.08764940239044,-17.121513944223107,-17.155378486055778,-17.189243027888445,-17.223107569721115,-17.256972111553786,-17.290836653386453,-17.324701195219124,-17.358565737051794,-17.39243027888446,-17.426294820717132,-17.4601593625498,-17.49402390438247,-17.52788844621514,-17.561752988047807,-17.595617529880478,-17.62948207171315,-17.663346613545816,-17.697211155378486,-17.731075697211157,-17.764940239043824,-17.798804780876495,-17.83266932270916,-17.866533864541832,-17.900398406374503,-17.93426294820717,-17.96812749003984,-18.00199203187251,-18.03585657370518,-18.06972111553785,-18.10358565737052,-18.137450199203187,-18.171314741035857,-18.205179282868524,-18.239043824701195,-18.272908366533866,-18.306772908366533,-18.340637450199203,-18.374501992031874,-18.40836653386454,-18.44223107569721,-18.47609561752988,-18.50996015936255,-18.54382470119522,-18.577689243027887,-18.611553784860558,-18.64541832669323,-18.679282868525895,-18.713147410358566,-18.747011952191237,-18.780876494023904,-18.814741035856574,-18.84860557768924,-18.882470119521912,-18.916334661354583,-18.95019920318725,-18.98406374501992,-19.01792828685259,-19.051792828685258,-19.08565737051793,-19.1195219123506,-19.153386454183266,-19.187250996015937,-19.221115537848604,-19.254980079681275,-19.288844621513945,-19.322709163346612,-19.356573705179283,-19.390438247011954,-19.42430278884462,-19.45816733067729,-19.49203187250996,-19.52589641434263,-19.5597609561753,-19.593625498007967,-19.627490039840637,-19.661354581673308,-19.695219123505975,-19.729083665338646,-19.762948207171316,-19.796812749003983,-19.830677290836654,-19.86454183266932,-19.89840637450199,-19.932270916334662,-19.96613545816733,-20.0]}

},{}],99:[function(require,module,exports){
module.exports={"expected":[0.6933612743506348,0.6930996389232064,0.6928383979550643,0.6925775504066353,0.6923170952422556,0.6920570314301517,0.6917973579424217,0.6915380737550164,0.691279195995887,0.6910206873251679,0.6907625649056243,0.6905048277284307,0.690247474788521,0.689990505084571,0.6897339176189803,0.689477711397854,0.6892218854309847,0.6889664387318357,0.688711370317522,0.6884566792087939,0.6882023644300185,0.6879484250091632,0.6876948777524657,0.6874416861195044,0.6871888669498605,0.6869364192857296,0.686684342172822,0.686432634660346,0.6861812958009912,0.6859303246509121,0.6856797202697115,0.6854294817204242,0.6851796080695004,0.6849300983867904,0.6846809517455276,0.6844321672223127,0.6841837438970986,0.6839356982423858,0.68368799454118,0.6834406492978484,0.6831936616055925,0.6829470305608875,0.6827007552634666,0.6824548348163062,0.6822092683256102,0.6819640549007954,0.6817191936544758,0.6814746837024487,0.6812305241636791,0.6809867141602852,0.6807432528175237,0.6805001392637753,0.6802573896486622,0.6800149690462598,0.6797728936366724,0.6795311625606323,0.6792897749619241,0.6790487299873705,0.6788080267868191,0.6785676645131272,0.6783276423221489,0.678087959372721,0.6778486148266493,0.6776096078486951,0.6773709376065613,0.67713260327088,0.6768946206993086,0.6766569556766541,0.6764196240898416,0.6761826251210832,0.6759459579554534,0.675709621780876,0.675473615788111,0.6752379391707424,0.6750025911251641,0.6747675708505686,0.6745328775489332,0.6742985104250085,0.674064468686305,0.673830751543081,0.6735973582083302,0.6733643042365328,0.6731315561460118,0.6728991295192895,0.672667023580179,0.6724352375551674,0.6722037706734051,0.6719726221666924,0.6717417912694691,0.671511277218802,0.6712810792543727,0.6710511966184675,0.670821628555964,0.6705923743143206,0.6703634331435655,0.670134804296284,0.6699065030333423,0.6696784965791599,0.6694508002214936,0.6692234132230471,0.668996334849026,0.6687695643671269,0.6685431010475258,0.6683169441628678,0.668091092988256,0.6678655468012407,0.6676403048818086,0.6674153665123727,0.6671907309777605,0.6669663975652048,0.6667423812698068,0.6665186499515577,0.6662952186314357,0.6660720866061867,0.6658492531749104,0.6656267176390486,0.6654044793023753,0.6651825374709872,0.6649608914532924,0.664739540560002,0.6645184841041187,0.6642977214009277,0.6640772517679868,0.6638570745251163,0.6636371889943893,0.6634176098946654,0.6631983057430629,0.6629792912832917,0.66276056584634,0.6625421287654013,0.6623239793758644,0.6621061170153043,0.6618885410234729,0.6616712507422895,0.6614542455158319,0.6612375246903265,0.6610210876141401,0.6608049336377704,0.6605890621138365,0.6603734875109979,0.6601581789385343,0.6599431508890502,0.6597284027235625,0.6595139338051651,0.6592997434990204,0.6590858311723509,0.6588721961944298,0.6586588379365728,0.6584457557721296,0.6582329490764749,0.6580204172270008,0.6578081596031071,0.6575961755861939,0.6573844645596528,0.6571730407319155,0.656961873825175,0.6567509780708903,0.6565403528603363,0.6563299975867382,0.6561199116452634,0.6559100944330136,0.6557005453490165,0.6554912637942177,0.6552822491714737,0.6550735008855425,0.654865018343077,0.6546568009526165,0.6544488481245788,0.6542411592712535,0.6540337483486359,0.6538265856706323,0.6536196852153984,0.6534130464026305,0.6532066686538579,0.6530005513924351,0.6527946940435347,0.6525890960341397,0.652383756793036,0.652178675750805,0.6519738523398166,0.651769285994222,0.6515649761499456,0.6513609222446787,0.6511571380055627,0.6509535942805625,0.6507503048182122,0.6505472690631973,0.6503444864619347,0.6501419564625652,0.6499396785149465,0.6497376520706462,0.6495358765829353,0.6493343515067811,0.6491330762988402,0.6489320504174518,0.6487312733226313,0.6485307444760627,0.648330463341093,0.6481304434066151,0.6479306560742163,0.6477311148534021,0.6475318192141023,0.6473327686278766,0.6471339625679073,0.6469354005089935,0.6467370819275439,0.6465390063015708,0.6463411731106842,0.6461435818360846,0.6459462319605569,0.6457491229684648,0.6455522543457435,0.6453556255798942,0.6451592499284748,0.6449630993283687,0.6447671870570069,0.6445715126080915,0.6443760754768608,0.6441808751600814,0.643985911156043,0.6437911829645526,0.6435966900869283,0.6434024320259932,0.64320840828607,0.6430146183729742,0.6428210617940098,0.6426277380579616,0.6424346602124725,0.6422418006782623,0.6420491725221908,0.6418567752589128,0.6416646084045357,0.6414726714766144,0.6412809639941459,0.6410894854775633,0.6408982354487303,0.6407072134309356,0.6405164189488877,0.6403258515287089,0.6401355106979305,0.6399453959854867,0.6397555069217098,0.6395658563355149,0.6393764171498844,0.6391872022122823,0.6389982110585783,0.638809443226013,0.6386208982531927,0.6384325756800845,0.6382444750480107,0.638056595899644,0.6378689377790022,0.6376815002314427,0.6374942828036578,0.6373072850436697,0.637120506500825,0.6369339598054496,0.6367476183349056,0.6365614947374738,0.6363755885677491,0.6361898993816263,0.6360044267362946,0.635819170190233,0.6356341293032058,0.6354493036362573,0.6352646927517065,0.6350802962131437,0.6348961135854243,0.6347121444346646,0.6345283883282373,0.6343448448347664,0.6341615263775333,0.6339784068059894,0.6337954985607654,0.6336128012154442,0.6334303143448363,0.6332480375249764,0.6330659703331177,0.6328841123477281,0.6327024631484852,0.632521022316272,0.6323397894331726,0.632158764082467,0.6319779458486275,0.6317973343173141,0.6316169290753695,0.6314367423447381,0.6312567484323712,0.6310769595769854,0.6308973753701126,0.6307179954044453,0.630538819273834,0.6303598465732815,0.630181076898939,0.6300025098481028,0.629824157524565,0.6296459820118279,0.6294680329037615,0.6292902598655505,0.6291127123803879,0.628935340228406,0.6287581927825503,0.6285812199374399,0.6284044709561992,0.6282278958474761,0.6280515437649987,0.627875364830988,0.6276994080901982,0.6275236484252609,0.6273480608305033,0.6271726941880084,0.6269974989019502,0.6268225237464827,0.6266477192377792,0.6264731340424788,0.6262987187883104,0.6261245220348101,0.6259504945208204,0.6257766846991842,0.6256030434194193,0.6254296190280827,0.6252563624849306,0.6250833220306393,0.6249104729740664,0.6247377907325204,0.6245653233886156,0.6243930221758073,0.6242209350718322,0.6240490134188766,0.6238773050901978,0.6237057615362865,0.623534430526316,0.6233632636186588,0.6231923084787976,0.6230215167725659,0.6228509360621467,0.6226805181204165,0.6225103104066477,0.6223402886433201,0.6221704286582532,0.6220007777570828,0.6218312879784731,0.6216620065261131,0.6214928855442642,0.6213239721350504,0.6211552185479217,0.6209866717838173,0.6208182841969703,0.6206501026875131,0.6204820797140577,0.6203142620763059,0.6201466023368478,0.6199791471953281,0.6198118727757745,0.6196447553045703,0.6194778413319746,0.6193110836787777,0.6191445287961084,0.6189781296073475,0.6188119324648598,0.6186458903942258,0.618480049649411,0.6183143633578064,0.6181488776753419,0.6179835458308311,0.6178184138825297,0.617653458293095,0.6174886556250501,0.6173240517908155,0.6171596002710787,0.6169953468814809,0.6168312452027935,0.6166673409542335,0.6165035878162785,0.6163400314120735,0.6161766255214269,0.6160134156717632,0.6158503557418474,0.6156874911637327,0.615524775914769,0.6153622553319853,0.6151999062583688,0.6150377056340056,0.6148756986540393,0.6147138395406663,0.6145521733948668,0.6143906545361368,0.6142293279716345,0.6140681481177928,0.613907159888287,0.613746317796126,0.6135856666618402,0.6134251610946552,0.6132648458222926,0.6131046755498376,0.6129446949125371,0.6127848811229993,0.6126252114882739,0.6124657305055213,0.6123063931179235,0.6121472437309945,0.6119882373825409,0.6118294183867589,0.6116707418757309,0.6115122520726614,0.6113539042035624,0.6111957424009719,0.611037721984486,0.6108798869962994,0.6107221928492498,0.6105646834955099,0.6104073365070292,0.6102501295476435,0.6100931064350955,0.6099362228138336,0.6097795224123764,0.6096229609672263,0.6094665821179934,0.6093103416928993,0.6091542832429604,0.6089983626877838,0.6088426234901048,0.6086870216605849,0.608531600573989,0.6083763163317032,0.6082212122208325,0.6080662661627944,0.6079114561684346,0.607756825393949,0.6076023301660981,0.6074480135541852,0.6072938319745534,0.6071398284099182,0.6069859593658831,0.6068322677388781,0.6066787101234469,0.6065253293300354,0.6063720820418081,0.6062190109835272,0.6060660943717938,0.6059133105105836,0.6057607019966951,0.6056082257334557,0.6054559242327238,0.6053037544853436,0.605151758918527,0.6049998946103239,0.6048482039035933,0.6046966439632802,0.6045452570481825,0.6043940004098317,0.6042429162232554,0.6040919618262645,0.6039411793104048,0.6037905472243312,0.6036400442017859,0.6034897122096334,0.603339508800048,0.6031894758571292,0.6030395710182679,0.6028898360850824,0.6027402287798806,0.6025907908220826,0.6024414800186145,0.6022923380069788,0.6021433226784235,0.6019944755888135,0.6018457547134227,0.601697201526757,0.6015487949007058,0.6014005137900428,0.6012523995477576,0.6011044103579027,0.6009565874927996,0.6008088892195037,0.6006613567299417,0.6005139483738835,0.6003667052631335,0.6002195858298885,0.6000726311061022,0.5999257996061116,0.5997791322822893,0.5996325877308286,0.59948620682479,0.5993399687508109,0.5991938527762916,0.5990478996558274,0.5989020681890125,0.598756399051796,0.5986108511246425,0.5984654650051191,0.5983201996542827,0.598175095591581,0.5980301118583861,0.5978852888962882,0.5977405858266988,0.5975960430136111,0.597451619658202,0.5973073560471264,0.5971632316736005,0.5970192261095579,0.5968753795261329,0.5967316513227209,0.5965880815937609,0.5964446298174642,0.5963013360118289,0.5961581597336141,0.5960151409246306,0.5958722392199182,0.5957294944853534,0.5955868664339906,0.5954443948560231,0.5953020595039935,0.5951598402074488,0.595017776643529,0.5948758287191686,0.5947340360364475,0.5945923585793953,0.5944508358752791,0.5943094279849633,0.5941681743611482,0.5940270351412745,0.5938860497037208,0.5937451782622464,0.5936044601211518,0.5934638555702586,0.5933234038400321,0.5931830849751386,0.5930428790953383,0.5929028253207975,0.5927628841303793,0.5926230945710164,0.5924834171967469,0.5923438909815084,0.592204476554264,0.5920652128161934,0.5919260604709349,0.591787058347147,0.5916481672228948,0.5915094258545514,0.591370795094361,0.5912323136266456,0.591093961780852,0.5909557199596772,0.5908176267398051,0.5906796431578529,0.5905418077190343,0.5904040815332905,0.5902665030345952,0.5901290334059712,0.589991711010382,0.5898544971036916,0.5897174299780816,0.5895804709620174,0.5894436582771256,0.589306953324235,0.5891703942546441,0.5890339616754998,0.588897636265419,0.588761456070633,0.5886253826718385,0.5884894540454999,0.5883536318438508,0.5882179539738117,0.5880823821589194,0.5879469542367723,0.587811632001978,0.5876764532230334,0.5875413797653855,0.5874064493286495,0.5872716238488818,0.5871369409570347,0.5870023815311243,0.5868679265189181,0.5867336134487847,0.5865994044323003,0.5864653369297133,0.5863313731224109,0.586197550402737,0.5860638310216648,0.5859302523038477,0.5857967765696204,0.5856634410761588,0.5855302082129362,0.5853971151698637,0.5852641244053304,0.5851312730421939,0.5849985422227479,0.5848659131573773,0.5847334228687573,0.5846010339865971,0.5844687834670435,0.584336634007951,0.5842046224991461,0.5840727117064106,0.5839409384534582,0.583809265573781,0.5836777298251862,0.5835462941086609,0.5834149951163107,0.5832838142143135,0.5831527328355457,0.5830217875739467,0.5828909414983003,0.5827602311373544,0.5826296196266394,0.5824991434299142,0.5823687657492447,0.5822385229836017,0.5821083784013762,0.5819783683369517,0.5818484561248347,0.5817186780350209,0.5815889974679234,0.581459450629349,0.5813300191380504,0.5812006846779217,0.5810714833588592,0.5809423787451341,0.5808134068829469,0.5806845314017527,0.5805557882842518,0.5804271412248792,0.5802986261430295,0.5801702067979139,0.5800419190458157,0.5799137267105196,0.579785665585391,0.5796576995585859,0.5795298643607443,0.5794021418572288,0.5792745139770377,0.5791470163570828,0.5790196130455709,0.5788923396171658,0.5787651601837469,0.5786381102579186,0.5785111540150359,0.5783843269058324,0.5782575931689418,0.5781309881934148,0.5780044762809673,0.5778780927591547,0.5777518019925802,0.5776256392474894,0.5774995866300906,0.5773736263087704,0.5772477934581594,0.5771220525992299,0.5769964388457645,0.5768709167809472,0.5767455214578964,0.5766202175218164,0.5764950399653438,0.576369953495513,0.5762449930446605,0.5761201233814615,0.5759953793781334,0.5758707258648031,0.5757461976537497,0.5756217770864538,0.5754974465651652,0.5753732408125934,0.5752491248116723,0.5751251332256205,0.5750012310981693,0.5748774530332234,0.574753764135127,0.5746301989486485,0.5745067226385604,0.5743833696906698,0.574260105329995,0.5741369639835575,0.5740139281923744,0.5738909805570473,0.5737681554167487,0.5736454181463105,0.573522803026555,0.5734002754919235,0.5732778697650607,0.5731555513398378,0.5730333543808936,0.57291124444135,0.572789255628012,0.5726673535530732,0.5725455722656752,0.5724238774369061,0.5723023030584141,0.5721808318965701,0.572059446776003,0.571938181602439,0.5718170021934293,0.5716959423976281,0.5715749680908658,0.571454113064892,0.571333343253642,0.5712126923921276,0.5710921264722157,0.5709716791723461,0.5708513165421449,0.570731072203645,0.5706109122640599,0.5704908702891803,0.5703709292656631,0.5702510722371384,0.5701313326853433,0.5700116768607095,0.5698921381891405,0.5697726829780594,0.5696533445976985,0.5695340894123032,0.5694149507365963,0.5692958949914778,0.5691769554363219,0.5690580985485157,0.568939357532245,0.5688206989212179,0.5687021558645912,0.5685837115644017,0.568465349278415,0.5683471020735447,0.5682289366235745,0.5681108859407854,0.5679929167547046,0.5678750620231379,0.5677572885311922,0.5676396291823546,0.5675220508171495,0.5674045862849012,0.5672872024813895,0.5671699322019313,0.5670527423974003,0.5669356658092611,0.5668186858501795,0.5667017859873442,0.566584998881732,0.5664682916212475,0.5663516968133988,0.5662351816006254,0.5661187785371193,0.5660024548196962,0.5658862429493844,0.5657701101772177,0.5656540889512119,0.5655381465764623,0.5654223154481229,0.5653065791576772,0.5651909213501172,0.5650753743415868,0.5649599055716501,0.5648445473039638,0.5647292670316086,0.5646140969659021,0.5644990046532878,0.564384022252892,0.5642691173643672,0.5641543220947964,0.5640396040968885,0.5639249954258291,0.5638104637872314,0.5636960411845304,0.5635817114113654,0.5634674583137452,0.5633533138177536,0.5632392457605999,0.5631252860169803,0.5630114024764801,0.562897626962552,0.5627839274170081,0.562670335612201,0.5625568195420206,0.5624434109278629,0.5623300778155471,0.5622168518756547,0.5621037012057872,0.5619906574258532,0.5618777045273082,0.561764826552873,0.5616520550467143,0.5615393582352447,0.5614267676123105,0.561314251455594,0.5612018412087615,0.5610895052006201,0.560977274824795,0.5608651184610741,0.5607530674531808,0.5606410902317391,0.5605292180907088,0.5604174195114079,0.5603057257381697,0.5601941209560584,0.5600825894003328,0.5599711622411466,0.5598598080859267,0.5597485580555424,0.5596373808076176,0.5595263074138733,0.5594153065819899,0.5593044093346753,0.5591935844295258,0.5590828628403715,0.5589722133745851,0.5588616669572528,0.5587511924453853,0.5586408207154583,0.5585305361420652,0.558420323148955,0.5583102125399395,0.5582001732955179,0.5580902361712238,0.5579803701967117,0.5578706060793692,0.5577609128978701,0.5576513213115872,0.5575418004480774,0.5574323809188299,0.5573230319001493,0.5572137839557711,0.5571046063106132,0.5569955294807875,0.5568865380264588,0.5567776165559395,0.55666879551415,0.5565600442469526,0.5564513931519667,0.5563428116231992,0.556234330011097,0.5561259177576796,0.5560176051663486,0.5559093617270041,0.5558012176961293,0.555693142611374,0.5555851666824299,0.55547727462718,0.5553694512108047,0.5552617265730467,0.555154070370355,0.5550465126959956,0.5549390232537106,0.5548316320904138,0.5547243089570115,0.5546170838541903,0.5545099265798915,0.5544028670886983,0.5542958752254595,0.5541889808987782,0.5540821540002829,0.5539754243927197,0.5538687769724667,0.5537621966822446,0.5536557133162454,0.55354929688249,0.5534429771296192,0.553336724111991,0.553230567532816,0.5531244774926635,0.5530184836494357,0.5529125561497882,0.5528067246064347,0.5527009592119927,0.5525952895341081,0.552489685811236,0.5523841775660737,0.5522787498698617,0.5521733878392557,0.5520681209297545,0.5519629194938679,0.5518578129424428,0.5517527716733972,0.5516478250530443,0.5515429435245881,0.5514381564099261,0.5513334341974264,0.5512288061646881,0.5511242428451228,0.5510197734721476,0.5509153686240975,0.5508110574903236,0.5507068253134011,0.5506026573804201,0.5504985828148509,0.5503945723068118,0.550290654935996,0.5501868014370273,0.5500830408459366,0.5499793439417345,0.5498757397169042,0.5497721989947248,0.5496687507242459,0.549565365772898,0.5494620730464099,0.549358843456247,0.54925570586493,0.5491526456829436,0.5490496483644104,0.5489467427072524,0.5488438997325108,0.5487411481951807,0.5486384591599316,0.5485358613389438,0.5484333258403996,0.5483308813337754,0.5482284989706522,0.5481262073779132,0.5480239777504238,0.5479218386725844,0.547819775697704,0.5477177744219909,0.5476158633663286,0.5475140138332952,0.5474122543015657,0.5473105561166062,0.5472089477149916,0.5471074004849642,0.5470059428211078,0.5469045461543282,0.5468032388373262,0.5467019923435601,0.5466008349839556,0.5464997382744124,0.5463987304841882,0.5462977973283628,0.5461969245640845,0.5460961403983109,0.5459954164525609,0.5458947808923906,0.5457942053813751,0.5456937180437751,0.5455932905851127,0.5454929510884591,0.5453926713011742,0.5452924792652448,0.5451923467697608,0.5450923018157291,0.5449923162338615,0.5448924179842897,0.5447925929407084,0.5446928270180723,0.5445931481153968,0.5444935281669769,0.5443939950312126,0.5442945206836456,0.5441951329421632,0.5440958038234484,0.5439965611049784,0.5438973768444714,0.5437982787790969,0.5436992390075029,0.5436002852266538,0.5435013895760219,0.5434025797124679,0.543303841665232,0.5432051615040288,0.5431065668257543,0.5430080298714843,0.5429095781982637,0.5428111840876282,0.542712875056872,0.5426146234278877,0.5425164566783184,0.5424183471703106,0.5423203223419564,0.5422223545955536,0.5421244713297423,0.5420266449868697,0.5419289029262229,0.5418312313296036,0.5417336164185228,0.5416360854934246,0.5415386110963327,0.5414412204885845,0.5413438862518978,0.5412466356086006,0.5411494411800052,0.5410523301495271,0.5409552751779723,0.5408583034099416,0.5407613875456351,0.5406645546909351,0.5405677911575121,0.5404710832960994,0.540374458154684,0.5402778885315154,0.5401814014361025,0.5400849697057422,0.5399886203115609,0.539892326129805,0.5397961140933134,0.5396999571171838,0.5396038820960629,0.5395078619838024,0.5394119236369507,0.5393160400480165,0.5392202380355443,0.5391245040584104,0.5390288246138271,0.5389332264635099,0.538837682696186,0.5387422200358013,0.5386468116094022,0.5385514841032575,0.5384562106826379,0.538361017996228,0.5382658792474275,0.5381708210474286,0.5380758166376652,0.5379808925919296,0.537886022189595,0.5377912319671455,0.5376965085279046,0.5376018385128244,0.5375072484025988,0.537412711571037,0.5373182544617527,0.5372238504861663,0.5371295260509015,0.5370352546048967,0.5369410625178761,0.5368469232762036,0.5367528632127939,0.5366588558513437,0.5365649274880474,0.536471051683843,0.5363772546982943,0.5362835232764873,0.5361898442004471,0.5360962436749597,0.5360026953536631,0.5359092254049346,0.5358158075193336,0.535722467828917,0.5356291800610746,0.535535970311631,0.5354428123447164,0.5353497322200101,0.535256703738293,0.535163752923187,0.5350708536120333,0.5349780317924835,0.5348852743487722,0.5347925682014013,0.5346999392842305,0.5346073615256113,0.5345148608236492,0.5344224111429448,0.5343300383459354,0.5342377164333827,0.5341454712321417,0.534053276779047,0.5339611588654566,0.5338690915641904,0.5337771006311945,0.533685160175187,0.5335932959167868,0.5335014948768315,0.5334097441117718,0.533318069289396,0.5332264446077855,0.5331348956996123,0.5330433967985525,0.5329519735022458,0.5328606000798767,0.532769302094136,0.5326780538496313,0.5325868808741879,0.5324957575077507,0.5324047092433625,0.5323137232182419,0.5322227866046676,0.5321319248436647,0.5320411123631489,0.5319503745695687,0.5318596859258808,0.5317690718040394,0.5316785067019579,0.5315880159571778,0.5314975741024853,0.5314072064410907,0.53131688754057,0.5312266426698833,0.5311364464313125,0.5310463240596489,0.5309562628241377,0.5308662500284611,0.5307763108563087,0.5306864199963648,0.5305966025983504,0.5305068333853672,0.5304171374732481,0.5303274896194298,0.530237914905937,0.5301483881244595,0.530058934323293,0.5299695283282996,0.529880195154125,0.5297909096607223,0.5297016968291661,0.5296125440583669,0.5295234387810648,0.5294344059281261,0.5293454204443772,0.5292565072273093,0.5291676412555582,0.5290788473933181,0.5289901006529538,0.5289014258654403,0.5288127980767922,0.5287242420848425,0.528635732969176,0.5285472954945611,0.528458904774074,0.5283705855394952,0.5282823253170992,0.5281941116663973,0.5281059692698334,0.5280178733238662,0.527929848478143,0.5278418699623386,0.5277539623933803,0.5276661010340814,0.5275783104687243,0.5274905659931833,0.5274028921591717,0.5273152642955475,0.5272277069215299,0.5271401953988833,0.5270527542144083,0.5269653710194997,0.5268780334982116,0.5267907660888576,0.5267035442351312,0.5266163923431139,0.5265292858891379,0.5264422492471262,0.526355257925974,0.5262683362675201,0.5261814598131462,0.5260946528726811,0.5260078910199176,0.5259211985327474,0.525834563169232,0.5257479727196029,0.5256614514139847,0.5255749749068691,0.5254885673966263,0.5254022045698976,0.5253159105933711,0.525229661185763,0.5251434804821523,0.5250573442332559,0.5249712765426154,0.5248852531928747,0.5247992982561103,0.5247133875468192,0.5246275451056844,0.5245417588118491,0.5244560165760753,0.5243703423920906,0.5242847121537036,0.5241991498234266,0.5241136313266659,0.524028180594789,0.5239427735847272,0.5238574341967744,0.5237721384193147,0.5236869101216383,0.5236017253235099,0.5235166078632867,0.5234315337920421,0.5233465269172701,0.5232615752371087,0.5231766667807767,0.5230918253096044,0.5230070269526241,0.522922295440477,0.5228376069332542,0.522752985130977,0.5226684062247254,0.5225838938839689,0.5224994243307056,0.5224150212039229,0.5223306607564664,0.5222463665969095,0.5221621150088754,0.5220779295705918,0.5219937983971558,0.5219097096342198,0.5218256868146216,0.5217417062986226,0.5216577915888846,0.521573919076203,0.5214901122331312,0.52140634748093,0.5213226482621115,0.5212389910283327,0.521155399192132,0.5210718492354939,0.5209883645410497,0.5209049216210431,0.5208215438282652,0.5207382193927855,0.5206549365747167,0.5205717186822152,0.5204885423028736,0.5204054307151734,0.5203223605367294,0.5202393550164142,0.5201563908017965,0.5200734911122062,0.519990632625099,0.5199078385303274,0.5198250855351669,0.5197423968000582,0.5196597606531439,0.5195771654521757,0.5194946343135992,0.5194121440189471,0.5193297176554154,0.5192473320341239,0.5191650102130835,0.5190827290329354,0.5190005115225698,0.5189183345520831,0.5188362211213091,0.5187541481297342,0.5186721385481994,0.5185901693055158,0.5185082633435956,0.5184264091019732,0.518344595049303,0.5182628440842239,0.5181811332085723,0.5180994852922175,0.5180178773660931,0.5179363322713613,0.5178548270679881,0.5177733845684919,0.5176919818618072,0.5176106417318709,0.517529341296522,0.5174481033111782,0.5173669049225192,0.5172857688575063,0.5172046836652133,0.517123637923355,0.5170426543163249,0.516961710062625,0.5168808278183475,0.5167999848306131,0.5167192037272735,0.5166384617840053,0.5165577816004819,0.5164771404808726,0.5163965609967333,0.5163160204806639,0.5162355414761641,0.5161551013442017,0.5160747226002811,0.5159943939012065,0.5159141039319557,0.5158338751661546,0.5157536850354185,0.5156735559855294,0.5155934654762541,0.5155134359255903,0.5154334448213947,0.5153535145539418,0.5152736226391162,0.5151937914395288,0.5151139984990315,0.5150342661526307,0.5149545719720853,0.5148749382648565,0.5147953537937128,0.5147158073491391,0.514636321197392,0.5145568729797301,0.5144774849350131,0.5143981347321944,0.5143188445827959,0.5142395921834054,0.5141603997182654,0.5140812449115391,0.5140021499202475,0.513923092496069,0.5138440947688626,0.5137651345177618,0.5136862338455213,0.5136073816191478,0.513528566732919,0.5134498112490424,0.5133710930150308,0.5132924340661316,0.5132138122771062,0.5131352496563,0.5130567241056644,0.5129782576066996,0.5128998280884888,0.5128214575057444,0.5127431238146226,0.5126648489431049,0.5125866218471737,0.5125084315097042,0.5124302998186886,0.5123522047977117,0.5122741683081767,0.5121961684005393,0.5121182269096695,0.5120403219128358,0.511962475218432,0.5118846649304822,0.5118069128309598,0.5117291970505873,0.5116515393449732,0.5115739178714818,0.5114963543594128,0.5114188378658728,0.5113413574744341,0.5112639348750382,0.5111865482914035,0.5111092193873013,0.5110319264128931,0.510954691005835,0.510877491442676,0.5108003493350115,0.5107232429857216,0.5106461939803963,0.510569180648191,0.5104922245487447,0.5104153040374321,0.5103384406479962,0.5102616235370538,0.5101848418872704,0.5101081171936469,0.5100314278768628,0.5099547954061584,0.5098781982282391,0.509801657786638,0.5097251525540314,0.509648703948299,0.5095722904680334,0.5094959335055146,0.5094196115851963,0.5093433460738124,0.5092671155216236,0.5091909412698707,0.509114812573104,0.5090387187115137,0.5089626809882013,0.508886678017707,0.5088107310777717,0.5087348188085533,0.5086589624624849,0.5085831407052882,0.5085073747641408,0.508431643330275,0.5083559676056656,0.5082803263070015,0.5082047406111069,0.5081291892600747,0.5080536934056302,0.5079782423987156,0.5079028256155137,0.5078274641702002,0.5077521368681444,0.5076768647985531,0.507601626792014,0.5075264439128165,0.5074512950167144,0.507376201143131,0.5073011411729335,0.5072261361207305,0.5071511648924509,0.5070762484779394,0.5070013763104572,0.5069265378481671,0.5068517540438648,0.5067770038659045,0.5067023082424449,0.5066276461667197,0.5065530385423022,0.5064784643872542,0.5064039445806131,0.5063294581652181,0.506255025995621,0.5061806271393866,0.5061062824266317,0.5060319709495958,0.5059577135140103,0.5058834996467421,0.5058093188991765,0.5057351920405618,0.5056610982246006,0.5055870581962801,0.5055130511338001,0.5054390977579362,0.5053651772713348,0.5052913103706097,0.5052174762828037,0.5051436956804176,0.5050699478148406,0.5049962533345095,0.5049225915151101,0.5048489829810642,0.5047754173513989,0.5047018842692853,0.5046284043232159,0.5045549568493981,0.5044815624124309,0.5044082003726448,0.5043348912707937,0.5042616144912814,0.5041883905510653,0.5041151988585734,0.5040420599070148,0.5039689531287925,0.5038958989934152,0.5038228769572122,0.5037499074660396,0.5036769802296709,0.5036040849816578,0.5035312421324678,0.5034584311980321,0.5033856725652849,0.5033129457739138,0.5032402711873668,0.5031676283690396,0.5030950376589411,0.5030224786441275,0.5029499716412156,0.5028774962608735,0.5028050727963737,0.5027326808819481,0.5026603407875713,0.5025880423123805,0.5025157752789332,0.5024435599223449,0.5023713759355494,0.5022992435304808,0.5022271424234711,0.5021550928033194,0.502083074409708,0.5020111074083474,0.5019391715622237,0.5018672870140044,0.5017954335499327,0.5017236312896793,0.5016518701087351,0.5015801399057063,0.5015084607658551,0.5014368125333614,0.5013652152706051,0.5012936488448595,0.5012221332956677,0.5011506485133504,0.5010792145146592,0.5010078112129156,0.5009364586021252,0.5008651366185646,0.5007938652335381,0.5007226244062315,0.5006514340852931,0.5005802842330762,0.5005091648347052,0.500438095804929,0.5003670571600054,0.5002960687921392,0.5002251107403374,0.5001542028743056,0.5000833252557547,0.5000124977319351,0.4999417003872166,0.4998709431225835,0.49980024573482684,0.49972956850012895,0.49965893122662247,0.49958833387478385,0.49951779619682596,0.4994472785588037,0.49937680072422563,0.49930638241198627,0.4992359840553101,0.49916562538435383,0.4990953063599829,0.49902504665681935,0.49895480679733906,0.49888460646738153,0.4988144456280323,0.4987443439098137,0.49867426192410197,0.4986042193125925,0.49853423567284816,0.4984642716826879,0.49839434695081425,0.4983244614386932,0.49825463470008896,0.49818482750110976,0.4981150594066156,0.4980453303782883,0.49797565992626475,0.4979060089045951,0.49783639683446856,0.49776682367778075,0.49769730890121106,0.4976278134464074,0.49755835679105803,0.49748895836936113,0.4974195791884363,0.4973502386934579,0.49728093684669167,0.49721169303917373,0.4971424683650225,0.4970732822262068,0.49700413458520215,0.4969350447900495,0.4968659740215269,0.4967969416385654,0.4967279476038485,0.4966590112225883,0.49659009376188534,0.49652121453779907,0.49645239282352915,0.49638358995069604,0.49631482520331516,0.4962460985444309,0.49617742920470304,0.4961087786014884,0.49604016597622014,0.4959715912921468,0.4959030737375519,0.4958345748151964,0.4957661137240955,0.49569769042770023,0.49562932407208093,0.49556097624507217,0.49549266610343423,0.4954244127616849,0.49535617787124653,0.4952879805572955,0.49521982078363386,0.4951517176228494,0.4950836328108636,0.4950155854308818,0.4949475754469045,0.49487962188974977,0.4948116865795134,0.4947437885575899,0.49467592778817693,0.49460812326048254,0.4945403368784531,0.4944725876418319,0.49440489450872444,0.49433721944575204,0.494269581421525,0.4942019804005828,0.49413443529969825,0.4940669081687808,0.49399941793506735,0.4939319645632912,0.4938645669290493,0.4937971871652205,0.493729844157826,0.493662537871791,0.4935952871416934,0.4935280541830643,0.4934608578408659,0.49339371691901457,0.4933265936948223,0.49325950698255955,0.4931924567474843,0.4931254617527655,0.4930584843578166,0.49299154333612083,0.4929246386531245,0.4928577890314035,0.49279095691215996,0.4927241610282445,0.49265740134529046,0.49259069654543347,0.492524009151354,0.4924573578554237,0.49239076130954884,0.49232418209731454,0.4922576388808338,0.4921911316260636,0.4921246789447366,0.4920582435013766,0.49199184391788364,0.49192548016039844,0.4918591708006306,0.49179287858373644,0.49172662209155477,0.4916604012904082,0.49159423471213365,0.49152808518221586,0.49146197124258223,0.4913959113952641,0.49132986852579213,0.4912638611462593,0.491197889223304,0.4911319712193457,0.4910660700997144,0.4910002043368533,0.49093437389757966,0.4908685972048487,0.4908028373034903,0.49073711262644587,0.49067142314070994,0.49060578722992143,0.4905401680181111,0.4904745838988664,0.4904090532264357,0.49034353918405427,0.4902780601358908,0.4902126160492474,0.49014722523931137,0.49008185096800105,0.4900165115603871,0.4899512069839453,0.4898859555149477,0.4898207204937011,0.48975552020632357,0.4896903546204636,0.48962524197362184,0.4895601456842018,0.4894950839995128,0.4894300751280716,0.48936508254666183,0.48930012447358173,0.4892352008767797,0.4891703299262516,0.48910547517636976,0.48904065480687503,0.48897586878588534,0.4889111352450183,0.48884641781594634,0.4887817346399956,0.4887170856854524,0.48865248904569714,0.48858790842941635,0.48852336193966256,0.4884588676412316,0.4883943893003816,0.4883299449915537,0.4882655346833261,0.4882011764025033,0.4881368339918595,0.4880725254878085,0.4880082508590939,0.48794402809466836,0.4878798211135394,0.4878156479142333,0.4877515264574056,0.48768742071905313,0.48762334866937823,0.4875593102774114,0.4874953234661983,0.4874313522874786,0.4873674146738097,0.4873035105943843,0.48723965793477597,0.4871758208221885,0.4871120171516723,0.4870482468925809,0.4869845278931527,0.48692082435577866,0.48685715413813885,0.4867935350605602,0.48672993138164183,0.48666636093112636,0.4866028236786465,0.48653933740743127,0.4864758664507859,0.48641242860132067,0.48634902382882644,0.4862856698795692,0.4862223311612874,0.4861590254295936,0.48609575265443583,0.4860325305452513,0.48596932358393985,0.4859061494892511,0.4858430259430885,0.4857799174827948,0.48571684179956026,0.4856537988636052,0.4855908063202373,0.48552782878048895,0.4854648838989206,0.4854019716459067,0.4853391096302912,0.4852762625365285,0.4852134479826816,0.4851506659392782,0.4850879339788297,0.4850252168589466,0.4849625321613259,0.484899897431317,0.48483727748122135,0.48477468986554867,0.48471213455509204,0.4846496290590969,0.48458713826255784,0.4845246796838475,0.4844622532939093,0.4843998765660148,0.484337514457589,0.4842751844509974,0.48421288651733285,0.4841506380940216,0.48408840421065824,0.48402620231373045,0.4839640498138658,0.4839019117946138,0.48383980567563883,0.48377773142829217,0.4837157064275808,0.4836536958287697,0.48359171701586956,0.4835297699603785,0.4834678720018098,0.4834059883668862,0.48334413640409263,0.4832823160850726,0.4832205447139723,0.48315878758871655,0.48309706202239056,0.48303538529269835,0.48297372275079775,0.4829120916833076,0.4828504920621243,0.48278894112980475,0.482727404308263,0.48266589884893907,0.48260442472387227,0.482542999140597,0.4824815875915316,0.4824202072930617,0.4823588582173686,0.4822975575370887,0.48223627081489284,0.482175015232237,0.48211380793566566,0.48205261454037374,0.4819914522017017,0.48193032089207694,0.4818692377233617,0.48180816838056684,0.4817471299843189,0.48168612250718484,0.48162516302646685,0.4815642172967441,0.48150330240405176,0.48144241832109547,0.48138158209073934,0.4813207595368839,0.48125996771109547,0.4811992236304897,0.48113849317079604,0.4810777933578091,0.4810171241644747,0.4809565025736823,0.48089589453005427,0.48083531702512816,0.4807747700319857,0.48071427049941035,0.48065378444067436,0.48059332881317834,0.4805329035901393,0.48047252568635396,0.48041216118350255,0.48035182700496865,0.4802915400401374,0.4802312664218361,0.480171023048014,0.48011080989212285,0.48005064380976886,0.4799904910017668,0.479930368332257,0.4798702757748237,0.4798102301514127,0.4797501977305872,0.4796901953427968,0.47963022296175756,0.47957029737587165,0.47951038492121395,0.47945050239466036,0.4793906665595326,0.4793308438023829,0.47927105089498434,0.47921128781128197,0.47915157128125785,0.4790918677585631,0.47903219398160163,0.478972549924448,0.47891295228386027,0.4788533675803545,0.4787938125190811,0.4787343037719564,0.4786748079094908,0.4786153416119709,0.4785559048536962,0.47849651427356044,0.47843713650853154,0.4783777882058443,0.4783184693399254,0.4782591965167602,0.4781999364395433,0.4781407057225719,0.47808150434039925,0.4780223488662157,0.4779632060692127,0.477904092530864,0.4778450247998382,0.4777859696946735,0.47772694377230035,0.4776679470074912,0.47760899591631756,0.47755005738291517,0.4774911479315881,0.4774322675372332,0.47737343268343674,0.47731461031970507,0.4772558169378286,0.4771970525128274,0.4771383334959141,0.4770796269017402,0.47702094918969384,0.47696231678678064,0.4769036967563622,0.47684510553359877,0.4767865430937248,0.47672802583156604,0.4766695208752372,0.4766110446276903,0.4765525970642811,0.4764941945477656,0.47643580427078897,0.4763774426042053,0.47631910952349105,0.4762608213594417,0.47620254536901163,0.47614429789106644,0.476086095232504,0.4760279046983642,0.475969742603594,0.475911608923879,0.47585351993434644,0.4757954430039608,0.47573739441587126,0.4756793741458818,0.47562139843745777,0.47556343472326923,0.47550549925477603,0.47544759200789954,0.4753897291945512,0.47533187831088863,0.4752740555767903,0.47521627718057224,0.47515851066586523,0.47510077222893193,0.4750430618458983,0.47498539567371295,0.4749277413191168,0.4748701149469782,0.4748125165335384,0.4747549622044848,0.4746974196294541,0.4746399049420259,0.4745824181185566,0.4745249752535782,0.47446754407940894,0.47441014069844606,0.47435278118192403,0.4742954333090325,0.4742381131588512,0.4741808207079359,0.47412357199654886,0.4740663348661908,0.47400912536494255,0.4739519434694729,0.47389480518917626,0.4738376784276534,0.47378057920209077,0.4737235074892694,0.4736664792678194,0.47360946250323227,0.47355247318190385,0.4734955272594592,0.4734385927476698,0.4733816856099068,0.47332480582314596,0.4732679693124286,0.4732111441510523,0.47315434627177805,0.4730975756516921,0.47304084818535386,0.4729841320073805,0.4729274430200252,0.47287078120048376,0.4728141624129361,0.4727575548531126,0.4727009743928607,0.47264443687364266,0.4725879105368881,0.4725314112317077,0.4724749389354875,0.4724185094594868,0.4723620911058911,0.4723056996935823,0.4722493352000544,0.47219301340646486,0.4721367026755509,0.47208041879606716,0.47202416174561457,0.4719679472753483,0.47191174380835593,0.4718555671033644,0.47179943288909304,0.4717433096337589,0.4716872130736339,0.4716311431865051,0.4715751156712641,0.47151909905612593,0.4714631090475096,0.4714071456233073,0.471351224452681,0.4712953141236451,0.4712394303128636,0.4711835729983336,0.47112775781958616,0.4710719534242356,0.47101617545928987,0.47096043954212174,0.4709047143649147,0.47084901555249964,0.47079334308305526,0.4707377125444938,0.4706820926882538,0.47062649910968124,0.4705709317870576,0.4705154062789321,0.47045989139580197,0.4704044027036253,0.47034894018078605,0.47029351935656666,0.47023810910032804,0.47018272494873725,0.47012738240919044,0.4700720503950677,0.4700167444211314,0.46996146446594295,0.4699062260077997,0.4698509980186063,0.46979579598400195,0.4697406198826486,0.4696854851638405,0.4696303608578138,0.46957526242118014,0.4695202052815442,0.469465158512764,0.46941013754974326,0.46935514237131853,0.469300188376257,0.4692452446964133,0.46919032673782973,0.46913543447944184,0.46908058329127317,0.46902574236298494,0.4689709270718523,0.46891613739690874,0.46886138867952837,0.46880665016698964,0.4687519372078942,0.46869726512218995,0.46864260320024426,0.4685879667692148,0.4685333558083061,0.46847878560897943,0.4684242255188901,0.4683696908366857,0.4683151815416672,0.4682607128969014,0.4682062543071454,0.4681518210426285,0.4680974130827478,0.46804304566226823,0.46798868824286166,0.4679343560664322,0.46788006434657814,0.467825782587536,0.46777152601002603,0.4677172945936119,0.4676631035237501,0.467608922361269,0.46755476629872345,0.4675006353157718,0.4674465445698189,0.46739246367810183,0.4673384078051009,0.4672843769305684,0.4672303861839483,0.4671764052387034,0.4671224492313302,0.46706853327036146,0.4670146270713089,0.4669607457497407,0.4669068892855722,0.4668530727595329,0.4667992659430425,0.4667454839238426,0.46669172668194114,0.46663800927035326,0.46658430151622615,0.4665306184795646,0.46647696014046836,0.4664233415243273,0.46636973251383657,0.46631614814135297,0.4662626034116061,0.46620906824883357,0.4661555576647152,0.46610207163950995,0.4660486251504768,0.465995188177089,0.46594177570353307,0.4658883877101586,0.46583503914684166,0.46578170004811376,0.46572838537075617,0.4656750950952083,0.465621844144051,0.46556860260669725,0.4655153854126108,0.46546220746395855,0.46540903889119833,0.4653558946033637,0.4653027745810496,0.4652496936992797,0.46519662214308655,0.46514357479433793,0.4650905516337176,0.46503756750919195,0.46498459266019365,0.46493164194151204,0.4648787153339183,0.46482582765840774,0.46477294920864015,0.4647200948124114,0.4646672792705451,0.46461447291725677,0.4645616905601543,0.4645089321801616,0.4644562125512807,0.464403502061652,0.4643508154920401,0.46429815282345543,0.4642455288031631,0.4641929138730572,0.4641403227871441,0.46408775552652,0.4640352268117979,0.4639827071384546,0.4639302112338229,0.4638777537985821,0.4638253053682839,0.4637728806503115,0.4637204796259104,0.4636681169692544,0.4636157632691818,0.46356343320654897,0.463511126762686,0.46345885858534475,0.4634065993164815,0.46335436361050947,0.46330215144884257,0.46324997745289426,0.4631978123175706,0.46314567067092494,0.46309356711467126,0.46304147238331766,0.4629894010852026,0.4629373532018858,0.46288534330888687,0.4628333421933725,0.46278136443746576,0.4627294100228092,0.46267749349881004,0.46262558570512774,0.4625737011977522,0.4625218399584082,0.46247001651047237,0.46241820174593223,0.46236641019472613,0.4623146563607616,0.4622629111751633,0.462211189148385,0.4621594902622943,0.4621078289949104,0.46205617632939855,0.4620045467503039,0.4619529402395748,0.46190137124942243,0.4618498108148907,0.46179827339469587,0.461746758970867,0.46169528196988785,0.4616438134785181,0.4615923679297264,0.4615409597307538,0.46148956000704006,0.46143818317229596,0.46138682920869006,0.4613355124978757,0.4612842042167267,0.4612329187533458,0.4611816560899806,0.46113043058277614,0.4610792134598801,0.46102801908386637,0.460976861791801,0.46092571285018136,0.46087458660248737,0.46082348303110443,0.4607724164477281,0.46072135816985066,0.46067032251556217,0.4606193094673255,0.46056833331154434,0.4605173654165482,0.4604664200751148,0.4604154972697848,0.460364611261748,0.4603137334700132,0.4602628781621243,0.4602120595804122,0.4601612491817914,0.46011046121493215,0.46005969566250965,0.4600089667417765,0.45995824596005247,0.45990754754091023,0.4598568714671012,0.45980623193087683,0.4597556004898068,0.459704991342443,0.45965440447161293,0.45960385404464343,0.4595533116691994,0.45950279151888873,0.45945230774239626,0.45940183198485535,0.459351378401217,0.4593009469744402,0.45925055182841906,0.4592001646581121,0.45914979959366037,0.4590994566180976,0.4590491498306027,0.45899885097580684,0.45894857415911694,0.45889831936364067,0.45884810066391785,0.45879788985409936,0.45874770101493345,0.45869754820253045,0.45864740324808045,0.45859728021388785,0.45854717908318926,0.45849711388758696,0.45844705650752576,0.45839702098078317,0.4583470072906689,0.45829702944435186,0.45824705937138105,0.45819711108508154,0.45814718456883596,0.45809729380545394,0.4580474107734389,0.45799754946173815,0.4579477238349411,0.4578979059081679,0.4578481096521316,0.45779833505034073,0.4577485960431549,0.4576988646943878,0.457649154950504,0.4575994667950834,0.4575498141443295,0.45750016911060126,0.4574505456161879,0.457400943644741,0.4573513770883805,0.45730181810786313,0.45725228060137657,0.45720277844302676,0.4571532838297715,0.45710381064177047,0.45705435886279827,0.45700494234300476,0.45695553332748917,0.4569061456724365,0.4568567793616915,0.4568074482215201,0.4567581245450171,0.45670882216446523,0.45665954106377915,0.4566102950454127,0.456561056450311,0.4565118390869269,0.4564626567399028,0.45641348178597585,0.4563643280157738,0.4563151954133319,0.45626609773960597,0.4562170074189311,0.45616793821823015,0.4561188901216069,0.45606987686640155,0.4560208709244038,0.4559718860389025,0.45592292219406994,0.4558739931037012,0.4558250712868978,0.4557761704633859,0.4557273043293486,0.45567844543927716,0.4556296074952721,0.45558079048162414,0.45553200807109456,0.455483232865238,0.4554344785427157,0.4553857450878851,0.45533704615015586,0.45528835437800497,0.45523968342672383,0.4551910332807369,0.45514241756617174,0.455093808978287,0.45504522114907425,0.4549966676872451,0.4549481213230522,0.454899595671058,0.4548510907158032,0.4548026200428384,0.45475415642895345,0.4547057134655326,0.45465729113718195,0.45460890300636025,0.4545605218962557,0.45451216137514283,0.4544638214276935,0.45441551559334253,0.4543672167415385,0.45431893841751503,0.45427069414348453,0.45422245682349965,0.45417423998555845,0.45412604361444625,0.45407788120947107,0.4540297257207054,0.4539815906532257,0.4539334759918816,0.45388539521314464,0.45383732131297033,0.4537892677735813,0.45374124805436633,0.45369323518560306,0.4536452426324185,0.45359727037977454,0.45354933186434093,0.45350140016204077,0.4534534887152654,0.4534055975090399,0.45335773995738265,0.45330988918172677,0.4532620586017949,0.4532142482026754,0.4531664713758014,0.45311870128798193,0.4530709513363377,0.45302323489540725,0.45297552516594247,0.45292783552815696,0.4528801659672484,0.4528325298352863,0.45278490037816443,0.4527372909536103,0.452689701546884,0.452642145487652,0.4525945960668168,0.45254706661968624,0.452499557131582,0.45245208090983335,0.45240461129021914,0.45235716158569317,0.4523097450868747,0.45226233516311265,0.45221494511063864,0.4521675749148819,0.4521202378442387,0.4520729073127037,0.452025596594269,0.4519783056744247,0.45193104779940874,0.45188379642773097,0.451836564811209,0.45178935293539313,0.4517421740244279,0.45169500158120807,0.451647848835441,0.45160072899474335,0.45155361559521273,0.4515065218500166,0.4514594477448106,0.45141240646523056,0.45136537159153206,0.4513183563148851,0.45127136062100515,0.4512243976736105,0.4511774410969862,0.45113050406036864,0.4510835865495329,0.45103670170634336,0.4509898231989862,0.45094296417482793,0.45089613775938503,0.4508493176536847,0.45080251698873314,0.4507557357504085,0.45070898704248413,0.4506622446096648,0.45061552156119816,0.45056881788302067,0.45052214665722556,0.45047548167206874,0.4504288360151018,0.4503822096723192,0.450335615704197,0.4502890279424157,0.45024245945289354,0.4501959232799348,0.4501493932877051,0.4501028825259391,0.45005639098073247,0.45000993167488124,0.44996347851575574,0.4499170445315667,0.44987062970846686,0.44982424704780605,0.4497778705000345,0.4497315130719007,0.44968517474961467,0.4496388685131412,0.44959256835588635,0.44954628726319823,0.4495000381990438,0.44945379518896383,0.4494075712022968,0.4493613662253517,0.44931519320081825,0.44926902619697634,0.4492228781618717,0.4491767490818693,0.4491306518784426,0.44908456066248764,0.44903848836081833,0.4489924349598558,0.44894641335991753,0.4489003977143935,0.4488544009289266,0.4488084358880078,0.4487624767768165,0.4487165364851576,0.4486706149995491,0.4486247251834319,0.44857884126426656,0.4485329761107924,0.4484871297095826,0.4484413149030883,0.44839550596092953,0.44834971573084065,0.4483039441994495,0.4482582041882774,0.4482124700089831,0.4481667544883562,0.4481210704322594,0.4480753921838016,0.4480297325541027,0.4479840915298857,0.4479384818961878,0.4478928780379469,0.44784729274544205,0.4478017260054502,0.44775619058224164,0.4477106609024645,0.44766514973561583,0.4476196570685264,0.44757419564475864,0.44752873993255193,0.44748330268068054,0.447437896617215,0.4473924962415097,0.4473471142868356,0.4473017507401171,0.4472564183088189,0.4472110915336804,0.4471657831273524,0.44712049307681195,0.447075234068977,0.44702998068585376,0.4469847456195316,0.4469395288570399,0.4468943430648079,0.4468491628659918,0.44680400093217726,0.4467588699144648,0.44671374446679635,0.44666863724541783,0.44662354823745043,0.44657849007360667,0.44653343744877505,0.44648840299879905,0.44644338671085165,0.4463984011953146,0.4463534211879076,0.44630845930412893,0.4462635281391503,0.4462186024592384,0.4461736948646705,0.4461288053427096,0.4460839464682968,0.4460390930483283,0.4459942576628363,0.445949440299135,0.44590465351199154,0.44585987214881734,0.4458151087694562,0.44577036336127346,0.44572564845891843,0.44568093895020416,0.4456362473748429,0.4455915862524334,0.44554693050101446,0.44550229264523683,0.4454576726725537,0.445413083082545,0.4453684988334529,0.44532393242989454,0.4452793838593735,0.44523486560150644,0.4451903526546261,0.4451458575033721,0.4451013801352982,0.4450569330101135,0.44501249116612884,0.4449680670680627,0.4449236731607303,0.4448792845123521,0.4448349135727423,0.44479056032954106,0.44474623720775297,0.4447019193153817,0.4446576190824168,0.44461333649654744,0.4445690839630231,0.444524836629519,0.4444806069062556,0.44443639478097097,0.4443922126392141,0.44434803566822145,0.44430387625849904,0.44425974678085633,0.4442156224521283,0.444171515648071,0.44412742635650776,0.444083366928643,0.44403931262068075,0.4439952757887582,0.44395125642074684,0.44390726684830045,0.44386328236688266,0.443819315313066,0.4437753656747701,0.44373144576415186,0.44368753091582575,0.44364363344685387,0.4435997656548064,0.443555902903589,0.4435120574956666,0.4434682294190421,0.44342443095188316,0.44338063749705625,0.44333686133761047,0.4432931024615959,0.4432493731278309,0.44320564877803564,0.4431619416758963,0.44311825180951003,0.4430745914183993,0.4430309359830305,0.44298729774778034,0.4429436889377344,0.4429000850623478,0.44285649835155044,0.4428129287935215,0.4427693885941433,0.4427258533014302,0.44268233512609584,0.44263883405636545,0.44259536227897106,0.44255189538038026,0.44250844555214264,0.44246501278252987,0.4424216092391756,0.44237821054689536,0.4423348288781272,0.4422914763862159,0.4422481287246677,0.4422047980516221,0.44216148435543084,0.44211819977043215,0.4420749199882958,0.4420316571481411,0.4419884112383655,0.4419451943743527,0.441901982285831,0.44185878709295207,0.44181560878415854,0.4417724594559311,0.4417293148759527,0.44168618714545893,0.44164308834678717,0.4415999942760177,0.44155691702023336,0.44151385656795533,0.4414708249827081,0.4414277980983454,0.44138478798312386,0.44134179462560963,0.4412988300705652,0.4412558701895145,0.44121292703193943,0.4411700005864507,0.4411271028790998,0.4410842098189784,0.44104133343684454,0.4409984857447505,0.4409556426798957,0.44091281625902917,0.44087000647083874,0.4408272253087545,0.44078444874736483,0.4407416887847836,0.4406989454097427,0.4406562305971004,0.44061352035873236,0.4405708266741682,0.4405281495321833,0.4404855008891145,0.44044285679402345,0.44040022920790584,0.4403576300732405,0.4403150354669121,0.4402724573360486,0.4402298956695011,0.4401873623913146,0.44014483361538354,0.44010232127038956,0.44005982534522653,0.44001735774555534,0.4399748946221802,0.4399324478853858,0.439890017524109,0.4398476154256758,0.4398052177777006,0.43976283647212067,0.4397204833825436,0.4396781347241257,0.4396358023750765,0.4395934863244072,0.4395511984274768,0.43950891493607813,0.43946664771015964,0.43942439673877504,0.4393821738590834,0.43933995535941556,0.43929775308150804,0.43925557884890293,0.43921340897726907,0.43917125529471646,0.43912911779037195,0.43908700826966335,0.4390449030846256,0.4390028140452421,0.43896074114068134,0.43891869615830514,0.43887665548641724,0.4388346309169227,0.4387926224390316,0.4387506418220883,0.4387086654905674,0.4386667052183448,0.43862477276128325,0.43858284457092184,0.43854093240764586,0.4384990362607371,0.4384571678681254,0.43841530371735143,0.43837345555085494,0.4383316233579586,0.43828981885870666,0.43824801857654544,0.4382062342360169,0.4381644658264845,0.4381227250501543,0.4380809884662825,0.4380392677815611,0.4379975746848488,0.437955885762196,0.43791421270693853,0.4378725555085105,0.4378309258380156,0.4377893003171471,0.4377476906214737,0.4377060967404695,0.43766453032753044,0.4376229680398976,0.4375814215354197,0.4375398908036109,0.43749838748020586,0.43745688825789947,0.4374154047768672,0.437373948659629,0.43733249662540735,0.4372910603011543,0.43724963967645325,0.43720824635624467,0.43716685709504016,0.43712548350220043,0.43708412556734855,0.4370427948778917,0.43700146822353725,0.43696015719610093,0.43691886178524514,0.4368775935608905,0.43683632934784644,0.4367950807204306,0.4367538592354794,0.4367126417440672,0.4366714398074186,0.43663025341526396,0.4365890941070334,0.4365479387687415,0.43650679894419503,0.43646567462316305,0.4364245773277154,0.43638348397871446,0.43634240610259534,0.43630134368916523,0.43626030824317946,0.4362192767202565,0.43617826062950515,0.43613727146272474,0.43609628620153995,0.43605531634209516,0.43601436187426457,0.4359734342726123,0.43593251055335924,0.43589160219540296,0.43585070918865565,0.4358098429904913,0.43576898065163605,0.4357281336337858,0.43568730192689065,0.43564649697117963,0.43560569585179326,0.4355649100132711,0.43552415088301305,0.4354833955719108,0.43544265551166644,0.4354019306922954,0.4353612325241311,0.4353205381523219,0.4352798589914919,0.43523919503169384,0.4351985576662388,0.4351579240744424,0.4351173056538953,0.4350767023946873,0.43503612567315164,0.434995552702682,0.4349549948638796,0.4349144635203737,0.4348739359110573,0.4348334234038193,0.43479292598881425,0.4347524550127704,0.43471198774850345,0.43467153554699056,0.4346310983984227,0.43459068763267167,0.43455028055638695,0.434509888503678,0.4344695114647723,0.4344291607527284,0.43438881370794213,0.4343484816476987,0.434308175872476,0.43426787374792086,0.4342275865787296,0.434187314355193,0.43414706836105227,0.4341068259955468,0.434066598546625,0.43402638600461385,0.4339861996365608,0.43394601687521084,0.43390584899180806,0.433865695976715,0.433825569080329,0.43378544576881345,0.4337453372967513,0.4337052549020807,0.43366517607597155,0.4336251120605394,0.433585062846209,0.43354503965434327,0.4335050200093795,0.43346501513684726,0.4334250250272065,0.4333850608852876,0.4333451002687094,0.43330515438645817,0.4332652232290289,0.4332253179847622,0.4331854162443724,0.4331455292003453,0.43310566802868183,0.4330658103448618,0.4330259673290234,0.43298613897172283,0.4329463364325454,0.43290653735991735,0.4328667529175504,0.43282698309603546,0.43278723903858407,0.4327474984264844,0.43270777240706376,0.4326680721112813,0.4326283752450156,0.43258869294333335,0.43254902519688576,0.43250938312033177,0.43246974445226394,0.4324301203114382,0.43239051068854,0.43235092668196934,0.43231134606294935,0.43227177993396665,0.4322322282857406,0.4321927022004544,0.43215317948187754,0.43211367121626915,0.4320741884736768,0.4320347090822249,0.4319952441160294,0.4319557935658688,0.4319163684856461,0.43187694673588645,0.4318375393745508,0.4317981463924512,0.4317587788273871,0.43171941457220175,0.4316800646687422,0.4316407291078539,0.4316014189112736,0.4315621120040805,0.43152281941204845,0.43148355214489403,0.4314442881518189,0.43140503844656913,0.4313658030200486,0.43132659286598285,0.43128738596566535,0.4312481933168409,0.4312090149104461,0.43116986172425603,0.4311307117715746,0.43109157603418546,0.4310524545030584,0.431013358140058,0.4309742649904173,0.4309351860199995,0.4308961321787634,0.4308570815358348,0.4308180450451635,0.43077902269777635,0.4307400254277922,0.43070103133612436,0.4306620513608726,0.4306230854930961,0.43058414465111405,0.4305452069675465,0.4305062833646833,0.430467373833616,0.43042848927690386,0.4303896078587933,0.4303507404858044,0.4303118980487026,0.43027305873540134,0.4302342334406194,0.4301954221555045,0.4301566357551318,0.4301178524589016,0.43007908314583193,0.43004032780710266,0.4300015973021379,0.4299628698817451,0.4299241564092816,0.42988545687595875,0.4298467821255893,0.42980811044030864,0.42976945266785255,0.429730819640351,0.42969218966338335,0.4296535735729951,0.429614971360453,0.4295763938423437,0.4295378193554368,0.4294992587202249,0.4294607119280059,0.42942218977986263,0.4293836706436763,0.42934516532442557,0.4293066738134396,0.4292682068963359,0.4292297429720292,0.4291912928300233,0.4291528672443624,0.429114444637185,0.4290760357864142,0.42903764068343314,0.4289992700868884,0.42896090244981605,0.42892254853473183,0.42888420833304974,0.4288458925880571,0.4288075797836101,0.4287692806668557,0.4287309952292385,0.42869273419872483,0.4286544760899143,0.42861623163462303,0.42857801154935204,0.4285397943717073,0.42850159082203243,0.42846340089182533,0.42842523528233295,0.42838707256177,0.4283489234352163,0.4283107878942,0.428272676624752,0.42823456822561934,0.4281964733866563,0.4281583920994209,0.4281203350347656,0.4280822808218942,0.4280442401354726,0.4280062236349944,0.42796820997245555,0.4279302098111561,0.4278922231427066,0.4278542606114879,0.4278163008998201,0.4277783546558811,0.42774042187131134,0.42770251317541635,0.427664607280765,0.4276267148204506,0.42758883578614326,0.42755098079211057,0.427513128581095,0.4274752897711428,0.42743747496526796,0.42739966292879356,0.427361864268505,0.42732407897612357,0.42728631763969055,0.42724855905457193,0.4272108138125709,0.4271730819054382,0.42713537390627876,0.42709766864042753,0.4270599766847422,0.42702230860115054,0.42698464323741475,0.4269469911592079,0.4269093523583317,0.4268717373818421,0.4268341251073405,0.42679652608561913,0.4267589403085086,0.42672137830822965,0.42668381899214947,0.42664627289621615,0.42660874001228877,0.42657123085778964,0.42653372436977816,0.42649623106939477,0.426458761462987,0.426421294509835,0.42638384071999746,0.42634640008538327,0.426308983097605,0.4262715687455072,0.4262341675244045,0.4261967794262341,0.42615941492790954,0.42612205304776746,0.4260847042664142,0.4260473685758153,0.4260100564382214,0.42597274690138853,0.42593545043125103,0.4258981774790861,0.4258609071146666,0.4258236497929466,0.4257864055059408,0.425749184690326,0.4257119664451685,0.42567476121081316,0.4256375689793025,0.4256004001727485,0.42556323391943957,0.4255260806451466,0.4254889403419399,0.42545182341740256,0.42541470902897294,0.4253776075878842,0.4253405294908458,0.42530345391711183,0.42526639126703514,0.42522934153273423,0.42519231509645145,0.42515529116646683,0.42511828012865693,0.4250812819751677,0.42504430707380936,0.4250073346618171,0.42497037511062635,0.4249334284124106,0.4248965049205828,0.42485958390126277,0.42482267571148025,0.42478579069387384,0.42474890813618,0.42471203838464733,0.42467518143149646,0.42463834760503,0.42460151622174636,0.42456469761354915,0.42452789177268613,0.4244911090131584,0.42445432868015653,0.42441756109127404,0.4243808062387856,0.42434407442242544,0.4243073450160067,0.4242706283228474,0.42423393463200504,0.42419724333871334,0.4241605647356067,0.42412389881500634,0.4240872558517632,0.4240506152696121,0.4240139873469725,0.4239773720761921,0.42394077971794963,0.4239041897244122,0.4238676123598185,0.4238310476165425,0.423794505741125,0.4237579662140967,0.4237214392855496,0.42368493519144373,0.4236484334335369,0.4236119442513338,0.4235754676372544,0.42353901381317993,0.4235025623091124,0.42346612335046935,0.4234296969296967,0.4233932932546311,0.42335689188345044,0.42332050302751895,0.42328412667930865,0.4232477730326452,0.4232114216738143,0.42317508280016114,0.42313876659502536,0.423102452665729,0.4230661511991247,0.4230298621877295,0.42299359580093093,0.4229573316740409,0.4229210799799515,0.42288484071120525,0.422848624023271,0.4228124095793834,0.4227762075385071,0.4227400178932104,0.42270385078507644,0.42266768590519566,0.42263153339863896,0.42259540339659746,0.4225592756110092,0.4225231601765467,0.4224870570858221,0.4224509764561994,0.4224148980273556,0.4223788319201274,0.42234277812715226,0.4223067467519993,0.4222707175620187,0.422234700664244,0.4221986960513381,0.4221627138131082,0.42212673374451126,0.42209076593881095,0.4220548204755149,0.4220188771702415,0.4219829461059488,0.42194702727534295,0.4219111307442274,0.42187523635571206,0.4218393541790421,0.42180348420694885,0.4217676364915636,0.42173179090342255,0.42169595749809086,0.4216601362683242,0.42162433725261467,0.42158854034885934,0.4215527555989757,0.42151699303124746,0.4214812325640494,0.4214454842290846,0.421409748019152,0.42137403394895234,0.42133832196410764,0.42130262208273006,0.42126693429764267,0.42123126860999566,0.42119560499259345,0.4211599534499896,0.42112432397319205,0.4210886965553498,0.42105308119086826,0.4210174778726128,0.4209818965780969,0.4209463173275396,0.4209107501018433,0.4208751948938977,0.4208396616677532,0.42080413047063475,0.42076861126997395,0.4207331040586843,0.42069761878738526,0.4206621355302437,0.42062666424125206,0.4205912148609773,0.42055576748375073,0.42052033205350636,0.42048490856319964,0.4204495069400215,0.4204141073051342,0.42037871958908807,0.420343343784862,0.42030798980630263,0.42027263780134005,0.4202372976871721,0.4202019694568012,0.420166663010761,0.4201313585236862,0.4200960658994537,0.4200607950286327,0.42002552610584504,0.41999026902499725,0.41995502377913313,0.41991980024556347,0.419884578645505,0.41984936885959806,0.4198141708809094,0.41977899457352263,0.4197438201851868,0.419708657583307,0.41967350676097337,0.4196383775690728,0.41960325028182477,0.41956813475342986,0.4195330408248983,0.41949794879026087,0.4194628684938355,0.419427799928753,0.4193927529228806,0.419357707796611,0.41932267438111204,0.41928765266953694,0.41925265247664156,0.4192176541491186,0.4191826675050161,0.4191476925375104,0.41911273904827573,0.4190777874102436,0.4190428474283731,0.41900792889454774,0.41897301220133726,0.4189381071439044,0.4189032137154649,0.41886834169487436,0.4188334715008342,0.4187986129154712,0.41876376593202397,0.41872894031635005,0.41869411651322175,0.4186593042917604,0.41862450364522685,0.4185897243265114,0.41855494680639616,0.4185201808410273,0.4184854361735892,0.4184506932943313,0.41841596194968866,0.41838124213296096,0.41834654357441786,0.4183118467902131,0.41827716151385885,0.41824248773867745,0.41820783518205307,0.4181731843859838,0.4181385450710892,0.41810391723071355,0.41806931056938595,0.4180347056548886,0.41800011219497835,0.4179655398845622,0.4179309693107211,0.41789641017158446,0.41786186246053497,0.4178273358596768,0.4177928109817702,0.41775829751213395,0.4177237954441726,0.4176893144472164,0.41765483515964624,0.41762036725399937,0.4175859107237024,0.417551475225341,0.4175170414228573,0.4174826189760369,0.41744821753192696,0.4174138177736012,0.41737942935130085,0.4173450522584903,0.4173106961295235,0.4172763416729323,0.41724199852625754,0.4172076666829851,0.41717335576480497,0.41713904650564854,0.4171047485303854,0.4170704618325228,0.41703619602111597,0.4170019318554372,0.41696767894771397,0.41693344689754497,0.41689921648316935,0.4168649973073523,0.41683078936363827,0.41679660223904175,0.41676241673704084,0.41672824244780954,0.4166940793649133,0.4166599370628114,0.41662579637016306,0.4165916668645797,0.41655754853964794,0.4165234509573004,0.4164893549713197,0.4164552701467835,0.4164212060362487,0.41638714351230205,0.4163530921306399,0.4163190518848855,0.4162850323151193,0.4162510143189507,0.41621700743959245,0.4161830116706885,0.4161490365398714,0.41611506296971607,0.4160811004909799,0.4160471490973279,0.41601321830397264,0.41597928905839754,0.41594537087893346,0.4159114732714974,0.41587757720221596,0.4158436921801189,0.41580981819890694,0.41577596475212686,0.41574211283071444,0.41570827193132204,0.41567444204767096,0.4156406326609659,0.4156068247868952,0.41557302790976197,0.4155392515015332,0.41550547659642395,0.4154717126694943,0.41543795971450104,0.4154042271911182,0.41537049615821486,0.41533677607855085,0.4153030669459034,0.4152693782076814,0.4152356909473515,0.41520201461540185,0.4151683492056296,0.41513470415320625,0.4151010605661407,0.4150674278826765,0.41503381552882546,0.41500020463096615,0.4149666046181771,0.4149330154842908,0.41489944664313017,0.41486587924551843,0.41483232270833825,0.4147987770254421,0.41476525159849154,0.414731727602699,0.41469821444277916,0.414664712112604,0.41463123000170116,0.41459774930961746,0.4145642794289266,0.4145308297400737,0.4144973814608198,0.4144639439746511,0.41443051727547414,0.4143971107316483,0.4143637055851726,0.41433031120743996,0.4142969275923769,0.4142635640962838,0.4142302019853428,0.4141968506188815,0.4141635099908457,0.4141301894455041,0.4140968702731677,0.4140635618211254,0.41403027342463994,0.41399698639208293,0.4139637100617323,0.41393044442756805,0.41389719881286824,0.4138639545500384,0.41383072096536516,0.41379749805284766,0.41376429512380664,0.41373109353462734,0.413697902599632,0.41366472231283896,0.41363156197363826,0.4135984029623409,0.41356525458133164,0.41353212612107004,0.413498998979776,0.4134658824508988,0.41343277652849025,0.41339969049112607,0.4133666057608579,0.4133335316192444,0.4133004680603566,0.4132674243509122,0.41323438193674195,0.41320135008754,0.4131683287973964,0.4131353273211979,0.4131023271285006,0.41306933747716107,0.4130363676132104,0.41300339902396366,0.41297044095841645,0.4129374934106917,0.4129045656150356,0.41287163908239577,0.41283872304997654,0.4128058175119194,0.41277293169071194,0.4127400471208818,0.4127071730278679,0.41267430940583044,0.4126414654655245,0.4126086227650051,0.4125757905179721,0.41254297792639866,0.41251016656595035,0.4124773656415402,0.41244457514736077,0.4124118042736983,0.41237903461965414,0.4123462753784478,0.4123135265442903,0.41228079729580697,0.41224806925548285,0.41221535160486983,0.41218264433819735,0.41214995662245557,0.41211727010346116,0.41208459395112457,0.4120519373237266,0.4120192818845485,0.4119866367947865,0.4119540020487019,0.41192138679298557,0.4118887727141597,0.4118561689618242,0.41182357553025845,0.41179100155458886,0.4117584287445273,0.41172586623810276,0.4116933140296126,0.41166078124264466,0.41162824961004885,0.4115957282583088,0.41156322630237496,0.4115307254924171,0.41149823494627674,0.4114657546582829,0.4114332937318917,0.41140083394032156,0.41136838438991347,0.41133594507501425,0.41130352508761087,0.4112711062239199,0.4112386975788067,0.4112062991466361,0.4111739200079512,0.41114154198191577,0.41110917415194503,0.41107682559001624,0.41104447813246964,0.41101214085415,0.41097981374945264,0.4109475058789552,0.4109151991018568,0.4108829024815957,0.4108506160125853,0.41081834874402823,0.4107860825579321,0.4107538265063542,0.4107215896299828,0.41068935382789856,0.4106571281436396,0.41062491257164974,0.41059271614128623,0.41056052077435046,0.4105283355030431,0.4104961603218255,0.4104640042487485,0.41043184922828446,0.4103997042813216,0.4103675694023386,0.4103354535981046,0.41030333883571324,0.41027123412476496,0.41023914846358434,0.4102070638361978,0.4101749892437565,0.4101429246807691,0.4101108791343218,0.4100788346109756,0.41004680010063693,0.4100147755978317,0.40998277007843226,0.4099507655714848,0.4099187710556756,0.4098867865255479,0.40985482094578424,0.4098228563678671,0.40979090175928745,0.409758966076352,0.40972703138733785,0.4096951066513551,0.4096631918629768,0.4096312959673627,0.4095994010551404,0.4095675160742674,0.40953564101933304,0.409503784824375,0.4094719296023225,0.40944008429000417,0.4094082488820265,0.4093764323013285,0.4093446166830926,0.4093128109530432,0.40928102402581157,0.4092492380532378,0.4092174619527339,0.4091856957189354,0.4091539482554174,0.40912220173618874,0.4090904650675989,0.40905873824430017,0.4090270301588353,0.4089953230073335,0.4089636256851059,0.4089319381868215,0.40890026939401436,0.40886860152488647,0.4088369434637343,0.40880530408385174,0.40877366561996314,0.4087420369481201,0.4087104180630204,0.4086788178269908,0.4086472184967446,0.4086156289373608,0.4085840491435531,0.4085524879667056,0.40852092768547266,0.40848937715398403,0.40845783636697003,0.40842631416489505,0.40839479284830726,0.408363281260411,0.40833178823349653,0.4083002960845011,0.40826881364845063,0.4082373409201036,0.4082058867208723,0.4081744333895048,0.40814298975014285,0.4081115557975612,0.4080801403423169,0.4080487257449221,0.408017320818658,0.40798592555831525,0.40795454876361936,0.4079231728167998,0.4078918065202998,0.40786045866573684,0.40782911165159685,0.4077977742722108,0.4077664465223975,0.40773513718298326,0.4077038286740898,0.40767252977925106,0.40764124049330175,0.4076099695863006,0.40757869949995806,0.40754743900703466,0.40751618810238077,0.40748495554531056,0.40745372379907696,0.40742250162569,0.4073912977764203,0.4073600947306472,0.4073289012423331,0.40729771730635606,0.40726655166328235,0.40723538681395316,0.4072042315016204,0.40717308572117794,0.40714195820251053,0.4071108314678749,0.40707971424983597,0.40704860654330305,0.40701751706750205,0.40698642836605975,0.4069553491608765,0.40692428816319914,0.4068932279326516,0.406862177183151,0.40683113590963377,0.4068001128127279,0.4067690904733473,0.4067380775947844,0.4067070741719911,0.4066760888949989,0.40664510436596657,0.4066141292775843,0.4065831636248193,0.4065522160871294,0.40652126928787247,0.40649033190915934,0.40645941262253227,0.40642849406721865,0.40639758491740957,0.4063666851680991,0.406335803480295,0.40630492251434513,0.40627405093390034,0.40624318873396986,0.4062123445650493,0.40618150110856194,0.4061506670176409,0.4061198422873106,0.4060890355575767,0.4060582295308932,0.40602743284989773,0.4059966541467433,0.40596587613962715,0.4059351074633303,0.40590434811290327,0.4058736067100482,0.405842865993915,0.4058121345888278,0.4057814124898524,0.40575070830826204,0.4057200048041147,0.4056893105913001,0.40565863427328436,0.4056279586257775,0.40559729225485774,0.40556663515561714,0.40553599592113143,0.405505357347941,0.4054747280317287,0.4054441079676011,0.40541350573826557,0.40538290416104933,0.4053523118212612,0.4053217287140224,0.40529116341169386,0.4052605987523457,0.4052300433109343,0.40519950565207546,0.4051689686293669,0.4051384408100158,0.40510792218916936,0.4050774213211344,0.40504692108017515,0.4050164300231849,0.4049859481453251,0.4049554839906164,0.40492502045394535,0.40489456608191304,0.4048641208696956,0.4048336933510483,0.4048032664414371,0.4047728486771925,0.404742448584385,0.4047120490938865,0.40468165873433876,0.4046512775009432,0.40462091390954324,0.4045905509115138,0.4045601970252642,0.40452985224601,0.4044995250793887,0.4044691984972358,0.4044388810077489,0.40440857260615837,0.40437828178791657,0.4043479915452769,0.4043177103762468,0.40428744676865463,0.4042571837300383,0.4042269297507771,0.4041966848261262,0.4041664574337663,0.4041362306015783,0.40410601280978853,0.4040758040536664,0.4040456128007666,0.40401542209926994,0.40398524041927136,0.40395506775605433,0.40392491256706875,0.4038947579207526,0.4038646122770909,0.40383448408596856,0.4038043564309889,0.4037742377645679,0.40374412808201376,0.4037140358231431,0.403683944091743,0.40365386133015607,0.40362378753370426,0.4035937311321571,0.40356367524944325,0.40353362831785267,0.40350359033272126,0.40347356971379233,0.40344354960509404,0.40341353842888483,0.40338354459740206,0.4033535512697208,0.40332356686058957,0.40329359136536846,0.4032636331863051,0.40323367550250083,0.40320372671870913,0.403173786830304,0.40314386422956366,0.4031139421155743,0.403084028883115,0.4030541245275735,0.4030242374312795,0.40299435081326257,0.40296447305834804,0.40293461254141805,0.402904752496432,0.4028749013007637,0.4028450589498247,0.4028152338085847,0.4027854091308739,0.4027555932841485,0.40272578626383365,0.40269599642500714,0.4026662070413287,0.40263642647035763,0.40260665470753254,0.4025769000980595,0.4025471459353872,0.4025174005671981,0.4024876723313084,0.40245794453598077,0.40242822552150387,0.4023985152833398,0.40236882214946895,0.40233912944787104,0.40230944550899367,0.40227977032831236,0.402250112223992,0.4022204545436885,0.40219080560802883,0.4021611654125019,0.40213154226547715,0.4021019195342462,0.40207230552963563,0.4020427085526818,0.4020131119853762,0.4019835241312085,0.40195394498569076,0.40192438284009924,0.40189482109599023,0.4018652680470883,0.4018357236889187,0.4018061963030175,0.40177666931046585,0.4017471509952432,0.40171764135288773,0.4016881486552156,0.40165865634279246,0.4016291726898725,0.40159970596099515,0.40157023961131266,0.4015407819077986,0.4015113328460145,0.40148190068081424,0.4014524688867646,0.40142304572114923,0.4013936311795423,0.4013642335071325,0.40133483619786137,0.40130544749934194,0.4012760674071615,0.40124670415686325,0.40121734126172337,0.4011879869597045,0.4011586494791289,0.4011293123477475,0.40109998379629835,0.40107066382039097,0.4010413606387366,0.4010120577983518,0.4009827635203585,0.4009534778003791,0.40092420884753344,0.40089494022806427,0.4008656801534971,0.40083643682577086,0.40080719382552216,0.40077795935709204,0.4007487334161255,0.40071952419500406,0.40069031529352195,0.40066111490645806,0.4006319230294699,0.40060274784540145,0.4005735729731653,0.4005444065979976,0.40051524871556865,0.4004861074992037,0.40045696658689517,0.40042783415435584,0.40039871836778523,0.40036960287945944,0.40034049585796166,0.40031139729898413,0.40028231535924175,0.4002532337100222,0.4002241605104192,0.40019509575613754,0.4001660475944268,0.4001369997155475,0.40010796026912326,0.40007892925087135,0.4000499147985952,0.4000209006214897,0.3999918948597276,0.3999629056440406,0.39993391669779865,0.3999049361540992,0.399875964008681,0.399847008382863,0.39981805301888246,0.3997891060404193,0.3997601674432244,0.39973124533922344,0.3997023234894824,0.3996734100082829,0.3996445048913881,0.399615616241349,0.39958672783802235,0.3995578477863103,0.3995289841817452,0.39950012081825187,0.39947126579371034,0.39944241910390543,0.399413588835028,0.3993847587997272,0.39935593708653666,0.39932712369125356,0.3992983266907459,0.3992695299163494,0.3992407414472703,0.3992119612793178,0.3991831974800561,0.3991544338994696,0.39912567860745607,0.3990969396646144,0.3990682009348904,0.3990394704812129,0.399010748299412,0.39898204244081553,0.3989533367879522,0.3989246393944751,0.3988959502562262,0.39886727741528083,0.3988386047727135,0.39880994037291984,0.3987812842117539,0.39875264432205715,0.3987240046234121,0.39869537315097603,0.3986667579306772,0.3986381428959546,0.39860953607504895,0.398580937463835,0.3985523550790394,0.39852377287254465,0.39849519886338497,0.39846663304744717,0.39843808343227466,0.3984095339881563,0.3983809927249385,0.39835245963851973,0.3983239427272789,0.3982954259798739,0.39826691739698206,0.39823842497012096,0.3982099327017008,0.3981814485855343,0.3981529726175403,0.3981245127801037,0.3980960530939397,0.3980676015437237,0.3980391581253863,0.39801073081219795,0.39798230364314213,0.3979538845937753,0.39792547366003955,0.39789707880610914,0.39786868408919945,0.3978402974757661,0.397811926923173,0.39778355650228536,0.397755194172745,0.39772683993051444,0.39769850172389326,0.39767016364191454,0.39764183363515127,0.39761351169957726,0.39758520577444584,0.3975568999669218,0.3975286022185271,0.3975003125252472,0.3974720388173068,0.39744376521996655,0.3974154996657153,0.3973872500780186,0.3973590005956848,0.39733075914444,0.39730252572028957,0.3972743082377018,0.3972460908535179,0.3972178814844624,0.39718968012655187,0.39716149468527545,0.3971333093354713,0.3971051319848801,0.3970769626295299,0.3970488091659483,0.3970206557869345,0.39699251039126354,0.3969643808687536,0.39693625142565125,0.39690812995401864,0.3968800164499035,0.3968519187941938,0.3968238212110347,0.39679573158355375,0.3967676499078096,0.396739576179864,0.39671151039578106,0.3966834682945449,0.39665541838193946,0.3966273764014087,0.39659934234902816,0.3965713162208761,0.39654329801303345,0.39651528772158406,0.3964873010544136,0.3964593065795761,0.39643132000940196,0.3964033413399859,0.3963753705674257,0.3963474076878215,0.3963194526972765,0.39629150559189646,0.3962635820441575,0.39623565069301653,0.3962077272153766,0.3961798116073547,0.3961519038650702,0.3961240039846454,0.3960961119622054,0.39606824343935754,0.3960403671168685,0.3960124986407579,0.3959846380071614,0.39595678521221755,0.39592894025206776,0.3959011031228561,0.39587327382072934,0.3958454679521458,0.3958176542882529,0.3957898484399034,0.39576205040325496,0.39573426017446783,0.39570647774970497,0.3956787031251321,0.39565095187656585,0.3956231928365086,0.3955954415851565,0.395567698118686,0.3955399624332761,0.3955122345251086,0.39548451439036786,0.3954568020252411,0.3954291129706542,0.39540141612897256,0.39537372704548424,0.39534604571638715,0.3953183721378816,0.39529070630617086,0.39526304821746056,0.39523541338225954,0.3952077707638381,0.39518013587705253,0.395152508718119,0.3951248892832566,0.395097277568687,0.3950696735706343,0.39504207728532564,0.39501450418863426,0.3949869233131819,0.3949593501391721,0.39493178466284246,0.39490422688043286,0.394876676788186,0.39484913438234737,0.3948216151085953,0.3947940880600112,0.3947665686865889,0.3947390569845842,0.39471155295025556,0.3946840565798639,0.39465656786967274,0.39462908681594844,0.3946016288299865,0.39457416307371335,0.39454670496272315,0.39451925449329256,0.39449181166170066,0.3944643764642293,0.39443694889716274,0.3944095443418218,0.39438213202015154,0.39435472731775667,0.39432733023093186,0.39429994075597424,0.3942725588891838,0.39424518462686264,0.3942178333204589,0.39419047425173187,0.39416312277639887,0.39413577889077245,0.39410844259116784,0.39408111387390277,0.39405379273529745,0.3940264791716748,0.3939991885004657,0.39397189007154126,0.39394459920658537,0.39391731590193096,0.3938900401539136,0.39386277195887137,0.3938355113131448,0.39380827350450853,0.39378102794221426,0.3937537899182747,0.39372655942904083,0.39369933647086575,0.39367212104010535,0.3936449131331178,0.393617712746264,0.39359053513354775,0.393563349771839,0.39353617191936346,0.39350900157249213,0.3934818387275983,0.39345468338105777,0.393427535529249,0.3934004103967338,0.3933732775193329,0.39334615212581575,0.3933190342125709,0.39329192377598904,0.3932648208124634,0.3932377253183901,0.39321063729016703,0.39318357191882947,0.39315649880732756,0.39312943315088783,0.39310237494591854,0.39307532418883023,0.39304828087603616,0.3930212450039518,0.39299423173438236,0.3929672107288038,0.3929401971531986,0.3929131910039923,0.3928861922776127,0.3928592009704902,0.3928322170790576,0.39280524059975014,0.39277828666108733,0.3927513249911913,0.39272437072274297,0.39269742385218726,0.3926704843759717,0.39264355229054615,0.39261662759236304,0.3925897253809219,0.39256281544244975,0.39253591288059364,0.3925090176918155,0.3924821298725801,0.39245524941935395,0.39242837632860667,0.3924015105968099,0.39237466729041637,0.3923478162618208,0.3923209725816075,0.3922941362462577,0.3922673072522553,0.39224048559608654,0.39221367127423984,0.39218687932435614,0.3921600796565184,0.3921332873124849,0.392106502288754,0.39207972458182616,0.3920529541882044,0.392026191104394,0.39199943532690285,0.39197270186056105,0.39194596068114573,0.391919226797589,0.3918925002064082,0.39186578090412283,0.391839068887255,0.3918123641523291,0.39178568167556893,0.3917589914900278,0.3917323085760179,0.3917056329300729,0.3916789645487291,0.391652303428525,0.3916256495660015,0.39159900295770195,0.3915723785472736,0.39154574643299506,0.3915191215625862,0.3914925039325997,0.3914658935395905,0.3914392903801161,0.39141269445073595,0.391386120666695,0.3913595391831395,0.3913329649193734,0.3913063978719656,0.39127983803748756,0.3912532854125128,0.3912267399936174,0.3912002017773797,0.39117368564669924,0.39114716182148396,0.39112064518867706,0.3910941357448662,0.3910676334866412,0.39104113841059435,0.3910146505133201,0.390988184649517,0.39096171109555705,0.390935244710169,0.3909087854899565,0.3908823334315257,0.3908558885314848,0.39082945078644454,0.3908030201930177,0.3907766115737871,0.3907501952694266,0.39072378610653397,0.39069738408173116,0.39067098919164256,0.39064460143289476,0.3906182208021168,0.3905918620938896,0.3905654957049515,0.3905391364338854,0.39051278427732905,0.390486439231923,0.3904601012943096,0.3904337704611336,0.3904074467290422,0.39038114486072756,0.39035483531677506,0.39032853286386376,0.39030223749864956,0.39027594921779074,0.390249668017948,0.39022339389578414,0.39019714158618746,0.3901708816054117,0.3901446286923186,0.39011838284357997,0.39009214405586984,0.39006591232586457,0.3900396876502425,0.3900134700256844,0.3899872741554143,0.3899610706190832,0.38993487412387356,0.3899086846664751,0.3898825022435795,0.38985632685188104,0.38983015848807595,0.3898040118277797,0.38977785750591987,0.3897517102020576,0.389725569912898,0.3896994366351482,0.3896733103655181,0.3896471911007194,0.38962107883746594,0.3895949882199314,0.38956888994599503,0.389542798663761,0.3895167143699522,0.38949063706129344,0.38946456673451213,0.38943850338633734,0.38941246163352794,0.38938641222885173,0.38936036979298533,0.3893343343226667,0.38930830581463616,0.38928228426563616,0.3892562696724114,0.3892302620317085,0.38920427592906454,0.389178282179758,0.3891522953732286,0.3891263155062321,0.389100342575526,0.3890743765778702,0.3890484175100266,0.3890224799303089,0.38899653470850026,0.38897059640680454,0.3889446650219925,0.3889187405508367,0.38889282299011224,0.3888669123365961,0.38884100858706755,0.38881512626883613,0.38878923631375906,0.3887633532530219,0.3887374770834123,0.38871160780172026,0.3886857454047379,0.38865988988925926,0.38863405575556054,0.38860821398962336,0.38858237909558707,0.38855655107025444,0.3885307299104303,0.3885049156129215,0.3884791081745373,0.3884533075920886,0.38842752833506367,0.3884017414510856,0.3883759614134912,0.38835018821910017,0.38832442186473426,0.3882986623472173,0.38827290966337547,0.38824717825585087,0.3882214392260148,0.388195707020346,0.38816998163567895,0.3881442630688499,0.38811855131669765,0.3880928463760628,0.388067148243788,0.3880414713319413,0.38801578680310717,0.3879901090731758,0.38796443813899834,0.3879387739974278,0.38791311664531963,0.38788746607953095,0.38786183668547025,0.3878361996790974,0.3878105694496305,0.3877849459939351,0.38775932930887896,0.38773371939133194,0.38770811623816576,0.3876825198462545,0.38765694457064326,0.3876313616880818,0.3876057855574112,0.38758021617551336,0.38755465353927265,0.38752909764557525,0.38750354849130964,0.3874780204050456,0.3874524847165389,0.38742695575814295,0.3874014335267544,0.3873759180192715,0.3873504092325951,0.3873249071636277,0.3872994118092742,0.3872739374679505,0.38724845552978293,0.38722298029695706,0.3871975117663857,0.3871720499349839,0.38714659479966834,0.38712114635735795,0.38709571888017597,0.38707028381088926,0.38704485542537836,0.3870194337205703,0.386994018693394,0.3869686103407805,0.386943208659663,0.3869178136469763,0.3868924395448976,0.38686705785614817,0.3868416828266487,0.38681631445334214,0.3867909527331737,0.3867655976630904,0.3867402492400414,0.386714921680091,0.3866895865382399,0.3866642580342841,0.3866389361651806,0.3866136209278885,0.3865883123193689,0.3865630103365848,0.38653771497650125,0.3865124404254419,0.38648715829795033,0.3864618827840681,0.38643661388076816,0.3864113515850254,0.3863860958938168,0.38636084680412125,0.3863356184763287,0.38631038257690353,0.3862851532699417,0.3862599305524299,0.386234714421357,0.3862095048737136,0.3861843019064925,0.3861591196542325,0.3861339298351533,0.38610874658748784,0.3860835699082366,0.38605839979440215,0.38603323624298885,0.3860080792510031,0.3859829288154533,0.3859577990414351,0.38593266170611484,0.38590753091826874,0.38588240667491314,0.38585728897306587,0.3858321778097471,0.3858070731819787,0.3857819891691817,0.38575689759992426,0.3857318125572964,0.3857067340383276,0.3856816620400496,0.38565659655949597,0.385631537593702,0.3856064851397053,0.385581453247684,0.3855564138047515,0.3855313808647414,0.38550635442469905,0.3854813344816713,0.385456321032707,0.38543131407485715,0.38540632763279975,0.38538133364470023,0.38535634613888076,0.3853313651123996,0.38530639056231736,0.3852814224856962,0.3852564608796002,0.38523150574109566,0.38520657106581624,0.3851816288500749,0.38515669309313627,0.38513176379207387,0.38510684094396347,0.3850819245458823,0.3850570145949099,0.3850321250613527,0.38500722799222936,0.38498233736146587,0.38495745316614893,0.38493257540336734,0.38490770407021185,0.3848828391637749,0.38485798068115096,0.38483314256379886,0.3848082969164909,0.384783457684292,0.38475862486430423,0.3847337984536312,0.3847089784493786,0.3846841648486541,0.38465937156776026,0.3846345707618322,0.3846097763507676,0.3845849883316812,0.38456020670169,0.3845354314579125,0.38451066259746947,0.3844859001174831,0.38446115790560326,0.3844364081743285,0.38441166481489036,0.3843869278244187,0.3843621972000451,0.38433747293890314,0.384312755038128,0.3842880573603829,0.38426335216818974,0.38423865332778206,0.38421396083630266,0.384189274690896,0.3841645948887084,0.38413992142688813,0.38411525430258514,0.38409060735000244,0.3840659528886391,0.38404130475625564,0.3840166629500095,0.3839920274670598,0.38396739830456755,0.3839427754596954,0.3839181727418278,0.3838935625201505,0.38386895860759435,0.38384436100132935,0.3838197696985274,0.38379518469636215,0.383770605992009,0.38374603358264553,0.38372148124938654,0.3836969214180127,0.3836723678731726,0.38364782061205094,0.383623279631834,0.38359874492970986,0.38357421650286855,0.38354970810777256,0.3835251922195561,0.3835006825982046,0.383476179240915,0.3834516821448862,0.383427191307319,0.3834027067254158,0.38337822839638086,0.3833537700485967,0.38332930421341316,0.3833048446227229,0.38328039127373725,0.38325594416366954,0.3832315032897345,0.3832070686491489,0.38318265394580775,0.38315823176008423,0.38313381579937256,0.3831094060608965,0.3830850025418816,0.3830606052395552,0.3830362141511464,0.383011829273886,0.38298746428377634,0.382963091817031,0.38293872555313874,0.3829143654893376,0.3828900116228672,0.38286566395096905,0.38284132247088615,0.3828170008342962,0.38279267172610965,0.3827683488014801,0.3827440320576575,0.382719721491894,0.38269541710144306,0.38267111888356015,0.38264682683550244,0.3826225545812405,0.3825982748611531,0.38257400130267444,0.38254973390306835,0.3825254726596009,0.3825012175695396,0.3824769686301537,0.38245273944125074,0.3824285027915828,0.38240427228441004,0.3823800479170088,0.38235582968665693,0.3823316175906342,0.3823074116262218,0.38228321179070307,0.38225903165636205,0.38223484406705105,0.38221066259849484,0.38218648724798326,0.3821623180128081,0.3821381548902627,0.3821139978776422,0.382089860523228,0.38206571571892467,0.38204157701644326,0.3820174444130859,0.3819933179061561,0.3819691974929592,0.38194508317080234,0.38192097493699423,0.3818968863124749,0.3818727902438846,0.38184870025558093,0.3818246163448795,0.38180053850909756,0.381776466745554,0.3817524010515694,0.3817283549242395,0.3817043013579392,0.3816802538531713,0.38165621240726316,0.381632177017544,0.38160814768134427,0.3815841243959965,0.38156010715883476,0.3815361094397939,0.3815121042876229,0.3814881051756517,0.3814641121012211,0.3814401250616736,0.38141614405435315,0.3813921690766058,0.38136821357467887,0.38134425064474164,0.3813202937364262,0.38129634284708497,0.3812723979740722,0.3812484591147437,0.38122452626645675,0.3812005994265705,0.3811766920143502,0.3811527771799814,0.38112886834610205,0.3811049655100777,0.381081068669276,0.3810571778210658,0.3810332929628178,0.3810094274902656,0.380985554600703,0.3809616876932259,0.38093782676521165,0.38091397181403913,0.38089012283708884,0.380866279831743,0.3808424427953854,0.38081862509694436,0.38079479998737525,0.38077098083895716,0.38074716764908034,0.3807233604151369,0.38069955913452025,0.3806757638046258,0.38065198777100434,0.3806282043314107,0.3806044268347363,0.38058065527838264,0.38055688965975326,0.38053312997625305,0.3805093762252887,0.3804856284042683,0.38046189983211287,0.3804381638598877,0.38041443380984247,0.3803907096793917,0.38036699146595193,0.38034327916694083,0.3803195727797781,0.38029588560015964,0.3802721910256446,0.38024850235524743,0.38022481958639415,0.3802011427165124,0.3801774717430312,0.3801538066633813,0.3801301474749951,0.3801065074471122,0.3800828600302545,0.38005921849696844,0.3800355828446928,0.38001195307086805,0.379988329172936,0.37996471114834013,0.3799411122432466,0.37991750595436774,0.3798939055311665,0.3798703109710928,0.37984672227159805,0.37982313943013524,0.3797995624441591,0.37977599131112566,0.37975243925091695,0.37972887981286296,0.37970532622013115,0.3796817784701839,0.3796582365604855,0.3796347004885013,0.3796111702516987,0.3795876590470359,0.37956414046973325,0.37954062772002456,0.3795171207953833,0.37949361969328455,0.37947012441120476,0.37944663494662223,0.3794231512970166,0.3793996866332325,0.3793762146027665,0.37935274837972727,0.3793292879616009,0.3793058333458748,0.3792823845300381,0.3792589415115813,0.37923551743857387,0.3792120860041053,0.37918866035949905,0.3791652405022522,0.379141826429863,0.3791184181398313,0.3790950156296586,0.37907161889684776,0.3790482410635235,0.3790248558747131,0.37900147645578425,0.37897810280424593,0.37895473491760906,0.3789313727933857,0.37890801642908944,0.37888467892421707,0.37886133406909395,0.3788379949664499,0.3788146616138047,0.3787913340086798,0.3787680121485981,0.37874469603108407,0.37872139873307425,0.3786980940900557,0.37867479518218866,0.3786515020070036,0.3786282145620326,0.3786049328448091,0.3785816568528684,0.3785583865837468,0.37853513508868125,0.378511876254606,0.37848862313597015,0.37846537573031647,0.378442134035189,0.3784188980481335,0.37839566776669703,0.3783724562197016,0.3783492373389524,0.37832602415647415,0.37830281666981996,0.37827961487654466,0.37825641877420424,0.37823322836035655,0.3782100436325606,0.37818687759410374,0.37816370422790757,0.37814053654045104,0.3781173745292993,0.378094218192019,0.3780710675261783,0.37804792252934677,0.3780247961825407,0.3780016625132645,0.37797853450571656,0.37795541215747247,0.37793229546610935,0.3779091844292057,0.3778860790443414,0.377862979309098,0.3778398981791207,0.37781680973270254,0.37779372692866,0.3777706497645804,0.3777475782380526,0.377724512346667,0.3777014520880153,0.3776784103956143,0.3776553613920543,0.3776323180140138,0.37760928025909063,0.3775862481248838,0.37756322160899386,0.37754020070902294,0.3775171854225746,0.37749418865795653,0.377471184588223,0.37744818612483266,0.3774251932653949,0.3774022060075206,0.37737922434882204,0.377356248286913,0.37733329070811367,0.377310325829493,0.377287366540513,0.37726441283879325,0.3772414647219547,0.37721852218761964,0.3771955852334121,0.3771726538569574,0.37714974091952747,0.37712682068833336,0.377103906027778,0.3770809969354924,0.3770580934091092,0.37703519544626224,0.37701230304458694,0.37698942904350796,0.37696654775397065,0.3769436720185211,0.3769208018348005,0.3768979372004514,0.37687507811311777,0.3768522245704451,0.37682937657008014,0.3768065469265583,0.3767837100006483,0.3767608786099964,0.37673805275225525,0.3767152324250788,0.37669241762612243,0.3766696083530429,0.376646817398667,0.3766240191672197,0.3766012264546295,0.37657843925855894,0.3765556575766719,0.3765328814066336,0.3765101107461108,0.3764873455927717,0.3764645987147113,0.37644184456566215,0.3764190959168109,0.37639635276583105,0.3763736151103979,0.3763508829481881,0.37632815627687943,0.3763054478429957,0.3762827321434509,0.37626002192785096,0.3762373171938794,0.3762146179392211,0.3761919241615626,0.3761692358585916,0.37614655302799715,0.37612388839172795,0.3761012164958921,0.37607855006551005,0.37605588909827653,0.37603323359188745,0.37601058354404043,0.3759879389524344,0.3759653125175826,0.37594267882850196,0.37592005058876843,0.3758974277960866,0.37587481044816207,0.3758521985427021,0.37582959207741523,0.3758069910500115,0.3757844081365838,0.3757618179750331,0.37573923324450476,0.37571665394271425,0.3756940800673784,0.37567151161621537,0.37564894858694464,0.3756264036343592,0.37560385143899794,0.3755813046586972,0.37555876329118204,0.3755362273341788,0.37551369678541513,0.37549117164262025,0.37546865190352463,0.37544615019865424,0.37542364125712474,0.3754011377124954,0.375378639562502,0.3753561468048819,0.3753336594373737,0.3753111774577173,0.3752887134752723,0.3752662422615248,0.37524377642885837,0.3752213159750185,0.37519886089775195,0.3751764111948068,0.3751539668639325,0.37513152790287974,0.37510910689689336,0.3750866786657312,0.3750642557976524,0.3750418382904129,0.3750194261417703,0.3749970193494834,0.3749746179113123,0.37495223439146796,0.3749298436518131,0.3749074582595639,0.3748850782124858,0.3748627035083458,0.37484033414491186,0.37481797011995366,0.374795611431242,0.3747732706190238,0.37475092259313164,0.37472857989680775,0.3747062425278283,0.37468391048397076,0.37466158376301384,0.3746392623627378,0.3746169588024868,0.37459464803393544,0.37457234257941446,0.3745500424367092,0.3745277476036064,0.3745054580778942,0.3744831738573619,0.3744608949398002,0.3744386338207388,0.3744163654995227,0.3743941024746584,0.37437184474394164,0.37434959230516984,0.37432734515614147,0.37430510329465627,0.3742828791954716,0.3742606478995136,0.3742384218845075,0.37421620114825843,0.3741939856885726,0.37417177550325786,0.37414957059012305,0.3741273709469785,0.374105189024915,0.3740829999122328,0.3740608160629807,0.3740386374749741,0.3740164641460299,0.37399429607396606,0.373972133256602,0.37394998812438496,0.37392783580693795,0.37390568873765756,0.3738835469143686,0.3738614103348966,0.37383927899706876,0.37381715289871353,0.37379503203766046,0.37377292882083735,0.3737508184249468,0.37372871325985624,0.37370661332340066,0.373684518613416,0.37366242912773956,0.37364034486421,0.37361827820923954,0.3735962043805973,0.3735741357676267,0.37355207236817156,0.3735300141800767,0.3735079612011885,0.37348591342935444,0.3734638708624234,0.3734418458634334,0.3734198136969421,0.37339778672890894,0.373375764957188,0.37335374837963436,0.3733317369941044,0.3733097307984558,0.3732877421353377,0.3732657463101206,0.37324375566836665,0.37322177020793856,0.3731997899267004,0.37317781482251733,0.3731558448932559,0.3731338801367838,0.3731119328725204,0.37308997845233555,0.373068029198552,0.3730460851090425,0.3730241461816813,0.3730022124143433,0.37298028380490533,0.3729583726525232,0.372936454349628,0.372914541198271,0.37289263319633353,0.37287073034169843,0.3728488326322497,0.3728269400658725,0.37280505264045344,0.3727831826320615,0.3727613054793409,0.37273943346124633,0.37271756657566935,0.37269570482050257,0.3726738481936398,0.3726519966929763,0.37263016257444237,0.3726083213169939,0.37258648517943865,0.37256465415967666,0.37254282825560925,0.37252100746513894,0.3724991917861694,0.37247738121660573,0.37245558798943307,0.37243378762953655,0.37241199237276934,0.37239020221704133,0.3723684171602635,0.3723466372003484,0.37232486233520934,0.37230310477781636,0.372281340093119,0.3722595804969469,0.3722378259872185,0.37221607656185346,0.37219433221877246,0.3721725929558978,0.3721508587711526,0.3721291418547021,0.3721074178171438,0.3720856988514933,0.37206398495567866,0.3720422761276293,0.37202057236527575,0.3719988736665496,0.3719771922017232,0.37195550362121355,0.3719338200981351,0.37191214163042424,0.3718904682160189,0.37186879985285803,0.37184713653888174,0.3718254782720315,0.3718038371999138,0.37178218901831495,0.37176054587767454,0.3717389077759387,0.3717172747110548,0.37169564668097144,0.3716740236836382,0.3716524178468903,0.37163080490609024,0.3716091969918979,0.3715875941022679,0.37156599623515574,0.37154440338851846,0.3715228155603141,0.3715012448586622,0.3714796670583892,0.3714580942704317,0.3714365264927523,0.371414963723315,0.3713934059600851,0.3713718532010289,0.37135030544411385,0.3713287747749961,0.3713072370134667,0.37128570424798923,0.37126417647653615,0.37124265369708065,0.37122113590759753,0.3711996231060624,0.3711781273585358,0.37115662452403253,0.37113512667141274,0.371113633798657,0.3710921459037469,0.3710706629846651,0.37104918503939566,0.3710277120659237,0.3710062561079823,0.3709847930692781,0.37096333499633494,0.37094188188714244,0.37092043373969175,0.37089899055197467,0.3708775523219848,0.3708561310739782,0.3708347027506475,0.3708132793790318,0.37079186095712896,0.37077044748293797,0.37074903895445904,0.3707276353696937,0.37070623672664427,0.37068485502737486,0.3706634662589993,0.3706420824263553,0.37062070352744997,0.37059932956029173,0.3705779605228898,0.3705565964132549,0.3705352492140917,0.37051389495126447,0.3704925456102439,0.3704712011890452,0.3704498616856846,0.3704285270981796,0.37040719742454864,0.3703858726628116,0.3703645647736149,0.37034324982697564,0.37032193978629735,0.3703006346496043,0.3702793344149218,0.37025803908027655,0.37023674864369616,0.3702154750465845,0.3701941943974755,0.3701729186405224,0.37015164777375714,0.37013038179521335,0.37010912070292534,0.37008786449492875,0.3700666131692603,0.3700453786453985,0.370024137075764,0.37000290038257566,0.36998166856387477,0.36996044161770364,0.36993921954210573,0.3699180023351256,0.36989680189711505,0.3698755944187796,0.36985439180320356,0.3698331940484361,0.3698120011525273,0.3697908131135287,0.36976962992949247,0.3697484515984723,0.36972728999902577,0.3697061213654821,0.3696849575791229,0.369663798638006,0.36964264454019075,0.36962149528373717,0.3696003508667067,0.36957922314864483,0.3695580884019359,0.3695369584888418,0.36951583340742833,0.3694947131557622,0.3694735977319115,0.36945248713394535,0.36943138135993375,0.369410292247759,0.36938919611316734,0.36936810479674853,0.3693470182965772,0.36932593661072893,0.3693048597372806,0.36928378767431,0.3692627322408009,0.36924166979032713,0.3692206121445724,0.369199559301619,0.36917851125955026,0.3691574680164506,0.36913642957040554,0.36911539591950177,0.36909437886118895,0.3690733547921437,0.3690523355125072,0.36903132102037045,0.3690103113138254,0.3689893063909653,0.36896830624988436,0.3689473226692465,0.3689263320833303,0.3689053462734835,0.36888436523780466,0.3688633889743935,0.3688424174813507,0.3688214507567782,0.3688004887987787,0.3687795433646106,0.3687585909313981,0.36873764325907493,0.3687167003457482,0.3686957621895262,0.36867482878851837,0.368653900140835,0.3686329879850604,0.36861206883569686,0.36859115443399654,0.3685702447780742,0.36854933986604554,0.3685284396960275,0.36850754426613797,0.36848665357449584,0.36846577933840696,0.3684448981149646,0.36842402162413407,0.3684031498640387],"x":[3.0,3.0033986405437827,3.006797281087565,3.0101959216313476,3.01359456217513,3.0169932027189126,3.020391843262695,3.0237904838064775,3.0271891243502598,3.0305877648940425,3.0339864054378247,3.0373850459816074,3.0407836865253897,3.0441823270691724,3.0475809676129546,3.0509796081567373,3.05437824870052,3.0577768892443022,3.061175529788085,3.064574170331867,3.06797281087565,3.071371451419432,3.074770091963215,3.078168732506997,3.0815673730507798,3.084966013594562,3.0883646541383447,3.091763294682127,3.0951619352259097,3.098560575769692,3.1019592163134746,3.1053578568572573,3.1087564974010395,3.1121551379448222,3.1155537784886045,3.118952419032387,3.1223510595761694,3.125749700119952,3.1291483406637344,3.132546981207517,3.1359456217512993,3.139344262295082,3.1427429028388643,3.146141543382647,3.1495401839264296,3.152938824470212,3.1563374650139946,3.159736105557777,3.1631347461015595,3.166533386645342,3.1699320271891245,3.1733306677329067,3.1767293082766894,3.1801279488204717,3.1835265893642544,3.1869252299080366,3.1903238704518193,3.1937225109956016,3.1971211515393843,3.200519792083167,3.203918432626949,3.207317073170732,3.210715713714514,3.214114354258297,3.217512994802079,3.220911635345862,3.224310275889644,3.2277089164334267,3.231107556977209,3.2345061975209917,3.237904838064774,3.2413034786085566,3.244702119152339,3.2481007596961216,3.2514994002399042,3.2548980407836865,3.258296681327469,3.2616953218712514,3.265093962415034,3.2684926029588164,3.271891243502599,3.2752898840463813,3.278688524590164,3.2820871651339463,3.285485805677729,3.288884446221511,3.292283086765294,3.295681727309076,3.299080367852859,3.3024790083966415,3.305877648940424,3.3092762894842065,3.3126749300279887,3.3160735705717714,3.3194722111155537,3.3228708516593364,3.3262694922031186,3.3296681327469013,3.3330667732906836,3.3364654138344663,3.3398640543782485,3.343262694922031,3.3466613354658135,3.350059976009596,3.353458616553379,3.356857257097161,3.360255897640944,3.363654538184726,3.3670531787285087,3.370451819272291,3.3738504598160737,3.377249100359856,3.3806477409036386,3.384046381447421,3.3874450219912036,3.390843662534986,3.3942423030787685,3.3976409436225508,3.4010395841663335,3.404438224710116,3.4078368652538984,3.411235505797681,3.4146341463414633,3.418032786885246,3.4214314274290283,3.424830067972811,3.4282287085165932,3.431627349060376,3.435025989604158,3.438424630147941,3.441823270691723,3.445221911235506,3.4486205517792885,3.4520191923230708,3.4554178328668534,3.4588164734106357,3.4622151139544184,3.4656137544982006,3.4690123950419833,3.4724110355857656,3.4758096761295483,3.4792083166733305,3.482606957217113,3.4860055977608955,3.489404238304678,3.4928028788484604,3.496201519392243,3.499600159936026,3.502998800479808,3.5063974410235907,3.509796081567373,3.5131947221111557,3.516593362654938,3.5199920031987206,3.523390643742503,3.5267892842862856,3.530187924830068,3.5335865653738505,3.5369852059176328,3.5403838464614155,3.5437824870051977,3.5471811275489804,3.550579768092763,3.5539784086365453,3.557377049180328,3.5607756897241103,3.564174330267893,3.5675729708116752,3.570971611355458,3.57437025189924,3.577768892443023,3.581167532986805,3.584566173530588,3.58796481407437,3.5913634546181528,3.594762095161935,3.5981607357057177,3.6015593762495004,3.6049580167932826,3.6083566573370653,3.6117552978808476,3.6151539384246303,3.6185525789684125,3.6219512195121952,3.6253498600559775,3.62874850059976,3.6321471411435424,3.635545781687325,3.6389444222311074,3.64234306277489,3.6457417033186723,3.649140343862455,3.6525389844062377,3.65593762495002,3.6593362654938026,3.662734906037585,3.6661335465813676,3.66953218712515,3.6729308276689325,3.676329468212715,3.6797281087564975,3.6831267493002797,3.6865253898440624,3.6899240303878447,3.6933226709316274,3.69672131147541,3.7001199520191923,3.703518592562975,3.7069172331067572,3.71031587365054,3.713714514194322,3.717113154738105,3.720511795281887,3.72391043582567,3.727309076369452,3.7307077169132348,3.734106357457017,3.7375049980007997,3.740903638544582,3.7443022790883647,3.7477009196321474,3.7510995601759296,3.7544982007197123,3.7578968412634945,3.7612954818072772,3.7646941223510595,3.768092762894842,3.7714914034386244,3.774890043982407,3.7782886845261894,3.781687325069972,3.7850859656137543,3.788484606157537,3.7918832467013193,3.795281887245102,3.7986805277888847,3.802079168332667,3.8054778088764496,3.808876449420232,3.8122750899640145,3.815673730507797,3.8190723710515795,3.8224710115953617,3.8258696521391444,3.8292682926829267,3.8326669332267094,3.8360655737704916,3.8394642143142743,3.8428628548580566,3.8462614954018393,3.849660135945622,3.853058776489404,3.856457417033187,3.859856057576969,3.863254698120752,3.866653338664534,3.870051979208317,3.873450619752099,3.8768492602958817,3.880247900839664,3.8836465413834467,3.887045181927229,3.8904438224710116,3.893842463014794,3.8972411035585766,3.9006397441023593,3.9040383846461415,3.907437025189924,3.9108356657337064,3.914234306277489,3.9176329468212714,3.921031587365054,3.9244302279088363,3.927828868452619,3.9312275089964013,3.934626149540184,3.938024790083966,3.941423430627749,3.9448220711715316,3.948220711715314,3.9516193522590966,3.955017992802879,3.9584166333466615,3.9618152738904437,3.9652139144342264,3.9686125549780087,3.9720111955217914,3.9754098360655736,3.9788084766093563,3.9822071171531386,3.9856057576969213,3.9890043982407035,3.992403038784486,3.995801679328269,3.999200319872051,4.002598960415834,4.005997600959616,4.009396241503398,4.0127948820471815,4.016193522590964,4.019592163134746,4.022990803678528,4.026389444222311,4.029788084766094,4.033186725309876,4.036585365853658,4.039984006397441,4.0433826469412235,4.046781287485006,4.050179928028789,4.053578568572571,4.056977209116353,4.060375849660136,4.063774490203919,4.067173130747701,4.070571771291483,4.0739704118352655,4.077369052379049,4.080767692922831,4.084166333466613,4.087564974010395,4.090963614554179,4.094362255097961,4.097760895641743,4.101159536185526,4.1045581767293084,4.107956817273091,4.111355457816873,4.114754098360656,4.118152738904438,4.121551379448221,4.124950019992003,4.128348660535786,4.131747301079568,4.1351459416233505,4.138544582167133,4.141943222710916,4.145341863254698,4.14874050379848,4.1521391443422635,4.155537784886046,4.158936425429828,4.16233506597361,4.165733706517393,4.169132347061176,4.172530987604958,4.17592962814874,4.179328268692523,4.1827269092363055,4.186125549780088,4.18952419032387,4.192922830867653,4.196321471411435,4.199720111955218,4.203118752499001,4.206517393042783,4.209916033586565,4.2133146741303475,4.216713314674131,4.220111955217913,4.223510595761695,4.226909236305477,4.230307876849261,4.233706517393043,4.237105157936825,4.240503798480607,4.2439024390243905,4.247301079568173,4.250699720111955,4.254098360655738,4.25749700119952,4.260895641743303,4.264294282287085,4.267692922830868,4.27109156337465,4.2744902039184325,4.277888844462215,4.281287485005998,4.28468612554978,4.288084766093562,4.291483406637345,4.294882047181128,4.29828068772491,4.301679328268692,4.305077968812475,4.308476609356258,4.31187524990004,4.315273890443822,4.318672530987605,4.3220711715313875,4.32546981207517,4.328868452618952,4.332267093162735,4.335665733706517,4.3390643742503,4.342463014794083,4.345861655337865,4.349260295881647,4.35265893642543,4.356057576969213,4.359456217512995,4.362854858056777,4.3662534986005594,4.369652139144343,4.373050779688125,4.376449420231907,4.379848060775689,4.3832467013194725,4.386645341863255,4.390043982407037,4.39344262295082,4.396841263494602,4.400239904038385,4.403638544582167,4.40703718512595,4.410435825669732,4.4138344662135145,4.417233106757297,4.42063174730108,4.424030387844862,4.427429028388644,4.430827668932427,4.43422630947621,4.437624950019992,4.441023590563774,4.444422231107557,4.44782087165134,4.451219512195122,4.454618152738904,4.458016793282687,4.4614154338264695,4.464814074370252,4.468212714914034,4.471611355457817,4.475009996001599,4.478408636545382,4.481807277089164,4.485205917632947,4.488604558176729,4.492003198720512,4.495401839264295,4.498800479808077,4.502199120351859,4.5055977608956415,4.508996401439425,4.512395041983207,4.515793682526989,4.519192323070771,4.5225909636145545,4.525989604158337,4.529388244702119,4.532786885245901,4.536185525789684,4.539584166333467,4.542982806877249,4.546381447421032,4.549780087964814,4.5531787285085965,4.556577369052379,4.559976009596162,4.563374650139944,4.566773290683726,4.570171931227509,4.573570571771292,4.576969212315074,4.580367852858856,4.5837664934026385,4.587165133946422,4.590563774490204,4.593962415033986,4.597361055577769,4.600759696121552,4.604158336665334,4.607556977209116,4.610955617752899,4.614354258296681,4.617752898840464,4.621151539384246,4.624550179928029,4.627948820471811,4.631347461015594,4.634746101559376,4.638144742103159,4.641543382646941,4.6449420231907235,4.648340663734507,4.651739304278289,4.655137944822071,4.658536585365853,4.6619352259096365,4.665333866453419,4.668732506997201,4.672131147540983,4.675529788084766,4.678928428628549,4.682327069172331,4.685725709716113,4.689124350259896,4.6925229908036785,4.695921631347461,4.699320271891244,4.702718912435026,4.706117552978808,4.709516193522591,4.712914834066374,4.716313474610156,4.719712115153938,4.7231107556977205,4.726509396241504,4.729908036785286,4.733306677329068,4.73670531787285,4.740103958416634,4.743502598960416,4.746901239504198,4.750299880047981,4.7536985205917635,4.757097161135546,4.760495801679328,4.763894442223111,4.767293082766893,4.770691723310676,4.774090363854458,4.777489004398241,4.780887644942023,4.7842862854858055,4.787684926029588,4.791083566573371,4.794482207117153,4.797880847660935,4.8012794882047185,4.804678128748501,4.808076769292283,4.811475409836065,4.814874050379848,4.818272690923631,4.821671331467413,4.825069972011195,4.828468612554978,4.8318672530987605,4.835265893642543,4.838664534186325,4.842063174730108,4.84546181527389,4.848860455817673,4.852259096361456,4.855657736905238,4.85905637744902,4.8624550179928026,4.865853658536586,4.869252299080368,4.87265093962415,4.876049580167932,4.879448220711716,4.882846861255498,4.88624550179928,4.889644142343063,4.8930427828868455,4.896441423430628,4.89984006397441,4.903238704518193,4.906637345061975,4.910035985605758,4.91343462614954,4.916833266693323,4.920231907237105,4.9236305477808875,4.92702918832467,4.930427828868453,4.933826469412235,4.937225109956017,4.9406237504998005,4.944022391043583,4.947421031587365,4.950819672131147,4.95421831267493,4.957616953218713,4.961015593762495,4.964414234306277,4.96781287485006,4.9712115153938425,4.974610155937625,4.978008796481407,4.98140743702519,4.984806077568972,4.988204718112755,4.991603358656538,4.99500199920032,4.998400639744102,5.001799280287885,5.005197920831668,5.00859656137545,5.011995201919232,5.0153938424630145,5.018792483006798,5.02219112355058,5.025589764094362,5.028988404638144,5.0323870451819275,5.03578568572571,5.039184326269492,5.042582966813275,5.045981607357057,5.04938024790084,5.052778888444622,5.056177528988405,5.059576169532187,5.0629748100759695,5.066373450619752,5.069772091163535,5.073170731707317,5.076569372251099,5.079968012794882,5.083366653338665,5.086765293882447,5.090163934426229,5.093562574970012,5.096961215513795,5.100359856057577,5.103758496601359,5.107157137145142,5.1105557776889246,5.113954418232707,5.117353058776489,5.120751699320272,5.124150339864054,5.127548980407837,5.130947620951619,5.134346261495402,5.137744902039184,5.141143542582967,5.14454218312675,5.147940823670532,5.151339464214314,5.1547381047580965,5.15813674530188,5.161535385845662,5.164934026389444,5.168332666933226,5.1717313074770095,5.175129948020792,5.178528588564574,5.181927229108356,5.185325869652139,5.188724510195922,5.192123150739704,5.195521791283487,5.198920431827269,5.2023190723710515,5.205717712914834,5.209116353458617,5.212514994002399,5.215913634546181,5.219312275089964,5.222710915633747,5.226109556177529,5.229508196721311,5.2329068372650935,5.236305477808877,5.239704118352659,5.243102758896441,5.246501399440224,5.249900039984007,5.253298680527789,5.256697321071571,5.260095961615354,5.2634946021591364,5.266893242702919,5.270291883246701,5.273690523790484,5.277089164334266,5.280487804878049,5.283886445421831,5.287285085965614,5.290683726509396,5.2940823670531785,5.297481007596962,5.300879648140744,5.304278288684526,5.307676929228308,5.3110755697720915,5.314474210315874,5.317872850859656,5.321271491403438,5.324670131947221,5.328068772491004,5.331467413034786,5.334866053578568,5.338264694122351,5.3416633346661335,5.345061975209916,5.348460615753699,5.351859256297481,5.355257896841263,5.358656537385046,5.362055177928829,5.365453818472611,5.368852459016393,5.3722510995601755,5.375649740103959,5.379048380647741,5.382447021191523,5.385845661735305,5.389244302279089,5.392642942822871,5.396041583366653,5.399440223910436,5.4028388644542185,5.406237504998001,5.409636145541783,5.413034786085566,5.416433426629348,5.419832067173131,5.423230707716913,5.426629348260696,5.430027988804478,5.4334266293482605,5.436825269892044,5.440223910435826,5.443622550979608,5.44702119152339,5.4504198320671735,5.453818472610956,5.457217113154738,5.46061575369852,5.464014394242303,5.467413034786086,5.470811675329868,5.47421031587365,5.477608956417433,5.4810075969612155,5.484406237504998,5.487804878048781,5.491203518592563,5.494602159136345,5.498000799680128,5.501399440223911,5.504798080767693,5.508196721311475,5.511595361855258,5.514994002399041,5.518392642942823,5.521791283486605,5.5251899240303874,5.528588564574171,5.531987205117953,5.535385845661735,5.538784486205518,5.5421831267493005,5.545581767293083,5.548980407836865,5.552379048380648,5.55577768892443,5.559176329468213,5.562574970011995,5.565973610555778,5.56937225109956,5.5727708916433425,5.576169532187125,5.579568172730908,5.58296681327469,5.586365453818472,5.5897640943622555,5.593162734906038,5.59656137544982,5.599960015993602,5.603358656537385,5.606757297081168,5.61015593762495,5.613554578168732,5.616953218712515,5.6203518592562975,5.62375049980008,5.627149140343862,5.630547780887645,5.633946421431427,5.63734506197521,5.640743702518993,5.644142343062775,5.647540983606557,5.65093962415034,5.654338264694123,5.657736905237905,5.661135545781687,5.6645341863254695,5.667932826869253,5.671331467413035,5.674730107956817,5.678128748500599,5.6815273890443825,5.684926029588165,5.688324670131947,5.69172331067573,5.695121951219512,5.698520591763295,5.701919232307077,5.70531787285086,5.708716513394642,5.7121151539384245,5.715513794482207,5.71891243502599,5.722311075569772,5.725709716113554,5.729108356657337,5.73250699720112,5.735905637744902,5.739304278288684,5.742702918832467,5.74610155937625,5.749500199920032,5.752898840463814,5.756297481007597,5.7596961215513796,5.763094762095162,5.766493402638944,5.769892043182727,5.773290683726509,5.776689324270292,5.780087964814074,5.783486605357857,5.786885245901639,5.790283886445422,5.793682526989205,5.797081167532987,5.800479808076769,5.8038784486205515,5.807277089164335,5.810675729708117,5.814074370251899,5.817473010795681,5.8208716513394645,5.824270291883247,5.827668932427029,5.831067572970811,5.834466213514594,5.837864854058377,5.841263494602159,5.844662135145942,5.848060775689724,5.8514594162335065,5.854858056777289,5.858256697321072,5.861655337864854,5.865053978408636,5.868452618952419,5.871851259496202,5.875249900039984,5.878648540583766,5.8820471811275485,5.885445821671332,5.888844462215114,5.892243102758896,5.895641743302679,5.899040383846462,5.902439024390244,5.905837664934026,5.909236305477809,5.9126349460215915,5.916033586565374,5.919432227109156,5.922830867652939,5.926229508196721,5.929628148740504,5.933026789284287,5.936425429828069,5.939824070371851,5.9432227109156335,5.946621351459417,5.950019992003199,5.953418632546981,5.956817273090763,5.9602159136345465,5.963614554178329,5.967013194722111,5.970411835265893,5.973810475809676,5.977209116353459,5.980607756897241,5.984006397441024,5.987405037984806,5.9908036785285885,5.994202319072371,5.997600959616154,6.000999600159936,6.004398240703718,6.007796881247501,6.011195521791284,6.014594162335066,6.017992802878848,6.0213914434226306,6.024790083966414,6.028188724510196,6.031587365053978,6.034986005597761,6.038384646141544,6.041783286685326,6.045181927229108,6.048580567772891,6.0519792083166735,6.055377848860456,6.058776489404238,6.062175129948021,6.065573770491803,6.068972411035586,6.072371051579368,6.075769692123151,6.079168332666933,6.0825669732107155,6.085965613754499,6.089364254298281,6.092762894842063,6.096161535385845,6.0995601759296285,6.102958816473411,6.106357457017193,6.109756097560975,6.113154738104758,6.116553378648541,6.119952019192323,6.123350659736105,6.126749300279888,6.1301479408236705,6.133546581367453,6.136945221911236,6.140343862455018,6.1437425029988,6.147141143542583,6.150539784086366,6.153938424630148,6.15733706517393,6.160735705717713,6.164134346261496,6.167532986805278,6.17093162734906,6.1743302678928424,6.177728908436626,6.181127548980408,6.18452618952419,6.187924830067973,6.1913234706117555,6.194722111155538,6.19812075169932,6.201519392243103,6.204918032786885,6.208316673330668,6.21171531387445,6.215113954418233,6.218512594962015,6.2219112355057975,6.22530987604958,6.228708516593363,6.232107157137145,6.235505797680927,6.2389044382247105,6.242303078768493,6.245701719312275,6.249100359856057,6.25249900039984,6.255897640943623,6.259296281487405,6.262694922031187,6.26609356257497,6.2694922031187525,6.272890843662535,6.276289484206317,6.2796881247501,6.283086765293882,6.286485405837665,6.289884046381448,6.29328268692523,6.296681327469012,6.300079968012795,6.303478608556578,6.30687724910036,6.310275889644142,6.3136745301879245,6.317073170731708,6.32047181127549,6.323870451819272,6.327269092363054,6.3306677329068375,6.33406637345062,6.337465013994402,6.340863654538185,6.344262295081967,6.34766093562575,6.351059576169532,6.354458216713315,6.357856857257097,6.3612554978008795,6.364654138344662,6.368052778888445,6.371451419432227,6.374850059976009,6.378248700519792,6.381647341063575,6.385045981607357,6.388444622151139,6.391843262694922,6.395241903238705,6.398640543782487,6.402039184326269,6.405437824870052,6.408836465413835,6.412235105957617,6.415633746501399,6.419032387045182,6.4224310275889644,6.425829668132747,6.429228308676529,6.432626949220312,6.436025589764094,6.439424230307877,6.44282287085166,6.446221511395442,6.449620151939224,6.4530187924830065,6.45641743302679,6.459816073570572,6.463214714114354,6.466613354658136,6.4700119952019195,6.473410635745702,6.476809276289484,6.480207916833267,6.483606557377049,6.487005197920832,6.490403838464614,6.493802479008397,6.497201119552179,6.5005997600959615,6.503998400639744,6.507397041183527,6.510795681727309,6.514194322271091,6.517592962814874,6.520991603358657,6.524390243902439,6.527788884446221,6.531187524990004,6.534586165533787,6.537984806077569,6.541383446621351,6.544782087165134,6.548180727708917,6.551579368252699,6.554978008796481,6.558376649340264,6.5617752898840465,6.565173930427829,6.568572570971611,6.571971211515394,6.575369852059176,6.578768492602959,6.582167133146742,6.585565773690524,6.588964414234306,6.5923630547780885,6.595761695321872,6.599160335865654,6.602558976409436,6.605957616953218,6.6093562574970015,6.612754898040784,6.616153538584566,6.619552179128348,6.622950819672131,6.626349460215914,6.629748100759696,6.633146741303479,6.636545381847261,6.6399440223910435,6.643342662934826,6.646741303478609,6.650139944022391,6.653538584566173,6.656937225109956,6.660335865653739,6.663734506197521,6.667133146741303,6.670531787285086,6.673930427828869,6.677329068372651,6.680727708916433,6.684126349460216,6.687524990003999,6.690923630547781,6.694322271091563,6.697720911635346,6.7011195521791285,6.704518192722911,6.707916833266693,6.711315473810476,6.714714114354258,6.718112754898041,6.721511395441823,6.724910035985606,6.728308676529388,6.7317073170731705,6.735105957616954,6.738504598160736,6.741903238704518,6.7453018792483,6.7487005197920835,6.752099160335866,6.755497800879648,6.75889644142343,6.762295081967213,6.765693722510996,6.769092363054778,6.77249100359856,6.775889644142343,6.7792882846861255,6.782686925229908,6.786085565773691,6.789484206317473,6.792882846861255,6.796281487405038,6.799680127948821,6.803078768492603,6.806477409036385,6.809876049580168,6.813274690123951,6.816673330667733,6.820071971211515,6.8234706117552975,6.826869252299081,6.830267892842863,6.833666533386645,6.837065173930428,6.8404638144742105,6.843862455017993,6.847261095561775,6.850659736105558,6.85405837664934,6.857457017193123,6.860855657736905,6.864254298280688,6.86765293882447,6.8710515793682525,6.874450219912035,6.877848860455818,6.8812475009996,6.884646141543382,6.8880447820871655,6.891443422630948,6.89484206317473,6.898240703718512,6.901639344262295,6.905037984806078,6.90843662534986,6.911835265893642,6.915233906437425,6.9186325469812076,6.92203118752499,6.925429828068772,6.928828468612555,6.932227109156337,6.93562574970012,6.939024390243903,6.942423030787685,6.945821671331467,6.94922031187525,6.952618952419033,6.956017592962815,6.959416233506597,6.9628148740503795,6.966213514594163,6.969612155137945,6.973010795681727,6.976409436225509,6.9798080767692925,6.983206717313075,6.986605357856857,6.99000399840064,6.993402638944422,6.996801279488205,7.000199920031987,7.00359856057577,7.006997201119552,7.0103958416633345,7.013794482207117,7.0171931227509,7.020591763294682,7.023990403838464,7.0273890443822475,7.03078768492603,7.034186325469812,7.037584966013594,7.040983606557377,7.04438224710116,7.047780887644942,7.051179528188724,7.054578168732507,7.05797680927629,7.061375449820072,7.064774090363854,7.068172730907637,7.0715713714514195,7.074970011995202,7.078368652538985,7.081767293082767,7.085165933626549,7.088564574170332,7.091963214714115,7.095361855257897,7.098760495801679,7.1021591363454615,7.105557776889245,7.108956417433027,7.112355057976809,7.115753698520591,7.1191523390643745,7.122550979608157,7.125949620151939,7.129348260695722,7.132746901239504,7.136145541783287,7.139544182327069,7.142942822870852,7.146341463414634,7.1497401039584165,7.153138744502199,7.156537385045982,7.159936025589764,7.163334666133546,7.166733306677329,7.170131947221112,7.173530587764894,7.176929228308676,7.180327868852459,7.183726509396242,7.187125149940024,7.190523790483806,7.193922431027589,7.197321071571372,7.200719712115154,7.204118352658936,7.207516993202719,7.2109156337465015,7.214314274290284,7.217712914834066,7.221111555377849,7.224510195921631,7.227908836465414,7.231307477009197,7.234706117552979,7.238104758096761,7.2415033986405435,7.244902039184327,7.248300679728109,7.251699320271891,7.255097960815673,7.2584966013594565,7.261895241903239,7.265293882447021,7.268692522990803,7.272091163534586,7.275489804078369,7.278888444622151,7.282287085165934,7.285685725709716,7.2890843662534985,7.292483006797281,7.295881647341064,7.299280287884846,7.302678928428628,7.306077568972411,7.309476209516194,7.312874850059976,7.316273490603758,7.319672131147541,7.323070771691324,7.326469412235106,7.329868052778888,7.333266693322671,7.336665333866454,7.340063974410236,7.343462614954018,7.346861255497801,7.3502598960415835,7.353658536585366,7.357057177129148,7.360455817672931,7.363854458216713,7.367253098760496,7.370651739304278,7.374050379848061,7.377449020391843,7.3808476609356255,7.384246301479409,7.387644942023191,7.391043582566973,7.394442223110755,7.3978408636545385,7.401239504198321,7.404638144742103,7.408036785285885,7.411435425829668,7.414834066373451,7.418232706917233,7.421631347461015,7.425029988004798,7.4284286285485805,7.431827269092363,7.435225909636146,7.438624550179928,7.44202319072371,7.445421831267493,7.448820471811276,7.452219112355058,7.45561775289884,7.459016393442623,7.462415033986406,7.465813674530188,7.46921231507397,7.4726109556177525,7.476009596161536,7.479408236705318,7.4828068772491,7.486205517792883,7.4896041583366655,7.493002798880448,7.49640143942423,7.499800079968013,7.503198720511795,7.506597361055578,7.50999600159936,7.513394642143143,7.516793282686925,7.5201919232307075,7.523590563774491,7.526989204318273,7.530387844862055,7.533786485405837,7.5371851259496205,7.540583766493403,7.543982407037185,7.547381047580967,7.55077968812475,7.554178328668533,7.557576969212315,7.560975609756097,7.56437425029988,7.567772890843663,7.571171531387445,7.574570171931228,7.57796881247501,7.5813674530187924,7.584766093562575,7.588164734106358,7.59156337465014,7.594962015193922,7.598360655737705,7.601759296281488,7.60515793682527,7.608556577369052,7.6119552179128345,7.615353858456618,7.6187524990004,7.622151139544182,7.625549780087965,7.6289484206317475,7.63234706117553,7.635745701719312,7.639144342263095,7.642542982806877,7.64594162335066,7.649340263894442,7.652738904438225,7.656137544982007,7.6595361855257895,7.662934826069572,7.666333466613355,7.669732107157137,7.673130747700919,7.6765293882447025,7.679928028788485,7.683326669332267,7.686725309876049,7.690123950419832,7.693522590963615,7.696921231507397,7.700319872051179,7.703718512594962,7.707117153138745,7.710515793682527,7.713914434226309,7.717313074770092,7.7207117153138745,7.724110355857657,7.72750899640144,7.730907636945222,7.734306277489004,7.737704918032787,7.74110355857657,7.744502199120352,7.747900839664134,7.7512994802079165,7.7546981207517,7.758096761295482,7.761495401839264,7.764894042383046,7.7682926829268295,7.771691323470612,7.775089964014394,7.778488604558177,7.781887245101959,7.785285885645742,7.788684526189524,7.792083166733307,7.795481807277089,7.7988804478208715,7.802279088364654,7.805677728908437,7.809076369452219,7.812475009996001,7.815873650539784,7.819272291083567,7.822670931627349,7.826069572171131,7.829468212714914,7.832866853258697,7.836265493802479,7.839664134346261,7.843062774890044,7.846461415433827,7.849860055977609,7.853258696521391,7.856657337065174,7.8600559776089565,7.863454618152739,7.866853258696521,7.870251899240304,7.873650539784086,7.877049180327869,7.880447820871652,7.883846461415434,7.887245101959216,7.8906437425029985,7.894042383046782,7.897441023590564,7.900839664134346,7.904238304678128,7.9076369452219115,7.911035585765694,7.914434226309476,7.917832866853258,7.921231507397041,7.924630147940824,7.928028788484606,7.931427429028389,7.934826069572171,7.9382247101159535,7.941623350659736,7.945021991203519,7.948420631747301,7.951819272291083,7.955217912834866,7.958616553378649,7.962015193922431,7.965413834466213,7.968812475009996,7.972211115553779,7.975609756097561,7.979008396641343,7.982407037185126,7.985805677728909,7.989204318272691,7.992602958816473,7.996001599360256,7.9994002399040385,8.002798880447822,8.006197520991604,8.009596161535386,8.012994802079168,8.01639344262295,8.019792083166733,8.023190723710515,8.0265893642543,8.029988004798081,8.033386645341864,8.036785285885646,8.040183926429428,8.04358256697321,8.046981207516993,8.050379848060775,8.053778488604559,8.057177129148341,8.060575769692123,8.063974410235906,8.067373050779688,8.07077169132347,8.074170331867252,8.077568972411036,8.080967612954819,8.084366253498601,8.087764894042383,8.091163534586165,8.094562175129948,8.09796081567373,8.101359456217512,8.104758096761296,8.108156737305078,8.11155537784886,8.114954018392643,8.118352658936425,8.121751299480207,8.12514994002399,8.128548580567774,8.131947221111556,8.135345861655338,8.13874450219912,8.142143142742903,8.145541783286685,8.148940423830467,8.15233906437425,8.155737704918034,8.159136345461816,8.162534986005598,8.16593362654938,8.169332267093163,8.172730907636945,8.176129548180727,8.179528188724511,8.182926829268293,8.186325469812076,8.189724110355858,8.19312275089964,8.196521391443422,8.199920031987205,8.203318672530987,8.20671731307477,8.210115953618553,8.213514594162335,8.216913234706118,8.2203118752499,8.223710515793682,8.227109156337464,8.230507796881248,8.23390643742503,8.237305077968813,8.240703718512595,8.244102359056377,8.24750099960016,8.250899640143942,8.254298280687724,8.257696921231508,8.26109556177529,8.264494202319073,8.267892842862855,8.271291483406637,8.27469012395042,8.278088764494202,8.281487405037986,8.284886045581768,8.28828468612555,8.291683326669332,8.295081967213115,8.298480607756897,8.30187924830068,8.305277888844461,8.308676529388245,8.312075169932028,8.31547381047581,8.318872451019592,8.322271091563374,8.325669732107157,8.329068372650939,8.332467013194723,8.335865653738505,8.339264294282287,8.34266293482607,8.346061575369852,8.349460215913634,8.352858856457416,8.356257497001199,8.359656137544983,8.363054778088765,8.366453418632547,8.36985205917633,8.373250699720112,8.376649340263894,8.380047980807676,8.38344662135146,8.386845261895242,8.390243902439025,8.393642542982807,8.39704118352659,8.400439824070371,8.403838464614154,8.407237105157936,8.41063574570172,8.414034386245502,8.417433026789285,8.420831667333067,8.424230307876849,8.427628948420631,8.431027588964414,8.434426229508198,8.43782487005198,8.441223510595762,8.444622151139544,8.448020791683327,8.451419432227109,8.454818072770891,8.458216713314673,8.461615353858457,8.46501399440224,8.468412634946022,8.471811275489804,8.475209916033586,8.478608556577369,8.48200719712115,8.485405837664935,8.488804478208717,8.4922031187525,8.495601759296282,8.499000399840064,8.502399040383846,8.505797680927628,8.50919632147141,8.512594962015195,8.515993602558977,8.519392243102759,8.522790883646541,8.526189524190324,8.529588164734106,8.532986805277888,8.536385445821672,8.539784086365454,8.543182726909237,8.546581367453019,8.549980007996801,8.553378648540583,8.556777289084366,8.560175929628148,8.563574570171932,8.566973210715714,8.570371851259496,8.573770491803279,8.577169132347061,8.580567772890843,8.583966413434625,8.58736505397841,8.590763694522192,8.594162335065974,8.597560975609756,8.600959616153538,8.60435825669732,8.607756897241103,8.611155537784885,8.61455417832867,8.617952818872451,8.621351459416234,8.624750099960016,8.628148740503798,8.63154738104758,8.634946021591363,8.638344662135147,8.641743302678929,8.645141943222711,8.648540583766493,8.651939224310276,8.655337864854058,8.65873650539784,8.662135145941622,8.665533786485407,8.668932427029189,8.672331067572971,8.675729708116753,8.679128348660536,8.682526989204318,8.6859256297481,8.689324270291884,8.692722910835666,8.696121551379449,8.69952019192323,8.702918832467013,8.706317473010795,8.709716113554578,8.71311475409836,8.716513394642144,8.719912035185926,8.723310675729708,8.72670931627349,8.730107956817273,8.733506597361055,8.736905237904837,8.740303878448621,8.743702518992404,8.747101159536186,8.750499800079968,8.75389844062375,8.757297081167533,8.760695721711315,8.764094362255097,8.767493002798881,8.770891643342663,8.774290283886446,8.777688924430228,8.78108756497401,8.784486205517792,8.787884846061575,8.791283486605359,8.79468212714914,8.798080767692923,8.801479408236705,8.804878048780488,8.80827668932427,8.811675329868052,8.815073970411834,8.818472610955618,8.8218712514994,8.825269892043183,8.828668532586965,8.832067173130747,8.83546581367453,8.838864454218312,8.842263094762096,8.845661735305878,8.84906037584966,8.852459016393443,8.855857656937225,8.859256297481007,8.86265493802479,8.866053578568573,8.869452219112356,8.872850859656138,8.87624950019992,8.879648140743702,8.883046781287485,8.886445421831267,8.88984406237505,8.893242702918833,8.896641343462615,8.900039984006398,8.90343862455018,8.906837265093962,8.910235905637744,8.913634546181527,8.91703318672531,8.920431827269093,8.923830467812875,8.927229108356658,8.93062774890044,8.934026389444222,8.937425029988004,8.940823670531787,8.94422231107557,8.947620951619353,8.951019592163135,8.954418232706917,8.9578168732507,8.961215513794482,8.964614154338264,8.968012794882048,8.97141143542583,8.974810075969613,8.978208716513395,8.981607357057177,8.98500599760096,8.988404638144742,8.991803278688524,8.995201919232308,8.99860055977609,9.001999200319872,9.005397840863655,9.008796481407437,9.012195121951219,9.015593762495001,9.018992403038785,9.022391043582568,9.02578968412635,9.029188324670132,9.032586965213914,9.035985605757697,9.039384246301479,9.042782886845261,9.046181527389045,9.049580167932827,9.05297880847661,9.056377449020392,9.059776089564174,9.063174730107956,9.066573370651739,9.069972011195523,9.073370651739305,9.076769292283087,9.08016793282687,9.083566573370652,9.086965213914434,9.090363854458216,9.093762495001998,9.097161135545782,9.100559776089565,9.103958416633347,9.10735705717713,9.110755697720911,9.114154338264694,9.117552978808476,9.12095161935226,9.124350259896042,9.127748900439824,9.131147540983607,9.134546181527389,9.137944822071171,9.141343462614953,9.144742103158736,9.14814074370252,9.151539384246302,9.154938024790084,9.158336665333866,9.161735305877649,9.165133946421431,9.168532586965213,9.171931227508997,9.17532986805278,9.178728508596562,9.182127149140344,9.185525789684126,9.188924430227909,9.19232307077169,9.195721711315473,9.199120351859257,9.20251899240304,9.205917632946822,9.209316273490604,9.212714914034386,9.216113554578168,9.21951219512195,9.222910835665735,9.226309476209517,9.229708116753299,9.233106757297081,9.236505397840864,9.239904038384646,9.243302678928428,9.24670131947221,9.250099960015994,9.253498600559777,9.256897241103559,9.260295881647341,9.263694522191123,9.267093162734906,9.270491803278688,9.273890443822472,9.277289084366254,9.280687724910036,9.284086365453819,9.2874850059976,9.290883646541383,9.294282287085165,9.297680927628948,9.301079568172732,9.304478208716514,9.307876849260296,9.311275489804078,9.31467413034786,9.318072770891643,9.321471411435425,9.32487005197921,9.328268692522991,9.331667333066774,9.335065973610556,9.338464614154338,9.34186325469812,9.345261895241903,9.348660535785685,9.352059176329469,9.355457816873251,9.358856457417033,9.362255097960816,9.365653738504598,9.36905237904838,9.372451019592162,9.375849660135946,9.379248300679729,9.382646941223511,9.386045581767293,9.389444222311075,9.392842862854858,9.39624150339864,9.399640143942422,9.403038784486206,9.406437425029988,9.40983606557377,9.413234706117553,9.416633346661335,9.420031987205117,9.4234306277489,9.426829268292684,9.430227908836466,9.433626549380248,9.43702518992403,9.440423830467813,9.443822471011595,9.447221111555377,9.45061975209916,9.454018392642944,9.457417033186726,9.460815673730508,9.46421431427429,9.467612954818073,9.471011595361855,9.474410235905637,9.477808876449421,9.481207516993203,9.484606157536986,9.488004798080768,9.49140343862455,9.494802079168332,9.498200719712115,9.501599360255897,9.50499800079968,9.508396641343463,9.511795281887245,9.515193922431028,9.51859256297481,9.521991203518592,9.525389844062374,9.528788484606158,9.53218712514994,9.535585765693723,9.538984406237505,9.542383046781287,9.54578168732507,9.549180327868852,9.552578968412634,9.555977608956418,9.5593762495002,9.562774890043983,9.566173530587765,9.569572171131547,9.57297081167533,9.576369452219112,9.579768092762896,9.583166733306678,9.58656537385046,9.589964014394242,9.593362654938025,9.596761295481807,9.60015993602559,9.603558576569371,9.606957217113155,9.610355857656938,9.61375449820072,9.617153138744502,9.620551779288284,9.623950419832067,9.627349060375849,9.630747700919633,9.634146341463415,9.637544982007197,9.64094362255098,9.644342263094762,9.647740903638544,9.651139544182326,9.654538184726109,9.657936825269893,9.661335465813675,9.664734106357457,9.66813274690124,9.671531387445022,9.674930027988804,9.678328668532586,9.68172730907637,9.685125949620152,9.688524590163935,9.691923230707717,9.6953218712515,9.698720511795281,9.702119152339064,9.705517792882846,9.70891643342663,9.712315073970412,9.715713714514195,9.719112355057977,9.722510995601759,9.725909636145541,9.729308276689324,9.732706917233108,9.73610555777689,9.739504198320672,9.742902838864454,9.746301479408237,9.749700119952019,9.753098760495801,9.756497401039583,9.759896041583367,9.76329468212715,9.766693322670932,9.770091963214714,9.773490603758496,9.776889244302279,9.78028788484606,9.783686525389845,9.787085165933627,9.79048380647741,9.793882447021192,9.797281087564974,9.800679728108756,9.804078368652538,9.80747700919632,9.810875649740105,9.814274290283887,9.81767293082767,9.821071571371451,9.824470211915234,9.827868852459016,9.831267493002798,9.834666133546582,9.838064774090364,9.841463414634147,9.844862055177929,9.848260695721711,9.851659336265493,9.855057976809276,9.858456617353058,9.861855257896842,9.865253898440624,9.868652538984406,9.872051179528189,9.875449820071971,9.878848460615753,9.882247101159535,9.88564574170332,9.889044382247102,9.892443022790884,9.895841663334666,9.899240303878448,9.90263894442223,9.906037584966013,9.909436225509797,9.91283486605358,9.916233506597361,9.919632147141144,9.923030787684926,9.926429428228708,9.92982806877249,9.933226709316273,9.936625349860057,9.940023990403839,9.943422630947621,9.946821271491403,9.950219912035186,9.953618552578968,9.95701719312275,9.960415833666534,9.963814474210317,9.967213114754099,9.970611755297881,9.974010395841663,9.977409036385446,9.980807676929228,9.98420631747301,9.987604958016794,9.991003598560576,9.994402239104359,9.99780087964814,10.001199520191923,10.004598160735705,10.007996801279488,10.011395441823272,10.014794082367054,10.018192722910836,10.021591363454618,10.0249900039984,10.028388644542183,10.031787285085965,10.035185925629747,10.038584566173531,10.041983206717314,10.045381847261096,10.048780487804878,10.05217912834866,10.055577768892443,10.058976409436225,10.062375049980009,10.065773690523791,10.069172331067573,10.072570971611356,10.075969612155138,10.07936825269892,10.082766893242702,10.086165533786485,10.089564174330269,10.092962814874051,10.096361455417833,10.099760095961615,10.103158736505398,10.10655737704918,10.109956017592962,10.113354658136746,10.116753298680528,10.12015193922431,10.123550579768093,10.126949220311875,10.130347860855657,10.13374650139944,10.137145141943222,10.140543782487006,10.143942423030788,10.14734106357457,10.150739704118353,10.154138344662135,10.157536985205917,10.1609356257497,10.164334266293483,10.167732906837266,10.171131547381048,10.17453018792483,10.177928828468612,10.181327469012395,10.184726109556177,10.18812475009996,10.191523390643743,10.194922031187525,10.198320671731308,10.20171931227509,10.205117952818872,10.208516593362654,10.211915233906437,10.21531387445022,10.218712514994003,10.222111155537785,10.225509796081568,10.22890843662535,10.232307077169132,10.235705717712914,10.239104358256697,10.24250299880048,10.245901639344263,10.249300279888045,10.252698920431827,10.25609756097561,10.259496201519392,10.262894842063174,10.266293482606958,10.26969212315074,10.273090763694523,10.276489404238305,10.279888044782087,10.28328668532587,10.286685325869652,10.290083966413434,10.293482606957218,10.296881247501,10.300279888044782,10.303678528588565,10.307077169132347,10.310475809676129,10.313874450219911,10.317273090763695,10.320671731307478,10.32407037185126,10.327469012395042,10.330867652938824,10.334266293482607,10.337664934026389,10.341063574570171,10.344462215113955,10.347860855657737,10.35125949620152,10.354658136745302,10.358056777289084,10.361455417832866,10.364854058376649,10.368252698920433,10.371651339464215,10.375049980007997,10.37844862055178,10.381847261095562,10.385245901639344,10.388644542183126,10.392043182726908,10.395441823270692,10.398840463814475,10.402239104358257,10.40563774490204,10.409036385445821,10.412435025989604,10.415833666533386,10.41923230707717,10.422630947620952,10.426029588164734,10.429428228708517,10.432826869252299,10.436225509796081,10.439624150339863,10.443022790883646,10.44642143142743,10.449820071971212,10.453218712514994,10.456617353058776,10.460015993602559,10.463414634146341,10.466813274690123,10.470211915233907,10.47361055577769,10.477009196321472,10.480407836865254,10.483806477409036,10.487205117952819,10.4906037584966,10.494002399040383,10.497401039584167,10.50079968012795,10.504198320671732,10.507596961215514,10.510995601759296,10.514394242303078,10.51779288284686,10.521191523390645,10.524590163934427,10.527988804478209,10.531387445021991,10.534786085565774,10.538184726109556,10.541583366653338,10.54498200719712,10.548380647740904,10.551779288284687,10.555177928828469,10.558576569372251,10.561975209916033,10.565373850459816,10.568772491003598,10.572171131547382,10.575569772091164,10.578968412634946,10.582367053178729,10.58576569372251,10.589164334266293,10.592562974810075,10.595961615353858,10.599360255897642,10.602758896441424,10.606157536985206,10.609556177528988,10.61295481807277,10.616353458616553,10.619752099160335,10.62315073970412,10.626549380247901,10.629948020791684,10.633346661335466,10.636745301879248,10.64014394242303,10.643542582966813,10.646941223510595,10.650339864054379,10.653738504598161,10.657137145141943,10.660535785685726,10.663934426229508,10.66733306677329,10.670731707317072,10.674130347860856,10.677528988404639,10.680927628948421,10.684326269492203,10.687724910035985,10.691123550579768,10.69452219112355,10.697920831667332,10.701319472211116,10.704718112754898,10.70811675329868,10.711515393842463,10.714914034386245,10.718312674930027,10.72171131547381,10.725109956017594,10.728508596561376,10.731907237105158,10.73530587764894,10.738704518192723,10.742103158736505,10.745501799280287,10.74890043982407,10.752299080367854,10.755697720911636,10.759096361455418,10.7624950019992,10.765893642542983,10.769292283086765,10.772690923630547,10.776089564174331,10.779488204718113,10.782886845261896,10.786285485805678,10.78968412634946,10.793082766893242,10.796481407437025,10.799880047980807,10.80327868852459,10.806677329068373,10.810075969612155,10.813474610155938,10.81687325069972,10.820271891243502,10.823670531787284,10.827069172331068,10.83046781287485,10.833866453418633,10.837265093962415,10.840663734506197,10.84406237504998,10.847461015593762,10.850859656137544,10.854258296681328,10.85765693722511,10.861055577768893,10.864454218312675,10.867852858856457,10.87125149940024,10.874650139944022,10.878048780487806,10.881447421031588,10.88484606157537,10.888244702119152,10.891643342662935,10.895041983206717,10.8984406237505,10.901839264294281,10.905237904838065,10.908636545381848,10.91203518592563,10.915433826469412,10.918832467013194,10.922231107556977,10.925629748100759,10.929028388644543,10.932427029188325,10.935825669732107,10.93922431027589,10.942622950819672,10.946021591363454,10.949420231907236,10.952818872451019,10.956217512994803,10.959616153538585,10.963014794082367,10.96641343462615,10.969812075169932,10.973210715713714,10.976609356257496,10.98000799680128,10.983406637345063,10.986805277888845,10.990203918432627,10.99360255897641,10.997001199520192,11.000399840063974,11.003798480607758,11.00719712115154,11.010595761695322,11.013994402239105,11.017393042782887,11.020791683326669,11.024190323870451,11.027588964414234,11.030987604958018,11.0343862455018,11.037784886045582,11.041183526589364,11.044582167133147,11.047980807676929,11.051379448220711,11.054778088764495,11.058176729308277,11.06157536985206,11.064974010395842,11.068372650939624,11.071771291483406,11.075169932027189,11.07856857257097,11.081967213114755,11.085365853658537,11.08876449420232,11.092163134746102,11.095561775289884,11.098960415833666,11.102359056377448,11.105757696921232,11.109156337465015,11.112554978008797,11.11595361855258,11.119352259096361,11.122750899640144,11.126149540183926,11.129548180727708,11.132946821271492,11.136345461815274,11.139744102359057,11.143142742902839,11.146541383446621,11.149940023990403,11.153338664534186,11.15673730507797,11.160135945621752,11.163534586165534,11.166933226709316,11.170331867253099,11.173730507796881,11.177129148340663,11.180527788884445,11.18392642942823,11.187325069972012,11.190723710515794,11.194122351059576,11.197520991603358,11.20091963214714,11.204318272690923,11.207716913234707,11.21111555377849,11.214514194322271,11.217912834866054,11.221311475409836,11.224710115953618,11.2281087564974,11.231507397041183,11.234906037584967,11.238304678128749,11.241703318672531,11.245101959216314,11.248500599760096,11.251899240303878,11.25529788084766,11.258696521391444,11.262095161935227,11.265493802479009,11.268892443022791,11.272291083566573,11.275689724110356,11.279088364654138,11.28248700519792,11.285885645741704,11.289284286285486,11.292682926829269,11.29608156737305,11.299480207916833,11.302878848460615,11.306277489004398,11.309676129548182,11.313074770091964,11.316473410635746,11.319872051179528,11.32327069172331,11.326669332267093,11.330067972810875,11.333466613354657,11.336865253898441,11.340263894442224,11.343662534986006,11.347061175529788,11.35045981607357,11.353858456617353,11.357257097161135,11.360655737704919,11.364054378248701,11.367453018792483,11.370851659336266,11.374250299880048,11.37764894042383,11.381047580967612,11.384446221511395,11.387844862055179,11.391243502598961,11.394642143142743,11.398040783686525,11.401439424230308,11.40483806477409,11.408236705317872,11.411635345861656,11.415033986405438,11.41843262694922,11.421831267493003,11.425229908036785,11.428628548580567,11.43202718912435,11.435425829668132,11.438824470211916,11.442223110755698,11.44562175129948,11.449020391843263,11.452419032387045,11.455817672930827,11.45921631347461,11.462614954018393,11.466013594562176,11.469412235105958,11.47281087564974,11.476209516193522,11.479608156737305,11.483006797281087,11.48640543782487,11.489804078368653,11.493202718912436,11.496601359456218,11.5,11.503398640543782,11.506797281087564,11.510195921631347,11.51359456217513,11.516993202718913,11.520391843262695,11.523790483806478,11.52718912435026,11.530587764894042,11.533986405437824,11.537385045981607,11.54078368652539,11.544182327069173,11.547580967612955,11.550979608156737,11.55437824870052,11.557776889244302,11.561175529788084,11.564574170331868,11.56797281087565,11.571371451419433,11.574770091963215,11.578168732506997,11.58156737305078,11.584966013594562,11.588364654138344,11.591763294682128,11.59516193522591,11.598560575769692,11.601959216313475,11.605357856857257,11.608756497401039,11.612155137944821,11.615553778488605,11.618952419032388,11.62235105957617,11.625749700119952,11.629148340663734,11.632546981207517,11.635945621751299,11.639344262295081,11.642742902838865,11.646141543382647,11.64954018392643,11.652938824470212,11.656337465013994,11.659736105557776,11.663134746101559,11.666533386645343,11.669932027189125,11.673330667732907,11.67672930827669,11.680127948820472,11.683526589364254,11.686925229908036,11.690323870451818,11.693722510995602,11.697121151539385,11.700519792083167,11.70391843262695,11.707317073170731,11.710715713714514,11.714114354258296,11.71751299480208,11.720911635345862,11.724310275889644,11.727708916433427,11.731107556977209,11.734506197520991,11.737904838064773,11.741303478608556,11.74470211915234,11.748100759696122,11.751499400239904,11.754898040783686,11.758296681327469,11.761695321871251,11.765093962415033,11.768492602958817,11.7718912435026,11.775289884046382,11.778688524590164,11.782087165133946,11.785485805677729,11.78888444622151,11.792283086765293,11.795681727309077,11.79908036785286,11.802479008396642,11.805877648940424,11.809276289484206,11.812674930027988,11.81607357057177,11.819472211115555,11.822870851659337,11.826269492203119,11.829668132746901,11.833066773290684,11.836465413834466,11.839864054378248,11.84326269492203,11.846661335465814,11.850059976009597,11.853458616553379,11.856857257097161,11.860255897640943,11.863654538184726,11.867053178728508,11.870451819272292,11.873850459816074,11.877249100359856,11.880647740903639,11.88404638144742,11.887445021991203,11.890843662534985,11.894242303078768,11.897640943622552,11.901039584166334,11.904438224710116,11.907836865253898,11.91123550579768,11.914634146341463,11.918032786885245,11.92143142742903,11.924830067972811,11.928228708516594,11.931627349060376,11.935025989604158,11.93842463014794,11.941823270691723,11.945221911235505,11.948620551779289,11.952019192323071,11.955417832866853,11.958816473410636,11.962215113954418,11.9656137544982,11.969012395041982,11.972411035585766,11.975809676129549,11.979208316673331,11.982606957217113,11.986005597760895,11.989404238304678,11.99280287884846,11.996201519392242,11.999600159936026,12.002998800479808,12.00639744102359,12.009796081567373,12.013194722111155,12.016593362654937,12.01999200319872,12.023390643742504,12.026789284286286,12.030187924830068,12.03358656537385,12.036985205917633,12.040383846461415,12.043782487005197,12.047181127548981,12.050579768092764,12.053978408636546,12.057377049180328,12.06077568972411,12.064174330267893,12.067572970811675,12.070971611355457,12.074370251899241,12.077768892443023,12.081167532986806,12.084566173530588,12.08796481407437,12.091363454618152,12.094762095161935,12.098160735705719,12.1015593762495,12.104958016793283,12.108356657337065,12.111755297880848,12.11515393842463,12.118552578968412,12.121951219512194,12.125349860055978,12.12874850059976,12.132147141143543,12.135545781687325,12.138944422231107,12.14234306277489,12.145741703318672,12.149140343862456,12.152538984406238,12.15593762495002,12.159336265493803,12.162734906037585,12.166133546581367,12.16953218712515,12.172930827668932,12.176329468212716,12.179728108756498,12.18312674930028,12.186525389844062,12.189924030387845,12.193322670931627,12.19672131147541,12.200119952019193,12.203518592562975,12.206917233106758,12.21031587365054,12.213714514194322,12.217113154738104,12.220511795281887,12.223910435825669,12.227309076369453,12.230707716913235,12.234106357457017,12.2375049980008,12.240903638544582,12.244302279088364,12.247700919632146,12.25109956017593,12.254498200719713,12.257896841263495,12.261295481807277,12.26469412235106,12.268092762894842,12.271491403438624,12.274890043982406,12.27828868452619,12.281687325069973,12.285085965613755,12.288484606157537,12.29188324670132,12.295281887245102,12.298680527788884,12.302079168332668,12.30547780887645,12.308876449420232,12.312275089964015,12.315673730507797,12.319072371051579,12.322471011595361,12.325869652139144,12.329268292682928,12.33266693322671,12.336065573770492,12.339464214314274,12.342862854858057,12.346261495401839,12.349660135945621,12.353058776489405,12.356457417033187,12.35985605757697,12.363254698120752,12.366653338664534,12.370051979208316,12.373450619752099,12.37684926029588,12.380247900839665,12.383646541383447,12.38704518192723,12.390443822471012,12.393842463014794,12.397241103558576,12.400639744102358,12.404038384646142,12.407437025189925,12.410835665733707,12.41423430627749,12.417632946821271,12.421031587365054,12.424430227908836,12.427828868452618,12.431227508996402,12.434626149540184,12.438024790083967,12.441423430627749,12.444822071171531,12.448220711715313,12.451619352259096,12.45501799280288,12.458416633346662,12.461815273890444,12.465213914434226,12.468612554978009,12.472011195521791,12.475409836065573,12.478808476609355,12.48220711715314,12.485605757696922,12.489004398240704,12.492403038784486,12.495801679328268,12.49920031987205,12.502598960415833,12.505997600959617,12.5093962415034,12.512794882047181,12.516193522590964,12.519592163134746,12.522990803678528,12.52638944422231,12.529788084766093,12.533186725309877,12.536585365853659,12.539984006397441,12.543382646941224,12.546781287485006,12.550179928028788,12.55357856857257,12.556977209116354,12.560375849660137,12.563774490203919,12.567173130747701,12.570571771291483,12.573970411835266,12.577369052379048,12.58076769292283,12.584166333466614,12.587564974010396,12.590963614554179,12.59436225509796,12.597760895641743,12.601159536185525,12.604558176729308,12.607956817273092,12.611355457816874,12.614754098360656,12.618152738904438,12.62155137944822,12.624950019992003,12.628348660535785,12.631747301079567,12.635145941623351,12.638544582167134,12.641943222710916,12.645341863254698,12.64874050379848,12.652139144342263,12.655537784886045,12.658936425429829,12.662335065973611,12.665733706517393,12.669132347061176,12.672530987604958,12.67592962814874,12.679328268692522,12.682726909236305,12.686125549780089,12.689524190323871,12.692922830867653,12.696321471411435,12.699720111955218,12.703118752499,12.706517393042782,12.709916033586566,12.713314674130348,12.71671331467413,12.720111955217913,12.723510595761695,12.726909236305477,12.73030787684926,12.733706517393042,12.737105157936826,12.740503798480608,12.74390243902439,12.747301079568173,12.750699720111955,12.754098360655737,12.75749700119952,12.760895641743303,12.764294282287086,12.767692922830868,12.77109156337465,12.774490203918432,12.777888844462215,12.781287485005997,12.78468612554978,12.788084766093563,12.791483406637346,12.794882047181128,12.79828068772491,12.801679328268692,12.805077968812475,12.808476609356257,12.81187524990004,12.815273890443823,12.818672530987605,12.822071171531388,12.82546981207517,12.828868452618952,12.832267093162734,12.835665733706517,12.8390643742503,12.842463014794083,12.845861655337865,12.849260295881647,12.85265893642543,12.856057576969212,12.859456217512994,12.862854858056778,12.86625349860056,12.869652139144343,12.873050779688125,12.876449420231907,12.87984806077569,12.883246701319472,12.886645341863254,12.890043982407038,12.89344262295082,12.896841263494602,12.900239904038385,12.903638544582167,12.907037185125949,12.910435825669731,12.913834466213515,12.917233106757298,12.92063174730108,12.924030387844862,12.927429028388644,12.930827668932427,12.934226309476209,12.937624950019991,12.941023590563775,12.944422231107557,12.94782087165134,12.951219512195122,12.954618152738904,12.958016793282686,12.961415433826469,12.964814074370253,12.968212714914035,12.971611355457817,12.9750099960016,12.978408636545382,12.981807277089164,12.985205917632946,12.988604558176728,12.992003198720512,12.995401839264295,12.998800479808077,13.00219912035186,13.005597760895641,13.008996401439424,13.012395041983206,13.01579368252699,13.019192323070772,13.022590963614554,13.025989604158337,13.029388244702119,13.032786885245901,13.036185525789683,13.039584166333466,13.04298280687725,13.046381447421032,13.049780087964814,13.053178728508597,13.056577369052379,13.059976009596161,13.063374650139943,13.066773290683727,13.07017193122751,13.073570571771292,13.076969212315074,13.080367852858856,13.083766493402639,13.08716513394642,13.090563774490203,13.093962415033987,13.09736105557777,13.100759696121552,13.104158336665334,13.107556977209116,13.110955617752898,13.11435425829668,13.117752898840465,13.121151539384247,13.124550179928029,13.127948820471811,13.131347461015594,13.134746101559376,13.138144742103158,13.141543382646942,13.144942023190724,13.148340663734507,13.151739304278289,13.155137944822071,13.158536585365853,13.161935225909636,13.165333866453418,13.168732506997202,13.172131147540984,13.175529788084766,13.178928428628549,13.18232706917233,13.185725709716113,13.189124350259895,13.19252299080368,13.195921631347462,13.199320271891244,13.202718912435026,13.206117552978808,13.20951619352259,13.212914834066373,13.216313474610155,13.21971211515394,13.223110755697721,13.226509396241504,13.229908036785286,13.233306677329068,13.23670531787285,13.240103958416633,13.243502598960417,13.246901239504199,13.250299880047981,13.253698520591763,13.257097161135546,13.260495801679328,13.26389444222311,13.267293082766892,13.270691723310676,13.274090363854459,13.277489004398241,13.280887644942023,13.284286285485805,13.287684926029588,13.29108356657337,13.294482207117154,13.297880847660936,13.301279488204719,13.3046781287485,13.308076769292283,13.311475409836065,13.314874050379848,13.31827269092363,13.321671331467414,13.325069972011196,13.328468612554978,13.33186725309876,13.335265893642543,13.338664534186325,13.342063174730107,13.345461815273891,13.348860455817674,13.352259096361456,13.355657736905238,13.35905637744902,13.362455017992803,13.365853658536585,13.369252299080367,13.372650939624151,13.376049580167933,13.379448220711716,13.382846861255498,13.38624550179928,13.389644142343062,13.393042782886845,13.396441423430629,13.39984006397441,13.403238704518193,13.406637345061975,13.410035985605758,13.41343462614954,13.416833266693322,13.420231907237104,13.423630547780888,13.42702918832467,13.430427828868453,13.433826469412235,13.437225109956017,13.4406237504998,13.444022391043582,13.447421031587366,13.450819672131148,13.45421831267493,13.457616953218713,13.461015593762495,13.464414234306277,13.46781287485006,13.471211515393842,13.474610155937626,13.478008796481408,13.48140743702519,13.484806077568972,13.488204718112755,13.491603358656537,13.49500199920032,13.498400639744103,13.501799280287885,13.505197920831668,13.50859656137545,13.511995201919232,13.515393842463014,13.518792483006797,13.522191123550579,13.525589764094363,13.528988404638145,13.532387045181927,13.53578568572571,13.539184326269492,13.542582966813274,13.545981607357056,13.54938024790084,13.552778888444623,13.556177528988405,13.559576169532187,13.56297481007597,13.566373450619752,13.569772091163534,13.573170731707316,13.5765693722511,13.579968012794883,13.583366653338665,13.586765293882447,13.59016393442623,13.593562574970012,13.596961215513794,13.600359856057578,13.60375849660136,13.607157137145142,13.610555777688925,13.613954418232707,13.617353058776489,13.620751699320271,13.624150339864054,13.627548980407838,13.63094762095162,13.634346261495402,13.637744902039184,13.641143542582967,13.644542183126749,13.647940823670531,13.651339464214315,13.654738104758097,13.65813674530188,13.661535385845662,13.664934026389444,13.668332666933226,13.671731307477009,13.67512994802079,13.678528588564575,13.681927229108357,13.68532586965214,13.688724510195922,13.692123150739704,13.695521791283486,13.698920431827268,13.702319072371052,13.705717712914835,13.709116353458617,13.7125149940024,13.715913634546181,13.719312275089964,13.722710915633746,13.726109556177528,13.729508196721312,13.732906837265094,13.736305477808877,13.739704118352659,13.743102758896441,13.746501399440223,13.749900039984006,13.75329868052779,13.756697321071572,13.760095961615354,13.763494602159136,13.766893242702919,13.770291883246701,13.773690523790483,13.777089164334265,13.78048780487805,13.783886445421832,13.787285085965614,13.790683726509396,13.794082367053178,13.79748100759696,13.800879648140743,13.804278288684527,13.80767692922831,13.811075569772091,13.814474210315874,13.817872850859656,13.821271491403438,13.82467013194722,13.828068772491003,13.831467413034787,13.834866053578569,13.838264694122351,13.841663334666134,13.845061975209916,13.848460615753698,13.85185925629748,13.855257896841264,13.858656537385047,13.862055177928829,13.865453818472611,13.868852459016393,13.872251099560176,13.875649740103958,13.87904838064774,13.882447021191524,13.885845661735306,13.889244302279089,13.89264294282287,13.896041583366653,13.899440223910435,13.902838864454218,13.906237504998002,13.909636145541784,13.913034786085566,13.916433426629348,13.91983206717313,13.923230707716913,13.926629348260695,13.930027988804477,13.933426629348261,13.936825269892044,13.940223910435826,13.943622550979608,13.94702119152339,13.950419832067173,13.953818472610955,13.957217113154739,13.960615753698521,13.964014394242303,13.967413034786086,13.970811675329868,13.97421031587365,13.977608956417432,13.981007596961215,13.984406237504999,13.987804878048781,13.991203518592563,13.994602159136345,13.998000799680128,14.00139944022391,14.004798080767692,14.008196721311476,14.011595361855258,14.01499400239904,14.018392642942823,14.021791283486605,14.025189924030387,14.02858856457417,14.031987205117952,14.035385845661736,14.038784486205518,14.0421831267493,14.045581767293083,14.048980407836865,14.052379048380647,14.05577768892443,14.059176329468213,14.062574970011996,14.065973610555778,14.06937225109956,14.072770891643342,14.076169532187125,14.079568172730907,14.08296681327469,14.086365453818473,14.089764094362256,14.093162734906038,14.09656137544982,14.099960015993602,14.103358656537385,14.106757297081167,14.11015593762495,14.113554578168733,14.116953218712515,14.120351859256298,14.12375049980008,14.127149140343862,14.130547780887644,14.133946421431427,14.13734506197521,14.140743702518993,14.144142343062775,14.147540983606557,14.15093962415034,14.154338264694122,14.157736905237904,14.161135545781688,14.16453418632547,14.167932826869253,14.171331467413035,14.174730107956817,14.1781287485006,14.181527389044382,14.184926029588166,14.188324670131948,14.19172331067573,14.195121951219512,14.198520591763295,14.201919232307077,14.20531787285086,14.208716513394641,14.212115153938425,14.215513794482208,14.21891243502599,14.222311075569772,14.225709716113554,14.229108356657337,14.232506997201119,14.235905637744903,14.239304278288685,14.242702918832467,14.24610155937625,14.249500199920032,14.252898840463814,14.256297481007596,14.259696121551379,14.263094762095163,14.266493402638945,14.269892043182727,14.27329068372651,14.276689324270292,14.280087964814074,14.283486605357856,14.28688524590164,14.290283886445422,14.293682526989205,14.297081167532987,14.30047980807677,14.303878448620551,14.307277089164334,14.310675729708116,14.3140743702519,14.317473010795682,14.320871651339464,14.324270291883247,14.327668932427029,14.331067572970811,14.334466213514593,14.337864854058378,14.34126349460216,14.344662135145942,14.348060775689724,14.351459416233507,14.354858056777289,14.358256697321071,14.361655337864853,14.365053978408637,14.36845261895242,14.371851259496202,14.375249900039984,14.378648540583766,14.382047181127549,14.38544582167133,14.388844462215115,14.392243102758897,14.39564174330268,14.399040383846462,14.402439024390244,14.405837664934026,14.409236305477808,14.41263494602159,14.416033586565375,14.419432227109157,14.422830867652939,14.426229508196721,14.429628148740504,14.433026789284286,14.436425429828068,14.439824070371852,14.443222710915634,14.446621351459417,14.450019992003199,14.453418632546981,14.456817273090763,14.460215913634546,14.463614554178328,14.467013194722112,14.470411835265894,14.473810475809676,14.477209116353459,14.480607756897241,14.484006397441023,14.487405037984805,14.49080367852859,14.494202319072372,14.497600959616154,14.500999600159936,14.504398240703718,14.5077968812475,14.511195521791283,14.514594162335065,14.51799280287885,14.521391443422631,14.524790083966414,14.528188724510196,14.531587365053978,14.53498600559776,14.538384646141543,14.541783286685327,14.545181927229109,14.548580567772891,14.551979208316673,14.555377848860456,14.558776489404238,14.56217512994802,14.565573770491802,14.568972411035586,14.572371051579369,14.575769692123151,14.579168332666933,14.582566973210715,14.585965613754498,14.58936425429828,14.592762894842064,14.596161535385846,14.599560175929629,14.60295881647341,14.606357457017193,14.609756097560975,14.613154738104758,14.61655337864854,14.619952019192324,14.623350659736106,14.626749300279888,14.63014794082367,14.633546581367453,14.636945221911235,14.640343862455017,14.643742502998801,14.647141143542584,14.650539784086366,14.653938424630148,14.65733706517393,14.660735705717713,14.664134346261495,14.667532986805277,14.670931627349061,14.674330267892843,14.677728908436626,14.681127548980408,14.68452618952419,14.687924830067972,14.691323470611755,14.694722111155539,14.69812075169932,14.701519392243103,14.704918032786885,14.708316673330668,14.71171531387445,14.715113954418232,14.718512594962014,14.721911235505798,14.72530987604958,14.728708516593363,14.732107157137145,14.735505797680927,14.73890443822471,14.742303078768492,14.745701719312276,14.749100359856058,14.75249900039984,14.755897640943623,14.759296281487405,14.762694922031187,14.76609356257497,14.769492203118752,14.772890843662536,14.776289484206318,14.7796881247501,14.783086765293882,14.786485405837665,14.789884046381447,14.79328268692523,14.796681327469013,14.800079968012795,14.803478608556578,14.80687724910036,14.810275889644142,14.813674530187924,14.817073170731707,14.820471811275489,14.823870451819273,14.827269092363055,14.830667732906837,14.83406637345062,14.837465013994402,14.840863654538184,14.844262295081966,14.84766093562575,14.851059576169533,14.854458216713315,14.857856857257097,14.86125549780088,14.864654138344662,14.868052778888444,14.871451419432226,14.87485005997601,14.878248700519793,14.881647341063575,14.885045981607357,14.88844462215114,14.891843262694922,14.895241903238704,14.898640543782488,14.90203918432627,14.905437824870052,14.908836465413835,14.912235105957617,14.915633746501399,14.919032387045181,14.922431027588964,14.925829668132748,14.92922830867653,14.932626949220312,14.936025589764094,14.939424230307877,14.942822870851659,14.946221511395441,14.949620151939225,14.953018792483007,14.95641743302679,14.959816073570572,14.963214714114354,14.966613354658136,14.970011995201919,14.9734106357457,14.976809276289485,14.980207916833267,14.98360655737705,14.987005197920832,14.990403838464614,14.993802479008396,14.997201119552178,15.000599760095962,15.003998400639745,15.007397041183527,15.01079568172731,15.014194322271091,15.017592962814874,15.020991603358656,15.024390243902438,15.027788884446222,15.031187524990004,15.034586165533787,15.037984806077569,15.041383446621351,15.044782087165133,15.048180727708916,15.0515793682527,15.054978008796482,15.058376649340264,15.061775289884046,15.065173930427829,15.068572570971611,15.071971211515393,15.075369852059175,15.07876849260296,15.082167133146742,15.085565773690524,15.088964414234306,15.092363054778088,15.09576169532187,15.099160335865653,15.102558976409437,15.10595761695322,15.109356257497002,15.112754898040784,15.116153538584566,15.119552179128348,15.12295081967213,15.126349460215913,15.129748100759697,15.133146741303479,15.136545381847261,15.139944022391044,15.143342662934826,15.146741303478608,15.15013994402239,15.153538584566174,15.156937225109957,15.160335865653739,15.163734506197521,15.167133146741303,15.170531787285086,15.173930427828868,15.17732906837265,15.180727708916434,15.184126349460216,15.187524990003999,15.19092363054778,15.194322271091563,15.197720911635345,15.201119552179128,15.204518192722912,15.207916833266694,15.211315473810476,15.214714114354258,15.21811275489804,15.221511395441823,15.224910035985605,15.22830867652939,15.231707317073171,15.235105957616954,15.238504598160736,15.241903238704518,15.2453018792483,15.248700519792083,15.252099160335865,15.255497800879649,15.258896441423431,15.262295081967213,15.265693722510996,15.269092363054778,15.27249100359856,15.275889644142342,15.279288284686126,15.282686925229909,15.286085565773691,15.289484206317473,15.292882846861255,15.296281487405038,15.29968012794882,15.303078768492602,15.306477409036386,15.309876049580168,15.31327469012395,15.316673330667733,15.320071971211515,15.323470611755297,15.32686925229908,15.330267892842864,15.333666533386646,15.337065173930428,15.34046381447421,15.343862455017993,15.347261095561775,15.350659736105557,15.35405837664934,15.357457017193124,15.360855657736906,15.364254298280688,15.36765293882447,15.371051579368253,15.374450219912035,15.377848860455817,15.381247500999601,15.384646141543383,15.388044782087166,15.391443422630948,15.39484206317473,15.398240703718512,15.401639344262295,15.405037984806077,15.40843662534986,15.411835265893643,15.415233906437425,15.418632546981208,15.42203118752499,15.425429828068772,15.428828468612554,15.432227109156338,15.43562574970012,15.439024390243903,15.442423030787685,15.445821671331467,15.44922031187525,15.452618952419032,15.456017592962814,15.459416233506598,15.46281487405038,15.466213514594163,15.469612155137945,15.473010795681727,15.47640943622551,15.479808076769292,15.483206717313076,15.486605357856858,15.49000399840064,15.493402638944422,15.496801279488205,15.500199920031987,15.50359856057577,15.506997201119551,15.510395841663335,15.513794482207118,15.5171931227509,15.520591763294682,15.523990403838464,15.527389044382247,15.530787684926029,15.534186325469813,15.537584966013595,15.540983606557377,15.54438224710116,15.547780887644942,15.551179528188724,15.554578168732506,15.557976809276289,15.561375449820073,15.564774090363855,15.568172730907637,15.57157137145142,15.574970011995202,15.578368652538984,15.581767293082766,15.58516593362655,15.588564574170332,15.591963214714115,15.595361855257897,15.59876049580168,15.602159136345461,15.605557776889244,15.608956417433026,15.61235505797681,15.615753698520592,15.619152339064375,15.622550979608157,15.625949620151939,15.629348260695721,15.632746901239504,15.636145541783288,15.63954418232707,15.642942822870852,15.646341463414634,15.649740103958417,15.653138744502199,15.656537385045981,15.659936025589763,15.663334666133547,15.66673330667733,15.670131947221112,15.673530587764894,15.676929228308676,15.680327868852459,15.68372650939624,15.687125149940025,15.690523790483807,15.69392243102759,15.697321071571372,15.700719712115154,15.704118352658936,15.707516993202718,15.7109156337465,15.714314274290285,15.717712914834067,15.721111555377849,15.724510195921631,15.727908836465414,15.731307477009196,15.734706117552978,15.738104758096762,15.741503398640544,15.744902039184327,15.748300679728109,15.751699320271891,15.755097960815673,15.758496601359456,15.761895241903238,15.765293882447022,15.768692522990804,15.772091163534586,15.775489804078369,15.778888444622151,15.782287085165933,15.785685725709715,15.7890843662535,15.792483006797282,15.795881647341064,15.799280287884846,15.802678928428628,15.80607756897241,15.809476209516193,15.812874850059975,15.81627349060376,15.819672131147541,15.823070771691324,15.826469412235106,15.829868052778888,15.83326669332267,15.836665333866453,15.840063974410237,15.843462614954019,15.846861255497801,15.850259896041583,15.853658536585366,15.857057177129148,15.86045581767293,15.863854458216712,15.867253098760496,15.870651739304279,15.874050379848061,15.877449020391843,15.880847660935625,15.884246301479408,15.88764494202319,15.891043582566974,15.894442223110756,15.897840863654539,15.90123950419832,15.904638144742103,15.908036785285885,15.911435425829668,15.91483406637345,15.918232706917234,15.921631347461016,15.925029988004798,15.92842862854858,15.931827269092363,15.935225909636145,15.938624550179927,15.942023190723711,15.945421831267494,15.948820471811276,15.952219112355058,15.95561775289884,15.959016393442623,15.962415033986405,15.965813674530187,15.969212315073971,15.972610955617753,15.976009596161536,15.979408236705318,15.9828068772491,15.986205517792882,15.989604158336665,15.993002798880449,15.99640143942423,15.999800079968013,16.003198720511794,16.00659736105558,16.00999600159936,16.013394642143144,16.016793282686926,16.02019192323071,16.02359056377449,16.026989204318273,16.030387844862055,16.033786485405837,16.03718512594962,16.040583766493402,16.043982407037184,16.047381047580966,16.05077968812475,16.05417832866853,16.057576969212317,16.0609756097561,16.06437425029988,16.067772890843663,16.071171531387446,16.074570171931228,16.07796881247501,16.081367453018792,16.084766093562575,16.088164734106357,16.09156337465014,16.09496201519392,16.098360655737704,16.101759296281486,16.105157936825268,16.108556577369054,16.111955217912836,16.11535385845662,16.1187524990004,16.122151139544183,16.125549780087965,16.128948420631747,16.13234706117553,16.135745701719312,16.139144342263094,16.142542982806876,16.14594162335066,16.14934026389444,16.152738904438223,16.156137544982005,16.15953618552579,16.162934826069574,16.166333466613356,16.169732107157138,16.17313074770092,16.176529388244703,16.179928028788485,16.183326669332267,16.18672530987605,16.19012395041983,16.193522590963614,16.196921231507396,16.20031987205118,16.20371851259496,16.207117153138743,16.21051579368253,16.21391443422631,16.217313074770093,16.220711715313875,16.224110355857658,16.22750899640144,16.230907636945222,16.234306277489004,16.237704918032787,16.24110355857657,16.24450219912035,16.247900839664133,16.251299480207916,16.254698120751698,16.25809676129548,16.261495401839266,16.264894042383048,16.26829268292683,16.271691323470613,16.275089964014395,16.278488604558177,16.28188724510196,16.28528588564574,16.288684526189524,16.292083166733306,16.29548180727709,16.29888044782087,16.302279088364653,16.305677728908435,16.309076369452217,16.312475009996003,16.315873650539785,16.319272291083568,16.32267093162735,16.326069572171132,16.329468212714914,16.332866853258697,16.33626549380248,16.33966413434626,16.343062774890043,16.346461415433826,16.349860055977608,16.35325869652139,16.356657337065172,16.360055977608955,16.36345461815274,16.366853258696523,16.370251899240305,16.373650539784087,16.37704918032787,16.38044782087165,16.383846461415434,16.387245101959216,16.390643742503,16.39404238304678,16.397441023590563,16.400839664134345,16.404238304678127,16.40763694522191,16.411035585765692,16.414434226309478,16.41783286685326,16.421231507397042,16.424630147940825,16.428028788484607,16.43142742902839,16.43482606957217,16.438224710115954,16.441623350659736,16.445021991203518,16.4484206317473,16.451819272291083,16.455217912834865,16.458616553378647,16.46201519392243,16.465413834466215,16.468812475009997,16.47221111555378,16.475609756097562,16.479008396641344,16.482407037185126,16.48580567772891,16.48920431827269,16.492602958816473,16.496001599360255,16.499400239904038,16.50279888044782,16.506197520991602,16.509596161535384,16.512994802079167,16.516393442622952,16.519792083166735,16.523190723710517,16.5265893642543,16.52998800479808,16.533386645341864,16.536785285885646,16.540183926429428,16.54358256697321,16.546981207516993,16.550379848060775,16.553778488604557,16.55717712914834,16.56057576969212,16.563974410235904,16.56737305077969,16.570771691323472,16.574170331867254,16.577568972411036,16.58096761295482,16.5843662534986,16.587764894042383,16.591163534586165,16.594562175129948,16.59796081567373,16.601359456217512,16.604758096761294,16.608156737305077,16.61155537784886,16.61495401839264,16.618352658936427,16.62175129948021,16.62514994002399,16.628548580567774,16.631947221111556,16.63534586165534,16.63874450219912,16.642143142742903,16.645541783286685,16.648940423830467,16.65233906437425,16.65573770491803,16.659136345461814,16.662534986005596,16.66593362654938,16.669332267093164,16.672730907636947,16.67612954818073,16.67952818872451,16.682926829268293,16.686325469812076,16.689724110355858,16.69312275089964,16.696521391443422,16.699920031987205,16.703318672530987,16.70671731307477,16.71011595361855,16.713514594162334,16.716913234706116,16.7203118752499,16.723710515793684,16.727109156337466,16.73050779688125,16.73390643742503,16.737305077968813,16.740703718512595,16.744102359056377,16.74750099960016,16.750899640143942,16.754298280687724,16.757696921231506,16.76109556177529,16.76449420231907,16.767892842862853,16.77129148340664,16.77469012395042,16.778088764494203,16.781487405037986,16.784886045581768,16.78828468612555,16.791683326669332,16.795081967213115,16.798480607756897,16.80187924830068,16.80527788884446,16.808676529388244,16.812075169932026,16.815473810475808,16.818872451019594,16.822271091563376,16.82566973210716,16.82906837265094,16.832467013194723,16.835865653738505,16.839264294282287,16.84266293482607,16.846061575369852,16.849460215913634,16.852858856457416,16.8562574970012,16.85965613754498,16.863054778088763,16.866453418632545,16.86985205917633,16.873250699720113,16.876649340263896,16.880047980807678,16.88344662135146,16.886845261895242,16.890243902439025,16.893642542982807,16.89704118352659,16.90043982407037,16.903838464614154,16.907237105157936,16.91063574570172,16.9140343862455,16.917433026789283,16.92083166733307,16.92423030787685,16.927628948420633,16.931027588964415,16.934426229508198,16.93782487005198,16.941223510595762,16.944622151139544,16.948020791683327,16.95141943222711,16.95481807277089,16.958216713314673,16.961615353858456,16.965013994402238,16.96841263494602,16.971811275489806,16.975209916033588,16.97860855657737,16.982007197121153,16.985405837664935,16.988804478208717,16.9922031187525,16.99560175929628,16.999000399840064,17.002399040383846,17.00579768092763,17.00919632147141,17.012594962015193,17.015993602558975,17.019392243102757,17.022790883646543,17.026189524190325,17.029588164734108,17.03298680527789,17.036385445821672,17.039784086365454,17.043182726909237,17.04658136745302,17.0499800079968,17.053378648540583,17.056777289084366,17.060175929628148,17.06357457017193,17.066973210715712,17.070371851259495,17.07377049180328,17.077169132347063,17.080567772890845,17.083966413434627,17.08736505397841,17.09076369452219,17.094162335065974,17.097560975609756,17.10095961615354,17.10435825669732,17.107756897241103,17.111155537784885,17.114554178328667,17.11795281887245,17.121351459416232,17.124750099960018,17.1281487405038,17.131547381047582,17.134946021591364,17.138344662135147,17.14174330267893,17.14514194322271,17.148540583766493,17.151939224310276,17.155337864854058,17.15873650539784,17.162135145941622,17.165533786485405,17.168932427029187,17.17233106757297,17.175729708116755,17.179128348660537,17.18252698920432,17.185925629748102,17.189324270291884,17.192722910835666,17.19612155137945,17.19952019192323,17.202918832467013,17.206317473010795,17.209716113554578,17.21311475409836,17.216513394642142,17.219912035185924,17.223310675729707,17.226709316273492,17.230107956817275,17.233506597361057,17.23690523790484,17.24030387844862,17.243702518992404,17.247101159536186,17.250499800079968,17.25389844062375,17.257297081167533,17.260695721711315,17.264094362255097,17.26749300279888,17.27089164334266,17.274290283886444,17.27768892443023,17.281087564974012,17.284486205517794,17.287884846061576,17.29128348660536,17.29468212714914,17.298080767692923,17.301479408236705,17.304878048780488,17.30827668932427,17.311675329868052,17.315073970411834,17.318472610955617,17.3218712514994,17.32526989204318,17.328668532586967,17.33206717313075,17.33546581367453,17.338864454218314,17.342263094762096,17.345661735305878,17.34906037584966,17.352459016393443,17.355857656937225,17.359256297481007,17.36265493802479,17.36605357856857,17.369452219112354,17.372850859656136,17.37624950019992,17.379648140743704,17.383046781287486,17.38644542183127,17.38984406237505,17.393242702918833,17.396641343462615,17.400039984006398,17.40343862455018,17.406837265093962,17.410235905637744,17.413634546181527,17.41703318672531,17.42043182726909,17.423830467812873,17.427229108356656,17.43062774890044,17.434026389444224,17.437425029988006,17.44082367053179,17.44422231107557,17.447620951619353,17.451019592163135,17.454418232706917,17.4578168732507,17.461215513794482,17.464614154338264,17.468012794882046,17.47141143542583,17.47481007596961,17.478208716513393,17.48160735705718,17.48500599760096,17.488404638144743,17.491803278688526,17.495201919232308,17.49860055977609,17.501999200319872,17.505397840863655,17.508796481407437,17.51219512195122,17.515593762495,17.518992403038784,17.522391043582566,17.525789684126348,17.52918832467013,17.532586965213916,17.5359856057577,17.53938424630148,17.542782886845263,17.546181527389045,17.549580167932827,17.55297880847661,17.556377449020392,17.559776089564174,17.563174730107956,17.56657337065174,17.56997201119552,17.573370651739303,17.576769292283085,17.580167932826868,17.583566573370653,17.586965213914436,17.590363854458218,17.593762495002,17.597161135545782,17.600559776089565,17.603958416633347,17.60735705717713,17.61075569772091,17.614154338264694,17.617552978808476,17.620951619352258,17.62435025989604,17.627748900439823,17.631147540983605,17.63454618152739,17.637944822071173,17.641343462614955,17.644742103158737,17.64814074370252,17.651539384246302,17.654938024790084,17.658336665333866,17.66173530587765,17.66513394642143,17.668532586965213,17.671931227508995,17.675329868052778,17.67872850859656,17.682127149140342,17.685525789684128,17.68892443022791,17.692323070771693,17.695721711315475,17.699120351859257,17.70251899240304,17.70591763294682,17.709316273490604,17.712714914034386,17.71611355457817,17.71951219512195,17.722910835665733,17.726309476209515,17.729708116753297,17.73310675729708,17.736505397840865,17.739904038384648,17.74330267892843,17.746701319472212,17.750099960015994,17.753498600559777,17.75689724110356,17.76029588164734,17.763694522191123,17.767093162734906,17.770491803278688,17.77389044382247,17.777289084366252,17.780687724910035,17.784086365453817,17.787485005997603,17.790883646541385,17.794282287085167,17.79768092762895,17.80107956817273,17.804478208716514,17.807876849260296,17.81127548980408,17.81467413034786,17.818072770891643,17.821471411435425,17.824870051979207,17.82826869252299,17.831667333066772,17.835065973610554,17.83846461415434,17.841863254698122,17.845261895241904,17.848660535785687,17.85205917632947,17.85545781687325,17.858856457417033,17.862255097960816,17.865653738504598,17.86905237904838,17.872451019592162,17.875849660135945,17.879248300679727,17.88264694122351,17.88604558176729,17.889444222311077,17.89284286285486,17.89624150339864,17.899640143942424,17.903038784486206,17.90643742502999,17.90983606557377,17.913234706117553,17.916633346661335,17.920031987205117,17.9234306277489,17.926829268292682,17.930227908836464,17.933626549380246,17.93702518992403,17.940423830467815,17.943822471011597,17.94722111155538,17.95061975209916,17.954018392642944,17.957417033186726,17.960815673730508,17.96421431427429,17.967612954818073,17.971011595361855,17.974410235905637,17.97780887644942,17.9812075169932,17.984606157536984,17.988004798080766,17.991403438624552,17.994802079168334,17.998200719712116,18.0015993602559,18.00499800079968,18.008396641343463,18.011795281887245,18.015193922431028,18.01859256297481,18.021991203518592,18.025389844062374,18.028788484606157,18.03218712514994,18.03558576569372,18.038984406237503,18.04238304678129,18.04578168732507,18.049180327868854,18.052578968412636,18.055977608956418,18.0593762495002,18.062774890043983,18.066173530587765,18.069572171131547,18.07297081167533,18.07636945221911,18.079768092762894,18.083166733306676,18.08656537385046,18.08996401439424,18.093362654938026,18.09676129548181,18.10015993602559,18.103558576569373,18.106957217113155,18.110355857656938,18.11375449820072,18.117153138744502,18.120551779288284,18.123950419832067,18.12734906037585,18.13074770091963,18.134146341463413,18.137544982007196,18.140943622550978,18.144342263094764,18.147740903638546,18.151139544182328,18.15453818472611,18.157936825269893,18.161335465813675,18.164734106357457,18.16813274690124,18.17153138744502,18.174930027988804,18.178328668532586,18.18172730907637,18.18512594962015,18.188524590163933,18.191923230707715,18.1953218712515,18.198720511795283,18.202119152339066,18.205517792882848,18.20891643342663,18.212315073970412,18.215713714514195,18.219112355057977,18.22251099560176,18.22590963614554,18.229308276689324,18.232706917233106,18.236105557776888,18.23950419832067,18.242902838864453,18.24630147940824,18.24970011995202,18.253098760495803,18.256497401039585,18.259896041583367,18.26329468212715,18.266693322670932,18.270091963214714,18.273490603758496,18.27688924430228,18.28028788484606,18.283686525389843,18.287085165933625,18.290483806477408,18.29388244702119,18.297281087564976,18.300679728108758,18.30407836865254,18.307477009196322,18.310875649740105,18.314274290283887,18.31767293082767,18.32107157137145,18.324470211915234,18.327868852459016,18.331267493002798,18.33466613354658,18.338064774090363,18.341463414634145,18.344862055177927,18.348260695721713,18.351659336265495,18.355057976809277,18.35845661735306,18.361855257896842,18.365253898440624,18.368652538984406,18.37205117952819,18.37544982007197,18.378848460615753,18.382247101159535,18.385645741703318,18.3890443822471,18.392443022790882,18.395841663334664,18.39924030387845,18.402638944422232,18.406037584966015,18.409436225509797,18.41283486605358,18.41623350659736,18.419632147141144,18.423030787684926,18.426429428228708,18.42982806877249,18.433226709316273,18.436625349860055,18.440023990403837,18.44342263094762,18.4468212714914,18.450219912035188,18.45361855257897,18.457017193122752,18.460415833666534,18.463814474210317,18.4672131147541,18.47061175529788,18.474010395841663,18.477409036385446,18.480807676929228,18.48420631747301,18.487604958016792,18.491003598560575,18.494402239104357,18.49780087964814,18.501199520191925,18.504598160735707,18.50799680127949,18.51139544182327,18.514794082367054,18.518192722910836,18.52159136345462,18.5249900039984,18.528388644542183,18.531787285085965,18.535185925629747,18.53858456617353,18.541983206717312,18.545381847261094,18.548780487804876,18.552179128348662,18.555577768892444,18.558976409436227,18.56237504998001,18.56577369052379,18.569172331067573,18.572570971611356,18.575969612155138,18.57936825269892,18.582766893242702,18.586165533786485,18.589564174330267,18.59296281487405,18.59636145541783,18.599760095961614,18.6031587365054,18.60655737704918,18.609956017592964,18.613354658136746,18.61675329868053,18.62015193922431,18.623550579768093,18.626949220311875,18.630347860855657,18.63374650139944,18.637145141943222,18.640543782487004,18.643942423030786,18.64734106357457,18.65073970411835,18.654138344662137,18.65753698520592,18.6609356257497,18.664334266293483,18.667732906837266,18.671131547381048,18.67453018792483,18.677928828468612,18.681327469012395,18.684726109556177,18.68812475009996,18.69152339064374,18.694922031187524,18.698320671731306,18.701719312275088,18.705117952818874,18.708516593362656,18.71191523390644,18.71531387445022,18.718712514994003,18.722111155537785,18.725509796081568,18.72890843662535,18.732307077169132,18.735705717712914,18.739104358256697,18.74250299880048,18.74590163934426,18.749300279888043,18.752698920431826,18.75609756097561,18.759496201519394,18.762894842063176,18.766293482606958,18.76969212315074,18.773090763694523,18.776489404238305,18.779888044782087,18.78328668532587,18.78668532586965,18.790083966413434,18.793482606957216,18.796881247501,18.80027988804478,18.803678528588563,18.80707716913235,18.81047580967613,18.813874450219913,18.817273090763695,18.820671731307478,18.82407037185126,18.827469012395042,18.830867652938824,18.834266293482607,18.83766493402639,18.84106357457017,18.844462215113953,18.847860855657736,18.851259496201518,18.8546581367453,18.858056777289086,18.861455417832868,18.86485405837665,18.868252698920433,18.871651339464215,18.875049980007997,18.87844862055178,18.88184726109556,18.885245901639344,18.888644542183126,18.89204318272691,18.89544182327069,18.898840463814473,18.902239104358255,18.905637744902037,18.909036385445823,18.912435025989605,18.915833666533388,18.91923230707717,18.922630947620952,18.926029588164734,18.929428228708517,18.9328268692523,18.93622550979608,18.939624150339863,18.943022790883646,18.946421431427428,18.94982007197121,18.953218712514992,18.95661735305878,18.96001599360256,18.963414634146343,18.966813274690125,18.970211915233907,18.97361055577769,18.97700919632147,18.980407836865254,18.983806477409036,18.98720511795282,18.9906037584966,18.994002399040383,18.997401039584165,19.000799680127948,19.00419832067173,19.007596961215516,19.010995601759298,19.01439424230308,19.017792882846862,19.021191523390645,19.024590163934427,19.02798880447821,19.03138744502199,19.034786085565774,19.038184726109556,19.041583366653338,19.04498200719712,19.048380647740903,19.051779288284685,19.055177928828467,19.058576569372253,19.061975209916035,19.065373850459817,19.0687724910036,19.072171131547382,19.075569772091164,19.078968412634946,19.08236705317873,19.08576569372251,19.089164334266293,19.092562974810075,19.095961615353858,19.09936025589764,19.102758896441422,19.106157536985204,19.10955617752899,19.112954818072772,19.116353458616555,19.119752099160337,19.12315073970412,19.1265493802479,19.129948020791684,19.133346661335466,19.136745301879248,19.14014394242303,19.143542582966813,19.146941223510595,19.150339864054377,19.15373850459816,19.15713714514194,19.160535785685727,19.16393442622951,19.167333066773292,19.170731707317074,19.174130347860856,19.17752898840464,19.18092762894842,19.184326269492203,19.187724910035985,19.191123550579768,19.19452219112355,19.197920831667332,19.201319472211114,19.204718112754897,19.20811675329868,19.211515393842465,19.214914034386247,19.21831267493003,19.22171131547381,19.225109956017594,19.228508596561376,19.23190723710516,19.23530587764894,19.238704518192723,19.242103158736505,19.245501799280287,19.24890043982407,19.25229908036785,19.255697720911634,19.259096361455416,19.262495001999202,19.265893642542984,19.269292283086767,19.27269092363055,19.27608956417433,19.279488204718113,19.282886845261896,19.286285485805678,19.28968412634946,19.293082766893242,19.296481407437025,19.299880047980807,19.30327868852459,19.30667732906837,19.310075969612154,19.31347461015594,19.31687325069972,19.320271891243504,19.323670531787286,19.32706917233107,19.33046781287485,19.333866453418633,19.337265093962415,19.340663734506197,19.34406237504998,19.347461015593762,19.350859656137544,19.354258296681326,19.35765693722511,19.36105557776889,19.364454218312677,19.36785285885646,19.37125149940024,19.374650139944023,19.378048780487806,19.381447421031588,19.38484606157537,19.388244702119152,19.391643342662935,19.395041983206717,19.3984406237505,19.40183926429428,19.405237904838064,19.408636545381846,19.412035185925628,19.415433826469414,19.418832467013196,19.42223110755698,19.42562974810076,19.429028388644543,19.432427029188325,19.435825669732107,19.43922431027589,19.442622950819672,19.446021591363454,19.449420231907236,19.45281887245102,19.4562175129948,19.459616153538583,19.463014794082365,19.46641343462615,19.469812075169934,19.473210715713716,19.476609356257498,19.48000799680128,19.483406637345063,19.486805277888845,19.490203918432627,19.49360255897641,19.49700119952019,19.500399840063974,19.503798480607756,19.50719712115154,19.51059576169532,19.513994402239103,19.51739304278289,19.52079168332667,19.524190323870453,19.527588964414235,19.530987604958018,19.5343862455018,19.537784886045582,19.541183526589364,19.544582167133147,19.54798080767693,19.55137944822071,19.554778088764493,19.558176729308276,19.561575369852058,19.56497401039584,19.568372650939626,19.571771291483408,19.57516993202719,19.578568572570973,19.581967213114755,19.585365853658537,19.58876449420232,19.5921631347461,19.595561775289884,19.598960415833666,19.60235905637745,19.60575769692123,19.609156337465013,19.612554978008795,19.615953618552577,19.619352259096363,19.622750899640145,19.626149540183928,19.62954818072771,19.632946821271492,19.636345461815274,19.639744102359057,19.64314274290284,19.64654138344662,19.649940023990403,19.653338664534186,19.656737305077968,19.66013594562175,19.663534586165532,19.666933226709315,19.6703318672531,19.673730507796883,19.677129148340665,19.680527788884447,19.68392642942823,19.68732506997201,19.690723710515794,19.694122351059576,19.69752099160336,19.70091963214714,19.704318272690923,19.707716913234705,19.711115553778487,19.71451419432227,19.717912834866052,19.721311475409838,19.72471011595362,19.728108756497402,19.731507397041185,19.734906037584967,19.73830467812875,19.74170331867253,19.745101959216314,19.748500599760096,19.751899240303878,19.75529788084766,19.758696521391443,19.762095161935225,19.765493802479007,19.76889244302279,19.772291083566575,19.775689724110357,19.77908836465414,19.782487005197922,19.785885645741704,19.789284286285486,19.79268292682927,19.79608156737305,19.799480207916833,19.802878848460615,19.806277489004398,19.80967612954818,19.813074770091962,19.816473410635744,19.819872051179527,19.823270691723312,19.826669332267095,19.830067972810877,19.83346661335466,19.83686525389844,19.840263894442224,19.843662534986006,19.847061175529788,19.85045981607357,19.853858456617353,19.857257097161135,19.860655737704917,19.8640543782487,19.86745301879248,19.870851659336264,19.87425029988005,19.877648940423832,19.881047580967614,19.884446221511396,19.88784486205518,19.89124350259896,19.894642143142743,19.898040783686525,19.901439424230308,19.90483806477409,19.908236705317872,19.911635345861654,19.915033986405437,19.91843262694922,19.921831267493,19.925229908036787,19.92862854858057,19.93202718912435,19.935425829668134,19.938824470211916,19.942223110755698,19.94562175129948,19.949020391843263,19.952419032387045,19.955817672930827,19.95921631347461,19.96261495401839,19.966013594562174,19.969412235105956,19.97281087564974,19.976209516193524,19.979608156737307,19.98300679728109,19.98640543782487,19.989804078368653,19.993202718912436,19.996601359456218,20.0]}

},{}],100:[function(require,module,exports){
module.exports={"expected":[-1.0772173396653455,-1.0752574798056704,-1.0733117790387123,-1.071380085399968,-1.069462249362024,-1.0675580463654282,-1.0656673332480302,-1.063789969096986,-1.0619257394054078,-1.0600745092050676,-1.0582361456054594,-1.0564104435172523,-1.0545972756078517,-1.052796516465407,-1.0510079698331203,-1.0492315155010772,-1.047467035036323,-1.0457143404748974,-1.0439733418579138,-1.0422438564706191,-1.0405257749441,-1.0388189894727105,-1.037123324824694,-1.035438677576472,-1.0337649457533225,-1.0321019611685196,-1.030449625963804,-1.0288078436245518,-1.0271764526031957,-1.025555360255678,-1.0239444751847053,-1.0223436421053036,-1.0207527732628408,-1.019171782060179,-1.0176005191251682,-1.0160389224657376,-1.014486846469495,-1.0129442108734816,-1.0114109364385417,-1.0098868829356582,-1.00837197423725,-1.00686613516742,-1.0053692305917359,-1.0038811882718048,-1.0024019368542338,-1.0009313460298952,-0.9994693670468571,-0.9980158726721742,-0.9965707966489142,-0.9951340540205358,-0.9937055610500344,-0.9922852737216018,-0.990873033402351,-0.989468798625307,-0.988072490310065,-0.9866840304874775,-0.9853033422794398,-0.983930387122266,-0.982565015568503,-0.9812071913477585,-0.979856841752755,-0.9785138950727114,-0.9771783168069748,-0.9758499645258558,-0.9745288058332754,-0.9732147728313844,-0.9719077985341662,-0.9706078168515833,-0.9693147976531378,-0.9680286062505511,-0.9667492144165378,-0.9654765594930309,-0.9642105796435692,-0.962951213839346,-0.9616984358350241,-0.9604521180216068,-0.9592122358793311,-0.9579787314761868,-0.9567515476222821,-0.9555306609834048,-0.9543159493973493,-0.9531073911231911,-0.9519049318188554,-0.9507085178252744,-0.9495180961552696,-0.9483336466217367,-0.9471550531111689,-0.945982296887474,-0.9448153275441943,-0.943654095294397,-0.9424985509608138,-0.9413486771687765,-0.940204363374863,-0.9390655935288575,-0.937932320797291,-0.9368044989098472,-0.9356821126086434,-0.9345650556622298,-0.9334533140422328,-0.9323468436448745,-0.9312456008873112,-0.9301495426996608,-0.9290586561219304,-0.9279728397391964,-0.9268920817181484,-0.9258163409639786,-0.9247455768571666,-0.9236797492463587,-0.9226188472337927,-0.9215627738671707,-0.9205115192832718,-0.9194650451347575,-0.9184233135087563,-0.9173862869204862,-0.9163539563252968,-0.9153262289138163,-0.914303096593171,-0.9132845235294105,-0.912270474286462,-0.9112609412209908,-0.9102558347537449,-0.9092551481305418,-0.9082588474505642,-0.9072668991832408,-0.9062792701630066,-0.9052959542743121,-0.9043168655706579,-0.9033419987572633,-0.9023713220779758,-0.9014048041167795,-0.9004424137930738,-0.8994841463683826,-0.8985299192861936,-0.897579728566989,-0.8966335444261965,-0.8956913373922285,-0.8947531037706213,-0.8938187636600262,-0.8928883140779086,-0.8919617267626961,-0.8910389737451893,-0.8901200273446399,-0.8892048850074481,-0.8882934698314717,-0.8873857799234119,-0.8864817887183959,-0.8855814699213462,-0.8846847975034294,-0.8837917699416902,-0.8829023131456576,-0.8820164262057494,-0.8811340841237214,-0.880255262150656,-0.8793799595464004,-0.8785081044316528,-0.8776396966437503,-0.8767747123993516,-0.8759131281488285,-0.8750549205732899,-0.8742000897893559,-0.8733485664251599,-0.872500351135229,-0.87165542149476,-0.8708137552954832,-0.8699753305429515,-0.8691401481289126,-0.868308141041819,-0.867479310675163,-0.8666536358635025,-0.8658310956422767,-0.8650116914926047,-0.8641953582659088,-0.8633820979172755,-0.8625718902613195,-0.8617647153015453,-0.8609605532280563,-0.8601594061675687,-0.8593612110914756,-0.8585659705696882,-0.8577736655164605,-0.8569842770216878,-0.856197786348812,-0.8554141962089847,-0.854633445576549,-0.8538555375776088,-0.8530804541494368,-0.8523081773928244,-0.8515387104634317,-0.8507719939216716,-0.8500080313163735,-0.8492468053834811,-0.848488299013132,-0.8477324952478731,-0.8469793977302824,-0.8462289488313242,-0.8454811525625187,-0.8447359925586897,-0.8439934525985144,-0.8432535166028838,-0.8425161886550272,-0.8417814128421997,-0.8410491935942432,-0.8403195153849585,-0.8395923628224988,-0.83886774032504,-0.8381455933429148,-0.8374259266236264,-0.8367087252978669,-0.8359939746233485,-0.8352816599833963,-0.8345717861627454,-0.833864300172148,-0.83315920710637,-0.8324564928374936,-0.831756143356459,-0.8310581447717689,-0.8303625021994177,-0.8296691641337786,-0.828978135983025,-0.8282894043132824,-0.8276029558020095,-0.8269187958165709,-0.8262368740327729,-0.8255571960962915,-0.8248797491181105,-0.8242045203147199,-0.8235314970069973,-0.8228606848368232,-0.8221920348359603,-0.82152555290907,-0.8208612267836632,-0.8201990442862513,-0.8195389933413115,-0.8188810798381092,-0.8182252561011378,-0.8175715282680244,-0.816919884645012,-0.8162703136313263,-0.8156228213033756,-0.8149773610175685,-0.814333939087439,-0.8136925442746726,-0.8130531654292626,-0.8124157914886103,-0.8117804287327552,-0.8111470317052273,-0.8105156069105693,-0.8098861436270354,-0.8092586312159534,-0.8086330591208898,-0.8080094338045306,-0.8073877109449773,-0.806767897217662,-0.8061499823869603,-0.8055339562954653,-0.8049198255433365,-0.8043075467163366,-0.8036971266181835,-0.8030885553966742,-0.8024818232740403,-0.801876920546216,-0.8012738539620751,-0.8006725811537856,-0.8000731090634279,-0.7994754282746304,-0.7988795294412071,-0.7982854032864802,-0.797693056691721,-0.7971024482914422,-0.7965135851504516,-0.7959264582634734,-0.7953410586914651,-0.794757377560986,-0.7941754218707592,-0.7935951512161581,-0.7930165884855266,-0.7924396779162725,-0.7918644737231221,-0.7912909048262479,-0.7907190252001328,-0.7901487642488781,-0.7895801757080909,-0.789013220260251,-0.7884478590023495,-0.7878841453142474,-0.7873220097841938,-0.786761505556592,-0.7862025940471948,-0.7856452370747936,-0.7850894874331691,-0.7845352768593203,-0.783982657914982,-0.7834315927251091,-0.7828820438066798,-0.7823340633759138,-0.7817875842846738,-0.781242658520532,-0.7806992193721328,-0.7801573185997557,-0.7796169192828961,-0.7790779848783705,-0.7785405668080548,-0.7780045994303968,-0.7774701339433517,-0.7769371340822393,-0.7764055639496836,-0.7758754744102775,-0.7753468008616841,-0.7748195939479233,-0.7742938180395741,-0.7737694378648864,-0.7732465037395192,-0.7727249520710139,-0.7722048329577766,-0.7716860832033554,-0.7711687526902236,-0.7706528066454901,-0.7701382106410527,-0.769625014237952,-0.7691131552105175,-0.7686026829071326,-0.7680935631444084,-0.7675857620749523,-0.7670793287306029,-0.7665742018298753,-0.7660704301951926,-0.7655679802149818,-0.7650668186051953,-0.7645669938765458,-0.7640684456661813,-0.7635712222786024,-0.7630752637114814,-0.7625806180643789,-0.762087252497967,-0.7615951344890963,-0.7611043118322885,-0.7606147254097275,-0.7601264228141437,-0.7596393717385502,-0.75915354018438,-0.7586689754440172,-0.7581856192609003,-0.7577035187287307,-0.7572226420575575,-0.7567429577583648,-0.7562645126291379,-0.755787249252189,-0.7553112142298857,-0.7548363504740134,-0.7543627043925358,-0.7538902448948194,-0.7534189411811207,-0.7529488393700623,-0.7524798831823624,-0.7520121185452442,-0.7515455148508531,-0.7510800417753456,-0.7506157449610775,-0.7501525689172542,-0.7496905590977925,-0.7492296603217372,-0.7487699178557378,-0.748311301745571,-0.7478537823117853,-0.7473974045423127,-0.7469421140172993,-0.7464879555403071,-0.7460348996087922,-0.7455829169886474,-0.7451320522090288,-0.7446822515924598,-0.7442335594865785,-0.7437859468284059,-0.7433393848172738,-0.7428939175306577,-0.7424494920153961,-0.7420061521702522,-0.7415638453268772,-0.7411226152064312,-0.7406824333418472,-0.7402432715201288,-0.7398051731980989,-0.7393680864074909,-0.738932054430267,-0.7384970492116867,-0.7380630429454226,-0.7376300786531782,-0.7371981050501741,-0.7367671649859492,-0.7363372308074527,-0.7359082751045697,-0.7354803404705911,-0.7350533762881944,-0.7346274249811567,-0.7342024361947738,-0.7337784521843563,-0.7333554458420878,-0.7329333902957103,-0.7325123275497855,-0.7320922078955281,-0.7316730731716212,-0.7312548966479647,-0.7308376518249441,-0.7304213802943412,-0.730006032978517,-0.7295916513059171,-0.7291782089147734,-0.7287656796688872,-0.7283541047535833,-0.7279434357080831,-0.7275337135568727,-0.7271248900820235,-0.7267170061481705,-0.726310035894074,-0.7259039536774338,-0.7254988001249449,-0.7250945276163151,-0.7246911766208242,-0.7242887216243671,-0.7238871373272148,-0.7234864639643288,-0.7230866544998507,-0.7226877490137202,-0.7222897223306514,-0.7218925494853067,-0.7214962703268647,-0.7211008383911177,-0.7207062933745725,-0.7203125890381941,-0.7199197649267457,-0.719527796325857,-0.719136658725126,-0.7187463914434286,-0.7183569487961557,-0.7179683699527303,-0.7175806305187782,-0.7171937062997733,-0.7168076362426559,-0.7164223752053984,-0.7160379619877383,-0.7156543725078977,-0.7152715828799461,-0.714889631684482,-0.7145084743105778,-0.7141281491938376,-0.7137486119326394,-0.7133699008184646,-0.7129919921952036,-0.7126148625971842,-0.7122385501013274,-0.711863010821623,-0.7114882826930221,-0.7111143423552299,-0.7107411666346564,-0.7103687932548912,-0.7099971788348711,-0.7096263609583287,-0.7092563165541736,-0.7088870227343932,-0.7085185168744986,-0.7081507560880268,-0.7077837776127056,-0.7074175387570849,-0.7070520766219286,-0.7066873685303289,-0.7063233919835468,-0.7059601838784241,-0.7055977020041353,-0.7052359831225793,-0.7048750048310337,-0.7045147449015545,-0.7041552398951222,-0.7037964480719013,-0.7034384058599131,-0.7030810911246943,-0.7027244819032615,-0.7023686144256656,-0.702013447413706,-0.7016590169664211,-0.7013052819877063,-0.7009522784463563,-0.7005999845738622,-0.7002483787687268,-0.6998974968058114,-0.6995472980379949,-0.6991978181117917,-0.6988490355134622,-0.6985009288931904,-0.6981535337063753,-0.697806809746151,-0.697460792341432,-0.6971154602279164,-0.6967707923022183,-0.696426823704905,-0.6960835146608793,-0.6957409001860517,-0.6953989406757101,-0.6950576710218308,-0.6947170703006692,-0.694377117745321,-0.6940378480632032,-0.6936992220698868,-0.6933612743506348],"x":[-0.8,-0.8043824701195219,-0.8087649402390438,-0.8131474103585657,-0.8175298804780876,-0.8219123505976096,-0.8262948207171315,-0.8306772908366534,-0.8350597609561753,-0.8394422310756973,-0.8438247011952191,-0.848207171314741,-0.852589641434263,-0.8569721115537848,-0.8613545816733068,-0.8657370517928287,-0.8701195219123506,-0.8745019920318725,-0.8788844621513944,-0.8832669322709163,-0.8876494023904382,-0.8920318725099602,-0.896414342629482,-0.900796812749004,-0.9051792828685259,-0.9095617529880478,-0.9139442231075697,-0.9183266932270916,-0.9227091633466136,-0.9270916334661354,-0.9314741035856574,-0.9358565737051793,-0.9402390438247012,-0.9446215139442231,-0.949003984063745,-0.953386454183267,-0.9577689243027888,-0.9621513944223108,-0.9665338645418327,-0.9709163346613546,-0.9752988047808765,-0.9796812749003984,-0.9840637450199203,-0.9884462151394422,-0.9928286852589642,-0.997211155378486,-1.001593625498008,-1.0059760956175299,-1.0103585657370517,-1.0147410358565736,-1.0191235059760957,-1.0235059760956176,-1.0278884462151394,-1.0322709163346613,-1.0366533864541834,-1.0410358565737052,-1.045418326693227,-1.049800796812749,-1.0541832669322708,-1.058565737051793,-1.0629482071713148,-1.0673306772908366,-1.0717131474103585,-1.0760956175298806,-1.0804780876494025,-1.0848605577689243,-1.0892430278884462,-1.093625498007968,-1.0980079681274901,-1.102390438247012,-1.1067729083665339,-1.1111553784860557,-1.1155378486055776,-1.1199203187250997,-1.1243027888446215,-1.1286852589641434,-1.1330677290836653,-1.1374501992031874,-1.1418326693227092,-1.146215139442231,-1.150597609561753,-1.1549800796812748,-1.159362549800797,-1.1637450199203188,-1.1681274900398406,-1.1725099601593625,-1.1768924302788846,-1.1812749003984064,-1.1856573705179283,-1.1900398406374502,-1.194422310756972,-1.1988047808764941,-1.203187250996016,-1.2075697211155378,-1.2119521912350597,-1.2163346613545816,-1.2207171314741037,-1.2250996015936255,-1.2294820717131474,-1.2338645418326692,-1.2382470119521913,-1.2426294820717132,-1.247011952191235,-1.251394422310757,-1.2557768924302788,-1.2601593625498009,-1.2645418326693227,-1.2689243027888446,-1.2733067729083665,-1.2776892430278886,-1.2820717131474104,-1.2864541832669323,-1.2908366533864541,-1.295219123505976,-1.299601593625498,-1.30398406374502,-1.3083665338645418,-1.3127490039840637,-1.3171314741035856,-1.3215139442231076,-1.3258964143426295,-1.3302788844621514,-1.3346613545816732,-1.3390438247011953,-1.3434262948207172,-1.347808764940239,-1.352191235059761,-1.3565737051792828,-1.3609561752988049,-1.3653386454183267,-1.3697211155378486,-1.3741035856573705,-1.3784860557768925,-1.3828685258964144,-1.3872509960159363,-1.3916334661354581,-1.39601593625498,-1.400398406374502,-1.404780876494024,-1.4091633466135458,-1.4135458167330677,-1.4179282868525895,-1.4223107569721116,-1.4266932270916335,-1.4310756972111554,-1.4354581673306772,-1.4398406374501993,-1.4442231075697212,-1.448605577689243,-1.452988047808765,-1.4573705179282868,-1.4617529880478088,-1.4661354581673307,-1.4705179282868526,-1.4749003984063744,-1.4792828685258965,-1.4836653386454184,-1.4880478087649402,-1.4924302788844621,-1.496812749003984,-1.501195219123506,-1.505577689243028,-1.5099601593625498,-1.5143426294820717,-1.5187250996015935,-1.5231075697211156,-1.5274900398406375,-1.5318725099601593,-1.5362549800796812,-1.5406374501992033,-1.5450199203187251,-1.549402390438247,-1.5537848605577689,-1.5581673306772907,-1.5625498007968128,-1.5669322709163347,-1.5713147410358566,-1.5756972111553784,-1.5800796812749005,-1.5844621513944224,-1.5888446215139442,-1.593227091633466,-1.597609561752988,-1.60199203187251,-1.606374501992032,-1.6107569721115538,-1.6151394422310756,-1.6195219123505975,-1.6239043824701196,-1.6282868525896415,-1.6326693227091633,-1.6370517928286852,-1.6414342629482073,-1.6458167330677291,-1.650199203187251,-1.6545816733067729,-1.6589641434262947,-1.6633466135458168,-1.6677290836653387,-1.6721115537848605,-1.6764940239043824,-1.6808764940239045,-1.6852589641434264,-1.6896414342629482,-1.69402390438247,-1.698406374501992,-1.702788844621514,-1.707171314741036,-1.7115537848605578,-1.7159362549800796,-1.7203187250996015,-1.7247011952191236,-1.7290836653386454,-1.7334661354581673,-1.7378486055776892,-1.7422310756972113,-1.7466135458167331,-1.750996015936255,-1.7553784860557768,-1.7597609561752987,-1.7641434262948208,-1.7685258964143427,-1.7729083665338645,-1.7772908366533864,-1.7816733067729085,-1.7860557768924303,-1.7904382470119522,-1.794820717131474,-1.799203187250996,-1.803585657370518,-1.8079681274900399,-1.8123505976095617,-1.8167330677290836,-1.8211155378486055,-1.8254980079681276,-1.8298804780876494,-1.8342629482071713,-1.8386454183266931,-1.8430278884462152,-1.847410358565737,-1.851792828685259,-1.8561752988047808,-1.8605577689243027,-1.8649402390438248,-1.8693227091633466,-1.8737051792828685,-1.8780876494023904,-1.8824701195219125,-1.8868525896414343,-1.8912350597609562,-1.895617529880478,-1.9,-1.904382470119522,-1.9087649402390439,-1.9131474103585657,-1.9175298804780876,-1.9219123505976095,-1.9262948207171315,-1.9306772908366534,-1.9350597609561753,-1.9394422310756971,-1.9438247011952192,-1.948207171314741,-1.952589641434263,-1.9569721115537848,-1.9613545816733067,-1.9657370517928288,-1.9701195219123506,-1.9745019920318725,-1.9788844621513944,-1.9832669322709164,-1.9876494023904383,-1.9920318725099602,-1.996414342629482,-2.000796812749004,-2.005179282868526,-2.0095617529880476,-2.0139442231075697,-2.018326693227092,-2.0227091633466134,-2.0270916334661355,-2.031474103585657,-2.0358565737051793,-2.0402390438247013,-2.044621513944223,-2.049003984063745,-2.053386454183267,-2.057768924302789,-2.062151394422311,-2.0665338645418325,-2.0709163346613546,-2.0752988047808767,-2.0796812749003983,-2.0840637450199204,-2.088446215139442,-2.092828685258964,-2.0972111553784862,-2.101593625498008,-2.10597609561753,-2.1103585657370516,-2.1147410358565737,-2.119123505976096,-2.1235059760956174,-2.1278884462151395,-2.132270916334661,-2.1366533864541832,-2.1410358565737053,-2.145418326693227,-2.149800796812749,-2.154183266932271,-2.1585657370517928,-2.162948207171315,-2.1673306772908365,-2.1717131474103586,-2.1760956175298807,-2.1804780876494023,-2.1848605577689244,-2.189243027888446,-2.193625498007968,-2.19800796812749,-2.202390438247012,-2.206772908366534,-2.2111553784860556,-2.2155378486055777,-2.2199203187250998,-2.2243027888446214,-2.2286852589641435,-2.233067729083665,-2.237450199203187,-2.2418326693227093,-2.246215139442231,-2.250597609561753,-2.254980079681275,-2.2593625498007968,-2.263745019920319,-2.2681274900398405,-2.2725099601593626,-2.2768924302788847,-2.2812749003984063,-2.2856573705179284,-2.29003984063745,-2.294422310756972,-2.298804780876494,-2.303187250996016,-2.307569721115538,-2.3119521912350596,-2.3163346613545817,-2.3207171314741037,-2.3250996015936254,-2.3294820717131475,-2.333864541832669,-2.338247011952191,-2.3426294820717133,-2.347011952191235,-2.351394422310757,-2.355776892430279,-2.3601593625498007,-2.364541832669323,-2.3689243027888445,-2.3733067729083666,-2.3776892430278886,-2.3820717131474103,-2.3864541832669324,-2.390836653386454,-2.395219123505976,-2.399601593625498,-2.40398406374502,-2.408366533864542,-2.4127490039840636,-2.4171314741035856,-2.4215139442231077,-2.4258964143426294,-2.4302788844621515,-2.434661354581673,-2.439043824701195,-2.4434262948207173,-2.447808764940239,-2.452191235059761,-2.456573705179283,-2.4609561752988047,-2.465338645418327,-2.4697211155378485,-2.4741035856573705,-2.4784860557768926,-2.4828685258964143,-2.4872509960159364,-2.491633466135458,-2.49601593625498,-2.500398406374502,-2.504780876494024,-2.509163346613546,-2.5135458167330675,-2.5179282868525896,-2.5223107569721117,-2.5266932270916334,-2.5310756972111554,-2.535458167330677,-2.539840637450199,-2.5442231075697213,-2.548605577689243,-2.552988047808765,-2.557370517928287,-2.5617529880478087,-2.566135458167331,-2.5705179282868524,-2.5749003984063745,-2.5792828685258966,-2.5836653386454183,-2.5880478087649403,-2.592430278884462,-2.596812749003984,-2.601195219123506,-2.605577689243028,-2.60996015936255,-2.6143426294820715,-2.6187250996015936,-2.6231075697211157,-2.6274900398406373,-2.6318725099601594,-2.636254980079681,-2.640637450199203,-2.6450199203187252,-2.649402390438247,-2.653784860557769,-2.658167330677291,-2.6625498007968127,-2.666932270916335,-2.6713147410358564,-2.6756972111553785,-2.6800796812749006,-2.6844621513944222,-2.6888446215139443,-2.693227091633466,-2.697609561752988,-2.70199203187251,-2.706374501992032,-2.710756972111554,-2.7151394422310755,-2.7195219123505976,-2.7239043824701197,-2.7282868525896413,-2.7326693227091634,-2.737051792828685,-2.741434262948207,-2.745816733067729,-2.750199203187251,-2.754581673306773,-2.758964143426295,-2.7633466135458167,-2.7677290836653388,-2.7721115537848604,-2.7764940239043825,-2.7808764940239046,-2.785258964143426,-2.7896414342629483,-2.79402390438247,-2.798406374501992,-2.802788844621514,-2.8071713147410358,-2.811553784860558,-2.8159362549800795,-2.8203187250996016,-2.8247011952191237,-2.8290836653386453,-2.8334661354581674,-2.837848605577689,-2.842231075697211,-2.846613545816733,-2.850996015936255,-2.855378486055777,-2.859760956175299,-2.8641434262948207,-2.8685258964143427,-2.8729083665338644,-2.8772908366533865,-2.8816733067729086,-2.88605577689243,-2.8904382470119523,-2.894820717131474,-2.899203187250996,-2.903585657370518,-2.9079681274900397,-2.912350597609562,-2.9167330677290835,-2.9211155378486056,-2.9254980079681276,-2.9298804780876493,-2.9342629482071714,-2.938645418326693,-2.943027888446215,-2.947410358565737,-2.951792828685259,-2.956175298804781,-2.960557768924303,-2.9649402390438246,-2.9693227091633467,-2.9737051792828684,-2.9780876494023905,-2.9824701195219125,-2.986852589641434,-2.9912350597609563,-2.995617529880478,-3.0]}

},{}],101:[function(require,module,exports){
module.exports={"expected":[1.0772173396653455,1.0770200017375344,1.076822808333459,1.0766257592679924,1.0764288543563478,1.0762320934140754,1.0760354762570625,1.0758390027015328,1.075642672564045,1.0754464856614927,1.075250441811103,1.0750545408304366,1.0748587825373854,1.0746631667501734,1.0744676932873554,1.0742723619678154,1.074077172610767,1.0738821250357522,1.07368721906264,1.0734924545116264,1.0732978312032337,1.0731033489583088,1.0729090075980239,1.0727148069438734,1.0725207468176765,1.0723268270415733,1.0721330474380257,1.0719394078298163,1.0717459080400473,1.0715525478921406,1.071359301034067,1.0711662196602865,1.0709732774005167,1.0707804740794482,1.0705878095220869,1.070395283553754,1.0702028960000842,1.070010646687026,1.0698185354408394,1.0696265620880971,1.0694347264556823,1.0692430283707888,1.0690514676609197,1.0688600441538874,1.068668757677812,1.0684776080611214,1.06828659513255,1.0680957187211382,1.067904978656232,1.0677143747674813,1.067523906884841,1.0673335748385682,1.0671433784592226,1.066953317577666,1.0667633920250614,1.0665736016328717,1.06638394623286,1.0661944256570877,1.0660050397379153,1.0658157883080002,1.0656266712002975,1.0654376882480576,1.0652488392848278,1.0650601241444486,1.0648715426610562,1.064683094669079,1.0644947800032398,1.0643065984985522,1.064118549990322,1.0639306343141457,1.0637428513059095,1.0635552008017903,1.0633676826382528,1.063180271266504,1.0629930173125561,1.0628058952102892,1.0626189047973174,1.0624320459115395,1.06224531839114,1.0620587220745876,1.0618722568006345,1.061685922408315,1.0614997187369475,1.06131364562613,1.0611277029157433,1.0609418904459478,1.060756208057183,1.060570655590169,1.0603852328859034,1.0601999397856614,1.060014776130996,1.0598297417637368,1.059644836525989,1.0594600602601334,1.0592754128088253,1.0590908940149941,1.0589065037218428,1.0587222417728475,1.0585381080117557,1.0583541022825875,1.0581702244296334,1.057986474297454,1.0578028517308806,1.057619356575013,1.0574359886752196,1.0572527478771372,1.0570696340266692,1.0568866469699867,1.056703786553526,1.0565210526239897,1.0563384450283446,1.0561559636138231,1.0559736082279199,1.0557913787183937,1.0556092749332657,1.0554272967208194,1.0552454192934526,1.05506369178923,1.0548820894040836,1.0547006119873392,1.054519259388581,1.054338031457652,1.0541569280446532,1.0539759489999425,1.053795094174135,1.0536143634181017,1.0534337565829697,1.0532532735201205,1.0530729140811907,1.0528926781180707,1.0527125654829037,1.0525325760280864,1.0523527096062675,1.0521729660703474,1.0519933452734775,1.0518138470690597,1.0516344713107464,1.0514552178524388,1.051276086548287,1.0510970772526906,1.0509181898202957,1.050739424105996,1.050560779964932,1.0503822572524906,1.050203855824304,1.0500255755362493,1.0498474162444489,1.0496693778052684,1.049491460075317,1.0493136629114472,1.0491359861707537,1.048958429710573,1.0487809933884826,1.0486036770623017,1.0484264805900887,1.0482494038301426,1.048072446641001,1.0478956088814404,1.047718866469716,1.0475422671627366,1.0473657868630757,1.0471894254304595,1.04701318272485,1.0468370586064448,1.046661052935677,1.0464851655732137,1.0463093963799561,1.0461337452170394,1.045958211945831,1.0457827964279318,1.0456074985251738,1.045432318099621,1.045257255013568,1.04508230912954,1.0449074803102927,1.0447327684188101,1.044558173318307,1.0443836948722247,1.0442093329442337,1.0440350873982318,1.0438609580983433,1.04368694490892,1.0435130476945385,1.0433392663200016,1.0431656006503374,1.0429920505507981,1.04281861588686,1.042645296524223,1.0424720923288104,1.0422990031667676,1.0421260289044627,1.041953169408485,1.041780424545645,1.0416077941829742,1.0414352781877245,1.0412628764273668,1.041090588769592,1.0409184150823094,1.040746355233647,1.04057440909195,1.0404025765257818,1.0402308341402775,1.0400592283470707,1.0398877357363636,1.0397163561775844,1.0395450895403766,1.0393739356945977,1.0392028945103196,1.0390319658578278,1.0388611496076214,1.0386904456304118,1.0385198537971232,1.0383493739788916,1.0381790060470644,1.0380087498731994,1.0378386053290658,1.0376685722866426,1.0374986506181183,1.0373288401958907,1.0371591408925662,1.0369895525809596,1.0368200751340937,1.0366507084251986,1.0364814523277113,1.0363123067152755,1.036143271461741,1.0359743464411628,1.035805531527802,1.0356368265961238,1.035468231520798,1.0352997461766982,1.0351313704389016,1.0349631041826886,1.0347949472835423,1.0346268996171473,1.034458961059391,1.0342911314863616,1.0341234107743482,1.0339557987998405,1.0337882954395283,1.033620900570301,1.0334536140692476,1.0332864358136555,1.0331193656810105,1.0329523809296495,1.03278552669076,1.0326187802084454,1.0324521413609813,1.0322856100268396,1.0321191860846877,1.0319528694133893,1.0317866598920022,1.03162055739978,1.0314545618161701,1.0312886730208133,1.0311228908935444,1.0309572153143916,1.0307916461635749,1.0306261833215073,1.0304608266687934,1.0302955760862291,1.0301304314548017,1.029965392655689,1.0298004595702592,1.0296356320800701,1.0294709100668693,1.0293062934125932,1.0291417819993671,1.0289773757095049,1.0288130744255075,1.028648878030064,1.028484786406051,1.0283207994365309,1.028156917004753,1.027993138994153,1.027829465288351,1.0276658957711535,1.0275024303265512,1.0273390688387194,1.0271758111920173,1.0270126572709881,1.0268496069603579,1.0266866601450364,1.026523816710115,1.0263610765408675,1.0261984395227504,1.0260358835218182,1.0258734524769935,1.0257111242407377,1.0255488986992296,1.025386775738829,1.0252247552460743,1.025062837107683,1.0249010212105527,1.024739307441758,1.0245776956885524,1.0244161858383667,1.0242547777788096,1.0240934713976664,1.023932266582899,1.0237711632226458,1.023610161205221,1.0234492604191145,1.023288460752991,1.023127762095691,1.022967164336228,1.0228066673637908,1.0226462710677415,1.022485975337616,1.0223257800631227,1.0221656851341432,1.0220056904407313,1.0218457958731129,1.021686001321685,1.0215263066770168,1.021366711829848,1.0212072166710886,1.0210478210918197,1.0208885249832917,1.0207293282369245,1.0205702307443079,1.0204112323971999,1.0202523330875273,1.0200935327073852,1.0199348311490366,1.019776228304912,1.019617724067609,1.019459318329892,1.019301010984692,1.0191427804913151,1.018984669623905,1.0188266568287863,1.018668741999553,1.0185109250299635,1.0183532058139413,1.0181955842455734,1.0180380602191113,1.0178806336289696,1.017723304369726,1.0175660723361217,1.0174089374230597,1.0172518995256057,1.017094958538987,1.016938114358593,1.0167813668799737,1.0166247159988402,1.0164681616110642,1.016311703612678,1.0161553418998737,1.0159990763690026,1.0158429069165757,1.0156868334392635,1.015530855833894,1.0153749739974545,1.0152191878270902,1.0150634972201036,1.014907902073955,1.014752402286262,1.0145969977547982,1.0144416883774947,1.0142864740524382,1.0141313546778712,1.0139763301521918,1.0138214003739534,1.0136665652418648,1.0135118246547885,1.0133571785117421,1.0132026267118968,1.0130481691545776,1.0128938057392631,1.0127395363655847,1.0125853609333266,1.0124312584676871,1.0122772706309298,1.0121233764358462,1.0119695757828286,1.0118158685724212,1.0116622547053185,1.011508734082366,1.0113553066045602,1.0112019721730463,1.0110487306891205,1.0108955820542285,1.010742526169964,1.010589562938071,1.0104366922604415,1.010283914039116,1.010131228176283,1.0099786345742787,1.009826133135587,1.0096737237628381,1.0095214063588107,1.0093691808264287,1.0092170470687627,1.0090650049890297,1.008913054490592,1.0087611954769575,1.0086094278517794,1.0084577515188557,1.0083061663821289,1.008154672345686,1.0080032693137577,1.0078519571907192,1.007700735881088,1.0075496052895263,1.0073985653208375,1.0072476158799692,1.0070967568720106,1.006945988202193,1.0067953097758897,1.0066447214986154,1.0064942232760261,1.0063438150139188,1.006193496618231,1.0060432476421801,1.0058931087098535,1.0057430593625882,1.0055930995068827,1.0054432290493738,1.005293447896838,1.0051437559561902,1.0049941531344841,1.0048446393389119,1.004695214476803,1.0045458784556256,1.0043966311829844,1.0042474725666222,1.0040984025144177,1.0039494209343873,1.0038005277346835,1.0036517228235948,1.0035030061095453,1.0033543775010956,1.003205836906941,1.0030573842359118,1.0029090193969736,1.0027607422992266,1.002612552851905,1.002464450964377,1.0023164365461452,1.0021685095068453,1.0020206697562462,1.0018729172042504,1.0017252517608926,1.0015776733363402,1.0014301818408933,1.0012827771849835,1.0011354592791746,1.0009882280341615,1.0008410833607706,1.0006940251699594,1.0005470533728162,1.0004001678805596,1.0002533686045387,1.0001066554562323,0.9999600283472495,0.999813467335933,0.9996670318943371,0.9995206425441248,0.9993743785412584,0.9992281605006041,0.9990820675855308,0.9989360205039165,0.9987900983267247,0.9986442218546556,0.998498470066456,0.998352763855457,0.9982071821083776,0.9980616458109898,0.9979162337581717,0.9977708670279484,0.9976256243235435,0.9974804268150459,0.9973353531142114,0.9971903244830056,0.9970454194419013,0.9969005593445536,0.996755822620338,0.9966111307144117,0.9964665227874662,0.9963220379092892,0.9961775976619479,0.9960332802478761,0.9958890073401783,0.9957448570508349,0.9956007511438033,0.9954567676407936,0.9953128283964313,0.9951690113423385,0.9950252384236251,0.9948815874820068,0.9947379805528944,0.9945944953882785,0.9944510541136881,0.99430773439157,0.9941644584373888,0.994021303824227,0.9938781928573035,0.993735203020516,0.993592256708657,0.9934494313166189,0.9933066493285861,0.9931639880506242,0.9930213700561302,0.9928788725625212,0.9927364182322261,0.9925940841941915,0.9924517931996996,0.9923096222894032,0.99216749430326,0.9920254861938044,0.9918835208894908,0.9917416752549134,0.9915998723068452,0.9914581888221148,0.9913165479056376,0.9911750262466512,0.9910335470380369,0.9908921868816166,0.9907508690580605,0.9906096700819489,0.990468513321566,0.9903274369832411,0.9901864791862458,0.9900455634299621,0.9899047660116193,0.9897640105177767,0.9896233731590268,0.9894827776089327,0.9893422999916226,0.989201864067489,0.9890615458743678,0.9889212692593082,0.9887811101740244,0.9886409925520504,0.9885009922591482,0.9883610333151657,0.9882211915000827,0.9880813909198886,0.9879417072689516,0.9878020647392316,0.9876625389396535,0.9875230541479773,0.9873836858878537,0.9872443585226731,0.9871051474909799,0.986965977241625,0.9868269231282139,0.9866879096848896,0.9865490121804857,0.986410155234269,0.9862714140304679,0.9861327132733045,0.985994128062568,0.9858555831872692,0.9857171536629237,0.9855787643631626,0.9854404902193941,0.9853022561897039,0.9851641371215568,0.9850260580573261,0.9848880937606983,0.9847501693581693,0.98461235952981,0.9844745894860744,0.9843368965188483,0.9841993178365775,0.9840617787753486,0.9839243538069034,0.9837869683508752,0.9836496967959597,0.983512464645174,0.9833753462043302,0.9832382670596653,0.9831013014342693,0.9829643749974364,0.982827561889696,0.9826907878632362,0.9825541269761869,0.9824175050634691,0.9822809961009717,0.9821445260061884,0.9820081686729266,0.9818718501010911,0.9817356441025679,0.981599476759512,0.9814634218020464,0.9813274053944169,0.9811915011851418,0.9810556354203978,0.9809198816672563,0.9807841662536665,0.9806485626654097,0.9805129973120489,0.9803775435982326,0.980242128014979,0.9801068238859607,0.9799715577834934,0.9798364029504298,0.9797012860402258,0.9795662802150693,0.9794313122094002,0.9792964551048968,0.9791616357168262,0.9790269270465127,0.9788922559898937,0.9787576954680939,0.9786231724575657,0.9784887233733303,0.9783543845503744,0.9782200830856383,0.9780858917004143,0.9779517375717707,0.9778176933413373,0.9776836862661563,0.9775497889083469,0.9774159286047719,0.9772821778381929,0.9771484640251392,0.9770148595691657,0.9768812919663165,0.9767478335410908,0.9766144118688953,0.9764810991953241,0.9763478231749938,0.9762146559747447,0.9760815253282518,0.9759485033237513,0.9758155177738256,0.9756826406882563,0.9755497999583822,0.9754170675156799,0.9752843713300942,0.9751517832549451,0.9750192313386341,0.974886787356473,0.9747543794351698,0.9746220792721763,0.9744898150723583,0.9743576584554551,0.9742255377043411,0.9740935243611908,0.9739615467867393,0.9738296764457423,0.9736978417766473,0.9735661141669386,0.9734344221326289,0.9733028369840756,0.9731712873147105,0.9730398087364837,0.9729084367843782,0.9727771001676825,0.9726458700045704,0.9725146750813823,0.972383586439674,0.9722525329426928,0.97212158555552,0.9719906732181636,0.9718598668193758,0.9717290953757807,0.9715984296999431,0.9714677988849599,0.9713372736673518,0.9712067832165431,0.9710763981931542,0.9709460478427927,0.9708158027503208,0.9706855922373865,0.9705554868132357,0.9704254158754134,0.970295449857691,0.970165518233368,0.9700356913608821,0.9699058987891459,0.9697762108014032,0.9696465570220382,0.9695170076592419,0.9693874924127276,0.9692580814157745,0.9691287044432836,0.9689994315537614,0.9688701925971566,0.9687410575573421,0.968611956359174,0.9684829589120305,0.9683539952155352,0.9682251351047104,0.968096308653807,0.9679675856236297,0.9678388961629184,0.9677103099583977,0.9675817572331568,0.9674532727895898,0.9673248913561623,0.9671965432672329,0.9670682980249233,0.9669400860375962,0.9668119767337724,0.9666839005956821,0.9665559269783818,0.9664279864378306,0.9663001482557573,0.9661723430617135,0.9660446400642353,0.9659169699663306,0.9657894019034777,0.9656618666520048,0.9655344332744672,0.9654070326203774,0.9652797336795027,0.9651524673744042,0.965025302622195,0.9648981704183507,0.9647711396074627,0.9646441412577867,0.9645172441415266,0.9643903793995833,0.9642636157319066,0.9641368843519081,0.964010253887416,0.9638836556242197,0.9637571581181581,0.9636306927272646,0.9635043279355212,0.9633779951730723,0.9632517628521744,0.9631255624749506,0.9629994623820634,0.9628733941474821,0.9627474260404056,0.9626214897065187,0.9624956533436869,0.9623698486691783,0.9622441438096561,0.9621184705538401,0.9619928629261987,0.9618673548801404,0.961741878311324,0.9616165011689681,0.9614911554198572,0.9613659089424608,0.9612406937745586,0.9611155777240001,0.9609904928994307,0.9608655070382082,0.9607405523197144,0.9606156964109428,0.9604908715618835,0.9603661453692934,0.9602414501536423,0.9601168534415775,0.95999228762392,0.9598678201573353,0.9597433835028677,0.9596190450473271,0.9594947373218532,0.9593705276435279,0.9592463486134583,0.9591222674791239,0.9589982169114731,0.9588742640885086,0.9587503417508931,0.9586265170072782,0.9585027226679148,0.9583790257722279,0.9582553591999312,0.9581317899213481,0.9580082508855291,0.9578848089938201,0.9577613972644831,0.9576380825300117,0.957514797877754,0.9573916100714743,0.9572684522674826,0.9571453911609378,0.9570223599769871,0.9568994253423077,0.9567765205507592,0.9566536788787792,0.9565309335344593,0.9564082179145028,0.9562855984749133,0.9561630086807985,0.9560405149201086,0.9559180507262328,0.9557956824191897,0.9556733436005279,0.9555511005224556,0.9554288868545581,0.9553067687813546,0.9551846800403454,0.9550626867484812,0.9549407227110558,0.954818853977572,0.9546970144209959,0.9545752700235026,0.9544535547256089,0.9543319344422827,0.9542103431814706,0.954088846791053,0.9539673793462861,0.9538460066280818,0.9537246627788856,0.9536034135127605,0.953482193039221,0.9533610670056001,0.9532399696883624,0.953118966668228,0.9529979922884936,0.9528771120633844,0.952756260402909,0.9526355027549169,0.9525147735960104,0.9523941383077796,0.9522735314333023,0.9521530182880269,0.9520325334813887,0.9519121422628118,0.9517917793079703,0.9516715098003811,0.9515512684818398,0.9514310879090351,0.9513110005728784,0.9511909413141341,0.9510709751520529,0.9509510369932291,0.9508311917914117,0.9507113745189083,0.9505916500640813,0.9504719534648358,0.9503523495442625,0.9502327734057489,0.9501132898072281,0.949993833917454,0.9498744704293177,0.9497551345768236,0.9496358909879349,0.9495166749617924,0.9493975510615446,0.9492784546513539,0.9491594502296683,0.9490404732255571,0.9489215880728815,0.9488027302655035,0.9486839641728098,0.9485652253533424,0.9484465781121262,0.9483279580722688,0.9482094294745466,0.9480909280065195,0.9479725178448268,0.9478541347413693,0.9477358428087603,0.9476175778631283,0.9474994039531732,0.9473812569591382,0.9472632008659219,0.9471451716177693,0.9470272331358889,0.946909321428417,0.946791500352981,0.9466737059814974,0.9465560021081243,0.946438324868446,0.9463207061261836,0.9462031776817131,0.9460856757659184,0.945968264014761,0.9458508787225159,0.94573358346206,0.9456163145909496,0.9454991356190864,0.9453819829671973,0.9452649200823179,0.9451478834482369,0.9450309364492314,0.9449140156320432,0.9447971843183001,0.944680379117586,0.9445636632889881,0.9444469735048249,0.9443303729617499,0.9442137983947078,0.9440973129380261,0.9439808533891667,0.9438644828202397,0.9437481380911154,0.9436318822117936,0.9435156521044455,0.9433995107170673,0.9432833950340239,0.9431673679414141,0.9430513664856897,0.9429354534911576,0.9428195660662495,0.9427037669735884,0.9425879933834775,0.9424723079969616,0.9423566480461096,0.9422410761704931,0.9421255296638413,0.9420100711043573,0.9418946378473247,0.9417792924096836,0.9416639722081656,0.9415487084694115,0.9414335323589197,0.9413183813854006,0.941203317913091,0.9410882795118867,0.9409733284851274,0.940858402463789,0.9407435636904182,0.9406287498569665,0.9405140231452912,0.9403993213082152,0.94028470646701,0.9401701164352653,0.9400556132737701,0.9399411348567778,0.939826743184697,0.9397123761923416,0.939598095819843,0.9394838400624712,0.9393696708001834,0.9392555260886032,0.9391414677476149,0.9390274338930933,0.9389134862849516,0.9387995630992136,0.9386857260359233,0.93857191333115,0.9384581866251709,0.9383444842139991,0.938230867678245,0.9381172753737648,0.9380037688216031,0.9378902864373565,0.9377768896826052,0.9376635170325852,0.9375502298895125,0.9374369667881616,0.9373237890714843,0.9372106353336925,0.9370975668585743,0.9369845222996783,0.9368715628817287,0.9367586273175105,0.9366457461890615,0.9365329500194687,0.9364201776101891,0.9363074900387168,0.9361948261654957,0.9360822470093025,0.9359696914894687,0.9358572205661524,0.9357447732174735,0.9356324103450702,0.9355200709857516,0.9354078159827341,0.9352955844314172,0.9351834371166936,0.9350713131924547,0.934959273385367,0.9348472569077156,0.9347353244280385,0.9346234152169165,0.9345115898848562,0.9343997877606363,0.9342880693968285,0.9341763741803123,0.9340647626058218,0.9339531741182395,0.9338416691545585,0.9337301872175665,0.9336187886866125,0.9335074131222935,0.9333961208464092,0.933284851477269,0.9331736652792205,0.9330625019281884,0.9329514216311633,0.93284036412159,0.9327293895491969,0.932618437704853,0.9325075686811201,0.932396722326195,0.9322859586755683,0.9321752176346695,0.9320645591820121,0.9319539232801629,0.9318433398894646,0.9317328389133926,0.9316223604000449,0.9315119641859033,0.9314015903759653,0.9312912987500656,0.9311810294700078,0.9310708422590729,0.9309606773357764,0.9308505943669392,0.930740533627694,0.9306305547284961,0.9305205980010008,0.9304107229993905,0.9303008701117504,0.9301910988360823,0.9300813496168083,0.9299716818958421,0.9298620361738488,0.9297524718367474,0.9296429294413532,0.929533468317682,0.9294240290786069,0.9293146709983323,0.9292053347456968,0.9290960795391854,0.9289868461035091,0.9288776936015258,0.9287685628137273,0.9286595128474344,0.9285504845388284,0.9284415369397847,0.9283326109420822,0.9282237655422415,0.9281149416875476,0.9280061983192572,0.9278974764400706,0.927788834936071,0.9276802148652821,0.9275716750587046,0.9274631566295953,0.9273547183539619,0.9272463014002035,0.9271379351287334,0.9270296488450773,0.9269213838001824,0.926813198632963,0.9267050346492837,0.9265969504333794,0.9264888873459419,0.9263809039166163,0.9262729415608313,0.9261650587537308,0.9260571969653923,0.925949414616547,0.9258416532318313,0.9257339711776521,0.925626310033116,0.9255187281103943,0.9254111670429748,0.9253036850888812,0.9251962239358941,0.9250888417879769,0.924981480387115,0.9248741978832998,0.9247669360726328,0.9246597530512208,0.9245525906691935,0.9244455069688602,0.9243384438542914,0.924231459314086,0.9241244953061678,0.9240176097655121,0.9239107447038077,0.9238039580024942,0.923697191726939,0.9235905037051305,0.9234838360560285,0.923377246554257,0.9232706773722805,0.9231641862314459,0.9230577153576354,0.9229513224190042,0.9228449496947664,0.9227386547999705,0.9226323800670772,0.9225261542772635,0.9224200061587008,0.9223138781235608,0.9222078276544963,0.9221017972167104,0.9219958442400478,0.9218899112426576,0.9217840556016611,0.9216782198880684,0.9215724614263625,0.9214667228403285,0.9213610614018956,0.9212554197875398,0.9211498552167203,0.9210443104185195,0.9209388425600105,0.920833394422797,0.9207280231216505,0.9206226714906124,0.9205173965922353,0.920412141312914,0.9203069626630664,0.9202018035813566,0.9200967210261506,0.9199916579882987,0.9198866713741984,0.9197817042268017,0.9196768134006206,0.9195719419906261,0.9194671467995271,0.9193623709742308,0.9192576712657251,0.9191529908727705,0.9190483864947164,0.9189438013820934,0.9188392921826953,0.9187348021987402,0.9186303880265473,0.9185259930199403,0.9184216737238463,0.9183173735436114,0.9182131489728528,0.918108943468357,0.9180047852517553,0.9179007024934637,0.9177966387272813,0.9176926503189,0.9175886808533555,0.9174847866453135,0.9173809113309654,0.9172771111740304,0.9171733298617745,0.9170696236070517,0.9169659361481212,0.9168623236470519,0.9167587298930162,0.9166552109973777,0.916551710800141,0.9164482853620453,0.9163448785738464,0.9162415464457383,0.9161382329191488,0.9160349939538065,0.9159317735417302,0.915828627592263,0.9157255001479352,0.9156224470677833,0.9155194124447692,0.9154164520877023,0.9153135101398967,0.9152106423600131,0.9151077929416389,0.9150050175933652,0.9149022605589724,0.9147995774970614,0.9146969127015273,0.9145943217810577,0.9144917490795841,0.9143892501559598,0.9142867694040734,0.914184362333022,0.9140819733865733,0.9139796580241457,0.9138773607393073,0.9137751092376406,0.9136729311751424,0.9135707711199387,0.9134686844075881,0.9133666156558223,0.9132646201507933,0.9131626425597603,0.9130607381195454,0.9129588515468583,0.9128570380292681,0.9127552423328574,0.9126535195960193,0.9125518146341325,0.9124501825364896,0.9123485681676892,0.9122470265680007,0.9121455026511645,0.9120440514085029,0.9119426178028222,0.9118412567765737,0.911739913341553,0.9116386423914162,0.9115373889868718,0.9114362079728566,0.911335044458916,0.911233953241343,0.911132879478444,0.9110318779179438,0.9109308937668334,0.910829981724345,0.9107290870460788,0.9106282643828492,0.9105274590387904,0.9104267256163735,0.9103260094681919,0.9102253651484481,0.910124738058119,0.9100241827032141,0.9099236445330181,0.9098231780054217,0.9097227286179436,0.909622350780429,0.909521990038556,0.9094216735741609,0.9093214285211224,0.9092212004972214,0.9091210437925114,0.9090209040727465,0.9089208355801939,0.9088207840285071,0.9087208036122406,0.9086208400928731,0.9085209476173199,0.9084210719948117,0.9083212673246972,0.9082214794638853,0.9081217624642317,0.9080220622302503,0.9079224327663762,0.907822820024655,0.9077232779621746,0.9076237525784386,0.9075242977832599,0.9074248596235284,0.907325491961854,0.9072261408924392,0.9071268602307639,0.9070275961182709,0.906928402323382,0.9068292250347075,0.906730117973683,0.9066310273760148,0.9065320069162235,0.9064330028770388,0.9063340688861389,0.9062351512732048,0.906136303619143,0.9060374723005146,0.905938710851526,0.905839965695546,0.9057412903201526,0.9056426311954507,0.9055440417624603,0.905445468537952,0.9053469649164585,0.9052484774613446,0.9051500328477697,0.9050516577044915,0.9049532986646359,0.9048550090068237,0.9047567354105974,0.9046585311083374,0.9045603428259329,0.9044622237495936,0.9043641206514846,0.9042660866717155,0.9041680686286566,0.9040701196163874,0.9039721864994134,0.9038743223258532,0.9037764740062777,0.9036786945429145,0.9035809308923297,0.9034832360109292,0.9033855569012047,0.90328794647381,0.9031903517770927,0.9030928256760229,0.9029953152647352,0.9028978733625853,0.902800447109425,0.9027030892790646,0.9026057470570042,0.9025084731715772,0.9024112148538628,0.902314024786786,0.9022168502469367,0.9021197438718997,0.9020226529837067,0.9019256301746708,0.9018286228121968,0.9017316834433942,0.9016347594809726,0.9015379034269058,0.90144106273914,0.9013442898745809,0.9012475323363434,0.9011508425363325,0.9010541680227641,0.9009575349804091,0.9008609695491197,0.9007644193446384,0.9006679366666612,0.9005714691758624,0.900475069127173,0.900378684226131,0.9002823666829701,0.9001860642480247,0.9000898290868974,0.8999936089946524,0.8998974560923281,0.8998013182196511,0.8997052474531623,0.8996091916771838,0.899513202923825,0.8994172291219374,0.8993213222592653,0.8992254303091227,0.8991296052149549,0.8990337949944719,0.8989380515468859,0.8988423229342372,0.8987466610115706,0.89865101388519,0.8985554333660389,0.8984598676046187,0.8983643683678374,0.8982688838503279,0.8981734657750279,0.8980780623806366,0.8979827253461863,0.8978874029543769,0.8977921468404005,0.8976969053308922,0.8976017300172694,0.8975065692700368,0.897411474636902,0.8973163945321737,0.8972213804599144,0.8971263808781729,0.8970314472474304,0.8969365280694107,0.8968416490540464,0.8967468358677682,0.8966520370776931,0.8965573040356298,0.8964625853522084,0.8963679323358817,0.8962732936407286,0.8961787205319104,0.8960841617068903,0.8959896683876017,0.8958951893148284,0.8958007756673396,0.8957063762291749,0.8956120421360036,0.8955177222150579,0.8954234675589693,0.895329227038099,0.895235051702105,0.8951408904644136,0.8950467943317723,0.8949527122606088,0.8948586952148229,0.8947646921937812,0.894670754118599,0.8945768300315174,0.8944829708109305,0.8943891255418912,0.8942953450601345,0.8942015784934626,0.894107876635014,0.8940141886552769,0.8939205653048561,0.893826955796863,0.8937334108394307,0.893639879688232,0.8935464130089897,0.8934529600998762,0.8933595715842659,0.8932661968027678,0.8931728863364704,0.8930795895683569,0.8929863570372923,0.8928931381685715,0.8927999582121454,0.8927068423758152,0.8926137401482317,0.8925207019629657,0.8924276773508261,0.8923347167033746,0.8922417695935161,0.8921488863708651,0.8920560166503609,0.8919632107397313,0.8918704182958893,0.8917776895847367,0.8916849743050991,0.8915923226811133,0.8914996844534558,0.8914071098045594,0.891314548516891,0.8912220507312393,0.891129566271801,0.8910371452377817,0.8909447374950467,0.8908523931012785,0.8907600619639509,0.8906677940992832,0.8905755394562976,0.8904833480098104,0.8903911697503316,0.8902990546113343,0.8902069526247555,0.8901149136827861,0.8900228878587302,0.889930925003555,0.8898389752318726,0.8897470883534859,0.8896552145242549,0.889563403512878,0.8894716055164031,0.8893798702624836,0.8892881479892957,0.8891964883835068,0.889104841724363,0.889013232836461,0.8889216865034851,0.8888301530661763,0.8887386821089919,0.888647224013594,0.8885558283236602,0.8884644454617148,0.8883731249307143,0.8882818171939858,0.8881905717138233,0.8880993389942986,0.888008168457101,0.8879170106469885,0.8878259149451041,0.8877348319368334,0.8876438109628314,0.8875528026490523,0.8874618562957219,0.8873709225693049,0.8872800507296548,0.8871891914836892,0.8870983940509475,0.8870076091787413,0.886916886046354,0.886826175441434,0.8867355265030653,0.8866448900591754,0.8865543152087065,0.8864637528198078,0.8863732519513374,0.8862827635116073,0.886192336519449,0.886101921923281,0.886011568701965,0.8859212278439679,0.8858309482882387,0.885740681063236,0.8856504750680528,0.8855602813710822,0.885470148831618,0.8853800285579309,0.8852899693695719,0.8851999224146326,0.8851099120848936,0.8850199627324632,0.8849300255650597,0.8848401493031224,0.884750285194049,0.8846604819187334,0.8845706907641956,0.8844809603718404,0.8843912420682546,0.8843015844554093,0.8842119388994013,0.884122353962825,0.8840327810512306,0.8839432686878909,0.8838537683177544,0.883764328424828,0.8836749004934022,0.8835855329682736,0.883496177373019,0.8834068821132802,0.8833175987518646,0.8832283756553145,0.8831391644256122,0.883050013390256,0.8829608741903477,0.8828717951143964,0.8827827278425683,0.8826937206244383,0.8826047251791815,0.8825157897174939,0.8824268659975043,0.8823380021910842,0.8822491500952615,0.8821603578431377,0.8820715772705854,0.8819828564719902,0.8818941473220141,0.8818054978763821,0.8817168600484907,0.8816282818554589,0.8815397152493627,0.8814512082087691,0.8813627127243798,0.8812742527681863,0.8811858522736941,0.8810974632894447,0.881009133697858,0.8809208155859657,0.8808325567978241,0.8807443094589011,0.8806561213749435,0.8805679447098012,0.8804798272309649,0.8803917211406129,0.8803036741680337,0.8802156385536799,0.8801276619886907,0.8800396967517402,0.8799517904958718,0.8798638955379268,0.879776059492906,0.8796882347157648,0.879600468783515,0.8795127140891722,0.879425018171812,0.8793373334624572,0.8792497074623001,0.8791620926403186,0.8790745364598732,0.8789869914278438,0.8788995049698125,0.878812029630508,0.8787246127977871,0.878637207054174,0.8785498597498528,0.8784625235050902,0.8783752456324503,0.8782879787898901,0.8782007702524052,0.878113572715591,0.8780264334169264,0.877939305089593,0.8778522349336055,0.8777651757196787,0.8776781746104153,0.8775911844140115,0.8775042286951426,0.8774173309811348,0.8773304441363126,0.8772436152299712,0.8771567971637858,0.877070036969821,0.8769832875870514,0.876896596010362,0.8768099152159753,0.8767232921616479,0.8766366798607989,0.8765501252341078,0.8764635813321386,0.8763770950385448,0.8762906194409842,0.8762042013861355,0.8761177939986985,0.8760314440884283,0.8759451048170162,0.8758588229573437,0.8757725517080424,0.8756863378051719,0.8756001344842527,0.8755139884445728,0.8754278529584911,0.8753417746885749,0.8752557069439704,0.8751696963505742,0.8750836962542695,0.8749977532443333,0.8749118207033343,0.8748259451839802,0.8747400801054757,0.8746542719840082,0.8745684742753682,0.8744827334592742,0.8743970030280508,0.8743113294249975,0.8742256661789242,0.8741400596967601,0.8740544635437505,0.8739689240905048,0.873883394938653,0.8737978992575051,0.8737124601801138,0.8736270313625956,0.873541659084975,0.8734562970396286,0.8733709914704352,0.8732856961059821,0.8732004571540507,0.87311522837939,0.8730300559537341,0.8729448936779427,0.8728597876877521,0.8727746918200845,0.8726896521747264,0.8726046226246137,0.8725196492336322,0.8724346859106816,0.8723497786837965,0.8722648814977914,0.8721800403448983,0.8720952092057975,0.872010434036967,0.8719256688549043,0.8718409595803819,0.8717562602656658,0.8716716167958712,0.8715869832589841,0.8715024055045112,0.8714178376561093,0.8713333255277249,0.8712488232786377,0.8711643766872821,0.8710799399485118,0.8709955588052978,0.8709111874880193,0.8708268717042311,0.870742565719791,0.8706583152068856,0.870574074466802,0.8704898891364068,0.8704057135523688,0.8703215933162828,0.8702374828001505,0.8701534047893746,0.8700693820341456,0.8699853689593785,0.8699014110786932,0.8698174628522195,0.8697335697584713,0.8696496862927448,0.8695658578984955,0.8694820391061389,0.8693982753241192,0.8693145211179233,0.8692308218610314,0.8691471321539553,0.8690634973352577,0.8689798720404275,0.8688963015731574,0.8688127406038665,0.8687292344014245,0.8686457376711328,0.8685622956470853,0.8684788630694192,0.8683954851374988,0.8683121166262504,0.8682288027003551,0.8681454981694818,0.8680622481636752,0.8679790075272994,0.8678958213558092,0.867812644528218,0.8677295221054367,0.8676464090010814,0.8675633502415655,0.8674803007750608,0.8673973055935297,0.867314319679654,0.867231387990991,0.8671484655446854,0.8670655972639356,0.8669827382003044,0.866899933242676,0.8668171374769845,0.8667343957578473,0.8666516632055233,0.8665689622324966,0.8664863152170411,0.86640367733082,0.86632109334298,0.8662385184593949,0.8661559974151036,0.8660734854501452,0.8659910272654958,0.8659085781353144,0.8658261827265601,0.8657437963474658,0.8656614636310189,0.8655791399194807,0.8654968698119127,0.8654146086845587,0.865332401102599,0.8652502024762156,0.8651680573367522,0.8650859211282835,0.8650038383483621,0.8649217644749102,0.8648397439717337,0.8647577323505575,0.8646757740414857,0.8645938245900012,0.8645119283925506,0.8644300410283301,0.8643482068601734,0.8642663815009451,0.864184609279911,0.8641028458435589,0.864021135487631,0.8639394338921945,0.8638577853195117,0.8637761454831849,0.863694558612041,0.8636129804531724,0.8635314552020152,0.8634499386391075,0.8633684749265388,0.8632870198782487,0.8632055955609742,0.863124224008161,0.8630428610837707,0.8629615508667159,0.8628802492542491,0.8627990002920897,0.8627177599107383,0.8626365721227642,0.8625553928918718,0.8624742661975244,0.8623931480365864,0.8623120823554589,0.862231025184122,0.8621500204359581,0.8620690241740202,0.8619880802787149,0.8619071448461243,0.8618262617237227,0.8617453870405777,0.8616645646112747,0.861583750597824,0.8615029887819647,0.861422235358606,0.8613415340766841,0.8612608411639643,0.8611802003366229,0.8610995678552379,0.8610189874032682,0.8609384152740619,0.8608578951184039,0.8607773832623685,0.8606969233241094,0.860616471662385,0.8605360718627596,0.860455680316633,0.8603753405770237,0.860295009067929,0.8602147293098642,0.8601344577593824,0.860054237904537,0.8599740262343949,0.8598938662045904,0.8598137143366609,0.8597335923446323,0.8596535219101652,0.859573459603426,0.859493448799184,0.8594134460999702,0.8593334948482825,0.8592535516789747,0.8591736599023153,0.8590937761854387,0.8590139438064257,0.858934119464649,0.8588543464060441,0.8587745813621802,0.8586948675468885,0.8586151617238931,0.8585355070749626,0.8584558603959346,0.8583762648365568,0.8582966772247375,0.8582171406782453,0.858137612057018,0.8580581344468869,0.8579786647397776,0.8578992459896244,0.8578198351202999,0.8577404751538832,0.8576611230461515,0.8575818217873705,0.8575025283651811,0.8574232857380759,0.8573440509255182,0.8572648668542691,0.8571856905755731,0.8571065649845006,0.8570274471640357,0.8569483799775997,0.8568693205398754,0.8567903116826749,0.8567113105523397,0.8566323599491132,0.8565534170509542,0.8564745246265788,0.8563956398855218,0.8563167841988418,0.8562379789061215,0.8561591812641862,0.8560804339631086,0.8560016942911886,0.8559230049071133,0.8558443231306166,0.8557656915890404,0.855687067633512,0.8556084938600683,0.8555299276511904,0.8554514115716494,0.8553729030352398,0.8552944445755081,0.855215993637521,0.8551375927236404,0.8550591993101658,0.8549808558683144,0.8549025199055779,0.8548242338620683,0.8547459552764299,0.8546677265577102,0.8545895052756655,0.8545113338083179,0.8544331697564965,0.8543550554672377,0.8542769485724033,0.854198891388084,0.8541208415771344,0.8540428414247386,0.8539648486247048,0.85388690543135,0.8538089695693963,0.8537310832623333,0.8536532042657569,0.8535753747723683,0.8534975525685988,0.8534197798164006,0.853342014333,0.8532642982496396,0.8531865894143017,0.8531089299275583,0.8530312776681084,0.852953653673407,0.8528760789502879,0.852798511423454,0.8527209931169693,0.8526434819861561,0.8525660200245437,0.852488565218035,0.8524111595296633,0.8523337609758725,0.8522564114892398,0.8521790691167108,0.852101775760445,0.8520244894978511,0.8519472522007094,0.8518700219768536,0.8517928406677223,0.8517156664115361,0.8516385410194306,0.8515614226599741,0.8514843531140384,0.8514072905805006,0.8513302768100063,0.8512532700317037,0.8511763119660508,0.8510993608724283,0.8510224584411442,0.8509455629617736,0.8508687160945131,0.8507918761590937,0.8507150847856386,0.8506383003239963,0.850561564374255,0.8504848353163428,0.85040815472035,0.8503314809962467,0.8502548556841635,0.850178237224074,0.8501016671261872,0.8500251038604424,0.8499485889071642,0.84987208076622,0.8497956208880879,0.8497191678025255,0.8496427422223869,0.8495663648307273,0.8494899942020717,0.8494136717124431,0.849337355966163,0.849261088309539,0.8491848273766514,0.8491086144841292,0.8490324082957743,0.8489562500985752,0.8488800985860173,0.8488039950154855,0.8487278981101121,0.848651849097715,0.8485758067310359,0.8484998122083637,0.8484238243120122,0.8483478842107773,0.8482719507165087,0.8481960649685463,0.8481201858082376,0.8480443543455041,0.8479685294511546,0.8478927522057286,0.8478169815094592,0.8477412584135401,0.8476655418475924,0.8475898728335011,0.8475142103302379,0.8474385953304161,0.8473629868223213,0.8472874257693306,0.8472118711890078,0.8471363640155307,0.847060863295704,0.8469854099345427,0.8469099630080558,0.8468345633921323,0.8467591701919486,0.846683824254304,0.8466084847135061,0.8465331923873008,0.8464579064390907,0.8463826472657893,0.8463074352353016,0.8462322295546083,0.8461570709689756,0.8460819187143885,0.8460068135071857,0.8459317146123209,0.8458566627172408,0.8457816171158321,0.8457066184666855,0.8456316260925841,0.8455566806232987,0.8454817414104733,0.8454068490550941,0.8453319629376301,0.8452571236303188,0.8451822905424187,0.8451075042174535,0.8450327240934355,0.8449579906852112,0.8448832634595101,0.8448085829025369,0.8447339085097039,0.8446592807386081,0.8445846591133089,0.8445100840628323,0.8444355151398488,0.8443609927448483,0.8442864764590772,0.8442120066545243,0.8441375429409772,0.8440631256619588,0.8439887144557617,0.8439143496374785,0.843839990873872,0.843765678451639,0.8436913720659774,0.8436171119752234,0.8435428579029751,0.8434686500792428,0.8433944482559894,0.8433202725366484,0.8432461429963715,0.8431720194296061,0.843097941995698,0.8430238705173726,0.8429498451257719,0.8428758256718634,0.8428018522586203,0.8427278847652185,0.842653963266496,0.8425800476698021,0.8425061780218749,0.8424323142582025,0.8423584963974569,0.842284684403231,0.8422109182661649,0.8421371579779218,0.8420634435011441,0.8419897348555312,0.8419160719757622,0.8418424149095373,0.8417688035636077,0.8416951980136399,0.8416216381384906,0.841548084041759,0.8414745755744413,0.8414010728680349,0.8413276157457101,0.8412541643668281,0.8411807585267669,0.841107358412718,0.8410340037923005,0.8409606548805025,0.8408873514172186,0.8408140536451985,0.8407408012766461,0.8406675545820399,0.8405943532459261,0.8405211575664783,0.8404480072006189,0.8403748624741818,0.8403017630165005,0.8402286691810353,0.8401556007712693,0.840082577563139,0.8400095599514842,0.8399365874968086,0.8398636206214951,0.8397906988585746,0.8397177826579396,0.8396449115251818,0.8395720459376698,0.8394992253735891,0.8394264103377509,0.8393536402809685,0.8392808757354618,0.8392081561247048,0.8391354420082936,0.8390627727823956,0.8389901090339498,0.8389174901318504,0.8388448766903456,0.8387723080510896,0.8386997448556073,0.8386272264183452,0.8385547134080719,0.8384822451120595,0.8384097822262869,0.8383373640108849,0.8382649511890097,0.8381925829936833,0.8381202201752065,0.8380479019395255,0.8379755890640529,0.8379033207276912,0.8378310577349326,0.8377588392376685,0.8376866260674373,0.8376144573491526,0.8375422939413663,0.8374701749420463,0.8373980612367256,0.8373259918964591,0.837253927833728,0.8371819080927067,0.8371098936127923,0.8370379039052595,0.836965958454543,0.8368940182403557,0.8368221222398093,0.8367502314594515,0.8366783848496258,0.8366065434436829,0.8365347461652307,0.8364629540743905,0.8363912060680665,0.8363194632331182,0.8362477644397786,0.8361760708016134,0.8361044211622155,0.8360327766618253,0.835961176117428,0.8358895806959061,0.8358180291876692,0.8357464827862098,0.8356749802553933,0.835603482815291,0.8355320292032559,0.8354605806659055,0.8353891759141127,0.8353177762210097,0.8352464202710204,0.8351750693637598,0.8351037621572347,0.8350324599775114,0.834961201456211,0.8348899479458194,0.8348187380516033,0.8347475331524372,0.8346763718272644,0.8346052154813163,0.8345341026672448,0.8344629948166059,0.8343919304557924,0.8343208710426533,0.8342498550773524,0.8341788440440014,0.8341078764165666,0.8340369137053905,0.8339659751369979,0.8338950799117565,0.8338241895792986,0.8337533425482311,0.8336825003943391,0.8336117015001407,0.8335409074675434,0.8334701566530073,0.8333994106845302,0.8333287078925459,0.8332580099311121,0.8331873551046666,0.8331167050932957,0.8330460981754721,0.8329754960572804,0.8329049369912586,0.8328343827094584,0.8327638714385145,0.8326933649364148,0.8326229014039207,0.8325524426249258,0.8324820267743493,0.8324116156619598,0.8323412474368646,0.832270883934676,0.8322005632787207,0.8321302473304245,0.8320599741873631,0.8319897057367454,0.8319194800504268,0.8318492590413684,0.8317790807557365,0.8317089071322137,0.8316387761913063,0.8315686498973892,0.831498566245339,0.8314284872251921,0.8313584508062261,0.8312884190041078,0.8312184297625461,0.831148445122809,0.8310785030030664,0.8310085654701566,0.8309386514730448,0.8308687799351975,0.8307989129617536,0.8307290884071656,0.8306592684020686,0.8305894907754812,0.8305197176835034,0.8304499869297498,0.830380260695756,0.8303105767597625,0.8302408973287102,0.8301712601554954,0.8301016274724344,0.8300320370071087,0.8299624510171809,0.8298929072049475,0.8298233678533866,0.8297538706395395,0.8296843778716712,0.8296149272015969,0.8295454809628381,0.8294760767820138,0.8294066770178731,0.8293373192718676,0.829267965927944,0.8291986545624174,0.8291293475844016,0.829060082545104,0.828990821878777,0.8289216031115495,0.8288523887027831,0.8287832161535574,0.8287140479483134,0.8286449215631111,0.8285757995074419,0.8285067192323746,0.8284376432724222,0.8283686090536916,0.8282995791356876,0.828230590919585,0.828161606989851,0.8280926647227564,0.8280237267277031,0.8279548116830311,0.8278859382422143,0.8278170690520023,0.8277482414265319,0.8276794180374135,0.8276106361739815,0.8275418585326786,0.8274731223780657,0.8274043904313887,0.8273356999324638,0.8272670136273116,0.8271983687310323,0.8271297280143913,0.8270611286678025,0.826992533486748,0.8269239796369827,0.8268554299386771,0.8267869215329561,0.8267184172646493,0.8266499542502805,0.8265814953593101,0.8265130776836888,0.8264446641174795,0.826376291728088,0.8263079234341512,0.8262395962785586,0.8261712732044927,0.826102991230355,0.8260347133238449,0.8259664764789045,0.8258982436877217,0.8258300519198073,0.8257618641918091,0.8256937174488354,0.8256255747319657,0.8255574729619335,0.8254893752042219,0.8254213183552175,0.8253532655047792,0.8252852535249747,0.8252172455300102,0.8251492599464204,0.8250813151764584,0.8250133743708001,0.8249454743408379,0.8248775782615244,0.8248097229200319,0.824741871515562,0.8246740608110938,0.8246062540300508,0.8245384879112467,0.8244707257022981,0.8244030041178815,0.8243352864297792,0.8242676093285584,0.8241999361101385,0.8241323034410053,0.8240646746411882,0.8239970863531183,0.8239295019209076,0.8238619579629608,0.8237944178474441,0.8237269181687632,0.8236594223191114,0.8235919668689226,0.8235245152343896,0.8234571039620024,0.823389696491926,0.8233223293467327,0.8232549659905324,0.8231876429220084,0.823120323629187,0.8230530445868899,0.8229857693070327,0.8229185342406028,0.8228513029233777,0.8227841117825374,0.8227169243776943,0.8226497771122481,0.8225826335696188,0.8225155301294529,0.8224484303989512,0.8223813707340341,0.8223143147656553,0.8222472806625736,0.8221802865698574,0.8221132961540412,0.8220463457118471,0.8219793989334951,0.821912492092076,0.821845588901468,0.8217787256111575,0.8217118659586543,0.8216450461698672,0.8215782300059105,0.8215114536691417,0.8214446809442533,0.8213779480100786,0.821311218674861,0.8212445290939363,0.821177843099072,0.8211111968221334,0.8210445541183852,0.8209779510962485,0.8209113516344588,0.8208447918180198,0.8207782355491109,0.8207117188893448,0.8206452057643184,0.8205787322122802,0.8205122621822174,0.8204458316890408,0.8203794047051021,0.8203130172220002,0.8202466332354248,0.8201802887136899,0.820113947675796,0.8200476460667986,0.8199813479289833,0.8199150891841728,0.8198488338979115,0.8197826179688157,0.8197164054856623,0.8196502323238875,0.8195840625954737,0.819517932152704,0.8194518051307402,0.8193856994468076,0.8193196329950118,0.8192535699452369,0.819187546091994,0.8191215256282813,0.8190555443255476,0.8189895663998792,0.8189236275996881,0.8188576921641231,0.8187917958185857,0.8187259028252607,0.8186600488865647,0.818594198287693,0.8185283867081032,0.818462578455975,0.8183968091878331,0.8183310432348152,0.8182653162305391,0.8181995925290749,0.8181339077411591,0.8180682262437686,0.8180025836247837,0.8179369442840626,0.8178713437866556,0.8178057465552759,0.8177401881321693,0.817674632962879,0.8176091165668714,0.8175436034124938,0.8174781289964593,0.8174126578098935,0.8173472253267817,0.8172817960610023,0.817216405463838,0.8171510180718946,0.8170856693137778,0.8170203237487953,0.816955016782901,0.816889712998079,0.8168244477776572,0.8167591857262703,0.8166939622046451,0.8166287418400425,0.8165635423041827,0.8164983812462183,0.8164332233273027,0.816368103851769,0.8163029875033329,0.816237909563814,0.8161728347394662,0.8161077982896212,0.8160427649430447,0.8159777699366059,0.8159127780215576,0.8158478244123311,0.8157828738826413,0.8157179616245065,0.815653052434079,0.8155881814809893,0.815523313583801,0.8154584838897826,0.8153936572398842,0.815328868759036,0.8152640833105507,0.815199335997045,0.815134591704169,0.815069885512251,0.8150051823292531,0.8149405172132401,0.8148758550944619,0.814811231008744,0.814746609908599,0.8146820268076388,0.8146174466806134,0.8145529045189451,0.8144883653195975,0.8144238640518278,0.8143593657347881,0.8142949053155952,0.8142304478355656,0.8141660282196997,0.8141016115314538,0.8140372326737366,0.8139728567321195,0.8139085185874443,0.8138441833473725,0.8137798684439442,0.813715591287165,0.8136513170177874,0.8135870804615911,0.8135228467813587,0.8134586507808875,0.8133944576449653,0.8133303021554321,0.813266149519056,0.813202034495744,0.8131379223142207,0.8130738477124836,0.8130097759411898,0.8129457417164521,0.8128817103108352,0.812817716418591,0.8127537253341683,0.8126897717299822,0.812625820922341,0.8125619075618471,0.8124979969866447,0.8124341238255471,0.8123702534385105,0.812306420432583,0.8122425901895085,0.8121787972945943,0.8121150071513477,0.8120512543233593,0.811987504235876,0.811923791430795,0.8118600813550791,0.8117964085289564,0.8117327384210814,0.8116691055300365,0.8116054753461446,0.811541882346366,0.8114782920426679,0.8114147388904128,0.8113511884231881,0.811287675074782,0.8112241644003787,0.8111606908122155,0.8110972198870497,0.8110337688228705,0.8109703547961475,0.810906943415955,0.8108435690407549,0.8107801973011356,0.8107168625340904,0.8106535303916982,0.8105902351895077,0.8105269426010647,0.8104636869204962,0.8104004338427918,0.8103372176406801,0.8102740040305711,0.8102108272638185,0.8101476530782289,0.8100845157038046,0.8100213808997258,0.8099582828746662,0.8098951874091561,0.8098321286905646,0.8097690725207486,0.809706053065795,0.8096430361488647,0.8095800559147861,0.8095170782079999,0.8094541371520991,0.8093911986127821,0.8093282966924289,0.8092653972779718,0.8092025344506019,0.8091396741184623,0.8090768503415778,0.8090140290492791,0.8089512442804477,0.8088884619855792,0.8088257161824347,0.8087629728426515,0.8087002659628933,0.8086375615359161,0.8085748935373093,0.8085122279809245,0.8084495818466574,0.8083869720933586,0.8083243647664828,0.8082617937890312,0.8081992252274964,0.8081366929838852,0.8080741631457061,0.8080116695939935,0.8079491784372494,0.8078867235355591,0.8078242710183945,0.8077618547249144,0.8076994408055381,0.8076370630785205,0.8075746877152062,0.8075123485129684,0.8074500116640541,0.8073877109449773,0.8073254125688653,0.8072631502913952,0.8072008903465515,0.8071386664691976,0.8070764449141529,0.807014259395489,0.8069520761888375,0.806889928987501,0.8068277840879006,0.8067656751625926,0.806703568528765,0.80664149783825,0.8065794294289808,0.8065173969320869,0.8064553667062244,0.8063933723618432,0.8063313802782993,0.806269424045385,0.8062074700631349,0.8061455519007055,0.8060836359787868,0.8060217558459227,0.8059598779434367,0.8058980357992811,0.8058361958753912,0.8057743749280759,0.805712589693083,0.805650806663224,0.8055890593150693,0.8055273141619864,0.805465604660032,0.8054038973431078,0.8053422256467784,0.8052805561254572,0.8052189221942391,0.8051572904280275,0.8050956942214693,0.8050341001699359,0.804972541647648,0.8049109852704232,0.8048494643920777,0.8047879456488534,0.8047264623741842,0.8046649812247141,0.8046035355135164,0.8045420919176155,0.804480683729746,0.8044192776472909,0.8043579069426675,0.8042965383335958,0.8042352050721975,0.8041738738965079,0.8041125780383748,0.8040512842561269,0.8039900257613599,0.8039287693326744,0.8038675481614354,0.8038063290464936,0.8037451451590047,0.8036839633180485,0.8036228166745929,0.8035616720679245,0.8035005626288455,0.8034394552168278,0.803378382942529,0.8033173126855849,0.8032562775365301,0.8031952443951429,0.8031342297992464,0.8030732502665687,0.8030122727270635,0.8029513302210493,0.8028903896985683,0.8028294841798909,0.802768580635127,0.8027077120645195,0.8026468454582248,0.8025860137964799,0.8025251840894664,0.802464389297436,0.8024035964505748,0.8023428384891704,0.8022820824633917,0.8022213612935841,0.8021606420498772,0.8020999576326958,0.8020392751321096,0.8019786274286429,0.8019179816322847,0.80185737060368,0.801796761472716,0.8017361870801795,0.8016756145758346,0.8016150767806308,0.8015545408641884,0.8014940396276407,0.8014335402604427,0.8013730755439323,0.8013126126873789,0.8012521844523458,0.8011917580678953,0.8011313662758375,0.8010709763250065,0.8010106209374797,0.8009502673818427,0.8008899483604608,0.8008296311616501,0.8007693484680848,0.8007090675877904,0.800648821183771,0.8005885765837408,0.800528350111972,0.8004681580730933,0.8004079678243156,0.8003478119795552,0.8002876579156597,0.8002275382269479,0.8001674203098836,0.8001073367392076,0.80004725493098,0.799987207440385,0.7999271617030568,0.7998671502546437,0.7998071405503347,0.7997471651062621,0.799687191397149,0.7996272519196319,0.7995673141679478,0.7995074106192581,0.7994475087872925,0.7993876411297582,0.7993277751798576,0.7992679433758637,0.7992081132704306,0.7991483172824178,0.7990885229839112,0.7990287627743764,0.7989690042453113,0.7989092797768079,0.7988495569797551,0.7987898682148924,0.798730181112479,0.7986705280139218,0.7986108765688307,0.7985512590992997,0.7984916432742692,0.798432061396541,0.7983724811543654,0.7983129348312717,0.7982533901348005,0.7981938793292288,0.7981343701413668,0.7980748948162598,0.7980154210999674,0.7979559651079882,0.7978965429366155,0.7978371223607471,0.7977777355774345,0.7977183503807749,0.797658998948658,0.7975996490943601,0.797540332976629,0.7974810184279004,0.7974217375878001,0.7973624583079034,0.7973032127087335,0.7972439686609855,0.7971847582661001,0.7971255494138723,0.7970663741866801,0.7970072004933981,0.7969480603973621,0.7968889218265064,0.7968298168251432,0.7967707133402477,0.796711643397129,0.7966525749617821,0.7965935400405328,0.7965345066183768,0.7964755066826761,0.7964165082374072,0.7963575432509876,0.7962985797463557,0.796239649673004,0.7961807210728126,0.7961218258763689,0.796062932144475,0.7960040717888329,0.7959452128891469,0.7958863873382535,0.7958275632347392,0.7957687724525946,0.7957099831092694,0.7956512270599271,0.795592472440861,0.7955337510884273,0.7954750311577438,0.7954163285601623,0.7953576591882532,0.7952989912253358,0.7952403564608306,0.7951817230968329,0.7951231229040231,0.7950645241032528,0.7950059584464825,0.7949473941733003,0.7948888630169659,0.7948303332357852,0.7947718365443357,0.7947133412196218,0.7946548789575585,0.7945964180538292,0.7945379901857056,0.7944795636675307,0.7944211701579523,0.7943627779899541,0.7943044188035787,0.7942460609504308,0.7941877360519678,0.7941294124783963,0.794071121832607,0.7940128325033897,0.7939545760750869,0.7938963209550531,0.7938380987091017,0.7937798777631321,0.7937216896644483,0.7936635028574756,0.7936053331091775,0.7935472119252657,0.7934890762588399,0.7934309576248629,0.793372856014604,0.7933148028968973,0.7932567352986925,0.7931986846980563,0.7931406510862836,0.7930826658954068,0.7930246662260744,0.7929666835195323,0.792908717767101,0.7928507689601068,0.7927928684846843,0.7927349535333966,0.7926770555015681,0.7926191743805507,0.7925613415198464,0.7925034941853779,0.7924456637358186,0.7923878501625453,0.7923300847785022,0.7922723049228221,0.7922145419176015,0.7921567957542429,0.7920990977092062,0.7920413851946857,0.7919836894962755,0.791926010605403,0.7918683797621191,0.7918107344515298,0.7917531059228018,0.7916954941673869,0.7916379303890015,0.7915803521455147,0.7915227906497392,0.791465245893152,0.7914077490432082,0.7913502377303924,0.7912927431312373,0.7912352652372449,0.7911778351796823,0.791120390661502,0.7910629628230308,0.7910055516557953,0.7909481882549486,0.7908908103957633,0.7908334491824339,0.7907761046065113,0.7907188077271081,0.7906614963916703,0.7906042016683332,0.7905469235486724,0.7904896620242692,0.7904324481092863,0.7903752197411833,0.7903180079431236,0.7902608127067128,0.7902036650102366,0.7901465028629998,0.7900893572522701,0.7900322281696777,0.7899751465577041,0.7899180504973534,0.7898609709400708,0.7898039078775106,0.7897468922164225,0.7896898621093649,0.789632848472033,0.7895758512961049,0.7895189014526708,0.7894619371656988,0.789404989315206,0.7893480578928947,0.7892911737342675,0.7892342751345575,0.7891773929381761,0.7891205271368499,0.7890637085305645,0.7890068754856755,0.7889500588110603,0.7888932584984687,0.7888365053124421,0.7887797376903145,0.7887229864055004,0.7886662514497738,0.7886095635523025,0.7885528612212562,0.788496175194658,0.7884395054643056,0.7883828827240648,0.7883262455527977,0.788269624653208,0.7882130200171168,0.7881564623031583,0.7880998901607458,0.788043334257334,0.7879867945847667,0.7879302711348946,0.7878737945224109,0.7878173034847209,0.7877608286453157,0.7877043699960691,0.7876479581166017,0.7875915318145517,0.7875351216783197,0.787478727699803,0.7874223804236199,0.7873660187274999,0.7873096731648246,0.7872533437275137,0.7871970609252534,0.7871407637057253,0.7870844825873601,0.7870282175621013,0.7869719991047728,0.786915766232867,0.7868595494299353,0.786803348687944,0.786747194446924,0.7866910257940396,0.7866348731780325,0.7865787365908912,0.7865226464379236,0.7864665418758269,0.7864104533186016,0.7863543807582593,0.7862983545654537,0.7862423139662761,0.7861862893400551,0.7861302806788255,0.7860743183186559,0.7860183415548929,0.7859623807322629,0.7859064358428233,0.7858505371881263,0.7857946241326361,0.7857387269865459,0.7856828457419354,0.7856269803908899,0.7855711611919122,0.7855153275956717,0.7854595098692903,0.785403708004876,0.7853479522265694,0.7852921820538484,0.7852364277194559,0.785180689215522,0.7851249967318935,0.7850692898567204,0.7850135987884342,0.7849579235191876,0.7849022942046018,0.7848466505013616,0.7847910225736563,0.7847354104136604,0.7846798441428375,0.7846242634862716,0.7845686985739769,0.7845131493981505,0.7844576460461653,0.7844021283113695,0.7843466262896697,0.784291139973285,0.7842356994155659,0.7841802444779887,0.7841248052224209,0.7840693816411032,0.7840140037534303,0.7839586114888728,0.7839032348753253,0.7838478739050507,0.7837925585635553,0.7837372288481688,0.7836819147528805,0.7836266162699754,0.7835713633511379,0.783516096061423,0.7834608443609821,0.7834056082421212,0.7833503876971525,0.7832952126355759,0.7832400232069177,0.7831848493291236,0.7831296909945271,0.7830745780789565,0.7830194507993631,0.7829643390400042,0.7829092427932348,0.7828541919012777,0.7827991266483765,0.782744076885166,0.7826890426040232,0.7826340536136311,0.7825790502653931,0.7825240623763883,0.7824690899390145,0.7824141627284816,0.7823592211632209,0.7823042950268209,0.7822493843117012,0.7821945187596635,0.7821396388560351,0.7820847743509804,0.7820299252369401,0.781975121222374,0.7819203028593734,0.7818654998647444,0.7818107122309488,0.7817559696331692,0.7817012126901309,0.7816464710853466,0.7815917448112991,0.7815370635099592,0.7814823678665552,0.7814276875313719,0.781373022496913,0.7813184023720025,0.7812637679082415,0.7812091487227518,0.7811545448080578,0.7810999857399017,0.7810454123361278,0.7809908541807589,0.780936311266341,0.7808817835854248,0.7808273006724894,0.7807728034280028,0.7807183213947055,0.7806638545651687,0.7806094324409352,0.7805549959884246,0.7805005747174245,0.780446168620527,0.7803918071664019,0.7803374313872925,0.7802830707600974,0.7802287252774294,0.7801744243751496,0.7801201091511965,0.7800658090496438,0.7800115240631252,0.7799572835947568,0.7799030288080442,0.7798487891143004,0.7797945645061793,0.779740384354116,0.7796861898870557,0.7796320104836144,0.779577846136466,0.7795237261834286,0.779469591918759,0.7794154726884399,0.7793613684851658,0.7793073086142002,0.7792532344349852,0.7791991752609333,0.7791451310847595,0.7790911311792359,0.7790371169688637,0.7789831177345481,0.7789291334690243,0.7788751934126362,0.7788212390548176,0.7787672996440299,0.7787133751730282,0.7786594656345727,0.7786056002285595,0.7785517205254129,0.7784978557331268,0.7784440058444814,0.7783902000270858,0.7783363799160139,0.778282574686957,0.7782287843327154,0.7781750379886733,0.7781212773544293,0.7780675315734342,0.7780138006385083,0.7779601136528737,0.7779064123805285,0.7778527259327458,0.7777990543023655,0.7777454265605094,0.7776917845354512,0.7776381573063482,0.7775845448660597,0.7775309762536692,0.7774773933616018,0.7774238252369611,0.7773702718726259,0.7773167622757029,0.7772632384026453,0.777209729268564,0.7771562348663577,0.7771027841712181,0.7770493192035024,0.776995868946391,0.7769424333928023,0.7768890414860743,0.7768356353103452,0.7767822438169267,0.7767288669987563,0.7766755337673794,0.7766221862705932,0.7765688534279012,0.7765155352322605,0.7764622605634848,0.7764089716329079,0.7763556973282864,0.7763024376425963,0.7762491925688193,0.7761959909471893,0.7761427750682907,0.7760895737802812,0.7760363870761614,0.7759832437645706,0.7759300861993554,0.7758769431970638,0.7758238147507152,0.7757707296374149,0.7757176302741504,0.7756645454459201,0.7756114751457628,0.7755584481193099,0.7755054068465687,0.7754523800810487,0.7753993678158078,0.7753463987650635,0.7752934154717228,0.7752404466578664,0.7751874923165709,0.7751345811307006,0.775081655705941,0.7750287447330045,0.7749758482049866,0.7749229947734573,0.7748701271067618,0.7748172738643035,0.7747644350391969,0.7747116392517778,0.7746588292329307,0.7746060336108103,0.7745532523785491,0.7745005141253092,0.774447761644395,0.7743950235327715,0.7743422997835905,0.774289618954898,0.7742369239023005,0.7741842431916321,0.7741315768160637,0.7740789247687703,0.7740263155689862,0.7739736921500293,0.7739210830389041,0.7738684882288038,0.7738159362079811,0.7737633699717885,0.7737108180162331,0.7736582803345272,0.7736057853839995,0.7735532762219197,0.7735007813133566,0.773448300651541,0.773395862662937,0.773343410466613,0.773290972496759,0.773238548746624,0.7731861676118655,0.7731337722732347,0.7730813911340999,0.7730290241877286,0.7729766997990309,0.7729243612103224,0.7728720367942095,0.7728197265439772,0.7727674587938469,0.7727151768475818,0.7726629090470843,0.772610655385658,0.772558444166892,0.7725062187558821,0.7724540074638844,0.7724018102842203,0.7723496554899058,0.772297486507252,0.7722453316169274,0.7721931908122713,0.7721410923357835,0.7720889796748758,0.772036881079686,0.7719847965435714,0.7719327542785736,0.7718806978330891,0.7718286554267829,0.7717766270530304,0.7717246127052116,0.7716726405573746,0.7716206542339874,0.7715686819167037,0.7715167235989212,0.771464807424359,0.7714128770782109,0.7713609607117876,0.771309058318504,0.7712571980118074,0.7712053235375034,0.7711534630166159,0.771101616442578,0.7710498118986211,0.7709979931910491,0.7709461884106561,0.7708943975508931,0.7708426486648324,0.7707908856191625,0.7707391364745049,0.7706874012243273,0.7706357078916012,0.770584000403285,0.770532306789884,0.7704806270448842,0.7704289891612107,0.7703773371259801,0.7703256989396376,0.7702740745956869,0.7702224920570641,0.7701708953709299,0.7701193125077269,0.7700677434609758,0.7700162161636798,0.7699646747229317,0.769913147079227,0.7698616332261037,0.7698101610666884,0.7697586747678932,0.769707202240323,0.7696557434775327,0.7696042984730823,0.7695528950928293,0.7695014775783057,0.7694500738028298,0.7693986837599784,0.7693473352858581,0.7692959726815685,0.7692446237906632,0.7691932886067355,0.7691419949361966,0.7690906871396029,0.7690393930307982,0.7689881126033932,0.7689368736341579,0.7688856205429954,0.7688343811140945,0.7687831553410833,0.7687319709711464,0.7686807724834224,0.7686295876325008,0.7685784164120267,0.7685272865396547,0.768476142553648,0.7684250121790525,0.7683738954095297,0.7683228199332595,0.7682717303475196,0.7682206543478667,0.7681695919279797,0.7681185707466177,0.7680675354599634,0.7680165137341396,0.7679655055628419,0.7679145385754631,0.7678635574869822,0.767812589934142,0.7677616359106549,0.7677107230166028,0.7676597960256504,0.7676088825452158,0.7675579825690282,0.7675070960908202,0.7674562506741105,0.7674053911657703,0.7673545451366371,0.7673037125804608,0.7672529210315704,0.7672021153952788,0.7671513232132207,0.7671005444791625,0.7670498066982983,0.7669990548342742,0.7669483163995764,0.7668975913879874,0.7668469072756204,0.7667962090843464,0.7667455242975575,0.766694852909052,0.766644222365916,0.7665935777481382,0.766542946510069,0.7664923286455241,0.7664417515726151,0.7663911604293409,0.7663405826410647,0.7662900182016186,0.7662394945001938,0.7661889567326918,0.7661384322955428,0.7660879211825945,0.7660374507541712,0.7659869662639708,0.7659364950795426,0.7658860371947509,0.7658356199411059,0.7657851886299952,0.7657347706001411,0.7656843658454234,0.7656340016685924,0.7655836234386182,0.7655332584654491,0.7654829067429814,0.765432595545257,0.7653822702987235,0.7653319582846081,0.7652816594968229,0.7652313739292846,0.7651811288202235,0.7651308696677868,0.7650806237173732,0.7650303909629153,0.7649801986140541,0.7649299922261765,0.7648797990160789,0.7648296189777096,0.7647794792921726,0.7647293255719896,0.7646791850054067,0.7646290575863882,0.7645789704675537,0.7645288693184543,0.7644787812988386,0.7644287064026866,0.7643786717541856,0.7643286230798118,0.7642785875108684,0.7642285650413513,0.7641785827670673,0.7641285864713134,0.7640786032569994,0.7640286331181368,0.7639787031222046,0.7639287591092159,0.7638788281537394,0.7638289102498025,0.7637790324366069,0.7637291406107793,0.7636792618185989,0.763629396054108,0.7635795703282843,0.7635297305942631,0.763479903870086,0.7634300901498112,0.7633803164162426,0.763330528678922,0.7632807539277047,0.763230992156664,0.7631812433598777,0.7631315344850041,0.7630818116119501,0.7630321016954092,0.7629824047294744,0.7629327476337461,0.7628830765443062,0.7628334183877773,0.7627837731582676,0.762734167747371,0.7626845483472416,0.7626349418564826,0.7625853482692175,0.7625357944490839,0.762486226644207,0.7624366717252207,0.7623871296862641,0.7623376273630695,0.7622881110596309,0.7622386076186645,0.7621891170343243,0.7621396661144882,0.7620902012189176,0.7620407491624612,0.7619913099392884,0.7619419103294733,0.7618924967484426,0.7618430959832292,0.761793708028017,0.7617443596351268,0.7616949972755505,0.7616456477085541,0.7615963109283375,0.7615470136595175,0.7614977024285504,0.7614484039669865,0.7613991182690405,0.7613498720316765,0.761300611836714,0.7612513643880379,0.7612021296798779,0.7611529343815948,0.7611037251302716,0.7610545286021778,0.7610053447915578,0.7609561736926592,0.760907041940409,0.7608578962408304,0.7608087632357428,0.7607596429194089,0.7607105618992644,0.7606614669363716,0.7606123846450463,0.7605633150195661,0.7605142846399253,0.7604652403221256,0.760416208653029,0.7603671896269278,0.7603182097964247,0.7602692160323615,0.760220234894196,0.7601712663762351,0.7601223370037391,0.760073393702291,0.7600244630039937,0.7599755449031692,0.759926665897784,0.759877772968064,0.7598288926188067,0.7597800248443484,0.7597311961154116,0.7596823534667665,0.7596335233759544,0.7595847058373255,0.7595359272944077,0.7594871348364173,0.7594383549136877,0.7593895875205844,0.7593408590734881,0.7592921167159641,0.759243386871187,0.7591946695335364,0.7591459910922961,0.7590972987452813,0.7590486188885573,0.7589999515165182,0.7589512966235619,0.758902680565167,0.7588540506068272,0.7588054331107882,0.7587568280714617,0.7587082618173384,0.758659681667944,0.7586111139585231,0.758562558683502,0.7585140421444311,0.7584655117147715,0.7584169937028153,0.7583684881030034,0.7583200211899942,0.7582715403910869,0.7582230719876704,0.7581746159741991,0.7581261985984877,0.7580777673415782,0.7580293484580026,0.7579809419422305,0.7579325740152801,0.7578841922118397,0.7578358227596336,0.7577874656531451,0.7577391470866447,0.7576908146483708,0.7576424945392879,0.7575941867538931,0.7575459174597569,0.7574976342985719,0.7574493634445908,0.7574011048923246,0.7573528847826908,0.7573046508107417,0.7572564291240652,0.7572082197171862,0.7571600487044171,0.7571118638340744,0.7570636912271286,0.7570155308781188,0.7569673827815876,0.7569192730186561,0.75687114940409,0.7568230380256539,0.756774938877904,0.7567268780154628,0.7566788033061471,0.7566307408112107,0.7565826905252239,0.7565346784763568,0.7564866525853835,0.7564386388870941,0.7563906373760724,0.756342674054084,0.7562946968947656,0.7562467319064905,0.7561987790838565,0.7561508644022709,0.7561029358881394,0.7560550195234657,0.756007115302861,0.7559592491754216,0.7559113692202283,0.7558635013929618,0.755815645688247,0.7557678280289153,0.7557199965466296,0.7556721771707942,0.7556243698960478,0.7555766006190029,0.755528817523812,0.7554810465136491,0.7554332875831663,0.7553855666028048,0.7553378318091125,0.7552901090790802,0.7552423984073734,0.7551947256383075,0.7551470390607338,0.7550993645255059,0.7550517020273029,0.7550040773843604,0.754956438937741,0.7549088125122069,0.7548611981024507,0.754813595703168,0.7547660311000592,0.7547184526993228,0.7546708862931706,0.7546233318763121,0.7545758152084711,0.7545282847478497,0.7544807662606726,0.7544332597416624,0.7543857909246126,0.7543383083196372,0.7542908376670192,0.7542433789614945,0.7541959579109716,0.7541485230773857,0.7541011001751232,0.7540536891989331,0.754006315830885,0.7539589286846434,0.7539115534487443,0.7538641901179496,0.7538168643485351,0.7537695248058041,0.7537221971524869,0.7536748813833593,0.7536276031289477,0.7535803111061036,0.7535330309517976,0.753485762660818,0.7534385318379886,0.7533912872516176,0.7533440545129613,0.7532968336168208,0.7532496501423616,0.753202452909259,0.7531552675030996,0.7531080939186976,0.7530609577096052,0.7530138077467745,0.7529666695901676,0.7529195432346116,0.7528724286749374,0.7528253514327427,0.7527782604429512,0.7527311812335559,0.7526841137994008,0.7526370836365707,0.7525900397310644,0.7525430075853515,0.7524959871942885,0.7524490040284919,0.752402007124947,0.7523550219606436,0.7523080485304513,0.7522611122795634,0.7522141622958611,0.7521672240309001,0.7521202974795625,0.7520734080616625,0.7520265049158892,0.7519796134684079,0.7519327337141135,0.7518858910474852,0.7518390346579312,0.7517921899462708,0.7517453569074118,0.7516985609105425,0.7516517511957018,0.7516049531384073,0.751558166733579,0.7515114173251587,0.7514646542037279,0.7514179027195461,0.7513711628675465,0.7513244599664678,0.7512777433573459,0.7512310383652264,0.751184344985055,0.7511376885104117,0.751091018332699,0.7510443597517925,0.7509977127626504,0.7509511026337374,0.7509044788067349,0.7508578665563929,0.7508112658776814,0.7507646767655746,0.7507181244572033,0.7506715584569769,0.7506250040082976,0.7505784611061516,0.7505319549626526,0.7504854351322926,0.7504389268334459,0.750392430061111,0.7503459700024278,0.750299496261884,0.750253034032869,0.7502065833103939,0.750160169256668,0.750113741526088,0.7500673252871021,0.7500209205347335,0.7499745524063038,0.7499281706060329,0.7498818002774705,0.7498354414156522,0.7497891191330547,0.7497427831836351,0.7496964586860874,0.7496501456354594,0.7496038691194267,0.7495575789415966,0.7495113001958507,0.7494650328772494,0.7494188020487094,0.7493725575634025,0.7493263244904413,0.7492801028248981,0.7492339176049736,0.7491877187333191,0.7491415312543201,0.7490953551630611,0.7490492154730696,0.7490030621363905,0.7489569201727254,0.7489107895771708,0.7488646703448264,0.7488185874584367,0.7487724909316706,0.7487264057534341,0.7486803319188385,0.7486342943860507,0.748588243217942,0.7485422033788299,0.7484961748638376,0.7484501826065965,0.7484041767190958,0.7483581821411065,0.7483121988677641,0.7482662518082064,0.748220291123456,0.7481743417287796,0.7481284036193251,0.7480825016797784,0.7480365861201116,0.7479906818311294,0.7479447888079912,0.7478989319109741,0.7478530613989147,0.747807202138198,0.7477613541239952,0.7477155421922159,0.7476697166504777,0.7476239023407877,0.7475780992583287,0.7475323322146846,0.7474865515661707,0.7474407821304575,0.74739502390274,0.7473493016703178,0.7473035658381196,0.7472578411995223,0.747212127749732,0.7471664502518058,0.7471207591592035,0.7470750792410487,0.7470294104925591,0.7469837776525912,0.746938131223052,0.7468924959488535,0.7468468718252258,0.7468012588474016,0.7467556817240428,0.7467100910175017,0.7466645114424831,0.7466189429942315,0.7465734103573004,0.7465278641423037,0.7464823290398275,0.7464368050451282,0.7463913168186921,0.7463458150193122,0.7463003243134974,0.7462548446965154,0.7462094008048268,0.7461639433453213,0.7461184969604715,0.7460730616455568,0.7460276620130523,0.7459822488178629,0.7459368466784662,0.7458914555901525,0.7458461001414529,0.7458007311352056,0.7457553731659332,0.7457100262289379,0.7456647148888472,0.7456193899963508,0.7455740761220575,0.7455287732612809,0.7454835059547857,0.7454382251010319,0.7453929552467546,0.7453476963872796,0.7453024730395488,0.7452572361497106,0.745212010240669,0.7451667953077598,0.7451216158441434,0.7450764228435764,0.7450312408051704,0.7449860697242727,0.7449409095962337,0.7448957848845424,0.7448506466423533,0.7448055193390934,0.7447604029701246,0.7447153219752443,0.7446702274550333,0.7446251438552176,0.7445800711711702,0.7445350338190372,0.7444899829467456,0.74444494297636,0.7443999139032644,0.7443549201199943,0.7443099128217421,0.7442649164069515,0.7442199308710173,0.7441749805829039,0.7441300167849899,0.7440850638521371,0.7440401217797523,0.7439952149132677,0.7439502945421682,0.7439053850177746,0.7438604863355044,0.7438156228172981,0.7437707457996672,0.743725879610431,0.7436810242450177,0.743636204001916,0.7435913702645847,0.7435465473373806,0.7435017352157434,0.743456958174749,0.7434121676447243,0.7433673879066036,0.7433226189558375,0.7432778850441291,0.7432331376485936,0.743188401026783,0.7431436751741585,0.7430989600861844,0.7430542799854016,0.7430095864073029,0.7429649035802655,0.7429202314997645,0.7428755943650566,0.7428309437582458,0.7427863038844151,0.7427416747390508,0.7426970804981635,0.742652472790391,0.7426078757975609,0.7425632895151701,0.7425187380960229,0.7424741732152124,0.7424296190313496,0.7423850755399425,0.7423405668706278,0.7422960447448755,0.7422515332981199,0.7422070325258792,0.7421625665346616,0.7421180870922366,0.7420736183108998,0.7420291601861803,0.7419847368014963,0.7419402999708392,0.7418958737834047,0.7418514582347329,0.7418070773851904,0.741762683094913,0.7417182994300355,0.7416739263861084,0.7416295880004862,0.7415852361793711,0.7415408949658759,0.7414965643555615,0.7414522683628082,0.7414079589398084,0.7413636601066906,0.7413193718590267,0.7412751181882611,0.7412308510924988,0.7411865945689233,0.741142348613117,0.7410981132206645,0.7410539123543938,0.7410096980696946,0.7409654943351219,0.740921301146271,0.7408771424431199,0.7408329703267992,0.7407888087430046,0.7407446576873415,0.7407005410769768,0.7406564110587048,0.7406122915554004,0.7405681825626796,0.740524107974935,0.7404800199845497,0.740435942491615,0.7403918754917576,0.7403478428566342,0.7403037968241403,0.7402597612716216,0.7402157361947155,0.7401717454423808,0.7401277412979493,0.7400837476160594,0.7400397643923587,0.7399958154531462,0.739951853127114,0.7399079012462313,0.7398639598061558,0.739820052610564,0.7397761320334337,0.7397322218841018,0.7396883221582365,0.7396444566369293,0.7396005777393679,0.7395567092522953,0.7395128511713898,0.7394690272551951,0.7394251899680345,0.7393813630740937,0.7393375465690615,0.7392937404486288,0.7392499684432072,0.7392061830734348,0.7391624080753532,0.7391186434446635,0.7390749128893138,0.7390311689749095,0.7389874354150188,0.7389437122053533,0.7389000230314349,0.7388563205037606,0.7388126283134638,0.7387689464562661,0.7387252985952999,0.7386816373858806,0.7386379864967428,0.7385943459236184,0.7385507393072875,0.7385071193478094,0.7384635096915575,0.7384199103342732,0.7383763448944218,0.7383327661167327,0.7382891976252541,0.7382456394157384,0.7382021150843715,0.7381585774204794,0.738115050025823,0.738071532896164,0.7380280496054471,0.7379845529875206,0.7379410666218946,0.737897590504341,0.7378541481865992,0.737810692546967,0.7377672471427396,0.7377238119696993,0.7376804105574172,0.7376369958285665,0.7375935913182652,0.7375501970223053,0.737506836448126,0.7374634625627032,0.737420098879014,0.7373767453928602,0.7373334021000458,0.7372900924803952,0.7372467695561625,0.7372034568126983,0.7371601542458168,0.7371168853132923,0.7370736030815176,0.7370303310137845,0.7369870691059166,0.7369438407936743,0.7369005991875168,0.7368573677287129,0.7368141464130961,0.7367709586544487,0.7367277576072244,0.7366845666907047,0.736641385900733,0.7365982386291499,0.7365550780743307,0.7365119276336064,0.7364687873028298,0.7364256804519359,0.7363825603231497,0.7363394502918875,0.7362963503540119,0.7362532838575871,0.7362102040886175,0.7361671344006391,0.7361240747895249,0.736081048581505,0.7360380091062894,0.7359949796955718,0.7359519603452341,0.7359089743597085,0.7358659751123396,0.7358229859130135,0.7357800067576221,0.7357370609288343,0.7356941018435582,0.7356511527899084,0.7356082137637862,0.735565284761095,0.7355223890373497,0.7354794800638141,0.7354365811014374,0.7353936921461324,0.7353508364317309,0.7353079674729005,0.7352651085088981,0.7352222595356465,0.7351794437653294,0.7351366147559473,0.7350937957251007,0.7350509866687216,0.7350082107773814,0.7349654216523429,0.734922642489585,0.7348798732850496,0.7348371372077304,0.7347943879020822,0.7347516485424975,0.7347089191249276,0.7346662227968246,0.734623513245764,0.734580813624588,0.7345381239292569,0.7344954672857155,0.734452797424591,0.7344101374772092,0.7343674874395402,0.7343248704160563,0.7342822401803661,0.7342396198423143,0.7341970093978805,0.7341544319300997,0.7341118412554916,0.7340692604624551,0.7340266895469791,0.733984151570696,0.7339416003929673,0.7338990590807806,0.7338565276301339,0.7338140290812919,0.7337715173363883,0.7337290154410343,0.7336865233912371,0.733644041183006,0.7336015918299438,0.7335591292875536,0.733516676574774,0.7334742336876233,0.7334318236184149,0.7333894003652676,0.7333469869258212,0.7333045832961037,0.7332622124471726,0.7332198284196942,0.7331774541900443,0.7331350897542598,0.7330927580621767,0.7330504131969404,0.7330080781136965,0.7329657528084913,0.7329234602099736,0.7328811544436988,0.732838858443617,0.7327965722057835,0.7327543186376945,0.7327120519072466,0.732669794927229,0.7326275476937053,0.7325853330930538,0.732543105335444,0.7325008873125374,0.7324586790204076,0.7324165033243475,0.7323743144767316,0.7323321353481287,0.732289965934621,0.7322478290804508,0.7322056790801298,0.7321635387831673,0.7321214081856547,0.7320793101108174,0.7320371988952363,0.7319950973673951,0.7319530055233945,0.731910923359337,0.7318688736722243,0.7318268108511293,0.7317847576983012,0.7317427142098518,0.7317007031618415,0.7316586789852605,0.7316166644614087,0.7315746595864067,0.7315326871154078,0.7314907015212516,0.7314487255643224,0.7314067592407498,0.7313648252848135,0.7313228782111353,0.7312809407592176,0.7312390129251987,0.7311971174225183,0.7311552088075131,0.7311133097988374,0.7310714203926382,0.7310295632815486,0.7309876930635534,0.7309458324364917,0.7309039813965196,0.7308621626154965,0.7308203307329892,0.7307785084260549,0.7307366956908581,0.7306949151785185,0.7306531215701176,0.7306113375219642,0.7305695630302317,0.7305278207253326,0.7304860653297971,0.7304443194792186,0.7304025831697791,0.7303608790112177,0.7303191617674464,0.7302774540533764,0.7302357558651987,0.7301940671991068,0.7301524106390425,0.7301107410005543,0.7300690808727464,0.7300274302518206,0.7299858117011194,0.7299441800774249,0.7299025579492334,0.7298609453127554,0.7298193647107662,0.7297777710412161,0.7297361868520261,0.7296946121394154,0.7296530694256256,0.7296115136497086,0.7295699673390432,0.7295284304898577,0.7294869256038917,0.7294454076612342,0.7294038991687545,0.729362400122689,0.7293209330043094,0.7292794528346752,0.7292379821001791,0.7291965207970661,0.7291550913861716,0.7291136489294615,0.7290722158928838,0.7290307922726924,0.7289894005093188,0.7289479957055699,0.7289066003069821,0.7288652143098174,0.7288238601341365,0.7287824929235219,0.7287411351031312,0.7286997866692346,0.7286584700215538,0.7286171403443829,0.7285758200425321,0.7285345091122802,0.7284932299330423,0.7284519377297592,0.7284106548869265,0.7283693814008312,0.728328117267763,0.728286884841798,0.7282456393985961,0.7282044032973041,0.7281631765342196,0.7281219814431849,0.728080773340361,0.7280395745646528,0.7279983851123666,0.7279572272971419,0.7279160564755776,0.7278748949663683,0.7278337427658284,0.727792622167427,0.7277514885681374,0.7277103642664751,0.727669249258763,0.7276281658183322,0.7275870693824652,0.7275459822295314,0.7275049043558619,0.727463858014681,0.7274227986835177,0.7273817486206265,0.727340707822347,0.7272996985218285,0.7272586762367823,0.7272176632053803,0.7271766594239701,0.7271356871056581,0.7270947018082745,0.7270537257499401,0.7270127589270109,0.7269718235325814,0.7269308751645376,0.726889936020981,0.7268490060982754,0.7268081075695356,0.7267671960726402,0.7267262937857024,0.7266854007050947,0.7266445168271913,0.7266036643001751,0.7265627988118284,0.7265219425153231,0.7264810954070418,0.7264402796152577,0.7263994508676045,0.7263586312973368,0.7263178209008451,0.7262770417865247,0.7262362497217976,0.7261954668200322,0.7261546930776276,0.7261139505831319,0.726073195143693,0.7260324488528247,0.7259917117069341,0.7259510057747534,0.7259102869030943,0.7258695771656469,0.7258288765588261,0.7257882071315799,0.7257475247703209,0.725706851528947,0.7256661874038809,0.725625554424317,0.725584908516207,0.7255442717136874,0.7255036440131892,0.7254630474241837,0.7254224379121,0.7253818374913439,0.7253412461583544,0.7253006859029113,0.7252601127298586,0.7252195486339028,0.7251789936114906,0.7251384696327411,0.7250979327418519,0.7250574049138605,0.7250168861452218,0.7249763983864242,0.7249358977209577,0.7248954061042218,0.7248549235326791,0.7248144500027945,0.724774007440561,0.7247335519784982,0.724693105547501,0.7246526681440418,0.7246122616745525,0.7245718423107067,0.7245314319638302,0.7244910306304035,0.7244506601973272,0.7244102768753681,0.7243699025563135,0.7243295372366516,0.7242892027837827,0.7242488554475057,0.7242085171000995,0.7241681877380602,0.7241278892093184,0.7240875778026435,0.7240472753708374,0.7240069819104036,0.723966719249833,0.7239264437168056,0.7238861771446755,0.7238459195299547,0.723805692681724,0.7237654529665136,0.7237252221982604,0.7236850003734839,0.7236448092818861,0.7236046053287861,0.7235644103087343,0.7235242242182578,0.7234840688277092,0.723443900581137,0.7234037412537345,0.7233635908420368,0.7233234710970775,0.7232833385015734,0.7232432148113919,0.7232031000230752,0.7231629941331678,0.7231229188685957,0.7230828307603292,0.7230427515401184,0.7230026812045153,0.7229626414611945,0.7229225888796598,0.7228825451724021,0.7228425103359815,0.72280250605885,0.722762488948986,0.7227224806996512,0.7226824813074126,0.722642512441531,0.7226025307483985,0.7225625579020776,0.7225225938991429,0.7224826603896923,0.7224427140584738,0.7224027765603793,0.7223628478919913,0.7223229496842749,0.7222830386602737,0.7222431364557392,0.7222032430672617,0.722163380106703,0.722123504335343,0.7220836373698231,0.7220437792067406,0.7220039514388836,0.7219641108657097,0.7219242790847789,0.721884456092696,0.721844663463205,0.7218048580338817,0.7217650613832347,0.7217252735078762,0.7216855159625349,0.7216457456228469,0.7216059840482979,0.7215662312355078,0.7215264871810987,0.7214867734160708,0.7214470468635535,0.7214073290592954,0.7213676199999258,0.7213279411974959,0.721288249613063,0.7212485667634192,0.7212088926452009,0.7211692487515401,0.7211295920813627,0.721089944132534,0.7210503049016979,0.721010695863095,0.7209710740534628,0.7209314609517683,0.7208918565546626,0.720852282317525,0.7208126953148455,0.720773117006722,0.7207335473898133,0.7206940079006655,0.7206544556514638,0.720614912083466,0.7205753771933381,0.7205358723988221,0.7204963548497408,0.7204568459685402,0.7204173457518941,0.7203778755987692,0.7203383926965674,0.7202989184489529,0.7202594528526061,0.720220017287748,0.7201805689793017,0.7201411293121781,0.7201016982830649,0.7200622972534656,0.7200228834857672,0.7199834783461558,0.7199440818313267,0.7199047152840939,0.7198653360042516,0.7198259653392898,0.7197866032859107,0.7197472498408186,0.719707926323506,0.7196685900804464,0.7196292624357988,0.719589943386275,0.7195506542327424,0.719511352358953,0.7194720590704338,0.7194327743639036,0.7193935195216339,0.7193542519645973,0.719314992979718,0.7192757425637215,0.7192365219803117,0.7191972886876256,0.7191580639540122,0.719118847776204,0.7190796613993656,0.7190404623187416,0.7190012717841341,0.718962089792283,0.7189229375698416,0.718883772649105,0.7188446162613574,0.7188054684033458,0.7187663502832402,0.7187272194703304,0.7186880971774102,0.718648983401234,0.7186098993315164,0.7185708025744858,0.7185317143244737,0.7184926345782418,0.7184535845070776,0.7184145217540914,0.7183754674951811,0.718336421727115,0.7182974056027823,0.7182583768021187,0.7182193564826161,0.7181803446410503,0.7181413412741978,0.7181023675119884,0.7180633810803121,0.7180244031136928,0.7179854336089141,0.7179464936775699,0.71790754108225,0.7178685969391353,0.7178296612450168,0.7177907550931796,0.7177518362828581,0.7177129259119178,0.7176740239771567,0.7176351515535799,0.7175962664770099,0.7175573898270251,0.7175185216004303,0.7174796828539778,0.7174408314600235,0.7174019884798859,0.7173631539103769,0.7173243487900236,0.7172855310276598,0.7172467216663719,0.7172079207029787,0.7171691491578098,0.7171303649761216,0.7170915891827961,0.7170528217746589,0.7170140837538698,0.7169753331020523,0.7169365908259119,0.7168978569222809,0.7168591523751766,0.7168204352025349,0.7167817263929118,0.7167430259431466,0.7167043548191416,0.7166656710750899,0.716626995681426,0.7165883286349957,0.7165496908836135,0.7165110405176756,0.7164723984895213,0.7164337647960036,0.7163951394339773,0.7163565433286846,0.7163179346156996,0.7162793342247813,0.7162407421527911,0.7162021793069452,0.7161636038588973,0.7161250367203733,0.7160864778882414,0.7160479482517184,0.7160094060184836,0.715970872082257,0.7159323464399131,0.7158938499626972,0.7158553408942593,0.7158168401103407,0.7157783476078228,0.7157398842400053,0.7157014082864558,0.7156629406049634,0.7156244811924164,0.7155860508841962,0.7155476079957337,0.7155091733668929,0.715470746994569,0.715432349696252,0.7153939398231818,0.7153555381973249,0.7153171448155827,0.7152787804775813,0.7152404035703157,0.7152020348978814,0.7151636744571864,0.7151253430300192,0.7150869990390768,0.71504866327061,0.7150103357215338,0.7149720371558257,0.7149337260318308,0.7148954231179826,0.7148571284112026,0.7148188419084137,0.7147805843513672,0.7147423142428942,0.7147040523291932,0.7146657986071941,0.7146275738008971,0.7145893364486614,0.7145511072789279,0.7145128862886332,0.714474694184053,0.7144364895390215,0.714398293064249,0.714360104756678,0.714321945304887,0.7142837733181319,0.714245609489418,0.7142074538156951,0.71416932696787,0.7141311875905674,0.7140930563591149,0.7140549332704687,0.7140168389778905,0.7139787321613209,0.7139406334784363,0.7139025429261991,0.7138644811402528,0.7138264068358008,0.7137883406528945,0.7137502825885028,0.7137122532606768,0.7136742114198307,0.7136361776884167,0.7135981520634103,0.7135601551452966,0.7135221457196477,0.7134841443913433,0.7134461511573651,0.7134081866006587,0.7133702095419016,0.7133322405684269,0.7132942796772231,0.7132563474337218,0.7132184026936536,0.7131804660268318,0.7131425374302508,0.7131046169009069,0.7130667249823753,0.7130288205741316,0.7129909242241245,0.7129530359293564,0.7129151762159477,0.7128773040183096,0.7128394398669292,0.7128015837588153,0.7127637562026593,0.712725916167756,0.7126880841671572,0.7126502601978779,0.7126124647512058,0.7125746568312685,0.7125368569337074,0.7124990650555441,0.7124613016706889,0.7124235258180496,0.7123857579758838,0.7123479981412193,0.7123102667706147,0.7122725229377067,0.7122347871033947,0.7121970592647127,0.7121593598608931,0.7121216480002504,0.712083944126351,0.7120462482362357,0.7120085807518364,0.7119709008160932,0.7119332288552662,0.711895564866402,0.711857929254158,0.7118202811960489,0.7117826411010538,0.7117450089662255,0.7117074051789719,0.7116697889513315,0.7116321806750278,0.7115945803471194,0.7115569879646675,0.7115194238935534,0.7114818473888999,0.7114442788208956,0.7114067181866074,0.7113691858347252,0.7113316410547802,0.7112941041997628,0.7112565752667463,0.7112190745872538,0.7111815614851746,0.7111440562963263,0.7111065590177882,0.7110690899639421,0.7110316084929847,0.7109941349235861,0.7109566692528316,0.7109192317779873,0.7108817818915063,0.7108443398949365,0.7108069057853693,0.71076949984298,0.710732081494428,0.7106946710241643,0.710657268429286,0.7106198939729033,0.710582507115831,0.7105451281254482,0.7105077569988586,0.7104704139821313,0.7104330585701872,0.7103957110133582,0.7103583713087541,0.7103210596854289,0.7102837356723586,0.7102464195028533,0.7102091111740293,0.7101718308979497,0.7101345382375959,0.7100972534092815,0.7100599764101287,0.7100227072372608,0.7099854660815379,0.7099482125483783,0.7099109668328849,0.7098737289321868,0.7098365190202098,0.7097992967362656,0.709762082258516,0.7097248755840965,0.7096876968700231,0.7096505057894509,0.7096133225036257,0.7095761470096895,0.7095389994477734,0.7095018395248259,0.7094646873852022,0.7094275430260498,0.7093904265706402,0.7093532977596658,0.7093161767206158,0.7092790634506436,0.7092419780561854,0.7092048803116283,0.7091677903276198,0.7091307081013194,0.7090936537223527,0.7090565869987518,0.7090195280243479,0.7089824767963062,0.708945453387466,0.7089084176394557,0.7088713896293142,0.7088343693542125,0.7087973768702287,0.7087603720525382,0.7087233749614115,0.7086863855940263,0.708649423989723,0.7086124500571752,0.7085754838399106,0.7085385253351122,0.7085015945654082,0.7084646514729208,0.7084277160844592,0.7083907883972123,0.7083538684083703,0.7083169761197045,0.7082800715150808,0.7082431746004438,0.7082062853729895,0.708169423817831,0.708132549952174,0.7080956837652987,0.7080588252544073,0.7080219943879791,0.7079851512165108,0.7079483157126427,0.7079114878735828,0.7078746876512012,0.7078378751292365,0.7078010702637139,0.7077642730518471,0.7077275034289209,0.707690721511868,0.707653947240122,0.7076171806109026,0.7075804415429334,0.7075436901862928,0.7075069464638473,0.7074702103728222,0.7074335018154041,0.7073967809747688,0.7073600677572397,0.707323362160048,0.707286684068867,0.7072499936999221,0.7072133109430176,0.7071766357953904,0.7071399881262247,0.7071033281847471,0.7070666758442672,0.7070300311020272,0.7069934138107463,0.7069567842526049,0.7069201622844408,0.7068835479035025,0.7068469411070394,0.7068103617272221,0.706773770087357,0.7067371860237257,0.7067006095335839,0.7066640604326908,0.7066274990771981,0.7065909452869709,0.7065543990592699,0.7065178801934664,0.7064813490785111,0.7064448255178751,0.7064083095088247,0.7063718208343674,0.706335319916205,0.706298826541438,0.7062623407073391,0.7062258821805746,0.7061894114155505,0.7061529481830209,0.7061164924802639,0.7060800640576292,0.7060436234021791,0.7060071902683451,0.7059707646534107,0.7059343662914326,0.7058979557020821,0.7058615526234918,0.7058251570529506,0.7057887887082452,0.7057524081416098,0.7057160350749005,0.7056796695054125,0.7056433311346859,0.7056069805474698,0.7055706374493688,0.705534301837683,0.7054979933977299,0.705461672746727,0.7054253595740501,0.7053890538770048,0.7053527753247092,0.7053164845668021,0.7052802012764541,0.7052439254509765,0.7052076570876817,0.7051714158354707,0.7051351623844452,0.7050989163875505,0.7050626778421052,0.7050264663808624,0.704990242726241,0.7049540265150332,0.7049178177445633,0.7048816360314601,0.7048454421304127,0.7048092556620839,0.704773076623803,0.7047369246160984,0.7047007604258829,0.7046646036577127,0.7046284543089225,0.7045923319639632,0.7045561974419251,0.704520070331281,0.7044839506293709,0.7044478579045911,0.7044117530081634,0.7043756555124999,0.7043395654149465,0.7043035022678675,0.7042674269545701,0.7042313590314293,0.7041952984957962,0.7041592648840264,0.7041232191114665,0.7040871807184771,0.7040511497024147,0.7040151455836491,0.7039791293095206,0.703943120404398,0.7039071188656433,0.7038711441976637,0.7038351573797468,0.703799177920293,0.7037632058166696,0.7037272410662452,0.703691303153505,0.7036553530976081,0.7036194103870256,0.7035834750191315,0.7035475664624996,0.7035116457681336,0.7034757324085875,0.7034398263812409,0.7034039471387782,0.7033680557640031,0.7033321717135748,0.7032962949848781,0.7032604450147315,0.7032245829176926,0.7031887281345488,0.7031528806626902,0.7031170599230917,0.7030812270620197,0.7030454015044123,0.703009583247665,0.7029737916969319,0.7029379880301425,0.7029021916564085,0.7028664025731309,0.7028306401696648,0.7027948656555587,0.7027590984241201,0.7027233384727549,0.7026876051750428,0.7026518597721052,0.7026161216414681,0.7025803907805431,0.7025446865471558,0.7025089702139564,0.7024732611427118,0.7024375593308383,0.7024018841204313,0.7023661968156237,0.7023305167624463,0.7022948439583206,0.7022591784006695,0.7022235394119553,0.7021878883356036,0.7021522444980052,0.702116607896588,0.7020809978381334,0.7020453756974503,0.7020097607852425,0.7019741530989433,0.7019385719296757,0.7019029786835868,0.7018673926557164,0.7018318138435029,0.7017962615224329,0.7017606971299474,0.7017251399454443,0.7016895899663671,0.7016540664525882,0.7016185308727984,0.7015830024907752,0.701547481303968,0.7015119865566568,0.7014764797487374,0.7014409801283901,0.7014054876930691,0.7013700216714844,0.701334543594693,0.7012990726952998,0.7012636089707638,0.7012281716342471,0.7011927222479237,0.7011572800288448,0.7011218449744748,0.7010864362824497,0.7010510155460163,0.7010156019666943,0.7009801955419536,0.7009448154539254,0.7009094233268861,0.7008740383468457,0.7008386605112787,0.7008033089868348,0.7007679454287754,0.7007325890076225,0.700697239720856,0.700661897565957,0.7006265816902527,0.700591253787675,0.7005559330094169,0.7005206193529647,0.7004853319502122,0.7004500325259785,0.700414740216018,0.7003794550178218,0.7003441960478728,0.7003089250618328,0.7002736611800399,0.7002384043999901,0.7002031738227765,0.7001679312348611,0.7001326957411864,0.7000974673392539,0.7000622651147889,0.7000270508850093,0.6999918437394844,0.6999566436757209,0.6999214697640974,0.699886283852545,0.6998511050152818,0.6998159332498189,0.6997807876112104,0.6997456299780574,0.6997104794092476,0.6996753359022971,0.6996402184969571,0.6996050891024553,0.6995699667623706,0.6995348514742245,0.6994997622624861,0.6994646610669669,0.6994295669159589,0.6993944798069885,0.6993594187492644,0.6993243457131392,0.6992892797116389,0.6992542207422949,0.6992191688026397,0.6991841428828365,0.6991491049913542,0.6991140741221669,0.6990790502728118,0.6990440524182401,0.6990090425973653,0.6989740397889438,0.6989390439905178,0.6989040741618476,0.6988690923722486,0.6988341175852807,0.6987991497984913,0.6987642079564713,0.698729254158895,0.6986943073541474,0.6986593675397811,0.6986244536452382,0.69858952780051,0.6985546089388279,0.6985196970577491,0.6984848110715889,0.6984499131406124,0.6984150221829191,0.6983801381960706,0.6983452800792764,0.6983104100230336,0.6982755469303302,0.698240690798733,0.698205860512366,0.6981710182919165,0.6981361830252822,0.6981013547100345,0.6980665522152341,0.6980317377917152,0.6979969303123067,0.6979621297745847,0.697927355032567,0.6978925683671936,0.6978577886362449,0.6978230158373022,0.6977882688093612,0.6977535098634252,0.6977187578422477,0.6976840127434148,0.6976492745645139,0.6976145621257919,0.697579837775774,0.6975451203384585,0.6975104098114374,0.6974757249999832,0.6974410282825901,0.6974063384682764,0.6973716555546388,0.6973369983319958,0.6973023292087693,0.6972676669790182,0.6972330116403441,0.6971983819681323,0.6971637404006906,0.6971291057171394,0.6970944779150853,0.6970598757550007,0.6970252617050382,0.6969906545294005,0.6969560542256985,0.6969214795395137,0.6968868929688007,0.6968523132628658,0.6968177404193246,0.6967831931688874,0.6967486340392703,0.6967140817649035,0.6966795363434072,0.6966450164906411,0.696610484764042,0.6965759598831838,0.6965414418456921,0.6965069493525965,0.6964724449910126,0.6964379474656793,0.6964034567742273,0.6963689916028764,0.6963345145683802,0.6963000443606634,0.696265580977361,0.6962311244161088,0.6961966933446435,0.6961622504167096,0.6961278143037419,0.6960933850033811,0.696058981168601,0.696024565482691,0.6959901566023179,0.6959557545251271,0.6959213778893495,0.6958869894077794,0.6958526077223355,0.6958182328306677,0.6957838833562847,0.6957495220414446,0.6957151675133385,0.6956808197696214,0.6956464974190992,0.6956121632334535,0.6955778358251684,0.6955435151919032,0.6955092199277823,0.6954749128338696,0.6954406125079625,0.6954063189477245,0.6953720507326192,0.6953377706930519,0.6953034974121535,0.6952692308875922,0.6952349896841902,0.6952007366616544,0.695166490388469,0.6951322508623072,0.6950980366333698,0.6950638105906249,0.6950295912879307,0.6949953787229646,0.6949611914313265,0.6949269923312053,0.694892799961853,0.6948586143209521,0.6948244539295211,0.6947902817349295,0.6947561162618435,0.6947219575079498,0.6946878054709364,0.6946536786536236,0.694619540039801,0.69458540813593,0.6945512829397031,0.6945171829394049,0.6944830711479152,0.6944489660571547,0.6944148676648203,0.6943807944446809,0.6943467094386664,0.6943126311241766,0.6942785594989132,0.6942445130221488,0.6942104547648241,0.6941764031898376,0.6941423582948957,0.694108338524795,0.6940743069794466,0.6940402821072681,0.6940062639059704,0.6939722708058939,0.6939382659358803,0.6939042677298864,0.6938702761856272,0.6938363097190071,0.6938023314877588,0.6937683599113977,0.6937343949876433,0.6937004551179835,0.6936665034890023,0.6936325585057939,0.6935986201660819,0.6935647068569576,0.6935307817938169,0.6934968633673522,0.6934629515752916,0.693429064790349,0.6933951662566934,0.6933612743506348],"x":[0.8,0.8004398240703718,0.8008796481407437,0.8013194722111155,0.8017592962814875,0.8021991203518593,0.8026389444222312,0.803078768492603,0.8035185925629749,0.8039584166333467,0.8043982407037185,0.8048380647740904,0.8052778888444622,0.8057177129148341,0.8061575369852059,0.8065973610555778,0.8070371851259496,0.8074770091963215,0.8079168332666933,0.8083566573370652,0.808796481407437,0.8092363054778089,0.8096761295481807,0.8101159536185526,0.8105557776889244,0.8109956017592963,0.8114354258296681,0.81187524990004,0.8123150739704118,0.8127548980407837,0.8131947221111555,0.8136345461815274,0.8140743702518992,0.8145141943222711,0.8149540183926429,0.8153938424630148,0.8158336665333866,0.8162734906037585,0.8167133146741303,0.8171531387445022,0.817592962814874,0.8180327868852459,0.8184726109556177,0.8189124350259896,0.8193522590963614,0.8197920831667334,0.8202319072371052,0.8206717313074771,0.8211115553778489,0.8215513794482208,0.8219912035185926,0.8224310275889645,0.8228708516593363,0.8233106757297081,0.82375049980008,0.8241903238704518,0.8246301479408237,0.8250699720111955,0.8255097960815674,0.8259496201519392,0.8263894442223111,0.8268292682926829,0.8272690923630548,0.8277089164334266,0.8281487405037985,0.8285885645741703,0.8290283886445422,0.829468212714914,0.8299080367852859,0.8303478608556577,0.8307876849260296,0.8312275089964014,0.8316673330667733,0.8321071571371451,0.832546981207517,0.8329868052778888,0.8334266293482607,0.8338664534186325,0.8343062774890044,0.8347461015593762,0.8351859256297481,0.8356257497001199,0.8360655737704918,0.8365053978408636,0.8369452219112355,0.8373850459816073,0.8378248700519793,0.838264694122351,0.838704518192723,0.8391443422630948,0.8395841663334667,0.8400239904038385,0.8404638144742104,0.8409036385445822,0.841343462614954,0.8417832866853259,0.8422231107556977,0.8426629348260696,0.8431027588964414,0.8435425829668133,0.8439824070371851,0.844422231107557,0.8448620551779288,0.8453018792483007,0.8457417033186725,0.8461815273890444,0.8466213514594162,0.8470611755297881,0.8475009996001599,0.8479408236705318,0.8483806477409036,0.8488204718112755,0.8492602958816473,0.8497001199520192,0.850139944022391,0.8505797680927629,0.8510195921631347,0.8514594162335066,0.8518992403038784,0.8523390643742503,0.8527788884446221,0.853218712514994,0.8536585365853658,0.8540983606557377,0.8545381847261095,0.8549780087964814,0.8554178328668532,0.8558576569372252,0.856297481007597,0.8567373050779689,0.8571771291483407,0.8576169532187126,0.8580567772890844,0.8584966013594563,0.8589364254298281,0.8593762495002,0.8598160735705718,0.8602558976409436,0.8606957217113155,0.8611355457816873,0.8615753698520592,0.862015193922431,0.8624550179928029,0.8628948420631747,0.8633346661335466,0.8637744902039184,0.8642143142742903,0.8646541383446621,0.865093962415034,0.8655337864854058,0.8659736105557777,0.8664134346261495,0.8668532586965214,0.8672930827668932,0.8677329068372651,0.8681727309076369,0.8686125549780088,0.8690523790483806,0.8694922031187525,0.8699320271891243,0.8703718512594962,0.870811675329868,0.8712514994002399,0.8716913234706117,0.8721311475409836,0.8725709716113554,0.8730107956817273,0.8734506197520991,0.873890443822471,0.8743302678928428,0.8747700919632148,0.8752099160335866,0.8756497401039585,0.8760895641743303,0.8765293882447022,0.876969212315074,0.8774090363854459,0.8778488604558177,0.8782886845261896,0.8787285085965614,0.8791683326669332,0.8796081567373051,0.8800479808076769,0.8804878048780488,0.8809276289484206,0.8813674530187925,0.8818072770891643,0.8822471011595362,0.882686925229908,0.8831267493002799,0.8835665733706517,0.8840063974410236,0.8844462215113954,0.8848860455817673,0.8853258696521391,0.885765693722511,0.8862055177928828,0.8866453418632547,0.8870851659336265,0.8875249900039984,0.8879648140743702,0.8884046381447421,0.8888444622151139,0.8892842862854858,0.8897241103558576,0.8901639344262295,0.8906037584966013,0.8910435825669732,0.891483406637345,0.891923230707717,0.8923630547780887,0.8928028788484607,0.8932427029188325,0.8936825269892044,0.8941223510595762,0.8945621751299481,0.8950019992003199,0.8954418232706918,0.8958816473410636,0.8963214714114355,0.8967612954818073,0.8972011195521792,0.897640943622551,0.8980807676929228,0.8985205917632947,0.8989604158336665,0.8994002399040384,0.8998400639744102,0.9002798880447821,0.9007197121151539,0.9011595361855258,0.9015993602558976,0.9020391843262695,0.9024790083966413,0.9029188324670132,0.903358656537385,0.9037984806077569,0.9042383046781287,0.9046781287485006,0.9051179528188724,0.9055577768892443,0.9059976009596161,0.906437425029988,0.9068772491003598,0.9073170731707317,0.9077568972411035,0.9081967213114754,0.9086365453818472,0.9090763694522191,0.9095161935225909,0.9099560175929629,0.9103958416633346,0.9108356657337066,0.9112754898040784,0.9117153138744503,0.9121551379448221,0.912594962015194,0.9130347860855658,0.9134746101559377,0.9139144342263095,0.9143542582966814,0.9147940823670532,0.9152339064374251,0.9156737305077969,0.9161135545781688,0.9165533786485406,0.9169932027189124,0.9174330267892843,0.9178728508596561,0.918312674930028,0.9187524990003998,0.9191923230707717,0.9196321471411435,0.9200719712115154,0.9205117952818872,0.9209516193522591,0.9213914434226309,0.9218312674930028,0.9222710915633746,0.9227109156337465,0.9231507397041183,0.9235905637744902,0.924030387844862,0.9244702119152339,0.9249100359856057,0.9253498600559776,0.9257896841263494,0.9262295081967213,0.9266693322670931,0.927109156337465,0.9275489804078368,0.9279888044782088,0.9284286285485805,0.9288684526189525,0.9293082766893243,0.9297481007596962,0.930187924830068,0.9306277489004399,0.9310675729708117,0.9315073970411836,0.9319472211115554,0.9323870451819273,0.9328268692522991,0.933266693322671,0.9337065173930428,0.9341463414634147,0.9345861655337865,0.9350259896041584,0.9354658136745302,0.935905637744902,0.9363454618152739,0.9367852858856457,0.9372251099560176,0.9376649340263894,0.9381047580967613,0.9385445821671331,0.938984406237505,0.9394242303078768,0.9398640543782487,0.9403038784486205,0.9407437025189924,0.9411835265893642,0.9416233506597361,0.9420631747301079,0.9425029988004798,0.9429428228708516,0.9433826469412235,0.9438224710115953,0.9442622950819672,0.944702119152339,0.945141943222711,0.9455817672930827,0.9460215913634547,0.9464614154338264,0.9469012395041984,0.9473410635745702,0.9477808876449421,0.9482207117153139,0.9486605357856858,0.9491003598560576,0.9495401839264295,0.9499800079968013,0.9504198320671732,0.950859656137545,0.9512994802079169,0.9517393042782887,0.9521791283486606,0.9526189524190324,0.9530587764894043,0.9534986005597761,0.9539384246301479,0.9543782487005198,0.9548180727708916,0.9552578968412635,0.9556977209116353,0.9561375449820072,0.956577369052379,0.9570171931227509,0.9574570171931227,0.9578968412634946,0.9583366653338664,0.9587764894042383,0.9592163134746101,0.959656137544982,0.9600959616153538,0.9605357856857257,0.9609756097560975,0.9614154338264694,0.9618552578968412,0.9622950819672131,0.9627349060375849,0.9631747301079568,0.9636145541783286,0.9640543782487005,0.9644942023190723,0.9649340263894443,0.965373850459816,0.965813674530188,0.9662534986005598,0.9666933226709317,0.9671331467413035,0.9675729708116754,0.9680127948820472,0.9684526189524191,0.9688924430227909,0.9693322670931628,0.9697720911635346,0.9702119152339065,0.9706517393042783,0.9710915633746502,0.971531387445022,0.9719712115153939,0.9724110355857657,0.9728508596561375,0.9732906837265094,0.9737305077968812,0.9741703318672531,0.9746101559376249,0.9750499800079968,0.9754898040783686,0.9759296281487405,0.9763694522191123,0.9768092762894842,0.977249100359856,0.9776889244302279,0.9781287485005997,0.9785685725709716,0.9790083966413434,0.9794482207117153,0.9798880447820871,0.980327868852459,0.9807676929228308,0.9812075169932027,0.9816473410635745,0.9820871651339464,0.9825269892043182,0.9829668132746902,0.983406637345062,0.9838464614154339,0.9842862854858057,0.9847261095561776,0.9851659336265494,0.9856057576969213,0.9860455817672931,0.986485405837665,0.9869252299080368,0.9873650539784087,0.9878048780487805,0.9882447021191524,0.9886845261895242,0.9891243502598961,0.9895641743302679,0.9900039984006398,0.9904438224710116,0.9908836465413835,0.9913234706117553,0.9917632946821271,0.992203118752499,0.9926429428228708,0.9930827668932427,0.9935225909636145,0.9939624150339864,0.9944022391043582,0.9948420631747301,0.9952818872451019,0.9957217113154738,0.9961615353858456,0.9966013594562175,0.9970411835265893,0.9974810075969612,0.997920831667333,0.9983606557377049,0.9988004798080767,0.9992403038784486,0.9996801279488204,1.0001199520191923,1.0005597760895641,1.000999600159936,1.001439424230308,1.0018792483006798,1.0023190723710516,1.0027588964414234,1.0031987205117954,1.0036385445821672,1.004078368652539,1.0045181927229108,1.0049580167932828,1.0053978408636546,1.0058376649340264,1.0062774890043982,1.0067173130747702,1.007157137145142,1.0075969612155138,1.0080367852858856,1.0084766093562576,1.0089164334266294,1.0093562574970012,1.009796081567373,1.010235905637745,1.0106757297081168,1.0111155537784886,1.0115553778488604,1.0119952019192322,1.0124350259896042,1.012874850059976,1.0133146741303478,1.0137544982007196,1.0141943222710916,1.0146341463414634,1.0150739704118352,1.015513794482207,1.015953618552579,1.0163934426229508,1.0168332666933226,1.0172730907636944,1.0177129148340665,1.0181527389044382,1.01859256297481,1.0190323870451818,1.0194722111155539,1.0199120351859257,1.0203518592562975,1.0207916833266693,1.0212315073970413,1.021671331467413,1.0221111555377849,1.0225509796081567,1.0229908036785287,1.0234306277489005,1.0238704518192723,1.024310275889644,1.024750099960016,1.025189924030388,1.0256297481007597,1.0260695721711315,1.0265093962415035,1.0269492203118753,1.027389044382247,1.027828868452619,1.028268692522991,1.0287085165933627,1.0291483406637345,1.0295881647341063,1.030027988804478,1.0304678128748501,1.030907636945222,1.0313474610155937,1.0317872850859655,1.0322271091563375,1.0326669332267093,1.0331067572970811,1.033546581367453,1.033986405437825,1.0344262295081967,1.0348660535785685,1.0353058776489403,1.0357457017193124,1.0361855257896841,1.036625349860056,1.0370651739304277,1.0375049980007998,1.0379448220711716,1.0383846461415434,1.0388244702119152,1.0392642942822872,1.039704118352659,1.0401439424230308,1.0405837664934026,1.0410235905637746,1.0414634146341464,1.0419032387045182,1.04234306277489,1.042782886845262,1.0432227109156338,1.0436625349860056,1.0441023590563774,1.0445421831267494,1.0449820071971212,1.045421831267493,1.0458616553378648,1.0463014794082368,1.0467413034786086,1.0471811275489804,1.0476209516193522,1.048060775689724,1.048500599760096,1.0489404238304678,1.0493802479008396,1.0498200719712114,1.0502598960415834,1.0506997201119552,1.051139544182327,1.0515793682526988,1.0520191923230708,1.0524590163934426,1.0528988404638144,1.0533386645341862,1.0537784886045582,1.05421831267493,1.0546581367453018,1.0550979608156736,1.0555377848860457,1.0559776089564175,1.0564174330267893,1.056857257097161,1.057297081167533,1.0577369052379049,1.0581767293082767,1.0586165533786485,1.0590563774490205,1.0594962015193923,1.059936025589764,1.0603758496601359,1.060815673730508,1.0612554978008797,1.0616953218712515,1.0621351459416233,1.0625749700119953,1.063014794082367,1.063454618152739,1.0638944422231107,1.0643342662934827,1.0647740903638545,1.0652139144342263,1.065653738504598,1.0660935625749701,1.066533386645342,1.0669732107157137,1.0674130347860855,1.0678528588564573,1.0682926829268293,1.0687325069972011,1.069172331067573,1.0696121551379447,1.0700519792083167,1.0704918032786885,1.0709316273490603,1.0713714514194321,1.0718112754898041,1.072251099560176,1.0726909236305477,1.0731307477009195,1.0735705717712916,1.0740103958416634,1.0744502199120352,1.074890043982407,1.075329868052779,1.0757696921231508,1.0762095161935226,1.0766493402638944,1.0770891643342664,1.0775289884046382,1.07796881247501,1.0784086365453818,1.0788484606157538,1.0792882846861256,1.0797281087564974,1.0801679328268692,1.0806077568972412,1.081047580967613,1.0814874050379848,1.0819272291083566,1.0823670531787286,1.0828068772491004,1.0832467013194722,1.083686525389844,1.084126349460216,1.0845661735305878,1.0850059976009596,1.0854458216713314,1.0858856457417032,1.0863254698120752,1.086765293882447,1.0872051179528188,1.0876449420231906,1.0880847660935626,1.0885245901639344,1.0889644142343062,1.089404238304678,1.08984406237505,1.0902838864454218,1.0907237105157936,1.0911635345861654,1.0916033586565375,1.0920431827269093,1.092483006797281,1.0929228308676529,1.0933626549380249,1.0938024790083967,1.0942423030787685,1.0946821271491403,1.0951219512195123,1.095561775289884,1.0960015993602559,1.0964414234306277,1.0968812475009997,1.0973210715713715,1.0977608956417433,1.098200719712115,1.098640543782487,1.099080367852859,1.0995201919232307,1.0999600159936025,1.1003998400639745,1.1008396641343463,1.101279488204718,1.10171931227509,1.102159136345462,1.1025989604158337,1.1030387844862055,1.1034786085565773,1.1039184326269493,1.1043582566973211,1.104798080767693,1.1052379048380647,1.1056777289084365,1.1061175529788085,1.1065573770491803,1.1069972011195521,1.107437025189924,1.107876849260296,1.1083166733306677,1.1087564974010395,1.1091963214714113,1.1096361455417834,1.1100759696121552,1.110515793682527,1.1109556177528987,1.1113954418232708,1.1118352658936426,1.1122750899640144,1.1127149140343862,1.1131547381047582,1.11359456217513,1.1140343862455018,1.1144742103158736,1.1149140343862456,1.1153538584566174,1.1157936825269892,1.116233506597361,1.116673330667733,1.1171131547381048,1.1175529788084766,1.1179928028788484,1.1184326269492204,1.1188724510195922,1.119312275089964,1.1197520991603358,1.1201919232307078,1.1206317473010796,1.1210715713714514,1.1215113954418232,1.1219512195121952,1.122391043582567,1.1228308676529388,1.1232706917233106,1.1237105157936824,1.1241503398640544,1.1245901639344262,1.125029988004798,1.1254698120751698,1.1259096361455418,1.1263494602159136,1.1267892842862854,1.1272291083566572,1.1276689324270293,1.128108756497401,1.1285485805677729,1.1289884046381446,1.1294282287085167,1.1298680527788885,1.1303078768492603,1.130747700919632,1.131187524990004,1.1316273490603759,1.1320671731307477,1.1325069972011195,1.1329468212714915,1.1333866453418633,1.133826469412235,1.1342662934826069,1.134706117552979,1.1351459416233507,1.1355857656937225,1.1360255897640943,1.1364654138344663,1.136905237904838,1.13734506197521,1.1377848860455817,1.1382247101159537,1.1386645341863255,1.1391043582566973,1.139544182327069,1.1399840063974411,1.140423830467813,1.1408636545381847,1.1413034786085565,1.1417433026789283,1.1421831267493003,1.1426229508196721,1.143062774890044,1.1435025989604157,1.1439424230307877,1.1443822471011595,1.1448220711715313,1.1452618952419031,1.1457017193122752,1.146141543382647,1.1465813674530188,1.1470211915233905,1.1474610155937626,1.1479008396641344,1.1483406637345062,1.148780487804878,1.14922031187525,1.1496601359456218,1.1500999600159936,1.1505397840863654,1.1509796081567374,1.1514194322271092,1.151859256297481,1.1522990803678528,1.1527389044382248,1.1531787285085966,1.1536185525789684,1.1540583766493402,1.1544982007197122,1.154938024790084,1.1553778488604558,1.1558176729308276,1.1562574970011996,1.1566973210715714,1.1571371451419432,1.157576969212315,1.158016793282687,1.1584566173530588,1.1588964414234306,1.1593362654938024,1.1597760895641744,1.1602159136345462,1.160655737704918,1.1610955617752898,1.1615353858456616,1.1619752099160336,1.1624150339864054,1.1628548580567772,1.163294682127149,1.163734506197521,1.1641743302678929,1.1646141543382647,1.1650539784086364,1.1654938024790085,1.1659336265493803,1.166373450619752,1.1668132746901239,1.1672530987604959,1.1676929228308677,1.1681327469012395,1.1685725709716113,1.1690123950419833,1.169452219112355,1.1698920431827269,1.1703318672530987,1.1707716913234707,1.1712115153938425,1.1716513394642143,1.172091163534586,1.172530987604958,1.17297081167533,1.1734106357457017,1.1738504598160735,1.1742902838864455,1.1747301079568173,1.1751699320271891,1.175609756097561,1.176049580167933,1.1764894042383047,1.1769292283086765,1.1773690523790483,1.1778088764494203,1.1782487005197921,1.178688524590164,1.1791283486605357,1.1795681727309075,1.1800079968012795,1.1804478208716513,1.1808876449420231,1.181327469012395,1.181767293082767,1.1822071171531388,1.1826469412235106,1.1830867652938823,1.1835265893642544,1.1839664134346262,1.184406237504998,1.1848460615753698,1.1852858856457418,1.1857257097161136,1.1861655337864854,1.1866053578568572,1.1870451819272292,1.187485005997601,1.1879248300679728,1.1883646541383446,1.1888044782087166,1.1892443022790884,1.1896841263494602,1.190123950419832,1.190563774490204,1.1910035985605758,1.1914434226309476,1.1918832467013194,1.1923230707716914,1.1927628948420632,1.193202718912435,1.1936425429828068,1.1940823670531788,1.1945221911235506,1.1949620151939224,1.1954018392642942,1.1958416633346662,1.196281487405038,1.1967213114754098,1.1971611355457816,1.1976009596161536,1.1980407836865254,1.1984806077568972,1.198920431827269,1.1993602558976408,1.1998000799680129,1.2002399040383847,1.2006797281087564,1.2011195521791282,1.2015593762495003,1.201999200319872,1.2024390243902439,1.2028788484606157,1.2033186725309877,1.2037584966013595,1.2041983206717313,1.204638144742103,1.205077968812475,1.2055177928828469,1.2059576169532187,1.2063974410235905,1.2068372650939625,1.2072770891643343,1.207716913234706,1.2081567373050779,1.20859656137545,1.2090363854458217,1.2094762095161935,1.2099160335865653,1.2103558576569373,1.2107956817273091,1.211235505797681,1.2116753298680527,1.2121151539384247,1.2125549780087965,1.2129948020791683,1.2134346261495401,1.2138744502199121,1.214314274290284,1.2147540983606557,1.2151939224310275,1.2156337465013995,1.2160735705717713,1.2165133946421431,1.216953218712515,1.2173930427828867,1.2178328668532588,1.2182726909236306,1.2187125149940023,1.2191523390643741,1.2195921631347462,1.220031987205118,1.2204718112754898,1.2209116353458616,1.2213514594162336,1.2217912834866054,1.2222311075569772,1.222670931627349,1.223110755697721,1.2235505797680928,1.2239904038384646,1.2244302279088364,1.2248700519792084,1.2253098760495802,1.225749700119952,1.2261895241903238,1.2266293482606958,1.2270691723310676,1.2275089964014394,1.2279488204718112,1.2283886445421832,1.228828468612555,1.2292682926829268,1.2297081167532986,1.2301479408236706,1.2305877648940424,1.2310275889644142,1.231467413034786,1.231907237105158,1.2323470611755298,1.2327868852459016,1.2332267093162734,1.2336665333866454,1.2341063574570172,1.234546181527389,1.2349860055977608,1.2354258296681329,1.2358656537385047,1.2363054778088765,1.2367453018792482,1.23718512594962,1.237624950019992,1.2380647740903639,1.2385045981607357,1.2389444222311075,1.2393842463014795,1.2398240703718513,1.240263894442223,1.2407037185125949,1.2411435425829669,1.2415833666533387,1.2420231907237105,1.2424630147940823,1.2429028388644543,1.243342662934826,1.243782487005198,1.2442223110755697,1.2446621351459417,1.2451019592163135,1.2455417832866853,1.245981607357057,1.2464214314274291,1.246861255497801,1.2473010795681727,1.2477409036385445,1.2481807277089165,1.2486205517792883,1.2490603758496601,1.249500199920032,1.249940023990404,1.2503798480607757,1.2508196721311475,1.2512594962015193,1.2516993202718913,1.2521391443422631,1.252578968412635,1.2530187924830067,1.2534586165533788,1.2538984406237506,1.2543382646941224,1.2547780887644941,1.255217912834866,1.255657736905238,1.2560975609756098,1.2565373850459816,1.2569772091163534,1.2574170331867254,1.2578568572570972,1.258296681327469,1.2587365053978408,1.2591763294682128,1.2596161535385846,1.2600559776089564,1.2604958016793282,1.2609356257497002,1.261375449820072,1.2618152738904438,1.2622550979608156,1.2626949220311876,1.2631347461015594,1.2635745701719312,1.264014394242303,1.264454218312675,1.2648940423830468,1.2653338664534186,1.2657736905237904,1.2662135145941624,1.2666533386645342,1.267093162734906,1.2675329868052778,1.2679728108756498,1.2684126349460216,1.2688524590163934,1.2692922830867652,1.2697321071571372,1.270171931227509,1.2706117552978808,1.2710515793682526,1.2714914034386247,1.2719312275089965,1.2723710515793683,1.27281087564974,1.2732506997201118,1.2736905237904839,1.2741303478608557,1.2745701719312275,1.2750099960015993,1.2754498200719713,1.275889644142343,1.2763294682127149,1.2767692922830867,1.2772091163534587,1.2776489404238305,1.2780887644942023,1.278528588564574,1.278968412634946,1.279408236705318,1.2798480607756897,1.2802878848460615,1.2807277089164335,1.2811675329868053,1.281607357057177,1.282047181127549,1.282487005197921,1.2829268292682927,1.2833666533386645,1.2838064774090363,1.2842463014794083,1.2846861255497801,1.285125949620152,1.2855657736905237,1.2860055977608957,1.2864454218312675,1.2868852459016393,1.2873250699720111,1.2877648940423831,1.288204718112755,1.2886445421831267,1.2890843662534985,1.2895241903238706,1.2899640143942424,1.2904038384646142,1.290843662534986,1.291283486605358,1.2917233106757298,1.2921631347461016,1.2926029588164734,1.2930427828868452,1.2934826069572172,1.293922431027589,1.2943622550979608,1.2948020791683326,1.2952419032387046,1.2956817273090764,1.2961215513794482,1.29656137544982,1.297001199520192,1.2974410235905638,1.2978808476609356,1.2983206717313074,1.2987604958016794,1.2992003198720512,1.299640143942423,1.3000799680127948,1.3005197920831668,1.3009596161535386,1.3013994402239104,1.3018392642942822,1.3022790883646542,1.302718912435026,1.3031587365053978,1.3035985605757696,1.3040383846461416,1.3044782087165134,1.3049180327868852,1.305357856857257,1.305797680927629,1.3062375049980008,1.3066773290683726,1.3071171531387444,1.3075569772091165,1.3079968012794883,1.30843662534986,1.3088764494202318,1.3093162734906039,1.3097560975609757,1.3101959216313475,1.3106357457017193,1.311075569772091,1.311515393842463,1.3119552179128349,1.3123950419832067,1.3128348660535785,1.3132746901239505,1.3137145141943223,1.314154338264694,1.3145941623350659,1.315033986405438,1.3154738104758097,1.3159136345461815,1.3163534586165533,1.3167932826869253,1.317233106757297,1.317672930827669,1.3181127548980407,1.3185525789684127,1.3189924030387845,1.3194322271091563,1.319872051179528,1.3203118752499001,1.320751699320272,1.3211915233906437,1.3216313474610155,1.3220711715313875,1.3225109956017593,1.3229508196721311,1.323390643742503,1.323830467812875,1.3242702918832467,1.3247101159536185,1.3251499400239903,1.3255897640943624,1.3260295881647342,1.326469412235106,1.3269092363054777,1.3273490603758498,1.3277888844462216,1.3282287085165934,1.3286685325869652,1.3291083566573372,1.329548180727709,1.3299880047980808,1.3304278288684526,1.3308676529388244,1.3313074770091964,1.3317473010795682,1.33218712514994,1.3326269492203118,1.3330667732906838,1.3335065973610556,1.3339464214314274,1.3343862455017992,1.3348260695721712,1.335265893642543,1.3357057177129148,1.3361455417832866,1.3365853658536586,1.3370251899240304,1.3374650139944022,1.337904838064774,1.338344662135146,1.3387844862055178,1.3392243102758896,1.3396641343462614,1.3401039584166334,1.3405437824870052,1.340983606557377,1.3414234306277488,1.3418632546981208,1.3423030787684926,1.3427429028388644,1.3431827269092362,1.3436225509796083,1.34406237504998,1.3445021991203518,1.3449420231907236,1.3453818472610957,1.3458216713314675,1.3462614954018393,1.346701319472211,1.347141143542583,1.3475809676129549,1.3480207916833267,1.3484606157536985,1.3489004398240703,1.3493402638944423,1.349780087964814,1.3502199120351859,1.3506597361055577,1.3510995601759297,1.3515393842463015,1.3519792083166733,1.352419032387045,1.352858856457417,1.353298680527789,1.3537385045981607,1.3541783286685325,1.3546181527389045,1.3550579768092763,1.355497800879648,1.35593762495002,1.356377449020392,1.3568172730907637,1.3572570971611355,1.3576969212315073,1.3581367453018793,1.3585765693722511,1.359016393442623,1.3594562175129947,1.3598960415833667,1.3603358656537385,1.3607756897241103,1.3612155137944821,1.3616553378648542,1.362095161935226,1.3625349860055977,1.3629748100759695,1.3634146341463416,1.3638544582167134,1.3642942822870852,1.364734106357457,1.365173930427829,1.3656137544982008,1.3660535785685726,1.3664934026389444,1.3669332267093162,1.3673730507796882,1.36781287485006,1.3682526989204318,1.3686925229908036,1.3691323470611756,1.3695721711315474,1.3700119952019192,1.370451819272291,1.370891643342663,1.3713314674130348,1.3717712914834066,1.3722111155537784,1.3726509396241504,1.3730907636945222,1.373530587764894,1.3739704118352658,1.3744102359056378,1.3748500599760096,1.3752898840463814,1.3757297081167532,1.3761695321871252,1.376609356257497,1.3770491803278688,1.3774890043982406,1.3779288284686126,1.3783686525389844,1.3788084766093562,1.379248300679728,1.3796881247501,1.3801279488204719,1.3805677728908436,1.3810075969612154,1.3814474210315875,1.3818872451019593,1.382327069172331,1.3827668932427029,1.3832067173130749,1.3836465413834467,1.3840863654538185,1.3845261895241903,1.3849660135945623,1.385405837664934,1.3858456617353059,1.3862854858056777,1.3867253098760495,1.3871651339464215,1.3876049580167933,1.388044782087165,1.3884846061575369,1.388924430227909,1.3893642542982807,1.3898040783686525,1.3902439024390243,1.3906837265093963,1.391123550579768,1.39156337465014,1.3920031987205117,1.3924430227908837,1.3928828468612555,1.3933226709316273,1.3937624950019991,1.3942023190723711,1.394642143142743,1.3950819672131147,1.3955217912834865,1.3959616153538585,1.3964014394242303,1.3968412634946021,1.397281087564974,1.397720911635346,1.3981607357057177,1.3986005597760895,1.3990403838464613,1.3994802079168334,1.3999200319872052,1.400359856057577,1.4007996801279488,1.4012395041983208,1.4016793282686926,1.4021191523390644,1.4025589764094362,1.4029988004798082,1.40343862455018,1.4038784486205518,1.4043182726909236,1.4047580967612954,1.4051979208316674,1.4056377449020392,1.406077568972411,1.4065173930427828,1.4069572171131548,1.4073970411835266,1.4078368652538984,1.4082766893242702,1.4087165133946422,1.409156337465014,1.4095961615353858,1.4100359856057576,1.4104758096761296,1.4109156337465014,1.4113554578168732,1.411795281887245,1.412235105957617,1.4126749300279888,1.4131147540983606,1.4135545781687324,1.4139944022391044,1.4144342263094762,1.414874050379848,1.4153138744502198,1.4157536985205919,1.4161935225909636,1.4166333466613354,1.4170731707317072,1.4175129948020793,1.417952818872451,1.4183926429428229,1.4188324670131947,1.4192722910835667,1.4197121151539385,1.4201519392243103,1.420591763294682,1.421031587365054,1.4214714114354259,1.4219112355057977,1.4223510595761695,1.4227908836465415,1.4232307077169133,1.423670531787285,1.4241103558576569,1.4245501799280287,1.4249900039984007,1.4254298280687725,1.4258696521391443,1.426309476209516,1.426749300279888,1.42718912435026,1.4276289484206317,1.4280687724910035,1.4285085965613755,1.4289484206317473,1.4293882447021191,1.429828068772491,1.430267892842863,1.4307077169132347,1.4311475409836065,1.4315873650539783,1.4320271891243503,1.4324670131947221,1.432906837265094,1.4333466613354657,1.4337864854058378,1.4342263094762095,1.4346661335465813,1.4351059576169531,1.4355457816873252,1.435985605757697,1.4364254298280688,1.4368652538984406,1.4373050779688126,1.4377449020391844,1.4381847261095562,1.438624550179928,1.4390643742503,1.4395041983206718,1.4399440223910436,1.4403838464614154,1.4408236705317874,1.4412634946021592,1.441703318672531,1.4421431427429028,1.4425829668132746,1.4430227908836466,1.4434626149540184,1.4439024390243902,1.444342263094762,1.444782087165134,1.4452219112355058,1.4456617353058776,1.4461015593762494,1.4465413834466214,1.4469812075169932,1.447421031587365,1.4478608556577368,1.4483006797281088,1.4487405037984806,1.4491803278688524,1.4496201519392242,1.4500599760095962,1.450499800079968,1.4509396241503398,1.4513794482207116,1.4518192722910837,1.4522590963614554,1.4526989204318272,1.453138744502199,1.453578568572571,1.4540183926429429,1.4544582167133147,1.4548980407836865,1.4553378648540585,1.4557776889244303,1.456217512994802,1.4566573370651739,1.4570971611355459,1.4575369852059177,1.4579768092762895,1.4584166333466613,1.4588564574170333,1.459296281487405,1.4597361055577769,1.4601759296281487,1.4606157536985207,1.4610555777688925,1.4614954018392643,1.461935225909636,1.462375049980008,1.46281487405038,1.4632546981207517,1.4636945221911235,1.4641343462614953,1.4645741703318673,1.4650139944022391,1.465453818472611,1.4658936425429827,1.4663334666133547,1.4667732906837265,1.4672131147540983,1.4676529388244701,1.4680927628948421,1.468532586965214,1.4689724110355857,1.4694122351059575,1.4698520591763296,1.4702918832467013,1.4707317073170731,1.471171531387445,1.471611355457817,1.4720511795281888,1.4724910035985606,1.4729308276689324,1.4733706517393044,1.4738104758096762,1.474250299880048,1.4746901239504198,1.4751299480207918,1.4755697720911636,1.4760095961615354,1.4764494202319072,1.4768892443022792,1.477329068372651,1.4777688924430228,1.4782087165133946,1.4786485405837666,1.4790883646541384,1.4795281887245102,1.479968012794882,1.4804078368652538,1.4808476609356258,1.4812874850059976,1.4817273090763694,1.4821671331467412,1.4826069572171132,1.483046781287485,1.4834866053578568,1.4839264294282286,1.4843662534986006,1.4848060775689724,1.4852459016393442,1.485685725709716,1.486125549780088,1.4865653738504598,1.4870051979208316,1.4874450219912034,1.4878848460615755,1.4883246701319472,1.488764494202319,1.4892043182726908,1.4896441423430629,1.4900839664134347,1.4905237904838065,1.4909636145541783,1.4914034386245503,1.491843262694922,1.4922830867652939,1.4927229108356657,1.4931627349060377,1.4936025589764095,1.4940423830467813,1.494482207117153,1.494922031187525,1.4953618552578969,1.4958016793282687,1.4962415033986405,1.4966813274690125,1.4971211515393843,1.497560975609756,1.498000799680128,1.4984406237504997,1.4988804478208717,1.4993202718912435,1.4997600959616153,1.500199920031987,1.5006397441023591,1.501079568172731,1.5015193922431027,1.5019592163134745,1.5023990403838465,1.5028388644542183,1.5032786885245901,1.503718512594962,1.504158336665334,1.5045981607357057,1.5050379848060775,1.5054778088764493,1.5059176329468213,1.5063574570171931,1.506797281087565,1.5072371051579367,1.5076769292283088,1.5081167532986806,1.5085565773690524,1.5089964014394242,1.5094362255097962,1.509876049580168,1.5103158736505398,1.5107556977209116,1.5111955217912836,1.5116353458616554,1.5120751699320272,1.512514994002399,1.512954818072771,1.5133946421431428,1.5138344662135146,1.5142742902838864,1.5147141143542584,1.5151539384246302,1.515593762495002,1.5160335865653738,1.5164734106357458,1.5169132347061176,1.5173530587764894,1.5177928828468612,1.518232706917233,1.518672530987605,1.5191123550579768,1.5195521791283486,1.5199920031987204,1.5204318272690924,1.5208716513394642,1.521311475409836,1.5217512994802078,1.5221911235505798,1.5226309476209516,1.5230707716913234,1.5235105957616952,1.5239504198320672,1.524390243902439,1.5248300679728108,1.5252698920431826,1.5257097161135547,1.5261495401839265,1.5265893642542983,1.52702918832467,1.527469012395042,1.5279088364654139,1.5283486605357857,1.5287884846061575,1.5292283086765295,1.5296681327469013,1.530107956817273,1.5305477808876449,1.530987604958017,1.5314274290283887,1.5318672530987605,1.5323070771691323,1.5327469012395043,1.533186725309876,1.533626549380248,1.5340663734506197,1.5345061975209917,1.5349460215913635,1.5353858456617353,1.535825669732107,1.536265493802479,1.536705317872851,1.5371451419432227,1.5375849660135945,1.5380247900839663,1.5384646141543383,1.5389044382247101,1.539344262295082,1.5397840863654537,1.5402239104358257,1.5406637345061975,1.5411035585765693,1.5415433826469411,1.5419832067173131,1.542423030787685,1.5428628548580567,1.5433026789284285,1.5437425029988006,1.5441823270691724,1.5446221511395442,1.545061975209916,1.545501799280288,1.5459416233506598,1.5463814474210316,1.5468212714914034,1.5472610955617754,1.5477009196321472,1.548140743702519,1.5485805677728908,1.5490203918432628,1.5494602159136346,1.5499000399840064,1.5503398640543782,1.5507796881247502,1.551219512195122,1.5516593362654938,1.5520991603358656,1.5525389844062376,1.5529788084766094,1.5534186325469812,1.553858456617353,1.554298280687725,1.5547381047580968,1.5551779288284686,1.5556177528988404,1.5560575769692122,1.5564974010395842,1.556937225109956,1.5573770491803278,1.5578168732506996,1.5582566973210716,1.5586965213914434,1.5591363454618152,1.559576169532187,1.560015993602559,1.5604558176729308,1.5608956417433026,1.5613354658136744,1.5617752898840465,1.5622151139544183,1.56265493802479,1.5630947620951618,1.5635345861655339,1.5639744102359057,1.5644142343062775,1.5648540583766493,1.5652938824470213,1.565733706517393,1.5661735305877649,1.5666133546581367,1.5670531787285087,1.5674930027988805,1.5679328268692523,1.568372650939624,1.568812475009996,1.569252299080368,1.5696921231507397,1.5701319472211115,1.5705717712914835,1.5710115953618553,1.571451419432227,1.571891243502599,1.572331067572971,1.5727708916433427,1.5732107157137145,1.5736505397840863,1.574090363854458,1.5745301879248301,1.574970011995202,1.5754098360655737,1.5758496601359455,1.5762894842063175,1.5767293082766893,1.5771691323470611,1.577608956417433,1.578048780487805,1.5784886045581767,1.5789284286285485,1.5793682526989203,1.5798080767692924,1.5802479008396642,1.580687724910036,1.5811275489804077,1.5815673730507798,1.5820071971211516,1.5824470211915234,1.5828868452618952,1.5833266693322672,1.583766493402639,1.5842063174730108,1.5846461415433826,1.5850859656137546,1.5855257896841264,1.5859656137544982,1.58640543782487,1.586845261895242,1.5872850859656138,1.5877249100359856,1.5881647341063574,1.5886045581767294,1.5890443822471012,1.589484206317473,1.5899240303878448,1.5903638544582168,1.5908036785285886,1.5912435025989604,1.5916833266693322,1.5921231507397042,1.592562974810076,1.5930027988804478,1.5934426229508196,1.5938824470211914,1.5943222710915634,1.5947620951619352,1.595201919232307,1.5956417433026788,1.5960815673730508,1.5965213914434226,1.5969612155137944,1.5974010395841662,1.5978408636545383,1.59828068772491,1.5987205117952819,1.5991603358656536,1.5996001599360257,1.6000399840063975,1.6004798080767693,1.600919632147141,1.601359456217513,1.6017992802878849,1.6022391043582567,1.6026789284286285,1.6031187524990005,1.6035585765693723,1.603998400639744,1.6044382247101159,1.604878048780488,1.6053178728508597,1.6057576969212315,1.6061975209916033,1.6066373450619753,1.607077169132347,1.607516993202719,1.6079568172730907,1.6083966413434627,1.6088364654138345,1.6092762894842063,1.609716113554578,1.6101559376249501,1.610595761695322,1.6110355857656937,1.6114754098360655,1.6119152339064373,1.6123550579768093,1.6127948820471811,1.613234706117553,1.6136745301879247,1.6141143542582967,1.6145541783286685,1.6149940023990403,1.6154338264694121,1.6158736505397842,1.616313474610156,1.6167532986805278,1.6171931227508995,1.6176329468212716,1.6180727708916434,1.6185125949620152,1.618952419032387,1.619392243102759,1.6198320671731308,1.6202718912435026,1.6207117153138744,1.6211515393842464,1.6215913634546182,1.62203118752499,1.6224710115953618,1.6229108356657338,1.6233506597361056,1.6237904838064774,1.6242303078768492,1.6246701319472212,1.625109956017593,1.6255497800879648,1.6259896041583366,1.6264294282287086,1.6268692522990804,1.6273090763694522,1.627748900439824,1.628188724510196,1.6286285485805678,1.6290683726509396,1.6295081967213114,1.6299480207916832,1.6303878448620552,1.630827668932427,1.6312674930027988,1.6317073170731706,1.6321471411435426,1.6325869652139144,1.6330267892842862,1.633466613354658,1.63390643742503,1.6343462614954019,1.6347860855657737,1.6352259096361454,1.6356657337065175,1.6361055577768893,1.636545381847261,1.6369852059176329,1.6374250299880049,1.6378648540583767,1.6383046781287485,1.6387445021991203,1.6391843262694923,1.639624150339864,1.6400639744102359,1.6405037984806077,1.6409436225509797,1.6413834466213515,1.6418232706917233,1.642263094762095,1.642702918832467,1.643142742902839,1.6435825669732107,1.6440223910435825,1.6444622151139545,1.6449020391843263,1.6453418632546981,1.64578168732507,1.646221511395442,1.6466613354658137,1.6471011595361855,1.6475409836065573,1.6479808076769293,1.6484206317473011,1.648860455817673,1.6493002798880447,1.6497401039584165,1.6501799280287885,1.6506197520991603,1.6510595761695321,1.651499400239904,1.651939224310276,1.6523790483806478,1.6528188724510195,1.6532586965213913,1.6536985205917634,1.6541383446621352,1.654578168732507,1.6550179928028788,1.6554578168732508,1.6558976409436226,1.6563374650139944,1.6567772890843662,1.6572171131547382,1.65765693722511,1.6580967612954818,1.6585365853658536,1.6589764094362256,1.6594162335065974,1.6598560575769692,1.660295881647341,1.660735705717713,1.6611755297880848,1.6616153538584566,1.6620551779288284,1.6624950019992004,1.6629348260695722,1.663374650139944,1.6638144742103158,1.6642542982806878,1.6646941223510596,1.6651339464214314,1.6655737704918032,1.6660135945621752,1.666453418632547,1.6668932427029188,1.6673330667732906,1.6677728908436624,1.6682127149140344,1.6686525389844062,1.669092363054778,1.6695321871251498,1.6699720111955219,1.6704118352658937,1.6708516593362654,1.6712914834066372,1.6717313074770093,1.672171131547381,1.6726109556177529,1.6730507796881247,1.6734906037584967,1.6739304278288685,1.6743702518992403,1.674810075969612,1.675249900039984,1.6756897241103559,1.6761295481807277,1.6765693722510995,1.6770091963214715,1.6774490203918433,1.677888844462215,1.6783286685325869,1.678768492602959,1.6792083166733307,1.6796481407437025,1.6800879648140743,1.6805277888844463,1.6809676129548181,1.68140743702519,1.6818472610955617,1.6822870851659337,1.6827269092363055,1.6831667333066773,1.6836065573770491,1.6840463814474211,1.684486205517793,1.6849260295881647,1.6853658536585365,1.6858056777289085,1.6862455017992803,1.6866853258696521,1.687125149940024,1.6875649740103957,1.6880047980807678,1.6884446221511396,1.6888844462215113,1.6893242702918831,1.6897640943622552,1.690203918432627,1.6906437425029988,1.6910835665733706,1.6915233906437426,1.6919632147141144,1.6924030387844862,1.692842862854858,1.69328268692523,1.6937225109956018,1.6941623350659736,1.6946021591363454,1.6950419832067174,1.6954818072770892,1.695921631347461,1.6963614554178328,1.6968012794882048,1.6972411035585766,1.6976809276289484,1.6981207516993202,1.6985605757696922,1.699000399840064,1.6994402239104358,1.6998800479808076,1.7003198720511796,1.7007596961215514,1.7011995201919232,1.701639344262295,1.702079168332667,1.7025189924030388,1.7029588164734106,1.7033986405437824,1.7038384646141544,1.7042782886845262,1.704718112754898,1.7051579368252698,1.7055977608956416,1.7060375849660137,1.7064774090363855,1.7069172331067572,1.707357057177129,1.707796881247501,1.7082367053178729,1.7086765293882447,1.7091163534586165,1.7095561775289885,1.7099960015993603,1.710435825669732,1.7108756497401039,1.7113154738104759,1.7117552978808477,1.7121951219512195,1.7126349460215913,1.7130747700919633,1.713514594162335,1.7139544182327069,1.7143942423030787,1.7148340663734507,1.7152738904438225,1.7157137145141943,1.716153538584566,1.7165933626549381,1.71703318672531,1.7174730107956817,1.7179128348660535,1.7183526589364255,1.7187924830067973,1.7192323070771691,1.719672131147541,1.720111955217913,1.7205517792882847,1.7209916033586565,1.7214314274290283,1.7218712514994003,1.7223110755697721,1.722750899640144,1.7231907237105157,1.7236305477808875,1.7240703718512596,1.7245101959216314,1.7249500199920031,1.725389844062375,1.725829668132747,1.7262694922031188,1.7267093162734906,1.7271491403438624,1.7275889644142344,1.7280287884846062,1.728468612554978,1.7289084366253498,1.7293482606957218,1.7297880847660936,1.7302279088364654,1.7306677329068372,1.7311075569772092,1.731547381047581,1.7319872051179528,1.7324270291883246,1.7328668532586966,1.7333066773290684,1.7337465013994402,1.734186325469812,1.734626149540184,1.7350659736105558,1.7355057976809276,1.7359456217512994,1.7363854458216714,1.7368252698920432,1.737265093962415,1.7377049180327868,1.7381447421031588,1.7385845661735306,1.7390243902439024,1.7394642143142742,1.7399040383846462,1.740343862455018,1.7407836865253898,1.7412235105957616,1.7416633346661337,1.7421031587365055,1.7425429828068772,1.742982806877249,1.7434226309476208,1.7438624550179929,1.7443022790883647,1.7447421031587365,1.7451819272291083,1.7456217512994803,1.746061575369852,1.7465013994402239,1.7469412235105957,1.7473810475809677,1.7478208716513395,1.7482606957217113,1.748700519792083,1.749140343862455,1.749580167932827,1.7500199920031987,1.7504598160735705,1.7508996401439425,1.7513394642143143,1.751779288284686,1.752219112355058,1.75265893642543,1.7530987604958017,1.7535385845661735,1.7539784086365453,1.7544182327069173,1.7548580567772891,1.755297880847661,1.7557377049180327,1.7561775289884047,1.7566173530587765,1.7570571771291483,1.7574970011995201,1.7579368252698921,1.758376649340264,1.7588164734106357,1.7592562974810075,1.7596961215513796,1.7601359456217514,1.7605757696921231,1.761015593762495,1.7614554178328667,1.7618952419032388,1.7623350659736106,1.7627748900439824,1.7632147141143542,1.7636545381847262,1.764094362255098,1.7645341863254698,1.7649740103958416,1.7654138344662136,1.7658536585365854,1.7662934826069572,1.766733306677329,1.767173130747701,1.7676129548180728,1.7680527788884446,1.7684926029588164,1.7689324270291884,1.7693722510995602,1.769812075169932,1.7702518992403038,1.7706917233106758,1.7711315473810476,1.7715713714514194,1.7720111955217912,1.7724510195921632,1.772890843662535,1.7733306677329068,1.7737704918032786,1.7742103158736506,1.7746501399440224,1.7750899640143942,1.775529788084766,1.775969612155138,1.7764094362255098,1.7768492602958816,1.7772890843662534,1.7777289084366255,1.7781687325069973,1.778608556577369,1.7790483806477408,1.7794882047181129,1.7799280287884847,1.7803678528588565,1.7808076769292283,1.7812475009996,1.781687325069972,1.7821271491403439,1.7825669732107157,1.7830067972810875,1.7834466213514595,1.7838864454218313,1.784326269492203,1.7847660935625749,1.785205917632947,1.7856457417033187,1.7860855657736905,1.7865253898440623,1.7869652139144343,1.787405037984806,1.787844862055178,1.7882846861255497,1.7887245101959217,1.7891643342662935,1.7896041583366653,1.790043982407037,1.7904838064774091,1.790923630547781,1.7913634546181527,1.7918032786885245,1.7922431027588965,1.7926829268292683,1.7931227508996401,1.793562574970012,1.794002399040384,1.7944422231107557,1.7948820471811275,1.7953218712514993,1.7957616953218714,1.7962015193922432,1.796641343462615,1.7970811675329867,1.7975209916033588,1.7979608156737306,1.7984006397441024,1.7988404638144742,1.799280287884846,1.799720111955218,1.8001599360255898,1.8005997600959616,1.8010395841663334,1.8014794082367054,1.8019192323070772,1.802359056377449,1.8027988804478208,1.8032387045181928,1.8036785285885646,1.8041183526589364,1.8045581767293082,1.8049980007996802,1.805437824870052,1.8058776489404238,1.8063174730107956,1.8067572970811676,1.8071971211515394,1.8076369452219112,1.808076769292283,1.808516593362655,1.8089564174330268,1.8093962415033986,1.8098360655737704,1.8102758896441424,1.8107157137145142,1.811155537784886,1.8115953618552578,1.8120351859256298,1.8124750099960016,1.8129148340663734,1.8133546581367452,1.8137944822071173,1.814234306277489,1.8146741303478608,1.8151139544182326,1.8155537784886047,1.8159936025589765,1.8164334266293483,1.81687325069972,1.817313074770092,1.8177528988404639,1.8181927229108357,1.8186325469812075,1.8190723710515793,1.8195121951219513,1.819952019192323,1.8203918432626949,1.8208316673330667,1.8212714914034387,1.8217113154738105,1.8221511395441823,1.822590963614554,1.823030787684926,1.823470611755298,1.8239104358256697,1.8243502598960415,1.8247900839664135,1.8252299080367853,1.825669732107157,1.826109556177529,1.826549380247901,1.8269892043182727,1.8274290283886445,1.8278688524590163,1.8283086765293883,1.8287485005997601,1.829188324670132,1.8296281487405037,1.8300679728108757,1.8305077968812475,1.8309476209516193,1.8313874450219911,1.8318272690923632,1.832267093162735,1.8327069172331067,1.8331467413034785,1.8335865653738506,1.8340263894442224,1.8344662135145942,1.834906037584966,1.835345861655338,1.8357856857257098,1.8362255097960816,1.8366653338664534,1.8371051579368252,1.8375449820071972,1.837984806077569,1.8384246301479408,1.8388644542183126,1.8393042782886846,1.8397441023590564,1.8401839264294282,1.8406237504998,1.841063574570172,1.8415033986405438,1.8419432227109156,1.8423830467812874,1.8428228708516594,1.8432626949220312,1.843702518992403,1.8441423430627748,1.8445821671331468,1.8450219912035186,1.8454618152738904,1.8459016393442622,1.8463414634146342,1.846781287485006,1.8472211115553778,1.8476609356257496,1.8481007596961216,1.8485405837664934,1.8489804078368652,1.849420231907237,1.849860055977609,1.8502998800479808,1.8507397041183526,1.8511795281887244,1.8516193522590965,1.8520591763294683,1.85249900039984,1.8529388244702119,1.8533786485405839,1.8538184726109557,1.8542582966813275,1.8546981207516993,1.855137944822071,1.855577768892443,1.8560175929628149,1.8564574170331867,1.8568972411035585,1.8573370651739305,1.8577768892443023,1.858216713314674,1.8586565373850459,1.859096361455418,1.8595361855257897,1.8599760095961615,1.8604158336665333,1.8608556577369053,1.861295481807277,1.861735305877649,1.8621751299480207,1.8626149540183927,1.8630547780887645,1.8634946021591363,1.8639344262295081,1.8643742502998801,1.864814074370252,1.8652538984406237,1.8656937225109955,1.8661335465813675,1.8665733706517393,1.8670131947221111,1.867453018792483,1.867892842862855,1.8683326669332267,1.8687724910035985,1.8692123150739703,1.8696521391443424,1.8700919632147142,1.870531787285086,1.8709716113554578,1.8714114354258298,1.8718512594962016,1.8722910835665734,1.8727309076369452,1.8731707317073172,1.873610555777689,1.8740503798480608,1.8744902039184326,1.8749300279888044,1.8753698520591764,1.8758096761295482,1.87624950019992,1.8766893242702918,1.8771291483406638,1.8775689724110356,1.8780087964814074,1.8784486205517792,1.8788884446221512,1.879328268692523,1.8797680927628948,1.8802079168332666,1.8806477409036386,1.8810875649740104,1.8815273890443822,1.881967213114754,1.882407037185126,1.8828468612554978,1.8832866853258696,1.8837265093962414,1.8841663334666134,1.8846061575369852,1.885045981607357,1.8854858056777288,1.8859256297481009,1.8863654538184726,1.8868052778888444,1.8872451019592162,1.8876849260295883,1.88812475009996,1.8885645741703319,1.8890043982407037,1.8894442223110757,1.8898840463814475,1.8903238704518193,1.890763694522191,1.891203518592563,1.8916433426629349,1.8920831667333067,1.8925229908036785,1.8929628148740503,1.8934026389444223,1.893842463014794,1.8942822870851659,1.8947221111555377,1.8951619352259097,1.8956017592962815,1.8960415833666533,1.896481407437025,1.896921231507397,1.897361055577769,1.8978008796481407,1.8982407037185125,1.8986805277888845,1.8991203518592563,1.8995601759296281,1.9,1.900439824070372,1.9008796481407437,1.9013194722111155,1.9017592962814873,1.9021991203518593,1.9026389444222311,1.903078768492603,1.9035185925629747,1.9039584166333468,1.9043982407037185,1.9048380647740903,1.9052778888444621,1.9057177129148342,1.906157536985206,1.9065973610555778,1.9070371851259496,1.9074770091963216,1.9079168332666934,1.9083566573370652,1.908796481407437,1.909236305477809,1.9096761295481808,1.9101159536185526,1.9105557776889244,1.9109956017592964,1.9114354258296682,1.91187524990004,1.9123150739704118,1.9127548980407836,1.9131947221111556,1.9136345461815274,1.9140743702518992,1.914514194322271,1.914954018392643,1.9153938424630148,1.9158336665333866,1.9162734906037584,1.9167133146741304,1.9171531387445022,1.917592962814874,1.9180327868852458,1.9184726109556178,1.9189124350259896,1.9193522590963614,1.9197920831667332,1.9202319072371052,1.920671731307477,1.9211115553778488,1.9215513794482206,1.9219912035185927,1.9224310275889644,1.9228708516593362,1.923310675729708,1.92375049980008,1.9241903238704519,1.9246301479408237,1.9250699720111955,1.9255097960815675,1.9259496201519393,1.926389444222311,1.9268292682926829,1.9272690923630549,1.9277089164334267,1.9281487405037985,1.9285885645741703,1.9290283886445423,1.929468212714914,1.9299080367852859,1.9303478608556577,1.9307876849260295,1.9312275089964015,1.9316673330667733,1.932107157137145,1.932546981207517,1.932986805277889,1.9334266293482607,1.9338664534186325,1.9343062774890043,1.9347461015593763,1.9351859256297481,1.93562574970012,1.9360655737704917,1.9365053978408637,1.9369452219112355,1.9373850459816073,1.9378248700519791,1.9382646941223511,1.938704518192723,1.9391443422630947,1.9395841663334665,1.9400239904038385,1.9404638144742103,1.9409036385445821,1.941343462614954,1.941783286685326,1.9422231107556978,1.9426629348260696,1.9431027588964414,1.9435425829668134,1.9439824070371852,1.944422231107557,1.9448620551779288,1.9453018792483008,1.9457417033186726,1.9461815273890444,1.9466213514594162,1.9470611755297882,1.94750099960016,1.9479408236705318,1.9483806477409036,1.9488204718112754,1.9492602958816474,1.9497001199520192,1.950139944022391,1.9505797680927628,1.9510195921631348,1.9514594162335066,1.9518992403038784,1.9523390643742502,1.9527788884446222,1.953218712514994,1.9536585365853658,1.9540983606557376,1.9545381847261096,1.9549780087964814,1.9554178328668532,1.955857656937225,1.956297481007597,1.9567373050779688,1.9571771291483406,1.9576169532187124,1.9580567772890844,1.9584966013594562,1.958936425429828,1.9593762495001998,1.9598160735705719,1.9602558976409437,1.9606957217113155,1.9611355457816873,1.9615753698520593,1.962015193922431,1.9624550179928029,1.9628948420631747,1.9633346661335467,1.9637744902039185,1.9642143142742903,1.964654138344662,1.965093962415034,1.9655337864854059,1.9659736105557777,1.9664134346261495,1.9668532586965215,1.9672930827668933,1.967732906837265,1.968172730907637,1.9686125549780087,1.9690523790483807,1.9694922031187525,1.9699320271891243,1.970371851259496,1.9708116753298681,1.97125149940024,1.9716913234706117,1.9721311475409835,1.9725709716113555,1.9730107956817273,1.9734506197520991,1.973890443822471,1.974330267892843,1.9747700919632147,1.9752099160335865,1.9756497401039583,1.9760895641743303,1.9765293882447021,1.976969212315074,1.9774090363854457,1.9778488604558178,1.9782886845261896,1.9787285085965614,1.9791683326669331,1.9796081567373052,1.980047980807677,1.9804878048780488,1.9809276289484206,1.9813674530187926,1.9818072770891644,1.9822471011595362,1.982686925229908,1.98312674930028,1.9835665733706518,1.9840063974410236,1.9844462215113954,1.9848860455817674,1.9853258696521392,1.985765693722511,1.9862055177928828,1.9866453418632546,1.9870851659336266,1.9875249900039984,1.9879648140743702,1.988404638144742,1.988844462215114,1.9892842862854858,1.9897241103558576,1.9901639344262294,1.9906037584966014,1.9910435825669732,1.991483406637345,1.9919232307077168,1.9923630547780888,1.9928028788484606,1.9932427029188324,1.9936825269892042,1.9941223510595762,1.994562175129948,1.9950019992003198,1.9954418232706916,1.9958816473410637,1.9963214714114355,1.9967612954818073,1.997201119552179,1.997640943622551,1.9980807676929229,1.9985205917632947,1.9989604158336665,1.9994002399040385,1.9998400639744103,2.000279888044782,2.000719712115154,2.0011595361855257,2.0015993602558977,2.0020391843262697,2.0024790083966413,2.0029188324670133,2.003358656537385,2.003798480607757,2.004238304678129,2.0046781287485005,2.0051179528188725,2.005557776889244,2.005997600959616,2.006437425029988,2.0068772491003597,2.0073170731707317,2.0077568972411037,2.0081967213114753,2.0086365453818473,2.009076369452219,2.009516193522591,2.009956017592963,2.0103958416633345,2.0108356657337065,2.0112754898040786,2.01171531387445,2.012155137944822,2.0125949620151937,2.0130347860855657,2.0134746101559378,2.0139144342263093,2.0143542582966814,2.0147940823670534,2.015233906437425,2.015673730507797,2.0161135545781685,2.0165533786485406,2.0169932027189126,2.017433026789284,2.017872850859656,2.018312674930028,2.0187524990003998,2.019192323070772,2.0196321471411434,2.0200719712115154,2.0205117952818874,2.020951619352259,2.021391443422631,2.021831267493003,2.0222710915633746,2.0227109156337466,2.023150739704118,2.02359056377449,2.0240303878448622,2.024470211915234,2.024910035985606,2.0253498600559774,2.0257896841263494,2.0262295081967214,2.026669332267093,2.027109156337465,2.027548980407837,2.0279888044782086,2.0284286285485806,2.028868452618952,2.0293082766893242,2.0297481007596962,2.030187924830068,2.03062774890044,2.031067572970812,2.0315073970411834,2.0319472211115555,2.032387045181927,2.032826869252299,2.033266693322671,2.0337065173930426,2.0341463414634147,2.0345861655337867,2.0350259896041583,2.0354658136745303,2.035905637744902,2.036345461815274,2.036785285885646,2.0372251099560175,2.0376649340263895,2.0381047580967615,2.038544582167133,2.038984406237505,2.0394242303078767,2.0398640543782487,2.0403038784486207,2.0407437025189923,2.0411835265893643,2.0416233506597363,2.042063174730108,2.04250299880048,2.0429428228708515,2.0433826469412235,2.0438224710115955,2.044262295081967,2.044702119152339,2.0451419432227107,2.0455817672930827,2.0460215913634547,2.0464614154338263,2.0469012395041983,2.0473410635745704,2.047780887644942,2.048220711715314,2.0486605357856855,2.0491003598560575,2.0495401839264296,2.049980007996801,2.050419832067173,2.050859656137545,2.0512994802079167,2.0517393042782888,2.0521791283486603,2.0526189524190324,2.0530587764894044,2.053498600559776,2.053938424630148,2.05437824870052,2.0548180727708916,2.0552578968412636,2.055697720911635,2.056137544982007,2.056577369052379,2.0570171931227508,2.057457017193123,2.057896841263495,2.0583366653338664,2.0587764894042384,2.05921631347461,2.059656137544982,2.060095961615354,2.0605357856857256,2.0609756097560976,2.0614154338264696,2.061855257896841,2.0622950819672132,2.062734906037585,2.063174730107957,2.063614554178329,2.0640543782487004,2.0644942023190724,2.064934026389444,2.065373850459816,2.065813674530188,2.0662534986005596,2.0666933226709316,2.0671331467413037,2.0675729708116752,2.0680127948820473,2.068452618952419,2.068892443022791,2.069332267093163,2.0697720911635344,2.0702119152339065,2.0706517393042785,2.07109156337465,2.071531387445022,2.0719712115153937,2.0724110355857657,2.0728508596561377,2.0732906837265093,2.0737305077968813,2.0741703318672533,2.074610155937625,2.075049980007997,2.0754898040783685,2.0759296281487405,2.0763694522191125,2.076809276289484,2.077249100359856,2.077688924430228,2.0781287485005997,2.0785685725709717,2.0790083966413433,2.0794482207117153,2.0798880447820873,2.080327868852459,2.080767692922831,2.0812075169932025,2.0816473410635745,2.0820871651339465,2.082526989204318,2.08296681327469,2.083406637345062,2.0838464614154337,2.0842862854858057,2.0847261095561773,2.0851659336265493,2.0856057576969214,2.086045581767293,2.086485405837665,2.086925229908037,2.0873650539784085,2.0878048780487806,2.088244702119152,2.088684526189524,2.089124350259896,2.0895641743302678,2.0900039984006398,2.090443822471012,2.0908836465413834,2.0913234706117554,2.091763294682127,2.092203118752499,2.092642942822871,2.0930827668932426,2.0935225909636146,2.0939624150339866,2.094402239104358,2.09484206317473,2.095281887245102,2.095721711315474,2.096161535385846,2.0966013594562174,2.0970411835265894,2.0974810075969614,2.097920831667333,2.098360655737705,2.0988004798080766,2.0992403038784486,2.0996801279488206,2.100119952019192,2.1005597760895642,2.100999600159936,2.101439424230308,2.10187924830068,2.1023190723710514,2.1027588964414234,2.1031987205117955,2.103638544582167,2.104078368652539,2.1045181927229106,2.1049580167932826,2.1053978408636547,2.1058376649340262,2.1062774890043983,2.1067173130747703,2.107157137145142,2.107596961215514,2.1080367852858855,2.1084766093562575,2.1089164334266295,2.109356257497001,2.109796081567373,2.110235905637745,2.1106757297081167,2.1111155537784887,2.1115553778488603,2.1119952019192323,2.1124350259896043,2.112874850059976,2.113314674130348,2.11375449820072,2.1141943222710915,2.1146341463414635,2.115073970411835,2.115513794482207,2.115953618552579,2.1163934426229507,2.1168332666933227,2.1172730907636947,2.1177129148340663,2.1181527389044383,2.11859256297481,2.119032387045182,2.119472211115554,2.1199120351859255,2.1203518592562975,2.120791683326669,2.121231507397041,2.121671331467413,2.1221111555377847,2.1225509796081568,2.1229908036785288,2.1234306277489003,2.1238704518192724,2.124310275889644,2.124750099960016,2.125189924030388,2.1256297481007596,2.1260695721711316,2.1265093962415036,2.126949220311875,2.127389044382247,2.1278288684526188,2.128268692522991,2.128708516593363,2.1291483406637344,2.1295881647341064,2.1300279888044784,2.13046781287485,2.130907636945222,2.1313474610155936,2.1317872850859656,2.1322271091563376,2.132666933226709,2.133106757297081,2.1335465813674532,2.133986405437825,2.134426229508197,2.1348660535785684,2.1353058776489404,2.1357457017193124,2.136185525789684,2.136625349860056,2.1370651739304276,2.1375049980007996,2.1379448220711716,2.138384646141543,2.1388244702119152,2.1392642942822873,2.139704118352659,2.140143942423031,2.1405837664934024,2.1410235905637744,2.1414634146341465,2.141903238704518,2.14234306277489,2.142782886845262,2.1432227109156337,2.1436625349860057,2.1441023590563772,2.1445421831267493,2.1449820071971213,2.145421831267493,2.145861655337865,2.146301479408237,2.1467413034786085,2.1471811275489805,2.147620951619352,2.148060775689724,2.148500599760096,2.1489404238304677,2.1493802479008397,2.1498200719712117,2.1502598960415833,2.1506997201119553,2.151139544182327,2.151579368252699,2.152019192323071,2.1524590163934425,2.1528988404638145,2.1533386645341865,2.153778488604558,2.15421831267493,2.1546581367453017,2.1550979608156737,2.1555377848860457,2.1559776089564173,2.1564174330267893,2.156857257097161,2.157297081167533,2.157736905237905,2.1581767293082765,2.1586165533786486,2.1590563774490206,2.159496201519392,2.159936025589764,2.1603758496601357,2.1608156737305078,2.1612554978008798,2.1616953218712514,2.1621351459416234,2.1625749700119954,2.163014794082367,2.163454618152739,2.1638944422231106,2.1643342662934826,2.1647740903638546,2.165213914434226,2.165653738504598,2.16609356257497,2.166533386645342,2.166973210715714,2.1674130347860854,2.1678528588564574,2.1682926829268294,2.168732506997201,2.169172331067573,2.169612155137945,2.1700519792083166,2.1704918032786886,2.17093162734906,2.171371451419432,2.1718112754898042,2.172251099560176,2.172690923630548,2.17313074770092,2.1735705717712914,2.1740103958416634,2.174450219912035,2.174890043982407,2.175329868052779,2.1757696921231506,2.1762095161935227,2.1766493402638942,2.1770891643342662,2.1775289884046383,2.17796881247501,2.178408636545382,2.178848460615754,2.1792882846861255,2.1797281087564975,2.180167932826869,2.180607756897241,2.181047580967613,2.1814874050379847,2.1819272291083567,2.1823670531787287,2.1828068772491003,2.1832467013194723,2.183686525389844,2.184126349460216,2.184566173530588,2.1850059976009595,2.1854458216713315,2.1858856457417035,2.186325469812075,2.186765293882447,2.1872051179528187,2.1876449420231907,2.1880847660935627,2.1885245901639343,2.1889644142343063,2.1894042383046783,2.18984406237505,2.190283886445422,2.1907237105157935,2.1911635345861655,2.1916033586565375,2.192043182726909,2.192483006797281,2.1929228308676527,2.1933626549380247,2.1938024790083968,2.1942423030787683,2.1946821271491403,2.1951219512195124,2.195561775289884,2.196001599360256,2.1964414234306275,2.1968812475009996,2.1973210715713716,2.197760895641743,2.198200719712115,2.198640543782487,2.1990803678528588,2.199520191923231,2.1999600159936024,2.2003998400639744,2.2008396641343464,2.201279488204718,2.20171931227509,2.202159136345462,2.2025989604158336,2.2030387844862056,2.203478608556577,2.203918432626949,2.204358256697321,2.204798080767693,2.205237904838065,2.205677728908437,2.2061175529788084,2.2065573770491804,2.206997201119552,2.207437025189924,2.207876849260296,2.2083166733306676,2.2087564974010396,2.2091963214714117,2.2096361455417832,2.2100759696121552,2.210515793682527,2.210955617752899,2.211395441823271,2.2118352658936424,2.2122750899640145,2.212714914034386,2.213154738104758,2.21359456217513,2.2140343862455016,2.2144742103158737,2.2149140343862457,2.2153538584566173,2.2157936825269893,2.216233506597361,2.216673330667733,2.217113154738105,2.2175529788084765,2.2179928028788485,2.2184326269492205,2.218872451019592,2.219312275089964,2.2197520991603357,2.2201919232307077,2.2206317473010797,2.2210715713714513,2.2215113954418233,2.2219512195121953,2.222391043582567,2.222830867652939,2.2232706917233105,2.2237105157936825,2.2241503398640545,2.224590163934426,2.225029988004798,2.22546981207517,2.2259096361455417,2.2263494602159137,2.2267892842862853,2.2272291083566573,2.2276689324270293,2.228108756497401,2.228548580567773,2.228988404638145,2.2294282287085165,2.2298680527788886,2.23030787684926,2.230747700919632,2.231187524990004,2.2316273490603757,2.2320671731307478,2.2325069972011193,2.2329468212714914,2.2333866453418634,2.233826469412235,2.234266293482607,2.234706117552979,2.2351459416233506,2.2355857656937226,2.236025589764094,2.236465413834466,2.236905237904838,2.2373450619752098,2.237784886045582,2.238224710115954,2.2386645341863254,2.2391043582566974,2.239544182327069,2.239984006397441,2.240423830467813,2.2408636545381846,2.2413034786085566,2.2417433026789286,2.2421831267493,2.2426229508196722,2.243062774890044,2.243502598960416,2.243942423030788,2.2443822471011594,2.2448220711715314,2.2452618952419034,2.245701719312275,2.246141543382647,2.2465813674530186,2.2470211915233906,2.2474610155937627,2.2479008396641342,2.2483406637345063,2.2487804878048783,2.24922031187525,2.249660135945622,2.2500999600159934,2.2505397840863655,2.2509796081567375,2.251419432227109,2.251859256297481,2.2522990803678526,2.2527389044382247,2.2531787285085967,2.2536185525789683,2.2540583766493403,2.2544982007197123,2.254938024790084,2.255377848860456,2.2558176729308275,2.2562574970011995,2.2566973210715715,2.257137145141943,2.257576969212315,2.258016793282687,2.2584566173530587,2.2588964414234307,2.2593362654938023,2.2597760895641743,2.2602159136345463,2.260655737704918,2.26109556177529,2.261535385845662,2.2619752099160335,2.2624150339864055,2.262854858056777,2.263294682127149,2.263734506197521,2.2641743302678927,2.2646141543382647,2.2650539784086368,2.2654938024790083,2.2659336265493804,2.266373450619752,2.266813274690124,2.267253098760496,2.2676929228308675,2.2681327469012396,2.268572570971611,2.269012395041983,2.269452219112355,2.2698920431827267,2.2703318672530988,2.270771691323471,2.2712115153938424,2.2716513394642144,2.272091163534586,2.272530987604958,2.27297081167533,2.2734106357457016,2.2738504598160736,2.2742902838864456,2.274730107956817,2.275169932027189,2.2756097560975608,2.276049580167933,2.276489404238305,2.2769292283086764,2.2773690523790484,2.2778088764494204,2.278248700519792,2.278688524590164,2.2791283486605356,2.2795681727309076,2.2800079968012796,2.280447820871651,2.2808876449420232,2.2813274690123952,2.281767293082767,2.282207117153139,2.2826469412235104,2.2830867652938824,2.2835265893642545,2.283966413434626,2.284406237504998,2.28484606157537,2.2852858856457416,2.2857257097161137,2.2861655337864852,2.2866053578568573,2.2870451819272293,2.287485005997601,2.287924830067973,2.2883646541383444,2.2888044782087165,2.2892443022790885,2.28968412634946,2.290123950419832,2.290563774490204,2.2910035985605757,2.2914434226309477,2.2918832467013193,2.2923230707716913,2.2927628948420633,2.293202718912435,2.293642542982807,2.294082367053179,2.2945221911235505,2.2949620151939225,2.295401839264294,2.295841663334666,2.296281487405038,2.2967213114754097,2.2971611355457817,2.2976009596161537,2.2980407836865253,2.2984806077568973,2.298920431827269,2.299360255897641,2.299800079968013,2.3002399040383845,2.3006797281087565,2.3011195521791286,2.3015593762495,2.301999200319872,2.3024390243902437,2.3028788484606157,2.3033186725309878,2.3037584966013593,2.3041983206717314,2.3046381447421034,2.305077968812475,2.305517792882847,2.3059576169532185,2.3063974410235906,2.3068372650939626,2.307277089164334,2.307716913234706,2.3081567373050778,2.3085965613754498,2.309036385445822,2.3094762095161934,2.3099160335865654,2.3103558576569374,2.310795681727309,2.311235505797681,2.3116753298680526,2.3121151539384246,2.3125549780087966,2.312994802079168,2.31343462614954,2.3138744502199122,2.314314274290284,2.314754098360656,2.3151939224310274,2.3156337465013994,2.3160735705717714,2.316513394642143,2.316953218712515,2.317393042782887,2.3178328668532586,2.3182726909236306,2.318712514994002,2.3191523390643742,2.3195921631347463,2.320031987205118,2.32047181127549,2.320911635345862,2.3213514594162334,2.3217912834866055,2.322231107556977,2.322670931627349,2.323110755697721,2.3235505797680926,2.3239904038384647,2.3244302279088362,2.3248700519792083,2.3253098760495803,2.325749700119952,2.326189524190324,2.326629348260696,2.3270691723310675,2.3275089964014395,2.327948820471811,2.328388644542183,2.328828468612555,2.3292682926829267,2.3297081167532987,2.3301479408236707,2.3305877648940423,2.3310275889644143,2.331467413034786,2.331907237105158,2.33234706117553,2.3327868852459015,2.3332267093162735,2.3336665333866455,2.334106357457017,2.334546181527389,2.3349860055977607,2.3354258296681327,2.3358656537385047,2.3363054778088763,2.3367453018792483,2.3371851259496204,2.337624950019992,2.338064774090364,2.3385045981607355,2.3389444222311075,2.3393842463014796,2.339824070371851,2.340263894442223,2.340703718512595,2.3411435425829668,2.3415833666533388,2.3420231907237103,2.3424630147940824,2.3429028388644544,2.343342662934826,2.343782487005198,2.3442223110755696,2.3446621351459416,2.3451019592163136,2.345541783286685,2.345981607357057,2.346421431427429,2.346861255497801,2.347301079568173,2.3477409036385444,2.3481807277089164,2.3486205517792884,2.34906037584966,2.349500199920032,2.349940023990404,2.3503798480607756,2.3508196721311476,2.351259496201519,2.351699320271891,2.3521391443422632,2.352578968412635,2.353018792483007,2.353458616553379,2.3538984406237504,2.3543382646941224,2.354778088764494,2.355217912834866,2.355657736905238,2.3560975609756096,2.3565373850459816,2.3569772091163537,2.3574170331867252,2.3578568572570973,2.358296681327469,2.358736505397841,2.359176329468213,2.3596161535385844,2.3600559776089565,2.3604958016793285,2.3609356257497,2.361375449820072,2.3618152738904437,2.3622550979608157,2.3626949220311877,2.3631347461015593,2.3635745701719313,2.364014394242303,2.364454218312675,2.364894042383047,2.3653338664534185,2.3657736905237905,2.3662135145941625,2.366653338664534,2.367093162734906,2.3675329868052777,2.3679728108756497,2.3684126349460217,2.3688524590163933,2.3692922830867653,2.3697321071571373,2.370171931227509,2.370611755297881,2.3710515793682525,2.3714914034386245,2.3719312275089965,2.372371051579368,2.37281087564974,2.373250699720112,2.3736905237904837,2.3741303478608557,2.3745701719312273,2.3750099960015993,2.3754498200719714,2.375889644142343,2.376329468212715,2.376769292283087,2.3772091163534586,2.3776489404238306,2.378088764494202,2.378528588564574,2.378968412634946,2.3794082367053178,2.3798480607756898,2.380287884846062,2.3807277089164334,2.3811675329868054,2.381607357057177,2.382047181127549,2.382487005197921,2.3829268292682926,2.3833666533386646,2.383806477409036,2.384246301479408,2.38468612554978,2.385125949620152,2.385565773690524,2.386005597760896,2.3864454218312674,2.3868852459016394,2.387325069972011,2.387764894042383,2.388204718112755,2.3886445421831266,2.3890843662534986,2.3895241903238706,2.389964014394242,2.3904038384646142,2.390843662534986,2.391283486605358,2.39172331067573,2.3921631347461014,2.3926029588164734,2.3930427828868455,2.393482606957217,2.393922431027589,2.3943622550979606,2.3948020791683327,2.3952419032387047,2.3956817273090762,2.3961215513794483,2.3965613754498203,2.397001199520192,2.397441023590564,2.3978808476609355,2.3983206717313075,2.3987604958016795,2.399200319872051,2.399640143942423,2.4000799680127947,2.4005197920831667,2.4009596161535387,2.4013994402239103,2.4018392642942823,2.4022790883646543,2.402718912435026,2.403158736505398,2.4035985605757695,2.4040383846461415,2.4044782087165135,2.404918032786885,2.405357856857257,2.405797680927629,2.4062375049980007,2.4066773290683727,2.4071171531387443,2.4075569772091163,2.4079968012794883,2.40843662534986,2.408876449420232,2.409316273490604,2.4097560975609755,2.4101959216313475,2.410635745701719,2.411075569772091,2.411515393842463,2.4119552179128347,2.4123950419832068,2.4128348660535788,2.4132746901239504,2.4137145141943224,2.414154338264694,2.414594162335066,2.415033986405438,2.4154738104758096,2.4159136345461816,2.4163534586165536,2.416793282686925,2.417233106757297,2.4176729308276688,2.418112754898041,2.418552578968413,2.4189924030387844,2.4194322271091564,2.419872051179528,2.4203118752499,2.420751699320272,2.4211915233906436,2.4216313474610156,2.4220711715313876,2.422510995601759,2.422950819672131,2.423390643742503,2.423830467812875,2.424270291883247,2.4247101159536184,2.4251499400239904,2.4255897640943624,2.426029588164734,2.426469412235106,2.4269092363054776,2.4273490603758496,2.4277888844462217,2.4282287085165932,2.4286685325869652,2.4291083566573373,2.429548180727709,2.429988004798081,2.4304278288684524,2.4308676529388245,2.4313074770091965,2.431747301079568,2.43218712514994,2.432626949220312,2.4330667732906837,2.4335065973610557,2.4339464214314273,2.4343862455017993,2.4348260695721713,2.435265893642543,2.435705717712915,2.436145541783287,2.4365853658536585,2.4370251899240305,2.437465013994402,2.437904838064774,2.438344662135146,2.4387844862055177,2.4392243102758897,2.4396641343462613,2.4401039584166333,2.4405437824870053,2.440983606557377,2.441423430627749,2.441863254698121,2.4423030787684925,2.4427429028388645,2.443182726909236,2.443622550979608,2.44406237504998,2.4445021991203517,2.4449420231907237,2.4453818472610958,2.4458216713314673,2.4462614954018393,2.446701319472211,2.447141143542583,2.447580967612955,2.4480207916833265,2.4484606157536986,2.4489004398240706,2.449340263894442,2.449780087964814,2.4502199120351857,2.4506597361055578,2.45109956017593,2.4515393842463014,2.4519792083166734,2.4524190323870454,2.452858856457417,2.453298680527789,2.4537385045981606,2.4541783286685326,2.4546181527389046,2.455057976809276,2.455497800879648,2.4559376249500198,2.456377449020392,2.456817273090764,2.4572570971611354,2.4576969212315074,2.4581367453018794,2.458576569372251,2.459016393442623,2.4594562175129946,2.4598960415833666,2.4603358656537386,2.46077568972411,2.4612155137944822,2.4616553378648542,2.462095161935226,2.462534986005598,2.4629748100759694,2.4634146341463414,2.4638544582167135,2.464294282287085,2.464734106357457,2.465173930427829,2.4656137544982006,2.4660535785685727,2.4664934026389442,2.4669332267093163,2.4673730507796883,2.46781287485006,2.468252698920432,2.468692522990804,2.4691323470611755,2.4695721711315475,2.470011995201919,2.470451819272291,2.470891643342663,2.4713314674130347,2.4717712914834067,2.4722111155537787,2.4726509396241503,2.4730907636945223,2.473530587764894,2.473970411835266,2.474410235905638,2.4748500599760095,2.4752898840463815,2.475729708116753,2.476169532187125,2.476609356257497,2.4770491803278687,2.4774890043982407,2.4779288284686127,2.4783686525389843,2.4788084766093563,2.479248300679728,2.4796881247501,2.480127948820472,2.4805677728908435,2.4810075969612155,2.4814474210315876,2.481887245101959,2.482327069172331,2.4827668932427027,2.4832067173130747,2.4836465413834468,2.4840863654538183,2.4845261895241904,2.4849660135945624,2.485405837664934,2.485845661735306,2.4862854858056775,2.4867253098760496,2.4871651339464216,2.487604958016793,2.488044782087165,2.488484606157537,2.4889244302279088,2.489364254298281,2.4898040783686524,2.4902439024390244,2.4906837265093964,2.491123550579768,2.49156337465014,2.492003198720512,2.4924430227908836,2.4928828468612556,2.493322670931627,2.493762495001999,2.494202319072371,2.494642143142743,2.495081967213115,2.4955217912834864,2.4959616153538584,2.4964014394242304,2.496841263494602,2.497281087564974,2.497720911635346,2.4981607357057176,2.4986005597760896,2.499040383846461,2.4994802079168332,2.4999200319872052,2.500359856057577,2.500799680127949,2.501239504198321,2.5016793282686924,2.5021191523390645,2.502558976409436,2.502998800479808,2.50343862455018,2.5038784486205516,2.5043182726909237,2.5047580967612957,2.5051979208316673,2.5056377449020393,2.506077568972411,2.506517393042783,2.506957217113155,2.5073970411835265,2.5078368652538985,2.5082766893242705,2.508716513394642,2.509156337465014,2.5095961615353857,2.5100359856057577,2.5104758096761297,2.5109156337465013,2.5113554578168733,2.5117952818872453,2.512235105957617,2.512674930027989,2.5131147540983605,2.5135545781687325,2.5139944022391045,2.514434226309476,2.514874050379848,2.5153138744502197,2.5157536985205917,2.5161935225909637,2.5166333466613353,2.5170731707317073,2.5175129948020794,2.517952818872451,2.518392642942823,2.5188324670131945,2.5192722910835665,2.5197121151539386,2.52015193922431,2.520591763294682,2.521031587365054,2.5214714114354257,2.5219112355057978,2.5223510595761693,2.5227908836465414,2.5232307077169134,2.523670531787285,2.524110355857657,2.524550179928029,2.5249900039984006,2.5254298280687726,2.525869652139144,2.526309476209516,2.526749300279888,2.5271891243502598,2.527628948420632,2.528068772491004,2.5285085965613754,2.5289484206317474,2.529388244702119,2.529828068772491,2.530267892842863,2.5307077169132346,2.5311475409836066,2.531587365053978,2.53202718912435,2.5324670131947222,2.532906837265094,2.533346661335466,2.533786485405838,2.5342263094762094,2.5346661335465814,2.535105957616953,2.535545781687325,2.535985605757697,2.5364254298280686,2.5368652538984406,2.5373050779688127,2.5377449020391842,2.5381847261095563,2.538624550179928,2.5390643742503,2.539504198320672,2.5399440223910434,2.5403838464614155,2.5408236705317875,2.541263494602159,2.541703318672531,2.5421431427429027,2.5425829668132747,2.5430227908836467,2.5434626149540183,2.5439024390243903,2.5443422630947623,2.544782087165134,2.545221911235506,2.5456617353058775,2.5461015593762495,2.5465413834466215,2.546981207516993,2.547421031587365,2.547860855657737,2.5483006797281087,2.5487405037984807,2.5491803278688523,2.5496201519392243,2.5500599760095963,2.550499800079968,2.55093962415034,2.5513794482207115,2.5518192722910835,2.5522590963614555,2.552698920431827,2.553138744502199,2.553578568572571,2.5540183926429427,2.5544582167133147,2.5548980407836863,2.5553378648540583,2.5557776889244304,2.556217512994802,2.556657337065174,2.557097161135546,2.5575369852059175,2.5579768092762896,2.558416633346661,2.558856457417033,2.559296281487405,2.5597361055577768,2.5601759296281488,2.560615753698521,2.5610555777688924,2.5614954018392644,2.561935225909636,2.562375049980008,2.56281487405038,2.5632546981207516,2.5636945221911236,2.5641343462614956,2.564574170331867,2.565013994402239,2.565453818472611,2.565893642542983,2.566333466613355,2.5667732906837264,2.5672131147540984,2.5676529388244704,2.568092762894842,2.568532586965214,2.5689724110355856,2.5694122351059576,2.5698520591763296,2.570291883246701,2.5707317073170732,2.571171531387445,2.571611355457817,2.572051179528189,2.5724910035985604,2.5729308276689324,2.5733706517393045,2.573810475809676,2.574250299880048,2.5746901239504196,2.5751299480207916,2.5755697720911637,2.5760095961615352,2.5764494202319073,2.5768892443022793,2.577329068372651,2.577768892443023,2.5782087165133944,2.5786485405837665,2.5790883646541385,2.57952818872451,2.579968012794882,2.580407836865254,2.5808476609356257,2.5812874850059977,2.5817273090763693,2.5821671331467413,2.5826069572171133,2.583046781287485,2.583486605357857,2.583926429428229,2.5843662534986005,2.5848060775689725,2.585245901639344,2.585685725709716,2.586125549780088,2.5865653738504597,2.5870051979208317,2.5874450219912033,2.5878848460615753,2.5883246701319473,2.588764494202319,2.589204318272691,2.589644142343063,2.5900839664134345,2.5905237904838065,2.590963614554178,2.59140343862455,2.591843262694922,2.5922830867652937,2.5927229108356658,2.5931627349060378,2.5936025589764093,2.5940423830467814,2.594482207117153,2.594922031187525,2.595361855257897,2.5958016793282686,2.5962415033986406,2.5966813274690126,2.597121151539384,2.597560975609756,2.5980007996801278,2.5984406237505,2.598880447820872,2.5993202718912434,2.5997600959616154,2.6001999200319874,2.600639744102359,2.601079568172731,2.6015193922431026,2.6019592163134746,2.6023990403838466,2.602838864454218,2.60327868852459,2.6037185125949622,2.604158336665334,2.604598160735706,2.6050379848060774,2.6054778088764494,2.6059176329468214,2.606357457017193,2.606797281087565,2.6072371051579366,2.6076769292283086,2.6081167532986806,2.608556577369052,2.6089964014394242,2.6094362255097963,2.609876049580168,2.61031587365054,2.6107556977209114,2.6111955217912834,2.6116353458616555,2.612075169932027,2.612514994002399,2.612954818072771,2.6133946421431427,2.6138344662135147,2.6142742902838862,2.6147141143542583,2.6151539384246303,2.615593762495002,2.616033586565374,2.616473410635746,2.6169132347061175,2.6173530587764895,2.617792882846861,2.618232706917233,2.618672530987605,2.6191123550579767,2.6195521791283487,2.6199920031987207,2.6204318272690923,2.6208716513394643,2.621311475409836,2.621751299480208,2.62219112355058,2.6226309476209515,2.6230707716913235,2.6235105957616955,2.623950419832067,2.624390243902439,2.6248300679728107,2.6252698920431827,2.6257097161135547,2.6261495401839263,2.6265893642542983,2.62702918832467,2.627469012395042,2.627908836465414,2.6283486605357855,2.6287884846061575,2.6292283086765296,2.629668132746901,2.630107956817273,2.6305477808876447,2.6309876049580168,2.6314274290283888,2.6318672530987604,2.6323070771691324,2.6327469012395044,2.633186725309876,2.633626549380248,2.6340663734506196,2.6345061975209916,2.6349460215913636,2.635385845661735,2.635825669732107,2.636265493802479,2.636705317872851,2.637145141943223,2.6375849660135944,2.6380247900839664,2.6384646141543384,2.63890443822471,2.639344262295082,2.639784086365454,2.6402239104358256,2.6406637345061976,2.641103558576569,2.641543382646941,2.6419832067173132,2.642423030787685,2.642862854858057,2.643302678928429,2.6437425029988004,2.6441823270691724,2.644622151139544,2.645061975209916,2.645501799280288,2.6459416233506596,2.6463814474210317,2.6468212714914032,2.6472610955617752,2.6477009196321473,2.648140743702519,2.648580567772891,2.649020391843263,2.6494602159136345,2.6499000399840065,2.650339864054378,2.65077968812475,2.651219512195122,2.6516593362654937,2.6520991603358657,2.6525389844062377,2.6529788084766093,2.6534186325469813,2.653858456617353,2.654298280687725,2.654738104758097,2.6551779288284685,2.6556177528988405,2.6560575769692125,2.656497401039584,2.656937225109956,2.6573770491803277,2.6578168732506997,2.6582566973210717,2.6586965213914433,2.6591363454618153,2.6595761695321873,2.660015993602559,2.660455817672931,2.6608956417433025,2.6613354658136745,2.6617752898840465,2.662215113954418,2.66265493802479,2.6630947620951617,2.6635345861655337,2.6639744102359058,2.6644142343062773,2.6648540583766493,2.6652938824470214,2.665733706517393,2.666173530587765,2.6666133546581365,2.6670531787285086,2.6674930027988806,2.667932826869252,2.668372650939624,2.668812475009996,2.6692522990803678,2.66969212315074,2.6701319472211114,2.6705717712914834,2.6710115953618554,2.671451419432227,2.671891243502599,2.672331067572971,2.6727708916433426,2.6732107157137146,2.673650539784086,2.674090363854458,2.67453018792483,2.674970011995202,2.675409836065574,2.675849660135946,2.6762894842063174,2.6767293082766894,2.677169132347061,2.677608956417433,2.678048780487805,2.6784886045581766,2.6789284286285486,2.6793682526989206,2.6798080767692922,2.6802479008396642,2.680687724910036,2.681127548980408,2.68156737305078,2.6820071971211514,2.6824470211915235,2.682886845261895,2.683326669332267,2.683766493402639,2.6842063174730106,2.6846461415433827,2.6850859656137547,2.6855257896841263,2.6859656137544983,2.68640543782487,2.686845261895242,2.687285085965614,2.6877249100359855,2.6881647341063575,2.6886045581767295,2.689044382247101,2.689484206317473,2.6899240303878447,2.6903638544582167,2.6908036785285887,2.6912435025989603,2.6916833266693323,2.6921231507397043,2.692562974810076,2.693002798880448,2.6934426229508195,2.6938824470211915,2.6943222710915635,2.694762095161935,2.695201919232307,2.695641743302679,2.6960815673730507,2.6965213914434227,2.6969612155137943,2.6974010395841663,2.6978408636545383,2.69828068772491,2.698720511795282,2.699160335865654,2.6996001599360255,2.7000399840063976,2.700479808076769,2.700919632147141,2.701359456217513,2.7017992802878847,2.7022391043582568,2.7026789284286283,2.7031187524990004,2.7035585765693724,2.703998400639744,2.704438224710116,2.704878048780488,2.7053178728508596,2.7057576969212316,2.706197520991603,2.706637345061975,2.707077169132347,2.7075169932027188,2.707956817273091,2.708396641343463,2.7088364654138344,2.7092762894842064,2.709716113554578,2.71015593762495,2.710595761695322,2.7110355857656936,2.7114754098360656,2.7119152339064376,2.712355057976809,2.712794882047181,2.713234706117553,2.713674530187925,2.714114354258297,2.7145541783286684,2.7149940023990404,2.7154338264694124,2.715873650539784,2.716313474610156,2.7167532986805276,2.7171931227508996,2.7176329468212717,2.7180727708916432,2.7185125949620152,2.718952419032387,2.719392243102759,2.719832067173131,2.7202718912435024,2.7207117153138745,2.7211515393842465,2.721591363454618,2.72203118752499,2.7224710115953616,2.7229108356657337,2.7233506597361057,2.7237904838064773,2.7242303078768493,2.7246701319472213,2.725109956017593,2.725549780087965,2.7259896041583365,2.7264294282287085,2.7268692522990805,2.727309076369452,2.727748900439824,2.728188724510196,2.7286285485805677,2.7290683726509397,2.7295081967213113,2.7299480207916833,2.7303878448620553,2.730827668932427,2.731267493002799,2.731707317073171,2.7321471411435425,2.7325869652139145,2.733026789284286,2.733466613354658,2.73390643742503,2.7343462614954017,2.7347860855657737,2.7352259096361458,2.7356657337065173,2.7361055577768894,2.736545381847261,2.736985205917633,2.737425029988005,2.7378648540583765,2.7383046781287486,2.73874450219912,2.739184326269492,2.739624150339864,2.7400639744102357,2.7405037984806078,2.74094362255098,2.7413834466213514,2.7418232706917234,2.742263094762095,2.742702918832467,2.743142742902839,2.7435825669732106,2.7440223910435826,2.7444622151139546,2.744902039184326,2.745341863254698,2.7457816873250698,2.746221511395442,2.746661335465814,2.7471011595361854,2.7475409836065574,2.7479808076769294,2.748420631747301,2.748860455817673,2.7493002798880446,2.7497401039584166,2.7501799280287886,2.75061975209916,2.7510595761695322,2.7514994002399042,2.751939224310276,2.752379048380648,2.7528188724510194,2.7532586965213914,2.7536985205917635,2.754138344662135,2.754578168732507,2.755017992802879,2.7554578168732506,2.7558976409436227,2.7563374650139942,2.7567772890843663,2.7572171131547383,2.75765693722511,2.758096761295482,2.7585365853658534,2.7589764094362255,2.7594162335065975,2.759856057576969,2.760295881647341,2.760735705717713,2.7611755297880847,2.7616153538584567,2.7620551779288283,2.7624950019992003,2.7629348260695723,2.763374650139944,2.763814474210316,2.764254298280688,2.7646941223510595,2.7651339464214315,2.765573770491803,2.766013594562175,2.766453418632547,2.7668932427029187,2.7673330667732907,2.7677728908436627,2.7682127149140343,2.7686525389844063,2.769092363054778,2.76953218712515,2.769972011195522,2.7704118352658935,2.7708516593362655,2.7712914834066376,2.771731307477009,2.772171131547381,2.7726109556177527,2.7730507796881247,2.7734906037584968,2.7739304278288683,2.7743702518992404,2.774810075969612,2.775249900039984,2.775689724110356,2.7761295481807275,2.7765693722510996,2.7770091963214716,2.777449020391843,2.777888844462215,2.7783286685325868,2.7787684926029588,2.779208316673331,2.7796481407437024,2.7800879648140744,2.7805277888844464,2.780967612954818,2.78140743702519,2.7818472610955616,2.7822870851659336,2.7827269092363056,2.783166733306677,2.783606557377049,2.7840463814474212,2.784486205517793,2.784926029588165,2.7853658536585364,2.7858056777289084,2.7862455017992804,2.786685325869652,2.787125149940024,2.787564974010396,2.7880047980807676,2.7884446221511396,2.788884446221511,2.7893242702918832,2.7897640943622553,2.790203918432627,2.790643742502999,2.791083566573371,2.7915233906437424,2.7919632147141145,2.792403038784486,2.792842862854858,2.79328268692523,2.7937225109956016,2.7941623350659737,2.7946021591363452,2.7950419832067173,2.7954818072770893,2.795921631347461,2.796361455417833,2.796801279488205,2.7972411035585765,2.7976809276289485,2.79812075169932,2.798560575769692,2.799000399840064,2.7994402239104357,2.7998800479808077,2.8003198720511797,2.8007596961215513,2.8011995201919233,2.801639344262295,2.802079168332667,2.802518992403039,2.8029588164734105,2.8033986405437825,2.8038384646141545,2.804278288684526,2.804718112754898,2.8051579368252697,2.8055977608956417,2.8060375849660137,2.8064774090363853,2.8069172331067573,2.8073570571771294,2.807796881247501,2.808236705317873,2.8086765293882445,2.8091163534586165,2.8095561775289886,2.80999600159936,2.810435825669732,2.810875649740104,2.8113154738104758,2.8117552978808478,2.8121951219512193,2.8126349460215914,2.8130747700919634,2.813514594162335,2.813954418232707,2.8143942423030786,2.8148340663734506,2.8152738904438226,2.815713714514194,2.816153538584566,2.816593362654938,2.81703318672531,2.817473010795682,2.8179128348660534,2.8183526589364254,2.8187924830067974,2.819232307077169,2.819672131147541,2.820111955217913,2.8205517792882846,2.8209916033586566,2.821431427429028,2.8218712514994,2.8223110755697722,2.822750899640144,2.823190723710516,2.823630547780888,2.8240703718512594,2.8245101959216314,2.824950019992003,2.825389844062375,2.825829668132747,2.8262694922031186,2.8267093162734906,2.8271491403438627,2.8275889644142342,2.8280287884846063,2.828468612554978,2.82890843662535,2.829348260695722,2.8297880847660934,2.8302279088364655,2.8306677329068375,2.831107556977209,2.831547381047581,2.8319872051179527,2.8324270291883247,2.8328668532586967,2.8333066773290683,2.8337465013994403,2.834186325469812,2.834626149540184,2.835065973610556,2.8355057976809275,2.8359456217512995,2.8363854458216715,2.836825269892043,2.837265093962415,2.8377049180327867,2.8381447421031587,2.8385845661735307,2.8390243902439023,2.8394642143142743,2.8399040383846463,2.840343862455018,2.84078368652539,2.8412235105957615,2.8416633346661335,2.8421031587365055,2.842542982806877,2.842982806877249,2.843422630947621,2.8438624550179927,2.8443022790883647,2.8447421031587363,2.8451819272291083,2.8456217512994804,2.846061575369852,2.846501399440224,2.846941223510596,2.8473810475809676,2.8478208716513396,2.848260695721711,2.848700519792083,2.849140343862455,2.8495801679328268,2.8500199920031988,2.8504598160735704,2.8508996401439424,2.8513394642143144,2.851779288284686,2.852219112355058,2.85265893642543,2.8530987604958016,2.8535385845661736,2.853978408636545,2.854418232706917,2.854858056777289,2.855297880847661,2.855737704918033,2.856177528988405,2.8566173530587764,2.8570571771291484,2.85749700119952,2.857936825269892,2.858376649340264,2.8588164734106356,2.8592562974810076,2.8596961215513796,2.860135945621751,2.8605757696921232,2.861015593762495,2.861455417832867,2.861895241903239,2.8623350659736104,2.8627748900439824,2.8632147141143545,2.863654538184726,2.864094362255098,2.8645341863254696,2.8649740103958417,2.8654138344662137,2.8658536585365852,2.8662934826069573,2.8667333066773293,2.867173130747701,2.867612954818073,2.8680527788884445,2.8684926029588165,2.8689324270291885,2.86937225109956,2.869812075169932,2.8702518992403037,2.8706917233106757,2.8711315473810477,2.8715713714514193,2.8720111955217913,2.8724510195921633,2.872890843662535,2.873330667732907,2.8737704918032785,2.8742103158736505,2.8746501399440225,2.875089964014394,2.875529788084766,2.875969612155138,2.8764094362255097,2.8768492602958817,2.8772890843662533,2.8777289084366253,2.8781687325069973,2.878608556577369,2.879048380647741,2.879488204718113,2.8799280287884845,2.8803678528588565,2.880807676929228,2.8812475009996,2.881687325069972,2.8821271491403437,2.8825669732107158,2.8830067972810878,2.8834466213514593,2.8838864454218314,2.884326269492203,2.884766093562575,2.885205917632947,2.8856457417033186,2.8860855657736906,2.8865253898440626,2.886965213914434,2.887405037984806,2.8878448620551778,2.88828468612555,2.888724510195922,2.8891643342662934,2.8896041583366654,2.890043982407037,2.890483806477409,2.890923630547781,2.8913634546181526,2.8918032786885246,2.8922431027588966,2.892682926829268,2.89312275089964,2.893562574970012,2.894002399040384,2.894442223110756,2.8948820471811274,2.8953218712514994,2.8957616953218714,2.896201519392243,2.896641343462615,2.8970811675329866,2.8975209916033586,2.8979608156737307,2.8984006397441022,2.8988404638144742,2.8992802878848463,2.899720111955218,2.90015993602559,2.9005997600959614,2.9010395841663335,2.9014794082367055,2.901919232307077,2.902359056377449,2.902798880447821,2.9032387045181927,2.9036785285885647,2.9041183526589363,2.9045581767293083,2.9049980007996803,2.905437824870052,2.905877648940424,2.9063174730107955,2.9067572970811675,2.9071971211515395,2.907636945221911,2.908076769292283,2.908516593362655,2.9089564174330267,2.9093962415033987,2.9098360655737703,2.9102758896441423,2.9107157137145143,2.911155537784886,2.911595361855258,2.91203518592563,2.9124750099960015,2.9129148340663735,2.913354658136745,2.913794482207117,2.914234306277489,2.9146741303478607,2.9151139544182327,2.9155537784886048,2.9159936025589763,2.9164334266293483,2.91687325069972,2.917313074770092,2.917752898840464,2.9181927229108355,2.9186325469812076,2.9190723710515796,2.919512195121951,2.919952019192323,2.9203918432626947,2.9208316673330668,2.921271491403439,2.9217113154738104,2.9221511395441824,2.9225909636145544,2.923030787684926,2.923470611755298,2.9239104358256696,2.9243502598960416,2.9247900839664136,2.925229908036785,2.925669732107157,2.9261095561775288,2.926549380247901,2.926989204318273,2.9274290283886444,2.9278688524590164,2.9283086765293884,2.92874850059976,2.929188324670132,2.9296281487405036,2.9300679728108756,2.9305077968812476,2.930947620951619,2.9313874450219912,2.9318272690923632,2.932267093162735,2.932706917233107,2.9331467413034784,2.9335865653738504,2.9340263894442224,2.934466213514594,2.934906037584966,2.935345861655338,2.9357856857257096,2.9362255097960817,2.9366653338664532,2.9371051579368253,2.9375449820071973,2.937984806077569,2.938424630147941,2.938864454218313,2.9393042782886845,2.9397441023590565,2.940183926429428,2.9406237504998,2.941063574570172,2.9415033986405437,2.9419432227109157,2.9423830467812877,2.9428228708516593,2.9432626949220313,2.943702518992403,2.944142343062775,2.944582167133147,2.9450219912035185,2.9454618152738905,2.945901639344262,2.946341463414634,2.946781287485006,2.9472211115553777,2.9476609356257497,2.9481007596961217,2.9485405837664933,2.9489804078368653,2.949420231907237,2.949860055977609,2.950299880047981,2.9507397041183525,2.9511795281887245,2.9516193522590966,2.952059176329468,2.95249900039984,2.9529388244702117,2.9533786485405837,2.9538184726109558,2.9542582966813273,2.9546981207516994,2.9551379448220714,2.955577768892443,2.956017592962815,2.9564574170331865,2.9568972411035586,2.9573370651739306,2.957776889244302,2.958216713314674,2.958656537385046,2.9590963614554178,2.95953618552579,2.9599760095961614,2.9604158336665334,2.9608556577369054,2.961295481807277,2.961735305877649,2.962175129948021,2.9626149540183926,2.9630547780887646,2.963494602159136,2.963934426229508,2.96437425029988,2.964814074370252,2.965253898440624,2.9656937225109954,2.9661335465813674,2.9665733706517394,2.967013194722111,2.967453018792483,2.967892842862855,2.9683326669332266,2.9687724910035986,2.96921231507397,2.9696521391443422,2.9700919632147142,2.970531787285086,2.970971611355458,2.97141143542583,2.9718512594962014,2.9722910835665735,2.972730907636945,2.973170731707317,2.973610555777689,2.9740503798480606,2.9744902039184327,2.9749300279888047,2.9753698520591763,2.9758096761295483,2.97624950019992,2.976689324270292,2.977129148340664,2.9775689724110355,2.9780087964814075,2.9784486205517795,2.978888444622151,2.979328268692523,2.9797680927628947,2.9802079168332667,2.9806477409036387,2.9810875649740103,2.9815273890443823,2.981967213114754,2.982407037185126,2.982846861255498,2.9832866853258695,2.9837265093962415,2.9841663334666135,2.984606157536985,2.985045981607357,2.9854858056777287,2.9859256297481007,2.9863654538184727,2.9868052778888443,2.9872451019592163,2.9876849260295884,2.98812475009996,2.988564574170332,2.9890043982407035,2.9894442223110755,2.9898840463814476,2.990323870451819,2.990763694522191,2.991203518592563,2.9916433426629347,2.9920831667333068,2.9925229908036783,2.9929628148740504,2.9934026389444224,2.993842463014794,2.994282287085166,2.994722111155538,2.9951619352259096,2.9956017592962816,2.996041583366653,2.996481407437025,2.996921231507397,2.9973610555777688,2.997800879648141,2.998240703718513,2.9986805277888844,2.9991203518592564,2.999560175929628,3.0]}

},{}],102:[function(require,module,exports){
module.exports={"expected":[4.641588868195311,4.617407021794423,4.59372149752602,4.570514604439972,4.547769536131855,4.525470704738095,4.50360288497836,4.482151580519014,4.461103348129676,4.440444877518181,4.4201639469695,4.4002485298907,4.380687137509278,4.361469125036234,4.342583971576099,4.324021608841338,4.305772716288928,4.287827936743665,4.270178716257885,4.252816538998747,4.235733233704643,4.218921250845065,4.202373041933591,4.186081353416007,4.170039493490912,4.154240649789617,4.1386786336240755,4.123347212302159,4.108240383487018,4.093352625725353,4.0786783540194245,4.064212183317073,4.049949169864418,4.03588420866634,4.022012698536959,4.0083299510967,3.9948314374963636,3.9815129374653044,3.9683704454653395,3.9553996279801455,3.942596747715097,3.9299581842593416,3.9174799906820055,3.9051587829079923,3.8929912795699333,3.880973875422375,3.8691034980799426,3.857377165714312,3.8457915761610395,3.8343439330219553,3.8230315199979463,3.811851304672728,3.8008007358154967,3.789877205169717,3.779078305435078,3.768401319574221,3.757843982315979,3.7474040892359644,3.7370791313507303,3.7268670315503005,3.716765767054033,3.706773015921979,3.6968868698099437,3.6871054690055445,3.6774266601785275,3.667848686745512,3.6583698357586236,3.648988106272003,3.639701878507301,3.6305094640626088,3.621409323645186,3.612399637494995,3.6034789479877865,3.594645831675151,3.5858985902687555,3.5772358744979185,3.5686563659754915,3.560158477052157,3.5517409568583873,3.5434025824865167,3.5351418672731247,3.5269576498914397,3.5188487943775058,3.5108139064300787,3.5028519063612045,3.494961644892603,3.4871420902696597,3.479391959467187,3.471710270782381,3.4640960628460995,3.456548128188903,3.44906555137686,3.441647435521329,3.434292642685804,3.4270003182108155,3.4197696243763267,3.4125994873452297,3.4054891082833865,3.39843770385133,3.391444259399472,3.384508027452266,3.3776281939182553,3.3708040413114264,3.3640346270507746,3.3573192659230147,3.3506572853650893,3.3440477922349547,3.337490143837576,3.3309837090991925,3.32452764075962,3.318121335426274,3.311764200395115,3.305455431046456,3.2991944603653587,3.292980731178603,3.2868134785484,3.280692169173028,3.27461620743032,3.268585079536001,3.2625980692940684,3.2566546846090683,3.2507544415364253,3.244896657601515,3.2390808690720965,3.2333066197465987,3.2275732586643517,3.221880348482147,3.2162274588208706,3.2106139682055512,3.2050394638720694,3.199503539502149,3.194005601240273,3.1885452592398016,3.183122065883839,3.1777356444412095,3.1723854981167516,3.167071139073914,3.161792212328097,3.156548306521145,3.1513390170836266,3.1461639460899002,3.1410227021169774,3.1359150201940493,3.1308402805451574,3.1257982313157546,3.120788505753705,3.115810742956713,3.110864587751605,3.1059498061390616,3.101065822204136,3.096212413562235,3.091389246809009,3.0865959937096217,3.0818323310950277,3.0770980520887483,3.072392620017011,3.067715838325529,3.0630674031210283,3.0584470150942336,3.0538543794303816,3.049289205721879,3.0447513146031153,3.0402402101558392,3.035755722048046,3.0312975766680013,3.0268655044044754,3.0224592395710297,3.0180786233614376,3.0137231910665205,3.009392791966066,3.0050871753500563,3.000806094080127,2.996549304523702,2.9923165664896185,2.988107742162609,2.983922399498647,2.979760407815129,2.9756215400710984,2.9715055723661066,2.96741228388397,2.963341552593699,2.959292971649749,2.9552664254466063,2.9512617049669103,2.947278604014262,2.94331691916393,2.939376542410341,2.93545708984352,2.931558459262128,2.9276804578558133,2.923822895354733,2.9199855839862083,2.916168338432287,2.912371065124015,2.90859340439482,2.904835267847644,2.901096479576356,2.897376865930195,2.893676255476322,2.8899945655848818,2.886331455467723,2.8826868471925726,2.8790605778387213,2.875452486527215,2.8718624143877194,2.8682902045260374,2.864735785625167,2.861198836970251,2.857679291455693,2.8541769997796584,2.8506918144634166,2.847223589822503,2.843772263150052,2.8403375294510025,2.8369193298627584,2.8335175256005374,2.8301319795377906,2.826762556180538,2.8234092005525726,2.8200716221567674,2.816749769533585,2.813443513472213,2.81015272627318,2.8068772817254466,2.803617055083938,2.800371999413781,2.797141839751716,2.7939265323406834,2.7907259580828594,2.7875399992400745,2.7843685394136983,2.781211537822525,2.7780687317576196,2.774940083357452,2.7718254813876113,2.7687248158579982,2.7656379780047904,2.7625648602727275,2.759505428302911,2.756459432577517,2.753426841388832,2.750407551844859,2.7474014621781735,2.7444084717299972,2.7414285510714462,2.738461461137407,2.735507174944552,2.7325655961148474,2.7296366293033114,2.7267201801836674,2.723816223786054,2.7209245307861014,2.7180450784737302,2.7151777764587846,2.712322535301644,2.709479266500262,2.7066478824774363,2.703828362935757,2.701020489100123,2.6982242427382577,2.6954395398491164,2.6926662972959097,2.689904432794583,2.687153929647898,2.6844145774890062,2.681686361535676,2.6789692028032475,2.676263023104931,2.6735677450413613,2.6708832919903185,2.668209651035444,2.6655466209500847,2.662894190574885,2.6602522862966556,2.657620835230373,2.6549997652098383,2.652389066237814,2.649788544399015,2.6471981913308062,2.6446179376518217,2.6420477146549906,2.6394874542990454,2.636937149239783,2.6343966124322873,2.631865838055254,2.629344760648257,2.6268333153761225,2.624331438021189,2.62183906497568,2.6193561916885844,2.6168826386202313,2.6144184026242323,2.611963422458387,2.609517637453954,2.60708098750869,2.604653470232942,2.6022349121191093,2.599825312090009,2.5974246122418134,2.5950327552039067,2.59264968413252,2.5902753427044583,2.5879097308083736,2.585552681546223,2.583204196021188,2.5808642199314455,2.57853269946573,2.576209581297585,2.5738948670804027,2.571588395243954,2.5692901685795713,2.567000135644206,2.564718245452106,2.562444447469543,2.5601787449578453,2.5579209813874253,2.555671161087063,2.5534292352798853,2.551195155615783,2.54896887416657,2.5467503434212135,2.544539568337706,2.5423363979320266,2.540140838154335,2.537952843115758,2.535772367321676,2.533599365667331,2.531433844425861,2.5292756571008868,2.5271248108985502,2.524981262230797,2.5228449678783544,2.5207158849866884,2.5185940210276567,2.5164792337653754,2.514371531550022,2.5122708729466208,2.5101772168655017,2.5080905225585712,2.506010749615632,2.503937857960744,2.5018718078486444,2.499812559861206,2.4977601715695092,2.495714410551847,2.493675335334405,2.4916429077731252,2.4896170900340784,2.4875978445901947,2.4855851342180344,2.4835789219946034,2.481579171294208,2.47958584578535,2.477598909427661,2.4756183264688816,2.473644061441867,2.4716761718521214,2.4697144371190585,2.4677589155993704,2.465809572937258,2.463866375047668,2.461929288113522,2.4599982785829853,2.4580733131667696,2.4561543588354673,2.454241382816921,2.452334352593623,2.4504332359001535,2.4485380007206397,2.446648704279145,2.4447651367919137,2.4428873562449156,2.4410153315957426,2.4391490320393237,2.437288427005571,2.4354334861570566,2.433584179386716,2.431740476815577,2.42990234879052,2.428069765882064,2.4262426988821773,2.4244211188021185,2.4226050824162235,2.42079438982063,2.418989098474476,2.4171891802450634,2.4153946072085573,2.413605351647976,2.411821386051201,2.4100426831090154,2.40826921571316,2.406500956954418,2.404737880120717,2.4029799586952576,2.4012272489207804,2.399479559293139,2.3977369466777794,2.3959993853206782,2.394266849654037,2.392539314294538,2.390816754041616,2.3890991438757507,2.3873864589567817,2.3856786746222385,2.3839757663856944,2.382277709935132,2.380584481131337,2.3788961355435836,2.3772124900739984,2.375533600855603,2.373859444424621,2.3721899974822898,2.3705252368933523,2.3688651396845697,2.3672096830432494,2.3655588443157893,2.3639126010062395,2.3622709307748777,2.3606338114368017,2.3590012209605393,2.3573732141643458,2.355749615713058,2.3541304809370613,2.3525157884049737,2.3509055168321114,2.349299645079182,2.3476981521509974,2.3461010171952013,2.3445082195010047,2.3429197384979426,2.341335553754638,2.3397556449775827,2.3381799920099313,2.3366086488611595,2.335041447384054,2.333478442054839,2.3319196132514977,2.3303649414828307,2.328814407387327,2.3272679917320422,2.3257256754114914,2.3241874394465545,2.3226532649833898,2.3211231332923634,2.319597025766985,2.3180749239228593,2.316556880918821,2.315042735280397,2.313532540593119,2.3120262788506762,2.3105239321637643,2.3090254827590955,2.307530912978424,2.30604020527758,2.304553342225513,2.3030703065033453,2.3015910809034366,2.3001156483284553,2.2986440611259757,2.297176163568574,2.2957120083976226,2.2942515789479394,2.2927948586601596,2.29134183107986,2.289892479856696,2.288446788743552,2.287004741595688,2.28556632236991,2.284131515123738,2.2827003040145843,2.2812726732989446,2.2798486744270186,2.2784281574931398,2.2770111743094756,2.275597709520883,2.2741877478673573,2.272781274183272,2.2713782733966177,2.2699787305282535,2.2685826306911654,2.267189959089728,2.2658007010189807,2.264414841863904,2.2630323670987056,2.2616533272651087,2.2602775778977158,2.2589051698718303,2.257536089011568,2.2561703212268047,2.2548078525125077,2.2534486689480624,2.252092756696617,2.250740102004427,2.2493906912002064,2.2480445106944873,2.246701546978985,2.245361786625967,2.244025279264319,2.2426918855226257,2.2413616553379545,2.2400345755986084,2.238710633270383,2.2373898153959773,2.2360721090943994,2.2347575015603875,2.23344598006383,2.232137531949195,2.23083214463496,2.2295298056130544,2.2282305024482993,2.2269342838577764,2.225641015248847,2.224350745623982,2.22306346283411,2.2217791548003487,2.2204978095134775,2.2192194150334155,2.2179439594887045,2.216671431075999,2.215401818059558,2.214135108770741,2.212871291607513,2.2116104144499404,2.210352346860659,2.2090971369861094,2.207844773485781,2.2065952450833426,2.205348540566175,2.2041046487849014,2.202863558652926,2.2016252591459726,2.2003897393016327,2.199156988218914,2.1979269950577933,2.1966997490387747,2.1954752971434126,2.1942535131816925,2.1930344443828798,2.1918180802052354,2.190604410165394,2.189393423837943,2.1881851108550068,2.1869794609058344,2.185776463736392,2.184576109148958,2.1833783870017203,2.18218328720838,2.1809907997377556,2.179800970684123,2.178613677861847,2.177428967596024,2.1762468300720688,2.175067255528592,2.1738902342570277,2.172715756601262,2.1715438129572644,2.1703743937727262,2.1692074895466944,2.168043090829217,2.1668811882209864,2.165721772372987,2.164564888505572,2.163410418214194,2.162258406934708,2.1611088455158023,2.1599617248547394,2.1588170358970227,2.1576747696360647,2.156534917112859,2.155397469415651,2.1542624176796163,2.1531297530865414,2.151999466864503,2.1508715502875533,2.1497460477171138,2.1486228443240756,2.147501984671429,2.146383460214026,2.1452672624511577,2.1441533829262513,2.143041813226576,2.1419325449829456,2.140825569869427,2.1397208796030514,2.1386184659435217,2.137518320692933,2.136420487434219,2.1353248544698897,2.134231465572684,2.133140312711446,2.1320513878960163,2.130964683176962,2.1298801906453066,2.1287979024322623,2.127717810708966,2.1266399076862146,2.1255641856142065,2.12449063678228,2.1234192535186613,2.1223500785793417,2.1212830034900163,2.1202180711848007,2.1191552741449327,2.1180946048892824,2.1170360559741073,2.115979619992811,2.114925289575703,2.1138730573897564,2.1128229161383767,2.1117748585611618,2.1107288774336714,2.1096849655671965,2.108643164908496,2.1076033700429226,2.106565623084665,2.1055299169856565,2.1044962447324322,2.103464599345908,2.1024349738811607,2.1014073614272135,2.1003817551068185,2.099358148076243,2.098336533525058,2.09731690467593,2.0962992547844075,2.095283625006149,2.0942699128344247,2.0932581595825126,2.0922483586354446,2.0912405034101167,2.0902345873550914,2.089230603950398,2.088228546707339,2.0872284091682927,2.086230184906522,2.085233867525981,2.084239450661127,2.0832469279767287,2.0822563398557183,2.081267586558241,2.080280708615833,2.079295699812654,2.078312553962255,2.077331264907395,2.076351826519866,2.0753742327003115,2.0743984773780513,2.073424554510908,2.072452458085031,2.071482182114727,2.070513766286036,2.069547113296382,2.0685822629727233,2.067619209440287,2.0666579468516133,2.0656984693863913,2.064740771251292,2.0637848466798103,2.0628306899321,2.0618782952948163,2.0609276570809554,2.059978769629698,2.0590316273062523,2.0580862690594364,2.0571426001089055,2.0562006595366884,2.0552604418105593,2.0543219414235554,2.0533851528938243,2.0524500707644786,2.0515166896034467,2.0505850040033264,2.0496550085812393,2.0487266979786862,2.047800066861406,2.046875109919229,2.0459518653820927,2.045030240876932,2.0441102747597726,2.043191961815418,2.0422752968520705,2.0413602747011916,2.0404468902173707,2.039535138278188,2.0386250137840825,2.037716511658219,2.036809626846357,2.0359043543167195,2.0350006890598635,2.0340986686049933,2.033198202878832,2.03229932953008,2.031402043637354,2.030506340300968,2.0296122146428135,2.0287196618062335,2.0278286769559006,2.0269392552776964,2.0260513919785885,2.025165082286513,2.0242803214502545,2.0233971047393267,2.022515469000097,2.021635326358418,2.0207567137740434,2.01987962659824,2.0190040602024264,2.0181300099780595,2.01725747133652,2.016386439709003,2.015516910546405,2.0146488793192145,2.0137823415174023,2.012917292650313,2.0120537689496265,2.011191684487256,2.0103310756030135,2.0094719378826635,2.008614266930811,2.007758058370796,2.0069033078445933,2.006050011012704,2.0051981635540606,2.004347761165917,2.0034987995637543,2.002651274481178,2.0018051816698166,2.000960556712049,2.0001173157025467,1.9992754943265114,1.9984350884066902,1.9975960937833663,1.9967585063142663,1.995922321874462,1.9950875363562777,1.9942541456691967,1.9934221457397674,1.9925915325115124,1.9917623019448345,1.9909344500169266,1.9901079727216817,1.9892828660696027,1.9884591260877111,1.987636748819461,1.986815730324649,1.9859960666793268,1.985177831118709,1.9843608653381999,1.9835452427323659,1.9827309594414144,1.981918011621377,1.9811063954440291,1.9802961070968013,1.9794871427827008,1.9786794987202259,1.9778731711432849,1.9770681563011148,1.976264450458199,1.9754620498941895,1.9746609509038238,1.9738611497968472,1.9730626428979343,1.972265426546609,1.9714694970971676,1.9706748509186018,1.9698814843945207,1.969089393923075,1.9682985759168816,1.9675090268029465,1.966720743022592,1.9659337210313805,1.9651479572990411,1.9643635222675857,1.963580264400591,1.962798254286253,1.9620174884502357,1.9612379634320076,1.9604596757847703,1.959682622075386,1.9589067988843087,1.9581322028055148,1.9573588304464324,1.9565866784278731,1.9558157433839631,1.9550460219620747,1.9542775108227597,1.9535102066396817,1.952744106099548,1.9519792059020455,1.9512155027597724,1.9504529933981745,1.9496916745554784,1.948931542982628,1.9481725954432196,1.9474148287134374,1.9466582395819905,1.9459028248500505,1.9451486524378034,1.944395576847869,1.9436436661353955,1.942892917150776,1.942143326756554,1.941394891827364,1.9406476092498708,1.9399014759227096,1.9391564887564248,1.9384126446734127,1.937669940607862,1.9369283735056924,1.9361879403245001,1.9354486380334983,1.9347104636134596,1.9339734140566576,1.9332374863668123,1.9325026775590313,1.9317689846597557,1.931036404706702,1.9303049347488084,1.9295745718461799,1.92884531307003,1.928117155502631,1.927390096237256,1.9266641323781275,1.925939329379459,1.9252155475863437,1.9244928525775669,1.9237712415006103,1.9230507115136406,1.9223312597854547,1.9216128834954322,1.920895579833479,1.92017934599998,1.9194641792057476,1.9187500766719705,1.9180370356301637,1.917325053322119,1.9166141269998558,1.9159042539255706,1.9151954313715902,1.9144876566203204,1.9137809269641994,1.91307523970565,1.91237059215703,1.9116669816405856,1.9109644054884058,1.9102628610423726,1.909562345654116,1.9088628566849668,1.9081643915059114,1.9074670132522717,1.9067705877087775,1.9060751781260536,1.9053807819132498,1.9046873964889437,1.903995019281097,1.9033036477270113,1.9026132792732824,1.9019239113757587,1.901235541499497,1.900548167118718,1.8998617857167654,1.899176394786061,1.898491991828063,1.8978085743532247,1.8971261398809511,1.896444685939558,1.895764210066229,1.8950847098069763,1.8944061827165977,1.8937286263586373,1.893052038305343,1.8923764161376289,1.8917017574450319,1.891028059825674,1.8903553843130025,1.8896836015785161,1.8890127727629697,1.8883428954984274,1.8876739674253415,1.887005986192515,1.8863389494570604,1.8856728548843642,1.8850077001480479,1.8843434829299306,1.8836802009199916,1.8830178518163316,1.8823564333251381,1.881695943160647,1.8810363790451055,1.8803777387087364,1.879720019889703,1.87906322033407,1.8784073377957708,1.8777523700365697,1.8770983148260272,1.8764451699414653,1.8757929331679306,1.8751416022981624,1.8744911751325546,1.8738416494791243,1.8731930843080586,1.872545355048806,1.871898520771373,1.8712525793139219,1.870607528522067,1.8699633662488402,1.8693200903546616,1.8686776987073015,1.8680361891818513,1.8673955596606895,1.8667558080334494,1.8661169321969862,1.8654789300553463,1.864841799519734,1.8642055385084801,1.8635701449470117,1.8629356167678186,1.8623019519104236,1.8616691483213499,1.8610372039540926,1.8604061167690864,1.8597758847336743,1.8591465058220786,1.8585179780153709,1.8578902993014408,1.8572635267757103,1.856637540158489,1.8560123966385145,1.8553880942306527,1.8547646309564396,1.854142004844053,1.8535202139282827,1.8528992562505038,1.8522791298586452,1.8516598328071625,1.8510413631570097,1.8504237189756116,1.849806898336834,1.8491908993209574,1.8485757200146486,1.8479613585109336,1.8473478129091694,1.846735081315017,1.8461231618404148,1.8455120526035502,1.8449017517288344,1.8442922573468754,1.8436835675944498,1.8430756806144784,1.842468594555998,1.8418623075741376,1.8412568749196054,1.840652180505643,1.8400482796701423,1.8394451705923356,1.8388428514574167,1.838241320456516,1.8376405757866763,1.837040615650826,1.8364414382577547,1.8358430418220895,1.8352454245642689,1.8346485847105178,1.8340525204928253,1.8334572301489187,1.8328627119222396,1.8322689640619199,1.8316759848227573,1.8310837724651925,1.8304923252552858,1.8299016414646911,1.8293117193706356,1.8287225572558947,1.828134153408768,1.8275465061230591,1.8269596136980493,1.826373474438477,1.8257881418495931,1.8252035037861598,1.8246196138350486,1.8240364703225962,1.8234540715804834,1.8228724159457133,1.8222915017605879,1.8217113273726868,1.8211318911348464,1.820553191405137,1.8199752265468403,1.8193979949284307,1.8188214949235515,1.8182457249109945,1.8176706832746787,1.8170963684036299,1.8165227786919582,1.815949912538839,1.8153777683484902,1.8148063445301539,1.8142356394980748,1.8136656516714775,1.8130963794745518,1.812527821336426,1.8119599756911506,1.811392894452516,1.8108264690478253,1.8102607514676126,1.8096957401654141,1.8091314335995887,1.808567830233298,1.8080049285344868,1.8074427269758635,1.8068812240348824,1.8063204181937216,1.8057603079392675,1.805200891763092,1.804642168161438,1.8040841356351967,1.8035267926898915,1.802970137835657,1.8024141695872244,1.8018588864638982,1.8013042869895424,1.8007503696925584,1.8001971331058704,1.7996445757669044,1.7990926962175728,1.7985414930042538,1.797990964677776,1.7974411097934,1.7968919786937412,1.7963434663137892,1.7957956230682692,1.795248447529994,1.7947019382761191,1.7941560938881294,1.7936109129518187,1.7930663940572746,1.792522535798862,1.7919793367752035,1.7914367955891666,1.7908949108478438,1.790353681162537,1.7898131051487418,1.7892731814261298,1.7887339086185328,1.788195285353927,1.7876573102644158,1.7871199819862145,1.7865832991596342,1.7860472604290645,1.78551186444296,1.7849771098538216,1.7844429953181844,1.7839095194965973,1.7833767312961097,1.7828445288403152,1.7823129611042905,1.781782026764496,1.7812517245013304,1.7807220529991181,1.780193010946091,1.7796645970343752,1.7791368099599754,1.7786096484227596,1.778083111126446,1.777557196778585,1.7770319040905487,1.7765072317775115,1.7759831785584397,1.7754597431560744,1.774936924296918,1.7744147207112193,1.7738931311329602,1.77337215429984,1.7728517889532631,1.7723320338383228,1.7718128877037886,1.7712943493020918,1.7707764173893115,1.770259090725161,1.7697424167965412,1.769226296866445,1.7687107784859013,1.7681958604290222,1.7676815414734857,1.7671678204005217,1.766654695994899,1.7661421670449124,1.7656302323423685,1.7651188906825734,1.7646081408643186,1.7640979816898685,1.7635884119649472,1.7630794304987254,1.7625710361038083,1.7620632275962216,1.761556003795399,1.7610493635241695,1.7605433056087458,1.7600378288787095,1.7595329321670006,1.7590286143099036,1.7585248741470356,1.7580217105213347,1.7575191222790458,1.75701710826971,1.7565157146293655,1.756014845593771,1.7555145473595113,1.755014818789187,1.7545156587486341,1.7540170661069119,1.753519039736291,1.7530215785122405,1.7525246813134177,1.7520283470216553,1.75153257452195,1.7510373627024516,1.7505427104544498,1.7500486166723646,1.7495550802537336,1.7490621000992,1.7485696751125035,1.7480778042004665,1.7475864862729846,1.7470957202430142,1.7466055050265623,1.7461158395426744,1.7456267227134235,1.7451381534639012,1.744650130722203,1.7441626993864907,1.7436757664053906,1.7431893767344313,1.7427035293136246,1.7422182230859338,1.741733456997263,1.7412492299964466,1.7407655410352405,1.7402823890683081,1.7397997730532133,1.7393176919504074,1.7388361447232201,1.7383551303378488,1.737874647763349,1.7373946959716229,1.7369152739374087,1.7364363806382732,1.7359580150545988,1.7354801761695742,1.7350028629691856,1.7345260744422053,1.7340498095801822,1.7335740673774314,1.733098846831026,1.7326241469407855,1.7321499667092666,1.7316763498065892,1.731203205862289,1.7307305786008014,1.7302584670355334,1.7297868701825843,1.7293157870607305,1.7288452166914199,1.72837515809876,1.7279056103095103,1.7274365723530716,1.7269680432614773,1.726500022069385,1.7260325078140644,1.725565499535392,1.7250989962758385,1.7246329970804628,1.7241675009968995,1.7237025070753524,1.723238014368585,1.7227740219319114,1.7223105288231864,1.7218475341027986,1.7213850368336594,1.7209230360811962,1.720461530913342,1.720000563872885,1.7195400470414912,1.7190800230135432,1.7186204908669132,1.7181614496819344,1.717702898541396,1.7172448365305322,1.7167872627370149,1.7163301762509453,1.7158735761648454,1.7154174615736488,1.7149618315746928,1.714506685267712,1.7140520217548265,1.7135978401405365,1.713144139531713,1.7126909190375903,1.7122381777697562,1.7117859148421462,1.7113341293710338,1.7108828204750235,1.710431987275042,1.7099816288943306,1.7095317444584373,1.7090823330952094,1.7086333939347842,1.7081849683996546,1.7077369710000265,1.707289443207364,1.7068423841608906,1.7063957930020828,1.7059496688746603,1.7055040109245805,1.7050588183000304,1.7046140901514175,1.7041698256313658,1.7037260238947038,1.7032826840984603,1.7028398054018563,1.702397386966296,1.7019554279553621,1.7015139275348066,1.701072884872543,1.7006322991386407,1.7001921695053177,1.6997524951469314,1.6993132752399729,1.6988745089630608,1.6984361954969311,1.6979983340244331,1.6975609237305211,1.6971239638022466,1.6966874945916823,1.6962514329218958,1.6958158191914965,1.6953806525958581,1.6949459323324183,1.6945116576006694,1.6940778276021549,1.6936444415404597,1.6932114986212052,1.6927789980520416,1.6923469390426418,1.6919153208046938,1.691484142551895,1.6910534034999454,1.69062310286654,1.6901932398713637,1.6897638137360829,1.6893348236843413,1.6889062689417509,1.6884781487358873,1.6880504622962824,1.6876232088544187,1.687196387643722,1.6867699978995552,1.6863440388592121,1.685918549889697,1.6854934499361187,1.6850687784098402,1.6846445345558156,1.6842207176208994,1.6837973268538384,1.6833743615052676,1.6829518208277021,1.682529704075532,1.6821080105050166,1.6816867393742772,1.6812658899432922,1.6808454614738904,1.6804254532297447,1.6800058644763673,1.6795866944811026,1.6791679425131216,1.678749607843416,1.6783316897447924,1.677914187491867,1.6774971003610575,1.6770804276305804,1.6766641685804433,1.6762483224924398,1.675832888650142,1.6754178663388986,1.6750032939444512,1.6745890925197666,1.6741753004928335,1.6737619171560396,1.6733489418035181,1.6729363737311422,1.6725242122365207,1.672112456618991,1.6717011061796152,1.6712901602211716,1.6708796180481535,1.6704694789667591,1.6700597422848904,1.6696504073121443,1.6692414733598095,1.6688329397408603,1.6684248057699502,1.668017070763409,1.6676097340392346,1.6672027949170904,1.666796252718298,1.6663901067658335,1.6659843563843202,1.665579000900026,1.6651740396408559,1.6647695100881712,1.6643653352324561,1.6639615525954212,1.663558161511473,1.6631551613166298,1.6627525513485173,1.6623503309463634,1.6619484994509943,1.6615470562048267,1.6611460005518661,1.6607453318376992,1.6603450494094907,1.659945152615977,1.6595456408074627,1.6591465133358143,1.6587477695544564,1.658349408818366,1.6579514304840686,1.6575538339096323,1.6571566184546638,1.6567597834803032,1.6563633283492192,1.6559672524256055,1.6555715550751735,1.6551762356651505,1.654781293564273,1.6543867653516993,1.6539925759458884,1.6535987619645043,1.6532053227822763,1.6528122577754205,1.6524195663216348,1.652027247800095,1.6516353015914493,1.6512437270778142,1.6508525236427707,1.650461690671359,1.6500712275500733,1.649681133666859,1.6492914084111077,1.6489020511736519,1.648513061346761,1.6481244383241374,1.6477361815009124,1.64734829027364,1.6469607640402948,1.6465736022002662,1.646186804154354,1.6458003693047656,1.64541429705511,1.6450285868103947,1.6446432379770202,1.6442582862688266,1.6438736584489317,1.6434893902679568,1.6431054811378358,1.6427219304718745,1.6423387376847485,1.641955902192497,1.6415734234125194,1.6411913007635721,1.6408095336657627,1.640428121540547,1.640047063810725,1.6396663599004362,1.6392860092351567,1.6389060112416929,1.6385263653481805,1.6381470709840782,1.6377681275801643,1.6373895345685336,1.6370112913825925,1.636633397457055,1.6362558522279398,1.635878655132565,1.6355018056095454,1.6351253030987885,1.6347491825149325,1.6343733723209621,1.633997907466743,1.6336227873973128,1.6332480115589825,1.632873579399332,1.6324994903672079,1.632125743912717,1.6317523394872258,1.631379276543354,1.6310065545349726,1.6306341729171985,1.6302621311463932,1.6298904286801563,1.6295190649773246,1.6291480394979658,1.6287773517033775,1.6284070010560805,1.6280369870198184,1.6276673090595513,1.6272979666414547,1.6269289592329133,1.6265602863025195,1.6261919473200692,1.6258239417565572,1.6254562690841756,1.6250889634186636,1.6247219549186018,1.6243552777334385,1.6239889313401146,1.6236229152167518,1.6232572288426454,1.622891871698264,1.6225268432652447,1.6221621430263886,1.6217977704656603,1.6214337250681807,1.6210700063202275,1.6207066137092292,1.620343546723762,1.6199808048535482,1.619618387589451,1.6192562944234719,1.6188945248487472,1.6185330783595453,1.6181719544512627,1.6178111526204209,1.6174506723646633,1.6170905131827529,1.616730674574566,1.6163711560410925,1.6160119909592638,1.6156531110525378,1.6152945497301816,1.6149363064976014,1.6145783808612995,1.614220772328871,1.6138634804090013,1.613506504611462,1.6131498444471088,1.612793499427878,1.612437469066783,1.6120817528779117,1.6117263503764225,1.6113712610785436,1.6110164845015669,1.6106620201638473,1.6103078675847977,1.609954026284888,1.6096004957856407,1.6092472756096279,1.6088943652804697,1.6085417643228297,1.6081894722624122,1.6078374886259599,1.6074858129412506,1.6071344447370948,1.6067834166509696,1.6064326619695644,1.6060822133613508,1.6057320703592375,1.6053822324971525,1.6050326993100372,1.6046834703338455,1.6043345451055402,1.6039859231630904,1.6036376040454685,1.603289587292647,1.6029418724455968,1.6025944590462833,1.6022473466376639,1.6019005347636854,1.601554022969281,1.601207810800368,1.600861897803844,1.6005162835275852,1.6001709675204439,1.5998259493322438,1.599481228513779,1.5991368046168126,1.5987926771940697,1.5984488457992387,1.5981053099869669,1.5977621016832022,1.5974191556760318,1.5970765039211337,1.5967341459769644,1.5963920814029282,1.5960503097593706,1.59570883060758,1.595367643509781,1.5950267480291345,1.5946861437297342,1.5943458301766036,1.5940058069356942,1.593666073573883,1.5933266296589688,1.5929874747596708,1.5926486084456253,1.5923100302873838,1.5919717398564104,1.5916337367250786,1.591296020466669,1.590958590655368,1.5906214468662636,1.5902845886753438,1.589948015659494,1.5896117273964951,1.5892757551530954,1.5889400351059393,1.588604598550359,1.5882694450676906,1.5879345742401523,1.5875999856508423,1.5872656473556703,1.5869316535236886,1.5865978776813774,1.5862644453685322,1.5859312303253064,1.5855983578816073,1.5852657019906289,1.5849333877730025,1.5846013520281552,1.5842695317665876,1.583938051796169,1.5836067865999368,1.583275860778003,1.5829451490242545,1.582614775731649,1.5822846158043027,1.5819547934286184,1.5816251837183248,1.5812959106538695,1.5809668495579765,1.5806381242057344,1.58030961012825,1.5799814308958462,1.5796534622474037,1.5793258275490691,1.57899840274689,1.5786713110034252,1.5783444284712838,1.5780178781100247,1.5776915362782145,1.577365525732995,1.5770397230382922,1.5767142507494114,1.5763890469805042,1.5760640500492273,1.575739382209226,1.575414920535206,1.575090787080419,1.5747668591228503,1.5744432585159311,1.5741198627403372,1.5737967934502493,1.5734739283284478,1.5731513888304314,1.5728290528405011,1.57250704161604,1.5721852332422879,1.571863748779076,1.5715424665120041,1.5712215073039126,1.5709007496401841,1.5705803141872279,1.5702600796296358,1.5699401664379427,1.569620453495377,1.5693010610771534,1.5689818682645684,1.568662995138069,1.56834438107923,1.5680259656659454,1.5677078686875503,1.5673899697180245,1.5670723883533062,1.5667550043634682,1.566437937151597,1.566121066683298,1.5658045121693493,1.565488153770332,1.5651721105052552,1.5648562627291223,1.5645407292697104,1.5642253906758934,1.5639103655847537,1.5635955347384831,1.5632810165840039,1.5629666920562795,1.562652679412602,1.5623388597801613,1.5620253512271498,1.5617120350724394,1.56139902919565,1.5610862151067948,1.560773710497447,1.5604613970682213,1.5601493923231677,1.5598376369623188,1.559526071874664,1.559214814283953,1.5589037463649524,1.5585929851551887,1.5582824130181594,1.5579721468056829,1.55766206906946,1.5573522964761155,1.5570427117650247,1.5567334314181307,1.5564243383619594,1.5561155488942815,1.5558069461282507,1.5554986461779732,1.5551905323427095,1.5548827205534075,1.554575094294915,1.5542677693155267,1.5539606292851609,1.5536537897699594,1.5533471346243974,1.5530407792329646,1.5527346076341795,1.5524287350313781,1.5521231033011464,1.5518176545025582,1.5515125035681567,1.5512075349943308,1.550902863533707,1.550598373864938,1.5502941805612258,1.5499901684829835,1.5496864520244777,1.5493829162273804,1.5490796753075098,1.5487766144872983,1.548473847804601,1.5481712606621116,1.5478689669202073,1.547566852161348,1.5472650300689128,1.5469633864046357,1.5466620346753779,1.546360860821654,1.5460599781742865,1.545759272852081,1.5454588580102977,1.5451586199455445,1.5448586716379937,1.5445589561003958,1.5442594165218315,1.543960165620735,1.5436610901360908,1.5433623026124232,1.5430636899648265,1.5427653645643835,1.542467213501819,1.5421693489752404,1.5418716582505252,1.5415742533532708,1.5412770217240304,1.5409800752163547,1.5406833014450003,1.5403868120919297,1.5400904949456309,1.5397944615169399,1.5394985997676043,1.5392030210377907,1.538907613462039,1.5386124882103014,1.5383175335894435,1.5380228605996573,1.5377283577196694,1.537434135780364,1.5371401388922246,1.5368463113362012,1.5365527636900682,1.5362593848601749,1.5359662852561113,1.5356733539544745,1.5353807011971161,1.5350882162304245,1.5347960091289585,1.534503969308442,1.5342122066765829,1.5339206108179886,1.5336292914739578,1.533338138397529,1.5330472611640313,1.5327565496944842,1.532466113398686,1.532175842365189,1.5318858458386961,1.5315960140748466,1.5313064561536833,1.5310170624974868,1.5307279420220725,1.5304389853159206,1.5301503011310507,1.5298617802216998,1.5295735311765215,1.5292854992505007,1.5289976298630643,1.5287100313586264,1.528422594903891,1.5281354286809739,1.5278484240208046,1.527561688943625,1.527275114944156,1.5269888098811888,1.526702665412804,1.5264167892367615,1.5261310731740723,1.5258456247618848,1.5255603359837093,1.5252753142165028,1.5249904516058477,1.524705855368924,1.5244214178129618,1.5241372459957792,1.5238532323858291,1.5235694838819818,1.5232858931134898,1.5230025668206872,1.5227193977932059,1.5224364926132532,1.5221537975593633,1.5218712590692012,1.5215889834885576,1.5213068640061749,1.521025006810737,1.5207433052499035,1.5204618653556572,1.520180580634161,1.5198995569611002,1.5196186880007292,1.519338079472836,1.5190576251993568,1.5187774307445838,1.5184973900877243,1.518217608637974,1.5179379805314035,1.5176586110225097,1.5173793944038205,1.5171004357755304,1.5168216295862194,1.5165430807821738,1.516264683967623,1.5159865439353388,1.515708555444797,1.5154308231356477,1.5151532942768462,1.5148759162914105,1.5145987935900451,1.5143218213185885,1.5140451037355953,1.513768536140756,1.5134922226408645,1.5132160586890675,1.512940148240782,1.5126643869022183,1.512388878477801,1.5121135187264114,1.511838411301864,1.51156345211532,1.511288744670366,1.511014185030054,1.510739876548122,1.510465715439124,1.5101918049073282,1.5099180413184052,1.5096445277275314,1.5093711606511067,1.5090980429955911,1.5088250714277318,1.5085523487056467,1.5082797716460474,1.508007442859083,1.5077353106479021,1.5074633234644963,1.507191583697765,1.5069199885376603,1.5066486402260402,1.5063774361014928,1.5061064782592042,1.5058356641860224,1.5055650958308282,1.5052946708283552,1.505024490981544,1.5047544540726412,1.5044846617590115,1.5042150119700421,1.503945606217886,1.503676342578699,1.5034073224197846,1.5031384439636986,1.5028698084332557,1.502601314197043,1.5023330623337454,1.5020649513576152,1.5017970822035662,1.5015293535311491,1.5012618661318642,1.5009945692351276,1.500727412214589,1.5004604956472996,1.5001937185544614,1.4999271813705979,1.4996607832609414,1.4993946245178407,1.499128604450199,1.4988628232085408,1.498597180245081,1.4983317755688714,1.4980665087750826,1.4978014797316404,1.497536588176315,1.4972719338362548,1.497007416591475,1.496743136028694,1.4964789921698172,1.4962150844614777,1.4959513130671205,1.495687777293637,1.4954243774456606,1.4951612126906846,1.4948981834741804,1.4946353888245836,1.4943727788688403,1.4941103038737207,1.4938480626597177,1.4935859560228744,1.493324082645475,1.4930623434631873,1.4928008370204249,1.492539464392137,1.4922783239852013,1.492017317013506,1.4917565417467291,1.4914958995373548,1.491235488518196,1.4909752101799933,1.4907151625190256,1.4904552471639505,1.490195561974846,1.4899360087179487,1.489676685117465,1.4894174930768738,1.48915853018484,1.4888996984817489,1.4886410954210512,1.4883826231797046,1.4881243790762733,1.487866265423954,1.4876083794067492,1.4873506720901095,1.4870930946747611,1.4868357441434807,1.4865785231486048,1.4863215285391593,1.4860646631025618,1.4858080235544089,1.4855515128168721,1.4852952274724394,1.4850390705777088,1.48478313858238,1.4845273346771506,1.484271755179251,1.4840163034131548,1.4837610755639403,1.483505975089533,1.4832510980431755,1.4829963480159225,1.4827418209294971,1.482487420507762,1.482233242541235,1.4819791908862658,1.48172536120248,1.4814716574783964,1.4812181752430604,1.4809648664036301,1.480711682998515,1.4804587203614794,1.4802058828100686,1.4799532655482421,1.4797007730246057,1.4794485003136237,1.4791963519946474,1.478944423012953,1.4786926180783242,1.478441032007156,1.478189569639353,1.477938325662733,1.4776872050470105,1.4774363023517318,1.4771855226761108,1.4769349604517257,1.4766845209069799,1.4764342983457863,1.4761841981254313,1.4759343144224621,1.4756845527227418,1.4754350070757525,1.475185583095628,1.4749363747050848,1.474687334627911,1.4744384157152894,1.4741897117003544,1.4739411285165778,1.4736927597710718,1.473444511524517,1.4731964772582997,1.4729485631600074,1.4727008625855962,1.4724532818492595,1.4722059141818173,1.4719586660237702,1.471711630481094,1.4714647141202997,1.47121800992281,1.4709714245808487,1.4707250509515772,1.4704787958526357,1.4702327520172147,1.4699868263880749,1.4697411115747245,1.4694955146447517,1.4692501280842705,1.469004859085403,1.4687598000111555,1.4685149043779224,1.468270125825798,1.4680255565336693,1.467781104003712,1.4675368602924195,1.4672927330254835,1.4670488141372868,1.4668050113767486,1.4665614165564245,1.4663179375481725,1.4660746660430033,1.4658315100354273,1.4655885610951904,1.4653457273391706,1.4651031002161279,1.464860587965023,1.464618281913911,1.4643760904235494,1.4641341047015664,1.4638922332302347,1.4636505670970321,1.4634090149054646,1.4631676676231362,1.462926433974504,1.4626854048075746,1.4624444889674764,1.4622037771828915,1.4619632238004001,1.4617227832864592,1.4614825461912833,1.4612424216604556,1.4610025001255489,1.4607626908518447,1.4605230841525463,1.4602835894123567,1.46004429682638,1.4598051158984668,1.4595661367058907,1.4593272688713756,1.459088602354634,1.4588500468969885,1.4586116923408594,1.4583734485458963,1.458135405237493,1.4578974723933549,1.4576597396221158,1.4574221170192658,1.4571846940769442,1.4569473810081561,1.4567102671888106,1.4564732629491592,1.456236457549144,1.4559998060811252,1.4557632637539504,1.4555269196541094,1.4552906844037934,1.4550546469741812,1.4548187181037755,1.4545829866487046,1.4543473634635184,1.454111937289554,1.4538766190971442,1.4536414975130938,1.453406483623256,1.4531716659401614,1.4529369556649205,1.4527024411960472,1.4524680338496478,1.4522338219104758,1.4519997168093728,1.4517658067175883,1.4515320031804382,1.4512983942559228,1.4510648916035742,1.4508315831683969,1.4505983807238816,1.4503653721022893,1.4501325131206488,1.4498997597092214,1.449667199531632,1.449434744645138,1.449202482601252,1.4489703255702922,1.4487383609919078,1.448506501149224,1.448274833370277,1.4480432700507457,1.447811898407301,1.4475806309479216,1.447349554778163,1.4471185825180517,1.446887801162274,1.446657123442654,1.4464266362432543,1.4461962524074465,1.4459660587089158,1.445735968102331,1.4455060672512448,1.445276269221374,1.4450466605663836,1.4448171544627912,1.4445878373546164,1.4443586225289295,1.444129596320348,1.443900715305804,1.443671936172091,1.443443345090181,1.4432148556224462,1.4429865538310591,1.4427583533880863,1.4425303402471408,1.44230242818974,1.442074703061176,1.4418470787521744,1.4416196409999447,1.4413923038041787,1.4411651527942415,1.440938102078548,1.4407112371788573,1.4404844723120678,1.440257892892566,1.4400314132454946,1.4398051186781045,1.4395789236235432,1.43935291328216,1.439127002194869,1.4389012754553516,1.4386756477120513,1.438450203952215,1.4382249014361892,1.4379996975311868,1.4377746770652442,1.4375497549545881,1.4373250159214,1.437100374988609,1.4368759167727743,1.4366515564032936,1.4364273783913315,1.4362032979725223,1.4359793995528662,1.4357555984739994,1.435531979036986,1.435308456689234,1.435085115627099,1.4348618714035277,1.4346388081103951,1.4344158414059573,1.4341930552778344,1.433970365489361,1.4337478559241283,1.4335254424503217,1.4333032088477278,1.4330810710891533,1.4328591128508057,1.432637292057801,1.4324155667392426,1.4321940204163934,1.4319725693226135,1.4317512968761428,1.4315301194141694,1.4313091202521342,1.4310882158308265,1.4308674893631093,1.4306468573931492,1.430426403031451,1.430206042925336,1.4299858600831694,1.4297657712552043,1.429545859347887,1.4293260412141775,1.429106399658823,1.4288868516372697,1.4286674798527814,1.4284482013630704,1.4282290987701352,1.4280100892337324,1.4277912552548118,1.4275725140949556,1.42735394815428,1.4271354747959737,1.4269171763195354,1.4266990113479205,1.4264809386050858,1.4262630402400103,1.4260452338689384,1.425827601540767,1.4256100609725848,1.4253926941134192,1.425175418780988,1.424958316824661,1.4247413061625684,1.4245244685446352,1.4243077219891902,1.424091148146923,1.423874665136147,1.4236583545085277,1.4234421344821495,1.4232260865098632,1.4230101289093113,1.4227943430347394,1.4225786473031359,1.4223631229703493,1.4221476885525024,1.4219324252072554,1.4217172515496537,1.421502248639376,1.4212873757276316,1.421072592163974,1.4208579788614994,1.420643454681641,1.420429100440029,1.4202148350962867,1.4200007393687826,1.4197867323151234,1.4195728945566208,1.419359145248656,1.419145564915688,1.4189320728106671,1.418718749361401,1.418505513918204,1.4182924468124356,1.4180794674915669,1.4178666561907132,1.4176539324542965,1.4174413764213891,1.4172289077331606,1.41701660643284,1.4168043922581417,1.4165923451566511,1.4163803849624244,1.4161685915276034,1.4159569247151125,1.4157453444836612,1.4155339305426033,1.41532260296596,1.4151114413681387,1.4149003659187955,1.4146894561375882,1.4144786322896086,1.4142679737999617,1.414057401028975,1.4138469933073978,1.4136366710905937,1.4134265136151516,1.4132164414312731,1.413006533681582,1.41279671101092,1.4125870524681405,1.4123774787925283,1.4121680689393594,1.4119587437421652,1.4117495820628392,1.4115405048289615,1.4113315908092365,1.4111227610250987,1.4109140941522542,1.4107055506494184,1.4104970910686272,1.4102887939464541,1.4100805805381134,1.4098725292876584,1.4096645615434789,1.4094567556572994,1.4092490330704905,1.4090414720426372,1.4088339941079,1.4086266774339136,1.408419443647436,1.4082123708243404,1.408005380683791,1.4077985512100881,1.4075918042146107,1.407385217590274,1.4071787132404818,1.4069723689669513,1.4067661067649222,1.406560004345099,1.4063539837943682,1.4061481227326087,1.4059423433381653,1.4057367231402755,1.4055311844085552,1.405325804581786,1.4051205447449295,1.4049153660737066,1.4047103458715653,1.404505406635474,1.4043006255788852,1.4040959252893843,1.4038913828906103,1.4036869210605805,1.4034826168333037,1.4032783929770432,1.40307432643636,1.40287034006958,1.4026665107319962,1.4024627613718132,1.4022591687552388,1.4020556559201718,1.4018522995439142,1.4016490227538783,1.401445902138639,1.4012428609149392,1.4010399755828078,1.4008371694481356,1.4006345189225837,1.4004319474010107,1.4002295312068882,1.4000272319896958,1.39982501148739,1.399622945891495,1.3994209588184952,1.3992191263721687,1.3990173722573374,1.3988157724902097,1.3986142508637658,1.398412883306822,1.398211593700338,1.398010457885912,1.3978093998323071,1.3976084952940777,1.3974076683276127,1.3972069946005978,1.3970063982568706,1.3968059548774228,1.396605588693364,1.3964053751991647,1.3962052387130317,1.3960052546430874,1.3958053473944598,1.395605592289096,1.3954059138188706,1.3952063872197273,1.395006974691461,1.394807638520141,1.3946084538130314,1.3944093452781086,1.394210387937061,1.3940115065840042,1.393812776155222,1.3936141215307956,1.3934156175617738,1.3932171892140335,1.3930189112535558,1.3928207087318418,1.392622656329976,1.3924246791849102,1.3922268518930012,1.3920290996764828,1.3918314970471497,1.391633969312348,1.3914365908994797,1.3912392872008323,1.3910421325595812,1.3908450524527871,1.3906481211395656,1.3904512641815825,1.3902545557540584,1.3900579215030957,1.3898614355201873,1.3896650605840979,1.3894687595575752,1.389272606406834,1.3890765269883298,1.388880595184961,1.3886847369370352,1.3884890260442977,1.3882933885307425,1.3880978981131253,1.3879024808989602,1.3877072105221777,1.387512013173647,1.3873169624046346,1.3871219844892004,1.3869271528961102,1.38673239398245,1.3865377811346458,1.3863432407926473,1.386148846260701,1.3859545240614566,1.3857603474171436,1.3855662429329485,1.3853722837492424,1.3851783965535875,1.3849846544046578,1.3847910206035827,1.3845974585334322,1.3844040411306362,1.3842106952879831,1.3840174938606025,1.383824363823093,1.3836313779494434,1.383438463295902,1.383245692555474,1.3830529928658981,1.3828604368393533,1.3826679516949096,1.3824756099640767,1.3822833389470965,1.3820912110949661,1.3818991537889416,1.3817072393996628,1.3815153953892418,1.3813236940481184,1.3811320629191022,1.3809405742125866,1.3807491555519236,1.3805578790676154,1.3803666724633983,1.3801756077900382,1.3799846488583132,1.379793759558966,1.379603011823451,1.3794123335557786,1.3792217966080507,1.3790313289641172,1.3788410023968807,1.3786507449698762,1.378460628376959,1.3782705807611944,1.3780806737375433,1.3778908355284478,1.3777011376701254,1.377511508464241,1.3773220193684212,1.3771325987634002,1.3769433180283637,1.3767541056229635,1.376565032848095,1.3763760282421749,1.376187163027958,1.3759983658224755,1.3758097077704896,1.3756211175674948,1.3754326662804117,1.3752443182173861,1.3750560377646233,1.3748678958725642,1.3746798214321942,1.3744918853164845,1.3743040164943563,1.3741162857614573,1.3739286221644953,1.3737410964219428,1.3735536376581445,1.3733663165145449,1.3731790621929767,1.3729919452580026,1.3728048949887957,1.372617981873183,1.37243113526753,1.3722444255830735,1.3720577822532243,1.3718712756127744,1.3716848351720323,1.3714985311894916,1.3713122932522108,1.3711261915425286,1.3709401557241092,1.3707542559032801,1.3705684218201648,1.370382723505224,1.3701971257904513,1.3700115935839132,1.3698261968025423,1.3696408653769705,1.3694556691486215,1.369270538124079,1.3690855420694004,1.3689006110669766,1.3687158148076406,1.3685310834494475,1.3683464866081476,1.3681619545173163,1.3679775567177623,1.3677932235184393,1.3676090243853556,1.3674248897026993,1.3672408888618193,1.3670569523219966,1.36687314940006,1.3666894106302432,1.3665058052549939,1.366322263883355,1.3661388556835352,1.365955511339246,1.365772299944594,1.3655891868047216,1.3654061372990667,1.365223220410847,1.3650403670098292,1.3648576460054755,1.3646749883417308,1.3644924628544404,1.3643100005615874,1.3641276702255372,1.3639454029381732,1.3637632673885178,1.363581194742216,1.3633992536150836,1.3632173752463892,1.363035628178878,1.3628539437253044,1.3626723903554798,1.3624908994555065,1.3623095394223974,1.3621282417154659,1.361947074659061,1.3617659697855715,1.361584995346817,1.3614040829481246,1.3612233007689203,1.3610426145764476,1.3608619902105286,1.3606814957422528,1.360501062958695,1.3603207598588858,1.3601405183023632,1.3599604062162314,1.359780355532358,1.3596004341060544,1.359420573941382,1.3592408428219924,1.3590611728240074,1.35888163165955,1.3587021514766695,1.3585227999160923,1.358343509197661,1.3581643468908375,1.3579852452871255,1.357806271884853,1.357627359047051,1.3574485742010451,1.3572698497812632,1.3570912531441577,1.3569127167954202,1.3567343080207612,1.3565559593970051,1.3563777381392494,1.3561996105018213,1.3560215428098328,1.3558436021727096,1.355665721344531,1.355487967364432,1.3553102730571673,1.3551327053917115,1.3549551972633636,1.3547778155710664,1.3546004932805331,1.3544232972208026,1.3542461604278742,1.3540691496610096,1.353892198026365,1.3537153722135524,1.3535386053987568,1.353361964202067,1.3531853818695683,1.3530089249519535,1.3528325267650796,1.3526562537903701,1.3524800394133263,1.3523039500462282,1.3521279191440936,1.3519520130501845,1.3517761984591037,1.3516004421346377,1.3514248103167588,1.3512492366337203,1.3510737872567895,1.3508983958832939,1.3507231286159198,1.3505479192209433,1.3503728337325938,1.3501978059859703,1.3500229019469696,1.3498480555193884,1.349673332600914,1.3494986671639164,1.3493241250379968,1.3491496402639735,1.3489752786034845,1.3488009741656728,1.3486267926443356,1.3484526682168163,1.348278666509194,1.3481047217668887,1.3479308995483834,1.3477571341670516,1.347583491113902,1.3474099375138437,1.3472364405594173,1.3470630656406501,1.34688974724026,1.3467165506811014,1.3465434105134175,1.3463703919930121,1.3461974297375308,1.3460245889358466,1.3458518042728866,1.3456791408707132,1.3455065334814134,1.345334047160358,1.3451616167266744,1.3449893071691608,1.3448170533738637,1.3446449202631285,1.3444728427898003,1.3443008858098904,1.3441289843429227,1.3439572031786922,1.3437854774032827,1.343613871740391,1.3434423213425413,1.3432708908674502,1.3430995155339627,1.3429282599339334,1.3427570916461724,1.3425859783155,1.3424149844352007,1.3422440453893993,1.34207322560581,1.3419024605344656,1.3417318145376256,1.341561223131112,1.341390750611848,1.3412203325613272,1.3410500332112512,1.3408797882086683,1.3407096617201746,1.3405395894582564,1.3403696355245192,1.3401997356967714,1.340029954011743,1.3398602263124477,1.3396906165708546,1.3395210606950672,1.3393516225924087,1.3391822382359562,1.3390129714685006,1.3388437583279784,1.3386746625927624,1.3385056522522392,1.3383366953603562,1.3381678555990737,1.3379990691679702,1.3378303996848717,1.3376617834138138,1.337493283908601,1.3373248374976119,1.337156507670742,1.3369882308206005,1.3368200703732849,1.3366519627855211,1.336483971419722,1.336316032796617,1.336148210215045,1.335980440259627,1.3358127861657392,1.3356451845817812,1.3354776986797787,1.3353102651717965,1.3351429471666214,1.3349756814398714,1.3348085310372042,1.3346414327976805,1.3344744497039387,1.3343075501469168,1.3341407025807062,1.3339739698936255,1.3338072890828518,1.3336407229739606,1.3334742086271822,1.3333078088054569,1.3331414606319578,1.3329752268071002,1.3328090445168908,1.3326429763993262,1.3324769597031378,1.3323110570040135,1.3321452056132979,1.3319794680444794,1.3318137816714064,1.3316482089454753,1.3314826873029302,1.3313172791331829,1.3311519219347632,1.3309866780352075,1.330821484995223,1.330656405080576,1.3304913759140442,1.3303264596997308,1.33016162522138,1.3299968413245251,1.3298321701209792,1.329667549388219,1.329503041176661,1.3293385833254747,1.3291742378237867,1.329009942572352,1.3288457594991132,1.3286816265663044,1.3285176056407886,1.3283536347461729,1.328189775688347,1.3280259665521839,1.3278622690827047,1.327698621425943,1.3275350852661556,1.327371598810431,1.3272082236823668,1.32704489815,1.326881683776374,1.3267185188903692,1.3265554649945774,1.3263924604786188,1.3262295667847372,1.3260667223631877,1.3259039885959698,1.3257413346815459,1.3255787298787423,1.3254162354793895,1.3252537900848687,1.325091454927024,1.3249291686675069,1.324766992478277,1.324604865081152,1.3244428475883108,1.3242808787816343,1.3241190197136214,1.3239572092261134,1.323795508312032,1.3236338558730756,1.32347231284269,1.3233108181823279,1.3231494327660611,1.322988095614995,1.3228268675439276,1.3226656876335152,1.3225046166393826,1.322343593701635,1.3221826795168259,1.3220218132844073,1.3218610556419603,1.321700376163415,1.3215397444817871,1.3213792211463915,1.321218745504603,1.3210583780470144,1.3208980581799943,1.3207378463355137,1.3205776819788344,1.3204176254834044,1.320257616373279,1.320097714963482,1.3199378608367622,1.3197781142498182,1.3196184148439924,1.3194588228177568,1.3192992778709483,1.3191398401439105,1.318980449394875,1.3188211657061557,1.3186619288942805,1.31850279898363,1.3183437158489302,1.3181847394567272,1.3180258097398452,1.3178669866070933,1.3177082399999205,1.317549539917623,1.3173909461825883,1.3172323988724564,1.3170739577521193,1.3169155629569729,1.3167572741945122,1.3165990316577907,1.3164408949970015,1.31628280446276,1.3161248196480524,1.3159668808609595,1.3158090476373578,1.315651260342695,1.315493578455834,1.315335942399493,1.3151784115956162,1.3150209265240975,1.3148635465500564,1.3147062122104667,1.3145489828137187,1.3143917989537695,1.314234719882375,1.31407768625038,1.3139207572530018,1.3137638735978767,1.3136070944237768,1.3134503900604202,1.3132937308940744,1.313137175979022,1.3129806661644627,1.3128242604484686,1.3126678997366996,1.3125116429711106,1.3123554311137284,1.312199323050484,1.3120432597996756,1.311887300191304,1.311731385299846,1.3115755738994639,1.3114198071207193,1.3112641436820291,1.3111085247699465,1.3109530090472354,1.310797537756347,1.3106421695044843,1.310486845589904,1.3103316245643404,1.3101764477817615,1.3100213737385256,1.3098663438442206,1.3097114165399188,1.3095565625070804,1.3094017524825499,1.3092470448246447,1.3090923810815964,1.3089378195566657,1.3087833018533817,1.308628886220038,1.3084745143153695,1.308320244332794,1.3081660179861614,1.3080118934141032,1.3078578123854931,1.3077038329842672,1.3075498970342314,1.3073960625647159,1.3072422714543697,1.307088581678006,1.3069349351690258,1.3067813898478156,1.3066278877024373,1.306474486598941,1.3063211285799594,1.3061678714572944,1.3060146573280607,1.3058615439498997,1.305708502348772,1.3055555036048898,1.3054026053948244,1.305249749951501,1.3050969948975528,1.3049442825200734,1.304791670387846,1.304639100842044,1.304486631397689,1.3043342044499455,1.304181877460161,1.3040295928774026,1.3038774081094306,1.3037252656591274,1.3035732228807537,1.3034212223309176,1.303269321310469,1.3031174624296535,1.3029657029359956,1.3028139854932927,1.30266236729583,1.3025107910608686,1.302359313929542,1.302207878672487,1.3020565423777712,1.3019052478693218,1.301754052182226,1.301602926706612,1.3014518428856767,1.301300857675202,1.301149914031956,1.300999068858955,1.300848265165953,1.3006975598032873,1.3005468958336122,1.3003963300546697,1.3002458055819281,1.3000953791606211,1.2999449939589447,1.2997947066697075,1.2996444605137494,1.2994943121315383,1.299344204796472,1.2991941950967631,1.2990442263582813,1.2988943551170682,1.2987445247513807,1.298594791745174,1.2984450995290069,1.2982955045348314,1.2981459502454253,1.29799649304082,1.2978471046412476,1.2976977568189436,1.2975485058762193,1.2973992954260274,1.297250181718967,1.2971011084199149,1.2969521317278425,1.2968031953594659,1.2966543554622116,1.2965055558045526,1.2963568524824516,1.2962081893160557,1.2960596223499472,1.2959110954558635,1.2957626646270886,1.2956142737868672,1.2954659788772676,1.295317723872959,1.2951695646648753,1.2950214452790278,1.2948734215552982,1.2947254375709578,1.2945775491149167,1.2944297003156242,1.2942819469111009,1.2941342609450657,1.293986614512208,1.2938390632743686,1.2936915514875797,1.293544134762995,1.2933967574075391,1.2932494749817578,1.293102231843387,1.2929550835024464,1.2928079743674008,1.2926609598978243,1.2925139845528297,1.2923671037416262,1.2922202619738936,1.2920735146085551,1.2919268062057783,1.2917801920742802,1.2916336168246345,1.291487135715432,1.2913406934075735,1.291194345109602,1.2910480355326652,1.2909018198353384,1.2907556427789353,1.2906095594721432,1.29046354227574,1.29031756360047,1.2901716784803372,1.290025831801721,1.289880078548934,1.2897343636582443,1.2895887420643506,1.2894431587533306,1.289297668610348,1.2891522166712113,1.2890068577716265,1.2888615369970549,1.2887163091338227,1.2885711193169647,1.288426022283506,1.2882809632179766,1.288135996808177,1.2879910682880544,1.2878462322962636,1.2877014341160904,1.2875567283371196,1.2874120602918988,1.2872674845210206,1.2871229464062164,1.2869785004391627,1.2868340920506973,1.2866897756836582,1.2865455240342367,1.286401309847535,1.286257187493279,1.2861131025247323,1.2859691092629717,1.285825153310098,1.285681288938616,1.2855374617993867,1.285393726116419,1.2852500275892573,1.2851064203934903,1.2849628502772694,1.284819371367839,1.284675929461882,1.2845325786383721,1.2843892647424486,1.284246041804891,1.2841028557192176,1.2839597604680895,1.2838167019933278,1.2836737342295501,1.2835308031668058,1.283387962691743,1.2832451588425642,1.2831024454580229,1.282959795538571,1.2828171821326257,1.2826746590072395,1.282532172320667,1.2823897757922522,1.2822474156281396,1.2821051455000383,1.2819629116619096,1.2818207677379005,1.2816786600297148,1.281536642114012,1.2813946603401636,1.2812527682374142,1.2811109122027289,1.2809691457180128,1.2808274152277501,1.2806857741665776,1.2805441690264265,1.2804026531947386,1.2802611732108176,1.2801197824149835,1.2799784273938393,1.2798371614406558,1.279695931189262,1.279554789885952,1.2794137108295494,1.2792726673659192,1.2791317126710298,1.2789907934964526,1.2788499629713599,1.2787091678942937,1.2785684613477024,1.278427790177027,1.2782872074180627,1.2781466599630769,1.2780062008012856,1.2778657768717088,1.2777254411170533,1.2775851405230219,1.2774449279858833,1.2773047505379502,1.2771646610291252,1.277024606538259,1.2768846398689593,1.2767447081465428,1.2766048641283931,1.2764650549862222,1.27632533343126,1.2761856466815427,1.2760460474022166,1.2759064828575712,1.27576700566674,1.2756275894443554,1.275488207851126,1.2753489134372997,1.2752096535824864,1.275070480791097,1.274931342488747,1.2747922911340794,1.2746532741986447,1.2745143440953886,1.2743754483417262,1.2742366393049747,1.2740978645483445,1.2739591763935938,1.2738205224496575,1.273681954992805,1.2735434216776258,1.2734049747349687,1.2732665618650096,1.2731282352532451,1.2729899426453672,1.27285173618159,1.2727135636530522,1.2725754771547542,1.272437424523212,1.2722994578082807,1.2721615509112219,1.2720236777785026,1.2718858903923898,1.2717481367025398,1.271610468646246,1.2714728342182995,1.2713352853110877,1.271197769964471,1.2710603400259963,1.2709229435805245,1.2707856324308318,1.2706483547067102,1.2705111621662324,1.2703740029840542,1.2702369288736124,1.2700998880543577,1.2699629321951587,1.2698260095601939,1.2696891717738301,1.2695523671449065,1.2694156472533547,1.2692789604526071,1.2691423582782275,1.2690057891281734,1.2688693044937078,1.2687328785573104,1.2685964855458187,1.2684601768841708,1.2683239010813427,1.2681877095181375,1.2680515507478218,1.26791547610713,1.2677794341935535,1.267643476299824,1.2675075510675904,1.2673717097456478,1.2672359010197365,1.2671001760947809,1.2669644837005465,1.2668288749981518,1.2666932987613222,1.266557806107436,1.266422345854112,1.266286969075054,1.266151624631708,1.2660163635541688,1.265881134747644,1.2657459891986842,1.2656108758561933,1.2654758456632427,1.265340847612367,1.2652059326032234,1.2650710751160967,1.26493624967474,1.2648015071138128,1.2646667965346388,1.2645321687286242,1.2643975728404961,1.2642630596184723,1.2641285782506178,1.2639941794420255,1.2638598124240348,1.2637255278586783,1.2635912750205038,1.2634571045285476,1.2633229657005032,1.2631889091124735,1.2630548841252323,1.2629209412720137,1.2627870299566082,1.2626532006694446,1.2625194028572655,1.2623856869677577,1.2622520024905528,1.2621183998306582,1.261984828520531,1.2618513389225627,1.2617179057874603,1.2615845039085978,1.2614511835845637,1.2613178944545973,1.2611846867748286,1.2610515102271012,1.2609184150251478,1.2607853508933524,1.2606523680031156,1.2605194161212976,1.2603865453770275,1.260253705579581,1.2601209468158785,1.2599882189375469,1.25985557198936,1.2597229558652345,1.2595903955617438,1.2594579410289748,1.2593254922224562,1.2591930991134026,1.2590607616608387,1.2589285297310218,1.2587963034477188,1.2586641326982522,1.2585320174418189,1.2584000074610924,1.2582680030475828,1.258136054004967,1.2580042100533946,1.2578723716098552,1.2577405884154549,1.257608860429688,1.257477237289548,1.2573456195789072,1.257214056955654,1.2570825493794529,1.2569511464043828,1.2568197487807113,1.2566884060833519,1.2565571182721367,1.2564259348184748,1.2562947566385398,1.2561636332245132,1.256032564536395,1.2559015999631635,1.2557706405864149,1.2556397358158393,1.2555088856116035,1.2553781392804952,1.2552473980690502,1.2551167113047077,1.2549861282327721,1.254855550223164,1.254725026541793,1.2545945571491157,1.2544641912086631,1.2543338302544547,1.254203523470568,1.2540732708176225,1.2539431213776149,1.2538129768481858,1.2536828863318175,1.253552849789293,1.2534229162213089,1.2532929874886527,1.2531631126124478,1.2530332915536395,1.2529035732318603,1.252773859670571,1.252644199809771,1.2525145936105675,1.2523850899117632,1.2522555908990205,1.2521261454314498,1.2519967534703187,1.2518674637738338,1.2517381786893893,1.251608946995441,1.251479817389902,1.2513506923411555,1.25122162056732,1.2510926020299413,1.250963685346743,1.2508347731470233,1.2507059140686518,1.2505771080733326,1.250448403698829,1.250319703734891,1.2501910567393693,1.2500624626741264,1.2499339699971947,1.2498054816583135,1.249677046135546,1.24954866339091,1.2494203818029381,1.2492921044808967,1.2491638798232907,1.2490357077922942,1.248907636687165,1.2487795697762412,1.2486515553786954,1.2485236417344825,1.2483957322309382,1.2482678751278897,1.2481400703877805,1.2480123661716886,1.2478846660252225,1.2477570181292745,1.2476294224464428,1.2475019270591527,1.2473744356708323,1.2472469963836654,1.2471196091604029,1.2469923220050423,1.2468650387783802,1.2467378075041162,1.2466106281451526,1.246483548627284,1.2463564729682244,1.2462294491134134,1.2461024770259046,1.245975604553511,1.2458487358704171,1.2457219188440252,1.245595153437539,1.2454684874210122,1.2453418251246533,1.2452152143380497,1.2450887027730817,1.2449621948766814,1.2448357383802207,1.2447093332471642,1.244583027112019,1.2444567245769658,1.2443304732959466,1.2442042732325742,1.244078171944202,1.2439520741878163,1.2438260275401507,1.2437000319649651,1.2435741349426759,1.243448241384638,1.2433223987905937,1.2431966071244491,1.2430709137899023,1.2429452238522387,1.242819584734427,1.2426939964005188,1.24256850617771,1.2424430192847815,1.2423175830681445,1.242192197491996,1.2420669098072454,1.2419416253857343,1.2418163914975333,1.2416912553364792,1.2415661223889227,1.2414410398678217,1.2413160077376246,1.2411910731162576,1.2410661416423774,1.2409412604529761,1.2408164295126463,1.240691695863615,1.2405669652964162,1.240442284872291,1.240317654555973,1.240193121314205,1.2400685910889702,1.2399441108659703,1.239819680610081,1.239695347212771,1.239571016767047,1.2394467361832844,1.2393225054264987,1.239198371313096,1.2390742400866837,1.2389501585825196,1.2388261735608523,1.2387021913779581,1.2385782588128986,1.2384543758309334,1.2383305891176153,1.2382068051790822,1.2380830707196466,1.2379593857047078,1.2378357967453295,1.2377122104970935,1.2375886735897716,1.237465185988901,1.2373417942312657,1.2372184051214723,1.2370950652149602,1.236971774477404,1.2368485793715143,1.2367253868505073,1.2366022433956965,1.2364791489728932,1.2363561499709408,1.23623315349125,1.2361102059412161,1.235987307286785,1.2358645038431388,1.2357417028594708,1.2356189506694613,1.2354962935331812,1.2353736388103878,1.2352510327796118,1.235128475407036,1.2350060128794267,1.234883552703604,1.2347611410847434,1.2346387779891614,1.2345165095305217,1.2343942433623007,1.2342720256165205,1.234149856259631,1.2340277813323954,1.2339057086345402,1.2337836842251366,1.2336617080707664,1.233539826139495,1.2334179463768926,1.2332961147692811,1.2331743312833747,1.2330526418147405,1.2329309544543898,1.232809315116096,1.232687723766704,1.232566226229483,1.2324447307404838,1.2323232831411308,1.2322019292006017,1.2320805772634607,1.231959273117003,1.2318380167283023,1.231716853794585,1.2315956928047558,1.2314745794741095,1.2313535137698488,1.2312325413174474,1.2311115707497526,1.2309906477102563,1.23086977216629,1.2307489896717712,1.2306282090030942,1.230507475732145,1.2303867898263834,1.2302661967683663,1.2301456054776412,1.2300250614546844,1.2299045646670823,1.2297841605262285,1.229663758094429,1.2295434028009469,1.2294231400039308,1.2293028788724971,1.2291826647826276,1.22906249770213,1.2289424229183281,1.228822349742415,1.2287023234794985,1.2285823440975119,1.2284624568131477,1.2283425710792863,1.2282227321303552,1.228102939934413,1.2279832396377128,1.2278635408344354,1.2277438886885215,1.227624283168153,1.2275047693493366,1.2273852569671677,1.227265791115291,1.2271463717620128,1.2270270439132827,1.2269077174447276,1.2267884373798874,1.2266692036871918,1.2265500613027238,1.2264309202422594,1.2263118254594239,1.2261928218380271,1.2260738194987029,1.225954863342767,1.2258359533388634,1.2257171343012663,1.2255983164900923,1.225479544737075,1.225360819010979,1.2252421840567325,1.2251235502735558,1.225004962423788,1.2248864204763152,1.2247679691069058,1.2246495188535074,1.224531114409253,1.2244127557431481,1.224294487461989,1.224176220242075,1.2240579987075193,1.2239398228274472,1.223821737139868,1.2237036524590592,1.2235856133403005,1.2234676197528358,1.2233497161660736,1.2232318135318965,1.2231139563369358,1.2229961889992715,1.2228784225737437,1.22276070149562,1.2226430257343521,1.2225254396397414,1.2224078544035837,1.2222903143928225,1.222172819577026,1.222055414237901,1.2219380097038306,1.2218206502736173,1.221703335916946,1.2215861108476103,1.2214688865302146,1.2213517071956024,1.2212345728135745,1.2211175275301946,1.2210004829459211,1.2208834832238213,1.220766528333812,1.220649662354407,1.220532797021555,1.2204159764307283,1.2202992446098986,1.220182513396391,1.220065826835102,1.2199491848961488,1.2198326315402697,1.2197160787396457,1.2195995704718936,1.2194831067072451,1.2193667313393841,1.2192503564749866,1.2191340260245696,1.2190177399584787,1.2189015421035223,1.2187853447005113,1.2186691915930428,1.218553082751575,1.2184370619362186,1.2183210415215626,1.2182050652844616,1.2180891331954862,1.2179732889482267,1.2178574450506934,1.217741645213176,1.2176258894063567,1.2175102212574822,1.2173945534076296,1.2172789295006998,1.2171633931142998,1.2170478569890695,1.2169323647192365,1.216816916275678,1.216701555169964,1.216586194275183,1.2164708771194823,1.216355603673849,1.2162404173839918,1.216125231255096,1.2160100887494039,1.2158949898380111,1.2157799779009408,1.2156649660751238,1.2155499977570707,1.2154350729179881,1.2153202348723846,1.215205396888588,1.215090602297553,1.2149758510705937,1.2148611864568786,1.2147465218557856,1.2146319005328845,1.214517322459598,1.2144028308199262,1.2142883391439505,1.2141738906320294,1.214059528419401,1.2139451661339442,1.2138308469272237,1.2137165707708493,1.2136023807351908,1.2134881905782289,1.2133740433866156,1.2132599391320678,1.2131459208202575,1.2130319023389229,1.2129179267099754,1.2128039939052386,1.2126901468658555,1.2125762996089815,1.2124624950919571,1.2123487332867111,1.2122350570700278,1.2121213805881395,1.2120077467339847,1.2118941554795977,1.2117806496375718,1.2116671434828779,1.211553679844221,1.2114403014861643,1.2113269227800068,1.2112135865063913,1.2111002926375343,1.210987083874102,1.210873874715541,1.2107607078785554,1.2106475833354655,1.2105345437232067,1.2104215036690393,1.2103085058258944,1.2101955501661958,1.2100826792633148,1.2099698078719907,1.2098569785815487,1.209744191364515,1.2096314887308628,1.2095187855624772,1.209406124385243,1.2092935051717892,1.209180970368855,1.20906843498514,1.2089559414832542,1.2088434898359282,1.2087311224268322,1.2086187543911495,1.2085064281283802,1.2083941859750011,1.2082819431608403,1.2081697420381734,1.2080575825799076,1.2079455070597371,1.207833430833399,1.2077213961903444,1.2076094031035813,1.2074974937841836,1.20738558371347,1.2072737151182305,1.207161887971573,1.2070501444221131,1.2069384000764258,1.2068266970988026,1.20671503546245,1.2066034572536872,1.206491878204021,1.206380340415405,1.206268843861145,1.2061574305654243,1.2060460163843583,1.2059346433577236,1.2058233114589252,1.2057120626501703,1.2056008129118603,1.2054896042217567,1.2053784784956916,1.205267351807067,1.2051562660872392,1.2050452213097833,1.2049342593288355,1.204823296341523,1.2047123742174652,1.2046014929303348,1.2044906942727298,1.204379894565184,1.2042691356157387,1.2041584173981636,1.204047781643677,1.203937144795901,1.203826548601458,1.2037159930342136,1.203605519764164,1.2034950453577036,1.2033846115001923,1.2032742181655918,1.2031639069628333,1.2030535945807674,1.20294332264365,1.2028331327147168,1.2027229415744525,1.202612790801388,1.2025026803696512,1.2023926517816865,1.2022826219398857,1.2021726323619486,1.2020626830220977,1.2019528153621406,1.2018429464060645,1.2017331176108936,1.2016233289509444,1.2015136218075426,1.2014039133259595,1.2012942449026986,1.2011846165121705,1.2010750694753725,1.2009655210585508,1.2008560125978425,1.2007465440677507,1.2006371567290997,1.2005277679688005,1.2004184190627778,1.2003091099856273,1.2001998819381532,1.2000906524276236,1.199981462669904,1.199872353820883,1.1997632434778944,1.1996541728118602,1.1995451417975376,1.1994361915310623,1.199327239729589,1.1992183275042474,1.1991094548298866,1.1990006627430396,1.1988918690803783,1.1987831148933918,1.1986744001570204,1.1985657658483455,1.1984571299232527,1.1983485333737416,1.1982399761748435,1.1981314992443384,1.1980230206570235,1.1979145813455592,1.197806181285067,1.1976978613341769,1.1975895396862948,1.1974812572148932,1.1973730138951832,1.1972648505267929,1.1971566854214382,1.1970485593935525,1.1969405131986113,1.1968324652368645,1.1967244562785642,1.196616486299078,1.1965085959951407,1.1964007038847884,1.196292850679495,1.1961850363547168,1.1960773015485946,1.1959695648966544,1.1958618670517398,1.1957542079893946,1.195646628289314,1.1955390467042175,1.1954315038284653,1.1953239996376894,1.1952165746532857,1.1951091477448716,1.1950017594484719,1.1948944097398055,1.1947871390821156,1.1946798664616245,1.1945726323561658,1.1944654771854655,1.1943583200230037,1.194251201303069,1.1941441210015338,1.1940371194802253,1.193930115928716,1.19382315072336,1.1937162238401162,1.1936093755830586,1.1935025252575604,1.1933957131821868,1.193288939332982,1.193182243956412,1.1930755464733602,1.1929688871447475,1.192862265946703,1.1927557230682282,1.1926491780454287,1.1925426710817235,1.1924362021533277,1.1923298113919212,1.1922234184485427,1.1921170634692546,1.1920107464303562,1.1919045074063492,1.1917982661629192,1.1916920627889132,1.191585937316044,1.1914798095957917,1.1913737196741878,1.191267667527679,1.1911616931310485,1.1910557164499227,1.190949777473368,1.1908438761779148,1.1907380524815578,1.190632226463786,1.1905264380568423,1.1904206872373402,1.190315013866627,1.1902093381377716,1.190103699926333,1.1899980992090087,1.1898925757906387,1.1897870499775889,1.1896815615888767,1.1895761106012812,1.1894707367632769,1.1893653604942445,1.1892600215567994,1.1891547596572338,1.1890494952995037,1.1889442682040159,1.1888390783476939,1.188733965380706,1.1886288499195348,1.1885237716284291,1.1884187304843936,1.1883137660816123,1.1882087991488155,1.1881038692942327,1.1879989764949497,1.187894160289304,1.1877893415179963,1.187684559733375,1.1875798149126064,1.18747514653832,1.1873704755629093,1.1872658414829798,1.1871612442757782,1.1870567233683627,1.1869521998245445,1.1868477130853232,1.1867432631280257,1.186638889324275,1.1865345128490261,1.1864301730878093,1.1863259093707625,1.1862216429560162,1.186117413187589,1.1860132200429472,1.185909102797032,1.185804982818639,1.1857008993965557,1.185596852508328,1.185492881373835,1.1853889074722657,1.185284970037313,1.1851810690466003,1.1850772436650812,1.1849734154820666,1.1848696236762886,1.1847658682254494,1.1846621882397101,1.1845585054182344,1.1844548588849284,1.184351248617572,1.1842477136716685,1.1841441758559643,1.184040674239674,1.1839372088006552,1.1838338185398867,1.1837304253754293,1.1836270683219399,1.1835237863395924,1.1834205014282564,1.1833172525617581,1.1832140397180901,1.1831109018031347,1.1830077609256084,1.1829046560050132,1.1828015870194173,1.1826985928205433,1.1825955956256906,1.1824926343001674,1.1823897088221187,1.1822868579892387,1.1821840041271445,1.1820811860470828,1.1819784037272751,1.1818756959115184,1.181772985033484,1.1816703098504884,1.181567670340829,1.1814651051945364,1.1813625369530734,1.1812600043199575,1.1811575459449826,1.1810550844502798,1.180952658499105,1.1808502680698862,1.1807479517588793,1.180645632295548,1.1805433482895782,1.1804410997194723,1.1803389251280774,1.1802367473519308,1.180134604947277,1.1800324978926926,1.1799304646777455,1.179828428245787,1.1797264270997487,1.1796244612182822,1.1795225690378046,1.179420673608222,1.1793188133792831,1.1792169883297132,1.179115236842907,1.1790134820750677,1.1789117624228902,1.1788100778651727,1.178708466732415,1.1786068522868616,1.1785052728722802,1.178403766779585,1.1783022573503803,1.178200782888824,1.1780993433738414,1.177997977043675,1.1778966073455226,1.177795272530838,1.1776939725786197,1.177592745674564,1.1774915153712087,1.1773903198674298,1.1772891591422983,1.1771880713290912,1.1770869800854318,1.176985923557746,1.176884901725176,1.1767839526687054,1.176683000150791,1.176582082265534,1.1764811989921469,1.1763803883594468,1.1762795742344712,1.1761787946591211,1.1760780496126813,1.175977377071925,1.1758767010082207,1.1757760594113948,1.1756754902192714,1.1755749174813,1.1754743791483342,1.1753738751997826,1.1752734435216434,1.17517300826726,1.1750726073356295,1.1749722407062302,1.1748719462133588,1.1747716481140036,1.174671384255429,1.1745711546171833,1.1744709969819842,1.1743708357102183,1.1742707085975397,1.1741706156235665,1.1740705945195613,1.1739705697490606,1.1738705790562325,1.1737706224207647,1.1736707375225854,1.1735708489281373,1.1734709943302237,1.1733712113703547,1.1732714246919878,1.173171671949485,1.173071953122654,1.172972305801886,1.172872654733114,1.17277303751955,1.1726734541410702,1.172573942137067,1.172474426355706,1.1723749443491702,1.1722754960974044,1.1721761190889228,1.1720767382738817,1.1719773911535551,1.1718780777079563,1.171778835374842,1.1716795892061163,1.1715803766522663,1.1714811976933723,1.1713820897165543,1.1712829778752232,1.1711838995691985,1.171084854778628,1.170985880840114,1.1708869030083342,1.1707879586325602,1.1706890850115863,1.1705902074758796,1.1704913633368812,1.170392552574856,1.1702938124382891,1.1701950683584956,1.1700963575965775,1.1699976801328662,1.1698990731656567,1.1698004622268732,1.1697018845273979,1.1696033400476284,1.1695048659357878,1.1694063878241718,1.1693079428735615,1.1692095310644202,1.169111189495016,1.1690128438977812,1.1689145313835123,1.1688162519327383,1.1687180425938908,1.1686198291993015,1.1685216488099004,1.1684235014062825,1.1683254239871588,1.168227342484526,1.168129293909565,1.1680313152237753,1.1679333324337458,1.167835382513423,1.1677374654435149,1.167639618136005,1.1675417666967383,1.1674439480501155,1.16734616217691,1.1672484459397041,1.167150725543366,1.1670530378628672,1.1669553828790447,1.1668577974051972,1.166760207744983,1.1666626507240598,1.1665651263233292,1.16646767130692,1.16637021207705,1.1662727854101789,1.1661753912872714,1.1660780664234018,1.1659807373191173,1.1658834407017935,1.1657862132497903,1.1656889815372478,1.165591782254806,1.1654946153835406,1.165397517552956,1.1653004154351208,1.165203345671791,1.165106308244105,1.1650093397328272,1.1649123669077244,1.164815426361783,1.1647185180762047,1.1646216785831256,1.1645248347497845,1.1644280231205115,1.1643312436765707,1.1642345329015837,1.1641378177600334,1.1640411347477075,1.163944483845932,1.1638479014899261,1.1637513147411918,1.1636547600470857,1.1635582373889963,1.163461783153853,1.1633653244999504,1.163268897826328,1.1631725394837718,1.1630761767030227,1.1629798458469551,1.162883546897065,1.1627873161560445,1.162691080951035,1.162594877596788,1.1624987060748615,1.1624026026399636,1.1623064947154136,1.162210418567952,1.162114374179197,1.1620183977559853,1.1619224168175901,1.1618264675828525,1.1617305500334507,1.1616347003284602,1.1615388460828864,1.1614430234677815,1.161347232464884,1.1612515091856168,1.1611557813404987,1.1610600850529011,1.1609644203046234,1.1608688231595465,1.1607732214234803,1.160677651172227,1.1605821484340844,1.1604866410861845,1.1603911651687255,1.1602957206636106,1.1602003435517874,1.1601049618052948,1.160009611416953,1.1599142923687247,1.1598190405943154,1.1597237841604533,1.1596285590126894,1.1595333651330455,1.1594382384080932,1.1593431069990328,1.1592480068042539,1.1591529378058376,1.1590579358433295,1.158962929172185,1.1588679536437407,1.1587730092401365,1.1586781317540005,1.1585832495348256,1.158488398387004,1.1583936140680473,1.1582988249978334,1.1582040669456177,1.158109339893642,1.1580146795526867,1.1579200144362924,1.1578253802669567,1.1577307770269796,1.1576362403805183,1.1575416989345604,1.1574471883649533,1.1573527086540545,1.1572582954195045,1.1571638773615245,1.1570694901094183,1.1569751336456007,1.1568808435413007,1.1567865485897608,1.1566922843738472,1.1565980508760316,1.156503883621238,1.1564097114955176,1.1563155700354042,1.156221459223427,1.1561274145383098,1.1560333649587005,1.1559393459749072,1.1558453930310728,1.1557514351751534,1.1556575078628568,1.155563611076811,1.1554697802151432,1.155375944418038,1.15528213909516,1.155188364229194,1.155094655172355,1.1550009411568465,1.154907257546395,1.1548136043237411,1.1547200167952922,1.154626424285062,1.1545328621109423,1.1544393302557299,1.1543458639801278,1.1542523926997517,1.1541589516867627,1.1540655409240141,1.1539721956266074,1.1538788453015523,1.153785525175384,1.15369223523101,1.1535990106380347,1.1535057809946552,1.1534125814818827,1.1533194472352668,1.153226307921257,1.153133198686791,1.1530401195148727,1.1529471054957334,1.1528540863866497,1.1527610972892148,1.152668138186488,1.152575244123484,1.1524823449481014,1.152389475716692,1.1522966364123688,1.152203862035033,1.152111082523,1.1520183328874822,1.151925613111647,1.1518329581503826,1.151740298032218,1.151647667723327,1.1515550672069315,1.1514625313930078,1.151369990400096,1.1512774791494325,1.1511850325173774,1.151092580689843,1.1510001585544312,1.150907766094457,1.150815438141546,1.1507231049712672,1.1506308014264608,1.1505385274904965,1.1504463179503641,1.150354103171088,1.1502619179508486,1.1501697622730684,1.1500776708802025,1.1499855742265297,1.1498935070656704,1.1498014693810998,1.149709495870838,1.149617517078218,1.1495255677123999,1.1494336477569118,1.1493417918654376,1.1492499306701656,1.1491580988358947,1.1490662963462057,1.1489745578105455,1.1488828139497587,1.1487910993843822,1.1486994486907502,1.1486077926560683,1.1485161658677425,1.1484245683094454,1.1483330345134466,1.148241495355262,1.1481499853782078,1.1480585045660088,1.1479670874069692,1.1478756648647164,1.1477842714385766,1.147692907112326,1.1476016063304002,1.1475103001443436,1.1474190230095889,1.1473277749099642,1.1472365902461334,1.1471454001573624,1.1470542390552882,1.1469631069237904,1.1468720381198594,1.146780963870286,1.1466899185430093,1.1465989364623295,1.1465079489205519,1.1464169902529067,1.1463260604433625,1.146235193772715,1.1461443216204552,1.1460534782782845,1.1459626637302227,1.1458719122136567,1.14578115519507,1.1456904269227324,1.1455997273807133,1.1455090907630883,1.1454184486231402,1.1453278351658025,1.145237250375195,1.1451467284021775,1.1450562008866394,1.144965701990274,1.1448752316972515,1.144784824115311,1.1446944109707573,1.144604026382139,1.1445136703336765,1.1444233768900827,1.1443330778638878,1.1442428073305901,1.1441525993226973,1.1440623857172803,1.1439722005576143,1.1438820438280066,1.1437919495181046,1.143701849590871,1.143611778046698,1.1435217348699414,1.1434317540074839,1.1433417675079902,1.1432518093290633,1.1431618794551088,1.1430720117903372,1.1429821384689274,1.1428922934057868,1.1428024765853704,1.1427127218693112,1.1426229614771133,1.1425332292810828,1.142443525265724,1.1423538832501847,1.1422642355391077,1.1421746159622916,1.1420850245042882,1.1419954949418558,1.1419059596645869,1.1418164524598657,1.141727007072719,1.1416375559563283,1.141548132866329,1.141458737787358,1.1413694044222131,1.1412800653087007,1.1411907541602047,1.1411014709614091,1.1410122493729764,1.1409230220171522,1.1408338225651604,1.1407446510017343,1.1406555409454908,1.1405664251029306,1.1404773371032106,1.1403882769311113,1.1402992781632975,1.1402102735903403,1.1401212967994212,1.1400323477753682,1.1399434600529847,1.1398545665067294,1.1397657006818998,1.1396768960819648,1.1395880856441756,1.1394993028824776,1.1394105477817813,1.1393218538038543,1.1392331539695146,1.1391444817509835,1.1390558371332178,1.138967253536375,1.1388786640646575,1.1387901021486528,1.1387015677733652,1.1386130943174313,1.138524614968257,1.1384361631148867,1.1383477387423713,1.1382593751879169,1.138171005721952,1.1380826636920685,1.1379943490833628,1.137906095191702,1.1378178353703554,1.1377296029255524,1.1376413978424358,1.1375532533756214,1.1374651029610414,1.1373769798636513,1.1372889173071892,1.1372008487894634,1.1371128075445343,1.1370247935576256,1.1369368400113804,1.1368488804859562,1.1367609481742964,1.1366730430616698,1.1365851982897146,1.136497347520758,1.1364095239067158,1.1363217274329025,1.1362339912000385,1.136146248952444,1.1360585338010958,1.135970845731353,1.135883217803108,1.1357955838424956,1.1357079769196419,1.1356203970199512,1.135532877162575,1.1354453512552871,1.1353578523274506,1.1352703803645148,1.1351829683449777,1.1350955502580764,1.1350081590924983,1.1349208277963094,1.1348334904197275,1.1347461799209912,1.134658896285629,1.1345716724212072,1.134484442459098,1.1343972393170194,1.1343100629805436,1.134222946316824,1.1341358235382144,1.1340487275219968,1.1339616582537884,1.1338746485604159,1.13378763273504,1.1337006436145953,1.1336136811847424,1.1335267782320686,1.1334398691303678,1.1333529866763128,1.1332661308556085,1.133179334414688,1.1330925318078064,1.1330057557914606,1.1329190390820265,1.1328323161939886,1.1327456198537706,1.1326589500471533,1.1325723394505094,1.1324857226584821,1.1323991323574698,1.1323125685332973,1.1322260638224193,1.1321395528994658,1.1320530684108967,1.1319666103425794,1.131880211291136,1.131793806011013,1.131707427108816,1.131621074570456,1.1315347809528067,1.1314484810899608,1.1313622075487546,1.1312759603151419,1.131189771906334,1.131103577235899,1.1310174088309888,1.1309312666776001,1.1308451832533657,1.13075909355116,1.130673030058535,1.130587025223496,1.1305010140982839,1.130415029140808,1.1303290703371385,1.1302431700958495,1.1301572635481938,1.1300713831126266,1.129985528775262,1.1298997329053255,1.1298139307129127,1.1297281545771107,1.1296424044840754,1.1295567127637685,1.1294710147049605,1.1293853426474536,1.1292996965774456,1.1292141087857175,1.1291285146395478,1.129042946439537,1.128957404171925,1.1288719200883948,1.1287864296345662,1.1287009650719215,1.1286155263867417,1.128530145791695,1.1284447588105768,1.1283593976658335,1.1282740945409275,1.1281887850181749,1.1281035012908007,1.128018243345158,1.127933043325838,1.1278478368930436,1.1277626562011078,1.1276775012364253,1.1275924041047982,1.127507300544151,1.127422222670007,1.1273371704688022,1.127252176007632,1.1271671751019776,1.1270821998286356,1.126997250174082,1.1269123581667868,1.1268274596996255,1.1267425868107481,1.126657739486672,1.1265729497173227,1.1264881534728062,1.1264033827527082,1.1263186695181004,1.126233949796903,1.126149255559832,1.126064586793476,1.1259799754205042,1.1258953575457826,1.1258107651016052,1.1257261980745998,1.1256416883491147,1.1255571721067998,1.1254726812416072,1.125388215740205,1.1253038074486998,1.1252193926253649,1.1251350031258902,1.1250506389369843,1.1249663318665928,1.12488201824945,1.1247977299030658,1.1247134668141878,1.1246292607526807,1.1245450481295807,1.1244608607242956,1.1243766985236132,1.1242925932593963,1.1242084814188236,1.1241243947432806,1.1240403649361825,1.1239563285417076,1.1238723172727787,1.1237883311162529,1.1237044017376818,1.123620465757107,1.1235365548495688,1.1234526690019635,1.1233688398420596,1.1232850040656024,1.1232011933098291,1.1231174075616752,1.1230336784112038,1.1229499426297074,1.1228662318166984,1.1227825459591503,1.1226989166095014,1.1226152806144318,1.122531669535808,1.1224480833606432,1.122364553603827,1.122281017187271,1.1221975056352747,1.1221140189348893,1.1220305885635347,1.1219471515181976,1.1218637392856878,1.1217803833153752,1.1216970206604477,1.1216136827796508,1.1215303696601024,1.1214471127138388,1.12136384906885,1.1212806101465276,1.1211973959340282,1.1211142378061318,1.1210310729654747,1.1209479327961727,1.1208648172854208,1.1207817577708197,1.1206986915294967,1.12061564990837,1.1205326328946716,1.1204496717889012,1.1203667039425222,1.1202837606653318,1.1202008419445997,1.1201179790438003,1.1200351093885799,1.1199522642516908,1.119869474868889,1.1197866787213557,1.1197039070541108,1.1196211598544905,1.1195384683213592,1.1194557700098127,1.11937309612796,1.1192904466631748,1.1192078527775067,1.1191252520998123,1.1190426758013667,1.1189601238695805,1.1188776274297645,1.1187951241843836,1.1187126452679554,1.1186301906679272,1.1185477914729463,1.1184653854589346,1.118383003723727,1.1183006462548082,1.1182183441042368,1.1181360351212413,1.118053750367049,1.117971489829181,1.1178892845231843,1.1178070723714408,1.1177248843986467,1.1176427515930136,1.1175606119316894,1.1174784964120212,1.117396405021595,1.1173143687122407,1.1172323255339975,1.1171503064478128,1.117068311441308,1.116986371430007,1.1169044245366901,1.1168225016859787,1.1167406028655313,1.1166587589546388,1.116576908148674,1.1164950813360073,1.1164132785043326,1.1163315304967831,1.116249775581175,1.1161680446097013,1.1160863375700927,1.1160046852693974,1.115923026047727,1.1158413907211715,1.115759779277497,1.1156782224877422,1.1155966587641644,1.115515118886825,1.115433633599804,1.1153521413693703,1.1152706729486128,1.1151892283253604,1.1151078382078103,1.1150264411341209,1.1149450678214807,1.114863718257754,1.11478242311533,1.1147011210041082,1.1146198426054506,1.1145385879072567,1.1144573875461796,1.1143761802037149,1.1142949965254703,1.1142138364993805,1.1141327307264361,1.114051617959582,1.1139705288087445,1.1138894632618934,1.1138084518844296,1.113727433500601,1.113646438684726,1.1135654979755605,1.1134845502507336,1.1134036260579059,1.113322725385108,1.1132418787356322,1.113161025058158,1.1130801948648634,1.1129993881438145,1.1129186353629112,1.112837875541739,1.112757139157066,1.1126764261969924,1.1125957670940991,1.1125151009387322,1.1124344581723222,1.1123538387830039,1.1122732731681095,1.1121927004886032,1.112112151150649,1.1120316251424167,1.1119511528260604,1.11187067343302,1.1117902173342642,1.1117097845179966,1.111629405311266,1.111549019015844,1.111468655967576,1.1113883464672285,1.1113080298692275,1.1112277364831225,1.1111474662971765,1.1110672495771747,1.110987025747626,1.1109068250830798,1.1108266475718338,1.1107465234447615,1.1106663921963131,1.11058628406611,1.1105061990424825,1.1104261673214637,1.1103461284673044,1.1102661126847673,1.1101861199622163,1.1101061804609138,1.1100262338147702,1.1099463101937597,1.1098664095862798,1.1097865621188925,1.109706707495027,1.1096268758499395,1.1095470671720609,1.1094673115533218,1.1093875487665312,1.1093078089122963,1.1092281220566216,1.1091484280242565,1.1090687568898692,1.1089891086419486,1.1089095133119893,1.1088299107938764,1.108750331127751,1.1086707743021351,1.1085912703140837,1.1085117591264777,1.1084322707450012,1.1083528051582088,1.1082733923287844,1.108193972288467,1.108114575008552,1.1080352004776268,1.1079558786240737,1.1078765495483507,1.107797243187434,1.1077179595299442,1.107638728470029,1.1075594901767296,1.1074802745527705,1.1074011114666713,1.1073219411388167,1.1072427934462896,1.1071636683777677,1.1070845957676556,1.1070055159046808,1.106926458631795,1.1068474239377077,1.1067684416227785,1.1066894520439394,1.10661048501008,1.1065315405099416,1.106452648309906,1.1063737488349743,1.1062948718600414,1.1062160173738804,1.106137215108963,1.106058405558224,1.1059796184626305,1.105900853810988,1.105822141301926,1.105743421496176,1.1056647241008466,1.1055860491047749,1.1055074261728144,1.1054287959333602,1.105350188059728,1.1052716321914855,1.1051930690076837,1.1051145281563395,1.105036009626346,1.1049575430236125,1.1048790690946177,1.1048006174537042,1.1047221880897957,1.1046438105752108,1.1045654257237218,1.1044870631160628,1.1044087227411896,1.104330434137896,1.104252138187114,1.1041738644360364,1.1040956128736503,1.1040174130052918,1.1039392057789188,1.1038610207082495,1.1037828577823026,1.103704746473022,1.1036266277952593,1.1035485312293243,1.1034704862221614,1.103392433838704,1.1033144035342497,1.1032363952978712,1.1031584385432367,1.1030804744019407,1.1030025322959887,1.1029246122144838,1.1028467435378841,1.102768867464314,1.1026910133825512,1.1026131812817304,1.1025354005091645,1.1024576123293761,1.102379846097982,1.102302101804147,1.1022244087621045,1.1021467083026444,1.1020690297482878,1.1019913730882298,1.1019137676036892,1.1018361546915927,1.1017585636414304,1.101680994442428,1.101603476342855,1.1015259508056443,1.10144844708732,1.101370994411483,1.1012935342904835,1.1012160959561652,1.1011386793978069,1.1010613138061727,1.1009839407593924,1.1009065894564571,1.1008292598866753,1.1007519812080402,1.1006746950643305,1.1005974306217496,1.1005201878696362,1.1004429959332762,1.100365796521969,1.1002886187691943,1.1002114626643205,1.1001343572999907,1.1000572444508958,1.0999801532178566,1.099903083590271,1.0998260646282032,1.0997490381716075,1.0996720332887093,1.0995950499689366,1.0995181172398378,1.099441177006503,1.0993642583046264,1.0992873901374114,1.0992105144587156,1.0991336602798767,1.0990568275903743,1.0989800453610081,1.0989032556105478,1.0988264873179112,1.0987497404726072,1.0986730440130945,1.0985963400229288,1.0985196574486706,1.0984429962798585,1.098366385422673,1.098289767025329,1.0982131700020938,1.0981365943425345,1.0980600689206172,1.0979835359490895,1.0979070243099873,1.097830533992908,1.097754093839665,1.0976776461274125,1.0976012197060196,1.0975248433932276,1.0974484595144123,1.097372096895358,1.0972957555257123,1.0972194641911739,1.097143165281306,1.0970668875898346,1.096990631106436,1.0969144245848281,1.0968382104786374,1.0967620175495936,1.0966858457874011,1.0966097239138606,1.0965335944465355,1.0964574861152223,1.0963813989096538,1.096305361519774,1.0962293165269605,1.0961532926291377,1.0960772898160671,1.0960013367458976,1.0959253760636969,1.0958494364355795,1.095773517851335,1.0956976489373795,1.0956217724023471,1.0955459168806037,1.0954701109748064,1.0953942974411819,1.0953185048903253,1.095242733312076,1.0951670112774659,1.0950912816060723,1.0950155728768496,1.0949398850796652,1.0948642467539864,1.0947886007826189,1.0947129757129372,1.094637371534837,1.0945618167562816,1.0944862543231832,1.0944107127513976,1.0943351920308475,1.0942597206380544,1.0941842415819143,1.0941087833468248,1.0940333459227367,1.093957957754789,1.093882561914741,1.0938071868555925,1.0937318325673218,1.0936565274637469,1.0935812146793673,1.0935059226358468,1.0934306797235516,1.0933554291239573,1.0932801992352648,1.0932049900475007,1.0931298299198153,1.093054662096214,1.0929795149436665,1.092904388452227,1.092829310949889,1.0927542257430676,1.0926791611675613,1.0926041172134517,1.0925291221776359,1.0924541194288186,1.092379137271687,1.0923041756963492,1.0922292629686663,1.0921543425195128,1.0920794426225238,1.092004563267835,1.0919297326903297,1.0918548943829336,1.091780076588289,1.0917053075180865,1.0916305307117093,1.0915557743885964,1.0914810385389304,1.091406351343528,1.0913316564036153,1.0912569819077427,1.0911823278461197,1.0911077223687486,1.0910331091385796,1.0909585163133337,1.0908839438832472,1.090809419967567,1.090734888290849,1.0906603769800438,1.090585886025415,1.090511443515512,1.090436993236379,1.0903625632842555,1.090288153649431,1.0902137923898174,1.090139423352829,1.0900650746040523,1.0899907461338036,1.0899164659694147,1.089842178019554,1.089767910319213,1.089693690872828,1.0896194636349292,1.0895452566176012,1.0894710698112064,1.0893969311897034,1.0893227847686708,1.0892486585297017,1.0891745524631842,1.0891004945126568,1.0890264287546314,1.0889523831402663,1.0888783576599759,1.0888043802269363,1.0887303949784766,1.0886564298353782,1.088582484788082,1.0885085877194594,1.0884346828275409,1.0883607980027885,1.0882869332356695,1.0882131163788082,1.088139291690821,1.088065487031909,1.0879917023925647,1.0879179655952231,1.0878442209589714,1.0877704963138068,1.0876968194595609,1.0876231347605967,1.087549470024297,1.0874758252411991,1.087402228181045,1.0873286232684682,1.0872550382807478,1.0871814732084464,1.087107955791273,1.0870344305140183,1.0869609251239134,1.086887439611547,1.0868140016866525,1.0867405558940622,1.0866671299510173,1.0865937238481322,1.086520365265221,1.0864469988070444,1.0863736521609109,1.0863003253174595,1.0862270459266417,1.0861537586530337,1.0860804911540674,1.086007271057334,1.0859340430721967,1.0858608348337162,1.0857876463325766,1.0857145051666048,1.085641356104782,1.0855682267523907,1.0854951171001395,1.085422054716148,1.085348984428902,1.0852759338139621,1.0852029028620624,1.0851299191116694,1.085056927450663,1.0849839554249372,1.0849110030252507,1.0848380977604741,1.0847651845777682,1.0846922909934174,1.0846194169982042,1.0845465900714588,1.0844737552195125,1.0844009399290941,1.0843281441910113,1.0842553954551086,1.0841826387867761,1.0841099016432434,1.0840372114522774,1.0839645133234888,1.083891834692019,1.0838191755487196,1.0837465632919687,1.0836739430902411,1.083601342349277,1.083528761059951,1.0834562265913084,1.0833836841705786,1.0833111611741537,1.0832386575929336,1.0831662007666836,1.0830937359812784,1.0830212905838177,1.0829488645652248,1.082876485236042,1.082804097940678,1.0827317299969945,1.08265938139594,1.0825870794188865,1.0825147694686683,1.082442478833964,1.0823702075057458,1.082297982736271,1.0822257499866899,1.0821535365165522,1.0820813695563154,1.0820091946107935,1.0819370389177263,1.0818649024681282,1.0817928124634368,1.081720714466592,1.0816486356862993,1.0815765761135974,1.081504562920958,1.0814325417293378,1.0813605397184634,1.0812885568793968,1.0812166203556977,1.081144675826232,1.0810727504418005,1.0810008441934893,1.0809289841959997,1.0808571161859986,1.080785267285415,1.080713437485359,1.0806416538717272,1.0805698622388797,1.080498089679928,1.0804263632592013,1.0803546288142576,1.0802829134166312,1.0802112170574727,1.0801395667724,1.0800679084564782,1.079996269152516,1.079924648851688,1.0798530745609543,1.0797814922327789,1.0797099288813,1.0796383844977147,1.0795668860603789,1.0794953795790494,1.079423892039246,1.0793524234321896,1.0792810007076838,1.0792095699326723,1.0791381580641097,1.0790667650932404,1.0789954179413688,1.0789240627325192,1.078852726395134,1.0787814089204808,1.0787101372014178,1.0786388574189443,1.0785675964730432,1.0784963812352732,1.0784251579292945,1.0783539534337805,1.0782827677400388,1.078211627691274,1.0781404795679372,1.0780693502203338,1.0779982396397945,1.077927174641222,1.077856101561753,1.0777850472233779,1.0777140116174506,1.077643021530623,1.0775720233566137,1.0775010438891501,1.0774300831196086,1.0773591678064436,1.0772882443998504,1.0772173396653455],"x":[0.01,0.010157936825269892,0.010315873650539785,0.010473810475809676,0.010631747301079568,0.01078968412634946,0.010947620951619353,0.011105557776889244,0.011263494602159136,0.011421431427429029,0.01157936825269892,0.011737305077968812,0.011895241903238705,0.012053178728508597,0.012211115553778488,0.012369052379048381,0.012526989204318273,0.012684926029588164,0.012842862854858058,0.01300079968012795,0.01315873650539784,0.013316673330667732,0.013474610155937625,0.013632546981207517,0.013790483806477408,0.013948420631747302,0.014106357457017193,0.014264294282287085,0.014422231107556978,0.01458016793282687,0.01473810475809676,0.014896041583366654,0.015053978408636546,0.015211915233906437,0.01536985205917633,0.015527788884446222,0.015685725709716113,0.015843662534986005,0.016001599360255896,0.01615953618552579,0.016317473010795683,0.016475409836065574,0.016633346661335466,0.016791283486605357,0.01694922031187525,0.01710715713714514,0.017265093962415035,0.017423030787684927,0.01758096761295482,0.01773890443822471,0.0178968412634946,0.018054778088764493,0.018212714914034388,0.01837065173930428,0.01852858856457417,0.018686525389844062,0.018844462215113954,0.019002399040383845,0.01916033586565374,0.01931827269092363,0.019476209516193523,0.019634146341463415,0.019792083166733306,0.019950019992003198,0.02010795681727309,0.020265893642542984,0.020423830467812876,0.020581767293082767,0.02073970411835266,0.02089764094362255,0.02105557776889244,0.021213514594162337,0.021371451419432228,0.02152938824470212,0.02168732506997201,0.021845261895241903,0.022003198720511794,0.022161135545781686,0.02231907237105158,0.022477009196321472,0.022634946021591364,0.022792882846861255,0.022950819672131147,0.023108756497401038,0.023266693322670933,0.023424630147940825,0.023582566973210716,0.023740503798480608,0.0238984406237505,0.02405637744902039,0.024214314274290286,0.024372251099560177,0.02453018792483007,0.02468812475009996,0.02484606157536985,0.025003998400639743,0.025161935225909635,0.02531987205117953,0.02547780887644942,0.025635745701719313,0.025793682526989204,0.025951619352259096,0.026109556177528987,0.026267493002798882,0.026425429828068774,0.026583366653338665,0.026741303478608557,0.026899240303878448,0.02705717712914834,0.02721511395441823,0.027373050779688126,0.027530987604958018,0.02768892443022791,0.0278468612554978,0.028004798080767692,0.028162734906037584,0.02832067173130748,0.02847860855657737,0.02863654538184726,0.028794482207117153,0.028952419032387045,0.029110355857656936,0.02926829268292683,0.029426229508196722,0.029584166333466614,0.029742103158736505,0.029900039984006397,0.03005797680927629,0.03021591363454618,0.030373850459816075,0.030531787285085966,0.030689724110355858,0.03084766093562575,0.03100559776089564,0.031163534586165532,0.031321471411435424,0.031479408236705315,0.03163734506197521,0.031795281887245105,0.031953218712515,0.03211115553778489,0.03226909236305478,0.03242702918832467,0.03258496601359456,0.032742902838864454,0.032900839664134346,0.03305877648940424,0.03321671331467413,0.03337465013994402,0.03353258696521391,0.0336905237904838,0.0338484606157537,0.03400639744102359,0.034164334266293485,0.034322271091563376,0.03448020791683327,0.03463814474210316,0.03479608156737305,0.03495401839264294,0.035111955217912834,0.035269892043182725,0.03542782886845262,0.03558576569372251,0.0357437025189924,0.0359016393442623,0.03605957616953219,0.03621751299480208,0.03637544982007197,0.036533386645341864,0.036691323470611756,0.03684926029588165,0.03700719712115154,0.03716513394642143,0.03732307077169132,0.03748100759696121,0.037638944422231105,0.037796881247500996,0.037954818072770895,0.038112754898040786,0.03827069172331068,0.03842862854858057,0.03858656537385046,0.03874450219912035,0.038902439024390244,0.039060375849660135,0.03921831267493003,0.03937624950019992,0.03953418632546981,0.0396921231507397,0.03985005997600959,0.04000799680127949,0.04016593362654938,0.040323870451819274,0.040481807277089166,0.04063974410235906,0.04079768092762895,0.04095561775289884,0.04111355457816873,0.04127149140343862,0.041429428228708515,0.041587365053978406,0.0417453018792483,0.041903238704518196,0.04206117552978809,0.04221911235505798,0.04237704918032787,0.04253498600559776,0.042692922830867654,0.042850859656137545,0.04300879648140744,0.04316673330667733,0.04332467013194722,0.04348260695721711,0.043640543782487,0.043798480607756894,0.04395641743302679,0.044114354258296684,0.044272291083566576,0.04443022790883647,0.04458816473410636,0.04474610155937625,0.04490403838464614,0.04506197520991603,0.045219912035185925,0.045377848860455816,0.04553578568572571,0.0456937225109956,0.04585165933626549,0.04600959616153539,0.04616753298680528,0.04632546981207517,0.046483406637345064,0.046641343462614955,0.04679928028788485,0.04695721711315474,0.04711515393842463,0.04727309076369452,0.04743102758896441,0.047588964414234304,0.047746901239504196,0.04790483806477409,0.048062774890043986,0.04822071171531388,0.04837864854058377,0.04853658536585366,0.04869452219112355,0.04885245901639344,0.049010395841663335,0.049168332666933226,0.04932626949220312,0.04948420631747301,0.0496421431427429,0.04980007996801279,0.049958016793282684,0.05011595361855258,0.05027389044382247,0.050431827269092365,0.050589764094362256,0.05074770091963215,0.05090563774490204,0.05106357457017193,0.05122151139544182,0.051379448220711714,0.051537385045981605,0.0516953218712515,0.05185325869652139,0.05201119552179129,0.05216913234706118,0.05232706917233107,0.05248500599760096,0.05264294282287085,0.052800879648140744,0.052958816473410636,0.05311675329868053,0.05327469012395042,0.05343262694922031,0.0535905637744902,0.05374850059976009,0.053906437425029985,0.05406437425029988,0.054222311075569775,0.054380247900839666,0.05453818472610956,0.05469612155137945,0.05485405837664934,0.05501199520191923,0.055169932027189124,0.055327868852459015,0.05548580567772891,0.0556437425029988,0.05580167932826869,0.05595961615353858,0.05611755297880848,0.05627548980407837,0.05643342662934826,0.056591363454618154,0.056749300279888046,0.05690723710515794,0.05706517393042783,0.05722311075569772,0.05738104758096761,0.0575389844062375,0.057696921231507395,0.057854858056777286,0.05801279488204718,0.058170731707317076,0.05832866853258697,0.05848660535785686,0.05864454218312675,0.05880247900839664,0.058960415833666534,0.059118352658936425,0.05927628948420632,0.05943422630947621,0.0595921631347461,0.05975009996001599,0.05990803678528588,0.060065973610555774,0.06022391043582567,0.060381847261095564,0.060539784086365456,0.06069772091163535,0.06085565773690524,0.06101359456217513,0.06117153138744502,0.06132946821271491,0.061487405037984805,0.061645341863254696,0.06180327868852459,0.06196121551379448,0.06211915233906438,0.06227708916433427,0.06243502598960416,0.06259296281487405,0.06275089964014394,0.06290883646541383,0.06306677329068372,0.06322471011595363,0.06338264694122352,0.06354058376649341,0.0636985205917633,0.06385645741703319,0.06401439424230308,0.06417233106757297,0.06433026789284287,0.06448820471811276,0.06464614154338265,0.06480407836865254,0.06496201519392243,0.06511995201919232,0.06527788884446221,0.0654358256697321,0.065593762495002,0.06575169932027189,0.06590963614554178,0.06606757297081167,0.06622550979608156,0.06638344662135146,0.06654138344662135,0.06669932027189124,0.06685725709716113,0.06701519392243102,0.06717313074770093,0.06733106757297082,0.06748900439824071,0.0676469412235106,0.06780487804878049,0.06796281487405038,0.06812075169932028,0.06827868852459017,0.06843662534986006,0.06859456217512995,0.06875249900039984,0.06891043582566973,0.06906837265093962,0.06922630947620952,0.06938424630147941,0.0695421831267493,0.06970011995201919,0.06985805677728908,0.07001599360255897,0.07017393042782887,0.07033186725309876,0.07048980407836865,0.07064774090363854,0.07080567772890843,0.07096361455417832,0.07112155137944821,0.07127948820471812,0.07143742502998801,0.0715953618552579,0.0717532986805278,0.07191123550579769,0.07206917233106758,0.07222710915633747,0.07238504598160736,0.07254298280687725,0.07270091963214714,0.07285885645741703,0.07301679328268693,0.07317473010795682,0.07333266693322671,0.0734906037584966,0.07364854058376649,0.07380647740903638,0.07396441423430627,0.07412235105957617,0.07428028788484606,0.07443822471011595,0.07459616153538584,0.07475409836065573,0.07491203518592562,0.07506997201119552,0.0752279088364654,0.07538584566173531,0.0755437824870052,0.0757017193122751,0.07585965613754499,0.07601759296281488,0.07617552978808477,0.07633346661335466,0.07649140343862455,0.07664934026389444,0.07680727708916434,0.07696521391443423,0.07712315073970412,0.07728108756497401,0.0774390243902439,0.0775969612155138,0.07775489804078368,0.07791283486605358,0.07807077169132347,0.07822870851659336,0.07838664534186325,0.07854458216713314,0.07870251899240303,0.07886045581767293,0.07901839264294282,0.07917632946821271,0.07933426629348261,0.0794922031187525,0.0796501399440224,0.07980807676929229,0.07996601359456218,0.08012395041983207,0.08028188724510196,0.08043982407037185,0.08059776089564175,0.08075569772091164,0.08091363454618153,0.08107157137145142,0.08122950819672131,0.0813874450219912,0.0815453818472611,0.08170331867253099,0.08186125549780088,0.08201919232307077,0.08217712914834066,0.08233506597361055,0.08249300279888044,0.08265093962415034,0.08280887644942023,0.08296681327469012,0.08312475009996001,0.0832826869252299,0.0834406237504998,0.0835985605757697,0.08375649740103959,0.08391443422630948,0.08407237105157937,0.08423030787684926,0.08438824470211916,0.08454618152738905,0.08470411835265894,0.08486205517792883,0.08501999200319872,0.08517792882846861,0.0853358656537385,0.0854938024790084,0.08565173930427829,0.08580967612954818,0.08596761295481807,0.08612554978008796,0.08628348660535785,0.08644142343062775,0.08659936025589764,0.08675729708116753,0.08691523390643742,0.08707317073170731,0.0872311075569772,0.08738904438224711,0.087546981207517,0.08770491803278689,0.08786285485805678,0.08802079168332667,0.08817872850859657,0.08833666533386646,0.08849460215913635,0.08865253898440624,0.08881047580967613,0.08896841263494602,0.08912634946021591,0.0892842862854858,0.0894422231107557,0.08960015993602559,0.08975809676129548,0.08991603358656537,0.09007397041183526,0.09023190723710516,0.09038984406237505,0.09054778088764494,0.09070571771291483,0.09086365453818472,0.09102159136345461,0.0911795281887245,0.0913374650139944,0.0914954018392643,0.09165333866453419,0.09181127548980408,0.09196921231507398,0.09212714914034387,0.09228508596561376,0.09244302279088365,0.09260095961615354,0.09275889644142343,0.09291683326669332,0.09307477009196322,0.09323270691723311,0.093390643742503,0.09354858056777289,0.09370651739304278,0.09386445421831267,0.09402239104358256,0.09418032786885246,0.09433826469412235,0.09449620151939224,0.09465413834466213,0.09481207516993202,0.09497001199520191,0.0951279488204718,0.0952858856457417,0.09544382247101159,0.0956017592962815,0.09575969612155139,0.09591763294682128,0.09607556977209117,0.09623350659736106,0.09639144342263095,0.09654938024790084,0.09670731707317073,0.09686525389844063,0.09702319072371052,0.09718112754898041,0.0973390643742503,0.09749700119952019,0.09765493802479008,0.09781287485005997,0.09797081167532987,0.09812874850059976,0.09828668532586965,0.09844462215113954,0.09860255897640943,0.09876049580167932,0.09891843262694922,0.0990763694522191,0.099234306277489,0.09939224310275889,0.0995501799280288,0.09970811675329869,0.09986605357856858,0.10002399040383847,0.10018192722910836,0.10033986405437825,0.10049780087964814,0.10065573770491804,0.10081367453018793,0.10097161135545782,0.10112954818072771,0.1012874850059976,0.1014454218312675,0.10160335865653738,0.10176129548180728,0.10191923230707717,0.10207716913234706,0.10223510595761695,0.10239304278288684,0.10255097960815673,0.10270891643342663,0.10286685325869652,0.10302479008396641,0.1031827269092363,0.10334066373450619,0.10349860055977608,0.10365653738504599,0.10381447421031588,0.10397241103558577,0.10413034786085566,0.10428828468612555,0.10444622151139545,0.10460415833666534,0.10476209516193523,0.10492003198720512,0.10507796881247501,0.1052359056377449,0.1053938424630148,0.10555177928828469,0.10570971611355458,0.10586765293882447,0.10602558976409436,0.10618352658936425,0.10634146341463414,0.10649940023990404,0.10665733706517393,0.10681527389044382,0.10697321071571371,0.1071311475409836,0.10728908436625349,0.10744702119152338,0.10760495801679329,0.10776289484206318,0.10792083166733307,0.10807876849260296,0.10823670531787286,0.10839464214314275,0.10855257896841264,0.10871051579368253,0.10886845261895242,0.10902638944422231,0.1091843262694922,0.1093422630947621,0.10950019992003199,0.10965813674530188,0.10981607357057177,0.10997401039584166,0.11013194722111155,0.11028988404638145,0.11044782087165134,0.11060575769692123,0.11076369452219112,0.11092163134746101,0.1110795681727309,0.1112375049980008,0.11139544182327069,0.11155337864854058,0.11171131547381048,0.11186925229908037,0.11202718912435027,0.11218512594962016,0.11234306277489005,0.11250099960015994,0.11265893642542983,0.11281687325069972,0.11297481007596961,0.1131327469012395,0.1132906837265094,0.11344862055177929,0.11360655737704918,0.11376449420231907,0.11392243102758896,0.11408036785285885,0.11423830467812875,0.11439624150339864,0.11455417832866853,0.11471211515393842,0.11487005197920831,0.1150279888044782,0.1151859256297481,0.11534386245501799,0.11550179928028788,0.11565973610555777,0.11581767293082768,0.11597560975609757,0.11613354658136746,0.11629148340663735,0.11644942023190724,0.11660735705717713,0.11676529388244702,0.11692323070771692,0.11708116753298681,0.1172391043582567,0.11739704118352659,0.11755497800879648,0.11771291483406637,0.11787085165933626,0.11802878848460616,0.11818672530987605,0.11834466213514594,0.11850259896041583,0.11866053578568572,0.11881847261095561,0.1189764094362255,0.1191343462614954,0.11929228308676529,0.11945021991203518,0.11960815673730507,0.11976609356257498,0.11992403038784487,0.12008196721311476,0.12023990403838465,0.12039784086365454,0.12055577768892443,0.12071371451419433,0.12087165133946422,0.12102958816473411,0.121187524990004,0.12134546181527389,0.12150339864054378,0.12166133546581367,0.12181927229108357,0.12197720911635346,0.12213514594162335,0.12229308276689324,0.12245101959216313,0.12260895641743302,0.12276689324270292,0.1229248300679728,0.1230827668932427,0.12324070371851259,0.12339864054378248,0.12355657736905237,0.12371451419432226,0.12387245101959217,0.12403038784486206,0.12418832467013195,0.12434626149540184,0.12450419832067174,0.12466213514594163,0.12482007197121152,0.12497800879648141,0.1251359456217513,0.1252938824470212,0.12545181927229107,0.12560975609756098,0.12576769292283088,0.12592562974810076,0.12608356657337066,0.12624150339864054,0.12639944022391045,0.12655737704918033,0.12671531387445023,0.1268732506997201,0.12703118752499,0.1271891243502599,0.1273470611755298,0.12750499800079967,0.12766293482606958,0.12782087165133946,0.12797880847660936,0.12813674530187924,0.12829468212714915,0.12845261895241902,0.12861055577768893,0.1287684926029588,0.1289264294282287,0.1290843662534986,0.1292423030787685,0.12940023990403837,0.12955817672930828,0.12971611355457816,0.12987405037984806,0.13003198720511797,0.13018992403038784,0.13034786085565775,0.13050579768092763,0.13066373450619753,0.1308216713314674,0.13097960815673731,0.1311375449820072,0.1312954818072771,0.13145341863254698,0.13161135545781688,0.13176929228308676,0.13192722910835666,0.13208516593362654,0.13224310275889645,0.13240103958416632,0.13255897640943623,0.1327169132347061,0.132874850059976,0.1330327868852459,0.1331907237105158,0.13334866053578567,0.13350659736105558,0.13366453418632546,0.13382247101159536,0.13398040783686527,0.13413834466213514,0.13429628148740505,0.13445421831267493,0.13461215513794483,0.1347700919632147,0.13492802878848462,0.1350859656137545,0.1352439024390244,0.13540183926429428,0.13555977608956418,0.13571771291483406,0.13587564974010397,0.13603358656537384,0.13619152339064375,0.13634946021591363,0.13650739704118353,0.1366653338664534,0.13682327069172331,0.1369812075169932,0.1371391443422631,0.13729708116753297,0.13745501799280288,0.13761295481807276,0.13777089164334266,0.13792882846861257,0.13808676529388245,0.13824470211915235,0.13840263894442223,0.13856057576969213,0.138718512594962,0.13887644942023192,0.1390343862455018,0.1391923230707717,0.13935025989604158,0.13950819672131148,0.13966613354658136,0.13982407037185127,0.13998200719712114,0.14013994402239105,0.14029788084766093,0.14045581767293083,0.1406137544982007,0.14077169132347062,0.1409296281487405,0.1410875649740104,0.14124550179928028,0.14140343862455018,0.14156137544982006,0.14171931227508996,0.14187724910035984,0.14203518592562975,0.14219312275089965,0.14235105957616953,0.14250899640143944,0.1426669332267093,0.14282487005197922,0.1429828068772491,0.143140743702519,0.14329868052778888,0.14345661735305879,0.14361455417832866,0.14377249100359857,0.14393042782886845,0.14408836465413835,0.14424630147940823,0.14440423830467813,0.144562175129948,0.14472011195521792,0.1448780487804878,0.1450359856057577,0.14519392243102758,0.14535185925629748,0.14550979608156736,0.14566773290683727,0.14582566973210714,0.14598360655737705,0.14614154338264695,0.14629948020791683,0.14645741703318674,0.14661535385845662,0.14677329068372652,0.1469312275089964,0.1470891643342663,0.14724710115953618,0.1474050379848061,0.14756297481007596,0.14772091163534587,0.14787884846061575,0.14803678528588565,0.14819472211115553,0.14835265893642544,0.1485105957616953,0.14866853258696522,0.1488264694122351,0.148984406237505,0.14914234306277488,0.14930027988804478,0.14945821671331466,0.14961615353858457,0.14977409036385445,0.14993202718912435,0.15008996401439426,0.15024790083966413,0.15040583766493404,0.15056377449020392,0.15072171131547382,0.1508796481407437,0.1510375849660136,0.15119552179128348,0.1513534586165534,0.15151139544182327,0.15166933226709317,0.15182726909236305,0.15198520591763295,0.15214314274290283,0.15230107956817274,0.15245901639344261,0.15261695321871252,0.1527748900439824,0.1529328268692523,0.15309076369452218,0.15324870051979209,0.15340663734506196,0.15356457417033187,0.15372251099560175,0.15388044782087165,0.15403838464614153,0.15419632147141143,0.15435425829668134,0.15451219512195122,0.15467013194722112,0.154828068772491,0.1549860055977609,0.15514394242303078,0.1553018792483007,0.15545981607357057,0.15561775289884047,0.15577568972411035,0.15593362654938026,0.15609156337465013,0.15624950019992004,0.15640743702518992,0.15656537385045982,0.1567233106757297,0.1568812475009996,0.15703918432626948,0.1571971211515394,0.15735505797680926,0.15751299480207917,0.15767093162734905,0.15782886845261895,0.15798680527788883,0.15814474210315874,0.15830267892842864,0.15846061575369852,0.15861855257896842,0.1587764894042383,0.1589344262295082,0.15909236305477809,0.159250299880048,0.15940823670531787,0.15956617353058777,0.15972411035585765,0.15988204718112756,0.16003998400639743,0.16019792083166734,0.16035585765693722,0.16051379448220712,0.160671731307477,0.1608296681327469,0.16098760495801678,0.1611455417832867,0.16130347860855657,0.16146141543382647,0.16161935225909635,0.16177728908436625,0.16193522590963613,0.16209316273490604,0.16225109956017594,0.16240903638544582,0.16256697321071573,0.1627249100359856,0.1628828468612555,0.1630407836865254,0.1631987205117953,0.16335665733706517,0.16351459416233508,0.16367253098760495,0.16383046781287486,0.16398840463814474,0.16414634146341464,0.16430427828868452,0.16446221511395442,0.1646201519392243,0.1647780887644942,0.16493602558976408,0.165093962415034,0.16525189924030387,0.16540983606557377,0.16556777289084365,0.16572570971611356,0.16588364654138343,0.16604158336665334,0.16619952019192324,0.16635745701719312,0.16651539384246303,0.1666733306677329,0.1668312674930028,0.1669892043182727,0.1671471411435426,0.16730507796881247,0.16746301479408238,0.16762095161935225,0.16777888844462216,0.16793682526989204,0.16809476209516194,0.16825269892043182,0.16841063574570173,0.1685685725709716,0.1687265093962415,0.1688844462215114,0.1690423830467813,0.16920031987205117,0.16935825669732107,0.16951619352259095,0.16967413034786086,0.16983206717313074,0.16999000399840064,0.17014794082367052,0.17030587764894042,0.17046381447421033,0.1706217512994802,0.1707796881247501,0.17093762495002,0.1710955617752899,0.17125349860055977,0.17141143542582968,0.17156937225109956,0.17172730907636946,0.17188524590163934,0.17204318272690924,0.17220111955217912,0.17235905637744903,0.1725169932027189,0.1726749300279888,0.1728328668532587,0.1729908036785286,0.17314874050379847,0.17330667732906838,0.17346461415433825,0.17362255097960816,0.17378048780487804,0.17393842463014794,0.17409636145541782,0.17425429828068772,0.17441223510595763,0.1745701719312275,0.1747281087564974,0.1748860455817673,0.1750439824070372,0.17520191923230707,0.17535985605757698,0.17551779288284686,0.17567572970811676,0.17583366653338664,0.17599160335865655,0.17614954018392642,0.17630747700919633,0.1764654138344662,0.1766233506597361,0.176781287485006,0.1769392243102759,0.17709716113554577,0.17725509796081568,0.17741303478608555,0.17757097161135546,0.17772890843662534,0.17788684526189524,0.17804478208716512,0.17820271891243503,0.17836065573770493,0.1785185925629748,0.17867652938824471,0.1788344662135146,0.1789924030387845,0.17915033986405438,0.17930827668932428,0.17946621351459416,0.17962415033986406,0.17978208716513394,0.17994002399040385,0.18009796081567372,0.18025589764094363,0.1804138344662135,0.1805717712914834,0.1807297081167533,0.1808876449420232,0.18104558176729307,0.18120351859256298,0.18136145541783286,0.18151939224310276,0.18167732906837264,0.18183526589364254,0.18199320271891242,0.18215113954418233,0.1823090763694522,0.1824670131947221,0.18262495001999202,0.1827828868452619,0.1829408236705318,0.18309876049580168,0.18325669732107158,0.18341463414634146,0.18357257097161137,0.18373050779688124,0.18388844462215115,0.18404638144742103,0.18420431827269093,0.1843622550979608,0.18452019192323071,0.1846781287485006,0.1848360655737705,0.18499400239904037,0.18515193922431028,0.18530987604958016,0.18546781287485006,0.18562574970011994,0.18578368652538985,0.18594162335065972,0.18609956017592963,0.1862574970011995,0.1864154338264694,0.18657337065173932,0.1867313074770092,0.1868892443022791,0.18704718112754898,0.18720511795281888,0.18736305477808876,0.18752099160335867,0.18767892842862854,0.18783686525389845,0.18799480207916833,0.18815273890443823,0.1883106757297081,0.18846861255497802,0.1886265493802479,0.1887844862055178,0.18894242303078768,0.18910035985605758,0.18925829668132746,0.18941623350659736,0.18957417033186724,0.18973210715713715,0.18989004398240703,0.19004798080767693,0.1902059176329468,0.1903638544582167,0.19052179128348662,0.1906797281087565,0.1908376649340264,0.19099560175929628,0.19115353858456618,0.19131147540983606,0.19146941223510597,0.19162734906037585,0.19178528588564575,0.19194322271091563,0.19210115953618553,0.1922590963614554,0.19241703318672532,0.1925749700119952,0.1927329068372651,0.19289084366253498,0.19304878048780488,0.19320671731307476,0.19336465413834467,0.19352259096361454,0.19368052778888445,0.19383846461415433,0.19399640143942423,0.1941543382646941,0.19431227508996401,0.1944702119152339,0.1946281487405038,0.1947860855657737,0.19494402239104358,0.1951019592163135,0.19525989604158336,0.19541783286685327,0.19557576969212315,0.19573370651739305,0.19589164334266293,0.19604958016793284,0.1962075169932027,0.19636545381847262,0.1965233906437425,0.1966813274690124,0.19683926429428228,0.19699720111955218,0.19715513794482206,0.19731307477009197,0.19747101159536185,0.19762894842063175,0.19778688524590163,0.19794482207117153,0.1981027588964414,0.19826069572171132,0.1984186325469812,0.1985765693722511,0.198734506197521,0.19889244302279088,0.1990503798480608,0.19920831667333067,0.19936625349860057,0.19952419032387045,0.19968212714914035,0.19984006397441023,0.19999800079968014,0.20015593762495001,0.20031387445021992,0.2004718112754898,0.2006297481007597,0.20078768492602958,0.20094562175129949,0.20110355857656936,0.20126149540183927,0.20141943222710915,0.20157736905237905,0.20173530587764893,0.20189324270291883,0.2020511795281887,0.20220911635345862,0.2023670531787285,0.2025249900039984,0.2026829268292683,0.20284086365453818,0.2029988004798081,0.20315673730507797,0.20331467413034787,0.20347261095561775,0.20363054778088766,0.20378848460615753,0.20394642143142744,0.20410435825669732,0.20426229508196722,0.2044202319072371,0.204578168732507,0.20473610555777688,0.2048940423830468,0.20505197920831666,0.20520991603358657,0.20536785285885645,0.20552578968412635,0.20568372650939623,0.20584166333466614,0.205999600159936,0.20615753698520592,0.2063154738104758,0.2064734106357457,0.2066313474610156,0.20678928428628549,0.2069472211115554,0.20710515793682527,0.20726309476209517,0.20742103158736505,0.20757896841263496,0.20773690523790483,0.20789484206317474,0.20805277888844462,0.20821071571371452,0.2083686525389844,0.2085265893642543,0.20868452618952418,0.2088424630147941,0.20900039984006397,0.20915833666533387,0.20931627349060375,0.20947421031587365,0.20963214714114353,0.20979008396641344,0.20994802079168332,0.21010595761695322,0.2102638944422231,0.210421831267493,0.21057976809276288,0.2107377049180328,0.2108956417433027,0.21105357856857257,0.21121151539384247,0.21136945221911235,0.21152738904438226,0.21168532586965214,0.21184326269492204,0.21200119952019192,0.21215913634546182,0.2123170731707317,0.2124750099960016,0.21263294682127148,0.2127908836465414,0.21294882047181127,0.21310675729708117,0.21326469412235105,0.21342263094762096,0.21358056777289083,0.21373850459816074,0.21389644142343062,0.21405437824870052,0.2142123150739704,0.2143702518992403,0.21452818872451018,0.2146861255497801,0.21484406237505,0.21500199920031987,0.21515993602558978,0.21531787285085965,0.21547580967612956,0.21563374650139944,0.21579168332666934,0.21594962015193922,0.21610755697720913,0.216265493802479,0.2164234306277489,0.21658136745301879,0.2167393042782887,0.21689724110355857,0.21705517792882847,0.21721311475409835,0.21737105157936826,0.21752898840463814,0.21768692522990804,0.21784486205517792,0.21800279888044782,0.2181607357057177,0.2183186725309876,0.21847660935625748,0.2186345461815274,0.2187924830067973,0.21895041983206717,0.21910835665733708,0.21926629348260696,0.21942423030787686,0.21958216713314674,0.21974010395841664,0.21989804078368652,0.22005597760895643,0.2202139144342263,0.2203718512594962,0.2205297880847661,0.220687724910036,0.22084566173530587,0.22100359856057578,0.22116153538584565,0.22131947221111556,0.22147740903638544,0.22163534586165534,0.22179328268692522,0.22195121951219512,0.222109156337465,0.2222670931627349,0.22242502998800479,0.2225829668132747,0.22274090363854457,0.22289884046381447,0.22305677728908438,0.22321471411435426,0.22337265093962416,0.22353058776489404,0.22368852459016395,0.22384646141543382,0.22400439824070373,0.2241623350659736,0.2243202718912435,0.2244782087165134,0.2246361455417833,0.22479408236705317,0.22495201919232308,0.22510995601759295,0.22526789284286286,0.22542582966813274,0.22558376649340264,0.22574170331867252,0.22589964014394243,0.2260575769692123,0.2262155137944822,0.2263734506197521,0.226531387445022,0.22668932427029187,0.22684726109556178,0.22700519792083168,0.22716313474610156,0.22732107157137146,0.22747900839664134,0.22763694522191125,0.22779488204718112,0.22795281887245103,0.2281107556977209,0.2282686925229908,0.2284266293482607,0.2285845661735306,0.22874250299880047,0.22890043982407038,0.22905837664934026,0.22921631347461016,0.22937425029988004,0.22953218712514994,0.22969012395041982,0.22984806077568973,0.2300059976009596,0.2301639344262295,0.2303218712514994,0.2304798080767693,0.23063774490203917,0.23079568172730908,0.23095361855257898,0.23111155537784886,0.23126949220311876,0.23142742902838864,0.23158536585365855,0.23174330267892843,0.23190123950419833,0.2320591763294682,0.23221711315473811,0.232375049980008,0.2325329868052779,0.23269092363054777,0.23284886045581768,0.23300679728108756,0.23316473410635746,0.23332267093162734,0.23348060775689725,0.23363854458216712,0.23379648140743703,0.2339544182327069,0.2341123550579768,0.2342702918832467,0.2344282287085166,0.23458616553378647,0.23474410235905638,0.23490203918432626,0.23505997600959616,0.23521791283486607,0.23537584966013594,0.23553378648540585,0.23569172331067573,0.23584966013594563,0.2360075969612155,0.23616553378648542,0.2363234706117553,0.2364814074370252,0.23663934426229508,0.23679728108756498,0.23695521791283486,0.23711315473810476,0.23727109156337464,0.23742902838864455,0.23758696521391443,0.23774490203918433,0.2379028388644542,0.2380607756897241,0.238218712514994,0.2383766493402639,0.23853458616553377,0.23869252299080368,0.23885045981607356,0.23900839664134346,0.23916633346661337,0.23932427029188325,0.23948220711715315,0.23964014394242303,0.23979808076769293,0.2399560175929628,0.24011395441823272,0.2402718912435026,0.2404298280687725,0.24058776489404238,0.24074570171931228,0.24090363854458216,0.24106157536985207,0.24121951219512194,0.24137744902039185,0.24153538584566173,0.24169332267093163,0.2418512594962015,0.24200919632147141,0.2421671331467413,0.2423250699720112,0.24248300679728108,0.24264094362255098,0.24279888044782086,0.24295681727309076,0.24311475409836067,0.24327269092363055,0.24343062774890045,0.24358856457417033,0.24374650139944024,0.2439044382247101,0.24406237504998002,0.2442203118752499,0.2443782487005198,0.24453618552578968,0.24469412235105958,0.24485205917632946,0.24500999600159937,0.24516793282686924,0.24532586965213915,0.24548380647740903,0.24564174330267893,0.2457996801279488,0.24595761695321872,0.2461155537784886,0.2462734906037585,0.24643142742902838,0.24658936425429828,0.24674730107956816,0.24690523790483807,0.24706317473010797,0.24722111155537785,0.24737904838064775,0.24753698520591763,0.24769492203118754,0.24785285885645741,0.24801079568172732,0.2481687325069972,0.2483266693322671,0.24848460615753698,0.24864254298280689,0.24880047980807676,0.24895841663334667,0.24911635345861655,0.24927429028388645,0.24943222710915633,0.24959016393442623,0.2497481007596961,0.24990603758496602,0.2500639744102359,0.2502219112355058,0.2503798480607757,0.25053778488604556,0.2506957217113155,0.25085365853658537,0.25101159536185524,0.2511695321871252,0.25132746901239505,0.25148540583766493,0.2516433426629348,0.25180127948820474,0.2519592163134746,0.2521171531387445,0.2522750899640144,0.2524330267892843,0.2525909636145542,0.25274890043982406,0.25290683726509394,0.2530647740903639,0.25322271091563375,0.25338064774090363,0.2535385845661735,0.25369652139144344,0.2538544582167133,0.2540123950419832,0.2541703318672531,0.254328268692523,0.2544862055177929,0.25464414234306276,0.25480207916833264,0.2549600159936026,0.25511795281887245,0.25527588964414233,0.25543382646941226,0.25559176329468214,0.255749700119952,0.2559076369452219,0.25606557377049183,0.2562235105957617,0.2563814474210316,0.25653938424630146,0.2566973210715714,0.25685525789684127,0.25701319472211115,0.257171131547381,0.25732906837265096,0.25748700519792084,0.2576449420231907,0.2578028788484606,0.2579608156737305,0.2581187524990004,0.2582766893242703,0.25843462614954016,0.2585925629748101,0.25875049980007997,0.25890843662534985,0.2590663734506197,0.25922431027588966,0.25938224710115954,0.2595401839264294,0.25969812075169935,0.2598560575769692,0.2600139944022391,0.260171931227509,0.2603298680527789,0.2604878048780488,0.26064574170331867,0.26080367852858855,0.2609616153538585,0.26111955217912836,0.26127748900439823,0.2614354258296681,0.26159336265493804,0.2617512994802079,0.2619092363054778,0.2620671731307477,0.2622251099560176,0.2623830467812875,0.26254098360655737,0.26269892043182724,0.2628568572570972,0.26301479408236705,0.26317273090763693,0.26333066773290686,0.26348860455817674,0.2636465413834466,0.2638044782087165,0.26396241503398643,0.2641203518592563,0.2642782886845262,0.26443622550979606,0.264594162335066,0.2647520991603359,0.26491003598560575,0.26506797281087563,0.26522590963614556,0.26538384646141544,0.2655417832866853,0.2656997201119552,0.26585765693722513,0.266015593762495,0.2661735305877649,0.26633146741303476,0.2664894042383047,0.26664734106357457,0.26680527788884445,0.2669632147141143,0.26712115153938426,0.26727908836465414,0.267437025189924,0.26759496201519395,0.2677528988404638,0.2679108356657337,0.2680687724910036,0.2682267093162735,0.2683846461415434,0.26854258296681327,0.26870051979208315,0.2688584566173531,0.26901639344262296,0.26917433026789284,0.2693322670931627,0.26949020391843265,0.2696481407437025,0.2698060775689724,0.2699640143942423,0.2701219512195122,0.2702798880447821,0.27043782487005197,0.27059576169532185,0.2707536985205918,0.27091163534586166,0.27106957217113153,0.2712275089964014,0.27138544582167135,0.2715433826469412,0.2717013194722111,0.27185925629748103,0.2720171931227509,0.2721751299480208,0.27233306677329067,0.2724910035985606,0.2726489404238305,0.27280687724910035,0.27296481407437023,0.27312275089964017,0.27328068772491004,0.2734386245501799,0.2735965613754498,0.27375449820071973,0.2739124350259896,0.2740703718512595,0.27422830867652936,0.2743862455017993,0.2745441823270692,0.27470211915233905,0.27486005597760893,0.27501799280287886,0.27517592962814874,0.2753338664534186,0.27549180327868855,0.27564974010395843,0.2758076769292283,0.2759656137544982,0.2761235505797681,0.276281487405038,0.2764394242303079,0.27659736105557775,0.2767552978808477,0.27691323470611756,0.27707117153138744,0.2772291083566573,0.27738704518192725,0.2775449820071971,0.277702918832467,0.2778608556577369,0.2780187924830068,0.2781767293082767,0.27833466613354657,0.27849260295881645,0.2786505397840864,0.27880847660935626,0.27896641343462614,0.279124350259896,0.27928228708516595,0.2794402239104358,0.2795981607357057,0.27975609756097564,0.2799140343862455,0.2800719712115154,0.28022990803678527,0.2803878448620552,0.2805457816873251,0.28070371851259496,0.28086165533786484,0.28101959216313477,0.28117752898840465,0.2813354658136745,0.2814934026389444,0.28165133946421433,0.2818092762894842,0.2819672131147541,0.28212514994002397,0.2822830867652939,0.2824410235905638,0.28259896041583366,0.28275689724110353,0.28291483406637347,0.28307277089164334,0.2832307077169132,0.2833886445421831,0.28354658136745303,0.2837045181927229,0.2838624550179928,0.2840203918432627,0.2841783286685326,0.2843362654938025,0.28449420231907235,0.2846521391443423,0.28481007596961216,0.28496801279488204,0.2851259496201519,0.28528388644542185,0.28544182327069173,0.2855997600959616,0.2857576969212315,0.2859156337465014,0.2860735705717713,0.2862315073970412,0.28638944422231105,0.286547381047581,0.28670531787285086,0.28686325469812074,0.2870211915233906,0.28717912834866055,0.28733706517393043,0.2874950019992003,0.28765293882447024,0.2878108756497401,0.28796881247501,0.28812674930027987,0.2882846861255498,0.2884426229508197,0.28860055977608956,0.28875849660135944,0.28891643342662937,0.28907437025189925,0.2892323070771691,0.289390243902439,0.28954818072770894,0.2897061175529788,0.2898640543782487,0.29002199120351857,0.2901799280287885,0.2903378648540584,0.29049580167932826,0.29065373850459814,0.29081167532986807,0.29096961215513795,0.2911275489804078,0.2912854858056777,0.29144342263094764,0.2916013594562175,0.2917592962814874,0.2919172331067573,0.2920751699320272,0.2922331067572971,0.29239104358256696,0.2925489804078369,0.29270691723310677,0.29286485405837664,0.2930227908836465,0.29318072770891646,0.29333866453418633,0.2934966013594562,0.2936545381847261,0.293812475009996,0.2939704118352659,0.2941283486605358,0.29428628548580565,0.2944442223110756,0.29460215913634547,0.29476009596161534,0.2949180327868852,0.29507596961215515,0.29523390643742503,0.2953918432626949,0.29554978008796484,0.2957077169132347,0.2958656537385046,0.2960235905637745,0.2961815273890444,0.2963394642143143,0.29649740103958416,0.29665533786485404,0.296813274690124,0.29697121151539385,0.29712914834066373,0.2972870851659336,0.29744502199120354,0.2976029588164734,0.2977608956417433,0.2979188324670132,0.2980767692922831,0.298234706117553,0.29839264294282286,0.29855057976809274,0.29870851659336267,0.29886645341863255,0.2990243902439024,0.2991823270691723,0.29934026389444224,0.2994982007197121,0.299656137544982,0.2998140743702519,0.2999720111955218,0.3001299480207917,0.30028788484606156,0.3004458216713315,0.30060375849660137,0.30076169532187125,0.3009196321471411,0.30107756897241106,0.30123550579768094,0.3013934426229508,0.3015513794482207,0.3017093162734906,0.3018672530987605,0.3020251899240304,0.30218312674930026,0.3023410635745702,0.30249900039984007,0.30265693722510995,0.3028148740503798,0.30297281087564976,0.30313074770091963,0.3032886845261895,0.3034466213514594,0.3036045581767293,0.3037624950019992,0.3039204318272691,0.304078368652539,0.3042363054778089,0.30439424230307877,0.30455217912834864,0.3047101159536186,0.30486805277888845,0.30502598960415833,0.3051839264294282,0.30534186325469814,0.305499800079968,0.3056577369052379,0.3058156737305078,0.3059736105557777,0.3061315473810476,0.30628948420631746,0.30644742103158734,0.3066053578568573,0.30676329468212715,0.30692123150739703,0.3070791683326669,0.30723710515793684,0.3073950419832067,0.3075529788084766,0.30771091563374653,0.3078688524590164,0.3080267892842863,0.30818472610955616,0.3083426629348261,0.308500599760096,0.30865853658536585,0.30881647341063573,0.30897441023590566,0.30913234706117554,0.3092902838864454,0.3094482207117153,0.3096061575369852,0.3097640943622551,0.309922031187525,0.31007996801279486,0.3102379048380648,0.31039584166333467,0.31055377848860455,0.3107117153138744,0.31086965213914436,0.31102758896441424,0.3111855257896841,0.311343462614954,0.3115013994402239,0.3116593362654938,0.3118172730907637,0.3119752099160336,0.3121331467413035,0.31229108356657337,0.31244902039184325,0.3126069572171132,0.31276489404238306,0.31292283086765293,0.3130807676929228,0.31323870451819275,0.3133966413434626,0.3135545781687325,0.3137125149940024,0.3138704518192723,0.3140283886445422,0.31418632546981207,0.31434426229508194,0.3145021991203519,0.31466013594562176,0.31481807277089163,0.3149760095961615,0.31513394642143144,0.3152918832467013,0.3154498200719712,0.3156077568972411,0.315765693722511,0.3159236305477809,0.31608156737305076,0.3162395041983207,0.3163974410235906,0.31655537784886045,0.31671331467413033,0.31687125149940026,0.31702918832467014,0.31718712514994,0.3173450619752099,0.31750299880047983,0.3176609356257497,0.3178188724510196,0.31797680927628946,0.3181347461015594,0.3182926829268293,0.31845061975209915,0.31860855657736903,0.31876649340263896,0.31892443022790884,0.3190823670531787,0.3192403038784486,0.31939824070371853,0.3195561775289884,0.3197141143542583,0.3198720511795282,0.3200299880047981,0.32018792483006797,0.32034586165533785,0.3205037984806078,0.32066173530587766,0.32081967213114754,0.3209776089564174,0.32113554578168735,0.3212934826069572,0.3214514194322271,0.321609356257497,0.3217672930827669,0.3219252299080368,0.32208316673330667,0.32224110355857655,0.3223990403838465,0.32255697720911636,0.32271491403438624,0.3228728508596561,0.32303078768492605,0.3231887245101959,0.3233466613354658,0.3235045981607357,0.3236625349860056,0.3238204718112755,0.32397840863654537,0.3241363454618153,0.3242942822870852,0.32445221911235506,0.32461015593762493,0.32476809276289487,0.32492602958816474,0.3250839664134346,0.3252419032387045,0.32539984006397443,0.3255577768892443,0.3257157137145142,0.32587365053978407,0.326031587365054,0.3261895241903239,0.32634746101559375,0.32650539784086363,0.32666333466613356,0.32682127149140344,0.3269792083166733,0.3271371451419432,0.32729508196721313,0.327453018792483,0.3276109556177529,0.32776889244302276,0.3279268292682927,0.3280847660935626,0.32824270291883245,0.3284006397441024,0.32855857656937226,0.32871651339464214,0.328874450219912,0.32903238704518195,0.32919032387045183,0.3293482606957217,0.3295061975209916,0.3296641343462615,0.3298220711715314,0.3299800079968013,0.33013794482207115,0.3302958816473411,0.33045381847261096,0.33061175529788084,0.3307696921231507,0.33092762894842065,0.3310855657736905,0.3312435025989604,0.3314014394242303,0.3315593762495002,0.3317173130747701,0.33187524990003997,0.3320331867253099,0.3321911235505798,0.33234906037584966,0.33250699720111954,0.33266493402638947,0.33282287085165935,0.3329808076769292,0.3331387445021991,0.33329668132746904,0.3334546181527389,0.3336125549780088,0.33377049180327867,0.3339284286285486,0.3340863654538185,0.33424430227908836,0.33440223910435823,0.33456017592962817,0.33471811275489805,0.3348760495801679,0.3350339864054378,0.33519192323070773,0.3353498600559776,0.3355077968812475,0.33566573370651737,0.3358236705317873,0.3359816073570572,0.33613954418232705,0.336297481007597,0.33645541783286687,0.33661335465813674,0.3367712914834066,0.33692922830867655,0.33708716513394643,0.3372451019592163,0.3374030387844862,0.3375609756097561,0.337718912435026,0.3378768492602959,0.33803478608556575,0.3381927229108357,0.33835065973610556,0.33850859656137544,0.3386665333866453,0.33882447021191525,0.33898240703718513,0.339140343862455,0.3392982806877249,0.3394562175129948,0.3396141543382647,0.3397720911635346,0.33993002798880445,0.3400879648140744,0.34024590163934426,0.34040383846461414,0.34056177528988407,0.34071971211515395,0.3408776489404238,0.3410355857656937,0.34119352259096364,0.3413514594162335,0.3415093962415034,0.34166733306677327,0.3418252698920432,0.3419832067173131,0.34214114354258296,0.34229908036785284,0.34245701719312277,0.34261495401839265,0.3427728908436625,0.3429308276689324,0.34308876449420234,0.3432467013194722,0.3434046381447421,0.34356257497001197,0.3437205117952819,0.3438784486205518,0.34403638544582166,0.3441943222710916,0.34435225909636147,0.34451019592163135,0.3446681327469012,0.34482606957217116,0.34498400639744103,0.3451419432227109,0.3452998800479808,0.3454578168732507,0.3456157536985206,0.3457736905237905,0.34593162734906036,0.3460895641743303,0.34624750099960017,0.34640543782487004,0.3465633746501399,0.34672131147540985,0.34687924830067973,0.3470371851259496,0.3471951219512195,0.3473530587764894,0.3475109956017593,0.3476689324270292,0.34782686925229905,0.347984806077569,0.34814274290283886,0.34830067972810874,0.3484586165533787,0.34861655337864855,0.34877449020391843,0.3489324270291883,0.34909036385445824,0.3492483006797281,0.349406237504998,0.3495641743302679,0.3497221111555378,0.3498800479808077,0.35003798480607756,0.35019592163134744,0.3503538584566174,0.35051179528188725,0.35066973210715713,0.350827668932427,0.35098560575769694,0.3511435425829668,0.3513014794082367,0.35145941623350657,0.3516173530587765,0.3517752898840464,0.35193322670931626,0.35209116353458614,0.35224910035985607,0.35240703718512595,0.3525649740103958,0.35272291083566576,0.35288084766093564,0.3530387844862055,0.3531967213114754,0.3533546581367453,0.3535125949620152,0.3536705317872851,0.35382846861255496,0.3539864054378249,0.35414434226309477,0.35430227908836465,0.3544602159136345,0.35461815273890446,0.35477608956417434,0.3549340263894442,0.3550919632147141,0.355249900039984,0.3554078368652539,0.3555657736905238,0.35572371051579366,0.3558816473410636,0.35603958416633347,0.35619752099160334,0.3563554578168733,0.35651339464214316,0.35667133146741303,0.3568292682926829,0.35698720511795284,0.3571451419432227,0.3573030787684926,0.3574610155937625,0.3576189524190324,0.3577768892443023,0.35793482606957217,0.35809276289484204,0.358250699720112,0.35840863654538185,0.35856657337065173,0.3587245101959216,0.35888244702119154,0.3590403838464614,0.3591983206717313,0.3593562574970012,0.3595141943222711,0.359672131147541,0.35983006797281086,0.35998800479808074,0.3601459416233507,0.36030387844862055,0.36046181527389043,0.36061975209916036,0.36077768892443024,0.3609356257497001,0.36109356257497,0.36125149940023993,0.3614094362255098,0.3615673730507797,0.36172530987604956,0.3618832467013195,0.36204118352658937,0.36219912035185925,0.3623570571771291,0.36251499400239906,0.36267293082766894,0.3628308676529388,0.3629888044782087,0.3631467413034786,0.3633046781287485,0.3634626149540184,0.36362055177928826,0.3637784886045582,0.36393642542982807,0.36409436225509795,0.3642522990803678,0.36441023590563776,0.36456817273090764,0.3647261095561775,0.36488404638144745,0.3650419832067173,0.3651999200319872,0.3653578568572571,0.365515793682527,0.3656737305077969,0.36583166733306677,0.36598960415833665,0.3661475409836066,0.36630547780887646,0.36646341463414633,0.3666213514594162,0.36677928828468614,0.366937225109956,0.3670951619352259,0.3672530987604958,0.3674110355857657,0.3675689724110356,0.36772690923630547,0.36788484606157534,0.3680427828868453,0.36820071971211515,0.36835865653738503,0.36851659336265497,0.36867453018792484,0.3688324670131947,0.3689904038384646,0.36914834066373453,0.3693062774890044,0.3694642143142743,0.36962215113954416,0.3697800879648141,0.369938024790084,0.37009596161535385,0.37025389844062373,0.37041183526589366,0.37056977209116354,0.3707277089164334,0.3708856457417033,0.37104358256697323,0.3712015193922431,0.371359456217513,0.37151739304278286,0.3716753298680528,0.3718332666933227,0.37199120351859255,0.37214914034386243,0.37230707716913236,0.37246501399440224,0.3726229508196721,0.37278088764494205,0.3729388244702119,0.3730967612954818,0.3732546981207517,0.3734126349460216,0.3735705717712915,0.37372850859656137,0.37388644542183125,0.3740443822471012,0.37420231907237106,0.37436025589764094,0.3745181927229108,0.37467612954818075,0.3748340663734506,0.3749920031987205,0.3751499400239904,0.3753078768492603,0.3754658136745302,0.37562375049980007,0.37578168732506995,0.3759396241503399,0.37609756097560976,0.37625549780087963,0.37641343462614957,0.37657137145141945,0.3767293082766893,0.3768872451019592,0.37704518192722913,0.377203118752499,0.3773610555777689,0.37751899240303877,0.3776769292283087,0.3778348660535786,0.37799280287884846,0.37815073970411833,0.37830867652938827,0.37846661335465814,0.378624550179928,0.3787824870051979,0.37894042383046783,0.3790983606557377,0.3792562974810076,0.37941423430627746,0.3795721711315474,0.3797301079568173,0.37988804478208715,0.38004598160735703,0.38020391843262696,0.38036185525789684,0.3805197920831667,0.38067772890843665,0.38083566573370653,0.3809936025589764,0.3811515393842463,0.3813094762095162,0.3814674130347861,0.381625349860056,0.38178328668532585,0.3819412235105958,0.38209916033586566,0.38225709716113554,0.3824150339864054,0.38257297081167535,0.38273090763694523,0.3828888444622151,0.383046781287485,0.3832047181127549,0.3833626549380248,0.38352059176329467,0.38367852858856455,0.3838364654138345,0.38399440223910436,0.38415233906437424,0.3843102758896441,0.38446821271491405,0.3846261495401839,0.3847840863654538,0.38494202319072374,0.3850999600159936,0.3852578968412635,0.38541583366653337,0.3855737704918033,0.3857317073170732,0.38588964414234306,0.38604758096761294,0.38620551779288287,0.38636345461815275,0.3865213914434226,0.3866793282686925,0.38683726509396243,0.3869952019192323,0.3871531387445022,0.38731107556977207,0.387469012395042,0.3876269492203119,0.38778488604558176,0.38794282287085163,0.38810075969612157,0.38825869652139144,0.3884166333466613,0.38857457017193126,0.38873250699720113,0.388890443822471,0.3890483806477409,0.3892063174730108,0.3893642542982807,0.3895221911235506,0.38968012794882045,0.3898380647740904,0.38999600159936026,0.39015393842463014,0.3903118752499,0.39046981207516995,0.39062774890043983,0.3907856857257097,0.3909436225509796,0.3911015593762495,0.3912594962015194,0.3914174330267893,0.39157536985205915,0.3917333066773291,0.39189124350259896,0.39204918032786884,0.3922071171531387,0.39236505397840865,0.39252299080367853,0.3926809276289484,0.39283886445421834,0.3929968012794882,0.3931547381047581,0.393312674930028,0.3934706117552979,0.3936285485805678,0.39378648540583766,0.39394442223110754,0.39410235905637747,0.39426029588164735,0.3944182327069172,0.3945761695321871,0.39473410635745704,0.3948920431827269,0.3950499800079968,0.39520791683326667,0.3953658536585366,0.3955237904838065,0.39568172730907636,0.39583966413434624,0.39599760095961617,0.39615553778488605,0.3963134746101559,0.3964714114354258,0.39662934826069574,0.3967872850859656,0.3969452219112355,0.3971031587365054,0.3972610955617753,0.3974190323870452,0.39757696921231506,0.397734906037585,0.39789284286285487,0.39805077968812475,0.3982087165133946,0.39836665333866456,0.39852459016393443,0.3986825269892043,0.3988404638144742,0.3989984006397441,0.399156337465014,0.3993142742902839,0.39947221111555375,0.3996301479408237,0.39978808476609357,0.39994602159136344,0.4001039584166333,0.40026189524190325,0.40041983206717313,0.400577768892443,0.40073570571771294,0.4008936425429828,0.4010515793682527,0.4012095161935226,0.4013674530187925,0.4015253898440624,0.40168332666933226,0.40184126349460214,0.4019992003198721,0.40215713714514195,0.40231507397041183,0.4024730107956817,0.40263094762095164,0.4027888844462215,0.4029468212714914,0.4031047580967613,0.4032626949220312,0.4034206317473011,0.40357856857257096,0.40373650539784084,0.4038944422231108,0.40405237904838065,0.4042103158736505,0.4043682526989204,0.40452618952419034,0.4046841263494602,0.4048420631747301,0.405,0.4051579368252699,0.4053158736505398,0.40547381047580966,0.4056317473010796,0.40578968412634947,0.40594762095161935,0.4061055577768892,0.40626349460215916,0.40642143142742904,0.4065793682526989,0.4067373050779688,0.4068952419032387,0.4070531787285086,0.4072111155537785,0.40736905237904836,0.4075269892043183,0.40768492602958817,0.40784286285485805,0.4080007996801279,0.40815873650539786,0.40831667333066773,0.4084746101559376,0.4086325469812075,0.4087904838064774,0.4089484206317473,0.4091063574570172,0.4092642942822871,0.409422231107557,0.40958016793282687,0.40973810475809674,0.4098960415833667,0.41005397840863655,0.41021191523390643,0.4103698520591763,0.41052778888444624,0.4106857257097161,0.410843662534986,0.4110015993602559,0.4111595361855258,0.4113174730107957,0.41147540983606556,0.41163334666133544,0.4117912834866054,0.41194922031187525,0.41210715713714513,0.412265093962415,0.41242303078768494,0.4125809676129548,0.4127389044382247,0.41289684126349463,0.4130547780887645,0.4132127149140344,0.41337065173930426,0.4135285885645742,0.4136865253898441,0.41384446221511395,0.41400239904038383,0.41416033586565376,0.41431827269092364,0.4144762095161935,0.4146341463414634,0.4147920831667333,0.4149500199920032,0.4151079568172731,0.41526589364254296,0.4154238304678129,0.41558176729308277,0.41573970411835265,0.4158976409436225,0.41605557776889246,0.41621351459416234,0.4163714514194322,0.4165293882447021,0.416687325069972,0.4168452618952419,0.4170031987205118,0.4171611355457817,0.4173190723710516,0.41747700919632147,0.41763494602159135,0.4177928828468613,0.41795081967213116,0.41810875649740104,0.4182666933226709,0.41842463014794085,0.4185825669732107,0.4187405037984806,0.4188984406237505,0.4190563774490204,0.4192143142742903,0.41937225109956017,0.41953018792483004,0.4196881247501,0.41984606157536986,0.42000399840063973,0.4201619352259096,0.42031987205117954,0.4204778088764494,0.4206357457017193,0.4207936825269892,0.4209516193522591,0.421109556177529,0.42126749300279887,0.4214254298280688,0.4215833666533387,0.42174130347860855,0.42189924030387843,0.42205717712914836,0.42221511395441824,0.4223730507796881,0.422530987604958,0.42268892443022793,0.4228468612554978,0.4230047980807677,0.42316273490603756,0.4233206717313075,0.4234786085565774,0.42363654538184725,0.42379448220711713,0.42395241903238706,0.42411035585765694,0.4242682926829268,0.4244262295081967,0.42458416633346663,0.4247421031587365,0.4249000399840064,0.4250579768092763,0.4252159136345462,0.42537385045981607,0.42553178728508595,0.4256897241103559,0.42584766093562576,0.42600559776089564,0.4261635345861655,0.42632147141143545,0.4264794082367053,0.4266373450619752,0.4267952818872451,0.426953218712515,0.4271111555377849,0.42726909236305477,0.42742702918832465,0.4275849660135946,0.42774290283886446,0.42790083966413434,0.4280587764894042,0.42821671331467415,0.428374650139944,0.4285325869652139,0.4286905237904838,0.4288484606157537,0.4290063974410236,0.42916433426629347,0.4293222710915634,0.4294802079168333,0.42963814474210316,0.42979608156737303,0.42995401839264297,0.43011195521791284,0.4302698920431827,0.4304278288684526,0.43058576569372253,0.4307437025189924,0.4309016393442623,0.43105957616953217,0.4312175129948021,0.431375449820072,0.43153338664534185,0.43169132347061173,0.43184926029588167,0.43200719712115154,0.4321651339464214,0.4323230707716913,0.43248100759696123,0.4326389444222311,0.432796881247501,0.43295481807277086,0.4331127548980408,0.4332706917233107,0.43342862854858055,0.4335865653738505,0.43374450219912036,0.43390243902439024,0.4340603758496601,0.43421831267493005,0.43437624950019993,0.4345341863254698,0.4346921231507397,0.4348500599760096,0.4350079968012795,0.4351659336265494,0.43532387045181925,0.4354818072770892,0.43563974410235906,0.43579768092762894,0.4359556177528988,0.43611355457816875,0.4362714914034386,0.4364294282287085,0.4365873650539784,0.4367453018792483,0.4369032387045182,0.43706117552978807,0.437219112355058,0.4373770491803279,0.43753498600559776,0.43769292283086764,0.43785085965613757,0.43800879648140745,0.4381667333066773,0.4383246701319472,0.43848260695721714,0.438640543782487,0.4387984806077569,0.43895641743302677,0.4391143542582967,0.4392722910835666,0.43943022790883646,0.43958816473410633,0.43974610155937627,0.43990403838464615,0.440061975209916,0.4402199120351859,0.44037784886045583,0.4405357856857257,0.4406937225109956,0.44085165933626547,0.4410095961615354,0.4411675329868053,0.44132546981207516,0.4414834066373451,0.44164134346261497,0.44179928028788484,0.4419572171131547,0.44211515393842465,0.44227309076369453,0.4424310275889644,0.4425889644142343,0.4427469012395042,0.4429048380647741,0.443062774890044,0.44322071171531385,0.4433786485405838,0.44353658536585366,0.44369452219112354,0.4438524590163934,0.44401039584166335,0.44416833266693323,0.4443262694922031,0.444484206317473,0.4446421431427429,0.4448000799680128,0.4449580167932827,0.4451159536185526,0.4452738904438225,0.44543182726909236,0.44558976409436224,0.4457477009196322,0.44590563774490205,0.44606357457017193,0.4462215113954418,0.44637944822071174,0.4465373850459816,0.4466953218712515,0.44685325869652137,0.4470111955217913,0.4471691323470612,0.44732706917233106,0.44748500599760094,0.44764294282287087,0.44780087964814075,0.4479588164734106,0.4481167532986805,0.44827469012395044,0.4484326269492203,0.4485905637744902,0.44874850059976007,0.44890643742503,0.4490643742502999,0.44922231107556976,0.4493802479008397,0.44953818472610957,0.44969612155137945,0.4498540583766493,0.45001199520191926,0.45016993202718913,0.450327868852459,0.4504858056777289,0.4506437425029988,0.4508016793282687,0.4509596161535386,0.45111755297880846,0.4512754898040784,0.45143342662934827,0.45159136345461814,0.451749300279888,0.45190723710515796,0.45206517393042783,0.4522231107556977,0.4523810475809676,0.4525389844062375,0.4526969212315074,0.4528548580567773,0.45301279488204715,0.4531707317073171,0.45332866853258696,0.45348660535785684,0.4536445421831268,0.45380247900839665,0.45396041583366653,0.4541183526589364,0.45427628948420634,0.4544342263094762,0.4545921631347461,0.454750099960016,0.4549080367852859,0.4550659736105558,0.45522391043582566,0.45538184726109554,0.4555397840863655,0.45569772091163535,0.45585565773690523,0.4560135945621751,0.45617153138744504,0.4563294682127149,0.4564874050379848,0.4566453418632547,0.4568032786885246,0.4569612155137945,0.45711915233906436,0.4572770891643343,0.45743502598960417,0.45759296281487405,0.4577508996401439,0.45790883646541386,0.45806677329068374,0.4582247101159536,0.4583826469412235,0.4585405837664934,0.4586985205917633,0.4588564574170332,0.45901439424230306,0.459172331067573,0.45933026789284287,0.45948820471811275,0.4596461415433826,0.45980407836865256,0.45996201519392244,0.4601199520191923,0.4602778888444622,0.4604358256697321,0.460593762495002,0.4607516993202719,0.46090963614554176,0.4610675729708117,0.46122550979608157,0.46138344662135145,0.4615413834466214,0.46169932027189126,0.46185725709716113,0.462015193922431,0.46217313074770094,0.4623310675729708,0.4624890043982407,0.4626469412235106,0.4628048780487805,0.4629628148740504,0.46312075169932027,0.46327868852459014,0.4634366253498601,0.46359456217512995,0.46375249900039983,0.4639104358256697,0.46406837265093964,0.4642263094762095,0.4643842463014794,0.4645421831267493,0.4647001199520192,0.4648580567772891,0.46501599360255896,0.46517393042782884,0.4653318672530988,0.46548980407836865,0.46564774090363853,0.46580567772890846,0.46596361455417834,0.4661215513794482,0.4662794882047181,0.46643742502998803,0.4665953618552579,0.4667532986805278,0.46691123550579766,0.4670691723310676,0.4672271091563375,0.46738504598160735,0.4675429828068772,0.46770091963214716,0.46785885645741704,0.4680167932826869,0.4681747301079568,0.4683326669332267,0.4684906037584966,0.4686485405837665,0.46880647740903636,0.4689644142343063,0.46912235105957617,0.46928028788484605,0.469438224710116,0.46959616153538586,0.46975409836065574,0.4699120351859256,0.47006997201119555,0.4702279088364654,0.4703858456617353,0.4705437824870052,0.4707017193122751,0.470859656137545,0.47101759296281487,0.47117552978808475,0.4713334666133547,0.47149140343862456,0.47164934026389443,0.4718072770891643,0.47196521391443425,0.4721231507397041,0.472281087564974,0.4724390243902439,0.4725969612155138,0.4727548980407837,0.47291283486605357,0.47307077169132344,0.4732287085165934,0.47338664534186325,0.47354458216713313,0.47370251899240307,0.47386045581767294,0.4740183926429428,0.4741763294682127,0.47433426629348263,0.4744922031187525,0.4746501399440224,0.47480807676929226,0.4749660135945622,0.4751239504198321,0.47528188724510195,0.47543982407037183,0.47559776089564176,0.47575569772091164,0.4759136345461815,0.4760715713714514,0.47622950819672133,0.4763874450219912,0.4765453818472611,0.47670331867253096,0.4768612554978009,0.4770191923230708,0.47717712914834065,0.47733506597361053,0.47749300279888046,0.47765093962415034,0.4778088764494202,0.47796681327469015,0.47812475009996,0.4782826869252299,0.4784406237504998,0.4785985605757697,0.4787564974010396,0.47891443422630947,0.47907237105157935,0.4792303078768493,0.47938824470211916,0.47954618152738904,0.4797041183526589,0.47986205517792885,0.4800199920031987,0.4801779288284686,0.4803358656537385,0.4804938024790084,0.4806517393042783,0.48080967612954817,0.48096761295481805,0.481125549780088,0.48128348660535786,0.48144142343062774,0.48159936025589767,0.48175729708116755,0.4819152339064374,0.4820731707317073,0.48223110755697723,0.4823890443822471,0.482546981207517,0.48270491803278687,0.4828628548580568,0.4830207916833267,0.48317872850859656,0.48333666533386643,0.48349460215913637,0.48365253898440624,0.4838104758096761,0.483968412634946,0.48412634946021593,0.4842842862854858,0.4844422231107557,0.48460015993602557,0.4847580967612955,0.4849160335865654,0.48507397041183525,0.48523190723710513,0.48538984406237506,0.48554778088764494,0.4857057177129148,0.48586365453818475,0.48602159136345463,0.4861795281887245,0.4863374650139944,0.4864954018392643,0.4866533386645342,0.4868112754898041,0.48696921231507395,0.4871271491403439,0.48728508596561376,0.48744302279088364,0.4876009596161535,0.48775889644142345,0.48791683326669333,0.4880747700919632,0.4882327069172331,0.488390643742503,0.4885485805677729,0.48870651739304277,0.48886445421831265,0.4890223910435826,0.48918032786885246,0.48933826469412234,0.4894962015193922,0.48965413834466215,0.489812075169932,0.4899700119952019,0.49012794882047184,0.4902858856457417,0.4904438224710116,0.49060175929628147,0.4907596961215514,0.4909176329468213,0.49107556977209116,0.49123350659736104,0.49139144342263097,0.49154938024790085,0.4917073170731707,0.4918652538984406,0.49202319072371054,0.4921811275489804,0.4923390643742503,0.49249700119952017,0.4926549380247901,0.49281287485006,0.49297081167532986,0.49312874850059973,0.49328668532586967,0.49344462215113954,0.4936025589764094,0.49376049580167936,0.49391843262694923,0.4940763694522191,0.494234306277489,0.4943922431027589,0.4945501799280288,0.4947081167532987,0.49486605357856855,0.4950239904038385,0.49518192722910837,0.49533986405437824,0.4954978008796481,0.49565573770491805,0.49581367453018793,0.4959716113554578,0.4961295481807277,0.4962874850059976,0.4964454218312675,0.4966033586565374,0.49676129548180725,0.4969192323070772,0.49707716913234706,0.49723510595761694,0.4973930427828868,0.49755097960815675,0.49770891643342663,0.4978668532586965,0.49802479008396644,0.4981827269092363,0.4983406637345062,0.4984986005597761,0.498656537385046,0.4988144742103159,0.49897241103558576,0.49913034786085564,0.49928828468612557,0.49944622151139545,0.4996041583366653,0.4997620951619352,0.49992003198720514,0.500077968812475,0.5002359056377449,0.5003938424630148,0.5005517792882846,0.5007097161135545,0.5008676529388245,0.5010255897640944,0.5011835265893643,0.5013414634146341,0.501499400239904,0.5016573370651739,0.5018152738904438,0.5019732107157138,0.5021311475409836,0.5022890843662535,0.5024470211915234,0.5026049580167933,0.5027628948420632,0.502920831667333,0.5030787684926029,0.5032367053178729,0.5033946421431428,0.5035525789684127,0.5037105157936825,0.5038684526189524,0.5040263894442223,0.5041843262694922,0.504342263094762,0.504500199920032,0.5046581367453019,0.5048160735705718,0.5049740103958417,0.5051319472211115,0.5052898840463814,0.5054478208716513,0.5056057576969212,0.5057636945221912,0.505921631347461,0.5060795681727309,0.5062375049980008,0.5063954418232707,0.5065533786485406,0.5067113154738104,0.5068692522990804,0.5070271891243503,0.5071851259496202,0.50734306277489,0.5075009996001599,0.5076589364254298,0.5078168732506997,0.5079748100759696,0.5081327469012396,0.5082906837265094,0.5084486205517793,0.5086065573770492,0.5087644942023191,0.5089224310275889,0.5090803678528588,0.5092383046781287,0.5093962415033987,0.5095541783286686,0.5097121151539384,0.5098700519792083,0.5100279888044782,0.5101859256297481,0.510343862455018,0.5105017992802879,0.5106597361055578,0.5108176729308277,0.5109756097560976,0.5111335465813674,0.5112914834066373,0.5114494202319072,0.5116073570571771,0.5117652938824471,0.511923230707717,0.5120811675329868,0.5122391043582567,0.5123970411835266,0.5125549780087965,0.5127129148340663,0.5128708516593362,0.5130287884846062,0.5131867253098761,0.513344662135146,0.5135025989604158,0.5136605357856857,0.5138184726109556,0.5139764094362255,0.5141343462614955,0.5142922830867653,0.5144502199120352,0.5146081567373051,0.514766093562575,0.5149240303878448,0.5150819672131147,0.5152399040383846,0.5153978408636546,0.5155557776889245,0.5157137145141943,0.5158716513394642,0.5160295881647341,0.516187524990004,0.5163454618152739,0.5165033986405437,0.5166613354658137,0.5168192722910836,0.5169772091163535,0.5171351459416234,0.5172930827668932,0.5174510195921631,0.517608956417433,0.5177668932427029,0.5179248300679729,0.5180827668932427,0.5182407037185126,0.5183986405437825,0.5185565773690524,0.5187145141943222,0.5188724510195921,0.5190303878448621,0.519188324670132,0.5193462614954019,0.5195041983206717,0.5196621351459416,0.5198200719712115,0.5199780087964814,0.5201359456217513,0.5202938824470212,0.5204518192722911,0.520609756097561,0.5207676929228309,0.5209256297481007,0.5210835665733706,0.5212415033986405,0.5213994402239104,0.5215573770491804,0.5217153138744502,0.5218732506997201,0.52203118752499,0.5221891243502599,0.5223470611755298,0.5225049980007996,0.5226629348260696,0.5228208716513395,0.5229788084766094,0.5231367453018793,0.5232946821271491,0.523452618952419,0.5236105557776889,0.5237684926029588,0.5239264294282288,0.5240843662534986,0.5242423030787685,0.5244002399040384,0.5245581767293083,0.5247161135545781,0.524874050379848,0.5250319872051179,0.5251899240303879,0.5253478608556578,0.5255057976809276,0.5256637345061975,0.5258216713314674,0.5259796081567373,0.5261375449820072,0.5262954818072771,0.526453418632547,0.5266113554578169,0.5267692922830868,0.5269272291083567,0.5270851659336265,0.5272431027588964,0.5274010395841663,0.5275589764094363,0.5277169132347062,0.527874850059976,0.5280327868852459,0.5281907237105158,0.5283486605357857,0.5285065973610555,0.5286645341863254,0.5288224710115954,0.5289804078368653,0.5291383446621352,0.529296281487405,0.5294542183126749,0.5296121551379448,0.5297700919632147,0.5299280287884846,0.5300859656137545,0.5302439024390244,0.5304018392642943,0.5305597760895642,0.530717712914834,0.5308756497401039,0.5310335865653738,0.5311915233906438,0.5313494602159137,0.5315073970411835,0.5316653338664534,0.5318232706917233,0.5319812075169932,0.5321391443422631,0.5322970811675329,0.5324550179928029,0.5326129548180728,0.5327708916433427,0.5329288284686126,0.5330867652938824,0.5332447021191523,0.5334026389444222,0.5335605757696921,0.5337185125949621,0.5338764494202319,0.5340343862455018,0.5341923230707717,0.5343502598960416,0.5345081967213114,0.5346661335465813,0.5348240703718513,0.5349820071971212,0.5351399440223911,0.535297880847661,0.5354558176729308,0.5356137544982007,0.5357716913234706,0.5359296281487405,0.5360875649740104,0.5362455017992803,0.5364034386245502,0.5365613754498201,0.53671931227509,0.5368772491003598,0.5370351859256297,0.5371931227508996,0.5373510595761696,0.5375089964014395,0.5376669332267093,0.5378248700519792,0.5379828068772491,0.538140743702519,0.5382986805277888,0.5384566173530588,0.5386145541783287,0.5387724910035986,0.5389304278288685,0.5390883646541383,0.5392463014794082,0.5394042383046781,0.539562175129948,0.539720111955218,0.5398780487804878,0.5400359856057577,0.5401939224310276,0.5403518592562975,0.5405097960815674,0.5406677329068372,0.5408256697321071,0.5409836065573771,0.541141543382647,0.5412994802079168,0.5414574170331867,0.5416153538584566,0.5417732906837265,0.5419312275089964,0.5420891643342662,0.5422471011595362,0.5424050379848061,0.542562974810076,0.5427209116353459,0.5428788484606157,0.5430367852858856,0.5431947221111555,0.5433526589364255,0.5435105957616954,0.5436685325869652,0.5438264694122351,0.543984406237505,0.5441423430627749,0.5443002798880447,0.5444582167133146,0.5446161535385846,0.5447740903638545,0.5449320271891244,0.5450899640143942,0.5452479008396641,0.545405837664934,0.5455637744902039,0.5457217113154738,0.5458796481407437,0.5460375849660136,0.5461955217912835,0.5463534586165534,0.5465113954418233,0.5466693322670931,0.546827269092363,0.546985205917633,0.5471431427429029,0.5473010795681728,0.5474590163934426,0.5476169532187125,0.5477748900439824,0.5479328268692523,0.5480907636945221,0.5482487005197921,0.548406637345062,0.5485645741703319,0.5487225109956018,0.5488804478208716,0.5490383846461415,0.5491963214714114,0.5493542582966813,0.5495121951219513,0.5496701319472211,0.549828068772491,0.5499860055977609,0.5501439424230308,0.5503018792483007,0.5504598160735705,0.5506177528988405,0.5507756897241104,0.5509336265493803,0.5510915633746502,0.55124950019992,0.5514074370251899,0.5515653738504598,0.5517233106757297,0.5518812475009996,0.5520391843262695,0.5521971211515394,0.5523550579768093,0.5525129948020792,0.552670931627349,0.5528288684526189,0.5529868052778888,0.5531447421031588,0.5533026789284287,0.5534606157536985,0.5536185525789684,0.5537764894042383,0.5539344262295082,0.554092363054778,0.554250299880048,0.5544082367053179,0.5545661735305878,0.5547241103558577,0.5548820471811275,0.5550399840063974,0.5551979208316673,0.5553558576569372,0.5555137944822072,0.555671731307477,0.5558296681327469,0.5559876049580168,0.5561455417832867,0.5563034786085566,0.5564614154338264,0.5566193522590963,0.5567772890843663,0.5569352259096362,0.5570931627349061,0.5572510995601759,0.5574090363854458,0.5575669732107157,0.5577249100359856,0.5578828468612554,0.5580407836865254,0.5581987205117953,0.5583566573370652,0.5585145941623351,0.5586725309876049,0.5588304678128748,0.5589884046381447,0.5591463414634147,0.5593042782886846,0.5594622151139544,0.5596201519392243,0.5597780887644942,0.5599360255897641,0.560093962415034,0.5602518992403038,0.5604098360655738,0.5605677728908437,0.5607257097161136,0.5608836465413835,0.5610415833666533,0.5611995201919232,0.5613574570171931,0.561515393842463,0.561673330667733,0.5618312674930028,0.5619892043182727,0.5621471411435426,0.5623050779688125,0.5624630147940823,0.5626209516193522,0.5627788884446222,0.5629368252698921,0.563094762095162,0.5632526989204318,0.5634106357457017,0.5635685725709716,0.5637265093962415,0.5638844462215113,0.5640423830467813,0.5642003198720512,0.5643582566973211,0.564516193522591,0.5646741303478608,0.5648320671731307,0.5649900039984006,0.5651479408236705,0.5653058776489405,0.5654638144742103,0.5656217512994802,0.5657796881247501,0.56593762495002,0.5660955617752899,0.5662534986005597,0.5664114354258297,0.5665693722510996,0.5667273090763695,0.5668852459016394,0.5670431827269092,0.5672011195521791,0.567359056377449,0.5675169932027189,0.5676749300279889,0.5678328668532587,0.5679908036785286,0.5681487405037985,0.5683066773290684,0.5684646141543382,0.5686225509796081,0.568780487804878,0.568938424630148,0.5690963614554179,0.5692542982806877,0.5694122351059576,0.5695701719312275,0.5697281087564974,0.5698860455817673,0.5700439824070371,0.5702019192323071,0.570359856057577,0.5705177928828469,0.5706757297081168,0.5708336665333866,0.5709916033586565,0.5711495401839264,0.5713074770091964,0.5714654138344663,0.5716233506597361,0.571781287485006,0.5719392243102759,0.5720971611355458,0.5722550979608156,0.5724130347860855,0.5725709716113555,0.5727289084366254,0.5728868452618953,0.5730447820871651,0.573202718912435,0.5733606557377049,0.5735185925629748,0.5736765293882446,0.5738344662135146,0.5739924030387845,0.5741503398640544,0.5743082766893243,0.5744662135145941,0.574624150339864,0.5747820871651339,0.5749400239904039,0.5750979608156738,0.5752558976409436,0.5754138344662135,0.5755717712914834,0.5757297081167533,0.5758876449420232,0.576045581767293,0.576203518592563,0.5763614554178329,0.5765193922431028,0.5766773290683727,0.5768352658936425,0.5769932027189124,0.5771511395441823,0.5773090763694522,0.5774670131947222,0.577624950019992,0.5777828868452619,0.5779408236705318,0.5780987604958017,0.5782566973210715,0.5784146341463414,0.5785725709716114,0.5787305077968813,0.5788884446221512,0.579046381447421,0.5792043182726909,0.5793622550979608,0.5795201919232307,0.5796781287485006,0.5798360655737705,0.5799940023990404,0.5801519392243103,0.5803098760495802,0.58046781287485,0.5806257497001199,0.5807836865253898,0.5809416233506597,0.5810995601759297,0.5812574970011996,0.5814154338264694,0.5815733706517393,0.5817313074770092,0.5818892443022791,0.5820471811275489,0.5822051179528188,0.5823630547780888,0.5825209916033587,0.5826789284286286,0.5828368652538984,0.5829948020791683,0.5831527389044382,0.5833106757297081,0.5834686125549781,0.5836265493802479,0.5837844862055178,0.5839424230307877,0.5841003598560576,0.5842582966813274,0.5844162335065973,0.5845741703318672,0.5847321071571372,0.5848900439824071,0.585047980807677,0.5852059176329468,0.5853638544582167,0.5855217912834866,0.5856797281087565,0.5858376649340263,0.5859956017592963,0.5861535385845662,0.5863114754098361,0.586469412235106,0.5866273490603758,0.5867852858856457,0.5869432227109156,0.5871011595361856,0.5872590963614555,0.5874170331867253,0.5875749700119952,0.5877329068372651,0.587890843662535,0.5880487804878048,0.5882067173130747,0.5883646541383447,0.5885225909636146,0.5886805277888845,0.5888384646141543,0.5889964014394242,0.5891543382646941,0.589312275089964,0.5894702119152339,0.5896281487405038,0.5897860855657737,0.5899440223910436,0.5901019592163135,0.5902598960415834,0.5904178328668532,0.5905757696921231,0.5907337065173931,0.590891643342663,0.5910495801679329,0.5912075169932027,0.5913654538184726,0.5915233906437425,0.5916813274690124,0.5918392642942822,0.5919972011195522,0.5921551379448221,0.592313074770092,0.5924710115953619,0.5926289484206317,0.5927868852459016,0.5929448220711715,0.5931027588964414,0.5932606957217114,0.5934186325469812,0.5935765693722511,0.593734506197521,0.5938924430227909,0.5940503798480608,0.5942083166733306,0.5943662534986005,0.5945241903238705,0.5946821271491404,0.5948400639744102,0.5949980007996801,0.59515593762495,0.5953138744502199,0.5954718112754898,0.5956297481007597,0.5957876849260296,0.5959456217512995,0.5961035585765694,0.5962614954018393,0.5964194322271091,0.596577369052379,0.5967353058776489,0.5968932427029189,0.5970511795281888,0.5972091163534586,0.5973670531787285,0.5975249900039984,0.5976829268292683,0.5978408636545381,0.597998800479808,0.598156737305078,0.5983146741303479,0.5984726109556178,0.5986305477808876,0.5987884846061575,0.5989464214314274,0.5991043582566973,0.5992622950819673,0.5994202319072371,0.599578168732507,0.5997361055577769,0.5998940423830468,0.6000519792083167,0.6002099160335865,0.6003678528588564,0.6005257896841264,0.6006837265093963,0.6008416633346662,0.600999600159936,0.6011575369852059,0.6013154738104758,0.6014734106357457,0.6016313474610155,0.6017892842862855,0.6019472211115554,0.6021051579368253,0.6022630947620952,0.602421031587365,0.6025789684126349,0.6027369052379048,0.6028948420631748,0.6030527788884447,0.6032107157137145,0.6033686525389844,0.6035265893642543,0.6036845261895242,0.603842463014794,0.6040003998400639,0.6041583366653339,0.6043162734906038,0.6044742103158737,0.6046321471411435,0.6047900839664134,0.6049480207916833,0.6051059576169532,0.6052638944422231,0.605421831267493,0.6055797680927629,0.6057377049180328,0.6058956417433027,0.6060535785685726,0.6062115153938424,0.6063694522191123,0.6065273890443822,0.6066853258696522,0.6068432626949221,0.6070011995201919,0.6071591363454618,0.6073170731707317,0.6074750099960016,0.6076329468212714,0.6077908836465414,0.6079488204718113,0.6081067572970812,0.6082646941223511,0.608422630947621,0.6085805677728908,0.6087385045981607,0.6088964414234306,0.6090543782487006,0.6092123150739704,0.6093702518992403,0.6095281887245102,0.6096861255497801,0.60984406237505,0.6100019992003198,0.6101599360255897,0.6103178728508597,0.6104758096761296,0.6106337465013995,0.6107916833266693,0.6109496201519392,0.6111075569772091,0.611265493802479,0.611423430627749,0.6115813674530188,0.6117393042782887,0.6118972411035586,0.6120551779288285,0.6122131147540983,0.6123710515793682,0.6125289884046381,0.6126869252299081,0.612844862055178,0.6130027988804478,0.6131607357057177,0.6133186725309876,0.6134766093562575,0.6136345461815274,0.6137924830067972,0.6139504198320672,0.6141083566573371,0.614266293482607,0.6144242303078769,0.6145821671331467,0.6147401039584166,0.6148980407836865,0.6150559776089565,0.6152139144342263,0.6153718512594962,0.6155297880847661,0.615687724910036,0.6158456617353059,0.6160035985605757,0.6161615353858456,0.6163194722111156,0.6164774090363855,0.6166353458616554,0.6167932826869252,0.6169512195121951,0.617109156337465,0.6172670931627349,0.6174250299880047,0.6175829668132747,0.6177409036385446,0.6178988404638145,0.6180567772890844,0.6182147141143542,0.6183726509396241,0.618530587764894,0.6186885245901639,0.6188464614154339,0.6190043982407037,0.6191623350659736,0.6193202718912435,0.6194782087165134,0.6196361455417833,0.6197940823670531,0.6199520191923231,0.620109956017593,0.6202678928428629,0.6204258296681328,0.6205837664934026,0.6207417033186725,0.6208996401439424,0.6210575769692123,0.6212155137944823,0.6213734506197521,0.621531387445022,0.6216893242702919,0.6218472610955618,0.6220051979208316,0.6221631347461015,0.6223210715713714,0.6224790083966414,0.6226369452219113,0.6227948820471811,0.622952818872451,0.6231107556977209,0.6232686925229908,0.6234266293482607,0.6235845661735306,0.6237425029988005,0.6239004398240704,0.6240583766493403,0.6242163134746102,0.62437425029988,0.6245321871251499,0.6246901239504198,0.6248480607756898,0.6250059976009597,0.6251639344262295,0.6253218712514994,0.6254798080767693,0.6256377449020392,0.625795681727309,0.6259536185525789,0.6261115553778489,0.6262694922031188,0.6264274290283887,0.6265853658536585,0.6267433026789284,0.6269012395041983,0.6270591763294682,0.6272171131547382,0.627375049980008,0.6275329868052779,0.6276909236305478,0.6278488604558177,0.6280067972810875,0.6281647341063574,0.6283226709316273,0.6284806077568973,0.6286385445821672,0.628796481407437,0.6289544182327069,0.6291123550579768,0.6292702918832467,0.6294282287085166,0.6295861655337864,0.6297441023590564,0.6299020391843263,0.6300599760095962,0.6302179128348661,0.6303758496601359,0.6305337864854058,0.6306917233106757,0.6308496601359456,0.6310075969612156,0.6311655337864854,0.6313234706117553,0.6314814074370252,0.6316393442622951,0.6317972810875649,0.6319552179128348,0.6321131547381048,0.6322710915633747,0.6324290283886446,0.6325869652139144,0.6327449020391843,0.6329028388644542,0.6330607756897241,0.633218712514994,0.6333766493402639,0.6335345861655338,0.6336925229908037,0.6338504598160736,0.6340083966413435,0.6341663334666133,0.6343242702918832,0.6344822071171531,0.6346401439424231,0.634798080767693,0.6349560175929628,0.6351139544182327,0.6352718912435026,0.6354298280687725,0.6355877648940423,0.6357457017193123,0.6359036385445822,0.6360615753698521,0.636219512195122,0.6363774490203918,0.6365353858456617,0.6366933226709316,0.6368512594962015,0.6370091963214715,0.6371671331467413,0.6373250699720112,0.6374830067972811,0.637640943622551,0.6377988804478208,0.6379568172730907,0.6381147540983606,0.6382726909236306,0.6384306277489005,0.6385885645741703,0.6387465013994402,0.6389044382247101,0.63906237504998,0.6392203118752499,0.6393782487005198,0.6395361855257897,0.6396941223510596,0.6398520591763295,0.6400099960015994,0.6401679328268692,0.6403258696521391,0.640483806477409,0.640641743302679,0.6407996801279489,0.6409576169532187,0.6411155537784886,0.6412734906037585,0.6414314274290284,0.6415893642542982,0.6417473010795681,0.6419052379048381,0.642063174730108,0.6422211115553779,0.6423790483806477,0.6425369852059176,0.6426949220311875,0.6428528588564574,0.6430107956817273,0.6431687325069972,0.6433266693322671,0.643484606157537,0.6436425429828069,0.6438004798080768,0.6439584166333466,0.6441163534586165,0.6442742902838865,0.6444322271091564,0.6445901639344263,0.6447481007596961,0.644906037584966,0.6450639744102359,0.6452219112355058,0.6453798480607756,0.6455377848860456,0.6456957217113155,0.6458536585365854,0.6460115953618553,0.6461695321871251,0.646327469012395,0.6464854058376649,0.6466433426629348,0.6468012794882048,0.6469592163134746,0.6471171531387445,0.6472750899640144,0.6474330267892843,0.6475909636145541,0.647748900439824,0.647906837265094,0.6480647740903639,0.6482227109156338,0.6483806477409036,0.6485385845661735,0.6486965213914434,0.6488544582167133,0.6490123950419832,0.6491703318672531,0.649328268692523,0.6494862055177929,0.6496441423430628,0.6498020791683327,0.6499600159936025,0.6501179528188724,0.6502758896441423,0.6504338264694123,0.6505917632946822,0.650749700119952,0.6509076369452219,0.6510655737704918,0.6512235105957617,0.6513814474210315,0.6515393842463015,0.6516973210715714,0.6518552578968413,0.6520131947221112,0.652171131547381,0.6523290683726509,0.6524870051979208,0.6526449420231907,0.6528028788484607,0.6529608156737305,0.6531187524990004,0.6532766893242703,0.6534346261495402,0.65359256297481,0.6537504998000799,0.6539084366253498,0.6540663734506198,0.6542243102758897,0.6543822471011596,0.6545401839264294,0.6546981207516993,0.6548560575769692,0.6550139944022391,0.6551719312275089,0.6553298680527789,0.6554878048780488,0.6556457417033187,0.6558036785285886,0.6559616153538584,0.6561195521791283,0.6562774890043982,0.6564354258296682,0.6565933626549381,0.6567512994802079,0.6569092363054778,0.6570671731307477,0.6572251099560176,0.6573830467812875,0.6575409836065573,0.6576989204318273,0.6578568572570972,0.6580147940823671,0.658172730907637,0.6583306677329068,0.6584886045581767,0.6586465413834466,0.6588044782087165,0.6589624150339864,0.6591203518592563,0.6592782886845262,0.6594362255097961,0.659594162335066,0.6597520991603358,0.6599100359856057,0.6600679728108757,0.6602259096361456,0.6603838464614155,0.6605417832866853,0.6606997201119552,0.6608576569372251,0.661015593762495,0.6611735305877648,0.6613314674130348,0.6614894042383047,0.6616473410635746,0.6618052778888445,0.6619632147141143,0.6621211515393842,0.6622790883646541,0.662437025189924,0.662594962015194,0.6627528988404638,0.6629108356657337,0.6630687724910036,0.6632267093162735,0.6633846461415434,0.6635425829668132,0.6637005197920832,0.6638584566173531,0.664016393442623,0.6641743302678929,0.6643322670931627,0.6644902039184326,0.6646481407437025,0.6648060775689724,0.6649640143942424,0.6651219512195122,0.6652798880447821,0.665437824870052,0.6655957616953219,0.6657536985205917,0.6659116353458616,0.6660695721711315,0.6662275089964015,0.6663854458216714,0.6665433826469412,0.6667013194722111,0.666859256297481,0.6670171931227509,0.6671751299480208,0.6673330667732906,0.6674910035985606,0.6676489404238305,0.6678068772491004,0.6679648140743703,0.6681227508996401,0.66828068772491,0.6684386245501799,0.6685965613754499,0.6687544982007197,0.6689124350259896,0.6690703718512595,0.6692283086765294,0.6693862455017993,0.6695441823270691,0.669702119152339,0.669860055977609,0.6700179928028789,0.6701759296281488,0.6703338664534186,0.6704918032786885,0.6706497401039584,0.6708076769292283,0.6709656137544981,0.6711235505797681,0.671281487405038,0.6714394242303079,0.6715973610555778,0.6717552978808476,0.6719132347061175,0.6720711715313874,0.6722291083566574,0.6723870451819273,0.6725449820071971,0.672702918832467,0.6728608556577369,0.6730187924830068,0.6731767293082767,0.6733346661335465,0.6734926029588165,0.6736505397840864,0.6738084766093563,0.6739664134346262,0.674124350259896,0.6742822870851659,0.6744402239104358,0.6745981607357057,0.6747560975609757,0.6749140343862455,0.6750719712115154,0.6752299080367853,0.6753878448620552,0.675545781687325,0.6757037185125949,0.6758616553378649,0.6760195921631348,0.6761775289884047,0.6763354658136745,0.6764934026389444,0.6766513394642143,0.6768092762894842,0.676967213114754,0.677125149940024,0.6772830867652939,0.6774410235905638,0.6775989604158337,0.6777568972411036,0.6779148340663734,0.6780727708916433,0.6782307077169132,0.6783886445421832,0.678546581367453,0.6787045181927229,0.6788624550179928,0.6790203918432627,0.6791783286685326,0.6793362654938024,0.6794942023190723,0.6796521391443423,0.6798100759696122,0.6799680127948821,0.6801259496201519,0.6802838864454218,0.6804418232706917,0.6805997600959616,0.6807576969212316,0.6809156337465014,0.6810735705717713,0.6812315073970412,0.6813894442223111,0.681547381047581,0.6817053178728508,0.6818632546981207,0.6820211915233907,0.6821791283486606,0.6823370651739304,0.6824950019992003,0.6826529388244702,0.6828108756497401,0.68296881247501,0.6831267493002798,0.6832846861255498,0.6834426229508197,0.6836005597760896,0.6837584966013595,0.6839164334266293,0.6840743702518992,0.6842323070771691,0.6843902439024391,0.684548180727709,0.6847061175529788,0.6848640543782487,0.6850219912035186,0.6851799280287885,0.6853378648540583,0.6854958016793282,0.6856537385045982,0.6858116753298681,0.685969612155138,0.6861275489804078,0.6862854858056777,0.6864434226309476,0.6866013594562175,0.6867592962814874,0.6869172331067573,0.6870751699320272,0.6872331067572971,0.687391043582567,0.6875489804078369,0.6877069172331067,0.6878648540583766,0.6880227908836466,0.6881807277089165,0.6883386645341864,0.6884966013594562,0.6886545381847261,0.688812475009996,0.6889704118352659,0.6891283486605357,0.6892862854858057,0.6894442223110756,0.6896021591363455,0.6897600959616154,0.6899180327868852,0.6900759696121551,0.690233906437425,0.6903918432626949,0.6905497800879649,0.6907077169132347,0.6908656537385046,0.6910235905637745,0.6911815273890444,0.6913394642143142,0.6914974010395841,0.691655337864854,0.691813274690124,0.6919712115153939,0.6921291483406637,0.6922870851659336,0.6924450219912035,0.6926029588164734,0.6927608956417433,0.6929188324670132,0.6930767692922831,0.693234706117553,0.6933926429428229,0.6935505797680928,0.6937085165933626,0.6938664534186325,0.6940243902439024,0.6941823270691724,0.6943402638944423,0.6944982007197121,0.694656137544982,0.6948140743702519,0.6949720111955218,0.6951299480207916,0.6952878848460615,0.6954458216713315,0.6956037584966014,0.6957616953218713,0.6959196321471411,0.696077568972411,0.6962355057976809,0.6963934426229508,0.6965513794482208,0.6967093162734906,0.6968672530987605,0.6970251899240304,0.6971831267493003,0.6973410635745702,0.69749900039984,0.6976569372251099,0.6978148740503799,0.6979728108756498,0.6981307477009197,0.6982886845261895,0.6984466213514594,0.6986045581767293,0.6987624950019992,0.698920431827269,0.699078368652539,0.6992363054778089,0.6993942423030788,0.6995521791283487,0.6997101159536185,0.6998680527788884,0.7000259896041583,0.7001839264294283,0.7003418632546982,0.700499800079968,0.7006577369052379,0.7008156737305078,0.7009736105557777,0.7011315473810475,0.7012894842063174,0.7014474210315874,0.7016053578568573,0.7017632946821272,0.701921231507397,0.7020791683326669,0.7022371051579368,0.7023950419832067,0.7025529788084766,0.7027109156337465,0.7028688524590164,0.7030267892842863,0.7031847261095562,0.7033426629348261,0.7035005997600959,0.7036585365853658,0.7038164734106358,0.7039744102359057,0.7041323470611756,0.7042902838864454,0.7044482207117153,0.7046061575369852,0.7047640943622551,0.704922031187525,0.7050799680127949,0.7052379048380648,0.7053958416633347,0.7055537784886046,0.7057117153138744,0.7058696521391443,0.7060275889644142,0.7061855257896841,0.7063434626149541,0.7065013994402239,0.7066593362654938,0.7068172730907637,0.7069752099160336,0.7071331467413035,0.7072910835665733,0.7074490203918432,0.7076069572171132,0.7077648940423831,0.707922830867653,0.7080807676929228,0.7082387045181927,0.7083966413434626,0.7085545781687325,0.7087125149940025,0.7088704518192723,0.7090283886445422,0.7091863254698121,0.709344262295082,0.7095021991203518,0.7096601359456217,0.7098180727708916,0.7099760095961616,0.7101339464214315,0.7102918832467013,0.7104498200719712,0.7106077568972411,0.710765693722511,0.7109236305477808,0.7110815673730507,0.7112395041983207,0.7113974410235906,0.7115553778488605,0.7117133146741303,0.7118712514994002,0.7120291883246701,0.71218712514994,0.71234506197521,0.7125029988004798,0.7126609356257497,0.7128188724510196,0.7129768092762895,0.7131347461015594,0.7132926829268292,0.7134506197520991,0.7136085565773691,0.713766493402639,0.7139244302279089,0.7140823670531787,0.7142403038784486,0.7143982407037185,0.7145561775289884,0.7147141143542582,0.7148720511795282,0.7150299880047981,0.715187924830068,0.7153458616553379,0.7155037984806077,0.7156617353058776,0.7158196721311475,0.7159776089564175,0.7161355457816874,0.7162934826069572,0.7164514194322271,0.716609356257497,0.7167672930827669,0.7169252299080368,0.7170831667333066,0.7172411035585766,0.7173990403838465,0.7175569772091164,0.7177149140343863,0.7178728508596561,0.718030787684926,0.7181887245101959,0.7183466613354658,0.7185045981607358,0.7186625349860056,0.7188204718112755,0.7189784086365454,0.7191363454618153,0.7192942822870851,0.719452219112355,0.7196101559376249,0.7197680927628949,0.7199260295881648,0.7200839664134346,0.7202419032387045,0.7203998400639744,0.7205577768892443,0.7207157137145142,0.7208736505397841,0.721031587365054,0.7211895241903239,0.7213474610155938,0.7215053978408636,0.7216633346661335,0.7218212714914034,0.7219792083166733,0.7221371451419433,0.7222950819672131,0.722453018792483,0.7226109556177529,0.7227688924430228,0.7229268292682927,0.7230847660935625,0.7232427029188324,0.7234006397441024,0.7235585765693723,0.7237165133946422,0.723874450219912,0.7240323870451819,0.7241903238704518,0.7243482606957217,0.7245061975209917,0.7246641343462615,0.7248220711715314,0.7249800079968013,0.7251379448220712,0.725295881647341,0.7254538184726109,0.7256117552978808,0.7257696921231508,0.7259276289484207,0.7260855657736905,0.7262435025989604,0.7264014394242303,0.7265593762495002,0.72671731307477,0.7268752499000399,0.7270331867253099,0.7271911235505798,0.7273490603758497,0.7275069972011196,0.7276649340263894,0.7278228708516593,0.7279808076769292,0.7281387445021992,0.728296681327469,0.7284546181527389,0.7286125549780088,0.7287704918032787,0.7289284286285486,0.7290863654538184,0.7292443022790883,0.7294022391043583,0.7295601759296282,0.7297181127548981,0.7298760495801679,0.7300339864054378,0.7301919232307077,0.7303498600559776,0.7305077968812475,0.7306657337065174,0.7308236705317873,0.7309816073570572,0.7311395441823271,0.731297481007597,0.7314554178328668,0.7316133546581367,0.7317712914834066,0.7319292283086766,0.7320871651339464,0.7322451019592163,0.7324030387844862,0.7325609756097561,0.732718912435026,0.7328768492602958,0.7330347860855658,0.7331927229108357,0.7333506597361056,0.7335085965613755,0.7336665333866453,0.7338244702119152,0.7339824070371851,0.734140343862455,0.734298280687725,0.7344562175129948,0.7346141543382647,0.7347720911635346,0.7349300279888045,0.7350879648140743,0.7352459016393442,0.7354038384646141,0.7355617752898841,0.735719712115154,0.7358776489404238,0.7360355857656937,0.7361935225909636,0.7363514594162335,0.7365093962415034,0.7366673330667733,0.7368252698920432,0.7369832067173131,0.737141143542583,0.7372990803678529,0.7374570171931227,0.7376149540183926,0.7377728908436625,0.7379308276689325,0.7380887644942024,0.7382467013194722,0.7384046381447421,0.738562574970012,0.7387205117952819,0.7388784486205517,0.7390363854458216,0.7391943222710916,0.7393522590963615,0.7395101959216314,0.7396681327469012,0.7398260695721711,0.739984006397441,0.7401419432227109,0.7402998800479809,0.7404578168732507,0.7406157536985206,0.7407736905237905,0.7409316273490604,0.7410895641743303,0.7412475009996001,0.74140543782487,0.74156337465014,0.7417213114754099,0.7418792483006798,0.7420371851259496,0.7421951219512195,0.7423530587764894,0.7425109956017593,0.7426689324270291,0.7428268692522991,0.742984806077569,0.7431427429028389,0.7433006797281088,0.7434586165533786,0.7436165533786485,0.7437744902039184,0.7439324270291883,0.7440903638544583,0.7442483006797281,0.744406237504998,0.7445641743302679,0.7447221111555378,0.7448800479808076,0.7450379848060775,0.7451959216313475,0.7453538584566174,0.7455117952818873,0.7456697321071571,0.745827668932427,0.7459856057576969,0.7461435425829668,0.7463014794082367,0.7464594162335066,0.7466173530587765,0.7467752898840464,0.7469332267093163,0.7470911635345862,0.747249100359856,0.7474070371851259,0.7475649740103958,0.7477229108356658,0.7478808476609357,0.7480387844862055,0.7481967213114754,0.7483546581367453,0.7485125949620152,0.748670531787285,0.748828468612555,0.7489864054378249,0.7491443422630948,0.7493022790883647,0.7494602159136345,0.7496181527389044,0.7497760895641743,0.7499340263894442,0.7500919632147142,0.750249900039984,0.7504078368652539,0.7505657736905238,0.7507237105157937,0.7508816473410636,0.7510395841663334,0.7511975209916033,0.7513554578168733,0.7515133946421432,0.751671331467413,0.7518292682926829,0.7519872051179528,0.7521451419432227,0.7523030787684926,0.7524610155937625,0.7526189524190324,0.7527768892443023,0.7529348260695722,0.7530927628948421,0.7532506997201119,0.7534086365453818,0.7535665733706517,0.7537245101959217,0.7538824470211916,0.7540403838464614,0.7541983206717313,0.7543562574970012,0.7545141943222711,0.754672131147541,0.7548300679728108,0.7549880047980808,0.7551459416233507,0.7553038784486206,0.7554618152738904,0.7556197520991603,0.7557776889244302,0.7559356257497001,0.75609356257497,0.75625149940024,0.7564094362255098,0.7565673730507797,0.7567253098760496,0.7568832467013195,0.7570411835265893,0.7571991203518592,0.7573570571771292,0.7575149940023991,0.757672930827669,0.7578308676529388,0.7579888044782087,0.7581467413034786,0.7583046781287485,0.7584626149540183,0.7586205517792883,0.7587784886045582,0.7589364254298281,0.759094362255098,0.7592522990803678,0.7594102359056377,0.7595681727309076,0.7597261095561775,0.7598840463814475,0.7600419832067173,0.7601999200319872,0.7603578568572571,0.760515793682527,0.7606737305077969,0.7608316673330667,0.7609896041583367,0.7611475409836066,0.7613054778088765,0.7614634146341464,0.7616213514594162,0.7617792882846861,0.761937225109956,0.7620951619352259,0.7622530987604959,0.7624110355857657,0.7625689724110356,0.7627269092363055,0.7628848460615754,0.7630427828868452,0.7632007197121151,0.763358656537385,0.763516593362655,0.7636745301879249,0.7638324670131947,0.7639904038384646,0.7641483406637345,0.7643062774890044,0.7644642143142742,0.7646221511395442,0.7647800879648141,0.764938024790084,0.7650959616153539,0.7652538984406237,0.7654118352658936,0.7655697720911635,0.7657277089164334,0.7658856457417034,0.7660435825669732,0.7662015193922431,0.766359456217513,0.7665173930427829,0.7666753298680528,0.7668332666933226,0.7669912035185925,0.7671491403438625,0.7673070771691324,0.7674650139944023,0.7676229508196721,0.767780887644942,0.7679388244702119,0.7680967612954818,0.7682546981207516,0.7684126349460216,0.7685705717712915,0.7687285085965614,0.7688864454218313,0.7690443822471011,0.769202319072371,0.7693602558976409,0.7695181927229109,0.7696761295481808,0.7698340663734506,0.7699920031987205,0.7701499400239904,0.7703078768492603,0.7704658136745302,0.7706237504998,0.77078168732507,0.7709396241503399,0.7710975609756098,0.7712554978008797,0.7714134346261495,0.7715713714514194,0.7717293082766893,0.7718872451019592,0.7720451819272292,0.772203118752499,0.7723610555777689,0.7725189924030388,0.7726769292283087,0.7728348660535785,0.7729928028788484,0.7731507397041184,0.7733086765293883,0.7734666133546582,0.773624550179928,0.7737824870051979,0.7739404238304678,0.7740983606557377,0.7742562974810075,0.7744142343062775,0.7745721711315474,0.7747301079568173,0.7748880447820872,0.775045981607357,0.7752039184326269,0.7753618552578968,0.7755197920831667,0.7756777289084367,0.7758356657337065,0.7759936025589764,0.7761515393842463,0.7763094762095162,0.7764674130347861,0.7766253498600559,0.7767832866853259,0.7769412235105958,0.7770991603358657,0.7772570971611356,0.7774150339864054,0.7775729708116753,0.7777309076369452,0.7778888444622151,0.7780467812874851,0.7782047181127549,0.7783626549380248,0.7785205917632947,0.7786785285885646,0.7788364654138344,0.7789944022391043,0.7791523390643742,0.7793102758896442,0.7794682127149141,0.7796261495401839,0.7797840863654538,0.7799420231907237,0.7800999600159936,0.7802578968412635,0.7804158336665333,0.7805737704918033,0.7807317073170732,0.7808896441423431,0.781047580967613,0.7812055177928828,0.7813634546181527,0.7815213914434226,0.7816793282686926,0.7818372650939625,0.7819952019192323,0.7821531387445022,0.7823110755697721,0.782469012395042,0.7826269492203118,0.7827848860455817,0.7829428228708517,0.7831007596961216,0.7832586965213915,0.7834166333466613,0.7835745701719312,0.7837325069972011,0.783890443822471,0.7840483806477409,0.7842063174730108,0.7843642542982807,0.7845221911235506,0.7846801279488205,0.7848380647740903,0.7849960015993602,0.7851539384246301,0.7853118752499001,0.78546981207517,0.7856277489004398,0.7857856857257097,0.7859436225509796,0.7861015593762495,0.7862594962015194,0.7864174330267892,0.7865753698520592,0.7867333066773291,0.786891243502599,0.7870491803278689,0.7872071171531387,0.7873650539784086,0.7875229908036785,0.7876809276289484,0.7878388644542184,0.7879968012794882,0.7881547381047581,0.788312674930028,0.7884706117552979,0.7886285485805677,0.7887864854058376,0.7889444222311076,0.7891023590563775,0.7892602958816474,0.7894182327069172,0.7895761695321871,0.789734106357457,0.7898920431827269,0.7900499800079968,0.7902079168332667,0.7903658536585366,0.7905237904838065,0.7906817273090764,0.7908396641343463,0.7909976009596161,0.791155537784886,0.7913134746101559,0.7914714114354259,0.7916293482606958,0.7917872850859656,0.7919452219112355,0.7921031587365054,0.7922610955617753,0.7924190323870451,0.792576969212315,0.792734906037585,0.7928928428628549,0.7930507796881248,0.7932087165133946,0.7933666533386645,0.7935245901639344,0.7936825269892043,0.7938404638144743,0.7939984006397441,0.794156337465014,0.7943142742902839,0.7944722111155538,0.7946301479408237,0.7947880847660935,0.7949460215913634,0.7951039584166334,0.7952618952419033,0.7954198320671731,0.795577768892443,0.7957357057177129,0.7958936425429828,0.7960515793682527,0.7962095161935225,0.7963674530187925,0.7965253898440624,0.7966833266693323,0.7968412634946022,0.796999200319872,0.7971571371451419,0.7973150739704118,0.7974730107956818,0.7976309476209517,0.7977888844462215,0.7979468212714914,0.7981047580967613,0.7982626949220312,0.798420631747301,0.7985785685725709,0.7987365053978409,0.7988944422231108,0.7990523790483807,0.7992103158736505,0.7993682526989204,0.7995261895241903,0.7996841263494602,0.7998420631747301,0.8]}

},{}],103:[function(require,module,exports){
module.exports={"expected":[4.641588934109927e12,4.641898144074917e12,4.642207653375269e12,4.642517245241131e12,4.642826702671284e12,4.643136459725924e12,4.643446299461781e12,4.643756004703892e12,4.64406600986009e12,4.644376097813445e12,4.644686051215003e12,4.644996304820727e12,4.645306641339777e12,4.645616843248969e12,4.645927345652882e12,4.646237931086524e12,4.646548381852235e12,4.646859133403699e12,4.647169968101531e12,4.647480668073347e12,4.647791669122426e12,4.648102753434745e12,4.648413702962952e12,4.648724953860414e12,4.649036288138223e12,4.6493474875738125e12,4.64965898867113e12,4.649970573266136e12,4.650282022960805e12,4.650593774610156e12,4.650905609874774e12,4.651217528793912e12,4.6515293127352e12,4.651841399022555e12,4.652153569082322e12,4.652465604106098e12,4.652777941770023e12,4.653090363324494e12,4.653402649784818e12,4.653715239179864e12,4.654027912583824e12,4.654340450835473e12,4.654653292316902e12,4.654966217925853e12,4.655279008324317e12,4.655592102248109e12,4.655905280418271e12,4.656218323319761e12,4.656531670042614e12,4.656845101130924e12,4.657158396892367e12,4.657471996771701e12,4.657785681135818e12,4.658099230114864e12,4.658413083508818e12,4.658727021507127e12,4.659040824062147e12,4.659354931329588e12,4.659669123321194e12,4.659983179811287e12,4.660297541311808e12,4.660611987656545e12,4.660926518885582e12,4.661240914535452e12,4.661555615593884e12,4.661870401656993e12,4.662185052082689e12,4.662500008216109e12,4.662815049474828e12,4.663129955037877e12,4.663445166608311e12,4.66376046342491e12,4.664075624487573e12,4.664391091857781e12,4.664706644595268e12,4.665022061520541e12,4.6653377850540205e12,4.665653594076136e12,4.665969267227754e12,4.666285247288739e12,4.666601312959966e12,4.666917242702401e12,4.667233479655869e12,4.667549802341429e12,4.667865989039896e12,4.668182483251563e12,4.668499063317422e12,4.668815507337879e12,4.669132259174207e12,4.669449096987075e12,4.669765798696223e12,4.670082808524421e12,4.670399904451758e12,4.670716864217045e12,4.671034132405069e12,4.671351486815078e12,4.671668927488087e12,4.671986231921261e12,4.6723038451829e12,4.672621544830722e12,4.672939108180361e12,4.673256980663342e12,4.673574939655937e12,4.673892762291996e12,4.674210894366781e12,4.674529113074866e12,4.674847195368055e12,4.675165587405867e12,4.675484066200917e12,4.6758024085227e12,4.67612106089552e12,4.676439800149768e12,4.676758402872373e12,4.677077315952941e12,4.677396316039383e12,4.677715179535798e12,4.678034353697618e12,4.678353614990013e12,4.67867273963399e12,4.678992175251331e12,4.679311698124203e12,4.679631084290259e12,4.679950781738157e12,4.680270566566799e12,4.680590214630218e12,4.680910174284479e12,4.681230221444951e12,4.681550356153525e12,4.681870354018989e12,4.682190663888125e12,4.682511061431176e12,4.682831322072696e12,4.6831518950281045e12,4.683472555783498e12,4.683793079578934e12,4.684113915998996e12,4.684434840345375e12,4.684755627673361e12,4.68507672793724e12,4.685397916254023e12,4.685718967493978e12,4.686040331981613e12,4.686361784649004e12,4.686683100181118e12,4.687004729273234e12,4.687326446672216e12,4.687648026877472e12,4.687969920955574e12,4.688291903467917e12,4.688613748728076e12,4.68893590817446e12,4.689258156182719e12,4.689580266880333e12,4.689902692078079e12,4.690225205965601e12,4.690547582484009e12,4.69087027381699e12,4.69119305396791e12,4.691515696691244e12,4.691838654544125e12,4.692161701343373e12,4.692484837131867e12,4.6928078354148e12,4.693131149248102e12,4.693454552199432e12,4.693777817586716e12,4.694101398840594e12,4.694425069341549e12,4.694748602219969e12,4.695072451281747e12,4.695396389719917e12,4.695720190477059e12,4.69604430773486e12,4.696368514498638e12,4.696692583522889e12,4.697016969365644e12,4.697341444844226e12,4.697665782524779e12,4.697990437342221e12,4.698315181925611e12,4.698639788652468e12,4.69896471283514e12,4.699289726914153e12,4.699614603078121e12,4.699939797017377e12,4.700265080983638e12,4.700590226976339e12,4.700915691064346e12,4.70124124531029e12,4.701566661524159e12,4.701892396153898e12,4.702218221072781e12,4.702543907901068e12,4.702869913466339e12,4.703196009452232e12,4.7035221959026455e12,4.703848244184426e12,4.704174611632221e12,4.70450106967638e12,4.704827389493378e12,4.70515402879879e12,4.705480758832685e12,4.705807350580886e12,4.706134262140452e12,4.706461264560896e12,4.706788128637113e12,4.7071153128482e12,4.707442588052835e12,4.707769724854706e12,4.708097182115509e12,4.708424730502806e12,4.708752140428801e12,4.709079871138345e12,4.709407693107607e12,4.709735376557027e12,4.710063381115172e12,4.710391477066538e12,4.71071943443952e12,4.711047713246959e12,4.711376083581404e12,4.711704315278919e12,4.7120328687371875e12,4.712361513856524e12,4.712690020280384e12,4.713018848791856e12,4.713347769098738e12,4.713676781245885e12,4.714005654619487e12,4.714334850517413e12,4.714664138390322e12,4.714993287431138e12,4.715322759324451e12,4.715652323327749e12,4.715981748440401e12,4.716311496734294e12,4.716641337273455e12,4.716971038863419e12,4.717301063963933e12,4.717631181445283e12,4.717961159918885e12,4.718291462232914e12,4.718621857063633e12,4.71895211282805e12,4.719282692763345e12,4.719613365351468e12,4.719943898814735e12,4.720274756779901e12,4.720605707534322e12,4.720936519105334e12,4.721267655509838e12,4.72159888484031e12,4.721929974928818e12,4.722261390182991e12,4.72259289850013e12,4.722924267516753e12,4.723255962031786e12,4.723587749747074e12,4.723919398103294e12,4.724251372291247e12,4.724583439817033e12,4.72491560072659e12,4.725247622199001e12,4.725579969948507e12,4.725912411219746e12,4.726244712995289e12,4.7265773413826045e12,4.72691006342991e12,4.72724264592297e12,4.72757555536306e12,4.72790855860169e12,4.728241422227526e12,4.728574613136235e12,4.728907897982328e12,4.729241043157076e12,4.729574515951128e12,4.729908082821698e12,4.730241509962378e12,4.730575265059376e12,4.730909114372323e12,4.731242823896836e12,4.7315768617152705e12,4.73191099388938e12,4.732244986216512e12,4.732579307175758e12,4.732913722630702e12,4.733247998180127e12,4.733582602700451e12,4.733917301856792e12,4.734251861049074e12,4.734586749551633e12,4.734921732830825e12,4.735256810933602e12,4.735591748994268e12,4.735927016818661e12,4.736262379607655e12,4.736597602296005e12,4.736933155088848e12,4.737268802987605e12,4.737604310727189e12,4.737940148912628e12,4.738276082345598e12,4.738611875560867e12,4.738947999563951e12,4.739284218956484e12,4.739620298072793e12,4.739956708319478e12,4.74029321409783e12,4.740629579541439e12,4.740966276458587e12,4.741303069049925e12,4.741639721248003e12,4.741976705263385e12,4.742313785095784e12,4.742650724476411e12,4.742987996018712e12,4.743325363521161e12,4.743662590513331e12,4.74400015001215e12,4.744337805614555e12,4.744675320648177e12,4.745013168534031e12,4.745351112667215e12,4.745688916173116e12,4.746027052877443e12,4.74636528597315e12,4.746703615508335e12,4.747041804338241e12,4.747380326829141e12,4.747718945903979e12,4.748057424215051e12,4.748396236534735e12,4.748735145583131e12,4.749073913809277e12,4.7494130163922705e12,4.749752215849056e12,4.750091274425114e12,4.75043066770687e12,4.750770158007811e12,4.751109507369554e12,4.75144919178646e12,4.751788973368255e12,4.752128613952387e12,4.752468589941768e12,4.752808663242054e12,4.75314859548622e12,4.753488863486338e12,4.753829228943693e12,4.754169453286475e12,4.754510013736535e12,4.7548506717904795e12,4.755191188671402e12,4.755532042011556e12,4.755872993102554e12,4.756213802962089e12,4.756554949633431e12,4.756896194202895e12,4.757237536719655e12,4.75757873792704e12,4.757920276417333e12,4.758261913002622e12,4.758603408220113e12,4.758945241074552e12,4.759287172172006e12,4.759628961843245e12,4.759971089506101e12,4.76031331556031e12,4.760655400129896e12,4.7609978230464e12,4.761340344502916e12,4.761682724416408e12,4.762025443032752e12,4.762368260338088e12,4.762710936042007e12,4.763053950805346e12,4.763397064406979e12,4.763740036348811e12,4.764083347707268e12,4.764426758053642e12,4.764770026681841e12,4.765113635084507e12,4.765457342625039e12,4.76580090838903e12,4.766144814285969e12,4.766488819471047e12,4.766832682821226e12,4.767176886663477e12,4.767521189944465e12,4.767865351332205e12,4.768209853571784e12,4.768554455401024e12,4.76889915687032e12,4.769243716368582e12,4.769588617199398e12,4.769933617821633e12,4.770278476414506e12,4.770623676701207e12,4.770968976931016e12,4.771314135073148e12,4.771659635271028e12,4.772005235564035e12,4.772350693711062e12,4.772696494276403e12,4.773042395089224e12,4.77338815369777e12,4.773734255087851e12,4.774080456878092e12,4.774426516405774e12,4.774772919078865e12,4.775119422305133e12,4.775465783210566e12,4.775812487625938e12,4.776159292747833e12,4.776505955490634e12,4.776852962108556e12,4.777200069586683e12,4.777547034627466e12,4.777894343909212e12,4.778241754205182e12,4.778589022005568e12,4.77893663441342e12,4.779284347989846e12,4.779632162786389e12,4.779979835009711e12,4.780327852330224e12,4.780675971025654e12,4.781023947089655e12,4.781372268618894e12,4.781720691678191e12,4.782068972047863e12,4.782417598251482e12,4.782766326140644e12,4.783114911281993e12,4.783463842626669e12,4.783812875812709e12,4.784161766192765e12,4.784511003146195e12,4.784860342097151e12,4.785209538183966e12,4.785559081214871e12,4.785908726399808e12,4.786258228662458e12,4.786608078240587e12,4.786958030129597e12,4.787307839038189e12,4.787657995634324e12,4.788008254698531e12,4.788358370724204e12,4.788708834810156e12,4.78905940152172e12,4.789409825136646e12,4.789760597185266e12,4.790111472017382e12,4.790462203694772e12,4.790813284179949e12,4.7911644676068545e12,4.791515754028319e12,4.791866897217627e12,4.7922183897146e12,4.79256998536483e12,4.792921437724851e12,4.793273239768219e12,4.79362514512389e12,4.793976907131313e12,4.794329019198454e12,4.794681234737292e12,4.795033306869861e12,4.795385729439201e12,4.795738255639986e12,4.796090638376498e12,4.7964433719275205e12,4.796796209270089e12,4.797148903090395e12,4.797501948103642e12,4.797855097068891e12,4.798208102453901e12,4.798561459410978e12,4.798914920480863e12,4.799268237912557e12,4.79962190729613e12,4.799975680953677e12,4.800329310915092e12,4.800683293208898e12,4.801037379938198e12,4.801391322913445e12,4.80174561860229e12,4.802100018888508e12,4.80245427536277e12,4.802808884932534e12,4.803163599261908e12,4.803518418405063e12,4.803873093659081e12,4.80422812251893e12,4.804583256355275e12,4.804938246244621e12,4.80529359012334e12,4.805649039141635e12,4.806004344155087e12,4.806360003542159e12,4.806715768232248e12,4.807071388859669e12,4.807427364245663e12,4.807783445098478e12,4.808139381830819e12,4.8084956737073955e12,4.808852071214958e12,4.809208324544264e12,4.809564933404174e12,4.809921648059606e12,4.810278218479014e12,4.810635144816108e12,4.810992177113624e12,4.811349065117369e12,4.811706309426599e12,4.812063659861516e12,4.812420865944936e12,4.812778428722353e12,4.813136097791092e12,4.813493622450629e12,4.813851504193392e12,4.81420949239348e12,4.814567587106328e12,4.8149255373330625e12,4.815283845163142e12,4.815642259672479e12,4.816000529638046e12,4.816359157597867e12,4.816717892403818e12,4.817076482608365e12,4.8174354311988e12,4.817794486802607e12,4.818153397747399e12,4.818512667470437e12,4.818872044374466e12,4.819231276561889e12,4.819590867920643e12,4.819950566628382e12,4.820310120561947e12,4.820670034060658e12,4.821030055076725e12,4.821389931261072e12,4.82175016740511e12,4.822110511235253e12,4.822470710176153e12,4.822831269472022e12,4.823191936623123e12,4.823552458827481e12,4.823913341782823e12,4.824274332762901e12,4.824635178738764e12,4.824996385862357e12,4.825357701180574e12,4.825718871437125e12,4.826080403238895e12,4.826442043405558e12,4.826803791993967e12,4.827165395444143e12,4.827527360970703e12,4.827889435089792e12,4.828251364013252e12,4.828613655412316e12,4.828976055575074e12,4.829338310484833e12,4.82970092827016e12,4.8300636549907295e12,4.830426236400958e12,4.830789181087465e12,4.831152234881151e12,4.831515143307179e12,4.831878415410943e12,4.832241796794214e12,4.832605032752532e12,4.832968632790799e12,4.833332342281283e12,4.833695906289552e12,4.8340598347807295e12,4.834423872897231e12,4.834787765474277e12,4.835152022937951e12,4.835516390200443e12,4.835880611866268e12,4.836245198823193e12,4.836609895752826e12,4.836974447028607e12,4.837339364000723e12,4.837704391119826e12,4.838069528444114e12,4.838434520038343e12,4.83879987787043e12,4.839165346082511e12,4.839530668507412e12,4.839896357577183e12,4.84026215720215e12,4.840627810982849e12,4.840993831816191e12,4.841359963380335e12,4.8417259490431455e12,4.842092302167145e12,4.842458766197945e12,4.842825084270379e12,4.843191770213314e12,4.843558567239451e12,4.843925218250218e12,4.844292237541569e12,4.844659368092927e12,4.8450263525719375e12,4.845393705742391e12,4.845761170350054e12,4.846128488828427e12,4.846496176409874e12,4.846863975606139e12,4.8472316286162e12,4.847599651141746e12,4.847967785460122e12,4.848335773535412e12,4.848704131539374e12,4.849072601514586e12,4.849440925189859e12,4.849809619207777e12,4.85017842537577e12,4.850547343753551e12,4.850916115755634e12,4.851285258653574e12,4.851654513940674e12,4.852023622795299e12,4.852393102961582e12,4.852762695696805e12,4.853132141942806e12,4.853501959917058e12,4.85387189064044e12,4.854241674817889e12,4.854611831140969e12,4.854982100393782e12,4.855352223043983e12,4.855722718257988e12,4.856093326582745e12,4.856463788248241e12,4.856834622896512e12,4.857205570836965e12,4.857576372061546e12,4.857947546688666e12,4.858318834789816e12,4.858689976118516e12,4.859061491270317e12,4.859433120078417e12,4.85980460205752e12,4.860176458281092e12,4.860548428343645e12,4.86092025152069e12,4.861292449364375e12,4.861664761230144e12,4.862037187179139e12,4.862409466167331e12,4.86278212038634e12,4.863154888872239e12,4.86352751034091e12,4.863900507464448e12,4.864273619038966e12,4.864646583539862e12,4.865019924120489e12,4.865393379336606e12,4.865766687422749e12,4.866140372014293e12,4.866514171426268e12,4.866887823651948e12,4.867261852809521e12,4.867635996972886e12,4.868009993893678e12,4.868384368173667e12,4.868758857645239e12,4.869133199817996e12,4.869507919778073e12,4.869882755115955e12,4.870257443098816e12,4.870632509297943e12,4.871007691061526e12,4.871382725413921e12,4.871758138412352e12,4.87213366716232e12,4.872509048444975e12,4.872884808804257e12,4.873260685102594e12,4.873636413877526e12,4.874012522160512e12,4.8743887465705e12,4.874765087170253e12,4.875141280171874e12,4.875517853258103e12,4.875894542722626e12,4.876271084533021e12,4.876648006861387e12,4.877025045757017e12,4.8774019369425625e12,4.877779209080275e12,4.87815659797466e12,4.878533839103046e12,4.878911461618634e12,4.87928920108074e12,4.879666792720974e12,4.880044766184286e12,4.880422856784404e12,4.880800799506818e12,4.881179124489026e12,4.881557566798772e12,4.881935861175023e12,4.882314538248632e12,4.882693332840951e12,4.883071979444028e12,4.88345100918287e12,4.883830156632043e12,4.8842091560362705e12,4.884588539015519e12,4.884968039897164e12,4.885347392678203e12,4.885727129474369e12,4.886106984365449e12,4.886486957415728e12,4.886866782291249e12,4.887246991770069e12,4.887627319601204e12,4.888007499202021e12,4.888388063848241e12,4.888768747040341e12,4.88914928194661e12,4.889530202341242e12,4.889911241475772e12,4.890292132269002e12,4.890673408994418e12,4.891054804654204e12,4.891436051917266e12,4.891817685557201e12,4.892199438326432e12,4.892581042643562e12,4.892963033783116e12,4.893345144247351e12,4.893727106204154e12,4.894109455429801e12,4.894491924175971e12,4.894874244359422e12,4.895256952259011e12,4.895639779875422e12,4.896022458873879e12,4.896405526036635e12,4.896788713112978e12,4.897171751516176e12,4.897555178532711e12,4.897938725660058e12,4.898322124059119e12,4.898705911521434e12,4.899089819292248e12,4.899473847437577e12,4.89985772678117e12,4.900241995789309e12,4.900626385370271e12,4.901010626094471e12,4.901395256935189e12,4.901780008547508e12,4.902164611248084e12,4.90254960451804e12,4.90293471875884e12,4.90331968403297e12,4.903705040330225e12,4.904090517798039e12,4.904475846244308e12,4.904861566168338e12,4.905247407463113e12,4.905633099681515e12,4.90601918383321e12,4.906405389556308e12,4.906791446148258e12,4.907177895129927e12,4.907564465884132e12,4.907950887452466e12,4.908337701867841e12,4.908724638257361e12,4.909111425406339e12,4.909498605860583e12,4.909885908491058e12,4.910273061826371e12,4.910660608926077e12,4.911048278404579e12,4.91143607032952e12,4.911823712886554e12,4.912211749821593e12,4.912599909406276e12,4.912987919568561e12,4.913376324570092e12,4.913764852424955e12,4.914153230802979e12,4.914542004482404e12,4.914930901219331e12,4.915319648425035e12,4.915708791395208e12,4.916098057627539e12,4.916487174274317e12,4.916876687149548e12,4.917266323492078e12,4.917655810194783e12,4.918045693590841e12,4.91843570065983e12,4.918825558034776e12,4.919215812568899e12,4.919606190982072e12,4.919996419647043e12,4.9203870459379375e12,4.920777796314492e12,4.921168396888741e12,4.921559395556586e12,4.921950518517197e12,4.922341491621455e12,4.922732863287911e12,4.92312435945473e12,4.923515705711211e12,4.923907450999422e12,4.92429932099609e12,4.924691315770706e12,4.925083160563087e12,4.925475405014731e12,4.925867774453082e12,4.926259993855348e12,4.926652613388593e12,4.9270453581178e12,4.927437952757133e12,4.927830948000101e12,4.928224068648788e12,4.928617039153871e12,4.929010410736188e12,4.929403907934485e12,4.929797254935508e12,4.93019100348831e12,4.930584877867854e12,4.930978601996516e12,4.931372728152449e12,4.931766980346395e12,4.932161082235912e12,4.932555586629144e12,4.932950217272162e12,4.93334469755727e12,4.933739580823486e12,4.934134590551775e12,4.934529449868733e12,4.934924712645152e12,4.9353201020964375e12,4.935715341083034e12,4.936110984008402e12,4.936506753821943e12,4.936902373117504e12,4.937298396832105e12,4.937694547648701e12,4.938090825638696e12,4.938486953039749e12,4.93888348550174e12,4.939280145351639e12,4.939676654559453e12,4.94007356931073e12,4.940470611664938e12,4.940867503323987e12,4.941264801009992e12,4.941662226514473e12,4.942059501270784e12,4.942457182538518e12,4.942854991840791e12,4.943252650341952e12,4.943650715839978e12,4.94404890958913e12,4.944446952484293e12,4.944845402862742e12,4.945243981709428e12,4.945642409649316e12,4.946041245559893e12,4.946440210156341e12,4.946839023793252e12,4.947238245889236e12,4.947637596889255e12,4.948036796877066e12,4.948436405813323e12,4.948836143872306e12,4.9492357308664795e12,4.949635727299459e12,4.950035853074388e12,4.950436108264475e12,4.950836212319722e12,4.951236726469171e12,4.951637370253712e12,4.952037862850976e12,4.952438766035122e12,4.952839799074825e12,4.953240680874886e12,4.953641973755508e12,4.954043396712689e12,4.954444668377936e12,4.954846351618423e12,4.95524816515701e12,4.955649827351438e12,4.956051901616795e12,4.956454106402329e12,4.956856159791558e12,4.957258625748406e12,4.957661222448053e12,4.958063667699317e12,4.958466526015906e12,4.958869515298455e12,4.959272353080622e12,4.959675604426826e12,4.960078986962701e12,4.960482217946267e12,4.960885862993601e12,4.961289639454857e12,4.961693264311957e12,4.962097303733572e12,4.962501474793915e12,4.962905494198323e12,4.96330992866902e12,4.963714495003795e12,4.964119193277904e12,4.964523739827163e12,4.964928702113371e12,4.965333796565001e12,4.965738739240185e12,4.966144098156483e12,4.966549589464847e12,4.966954928945246e12,4.967360685171956e12,4.967766574017929e12,4.968172310984498e12,4.96857846520361e12,4.968984752269739e12,4.9693908874051045e12,4.969797440300281e12,4.970204126270788e12,4.970610660259252e12,4.971017612515834e12,4.971424698076622e12,4.971831631604166e12,4.972238983909181e12,4.972646469747839e12,4.973053803502134e12,4.973461556544297e12,4.9738694433501045e12,4.974277178020513e12,4.974685332490234e12,4.97509362095417e12,4.97550175723175e12,4.975910313821143e12,4.976319004635885e12,4.976727829753166e12,4.977136502616279e12,4.977545596476215e12,4.977954824870589e12,4.978363900960031e12,4.978773398561263e12,4.9791830309294e12,4.979592510941931e12,4.980002412982276e12,4.980412450022572e12,4.980822334656669e12,4.981232641835672e12,4.981643084248245e12,4.982053374204113e12,4.982464087223048e12,4.98287493570975e12,4.983285631689327e12,4.983696751251202e12,4.984108006515622e12,4.984519109222584e12,4.984930636032147e12,4.985342298779618e12,4.985753808919382e12,4.986165743683133e12,4.986577814620731e12,4.986989732900468e12,4.987402076326653e12,4.987814556163215e12,4.988226883291845e12,4.988639636090472e12,4.989052525536591e12,4.989465262224798e12,4.989878425107636e12,4.990291724875672e12,4.990705161608291e12,4.991118445516494e12,4.991532156320576e12,4.991946004327736e12,4.992359699460711e12,4.992773822016748e12,4.993188082014948e12,4.993602189089287e12,4.994016724114968e12,4.994431396822496e12,4.994845916556578e12,4.99526086477138e12,4.995675950908311e12,4.996090884022304e12,4.996506246147501e12,4.996921746435705e12,4.997337093651575e12,4.997752870410239e12,4.998168785573393e12,4.998584547614907e12,4.999000739731917e12,4.999417070495501e12,4.999833248088237e12,5.000249856290283e12,5.000666603381593e12,5.001083197252941e12,5.00150022226853e12,5.001917386416681e12,5.0023343972958545e12,5.002751839855317e12,5.003169421791249e12,5.003587143185108e12,5.004004711244782e12,5.004422711701269e12,5.004840851860403e12,5.005258838636564e12,5.005677258348213e12,5.006095818007848e12,5.006514224235818e12,5.006933063939082e12,5.007352043836285e12,5.007770870253232e12,5.008190130686414e12,5.008609531560105e12,5.009028778905051e12,5.00944846080831e12,5.009868283399267e12,5.010287952413089e12,5.010708056528441e12,5.011128301579307e12,5.011548393004748e12,5.011968920076083e12,5.012389588331366e12,5.012810102913041e12,5.013231053686119e12,5.013652145892208e12,5.0140730843766045e12,5.014494459599066e12,5.0149159765042295e12,5.015337339639722e12,5.015759140061093e12,5.016181082415487e12,5.016602870952336e12,5.017025097324036e12,5.017447465879713e12,5.017869976703177e12,5.018292333645423e12,5.018715129156333e12,5.019138067186829e12,5.019560851288481e12,5.019984074510484e12,5.020407440504511e12,5.020830652522171e12,5.021254304213038e12,5.021678098929005e12,5.022101739621193e12,5.022525820540615e12,5.022950044738854e12,5.023374114866011e12,5.0237986257756045e12,5.024223280218375e12,5.02464778054287e12,5.025072722206185e12,5.025497807657683e12,5.025922738943819e12,5.026348112126342e12,5.026773629352701e12,5.027198992366726e12,5.027624797835888e12,5.02805074760519e12,5.028476543115297e12,5.028902781640481e12,5.029329164722764e12,5.029755393499099e12,5.030182065851646e12,5.030608883018903e12,5.031035845086901e12,5.031462652786793e12,5.031889904812983e12,5.032317301998403e12,5.03274454476923e12,5.033172232430291e12,5.033600065509725e12,5.034027744128197e12,5.034455868202041e12,5.034884137954064e12,5.035312253198873e12,5.0357408144654e12,5.036169521670576e12,5.036598074322401e12,5.037027073563503e12,5.03745621900439e12,5.037885209845906e12,5.038314647845475e12,5.038744232306632e12,5.039173662122518e12,5.039603539666449e12,5.040033563934444e12,5.040463433511387e12,5.040893751387593e12,5.041324216251008e12,5.041754526377708e12,5.042185285376116e12,5.042616191625556e12,5.043046943092739e12,5.043478144005305e12,5.0439094924334e12,5.044340686033819e12,5.044772329654531e12,5.04520412105595e12,5.045636060326639e12,5.046067844709279e12,5.0465000798807295e12,5.046932463187537e12,5.047364691561163e12,5.047797371301402e12,5.0482301994437705e12,5.048662872607948e12,5.04909599771779e12,5.049529271497218e12,5.049962390253572e12,5.050395961535891e12,5.050829681755943e12,5.051263246908165e12,5.051697265167905e12,5.052131432634218e12,5.052565444988069e12,5.052999911032252e12,5.05343452655254e12,5.053868986915864e12,5.054303901553593e12,5.054738965937653e12,5.055173875120379e12,5.055609239162847e12,5.056044753222576e12,5.056480112036724e12,5.056915926297223e12,5.05735189084661e12,5.057787700106303e12,5.058223965400229e12,5.058660381255373e12,5.059096947762691e12,5.059533358921698e12,5.0599702269008125e12,5.060407245805374e12,5.060844109317815e12,5.061281430241232e12,5.061718902364075e12,5.062156219051129e12,5.062593993741309e12,5.063031919905607e12,5.063469690590576e12,5.063907919872116e12,5.06434630090318e12,5.064784526411511e12,5.065223211111147e12,5.065662047836431e12,5.066100728995714e12,5.066539869942336e12,5.066979163191445e12,5.067418300831423e12,5.067857898856076e12,5.068297649460775e12,5.068737244413353e12,5.069177300349245e12,5.069617509143468e12,5.070057562242714e12,5.070498076925228e12,5.07093874474508e12,5.071379256827241e12,5.071820231093935e12,5.072261358777703e12,5.072702330681209e12,5.073143765371827e12,5.073585353759988e12,5.074027095939368e12,5.074468682281938e12,5.074910732217166e12,5.075352936225057e12,5.075794984353897e12,5.076237496681066e12,5.076680163363081e12,5.077122674123947e12,5.077565649690145e12,5.078008779894108e12,5.078451754134974e12,5.078895193789504e12,5.079338788365465e12,5.07978222693652e12,5.080226131530917e12,5.08067019133115e12,5.081114095084818e12,5.081558465472847e12,5.082002991351865e12,5.082447361142807e12,5.082892198180475e12,5.083337190995034e12,5.083782027680152e12,5.084227332225716e12,5.084672792834824e12,5.085118097273277e12,5.08556387018725e12,5.086009799452175e12,5.086455572505381e12,5.086901814650539e12,5.087348213434813e12,5.08779445596646e12,5.088241168207854e12,5.088688037377288e12,5.089135063571263e12,5.089581933458294e12,5.0900292738809795e12,5.0904767716181455e12,5.090924113007814e12,5.091371925554134e12,5.091819895705639e12,5.092267709469249e12,5.092715995011882e12,5.093164438451175e12,5.09361272546233e12,5.094061484876264e12,5.094510402479101e12,5.094959163613716e12,5.095408397776251e12,5.095857790420708e12,5.096307026557015e12,5.096756736347774e12,5.09720660491425e12,5.097656316932807e12,5.098106503233744e12,5.09855684860497e12,5.099007037388668e12,5.099457701084074e12,5.099908524145123e12,5.100359190579197e12,5.100810332555711e12,5.101261634194004e12,5.101712779166037e12,5.102164400312648e12,5.102616181417964e12,5.103068122581156e12,5.103519907025963e12,5.103972168490444e12,5.104424590310782e12,5.10487685537383e12,5.105329598091995e12,5.105782501464787e12,5.106235248041553e12,5.106688472910301e12,5.107141858733242e12,5.107595087721587e12,5.108048795640205e12,5.108502664813382e12,5.1089563771135625e12,5.109410568983737e12,5.109864922409638e12,5.11031911892431e12,5.110773795650134e12,5.111228634233655e12,5.111683315867886e12,5.112138478355867e12,5.112593803004324e12,5.113048970665599e12,5.113504619824668e12,5.113960431447801e12,5.114416086046033e12,5.114872222787554e12,5.115328522297537e12,5.115784664745074e12,5.116241289982848e12,5.1166980782943e12,5.117154709505936e12,5.117611824156213e12,5.118069102186203e12,5.118526543698123e12,5.118983828060671e12,5.119441596728728e12,5.119899529185845e12,5.12035730445663e12,5.120815564684751e12,5.121273989009887e12,5.121732256111911e12,5.122191008824572e12,5.12264992594303e12,5.123108685801774e12,5.123567931925937e12,5.124027342765508e12,5.124486596308945e12,5.124946336774062e12,5.125406242265034e12,5.125865990423635e12,5.126326226161664e12,5.126786627236834e12,5.127246870943576e12,5.127707602888989e12,5.128168500483665e12,5.128629240674043e12,5.129090469763831e12,5.129551864815847e12,5.130013102427878e12,5.130474829601562e12,5.130936723051284e12,5.131398459025521e12,5.13186068522516e12,5.132323078015497e12,5.132785637501631e12,5.133248039465236e12,5.1337109325416455e12,5.1341739926296455e12,5.134636895160058e12,5.135100289470556e12,5.135563851109297e12,5.136027255155579e12,5.136491151650753e12,5.136955215791678e12,5.137419122305467e12,5.137883521938479e12,5.138348089535612e12,5.138812499471126e12,5.139277403197728e12,5.139742475207684e12,5.14020738952173e12,5.140672798300267e12,5.14113837568226e12,5.141603795334248e12,5.142069710125669e12,5.1425357938415205e12,5.143001719793468e12,5.14346814156134e12,5.143934732575486e12,5.144401165792029e12,5.144868095502539e12,5.145335194782048e12,5.14580213623045e12,5.146269574852419e12,5.146737183366988e12,5.147204634017151e12,5.147672582522043e12,5.14814070124402e12,5.148608990291467e12,5.149077121430418e12,5.149545751334802e12,5.150014551890324e12,5.150483194504521e12,5.150952336568978e12,5.151421649611129e12,5.151890804679332e12,5.152360459884196e12,5.152830286394209e12,5.1532999548978545e12,5.153770124226147e12,5.1542404651879375e12,5.154710648111149e12,5.155181332548586e12,5.155652188948766e12,5.156122887278366e12,5.156594087813359e12,5.157065460641246e12,5.157536675366763e12,5.158008392990439e12,5.158480283238067e12,5.158952015351744e12,5.159424251057952e12,5.159896659720077e12,5.160368910216883e12,5.160841665002202e12,5.161314593076317e12,5.161787362953959e12,5.162260637817707e12,5.162734086304049e12,5.163207708524479e12,5.163681172507226e12,5.164155142408782e12,5.164629286379449e12,5.165103272081784e12,5.16557776440431e12,5.166052431131891e12,5.166526939560707e12,5.1670019553127295e12,5.16747714580668e12,5.167952177971652e12,5.168427718164482e12,5.168903433437043e12,5.169378990350635e12,5.169855055998376e12,5.170331297064585e12,5.170807379742057e12,5.171283971861617e12,5.171760739739319e12,5.17223734919874e12,5.172714468809843e12,5.173191764519702e12,5.173668901781959e12,5.17414654990715e12,5.174624374472654e12,5.175102040561466e12,5.175580218226125e12,5.176058572673602e12,5.1765367686155205e12,5.177015476847873e12,5.177494362206497e12,5.17797308903093e12,5.178452328862053e12,5.178931746163859e12,5.179411341051391e12,5.179890777366907e12,5.180370727646795e12,5.180850855858097e12,5.181330825469288e12,5.181811309765039e12,5.182291972338852e12,5.182772476284694e12,5.183253495636977e12,5.183734693614936e12,5.184215732937302e12,5.184697288389685e12,5.185179022816327e12,5.18566059855999e12,5.186142691158952e12,5.18662496308173e12,5.187107076294381e12,5.187589707089321e12,5.188072517558611e12,5.188555169290865e12,5.189038339334114e12,5.189521689403226e12,5.190004880708636e12,5.190488591055467e12,5.190972481780656e12,5.19145621371572e12,5.191940465424358e12,5.192424897864837e12,5.192909171489013e12,5.193393965620647e12,5.193878940838594e12,5.194364097261259e12,5.1948490948331e12,5.195334613893671e12,5.195820314514761e12,5.196305856259424e12,5.196791920230768e12,5.197278166119425e12,5.197764253106307e12,5.198250863059565e12,5.198737655287939e12,5.199224288589437e12,5.199711445598767e12,5.20019878524202e12,5.200685965933548e12,5.201173671076126e12,5.201661559212443e12,5.202149288372443e12,5.20263754272848e12,5.203125980439085e12,5.203614259149037e12,5.204103063801784e12,5.204592052170947e12,5.205080881515379e12,5.2055702375511455e12,5.206059777666197e12,5.206549158732696e12,5.207039067240856e12,5.207529160192193e12,5.208019094071421e12,5.208509556144425e12,5.209000203025529e12,5.209490690811226e12,5.209981707544616e12,5.210472909452059e12,5.210964296655797e12,5.211455524733476e12,5.211947282766934e12,5.212439226464023e12,5.212931011012376e12,5.21342332627464e12,5.213915827568914e12,5.21440816969204e12,5.214901043289028e12,5.215394103287449e12,5.215887004092581e12,5.21638043713335e12,5.216874056946022e12,5.217367517543537e12,5.217861511140293e12,5.218355691880476e12,5.218849713383905e12,5.219344268652015e12,5.219839011436133e12,5.220333594962175e12,5.220828713020179e12,5.221324018967833e12,5.221819165636365e12,5.22231484760599e12,5.222810717839972e12,5.2233064287740625e12,5.2238026757802295e12,5.224299111426526e12,5.224795387752446e12,5.225292200923286e12,5.2257892031111045e12,5.226286394441783e12,5.226783426425201e12,5.227280996286967e12,5.227778755669876e12,5.228276355685696e12,5.228774494357073e12,5.229272822928959e12,5.229770992114211e12,5.230269700734112e12,5.230768599634973e12,5.231267339129942e12,5.231766618840541e12,5.232266089213639e12,5.232765400161878e12,5.233265252108619e12,5.233765295100492e12,5.234265178648831e12,5.234765603980445e12,5.235266220740926e12,5.235766678039484e12,5.236267677908e12,5.236768869590215e12,5.237269901792418e12,5.237771477353172e12,5.238273245113564e12,5.238774853376151e12,5.239277005787802e12,5.239779350786143e12,5.240281536269179e12,5.240784266693721e12,5.241287190093117e12,5.241789953960011e12,5.242293263562783e12,5.242796766529692e12,5.243300462990781e12,5.243803999896905e12,5.24430808360115e12,5.244812361190357e12,5.245316479208107e12,5.245821144822887e12,5.246326004714537e12,5.246830705018546e12,5.247335953720446e12,5.247841397092259e12,5.248346680860554e12,5.2488525138295625e12,5.249358541862665e12,5.24986441027668e12,5.2503708286962e12,5.250877442575136e12,5.251383896819726e12,5.251890901876589e12,5.252398102789331e12,5.252905144052785e12,5.253412736937259e12,5.2539205260752295e12,5.254428155549282e12,5.254936337455091e12,5.255444716013166e12,5.255952934893013e12,5.256461707017344e12,5.256970676193872e12,5.257479485678177e12,5.2579888492217e12,5.258498410218511e12,5.259007811509429e12,5.259517767676303e12,5.260027921698726e12,5.260538273711072e12,5.261048465999797e12,5.261559214256668e12,5.262070160907286e12,5.262580947821367e12,5.263092291525048e12,5.263603834027477e12,5.264115216780779e12,5.264627157147167e12,5.265139296718485e12,5.26565127652842e12,5.266163814776963e12,5.266676552637805e12,5.267189130725336e12,5.267702268079046e12,5.268215605453614e12,5.268728783043278e12,5.269242520728742e12,5.26975645884482e12,5.270270237164737e12,5.270784576412134e12,5.271299116501102e12,5.271813496782987e12,5.272328438826101e12,5.272843582122945e12,5.273358565602128e12,5.273874111678359e12,5.274389859421692e12,5.274905447337124e12,5.275421598687506e12,5.275937952119574e12,5.276454507771826e12,5.27697090358306e12,5.277487863949761e12,5.278005026952855e12,5.278522030105498e12,5.279039598656395e12,5.279557370261119e12,5.280074982006307e12,5.28059315999464e12,5.281111541455465e12,5.281629763048019e12,5.28214855173072e12,5.2826675443058125e12,5.283186377004252e12,5.283705777641961e12,5.2842253825932e12,5.284744827659759e12,5.285264841516837e12,5.285785060109827e12,5.286305118810467e12,5.28682574715501e12,5.287346580659094e12,5.287867254263519e12,5.288388498367371e12,5.288909948055648e12,5.289431237837316e12,5.289953098976088e12,5.290475166125426e12,5.29099707336157e12,5.291519552814647e12,5.292042238705696e12,5.292564764677332e12,5.293087863727896e12,5.293611169645105e12,5.294134682572163e12,5.294658035572089e12,5.295181962803718e12,5.295706097475566e12,5.296230072214927e12,5.296754622053063e12,5.297279379763071e12,5.297803977535606e12,5.298329151276182e12,5.2988545333215625e12,5.299379755424862e12,5.299905554367664e12,5.300431562049494e12,5.300957409785014e12,5.3014838352337e12,5.302010469856933e12,5.302536944530006e12,5.303063997792122e12,5.303591260665603e12,5.304118363585455e12,5.304646045972451e12,5.305173938408932e12,5.3057016708887e12,5.306229983715939e12,5.306758507032094e12,5.307286870388841e12,5.307815814975621e12,5.308344970492061e12,5.308873966046787e12,5.309403543716352e12,5.309933332757642e12,5.310463333318341e12,5.31099317391486e12,5.311523597809534e12,5.312054233667448e12,5.312584709559793e12,5.313115769640364e12,5.313647042129342e12,5.314178154651757e12,5.314709852254742e12,5.315241762712634e12,5.315773513203372e12,5.3163058496693e12,5.316838399437978e12,5.317370789239312e12,5.317903765912744e12,5.318436956338116e12,5.318969986796358e12,5.319503605025901e12,5.320037437457926e12,5.320571109923443e12,5.321105371061764e12,5.321639846854468e12,5.322174162681694e12,5.322709068085541e12,5.323244188597034e12,5.323779149144492e12,5.324314700174705e12,5.324850466767196e12,5.325386073397509e12,5.325922271419038e12,5.326458685458852e12,5.326994939538761e12,5.327531785920683e12,5.328068848778273e12,5.32860612826434e12,5.329143247794187e12,5.329680960844161e12,5.330218890981844e12,5.330756661166562e12,5.331295025787686e12,5.331833607957143e12,5.332372030177316e12,5.33291104775254e12,5.333450283338119e12,5.333989358978523e12,5.334529030894991e12,5.33506892128524e12,5.335608651734854e12,5.336148979383924e12,5.336689525971611e12,5.337229912623636e12,5.337770897400899e12,5.338312101583028e12,5.338853145834902e12,5.339394789140196e12,5.339936652318023e12,5.34047835557144e12,5.341020658808865e12,5.341563182387917e12,5.342105546048845e12,5.34264851062678e12,5.343191696016869e12,5.3437347214955625e12,5.34427834882669e12,5.34482219744193e12,5.345366267498959e12,5.345910177654264e12,5.346454690913092e12,5.346999426087597e12,5.34754400136815e12,5.348089180693341e12,5.348634582409543e12,5.349179824240023e12,5.349725671058705e12,5.35027174074519e12,5.350817650554636e12,5.351364166298311e12,5.351910905388041e12,5.352457484609874e12,5.353004670714432e12,5.353552080644768e12,5.354099330716805e12,5.354647188622544e12,5.355195270835255e12,5.355743193199733e12,5.356291724351377e12,5.356840480292667e12,5.357389076396254e12,5.357938282242968e12,5.358487713363485e12,5.359036984657301e12,5.359586866652711e12,5.360136974407574e12,5.360686922347207e12,5.361237481949416e12,5.361788267798228e12,5.362338893843754e12,5.362890132515362e12,5.363441597922224e12,5.363993290227592e12,5.364544822746347e12,5.365096969179882e12,5.365649343002586e12,5.366201557051743e12,5.366754385985113e12,5.367307442799834e12,5.367860339854556e12,5.368413852765479e12,5.368967594051457e12,5.369521175591474e12,5.370075373962243e12,5.370629801203302e12,5.371184068712924e12,5.371738954030427e12,5.372294068714988e12,5.372849023683132e12,5.373404597438868e12,5.373960401059973e12,5.374516044980175e12,5.375072308670271e12,5.375628802725597e12,5.376185137096032e12,5.37674209222127e12,5.377299278213146e12,5.377856304536652e12,5.378413952602475e12,5.378971832037912e12,5.379529551821997e12,5.38008789433854e12,5.380646468729236e12,5.381205275162656e12,5.381763921968212e12,5.38232319283058e12,5.382882696242312e12,5.383442040044391e12,5.384002008899576e12,5.384562210812344e12,5.385122253134187e12,5.385682921508082e12,5.38624382344937e12,5.386804565818978e12,5.387365935242247e12,5.387927538744314e12,5.388488982694466e12,5.389051054702563e12,5.389613361302464e12,5.390175508370739e12,5.390738284503926e12,5.39130129574353e12,5.391864147472326e12,5.392427629275695e12,5.392991346701707e12,5.39355490463826e12,5.394119093661747e12,5.394683518825728e12,5.39524778452213e12,5.395812682320544e12,5.396377816778925e12,5.39694279179215e12,5.397508399925185e12,5.398074245239295e12,5.398639931131211e12,5.399206251163467e12,5.399772808899551e12,5.400339604514118e12,5.400906240737952e12,5.401473512467185e12,5.402041022599851e12,5.402608373366018e12,5.403176360664533e12,5.403744586893087e12,5.404312653779926e12,5.404881358228831e12,5.405450302136042e12,5.406019086726881e12,5.406588509912278e12,5.40715817308592e12,5.407727676969086e12,5.408297820482096e12,5.408868204514965e12,5.409438429283817e12,5.410009294720594e12,5.410580401210528e12,5.411151348463473e12,5.411722937425229e12,5.412294767975136e12,5.412866439315642e12,5.413438753408671e12,5.414011309626536e12,5.414583706663168e12,5.415156747498858e12,5.415730030997779e12,5.416303155344205e12,5.416876924539069e12,5.41745093693727e12,5.418025192719263e12,5.418599289387983e12,5.419174032308833e12,5.419749019155876e12,5.420323846919738e12,5.420899321991781e12,5.421475041534143e12,5.422050602024005e12,5.422626810880973e12,5.423203264754121e12,5.423779559606042e12,5.424356503886881e12,5.424933693731507e12,5.425510724586769e12,5.426088405935658e12,5.426666333397691e12,5.427244101902821e12,5.4278225219692e12,5.428401188699834e12,5.428979696506628e12,5.429558856945209e12,5.430138264600923e12,5.430717513366465e12,5.431297415837265e12,5.431877566079846e12,5.43245755746653e12,5.433038203634886e12,5.433619098131451e12,5.434199833807008e12,5.4347812253436e12,5.435362865766619e12,5.43594434740413e12,5.436526485985007e12,5.437108874012321e12,5.437691511673188e12,5.438273990596851e12,5.4388571279117e12,5.439440515422516e12,5.44002374423308e12,5.440607632524124e12,5.44119177157536e12,5.441775751963926e12,5.442360392925264e12,5.442945285212841e12,5.443530018875958e12,5.444115414207156e12,5.444701061432466e12,5.445286550072165e12,5.445872701478275e12,5.446459105348206e12,5.447045350672014e12,5.447632259863602e12,5.44821942209056e12,5.448806425811523e12,5.4493940945046875e12,5.449982016806622e12,5.450569780643339e12,5.451158210559734e12,5.451746894660156e12,5.452335420336791e12,5.452924613203652e12,5.453514060831666e12,5.454103350077975e12,5.454693307628143e12,5.455283520518461e12,5.455873575069816e12,5.45646429904176e12,5.457055278934732e12,5.457646514942828e12,5.458237592669984e12,5.458829341311622e12,5.459421346651782e12,5.4600131937553e12,5.460605712897294e12,5.461198489323113e12,5.461791107557256e12,5.462384398957007e12,5.462977948227794e12,5.463571339352547e12,5.464165404773189e12,5.464759728653993e12,5.465353894435086e12,5.465948735645507e12,5.466543835907141e12,5.46713877811607e12,5.467734396890939e12,5.468330275310005e12,5.468925995724063e12,5.469522393843855e12,5.470119052202769e12,5.470715552605063e12,5.471312731856082e12,5.471910171943097e12,5.472507454122578e12,5.473105416296983e12,5.473703639906216e12,5.474301705657702e12,5.474900452553533e12,5.475499461484989e12,5.476098732652821e12,5.476697846030391e12,5.477297642089988e12,5.477897700989394e12,5.478497602149975e12,5.47909818714957e12,5.479699035594392e12,5.480299726352543e12,5.480901102109957e12,5.48150274192001e12,5.482104224096265e12,5.482706392435308e12,5.483308825436403e12,5.4839111008573e12,5.484514063607797e12,5.485117291631771e12,5.485720362129875e12,5.486324121127691e12,5.486928146012432e12,5.48753201342636e12,5.488136570513431e12,5.488741394102899e12,5.489346060277351e12,5.489951417301701e12,5.49055704144596e12,5.49116250823174e12,5.491768667047516e12,5.492375093602758e12,5.492981362856805e12,5.493588325324296e12,5.494195556152867e12,5.494802629738277e12,5.495410397723947e12,5.496018434694375e12,5.496626740857959e12,5.497234889856941e12,5.497843734843959e12,5.498452849650575e12,5.499061807352393e12,5.49967146223697e12,5.500281387569673e12,5.500891155858146e12,5.501501622527514e12,5.502112360275627e12,5.502722941040851e12,5.503334221388526e12,5.503945773447674e12,5.504557168586045e12,5.505169264511865e12,5.505781632783991e12,5.506393844198236e12,5.507006757608381e12,5.507619944001786e12,5.50823297360099e12,5.508846706408007e12,5.509460712837371e12,5.510074562537003e12,5.51068911665984e12,5.51130394504625e12,5.511918616768191e12,5.512533994132223e12,5.513149646403202e12,5.513765142075774e12,5.51438134461283e12,5.514997822702366e12,5.515614576560093e12,5.516231173908752e12,5.516848479757324e12,5.517466062022512e12,5.518083487846576e12,5.518701623401183e12,5.519320036023012e12,5.519938292272478e12,5.520557259486668e12,5.521176504420876e12,5.521795593052301e12,5.522415393886201e12,5.523035473095112e12,5.523655396071648e12,5.52427603249199e12,5.524896947944547e12,5.525517707235965e12,5.526139181216115e12,5.526760934887904e12,5.527382532470626e12,5.528004845990618e12,5.5286274398639e12,5.529249877721025e12,5.529873032767584e12,5.530496468831323e12,5.531119748952662e12,5.531743747519237e12,5.532368027769131e12,5.532992152151231e12,5.533616996238024e12,5.534242122676532e12,5.53486709332271e12,5.535492784936706e12,5.53611875957308e12,5.536745017455945e12,5.537371119648444e12,5.53799794449876e12,5.5386250532692705e12,5.539252006426896e12,5.539879683514082e12,5.540507645197457e12,5.541135451346302e12,5.541763982700167e12,5.54239279932852e12,5.543021460501572e12,5.543650848158843e12,5.544280521771209e12,5.544910040008392e12,5.545540286012734e12,5.546170818655104e12,5.546801196003296e12,5.547432302405355e12,5.548063696130703e12,5.548694934643776e12,5.5493269035012e12,5.54995916036952e12,5.550591262108363e12,5.551224095485839e12,5.55185721756417e12,5.55249018459673e12,5.553123884566012e12,5.553757873928472e12,5.554391708329779e12,5.555026276969722e12,5.555661135697539e12,5.55629628474538e12,5.556931278946326e12,5.557567009127872e12,5.558203030327322e12,5.558838896766641e12,5.559475500497459e12,5.560112395946461e12,5.560749136723025e12,5.561386616105869e12,5.562024387909583e12,5.56266200512949e12,5.563300362274347e12,5.563939012545183e12,5.564577508321785e12,5.565216745345914e12,5.565856276203563e12,5.566495652657497e12,5.567135771685464e12,5.567776185256933e12,5.568416444516157e12,5.56905744767986e12,5.5696987460995e12,5.570339890299326e12,5.570981779738033e12,5.571623965147578e12,5.572265996430705e12,5.572908774291088e12,5.573551848839683e12,5.574194769356226e12,5.57483843779239e12,5.575482403636629e12,5.576126215544158e12,5.576770776717681e12,5.577415636021637e12,5.578060793697426e12,5.578705797565164e12,5.579351552500424e12,5.579997606533227e12,5.580643506855621e12,5.581290159601321e12,5.581937112172795e12,5.582583911132501e12,5.583231463875359e12,5.583879317174758e12,5.584527016962031e12,5.585175471896382e12,5.585824228120586e12,5.586472830933317e12,5.587122190261144e12,5.587771851614699e12,5.588421359658446e12,5.589071625589421e12,5.589722194284567e12,5.590372609772594e12,5.591023784524107e12,5.591675262780819e12,5.592326587934125e12,5.592978673731325e12,5.593631063777343e12,5.594283300824703e12,5.594936299900529e12,5.595589603971396e12,5.596242755149395e12,5.59689666974461e12,5.597550890083711e12,5.598205416416949e12,5.59885979000001e12,5.599514928858599e12,5.600170374463677e12,5.600825667426817e12,5.601481727064062e12,5.602138094202793e12,5.602794308808888e12,5.6034512914919e12,5.604108582434053e12,5.604765720953941e12,5.605423628957818e12,5.60608184598116e12,5.606739910693682e12,5.607398746301539e12,5.608057891691865e12,5.608716884883897e12,5.609376650386906e12,5.610036726438084e12,5.610696650404581e12,5.611357348102006e12,5.612018357116005e12,5.612679214160033e12,5.613340846359268e12,5.614002790646202e12,5.614664583078977e12,5.615327152095585e12,5.615990033973748e12,5.616652764114672e12,5.61731627227242e12,5.617980094068324e12,5.618643764245023e12,5.619308213875922e12,5.619972977924336e12,5.620638056650726e12,5.621302983917043e12,5.621968692561027e12,5.62263471666604e12,5.623300589431645e12,5.623967245022595e12,5.624634216860411e12,5.625301037480622e12,5.625968642378301e12,5.626636564311487e12,5.627304335150014e12,5.627972891722597e12,5.628641766122139e12,5.629310489551121e12,5.62998000017523e12,5.630649829420577e12,5.631319507820622e12,5.63198997488137e12,5.632660761360472e12,5.633331397120696e12,5.634002823011721e12,5.634674569121067e12,5.635346164639136e12,5.636018551762643e12,5.636691259907305e12,5.63736381758947e12,5.63803716835627e12,5.6387108409499375e12,5.639384363211077e12,5.640058680040631e12,5.640733319505656e12,5.641408281876397e12,5.642083094089773e12,5.642758702857208e12,5.643434635342839e12,5.644110417803877e12,5.644786998313516e12,5.645463903356756e12,5.646140658509387e12,5.646818213209805e12,5.647496093262166e12,5.648173823559123e12,5.648852354907722e12,5.649531212429556e12,5.65020992033242e12,5.650889430795463e12,5.651569268256e12,5.652248956235235e12,5.652929448287895e12,5.653610268165284e12,5.654290938700287e12,5.654972414826683e12,5.655654219608038e12,5.656335875187173e12,5.657018337880414e12,5.657701130061854e12,5.658383773182496e12,5.659067224944728e12,5.659751007031416e12,5.660434640199998e12,5.661119083542439e12,5.66180385804863e12,5.662488483780682e12,5.66317392122367e12,5.66385969067275e12,5.664545792409451e12,5.665231745565976e12,5.66591851249051e12,5.666605612549096e12,5.667292564174479e12,5.667980331116248e12,5.668668432041585e12,5.669356384681994e12,5.670045154192044e12,5.670734258538276e12,5.671423214749164e12,5.672112989387849e12,5.672803099718438e12,5.67349306206459e12,5.67418384440161e12,5.674874963289393e12,5.675565934344964e12,5.676257726959419e12,5.676949856986634e12,5.677641839335201e12,5.678334644815632e12,5.679027788573976e12,5.679720784808579e12,5.680414605753009e12,5.681108765843679e12,5.681802778566865e12,5.68249761758285e12,5.683192796616589e12,5.683887828440462e12,5.684583688145131e12,5.685279888742272e12,5.685975942288534e12,5.686672825308643e12,5.687370050099157e12,5.68806761695351e12,5.688765036971121e12,5.689463288594663e12,5.690161883164295e12,5.690860331059396e12,5.69155961216535e12,5.692259237102896e12,5.692958715529524e12,5.693659028777049e12,5.694359686744941e12,5.695060198366931e12,5.695761546425009e12,5.696463240095517e12,5.697164787586551e12,5.697867173134036e12,5.698569905189313e12,5.699272491232972e12,5.699975916958637e12,5.700679690090771e12,5.701383317380574e12,5.702087785983155e12,5.702792602894219e12,5.70349727413368e12,5.704202788321927e12,5.70490865172402e12,5.705614369626689e12,5.706320932119416e12,5.707027844734718e12,5.707734612024233e12,5.708442225550364e12,5.709150190111179e12,5.70985850601154e12,5.710566676819935e12,5.711275696068745e12,5.711985067573746e12,5.712694294163863e12,5.713404370853377e12,5.714114800719146e12,5.714825085848603e12,5.715536222741801e12,5.716247713734758e12,5.716959060171475e12,5.717671260041665e12,5.71838381493857e12,5.719096225460816e12,5.719809491091684e12,5.720523112679688e12,5.721236590076138e12,5.721950924261788e12,5.72266561533849e12,5.723380162408268e12,5.724095567953285e12,5.724811331326772e12,5.725526950879504e12,5.726243430599002e12,5.726960269087909e12,5.727676963943777e12,5.728394520663447e12,5.729112437097005e12,5.729830210086797e12,5.730548846642962e12,5.731267843861047e12,5.73198669782621e12,5.732706417065874e12,5.733426497919065e12,5.734146940703859e12,5.73486724049266e12,5.73558840784229e12,5.736309938079921e12,5.737031325516099e12,5.737753582234304e12,5.738476202800522e12,5.739198680761432e12,5.739922029731206e12,5.740645743512642e12,5.74136931488652e12,5.742093759001772e12,5.742818568895982e12,5.74354323658201e12,5.744268778747613e12,5.744994687663139e12,5.745720454571489e12,5.746447097703338e12,5.747174108559758e12,5.747900977611653e12,5.748628724636714e12,5.749356840364702e12,5.750084814492468e12,5.750813668348838e12,5.751542891890212e12,5.752271974037331e12,5.753001937674291e12,5.753732271982074e12,5.754462465103243e12,5.755193541481313e12,5.755924989519786e12,5.7566568095494375e12,5.757388488671966e12,5.758121053416723e12,5.758853991147279e12,5.759586788182299e12,5.760320472620304e12,5.761054531042532e12,5.761788448982523e12,5.762523256112168e12,5.763258438228283e12,5.763993480077179e12,5.764729412908337e12,5.765465721732054e12,5.766201890505304e12,5.76693895205939e12,5.767676390615985e12,5.768413689340606e12,5.769151882650637e12,5.769890453977005e12,5.770628885691647e12,5.771368213802291e12,5.772107920947e12,5.772847488701997e12,5.77358795466964e12,5.774328800692995e12,5.775069507550428e12,5.775811114443228e12,5.776553102417325e12,5.777294951451078e12,5.778037702349025e12,5.778780835357816e12,5.779523829653639e12,5.780267727648615e12,5.781012008787958e12,5.781756673417141e12,5.782501199639363e12,5.783246632017091e12,5.783992448923516e12,5.784738127654602e12,5.785484714390577e12,5.786231686698134e12,5.786978521063812e12,5.787726265289991e12,5.788474396134681e12,5.789222389272801e12,5.789971294133296e12,5.790720586663293e12,5.791469741723895e12,5.792219810375028e12,5.792970267750745e12,5.793720587896111e12,5.794471823506485e12,5.795223448900629e12,5.795974937305355e12,5.79672734305591e12,5.797480139653548e12,5.7982327995046e12,5.798986378588676e12,5.799740349587298e12,5.800494184084076e12,5.801248939707479e12,5.802004088317061e12,5.802759100671461e12,5.803515036052522e12,5.804271365495588e12,5.805028089360283e12,5.805784677301717e12,5.8065421908134e12,5.80730009982816e12,5.808057873170857e12,5.808816573998974e12,5.809575671415852e12,5.810334633413832e12,5.811094524818935e12,5.811854813902748e12,5.812614967822806e12,5.813376053078256e12,5.814137537106649e12,5.81489888622842e12,5.815661168620449e12,5.816423850883962e12,5.817186398499987e12,5.817949881327768e12,5.818713765129899e12,5.819477514545695e12,5.820242201121399e12,5.821007289778675e12,5.821772244312796e12,5.822538137961671e12,5.823304434803708e12,5.824070597787814e12,5.824837701848244e12,5.825605210217821e12,5.826372584996747e12,5.827140902820321e12,5.827909626073446e12,5.828678216005268e12,5.829447750956848e12,5.830217692462823e12,5.830988040899226e12,5.831758256376718e12,5.832529419518214e12,5.833300990720937e12,5.834072429238979e12,5.834844817412097e12,5.835617614781736e12,5.83639027974304e12,5.837163896357384e12,5.837937923308065e12,5.838711818128881e12,5.83948666660763e12,5.840261926567071e12,5.841037054677262e12,5.841813138457237e12,5.842589634866826e12,5.843365999709932e12,5.844143322241671e12,5.84492105855653e12,5.845698663589849e12,5.846477228337672e12,5.847256208026736e12,5.848035056721383e12,5.848814867163471e12,5.849595093709556e12,5.850375189550546e12,5.851156249179004e12,5.851937726078879e12,5.852719072565193e12,5.853501384886135e12,5.854284115650592e12,5.855067265250404e12,5.855850284828861e12,5.856634272982798e12,5.857418681150474e12,5.858202959593551e12,5.858988208676031e12,5.859773878955381e12,5.860559419809149e12,5.861345933373491e12,5.862132869322595e12,5.862919676147414e12,5.863707457761251e12,5.864495662952539e12,5.865283739323127e12,5.866072792568496e12,5.866862270588817e12,5.867651620094333e12,5.868441948567738e12,5.869232703018444e12,5.870023329262558e12,5.870814936575056e12,5.871606971072068e12,5.872398877673041e12,5.8731917674503125e12,5.873985085624205e12,5.874778276214964e12,5.875572452097394e12,5.87636705759347e12,5.877161535821685e12,5.877957001464436e12,5.878752897942804e12,5.879548667470969e12,5.8803454265440625e12,5.881142617679717e12,5.881940241288118e12,5.882737738373619e12,5.883536227856517e12,5.884335151045773e12,5.88513394803541e12,5.885933739570549e12,5.886733966050692e12,5.887534066656936e12,5.888335163964437e12,5.889136697460649e12,5.889938105411131e12,5.890740512226319e12,5.891543356479012e12,5.892346075516612e12,5.893149795590095e12,5.893953954354987e12,5.894757988237914e12,5.895563025335664e12,5.896368502383871e12,5.89717385488574e12,5.897980212789177e12,5.898787011907286e12,5.899593686817202e12,5.900401369323274e12,5.901209494313431e12,5.902017495436076e12,5.902826506357345e12,5.903635961037333e12,5.904445292193044e12,5.905255635357766e12,5.906066423561095e12,5.906877657230931e12,5.907688767838162e12,5.908500893414148e12,5.909313465743577e12,5.910125915359655e12,5.91093938217351e12,5.911753297033057e12,5.91256708953112e12,5.913381901464031e12,5.914197162740233e12,5.915012302009442e12,5.915828462958662e12,5.916645074554147e12,5.917461564499776e12,5.918279078378709e12,5.919097044212285e12,5.919914888755802e12,5.920733759494089e12,5.921553083500831e12,5.922372286579993e12,5.923192518123603e12,5.92401320425494e12,5.924833769823874e12,5.9256553661351875e12,5.926477418358997e12,5.927299350388293e12,5.928122315446195e12,5.928945737746881e12,5.929769040223681e12,5.930593378023647e12,5.93141817440224e12,5.932242851330324e12,5.933068565884517e12,5.933894740358756e12,5.934721375201535e12,5.935547891095987e12,5.936375447700421e12,5.937203466022306e12,5.938031365775737e12,5.938860308561804e12,5.93968971441989e12,5.940519002092209e12,5.941349335128335e12,5.942180132596732e12,5.943010812264885e12,5.943842539636578e12,5.944674732806509e12,5.945506808564568e12,5.94633993437451e12,5.9471735273544e12,5.948007003313667e12,5.948841531681801e12,5.949676528597378e12,5.950511408886466e12,5.951347343950104e12,5.952183748944482e12,5.953020037709423e12,5.953857383623329e12,5.954695200857118e12,5.955532902261448e12,5.95637166319794e12,5.957210896849333e12,5.958050015074194e12,5.958890195223239e12,5.959730849488108e12,5.960571388732346e12,5.961412992301659e12,5.962255071393656e12,5.963097626478727e12,5.963940067089051e12,5.964783575239706e12,5.965627560798266e12,5.966471432294987e12,5.967316373753807e12,5.968161794041375e12,5.969007100683053e12,5.969853479717615e12,5.970700339007823e12,5.971547085071145e12,5.972394905967207e12,5.973243208551891e12,5.974091398331773e12,5.974940665393368e12,5.975790415582676e12,5.976640053392368e12,5.977490770941903e12,5.9783419730643955e12,5.979193063235577e12,5.980045235613942e12,5.98089789401669e12,5.981750440899578e12,5.982604072466245e12,5.983458191514938e12,5.984312199478387e12,5.985167294611512e12,5.986022878690562e12,5.986878352122165e12,5.987734915218696e12,5.98859196873134e12,5.989449513151674e12,5.990306947513322e12,5.991165474881724e12,5.992024494636441e12,5.992883404777793e12,5.993743410443154e12,5.99460390997983e12,5.995464300351716e12,5.996325788774384e12,5.997187772559769e12,5.998049647632222e12,5.998912623291791e12,5.999776095811923e12,6.000639460074285e12,6.001503927469711e12,6.002368893230022e12,6.003233751191053e12,6.004099714840756e12,6.004966178366183e12,6.005832534554168e12,6.006699998996147e12,6.007567964831242e12,6.008435823794104e12,6.009304793586045e12,6.010174266295081e12,6.011043632600491e12,6.011914112319879e12,6.012785096486967e12,6.013655974722455e12,6.014527968966686e12,6.015400469195885e12,6.016272863968952e12,6.017146377355443e12,6.018020398270873e12,6.018894927231514e12,6.019769351375414e12,6.02064489762137e12,6.021520953465501e12,6.022396904976485e12,6.023273981217552e12,6.024151568616548e12,6.025029052169514e12,6.025907663090679e12,6.026786786736358e12,6.027665807026669e12,6.028545957333444e12,6.029426621938185e12,6.030307183681792e12,6.031188878100324e12,6.032071088397182e12,6.032953196330736e12,6.033836439607931e12,6.034720200350755e12,6.035603859231729e12,6.036488656135364e12,6.037373972098921e12,6.038259186705726e12,6.039145542024574e12,6.040032418004662e12,6.040919193136768e12,6.041807111680716e12,6.042695552494289e12,6.043583892972347e12,6.044473379572519e12,6.045363390057807e12,6.046253924968421e12,6.047144360232645e12,6.048035945249275e12,6.048928056316266e12,6.049820068258058e12,6.050713232687183e12,6.051606924798901e12,6.052500518310401e12,6.053395267054815e12,6.054290545121303e12,6.055185725116359e12,6.056082063100628e12,6.056978932053739e12,6.057875703468043e12,6.05877363563863e12,6.059672100432153e12,6.060570468223358e12,6.061469999548751e12,6.062370065158545e12,6.063270034306402e12,6.064171169777235e12,6.065072841201353e12,6.065974416707827e12,6.066877161337019e12,6.067780443595831e12,6.068683630485244e12,6.069587989308119e12,6.070492887444453e12,6.071397690763603e12,6.072303668838027e12,6.073210187917291e12,6.074116612735588e12,6.075024215142095e12,6.075932360252413e12,6.076841048634691e12,6.077749643503939e12,6.078659419756282e12,6.07956974098974e12,6.080479969275832e12,6.081391381804151e12,6.082303341030436e12,6.08321520787911e12,6.084128261840471e12,6.085041864224384e12,6.085955374804568e12,6.086870075379292e12,6.087785326108933e12,6.088700485612883e12,6.089616838004671e12,6.090533742291574e12,6.091450555935006e12,6.09236856537109e12,6.093287128450357e12,6.094205601472587e12,6.095125273203858e12,6.096045500334306e12,6.096965637998389e12,6.097886977299544e12,6.098808873763833e12,6.099730681356703e12,6.100653693526381e12,6.101577264631164e12,6.102500747463778e12,6.103425437824701e12,6.104350688900764e12,6.105276501287248e12,6.106202226207358e12,6.107129162609759e12,6.108056662113439e12,6.108984074760156e12,6.109912701868373e12,6.110841893876902e12,6.111770999642281e12,6.112701322860357e12,6.113632212785998e12,6.114563017086741e12,6.115495041843426e12,6.116427635123202e12,6.117360143400801e12,6.118293875149705e12,6.119228177245544e12,6.120162394966427e12,6.121097839186162e12,6.122033855585048e12,6.12296978824073e12,6.123906950435064e12,6.124844686649183e12,6.12578233975642e12,6.126721225454424e12,6.127660687021318e12,6.128600066122248e12,6.12954068087845e12,6.130481873361168e12,6.131422984023471e12,6.132365333418006e12,6.133308262405259e12,6.134251110222306e12,6.135195199861073e12,6.13613987096738e12,6.13708512416824e12,6.138030297073207e12,6.138976715939061e12,6.139923718785869e12,6.140870641998011e12,6.141818814290027e12,6.1427675724581455e12,6.143716251657601e12,6.144666183068679e12,6.145616702259805e12,6.146567143153081e12,6.147518839402561e12,6.148471125344887e12,6.149423333665021e12,6.150376800498846e12,6.151330858947219e12,6.152284840453939e12,6.1532400836448125e12,6.154195920380896e12,6.155151680860783e12,6.156108706208334e12,6.15706632704077e12,6.158023872307416e12,6.158982685638362e12,6.1599420964029375e12,6.160901432297116e12,6.161862039465429e12,6.162823246025234e12,6.1637843784150625e12,6.16474678530213e12,6.165709793547736e12,6.166673403809767e12,6.16763694084364e12,6.168601756693257e12,6.169567176538667e12,6.170532523868203e12,6.171499153267851e12,6.172466388651974e12,6.17343355223765e12,6.17440200116133e12,6.175371058067535e12,6.176340043897905e12,6.177310318347773e12,6.178281202787639e12,6.179252016879502e12,6.180224122886037e12,6.181196840899526e12,6.1821694892981045e12,6.183143432920287e12,6.184117990575919e12,6.18509247935503e12,6.186068266680512e12,6.18704467007554e12,6.188021005337773e12,6.188998642483061e12,6.189976897743649e12,6.190955085620544e12,6.191934578731169e12,6.19291469201257e12,6.193894738664793e12,6.1948760939155e12,6.195858071402234e12,6.196839983019761e12,6.197823206614681e12,6.19880705452072e12,6.199791527431936e12,6.200775935495853e12,6.2017616600648e12,6.2027480117272295e12,6.203734299315216e12,6.204721906820491e12,6.205710143517537e12,6.206698316918582e12,6.207687813663607e12,6.208677941708735e12,6.209668007241937e12,6.210659399560321e12,6.21165142529725e12,6.212643389311997e12,6.213636683567729e12,6.214630613370612e12,6.215624482246775e12,6.216619684834407e12,6.217615525108035e12,6.218611305256157e12,6.219608422601e12,6.22060617978098e12,6.221603877642469e12,6.222602916200784e12,6.22360259675374e12,6.224602218801061e12,6.225603185060255e12,6.226604795484019e12,6.227606348220887e12,6.228609248699704e12,6.229612795523517e12,6.230616989421645e12,6.231621126733823e12,6.232626616518523e12,6.233632755572058e12,6.234638838872282e12,6.235646278210515e12,6.236654369022746e12,6.23766240492034e12,6.238671800436751e12,6.239681849643041e12,6.240691844779442e12,6.241703203130883e12,6.242715217398865e12,6.24372717844783e12,6.244740506323561e12,6.245754492353348e12,6.246768426021154e12,6.24778373014305e12,6.248799694667437e12,6.249815607693094e12,6.250832894815852e12,6.251850844600521e12,6.252868743755976e12,6.25388802066732e12,6.254907962511061e12,6.255927854601402e12,6.256949128122303e12,6.257971068857209e12,6.258992960720888e12,6.260016237705761e12,6.261040184197455e12,6.262064082706493e12,6.263089370043424e12,6.264115329191262e12,6.265141960920732e12,6.266168545862421e12,6.267196524599712e12,6.268225178237864e12,6.269253785991934e12,6.270283791286159e12,6.271314473811916e12,6.272345111363852e12,6.273377150216884e12,6.274409868643632e12,6.275442543013433e12,6.276476622461753e12,6.2775113838375625e12,6.278546102079964e12,6.279582229194889e12,6.280619040602741e12,6.281655809807435e12,6.282693991695338e12,6.283732860253346e12,6.28477168754521e12,6.285811931347751e12,6.286852864209389e12,6.28789375674871e12,6.288936069643062e12,6.289979073997392e12,6.291022038980102e12,6.292066428179177e12,6.293111511251084e12,6.294156555908981e12,6.295203028661669e12,6.296250197712087e12,6.297297329313081e12,6.298345892904478e12,6.299395155230627e12,6.300445117106766e12,6.301495042830607e12,6.30254640576623e12,6.303598470705156e12,6.304650500472843e12,6.305703971388444e12,6.306758146772971e12,6.307812287974466e12,6.30886787427755e12,6.309924167527569e12,6.31098042758997e12,6.312038136725283e12,6.313096555298014e12,6.314154941685797e12,6.31521478113557e12,6.316275332525797e12,6.317335852741062e12,6.318397830025258e12,6.319460521765578e12,6.320523183348294e12,6.321587306024858e12,6.322652145685934e12,6.323716956214188e12,6.324783231879291e12,6.325850227070096e12,6.326917194160348e12,6.327985630448642e12,6.329054788816713e12,6.330123920124044e12,6.331194524708916e12,6.332265853940613e12,6.333337908677917e12,6.334409937752809e12,6.335483445573567e12,6.33655768148441e12,6.337631892790475e12,6.338707586965064e12,6.339784011827387e12,6.340860413150306e12,6.341938301483092e12,6.343016923114521e12,6.344095522279715e12,6.345175612614921e12,6.346256438873029e12,6.347337243745928e12,6.348419543967901e12,6.349502582750473e12,6.350585601236778e12,6.35167011927026e12,6.352755378515558e12,6.353840618561515e12,6.3549273623719e12,6.356014850058942e12,6.357102319651609e12,6.3581912972452295e12,6.359281021394054e12,6.360370728561571e12,6.361461947985963e12,6.362553916657903e12,6.363645869469775e12,6.364739338813957e12,6.365833560111926e12,6.366927766679291e12,6.368023494074041e12,6.369119976142802e12,6.370217213795653e12,6.371314438236857e12,6.372413189263309e12,6.373512698612868e12,6.374612195899704e12,6.375713224113164e12,6.376815013402959e12,6.3779167917873955e12,6.379020105459887e12,6.38012418297624e12,6.381228250753117e12,6.382333858199655e12,6.383440232271982e12,6.384546597779294e12,6.385654507358182e12,6.386763186359279e12,6.38787185797847e12,6.388982078091583e12,6.390093070437928e12,6.391204056594184e12,6.392316595687278e12,6.393429909839314e12,6.394543219001866e12,6.395658085564863e12,6.39677373002731e12,6.3978893707097295e12,6.399006573277027e12,6.400124556599177e12,6.401242537359678e12,6.402362084510449e12,6.403482415286472e12,6.404603530648118e12,6.405724645086719e12,6.406847331955968e12,6.407970806301397e12,6.409094280963252e12,6.410219332610576e12,6.411345174639873e12,6.412471018234229e12,6.413598443390284e12,6.414726661849446e12,6.415854883131529e12,6.41698469057309e12,6.418115294254338e12,6.419245902025677e12,6.420378100575954e12,6.421511098318056e12,6.422644101426795e12,6.423778699955759e12,6.424914100644344e12,6.426049507985569e12,6.42718651541027e12,6.428324327978157e12,6.429462148494216e12,6.43060157377911e12,6.431741807206634e12,6.432882049887465e12,6.43402390204474e12,6.43516656536008e12,6.436309239243542e12,6.437453527333453e12,6.438598629612959e12,6.439743743785167e12,6.440890476916364e12,6.442038027284901e12,6.443186395910553e12,6.444334778210428e12,6.445484785841706e12,6.446635614799635e12,6.44778645877944e12,6.448938932896362e12,6.450092231425944e12,6.45124554633508e12,6.452400496210076e12,6.453556273600335e12,6.454712068737928e12,6.455869503693307e12,6.457027769283259e12,6.45818605399851e12,6.45934598340681e12,6.460506746585819e12,6.461667530278355e12,6.462829963562694e12,6.46399323377082e12,6.465156525891052e12,6.466321472525484e12,6.46748725925384e12,6.468653069303315e12,6.469820538813185e12,6.470988851604302e12,6.472157189136066e12,6.473327191098376e12,6.474498039546559e12,6.475668914165521e12,6.476841458209293e12,6.47801485196099e12,6.479189096498773e12,6.480363369130933e12,6.481539317885104e12,6.482716120670839e12,6.483892953006159e12,6.485071466514646e12,6.486250837317894e12,6.487430239136824e12,6.488611327204732e12,6.489793275848436e12,6.490975256984903e12,6.492158929470972e12,6.49334346583184e12,6.494528036173623e12,6.495714302990613e12,6.496901436999504e12,6.498088606488622e12,6.4992774776037e12,6.500467219246004e12,6.501656997879102e12,6.5028484833142295e12,6.504040842630264e12,6.505233240459001e12,6.506427350291325e12,6.507622337376726e12,6.508817364508177e12,6.510014108870426e12,6.511211733876542e12,6.512409400473587e12,6.513608789554473e12,6.51480906268877e12,6.5160093789705e12,6.517211423015119e12,6.518414354541581e12,6.519618174697188e12,6.520822040093942e12,6.522027640333481e12,6.523234132655998e12,6.524440671803667e12,6.525648951134534e12,6.526858126021418e12,6.528067349329413e12,6.529278318187607e12,6.530490186094211e12,6.531702104029929e12,6.532915772909626e12,6.53413034434961e12,6.535344967438859e12,6.536561346892824e12,6.537778632438587e12,6.538995971266015e12,6.540215071906035e12,6.541435082189135e12,6.542655147398648e12,6.54387697989596e12,6.54509972560755e12,6.546322527902756e12,6.547547102988478e12,6.548772594879738e12,6.549998145024375e12,6.551225473489946e12,6.552453722372528e12,6.553682031190904e12,6.554912123888525e12,6.556143140634987e12,6.557375082645733e12,6.558607086855509e12,6.559840882399768e12,6.561075606867516e12,6.56231039524667e12,6.563546980584448e12,6.564784498525633e12,6.566022082103614e12,6.567261468292899e12,6.568501790786366e12,6.569742180655152e12,6.570984378816652e12,6.572227517004127e12,6.573470724318677e12,6.574715745636287e12,6.575961710722835e12,6.577207746701561e12,6.578455602422829e12,6.579704405677324e12,6.580953281602562e12,6.58220398303916e12,6.583455635794761e12,6.58470736301324e12,6.585960921541441e12,6.587215435196063e12,6.588470025119394e12,6.589726452180552e12,6.590983838197356e12,6.592241302302501e12,6.593500609403536e12,6.594760879311411e12,6.59602122914118e12,6.597283427855066e12,6.598546593249122e12,6.599810726619707e12,6.601074942378925e12,6.602341014920983e12,6.603608059342669e12,6.604875188019486e12,6.606144179438586e12,6.607414146662933e12,6.608684200023229e12,6.609956122116124e12,6.61122902396258e12,6.612502013840243e12,6.613776878471921e12,6.615052726828333e12,6.616328665125775e12,6.617606484229962e12,6.618885291053091e12,6.620164189741764e12,6.621444975321447e12,6.62272675263749e12,6.624008623758402e12,6.6252923878863545e12,6.626577147791468e12,6.62786200345572e12,6.629148758275024e12,6.6304365129358545e12,6.63172436532516e12,6.633014123049751e12,6.634304884703966e12,6.635595746071197e12,6.636888518986387e12,6.638182299943225e12,6.639476182612946e12,6.640771983075978e12,6.642068795716784e12,6.643366621919785e12,6.6446645525263955e12,6.645964409305175e12,6.647265283814701e12,6.648566264763993e12,6.649869178207966e12,6.651173113575774e12,6.652477157435279e12,6.653783140145443e12,6.655090148997252e12,6.656397268408603e12,6.657706333060293e12,6.659016428096354e12,6.660326635775852e12,6.661638795119321e12,6.66295198911499e12,6.664265297854179e12,6.665580564715167e12,6.66689687052148e12,6.66821329318773e12,6.66953168046805e12,6.6708511110123125e12,6.672170660549401e12,6.673492181227521e12,6.6748147495138955e12,6.676137438942602e12,6.677462106074245e12,6.678787825184343e12,6.680113667603037e12,6.681441494321778e12,6.682770377415264e12,6.6841003183551e12,6.68543038551839e12,6.686762445833584e12,6.688095568426527e12,6.689428819448874e12,6.690764070303373e12,6.692100387893582e12,6.693436836136404e12,6.694775290927688e12,6.696114816939422e12,6.697454475844385e12,6.698796148050451e12,6.700138895988685e12,6.701481779078329e12,6.702826682258316e12,6.704172665709387e12,6.705518786587763e12,6.706866934382588e12,6.708216167014821e12,6.709565539368129e12,6.710916945501133e12,6.712269441065495e12,6.7136220786627295e12,6.714976756940321e12,6.7163325292710625e12,6.717688445964668e12,6.719046410276986e12,6.720405473292303e12,6.721764683018828e12,6.723125947340393e12,6.724488315043093e12,6.725850831823859e12,6.727215410214248e12,6.728581096692414e12,6.729947892833983e12,6.731314841238704e12,6.732683860666377e12,6.734053994502459e12,6.7354242830124e12,6.736796649650255e12,6.738170135470565e12,6.739543778394514e12,6.740919506590554e12,6.742296358772369e12,6.743673370506841e12,6.745052474697096e12,6.746432707705946e12,6.747813102735888e12,6.74919559744511e12,6.750579225835492e12,6.751963018734987e12,6.753348918577372e12,6.754735956993456e12,6.756123162426438e12,6.757512482106334e12,6.758902945282685e12,6.760293578003666e12,6.761686332316295e12,6.763080235078603e12,6.764474309933394e12,6.765870513765594e12,6.767267871031403e12,6.768665402957854e12,6.770065071288811e12,6.771465898068263e12,6.772867884975153e12,6.774270049998998e12,6.775674361395581e12,6.777079837976155e12,6.778485495289935e12,6.77989330650124e12,6.781302287984631e12,6.782711452838404e12,6.784122779156886e12,6.785535280867351e12,6.786947968606487e12,6.788362825420237e12,6.789778862777927e12,6.791195088843885e12,6.792613491637412e12,6.794033080159155e12,6.795452860090264e12,6.796874824445279e12,6.798297979745372e12,6.799721329177624e12,6.801146870773835e12,6.802573608564838e12,6.8040005432326875e12,6.805429677848605e12,6.806860013942146e12,6.80829054967932e12,6.809723293193062e12,6.811157243500653e12,6.812591396240964e12,6.81402776463108e12,6.815465345164941e12,6.816903130943107e12,6.818343140289405e12,6.819784367163288e12,6.821226813367383e12,6.822669468600154e12,6.824114358030185e12,6.825560472219969e12,6.82700679830334e12,6.828455366608865e12,6.829905165138291e12,6.831355178449414e12,6.832807442053859e12,6.834260941381243e12,6.835714658401854e12,6.837170633833585e12,6.838627850522472e12,6.840085287839754e12,6.841544991732949e12,6.843005942452997e12,6.84446711676046e12,6.845930565855997e12,6.847395267383853e12,6.848860195482221e12,6.850327406628563e12,6.851795875848765e12,6.853264574646876e12,6.854735564800979e12,6.856207818706852e12,6.857680305222562e12,6.859155091450777e12,6.860631147145354e12,6.862107438506448e12,6.863586037985449e12,6.865065912682386e12,6.866547064523177e12,6.868028456145219e12,6.869512167169734e12,6.870997161139485e12,6.872482398005847e12,6.873969962795658e12,6.875458816369809e12,6.876947915981466e12,6.878439352087744e12,6.8799320828555e12,6.881425062827445e12,6.882920387915771e12,6.884417013581081e12,6.885913891643281e12,6.887413123494625e12,6.888913661877144e12,6.890414455875524e12,6.891917612387221e12,6.893422081423302e12,6.894926809320735e12,6.896433908507478e12,6.897942326251164e12,6.899451006128465e12,6.900962066123306e12,6.902474450747342e12,6.903987100804274e12,6.905502139859645e12,6.907018509656485e12,6.908535148212788e12,6.910054184701512e12,6.9115745580843545e12,6.913095203580766e12,6.914618255997103e12,6.916142651500925e12,6.917668392166282e12,6.91919440946091e12,6.920722845743517e12,6.922252633435867e12,6.923782701176883e12,6.92531519701997e12,6.926849050562551e12,6.928383187601622e12,6.929919761911843e12,6.931457700253213e12,6.9329959255676e12,6.934536597377652e12,6.936078639592776e12,6.937620972286421e12,6.939165760756142e12,6.94071192604749e12,6.94225838535212e12,6.943807309769589e12,6.945357617468248e12,6.946908222744488e12,6.948461302527148e12,6.950015772093943e12,6.951570542832439e12,6.953127797528228e12,6.954686448554853e12,6.956245404377418e12,6.957806853665902e12,6.959369705876073e12,6.960932866536825e12,6.962498530230365e12,6.964065603480975e12,6.965634088510929e12,6.967202886912418e12,6.968774201194706e12,6.970346933951712e12,6.971919983806995e12,6.973495559247734e12,6.975072559904019e12,6.976649881416725e12,6.978229738279419e12,6.97981102714434e12,6.98139264065554e12,6.982976799341632e12,6.984562396862894e12,6.986148322852311e12,6.987736803902407e12,6.989326730667288e12,6.990916989754537e12,6.992509813849643e12,6.994104090586235e12,6.9956987035320625e12,6.99729589149483e12,6.9988945390733e12,7.000493526780837e12,7.002095099576838e12,7.003698139010684e12,7.005301522526733e12,7.006907501265726e12,7.008514953713068e12,7.010122754229378e12,7.0117331601666045e12,7.013345046931482e12,7.01495728578605e12,7.016572140323543e12,7.018188482857221e12,7.019806315788173e12,7.021424506223509e12,7.023045326125807e12,7.024667643660252e12,7.026290322800366e12,7.027915641820995e12,7.029542465758926e12,7.031169655438904e12,7.032799495478825e12,7.034430847771931e12,7.036062569978915e12,7.03769695309171e12,7.039332855844764e12,7.040969132719326e12,7.042608081112577e12,7.04424855658482e12,7.045889410422364e12,7.047532946459062e12,7.04917801706561e12,7.050823470317775e12,7.05247161651773e12,7.054121304831001e12,7.055771380107093e12,7.05742415914837e12,7.059078487899514e12,7.060733207967944e12,7.062390642688313e12,7.06404963476867e12,7.065709022558419e12,7.067371135956816e12,7.069034814419388e12,7.070700060526897e12,7.072365708259488e12,7.074034096320426e12,7.075704059803349e12,7.07737442939277e12,7.079047550432871e12,7.080722254727247e12,7.082397369648452e12,7.084075247214698e12,7.085754715923244e12,7.087434599818275e12,7.089117257625351e12,7.090801514519018e12,7.092486191198545e12,7.094173653130405e12,7.095862722149936e12,7.097552215594821e12,7.099244505706266e12,7.1009384109637705e12,7.102632745326661e12,7.104329887844924e12,7.106028653625483e12,7.10772785323241e12,7.109429872558767e12,7.111133523322052e12,7.11283761267405e12,7.114544533385454e12,7.116253093767351e12,7.117962097542103e12,7.119673944392826e12,7.1213874392071e12,7.123101382260594e12,7.124818180183898e12,7.126536634423859e12,7.12825674777894e12,7.129977315901891e12,7.13170075474209e12,7.133425861131474e12,7.135151427235323e12,7.13687987603327e12,7.138610000875842e12,7.140340590423179e12,7.142074074721062e12,7.143809243620978e12,7.145544882260112e12,7.14728342778656e12,7.149023666535005e12,7.150764380101728e12,7.152508012773581e12,7.154253347350543e12,7.155999161869922e12,7.157747907794024e12,7.159498364370101e12,7.161249306058278e12,7.163003191533296e12,7.16475879647151e12,7.166514891737539e12,7.168273943255789e12,7.17003472311344e12,7.171795998561127e12,7.173560242810442e12,7.175326224340968e12,7.177092706770743e12,7.178862170636354e12,7.180633380791215e12,7.182405097202031e12,7.184179807768457e12,7.185956273699053e12,7.187734498034472e12,7.189513235843285e12,7.191294984902878e12,7.193078501532391e12,7.194862537104775e12,7.196649596850454e12,7.198438433399544e12,7.200227794410169e12,7.202020192604821e12,7.203814376905437e12,7.205609091235961e12,7.207406855850283e12,7.209206415942853e12,7.211006511683937e12,7.212809670898453e12,7.214614635033914e12,7.216420140487272e12,7.218228722694389e12,7.220039119336255e12,7.22185006301671e12,7.22366409682279e12,7.225479954649227e12,7.227296365286811e12,7.229115879514278e12,7.230937227420214e12,7.232759133962275e12,7.234584157651738e12,7.236411024751004e12,7.238238456364355e12,7.240069018776756e12,7.241901434404242e12,7.243735706532565e12,7.245570551096128e12,7.247408544809969e12,7.249248404929669e12,7.251088843488431e12,7.252932445072227e12,7.25477792304257e12,7.256623985510712e12,7.258473224975761e12,7.260324350884465e12,7.262176067405216e12,7.264030974992785e12,7.265887779158307e12,7.26774518010623e12,7.2696057862898545e12,7.271468299263681e12,7.273331415246989e12,7.275197750734796e12,7.277066003303787e12,7.2789348651666875e12,7.280806960903742e12,7.282680984092497e12,7.284555622917551e12,7.286433510088249e12,7.288313335161488e12,7.290193782272023e12,7.292077492302496e12,7.293963150767493e12,7.295849437730025e12,7.297739002290585e12,7.299630525899609e12,7.30152268452631e12,7.303418135533919e12,7.305315556286725e12,7.307214950369687e12,7.309114988258681e12,7.311018338405019e12,7.31292367268995e12,7.314829657443403e12,7.3167389694855625e12,7.318650276559526e12,7.320562240826637e12,7.322477547522028e12,7.324394860228069e12,7.326312836914705e12,7.328234171278463e12,7.330157522718233e12,7.332081544989568e12,7.334008940297198e12,7.335938363833608e12,7.33786846511678e12,7.339801954906836e12,7.341737484166737e12,7.343673698153549e12,7.345613316230334e12,7.347554985107249e12,7.349497345756893e12,7.351443126193215e12,7.353390968850083e12,7.355339510391915e12,7.357291487531855e12,7.359245538403833e12,7.361200295340164e12,7.363158503801899e12,7.365118797599179e12,7.367081180621361e12,7.369044279386765e12,7.371010851097441e12,7.372979523760718e12,7.374948919506274e12,7.376921804399242e12,7.378896802066783e12,7.38087253022538e12,7.382851763853275e12,7.384833122172974e12,7.386815218463018e12,7.388800836665187e12,7.39078859157265e12,7.392777092001061e12,7.394769130906573e12,7.396763318628148e12,7.3987582594934e12,7.400756755524106e12,7.402757412579942e12,7.404758830475133e12,7.406763820348754e12,7.408770983555911e12,7.410778915371886e12,7.412790436105141e12,7.414804142580734e12,7.416818625509241e12,7.418836714421025e12,7.420857001585411e12,7.422878073122296e12,7.424902767836896e12,7.426929673416902e12,7.428957371365353e12,7.4309887098157e12,7.433022271847895e12,7.435058061724972e12,7.437094654752691e12,7.4391349115867e12,7.441177409121953e12,7.443220717985423e12,7.445267708287284e12,7.447316952253001e12,7.4493670158038545e12,7.451420778559422e12,7.453476808048852e12,7.45553366546061e12,7.457594239979e12,7.459657094409812e12,7.461720785181351e12,7.463788211098437e12,7.465857930216235e12,7.467928494175312e12,7.470002811457264e12,7.472079435339137e12,7.47415691264596e12,7.476238161592831e12,7.478321730650957e12,7.480406161801799e12,7.482494383051159e12,7.484584938036461e12,7.486676363867325e12,7.488771598397952e12,7.490869180403789e12,7.492967642094127e12,7.4950699312297295e12,7.497174581695657e12,7.499281598137334e12,7.501389506185137e12,7.503501266900706e12,7.505615407603591e12,7.5077304489563955e12,7.509849362064998e12,7.511970669291327e12,7.514092886300907e12,7.51621899430369e12,7.518347510674764e12,7.520476946053022e12,7.522610291812838e12,7.524746060312996e12,7.526882757135959e12,7.529023383881383e12,7.531166447862038e12,7.533310449573899e12,7.535458400903296e12,7.537608804087016e12,7.539760154504236e12,7.541915474389879e12,7.54407326087453e12,7.546232004190001e12,7.548394736982254e12,7.550559951245199e12,7.552726132032454e12,7.554896322464007e12,7.557069009366363e12,7.559242672583848e12,7.561420365774019e12,7.563600570564969e12,7.56578176156038e12,7.56796700301946e12,7.570154771340634e12,7.572345071641646e12,7.574536371488983e12,7.576731749378893e12,7.578929674687392e12,7.581128609666089e12,7.583331643564619e12,7.585537240455328e12,7.587743857242673e12,7.589954593995653e12,7.59216790945077e12,7.594382255132776e12,7.596600741996601e12,7.598821823410443e12,7.601043945486525e12,7.603270230132838e12,7.605499125316561e12,7.607729071704252e12,7.609963202224715e12,7.61219995941108e12,7.61443777845084e12,7.616679803361945e12,7.618924471210174e12,7.621170211670251e12,7.623420179918217e12,7.625672807518904e12,7.627926518600267e12,7.630184479566002e12,7.632445116446099e12,7.634706847787443e12,7.636972851291573e12,7.639241547419445e12,7.641512941775289e12,7.643785445410247e12,7.646062251200798e12,7.648341772128376e12,7.650622413581832e12,7.652907379901712e12,7.655195078419455e12,7.657483908826303e12,7.659777086999181e12,7.662073014584319e12,7.664370085539713e12,7.666671527351626e12,7.668975735945563e12,7.671281099510311e12,7.6735908572151e12,7.675903399228865e12,7.678217107934909e12,7.680535234259726e12,7.682856162579516e12,7.685178269435492e12,7.687504817586385e12,7.689834185579174e12,7.692164744076051e12,7.694499767743635e12,7.696837629262876e12,7.699176693379672e12,7.701520246744887e12,7.70386665613629e12,7.706214280345882e12,7.708566418085823e12,7.710921430193221e12,7.713277669468231e12,7.715638446762077e12,7.718002116933382e12,7.720368686191438e12,7.722736499287176e12,7.725108883380406e12,7.727484185298534e12,7.729860743710734e12,7.732241898100161e12,7.734625989226122e12,7.73701134963694e12,7.739401331219292e12,7.741794268625413e12,7.744188488243288e12,7.746587354444071e12,7.748989195733576e12,7.751392332299616e12,7.75380014107952e12,7.756210944392974e12,7.758623056187412e12,7.761039866048808e12,7.763459690070647e12,7.765880835919407e12,7.768306705912951e12,7.770735609878122e12,7.77316584915948e12,7.775600838890812e12,7.778038882591496e12,7.780478275242843e12,7.782922444879382e12,7.785369688671836e12,7.787818295196532e12,7.790271705474387e12,7.792728210285874e12,7.795187816468055e12,7.7976488039912e12,7.800114631327039e12,7.802583580669862e12,7.805053925486073e12,7.807529137436787e12,7.810007492227491e12,7.812487256777686e12,7.814971916026254e12,7.817459739146992e12,7.819948986469032e12,7.82244315629827e12,7.824940511233503e12,7.827439304969635e12,7.829943049269673e12,7.832450000113702e12,7.83495840451811e12,7.837471787793995e12,7.839988399258592e12,7.842506479205077e12,7.845029566584481e12,7.847555904006647e12,7.850083724996409e12,7.852616582237473e12,7.855152711587318e12,7.857690339756863e12,7.86023303325615e12,7.862779021144887e12,7.865326523274072e12,7.867879120074653e12,7.870435033762717e12,7.872992477282903e12,7.875555045082558e12,7.878120952487864e12,7.880690207122737e12,7.88326101264976e12,7.885836982356082e12,7.888416322308048e12,7.89099722915174e12,7.893583330417217e12,7.89617282517117e12,7.898763902995219e12,7.901360205761001e12,7.903959925487764e12,7.906561244644228e12,7.909167819543263e12,7.911777835108411e12,7.914389466646588e12,7.917006385012542e12,7.919626767985379e12,7.92224878366081e12,7.924876117537131e12,7.927506940199792e12,7.930139412483429e12,7.932777234632557e12,7.935418569989272e12,7.938061572076767e12,7.940709955989483e12,7.943361877775982e12,7.94601548359714e12,7.948674503502084e12,7.95133708619515e12,7.954001370423533e12,7.956671101296855e12,7.959344420124041e12,7.962019458186717e12,7.964699975761895e12,7.967384106711394e12,7.970071859567877e12,7.972761355576672e12,7.975456375407336e12,7.9781550429103125e12,7.98085547174226e12,7.9835614579938e12,7.986271117945622e12,7.98898255761207e12,7.99169958861541e12,7.994420319613137e12,7.997142848923092e12,7.999871003810901e12,8.002602885256879e12,8.005336583827637e12,8.008075942545029e12,8.010819054657656e12,8.013564002925615e12,8.016314646241021e12,8.019069070065682e12,8.02182534929733e12,8.02458735881356e12,8.027353176233745e12,8.030120868536829e12,8.032894326702309e12,8.035671620450915e12,8.038450808785805e12,8.041235798906006e12,8.044024652576827e12,8.046815420768046e12,8.049612027017107e12,8.052412525076516e12,8.055216924434032e12,8.058023265257025e12,8.060835493055853e12,8.063651650808395e12,8.066469770511953e12,8.069293814297561e12,8.07212181699413e12,8.07495180236929e12,8.077787749297861e12,8.08062768440041e12,8.083469623154687e12,8.086317561303705e12,8.089169517199708e12,8.092023497969709e12,8.094883516350664e12,8.097747582365878e12,8.100613694730147e12,8.103485883301455e12,8.106362149712918e12,8.109240484204982e12,8.112124933885117e12,8.115013491934356e12,8.117904140056013e12,8.120800942736867e12,8.123701884643339e12,8.12660493887815e12,8.129514187438639e12,8.132427606413397e12,8.13534316024044e12,8.13826494856031e12,8.141190938819917e12,8.144119086727747e12,8.147053509701663e12,8.149992166482327e12,8.152935067771311e12,8.155880157535043e12,8.158831577107017e12,8.161787273517271e12,8.164745181848784e12,8.167709461531008e12,8.170678050734417e12,8.173648875591384e12,8.176626113766385e12,8.179607694503442e12,8.182591534916446e12,8.185581831045495e12,8.188576503140558e12,8.191573459228423e12,8.194576913866967e12,8.197584778243764e12,8.200594951229152e12,8.20361166604251e12,8.206632824739945e12,8.209656316965226e12,8.212686394744571e12,8.215720950932787e12,8.218757865876196e12,8.2218014105548125e12,8.224849468551556e12,8.227899910843638e12,8.230957027513479e12,8.234018692800744e12,8.237082768241088e12,8.240153563169621e12,8.2432289424106e12,8.246308917954111e12,8.249391338632241e12,8.252480539688583e12,8.255574373279166e12,8.258670678622346e12,8.261773810571715e12,8.264881611696427e12,8.267991911525948e12,8.271109084679904e12,8.274230964065735e12,8.277355369448018e12,8.280486695370233e12,8.283622765002426e12,8.286761388267432e12,8.289906979792221e12,8.293057352932916e12,8.296210307692903e12,8.299370278944105e12,8.30253507015134e12,8.305702471319954e12,8.308876937730157e12,8.312056262877204e12,8.315238226688928e12,8.318427305019045e12,8.32162128131411e12,8.324817925344063e12,8.328021733703274e12,8.3312304797095625e12,8.334441922893679e12,8.337660580759741e12,8.340884216415884e12,8.344110579071453e12,8.347344207311385e12,8.350582853952268e12,8.353826532639442e12,8.357072978690025e12,8.360326759067977e12,8.363585612738031e12,8.366847264500342e12,8.370116302806749e12,8.373390456135736e12,8.376667438685073e12,8.379951860572386e12,8.383241439704852e12,8.386533879591453e12,8.389833812195603e12,8.393138944767153e12,8.396446970038875e12,8.399762542002135e12,8.403083357162423e12,8.406407097387867e12,8.40973843888213e12,8.413075067318292e12,8.416414653610371e12,8.419761896360877e12,8.423114470321416e12,8.426470035361358e12,8.429833312670884e12,8.433201965989997e12,8.436573644051837e12,8.43995309082534e12,8.44333795894773e12,8.446725885923241e12,8.45012163869299e12,8.453522858699154e12,8.456929561364511e12,8.46033936907446e12,8.463757079706463e12,8.46718031962969e12,8.470606699780075e12,8.474041041467823e12,8.477480959647504e12,8.480924053709173e12,8.484375168597209e12,8.487831907755613e12,8.491291858930986e12,8.494759890905807e12,8.498233595516377e12,8.501710548767106e12,8.50519564348501e12,8.508686459800408e12,8.51218056187557e12,8.515682866791068e12,8.51919094287176e12,8.522702342336615e12,8.526222006731395e12,8.529747492474808e12,8.533276339740134e12,8.536813514752605e12,8.540356561922865e12,8.543903009274869e12,8.547457847930292e12,8.551018610188562e12,8.554582811819394e12,8.558155469060622e12,8.561734101996044e12,8.565316214034923e12,8.568906846753759e12,8.572503507915016e12,8.57610621525342e12,8.579712455529172e12,8.583327304456694e12,8.586948253202336e12,8.590572775912879e12,8.594205974171707e12,8.597845326572069e12,8.601488294536663e12,8.605140005749969e12,8.608797926122002e12,8.612459504239318e12,8.616129894122624e12,8.619806548887189e12,8.623486904169968e12,8.627176140566059e12,8.630871698283084e12,8.6345709998935e12,8.638279252808068e12,8.641993884212428e12,8.645712303498194e12,8.649439745136208e12,8.653173623174349e12,8.656911333705567e12,8.660658138508401e12,8.664411438375729e12,8.668168615982508e12,8.671934960665851e12,8.675707859844894e12,8.679484682655754e12,8.683270746248304e12,8.687063424547688e12,8.690862737804649e12,8.694666036911749e12,8.698478676505983e12,8.702298012329721e12,8.706121381448592e12,8.709954166918691e12,8.713793710701757e12,8.717637335910358e12,8.721490454285338e12,8.72535039388232e12,8.72921446373303e12,8.733088104532286e12,8.736968630302473e12,8.740853335865032e12,8.74474769114162e12,8.748648995992596e12,8.752554530897983e12,8.756469795282823e12,8.760392074714992e12,8.764318635200229e12,8.768255005947279e12,8.772198458099353e12,8.776146243053288e12,8.780103920085682e12,8.784068745781156e12,8.788037956791241e12,8.792017142748429e12,8.796003545543067e12,8.799994386943154e12,8.803995287229086e12,8.808003473459443e12,8.81201615237862e12,8.816038975210969e12,8.820069154043977e12,8.82410671244911e12,8.828148836916967e12,8.832201220400617e12,8.836261054804922e12,8.840325511262664e12,8.844400314377814e12,8.848482640751707e12,8.852569646012855e12,8.856667086726182e12,8.860772124043816e12,8.864881897941547e12,8.869002197259676e12,8.873130167553477e12,8.87726293299553e12,8.88140631502039e12,8.885557443436812e12,8.889713426461625e12,8.893880118447041e12,8.898054633303588e12,8.902234063137697e12,8.906424295547264e12,8.910622428390793e12,8.914825537507543e12,8.919039544073809e12,8.923261529740166e12,8.92748855391974e12,8.931726571704748e12,8.93597264837976e12,8.940223826770602e12,8.944486096227807e12,8.948756505509672e12,8.953035081858873e12,8.957318845728916e12,8.961613832692031e12,8.965917069217e12,8.97022555878512e12,8.97454537204539e12,8.978873518557584e12,8.98320698466195e12,8.987551876443605e12,8.991905186385428e12,8.996263883515387e12,9.000634109719355e12,9.00501284023307e12,9.00939702659854e12,9.013792846872436e12,9.01819725887068e12,9.022607196473166e12,9.027028874282918e12,9.031459232520896e12,9.035895187226203e12,9.040342989929361e12,9.044799563078742e12,9.049261804691389e12,9.0537360036122e12,9.05821906433676e12,9.062707866676168e12,9.06720873718242e12,9.071718562215508e12,9.076234203194033e12,9.080762024775746e12,9.085298894999592e12,9.089841656702408e12,9.094396713052412e12,9.098960913579371e12,9.103534290456014e12,9.10811366144276e12,9.112705481698482e12,9.11730657577512e12,9.121913742398758e12,9.126533476207426e12,9.13116258279405e12,9.135797841651658e12,9.140445787323273e12,9.145103206245285e12,9.149766858475969e12,9.154443318895791e12,9.159129354584158e12,9.163821705959885e12,9.168526988680088e12,9.173241950263744e12,9.177963311282434e12,9.18269772861601e12,9.187441930016535e12,9.192192615997455e12,9.196956485114477e12,9.201730245143152e12,9.206510576324703e12,9.211304219350965e12,9.216107861808248e12,9.22091816344819e12,9.225741907566365e12,9.230575761343861e12,9.235416363822072e12,9.240270541375387e12,9.245134940560416e12,9.250006179484252e12,9.254891128082812e12,9.25978641206561e12,9.264692069761076e12,9.269604691007756e12,9.274531204591432e12,9.279468208071623e12,9.284412269816242e12,9.28937036332954e12,9.294339064791076e12,9.29931492086231e12,9.304304950275281e12,9.309305707595318e12,9.31431371753792e12,9.319336044580592e12,9.324369221436508e12,9.329409750631936e12,9.334464742916066e12,9.339530708908264e12,9.344604128698463e12,9.349692159842479e12,9.354791290620412e12,9.359897978434842e12,9.365019428192055e12,9.37015210558356e12,9.375292445069562e12,9.380447699459777e12,9.385614311603832e12,9.390788692760467e12,9.395978144205076e12,9.401179085688086e12,9.406387905003512e12,9.4116119524642e12,9.416847624459922e12,9.422094966333398e12,9.427350334173623e12,9.432621144586852e12,9.43790376239949e12,9.443194519604846e12,9.44850088321897e12,9.453819194081047e12,9.459145759810936e12,9.4644880984395e12,9.469842526542895e12,9.475205327085201e12,9.4805840697276e12,9.485975046502885e12,9.491374515432402e12,9.496790098433826e12,9.502218062711686e12,9.507654641052865e12,9.51310750826868e12,9.518572906445768e12,9.524047042839984e12,9.529537645804629e12,9.535040932014033e12,9.540553082891498e12,9.546081880992105e12,9.551623517278559e12,9.557174147035021e12,9.562741607689877e12,9.56832206418988e12,9.573911645368303e12,9.579518244210346e12,9.58513799933737e12,9.590767012814709e12,9.596413233880195e12,9.602072774515115e12,9.607745689804004e12,9.61342804561697e12,9.619127867303934e12,9.624841230825244e12,9.630564174522092e12,9.636304781669984e12,9.642059100833988e12,9.64782314249087e12,9.653605048580588e12,9.659400839939992e12,9.665206498840115e12,9.671030226637824e12,9.67686801610308e12,9.682715820953932e12,9.688581902730535e12,9.694462225791418e12,9.700352714948332e12,9.70626169270536e12,9.712185094659053e12,9.71811881635534e12,9.724071242057469e12,9.730038278243355e12,9.73601579082722e12,9.742012226641705e12,9.748023462683123e12,9.754045334861627e12,9.760086353404805e12,9.766142365458002e12,9.772209176548297e12,9.778295361139498e12,9.784396736150055e12,9.790513368053121e12,9.796641021261246e12,9.802788357228213e12,9.80895115197114e12,9.81512513860842e12,9.821319044856463e12,9.827528615601926e12,9.833749552266773e12,9.839990649726617e12,9.846247621338746e12,9.852516136419088e12,9.858805057916557e12,9.86511006725291e12,9.87142680122093e12,9.877764191774883e12,9.884117887987441e12,9.890483493703428e12,9.896870010832957e12,9.903273055678453e12,9.909688198704125e12,9.916124512745312e12,9.922577580905281e12,9.929042939826902e12,9.935529734259527e12,9.942033513670396e12,9.94854978043208e12,9.955087752216637e12,9.961642944410271e12,9.968210824657842e12,9.974800684583244e12,9.981408005038309e12,9.988028218474125e12,9.99467069151653e12,1.0001330870021107e13,1.0008008836742426e13,1.00146999764634e13,1.0021413757489277e13,1.0028145578277584e13,1.0034890787295113e13,1.0041658930384182e13,1.004844536989397e13,1.0055245417478703e13,1.0062068697641967e13,1.0068910536132754e13,1.0075766207286666e13,1.008264541541632e13,1.008954344916921e13,1.0096455545046398e13,1.010339148834151e13,1.0110346530089506e13,1.0117315868430928e13,1.0124309370837236e13,1.0131322250209895e13,1.0138349665792578e13,1.0145401568456994e13,1.0152473132439945e13,1.0159559477541285e13,1.016667063928167e13,1.0173801752691613e13,1.0180947897569336e13,1.0188119195360154e13,1.0195310741335979e13,1.0202517574724398e13,1.0209749904198928e13,1.0217002784709553e13,1.0224276318668994e13,1.0231565490302547e13,1.0238880626672223e13,1.0246216728066418e13,1.025356873676714e13,1.0260947070218898e13,1.0268346687029404e13,1.0275762486929098e13,1.0283204979147104e13,1.0290669080008438e13,1.0298149646071238e13,1.030565727978282e13,1.0313186854571238e13,1.0320733183188816e13,1.0328306962767021e13,1.033590302321011e13,1.0343516132817934e13,1.0351157084905455e13,1.035882066521337e13,1.036650159692895e13,1.0374210771084332e13,1.038194292860365e13,1.0389692746887654e13,1.0397471216254738e13,1.0405273032145871e13,1.041309282548714e13,1.0420941687488736e13,1.0428814267427912e13,1.0436705149053363e13,1.0444625526110215e13,1.0452570001017111e13,1.0460533109627646e13,1.0468526149903766e13,1.0476543676695896e13,1.0484585821580793e13,1.0492647055404998e13,1.0500738817780049e13,1.0508855598998277e13,1.0516991820275867e13,1.0525159029523207e13,1.0533351667749129e13,1.054156410576881e13,1.054980800161147e13,1.0558077746240855e13,1.056636765928364e13,1.0574689510752166e13,1.0583037640786959e13,1.05914063170214e13,1.0599807423360959e13,1.0608235248327844e13,1.061668400673954e13,1.0625165698351863e13,1.0633674559256143e13,1.0642204750613074e13,1.0650768390034787e13,1.0659359660351223e13,1.0667972668206588e13,1.0676619651125625e13,1.0685294737827945e13,1.0693991979562209e13,1.0702723735874094e13,1.071148408050497e13,1.0720267008409002e13,1.0729085003314846e13,1.0737932083098242e13,1.0746808416057021e13,1.0755707920647648e13,1.0764643249645559e13,1.0773608345019371e13,1.0782597066752777e13,1.0791622197068459e13,1.080067761991977e13,1.0809757135848092e13,1.0818873658878037e13,1.0828021013991207e13,1.0837192941294617e13,1.084640248903163e13,1.0855643422233578e13,1.0864909419557865e13,1.087421366594773e13,1.0883549865483043e13,1.0892911634332492e13,1.0902312296686875e13,1.0911745494650084e13,1.0921204780838396e13,1.0930703621306771e13,1.09402355951346e13,1.0949794190296744e13,1.0959393017400299e13,1.0969025591426914e13,1.0978685334594955e13,1.0988386004825592e13,1.0998121051904031e13,1.1007883831150217e13,1.1017688250637955e13,1.1027527693831115e13,1.1037395447981615e13,1.104730557423391e13,1.1057251388578645e13,1.1067233116533334e13,1.1077243952718275e13,1.108729816706641e13,1.109738898375871e13,1.1107509526505885e13,1.1117674225446154e13,1.1127876234489926e13,1.1138108605170238e13,1.1148385931035389e13,1.1158701294477418e13,1.1169047673552053e13,1.1179439828515676e13,1.1189870768963445e13,1.1200333398141633e13,1.1210842646409473e13,1.1221391449255115e13,1.1231972633749684e13,1.1242601303850566e13,1.1253270319596182e13,1.1263972430482234e13,1.1274722917664016e13,1.1285514564353906e13,1.129634004103623e13,1.1307214809772541e13,1.131813157553824e13,1.1329082928333504e13,1.1340084514947424e13,1.1351128960671777e13,1.1362208773511867e13,1.1373339788923062e13,1.138451455103007e13,1.139573336160286e13,1.1406988616895682e13,1.1418296410273164e13,1.1429649175257371e13,1.144103922242795e13,1.1452482843490652e13,1.1463972387189334e13,1.1475500076782729e13,1.1487082406683936e13,1.1498711639243965e13,1.1510379908710781e13,1.1522103916711064e13,1.1533875837546293e13,1.1545687714718844e13,1.1557556461721176e13,1.156947416310515e13,1.1581432769846344e13,1.1593449412107402e13,1.1605516082945742e13,1.1617624638980984e13,1.1629792432009197e13,1.1642011361802346e13,1.1654273188745453e13,1.1666595491397018e13,1.1678970074404934e13,1.1691388599989854e13,1.1703868878774822e13,1.1716402618395902e13,1.1728981380926826e13,1.1741623214538148e13,1.1754319727915652e13,1.1767062380949057e13,1.1779869465028428e13,1.1792732487898525e13,1.1805651878541494e13,1.1818618957327002e13,1.183165234912367e13,1.1844743423889857e13,1.185788339483555e13,1.1871091144068643e13,1.1884357935748447e13,1.1897674873693088e13,1.1911061103617094e13,1.1924507781703428e13,1.1938005900083383e13,1.1951574874675748e13,1.196520575144998e13,1.1978889408490754e13,1.1992645538760027e13,1.2006465075714887e13,1.2020338780966602e13,1.2034286631612248e13,1.2048299446234018e13,1.2062367867473824e13,1.2076512163921225e13,1.209072303685539e13,1.2104991007381463e13,1.211933664321748e13,1.2133750525843826e13,1.2148223052187652e13,1.2162775097024146e13,1.217739711946939e13,1.2192079389555154e13,1.2206843097349975e13,1.2221678576968287e13,1.2236575968750426e13,1.225155678661787e13,1.2266611236972096e13,1.2281739955503576e13,1.229693290513003e13,1.2312212045509045e13,1.2327567408398148e13,1.2342988820178918e13,1.2358498585689652e13,1.2374086602348068e13,1.2389742556922668e13,1.2405489109198383e13,1.2421316019279113e13,1.2437212831153248e13,1.2453202569723344e13,1.2469274854721744e13,1.2485419084096863e13,1.2501658658467254e13,1.2517983054049994e13,1.2534381519397975e13,1.2550877841895447e13,1.256746135101222e13,1.2584121142451629e13,1.260088140189019e13,1.261773130872793e13,1.2634659802263219e13,1.2651691478495713e13,1.2668815363340379e13,1.2686020236030992e13,1.2703331115454883e13,1.2720736870531773e13,1.273822611666411e13,1.275582430875667e13,1.277352015512672e13,1.2791314608053227e13,1.2809196058433814e13,1.2827190564030559e13,1.2845286613228504e13,1.2863472423872357e13,1.2881774522772129e13,1.2900181228905143e13,1.2918680582919412e13,1.2937299595946258e13,1.2956026413611205e13,1.2974848895102996e13,1.2993794551879502e13,1.3012851352165955e13,1.303200696930809e13,1.3051289431874209e13,1.3070686526535273e13,1.3090185736286955e13,1.3109815624421055e13,1.312956379179406e13,1.3149417526419338e13,1.3169405944809115e13,1.3189516457638686e13,1.320973615318014e13,1.3230094720606148e13,1.3250579375937764e13,1.3271177002818994e13,1.3291917883530273e13,1.3312789034859879e13,1.3333777130808492e13,1.335491306828865e13,1.3376183660173389e13,1.3397575365676436e13,1.3419119719019576e13,1.3440803324376654e13,1.3462627764520348e13,1.3484579204042781e13,1.3506690064388041e13,1.352894666383698e13,1.3551334939699441e13,1.3573888008604908e13,1.359659196859931e13,1.361943252414985e13,1.364244351423069e13,1.36656108115631e13,1.3688919882094068e13,1.3712405315870623e13,1.3736052755123512e13,1.3759847421491021e13,1.3783824686511371e13,1.3807969956693525e13,1.3832268203475932e13,1.3856755612129562e13,1.3881417348158182e13,1.3906238126817271e13,1.3931254981321602e13,1.3956452830850443e13,1.3981816128414684e13,1.4007382791514447e13,1.4033137487669209e13,1.4059064401521908e13,1.4085202373507783e13,1.4111535814159219e13,1.4138048633586922e13,1.4164780636315533e13,1.4191715970600082e13,1.4218857358524658e13,1.4246188334523545e13,1.4273750057412031e13,1.4301526317621688e13,1.432950036066551e13,1.4357714416484703e13,1.4386152001242227e13,1.4414796065446904e13,1.444368996137855e13,1.4472816926058148e13,1.4502159609024006e13,1.4531762539744383e13,1.456160867147102e13,1.4591680346980773e13,1.462202333176353e13,1.4652620290996477e13,1.468345325515032e13,1.4714569288940861e13,1.4745950765577904e13,1.4777579398012697e13,1.4809503618197787e13,1.4841705504003174e13,1.4874166446081154e13,1.490693631692847e13,1.4939996896352188e13,1.4973329248482984e13,1.5006984765518941e13,1.5040944927284248e13,1.507519046786994e13,1.5109774384808197e13,1.51446778570075e13,1.5179881285883584e13,1.521543936712139e13,1.5251332978988049e13,1.5287567701683623e13,1.5324123490861424e13,1.5361057464889973e13,1.5398350104171564e13,1.543598103024942e13,1.5474009308935178e13,1.551241512690606e13,1.5551177773707676e13,1.559035838588841e13,1.562993686292064e13,1.5669892166645367e13,1.5710287639277475e13,1.5751102902403395e13,1.5792316597116695e13,1.5833994419336486e13,1.587611572547027e13,1.591865884607248e13,1.5961691993618469e13,1.6005194276146127e13,1.6049143727844197e13,1.6093611257396662e13,1.6138575746251203e13,1.6184014951240525e13,1.6230002676031383e13,1.6276517603288338e13,1.6323537237399902e13,1.6371138497636506e13,1.6419299903007953e13,1.6467998737581205e13,1.6517315281911861e13,1.6567227935392297e13,1.661774942291384e13,1.6668856800267943e13,1.6720635262732406e13,1.6773063137829613e13,1.6826117373814447e13,1.6879887220768744e13,1.6934351035879137e13,1.6989485730008209e13,1.7045384969179516e13,1.7102027230956926e13,1.7159389476537445e13,1.72175701968817e13,1.7276548102155754e13,1.73363003133857e13,1.739693061178877e13,1.7458418078970955e13,1.7520740132336064e13,1.7584006375350268e13,1.764819643296426e13,1.7713288189277254e13,1.7779397681406508e13,1.784650529083724e13,1.7914589581034746e13,1.798377372937256e13,1.8054039138878656e13,1.8125365318455645e13,1.819788340727898e13,1.8271576160344547e13,1.8346424365786066e13,1.8422568085942496e13,1.8499991841311285e13,1.8578678119487656e13,1.865877703878614e13,1.8740275405057664e13,1.88232165750782e13,1.8907586152849773e13,1.899354980164388e13,1.9081098425920527e13,1.917022080003118e13,1.9261096204679465e13,1.9353719648659656e13,1.94480840148891e13,1.954438427550591e13,1.9642620705785863e13,1.9742791507759035e13,1.98451098819144e13,1.994958287283999e13,2.0056215576253555e13,2.0165242557721535e13,2.0276679592019156e13,2.039054073541038e13,2.0507085842908e13,2.0626342003916562e13,2.074833497643402e13,2.087335487884421e13,2.1001443560340883e13,2.1132642158795285e13,2.126727745119147e13,2.140541069812591e13,2.1547103418170293e13,2.1692727401524977e13,2.1842369692133727e13,2.199611909080502e13,2.2154403510923914e13,2.2317344652524652e13,2.248518768298606e13,2.265807352171643e13,2.2836529301756758e13,2.3020743419175438e13,2.321091353690533e13,2.3407667641963793e13,2.3611267463659316e13,2.3821990583430152e13,2.404059954957761e13,2.4267460552325906e13,2.450296624115792e13,2.47480636935933e13,2.5003271677700715e13,2.5269152961973703e13,2.554691595974829e13,2.5837309125480938e13,2.6141154922908133e13,2.646004633565219e13,2.6795090534710723e13,2.714752230679031e13,2.751952740322729e13,2.791279933127792e13,2.8329260416017805e13,2.877206391917542e13,2.9243918552436887e13,2.974796708749579e13,3.028906084961544e13,3.0871802952098324e13,3.1501688303438207e13,3.2186846509016453e13,3.2935791355934945e13,3.3759091878922652e13,3.4672094331769254e13,3.569263152609442e13,3.6845028565626445e13,3.8161330027327695e13,3.9689640200728914e13,4.149649682428805e13,4.368325102818357e13,4.642074252770196e13,5.000581315165213e13,5.503530471267301e13,6.299969714785929e13,7.937464457358992e13,8.936273482664395e14],"x":[1.0e-38,9.998000799880047e-39,9.996001599760096e-39,9.994002399640143e-39,9.992003199520192e-39,9.990003999400239e-39,9.988004799280288e-39,9.986005599160335e-39,9.984006399040384e-39,9.982007198920431e-39,9.98000799880048e-39,9.978008798680527e-39,9.976009598560576e-39,9.974010398440623e-39,9.972011198320672e-39,9.970011998200719e-39,9.968012798080768e-39,9.966013597960815e-39,9.964014397840864e-39,9.962015197720911e-39,9.96001599760096e-39,9.958016797481007e-39,9.956017597361055e-39,9.954018397241103e-39,9.952019197121151e-39,9.950019997001199e-39,9.948020796881247e-39,9.946021596761295e-39,9.944022396641343e-39,9.942023196521391e-39,9.94002399640144e-39,9.938024796281487e-39,9.936025596161535e-39,9.934026396041583e-39,9.932027195921631e-39,9.930027995801679e-39,9.928028795681727e-39,9.926029595561775e-39,9.924030395441823e-39,9.922031195321871e-39,9.92003199520192e-39,9.918032795081967e-39,9.916033594962015e-39,9.914034394842063e-39,9.912035194722111e-39,9.910035994602159e-39,9.908036794482207e-39,9.906037594362255e-39,9.904038394242303e-39,9.90203919412235e-39,9.900039994002399e-39,9.898040793882447e-39,9.896041593762494e-39,9.894042393642543e-39,9.89204319352259e-39,9.890043993402639e-39,9.888044793282686e-39,9.886045593162735e-39,9.884046393042782e-39,9.88204719292283e-39,9.880047992802878e-39,9.878048792682927e-39,9.876049592562974e-39,9.874050392443023e-39,9.87205119232307e-39,9.870051992203119e-39,9.868052792083166e-39,9.866053591963215e-39,9.864054391843262e-39,9.86205519172331e-39,9.860055991603358e-39,9.858056791483407e-39,9.856057591363454e-39,9.854058391243502e-39,9.85205919112355e-39,9.850059991003598e-39,9.848060790883646e-39,9.846061590763694e-39,9.844062390643742e-39,9.84206319052379e-39,9.840063990403838e-39,9.838064790283886e-39,9.836065590163934e-39,9.834066390043982e-39,9.83206718992403e-39,9.830067989804078e-39,9.828068789684126e-39,9.826069589564174e-39,9.824070389444222e-39,9.82207118932427e-39,9.820071989204318e-39,9.818072789084366e-39,9.816073588964414e-39,9.814074388844462e-39,9.81207518872451e-39,9.810075988604558e-39,9.808076788484606e-39,9.806077588364654e-39,9.804078388244702e-39,9.80207918812475e-39,9.800079988004798e-39,9.798080787884846e-39,9.796081587764894e-39,9.794082387644941e-39,9.79208318752499e-39,9.790083987405037e-39,9.788084787285086e-39,9.786085587165133e-39,9.784086387045182e-39,9.782087186925229e-39,9.780087986805278e-39,9.778088786685325e-39,9.776089586565374e-39,9.774090386445421e-39,9.77209118632547e-39,9.770091986205517e-39,9.768092786085566e-39,9.766093585965613e-39,9.764094385845662e-39,9.762095185725709e-39,9.760095985605758e-39,9.758096785485805e-39,9.756097585365854e-39,9.754098385245901e-39,9.75209918512595e-39,9.750099985005997e-39,9.748100784886046e-39,9.746101584766093e-39,9.744102384646141e-39,9.742103184526189e-39,9.740103984406237e-39,9.738104784286285e-39,9.736105584166333e-39,9.734106384046381e-39,9.73210718392643e-39,9.730107983806477e-39,9.728108783686525e-39,9.726109583566573e-39,9.724110383446621e-39,9.722111183326669e-39,9.720111983206717e-39,9.718112783086765e-39,9.716113582966813e-39,9.714114382846861e-39,9.71211518272691e-39,9.710115982606957e-39,9.708116782487005e-39,9.706117582367053e-39,9.704118382247101e-39,9.702119182127149e-39,9.700119982007197e-39,9.698120781887245e-39,9.696121581767293e-39,9.694122381647341e-39,9.692123181527389e-39,9.690123981407437e-39,9.688124781287484e-39,9.686125581167533e-39,9.68412638104758e-39,9.682127180927629e-39,9.680127980807676e-39,9.678128780687725e-39,9.676129580567772e-39,9.67413038044782e-39,9.672131180327868e-39,9.670131980207917e-39,9.668132780087964e-39,9.666133579968013e-39,9.66413437984806e-39,9.662135179728109e-39,9.660135979608156e-39,9.658136779488205e-39,9.656137579368252e-39,9.6541383792483e-39,9.652139179128348e-39,9.650139979008397e-39,9.648140778888444e-39,9.646141578768493e-39,9.64414237864854e-39,9.642143178528589e-39,9.640143978408636e-39,9.638144778288684e-39,9.636145578168732e-39,9.63414637804878e-39,9.632147177928828e-39,9.630147977808876e-39,9.628148777688924e-39,9.626149577568972e-39,9.62415037744902e-39,9.622151177329068e-39,9.620151977209116e-39,9.618152777089164e-39,9.616153576969212e-39,9.61415437684926e-39,9.612155176729308e-39,9.610155976609356e-39,9.608156776489404e-39,9.606157576369452e-39,9.6041583762495e-39,9.602159176129548e-39,9.600159976009596e-39,9.598160775889644e-39,9.596161575769692e-39,9.59416237564974e-39,9.592163175529788e-39,9.590163975409836e-39,9.588164775289884e-39,9.586165575169931e-39,9.58416637504998e-39,9.582167174930027e-39,9.580167974810076e-39,9.578168774690123e-39,9.576169574570172e-39,9.574170374450219e-39,9.572171174330268e-39,9.570171974210315e-39,9.568172774090364e-39,9.566173573970411e-39,9.56417437385046e-39,9.562175173730507e-39,9.560175973610556e-39,9.558176773490603e-39,9.556177573370652e-39,9.554178373250699e-39,9.552179173130748e-39,9.550179973010795e-39,9.548180772890844e-39,9.546181572770891e-39,9.54418237265094e-39,9.542183172530987e-39,9.540183972411036e-39,9.538184772291083e-39,9.536185572171132e-39,9.534186372051179e-39,9.532187171931228e-39,9.530187971811275e-39,9.528188771691323e-39,9.526189571571371e-39,9.52419037145142e-39,9.522191171331467e-39,9.520191971211515e-39,9.518192771091563e-39,9.516193570971611e-39,9.514194370851659e-39,9.512195170731707e-39,9.510195970611755e-39,9.508196770491803e-39,9.506197570371851e-39,9.5041983702519e-39,9.502199170131947e-39,9.500199970011995e-39,9.498200769892043e-39,9.496201569772091e-39,9.494202369652139e-39,9.492203169532187e-39,9.490203969412235e-39,9.488204769292283e-39,9.486205569172331e-39,9.484206369052378e-39,9.482207168932427e-39,9.480207968812474e-39,9.478208768692523e-39,9.47620956857257e-39,9.474210368452619e-39,9.472211168332666e-39,9.470211968212715e-39,9.468212768092762e-39,9.46621356797281e-39,9.464214367852858e-39,9.462215167732907e-39,9.460215967612954e-39,9.458216767493003e-39,9.45621756737305e-39,9.454218367253099e-39,9.452219167133146e-39,9.450219967013195e-39,9.448220766893242e-39,9.44622156677329e-39,9.444222366653338e-39,9.442223166533387e-39,9.440223966413434e-39,9.438224766293483e-39,9.43622556617353e-39,9.434226366053579e-39,9.432227165933626e-39,9.430227965813675e-39,9.428228765693722e-39,9.42622956557377e-39,9.424230365453818e-39,9.422231165333866e-39,9.420231965213914e-39,9.418232765093962e-39,9.41623356497401e-39,9.414234364854058e-39,9.412235164734106e-39,9.410235964614154e-39,9.408236764494202e-39,9.40623756437425e-39,9.404238364254298e-39,9.402239164134346e-39,9.400239964014394e-39,9.398240763894442e-39,9.39624156377449e-39,9.394242363654538e-39,9.392243163534586e-39,9.390243963414634e-39,9.388244763294682e-39,9.38624556317473e-39,9.384246363054778e-39,9.382247162934825e-39,9.380247962814874e-39,9.378248762694921e-39,9.37624956257497e-39,9.374250362455017e-39,9.372251162335066e-39,9.370251962215113e-39,9.368252762095162e-39,9.366253561975209e-39,9.364254361855258e-39,9.362255161735305e-39,9.360255961615354e-39,9.358256761495401e-39,9.35625756137545e-39,9.354258361255497e-39,9.352259161135546e-39,9.350259961015593e-39,9.348260760895642e-39,9.346261560775689e-39,9.344262360655738e-39,9.342263160535785e-39,9.340263960415834e-39,9.338264760295881e-39,9.33626556017593e-39,9.334266360055977e-39,9.332267159936026e-39,9.330267959816073e-39,9.328268759696122e-39,9.326269559576169e-39,9.324270359456218e-39,9.322271159336265e-39,9.320271959216314e-39,9.318272759096361e-39,9.31627355897641e-39,9.314274358856457e-39,9.312275158736505e-39,9.310275958616553e-39,9.308276758496601e-39,9.306277558376649e-39,9.304278358256697e-39,9.302279158136745e-39,9.300279958016793e-39,9.298280757896841e-39,9.29628155777689e-39,9.294282357656937e-39,9.292283157536985e-39,9.290283957417033e-39,9.288284757297081e-39,9.286285557177129e-39,9.284286357057177e-39,9.282287156937225e-39,9.280287956817273e-39,9.278288756697321e-39,9.276289556577368e-39,9.274290356457417e-39,9.272291156337464e-39,9.270291956217513e-39,9.26829275609756e-39,9.266293555977609e-39,9.264294355857656e-39,9.262295155737705e-39,9.260295955617752e-39,9.258296755497801e-39,9.256297555377848e-39,9.254298355257897e-39,9.252299155137944e-39,9.250299955017993e-39,9.24830075489804e-39,9.246301554778089e-39,9.244302354658136e-39,9.242303154538185e-39,9.240303954418232e-39,9.23830475429828e-39,9.236305554178328e-39,9.234306354058377e-39,9.232307153938424e-39,9.230307953818473e-39,9.22830875369852e-39,9.226309553578569e-39,9.224310353458616e-39,9.222311153338665e-39,9.220311953218712e-39,9.21831275309876e-39,9.216313552978808e-39,9.214314352858857e-39,9.212315152738904e-39,9.210315952618953e-39,9.208316752499e-39,9.206317552379048e-39,9.204318352259096e-39,9.202319152139144e-39,9.200319952019192e-39,9.19832075189924e-39,9.196321551779288e-39,9.194322351659336e-39,9.192323151539384e-39,9.190323951419432e-39,9.18832475129948e-39,9.186325551179528e-39,9.184326351059576e-39,9.182327150939624e-39,9.180327950819672e-39,9.17832875069972e-39,9.176329550579768e-39,9.174330350459815e-39,9.172331150339864e-39,9.170331950219911e-39,9.16833275009996e-39,9.166333549980007e-39,9.164334349860056e-39,9.162335149740103e-39,9.160335949620152e-39,9.158336749500199e-39,9.156337549380248e-39,9.154338349260295e-39,9.152339149140344e-39,9.150339949020391e-39,9.14834074890044e-39,9.146341548780487e-39,9.144342348660536e-39,9.142343148540583e-39,9.140343948420632e-39,9.138344748300679e-39,9.136345548180728e-39,9.134346348060775e-39,9.132347147940824e-39,9.130347947820871e-39,9.12834874770092e-39,9.126349547580967e-39,9.124350347461016e-39,9.122351147341063e-39,9.120351947221112e-39,9.118352747101159e-39,9.116353546981208e-39,9.114354346861255e-39,9.112355146741304e-39,9.110355946621351e-39,9.1083567465014e-39,9.106357546381447e-39,9.104358346261496e-39,9.102359146141543e-39,9.100359946021591e-39,9.098360745901639e-39,9.096361545781687e-39,9.094362345661735e-39,9.092363145541783e-39,9.090363945421831e-39,9.08836474530188e-39,9.086365545181927e-39,9.084366345061975e-39,9.082367144942023e-39,9.080367944822071e-39,9.078368744702119e-39,9.076369544582167e-39,9.074370344462215e-39,9.072371144342262e-39,9.070371944222311e-39,9.068372744102358e-39,9.066373543982407e-39,9.064374343862454e-39,9.062375143742503e-39,9.06037594362255e-39,9.058376743502599e-39,9.056377543382646e-39,9.054378343262695e-39,9.052379143142742e-39,9.050379943022791e-39,9.048380742902838e-39,9.046381542782887e-39,9.044382342662934e-39,9.042383142542983e-39,9.04038394242303e-39,9.038384742303079e-39,9.036385542183126e-39,9.034386342063175e-39,9.032387141943222e-39,9.03038794182327e-39,9.028388741703318e-39,9.026389541583367e-39,9.024390341463414e-39,9.022391141343463e-39,9.02039194122351e-39,9.018392741103559e-39,9.016393540983606e-39,9.014394340863655e-39,9.012395140743702e-39,9.01039594062375e-39,9.008396740503798e-39,9.006397540383847e-39,9.004398340263894e-39,9.002399140143943e-39,9.00039994002399e-39,8.998400739904039e-39,8.996401539784086e-39,8.994402339664135e-39,8.992403139544182e-39,8.99040393942423e-39,8.988404739304278e-39,8.986405539184326e-39,8.984406339064374e-39,8.982407138944422e-39,8.98040793882447e-39,8.978408738704518e-39,8.976409538584566e-39,8.974410338464614e-39,8.972411138344662e-39,8.970411938224709e-39,8.968412738104758e-39,8.966413537984805e-39,8.964414337864854e-39,8.962415137744901e-39,8.96041593762495e-39,8.958416737504997e-39,8.956417537385046e-39,8.954418337265093e-39,8.952419137145142e-39,8.950419937025189e-39,8.948420736905238e-39,8.946421536785285e-39,8.944422336665334e-39,8.942423136545381e-39,8.94042393642543e-39,8.938424736305477e-39,8.936425536185526e-39,8.934426336065573e-39,8.932427135945622e-39,8.930427935825669e-39,8.928428735705718e-39,8.926429535585765e-39,8.924430335465814e-39,8.922431135345861e-39,8.92043193522591e-39,8.918432735105957e-39,8.916433534986006e-39,8.914434334866053e-39,8.912435134746102e-39,8.910435934626149e-39,8.908436734506198e-39,8.906437534386245e-39,8.904438334266294e-39,8.902439134146341e-39,8.90043993402639e-39,8.898440733906437e-39,8.896441533786486e-39,8.894442333666533e-39,8.892443133546582e-39,8.890443933426629e-39,8.888444733306678e-39,8.886445533186725e-39,8.884446333066773e-39,8.882447132946821e-39,8.88044793282687e-39,8.878448732706917e-39,8.876449532586965e-39,8.874450332467013e-39,8.872451132347061e-39,8.870451932227109e-39,8.868452732107157e-39,8.866453531987205e-39,8.864454331867252e-39,8.862455131747301e-39,8.860455931627348e-39,8.858456731507397e-39,8.856457531387444e-39,8.854458331267493e-39,8.85245913114754e-39,8.850459931027589e-39,8.848460730907636e-39,8.846461530787685e-39,8.844462330667732e-39,8.842463130547781e-39,8.840463930427828e-39,8.838464730307877e-39,8.836465530187924e-39,8.834466330067973e-39,8.83246712994802e-39,8.830467929828069e-39,8.828468729708116e-39,8.826469529588165e-39,8.824470329468212e-39,8.82247112934826e-39,8.820471929228308e-39,8.818472729108357e-39,8.816473528988404e-39,8.814474328868453e-39,8.8124751287485e-39,8.810475928628549e-39,8.808476728508596e-39,8.806477528388645e-39,8.804478328268692e-39,8.80247912814874e-39,8.800479928028788e-39,8.798480727908837e-39,8.796481527788884e-39,8.794482327668933e-39,8.79248312754898e-39,8.790483927429029e-39,8.788484727309076e-39,8.786485527189125e-39,8.784486327069172e-39,8.78248712694922e-39,8.780487926829268e-39,8.778488726709317e-39,8.776489526589364e-39,8.774490326469412e-39,8.77249112634946e-39,8.770491926229508e-39,8.768492726109556e-39,8.766493525989604e-39,8.764494325869652e-39,8.762495125749699e-39,8.760495925629748e-39,8.758496725509795e-39,8.756497525389844e-39,8.754498325269891e-39,8.75249912514994e-39,8.750499925029987e-39,8.748500724910036e-39,8.746501524790083e-39,8.744502324670132e-39,8.742503124550179e-39,8.740503924430228e-39,8.738504724310275e-39,8.736505524190324e-39,8.734506324070371e-39,8.73250712395042e-39,8.730507923830467e-39,8.728508723710516e-39,8.726509523590563e-39,8.724510323470612e-39,8.722511123350659e-39,8.720511923230708e-39,8.718512723110755e-39,8.716513522990804e-39,8.714514322870851e-39,8.7125151227509e-39,8.710515922630947e-39,8.708516722510996e-39,8.706517522391043e-39,8.704518322271092e-39,8.702519122151139e-39,8.700519922031188e-39,8.698520721911235e-39,8.696521521791284e-39,8.694522321671331e-39,8.69252312155138e-39,8.690523921431427e-39,8.688524721311476e-39,8.686525521191523e-39,8.684526321071572e-39,8.682527120951619e-39,8.680527920831668e-39,8.678528720711715e-39,8.676529520591764e-39,8.674530320471811e-39,8.67253112035186e-39,8.670531920231907e-39,8.668532720111955e-39,8.666533519992003e-39,8.664534319872051e-39,8.662535119752099e-39,8.660535919632146e-39,8.658536719512195e-39,8.656537519392242e-39,8.654538319272291e-39,8.652539119152338e-39,8.650539919032387e-39,8.648540718912434e-39,8.646541518792483e-39,8.64454231867253e-39,8.642543118552579e-39,8.640543918432626e-39,8.638544718312675e-39,8.636545518192722e-39,8.634546318072771e-39,8.632547117952818e-39,8.630547917832867e-39,8.628548717712914e-39,8.626549517592963e-39,8.62455031747301e-39,8.622551117353059e-39,8.620551917233106e-39,8.618552717113155e-39,8.616553516993202e-39,8.614554316873251e-39,8.612555116753298e-39,8.610555916633347e-39,8.608556716513394e-39,8.606557516393443e-39,8.60455831627349e-39,8.602559116153539e-39,8.600559916033586e-39,8.598560715913635e-39,8.596561515793682e-39,8.59456231567373e-39,8.592563115553778e-39,8.590563915433827e-39,8.588564715313874e-39,8.586565515193923e-39,8.58456631507397e-39,8.582567114954019e-39,8.580567914834066e-39,8.578568714714115e-39,8.576569514594162e-39,8.57457031447421e-39,8.572571114354258e-39,8.570571914234307e-39,8.568572714114354e-39,8.566573513994403e-39,8.56457431387445e-39,8.562575113754499e-39,8.560575913634546e-39,8.558576713514593e-39,8.556577513394642e-39,8.554578313274689e-39,8.552579113154738e-39,8.550579913034785e-39,8.548580712914834e-39,8.546581512794881e-39,8.54458231267493e-39,8.542583112554977e-39,8.540583912435026e-39,8.538584712315073e-39,8.536585512195122e-39,8.534586312075169e-39,8.532587111955218e-39,8.530587911835265e-39,8.528588711715314e-39,8.526589511595361e-39,8.52459031147541e-39,8.522591111355457e-39,8.520591911235506e-39,8.518592711115553e-39,8.516593510995602e-39,8.514594310875649e-39,8.512595110755698e-39,8.510595910635745e-39,8.508596710515794e-39,8.506597510395841e-39,8.50459831027589e-39,8.502599110155937e-39,8.500599910035986e-39,8.498600709916033e-39,8.496601509796082e-39,8.494602309676129e-39,8.492603109556178e-39,8.490603909436225e-39,8.488604709316274e-39,8.486605509196321e-39,8.48460630907637e-39,8.482607108956417e-39,8.480607908836466e-39,8.478608708716513e-39,8.476609508596562e-39,8.474610308476609e-39,8.472611108356658e-39,8.470611908236705e-39,8.468612708116754e-39,8.466613507996801e-39,8.46461430787685e-39,8.462615107756897e-39,8.460615907636946e-39,8.458616707516993e-39,8.456617507397042e-39,8.454618307277089e-39,8.452619107157136e-39,8.450619907037185e-39,8.448620706917232e-39,8.446621506797281e-39,8.444622306677328e-39,8.442623106557377e-39,8.440623906437424e-39,8.438624706317473e-39,8.43662550619752e-39,8.434626306077569e-39,8.432627105957616e-39,8.430627905837665e-39,8.428628705717712e-39,8.426629505597761e-39,8.424630305477808e-39,8.422631105357857e-39,8.420631905237904e-39,8.418632705117953e-39,8.416633504998e-39,8.414634304878049e-39,8.412635104758096e-39,8.410635904638145e-39,8.408636704518192e-39,8.406637504398241e-39,8.404638304278288e-39,8.402639104158337e-39,8.400639904038384e-39,8.398640703918433e-39,8.39664150379848e-39,8.394642303678529e-39,8.392643103558576e-39,8.390643903438625e-39,8.388644703318672e-39,8.38664550319872e-39,8.384646303078768e-39,8.382647102958817e-39,8.380647902838864e-39,8.378648702718913e-39,8.37664950259896e-39,8.374650302479009e-39,8.372651102359056e-39,8.370651902239105e-39,8.368652702119152e-39,8.3666535019992e-39,8.364654301879248e-39,8.362655101759297e-39,8.360655901639344e-39,8.358656701519393e-39,8.35665750139944e-39,8.354658301279489e-39,8.352659101159536e-39,8.350659901039583e-39,8.348660700919632e-39,8.346661500799679e-39,8.344662300679728e-39,8.342663100559775e-39,8.340663900439824e-39,8.338664700319871e-39,8.33666550019992e-39,8.334666300079967e-39,8.332667099960016e-39,8.330667899840063e-39,8.328668699720112e-39,8.326669499600159e-39,8.324670299480208e-39,8.322671099360255e-39,8.320671899240304e-39,8.318672699120351e-39,8.3166734990004e-39,8.314674298880447e-39,8.312675098760496e-39,8.310675898640543e-39,8.308676698520592e-39,8.306677498400639e-39,8.304678298280688e-39,8.302679098160735e-39,8.300679898040784e-39,8.298680697920831e-39,8.29668149780088e-39,8.294682297680927e-39,8.292683097560976e-39,8.290683897441023e-39,8.288684697321072e-39,8.286685497201119e-39,8.284686297081168e-39,8.282687096961215e-39,8.280687896841264e-39,8.278688696721311e-39,8.27668949660136e-39,8.274690296481407e-39,8.272691096361456e-39,8.270691896241503e-39,8.268692696121552e-39,8.266693496001599e-39,8.264694295881648e-39,8.262695095761695e-39,8.260695895641744e-39,8.258696695521791e-39,8.25669749540184e-39,8.254698295281887e-39,8.252699095161936e-39,8.250699895041983e-39,8.24870069492203e-39,8.246701494802079e-39,8.244702294682126e-39,8.242703094562175e-39,8.240703894442222e-39,8.238704694322271e-39,8.236705494202318e-39,8.234706294082367e-39,8.232707093962414e-39,8.230707893842463e-39,8.22870869372251e-39,8.226709493602559e-39,8.224710293482606e-39,8.222711093362655e-39,8.220711893242702e-39,8.218712693122751e-39,8.216713493002798e-39,8.214714292882847e-39,8.212715092762894e-39,8.210715892642943e-39,8.20871669252299e-39,8.206717492403039e-39,8.204718292283086e-39,8.202719092163135e-39,8.200719892043182e-39,8.198720691923231e-39,8.196721491803278e-39,8.194722291683327e-39,8.192723091563374e-39,8.190723891443423e-39,8.18872469132347e-39,8.186725491203519e-39,8.184726291083566e-39,8.182727090963615e-39,8.180727890843662e-39,8.178728690723711e-39,8.176729490603758e-39,8.174730290483807e-39,8.172731090363854e-39,8.170731890243903e-39,8.16873269012395e-39,8.166733490003999e-39,8.164734289884046e-39,8.162735089764095e-39,8.160735889644142e-39,8.15873668952419e-39,8.156737489404238e-39,8.154738289284287e-39,8.152739089164334e-39,8.150739889044383e-39,8.14874068892443e-39,8.146741488804477e-39,8.144742288684526e-39,8.142743088564573e-39,8.140743888444622e-39,8.138744688324669e-39,8.136745488204718e-39,8.134746288084765e-39,8.132747087964814e-39,8.130747887844861e-39,8.12874868772491e-39,8.126749487604957e-39,8.124750287485006e-39,8.122751087365053e-39,8.120751887245102e-39,8.118752687125149e-39,8.116753487005198e-39,8.114754286885245e-39,8.112755086765294e-39,8.110755886645341e-39,8.10875668652539e-39,8.106757486405437e-39,8.104758286285486e-39,8.102759086165533e-39,8.100759886045582e-39,8.098760685925629e-39,8.096761485805678e-39,8.094762285685725e-39,8.092763085565774e-39,8.090763885445821e-39,8.08876468532587e-39,8.086765485205917e-39,8.084766285085966e-39,8.082767084966013e-39,8.080767884846062e-39,8.078768684726109e-39,8.076769484606158e-39,8.074770284486205e-39,8.072771084366254e-39,8.070771884246301e-39,8.06877268412635e-39,8.066773484006397e-39,8.064774283886446e-39,8.062775083766493e-39,8.060775883646542e-39,8.058776683526589e-39,8.056777483406638e-39,8.054778283286685e-39,8.052779083166734e-39,8.050779883046781e-39,8.04878068292683e-39,8.046781482806877e-39,8.044782282686926e-39,8.042783082566973e-39,8.04078388244702e-39,8.038784682327069e-39,8.036785482207116e-39,8.034786282087165e-39,8.032787081967212e-39,8.030787881847261e-39,8.028788681727308e-39,8.026789481607357e-39,8.024790281487404e-39,8.022791081367453e-39,8.0207918812475e-39,8.018792681127549e-39,8.016793481007596e-39,8.014794280887645e-39,8.012795080767692e-39,8.010795880647741e-39,8.008796680527788e-39,8.006797480407837e-39,8.004798280287884e-39,8.002799080167933e-39,8.00079988004798e-39,7.998800679928029e-39,7.996801479808076e-39,7.994802279688125e-39,7.992803079568172e-39,7.990803879448221e-39,7.988804679328268e-39,7.986805479208317e-39,7.984806279088364e-39,7.982807078968413e-39,7.98080787884846e-39,7.978808678728509e-39,7.976809478608556e-39,7.974810278488605e-39,7.972811078368652e-39,7.970811878248701e-39,7.968812678128748e-39,7.966813478008797e-39,7.964814277888844e-39,7.962815077768893e-39,7.96081587764894e-39,7.958816677528989e-39,7.956817477409036e-39,7.954818277289085e-39,7.952819077169132e-39,7.95081987704918e-39,7.948820676929228e-39,7.946821476809277e-39,7.944822276689324e-39,7.942823076569373e-39,7.94082387644942e-39,7.938824676329467e-39,7.936825476209516e-39,7.934826276089563e-39,7.932827075969612e-39,7.930827875849659e-39,7.928828675729708e-39,7.926829475609755e-39,7.924830275489804e-39,7.922831075369851e-39,7.9208318752499e-39,7.918832675129947e-39,7.916833475009996e-39,7.914834274890043e-39,7.912835074770092e-39,7.910835874650139e-39,7.908836674530188e-39,7.906837474410235e-39,7.904838274290284e-39,7.902839074170331e-39,7.90083987405038e-39,7.898840673930427e-39,7.896841473810476e-39,7.894842273690523e-39,7.892843073570572e-39,7.890843873450619e-39,7.888844673330668e-39,7.886845473210715e-39,7.884846273090764e-39,7.882847072970811e-39,7.88084787285086e-39,7.878848672730907e-39,7.876849472610956e-39,7.874850272491003e-39,7.872851072371052e-39,7.870851872251099e-39,7.868852672131148e-39,7.866853472011195e-39,7.864854271891244e-39,7.862855071771291e-39,7.86085587165134e-39,7.858856671531387e-39,7.856857471411436e-39,7.854858271291483e-39,7.852859071171532e-39,7.850859871051579e-39,7.848860670931628e-39,7.846861470811675e-39,7.844862270691724e-39,7.842863070571771e-39,7.84086387045182e-39,7.838864670331867e-39,7.836865470211914e-39,7.834866270091963e-39,7.83286706997201e-39,7.830867869852059e-39,7.828868669732106e-39,7.826869469612155e-39,7.824870269492202e-39,7.822871069372251e-39,7.820871869252298e-39,7.818872669132347e-39,7.816873469012394e-39,7.814874268892443e-39,7.81287506877249e-39,7.810875868652539e-39,7.808876668532586e-39,7.806877468412635e-39,7.804878268292682e-39,7.802879068172731e-39,7.800879868052778e-39,7.798880667932827e-39,7.796881467812874e-39,7.794882267692923e-39,7.79288306757297e-39,7.790883867453019e-39,7.788884667333066e-39,7.786885467213115e-39,7.784886267093162e-39,7.782887066973211e-39,7.780887866853258e-39,7.778888666733307e-39,7.776889466613354e-39,7.774890266493403e-39,7.77289106637345e-39,7.770891866253499e-39,7.768892666133546e-39,7.766893466013595e-39,7.764894265893642e-39,7.762895065773691e-39,7.760895865653738e-39,7.758896665533787e-39,7.756897465413834e-39,7.754898265293883e-39,7.75289906517393e-39,7.750899865053979e-39,7.748900664934026e-39,7.746901464814075e-39,7.744902264694122e-39,7.74290306457417e-39,7.740903864454218e-39,7.738904664334267e-39,7.736905464214314e-39,7.734906264094361e-39,7.73290706397441e-39,7.730907863854457e-39,7.728908663734506e-39,7.726909463614553e-39,7.724910263494602e-39,7.722911063374649e-39,7.720911863254698e-39,7.718912663134745e-39,7.716913463014794e-39,7.714914262894841e-39,7.71291506277489e-39,7.710915862654937e-39,7.708916662534986e-39,7.706917462415033e-39,7.704918262295082e-39,7.702919062175129e-39,7.700919862055178e-39,7.698920661935225e-39,7.696921461815274e-39,7.694922261695321e-39,7.69292306157537e-39,7.690923861455417e-39,7.688924661335466e-39,7.686925461215513e-39,7.684926261095562e-39,7.682927060975609e-39,7.680927860855658e-39,7.678928660735705e-39,7.676929460615754e-39,7.674930260495801e-39,7.67293106037585e-39,7.670931860255897e-39,7.668932660135946e-39,7.666933460015993e-39,7.664934259896042e-39,7.662935059776089e-39,7.660935859656138e-39,7.658936659536185e-39,7.656937459416234e-39,7.654938259296281e-39,7.65293905917633e-39,7.650939859056377e-39,7.648940658936426e-39,7.646941458816473e-39,7.644942258696522e-39,7.642943058576569e-39,7.640943858456618e-39,7.638944658336665e-39,7.636945458216714e-39,7.634946258096761e-39,7.63294705797681e-39,7.630947857856857e-39,7.628948657736904e-39,7.626949457616953e-39,7.624950257497e-39,7.622951057377049e-39,7.620951857257096e-39,7.618952657137145e-39,7.616953457017192e-39,7.614954256897241e-39,7.612955056777288e-39,7.610955856657337e-39,7.608956656537384e-39,7.606957456417433e-39,7.60495825629748e-39,7.602959056177529e-39,7.600959856057576e-39,7.598960655937625e-39,7.596961455817672e-39,7.594962255697721e-39,7.592963055577768e-39,7.590963855457817e-39,7.588964655337864e-39,7.586965455217913e-39,7.58496625509796e-39,7.582967054978009e-39,7.580967854858056e-39,7.578968654738105e-39,7.576969454618152e-39,7.574970254498201e-39,7.572971054378248e-39,7.570971854258297e-39,7.568972654138344e-39,7.566973454018393e-39,7.56497425389844e-39,7.562975053778489e-39,7.560975853658536e-39,7.558976653538585e-39,7.556977453418632e-39,7.554978253298681e-39,7.552979053178728e-39,7.550979853058777e-39,7.548980652938824e-39,7.546981452818873e-39,7.54498225269892e-39,7.542983052578969e-39,7.540983852459016e-39,7.538984652339065e-39,7.536985452219112e-39,7.534986252099161e-39,7.532987051979208e-39,7.530987851859257e-39,7.528988651739304e-39,7.526989451619351e-39,7.5249902514994e-39,7.522991051379447e-39,7.520991851259496e-39,7.518992651139543e-39,7.516993451019592e-39,7.514994250899639e-39,7.512995050779688e-39,7.510995850659735e-39,7.508996650539784e-39,7.506997450419831e-39,7.50499825029988e-39,7.502999050179927e-39,7.500999850059976e-39,7.499000649940023e-39,7.497001449820072e-39,7.495002249700119e-39,7.493003049580168e-39,7.491003849460215e-39,7.489004649340264e-39,7.487005449220311e-39,7.48500624910036e-39,7.483007048980407e-39,7.481007848860456e-39,7.479008648740503e-39,7.477009448620552e-39,7.475010248500599e-39,7.473011048380648e-39,7.471011848260695e-39,7.469012648140744e-39,7.467013448020791e-39,7.46501424790084e-39,7.463015047780887e-39,7.461015847660936e-39,7.459016647540983e-39,7.457017447421032e-39,7.455018247301079e-39,7.453019047181128e-39,7.451019847061175e-39,7.449020646941224e-39,7.447021446821271e-39,7.44502224670132e-39,7.443023046581367e-39,7.441023846461416e-39,7.439024646341463e-39,7.437025446221512e-39,7.435026246101559e-39,7.433027045981608e-39,7.431027845861655e-39,7.429028645741704e-39,7.427029445621751e-39,7.425030245501798e-39,7.423031045381847e-39,7.421031845261894e-39,7.419032645141943e-39,7.41703344502199e-39,7.415034244902039e-39,7.413035044782086e-39,7.411035844662135e-39,7.409036644542182e-39,7.407037444422231e-39,7.405038244302278e-39,7.403039044182327e-39,7.401039844062374e-39,7.399040643942423e-39,7.39704144382247e-39,7.395042243702519e-39,7.393043043582566e-39,7.391043843462615e-39,7.389044643342662e-39,7.387045443222711e-39,7.385046243102758e-39,7.383047042982807e-39,7.381047842862854e-39,7.379048642742903e-39,7.37704944262295e-39,7.375050242502999e-39,7.373051042383046e-39,7.371051842263095e-39,7.369052642143142e-39,7.367053442023191e-39,7.365054241903238e-39,7.363055041783287e-39,7.361055841663334e-39,7.359056641543383e-39,7.35705744142343e-39,7.355058241303479e-39,7.353059041183526e-39,7.351059841063575e-39,7.349060640943622e-39,7.347061440823671e-39,7.345062240703718e-39,7.343063040583767e-39,7.341063840463814e-39,7.339064640343863e-39,7.33706544022391e-39,7.335066240103959e-39,7.333067039984006e-39,7.331067839864055e-39,7.329068639744102e-39,7.327069439624151e-39,7.325070239504198e-39,7.323071039384245e-39,7.321071839264294e-39,7.319072639144341e-39,7.31707343902439e-39,7.315074238904437e-39,7.313075038784486e-39,7.311075838664533e-39,7.309076638544582e-39,7.307077438424629e-39,7.305078238304678e-39,7.303079038184725e-39,7.301079838064774e-39,7.299080637944821e-39,7.29708143782487e-39,7.295082237704917e-39,7.293083037584966e-39,7.291083837465013e-39,7.289084637345062e-39,7.287085437225109e-39,7.285086237105158e-39,7.283087036985205e-39,7.281087836865254e-39,7.279088636745301e-39,7.27708943662535e-39,7.275090236505397e-39,7.273091036385446e-39,7.271091836265493e-39,7.269092636145542e-39,7.267093436025589e-39,7.265094235905638e-39,7.263095035785685e-39,7.261095835665734e-39,7.259096635545781e-39,7.25709743542583e-39,7.255098235305877e-39,7.253099035185926e-39,7.251099835065973e-39,7.249100634946022e-39,7.247101434826069e-39,7.245102234706118e-39,7.243103034586165e-39,7.241103834466214e-39,7.239104634346261e-39,7.23710543422631e-39,7.235106234106357e-39,7.233107033986406e-39,7.231107833866453e-39,7.229108633746502e-39,7.227109433626549e-39,7.225110233506598e-39,7.223111033386645e-39,7.221111833266694e-39,7.219112633146741e-39,7.217113433026788e-39,7.215114232906837e-39,7.213115032786884e-39,7.211115832666933e-39,7.20911663254698e-39,7.207117432427029e-39,7.205118232307076e-39,7.203119032187125e-39,7.201119832067172e-39,7.199120631947221e-39,7.197121431827268e-39,7.195122231707317e-39,7.193123031587364e-39,7.191123831467413e-39,7.18912463134746e-39,7.187125431227509e-39,7.185126231107556e-39,7.183127030987605e-39,7.181127830867652e-39,7.179128630747701e-39,7.177129430627748e-39,7.175130230507797e-39,7.173131030387844e-39,7.171131830267893e-39,7.16913263014794e-39,7.167133430027989e-39,7.165134229908036e-39,7.163135029788085e-39,7.161135829668132e-39,7.159136629548181e-39,7.157137429428228e-39,7.155138229308277e-39,7.153139029188324e-39,7.151139829068373e-39,7.14914062894842e-39,7.147141428828469e-39,7.145142228708516e-39,7.143143028588565e-39,7.141143828468612e-39,7.139144628348661e-39,7.137145428228708e-39,7.135146228108757e-39,7.133147027988804e-39,7.131147827868853e-39,7.1291486277489e-39,7.127149427628949e-39,7.125150227508996e-39,7.123151027389045e-39,7.121151827269092e-39,7.119152627149141e-39,7.117153427029188e-39,7.115154226909235e-39,7.113155026789284e-39,7.111155826669331e-39,7.10915662654938e-39,7.107157426429427e-39,7.105158226309476e-39,7.103159026189523e-39,7.101159826069572e-39,7.099160625949619e-39,7.097161425829668e-39,7.095162225709715e-39,7.093163025589764e-39,7.091163825469811e-39,7.08916462534986e-39,7.087165425229907e-39,7.085166225109956e-39,7.083167024990003e-39,7.081167824870052e-39,7.079168624750099e-39,7.077169424630148e-39,7.075170224510195e-39,7.073171024390244e-39,7.071171824270291e-39,7.06917262415034e-39,7.067173424030387e-39,7.065174223910436e-39,7.063175023790483e-39,7.061175823670532e-39,7.059176623550579e-39,7.057177423430628e-39,7.055178223310675e-39,7.053179023190724e-39,7.051179823070771e-39,7.04918062295082e-39,7.047181422830867e-39,7.045182222710916e-39,7.043183022590963e-39,7.041183822471012e-39,7.039184622351059e-39,7.037185422231108e-39,7.035186222111155e-39,7.033187021991204e-39,7.031187821871251e-39,7.0291886217513e-39,7.027189421631347e-39,7.025190221511396e-39,7.023191021391443e-39,7.021191821271492e-39,7.019192621151539e-39,7.017193421031588e-39,7.015194220911635e-39,7.013195020791682e-39,7.011195820671731e-39,7.009196620551778e-39,7.007197420431827e-39,7.005198220311874e-39,7.003199020191923e-39,7.00119982007197e-39,6.999200619952019e-39,6.997201419832066e-39,6.995202219712115e-39,6.993203019592162e-39,6.991203819472211e-39,6.989204619352258e-39,6.987205419232307e-39,6.985206219112354e-39,6.983207018992403e-39,6.98120781887245e-39,6.979208618752499e-39,6.977209418632546e-39,6.975210218512595e-39,6.973211018392642e-39,6.971211818272691e-39,6.969212618152738e-39,6.967213418032787e-39,6.965214217912834e-39,6.963215017792883e-39,6.96121581767293e-39,6.959216617552979e-39,6.957217417433026e-39,6.955218217313075e-39,6.953219017193122e-39,6.951219817073171e-39,6.949220616953218e-39,6.947221416833267e-39,6.945222216713314e-39,6.943223016593363e-39,6.94122381647341e-39,6.939224616353459e-39,6.937225416233506e-39,6.935226216113555e-39,6.933227015993602e-39,6.931227815873651e-39,6.929228615753698e-39,6.927229415633747e-39,6.925230215513794e-39,6.923231015393843e-39,6.92123181527389e-39,6.919232615153939e-39,6.917233415033986e-39,6.915234214914035e-39,6.913235014794082e-39,6.91123581467413e-39,6.909236614554178e-39,6.907237414434225e-39,6.905238214314274e-39,6.903239014194321e-39,6.90123981407437e-39,6.899240613954417e-39,6.897241413834466e-39,6.895242213714513e-39,6.893243013594562e-39,6.89124381347461e-39,6.889244613354658e-39,6.887245413234705e-39,6.885246213114754e-39,6.883247012994801e-39,6.88124781287485e-39,6.879248612754897e-39,6.877249412634946e-39,6.875250212514993e-39,6.873251012395042e-39,6.871251812275089e-39,6.869252612155138e-39,6.867253412035185e-39,6.865254211915234e-39,6.863255011795281e-39,6.86125581167533e-39,6.859256611555377e-39,6.857257411435426e-39,6.855258211315473e-39,6.853259011195522e-39,6.851259811075569e-39,6.849260610955618e-39,6.847261410835665e-39,6.845262210715714e-39,6.843263010595761e-39,6.84126381047581e-39,6.839264610355857e-39,6.837265410235906e-39,6.835266210115953e-39,6.833267009996002e-39,6.831267809876049e-39,6.829268609756098e-39,6.827269409636145e-39,6.825270209516194e-39,6.823271009396241e-39,6.82127180927629e-39,6.819272609156337e-39,6.817273409036386e-39,6.815274208916433e-39,6.813275008796482e-39,6.811275808676529e-39,6.809276608556578e-39,6.807277408436625e-39,6.805278208316672e-39,6.803279008196721e-39,6.801279808076768e-39,6.799280607956817e-39,6.797281407836864e-39,6.795282207716913e-39,6.79328300759696e-39,6.791283807477009e-39,6.789284607357056e-39,6.787285407237105e-39,6.785286207117152e-39,6.783287006997201e-39,6.781287806877248e-39,6.779288606757297e-39,6.777289406637344e-39,6.775290206517393e-39,6.77329100639744e-39,6.771291806277489e-39,6.769292606157536e-39,6.767293406037585e-39,6.765294205917632e-39,6.763295005797681e-39,6.761295805677728e-39,6.759296605557777e-39,6.757297405437824e-39,6.755298205317873e-39,6.75329900519792e-39,6.751299805077969e-39,6.749300604958016e-39,6.747301404838065e-39,6.745302204718112e-39,6.743303004598161e-39,6.741303804478208e-39,6.739304604358257e-39,6.737305404238304e-39,6.735306204118353e-39,6.7333070039984e-39,6.731307803878449e-39,6.729308603758496e-39,6.727309403638545e-39,6.725310203518592e-39,6.723311003398641e-39,6.721311803278688e-39,6.719312603158737e-39,6.717313403038784e-39,6.715314202918833e-39,6.71331500279888e-39,6.711315802678929e-39,6.709316602558976e-39,6.707317402439025e-39,6.705318202319072e-39,6.70331900219912e-39,6.701319802079168e-39,6.699320601959215e-39,6.697321401839264e-39,6.695322201719311e-39,6.69332300159936e-39,6.691323801479407e-39,6.689324601359456e-39,6.687325401239503e-39,6.685326201119552e-39,6.6833270009996e-39,6.681327800879648e-39,6.679328600759695e-39,6.677329400639744e-39,6.675330200519791e-39,6.67333100039984e-39,6.671331800279887e-39,6.669332600159936e-39,6.667333400039983e-39,6.665334199920032e-39,6.663334999800079e-39,6.661335799680128e-39,6.659336599560175e-39,6.657337399440224e-39,6.655338199320271e-39,6.65333899920032e-39,6.651339799080367e-39,6.649340598960416e-39,6.647341398840463e-39,6.645342198720512e-39,6.643342998600559e-39,6.641343798480608e-39,6.639344598360655e-39,6.637345398240704e-39,6.635346198120751e-39,6.6333469980008e-39,6.631347797880847e-39,6.629348597760896e-39,6.627349397640943e-39,6.625350197520992e-39,6.623350997401039e-39,6.621351797281088e-39,6.619352597161135e-39,6.617353397041184e-39,6.615354196921231e-39,6.61335499680128e-39,6.611355796681327e-39,6.609356596561376e-39,6.607357396441423e-39,6.605358196321472e-39,6.603358996201519e-39,6.601359796081566e-39,6.599360595961615e-39,6.597361395841662e-39,6.595362195721711e-39,6.593362995601758e-39,6.591363795481807e-39,6.589364595361854e-39,6.587365395241903e-39,6.58536619512195e-39,6.583366995001999e-39,6.581367794882046e-39,6.579368594762095e-39,6.577369394642142e-39,6.575370194522191e-39,6.573370994402238e-39,6.571371794282287e-39,6.569372594162334e-39,6.567373394042383e-39,6.56537419392243e-39,6.563374993802479e-39,6.561375793682526e-39,6.559376593562575e-39,6.557377393442622e-39,6.555378193322671e-39,6.553378993202718e-39,6.551379793082767e-39,6.549380592962814e-39,6.547381392842863e-39,6.54538219272291e-39,6.543382992602959e-39,6.541383792483006e-39,6.539384592363055e-39,6.537385392243102e-39,6.535386192123151e-39,6.533386992003198e-39,6.531387791883247e-39,6.529388591763294e-39,6.527389391643343e-39,6.52539019152339e-39,6.523390991403439e-39,6.521391791283486e-39,6.519392591163535e-39,6.517393391043582e-39,6.515394190923631e-39,6.513394990803678e-39,6.511395790683727e-39,6.509396590563774e-39,6.507397390443823e-39,6.50539819032387e-39,6.503398990203919e-39,6.501399790083966e-39,6.499400589964013e-39,6.497401389844062e-39,6.49540218972411e-39,6.493402989604158e-39,6.491403789484205e-39,6.489404589364254e-39,6.487405389244301e-39,6.48540618912435e-39,6.483406989004397e-39,6.481407788884446e-39,6.479408588764493e-39,6.477409388644542e-39,6.47541018852459e-39,6.473410988404638e-39,6.471411788284685e-39,6.469412588164734e-39,6.467413388044781e-39,6.46541418792483e-39,6.463414987804877e-39,6.461415787684926e-39,6.459416587564973e-39,6.457417387445022e-39,6.45541818732507e-39,6.453418987205118e-39,6.451419787085165e-39,6.449420586965214e-39,6.447421386845261e-39,6.44542218672531e-39,6.443422986605357e-39,6.441423786485406e-39,6.439424586365453e-39,6.437425386245502e-39,6.435426186125549e-39,6.433426986005598e-39,6.431427785885645e-39,6.429428585765694e-39,6.427429385645741e-39,6.42543018552579e-39,6.423430985405837e-39,6.421431785285886e-39,6.419432585165933e-39,6.417433385045982e-39,6.415434184926029e-39,6.413434984806078e-39,6.411435784686125e-39,6.409436584566174e-39,6.407437384446221e-39,6.40543818432627e-39,6.403438984206317e-39,6.401439784086366e-39,6.399440583966413e-39,6.397441383846462e-39,6.395442183726509e-39,6.393442983606557e-39,6.391443783486605e-39,6.389444583366652e-39,6.387445383246701e-39,6.385446183126748e-39,6.383446983006797e-39,6.381447782886844e-39,6.379448582766893e-39,6.37744938264694e-39,6.375450182526989e-39,6.373450982407036e-39,6.371451782287085e-39,6.369452582167132e-39,6.367453382047181e-39,6.365454181927228e-39,6.363454981807277e-39,6.361455781687324e-39,6.359456581567373e-39,6.35745738144742e-39,6.355458181327469e-39,6.353458981207516e-39,6.351459781087565e-39,6.349460580967612e-39,6.347461380847661e-39,6.345462180727708e-39,6.343462980607757e-39,6.341463780487804e-39,6.339464580367853e-39,6.3374653802479e-39,6.335466180127949e-39,6.333466980007996e-39,6.331467779888045e-39,6.329468579768092e-39,6.327469379648141e-39,6.325470179528188e-39,6.323470979408237e-39,6.321471779288284e-39,6.319472579168333e-39,6.31747337904838e-39,6.315474178928429e-39,6.313474978808476e-39,6.311475778688525e-39,6.309476578568572e-39,6.307477378448621e-39,6.305478178328668e-39,6.303478978208717e-39,6.301479778088764e-39,6.299480577968813e-39,6.29748137784886e-39,6.295482177728909e-39,6.293482977608956e-39,6.291483777489004e-39,6.289484577369052e-39,6.2874853772491e-39,6.285486177129148e-39,6.283486977009195e-39,6.281487776889244e-39,6.279488576769291e-39,6.27748937664934e-39,6.275490176529387e-39,6.273490976409436e-39,6.271491776289483e-39,6.269492576169532e-39,6.26749337604958e-39,6.265494175929628e-39,6.263494975809675e-39,6.261495775689724e-39,6.259496575569771e-39,6.25749737544982e-39,6.255498175329867e-39,6.253498975209916e-39,6.251499775089963e-39,6.249500574970012e-39,6.24750137485006e-39,6.245502174730108e-39,6.243502974610155e-39,6.241503774490204e-39,6.239504574370251e-39,6.2375053742503e-39,6.235506174130347e-39,6.233506974010396e-39,6.231507773890443e-39,6.229508573770492e-39,6.227509373650539e-39,6.225510173530588e-39,6.223510973410635e-39,6.221511773290684e-39,6.219512573170731e-39,6.21751337305078e-39,6.215514172930827e-39,6.213514972810876e-39,6.211515772690923e-39,6.209516572570972e-39,6.207517372451019e-39,6.205518172331068e-39,6.203518972211115e-39,6.201519772091164e-39,6.199520571971211e-39,6.19752137185126e-39,6.195522171731307e-39,6.193522971611356e-39,6.191523771491403e-39,6.18952457137145e-39,6.187525371251499e-39,6.185526171131547e-39,6.183526971011595e-39,6.181527770891643e-39,6.179528570771691e-39,6.177529370651739e-39,6.175530170531787e-39,6.173530970411834e-39,6.171531770291883e-39,6.16953257017193e-39,6.167533370051979e-39,6.165534169932026e-39,6.163534969812075e-39,6.161535769692122e-39,6.159536569572171e-39,6.157537369452218e-39,6.155538169332267e-39,6.153538969212314e-39,6.151539769092363e-39,6.14954056897241e-39,6.147541368852459e-39,6.145542168732506e-39,6.143542968612555e-39,6.141543768492602e-39,6.139544568372651e-39,6.137545368252698e-39,6.135546168132747e-39,6.133546968012794e-39,6.131547767892843e-39,6.12954856777289e-39,6.127549367652939e-39,6.125550167532986e-39,6.123550967413035e-39,6.121551767293082e-39,6.119552567173131e-39,6.117553367053178e-39,6.115554166933227e-39,6.113554966813274e-39,6.111555766693323e-39,6.10955656657337e-39,6.107557366453419e-39,6.105558166333466e-39,6.103558966213515e-39,6.101559766093562e-39,6.099560565973611e-39,6.097561365853658e-39,6.095562165733707e-39,6.093562965613754e-39,6.091563765493803e-39,6.08956456537385e-39,6.087565365253898e-39,6.085566165133946e-39,6.083566965013994e-39,6.081567764894042e-39,6.07956856477409e-39,6.077569364654138e-39,6.075570164534186e-39,6.073570964414234e-39,6.071571764294282e-39,6.06957256417433e-39,6.067573364054377e-39,6.065574163934426e-39,6.063574963814473e-39,6.061575763694522e-39,6.05957656357457e-39,6.057577363454618e-39,6.055578163334665e-39,6.053578963214714e-39,6.051579763094761e-39,6.04958056297481e-39,6.047581362854857e-39,6.045582162734906e-39,6.043582962614953e-39,6.041583762495002e-39,6.03958456237505e-39,6.037585362255098e-39,6.035586162135145e-39,6.033586962015194e-39,6.031587761895241e-39,6.02958856177529e-39,6.027589361655337e-39,6.025590161535386e-39,6.023590961415433e-39,6.021591761295482e-39,6.019592561175529e-39,6.017593361055578e-39,6.015594160935625e-39,6.013594960815674e-39,6.011595760695721e-39,6.00959656057577e-39,6.007597360455817e-39,6.005598160335866e-39,6.003598960215913e-39,6.001599760095962e-39,5.999600559976009e-39,5.997601359856058e-39,5.995602159736105e-39,5.993602959616154e-39,5.991603759496201e-39,5.98960455937625e-39,5.987605359256297e-39,5.985606159136346e-39,5.983606959016393e-39,5.98160775889644e-39,5.979608558776489e-39,5.977609358656537e-39,5.975610158536585e-39,5.973610958416633e-39,5.971611758296681e-39,5.969612558176729e-39,5.967613358056777e-39,5.965614157936825e-39,5.963614957816873e-39,5.96161575769692e-39,5.959616557576969e-39,5.957617357457016e-39,5.955618157337065e-39,5.953618957217112e-39,5.951619757097161e-39,5.949620556977208e-39,5.947621356857257e-39,5.945622156737304e-39,5.943622956617353e-39,5.9416237564974e-39,5.939624556377449e-39,5.937625356257496e-39,5.935626156137545e-39,5.933626956017592e-39,5.931627755897641e-39,5.929628555777688e-39,5.927629355657737e-39,5.925630155537784e-39,5.923630955417833e-39,5.92163175529788e-39,5.919632555177929e-39,5.917633355057976e-39,5.915634154938025e-39,5.913634954818072e-39,5.911635754698121e-39,5.909636554578168e-39,5.907637354458217e-39,5.905638154338264e-39,5.903638954218313e-39,5.90163975409836e-39,5.899640553978409e-39,5.897641353858456e-39,5.895642153738505e-39,5.893642953618552e-39,5.891643753498601e-39,5.889644553378648e-39,5.887645353258697e-39,5.885646153138744e-39,5.883646953018793e-39,5.88164775289884e-39,5.879648552778888e-39,5.877649352658936e-39,5.875650152538984e-39,5.873650952419032e-39,5.87165175229908e-39,5.869652552179128e-39,5.867653352059176e-39,5.865654151939224e-39,5.863654951819272e-39,5.86165575169932e-39,5.859656551579368e-39,5.857657351459416e-39,5.855658151339464e-39,5.853658951219512e-39,5.85165975109956e-39,5.849660550979608e-39,5.847661350859656e-39,5.845662150739704e-39,5.843662950619752e-39,5.8416637504998e-39,5.839664550379848e-39,5.837665350259896e-39,5.835666150139944e-39,5.833666950019992e-39,5.83166774990004e-39,5.8296685497800874e-39,5.8276693496601354e-39,5.8256701495401834e-39,5.8236709494202314e-39,5.8216717493002794e-39,5.8196725491803274e-39,5.8176733490603754e-39,5.8156741489404234e-39,5.8136749488204714e-39,5.8116757487005194e-39,5.8096765485805674e-39,5.8076773484606154e-39,5.8056781483406633e-39,5.8036789482207113e-39,5.8016797481007593e-39,5.799680547980807e-39,5.797681347860855e-39,5.795682147740903e-39,5.793682947620951e-39,5.791683747500999e-39,5.789684547381047e-39,5.787685347261095e-39,5.785686147141143e-39,5.783686947021191e-39,5.781687746901239e-39,5.779688546781287e-39,5.777689346661335e-39,5.775690146541383e-39,5.773690946421431e-39,5.771691746301479e-39,5.769692546181527e-39,5.767693346061575e-39,5.765694145941623e-39,5.763694945821671e-39,5.761695745701719e-39,5.759696545581767e-39,5.757697345461815e-39,5.755698145341863e-39,5.753698945221911e-39,5.751699745101959e-39,5.749700544982007e-39,5.747701344862055e-39,5.745702144742103e-39,5.743702944622151e-39,5.741703744502199e-39,5.739704544382247e-39,5.737705344262295e-39,5.735706144142343e-39,5.733706944022391e-39,5.731707743902439e-39,5.729708543782487e-39,5.727709343662535e-39,5.7257101435425824e-39,5.7237109434226304e-39,5.7217117433026784e-39,5.7197125431827264e-39,5.7177133430627744e-39,5.7157141429428224e-39,5.7137149428228704e-39,5.7117157427029184e-39,5.7097165425829664e-39,5.7077173424630144e-39,5.7057181423430624e-39,5.7037189422231104e-39,5.7017197421031584e-39,5.6997205419832064e-39,5.6977213418632543e-39,5.6957221417433023e-39,5.6937229416233503e-39,5.691723741503398e-39,5.689724541383446e-39,5.687725341263494e-39,5.685726141143542e-39,5.68372694102359e-39,5.681727740903638e-39,5.679728540783686e-39,5.677729340663734e-39,5.675730140543782e-39,5.67373094042383e-39,5.671731740303878e-39,5.669732540183926e-39,5.667733340063974e-39,5.665734139944022e-39,5.66373493982407e-39,5.661735739704118e-39,5.659736539584166e-39,5.657737339464214e-39,5.655738139344262e-39,5.65373893922431e-39,5.651739739104358e-39,5.649740538984406e-39,5.647741338864454e-39,5.645742138744502e-39,5.64374293862455e-39,5.641743738504598e-39,5.639744538384646e-39,5.637745338264694e-39,5.635746138144742e-39,5.63374693802479e-39,5.631747737904838e-39,5.629748537784886e-39,5.627749337664934e-39,5.625750137544982e-39,5.6237509374250295e-39,5.6217517373050774e-39,5.6197525371851254e-39,5.6177533370651734e-39,5.6157541369452214e-39,5.6137549368252694e-39,5.6117557367053174e-39,5.6097565365853654e-39,5.6077573364654134e-39,5.6057581363454614e-39,5.6037589362255094e-39,5.6017597361055574e-39,5.5997605359856054e-39,5.5977613358656534e-39,5.5957621357457014e-39,5.5937629356257494e-39,5.5917637355057973e-39,5.5897645353858453e-39,5.5877653352658933e-39,5.5857661351459413e-39,5.583766935025989e-39,5.581767734906037e-39,5.579768534786085e-39,5.577769334666133e-39,5.575770134546181e-39,5.573770934426229e-39,5.571771734306277e-39,5.569772534186325e-39,5.567773334066373e-39,5.565774133946421e-39,5.563774933826469e-39,5.561775733706517e-39,5.559776533586565e-39,5.557777333466613e-39,5.555778133346661e-39,5.553778933226709e-39,5.551779733106757e-39,5.549780532986805e-39,5.547781332866853e-39,5.545782132746901e-39,5.543782932626949e-39,5.541783732506997e-39,5.539784532387045e-39,5.537785332267093e-39,5.535786132147141e-39,5.533786932027189e-39,5.531787731907237e-39,5.529788531787285e-39,5.527789331667333e-39,5.525790131547381e-39,5.523790931427429e-39,5.521791731307477e-39,5.5197925311875245e-39,5.5177933310675725e-39,5.5157941309476205e-39,5.5137949308276684e-39,5.5117957307077164e-39,5.5097965305877644e-39,5.5077973304678124e-39,5.5057981303478604e-39,5.5037989302279084e-39,5.5017997301079564e-39,5.4998005299880044e-39,5.4978013298680524e-39,5.4958021297481004e-39,5.4938029296281484e-39,5.4918037295081964e-39,5.4898045293882444e-39,5.4878053292682924e-39,5.4858061291483404e-39,5.4838069290283883e-39,5.4818077289084363e-39,5.4798085287884843e-39,5.4778093286685323e-39,5.47581012854858e-39,5.473810928428628e-39,5.471811728308676e-39,5.469812528188724e-39,5.467813328068772e-39,5.46581412794882e-39,5.463814927828868e-39,5.461815727708916e-39,5.459816527588964e-39,5.457817327469012e-39,5.45581812734906e-39,5.453818927229108e-39,5.451819727109156e-39,5.449820526989204e-39,5.447821326869252e-39,5.4458221267493e-39,5.443822926629348e-39,5.441823726509396e-39,5.439824526389444e-39,5.437825326269492e-39,5.43582612614954e-39,5.433826926029588e-39,5.431827725909636e-39,5.429828525789684e-39,5.427829325669732e-39,5.42583012554978e-39,5.423830925429828e-39,5.421831725309876e-39,5.419832525189924e-39,5.4178333250699715e-39,5.4158341249500195e-39,5.4138349248300675e-39,5.4118357247101155e-39,5.4098365245901635e-39,5.4078373244702115e-39,5.4058381243502594e-39,5.4038389242303074e-39,5.4018397241103554e-39,5.3998405239904034e-39,5.3978413238704514e-39,5.3958421237504994e-39,5.3938429236305474e-39,5.3918437235105954e-39,5.3898445233906434e-39,5.3878453232706914e-39,5.3858461231507394e-39,5.3838469230307874e-39,5.3818477229108354e-39,5.3798485227908834e-39,5.3778493226709314e-39,5.3758501225509793e-39,5.3738509224310273e-39,5.3718517223110753e-39,5.3698525221911233e-39,5.367853322071171e-39,5.365854121951219e-39,5.363854921831267e-39,5.361855721711315e-39,5.359856521591363e-39,5.357857321471411e-39,5.355858121351459e-39,5.353858921231507e-39,5.351859721111555e-39,5.349860520991603e-39,5.347861320871651e-39,5.345862120751699e-39,5.343862920631747e-39,5.341863720511795e-39,5.339864520391843e-39,5.337865320271891e-39,5.335866120151939e-39,5.333866920031987e-39,5.331867719912035e-39,5.329868519792083e-39,5.327869319672131e-39,5.325870119552179e-39,5.323870919432227e-39,5.321871719312275e-39,5.319872519192323e-39,5.317873319072371e-39,5.315874118952419e-39,5.3138749188324665e-39,5.3118757187125145e-39,5.3098765185925625e-39,5.3078773184726105e-39,5.3058781183526585e-39,5.3038789182327065e-39,5.3018797181127545e-39,5.2998805179928025e-39,5.2978813178728504e-39,5.2958821177528984e-39,5.2938829176329464e-39,5.2918837175129944e-39,5.2898845173930424e-39,5.2878853172730904e-39,5.2858861171531384e-39,5.2838869170331864e-39,5.2818877169132344e-39,5.2798885167932824e-39,5.2778893166733304e-39,5.2758901165533784e-39,5.2738909164334264e-39,5.2718917163134744e-39,5.2698925161935224e-39,5.2678933160735703e-39,5.2658941159536183e-39,5.2638949158336663e-39,5.2618957157137143e-39,5.259896515593762e-39,5.25789731547381e-39,5.255898115353858e-39,5.253898915233906e-39,5.251899715113954e-39,5.249900514994002e-39,5.24790131487405e-39,5.245902114754098e-39,5.243902914634146e-39,5.241903714514194e-39,5.239904514394242e-39,5.23790531427429e-39,5.235906114154338e-39,5.233906914034386e-39,5.231907713914434e-39,5.229908513794482e-39,5.22790931367453e-39,5.225910113554578e-39,5.223910913434626e-39,5.221911713314674e-39,5.219912513194722e-39,5.21791331307477e-39,5.215914112954818e-39,5.213914912834866e-39,5.2119157127149135e-39,5.2099165125949615e-39,5.2079173124750095e-39,5.2059181123550575e-39,5.2039189122351055e-39,5.2019197121151535e-39,5.1999205119952015e-39,5.1979213118752495e-39,5.1959221117552975e-39,5.1939229116353455e-39,5.1919237115153935e-39,5.1899245113954414e-39,5.1879253112754894e-39,5.1859261111555374e-39,5.1839269110355854e-39,5.1819277109156334e-39,5.1799285107956814e-39,5.1779293106757294e-39,5.1759301105557774e-39,5.1739309104358254e-39,5.1719317103158734e-39,5.1699325101959214e-39,5.1679333100759694e-39,5.1659341099560174e-39,5.1639349098360654e-39,5.1619357097161134e-39,5.1599365095961613e-39,5.1579373094762093e-39,5.1559381093562573e-39,5.1539389092363053e-39,5.151939709116353e-39,5.149940508996401e-39,5.147941308876449e-39,5.145942108756497e-39,5.143942908636545e-39,5.141943708516593e-39,5.139944508396641e-39,5.137945308276689e-39,5.135946108156737e-39,5.133946908036785e-39,5.131947707916833e-39,5.129948507796881e-39,5.127949307676929e-39,5.125950107556977e-39,5.123950907437025e-39,5.121951707317073e-39,5.119952507197121e-39,5.117953307077169e-39,5.115954106957217e-39,5.113954906837265e-39,5.111955706717313e-39,5.109956506597361e-39,5.1079573064774085e-39,5.1059581063574565e-39,5.1039589062375045e-39,5.1019597061175525e-39,5.0999605059976005e-39,5.0979613058776485e-39,5.0959621057576965e-39,5.0939629056377445e-39,5.0919637055177925e-39,5.0899645053978405e-39,5.0879653052778885e-39,5.0859661051579365e-39,5.0839669050379845e-39,5.0819677049180324e-39,5.0799685047980804e-39,5.0779693046781284e-39,5.0759701045581764e-39,5.0739709044382244e-39,5.0719717043182724e-39,5.0699725041983204e-39,5.0679733040783684e-39,5.0659741039584164e-39,5.0639749038384644e-39,5.0619757037185124e-39,5.0599765035985604e-39,5.0579773034786084e-39,5.0559781033586564e-39,5.0539789032387044e-39,5.0519797031187523e-39,5.0499805029988003e-39,5.0479813028788483e-39,5.0459821027588963e-39,5.043982902638944e-39,5.041983702518992e-39,5.03998450239904e-39,5.037985302279088e-39,5.035986102159136e-39,5.033986902039184e-39,5.031987701919232e-39,5.02998850179928e-39,5.027989301679328e-39,5.025990101559376e-39,5.023990901439424e-39,5.021991701319472e-39,5.01999250119952e-39,5.017993301079568e-39,5.015994100959616e-39,5.013994900839664e-39,5.011995700719712e-39,5.00999650059976e-39,5.007997300479808e-39,5.0059981003598555e-39,5.0039989002399035e-39,5.0019997001199515e-39,5.0000004999999995e-39,4.9980012998800475e-39,4.9960020997600955e-39,4.9940028996401435e-39,4.9920036995201915e-39,4.9900044994002395e-39,4.9880052992802875e-39,4.9860060991603355e-39,4.9840068990403835e-39,4.9820076989204315e-39,4.9800084988004795e-39,4.9780092986805275e-39,4.9760100985605754e-39,4.9740108984406234e-39,4.9720116983206714e-39,4.9700124982007194e-39,4.9680132980807674e-39,4.9660140979608154e-39,4.9640148978408634e-39,4.9620156977209114e-39,4.9600164976009594e-39,4.9580172974810074e-39,4.9560180973610554e-39,4.9540188972411034e-39,4.9520196971211514e-39,4.9500204970011994e-39,4.9480212968812474e-39,4.9460220967612954e-39,4.9440228966413433e-39,4.9420236965213913e-39,4.9400244964014393e-39,4.9380252962814873e-39,4.936026096161535e-39,4.934026896041583e-39,4.932027695921631e-39,4.930028495801679e-39,4.928029295681727e-39,4.926030095561775e-39,4.924030895441823e-39,4.922031695321871e-39,4.920032495201919e-39,4.918033295081967e-39,4.916034094962015e-39,4.914034894842063e-39,4.912035694722111e-39,4.910036494602159e-39,4.908037294482207e-39,4.906038094362255e-39,4.904038894242303e-39,4.9020396941223506e-39,4.9000404940023986e-39,4.8980412938824465e-39,4.8960420937624945e-39,4.8940428936425425e-39,4.8920436935225905e-39,4.8900444934026385e-39,4.8880452932826865e-39,4.8860460931627345e-39,4.8840468930427825e-39,4.8820476929228305e-39,4.8800484928028785e-39,4.8780492926829265e-39,4.8760500925629745e-39,4.8740508924430225e-39,4.8720516923230705e-39,4.8700524922031185e-39,4.8680532920831664e-39,4.8660540919632144e-39,4.8640548918432624e-39,4.8620556917233104e-39,4.8600564916033584e-39,4.8580572914834064e-39,4.8560580913634544e-39,4.8540588912435024e-39,4.8520596911235504e-39,4.8500604910035984e-39,4.8480612908836464e-39,4.8460620907636944e-39,4.8440628906437424e-39,4.8420636905237904e-39,4.8400644904038384e-39,4.8380652902838864e-39,4.8360660901639343e-39,4.8340668900439823e-39,4.8320676899240303e-39,4.8300684898040783e-39,4.828069289684126e-39,4.826070089564174e-39,4.824070889444222e-39,4.82207168932427e-39,4.820072489204318e-39,4.818073289084366e-39,4.816074088964414e-39,4.814074888844462e-39,4.81207568872451e-39,4.810076488604558e-39,4.808077288484606e-39,4.806078088364654e-39,4.804078888244702e-39,4.80207968812475e-39,4.8000804880047976e-39,4.7980812878848456e-39,4.7960820877648936e-39,4.7940828876449416e-39,4.7920836875249896e-39,4.7900844874050375e-39,4.7880852872850855e-39,4.7860860871651335e-39,4.7840868870451815e-39,4.7820876869252295e-39,4.7800884868052775e-39,4.7780892866853255e-39,4.7760900865653735e-39,4.7740908864454215e-39,4.7720916863254695e-39,4.7700924862055175e-39,4.7680932860855655e-39,4.7660940859656135e-39,4.7640948858456615e-39,4.7620956857257095e-39,4.7600964856057574e-39,4.7580972854858054e-39,4.7560980853658534e-39,4.7540988852459014e-39,4.7520996851259494e-39,4.7501004850059974e-39,4.7481012848860454e-39,4.7461020847660934e-39,4.7441028846461414e-39,4.7421036845261894e-39,4.7401044844062374e-39,4.7381052842862854e-39,4.7361060841663334e-39,4.7341068840463814e-39,4.7321076839264294e-39,4.7301084838064774e-39,4.7281092836865253e-39,4.7261100835665733e-39,4.7241108834466213e-39,4.722111683326669e-39,4.720112483206717e-39,4.718113283086765e-39,4.716114082966813e-39,4.714114882846861e-39,4.712115682726909e-39,4.710116482606957e-39,4.708117282487005e-39,4.706118082367053e-39,4.704118882247101e-39,4.702119682127149e-39,4.700120482007197e-39,4.698121281887245e-39,4.6961220817672926e-39,4.6941228816473406e-39,4.6921236815273886e-39,4.6901244814074366e-39,4.6881252812874846e-39,4.6861260811675326e-39,4.6841268810475806e-39,4.6821276809276285e-39,4.6801284808076765e-39,4.6781292806877245e-39,4.6761300805677725e-39,4.6741308804478205e-39,4.6721316803278685e-39,4.6701324802079165e-39,4.6681332800879645e-39,4.6661340799680125e-39,4.6641348798480605e-39,4.6621356797281085e-39,4.6601364796081565e-39,4.6581372794882045e-39,4.6561380793682525e-39,4.6541388792483005e-39,4.6521396791283484e-39,4.6501404790083964e-39,4.6481412788884444e-39,4.6461420787684924e-39,4.6441428786485404e-39,4.6421436785285884e-39,4.6401444784086364e-39,4.6381452782886844e-39,4.6361460781687324e-39,4.6341468780487804e-39,4.6321476779288284e-39,4.6301484778088764e-39,4.6281492776889244e-39,4.6261500775689724e-39,4.6241508774490204e-39,4.6221516773290684e-39,4.6201524772091163e-39,4.6181532770891643e-39,4.6161540769692123e-39,4.61415487684926e-39,4.612155676729308e-39,4.610156476609356e-39,4.608157276489404e-39,4.606158076369452e-39,4.6041588762495e-39,4.602159676129548e-39,4.600160476009596e-39,4.598161275889644e-39,4.596162075769692e-39,4.5941628756497396e-39,4.5921636755297876e-39,4.5901644754098356e-39,4.5881652752898836e-39,4.5861660751699316e-39,4.5841668750499796e-39,4.5821676749300276e-39,4.5801684748100756e-39,4.5781692746901236e-39,4.5761700745701716e-39,4.5741708744502195e-39,4.5721716743302675e-39,4.5701724742103155e-39,4.5681732740903635e-39,4.5661740739704115e-39,4.5641748738504595e-39,4.5621756737305075e-39,4.5601764736105555e-39,4.5581772734906035e-39,4.5561780733706515e-39,4.5541788732506995e-39,4.5521796731307475e-39,4.5501804730107955e-39,4.5481812728908435e-39,4.5461820727708915e-39,4.5441828726509394e-39,4.5421836725309874e-39,4.5401844724110354e-39,4.5381852722910834e-39,4.5361860721711314e-39,4.5341868720511794e-39,4.5321876719312274e-39,4.5301884718112754e-39,4.5281892716913234e-39,4.5261900715713714e-39,4.5241908714514194e-39,4.5221916713314674e-39,4.5201924712115154e-39,4.5181932710915634e-39,4.5161940709716114e-39,4.5141948708516594e-39,4.5121956707317073e-39,4.5101964706117553e-39,4.5081972704918033e-39,4.506198070371851e-39,4.504198870251899e-39,4.502199670131947e-39,4.500200470011995e-39,4.498201269892043e-39,4.496202069772091e-39,4.494202869652139e-39,4.492203669532187e-39,4.4902044694122346e-39,4.4882052692922826e-39,4.4862060691723306e-39,4.4842068690523786e-39,4.4822076689324266e-39,4.4802084688124746e-39,4.4782092686925226e-39,4.4762100685725706e-39,4.4742108684526186e-39,4.4722116683326666e-39,4.4702124682127146e-39,4.4682132680927626e-39,4.4662140679728105e-39,4.4642148678528585e-39,4.4622156677329065e-39,4.4602164676129545e-39,4.4582172674930025e-39,4.4562180673730505e-39,4.4542188672530985e-39,4.4522196671331465e-39,4.4502204670131945e-39,4.4482212668932425e-39,4.4462220667732905e-39,4.4442228666533385e-39,4.4422236665333865e-39,4.4402244664134345e-39,4.4382252662934825e-39,4.4362260661735304e-39,4.4342268660535784e-39,4.4322276659336264e-39,4.4302284658136744e-39,4.4282292656937224e-39,4.4262300655737704e-39,4.4242308654538184e-39,4.4222316653338664e-39,4.4202324652139144e-39,4.4182332650939624e-39,4.4162340649740104e-39,4.4142348648540584e-39,4.4122356647341064e-39,4.4102364646141544e-39,4.4082372644942024e-39,4.4062380643742504e-39,4.4042388642542983e-39,4.4022396641343463e-39,4.4002404640143943e-39,4.398241263894442e-39,4.39624206377449e-39,4.394242863654538e-39,4.392243663534586e-39,4.390244463414634e-39,4.3882452632946816e-39,4.3862460631747296e-39,4.3842468630547776e-39,4.3822476629348256e-39,4.3802484628148736e-39,4.3782492626949216e-39,4.3762500625749696e-39,4.3742508624550176e-39,4.3722516623350656e-39,4.3702524622151136e-39,4.3682532620951616e-39,4.3662540619752096e-39,4.3642548618552576e-39,4.3622556617353056e-39,4.3602564616153535e-39,4.3582572614954015e-39,4.3562580613754495e-39,4.3542588612554975e-39,4.3522596611355455e-39,4.3502604610155935e-39,4.3482612608956415e-39,4.3462620607756895e-39,4.3442628606557375e-39,4.3422636605357855e-39,4.3402644604158335e-39,4.3382652602958815e-39,4.3362660601759295e-39,4.3342668600559775e-39,4.3322676599360255e-39,4.3302684598160735e-39,4.3282692596961214e-39,4.3262700595761694e-39,4.3242708594562174e-39,4.3222716593362654e-39,4.3202724592163134e-39,4.3182732590963614e-39,4.3162740589764094e-39,4.3142748588564574e-39,4.3122756587365054e-39,4.3102764586165534e-39,4.3082772584966014e-39,4.3062780583766494e-39,4.3042788582566974e-39,4.3022796581367454e-39,4.3002804580167934e-39,4.2982812578968413e-39,4.2962820577768893e-39,4.2942828576569373e-39,4.2922836575369853e-39,4.290284457417033e-39,4.288285257297081e-39,4.286286057177129e-39,4.2842868570571767e-39,4.2822876569372246e-39,4.2802884568172726e-39,4.2782892566973206e-39,4.2762900565773686e-39,4.2742908564574166e-39,4.2722916563374646e-39,4.2702924562175126e-39,4.2682932560975606e-39,4.2662940559776086e-39,4.2642948558576566e-39,4.2622956557377046e-39,4.2602964556177526e-39,4.2582972554978006e-39,4.2562980553778486e-39,4.2542988552578966e-39,4.2522996551379445e-39,4.2503004550179925e-39,4.2483012548980405e-39,4.2463020547780885e-39,4.2443028546581365e-39,4.2423036545381845e-39,4.2403044544182325e-39,4.2383052542982805e-39,4.2363060541783285e-39,4.2343068540583765e-39,4.2323076539384245e-39,4.2303084538184725e-39,4.2283092536985205e-39,4.2263100535785685e-39,4.2243108534586165e-39,4.2223116533386645e-39,4.2203124532187124e-39,4.2183132530987604e-39,4.2163140529788084e-39,4.2143148528588564e-39,4.2123156527389044e-39,4.2103164526189524e-39,4.2083172524990004e-39,4.2063180523790484e-39,4.2043188522590964e-39,4.2023196521391444e-39,4.2003204520191924e-39,4.1983212518992404e-39,4.1963220517792884e-39,4.1943228516593364e-39,4.1923236515393844e-39,4.1903244514194323e-39,4.1883252512994803e-39,4.1863260511795283e-39,4.1843268510595763e-39,4.1823276509396237e-39,4.1803284508196717e-39,4.1783292506997197e-39,4.1763300505797677e-39,4.1743308504598156e-39,4.1723316503398636e-39,4.1703324502199116e-39,4.1683332500999596e-39,4.1663340499800076e-39,4.1643348498600556e-39,4.1623356497401036e-39,4.1603364496201516e-39,4.1583372495001996e-39,4.1563380493802476e-39,4.1543388492602956e-39,4.1523396491403436e-39,4.1503404490203916e-39,4.1483412489004396e-39,4.1463420487804876e-39,4.1443428486605355e-39,4.1423436485405835e-39,4.1403444484206315e-39,4.1383452483006795e-39,4.1363460481807275e-39,4.1343468480607755e-39,4.1323476479408235e-39,4.1303484478208715e-39,4.1283492477009195e-39,4.1263500475809675e-39,4.1243508474610155e-39,4.1223516473410635e-39,4.1203524472211115e-39,4.1183532471011595e-39,4.1163540469812075e-39,4.1143548468612555e-39,4.1123556467413034e-39,4.1103564466213514e-39,4.1083572465013994e-39,4.1063580463814474e-39,4.1043588462614954e-39,4.1023596461415434e-39,4.1003604460215914e-39,4.0983612459016394e-39,4.0963620457816874e-39,4.0943628456617354e-39,4.0923636455417834e-39,4.0903644454218314e-39,4.0883652453018794e-39,4.0863660451819274e-39,4.0843668450619754e-39,4.0823676449420233e-39,4.0803684448220713e-39,4.078369244702119e-39,4.076370044582167e-39,4.0743708444622147e-39,4.0723716443422627e-39,4.0703724442223107e-39,4.0683732441023587e-39,4.0663740439824066e-39,4.0643748438624546e-39,4.0623756437425026e-39,4.0603764436225506e-39,4.0583772435025986e-39,4.0563780433826466e-39,4.0543788432626946e-39,4.0523796431427426e-39,4.0503804430227906e-39,4.0483812429028386e-39,4.0463820427828866e-39,4.0443828426629346e-39,4.0423836425429826e-39,4.0403844424230306e-39,4.0383852423030786e-39,4.0363860421831265e-39,4.0343868420631745e-39,4.0323876419432225e-39,4.0303884418232705e-39,4.0283892417033185e-39,4.0263900415833665e-39,4.0243908414634145e-39,4.0223916413434625e-39,4.0203924412235105e-39,4.0183932411035585e-39,4.0163940409836065e-39,4.0143948408636545e-39,4.0123956407437025e-39,4.0103964406237505e-39,4.0083972405037985e-39,4.0063980403838465e-39,4.0043988402638944e-39,4.0023996401439424e-39,4.0004004400239904e-39,3.9984012399040384e-39,3.9964020397840864e-39,3.9944028396641344e-39,3.9924036395441824e-39,3.9904044394242304e-39,3.9884052393042784e-39,3.9864060391843264e-39,3.9844068390643744e-39,3.9824076389444224e-39,3.9804084388244704e-39,3.9784092387045184e-39,3.976410038584566e-39,3.974410838464614e-39,3.972411638344662e-39,3.97041243822471e-39,3.968413238104758e-39,3.9664140379848057e-39,3.9644148378648537e-39,3.9624156377449017e-39,3.9604164376249497e-39,3.9584172375049976e-39,3.9564180373850456e-39,3.9544188372650936e-39,3.9524196371451416e-39,3.9504204370251896e-39,3.9484212369052376e-39,3.9464220367852856e-39,3.9444228366653336e-39,3.9424236365453816e-39,3.9404244364254296e-39,3.9384252363054776e-39,3.9364260361855256e-39,3.9344268360655736e-39,3.9324276359456216e-39,3.9304284358256696e-39,3.9284292357057175e-39,3.9264300355857655e-39,3.9244308354658135e-39,3.9224316353458615e-39,3.9204324352259095e-39,3.9184332351059575e-39,3.9164340349860055e-39,3.9144348348660535e-39,3.9124356347461015e-39,3.9104364346261495e-39,3.9084372345061975e-39,3.9064380343862455e-39,3.9044388342662935e-39,3.9024396341463415e-39,3.9004404340263895e-39,3.8984412339064375e-39,3.8964420337864854e-39,3.8944428336665334e-39,3.8924436335465814e-39,3.8904444334266294e-39,3.8884452333066774e-39,3.8864460331867254e-39,3.8844468330667734e-39,3.8824476329468214e-39,3.8804484328268694e-39,3.8784492327069174e-39,3.8764500325869654e-39,3.8744508324670134e-39,3.872451632347061e-39,3.870452432227109e-39,3.868453232107157e-39,3.866454031987205e-39,3.864454831867253e-39,3.862455631747301e-39,3.860456431627349e-39,3.8584572315073967e-39,3.8564580313874447e-39,3.8544588312674927e-39,3.8524596311475407e-39,3.8504604310275886e-39,3.8484612309076366e-39,3.8464620307876846e-39,3.8444628306677326e-39,3.8424636305477806e-39,3.8404644304278286e-39,3.8384652303078766e-39,3.8364660301879246e-39,3.8344668300679726e-39,3.8324676299480206e-39,3.8304684298280686e-39,3.8284692297081166e-39,3.8264700295881646e-39,3.8244708294682126e-39,3.8224716293482606e-39,3.8204724292283085e-39,3.8184732291083565e-39,3.8164740289884045e-39,3.8144748288684525e-39,3.8124756287485005e-39,3.8104764286285485e-39,3.8084772285085965e-39,3.8064780283886445e-39,3.8044788282686925e-39,3.8024796281487405e-39,3.8004804280287885e-39,3.7984812279088365e-39,3.7964820277888845e-39,3.7944828276689325e-39,3.7924836275489805e-39,3.7904844274290285e-39,3.7884852273090764e-39,3.7864860271891244e-39,3.7844868270691724e-39,3.7824876269492204e-39,3.7804884268292684e-39,3.7784892267093164e-39,3.7764900265893644e-39,3.7744908264694124e-39,3.7724916263494604e-39,3.770492426229508e-39,3.768493226109556e-39,3.766494025989604e-39,3.764494825869652e-39,3.7624956257497e-39,3.760496425629748e-39,3.758497225509796e-39,3.756498025389844e-39,3.754498825269892e-39,3.75249962514994e-39,3.7505004250299877e-39,3.7485012249100357e-39,3.7465020247900837e-39,3.7445028246701316e-39,3.7425036245501796e-39,3.7405044244302276e-39,3.7385052243102756e-39,3.7365060241903236e-39,3.7345068240703716e-39,3.7325076239504196e-39,3.7305084238304676e-39,3.7285092237105156e-39,3.7265100235905636e-39,3.7245108234706116e-39,3.7225116233506596e-39,3.7205124232307076e-39,3.7185132231107556e-39,3.7165140229908036e-39,3.7145148228708516e-39,3.7125156227508995e-39,3.7105164226309475e-39,3.7085172225109955e-39,3.7065180223910435e-39,3.7045188222710915e-39,3.7025196221511395e-39,3.7005204220311875e-39,3.6985212219112355e-39,3.6965220217912835e-39,3.6945228216713315e-39,3.6925236215513795e-39,3.6905244214314275e-39,3.6885252213114755e-39,3.6865260211915235e-39,3.6845268210715715e-39,3.6825276209516194e-39,3.6805284208316674e-39,3.6785292207117154e-39,3.6765300205917634e-39,3.6745308204718114e-39,3.6725316203518594e-39,3.6705324202319074e-39,3.668533220111955e-39,3.666534019992003e-39,3.664534819872051e-39,3.662535619752099e-39,3.660536419632147e-39,3.658537219512195e-39,3.656538019392243e-39,3.654538819272291e-39,3.652539619152339e-39,3.650540419032387e-39,3.648541218912435e-39,3.646542018792483e-39,3.644542818672531e-39,3.6425436185525787e-39,3.6405444184326267e-39,3.6385452183126747e-39,3.6365460181927226e-39,3.6345468180727706e-39,3.6325476179528186e-39,3.6305484178328666e-39,3.6285492177129146e-39,3.6265500175929626e-39,3.6245508174730106e-39,3.6225516173530586e-39,3.6205524172331066e-39,3.6185532171131546e-39,3.6165540169932026e-39,3.6145548168732506e-39,3.6125556167532986e-39,3.6105564166333466e-39,3.6085572165133946e-39,3.6065580163934426e-39,3.6045588162734905e-39,3.6025596161535385e-39,3.6005604160335865e-39,3.5985612159136345e-39,3.5965620157936825e-39,3.5945628156737305e-39,3.5925636155537785e-39,3.5905644154338265e-39,3.5885652153138745e-39,3.5865660151939225e-39,3.5845668150739705e-39,3.5825676149540185e-39,3.5805684148340665e-39,3.5785692147141145e-39,3.5765700145941625e-39,3.5745708144742104e-39,3.5725716143542584e-39,3.5705724142343064e-39,3.5685732141143544e-39,3.5665740139944024e-39,3.56457481387445e-39,3.562575613754498e-39,3.560576413634546e-39,3.558577213514594e-39,3.556578013394642e-39,3.55457881327469e-39,3.552579613154738e-39,3.550580413034786e-39,3.548581212914834e-39,3.546582012794882e-39,3.54458281267493e-39,3.542583612554978e-39,3.540584412435026e-39,3.538585212315074e-39,3.536586012195122e-39,3.5345868120751697e-39,3.5325876119552177e-39,3.5305884118352657e-39,3.5285892117153136e-39,3.5265900115953616e-39,3.5245908114754096e-39,3.5225916113554576e-39,3.5205924112355056e-39,3.5185932111155536e-39,3.5165940109956016e-39,3.5145948108756496e-39,3.5125956107556976e-39,3.5105964106357456e-39,3.5085972105157936e-39,3.5065980103958416e-39,3.5045988102758896e-39,3.5025996101559376e-39,3.5006004100359856e-39,3.4986012099160336e-39,3.4966020097960815e-39,3.4946028096761295e-39,3.4926036095561775e-39,3.4906044094362255e-39,3.4886052093162735e-39,3.4866060091963215e-39,3.4846068090763695e-39,3.4826076089564175e-39,3.4806084088364655e-39,3.4786092087165135e-39,3.4766100085965615e-39,3.4746108084766095e-39,3.4726116083566575e-39,3.4706124082367055e-39,3.4686132081167535e-39,3.4666140079968014e-39,3.4646148078768494e-39,3.462615607756897e-39,3.460616407636945e-39,3.458617207516993e-39,3.456618007397041e-39,3.454618807277089e-39,3.452619607157137e-39,3.450620407037185e-39,3.448621206917233e-39,3.446622006797281e-39,3.444622806677329e-39,3.442623606557377e-39,3.440624406437425e-39,3.438625206317473e-39,3.436626006197521e-39,3.434626806077569e-39,3.432627605957617e-39,3.430628405837665e-39,3.4286292057177127e-39,3.4266300055977607e-39,3.4246308054778087e-39,3.4226316053578567e-39,3.4206324052379046e-39,3.4186332051179526e-39,3.4166340049980006e-39,3.4146348048780486e-39,3.4126356047580966e-39,3.4106364046381446e-39,3.4086372045181926e-39,3.4066380043982406e-39,3.4046388042782886e-39,3.4026396041583366e-39,3.4006404040383846e-39,3.3986412039184326e-39,3.3966420037984806e-39,3.3946428036785286e-39,3.3926436035585766e-39,3.3906444034386246e-39,3.3886452033186725e-39,3.3866460031987205e-39,3.3846468030787685e-39,3.3826476029588165e-39,3.3806484028388645e-39,3.3786492027189125e-39,3.3766500025989605e-39,3.3746508024790085e-39,3.3726516023590565e-39,3.3706524022391045e-39,3.3686532021191525e-39,3.3666540019992005e-39,3.3646548018792485e-39,3.3626556017592965e-39,3.3606564016393445e-39,3.358657201519392e-39,3.35665800139944e-39,3.354658801279488e-39,3.352659601159536e-39,3.350660401039584e-39,3.348661200919632e-39,3.34666200079968e-39,3.344662800679728e-39,3.342663600559776e-39,3.340664400439824e-39,3.338665200319872e-39,3.33666600019992e-39,3.334666800079968e-39,3.332667599960016e-39,3.330668399840064e-39,3.328669199720112e-39,3.32666999960016e-39,3.324670799480208e-39,3.322671599360256e-39,3.3206723992403037e-39,3.3186731991203517e-39,3.3166739990003997e-39,3.3146747988804477e-39,3.3126755987604956e-39,3.3106763986405436e-39,3.3086771985205916e-39,3.3066779984006396e-39,3.3046787982806876e-39,3.3026795981607356e-39,3.3006803980407836e-39,3.2986811979208316e-39,3.2966819978008796e-39,3.2946827976809276e-39,3.2926835975609756e-39,3.2906843974410236e-39,3.2886851973210716e-39,3.2866859972011196e-39,3.2846867970811676e-39,3.2826875969612156e-39,3.2806883968412635e-39,3.2786891967213115e-39,3.2766899966013595e-39,3.2746907964814075e-39,3.2726915963614555e-39,3.2706923962415035e-39,3.2686931961215515e-39,3.2666939960015995e-39,3.2646947958816475e-39,3.2626955957616955e-39,3.2606963956417435e-39,3.2586971955217915e-39,3.256697995401839e-39,3.254698795281887e-39,3.252699595161935e-39,3.250700395041983e-39,3.248701194922031e-39,3.246701994802079e-39,3.244702794682127e-39,3.242703594562175e-39,3.240704394442223e-39,3.238705194322271e-39,3.236705994202319e-39,3.234706794082367e-39,3.232707593962415e-39,3.230708393842463e-39,3.228709193722511e-39,3.226709993602559e-39,3.224710793482607e-39,3.222711593362655e-39,3.220712393242703e-39,3.218713193122751e-39,3.216713993002799e-39,3.214714792882847e-39,3.2127155927628947e-39,3.2107163926429427e-39,3.2087171925229907e-39,3.2067179924030387e-39,3.2047187922830866e-39,3.2027195921631346e-39,3.2007203920431826e-39,3.1987211919232306e-39,3.1967219918032786e-39,3.1947227916833266e-39,3.1927235915633746e-39,3.1907243914434226e-39,3.1887251913234706e-39,3.1867259912035186e-39,3.1847267910835666e-39,3.1827275909636146e-39,3.1807283908436626e-39,3.1787291907237106e-39,3.1767299906037586e-39,3.1747307904838066e-39,3.1727315903638545e-39,3.1707323902439025e-39,3.1687331901239505e-39,3.1667339900039985e-39,3.1647347898840465e-39,3.1627355897640945e-39,3.1607363896441425e-39,3.1587371895241905e-39,3.1567379894042385e-39,3.1547387892842865e-39,3.152739589164334e-39,3.150740389044382e-39,3.14874118892443e-39,3.146741988804478e-39,3.144742788684526e-39,3.142743588564574e-39,3.140744388444622e-39,3.13874518832467e-39,3.136745988204718e-39,3.134746788084766e-39,3.132747587964814e-39,3.130748387844862e-39,3.12874918772491e-39,3.126749987604958e-39,3.124750787485006e-39,3.122751587365054e-39,3.120752387245102e-39,3.11875318712515e-39,3.116753987005198e-39,3.114754786885246e-39,3.112755586765294e-39,3.110756386645342e-39,3.10875718652539e-39,3.106757986405438e-39,3.1047587862854857e-39,3.1027595861655337e-39,3.1007603860455817e-39,3.0987611859256297e-39,3.0967619858056776e-39,3.0947627856857256e-39,3.0927635855657736e-39,3.0907643854458216e-39,3.0887651853258696e-39,3.0867659852059176e-39,3.0847667850859656e-39,3.0827675849660136e-39,3.0807683848460616e-39,3.0787691847261096e-39,3.0767699846061576e-39,3.0747707844862056e-39,3.0727715843662536e-39,3.0707723842463016e-39,3.0687731841263496e-39,3.0667739840063975e-39,3.0647747838864455e-39,3.0627755837664935e-39,3.0607763836465415e-39,3.0587771835265895e-39,3.0567779834066375e-39,3.0547787832866855e-39,3.0527795831667335e-39,3.050780383046781e-39,3.048781182926829e-39,3.046781982806877e-39,3.044782782686925e-39,3.042783582566973e-39,3.040784382447021e-39,3.038785182327069e-39,3.036785982207117e-39,3.034786782087165e-39,3.032787581967213e-39,3.030788381847261e-39,3.028789181727309e-39,3.026789981607357e-39,3.024790781487405e-39,3.022791581367453e-39,3.020792381247501e-39,3.018793181127549e-39,3.016793981007597e-39,3.014794780887645e-39,3.012795580767693e-39,3.010796380647741e-39,3.008797180527789e-39,3.006797980407837e-39,3.004798780287885e-39,3.002799580167933e-39,3.000800380047981e-39,2.998801179928029e-39,2.9968019798080767e-39,2.9948027796881247e-39,2.9928035795681727e-39,2.9908043794482207e-39,2.9888051793282686e-39,2.9868059792083166e-39,2.9848067790883646e-39,2.9828075789684126e-39,2.9808083788484606e-39,2.9788091787285086e-39,2.9768099786085566e-39,2.9748107784886046e-39,2.9728115783686526e-39,2.9708123782487006e-39,2.9688131781287486e-39,2.9668139780087966e-39,2.9648147778888446e-39,2.9628155777688926e-39,2.9608163776489406e-39,2.9588171775289885e-39,2.9568179774090365e-39,2.9548187772890845e-39,2.9528195771691325e-39,2.9508203770491805e-39,2.9488211769292285e-39,2.946821976809276e-39,2.944822776689324e-39,2.942823576569372e-39,2.94082437644942e-39,2.938825176329468e-39,2.936825976209516e-39,2.934826776089564e-39,2.932827575969612e-39,2.93082837584966e-39,2.928829175729708e-39,2.926829975609756e-39,2.924830775489804e-39,2.922831575369852e-39,2.9208323752498998e-39,2.9188331751299478e-39,2.9168339750099958e-39,2.9148347748900438e-39,2.9128355747700917e-39,2.9108363746501397e-39,2.9088371745301877e-39,2.9068379744102357e-39,2.9048387742902837e-39,2.9028395741703317e-39,2.9008403740503797e-39,2.8988411739304277e-39,2.8968419738104757e-39,2.8948427736905237e-39,2.8928435735705717e-39,2.8908443734506197e-39,2.8888451733306677e-39,2.8868459732107157e-39,2.8848467730907637e-39,2.8828475729708117e-39,2.8808483728508596e-39,2.8788491727309076e-39,2.8768499726109556e-39,2.8748507724910036e-39,2.8728515723710516e-39,2.8708523722510996e-39,2.8688531721311473e-39,2.8668539720111953e-39,2.8648547718912433e-39,2.8628555717712913e-39,2.8608563716513393e-39,2.8588571715313872e-39,2.8568579714114352e-39,2.8548587712914832e-39,2.8528595711715312e-39,2.8508603710515792e-39,2.8488611709316272e-39,2.8468619708116752e-39,2.8448627706917232e-39,2.8428635705717712e-39,2.8408643704518192e-39,2.8388651703318672e-39,2.8368659702119152e-39,2.8348667700919632e-39,2.8328675699720112e-39,2.830868369852059e-39,2.828869169732107e-39,2.826869969612155e-39,2.824870769492203e-39,2.822871569372251e-39,2.820872369252299e-39,2.8188731691323468e-39,2.8168739690123948e-39,2.8148747688924428e-39,2.8128755687724908e-39,2.8108763686525388e-39,2.8088771685325868e-39,2.8068779684126348e-39,2.8048787682926827e-39,2.8028795681727307e-39,2.8008803680527787e-39,2.7988811679328267e-39,2.7968819678128747e-39,2.7948827676929227e-39,2.7928835675729707e-39,2.7908843674530187e-39,2.7888851673330667e-39,2.7868859672131147e-39,2.7848867670931627e-39,2.7828875669732107e-39,2.7808883668532587e-39,2.7788891667333067e-39,2.7768899666133547e-39,2.7748907664934027e-39,2.7728915663734506e-39,2.7708923662534986e-39,2.7688931661335466e-39,2.7668939660135943e-39,2.7648947658936423e-39,2.7628955657736903e-39,2.7608963656537383e-39,2.7588971655337863e-39,2.7568979654138343e-39,2.7548987652938823e-39,2.7528995651739303e-39,2.7509003650539782e-39,2.7489011649340262e-39,2.7469019648140742e-39,2.7449027646941222e-39,2.7429035645741702e-39,2.7409043644542182e-39,2.7389051643342662e-39,2.7369059642143142e-39,2.7349067640943622e-39,2.7329075639744102e-39,2.7309083638544582e-39,2.7289091637345062e-39,2.7269099636145542e-39,2.7249107634946022e-39,2.72291156337465e-39,2.720912363254698e-39,2.718913163134746e-39,2.716913963014794e-39,2.7149147628948418e-39,2.7129155627748898e-39,2.7109163626549378e-39,2.7089171625349858e-39,2.7069179624150338e-39,2.7049187622950818e-39,2.7029195621751298e-39,2.7009203620551778e-39,2.6989211619352258e-39,2.6969219618152737e-39,2.6949227616953217e-39,2.6929235615753697e-39,2.6909243614554177e-39,2.6889251613354657e-39,2.6869259612155137e-39,2.6849267610955617e-39,2.6829275609756097e-39,2.6809283608556577e-39,2.6789291607357057e-39,2.6769299606157537e-39,2.6749307604958017e-39,2.6729315603758497e-39,2.6709323602558977e-39,2.6689331601359457e-39,2.6669339600159937e-39,2.6649347598960416e-39,2.6629355597760893e-39,2.6609363596561373e-39,2.6589371595361853e-39,2.6569379594162333e-39,2.6549387592962813e-39,2.6529395591763293e-39,2.6509403590563773e-39,2.6489411589364253e-39,2.6469419588164733e-39,2.6449427586965213e-39,2.6429435585765692e-39,2.6409443584566172e-39,2.6389451583366652e-39,2.6369459582167132e-39,2.6349467580967612e-39,2.6329475579768092e-39,2.6309483578568572e-39,2.6289491577369052e-39,2.6269499576169532e-39,2.6249507574970012e-39,2.6229515573770492e-39,2.6209523572570972e-39,2.6189531571371452e-39,2.616953957017193e-39,2.614954756897241e-39,2.6129555567772888e-39,2.6109563566573368e-39,2.6089571565373848e-39,2.6069579564174328e-39,2.6049587562974808e-39,2.6029595561775288e-39,2.6009603560575768e-39,2.5989611559376248e-39,2.5969619558176728e-39,2.5949627556977208e-39,2.5929635555777688e-39,2.5909643554578168e-39,2.5889651553378647e-39,2.5869659552179127e-39,2.5849667550979607e-39,2.5829675549780087e-39,2.5809683548580567e-39,2.5789691547381047e-39,2.5769699546181527e-39,2.5749707544982007e-39,2.5729715543782487e-39,2.5709723542582967e-39,2.5689731541383447e-39,2.5669739540183927e-39,2.5649747538984407e-39,2.5629755537784887e-39,2.5609763536585363e-39,2.5589771535385843e-39,2.5569779534186323e-39,2.5549787532986803e-39,2.5529795531787283e-39,2.5509803530587763e-39,2.5489811529388243e-39,2.5469819528188723e-39,2.5449827526989203e-39,2.5429835525789683e-39,2.5409843524590163e-39,2.5389851523390643e-39,2.5369859522191123e-39,2.5349867520991602e-39,2.5329875519792082e-39,2.5309883518592562e-39,2.5289891517393042e-39,2.5269899516193522e-39,2.5249907514994002e-39,2.5229915513794482e-39,2.5209923512594962e-39,2.5189931511395442e-39,2.5169939510195922e-39,2.5149947508996402e-39,2.5129955507796882e-39,2.5109963506597362e-39,2.5089971505397838e-39,2.5069979504198318e-39,2.5049987502998798e-39,2.5029995501799278e-39,2.5010003500599758e-39,2.4990011499400238e-39,2.4970019498200718e-39,2.4950027497001198e-39,2.4930035495801678e-39,2.4910043494602158e-39,2.4890051493402638e-39,2.4870059492203118e-39,2.4850067491003598e-39,2.4830075489804078e-39,2.4810083488604557e-39,2.4790091487405037e-39,2.4770099486205517e-39,2.4750107485005997e-39,2.4730115483806477e-39,2.4710123482606957e-39,2.4690131481407437e-39,2.4670139480207917e-39,2.4650147479008397e-39,2.4630155477808877e-39,2.4610163476609357e-39,2.4590171475409837e-39,2.4570179474210313e-39,2.4550187473010793e-39,2.4530195471811273e-39,2.4510203470611753e-39,2.4490211469412233e-39,2.4470219468212713e-39,2.4450227467013193e-39,2.4430235465813673e-39,2.4410243464614153e-39,2.4390251463414633e-39,2.4370259462215113e-39,2.4350267461015593e-39,2.4330275459816073e-39,2.4310283458616553e-39,2.4290291457417033e-39,2.4270299456217512e-39,2.4250307455017992e-39,2.4230315453818472e-39,2.4210323452618952e-39,2.4190331451419432e-39,2.4170339450219912e-39,2.4150347449020392e-39,2.4130355447820872e-39,2.4110363446621352e-39,2.4090371445421832e-39,2.407037944422231e-39,2.405038744302279e-39,2.403039544182327e-39,2.4010403440623748e-39,2.3990411439424228e-39,2.3970419438224708e-39,2.3950427437025188e-39,2.3930435435825668e-39,2.3910443434626148e-39,2.3890451433426628e-39,2.3870459432227108e-39,2.3850467431027588e-39,2.3830475429828068e-39,2.3810483428628548e-39,2.3790491427429028e-39,2.3770499426229508e-39,2.3750507425029988e-39,2.3730515423830467e-39,2.3710523422630947e-39,2.3690531421431427e-39,2.3670539420231907e-39,2.3650547419032387e-39,2.3630555417832867e-39,2.3610563416633347e-39,2.3590571415433827e-39,2.3570579414234307e-39,2.3550587413034784e-39,2.3530595411835264e-39,2.3510603410635743e-39,2.3490611409436223e-39,2.3470619408236703e-39,2.3450627407037183e-39,2.3430635405837663e-39,2.3410643404638143e-39,2.3390651403438623e-39,2.3370659402239103e-39,2.3350667401039583e-39,2.3330675399840063e-39,2.3310683398640543e-39,2.3290691397441023e-39,2.3270699396241503e-39,2.3250707395041983e-39,2.3230715393842463e-39,2.3210723392642943e-39,2.3190731391443422e-39,2.3170739390243902e-39,2.3150747389044382e-39,2.3130755387844862e-39,2.3110763386645342e-39,2.3090771385445822e-39,2.3070779384246302e-39,2.3050787383046782e-39,2.303079538184726e-39,2.301080338064774e-39,2.299081137944822e-39,2.29708193782487e-39,2.295082737704918e-39,2.2930835375849658e-39,2.2910843374650138e-39,2.2890851373450618e-39,2.2870859372251098e-39,2.2850867371051578e-39,2.2830875369852058e-39,2.2810883368652538e-39,2.2790891367453018e-39,2.2770899366253498e-39,2.2750907365053978e-39,2.2730915363854458e-39,2.2710923362654938e-39,2.2690931361455418e-39,2.2670939360255898e-39,2.2650947359056377e-39,2.2630955357856857e-39,2.2610963356657337e-39,2.2590971355457817e-39,2.2570979354258297e-39,2.2550987353058777e-39,2.2530995351859257e-39,2.2511003350659734e-39,2.2491011349460214e-39,2.2471019348260694e-39,2.2451027347061174e-39,2.2431035345861653e-39,2.2411043344662133e-39,2.2391051343462613e-39,2.2371059342263093e-39,2.2351067341063573e-39,2.2331075339864053e-39,2.2311083338664533e-39,2.2291091337465013e-39,2.2271099336265493e-39,2.2251107335065973e-39,2.2231115333866453e-39,2.2211123332666933e-39,2.2191131331467413e-39,2.2171139330267893e-39,2.2151147329068373e-39,2.2131155327868853e-39,2.2111163326669332e-39,2.2091171325469812e-39,2.2071179324270292e-39,2.2051187323070772e-39,2.2031195321871252e-39,2.201120332067173e-39,2.199121131947221e-39,2.197121931827269e-39,2.195122731707317e-39,2.193123531587365e-39,2.191124331467413e-39,2.189125131347461e-39,2.187125931227509e-39,2.1851267311075568e-39,2.1831275309876048e-39,2.1811283308676528e-39,2.1791291307477008e-39,2.1771299306277488e-39,2.1751307305077968e-39,2.1731315303878448e-39,2.1711323302678928e-39,2.1691331301479408e-39,2.1671339300279888e-39,2.1651347299080368e-39,2.1631355297880848e-39,2.1611363296681328e-39,2.1591371295481808e-39,2.1571379294282287e-39,2.1551387293082767e-39,2.1531395291883247e-39,2.1511403290683727e-39,2.1491411289484204e-39,2.1471419288284684e-39,2.1451427287085164e-39,2.1431435285885644e-39,2.1411443284686124e-39,2.1391451283486604e-39,2.1371459282287084e-39,2.1351467281087563e-39,2.1331475279888043e-39,2.1311483278688523e-39,2.1291491277489003e-39,2.1271499276289483e-39,2.1251507275089963e-39,2.1231515273890443e-39,2.1211523272690923e-39,2.1191531271491403e-39,2.1171539270291883e-39,2.1151547269092363e-39,2.1131555267892843e-39,2.1111563266693323e-39,2.1091571265493803e-39,2.1071579264294283e-39,2.1051587263094763e-39,2.1031595261895242e-39,2.1011603260695722e-39,2.0991611259496202e-39,2.097161925829668e-39,2.095162725709716e-39,2.093163525589764e-39,2.091164325469812e-39,2.08916512534986e-39,2.087165925229908e-39,2.085166725109956e-39,2.083167524990004e-39,2.081168324870052e-39,2.0791691247501e-39,2.0771699246301478e-39,2.0751707245101958e-39,2.0731715243902438e-39,2.0711723242702918e-39,2.0691731241503398e-39,2.0671739240303878e-39,2.0651747239104358e-39,2.0631755237904838e-39,2.0611763236705318e-39,2.0591771235505798e-39,2.0571779234306278e-39,2.0551787233106758e-39,2.0531795231907238e-39,2.0511803230707718e-39,2.0491811229508197e-39,2.0471819228308677e-39,2.0451827227109154e-39,2.0431835225909634e-39,2.0411843224710114e-39,2.0391851223510594e-39,2.0371859222311074e-39,2.0351867221111554e-39,2.0331875219912034e-39,2.0311883218712514e-39,2.0291891217512994e-39,2.0271899216313473e-39,2.0251907215113953e-39,2.0231915213914433e-39,2.0211923212714913e-39,2.0191931211515393e-39,2.0171939210315873e-39,2.0151947209116353e-39,2.0131955207916833e-39,2.0111963206717313e-39,2.0091971205517793e-39,2.0071979204318273e-39,2.0051987203118753e-39,2.0031995201919233e-39,2.0012003200719713e-39,1.9992011199520193e-39,1.9972019198320673e-39,1.995202719712115e-39,1.993203519592163e-39,1.991204319472211e-39,1.989205119352259e-39,1.987205919232307e-39,1.985206719112355e-39,1.983207518992403e-39,1.981208318872451e-39,1.979209118752499e-39,1.977209918632547e-39,1.975210718512595e-39,1.973211518392643e-39,1.971212318272691e-39,1.9692131181527388e-39,1.9672139180327868e-39,1.9652147179128348e-39,1.9632155177928828e-39,1.9612163176729308e-39,1.9592171175529788e-39,1.9572179174330268e-39,1.9552187173130748e-39,1.9532195171931228e-39,1.9512203170731708e-39,1.9492211169532188e-39,1.9472219168332668e-39,1.9452227167133148e-39,1.9432235165933624e-39,1.9412243164734104e-39,1.9392251163534584e-39,1.9372259162335064e-39,1.9352267161135544e-39,1.9332275159936024e-39,1.9312283158736504e-39,1.9292291157536984e-39,1.9272299156337464e-39,1.9252307155137944e-39,1.9232315153938424e-39,1.9212323152738904e-39,1.9192331151539383e-39,1.9172339150339863e-39,1.9152347149140343e-39,1.9132355147940823e-39,1.9112363146741303e-39,1.9092371145541783e-39,1.9072379144342263e-39,1.9052387143142743e-39,1.9032395141943223e-39,1.9012403140743703e-39,1.8992411139544183e-39,1.8972419138344663e-39,1.8952427137145143e-39,1.8932435135945623e-39,1.89124431347461e-39,1.889245113354658e-39,1.887245913234706e-39,1.885246713114754e-39,1.883247512994802e-39,1.88124831287485e-39,1.879249112754898e-39,1.877249912634946e-39,1.875250712514994e-39,1.873251512395042e-39,1.87125231227509e-39,1.869253112155138e-39,1.867253912035186e-39,1.865254711915234e-39,1.863255511795282e-39,1.8612563116753298e-39,1.8592571115553778e-39,1.8572579114354258e-39,1.8552587113154738e-39,1.8532595111955218e-39,1.8512603110755698e-39,1.8492611109556178e-39,1.8472619108356658e-39,1.8452627107157138e-39,1.8432635105957618e-39,1.8412643104758098e-39,1.8392651103558574e-39,1.8372659102359054e-39,1.8352667101159534e-39,1.8332675099960014e-39,1.8312683098760494e-39,1.8292691097560974e-39,1.8272699096361454e-39,1.8252707095161934e-39,1.8232715093962414e-39,1.8212723092762894e-39,1.8192731091563374e-39,1.8172739090363854e-39,1.8152747089164334e-39,1.8132755087964814e-39,1.8112763086765293e-39,1.8092771085565773e-39,1.8072779084366253e-39,1.8052787083166733e-39,1.8032795081967213e-39,1.8012803080767693e-39,1.7992811079568173e-39,1.7972819078368653e-39,1.7952827077169133e-39,1.7932835075969613e-39,1.7912843074770093e-39,1.789285107357057e-39,1.787285907237105e-39,1.785286707117153e-39,1.783287506997201e-39,1.781288306877249e-39,1.779289106757297e-39,1.777289906637345e-39,1.775290706517393e-39,1.773291506397441e-39,1.771292306277489e-39,1.769293106157537e-39,1.767293906037585e-39,1.765294705917633e-39,1.763295505797681e-39,1.761296305677729e-39,1.759297105557777e-39,1.757297905437825e-39,1.755298705317873e-39,1.7532995051979208e-39,1.7513003050779688e-39,1.7493011049580168e-39,1.7473019048380648e-39,1.7453027047181128e-39,1.7433035045981608e-39,1.7413043044782088e-39,1.7393051043582568e-39,1.7373059042383045e-39,1.7353067041183524e-39,1.7333075039984004e-39,1.7313083038784484e-39,1.7293091037584964e-39,1.7273099036385444e-39,1.7253107035185924e-39,1.7233115033986404e-39,1.7213123032786884e-39,1.7193131031587364e-39,1.7173139030387844e-39,1.7153147029188324e-39,1.7133155027988804e-39,1.7113163026789284e-39,1.7093171025589764e-39,1.7073179024390244e-39,1.7053187023190724e-39,1.7033195021991203e-39,1.7013203020791683e-39,1.6993211019592163e-39,1.6973219018392643e-39,1.6953227017193123e-39,1.6933235015993603e-39,1.6913243014794083e-39,1.6893251013594563e-39,1.6873259012395043e-39,1.685326701119552e-39,1.6833275009996e-39,1.681328300879648e-39,1.679329100759696e-39,1.677329900639744e-39,1.675330700519792e-39,1.67333150039984e-39,1.671332300279888e-39,1.669333100159936e-39,1.667333900039984e-39,1.665334699920032e-39,1.66333549980008e-39,1.661336299680128e-39,1.659337099560176e-39,1.657337899440224e-39,1.655338699320272e-39,1.65333949920032e-39,1.651340299080368e-39,1.649341098960416e-39,1.647341898840464e-39,1.6453426987205118e-39,1.6433434986005598e-39,1.6413442984806078e-39,1.6393450983606558e-39,1.6373458982407038e-39,1.6353466981207518e-39,1.6333474980007995e-39,1.6313482978808475e-39,1.6293490977608955e-39,1.6273498976409434e-39,1.6253506975209914e-39,1.6233514974010394e-39,1.6213522972810874e-39,1.6193530971611354e-39,1.6173538970411834e-39,1.6153546969212314e-39,1.6133554968012794e-39,1.6113562966813274e-39,1.6093570965613754e-39,1.6073578964414234e-39,1.6053586963214714e-39,1.6033594962015194e-39,1.6013602960815674e-39,1.5993610959616154e-39,1.5973618958416634e-39,1.5953626957217113e-39,1.5933634956017593e-39,1.5913642954818073e-39,1.5893650953618553e-39,1.5873658952419033e-39,1.5853666951219513e-39,1.583367495001999e-39,1.581368294882047e-39,1.579369094762095e-39,1.577369894642143e-39,1.575370694522191e-39,1.573371494402239e-39,1.571372294282287e-39,1.569373094162335e-39,1.567373894042383e-39,1.565374693922431e-39,1.563375493802479e-39,1.561376293682527e-39,1.559377093562575e-39,1.557377893442623e-39,1.555378693322671e-39,1.553379493202719e-39,1.551380293082767e-39,1.549381092962815e-39,1.547381892842863e-39,1.545382692722911e-39,1.543383492602959e-39,1.541384292483007e-39,1.539385092363055e-39,1.5373858922431028e-39,1.5353866921231508e-39,1.5333874920031988e-39,1.5313882918832465e-39,1.5293890917632945e-39,1.5273898916433425e-39,1.5253906915233905e-39,1.5233914914034385e-39,1.5213922912834865e-39,1.5193930911635344e-39,1.5173938910435824e-39,1.5153946909236304e-39,1.5133954908036784e-39,1.5113962906837264e-39,1.5093970905637744e-39,1.5073978904438224e-39,1.5053986903238704e-39,1.5033994902039184e-39,1.5014002900839664e-39,1.4994010899640144e-39,1.4974018898440624e-39,1.4954026897241104e-39,1.4934034896041584e-39,1.4914042894842064e-39,1.4894050893642544e-39,1.4874058892443023e-39,1.4854066891243503e-39,1.4834074890043983e-39,1.4814082888844463e-39,1.479409088764494e-39,1.477409888644542e-39,1.47541068852459e-39,1.473411488404638e-39,1.471412288284686e-39,1.469413088164734e-39,1.467413888044782e-39,1.46541468792483e-39,1.463415487804878e-39,1.461416287684926e-39,1.459417087564974e-39,1.457417887445022e-39,1.4554186873250699e-39,1.4534194872051179e-39,1.4514202870851659e-39,1.4494210869652139e-39,1.4474218868452619e-39,1.4454226867253099e-39,1.4434234866053579e-39,1.4414242864854057e-39,1.4394250863654537e-39,1.4374258862455017e-39,1.4354266861255497e-39,1.4334274860055977e-39,1.4314282858856457e-39,1.4294290857656937e-39,1.4274298856457417e-39,1.4254306855257897e-39,1.4234314854058376e-39,1.4214322852858856e-39,1.4194330851659336e-39,1.4174338850459816e-39,1.4154346849260295e-39,1.4134354848060775e-39,1.4114362846861254e-39,1.4094370845661734e-39,1.4074378844462214e-39,1.4054386843262694e-39,1.4034394842063174e-39,1.4014402840863654e-39,1.3994410839664134e-39,1.3974418838464614e-39,1.3954426837265094e-39,1.3934434836065574e-39,1.3914442834866054e-39,1.3894450833666532e-39,1.3874458832467012e-39,1.3854466831267492e-39,1.3834474830067972e-39,1.3814482828868452e-39,1.3794490827668932e-39,1.3774498826469412e-39,1.3754506825269892e-39,1.3734514824070372e-39,1.3714522822870852e-39,1.3694530821671331e-39,1.3674538820471811e-39,1.3654546819272291e-39,1.363455481807277e-39,1.361456281687325e-39,1.359457081567373e-39,1.357457881447421e-39,1.355458681327469e-39,1.353459481207517e-39,1.351460281087565e-39,1.349461080967613e-39,1.3474618808476609e-39,1.3454626807277089e-39,1.3434634806077569e-39,1.3414642804878049e-39,1.3394650803678529e-39,1.3374658802479007e-39,1.3354666801279487e-39,1.3334674800079967e-39,1.3314682798880447e-39,1.3294690797680927e-39,1.3274698796481407e-39,1.3254706795281887e-39,1.3234714794082367e-39,1.3214722792882847e-39,1.3194730791683327e-39,1.3174738790483807e-39,1.3154746789284286e-39,1.3134754788084765e-39,1.3114762786885245e-39,1.3094770785685725e-39,1.3074778784486205e-39,1.3054786783286685e-39,1.3034794782087164e-39,1.3014802780887644e-39,1.2994810779688124e-39,1.2974818778488604e-39,1.2954826777289084e-39,1.2934834776089564e-39,1.2914842774890044e-39,1.2894850773690524e-39,1.2874858772491002e-39,1.2854866771291482e-39,1.2834874770091962e-39,1.2814882768892442e-39,1.2794890767692922e-39,1.2774898766493402e-39,1.2754906765293882e-39,1.2734914764094362e-39,1.2714922762894842e-39,1.2694930761695322e-39,1.2674938760495802e-39,1.2654946759296282e-39,1.2634954758096762e-39,1.261496275689724e-39,1.259497075569772e-39,1.25749787544982e-39,1.255498675329868e-39,1.253499475209916e-39,1.251500275089964e-39,1.249501074970012e-39,1.24750187485006e-39,1.245502674730108e-39,1.243503474610156e-39,1.241504274490204e-39,1.2395050743702519e-39,1.2375058742502999e-39,1.2355066741303477e-39,1.2335074740103957e-39,1.2315082738904437e-39,1.2295090737704917e-39,1.2275098736505397e-39,1.2255106735305877e-39,1.2235114734106357e-39,1.2215122732906837e-39,1.2195130731707317e-39,1.2175138730507797e-39,1.2155146729308277e-39,1.2135154728108757e-39,1.2115162726909237e-39,1.2095170725709715e-39,1.2075178724510195e-39,1.2055186723310675e-39,1.2035194722111155e-39,1.2015202720911635e-39,1.1995210719712115e-39,1.1975218718512595e-39,1.1955226717313074e-39,1.1935234716113554e-39,1.1915242714914034e-39,1.1895250713714514e-39,1.1875258712514994e-39,1.1855266711315474e-39,1.1835274710115952e-39,1.1815282708916432e-39,1.1795290707716912e-39,1.1775298706517392e-39,1.1755306705317872e-39,1.1735314704118352e-39,1.1715322702918832e-39,1.1695330701719312e-39,1.1675338700519792e-39,1.1655346699320272e-39,1.1635354698120752e-39,1.1615362696921232e-39,1.1595370695721712e-39,1.157537869452219e-39,1.155538669332267e-39,1.153539469212315e-39,1.151540269092363e-39,1.149541068972411e-39,1.147541868852459e-39,1.145542668732507e-39,1.143543468612555e-39,1.141544268492603e-39,1.139545068372651e-39,1.137545868252699e-39,1.135546668132747e-39,1.133547468012795e-39,1.1315482678928427e-39,1.1295490677728907e-39,1.1275498676529387e-39,1.1255506675329867e-39,1.1235514674130347e-39,1.1215522672930827e-39,1.1195530671731307e-39,1.1175538670531787e-39,1.1155546669332267e-39,1.1135554668132747e-39,1.1115562666933227e-39,1.1095570665733707e-39,1.1075578664534185e-39,1.1055586663334665e-39,1.1035594662135145e-39,1.1015602660935625e-39,1.0995610659736105e-39,1.0975618658536585e-39,1.0955626657337065e-39,1.0935634656137545e-39,1.0915642654938025e-39,1.0895650653738505e-39,1.0875658652538984e-39,1.0855666651339464e-39,1.0835674650139944e-39,1.0815682648940423e-39,1.0795690647740903e-39,1.0775698646541382e-39,1.0755706645341862e-39,1.0735714644142342e-39,1.0715722642942822e-39,1.0695730641743302e-39,1.0675738640543782e-39,1.0655746639344262e-39,1.0635754638144742e-39,1.0615762636945222e-39,1.0595770635745702e-39,1.0575778634546182e-39,1.055578663334666e-39,1.053579463214714e-39,1.051580263094762e-39,1.04958106297481e-39,1.047581862854858e-39,1.045582662734906e-39,1.043583462614954e-39,1.041584262495002e-39,1.03958506237505e-39,1.037585862255098e-39,1.035586662135146e-39,1.033587462015194e-39,1.031588261895242e-39,1.0295890617752898e-39,1.0275898616553378e-39,1.0255906615353858e-39,1.0235914614154337e-39,1.0215922612954817e-39,1.0195930611755297e-39,1.0175938610555777e-39,1.0155946609356257e-39,1.0135954608156737e-39,1.0115962606957217e-39,1.0095970605757697e-39,1.0075978604558177e-39,1.0055986603358657e-39,1.0035994602159135e-39,1.0016002600959615e-39,9.996010599760095e-40,9.976018598560575e-40,9.956026597361055e-40,9.936034596161535e-40,9.916042594962015e-40,9.896050593762495e-40,9.876058592562975e-40,9.856066591363455e-40,9.836074590163935e-40,9.816082588964415e-40,9.796090587764894e-40,9.776098586565373e-40,9.756106585365853e-40,9.736114584166333e-40,9.716122582966813e-40,9.696130581767292e-40,9.676138580567772e-40,9.656146579368252e-40,9.636154578168732e-40,9.616162576969212e-40,9.596170575769692e-40,9.576178574570172e-40,9.556186573370652e-40,9.536194572171132e-40,9.51620257097161e-40,9.49621056977209e-40,9.47621856857257e-40,9.45622656737305e-40,9.43623456617353e-40,9.41624256497401e-40,9.39625056377449e-40,9.37625856257497e-40,9.35626656137545e-40,9.33627456017593e-40,9.31628255897641e-40,9.29629055777689e-40,9.27629855657737e-40,9.256306555377848e-40,9.236314554178328e-40,9.216322552978808e-40,9.196330551779288e-40,9.176338550579768e-40,9.156346549380247e-40,9.136354548180727e-40,9.116362546981207e-40,9.096370545781687e-40,9.076378544582167e-40,9.056386543382647e-40,9.036394542183127e-40,9.016402540983605e-40,8.996410539784085e-40,8.976418538584565e-40,8.956426537385045e-40,8.936434536185525e-40,8.916442534986005e-40,8.896450533786485e-40,8.876458532586965e-40,8.856466531387445e-40,8.836474530187925e-40,8.816482528988405e-40,8.796490527788885e-40,8.776498526589365e-40,8.756506525389843e-40,8.736514524190323e-40,8.716522522990803e-40,8.696530521791283e-40,8.676538520591763e-40,8.656546519392243e-40,8.636554518192723e-40,8.616562516993202e-40,8.596570515793682e-40,8.576578514594162e-40,8.556586513394642e-40,8.536594512195122e-40,8.516602510995602e-40,8.49661050979608e-40,8.47661850859656e-40,8.45662650739704e-40,8.43663450619752e-40,8.416642504998e-40,8.39665050379848e-40,8.37665850259896e-40,8.35666650139944e-40,8.33667450019992e-40,8.3166824990004e-40,8.29669049780088e-40,8.27669849660136e-40,8.25670649540184e-40,8.236714494202318e-40,8.216722493002798e-40,8.196730491803278e-40,8.176738490603758e-40,8.156746489404238e-40,8.136754488204718e-40,8.116762487005198e-40,8.096770485805678e-40,8.076778484606157e-40,8.056786483406637e-40,8.036794482207117e-40,8.016802481007597e-40,7.996810479808077e-40,7.976818478608556e-40,7.956826477409035e-40,7.936834476209515e-40,7.916842475009995e-40,7.896850473810475e-40,7.876858472610955e-40,7.856866471411435e-40,7.836874470211915e-40,7.816882469012395e-40,7.796890467812875e-40,7.776898466613355e-40,7.756906465413835e-40,7.736914464214315e-40,7.716922463014793e-40,7.696930461815273e-40,7.676938460615753e-40,7.656946459416233e-40,7.636954458216713e-40,7.616962457017193e-40,7.596970455817673e-40,7.576978454618153e-40,7.556986453418633e-40,7.536994452219112e-40,7.517002451019592e-40,7.497010449820072e-40,7.477018448620552e-40,7.45702644742103e-40,7.43703444622151e-40,7.41704244502199e-40,7.39705044382247e-40,7.37705844262295e-40,7.35706644142343e-40,7.33707444022391e-40,7.31708243902439e-40,7.29709043782487e-40,7.277098436625349e-40,7.257106435425829e-40,7.237114434226309e-40,7.217122433026789e-40,7.197130431827269e-40,7.177138430627749e-40,7.157146429428229e-40,7.137154428228708e-40,7.117162427029188e-40,7.097170425829668e-40,7.077178424630148e-40,7.057186423430628e-40,7.037194422231108e-40,7.017202421031587e-40,6.997210419832067e-40,6.977218418632547e-40,6.9572264174330265e-40,6.9372344162335065e-40,6.917242415033986e-40,6.897250413834466e-40,6.8772584126349455e-40,6.857266411435425e-40,6.837274410235905e-40,6.817282409036385e-40,6.797290407836865e-40,6.777298406637345e-40,6.757306405437824e-40,6.737314404238304e-40,6.717322403038784e-40,6.697330401839264e-40,6.677338400639744e-40,6.657346399440224e-40,6.637354398240704e-40,6.617362397041183e-40,6.597370395841663e-40,6.577378394642143e-40,6.557386393442623e-40,6.537394392243103e-40,6.517402391043583e-40,6.497410389844062e-40,6.477418388644542e-40,6.457426387445022e-40,6.437434386245502e-40,6.4174423850459815e-40,6.3974503838464615e-40,6.3774583826469406e-40,6.3574663814474205e-40,6.3374743802479005e-40,6.31748237904838e-40,6.29749037784886e-40,6.27749837664934e-40,6.25750637544982e-40,6.237514374250299e-40,6.217522373050779e-40,6.197530371851259e-40,6.177538370651739e-40,6.157546369452219e-40,6.137554368252699e-40,6.117562367053178e-40,6.097570365853658e-40,6.077578364654138e-40,6.057586363454618e-40,6.037594362255098e-40,6.017602361055578e-40,5.997610359856058e-40,5.977618358656537e-40,5.957626357457017e-40,5.937634356257497e-40,5.917642355057977e-40,5.8976503538584566e-40,5.8776583526589365e-40,5.857666351459416e-40,5.8376743502598956e-40,5.8176823490603755e-40,5.7976903478608555e-40,5.777698346661335e-40,5.757706345461815e-40,5.737714344262295e-40,5.717722343062774e-40,5.697730341863254e-40,5.677738340663734e-40,5.657746339464214e-40,5.637754338264694e-40,5.617762337065174e-40,5.597770335865653e-40,5.577778334666133e-40,5.557786333466613e-40,5.537794332267093e-40,5.517802331067573e-40,5.497810329868053e-40,5.477818328668532e-40,5.457826327469012e-40,5.437834326269492e-40,5.417842325069972e-40,5.397850323870452e-40,5.377858322670932e-40,5.3578663214714116e-40,5.337874320271891e-40,5.317882319072371e-40,5.2978903178728506e-40,5.2778983166733305e-40,5.2579063154738105e-40,5.23791431427429e-40,5.2179223130747695e-40,5.1979303118752494e-40,5.177938310675729e-40,5.157946309476209e-40,5.137954308276689e-40,5.117962307077169e-40,5.097970305877649e-40,5.077978304678128e-40,5.057986303478608e-40,5.037994302279088e-40,5.018002301079568e-40,4.998010299880048e-40,4.978018298680528e-40,4.958026297481007e-40,4.938034296281487e-40,4.918042295081967e-40,4.898050293882447e-40,4.878058292682927e-40,4.858066291483407e-40,4.838074290283887e-40,4.818082289084366e-40,4.798090287884846e-40,4.778098286685326e-40,4.7581062854858056e-40,4.7381142842862855e-40,4.7181222830867654e-40,4.6981302818872446e-40,4.6781382806877245e-40,4.6581462794882044e-40,4.638154278288684e-40,4.618162277089164e-40,4.598170275889644e-40,4.578178274690124e-40,4.558186273490603e-40,4.538194272291083e-40,4.518202271091563e-40,4.498210269892043e-40,4.478218268692523e-40,4.458226267493003e-40,4.438234266293482e-40,4.418242265093962e-40,4.398250263894442e-40,4.378258262694922e-40,4.358266261495402e-40,4.338274260295882e-40,4.318282259096361e-40,4.298290257896841e-40,4.278298256697321e-40,4.258306255497801e-40,4.238314254298281e-40,4.2183222530987606e-40,4.1983302518992405e-40,4.17833825069972e-40,4.1583462495001996e-40,4.1383542483006795e-40,4.1183622471011594e-40,4.098370245901639e-40,4.078378244702119e-40,4.0583862435025984e-40,4.038394242303078e-40,4.018402241103558e-40,3.998410239904038e-40,3.978418238704518e-40,3.958426237504998e-40,3.938434236305478e-40,3.918442235105957e-40,3.898450233906437e-40,3.878458232706917e-40,3.858466231507397e-40,3.838474230307877e-40,3.818482229108357e-40,3.798490227908836e-40,3.778498226709316e-40,3.758506225509796e-40,3.738514224310276e-40,3.718522223110756e-40,3.698530221911236e-40,3.6785382207117156e-40,3.658546219512195e-40,3.6385542183126746e-40,3.6185622171131546e-40,3.5985702159136345e-40,3.578578214714114e-40,3.558586213514594e-40,3.538594212315074e-40,3.518602211115554e-40,3.4986102099160334e-40,3.4786182087165133e-40,3.4586262075169932e-40,3.4386342063174728e-40,3.4186422051179527e-40,3.3986502039184326e-40,3.378658202718912e-40,3.358666201519392e-40,3.338674200319872e-40,3.3186821991203516e-40,3.2986901979208315e-40,3.2786981967213114e-40,3.258706195521791e-40,3.238714194322271e-40,3.218722193122751e-40,3.1987301919232308e-40,3.1787381907237103e-40,3.1587461895241902e-40,3.13875418832467e-40,3.1187621871251497e-40,3.0987701859256296e-40,3.0787781847261096e-40,3.058786183526589e-40,3.038794182327069e-40,3.018802181127549e-40,2.9988101799280285e-40,2.9788181787285084e-40,2.9588261775289884e-40,2.9388341763294683e-40,2.918842175129948e-40,2.8988501739304278e-40,2.8788581727309077e-40,2.8588661715313872e-40,2.838874170331867e-40,2.818882169132347e-40,2.7988901679328266e-40,2.7788981667333066e-40,2.7589061655337865e-40,2.738914164334266e-40,2.718922163134746e-40,2.698930161935226e-40,2.6789381607357054e-40,2.6589461595361854e-40,2.6389541583366653e-40,2.6189621571371452e-40,2.5989701559376248e-40,2.5789781547381047e-40,2.5589861535385846e-40,2.538994152339064e-40,2.519002151139544e-40,2.499010149940024e-40,2.4790181487405035e-40,2.4590261475409835e-40,2.4390341463414634e-40,2.419042145141943e-40,2.399050143942423e-40,2.379058142742903e-40,2.3590661415433828e-40,2.3390741403438623e-40,2.3190821391443422e-40,2.299090137944822e-40,2.2790981367453017e-40,2.2591061355457816e-40,2.2391141343462616e-40,2.219122133146741e-40,2.199130131947221e-40,2.179138130747701e-40,2.1591461295481805e-40,2.1391541283486604e-40,2.1191621271491403e-40,2.09917012594962e-40,2.0791781247501e-40,2.0591861235505797e-40,2.0391941223510597e-40,2.0192021211515392e-40,1.999210119952019e-40,1.979218118752499e-40,1.9592261175529786e-40,1.9392341163534585e-40,1.9192421151539385e-40,1.899250113954418e-40,1.879258112754898e-40,1.859266111555378e-40,1.8392741103558574e-40,1.8192821091563373e-40,1.7992901079568173e-40,1.779298106757297e-40,1.7593061055577767e-40,1.7393141043582567e-40,1.7193221031587364e-40,1.6993301019592163e-40,1.679338100759696e-40,1.6593460995601758e-40,1.6393540983606557e-40,1.6193620971611355e-40,1.5993700959616152e-40,1.5793780947620951e-40,1.5593860935625749e-40,1.5393940923630548e-40,1.5194020911635345e-40,1.4994100899640143e-40,1.4794180887644942e-40,1.459426087564974e-40,1.4394340863654537e-40,1.4194420851659336e-40,1.3994500839664133e-40,1.3794580827668933e-40,1.359466081567373e-40,1.3394740803678527e-40,1.3194820791683327e-40,1.2994900779688124e-40,1.2794980767692921e-40,1.259506075569772e-40,1.2395140743702518e-40,1.2195220731707317e-40,1.1995300719712115e-40,1.1795380707716912e-40,1.1595460695721711e-40,1.1395540683726509e-40,1.1195620671731308e-40,1.0995700659736105e-40,1.0795780647740903e-40,1.0595860635745702e-40,1.03959406237505e-40,1.0196020611755297e-40,9.996100599760096e-41,9.796180587764893e-41,9.596260575769693e-41,9.39634056377449e-41,9.196420551779287e-41,8.996500539784086e-41,8.796580527788884e-41,8.596660515793682e-41,8.396740503798481e-41,8.196820491803278e-41,7.996900479808076e-41,7.796980467812875e-41,7.597060455817673e-41,7.39714044382247e-41,7.197220431827269e-41,6.997300419832067e-41,6.797380407836865e-41,6.597460395841663e-41,6.397540383846461e-41,6.197620371851259e-41,5.997700359856058e-41,5.797780347860855e-41,5.597860335865653e-41,5.397940323870452e-41,5.19802031187525e-41,4.998100299880047e-41,4.798180287884846e-41,4.598260275889644e-41,4.3983402638944423e-41,4.19842025189924e-41,3.9985002399040385e-41,3.7985802279088363e-41,3.5986602159136346e-41,3.3987402039184325e-41,3.198820191923231e-41,2.9989001799280286e-41,2.798980167932827e-41,2.599060155937625e-41,2.399140143942423e-41,2.199220131947221e-41,1.999300119952019e-41,1.799380107956817e-41,1.5994600959616152e-41,1.3995400839664133e-41,1.1996200719712113e-41,9.997000599760096e-42,7.997800479808076e-42,5.998600359856057e-42,3.999400239904038e-42,2.000200119952019e-42,1.0e-45]}

},{}],104:[function(require,module,exports){
module.exports={"expected":[-9.999999989429745e9,-1.0006648953847858e10,-1.0013315637104626e10,-1.002000012199875e10,-1.0026702491882774e10,-1.0033422830667902e10,-1.004016122282889e10,-1.0046917434019453e10,-1.005369218777294e10,-1.0060485251753284e10,-1.0067296712739218e10,-1.007412665809821e10,-1.0080975175791656e10,-1.0087842354380157e10,-1.0094728283028822e10,-1.0101633051512646e10,-1.0108556750221947e10,-1.0115499470167858e10,-1.0122461302987885e10,-1.012944201093825e10,-1.013644234603942e10,-1.0143462072737476e10,-1.0150501285232153e10,-1.0157560078378267e10,-1.0164638547691645e10,-1.0171736789355125e10,-1.0178854900224632e10,-1.0185992977835304e10,-1.0193151120407701e10,-1.0200329426854084e10,-1.0207527996784756e10,-1.0214746589243237e10,-1.0221985986829237e10,-1.0229245950978416e10,-1.0236526584158129e10,-1.0243827989566591e10,-1.0251150271139688e10,-1.0258493533557833e10,-1.0265857882252913e10,-1.0273243423415329e10,-1.0280650264001091e10,-1.0288078511739021e10,-1.0295528275138025e10,-1.0302999310275496e10,-1.031049243265189e10,-1.0318007400965326e10,-1.0325544326919455e10,-1.0333103323035671e10,-1.0340684502660921e10,-1.034828797997558e10,-1.0355913870001455e10,-1.0363562288609846e10,-1.0371233352529734e10,-1.037892717935604e10,-1.0386643887558004e10,-1.0394383230569292e10,-1.0402146059375679e10,-1.0409932130290808e10,-1.0417741565366858e10,-1.0425574487573696e10,-1.0433431020807875e10,-1.0441311289901718e10,-1.0449215420632544e10,-1.045714353973198e10,-1.046509577489539e10,-1.0473072254791441e10,-1.048107273079274e10,-1.0489098088941753e10,-1.049714808376017e10,-1.0505222847907627e10,-1.051332251506659e10,-1.0521447219952621e10,-1.0529597098324791e10,-1.05377722869962e10,-1.0545972923844654e10,-1.0554199147823446e10,-1.0562451098972307e10,-1.0570728918428453e10,-1.0579032355817202e10,-1.058736233850768e10,-1.0595718619608023e10,-1.0604101344758879e10,-1.0612510660755865e10,-1.0620946715561504e10,-1.062940965831731e10,-1.0637899639356024e10,-1.0646416810214022e10,-1.065496132364387e10,-1.066353333362704e10,-1.06721329953868e10,-1.0680760057459707e10,-1.0689415492151089e10,-1.0698099051863434e10,-1.0706810896919325e10,-1.0715551188950115e10,-1.0724320090909838e10,-1.073311776708932e10,-1.0741944383130466e10,-1.0750800106040758e10,-1.0759685104207897e10,-1.0768599547414694e10,-1.077754360685412e10,-1.0786517030804306e10,-1.0795520840586475e10,-1.0804554788786518e10,-1.0813619052392685e10,-1.0822713809881788e10,-1.083183924123551e10,-1.0840995527956938e10,-1.0850182853087332e10,-1.0859401401223116e10,-1.086865113982648e10,-1.0877932693321238e10,-1.0887246033110497e10,-1.0896591350185856e10,-1.0905968837182573e10,-1.091537868839799e10,-1.0924820876547314e10,-1.0934296045058687e10,-1.0943804170836826e10,-1.0953345455016932e10,-1.096292010049238e10,-1.0972528311934772e10,-1.0982170067826252e10,-1.0991846031627497e10,-1.1001556186279371e10,-1.1011300743772314e10,-1.1021079917979475e10,-1.103089392467848e10,-1.104074274868269e10,-1.1050627074591986e10,-1.1060546891970364e10,-1.1070502424437628e10,-1.1080493897631819e10,-1.1090521539232965e10,-1.1100585341005875e10,-1.1110686009882387e10,-1.112082354269495e10,-1.1130998175535906e10,-1.1141210146663591e10,-1.1151459696528252e10,-1.1161746824528645e10,-1.1172072261215992e10,-1.1182436011401411e10,-1.1192838324569487e10,-1.1203279452532103e10,-1.1213759649456743e10,-1.1224278923128017e10,-1.123483802910818e10,-1.1245436980969627e10,-1.1256076042593807e10,-1.1266755480365795e10,-1.1277475563205275e10,-1.1288236308112097e10,-1.1299038497166172e10,-1.130988215356465e10,-1.1320767556684816e10,-1.1331694988600676e10,-1.1342664734116867e10,-1.1353676820364511e10,-1.1364732057574892e10,-1.1375830479523802e10,-1.1386972382288462e10,-1.1398158064854538e10,-1.1409387829153381e10,-1.1420661713460442e10,-1.1431980557932812e10,-1.144334440798018e10,-1.1454753577701042e10,-1.1466208384334892e10,-1.1477709148303194e10,-1.1489255920147703e10,-1.1500849571881866e10,-1.1512490161718319e10,-1.1524178023229212e10,-1.15359134933836e10,-1.1547696912592518e10,-1.1559528344908422e10,-1.1571408696305254e10,-1.1583338039095615e10,-1.1595316727924515e10,-1.1607345121115866e10,-1.1619423580722271e10,-1.163155218568918e10,-1.1643731878248537e10,-1.1655962746254196e10,-1.1668245167187935e10,-1.1680579522521843e10,-1.1692966197773336e10,-1.1705405288318804e10,-1.1717897775161615e10,-1.1730443763301067e10,-1.1743043655004908e10,-1.1755697856875694e10,-1.1768406479283363e10,-1.1781170537634258e10,-1.17939901525732e10,-1.1806865748661785e10,-1.1819797755111814e10,-1.183278660585174e10,-1.1845832430975979e10,-1.1858936289918997e10,-1.1872098323908525e10,-1.1885318986427603e10,-1.189859873602616e10,-1.1911938036394838e10,-1.1925337039452831e10,-1.1938796851940336e10,-1.1952317637861467e10,-1.1965899882235128e10,-1.197954407561069e10,-1.1993250714150251e10,-1.2007019973950562e10,-1.2020853012671957e10,-1.203475001955334e10,-1.2048711514060936e10,-1.2062738021708347e10,-1.2076830074148396e10,-1.2090987874296278e10,-1.2105212634727413e10,-1.2119504572676397e10,-1.2133864245306225e10,-1.2148292216404959e10,-1.216278905648848e10,-1.2177354998260891e10,-1.2191991313638756e10,-1.2206698250959564e10,-1.2221476408718172e10,-1.2236326392681604e10,-1.2251248816004335e10,-1.226624394452781e10,-1.2281313114425655e10,-1.2296456608642963e10,-1.231167507108272e10,-1.2326969153646757e10,-1.2342339516365425e10,-1.2357786462000656e10,-1.2373311396457302e10,-1.2388914641250315e10,-1.2404596890273336e10,-1.2420358846237015e10,-1.243620122081521e10,-1.2452124357974924e10,-1.2468129739464529e10,-1.2484217729859335e10,-1.250038907820886e10,-1.251664454330326e10,-1.253298489383865e10,-1.2549410519851786e10,-1.2565922985778711e10,-1.2582522704357317e10,-1.2599210485631042e10,-1.261598715042961e10,-1.2632853530556484e10,-1.2649810067656185e10,-1.2666858416538769e10,-1.26839990439176e10,-1.2701232827447577e10,-1.2718560656757145e10,-1.2735983433661541e10,-1.27535016577351e10,-1.2771117082820837e10,-1.2788830236248955e10,-1.2806642070809557e10,-1.2824553552618593e10,-1.2842565661361174e10,-1.2860678961779734e10,-1.2878895316536573e10,-1.2897215321189287e10,-1.2915640012244429e10,-1.2934170441079649e10,-1.295280767422226e10,-1.2971552349895739e10,-1.2990406450679913e10,-1.3009370649108412e10,-1.302844607522419e10,-1.3047633875713112e10,-1.3066935214223988e10,-1.30863508120396e10,-1.3105882784288424e10,-1.312553189057047e10,-1.3145299365741997e10,-1.3165186463341055e10,-1.31851944559566e10,-1.3205324159004913e10,-1.3225577834593071e10,-1.3245956341066107e10,-1.326646103109138e10,-1.328709327837326e10,-1.3307854478080444e10,-1.332874555261304e10,-1.3349768927607199e10,-1.3370925573720066e10,-1.3392216976469849e10,-1.3413644645143274e10,-1.3435210113292356e10,-1.3456914425269861e10,-1.3478760189303125e10,-1.3500748504184284e10,-1.352288100575649e10,-1.3545159356812786e10,-1.3567585247676178e10,-1.3590159862159891e10,-1.3612886013134588e10,-1.3635764946058006e10,-1.365879846748913e10,-1.3681988140042688e10,-1.3705336379655058e10,-1.3728844814201557e10,-1.3752515096764103e10,-1.3776349752951698e10,-1.380035050554617e10,-1.3824519104534666e10,-1.3848858192450912e10,-1.3873369593801813e10,-1.389805516248139e10,-1.3922917665816645e10,-1.3947959037461193e10,-1.3973181242840342e10,-1.3998587182623299e10,-1.4024178907699114e10,-1.4049958503338058e10,-1.4075929012852644e10,-1.4102092613195162e10,-1.4128451518558622e10,-1.4155008925032824e10,-1.4181767145281317e10,-1.4208728532346142e10,-1.4235896446152193e10,-1.4263273345634155e10,-1.4290861733553173e10,-1.431866514575368e10,-1.4346686199016804e10,-1.437492755774466e10,-1.4403392946928488e10,-1.443208515390415e10,-1.4461007017810772e10,-1.4490162467288406e10,-1.4519554474202374e10,-1.4549186066838282e10,-1.4579061393411581e10,-1.460918362571024e10,-1.4639555997047886e10,-1.46701828927373e10,-1.4701067701474205e10,-1.4732213879135124e10,-1.4763626067442423e10,-1.479530789077511e10,-1.482726304696832e10,-1.485949645547982e10,-1.4892011997165543e10,-1.4924813633313993e10,-1.4957906584713991e10,-1.499129501177189e10,-1.502498316309763e10,-1.505897658697143e10,-1.5093279749005327e10,-1.5127897211688505e10,-1.5162834879857992e10,-1.5198097552917585e10,-1.5233690136849548e10,-1.526961892541216e10,-1.5305889083722652e10,-1.5342505894351442e10,-1.5379476076098886e10,-1.5416805195523754e10,-1.5454498948856108e10,-1.5492564520348196e10,-1.553100791808434e10,-1.5569835293580517e10,-1.5609054341862064e10,-1.5648671557622015e10,-1.5688693594521292e10,-1.5729128709320564e10,-1.5769983934159582e10,-1.5811266477733427e10,-1.5852985215999952e10,-1.5895147776029505e10,-1.5937761981412117e10,-1.5980837392278233e10,-1.602438229581309e10,-1.6068405198449614e10,-1.611291641818208e10,-1.6157924976448244e10,-1.6203440139886427e10,-1.624947306819305e10,-1.6296033601644306e10,-1.6343131855446949e10,-1.6390779926696217e10,-1.6438988571332376e10,-1.6487768854397556e10,-1.6537133919996187e10,-1.6587095550954433e10,-1.6637665878615604e10,-1.6688859220097662e10,-1.6740688513339151e10,-1.6793167090429848e10,-1.6846310586907593e10,-1.6900132604947645e10,-1.6954649751031467e10,-1.7009877229758503e10,-1.7065830733108456e10,-1.7122528481771654e10,-1.717998728695711e10,-1.723822486205179e10,-1.7297260221393803e10,-1.7357113044457882e10,-1.7417802624477043e10,-1.747935001843884e10,-1.7541777043115585e10,-1.760510518185075e10,-1.766935783137303e10,-1.7734559260119007e10,-1.7800733470651196e10,-1.7867906551660385e10,-1.7936105596630764e10,-1.800535751924078e10,-1.807569152008608e10,-1.814713796374255e10,-1.8219727144417274e10,-1.8293491878323517e10,-1.8368466337268932e10,-1.8444684761795357e10,-1.852218419183949e10,-1.8601003255147373e10,-1.868118082520378e10,-1.876275890490755e10,-1.884578136844229e10,-1.893029256150276e10,-1.9016340355326225e10,-1.910397484121328e10,-1.9193246870992657e10,-1.928421130205368e10,-1.937692509225056e10,-1.9471448541242e10,-1.9567843227603374e10,-1.9666175548155205e10,-1.9766515305088238e10,-1.986893410449426e10,-1.997350915369519e10,-2.008032180859535e10,-2.018945591503247e10,-2.03010019049319e10,-2.0415055312954437e10,-2.053171506819967e10,-2.0651087941197483e10,-2.0773287045456562e10,-2.0898430093863575e10,-2.102664426422062e10,-2.1158064711634403e10,-2.1292832814988216e10,-2.143110155133468e10,-2.1573034061608612e10,-2.1718801930594196e10,-2.186859164204045e10,-2.2022600565878273e10,-2.218104212998825e10,-2.234414403408984e10,-2.2512151078795303e10,-2.26853284305151e10,-2.286396058046957e10,-2.304835494070303e10,-2.3238846018677868e10,-2.3435794959322422e10,-2.363959428656744e10,-2.3850673444930996e10,-2.4069499381543407e10,-2.4296583067346264e10,-2.453248717941961e10,-2.477782854404859e10,-2.503328754784649e10,-2.529961933266411e10,-2.557765963397962e10,-2.586833912757785e10,-2.617270070476603e10,-2.6491911717142853e10,-2.6827287260705517e10,-2.7180318655049477e10,-2.7552697812278908e10,-2.7946360693170418e10,-2.836353238860044e10,-2.8806783870186886e10,-2.9279109834402405e10,-2.9784021681765915e10,-3.0325667274282814e10,-3.09089952154565e10,-3.153996496024511e10,-3.2225829666964046e10,-3.2975534234009563e10,-3.3800262652783813e10,-3.471422182125e10,-3.573580831067743e10,-3.688936408150525e10,-3.8207943419528465e10,-3.973786088110335e10,-4.154656533500404e10,-4.373717253024057e10,-4.6477678324165054e10,-5.006655663058851e10,-5.5105368526595985e10,-6.307988339138263e10,-7.947560695904639e10,-4.641588934109927e12],"x":[-1.0e-30,-9.980079681474105e-31,-9.960159362948208e-31,-9.940239044422312e-31,-9.920318725896414e-31,-9.900398407370519e-31,-9.880478088844623e-31,-9.860557770318725e-31,-9.84063745179283e-31,-9.820717133266934e-31,-9.800796814741036e-31,-9.78087649621514e-31,-9.760956177689243e-31,-9.741035859163347e-31,-9.721115540637452e-31,-9.701195222111554e-31,-9.681274903585658e-31,-9.661354585059763e-31,-9.641434266533865e-31,-9.62151394800797e-31,-9.601593629482072e-31,-9.581673310956176e-31,-9.56175299243028e-31,-9.541832673904383e-31,-9.521912355378487e-31,-9.501992036852591e-31,-9.482071718326694e-31,-9.462151399800798e-31,-9.4422310812749e-31,-9.422310762749005e-31,-9.402390444223109e-31,-9.382470125697212e-31,-9.362549807171316e-31,-9.342629488645418e-31,-9.322709170119522e-31,-9.302788851593627e-31,-9.28286853306773e-31,-9.262948214541833e-31,-9.243027896015938e-31,-9.22310757749004e-31,-9.203187258964144e-31,-9.183266940438247e-31,-9.163346621912351e-31,-9.143426303386455e-31,-9.123505984860558e-31,-9.103585666334662e-31,-9.083665347808766e-31,-9.063745029282869e-31,-9.043824710756973e-31,-9.023904392231076e-31,-9.00398407370518e-31,-8.984063755179284e-31,-8.964143436653387e-31,-8.944223118127491e-31,-8.924302799601595e-31,-8.904382481075698e-31,-8.884462162549802e-31,-8.864541844023904e-31,-8.844621525498009e-31,-8.824701206972113e-31,-8.804780888446215e-31,-8.78486056992032e-31,-8.764940251394422e-31,-8.745019932868526e-31,-8.72509961434263e-31,-8.705179295816733e-31,-8.685258977290837e-31,-8.665338658764942e-31,-8.645418340239044e-31,-8.625498021713148e-31,-8.605577703187251e-31,-8.585657384661355e-31,-8.56573706613546e-31,-8.545816747609562e-31,-8.525896429083666e-31,-8.50597611055777e-31,-8.486055792031873e-31,-8.466135473505977e-31,-8.44621515498008e-31,-8.426294836454184e-31,-8.406374517928288e-31,-8.38645419940239e-31,-8.366533880876495e-31,-8.346613562350599e-31,-8.326693243824702e-31,-8.306772925298806e-31,-8.286852606772908e-31,-8.266932288247013e-31,-8.247011969721117e-31,-8.22709165119522e-31,-8.207171332669324e-31,-8.187251014143428e-31,-8.16733069561753e-31,-8.147410377091635e-31,-8.127490058565737e-31,-8.107569740039841e-31,-8.087649421513946e-31,-8.067729102988048e-31,-8.047808784462152e-31,-8.027888465936255e-31,-8.007968147410359e-31,-7.988047828884463e-31,-7.968127510358566e-31,-7.94820719183267e-31,-7.928286873306774e-31,-7.908366554780877e-31,-7.888446236254981e-31,-7.868525917729084e-31,-7.848605599203188e-31,-7.828685280677291e-31,-7.808764962151395e-31,-7.788844643625499e-31,-7.768924325099602e-31,-7.7490040065737055e-31,-7.72908368804781e-31,-7.709163369521913e-31,-7.6892430509960165e-31,-7.66932273247012e-31,-7.649402413944224e-31,-7.6294820954183275e-31,-7.609561776892431e-31,-7.589641458366534e-31,-7.5697211398406385e-31,-7.549800821314742e-31,-7.529880502788845e-31,-7.509960184262949e-31,-7.490039865737052e-31,-7.470119547211156e-31,-7.45019922868526e-31,-7.430278910159363e-31,-7.410358591633466e-31,-7.390438273107571e-31,-7.370517954581674e-31,-7.350597636055777e-31,-7.330677317529881e-31,-7.310756999003985e-31,-7.290836680478088e-31,-7.270916361952192e-31,-7.250996043426295e-31,-7.231075724900399e-31,-7.211155406374503e-31,-7.191235087848606e-31,-7.1713147693227095e-31,-7.151394450796814e-31,-7.131474132270917e-31,-7.1115538137450205e-31,-7.091633495219124e-31,-7.071713176693228e-31,-7.0517928581673314e-31,-7.031872539641435e-31,-7.011952221115538e-31,-6.992031902589642e-31,-6.972111584063746e-31,-6.952191265537849e-31,-6.9322709470119526e-31,-6.912350628486056e-31,-6.89243030996016e-31,-6.8725099914342635e-31,-6.852589672908367e-31,-6.83266935438247e-31,-6.8127490358565745e-31,-6.792828717330678e-31,-6.772908398804781e-31,-6.752988080278885e-31,-6.733067761752989e-31,-6.713147443227092e-31,-6.693227124701196e-31,-6.673306806175299e-31,-6.653386487649403e-31,-6.633466169123507e-31,-6.61354585059761e-31,-6.593625532071713e-31,-6.573705213545818e-31,-6.553784895019921e-31,-6.533864576494024e-31,-6.513944257968128e-31,-6.494023939442232e-31,-6.474103620916335e-31,-6.454183302390439e-31,-6.434262983864542e-31,-6.414342665338646e-31,-6.39442234681275e-31,-6.374502028286853e-31,-6.3545817097609565e-31,-6.334661391235061e-31,-6.314741072709164e-31,-6.2948207541832675e-31,-6.274900435657371e-31,-6.254980117131474e-31,-6.2350597986055785e-31,-6.215139480079682e-31,-6.195219161553785e-31,-6.175298843027889e-31,-6.155378524501993e-31,-6.135458205976096e-31,-6.1155378874502e-31,-6.095617568924303e-31,-6.075697250398407e-31,-6.0557769318725106e-31,-6.035856613346614e-31,-6.015936294820717e-31,-5.9960159762948216e-31,-5.976095657768925e-31,-5.956175339243028e-31,-5.936255020717132e-31,-5.916334702191236e-31,-5.896414383665339e-31,-5.876494065139443e-31,-5.856573746613546e-31,-5.83665342808765e-31,-5.816733109561754e-31,-5.796812791035857e-31,-5.77689247250996e-31,-5.756972153984065e-31,-5.737051835458168e-31,-5.717131516932271e-31,-5.697211198406375e-31,-5.677290879880478e-31,-5.657370561354582e-31,-5.637450242828686e-31,-5.617529924302789e-31,-5.5976096057768925e-31,-5.577689287250997e-31,-5.5577689687251e-31,-5.5378486501992035e-31,-5.517928331673307e-31,-5.498008013147411e-31,-5.4780876946215145e-31,-5.458167376095618e-31,-5.438247057569721e-31,-5.4183267390438255e-31,-5.398406420517929e-31,-5.378486101992032e-31,-5.358565783466136e-31,-5.33864546494024e-31,-5.318725146414343e-31,-5.298804827888447e-31,-5.27888450936255e-31,-5.258964190836654e-31,-5.239043872310758e-31,-5.219123553784861e-31,-5.199203235258964e-31,-5.179282916733069e-31,-5.159362598207172e-31,-5.139442279681275e-31,-5.119521961155379e-31,-5.099601642629482e-31,-5.079681324103586e-31,-5.05976100557769e-31,-5.039840687051793e-31,-5.019920368525896e-31,-5.000000050000001e-31,-4.980079731474104e-31,-4.960159412948207e-31,-4.940239094422311e-31,-4.920318775896415e-31,-4.900398457370518e-31,-4.880478138844622e-31,-4.860557820318725e-31,-4.840637501792829e-31,-4.820717183266933e-31,-4.800796864741036e-31,-4.7808765462151395e-31,-4.760956227689244e-31,-4.741035909163347e-31,-4.7211155906374505e-31,-4.701195272111554e-31,-4.681274953585658e-31,-4.6613546350597615e-31,-4.641434316533865e-31,-4.621513998007968e-31,-4.6015936794820725e-31,-4.581673360956176e-31,-4.561753042430279e-31,-4.541832723904383e-31,-4.521912405378487e-31,-4.50199208685259e-31,-4.482071768326694e-31,-4.462151449800797e-31,-4.4422311312749e-31,-4.422310812749005e-31,-4.402390494223108e-31,-4.382470175697211e-31,-4.362549857171315e-31,-4.342629538645419e-31,-4.322709220119522e-31,-4.302788901593626e-31,-4.282868583067729e-31,-4.262948264541833e-31,-4.243027946015937e-31,-4.22310762749004e-31,-4.2031873089641434e-31,-4.183266990438248e-31,-4.163346671912351e-31,-4.143426353386454e-31,-4.123506034860558e-31,-4.103585716334662e-31,-4.083665397808765e-31,-4.063745079282869e-31,-4.043824760756972e-31,-4.023904442231076e-31,-4.00398412370518e-31,-3.984063805179283e-31,-3.9641434866533865e-31,-3.9442231681274903e-31,-3.924302849601594e-31,-3.9043825310756975e-31,-3.8844622125498013e-31,-3.8645418940239047e-31,-3.844621575498008e-31,-3.824701256972112e-31,-3.8047809384462153e-31,-3.784860619920319e-31,-3.7649403013944224e-31,-3.7450199828685263e-31,-3.7250996643426296e-31,-3.7051793458167334e-31,-3.685259027290837e-31,-3.6653387087649406e-31,-3.645418390239044e-31,-3.625498071713148e-31,-3.605577753187251e-31,-3.585657434661355e-31,-3.5657371161354584e-31,-3.545816797609562e-31,-3.5258964790836655e-31,-3.5059761605577693e-31,-3.4860558420318727e-31,-3.4661355235059765e-31,-3.44621520498008e-31,-3.4262948864541837e-31,-3.406374567928287e-31,-3.386454249402391e-31,-3.3665339308764943e-31,-3.346613612350598e-31,-3.3266932938247015e-31,-3.3067729752988053e-31,-3.2868526567729086e-31,-3.2669323382470124e-31,-3.247012019721116e-31,-3.227091701195219e-31,-3.207171382669323e-31,-3.1872510641434264e-31,-3.16733074561753e-31,-3.1474104270916336e-31,-3.1274901085657374e-31,-3.1075697900398407e-31,-3.0876494715139445e-31,-3.067729152988048e-31,-3.0478088344621517e-31,-3.027888515936255e-31,-3.007968197410359e-31,-2.9880478788844623e-31,-2.968127560358566e-31,-2.9482072418326695e-31,-2.9282869233067733e-31,-2.9083666047808766e-31,-2.8884462862549805e-31,-2.868525967729084e-31,-2.8486056492031876e-31,-2.828685330677291e-31,-2.808765012151395e-31,-2.788844693625498e-31,-2.768924375099602e-31,-2.7490040565737054e-31,-2.729083738047809e-31,-2.7091634195219126e-31,-2.6892431009960164e-31,-2.6693227824701197e-31,-2.649402463944223e-31,-2.629482145418327e-31,-2.6095618268924303e-31,-2.589641508366534e-31,-2.5697211898406375e-31,-2.5498008713147413e-31,-2.5298805527888447e-31,-2.5099602342629485e-31,-2.490039915737052e-31,-2.4701195972111556e-31,-2.450199278685259e-31,-2.430278960159363e-31,-2.410358641633466e-31,-2.39043832310757e-31,-2.3705180045816734e-31,-2.350597686055777e-31,-2.3306773675298806e-31,-2.3107570490039844e-31,-2.2908367304780878e-31,-2.2709164119521916e-31,-2.250996093426295e-31,-2.2310757749003987e-31,-2.211155456374502e-31,-2.191235137848606e-31,-2.1713148193227093e-31,-2.151394500796813e-31,-2.1314741822709165e-31,-2.1115538637450203e-31,-2.0916335452191237e-31,-2.0717132266932275e-31,-2.051792908167331e-31,-2.031872589641434e-31,-2.011952271115538e-31,-1.9920319525896414e-31,-1.9721116340637452e-31,-1.9521913155378488e-31,-1.9322709970119524e-31,-1.912350678486056e-31,-1.8924303599601596e-31,-1.8725100414342632e-31,-1.8525897229083668e-31,-1.8326694043824703e-31,-1.812749085856574e-31,-1.7928287673306775e-31,-1.7729084488047811e-31,-1.7529881302788847e-31,-1.733067811752988e-31,-1.7131474932270917e-31,-1.6932271747011953e-31,-1.6733068561752989e-31,-1.6533865376494024e-31,-1.633466219123506e-31,-1.6135459005976096e-31,-1.5936255820717132e-31,-1.5737052635458168e-31,-1.5537849450199204e-31,-1.533864626494024e-31,-1.5139443079681276e-31,-1.4940239894422312e-31,-1.4741036709163348e-31,-1.4541833523904384e-31,-1.434263033864542e-31,-1.4143427153386455e-31,-1.3944223968127491e-31,-1.3745020782868527e-31,-1.3545817597609563e-31,-1.33466144123506e-31,-1.3147411227091635e-31,-1.294820804183267e-31,-1.2749004856573707e-31,-1.2549801671314743e-31,-1.2350598486055779e-31,-1.2151395300796815e-31,-1.195219211553785e-31,-1.1752988930278886e-31,-1.1553785745019922e-31,-1.1354582559760958e-31,-1.1155379374501992e-31,-1.0956176189243028e-31,-1.0756973003984064e-31,-1.05577698187251e-31,-1.0358566633466136e-31,-1.0159363448207171e-31,-9.960160262948207e-32,-9.760957077689244e-32,-9.561753892430279e-32,-9.362550707171315e-32,-9.163347521912351e-32,-8.964144336653387e-32,-8.764941151394423e-32,-8.565737966135459e-32,-8.366534780876495e-32,-8.167331595617531e-32,-7.968128410358566e-32,-7.768925225099602e-32,-7.569722039840638e-32,-7.370518854581674e-32,-7.17131566932271e-32,-6.972112484063746e-32,-6.772909298804782e-32,-6.573706113545817e-32,-6.374502928286853e-32,-6.175299743027889e-32,-5.976096557768924e-32,-5.77689337250996e-32,-5.577690187250996e-32,-5.378487001992032e-32,-5.179283816733068e-32,-4.980080631474104e-32,-4.78087744621514e-32,-4.581674260956176e-32,-4.382471075697212e-32,-4.183267890438247e-32,-3.984064705179283e-32,-3.784861519920319e-32,-3.585658334661355e-32,-3.386455149402391e-32,-3.1872519641434267e-32,-2.9880487788844626e-32,-2.788845593625498e-32,-2.589642408366534e-32,-2.3904392231075698e-32,-2.1912360378486057e-32,-1.9920328525896416e-32,-1.7928296673306775e-32,-1.5936264820717132e-32,-1.394423296812749e-32,-1.195220111553785e-32,-9.960169262948208e-33,-7.968137410358567e-33,-5.9761055577689245e-33,-3.984073705179283e-33,-1.9920418525896417e-33,-1.0e-38]}

},{}],105:[function(require,module,exports){
module.exports={"expected":[9.999999989429745e9,1.0000666505196337e10,1.0001333198695776e10,1.0002000070011019e10,1.0002667119225073e10,1.000333434642101e10,1.000400175168195e10,1.0004669021040052e10,1.0005336782596735e10,1.0006004722468082e10,1.0006672840737442e10,1.000734113748821e10,1.0008009612803844e10,1.0008678266767857e10,1.0009347099463814e10,1.001001611097534e10,1.0010685301386114e10,1.0011354670779873e10,1.0012023904264874e10,1.0012693631791742e10,1.0013363538553099e10,1.0014033624632898e10,1.0014703890115162e10,1.0015374335083958e10,1.0016044959623415e10,1.0016715763817719e10,1.001738674775111e10,1.0018057911507887e10,1.0018729255172401e10,1.0019400778829067e10,1.002007216657281e10,1.0020744050382471e10,1.0021416114437813e10,1.0022088358823471e10,1.0022760783624142e10,1.0023433388924578e10,1.0024106174809582e10,1.0024779141364021e10,1.002545228867282e10,1.002612561682095e10,1.0026799125893454e10,1.002747281597542e10,1.0028146370142729e10,1.0028820422413889e10,1.0029494655950094e10,1.0030169070836666e10,1.0030843667158987e10,1.0031518445002491e10,1.003219340445267e10,1.003286854559508e10,1.0033543868515326e10,1.0034219373299078e10,1.003489506003206e10,1.0035570610850962e10,1.0036246661654123e10,1.0036922894663996e10,1.0037599309966534e10,1.003827590764775e10,1.0038952687793718e10,1.0039629650490568e10,1.0040306795824484e10,1.0040984123881716e10,1.0041661634748568e10,1.00423393285114e10,1.0043017205256636e10,1.0043694946090818e10,1.0044373188974184e10,1.004505161509952e10,1.0045730224553486e10,1.0046409017422794e10,1.0047087993794214e10,1.0047767153754576e10,1.0048446497390772e10,1.0049126024789747e10,1.0049805736038507e10,1.0050485631224121e10,1.005116571043371e10,1.0051845653737825e10,1.0052526101170313e10,1.0053206732888464e10,1.0053887548979637e10,1.005456854953125e10,1.0055249734630783e10,1.0055931104365778e10,1.0056612658823828e10,1.0057294398092588e10,1.005797632225978e10,1.0058658431413177e10,1.0059340725640614e10,1.0060022883970741e10,1.0060705548522846e10,1.0061388398412815e10,1.006207143372872e10,1.0062754654558695e10,1.0063438060990932e10,1.006412165311369e10,1.0064805431015274e10,1.0065489394784065e10,1.0066173544508493e10,1.0066857880277054e10,1.0067542080158096e10,1.0068226788193026e10,1.0068911682537891e10,1.0069596763281422e10,1.0070282030512413e10,1.0070967484319721e10,1.0071653124792265e10,1.0072338952019016e10,1.0073024966089016e10,1.0073711167091358e10,1.0074397555115204e10,1.0075084130249773e10,1.0075770569510065e10,1.0076457519045862e10,1.0077144655960365e10,1.0077831980343033e10,1.0078519492283392e10,1.0079207191871023e10,1.0079895079195576e10,1.0080583154346758e10,1.0081271417414337e10,1.008195986848814e10,1.0082648507658062e10,1.0083337335014053e10,1.008402602651172e10,1.0084715230421333e10,1.00854046227872e10,1.0086094203699522e10,1.0086783973248556e10,1.0087473931524628e10,1.0088164078618118e10,1.0088854414619474e10,1.0089544939619204e10,1.0090235653707876e10,1.0090926556976122e10,1.0091617324403086e10,1.0092308606213537e10,1.0093000077475784e10,1.0093691738280712e10,1.0094383588719265e10,1.0095075628882444e10,1.0095767858861317e10,1.0096460278747017e10,1.0097152888630732e10,1.009784568860372e10,1.0098538678757296e10,1.0099231859182842e10,1.0099924903788376e10,1.0100618464942648e10,1.0101312216643362e10,1.0102006158982151e10,1.010270029205071e10,1.0103394615940796e10,1.0104089130744228e10,1.0104783836552893e10,1.0105478733458735e10,1.0106173821553762e10,1.0106869100930054e10,1.010756457167974e10,1.0108259906633533e10,1.0108955760316557e10,1.0109651805649725e10,1.011034804272543e10,1.0111044471636124e10,1.0111741092474325e10,1.0112437905332619e10,1.0113134910303646e10,1.0113832107480122e10,1.0114529496954813e10,1.011522707882056e10,1.0115924524915052e10,1.0116622491751078e10,1.0117320651257008e10,1.0118019003525944e10,1.0118717548651037e10,1.0119416286725515e10,1.0120115217842663e10,1.012081434209583e10,1.0121513659578436e10,1.0122213170383959e10,1.0122912874605944e10,1.0123612772338001e10,1.0124312534328495e10,1.0125012819270653e10,1.0125713298004057e10,1.0126413970622572e10,1.0127114837220137e10,1.0127815897890747e10,1.012851715272847e10,1.012921860182743e10,1.0129920245281828e10,1.0130622083185917e10,1.0131324115634027e10,1.0132026342720545e10,1.0132728434098171e10,1.0133431050653278e10,1.0134133862130312e10,1.0134836868623926e10,1.0135540070228842e10,1.0136243467039837e10,1.0136947059151766e10,1.013765084665954e10,1.0138354829658144e10,1.0139059008242624e10,1.0139763382508095e10,1.0140467621097279e10,1.0141172386918179e10,1.0141877348705757e10,1.0142582506555397e10,1.014328786056254e10,1.0143993410822697e10,1.0144699157431446e10,1.0145405100484428e10,1.0146111240077358e10,1.014681757630601e10,1.0147524109266228e10,1.014823083905392e10,1.0148937433203848e10,1.0149644556841797e10,1.015035187759531e10,1.0151059395560566e10,1.0151767110833807e10,1.0152475023511345e10,1.0153183133689562e10,1.0153891441464903e10,1.015459994693388e10,1.0155308650193075e10,1.015601755133914e10,1.0156726650468786e10,1.0157435614002302e10,1.0158145109296295e10,1.0158854802864382e10,1.0159564694803543e10,1.0160274785210838e10,1.0160985074183388e10,1.0161695561818382e10,1.016240624821308e10,1.0163117133464804e10,1.0163828217670954e10,1.0164539500928986e10,1.0165250648631842e10,1.0165962330192564e10,1.0166674211097921e10,1.0167386291445652e10,1.0168098571333557e10,1.016881105085951e10,1.0169523730121454e10,1.0170236609217396e10,1.0170949688245415e10,1.017166296730366e10,1.0172376446490347e10,1.0173090125903757e10,1.0173803669809755e10,1.0174517749877455e10,1.0175232030467106e10,1.0175946511677265e10,1.0176661193606567e10,1.017737607635371e10,1.0178091160017462e10,1.0178806444696663e10,1.0179521930490221e10,1.0180237617497112e10,1.0180953505816387e10,1.018166959554716e10,1.018238554982155e10,1.0183102042578094e10,1.018381873704386e10,1.0184535633318243e10,1.0185252731500708e10,1.0185970031690792e10,1.0186687533988102e10,1.0187405238492313e10,1.0188123145303175e10,1.01888412545205e10,1.0189559566244179e10,1.0190277742561178e10,1.0190996459502138e10,1.0191715379249489e10,1.0192434501903399e10,1.019315382756411e10,1.0193873356331932e10,1.0194593088307247e10,1.019531302359051e10,1.019603316228224e10,1.0196753504483034e10,1.019747405029356e10,1.019819479981455e10,1.0198915413986315e10,1.01996365711348e10,1.0200357932296339e10,1.0201079497571957e10,1.0201801267062748e10,1.0202523240869877e10,1.0203245419094582e10,1.0203967801838167e10,1.0204690389202017e10,1.0205413181287582e10,1.0206136178196384e10,1.0206859380030022e10,1.0207582446575317e10,1.020830605846719e10,1.0209029875589067e10,1.0209753898042835e10,1.0210478125930449e10,1.021120255935394e10,1.0211927198415405e10,1.021265204321702e10,1.021337709386103e10,1.0214102350449757e10,1.021482781308559e10,1.0215553140491951e10,1.0216279015432423e10,1.0217005096727562e10,1.0217731384480055e10,1.0218457878792654e10,1.021918457976819e10,1.0219911487509563e10,1.0220638602119751e10,1.0221365923701801e10,1.0222093452358833e10,1.0222821188194044e10,1.0223549131310703e10,1.02242769392655e10,1.0225005297157534e10,1.0225733862641214e10,1.0226462635820107e10,1.0227191616797842e10,1.0227920805678137e10,1.0228650202564777e10,1.0229379807561615e10,1.023010962077259e10,1.0230839642301706e10,1.0231569872253048e10,1.0232300310730768e10,1.0233030614117832e10,1.023376146986287e10,1.0234492534447153e10,1.0235223807975132e10,1.0235955290551338e10,1.0236686982280373e10,1.0237418883266914e10,1.0238150993615717e10,1.0238883313431606e10,1.0239615842819487e10,1.0240348581884333e10,1.02410815307312e10,1.0241814344562271e10,1.024254771318984e10,1.024328129191499e10,1.0244015080843075e10,1.0244749080079525e10,1.0245483289729845e10,1.0246217709899614e10,1.024695234069449e10,1.0247687182220207e10,1.024842223458257e10,1.024915749788746e10,1.0249892626248434e10,1.0250628311657e10,1.0251364208326155e10,1.0252100316362083e10,1.0252836635871058e10,1.0253573166959412e10,1.0254309909733566e10,1.0255046864300013e10,1.0255784030765326e10,1.0256521409236147e10,1.0257258999819204e10,1.0257996802621294e10,1.025873447056149e10,1.025947269802241e10,1.026021113802318e10,1.0260949790670902e10,1.0261688656072763e10,1.026242773433603e10,1.0263167025568035e10,1.0263906529876202e10,1.0264646247368021e10,1.0265386178151066e10,1.0266126322332987e10,1.026686668002151e10,1.0267606902933989e10,1.0268347687858654e10,1.026908868661352e10,1.0269829899306622e10,1.0270571326046078e10,1.0271312966940083e10,1.027205482209691e10,1.0272796891624908e10,1.0273539175632507e10,1.0274281674228216e10,1.0275024387520617e10,1.027576696611909e10,1.0276510109029839e10,1.0277253466963459e10,1.0277997040028852e10,1.0278740828334997e10,1.0279484831990952e10,1.0280229051105854e10,1.028097348578892e10,1.028171813614944e10,1.0282463002296795e10,1.0283208084340435e10,1.0283953382389894e10,1.0284698545838789e10,1.028544427612707e10,1.0286190222750195e10,1.0286936385818012e10,1.0287682765440453e10,1.028842936172753e10,1.028917617478933e10,1.0289923204736025e10,1.0290670451677866e10,1.0291417915725182e10,1.0292165596988384e10,1.0292913495577961e10,1.029366125966435e10,1.0294409593136122e10,1.029515814426617e10,1.029590691316531e10,1.0296655899944435e10,1.0297405104714518e10,1.0298154527586609e10,1.0298904168671848e10,1.0299654028081451e10,1.0300404105926714e10,1.0301154402319016e10,1.030190456430097e10,1.0302655298018879e10,1.0303406250618393e10,1.0304157422211222e10,1.0304908812909145e10,1.0305660422824028e10,1.0306412252067823e10,1.0307164300752556e10,1.030791656899034e10,1.0308669056893364e10,1.0309421764573908e10,1.031017469214433e10,1.0310927485409649e10,1.0311680852993658e10,1.0312434440805052e10,1.031318824895652e10,1.0313942277560827e10,1.0314696526730824e10,1.0315450996579445e10,1.0316205687219706e10,1.0316960598764706e10,1.0317715731327625e10,1.0318471085021727e10,1.0319226659960358e10,1.0319982100703346e10,1.0320738118367214e10,1.0321494357616096e10,1.0322250818563677e10,1.0323007501323715e10,1.032376440601006e10,1.0324521532736639e10,1.0325278881617466e10,1.032603645276664e10,1.0326794246298338e10,1.0327552262326828e10,1.0328310144263763e10,1.0329068605524174e10,1.032982728962462e10,1.03305861966797e10,1.0331345326804102e10,1.033210468011259e10,1.0332864256720022e10,1.0333624056741335e10,1.033438408029155e10,1.0335144327485771e10,1.0335904798439198e10,1.0336665493267101e10,1.0337426054121157e10,1.0338187196938745e10,1.0338948563977097e10,1.0339710155351828e10,1.0340471971178638e10,1.0341234011573318e10,1.0341996276651737e10,1.0342758766529852e10,1.034352148132371e10,1.0344284421149435e10,1.0345047586123245e10,1.0345810976361437e10,1.0346574232747902e10,1.0347338073758013e10,1.034810214038187e10,1.0348866432736115e10,1.0349630950937479e10,1.035039569510278e10,1.0351160665348919e10,1.0351925861792883e10,1.0352691284551754e10,1.0353456933742687e10,1.0354222809482937e10,1.035498855148733e10,1.0355754880571602e10,1.0356521436557402e10,1.0357288219562325e10,1.0358055229704052e10,1.0358822467100359e10,1.03595899318691e10,1.0360357624128223e10,1.0361125543995758e10,1.0361893691589827e10,1.0362662067028635e10,1.0363430670430481e10,1.0364199140227242e10,1.0364968199803032e10,1.0365737487697218e10,1.0366507004028444e10,1.0367276748915445e10,1.0368046722477045e10,1.0368816924832157e10,1.036958735609978e10,1.0370358016399e10,1.0371128905848995e10,1.0371900024569035e10,1.0372671372678465e10,1.0373442587318207e10,1.0374214394456808e10,1.0374986431343346e10,1.0375758698097528e10,1.0376531194839151e10,1.0377303921688108e10,1.0378076878764372e10,1.0378850066188011e10,1.0379623484079182e10,1.038039713255813e10,1.038117101174519e10,1.0381944757590792e10,1.0382719098446783e10,1.0383493670372375e10,1.0384268473488264e10,1.0385043507915232e10,1.0385818773774157e10,1.0386594271186003e10,1.0387370000271824e10,1.0388145961152771e10,1.0388922153950075e10,1.0389698578785067e10,1.0390475235779165e10,1.0391251759576263e10,1.0392028881143843e10,1.0392806235235271e10,1.0393583821972326e10,1.0394361641476881e10,1.03951396938709e10,1.039591797927644e10,1.0396696497815645e10,1.0397475249610758e10,1.0398254234784101e10,1.0399033453458103e10,1.0399812905755274e10,1.0400592225004753e10,1.0401372144806135e10,1.0402152298598719e10,1.0402932686505384e10,1.0403713308649109e10,1.0404494165152952e10,1.0405275256140078e10,1.0406056581733732e10,1.040683814205726e10,1.0407619937234097e10,1.0408401967387772e10,1.0409184232641903e10,1.040996636500258e10,1.0410749100718138e10,1.0411532071905516e10,1.0412315278688707e10,1.0413098721191803e10,1.041388239953898e10,1.0414666313854513e10,1.041545046426277e10,1.041623485088821e10,1.0417019473855389e10,1.0417804333288954e10,1.041858905997484e10,1.0419374392604128e10,1.0420159962074253e10,1.042094576851024e10,1.0421731812037209e10,1.042251809278037e10,1.0423304610865036e10,1.0424091366416609e10,1.042487835956058e10,1.0425665590422546e10,1.0426453059128195e10,1.0427240765803303e10,1.0428028339894634e10,1.0428816522774315e10,1.0429604944001314e10,1.0430393603701792e10,1.0431182502002012e10,1.0431971639028324e10,1.0432761014907177e10,1.0433550629765118e10,1.0434340483728786e10,1.0435130576924917e10,1.0435920909480343e10,1.0436711481521994e10,1.0437501921148932e10,1.0438292972431404e10,1.0439084263581406e10,1.0439875794726248e10,1.044066756599334e10,1.0441459577510191e10,1.0442251829404404e10,1.0443044321803679e10,1.0443837054835814e10,1.04446300286287e10,1.0445423243310333e10,1.044621632573684e10,1.0447010022466871e10,1.0447803960470146e10,1.0448598139875048e10,1.0449392560810051e10,1.0450187223403736e10,1.0450982127784771e10,1.0451777274081936e10,1.0452572662424095e10,1.0453368292940218e10,1.045416416575937e10,1.045496028101072e10,1.0455756264186142e10,1.0456552864575583e10,1.0457349707785244e10,1.0458146793944681e10,1.0458944123183554e10,1.0459741695631618e10,1.0460539511418726e10,1.0461337570674837e10,1.0462135873530003e10,1.0462934420114372e10,1.0463733210558205e10,1.0464532244991844e10,1.0465331147534178e10,1.0466130670223976e10,1.0466930437295177e10,1.046773044887853e10,1.0468530705104887e10,1.0469331206105196e10,1.047013195201051e10,1.0470932942951977e10,1.047173417906085e10,1.0472535660468481e10,1.0473337387306324e10,1.0474138982426924e10,1.0474941200404346e10,1.047574366420688e10,1.0476546373966377e10,1.0477349329814796e10,1.0478152531884192e10,1.0478955980306726e10,1.0479759675214659e10,1.0480563616740349e10,1.0481367805016262e10,1.0482172240174963e10,1.048297692234912e10,1.0483781473001278e10,1.0484586649488407e10,1.0485392073389538e10,1.0486197744837746e10,1.048700366396621e10,1.048780983090821e10,1.0488616245797125e10,1.0489422908766441e10,1.0490229819949745e10,1.0491036979480728e10,1.049184438749318e10,1.0492652044120998e10,1.0493459569427753e10,1.0494267723571306e10,1.049507612673247e10,1.0495884779045553e10,1.0496693680644966e10,1.0497502831665226e10,1.0498312232240953e10,1.049912188250687e10,1.0499931782597803e10,1.0500741932648685e10,1.050155233279455e10,1.0502362601808603e10,1.0503173502432165e10,1.050398465355638e10,1.05047960553167e10,1.0505607707848684e10,1.0506419611287994e10,1.0507231765770395e10,1.0508044171431765e10,1.0508856828408077e10,1.0509669736835413e10,1.0510482896849964e10,1.051129630858802e10,1.0512109589406342e10,1.051292350488215e10,1.0513737672490917e10,1.0514552092369352e10,1.0515366764654282e10,1.0516181689482632e10,1.0516996866991436e10,1.0517812297317837e10,1.051862798059908e10,1.0519443916972515e10,1.0520260106575607e10,1.0521076549545918e10,1.0521892861814531e10,1.0522709811813072e10,1.0523527015592112e10,1.0524344473289639e10,1.0525162185043756e10,1.0525980150992674e10,1.0526798371274708e10,1.0527616846028278e10,1.0528435575391922e10,1.0529254559504272e10,1.0530073798504082e10,1.0530892907007374e10,1.053171265607871e10,1.053253266045433e10,1.0533352920273405e10,1.0534173435675228e10,1.0534994206799194e10,1.0535815233784805e10,1.053663651677168e10,1.0537458055899538e10,1.0538279851308212e10,1.053910190313764e10,1.0539924211527874e10,1.0540746389651329e10,1.0541569211462917e10,1.0542392290256052e10,1.054321562617122e10,1.0544039219349018e10,1.0544863069930151e10,1.054568717805544e10,1.054651154386581e10,1.0547336167502298e10,1.0548161049106052e10,1.0548986188818333e10,1.0549811586780506e10,1.055063685471188e10,1.055146276947675e10,1.0552288942916214e10,1.0553115375172087e10,1.0553942066386293e10,1.0554769016700865e10,1.0555596226257946e10,1.0556423695199797e10,1.0557251423668783e10,1.0558079411807384e10,1.0558907659758194e10,1.05597357779001e10,1.0560564545781176e10,1.0561393573902838e10,1.056222286240813e10,1.05630524114402e10,1.0563882221142317e10,1.0564712291657856e10,1.0565542623130306e10,1.0566373215703274e10,1.0567204069520472e10,1.0568035184725729e10,1.056886656146299e10,1.05696978086396e10,1.0570529708749958e10,1.0571361870824755e10,1.0572194295008389e10,1.0573026981445366e10,1.0573859930280313e10,1.0574693141657967e10,1.0575526615723175e10,1.0576360352620907e10,1.057719435249624e10,1.057802861549437e10,1.0578863141760603e10,1.0579697538721e10,1.0580532591835827e10,1.0581367908655302e10,1.05822034893252e10,1.0583039333991398e10,1.0583875442799898e10,1.0584711815896812e10,1.0585548453428371e10,1.0586385355540918e10,1.0587222522380917e10,1.0588059954094938e10,1.0588897650829681e10,1.0589735218520063e10,1.0590573445611954e10,1.0591411938165272e10,1.0592250696327168e10,1.059308972024492e10,1.059392901006592e10,1.059476856593767e10,1.0595608388007801e10,1.0596448476424051e10,1.059728883133428e10,1.0598129452886463e10,1.0598969945639925e10,1.059981110079482e10,1.0600652523036234e10,1.0601494212512611e10,1.0602336169372515e10,1.060317839376463e10,1.0604020885837755e10,1.060486364574081e10,1.060570667362283e10,1.060654996963297e10,1.0607393533920507e10,1.0608237366634832e10,1.0609081070825005e10,1.0609925440715126e10,1.0610770079480856e10,1.0611614987272066e10,1.0612460164238745e10,1.0613305610530998e10,1.0614151326299053e10,1.061499731169326e10,1.0615843566864082e10,1.061669009196211e10,1.061753688713805e10,1.0618383952542727e10,1.0619230889704815e10,1.062007849589265e10,1.0620926372762358e10,1.0621774520465248e10,1.0622622939152752e10,1.0623471628976418e10,1.062432059008792e10,1.0625169822639051e10,1.062601932678173e10,1.062686910266799e10,1.062771915044999e10,1.0628569070253744e10,1.0629419662156115e10,1.0630270526411362e10,1.0631121663172127e10,1.0631973072591179e10,1.0632824754821411e10,1.0633676710015831e10,1.063452893832758e10,1.0635381439909916e10,1.0636234214916216e10,1.0637087263499989e10,1.0637940585814857e10,1.0638793780446781e10,1.063964765055629e10,1.0640501794858442e10,1.0641356213507368e10,1.0642210906657305e10,1.0643065874462627e10,1.0643921117077826e10,1.0644776634657518e10,1.0645632427356445e10,1.0646488495329472e10,1.0647344838731588e10,1.0648201457717915e10,1.0649057949323938e10,1.0649915119814713e10,1.0650772566355717e10,1.065163028910256e10,1.065248828821099e10,1.065334656383687e10,1.0654205116136192e10,1.0655063945265072e10,1.0655923051379755e10,1.0656782434636608e10,1.065764209519213e10,1.0658501628651325e10,1.0659361844143557e10,1.0660222337404621e10,1.0661083108591526e10,1.0661944157861399e10,1.0662805485371492e10,1.0663667091279188e10,1.0664528975741999e10,1.0665391138917557e10,1.0666253580963629e10,1.0667116302038107e10,1.0667979302299007e10,1.0668842175780651e10,1.0669705734757463e10,1.0670569573395454e10,1.0671433691853153e10,1.0672298090289217e10,1.0673162768862438e10,1.0674027727731731e10,1.0674892967056145e10,1.0675758486994854e10,1.067662428770716e10,1.0677490369352497e10,1.0678356732090431e10,1.0679222968373877e10,1.06800898936438e10,1.068095710048571e10,1.0681824589059687e10,1.068269235952594e10,1.0683560412044813e10,1.068442874677678e10,1.0685297363882437e10,1.0686166263522524e10,1.0687035445857903e10,1.0687904911049566e10,1.0688774250091331e10,1.0689644281345839e10,1.0690514595940329e10,1.0691385194036316e10,1.0692256075795458e10,1.0693127241379532e10,1.0693998690950455e10,1.0694870424670273e10,1.0695742442701164e10,1.0696614745205442e10,1.0697487332345549e10,1.069836020428406e10,1.0699232950412579e10,1.0700106392302006e10,1.0700980119478285e10,1.0701854132104523e10,1.0702728430343964e10,1.070360301435998e10,1.0704477884316076e10,1.0705353040375896e10,1.0706228482703218e10,1.0707104211461946e10,1.0707980226816126e10,1.0708856528929935e10,1.0709732705581755e10,1.0710609581572815e10,1.0711486744816769e10,1.0712364195478327e10,1.0713241933722343e10,1.0714119959713804e10,1.0714998273617828e10,1.0715876875599674e10,1.0716755765824736e10,1.0717634944458536e10,1.071851441166674e10,1.0719393753739183e10,1.0720273798457802e10,1.0721154132248556e10,1.072203475527765e10,1.0722915667711433e10,1.0723796869716383e10,1.0724678361459122e10,1.0725560143106403e10,1.0726442214825119e10,1.0727324576782299e10,1.0728207229145113e10,1.0729090172080862e10,1.0729972990244745e10,1.0730856514691963e10,1.0731740330214779e10,1.0732624436981052e10,1.0733508835158777e10,1.0734393524916086e10,1.0735278506421253e10,1.0736163779842684e10,1.0737049345348934e10,1.073793520310869e10,1.073882135329078e10,1.0739707796064169e10,1.074059411443809e10,1.0741481142763718e10,1.0742368464188307e10,1.0743256078881384e10,1.0744143987012611e10,1.0745032188751802e10,1.0745920684268896e10,1.0746809473733988e10,1.07476985573173e10,1.0748587935189205e10,1.0749477607520212e10,1.0750367155800695e10,1.0751257417423298e10,1.0752147974017298e10,1.075303882575377e10,1.0753929972803938e10,1.0754821415339157e10,1.0755713153530928e10,1.0756605187550896e10,1.0757497517570847e10,1.075839014376271e10,1.0759283066298555e10,1.0760176285350597e10,1.0761069380741207e10,1.0761963193203182e10,1.0762857302698774e10,1.076375170940077e10,1.0764646413482101e10,1.076554141511584e10,1.0766436714475206e10,1.0767332311733562e10,1.0768228207064413e10,1.0769124400641415e10,1.0770020892638357e10,1.0770917683229181e10,1.0771814350556587e10,1.0772711738716927e10,1.077360942599376e10,1.0774507412561604e10,1.0775405698595125e10,1.077630428426914e10,1.0777203169758604e10,1.077810235523862e10,1.077900184088444e10,1.0779901626871454e10,1.0780801713375214e10,1.0781701676988365e10,1.0782602364911259e10,1.0783503353878319e10,1.0784404644065674e10,1.0785306235649603e10,1.0786208128806528e10,1.0787110323713024e10,1.078801282054581e10,1.078891561948175e10,1.0789818720697866e10,1.0790722124371319e10,1.079162583067942e10,1.0792529414512466e10,1.079343372647984e10,1.0794338341614607e10,1.0795243260094675e10,1.0796148482098104e10,1.0797054007803097e10,1.0797959837388008e10,1.0798865971031345e10,1.0799772408911762e10,1.0800679151208063e10,1.0801586198099205e10,1.080249354976429e10,1.0803400779379246e10,1.0804308740986574e10,1.0805217007905983e10,1.080612558031718e10,1.0807034458400026e10,1.080794364233453e10,1.0808853132300858e10,1.0809762928479319e10,1.0810673031050379e10,1.0811583440194658e10,1.0812494156092926e10,1.0813405178926104e10,1.0814316080143614e10,1.0815227717245405e10,1.08161396618257e10,1.0817051914066038e10,1.08179644741481e10,1.0818877342253727e10,1.0819790518564913e10,1.0820704003263802e10,1.0821617796532698e10,1.0822531898554052e10,1.0823446094419823e10,1.0824360814421354e10,1.082527584372359e10,1.0826191182509605e10,1.0827106615580849e10,1.082802257381136e10,1.0828938842075747e10,1.0829855420557707e10,1.0830772309441088e10,1.0831689508909893e10,1.0832606803328512e10,1.0833524624447643e10,1.0834442756705101e10,1.0835361200285511e10,1.083627995537366e10,1.0837199022154488e10,1.0838118184553778e10,1.0839037875202003e10,1.083995787809863e10,1.084087819342923e10,1.0841798821379528e10,1.084271976213541e10,1.084364079918248e10,1.0844562366034143e10,1.0845484246249949e10,1.0846406440016417e10,1.0847328947520226e10,1.0848251768948206e10,1.0849174687344217e10,1.085009813710775e10,1.0851021901356873e10,1.0851945980279057e10,1.085287037406194e10,1.0853794865380045e10,1.0854719889373692e10,1.0855645228791845e10,1.0856570883822777e10,1.0857496854654922e10,1.0858423141476873e10,1.0859349526518517e10,1.086027644581208e10,1.0861203681662153e10,1.0862131234257977e10,1.0863059103788946e10,1.0863987290444628e10,1.0864915576008665e10,1.086584439740841e10,1.086677353650248e10,1.0867702993481089e10,1.0868632768534607e10,1.0869562861853573e10,1.0870493054773787e10,1.0871423785120949e10,1.0872354834306103e10,1.0873286202520441e10,1.0874217889955315e10,1.0875149896802244e10,1.087608200394758e10,1.0877014650118599e10,1.0877947616277168e10,1.0878880902615465e10,1.0879814509325829e10,1.0880748436600765e10,1.0881682464875551e10,1.088261703378231e10,1.0883551923832106e10,1.088448713521811e10,1.0885422668133654e10,1.0886358302636883e10,1.0887294479116444e10,1.0888230977706501e10,1.0889167798601055e10,1.0890104941994272e10,1.0891042408080486e10,1.0891979976463785e10,1.0892918088443663e10,1.0893856523700497e10,1.0894795282429296e10,1.0895734364825233e10,1.0896673771083649e10,1.0897613280352926e10,1.0898553334846714e10,1.0899493713789967e10,1.0900434417378702e10,1.0901375445809109e10,1.0902316799277534e10,1.090325825647502e10,1.0904200260532675e10,1.090514259021839e10,1.0906085245729198e10,1.0907028227262302e10,1.0907971535015081e10,1.0908914947219553e10,1.0909858907927647e10,1.0910803195448519e10,1.0911747809980225e10,1.0912692751720997e10,1.0913638020869236e10,1.0914583395196291e10,1.0915529319678246e10,1.0916475572163864e10,1.0917422152852234e10,1.091836906194262e10,1.091931607682119e10,1.0920263643236738e10,1.0921211538653088e10,1.0922159763270191e10,1.0923108317288181e10,1.0924057200907358e10,1.0925006191050137e10,1.0925955734395668e10,1.0926905607944296e10,1.0927855811897026e10,1.0928806346455032e10,1.0929757211819666e10,1.0930708184447884e10,1.0931659711952608e10,1.0932611570869019e10,1.0933563761399166e10,1.0934516283745285e10,1.0935469138109776e10,1.0936422100482445e10,1.09373756194134e10,1.0938329470970957e10,1.093928365535823e10,1.0940238172778505e10,1.0941193023435251e10,1.094214798284941e10,1.0943103500511717e10,1.0944059352021915e10,1.094501553758418e10,1.0945972057402874e10,1.0946928911682528e10,1.0947885875473505e10,1.0948843399210627e10,1.0949801258023342e10,1.0950759452116903e10,1.0951717981696747e10,1.095267662141976e10,1.0953635822510155e10,1.0954595359704153e10,1.0955555233207914e10,1.0956515443227766e10,1.0957475989970224e10,1.0958436647618427e10,1.0959397868347054e10,1.0960359426418867e10,1.0961321322041111e10,1.0962283555421202e10,1.0963246126766747e10,1.0964208809785381e10,1.0965172057605768e10,1.0966135644015465e10,1.0967099569222807e10,1.0968063833436312e10,1.0969028436864683e10,1.0969993152738297e10,1.0970958435143332e10,1.0971924057390385e10,1.0972890019688894e10,1.0973856322248482e10,1.0974822965278952e10,1.097578972153167e10,1.0976757046053865e10,1.0977724711677423e10,1.0978692718612886e10,1.0979661067070988e10,1.0980629757262648e10,1.0981598561458437e10,1.0982567935670216e10,1.098353765224937e10,1.0984507711407568e10,1.098547811335666e10,1.098644885830868e10,1.0987419718051634e10,1.0988391149565588e10,1.098936292471966e10,1.099033504372664e10,1.0991307506799507e10,1.0992280085322754e10,1.0993253237086033e10,1.0994226733555212e10,1.0995200574944023e10,1.0996174761466387e10,1.0997149293336412e10,1.0998123941452732e10,1.0999099164579836e10,1.1000074733698025e10,1.1001050649022175e10,1.1002026910767345e10,1.1003003519148792e10,1.1003980244577467e10,1.1004957546796339e10,1.1005935196298342e10,1.1006913193299496e10,1.1007891538016014e10,1.1008870230664297e10,1.100984904116581e10,1.1010828430245647e10,1.101180816790757e10,1.1012788254368744e10,1.1013768689846542e10,1.1014749474558525e10,1.1015730377934837e10,1.1016711861686386e10,1.1017693695325916e10,1.1018675879071766e10,1.1019658413142467e10,1.1020641297756746e10,1.1021624301851593e10,1.1022607888127422e10,1.1023591825604136e10,1.1024576114501238e10,1.1025560755038439e10,1.1026545515740349e10,1.1027530860134813e10,1.1028516556829618e10,1.1029502606045256e10,1.103048900800241e10,1.1031475762921974e10,1.1032462638832008e10,1.1033450100256695e10,1.1034437915307585e10,1.1035426084206352e10,1.1036414607174877e10,1.1037403484435234e10,1.1038392483517069e10,1.103938206994466e10,1.1040372011331455e10,1.1041362307900324e10,1.1042352959874344e10,1.1043343967476788e10,1.1044335097737001e10,1.1045326817183142e10,1.1046318892928679e10,1.1047311325197683e10,1.1048304114214437e10,1.1049297260203419e10,1.10502905296918e10,1.1051284390215397e10,1.105227860838582e10,1.1053273184428358e10,1.10542681185685e10,1.1055263411031942e10,1.1056258827841776e10,1.1057254837545307e10,1.1058251206250387e10,1.1059247934183523e10,1.106024502157143e10,1.1061242234015684e10,1.1062240040909416e10,1.106323820793923e10,1.1064236735332657e10,1.1065235623317436e10,1.1066234872121511e10,1.1067234246838877e10,1.10682342178812e10,1.106923455042783e10,1.1070235244707535e10,1.107123630094929e10,1.1072237719382275e10,1.1073239264590984e10,1.1074241408009491e10,1.1075243914307964e10,1.1076246783716421e10,1.107725001646508e10,1.1078253612784372e10,1.1079257336747349e10,1.1080261660814388e10,1.1081266349144548e10,1.1082271401969097e10,1.108327681951951e10,1.1084282602027472e10,1.108528851305265e10,1.1086295026085648e10,1.1087301904772459e10,1.108830914934562e10,1.1089316760037867e10,1.1090324737082153e10,1.10913328435228e10,1.1092341553884571e10,1.1093350631298452e10,1.1094360075998245e10,1.1095369888217966e10,1.1096380068191837e10,1.109739037844687e10,1.1098401294545952e10,1.1099412579103086e10,1.1100424232353363e10,1.1101436254532072e10,1.1102448407733624e10,1.1103461168389038e10,1.110447429868001e10,1.1105487798842686e10,1.1106501669113441e10,1.1107515909728865e10,1.1108530282262413e10,1.1109545264190552e10,1.111056061717436e10,1.1111576341451288e10,1.1112592437259005e10,1.1113608904835398e10,1.1114625505230986e10,1.1115642716971693e10,1.111666030119599e10,1.1117678258142635e10,1.1118696588050606e10,1.1119715291159101e10,1.1120734127993683e10,1.1121753578133781e10,1.1122773402193254e10,1.1123793600412176e10,1.1124814173030846e10,1.1125835120289774e10,1.1126856202187551e10,1.1127877899361185e10,1.1128899971897896e10,1.1129922420039085e10,1.1130945244026377e10,1.1131968444101614e10,1.1132991779734383e10,1.1134015732623346e10,1.1135040062327068e10,1.1136064769088285e10,1.1137089853149958e10,1.113811507353927e10,1.1139140912842743e10,1.1140167130176836e10,1.11411937257854e10,1.114222069991252e10,1.1143248052802498e10,1.114427554294976e10,1.1145303654010052e10,1.1146332144567413e10,1.1147361014867052e10,1.1148390265154406e10,1.1149419895675137e10,1.1150449664388844e10,1.1151480056024645e10,1.115251082863211e10,1.1153541982457811e10,1.1154573517748543e10,1.1155605434751337e10,1.1156637490888897e10,1.115767017196789e10,1.1158703235501339e10,1.1159736681737185e10,1.1160770510923605e10,1.1161804723308996e10,1.116283907577709e10,1.1163874055216291e10,1.1164909418601002e10,1.1165945166180544e10,1.1166981298204475e10,1.1168017814922583e10,1.116905447267751e10,1.1170091759443642e10,1.117112943165465e10,1.1172167489561253e10,1.1173205933414396e10,1.117424451910422e10,1.117528373551332e10,1.1176323338623161e10,1.1177363328685623e10,1.117840370595283e10,1.1179444470677132e10,1.1180485378203707e10,1.118152691850894e10,1.1182568847029684e10,1.118361116401924e10,1.1184653869731136e10,1.1185696964419147e10,1.1186740202881355e10,1.1187784076192213e10,1.1188828339241852e10,1.118987299228499e10,1.1190918035576582e10,1.1191963469371824e10,1.1193009047919563e10,1.1194055263396646e10,1.1195101870144327e10,1.119614886841876e10,1.1197196258476332e10,1.1198244040573671e10,1.1199291968408245e10,1.1200340535263617e10,1.1201389494930025e10,1.120243884766506e10,1.1203488593726555e10,1.1204538733372587e10,1.1205589019747065e10,1.120663994724464e10,1.1207691269102367e10,1.1208742985579288e10,1.120979509693469e10,1.1210847603428106e10,1.121190025764771e10,1.1212953555103636e10,1.1214007248477568e10,1.121506133803001e10,1.1216115824021723e10,1.1217170458576096e10,1.1218225738136187e10,1.1219281414919214e10,1.122033748918691e10,1.1221393961201256e10,1.122245083122448e10,1.1223507850820219e10,1.1224565517555117e10,1.1225623583086996e10,1.1226682047679081e10,1.1227740911594835e10,1.1228800175097971e10,1.1229859589190153e10,1.1230919652566069e10,1.1231980116321945e10,1.1233040980722496e10,1.1234102246032682e10,1.1235163912517717e10,1.1236225730615055e10,1.1237288200151922e10,1.1238351071660719e10,1.1239414345407661e10,1.1240478021659222e10,1.1241542100682117e10,1.1242606332347366e10,1.124367121761923e10,1.1244736506464048e10,1.1245802199149557e10,1.1246868295943743e10,1.1247934797114845e10,1.1249001451965187e10,1.1250068762600607e10,1.1251136478419134e10,1.1252204599690033e10,1.1253273126682812e10,1.125434180822416e10,1.1255411147374708e10,1.1256480893057163e10,1.125755104554207e10,1.125862160510023e10,1.1259692572002699e10,1.12607636945033e10,1.126183547681263e10,1.1262907667280926e10,1.1263980266180279e10,1.126505327378304e10,1.1266126690361816e10,1.1267200263595291e10,1.1268274498848627e10,1.1269349143897306e10,1.1270424199014977e10,1.1271499664475554e10,1.127257554055321e10,1.1273651574349176e10,1.1274728272387825e10,1.1275805381867582e10,1.1276882903063667e10,1.1277960836251566e10,1.1279039181707031e10,1.128011768595153e10,1.1281196856673304e10,1.1282276440491405e10,1.1283356437682644e10,1.1284436848524088e10,1.1285517673293076e10,1.1286598657928986e10,1.1287680311288616e10,1.128876237940933e10,1.1289844862569525e10,1.1290927761047873e10,1.129201082029689e10,1.1293094550150772e10,1.1294178696160349e10,1.1295263258605358e10,1.1296348237765814e10,1.1297433633921986e10,1.1298519191940006e10,1.1299605422831291e10,1.130069207156068e10,1.1301779138409529e10,1.1302866623659464e10,1.1303954527592386e10,1.130504259448566e10,1.13061313365327e10,1.1307220498109985e10,1.13083100795005e10,1.1309400080987505e10,1.1310490502854532e10,1.1311581088787807e10,1.1312672352167532e10,1.1313764036779451e10,1.131485614290819e10,1.1315948670838652e10,1.1317041620856016e10,1.131813473605297e10,1.1319228531001335e10,1.1320322748893723e10,1.132141739001641e10,1.1322512454655964e10,1.1323607943099213e10,1.132470359784291e10,1.1325799934655336e10,1.1326896696133566e10,1.132799388256555e10,1.1329091494239517e10,1.1330189531443974e10,1.1331287736077303e10,1.1332386625109127e10,1.1333485940538572e10,1.1334585682655266e10,1.1335685851749117e10,1.133678618921802e10,1.133788721303645e10,1.1338988664703386e10,1.1340090544509863e10,1.1341192852747204e10,1.134229558970701e10,1.1343398496184336e10,1.1344502091364017e10,1.1345606116142607e10,1.1346710570812845e10,1.1347815455667755e10,1.134892077100065e10,1.135002625700128e10,1.1351132434069798e10,1.1352239042497877e10,1.135334608257997e10,1.1354453554610823e10,1.1355561458885462e10,1.1356669534985865e10,1.1357778304532492e10,1.1358887507209656e10,1.1359997143313541e10,1.1361107213140623e10,1.1362217716987661e10,1.1363328393826365e10,1.1364439766502522e10,1.13655515740906e10,1.1366663816888521e10,1.136777649519451e10,1.136888960930707e10,1.1370002897585138e10,1.1371116884104876e10,1.1372231307328402e10,1.1373346167555395e10,1.1374461465085833e10,1.1375576937766085e10,1.1376693110701494e10,1.1377809721841967e10,1.1378926771488663e10,1.138004425994303e10,1.1381162187506813e10,1.138228029140898e10,1.1383399097994574e10,1.1384518344596535e10,1.1385638031517797e10,1.138675815906159e10,1.1387878727531448e10,1.1388999473536383e10,1.139012092466628e10,1.1391242817634558e10,1.1392365152745941e10,1.1393487930305462e10,1.1394611150618448e10,1.13957345496714e10,1.1396858656304205e10,1.1397983206608198e10,1.1399108200889921e10,1.1400233639456207e10,1.14013595226142e10,1.1402485585725307e10,1.1403612358884613e10,1.14047395775588e10,1.1405867242056227e10,1.1406995352685555e10,1.1408123909755753e10,1.1409252648000546e10,1.1410382098775433e10,1.141151199691986e10,1.1412642342744019e10,1.1413773136558409e10,1.1414904112571693e10,1.1416035803193739e10,1.1417167942739292e10,1.1418300531520088e10,1.1419433569848173e10,1.1420567058035894e10,1.1421700729659445e10,1.1422835118398762e10,1.1423969957936567e10,1.1425105248586458e10,1.142624099066234e10,1.1427377184478432e10,1.1428513562975807e10,1.1429650661109806e10,1.1430788211928478e10,1.1431926215747295e10,1.1433064672882048e10,1.143420358364883e10,1.1435342680350954e10,1.1436482499224497e10,1.1437622772680193e10,1.1438763501035408e10,1.1439904684607819e10,1.1441046323715424e10,1.1442188150021095e10,1.1443330701047031e10,1.1444473708563982e10,1.1445617172891222e10,1.1446761094348333e10,1.144790547325523e10,1.144905004063166e10,1.1450195335291353e10,1.1451341088362394e10,1.145248730016598e10,1.1453633971023617e10,1.1454780831417072e10,1.1455928421240486e10,1.1457076471084347e10,1.1458224981271458e10,1.1459373952124939e10,1.1460523383968245e10,1.1461673006635054e10,1.1462823361321047e10,1.1463974177969082e10,1.1465125456903913e10,1.1466277198450619e10,1.1467429402934597e10,1.1468581799538723e10,1.1469734930765707e10,1.147088852590806e10,1.1472042585292503e10,1.1473197109246073e10,1.1474352098096146e10,1.1475507280372036e10,1.1476663199889019e10,1.1477819585286524e10,1.1478976436893242e10,1.1480133755038197e10,1.1481291540050749e10,1.148244951980389e10,1.148360823943104e10,1.148476742691577e10,1.1485927082588768e10,1.1487087206781063e10,1.1488247799824005e10,1.1489408588931492e10,1.1490570120560682e10,1.1491732122036522e10,1.1492894593691713e10,1.1494057535859291e10,1.1495220948872625e10,1.1496384559283716e10,1.1497548914879105e10,1.1498713742322315e10,1.1499879041948074e10,1.1501044814091448e10,1.150221078475071e10,1.1503377502824535e10,1.150454469442313e10,1.150571235988292e10,1.150688049954067e10,1.1508049113733492e10,1.1509217927792593e10,1.1510387491956457e10,1.1511557531668697e10,1.15127280472678e10,1.1513899039092587e10,1.1515070507482233e10,1.151624217709803e10,1.1517414599524006e10,1.1518587499534346e10,1.1519760877469604e10,1.1520934733670687e10,1.1522109068478836e10,1.1523283605882576e10,1.1524458898817244e10,1.1525634671384739e10,1.1526810923927704e10,1.1527987656789131e10,1.1529164870312366e10,1.1530342287810272e10,1.153152046357531e10,1.1532699121034212e10,1.1533878260531725e10,1.1535057882412954e10,1.1536237987023354e10,1.1537418296997232e10,1.1538599367990015e10,1.1539780922750374e10,1.154096296162518e10,1.154214548496166e10,1.1543328214826448e10,1.1544511708015242e10,1.154569568670945e10,1.154688015125772e10,1.154806510200907e10,1.1549250539312864e10,1.1550436184551828e10,1.1551622595895422e10,1.1552809494841646e10,1.1553996881741304e10,1.1555184756945566e10,1.1556373120805958e10,1.1557561694018345e10,1.1558751036131903e10,1.155994086795827e10,1.1561131189850424e10,1.1562322002161705e10,1.1563513305245821e10,1.1564704819108812e10,1.1565897104685547e10,1.156708988209834e10,1.1568283151702358e10,1.1569476913853138e10,1.1570671168906578e10,1.1571865636175909e10,1.157306087798771e10,1.1574256613772e10,1.1575452843886147e10,1.1576649568687899e10,1.1577846788535362e10,1.1579044222045961e10,1.1580242432944042e10,1.1581441139964317e10,1.1582640343466387e10,1.1583840043810217e10,1.158503995903108e10,1.1586240654022781e10,1.1587441846938307e10,1.1588643538139128e10,1.158984572798708e10,1.1591048416844383e10,1.1592251322044937e10,1.1593455009891516e10,1.1594659197836262e10,1.1595863886242899e10,1.1597069075475527e10,1.1598274765898623e10,1.159948067414167e10,1.1600687367922573e10,1.1601894563989573e10,1.1603102262708666e10,1.1604310464446234e10,1.1605519169569036e10,1.160672809399906e10,1.1607937806875542e10,1.1609148024239748e10,1.1610358746459972e10,1.1611569973904894e10,1.161278170694357e10,1.1613993660787395e10,1.1615206406003187e10,1.1616419657922144e10,1.1617633416914875e10,1.1618847683352371e10,1.1620062457606014e10,1.1621277454173489e10,1.162249324505547e10,1.1623709544869984e10,1.1624926353989971e10,1.1626143672788757e10,1.1627361501640059e10,1.1628579554324726e10,1.1629798404283611e10,1.1631017765418434e10,1.1632237638104483e10,1.1633458022717442e10,1.1634678632438389e10,1.163590004191317e10,1.1637121964444187e10,1.16383444004087e10,1.163956735018437e10,1.1640790814149252e10,1.1642014504761787e10,1.1643238998119698e10,1.1644464006803286e10,1.16456895311922e10,1.1646915571666487e10,1.16481421286066e10,1.1649368913745153e10,1.1650596504638176e10,1.1651824613140686e10,1.1653053239634737e10,1.165428238450279e10,1.1655512048127707e10,1.1656741941513071e10,1.1657972643679686e10,1.1659203865754087e10,1.1660435608120754e10,1.1661667871164574e10,1.1662900655270844e10,1.1664133670710882e10,1.1665367497976791e10,1.1666601847463387e10,1.16678367195576e10,1.1669072114646765e10,1.167030803311863e10,1.1671544184509005e10,1.1672781150787836e10,1.167401864161499e10,1.1675256657379856e10,1.1676495198472242e10,1.1677733973812534e10,1.167897356660726e10,1.1680213685901318e10,1.1681454332086174e10,1.168269550555371e10,1.1683937206696224e10,1.1685179143692577e10,1.1686421901239273e10,1.1687665187640255e10,1.1688909003289488e10,1.169015334858136e10,1.169139822391068e10,1.1692643336711473e10,1.1693889273176912e10,1.1695135740866657e10,1.1696382740177202e10,1.1697630271505468e10,1.1698878335248793e10,1.1700126638093035e10,1.1701375767734745e10,1.1702625430985992e10,1.1703875628245815e10,1.1705126359913675e10,1.1706377626389475e10,1.1707629133607546e10,1.1708881470774593e10,1.171013434395173e10,1.1711387753540567e10,1.171264169994314e10,1.1713896183561916e10,1.1715150909576347e10,1.1716406468710083e10,1.1717662566269922e10,1.1718919202660063e10,1.1720176378285137e10,1.1721433797692924e10,1.172269205287643e10,1.172395084851127e10,1.1725210185003819e10,1.1726470062760878e10,1.1727730482189695e10,1.1728991147076921e10,1.1730252650945108e10,1.173151469770932e10,1.1732777287778555e10,1.1734040421562254e10,1.17353040994703e10,1.1736568024524778e10,1.1737832791784716e10,1.1739098104401197e10,1.1740363962785872e10,1.1741630367350834e10,1.1742897318508629e10,1.1744164518513311e10,1.174543256396737e10,1.1746701157254452e10,1.1747970298788883e10,1.1749239988985434e10,1.1750510228259325e10,1.1751780718093115e10,1.1753052056639769e10,1.1754323945512024e10,1.17555963851269e10,1.175686937590187e10,1.1758142918254858e10,1.1759416712893417e10,1.1760691359528057e10,1.1761966558997107e10,1.1763242311720308e10,1.1764518618117857e10,1.17657954786104e10,1.1767072593126963e10,1.1768350562942717e10,1.1769629088118063e10,1.1770908169075481e10,1.1772187806237917e10,1.177346769888291e10,1.1774748449594975e10,1.177602975778354e10,1.1777311623873388e10,1.1778594048289766e10,1.1779877031458382e10,1.178116027187173e10,1.1782444373692154e10,1.178372903554463e10,1.178501425785673e10,1.178630004105649e10,1.1787586385572414e10,1.1788872989108349e10,1.1790160457411715e10,1.1791448488319456e10,1.1792737082261957e10,1.1794026239670065e10,1.1795315960975098e10,1.1796605943088652e10,1.179789679335051e10,1.1799188208805984e10,1.1800480189888285e10,1.1801772737031101e10,1.1803065850668589e10,1.1804359226916452e10,1.1805653474714186e10,1.180694829031183e10,1.1808243674145452e10,1.18095396266516e10,1.1810836148267298e10,1.1812132934308693e10,1.1813430595322388e10,1.181472882675949e10,1.1816027629058947e10,1.1817327002660194e10,1.1818626642210274e10,1.1819927159600714e10,1.1821228249614035e10,1.1822529912691614e10,1.1823832149275305e10,1.1825134959807447e10,1.182643803812876e10,1.182774199775155e10,1.1829046532652647e10,1.1830351643276346e10,1.1831657330067438e10,1.18329635934712e10,1.183427012651829e10,1.1835577544349323e10,1.1836885540131714e10,1.183819411431271e10,1.1839503267340054e10,1.1840812999661987e10,1.1842123003495348e10,1.184343389561666e10,1.1844745368380152e10,1.1846057422236053e10,1.1847370057635092e10,1.1848683275028494e10,1.1849996765815506e10,1.1851311148416174e10,1.1852626114367783e10,1.1853941664123566e10,1.1855257798137257e10,1.1856574516863094e10,1.1857891510878931e10,1.185920940025602e10,1.1860527875710897e10,1.1861846937699825e10,1.1863166586679579e10,1.186448651254058e10,1.1865807336735998e10,1.186712874929549e10,1.1868450750677866e10,1.1869773341342443e10,1.1871096521749052e10,1.1872419980959688e10,1.187374434209294e10,1.1875069294350687e10,1.1876394838194815e10,1.1877720974087729e10,1.1879047702492342e10,1.1880374711638336e10,1.1881702626317558e10,1.1883031134900236e10,1.188436023785136e10,1.1885689935636442e10,1.1887020228721518e10,1.1888350804500038e10,1.1889682289445005e10,1.1891014371091085e10,1.1892347049906404e10,1.1893680326359613e10,1.1895014200919884e10,1.1896348360140526e10,1.1897683432183615e10,1.1899019103744343e10,1.1900355375293995e10,1.1901692247304386e10,1.190302972024786e10,1.1904367479833618e10,1.1905706155920809e10,1.1907045434361193e10,1.1908385315629246e10,1.1909725800199974e10,1.1911066888548916e10,1.1912408265537193e10,1.1913750562729061e10,1.1915093465128878e10,1.1916436973214329e10,1.1917781087463648e10,1.191912549202815e10,1.19204708198992e10,1.1921816755371927e10,1.1923163298926722e10,1.192451045104452e10,1.1925858212206795e10,1.1927206265709417e10,1.1928555246263742e10,1.1929904837310137e10,1.1931255039332256e10,1.1932605852814312e10,1.193395727824106e10,1.1935308998048843e10,1.1936661648677229e10,1.1938014912707758e10,1.1939368790627382e10,1.1940723282923616e10,1.1942078390084518e10,1.194343379368284e10,1.1944790131894596e10,1.1946147086438425e10,1.194750465780461e10,1.194886284648399e10,1.1950221652967964e10,1.1951580757961567e10,1.1952940801385582e10,1.1954301464091635e10,1.1955662746573362e10,1.1957024649324968e10,1.1958387172841219e10,1.1959749996955284e10,1.1961113763341093e10,1.1962478151979113e10,1.1963843163366371e10,1.1965208798000462e10,1.1966574734984827e10,1.1967941617460766e10,1.1969309124679615e10,1.1970677257141245e10,1.1972046015346098e10,1.197341539979519e10,1.1974785088712439e10,1.1976155727007774e10,1.1977526993053719e10,1.1978898887353588e10,1.1980271410411272e10,1.1981644562731241e10,1.1983018021653656e10,1.1984392433865616e10,1.1985767476856617e10,1.1987143151133448e10,1.1988519457203472e10,1.1989896395574644e10,1.1991273642699127e10,1.1992651847049776e10,1.1994030685228811e10,1.199541015774652e10,1.1996790265113785e10,1.199817100784207e10,1.1999552061491255e10,1.2000934076328606e10,1.2002316728064789e10,1.2003700017213629e10,1.2005083944289549e10,1.2006468509807558e10,1.2007853388430948e10,1.2009239232230099e10,1.2010625716019821e10,1.201201284031751e10,1.2013400605641161e10,1.201478868590359e10,1.2016177734684464e10,1.2017567426048746e10,1.2018957760516827e10,1.20203487386097e10,1.2021740360848963e10,1.2023132300242863e10,1.2024525212190313e10,1.2025918769852451e10,1.2027312973753292e10,1.2028707824417467e10,1.2030103322370205e10,1.2031499139710785e10,1.203289593366626e10,1.2034293376489542e10,1.203569146870831e10,1.2037090210850857e10,1.2038489603446089e10,1.2039889317679882e10,1.2041290012616375e10,1.2042691359595839e10,1.2044093359149649e10,1.204549601180979e10,1.2046899318108877e10,1.2048302948314938e10,1.204970756333819e10,1.2051112833601826e10,1.2052518759640936e10,1.205392534199125e10,1.2055332581189114e10,1.2056740146580208e10,1.2058148700929926e10,1.2059557913739878e10,1.206096778554892e10,1.2062378316896545e10,1.2063789508322872e10,1.2065201028246723e10,1.206661354129779e10,1.2068026716051594e10,1.2069440553050787e10,1.2070855052838663e10,1.2072269883058187e10,1.2073685709899654e10,1.2075102201163372e10,1.207651935739519e10,1.2077937179141588e10,1.20793556669497e10,1.2080774487527258e10,1.2082194308945776e10,1.2083614798071117e10,1.2085035955452988e10,1.2086457781641739e10,1.208788027718837e10,1.2089303107860773e10,1.2090726943621006e10,1.2092151450395882e10,1.2093576628738998e10,1.2095002479204607e10,1.2096429002347612e10,1.209785586299143e10,1.2099283732998043e10,1.2100712277350574e10,1.2102141496606552e10,1.210357139132417e10,1.2105001962062275e10,1.2106432872695114e10,1.2107864796994066e10,1.2109297398993887e10,1.2110730679256077e10,1.2112164638342798e10,1.211359927681688e10,1.2115034257598707e10,1.2116470256378551e10,1.2117906936238115e10,1.21193442977429e10,1.2120782341459082e10,1.2122220729508537e10,1.2123660139187937e10,1.2125100232781155e10,1.212654101085706e10,1.2127982473985191e10,1.2129424622735775e10,1.2130867118268099e10,1.2132310639815374e10,1.2133754848699703e10,1.2135199745494024e10,1.213664533077196e10,1.2138091605107819e10,1.21395382286935e10,1.214098588270847e10,1.2142434227508255e10,1.2143883263669909e10,1.214533299177117e10,1.2146783412390472e10,1.2148234184747482e10,1.2149685991977707e10,1.2151138493465273e10,1.2152591689791382e10,1.215404558153793e10,1.2155500169287506e10,1.2156955111282684e10,1.2158411092624857e10,1.2159867771721888e10,1.2161325149159166e10,1.2162783225522781e10,1.2164242001399527e10,1.2165701134049963e10,1.2167161310551304e10,1.2168622188330248e10,1.2170083767976404e10,1.2171546050080101e10,1.2173008691079786e10,1.217447237970682e10,1.2175936772566488e10,1.217740187025196e10,1.217886767335712e10,1.2180334182476564e10,1.218180105305764e10,1.218326897582592e10,1.2184737606396439e10,1.2186206945366667e10,1.2187676993334797e10,1.2189147750899738e10,1.2190618872512733e10,1.219209105090369e10,1.2193563940692396e10,1.2195037542480663e10,1.219651185687103e10,1.2197986884466764e10,1.219946227871795e10,1.220093873436905e10,1.2202415905039557e10,1.2203893791335665e10,1.2205372393864304e10,1.2206851713233135e10,1.2208331401886011e10,1.2209812156592218e10,1.2211293629965893e10,1.2212775822617647e10,1.221425873515884e10,1.221574236820158e10,1.2217226373178356e10,1.2218711448893644e10,1.2220197246951101e10,1.2221683767965809e10,1.2223171012553598e10,1.2224658631300247e10,1.2226147324714163e10,1.2227636743553013e10,1.2229126888435637e10,1.2230617759981625e10,1.2232109358811323e10,1.2233601334489676e10,1.2235094389579456e10,1.2236588173818392e10,1.2238082687829863e10,1.223957793223801e10,1.2241073907667742e10,1.2242570262657942e10,1.2244067701836327e10,1.2245565873915455e10,1.2247064779523298e10,1.2248564419288595e10,1.2250064793840853e10,1.2251565550687632e10,1.2253067396532248e10,1.2254569979056831e10,1.2256073298893991e10,1.2257577356677103e10,1.2259082153040321e10,1.2260587334454584e10,1.2262093609709524e10,1.2263600625451565e10,1.2265108382317986e10,1.2266616880946846e10,1.2268126121976995e10,1.2269635750837406e10,1.227114647841484e10,1.2272657950314674e10,1.2274170167178907e10,1.227568312965033e10,1.2277196838372524e10,1.2278710937727127e10,1.228022614070891e10,1.2281742091876833e10,1.2283258791877663e10,1.2284776241358965e10,1.228629408382545e10,1.2287813034036947e10,1.2289332735676264e10,1.2290853189394175e10,1.2292374395842262e10,1.2293896355672909e10,1.229541871133352e10,1.2296942179712116e10,1.229846640343513e10,1.2299991383158188e10,1.2301517119537731e10,1.230304361323101e10,1.2304570505622633e10,1.2306098515739922e10,1.2307627285147455e10,1.230915681450576e10,1.2310687104476181e10,1.2312218155720888e10,1.2313749608556145e10,1.2315282184159796e10,1.231681552302903e10,1.231834962582932e10,1.2319884493226969e10,1.2321420125889105e10,1.2322956163058083e10,1.2324493328073547e10,1.2326031260359735e10,1.2327569960587112e10,1.2329109429426985e10,1.2330649667551493e10,1.233219031312346e10,1.2333732091655716e10,1.233527464149392e10,1.233681796331359e10,1.2338362057791077e10,1.2339906562185286e10,1.2341452203828756e10,1.2342998620164045e10,1.23445458118709e10,1.2346093779629925e10,1.2347642524122581e10,1.2349191681517836e10,1.2350741981342474e10,1.235229305995009e10,1.2353844918025576e10,1.2355397556254679e10,1.2356950975324003e10,1.2358504810306847e10,1.2360059792935862e10,1.2361615558469957e10,1.2363172107599205e10,1.2364729441014547e10,1.2366287559407797e10,1.236784609675079e10,1.2369405786993757e10,1.2370966264295143e10,1.2372527529350258e10,1.237408958285529e10,1.2375652425507301e10,1.2377215690170855e10,1.237878011302555e10,1.2380345327123552e10,1.2381911333165457e10,1.238347813185275e10,1.2385045723887806e10,1.2386613741022038e10,1.2388182921676294e10,1.2389752897790606e10,1.2391323670070911e10,1.2392895239224043e10,1.239446723606929e10,1.239604040090434e10,1.239761436473794e10,1.2399189128280521e10,1.2400764692243412e10,1.2402341057338852e10,1.2403917853262108e10,1.240549582257415e10,1.2407074595160723e10,1.2408654171737698e10,1.241023455302185e10,1.2411815739730879e10,1.2413397360430035e10,1.241498015995571e10,1.2416563767064663e10,1.241814818247826e10,1.241973340691878e10,1.2421319441109432e10,1.2422905912479408e10,1.2424493568152763e10,1.242608203575124e10,1.2427671316001749e10,1.2429261409632128e10,1.2430852317371151e10,1.243244366550587e10,1.243403620346033e10,1.2435629557715178e10,1.243722372900293e10,1.2438818718057034e10,1.2440414525611887e10,1.2442010776806263e10,1.2443608223376629e10,1.2445206490656412e10,1.2446805579383781e10,1.2448405490297857e10,1.2450006224138716e10,1.2451607404890678e10,1.2453209786615149e10,1.2454812993492157e10,1.2456417026265596e10,1.2458021885680313e10,1.2459627194753834e10,1.2461233709494638e10,1.2462841053116852e10,1.2464449226369175e10,1.246605823000127e10,1.2467668064763765e10,1.2469278352508284e10,1.2470889851591454e10,1.2472502184062569e10,1.2474115350676153e10,1.2475729352187698e10,1.2477344189353682e10,1.247895948285349e10,1.2480575993404715e10,1.2482193341885506e10,1.2483811529056263e10,1.2485430555678377e10,1.2487050422514225e10,1.2488670749064598e10,1.2490292298420946e10,1.249191469028392e10,1.2493537925419865e10,1.2495162004596115e10,1.2496786928581015e10,1.2498412315690348e10,1.250003893140242e10,1.2501666394233978e10,1.2503294704957367e10,1.2504923864345938e10,1.2506553873174057e10,1.2508184348566027e10,1.2509816058400127e10,1.2511448620002735e10,1.2513082034152264e10,1.2514716301628138e10,1.2516351038556805e10,1.2517987014826576e10,1.2519623846766907e10,1.2521261535161308e10,1.2522900080794312e10,1.252453948445148e10,1.2526179361055809e10,1.252782048291986e10,1.252946246517076e10,1.2531105308598196e10,1.2532749013992895e10,1.2534393582146614e10,1.2536038626772274e10,1.2537684922620106e10,1.2539332083608301e10,1.254098011053279e10,1.254262900419054e10,1.2544278765379587e10,1.2545929006596119e10,1.2547580505041521e10,1.2549232873418406e10,1.2550886112529013e10,1.2552540223176626e10,1.2554195206165602e10,1.2555850672768692e10,1.2557507402652058e10,1.255916500729602e10,1.2560823487509188e10,1.2562482844101233e10,1.25641430778829e10,1.2565803798896732e10,1.2567465789287386e10,1.2569128659306139e10,1.257079240976804e10,1.25724570414892e10,1.2574122163481796e10,1.2575788559966442e10,1.257745584016502e10,1.2579124004897982e10,1.258079305498688e10,1.258246299125435e10,1.2584133421469805e10,1.2585805132357792e10,1.2587477731898628e10,1.2589151220919329e10,1.2590825600248007e10,1.2592500870713882e10,1.2594176638836702e10,1.2595853693858978e10,1.2597531642512545e10,1.2599210485631042e10,1.260089022404923e10,1.260257085860298e10,1.260425199455538e10,1.260593442368107e10,1.260761775145643e10,1.2609301978721802e10,1.2610987106318653e10,1.261267313508957e10,1.2614359669033966e10,1.261604750247286e10,1.2617736239620163e10,1.2619425881322985e10,1.2621116428429565e10,1.2622807881789293e10,1.2624499844130812e10,1.262619311233589e10,1.2627887289348894e10,1.262958237602377e10,1.2631278373215618e10,1.2632975281780676e10,1.263467270316969e10,1.2636371436839664e10,1.2638071084458292e10,1.263977164688643e10,1.2641473124986097e10,1.2643175119137619e10,1.264487843095518e10,1.264658266103709e10,1.2648287810250021e10,1.2649993879461815e10,1.2651700869541485e10,1.2653408379578201e10,1.2655117213788267e10,1.2656826971480087e10,1.265853765352738e10,1.2660249260805042e10,1.2661961794189157e10,1.2663674851470432e10,1.2665389239482119e10,1.2667104556235416e10,1.2668820802611164e10,1.2670537979491386e10,1.2672256087759317e10,1.2673974723899834e10,1.267569469737808e10,1.26774156049007e10,1.267913744735572e10,1.2680860225632387e10,1.268258394062114e10,1.2684308187493603e10,1.2686033778361893e10,1.2687760308620674e10,1.2689487779165249e10,1.2691216190892141e10,1.2692945544699091e10,1.2694675434436985e10,1.2696406674880095e10,1.2698138860103636e10,1.2699871991010258e10,1.2701606068503847e10,1.2703340685328909e10,1.2705076658489872e10,1.2706813580956657e10,1.2708551453638103e10,1.2710290277444286e10,1.2712030053286531e10,1.271377037257472e10,1.271551205500362e10,1.2717254692209845e10,1.2718998285109716e10,1.2720742834620825e10,1.2722488341662016e10,1.2724234396300879e10,1.2725981820938082e10,1.2727730205869268e10,1.2729479552018335e10,1.2731229860310463e10,1.27329811316721e10,1.2734732954820814e10,1.2736486154878862e10,1.27382403207932e10,1.2739995453495384e10,1.2741751553918264e10,1.274350862299597e10,1.274526624808827e10,1.2747025257054811e10,1.2748785237486094e10,1.2750546190321411e10,1.2752308116501364e10,1.2754071016967852e10,1.2755834477714983e10,1.2757599329355747e10,1.2759365158116343e10,1.2761131964943884e10,1.276289975078681e10,1.2764668100495153e10,1.2766437846988602e10,1.276820857535041e10,1.2769980286534279e10,1.277175298149524e10,1.2773526661189648e10,1.2775300909087317e10,1.2777076560890848e10,1.2778853200304651e10,1.278063082829041e10,1.2782409445811144e10,1.2784189053831219e10,1.2785969234432192e10,1.2787750826115902e10,1.2789533411199883e10,1.279131699065389e10,1.2793101565449026e10,1.2794887136557749e10,1.2796673284665243e10,1.279846085108906e10,1.2800249416751766e10,1.280203898263127e10,1.2803829549706842e10,1.2805621118959124e10,1.280741326966877e10,1.2809206845985626e10,1.2811001427429134e10,1.2812797014985447e10,1.2814593609642097e10,1.2816391212387995e10,1.281818940109102e10,1.281998902275006e10,1.2821789655473198e10,1.2823591300254929e10,1.2825393958091127e10,1.2827197629979073e10,1.2829001892365553e10,1.2830807595115381e10,1.2832614314916998e10,1.2834422052773306e10,1.2836230809688633e10,1.2838040160919132e10,1.283985095873087e10,1.2841662778622858e10,1.2843475621605103e10,1.284528948868903e10,1.2847104380887491e10,1.2848919872020144e10,1.28507368172503e10,1.2852554790641924e10,1.285437379321362e10,1.2856193825985426e10,1.2858014889978828e10,1.2859836557568459e10,1.2861659686832174e10,1.2863483850390402e10,1.286530904927043e10,1.286713528450101e10,1.286896255711235e10,1.2870790438025486e10,1.2872619788250261e10,1.287445017895498e10,1.2876281611175724e10,1.287811408595005e10,1.2879947604316996e10,1.2881781735735329e10,1.2883617344164478e10,1.2885453999311983e10,1.288729170222282e10,1.2889130453943445e10,1.2890970255521814e10,1.2892810674945719e10,1.2894652579141897e10,1.2896495536348423e10,1.2898339547619251e10,1.2900184614009846e10,1.290203030227547e10,1.2903877481829268e10,1.2905725719678047e10,1.2907575016883331e10,1.2909425374508165e10,1.2911276793617115e10,1.2913128839478266e10,1.2914982384505e10,1.291683699421848e10,1.2918692669689404e10,1.292054941199e10,1.292240722219405e10,1.2924265664073505e10,1.2926125613060183e10,1.292798663318066e10,1.2929848725514914e10,1.2931711891144468e10,1.293357613115241e10,1.2935441007805553e10,1.2937307399572468e10,1.2939174868976158e10,1.2941043417105974e10,1.2942913045052843e10,1.294478375390927e10,1.294665510442782e10,1.2948527978132328e10,1.2950401936033129e10,1.2952276979229065e10,1.2954153108820562e10,1.2956030325909649e10,1.295790818972548e10,1.2959787584865803e10,1.2961668070819128e10,1.2963549648693888e10,1.2965432319600126e10,1.2967315641490429e10,1.296920050153849e10,1.2971086457957588e10,1.2972973511864233e10,1.2974861664376562e10,1.2976750916614342e10,1.2978640824989714e10,1.2980532279784922e10,1.2982424837674414e10,1.2984318499784492e10,1.2986213267243114e10,1.2988109141179878e10,1.2990005676457077e10,1.299190376648463e10,1.2993802966388767e10,1.2995703277305702e10,1.2997604700373314e10,1.2999507236731148e10,1.3001410439682165e10,1.3003315205783258e10,1.3005221088602962e10,1.3007128089287518e10,1.3009036208984838e10,1.3010945448844538e10,1.301285536060067e10,1.3014766843976564e10,1.3016679450973516e10,1.30185931827479e10,1.302050804045779e10,1.3022424025262972e10,1.3024340687318941e10,1.3026258929535114e10,1.30281783023359e10,1.3030098806887924e10,1.303202044435954e10,1.3033942763583366e10,1.3035866670138979e10,1.3037791713129309e10,1.3039717893729624e10,1.3041645213116924e10,1.3043573672469948e10,1.3045502819024845e10,1.304743356158373e10,1.3049365447654766e10,1.3051298478423683e10,1.3053232655077984e10,1.3055167978806917e10,1.3057103995240261e10,1.305904161642281e10,1.3060980388258072e10,1.3062920311942377e10,1.3064861388673834e10,1.3066803619652334e10,1.3068746548891304e10,1.3070691091698528e10,1.30726367923629e10,1.3074583652091465e10,1.3076531672093075e10,1.307848085357837e10,1.3080430738934362e10,1.3082382246752333e10,1.3084334919696495e10,1.3086288758984743e10,1.3088243765836786e10,1.3090199941474155e10,1.3092156826647276e10,1.3094115343251606e10,1.309607503231655e10,1.309803589507096e10,1.3099997932745544e10,1.3101961146572842e10,1.3103925075656443e10,1.3105890645216866e10,1.3107857394638449e10,1.3109825325161152e10,1.3111794438026796e10,1.3113764270958715e10,1.3115735751964367e10,1.311770841904934e10,1.3119682273462936e10,1.3121657316456347e10,1.312363354928264e10,1.3125610507999287e10,1.312758912397755e10,1.3129568933558958e10,1.3131549938004158e10,1.3133532138575695e10,1.3135515536538027e10,1.3137499666272236e10,1.3139485462534815e10,1.3141472459992733e10,1.3143460659918106e10,1.3145450063584984e10,1.3147440672269335e10,1.3149432018665247e10,1.3151425040936052e10,1.3153419272063568e10,1.3155414713331518e10,1.3157411366025585e10,1.3159409231433392e10,1.3161407840551323e10,1.3163408134971363e10,1.3165409645979475e10,1.3167412374871145e10,1.3169416322943813e10,1.3171421491496908e10,1.3173427409818302e10,1.3175435022950628e10,1.3177443860473236e10,1.3179453923693485e10,1.3181465213920736e10,1.3183477259010794e10,1.318549100689878e10,1.3187505985733543e10,1.3189522196832466e10,1.3191539641514938e10,1.3193558321102375e10,1.3195577761722017e10,1.3197598914800508e10,1.3199621306760044e10,1.3201644938930155e10,1.3203669812642406e10,1.3205695929230412e10,1.3207722813081755e10,1.3209751419137203e10,1.3211781272081224e10,1.3213812373255642e10,1.321584472400435e10,1.3217878325673298e10,1.3219912700899233e10,1.3221948808159842e10,1.3223986170390692e10,1.3226024788946056e10,1.3228064665182293e10,1.323010580045785e10,1.3232147715647346e10,1.323419137278839e10,1.3236236293056387e10,1.3238282477818201e10,1.3240329928442812e10,1.3242378646301315e10,1.3244428150494802e10,1.3246479406644035e10,1.3248531934152878e10,1.3250585734400944e10,1.3252640808769981e10,1.3254696674874382e10,1.3256754301338737e10,1.3258813206081875e10,1.3260873390494146e10,1.326293485596807e10,1.3264997603898323e10,1.3267061150104609e10,1.3269126466837814e10,1.3271193070224096e10,1.3273260961666847e10,1.3275330142571636e10,1.327740061434623e10,1.3279471891003954e10,1.3281544948445831e10,1.3283619300993675e10,1.3285694950064072e10,1.3287771897075811e10,1.3289850143449905e10,1.3291929201381495e10,1.329401005044581e10,1.3296092203148546e10,1.3298175660919632e10,1.3300260425191242e10,1.3302346497397804e10,1.330443338790435e10,1.3306522079984632e10,1.330861208431631e10,1.3310703402342836e10,1.3312796035509935e10,1.33148899852656e10,1.3316984760132746e10,1.3319081347108158e10,1.3321179255029469e10,1.3323278485353819e10,1.3325379039540644e10,1.3327480919051678e10,1.3329583630555567e10,1.3331688164796907e10,1.333379402876118e10,1.3335901223919382e10,1.3338009751744823e10,1.3340119117351593e10,1.3342230314626513e10,1.3344342849002283e10,1.3346456721961569e10,1.334857193498939e10,1.335068848957312e10,1.3352805888950026e10,1.3354925130800743e10,1.3357045718683311e10,1.3359167654094568e10,1.3361290938533731e10,1.3363415573502407e10,1.3365541060348572e10,1.3367668400572124e10,1.3369797095843992e10,1.3371927147675362e10,1.3374058557579828e10,1.3376191327073399e10,1.3378324955602188e10,1.3380460448511034e10,1.338259730557119e10,1.3384735528308365e10,1.3386875118250717e10,1.3389016076928843e10,1.3391157901874273e10,1.3393301602302729e10,1.33954466760731e10,1.3397593124725807e10,1.339974094980375e10,1.340189015285229e10,1.3404040229475555e10,1.3406192192786333e10,1.3408345538718344e10,1.3410500268826906e10,1.3412656384669836e10,1.341481338023523e10,1.3416972271903563e10,1.3419132553994408e10,1.3421294228075632e10,1.342345729571764e10,1.342562175849336e10,1.3427787108439646e10,1.34299543658827e10,1.3432123023193134e10,1.3434293081954063e10,1.3436464543751154e10,1.3438637410172646e10,1.3440811171290972e10,1.3442986851404974e10,1.3445163940923147e10,1.3447342441444035e10,1.3449522354568775e10,1.3451703681901108e10,1.3453885911535742e10,1.3456070071771322e10,1.345825565104095e10,1.3460442650958803e10,1.3462631073141682e10,1.3464820919209013e10,1.3467011675264355e10,1.3469204373633602e10,1.3471398500761047e10,1.3473594058276695e10,1.3475791047813208e10,1.3477989471005909e10,1.3480188811953636e10,1.3482390107037247e10,1.3484592840698675e10,1.3486797014583961e10,1.3489002630341833e10,1.3491209170390078e10,1.3493417674510023e10,1.349562762546456e10,1.3497839024913237e10,1.3500051874518328e10,1.3502266175944834e10,1.3504481409580608e10,1.3506698619313456e10,1.3508917285878736e10,1.351113741095242e10,1.3513358996213224e10,1.351558204334263e10,1.351780603068461e10,1.3520032006261938e10,1.352225944876854e10,1.3524488359897003e10,1.3526718741342707e10,1.352895059480382e10,1.3531183396566359e10,1.3533418198816845e10,1.3535654478193708e10,1.3537892236406376e10,1.3540131475167095e10,1.3542372196190948e10,1.3544613873691774e10,1.3546857564048906e10,1.3549102741831083e10,1.3551349408764784e10,1.3553597566579353e10,1.3555847217007008e10,1.3558097832175032e10,1.3560350472684942e10,1.356260461102145e10,1.3564860248928312e10,1.3567117388152184e10,1.3569376030442636e10,1.3571635645825916e10,1.3573897299155357e10,1.3576160460817171e10,1.3578425132572615e10,1.3580691316185892e10,1.3582958479921213e10,1.3585227692197937e10,1.3587498421642368e10,1.3589770670030537e10,1.3592044439141428e10,1.3594319730757011e10,1.3596596011013504e10,1.3598874352637213e10,1.3601154222129036e10,1.3603435621282925e10,1.3605718551895832e10,1.360800301576773e10,1.361028847689191e10,1.3612576012332159e10,1.3614865086449066e10,1.361715570105474e10,1.361944785796434e10,1.362174155899608e10,1.3624036265985258e10,1.3626333060363964e10,1.3628631404337427e10,1.363093129973617e10,1.3633232748393787e10,1.3635535752146976e10,1.363784004174668e10,1.3640145889757874e10,1.3642453569481792e10,1.364476281167875e10,1.3647073346377281e10,1.3649385718896036e10,1.3651699659453894e10,1.3654014897535349e10,1.3656331979574802e10,1.365865063524779e10,1.3660970593492863e10,1.3663292401864168e10,1.3665615789491999e10,1.3667940484767033e10,1.3670267036367203e10,1.3672595172875639e10,1.3674924622133211e10,1.3677255933945692e10,1.3679588836347113e10,1.3681923056626604e10,1.3684259145721842e10,1.368659683111583e10,1.3688935839543997e10,1.3691276723080029e10,1.3693619208653942e10,1.3695963022445517e10,1.3698308717668545e10,1.370065574458011e10,1.3703004657156368e10,1.3705355181401363e10,1.3707707042564392e10,1.3710060795768637e10,1.3712416166459913e10,1.3714772879326593e10,1.3717131490643047e10,1.3719491725294886e10,1.3721853307407553e10,1.3724216794410793e10,1.372658191062803e10,1.3728948379619764e10,1.3731316759975342e10,1.3733686775453987e10,1.3736058149049234e10,1.3738431440514277e10,1.3740806373042114e10,1.3743182669057308e10,1.3745560889481136e10,1.3747940756938366e10,1.3750321993282528e10,1.3752705160607286e10,1.3755089980967133e10,1.375747617564252e10,1.3759864307903803e10,1.3762254099233147e10,1.3764645270335876e10,1.3767038385663355e10,1.3769433166123375e10,1.3771829331844063e10,1.3774227448462133e10,1.3776627236308945e10,1.3779028414933334e10,1.378143155116176e10,1.3783836364747063e10,1.3786242574656698e10,1.3788650748911257e10,1.3791060323204597e10,1.3793471866355833e10,1.3795885097148972e10,1.3798299733577848e10,1.3800716345663086e10,1.3803134651604588e10,1.380555436880918e10,1.3807976068503456e10,1.3810399468301094e10,1.381282428501979e10,1.3815251091096586e10,1.381767960355681e10,1.3820109538626883e10,1.38225414699588e10,1.3824975113987408e10,1.382741018634569e10,1.3829847261905134e10,1.3832286056507948e10,1.3834726285191525e10,1.3837168524051388e10,1.3839612488334953e10,1.3842057892481844e10,1.3844505313816208e10,1.3846954466988485e10,1.3849405065838348e10,1.3851857688923166e10,1.3854312050294237e10,1.3856767863189068e10,1.3859225707402884e10,1.3861685296385643e10,1.3864146342770487e10,1.3866609427595142e10,1.3869074263706026e10,1.387154056312969e10,1.3874008908151043e10,1.3876479011010736e10,1.3878950583126507e10,1.3881424208035154e10,1.3883899306180222e10,1.3886376461935707e10,1.3888855386527704e10,1.3891335790354263e10,1.3893818259049168e10,1.3896302503226778e10,1.3898788232670311e10,1.390127603427811e10,1.3903765618050537e10,1.390625669315371e10,1.3908749847755314e10,1.3911244791239456e10,1.3913741232152859e10,1.3916239759937384e10,1.3918740083358587e10,1.39212419103415e10,1.3923745831607008e10,1.3926251555299826e10,1.3928758788720978e10,1.393126812387525e10,1.3933779268284212e10,1.3936291928622555e10,1.3938806698183868e10,1.3941323283864256e10,1.3943841391709732e10,1.3946361616307636e10,1.394888366392626e10,1.3951407239980604e10,1.3953932940356695e10,1.3956460470692686e10,1.3958989535770197e10,1.3961520732778929e10,1.3964053766724531e10,1.3966588341752872e10,1.3969125056362345e10,1.3971663316301756e10,1.3974203720944735e10,1.3976745974237501e10,1.3979289779261026e10,1.3981835736706043e10,1.3984383549879923e10,1.3986932921221495e10,1.3989484452743675e10,1.3992037847112581e10,1.3994592806122475e10,1.3997149933113577e10,1.3999708930108337e10,1.4002269498254017e10,1.4004832242223276e10,1.4007396863392473e10,1.400996306225941e10,1.4012531444834375e10,1.401510171184518e10,1.401767356313772e10,1.4020247606065098e10,1.402282354070413e10,1.402540106624633e10,1.4027980791392841e10,1.403056241556702e10,1.403314563730351e10,1.4035731066656755e10,1.4038318402394169e10,1.4040907342391022e10,1.4043498498060347e10,1.4046091567511122e10,1.4048686247956728e10,1.405128315217411e10,1.4053881977611292e10,1.4056482420817244e10,1.4059085095938164e10,1.4061689699758608e10,1.4064295928160585e10,1.4066904396664932e10,1.4069514494314283e10,1.4072126837548876e10,1.4074741122041845e10,1.4077357042557934e10,1.4079975216921043e10,1.4082595340134045e10,1.4085217106287882e10,1.4087841134595568e10,1.4090467119387144e10,1.4093094754077158e10,1.4095724659273237e10,1.4098356528629992e10,1.4100990054882973e10,1.4103625860039934e10,1.4106263637077461e10,1.4108903078049484e10,1.4111544806369442e10,1.4114188514333275e10,1.4116833893310661e10,1.4119481568126295e10,1.4122131230392853e10,1.4124782570793106e10,1.4127436215568623e10,1.4130091855646173e10,1.413274918101895e10,1.4135408819351053e10,1.4138070460880676e10,1.4140733794908762e10,1.4143399450527617e10,1.4146067117284185e10,1.4148736483784468e10,1.4151408180554686e10,1.415408189644785e10,1.4156757319372309e10,1.4159435081293945e10,1.4162114555128843e10,1.416479637380584e10,1.4167480225015392e10,1.417016579549704e10,1.4172853719628931e10,1.4175543684400343e10,1.4178235375845867e10,1.41809294297988e10,1.4183625532544493e10,1.4186323369409824e10,1.4189023577689096e10,1.4191725842960989e10,1.4194429849841883e10,1.4197136237092987e10,1.4199844689583534e10,1.4202554891216612e10,1.4205267482226278e10,1.420798214676952e10,1.4210698568033327e10,1.421341738773057e10,1.4216138289303192e10,1.4218860955219254e10,1.4221586028676443e10,1.4224313192398836e10,1.4227042128132727e10,1.4229773480566658e10,1.4232506931704002e10,1.4235242162566423e10,1.4237979819339403e10,1.4240719583302752e10,1.4243461134750633e10,1.4246205121371563e10,1.4248951223718943e10,1.4251699121356527e10,1.4254449463482025e10,1.425720192991953e10,1.4259956199499493e10,1.4262712922934996e10,1.426547145477374e10,1.4268232446742487e10,1.4270995577443373e10,1.4273760524478178e10,1.4276527941099415e10,1.4279297505172142e10,1.4282068893557e10,1.428484276103854e10,1.428761878474179e10,1.429039664078329e10,1.4293176985485939e10,1.4295959495231773e10,1.4298743845390253e10,1.4301530693828966e10,1.4304319716184002e10,1.4307110587074713e10,1.4309903965919788e10,1.4312699527606356e10,1.4315496946000656e10,1.4318296882078905e10,1.4321099009976254e10,1.4323903002802794e10,1.4326709523098734e10,1.4329518244244223e10,1.4332328838590153e10,1.4335141970247229e10,1.4337957311837547e10,1.4340774534949724e10,1.434359430527151e10,1.4346416294663895e10,1.4349240173950117e10,1.4352066610401564e10,1.4354895275115025e10,1.4357725838145271e10,1.4360558968353935e10,1.4363394336070517e10,1.4366231610578186e10,1.4369071462335495e10,1.437191322656205e10,1.4374757574784708e10,1.437760417604721e10,1.438045269833976e10,1.4383303814797316e10,1.438615719368798e10,1.4389012502221924e10,1.4391870415148994e10,1.4394730599958475e10,1.4397592723077332e10,1.4400457460877098e10,1.4403324480065056e10,1.4406193446281754e10,1.440906503752727e10,1.4411938919723682e10,1.4414814757721891e10,1.441769323115741e10,1.4420574005163897e10,1.4423456743799347e10,1.4426342128341661e10,1.4429229823132822e10,1.4432119491434666e10,1.443501181617444e10,1.4437906460899216e10,1.4440803088071365e10,1.4443702382274523e10,1.444660400625755e10,1.4449507621680065e10,1.4452413914789137e10,1.4455322547532135e10,1.4458233180762596e10,1.4461146502398132e10,1.4464062173581299e10,1.44669798543562e10,1.4469900234318157e10,1.447282262997275e10,1.4475747732037739e10,1.4478675200306894e10,1.4481604693467808e10,1.448453690392795e10,1.4487471490667337e10,1.4490408111555122e10,1.4493347460695753e10,1.4496289196252108e10,1.449923297527147e10,1.4502179493562595e10,1.45051284084678e10,1.4508079376209072e10,1.4511033094306828e10,1.4513989219279392e10,1.4516947406520004e10,1.4519908355268135e10,1.4522871721214684e10,1.452583715892065e10,1.452880536935202e10,1.4531776007368784e10,1.4534748726696213e10,1.45377242300343e10,1.4540702171408642e10,1.4543682203705252e10,1.4546665031365679e10,1.4549650307577614e10,1.4552637684384272e10,1.4555627867976347e10,1.4558620510700092e10,1.4561615263752361e10,1.4564612835080635e10,1.4567612876186169e10,1.4570615037415873e10,1.4573620028481705e10,1.4576627500036343e10,1.4579637101573154e10,1.4582649544576298e10,1.4585664124168375e10,1.4588681553019312e10,1.4591701480359522e10,1.4594723554251722e10,1.4597748489151043e10,1.4600775933429688e10,1.4603805534287106e10,1.4606838007971497e10,1.4609873001993196e10,1.4612910162684704e10,1.46159502080952e10,1.461899278486948e10,1.4622037538469378e10,1.4625085188753023e10,1.4628135381495972e10,1.4631187761285662e10,1.4634243049797192e10,1.4637300891933153e10,1.4640360931402832e10,1.4643423891706358e10,1.4646489416869625e10,1.4649557149719988e10,1.4652627815590727e10,1.4655701057627258e10,1.465877651777122e10,1.4661854923197208e10,1.466493591616638e10,1.4668019137730814e10,1.467110531691466e10,1.4674194095090988e10,1.4677285112418491e10,1.4680379099779137e10,1.4683475697654081e10,1.468657454530475e10,1.4689676375479254e10,1.4692780827762981e10,1.4695887540516195e10,1.4698997248361538e10,1.4702109223844137e10,1.4705224202840982e10,1.4708341823435879e10,1.4711461722478445e10,1.4714584637734287e10,1.4717710206381027e10,1.4720838064356625e10,1.4723968951323828e10,1.4727102503550127e10,1.4730238356057842e10,1.473337725041545e10,1.4736518821976336e10,1.4739662704843168e10,1.4742809642498789e10,1.4745959269378483e10,1.4749111218661236e10,1.475226623575295e10,1.4755423954166792e10,1.4758584006154001e10,1.4761747139052288e10,1.4764912985448656e10,1.4768081176662518e10,1.4771252461972212e10,1.4774426473034485e10,1.477760284023283e10,1.4780782314795061e10,1.4783964527443596e10,1.4787149107621857e10,1.479033680851607e10,1.4793527259910189e10,1.479672009030341e10,1.479991605484935e10,1.4803114782389353e10,1.4806315900474205e10,1.4809520166233957e10,1.4812726830278318e10,1.4815936651059992e10,1.4819149255840023e10,1.482236427057915e10,1.482558245572171e10,1.482880343757495e10,1.4832026841139896e10,1.4835253428861732e10,1.4838482826089653e10,1.48417146568607e10,1.4844949685630157e10,1.48481875367849e10,1.4851427833393673e10,1.4854671341931185e10,1.4857917685817688e10,1.48611664871493e10,1.4864418514429531e10,1.48676733901077e10,1.4870930735302914e10,1.4874191320556953e10,1.4877454767343834e10,1.488072069580126e10,1.48839898785188e10,1.488726193599078e10,1.4890536487369087e10,1.4893814307300648e10,1.4897095015295694e10,1.4900378229515852e10,1.490366472667503e10,1.4906954125294939e10,1.4910246042542456e10,1.4913541257208193e10,1.4916839386820862e10,1.4920140047548088e10,1.4923444020266958e10,1.492675092150869e10,1.4930060366437122e10,1.4933373138025648e10,1.4936688461729837e10,1.4940007121926086e10,1.4943328733473083e10,1.494665290985154e10,1.4949980437550707e10,1.4953310930419653e10,1.4956644000923058e10,1.4959980437673044e10,1.4963319853504461e10,1.496666185986132e10,1.4970007247488691e10,1.497335562820257e10,1.4976706612421625e10,1.4980060993034029e10,1.4983418380832273e10,1.498677838520497e10,1.4990141801193619e10,1.4993508238562508e10,1.4996877305665459e10,1.5000249799707602e10,1.5003625329420292e10,1.5007003502117796e10,1.5010385117179235e10,1.5013769782298283e10,1.5017157103744854e10,1.5020547883082489e10,1.5023941726962399e10,1.5027338240605316e10,1.5030738227769712e10,1.5034141294059517e10,1.5037547043641426e10,1.504095628247941e10,1.5044368615125278e10,1.504778364468679e10,1.505120217934408e10,1.5054623420052086e10,1.5058048176474302e10,1.5061476051398153e10,1.5064906646155561e10,1.5068340772644108e10,1.5071778032586004e10,1.507521802624104e10,1.5078661567751715e10,1.5082108257770079e10,1.5085557695478762e10,1.5089010697276133e10,1.5092466862739061e10,1.509592578996799e10,1.5099388297628141e10,1.5102853984216192e10,1.5106322446745306e10,1.5109794506158644e10,1.511326975986762e10,1.5116747803793018e10,1.5120229461167095e10,1.5123714328310904e10,1.5127202000047688e10,1.5130693301910048e10,1.5134187829123535e10,1.5137685175408693e10,1.5141186168609764e10,1.5144690402851648e10,1.5148197470746946e10,1.5151708202462961e10,1.515522219101873e10,1.5158739027913675e10,1.5162259545649622e10,1.5165783336134514e10,1.5169309989749306e10,1.5172840341341908e10,1.5176373981703897e10,1.517991050009245e10,1.518345073371319e10,1.5186993855350735e10,1.5190540703789001e10,1.5194090867947172e10,1.5197643935197533e10,1.5201200746701315e10,1.5204760890247103e10,1.5208323952069029e10,1.5211890775717497e10,1.5215460947845106e10,1.5219034053542372e10,1.5222610938760824e10,1.5226191189011621e10,1.5229774388236189e10,1.523336138479921e10,1.5236951763064938e10,1.5240545105820164e10,1.5244142263854855e10,1.524774282038084e10,1.525134635702472e10,1.5254953727013937e10,1.5258564512402365e10,1.5262178293650797e10,1.5265795926436468e10,1.5269416991649681e10,1.527304106857979e10,1.5276669015366205e10,1.5280300411730045e10,1.5283934835783537e10,1.5287573148140736e10,1.5291214927347918e10,1.5294859750334463e10,1.5298508480201643e10,1.5302160694315174e10,1.5305815968415838e10,1.5309475168104776e10,1.5313137869561413e10,1.5316803647332123e10,1.5320473369530674e10,1.5324146178994478e10,1.5327822945519476e10,1.5331503243295092e10,1.533518664486404e10,1.5338874022556353e10,1.5342564949359644e10,1.5346258996606562e10,1.5349957039174229e10,1.5353658648842567e10,1.535736339572821e10,1.5361072157268465e10,1.5364784504029633e10,1.536850000490634e10,1.5372219539909277e10,1.5375942678385155e10,1.5379668988000557e10,1.5383399351352854e10,1.5387133336563147e10,1.5390870510063915e10,1.5394611757052588e10,1.5398356644418612e10,1.540210473735423e10,1.540585692367044e10,1.540961276901893e10,1.5413371837345552e10,1.5417135019088457e10,1.5420901878655434e10,1.5424671978739746e10,1.5428446212420391e10,1.5432224142855074e10,1.5436005331478222e10,1.5439790674023476e10,1.544357973239224e10,1.5447372066753803e10,1.5451168575510357e10,1.5454968372203684e10,1.5458772357022736e10,1.5462580089761127e10,1.546639112846552e10,1.5470206376016825e10,1.5474025390935516e10,1.5477847729986147e10,1.5481674298755737e10,1.5485504654485258e10,1.5489338352650679e10,1.549317630155944e10,1.549701805716656e10,1.550086317365292e10,1.5504712562060783e10,1.550856577705273e10,1.5512422371508024e10,1.5516283259218239e10,1.5520147993546995e10,1.552401612606534e10,1.5527888573328783e10,1.5531764887395416e10,1.5535644618521412e10,1.5539528686040956e10,1.5543416640699987e10,1.554730803143312e10,1.5551203780368053e10,1.55551034369319e10,1.5559006548730986e10,1.5562914040701477e10,1.5566825460944944e10,1.5570740355732641e10,1.5574659652824268e10,1.5578582898989096e10,1.5582509639156464e10,1.5586440803924793e10,1.5590375938724249e10,1.5594314587135363e10,1.5598257682610592e10,1.5602204304854494e10,1.5606155389230747e10,1.5610110478922386e10,1.5614069115246534e10,1.5618032236446663e10,1.562199938434829e10,1.5625970098901129e10,1.5629945321244087e10,1.5633924591838156e10,1.5637907449258572e10,1.5641894837555418e10,1.5645886295818121e10,1.564988136124031e10,1.5653880980799128e10,1.5657884692205322e10,1.5661892031263756e10,1.56659039478946e10,1.56699199784228e10,1.567393965725721e10,1.5677963937277159e10,1.568199235341458e10,1.5686024438675032e10,1.5690061148913267e10,1.5694102017660925e10,1.5698146576512964e10,1.5702195784315912e10,1.570624917319382e10,1.571030627332365e10,1.5714368046560211e10,1.571843402361261e10,1.5722503733232355e10,1.5726578140299181e10,1.5730656774099829e10,1.573473916195286e10,1.5738826271779705e10,1.5742917150077095e10,1.5747012766803596e10,1.5751112648858728e10,1.5755216321156002e10,1.575932475672393e10,1.576343748101961e10,1.5767554017503336e10,1.5771675342290688e10,1.5775800979388727e10,1.5779930450796824e10,1.5784064735734888e10,1.5788203356752258e10,1.5792345834379631e10,1.5796493150958647e10,1.5800644827573193e10,1.5804800383277456e10,1.5808960803552357e10,1.5813125608008533e10,1.5817294314215794e10,1.5821467910812021e10,1.5825645915926756e10,1.5829827845637476e10,1.5834014691756865e10,1.583820597092545e10,1.5842401197720379e10,1.5846601367147114e10,1.5850805994349201e10,1.5855014592395397e10,1.5859228159502058e10,1.5863446209307716e10,1.586766825336462e10,1.5871895293118292e10,1.587612684069415e10,1.5880362406119764e10,1.5884602994088226e10,1.5888848115203703e10,1.589309727796082e10,1.5897351490318825e10,1.590160976028786e10,1.5905873098014956e10,1.5910141011550581e10,1.5914413006815987e10,1.591869009725565e10,1.592297178937673e10,1.592725758754524e10,1.5931548508522087e10,1.5935844057262732e10,1.5940143736569483e10,1.5944448566538795e10,1.5948758050566e10,1.595307168988114e10,1.595739050793554e10,1.5961714006555864e10,1.5966041685391293e10,1.597037457126747e10,1.5974712164433825e10,1.5979053962949987e10,1.598340099703554e10,1.5987752765354042e10,1.599210876436683e10,1.5996470027707203e10,1.6000836052444138e10,1.6005206333431858e10,1.6009581907737345e10,1.6013962270826202e10,1.6018346915936672e10,1.6022736883589529e10,1.6027131667638155e10,1.603153075969586e10,1.6035935203757498e10,1.604034449205532e10,1.604475811456868e10,1.6049177118786976e10,1.6053600995312332e10,1.6058029232481064e10,1.6062462881297737e10,1.6066900908500168e10,1.6071344367447882e10,1.6075792746006006e10,1.608024552975206e10,1.6084703775595524e10,1.6089166969747099e10,1.609363459611667e10,1.609810771518477e10,1.6102585811498434e10,1.610706836729054e10,1.6111556446633976e10,1.611604953240278e10,1.6120547105143408e10,1.6125050232542559e10,1.6129558395791883e10,1.6134071073741909e10,1.6138589337714806e10,1.6143112667210363e10,1.6147640539373604e10,1.6152174029184004e10,1.6156712614439953e10,1.6161255770571306e10,1.6165804576236883e10,1.6170358507524055e10,1.617491703813778e10,1.6179481250438425e10,1.618405061879266e10,1.618862461517072e10,1.6193204325656958e10,1.6197789222887543e10,1.6202378777088123e10,1.620697407808962e10,1.6211574596787878e10,1.6216179801653965e10,1.6220790786288197e10,1.6225406476696306e10,1.6230027969004257e10,1.6234654731185247e10,1.6239286228763704e10,1.6243923561673439e10,1.624856619612065e10,1.6253213595848219e10,1.6257866864621141e10,1.6262525466868484e10,1.62671888645413e10,1.6271858165259329e10,1.6276532831664272e10,1.6281212323905016e10,1.6285897753479797e10,1.6290588581232637e10,1.6295284265499823e10,1.6299985921682055e10,1.6304693008815296e10,1.6309404983412699e10,1.631412296480162e10,1.631884641019948e10,1.6323574774285688e10,1.6328309180338663e10,1.6333049083746717e10,1.6337793937344831e10,1.6342544868387098e10,1.6347301330422058e10,1.6352062774429504e10,1.6356830331664024e10,1.6361603453823675e10,1.6366381590022161e10,1.6371165875539652e10,1.6375955760212885e10,1.6380750691278517e10,1.638555180806759e10,1.63903585585446e10,1.6395170388058123e10,1.6399988440015572e10,1.6404811592934917e10,1.6409640992955397e10,1.6414476084896654e10,1.6419316310935663e10,1.6424162821331085e10,1.6429015059000792e10,1.6433872464203745e10,1.6438736191344181e10,1.6443605681426931e10,1.6448480372781569e10,1.6453361423984268e10,1.6458248274115503e10,1.6463140359563955e10,1.6468038843104376e10,1.6472943161881424e10,1.647785275033132e10,1.6482768775454247e10,1.6487690672447533e10,1.6492617873783249e10,1.649755155071413e10,1.6502491136478539e10,1.650743606157262e10,1.6512387501529032e10,1.6517344887615437e10,1.6522307648340181e10,1.6527276963543463e10,1.6532252262510426e10,1.6537232971749638e10,1.654222027543671e10,1.6547213600862349e10,1.6552212372523262e10,1.6557217778958603e10,1.656222924545262e10,1.6567246194477978e10,1.6572269818965788e10,1.6577299542181692e10,1.6582334784562037e10,1.6587376743458553e10,1.659242424613033e10,1.6597478492892172e10,1.6602538903618189e10,1.6607604895323309e10,1.6612677672791317e10,1.6617756653844893e10,1.6622841253429361e10,1.6627932680826895e10,1.6633030351796219e10,1.6638133679200388e10,1.6643243876849638e10,1.6648360358426115e10,1.665348253469783e10,1.6658611624033014e10,1.6663747038024534e10,1.666888818533244e10,1.667403628891322e10,1.6679190758257608e10,1.6684350999904705e10,1.668951824142977e10,1.6694691890208464e10,1.6699871350645817e10,1.6705057854966684e10,1.6710250808418598e10,1.6715449613259285e10,1.672065550639431e10,1.6725867890929909e10,1.673108616696316e10,1.6736311576111753e10,1.6741543519327345e10,1.6746781394532894e10,1.6752026448089952e10,1.6757278078782185e10,1.6762535682344854e10,1.67678005099154e10,1.6773071337827528e10,1.6778349420420473e10,1.6783634152834534e10,1.6788924927128338e10,1.6794223002471087e10,1.6799527771798779e10,1.6804838624945553e10,1.6810156825943438e10,1.6815481765510305e10,1.6820812831241777e10,1.6826151292065899e10,1.6831496536468458e10,1.6836847949792412e10,1.6842206805895351e10,1.6847572491016897e10,1.685294438823307e10,1.6858323776364847e10,1.6863710039391487e10,1.6869102558107664e10,1.6874502616331942e10,1.6879909595768873e10,1.6885322874917274e10,1.6890743742627806e10,1.6896171578315874e10,1.6901605758169762e10,1.6907047576107103e10,1.6912496409239565e10,1.691795163143012e10,1.6923414541698591e10,1.6928884514838194e10,1.6934360922371662e10,1.6939845068456581e10,1.6945336325552858e10,1.6950834062827951e10,1.6956339589613125e10,1.696185227602001e10,1.6967371488845581e10,1.6972898542631079e10,1.6978432153916857e10,1.6983973640737747e10,1.6989522369257965e10,1.6995077702289577e10,1.700064096313871e10,1.7006211515580677e10,1.7011788720015894e10,1.701737390505904e10,1.7022966432081074e10,1.7028565659055033e10,1.703417291994183e10,1.7039787573692425e10,1.7045408975836655e10,1.7051038465719704e10,1.7056675399856773e10,1.7062319131318512e10,1.70679710048728e10,1.7073630374583197e10,1.7079296591045002e10,1.7084971004487652e10,1.7090652966506987e10,1.70963418252067e10,1.7102038936317001e10,1.7107743648949821e10,1.7113455308700808e10,1.7119175276840588e10,1.712490289998084e10,1.7130637521192575e10,1.7136380507326902e10,1.7142131202478748e10,1.714788894717775e10,1.7153655113895962e10,1.7159429044194912e10,1.7165210076045977e10,1.7170999587583054e10,1.7176796235639046e10,1.718260140214528e10,1.718841442440356e10,1.719423497856e10,1.720006342484756e10,1.7205900125418816e10,1.7211744412736515e10,1.721759664861517e10,1.7223457196803043e10,1.7229325387151325e10,1.723520158306858e10,1.724108580368691e10,1.724697841490183e10,1.725287874305516e10,1.7258787153700512e10,1.726470401435879e10,1.7270628648719078e10,1.7276561423958733e10,1.7282502709237015e10,1.728845182557236e10,1.729440914177884e10,1.7300375028667202e10,1.730634880456714e10,1.7312330839942554e10,1.731832150726898e10,1.7324320122169086e10,1.7330327056769897e10,1.733634268522515e10,1.734236632043208e10,1.734839833619424e10,1.7354438752937405e10,1.7360487947074097e10,1.736654522783866e10,1.7372610971291203e10,1.7378685555554436e10,1.738476828709355e10,1.7390859543677166e10,1.7396959705152157e10,1.7403068075195534e10,1.7409185033298393e10,1.7415310961045914e10,1.7421445159307724e10,1.7427588009311527e10,1.7433739894395115e10,1.743990011260134e10,1.744606904690882e10,1.745224671892222e10,1.7458433514338707e10,1.746462872740162e10,1.747083274344666e10,1.7477045949957676e10,1.7483267638305244e10,1.7489498195610046e10,1.749573801115749e10,1.750198637342537e10,1.750824367133423e10,1.7514510295986115e10,1.7520785532945827e10,1.752706977294883e10,1.7533363408929085e10,1.753966572351797e10,1.7545977109281136e10,1.7552297960999886e10,1.7558627558351574e10,1.7564966295747475e10,1.757131419630979e10,1.7577671657307297e10,1.7584037954446262e10,1.7590413484623116e10,1.7596798646990776e10,1.7603192714252594e10,1.76095960851874e10,1.7616009160848335e10,1.762243121091455e10,1.7628862636063362e10,1.7635303839264412e10,1.7641754087151157e10,1.764821378231569e10,1.7654683329660652e10,1.7661161992752087e10,1.7667650176113346e10,1.7674148286596783e10,1.7680655584679096e10,1.76871724768316e10,1.769369898783558e10,1.7700235527169308e10,1.7706781351155907e10,1.77133368688903e10,1.7719902491840275e10,1.7726477473187588e10,1.7733062224014915e10,1.7739657157796955e10,1.7746261524551453e10,1.7752875737366245e10,1.775950021174059e10,1.7766134194505318e10,1.7772778100771076e10,1.7779432348079533e10,1.77860961800515e10,1.7792770013838284e10,1.7799454269042072e10,1.7806148186050304e10,1.7812852184073048e10,1.7819566289708794e10,1.782629092533562e10,1.7833025326993088e10,1.7839769916664825e10,1.784652511883255e10,1.7853290166247047e10,1.7860065482993847e10,1.7866851495677208e10,1.7873647433735e10,1.7880453723373535e10,1.7887270793338745e10,1.7894097869731197e10,1.7900935380897133e10,1.7907783757743546e10,1.791464222300906e10,1.7921511207199226e10,1.7928391143401764e10,1.7935281250968456e10,1.7942181962583817e10,1.7949093306840675e10,1.7956015719765354e10,1.7962948416154736e10,1.7969891831629616e10,1.797684640444389e10,1.798381134594854e10,1.7990787093990196e10,1.7997774089070858e10,1.8004771539069855e10,1.801177988408018e10,1.8018799566872746e10,1.8025829791829227e10,1.803287100130979e10,1.803992364037534e10,1.804698690988362e10,1.8054061254483067e10,1.8061147121545944e10,1.8068243708379517e10,1.8075351461941868e10,1.8082470413018997e10,1.8089601012098736e10,1.809674245171261e10,1.810389518193197e10,1.811105965560703e10,1.8118235061655792e10,1.812542185251029e10,1.8132620483405487e10,1.8139830139618378e10,1.8147051275964043e10,1.815428435008487e10,1.8161528543589077e10,1.816878431369748e10,1.8176052120482864e10,1.8183331141856625e10,1.81906218374683e10,1.8197924240123253e10,1.8205238813171116e10,1.821256472955004e10,1.821990245218417e10,1.8227252446908443e10,1.823461388289755e10,1.824198722555927e10,1.8249372943237938e10,1.8256770201315716e10,1.8264179467708122e10,1.8271601213293285e10,1.827903459963149e10,1.828648009717042e10,1.829393817934677e10,1.8301408003869267e10,1.8308890043742535e10,1.8316384774986954e10,1.8323891351429703e10,1.833141024865748e10,1.833894150210328e10,1.8346485591272083e10,1.835404166476849e10,1.8361610201661667e10,1.8369191684100292e10,1.8376785256736206e10,1.8384391401280685e10,1.839201060255248e10,1.839964200121957e10,1.840728608166173e10,1.8414943331394493e10,1.8422612887070587e10,1.843029523576502e10,1.8437990867717228e10,1.844569891553294e10,1.8453419869009544e10,1.846115422113789e10,1.846890110044463e10,1.847666099947706e10,1.8484433956576115e10,1.84922204684447e10,1.8500019658120197e10,1.8507832021859978e10,1.851565805918415e10,1.8523496888974808e10,1.8531349010305065e10,1.8539214925541157e10,1.854709374937661e10,1.8554985983729225e10,1.8562892133840675e10,1.857081131018231e10,1.8578744017545967e10,1.858669076407855e10,1.859465065599523e10,1.8602624200991688e10,1.8610611910150257e10,1.8618612885395603e10,1.8626627637357483e10,1.8634656207602806e10,1.8642699111175632e10,1.865075544422586e10,1.8658825721343193e10,1.8666910460579437e10,1.8675008753712337e10,1.8683121118338066e10,1.8691248075547993e10,1.8699388712712063e10,1.8707543550464737e10,1.871571311296922e10,1.8723896483151646e10,1.873209418471708e10,1.8740306744933327e10,1.8748533242246292e10,1.875677420346445e10,1.8765030158993515e10,1.877330018276232e10,1.87815848047161e10,1.878988407000969e10,1.879819851328533e10,1.880652720239115e10,1.8814870671507423e10,1.8823229458493996e10,1.883160262659441e10,1.88399907132055e10,1.884839425943979e10,1.885681232389803e10,1.8865245447228714e10,1.887369417383267e10,1.8882157557629234e10,1.8890636142554222e10,1.8899130476332962e10,1.8907639608164295e10,1.891616408530761e10,1.8924703956257362e10,1.893325977322883e10,1.8941830579065365e10,1.8950416925515152e10,1.8959019368204685e10,1.896763694516397e10,1.89762702115516e10,1.898491972644349e10,1.8993584523015728e10,1.9002265159875565e10,1.9010962199587116e10,1.9019674670431564e10,1.902840313450367e10,1.9037148157895187e10,1.904590876395092e10,1.9054685518292637e10,1.906347899057983e10,1.9072288199178978e10,1.9081113713279007e10,1.9089955585769825e10,1.909881439113139e10,1.9107689141026386e10,1.911658040946354e10,1.912548877458669e10,1.9134413242980484e10,1.9143354392317112e10,1.915231280444665e10,1.9161287480832157e10,1.9170279002851715e10,1.9179287956104713e10,1.9188313336888588e10,1.9197355730330452e10,1.9206415725822815e10,1.921549231445293e10,1.9224586085140835e10,1.923369763111671e10,1.9242825938212566e10,1.9251971599185993e10,1.926113467185466e10,1.927031575463624e10,1.9279513826284794e10,1.9288729484745396e10,1.929796333238031e10,1.930721434258123e10,1.931648311723791e10,1.9325770262704395e10,1.933507474696318e10,1.9344397175895977e10,1.9353738159896587e10,1.936309666149096e10,1.9372473290600838e10,1.93818686617086e10,1.939128173183577e10,1.9400713114993046e10,1.941016342980106e10,1.9419631627728477e10,1.9429118326924732e10,1.9438623590749172e10,1.9448148043418903e10,1.945769062892246e10,1.9467251971006557e10,1.9476832698145927e10,1.9486431748661034e10,1.949604975055697e10,1.9505687336618805e10,1.951534343944857e10,1.952501869136257e10,1.953471372950985e10,1.9544427480723106e10,1.955416058168361e10,1.9563913673959003e10,1.957368567856114e10,1.9583477236590996e10,1.959328899409044e10,1.9603119866198353e10,1.9612970498491196e10,1.962284096058084e10,1.9632731904562992e10,1.9642642237663864e10,1.9652572611515682e10,1.9662523682822136e10,1.9672494352812527e10,1.9682485277728653e10,1.969249711894131e10,1.9702528771628716e10,1.9712580896701527e10,1.9722654160257824e10,1.973274745136998e10,1.974286143567786e10,1.9752996784068203e10,1.9763152379452084e10,1.9773328892260105e10,1.9783526398005062e10,1.9793745574055946e10,1.9803985295021492e10,1.9814246237817608e10,1.9824529084749626e10,1.9834832704133137e10,1.9845157777822895e10,1.9855504993125877e10,1.986587321200693e10,1.9876263121325146e10,1.988667541345574e10,1.9897108943954514e10,1.9907564404751686e10,1.991804249335858e10,1.9928542058862972e10,1.9939063798334297e10,1.9949608414489155e10,1.9960174749887657e10,1.9970763506807854e10,1.9981374768643894e10,1.99920092451627e10,2.0002665770126877e10,2.0013345052869564e10,2.0024047808529747e10,2.003477286420044e10,2.0045520934590717e10,2.0056292740285458e10,2.0067087101646084e10,2.0077904738831688e10,2.0088746377948368e10,2.0099610832563225e10,2.0110498828360947e10,2.0121411097045692e10,2.0132346445326782e10,2.0143305604491592e10,2.015428931192073e10,2.016529636740154e10,2.0176327507902756e10,2.0187382825803608e10,2.0198463066177963e10,2.020956701948274e10,2.0220695430386955e10,2.0231849049830105e10,2.0243026661194424e10,2.025422901502017e10,2.0265456868196342e10,2.0276708996963768e10,2.028798615781814e10,2.0299289113683594e10,2.031061663359204e10,2.0321969480080566e10,2.0333348422195843e10,2.0344752221692604e10,2.035618164723708e10,2.036763747408772e10,2.0379118456653023e10,2.0390625369817966e10,2.0402158316247093e10,2.041371807962328e10,2.0425303404451294e10,2.043691507405043e10,2.0448553878531e10,2.046021855488732e10,2.0471909892873997e10,2.0483628689124542e10,2.0495373673051067e10,2.0507145640939648e10,2.051894539604482e10,2.0530771660123943e10,2.054262523609281e10,2.0554506933926918e10,2.056641546765549e10,2.0578351646924442e10,2.059031628853234e10,2.0602308098706093e10,2.061432789392431e10,2.0626375788676624e10,2.06384526090218e10,2.0650557050666782e10,2.066268993936395e10,2.0674852108242313e10,2.0687042245030075e10,2.069926118256065e10,2.0711509761143204e10,2.072378666045017e10,2.073609272050641e10,2.0748428788913616e10,2.076079353721056e10,2.0773187812726498e10,2.0785612470470543e10,2.0798066173769066e10,2.0810549777371204e10,2.082306414381103e10,2.083560792812292e10,2.0848181992594013e10,2.0860786465372612e10,2.0873422219213535e10,2.088608789796988e10,2.0898784374167904e10,2.0911512528372284e10,2.092427099595498e10,2.0937060657266655e10,2.0949882400808693e10,2.0962734853389404e10,2.09756189033114e10,2.0988535447142612e10,2.1001483103044296e10,2.1014462767401573e10,2.1027475344981834e10,2.1040519445214993e10,2.1053595972702343e10,2.1066705068780556e10,2.1079847649361813e10,2.109302231210167e10,2.1106229972769714e10,2.11194715558002e10,2.1132745649917263e10,2.1146053179431137e10,2.1159395077442e10,2.117276992365532e10,2.1186178651066715e10,2.119962220158964e10,2.12130991458228e10,2.1226610425595444e10,2.12401569917853e10,2.12537374057953e10,2.126735261844026e10,2.1281003589716885e10,2.129468887174248e10,2.1308409424473118e10,2.1322165407295815e10,2.1335957792613216e10,2.1349785120020535e10,2.1363648361911068e10,2.1377548500182663e10,2.1391484064931797e10,2.1405456038071716e10,2.141946541116351e10,2.1433510704712185e10,2.1447592910320087e10,2.1461713029383926e10,2.1475869572723614e10,2.149006354180414e10,2.1504295948034595e10,2.1518565292455345e10,2.153287258657204e10,2.154721885198752e10,2.156160257986731e10,2.157602479194036e10,2.1590485668759304e10,2.160498624580888e10,2.161952500093862e10,2.163410296980088e10,2.1648720768189323e10,2.166337815483319e10,2.1678075317738575e10,2.1692812012346542e10,2.170758929573361e10,2.1722406927108807e10,2.1737264662248817e10,2.1752163569284527e10,2.176710340784735e10,2.178208393410319e10,2.179710622744665e10,2.1812169604517273e10,2.182727515233787e10,2.184242263137017e10,2.1857611798554607e10,2.1872843752539375e10,2.1888118254364403e10,2.1903435061514553e10,2.1918795284488403e10,2.193419823148927e10,2.1949645021044025e10,2.1965135415298416e10,2.1980669172786373e10,2.1996247424274155e10,2.2011869932661045e10,2.202753645720016e10,2.204324814113935e10,2.2059004284314903e10,2.2074806038433594e10,2.209065316781054e10,2.210654543305712e10,2.2122483998780727e10,2.2138468630247322e10,2.2154499088984337e10,2.217057655276088e10,2.2186700787873962e10,2.220287155684718e10,2.221909005087999e10,2.2235355558483482e10,2.2251669279963768e10,2.226803098352458e10,2.228444043353776e10,2.2300898844205166e10,2.231740598499383e10,2.233396162150374e10,2.2350566982122753e10,2.236722134731297e10,2.2383925955085094e10,2.2400680577223766e10,2.2417484981587757e10,2.2434340420877033e10,2.245124666840119e10,2.2468203493508675e10,2.2485212163902855e10,2.2502272454524796e10,2.2519384136319065e10,2.253654849231623e10,2.25537647922731e10,2.2571034329623096e10,2.258835688227642e10,2.2605732224088028e10,2.26231616643805e10,2.264064498300409e10,2.265818195571865e10,2.2675773908087177e10,2.269342010242568e10,2.2711121875324646e10,2.2728879010149902e10,2.2746691286118572e10,2.2764560056671852e10,2.2782485107463875e10,2.2800466219965374e10,2.2818504764850033e10,2.2836599997364357e10,2.2854753299888485e10,2.287296446220908e10,2.2891233269872066e10,2.2909561123154057e10,2.292794781452345e10,2.2946393132173954e10,2.2964898494694443e10,2.29834636973955e10,2.3002088531279415e10,2.3020774433676872e10,2.303952065087816e10,2.3058328632954124e10,2.3077198180329624e10,2.3096129089066254e10,2.3115122828724686e10,2.313417920303798e10,2.315329801134367e10,2.3172480743161346e10,2.3191726638959324e10,2.3211037201831566e10,2.3230412241452072e10,2.3249851563046944e10,2.3269356690486835e10,2.3288927437281822e10,2.3308563612463657e10,2.332826676119306e10,2.3348036701031876e10,2.3367873245034046e10,2.338777796018169e10,2.3407750080137657e10,2.342779118673603e10,2.3447901104799618e10,2.346807965459615e10,2.3488328440708836e10,2.350864729264018e10,2.352903603531074e10,2.3549496296636185e10,2.3570027306397793e10,2.359063070840056e10,2.3611306340523594e10,2.3632054036022182e10,2.3652875463053352e10,2.3673770464889565e10,2.369473888015618e10,2.371578240200413e10,2.3736900257427406e10,2.3758094156607758e10,2.3779363952463318e10,2.3800709493229984e10,2.3822132515206722e10,2.3843632877517437e10,2.3865210434585136e10,2.3886866949534008e10,2.39086022880269e10,2.393041631100913e10,2.395231080916512e10,2.3974285007826687e10,2.399634071647395e10,2.4018477812454723e10,2.404069616837657e10,2.4062997622568504e10,2.4085382059891064e10,2.4107849360454247e10,2.4130401392249653e10,2.415303738131085e10,2.417575921587227e10,2.4198566794214806e10,2.422146000985795e10,2.4244440782127216e10,2.426750901792967e10,2.429066461940866e10,2.4313909537884003e10,2.4337243689346977e10,2.4360666985026356e10,2.4384181409176193e10,2.440778619203714e10,2.4431483340360516e10,2.445527278636206e10,2.447915445750552e10,2.450313039512991e10,2.452720054187862e10,2.455136483565502e10,2.457562535343338e10,2.4599981331360813e10,2.4624434870772045e10,2.464898593293522e10,2.467363447440906e10,2.4698382634009064e10,2.4723230384975132e10,2.4748177695863186e10,2.4773226744140465e10,2.479837677475159e10,2.482362999160713e10,2.484898638933402e10,2.4874445957930737e10,2.490001094202592e10,2.492568134999748e10,2.4951457185636906e10,2.4977340735604145e10,2.5003332022764027e10,2.5029431065444233e10,2.50556401937081e10,2.5081958670303623e10,2.5108388855022434e10,2.5134930796622765e10,2.5161584539425472e10,2.5188352489052338e10,2.521523471091979e10,2.524223126607844e10,2.5269344607526173e10,2.5296574015976192e10,2.532392197690464e10,2.535138858551804e10,2.5378973932798264e10,2.54066805543367e10,2.543450856451621e10,2.546245807359417e10,2.549053166902535e10,2.551872948541541e10,2.5547051653355637e10,2.557550081399657e10,2.5604076281286926e10,2.5632780733236122e10,2.5661614340648926e10,2.5690577270530235e10,2.5719672257840424e10,2.5748899496709976e10,2.5778259177617626e10,2.580775409455769e10,2.583738359318082e10,2.586715050804583e10,2.589705507507204e10,2.5927097526810215e10,2.595728076056104e10,2.598760503919565e10,2.601807062241058e10,2.604868047262604e10,2.6079433974900894e10,2.6110334136449776e10,2.614138126847636e10,2.617257567937815e10,2.6203920445730785e10,2.623541590994233e10,2.6267062411865616e10,2.629886310016298e10,2.6330818350228195e10,2.6362928535175545e10,2.6395196878626343e10,2.6427622835198547e10,2.6460209680158455e10,2.649295784814628e10,2.6525867772043224e10,2.655894280721477e10,2.6592183426614662e10,2.6625590101790417e10,2.665916627152049e10,2.6692911454701656e10,2.672682914765353e10,2.6760919892236286e10,2.6795184229568e10,2.6829625745326138e10,2.6864245025992287e10,2.6899042657755024e10,2.6934022319491848e10,2.696918464496587e10,2.7004530268138443e10,2.704006296515389e10,2.7075782366982224e10,2.711169231698959e10,2.714779353414937e10,2.7184086738555943e10,2.7220575878164574e10,2.725726172724532e10,2.729414506181229e10,2.7331229939159725e10,2.7368516642652542e10,2.7406007656468567e10,2.7443704947830555e10,2.7481611069870617e10,2.7519726930275265e10,2.755805513492457e10,2.7596597762711517e10,2.7635357493073605e10,2.767433532437212e10,2.7713533992860558e10,2.775295627861917e10,2.7792603253067608e10,2.78324777564047e10,2.7872582083588985e10,2.791291915743963e10,2.795349015413487e10,2.7994298061386185e10,2.803534531082562e10,2.8076634978619892e10,2.8118168354878174e10,2.815994858590134e10,2.8201978250768017e10,2.824426059061413e10,2.828679701959212e10,2.8329590854737175e10,2.8372644834412075e10,2.8415962377474693e10,2.8459545033286926e10,2.8503396302957253e10,2.8547519097161793e10,2.8591917026498688e10,2.8636591787889393e10,2.8681547081191963e10,2.872678667085662e10,2.8772312373374954e10,2.881812804819486e10,2.8864236943006615e10,2.8910643042051636e10,2.8957348334302357e10,2.900435690736347e10,2.905167222447533e10,2.9099298508028305e10,2.914723793591665e10,2.9195494843173767e10,2.9244072927564453e10,2.9292976669951576e10,2.934220845545849e10,2.939177288790554e10,2.9441673920654552e10,2.9491916315587383e10,2.954250268548227e10,2.9593437926667057e10,2.964472627155267e10,2.9696372788106525e10,2.9748380339598305e10,2.980075414126542e10,2.9853499508798306e10,2.9906619509962204e10,2.9960119618323784e10,3.0014004619411205e10,3.006828018599749e10,3.0122949683157112e10,3.0178018957170635e10,3.0233493152233044e10,3.0289378332145477e10,3.034567819068393e10,3.0402398982718697e10,3.045954624685786e10,3.051712647600814e10,3.057514372804709e10,3.063360470673115e10,3.0692515385315384e10,3.0751882728636528e10,3.081171119869496e10,3.0872007993516575e10,3.093277956640985e10,3.099403340243719e10,3.1055774413088287e10,3.1118010341914383e10,3.118074909961116e10,3.1243995968252373e10,3.1307759138223225e10,3.13720460307136e10,3.143686517698951e10,3.150222240353832e10,3.1568126552995487e10,3.1634585685302982e10,3.170160902054831e10,3.1769202994630592e10,3.1837377175186962e10,3.190614033426847e10,3.1975502458644867e10,3.204547066813852e10,3.211605533852694e10,3.2187266037976902e10,3.225911360906949e10,3.2331605941256065e10,3.2404754313798996e10,3.2478569187524067e10,3.255306236322138e10,3.262824259890433e10,3.2704122187068615e10,3.2780713723695374e10,3.2858026692481186e10,3.2936074228025707e10,3.3014868631750603e10,3.3094423676555737e10,3.31747499273984e10,3.3255861767195282e10,3.3337772740661945e10,3.342049795066959e10,3.350404919321291e10,3.358844226452447e10,3.3673692121048515e10,3.3759815374197205e10,3.3846825226550198e10,3.3934739080616627e10,3.402357350198965e10,3.411334681994354e10,3.420407385035679e10,3.429577382877014e10,3.43884658474035e10,3.448216814512994e10,3.457689945060739e10,3.4672681123175476e10,3.476953227925743e10,3.48674754452617e10,3.4966530883512886e10,3.506672237419261e10,3.516807141363189e10,3.527060313061516e10,3.537434035200807e10,3.547930965907562e10,3.558553531514054e10,3.569304546792086e10,3.580186593361574e10,3.591202655165305e10,3.602355481928015e10,3.6136482405530876e10,3.625083863005725e10,3.636665714358203e10,3.648396924434124e10,3.66028107327876e10,3.672321505862171e10,3.684522035805811e10,3.696886333886104e10,3.709418193479479e10,3.72212181797302e10,3.735001178837774e10,3.748060769041164e10,3.761304852292034e10,3.774738238132457e10,3.7883655105165344e10,3.802191825735839e10,3.8162221193584595e10,3.830461928236727e10,3.8449165747718506e10,3.8595920143578964e10,3.874493995872141e10,3.889628936027201e10,3.905003054917762e10,3.920623278885312e10,3.9364963498782196e10,3.952629758583106e10,3.96903082627736e10,3.985707670150796e10,4.002668256247862e10,4.0199213990964386e10,4.037475914403154e10,4.055341004570092e10,4.07352668564155e10,4.092042886988422e10,4.1109005475020226e10,4.130110555051989e10,4.149684886375384e10,4.169635510232203e10,4.189975574415148e10,4.210718270724458e10,4.231878072962411e10,4.2534695617788734e10,4.27550871803551e10,4.298011705522017e10,4.320996224698704e10,4.344480338505106e10,4.368483456028193e10,4.393025988559442e10,4.4181295138289314e10,4.44381686417396e10,4.47011222305588e10,4.4970412308807655e10,4.524631101208557e10,4.552910748584468e10,4.5819109293993935e10,4.6116643973869896e10,4.6422060755994385e10,4.6735732469777016e10,4.705805765953212e10,4.7389462938955154e10,4.773040561665977e10,4.808137663065115e10,4.844290383587804e10,4.8815555696477325e10,4.91999468782224e10,4.959673724961189e10,5.000664566864844e10,5.043045041402133e10,5.086899745136552e10,5.1323208291351265e10,5.1794089001540115e10,5.228274057887601e10,5.279037093388194e10,5.33183087928884e10,5.386801989412368e10,5.4441125941493675e10,5.503942689206286e10,5.566492729732049e10,5.631986760478562e10,5.700676156985975e10,5.772844124825128e10,5.848811289809828e10,5.9289417742531876e10,6.0136521938105545e10,6.10342121713321e10,6.198802341460797e10,6.30043985002871e10,6.409089175171468e10,6.525643190672407e10,6.651166602316643e10,6.78694158081696e10,6.934529429010359e10,7.09585448140347e10,7.273323204527371e10,7.469993207225668e10,7.689823087557759e10,7.938050227092046e10,8.221787666519608e10,8.551001724119624e10,8.940205867861438e10,9.411588714472885e10,1.0001299730916792e11,1.077356479978399e11,1.1857825749924377e11,1.3573784437567285e11,1.7101754029202774e11,4.641588934109927e12],"x":[1.0e-30,9.998000799700121e-31,9.99600159940024e-31,9.99400239910036e-31,9.992003198800481e-31,9.9900039985006e-31,9.98800479820072e-31,9.986005597900841e-31,9.98400639760096e-31,9.98200719730108e-31,9.980007997001201e-31,9.97800879670132e-31,9.97600959640144e-31,9.974010396101561e-31,9.97201119580168e-31,9.9700119955018e-31,9.96801279520192e-31,9.96601359490204e-31,9.96401439460216e-31,9.96201519430228e-31,9.9600159940024e-31,9.95801679370252e-31,9.956017593402639e-31,9.95401839310276e-31,9.95201919280288e-31,9.950019992502999e-31,9.94802079220312e-31,9.94602159190324e-31,9.944022391603359e-31,9.94202319130348e-31,9.9400239910036e-31,9.938024790703719e-31,9.93602559040384e-31,9.93402639010396e-31,9.932027189804079e-31,9.9300279895042e-31,9.92802878920432e-31,9.926029588904439e-31,9.92403038860456e-31,9.92203118830468e-31,9.920031988004799e-31,9.918032787704919e-31,9.91603358740504e-31,9.914034387105158e-31,9.912035186805279e-31,9.910035986505398e-31,9.908036786205518e-31,9.906037585905639e-31,9.904038385605758e-31,9.902039185305878e-31,9.900039985005999e-31,9.898040784706118e-31,9.896041584406238e-31,9.894042384106359e-31,9.892043183806478e-31,9.890043983506598e-31,9.888044783206719e-31,9.886045582906837e-31,9.884046382606958e-31,9.882047182307079e-31,9.880047982007197e-31,9.878048781707318e-31,9.876049581407439e-31,9.874050381107557e-31,9.872051180807678e-31,9.870051980507798e-31,9.868052780207917e-31,9.866053579908038e-31,9.864054379608158e-31,9.862055179308277e-31,9.860055979008398e-31,9.858056778708518e-31,9.856057578408637e-31,9.854058378108758e-31,9.852059177808876e-31,9.850059977508997e-31,9.848060777209118e-31,9.846061576909236e-31,9.844062376609357e-31,9.842063176309477e-31,9.840063976009596e-31,9.838064775709717e-31,9.836065575409837e-31,9.834066375109956e-31,9.832067174810077e-31,9.830067974510197e-31,9.828068774210316e-31,9.826069573910437e-31,9.824070373610557e-31,9.822071173310676e-31,9.820071973010797e-31,9.818072772710917e-31,9.816073572411036e-31,9.814074372111156e-31,9.812075171811277e-31,9.810075971511396e-31,9.808076771211516e-31,9.806077570911637e-31,9.804078370611756e-31,9.802079170311876e-31,9.800079970011997e-31,9.798080769712116e-31,9.796081569412236e-31,9.794082369112355e-31,9.792083168812476e-31,9.790083968512596e-31,9.788084768212715e-31,9.786085567912835e-31,9.784086367612956e-31,9.782087167313075e-31,9.780087967013195e-31,9.778088766713316e-31,9.776089566413435e-31,9.774090366113555e-31,9.772091165813676e-31,9.770091965513795e-31,9.768092765213915e-31,9.766093564914036e-31,9.764094364614155e-31,9.762095164314275e-31,9.760095964014396e-31,9.758096763714515e-31,9.756097563414635e-31,9.754098363114756e-31,9.752099162814874e-31,9.750099962514995e-31,9.748100762215116e-31,9.746101561915234e-31,9.744102361615355e-31,9.742103161315475e-31,9.740103961015594e-31,9.738104760715715e-31,9.736105560415834e-31,9.734106360115954e-31,9.732107159816075e-31,9.730107959516194e-31,9.728108759216314e-31,9.726109558916435e-31,9.724110358616553e-31,9.722111158316674e-31,9.720111958016795e-31,9.718112757716913e-31,9.716113557417034e-31,9.714114357117154e-31,9.712115156817273e-31,9.710115956517394e-31,9.708116756217514e-31,9.706117555917633e-31,9.704118355617754e-31,9.702119155317874e-31,9.700119955017993e-31,9.698120754718114e-31,9.696121554418234e-31,9.694122354118353e-31,9.692123153818474e-31,9.690123953518594e-31,9.688124753218713e-31,9.686125552918833e-31,9.684126352618954e-31,9.682127152319073e-31,9.680127952019193e-31,9.678128751719314e-31,9.676129551419433e-31,9.674130351119553e-31,9.672131150819672e-31,9.670131950519793e-31,9.668132750219913e-31,9.666133549920032e-31,9.664134349620153e-31,9.662135149320273e-31,9.660135949020392e-31,9.658136748720513e-31,9.656137548420633e-31,9.654138348120752e-31,9.652139147820872e-31,9.650139947520993e-31,9.648140747221112e-31,9.646141546921232e-31,9.644142346621353e-31,9.642143146321472e-31,9.640143946021592e-31,9.638144745721713e-31,9.636145545421832e-31,9.634146345121952e-31,9.632147144822073e-31,9.630147944522192e-31,9.628148744222312e-31,9.626149543922433e-31,9.624150343622551e-31,9.622151143322672e-31,9.620151943022793e-31,9.618152742722911e-31,9.616153542423032e-31,9.61415434212315e-31,9.612155141823271e-31,9.610155941523392e-31,9.60815674122351e-31,9.606157540923631e-31,9.604158340623752e-31,9.60215914032387e-31,9.600159940023991e-31,9.598160739724112e-31,9.59616153942423e-31,9.594162339124351e-31,9.592163138824472e-31,9.59016393852459e-31,9.588164738224711e-31,9.586165537924831e-31,9.58416633762495e-31,9.58216713732507e-31,9.580167937025191e-31,9.57816873672531e-31,9.57616953642543e-31,9.574170336125551e-31,9.57217113582567e-31,9.57017193552579e-31,9.568172735225911e-31,9.56617353492603e-31,9.56417433462615e-31,9.562175134326271e-31,9.56017593402639e-31,9.55817673372651e-31,9.55617753342663e-31,9.55417833312675e-31,9.55217913282687e-31,9.55017993252699e-31,9.54818073222711e-31,9.54618153192723e-31,9.54418233162735e-31,9.54218313132747e-31,9.54018393102759e-31,9.538184730727709e-31,9.53618553042783e-31,9.53418633012795e-31,9.532187129828069e-31,9.53018792952819e-31,9.52818872922831e-31,9.526189528928429e-31,9.52419032862855e-31,9.52219112832867e-31,9.520191928028789e-31,9.51819272772891e-31,9.51619352742903e-31,9.514194327129149e-31,9.51219512682927e-31,9.51019592652939e-31,9.508196726229509e-31,9.50619752592963e-31,9.50419832562975e-31,9.502199125329869e-31,9.500199925029989e-31,9.498200724730108e-31,9.496201524430228e-31,9.494202324130349e-31,9.492203123830468e-31,9.490203923530588e-31,9.488204723230709e-31,9.486205522930828e-31,9.484206322630948e-31,9.482207122331069e-31,9.480207922031188e-31,9.478208721731308e-31,9.476209521431429e-31,9.474210321131548e-31,9.472211120831668e-31,9.470211920531789e-31,9.468212720231907e-31,9.466213519932028e-31,9.464214319632149e-31,9.462215119332267e-31,9.460215919032388e-31,9.458216718732509e-31,9.456217518432627e-31,9.454218318132748e-31,9.452219117832868e-31,9.450219917532987e-31,9.448220717233108e-31,9.446221516933228e-31,9.444222316633347e-31,9.442223116333468e-31,9.440223916033587e-31,9.438224715733707e-31,9.436225515433828e-31,9.434226315133946e-31,9.432227114834067e-31,9.430227914534188e-31,9.428228714234306e-31,9.426229513934427e-31,9.424230313634547e-31,9.422231113334666e-31,9.420231913034787e-31,9.418232712734907e-31,9.416233512435026e-31,9.414234312135147e-31,9.412235111835267e-31,9.410235911535386e-31,9.408236711235507e-31,9.406237510935627e-31,9.404238310635746e-31,9.402239110335867e-31,9.400239910035987e-31,9.398240709736106e-31,9.396241509436226e-31,9.394242309136347e-31,9.392243108836466e-31,9.390243908536586e-31,9.388244708236707e-31,9.386245507936826e-31,9.384246307636946e-31,9.382247107337065e-31,9.380247907037186e-31,9.378248706737306e-31,9.376249506437425e-31,9.374250306137546e-31,9.372251105837666e-31,9.370251905537785e-31,9.368252705237905e-31,9.366253504938026e-31,9.364254304638145e-31,9.362255104338265e-31,9.360255904038386e-31,9.358256703738505e-31,9.356257503438625e-31,9.354258303138746e-31,9.352259102838865e-31,9.350259902538985e-31,9.348260702239106e-31,9.346261501939225e-31,9.344262301639345e-31,9.342263101339466e-31,9.340263901039585e-31,9.338264700739705e-31,9.336265500439826e-31,9.334266300139944e-31,9.332267099840065e-31,9.330267899540186e-31,9.328268699240304e-31,9.326269498940425e-31,9.324270298640544e-31,9.322271098340664e-31,9.320271898040785e-31,9.318272697740904e-31,9.316273497441024e-31,9.314274297141145e-31,9.312275096841264e-31,9.310275896541384e-31,9.308276696241505e-31,9.306277495941623e-31,9.304278295641744e-31,9.302279095341865e-31,9.300279895041983e-31,9.298280694742104e-31,9.296281494442224e-31,9.294282294142343e-31,9.292283093842464e-31,9.290283893542584e-31,9.288284693242703e-31,9.286285492942824e-31,9.284286292642944e-31,9.282287092343063e-31,9.280287892043184e-31,9.278288691743304e-31,9.276289491443423e-31,9.274290291143544e-31,9.272291090843664e-31,9.270291890543783e-31,9.268292690243904e-31,9.266293489944022e-31,9.264294289644143e-31,9.262295089344263e-31,9.260295889044382e-31,9.258296688744503e-31,9.256297488444623e-31,9.254298288144742e-31,9.252299087844863e-31,9.250299887544983e-31,9.248300687245102e-31,9.246301486945223e-31,9.244302286645343e-31,9.242303086345462e-31,9.240303886045583e-31,9.238304685745703e-31,9.236305485445822e-31,9.234306285145942e-31,9.232307084846063e-31,9.230307884546182e-31,9.228308684246302e-31,9.226309483946423e-31,9.224310283646542e-31,9.222311083346662e-31,9.220311883046783e-31,9.218312682746902e-31,9.216313482447022e-31,9.214314282147143e-31,9.212315081847262e-31,9.210315881547382e-31,9.208316681247501e-31,9.206317480947621e-31,9.204318280647742e-31,9.20231908034786e-31,9.200319880047981e-31,9.198320679748102e-31,9.19632147944822e-31,9.194322279148341e-31,9.192323078848462e-31,9.19032387854858e-31,9.188324678248701e-31,9.186325477948822e-31,9.18432627764894e-31,9.182327077349061e-31,9.180327877049182e-31,9.1783286767493e-31,9.176329476449421e-31,9.174330276149542e-31,9.17233107584966e-31,9.170331875549781e-31,9.168332675249902e-31,9.16633347495002e-31,9.16433427465014e-31,9.162335074350261e-31,9.16033587405038e-31,9.1583366737505e-31,9.156337473450621e-31,9.15433827315074e-31,9.15233907285086e-31,9.15033987255098e-31,9.1483406722511e-31,9.14634147195122e-31,9.14434227165134e-31,9.14234307135146e-31,9.14034387105158e-31,9.1383446707517e-31,9.13634547045182e-31,9.13434627015194e-31,9.13234706985206e-31,9.13034786955218e-31,9.1283486692523e-31,9.12634946895242e-31,9.12435026865254e-31,9.12235106835266e-31,9.120351868052779e-31,9.1183526677529e-31,9.11635346745302e-31,9.114354267153139e-31,9.11235506685326e-31,9.11035586655338e-31,9.108356666253499e-31,9.10635746595362e-31,9.10435826565374e-31,9.102359065353859e-31,9.10035986505398e-31,9.0983606647541e-31,9.096361464454219e-31,9.09436226415434e-31,9.092363063854458e-31,9.090363863554579e-31,9.0883646632547e-31,9.086365462954818e-31,9.084366262654939e-31,9.08236706235506e-31,9.080367862055178e-31,9.078368661755298e-31,9.076369461455419e-31,9.074370261155538e-31,9.072371060855658e-31,9.070371860555779e-31,9.068372660255898e-31,9.066373459956018e-31,9.064374259656139e-31,9.062375059356258e-31,9.060375859056378e-31,9.058376658756499e-31,9.056377458456618e-31,9.054378258156738e-31,9.052379057856859e-31,9.050379857556978e-31,9.048380657257098e-31,9.046381456957219e-31,9.044382256657337e-31,9.042383056357458e-31,9.040383856057579e-31,9.038384655757697e-31,9.036385455457818e-31,9.034386255157938e-31,9.032387054858057e-31,9.030387854558178e-31,9.028388654258297e-31,9.026389453958417e-31,9.024390253658538e-31,9.022391053358657e-31,9.020391853058777e-31,9.018392652758898e-31,9.016393452459016e-31,9.014394252159137e-31,9.012395051859258e-31,9.010395851559376e-31,9.008396651259497e-31,9.006397450959617e-31,9.004398250659736e-31,9.002399050359857e-31,9.000399850059977e-31,8.998400649760096e-31,8.996401449460217e-31,8.994402249160337e-31,8.992403048860456e-31,8.990403848560577e-31,8.988404648260697e-31,8.986405447960816e-31,8.984406247660937e-31,8.982407047361057e-31,8.980407847061176e-31,8.978408646761296e-31,8.976409446461417e-31,8.974410246161536e-31,8.972411045861656e-31,8.970411845561775e-31,8.968412645261896e-31,8.966413444962016e-31,8.964414244662135e-31,8.962415044362256e-31,8.960415844062376e-31,8.958416643762495e-31,8.956417443462616e-31,8.954418243162736e-31,8.952419042862855e-31,8.950419842562976e-31,8.948420642263096e-31,8.946421441963215e-31,8.944422241663335e-31,8.942423041363456e-31,8.940423841063575e-31,8.938424640763695e-31,8.936425440463816e-31,8.934426240163935e-31,8.932427039864055e-31,8.930427839564176e-31,8.928428639264295e-31,8.926429438964415e-31,8.924430238664536e-31,8.922431038364655e-31,8.920431838064775e-31,8.918432637764896e-31,8.916433437465014e-31,8.914434237165135e-31,8.912435036865254e-31,8.910435836565374e-31,8.908436636265495e-31,8.906437435965614e-31,8.904438235665734e-31,8.902439035365855e-31,8.900439835065974e-31,8.898440634766094e-31,8.896441434466215e-31,8.894442234166334e-31,8.892443033866454e-31,8.890443833566575e-31,8.888444633266693e-31,8.886445432966814e-31,8.884446232666935e-31,8.882447032367053e-31,8.880447832067174e-31,8.878448631767295e-31,8.876449431467413e-31,8.874450231167534e-31,8.872451030867654e-31,8.870451830567773e-31,8.868452630267894e-31,8.866453429968014e-31,8.864454229668133e-31,8.862455029368254e-31,8.860455829068374e-31,8.858456628768493e-31,8.856457428468614e-31,8.854458228168732e-31,8.852459027868853e-31,8.850459827568974e-31,8.848460627269092e-31,8.846461426969213e-31,8.844462226669333e-31,8.842463026369452e-31,8.840463826069573e-31,8.838464625769693e-31,8.836465425469812e-31,8.834466225169933e-31,8.832467024870053e-31,8.830467824570172e-31,8.828468624270293e-31,8.826469423970413e-31,8.824470223670532e-31,8.822471023370653e-31,8.820471823070773e-31,8.818472622770892e-31,8.816473422471012e-31,8.814474222171133e-31,8.812475021871252e-31,8.810475821571372e-31,8.808476621271493e-31,8.806477420971612e-31,8.804478220671732e-31,8.802479020371853e-31,8.800479820071972e-31,8.798480619772092e-31,8.796481419472211e-31,8.794482219172332e-31,8.792483018872452e-31,8.790483818572571e-31,8.788484618272691e-31,8.786485417972812e-31,8.78448621767293e-31,8.782487017373051e-31,8.780487817073172e-31,8.77848861677329e-31,8.776489416473411e-31,8.774490216173532e-31,8.77249101587365e-31,8.770491815573771e-31,8.768492615273892e-31,8.76649341497401e-31,8.764494214674131e-31,8.762495014374252e-31,8.76049581407437e-31,8.758496613774491e-31,8.756497413474612e-31,8.75449821317473e-31,8.752499012874851e-31,8.750499812574972e-31,8.74850061227509e-31,8.746501411975211e-31,8.744502211675331e-31,8.74250301137545e-31,8.74050381107557e-31,8.73850461077569e-31,8.73650541047581e-31,8.73450621017593e-31,8.73250700987605e-31,8.73050780957617e-31,8.72850860927629e-31,8.72650940897641e-31,8.72451020867653e-31,8.72251100837665e-31,8.72051180807677e-31,8.71851260777689e-31,8.71651340747701e-31,8.71451420717713e-31,8.71251500687725e-31,8.71051580657737e-31,8.70851660627749e-31,8.70651740597761e-31,8.70451820567773e-31,8.702519005377849e-31,8.70051980507797e-31,8.69852060477809e-31,8.696521404478209e-31,8.69452220417833e-31,8.69252300387845e-31,8.690523803578569e-31,8.68852460327869e-31,8.68652540297881e-31,8.684526202678929e-31,8.68252700237905e-31,8.680527802079168e-31,8.678528601779289e-31,8.67652940147941e-31,8.674530201179528e-31,8.672531000879649e-31,8.67053180057977e-31,8.668532600279888e-31,8.666533399980009e-31,8.66453419968013e-31,8.662534999380248e-31,8.660535799080369e-31,8.658536598780489e-31,8.656537398480608e-31,8.654538198180728e-31,8.652538997880849e-31,8.650539797580968e-31,8.648540597281088e-31,8.646541396981209e-31,8.644542196681328e-31,8.642542996381448e-31,8.640543796081569e-31,8.638544595781688e-31,8.636545395481808e-31,8.634546195181929e-31,8.632546994882048e-31,8.630547794582168e-31,8.628548594282289e-31,8.626549393982407e-31,8.624550193682528e-31,8.622550993382647e-31,8.620551793082767e-31,8.618552592782888e-31,8.616553392483007e-31,8.614554192183127e-31,8.612554991883248e-31,8.610555791583367e-31,8.608556591283487e-31,8.606557390983608e-31,8.604558190683727e-31,8.602558990383847e-31,8.600559790083968e-31,8.598560589784086e-31,8.596561389484207e-31,8.594562189184328e-31,8.592562988884446e-31,8.590563788584567e-31,8.588564588284687e-31,8.586565387984806e-31,8.584566187684927e-31,8.582566987385047e-31,8.580567787085166e-31,8.578568586785287e-31,8.576569386485407e-31,8.574570186185526e-31,8.572570985885647e-31,8.570571785585767e-31,8.568572585285886e-31,8.566573384986007e-31,8.564574184686125e-31,8.562574984386246e-31,8.560575784086367e-31,8.558576583786485e-31,8.556577383486606e-31,8.554578183186726e-31,8.552578982886845e-31,8.550579782586966e-31,8.548580582287086e-31,8.546581381987205e-31,8.544582181687326e-31,8.542582981387446e-31,8.540583781087565e-31,8.538584580787686e-31,8.536585380487806e-31,8.534586180187925e-31,8.532586979888046e-31,8.530587779588166e-31,8.528588579288285e-31,8.526589378988405e-31,8.524590178688526e-31,8.522590978388645e-31,8.520591778088765e-31,8.518592577788886e-31,8.516593377489005e-31,8.514594177189125e-31,8.512594976889246e-31,8.510595776589365e-31,8.508596576289485e-31,8.506597375989604e-31,8.504598175689725e-31,8.502598975389845e-31,8.500599775089964e-31,8.498600574790084e-31,8.496601374490205e-31,8.494602174190324e-31,8.492602973890444e-31,8.490603773590565e-31,8.488604573290684e-31,8.486605372990804e-31,8.484606172690925e-31,8.482606972391044e-31,8.480607772091164e-31,8.478608571791285e-31,8.476609371491404e-31,8.474610171191524e-31,8.472610970891645e-31,8.470611770591763e-31,8.468612570291884e-31,8.466613369992005e-31,8.464614169692123e-31,8.462614969392244e-31,8.460615769092365e-31,8.458616568792483e-31,8.456617368492604e-31,8.454618168192724e-31,8.452618967892843e-31,8.450619767592964e-31,8.448620567293083e-31,8.446621366993203e-31,8.444622166693324e-31,8.442622966393443e-31,8.440623766093563e-31,8.438624565793684e-31,8.436625365493802e-31,8.434626165193923e-31,8.432626964894044e-31,8.430627764594162e-31,8.428628564294283e-31,8.426629363994403e-31,8.424630163694522e-31,8.422630963394643e-31,8.420631763094763e-31,8.418632562794882e-31,8.416633362495003e-31,8.414634162195123e-31,8.412634961895242e-31,8.410635761595363e-31,8.408636561295483e-31,8.406637360995602e-31,8.404638160695723e-31,8.402638960395843e-31,8.400639760095962e-31,8.398640559796082e-31,8.396641359496203e-31,8.394642159196322e-31,8.392642958896442e-31,8.390643758596563e-31,8.388644558296682e-31,8.386645357996802e-31,8.384646157696921e-31,8.382646957397042e-31,8.380647757097162e-31,8.378648556797281e-31,8.376649356497402e-31,8.374650156197522e-31,8.372650955897641e-31,8.370651755597762e-31,8.368652555297882e-31,8.366653354998e-31,8.364654154698121e-31,8.362654954398242e-31,8.36065575409836e-31,8.358656553798481e-31,8.356657353498602e-31,8.35465815319872e-31,8.352658952898841e-31,8.350659752598962e-31,8.34866055229908e-31,8.346661351999201e-31,8.344662151699322e-31,8.34266295139944e-31,8.340663751099561e-31,8.338664550799682e-31,8.3366653504998e-31,8.334666150199921e-31,8.332666949900042e-31,8.33066774960016e-31,8.328668549300281e-31,8.3266693490004e-31,8.32467014870052e-31,8.32267094840064e-31,8.32067174810076e-31,8.31867254780088e-31,8.316673347501e-31,8.31467414720112e-31,8.31267494690124e-31,8.31067574660136e-31,8.30867654630148e-31,8.3066773460016e-31,8.30467814570172e-31,8.30267894540184e-31,8.30067974510196e-31,8.29868054480208e-31,8.2966813445022e-31,8.29468214420232e-31,8.29268294390244e-31,8.29068374360256e-31,8.28868454330268e-31,8.2866853430028e-31,8.284686142702919e-31,8.28268694240304e-31,8.28068774210316e-31,8.278688541803279e-31,8.2766893415034e-31,8.27469014120352e-31,8.272690940903639e-31,8.27069174060376e-31,8.268692540303878e-31,8.266693340003999e-31,8.26469413970412e-31,8.262694939404238e-31,8.260695739104359e-31,8.25869653880448e-31,8.256697338504598e-31,8.254698138204719e-31,8.25269893790484e-31,8.250699737604958e-31,8.248700537305079e-31,8.2467013370052e-31,8.244702136705318e-31,8.242702936405439e-31,8.240703736105559e-31,8.238704535805678e-31,8.236705335505798e-31,8.234706135205919e-31,8.232706934906038e-31,8.230707734606158e-31,8.228708534306279e-31,8.226709334006398e-31,8.224710133706518e-31,8.222710933406639e-31,8.220711733106758e-31,8.218712532806878e-31,8.216713332506999e-31,8.214714132207118e-31,8.212714931907238e-31,8.210715731607357e-31,8.208716531307477e-31,8.206717331007598e-31,8.204718130707717e-31,8.202718930407837e-31,8.200719730107958e-31,8.198720529808077e-31,8.196721329508197e-31,8.194722129208318e-31,8.192722928908437e-31,8.190723728608557e-31,8.188724528308678e-31,8.186725328008797e-31,8.184726127708917e-31,8.182726927409038e-31,8.180727727109156e-31,8.178728526809277e-31,8.176729326509398e-31,8.174730126209516e-31,8.172730925909637e-31,8.170731725609758e-31,8.168732525309876e-31,8.166733325009997e-31,8.164734124710117e-31,8.162734924410236e-31,8.160735724110357e-31,8.158736523810477e-31,8.156737323510596e-31,8.154738123210717e-31,8.152738922910836e-31,8.150739722610956e-31,8.148740522311077e-31,8.146741322011195e-31,8.144742121711316e-31,8.142742921411437e-31,8.140743721111555e-31,8.138744520811676e-31,8.136745320511796e-31,8.134746120211915e-31,8.132746919912036e-31,8.130747719612156e-31,8.128748519312275e-31,8.126749319012396e-31,8.124750118712516e-31,8.122750918412635e-31,8.120751718112756e-31,8.118752517812876e-31,8.116753317512995e-31,8.114754117213116e-31,8.112754916913236e-31,8.110755716613355e-31,8.108756516313475e-31,8.106757316013596e-31,8.104758115713715e-31,8.102758915413835e-31,8.100759715113956e-31,8.098760514814075e-31,8.096761314514195e-31,8.094762114214314e-31,8.092762913914435e-31,8.090763713614555e-31,8.088764513314674e-31,8.086765313014795e-31,8.084766112714915e-31,8.082766912415034e-31,8.080767712115154e-31,8.078768511815275e-31,8.076769311515394e-31,8.074770111215514e-31,8.072770910915635e-31,8.070771710615754e-31,8.068772510315874e-31,8.066773310015995e-31,8.064774109716114e-31,8.062774909416234e-31,8.060775709116355e-31,8.058776508816474e-31,8.056777308516594e-31,8.054778108216715e-31,8.052778907916834e-31,8.050779707616954e-31,8.048780507317075e-31,8.046781307017193e-31,8.044782106717314e-31,8.042782906417435e-31,8.040783706117553e-31,8.038784505817674e-31,8.036785305517793e-31,8.034786105217913e-31,8.032786904918034e-31,8.030787704618153e-31,8.028788504318273e-31,8.026789304018394e-31,8.024790103718513e-31,8.022790903418633e-31,8.020791703118754e-31,8.018792502818872e-31,8.016793302518993e-31,8.014794102219114e-31,8.012794901919232e-31,8.010795701619353e-31,8.008796501319473e-31,8.006797301019592e-31,8.004798100719713e-31,8.002798900419833e-31,8.000799700119952e-31,7.998800499820073e-31,7.996801299520193e-31,7.994802099220312e-31,7.992802898920433e-31,7.990803698620553e-31,7.988804498320672e-31,7.986805298020793e-31,7.984806097720913e-31,7.982806897421032e-31,7.980807697121152e-31,7.978808496821271e-31,7.976809296521392e-31,7.974810096221512e-31,7.972810895921631e-31,7.970811695621752e-31,7.968812495321872e-31,7.966813295021991e-31,7.964814094722112e-31,7.962814894422232e-31,7.960815694122351e-31,7.958816493822472e-31,7.956817293522592e-31,7.954818093222711e-31,7.952818892922832e-31,7.950819692622952e-31,7.948820492323071e-31,7.946821292023191e-31,7.944822091723312e-31,7.94282289142343e-31,7.940823691123551e-31,7.938824490823672e-31,7.93682529052379e-31,7.934826090223911e-31,7.932826889924032e-31,7.93082768962415e-31,7.928828489324271e-31,7.926829289024392e-31,7.92483008872451e-31,7.922830888424631e-31,7.92083168812475e-31,7.91883248782487e-31,7.916833287524991e-31,7.91483408722511e-31,7.91283488692523e-31,7.910835686625351e-31,7.90883648632547e-31,7.90683728602559e-31,7.90483808572571e-31,7.90283888542583e-31,7.90083968512595e-31,7.89884048482607e-31,7.89684128452619e-31,7.89484208422631e-31,7.89284288392643e-31,7.89084368362655e-31,7.88884448332667e-31,7.88684528302679e-31,7.88484608272691e-31,7.88284688242703e-31,7.88084768212715e-31,7.87884848182727e-31,7.87684928152739e-31,7.8748500812275095e-31,7.872850880927629e-31,7.87085168062775e-31,7.8688524803278695e-31,7.866853280027989e-31,7.86485407972811e-31,7.862854879428229e-31,7.860855679128349e-31,7.85885647882847e-31,7.856857278528589e-31,7.854858078228709e-31,7.8528588779288295e-31,7.850859677628949e-31,7.848860477329069e-31,7.846861277029189e-31,7.844862076729309e-31,7.842862876429429e-31,7.8408636761295485e-31,7.838864475829669e-31,7.836865275529789e-31,7.834866075229908e-31,7.832866874930029e-31,7.830867674630149e-31,7.828868474330268e-31,7.826869274030389e-31,7.8248700737305085e-31,7.822870873430628e-31,7.820871673130749e-31,7.8188724728308685e-31,7.816873272530988e-31,7.814874072231108e-31,7.812874871931228e-31,7.810875671631348e-31,7.808876471331468e-31,7.806877271031588e-31,7.804878070731708e-31,7.802878870431828e-31,7.800879670131948e-31,7.798880469832068e-31,7.796881269532188e-31,7.794882069232308e-31,7.792882868932428e-31,7.7908836686325475e-31,7.788884468332667e-31,7.786885268032788e-31,7.784886067732907e-31,7.782886867433027e-31,7.780887667133148e-31,7.778888466833267e-31,7.776889266533387e-31,7.7748900662335075e-31,7.772890865933627e-31,7.770891665633747e-31,7.7688924653338675e-31,7.766893265033987e-31,7.764894064734107e-31,7.762894864434227e-31,7.760895664134347e-31,7.758896463834467e-31,7.756897263534586e-31,7.754898063234707e-31,7.752898862934827e-31,7.750899662634946e-31,7.748900462335067e-31,7.746901262035187e-31,7.744902061735306e-31,7.742902861435427e-31,7.7409036611355465e-31,7.738904460835666e-31,7.736905260535787e-31,7.734906060235906e-31,7.732906859936026e-31,7.730907659636146e-31,7.728908459336266e-31,7.726909259036386e-31,7.724910058736506e-31,7.722910858436626e-31,7.720911658136746e-31,7.718912457836866e-31,7.716913257536986e-31,7.714914057237106e-31,7.7129148569372255e-31,7.710915656637346e-31,7.708916456337466e-31,7.706917256037585e-31,7.704918055737706e-31,7.702918855437826e-31,7.700919655137945e-31,7.698920454838065e-31,7.696921254538186e-31,7.694922054238305e-31,7.692922853938425e-31,7.6909236536385455e-31,7.688924453338665e-31,7.686925253038785e-31,7.684926052738905e-31,7.682926852439025e-31,7.680927652139145e-31,7.678928451839265e-31,7.676929251539385e-31,7.674930051239505e-31,7.672930850939624e-31,7.670931650639745e-31,7.668932450339865e-31,7.666933250039984e-31,7.664934049740105e-31,7.6629348494402245e-31,7.660935649140344e-31,7.658936448840465e-31,7.656937248540584e-31,7.654938048240704e-31,7.652938847940825e-31,7.650939647640944e-31,7.648940447341064e-31,7.646941247041185e-31,7.644942046741304e-31,7.642942846441424e-31,7.640943646141544e-31,7.638944445841664e-31,7.636945245541784e-31,7.6349460452419035e-31,7.632946844942024e-31,7.630947644642144e-31,7.6289484443422634e-31,7.626949244042384e-31,7.624950043742504e-31,7.622950843442623e-31,7.620951643142744e-31,7.618952442842864e-31,7.616953242542983e-31,7.614954042243103e-31,7.6129548419432235e-31,7.610955641643343e-31,7.608956441343463e-31,7.606957241043583e-31,7.604958040743703e-31,7.602958840443823e-31,7.600959640143943e-31,7.598960439844063e-31,7.596961239544183e-31,7.594962039244303e-31,7.592962838944423e-31,7.590963638644543e-31,7.588964438344663e-31,7.586965238044783e-31,7.5849660377449025e-31,7.582966837445022e-31,7.580967637145143e-31,7.5789684368452625e-31,7.576969236545382e-31,7.574970036245503e-31,7.572970835945622e-31,7.570971635645742e-31,7.568972435345863e-31,7.566973235045982e-31,7.564974034746102e-31,7.5629748344462225e-31,7.560975634146342e-31,7.558976433846462e-31,7.556977233546582e-31,7.554978033246702e-31,7.552978832946822e-31,7.5509796326469415e-31,7.548980432347062e-31,7.546981232047182e-31,7.544982031747301e-31,7.542982831447422e-31,7.540983631147542e-31,7.538984430847661e-31,7.536985230547782e-31,7.5349860302479015e-31,7.532986829948021e-31,7.530987629648142e-31,7.5289884293482615e-31,7.526989229048381e-31,7.524990028748501e-31,7.522990828448621e-31,7.520991628148741e-31,7.518992427848861e-31,7.516993227548981e-31,7.514994027249101e-31,7.512994826949221e-31,7.510995626649341e-31,7.508996426349461e-31,7.5069972260495806e-31,7.504998025749701e-31,7.502998825449821e-31,7.5009996251499405e-31,7.499000424850061e-31,7.497001224550181e-31,7.4950020242503e-31,7.49300282395042e-31,7.491003623650541e-31,7.48900442335066e-31,7.48700522305078e-31,7.4850060227509005e-31,7.48300682245102e-31,7.48100762215114e-31,7.4790084218512605e-31,7.47700922155138e-31,7.4750100212515e-31,7.47301082095162e-31,7.47101162065174e-31,7.46901242035186e-31,7.467013220051979e-31,7.4650140197521e-31,7.46301481945222e-31,7.461015619152339e-31,7.45901641885246e-31,7.45701721855258e-31,7.455018018252699e-31,7.45301881795282e-31,7.4510196176529395e-31,7.449020417353059e-31,7.44702121705318e-31,7.445022016753299e-31,7.443022816453419e-31,7.44102361615354e-31,7.439024415853659e-31,7.437025215553779e-31,7.435026015253899e-31,7.433026814954019e-31,7.431027614654139e-31,7.429028414354259e-31,7.427029214054379e-31,7.425030013754499e-31,7.4230308134546185e-31,7.421031613154739e-31,7.419032412854859e-31,7.417033212554978e-31,7.415034012255099e-31,7.413034811955219e-31,7.411035611655338e-31,7.409036411355458e-31,7.407037211055579e-31,7.405038010755698e-31,7.403038810455818e-31,7.4010396101559385e-31,7.399040409856058e-31,7.397041209556178e-31,7.395042009256298e-31,7.393042808956418e-31,7.391043608656538e-31,7.389044408356658e-31,7.387045208056778e-31,7.385046007756898e-31,7.383046807457018e-31,7.381047607157138e-31,7.379048406857258e-31,7.377049206557377e-31,7.375050006257498e-31,7.3730508059576175e-31,7.371051605657737e-31,7.369052405357858e-31,7.367053205057977e-31,7.365054004758097e-31,7.363054804458218e-31,7.361055604158337e-31,7.359056403858457e-31,7.357057203558578e-31,7.355058003258697e-31,7.353058802958817e-31,7.351059602658937e-31,7.349060402359057e-31,7.347061202059177e-31,7.3450620017592965e-31,7.343062801459417e-31,7.341063601159537e-31,7.3390644008596564e-31,7.337065200559777e-31,7.335066000259897e-31,7.333066799960016e-31,7.331067599660137e-31,7.329068399360257e-31,7.327069199060376e-31,7.325069998760497e-31,7.3230707984606165e-31,7.321071598160736e-31,7.319072397860856e-31,7.317073197560976e-31,7.315073997261096e-31,7.313074796961216e-31,7.311075596661336e-31,7.309076396361456e-31,7.307077196061576e-31,7.305077995761696e-31,7.303078795461816e-31,7.301079595161936e-31,7.299080394862056e-31,7.297081194562176e-31,7.2950819942622955e-31,7.293082793962415e-31,7.291083593662536e-31,7.2890843933626554e-31,7.287085193062775e-31,7.285085992762896e-31,7.283086792463015e-31,7.281087592163135e-31,7.279088391863256e-31,7.277089191563375e-31,7.275089991263495e-31,7.2730907909636155e-31,7.271091590663735e-31,7.269092390363855e-31,7.267093190063975e-31,7.265093989764095e-31,7.263094789464215e-31,7.2610955891643345e-31,7.259096388864455e-31,7.257097188564575e-31,7.255097988264694e-31,7.253098787964815e-31,7.251099587664935e-31,7.249100387365054e-31,7.247101187065175e-31,7.2451019867652945e-31,7.243102786465414e-31,7.241103586165535e-31,7.2391043858656544e-31,7.237105185565774e-31,7.235105985265895e-31,7.233106784966014e-31,7.231107584666134e-31,7.229108384366254e-31,7.227109184066374e-31,7.225109983766494e-31,7.223110783466614e-31,7.221111583166734e-31,7.219112382866854e-31,7.2171131825669736e-31,7.215113982267094e-31,7.213114781967214e-31,7.2111155816673335e-31,7.209116381367454e-31,7.207117181067574e-31,7.205117980767693e-31,7.203118780467813e-31,7.201119580167934e-31,7.199120379868053e-31,7.197121179568173e-31,7.1951219792682935e-31,7.193122778968413e-31,7.191123578668533e-31,7.1891243783686534e-31,7.187125178068773e-31,7.185125977768893e-31,7.183126777469013e-31,7.181127577169133e-31,7.179128376869253e-31,7.177129176569373e-31,7.175129976269493e-31,7.173130775969613e-31,7.171131575669732e-31,7.169132375369853e-31,7.1671331750699726e-31,7.165133974770092e-31,7.163134774470213e-31,7.1611355741703325e-31,7.159136373870452e-31,7.157137173570573e-31,7.155137973270692e-31,7.153138772970812e-31,7.151139572670933e-31,7.149140372371052e-31,7.147141172071172e-31,7.145141971771292e-31,7.143142771471412e-31,7.141143571171532e-31,7.139144370871652e-31,7.137145170571772e-31,7.135145970271892e-31,7.1331467699720115e-31,7.131147569672132e-31,7.129148369372252e-31,7.127149169072371e-31,7.125149968772492e-31,7.123150768472612e-31,7.121151568172731e-31,7.119152367872852e-31,7.1171531675729716e-31,7.115153967273091e-31,7.113154766973211e-31,7.1111555666733315e-31,7.109156366373451e-31,7.107157166073571e-31,7.105157965773691e-31,7.103158765473811e-31,7.101159565173931e-31,7.099160364874051e-31,7.097161164574171e-31,7.095161964274291e-31,7.093162763974411e-31,7.091163563674531e-31,7.089164363374651e-31,7.08716516307477e-31,7.085165962774891e-31,7.0831667624750105e-31,7.08116756217513e-31,7.079168361875251e-31,7.07716916157537e-31,7.07516996127549e-31,7.073170760975611e-31,7.07117156067573e-31,7.06917236037585e-31,7.0671731600759706e-31,7.06517395977609e-31,7.06317475947621e-31,7.0611755591763305e-31,7.05917635887645e-31,7.05717715857657e-31,7.0551779582766895e-31,7.05317875797681e-31,7.05117955767693e-31,7.049180357377049e-31,7.04718115707717e-31,7.04518195677729e-31,7.043182756477409e-31,7.04118355617753e-31,7.03918435587765e-31,7.037185155577769e-31,7.03518595527789e-31,7.0331867549780095e-31,7.031187554678129e-31,7.029188354378249e-31,7.027189154078369e-31,7.025189953778489e-31,7.023190753478609e-31,7.021191553178729e-31,7.019192352878849e-31,7.017193152578969e-31,7.015193952279089e-31,7.013194751979209e-31,7.011195551679329e-31,7.009196351379449e-31,7.007197151079569e-31,7.0051979507796885e-31,7.003198750479809e-31,7.001199550179929e-31,6.999200349880048e-31,6.997201149580168e-31,6.995201949280289e-31,6.993202748980408e-31,6.991203548680528e-31,6.989204348380649e-31,6.987205148080768e-31,6.985205947780888e-31,6.9832067474810085e-31,6.981207547181128e-31,6.979208346881248e-31,6.977209146581368e-31,6.975209946281488e-31,6.973210745981608e-31,6.9712115456817275e-31,6.969212345381848e-31,6.967213145081968e-31,6.965213944782087e-31,6.963214744482208e-31,6.961215544182328e-31,6.959216343882447e-31,6.957217143582568e-31,6.9552179432826875e-31,6.953218742982807e-31,6.951219542682928e-31,6.949220342383047e-31,6.947221142083167e-31,6.945221941783288e-31,6.943222741483407e-31,6.941223541183527e-31,6.939224340883647e-31,6.937225140583767e-31,6.935225940283887e-31,6.933226739984007e-31,6.931227539684127e-31,6.929228339384247e-31,6.9272291390843665e-31,6.925229938784487e-31,6.923230738484607e-31,6.9212315381847265e-31,6.919232337884847e-31,6.917233137584967e-31,6.915233937285086e-31,6.913234736985207e-31,6.911235536685327e-31,6.909236336385446e-31,6.907237136085566e-31,6.9052379357856865e-31,6.903238735485806e-31,6.901239535185926e-31,6.8992403348860464e-31,6.897241134586166e-31,6.895241934286286e-31,6.893242733986406e-31,6.891243533686526e-31,6.889244333386646e-31,6.887245133086766e-31,6.885245932786886e-31,6.883246732487006e-31,6.881247532187125e-31,6.879248331887246e-31,6.8772491315873655e-31,6.875249931287485e-31,6.873250730987606e-31,6.8712515306877255e-31,6.869252330387845e-31,6.867253130087966e-31,6.865253929788085e-31,6.863254729488205e-31,6.861255529188326e-31,6.859256328888445e-31,6.857257128588565e-31,6.8552579282886855e-31,6.853258727988805e-31,6.851259527688925e-31,6.849260327389045e-31,6.847261127089165e-31,6.845261926789285e-31,6.8432627264894045e-31,6.841263526189525e-31,6.839264325889645e-31,6.837265125589764e-31,6.835265925289885e-31,6.833266724990005e-31,6.831267524690124e-31,6.829268324390245e-31,6.8272691240903645e-31,6.825269923790484e-31,6.823270723490604e-31,6.8212715231907245e-31,6.819272322890844e-31,6.817273122590964e-31,6.815273922291084e-31,6.813274721991204e-31,6.811275521691324e-31,6.809276321391444e-31,6.807277121091564e-31,6.805277920791684e-31,6.803278720491804e-31,6.801279520191924e-31,6.799280319892044e-31,6.797281119592164e-31,6.795281919292284e-31,6.7932827189924035e-31,6.791283518692523e-31,6.789284318392644e-31,6.787285118092763e-31,6.785285917792883e-31,6.783286717493004e-31,6.781287517193123e-31,6.779288316893243e-31,6.7772891165933636e-31,6.775289916293483e-31,6.773290715993603e-31,6.7712915156937235e-31,6.769292315393843e-31,6.767293115093963e-31,6.7652939147940825e-31,6.763294714494203e-31,6.761295514194323e-31,6.759296313894442e-31,6.757297113594563e-31,6.755297913294683e-31,6.753298712994802e-31,6.751299512694923e-31,6.749300312395043e-31,6.747301112095162e-31,6.745301911795283e-31,6.7433027114954025e-31,6.741303511195522e-31,6.739304310895643e-31,6.737305110595762e-31,6.735305910295882e-31,6.733306709996002e-31,6.731307509696122e-31,6.729308309396242e-31,6.727309109096362e-31,6.725309908796482e-31,6.723310708496602e-31,6.721311508196722e-31,6.719312307896842e-31,6.717313107596962e-31,6.7153139072970815e-31,6.713314706997202e-31,6.711315506697322e-31,6.709316306397441e-31,6.707317106097561e-31,6.705317905797682e-31,6.703318705497801e-31,6.701319505197921e-31,6.699320304898042e-31,6.697321104598161e-31,6.695321904298281e-31,6.6933227039984015e-31,6.691323503698521e-31,6.689324303398641e-31,6.687325103098761e-31,6.685325902798881e-31,6.683326702499001e-31,6.681327502199121e-31,6.679328301899241e-31,6.677329101599361e-31,6.67532990129948e-31,6.673330700999601e-31,6.671331500699721e-31,6.66933230039984e-31,6.667333100099961e-31,6.6653338998000805e-31,6.6633346995002e-31,6.661335499200321e-31,6.65933629890044e-31,6.65733709860056e-31,6.655337898300681e-31,6.6533386980008e-31,6.65133949770092e-31,6.64934029740104e-31,6.64734109710116e-31,6.64534189680128e-31,6.6433426965014e-31,6.64134349620152e-31,6.63934429590164e-31,6.6373450956017595e-31,6.63534589530188e-31,6.633346695002e-31,6.6313474947021194e-31,6.62934829440224e-31,6.62734909410236e-31,6.625349893802479e-31,6.6233506935026e-31,6.62135149320272e-31,6.619352292902839e-31,6.617353092602959e-31,6.6153538923030795e-31,6.613354692003199e-31,6.611355491703319e-31,6.609356291403439e-31,6.607357091103559e-31,6.605357890803679e-31,6.603358690503799e-31,6.601359490203919e-31,6.599360289904039e-31,6.597361089604159e-31,6.595361889304279e-31,6.593362689004399e-31,6.591363488704519e-31,6.589364288404639e-31,6.5873650881047585e-31,6.585365887804878e-31,6.583366687504999e-31,6.5813674872051185e-31,6.579368286905238e-31,6.577369086605359e-31,6.575369886305478e-31,6.573370686005598e-31,6.571371485705719e-31,6.569372285405838e-31,6.567373085105958e-31,6.5653738848060785e-31,6.563374684506198e-31,6.561375484206318e-31,6.5593762839064376e-31,6.557377083606558e-31,6.555377883306678e-31,6.5533786830067975e-31,6.551379482706918e-31,6.549380282407038e-31,6.547381082107157e-31,6.545381881807278e-31,6.543382681507398e-31,6.541383481207517e-31,6.539384280907638e-31,6.5373850806077575e-31,6.535385880307877e-31,6.533386680007998e-31,6.5313874797081175e-31,6.529388279408237e-31,6.527389079108357e-31,6.525389878808477e-31,6.523390678508597e-31,6.521391478208717e-31,6.519392277908837e-31,6.517393077608957e-31,6.515393877309077e-31,6.513394677009197e-31,6.511395476709317e-31,6.5093962764094366e-31,6.507397076109557e-31,6.505397875809677e-31,6.5033986755097965e-31,6.501399475209916e-31,6.499400274910037e-31,6.497401074610156e-31,6.495401874310276e-31,6.493402674010397e-31,6.491403473710516e-31,6.489404273410636e-31,6.4874050731107565e-31,6.485405872810876e-31,6.483406672510996e-31,6.4814074722111165e-31,6.479408271911236e-31,6.477409071611356e-31,6.475409871311476e-31,6.473410671011596e-31,6.471411470711716e-31,6.469412270411835e-31,6.467413070111956e-31,6.465413869812076e-31,6.463414669512195e-31,6.461415469212316e-31,6.459416268912436e-31,6.457417068612555e-31,6.455417868312676e-31,6.4534186680127955e-31,6.451419467712915e-31,6.449420267413036e-31,6.447421067113155e-31,6.445421866813275e-31,6.443422666513395e-31,6.441423466213515e-31,6.439424265913635e-31,6.437425065613755e-31,6.435425865313875e-31,6.433426665013995e-31,6.431427464714115e-31,6.429428264414235e-31,6.427429064114355e-31,6.4254298638144745e-31,6.423430663514595e-31,6.421431463214715e-31,6.419432262914834e-31,6.417433062614955e-31,6.415433862315075e-31,6.413434662015194e-31,6.411435461715314e-31,6.409436261415435e-31,6.407437061115554e-31,6.405437860815674e-31,6.4034386605157945e-31,6.401439460215914e-31,6.399440259916034e-31,6.397441059616154e-31,6.395441859316274e-31,6.393442659016394e-31,6.391443458716514e-31,6.389444258416634e-31,6.387445058116754e-31,6.385445857816873e-31,6.383446657516994e-31,6.381447457217114e-31,6.379448256917233e-31,6.377449056617354e-31,6.3754498563174735e-31,6.373450656017593e-31,6.371451455717714e-31,6.369452255417833e-31,6.367453055117953e-31,6.365453854818074e-31,6.363454654518193e-31,6.361455454218313e-31,6.359456253918434e-31,6.357457053618553e-31,6.355457853318673e-31,6.353458653018793e-31,6.351459452718913e-31,6.349460252419033e-31,6.3474610521191525e-31,6.345461851819273e-31,6.343462651519393e-31,6.3414634512195124e-31,6.339464250919633e-31,6.337465050619753e-31,6.335465850319872e-31,6.333466650019993e-31,6.331467449720113e-31,6.329468249420232e-31,6.327469049120352e-31,6.3254698488204725e-31,6.323470648520592e-31,6.321471448220712e-31,6.319472247920832e-31,6.317473047620952e-31,6.315473847321072e-31,6.313474647021192e-31,6.311475446721312e-31,6.309476246421432e-31,6.307477046121552e-31,6.305477845821672e-31,6.303478645521792e-31,6.301479445221912e-31,6.299480244922032e-31,6.2974810446221515e-31,6.295481844322271e-31,6.293482644022392e-31,6.2914834437225114e-31,6.289484243422631e-31,6.287485043122752e-31,6.285485842822871e-31,6.283486642522991e-31,6.281487442223112e-31,6.279488241923231e-31,6.277489041623351e-31,6.2754898413234715e-31,6.273490641023591e-31,6.271491440723711e-31,6.269492240423831e-31,6.267493040123951e-31,6.265493839824071e-31,6.2634946395241905e-31,6.261495439224311e-31,6.259496238924431e-31,6.25749703862455e-31,6.255497838324671e-31,6.253498638024791e-31,6.25149943772491e-31,6.249500237425031e-31,6.2475010371251505e-31,6.24550183682527e-31,6.243502636525391e-31,6.2415034362255104e-31,6.23950423592563e-31,6.23750503562575e-31,6.23550583532587e-31,6.23350663502599e-31,6.23150743472611e-31,6.22950823442623e-31,6.22750903412635e-31,6.22550983382647e-31,6.22351063352659e-31,6.22151143322671e-31,6.2195122329268296e-31,6.21751303262695e-31,6.21551383232707e-31,6.2135146320271895e-31,6.21151543172731e-31,6.20951623142743e-31,6.207517031127549e-31,6.205517830827669e-31,6.20351863052779e-31,6.201519430227909e-31,6.199520229928029e-31,6.1975210296281495e-31,6.195521829328269e-31,6.193522629028389e-31,6.1915234287285094e-31,6.189524228428629e-31,6.187525028128749e-31,6.185525827828869e-31,6.183526627528989e-31,6.181527427229109e-31,6.179528226929228e-31,6.177529026629349e-31,6.175529826329469e-31,6.173530626029588e-31,6.171531425729709e-31,6.1695322254298286e-31,6.167533025129948e-31,6.165533824830069e-31,6.1635346245301885e-31,6.161535424230308e-31,6.159536223930429e-31,6.157537023630548e-31,6.155537823330668e-31,6.153538623030789e-31,6.151539422730908e-31,6.149540222431028e-31,6.147541022131148e-31,6.145541821831268e-31,6.143542621531388e-31,6.141543421231508e-31,6.139544220931628e-31,6.137545020631748e-31,6.1355458203318675e-31,6.133546620031988e-31,6.131547419732108e-31,6.129548219432227e-31,6.127549019132348e-31,6.125549818832468e-31,6.123550618532587e-31,6.121551418232707e-31,6.1195522179328276e-31,6.117553017632947e-31,6.115553817333067e-31,6.1135546170331875e-31,6.111555416733307e-31,6.109556216433427e-31,6.107557016133547e-31,6.105557815833667e-31,6.103558615533787e-31,6.101559415233907e-31,6.099560214934027e-31,6.097561014634147e-31,6.095561814334267e-31,6.093562614034387e-31,6.091563413734507e-31,6.089564213434626e-31,6.087565013134747e-31,6.0855658128348665e-31,6.083566612534986e-31,6.081567412235107e-31,6.079568211935226e-31,6.077569011635346e-31,6.075569811335467e-31,6.073570611035586e-31,6.071571410735706e-31,6.0695722104358266e-31,6.067573010135946e-31,6.065573809836066e-31,6.063574609536186e-31,6.061575409236306e-31,6.059576208936426e-31,6.0575770086365455e-31,6.055577808336666e-31,6.053578608036786e-31,6.051579407736905e-31,6.049580207437026e-31,6.047581007137146e-31,6.045581806837265e-31,6.043582606537386e-31,6.041583406237506e-31,6.039584205937625e-31,6.037585005637746e-31,6.0355858053378655e-31,6.033586605037985e-31,6.031587404738105e-31,6.029588204438225e-31,6.027589004138345e-31,6.025589803838465e-31,6.023590603538585e-31,6.021591403238705e-31,6.019592202938825e-31,6.017593002638945e-31,6.015593802339065e-31,6.013594602039185e-31,6.011595401739305e-31,6.009596201439425e-31,6.0075970011395445e-31,6.005597800839664e-31,6.003598600539785e-31,6.001599400239904e-31,5.999600199940024e-31,5.997600999640145e-31,5.995601799340264e-31,5.993602599040384e-31,5.991603398740505e-31,5.989604198440624e-31,5.987604998140744e-31,5.9856057978408645e-31,5.983606597540984e-31,5.981607397241104e-31,5.979608196941224e-31,5.977608996641344e-31,5.975609796341464e-31,5.9736105960415835e-31,5.971611395741704e-31,5.969612195441824e-31,5.967612995141943e-31,5.965613794842064e-31,5.963614594542184e-31,5.961615394242303e-31,5.959616193942424e-31,5.9576169936425435e-31,5.955617793342663e-31,5.953618593042784e-31,5.9516193927429034e-31,5.949620192443023e-31,5.947620992143144e-31,5.945621791843263e-31,5.943622591543383e-31,5.941623391243503e-31,5.939624190943623e-31,5.937624990643743e-31,5.935625790343863e-31,5.933626590043983e-31,5.931627389744103e-31,5.9296281894442225e-31,5.927628989144343e-31,5.925629788844463e-31,5.9236305885445825e-31,5.921631388244703e-31,5.919632187944823e-31,5.917632987644942e-31,5.915633787345062e-31,5.913634587045183e-31,5.911635386745302e-31,5.909636186445422e-31,5.9076369861455425e-31,5.905637785845662e-31,5.903638585545782e-31,5.9016393852459024e-31,5.899640184946022e-31,5.897640984646142e-31,5.895641784346262e-31,5.893642584046382e-31,5.891643383746502e-31,5.889644183446622e-31,5.887644983146742e-31,5.885645782846862e-31,5.883646582546981e-31,5.881647382247102e-31,5.8796481819472215e-31,5.877648981647341e-31,5.875649781347462e-31,5.8736505810475815e-31,5.871651380747701e-31,5.869652180447822e-31,5.867652980147941e-31,5.865653779848061e-31,5.863654579548182e-31,5.861655379248301e-31,5.859656178948421e-31,5.857656978648541e-31,5.855657778348661e-31,5.853658578048781e-31,5.851659377748901e-31,5.849660177449021e-31,5.847660977149141e-31,5.8456617768492605e-31,5.843662576549381e-31,5.841663376249501e-31,5.83966417594962e-31,5.837664975649741e-31,5.835665775349861e-31,5.83366657504998e-31,5.831667374750101e-31,5.8296681744502206e-31,5.82766897415034e-31,5.82566977385046e-31,5.8236705735505805e-31,5.8216713732507e-31,5.81967217295082e-31,5.81767297265094e-31,5.81567377235106e-31,5.81367457205118e-31,5.8116753717513e-31,5.80967617145142e-31,5.80767697115154e-31,5.80567777085166e-31,5.80367857055178e-31,5.8016793702519e-31,5.799680169952019e-31,5.79768096965214e-31,5.7956817693522595e-31,5.793682569052379e-31,5.7916833687525e-31,5.789684168452619e-31,5.787684968152739e-31,5.78568576785286e-31,5.783686567552979e-31,5.781687367253099e-31,5.7796881669532196e-31,5.777688966653339e-31,5.775689766353459e-31,5.7736905660535795e-31,5.771691365753699e-31,5.769692165453819e-31,5.7676929651539385e-31,5.765693764854059e-31,5.763694564554179e-31,5.761695364254298e-31,5.759696163954419e-31,5.757696963654539e-31,5.755697763354658e-31,5.753698563054779e-31,5.751699362754899e-31,5.749700162455018e-31,5.747700962155139e-31,5.7457017618552585e-31,5.743702561555378e-31,5.741703361255498e-31,5.739704160955618e-31,5.737704960655738e-31,5.735705760355858e-31,5.733706560055978e-31,5.731707359756098e-31,5.729708159456218e-31,5.727708959156338e-31,5.725709758856458e-31,5.723710558556578e-31,5.721711358256698e-31,5.719712157956818e-31,5.7177129576569375e-31,5.715713757357058e-31,5.713714557057178e-31,5.711715356757297e-31,5.709716156457417e-31,5.707716956157538e-31,5.705717755857657e-31,5.703718555557777e-31,5.701719355257898e-31,5.699720154958017e-31,5.697720954658137e-31,5.6957217543582575e-31,5.693722554058377e-31,5.691723353758497e-31,5.689724153458617e-31,5.687724953158737e-31,5.685725752858857e-31,5.6837265525589764e-31,5.681727352259097e-31,5.679728151959217e-31,5.677728951659336e-31,5.675729751359457e-31,5.673730551059577e-31,5.671731350759696e-31,5.669732150459817e-31,5.6677329501599365e-31,5.665733749860056e-31,5.663734549560177e-31,5.661735349260296e-31,5.659736148960416e-31,5.657736948660537e-31,5.655737748360656e-31,5.653738548060776e-31,5.651739347760896e-31,5.649740147461016e-31,5.647740947161136e-31,5.645741746861256e-31,5.643742546561376e-31,5.641743346261496e-31,5.6397441459616155e-31,5.637744945661736e-31,5.635745745361856e-31,5.6337465450619755e-31,5.631747344762096e-31,5.629748144462216e-31,5.627748944162335e-31,5.625749743862456e-31,5.623750543562576e-31,5.621751343262695e-31,5.619752142962815e-31,5.6177529426629355e-31,5.615753742363055e-31,5.613754542063175e-31,5.611755341763295e-31,5.609756141463415e-31,5.607756941163535e-31,5.605757740863655e-31,5.603758540563775e-31,5.601759340263895e-31,5.599760139964015e-31,5.597760939664135e-31,5.595761739364255e-31,5.593762539064374e-31,5.591763338764495e-31,5.5897641384646145e-31,5.587764938164734e-31,5.585765737864855e-31,5.5837665375649745e-31,5.581767337265094e-31,5.579768136965215e-31,5.577768936665334e-31,5.575769736365454e-31,5.573770536065575e-31,5.571771335765694e-31,5.569772135465814e-31,5.5677729351659345e-31,5.565773734866054e-31,5.563774534566174e-31,5.5617753342662936e-31,5.559776133966414e-31,5.557776933666534e-31,5.5557777333666535e-31,5.553778533066774e-31,5.551779332766894e-31,5.549780132467013e-31,5.547780932167134e-31,5.545781731867254e-31,5.543782531567373e-31,5.541783331267494e-31,5.5397841309676135e-31,5.537784930667733e-31,5.535785730367853e-31,5.5337865300679735e-31,5.531787329768093e-31,5.529788129468213e-31,5.527788929168333e-31,5.525789728868453e-31,5.523790528568573e-31,5.521791328268693e-31,5.519792127968813e-31,5.517792927668933e-31,5.515793727369053e-31,5.513794527069173e-31,5.511795326769293e-31,5.509796126469413e-31,5.507796926169533e-31,5.5057977258696525e-31,5.503798525569772e-31,5.501799325269893e-31,5.499800124970012e-31,5.497800924670132e-31,5.495801724370253e-31,5.493802524070372e-31,5.491803323770492e-31,5.4898041234706125e-31,5.487804923170732e-31,5.485805722870852e-31,5.4838065225709725e-31,5.481807322271092e-31,5.479808121971212e-31,5.4778089216713315e-31,5.475809721371452e-31,5.473810521071572e-31,5.471811320771691e-31,5.469812120471812e-31,5.467812920171932e-31,5.465813719872051e-31,5.463814519572172e-31,5.461815319272292e-31,5.459816118972411e-31,5.457816918672532e-31,5.4558177183726515e-31,5.453818518072771e-31,5.451819317772892e-31,5.449820117473011e-31,5.447820917173131e-31,5.445821716873251e-31,5.443822516573371e-31,5.441823316273491e-31,5.439824115973611e-31,5.437824915673731e-31,5.435825715373851e-31,5.433826515073971e-31,5.431827314774091e-31,5.429828114474211e-31,5.4278289141743305e-31,5.425829713874451e-31,5.423830513574571e-31,5.42183131327469e-31,5.41983211297481e-31,5.417832912674931e-31,5.41583371237505e-31,5.41383451207517e-31,5.411835311775291e-31,5.40983611147541e-31,5.40783691117553e-31,5.4058377108756505e-31,5.40383851057577e-31,5.40183931027589e-31,5.39984010997601e-31,5.39784090967613e-31,5.39584170937625e-31,5.39384250907637e-31,5.39184330877649e-31,5.38984410847661e-31,5.387844908176729e-31,5.38584570787685e-31,5.38384650757697e-31,5.381847307277089e-31,5.37984810697721e-31,5.3778489066773295e-31,5.375849706377449e-31,5.37385050607757e-31,5.371851305777689e-31,5.369852105477809e-31,5.36785290517793e-31,5.365853704878049e-31,5.363854504578169e-31,5.361855304278289e-31,5.359856103978409e-31,5.357856903678529e-31,5.355857703378649e-31,5.353858503078769e-31,5.351859302778889e-31,5.3498601024790085e-31,5.347860902179129e-31,5.345861701879249e-31,5.3438625015793684e-31,5.341863301279489e-31,5.339864100979609e-31,5.337864900679728e-31,5.335865700379849e-31,5.333866500079969e-31,5.331867299780088e-31,5.329868099480208e-31,5.3278688991803285e-31,5.325869698880448e-31,5.323870498580568e-31,5.321871298280688e-31,5.319872097980808e-31,5.317872897680928e-31,5.315873697381048e-31,5.313874497081168e-31,5.311875296781288e-31,5.309876096481408e-31,5.307876896181528e-31,5.305877695881648e-31,5.303878495581768e-31,5.301879295281888e-31,5.2998800949820075e-31,5.297880894682127e-31,5.295881694382248e-31,5.2938824940823674e-31,5.291883293782487e-31,5.289884093482608e-31,5.287884893182727e-31,5.285885692882847e-31,5.283886492582968e-31,5.281887292283087e-31,5.279888091983207e-31,5.2778888916833275e-31,5.275889691383447e-31,5.273890491083567e-31,5.2718912907836866e-31,5.269892090483807e-31,5.267892890183927e-31,5.2658936898840465e-31,5.263894489584167e-31,5.261895289284287e-31,5.259896088984406e-31,5.257896888684527e-31,5.255897688384647e-31,5.253898488084766e-31,5.251899287784887e-31,5.2499000874850065e-31,5.247900887185126e-31,5.245901686885247e-31,5.2439024865853664e-31,5.241903286285486e-31,5.239904085985606e-31,5.237904885685726e-31,5.235905685385846e-31,5.233906485085966e-31,5.231907284786086e-31,5.229908084486206e-31,5.227908884186326e-31,5.225909683886446e-31,5.223910483586566e-31,5.2219112832866856e-31,5.219912082986806e-31,5.217912882686926e-31,5.2159136823870455e-31,5.213914482087165e-31,5.211915281787286e-31,5.209916081487405e-31,5.207916881187525e-31,5.205917680887646e-31,5.203918480587765e-31,5.201919280287885e-31,5.1999200799880055e-31,5.197920879688125e-31,5.195921679388245e-31,5.1939224790883655e-31,5.191923278788485e-31,5.189924078488605e-31,5.187924878188725e-31,5.185925677888845e-31,5.183926477588965e-31,5.181927277289084e-31,5.179928076989205e-31,5.177928876689325e-31,5.175929676389444e-31,5.173930476089565e-31,5.1719312757896846e-31,5.169932075489804e-31,5.167932875189925e-31,5.1659336748900445e-31,5.163934474590164e-31,5.161935274290285e-31,5.159936073990404e-31,5.157936873690524e-31,5.155937673390644e-31,5.153938473090764e-31,5.151939272790884e-31,5.149940072491004e-31,5.147940872191124e-31,5.145941671891244e-31,5.143942471591364e-31,5.141943271291484e-31,5.139944070991604e-31,5.1379448706917235e-31,5.135945670391844e-31,5.133946470091964e-31,5.131947269792083e-31,5.129948069492204e-31,5.127948869192324e-31,5.125949668892443e-31,5.123950468592563e-31,5.1219512682926836e-31,5.119952067992803e-31,5.117952867692923e-31,5.1159536673930435e-31,5.113954467093163e-31,5.111955266793283e-31,5.109956066493403e-31,5.107956866193523e-31,5.105957665893643e-31,5.103958465593763e-31,5.101959265293883e-31,5.099960064994003e-31,5.097960864694122e-31,5.095961664394243e-31,5.093962464094363e-31,5.091963263794482e-31,5.089964063494603e-31,5.0879648631947225e-31,5.085965662894842e-31,5.083966462594963e-31,5.081967262295082e-31,5.079968061995202e-31,5.077968861695323e-31,5.075969661395442e-31,5.073970461095562e-31,5.071971260795683e-31,5.069972060495802e-31,5.067972860195922e-31,5.065973659896042e-31,5.063974459596162e-31,5.061975259296282e-31,5.0599760589964015e-31,5.057976858696522e-31,5.055977658396642e-31,5.053978458096761e-31,5.051979257796882e-31,5.049980057497002e-31,5.047980857197121e-31,5.045981656897242e-31,5.043982456597362e-31,5.041983256297481e-31,5.039984055997601e-31,5.0379848556977215e-31,5.035985655397841e-31,5.033986455097961e-31,5.031987254798081e-31,5.029988054498201e-31,5.027988854198321e-31,5.025989653898441e-31,5.023990453598561e-31,5.021991253298681e-31,5.019992052998801e-31,5.017992852698921e-31,5.015993652399041e-31,5.013994452099161e-31,5.011995251799281e-31,5.0099960514994005e-31,5.00799685119952e-31,5.005997650899641e-31,5.00399845059976e-31,5.00199925029988e-31,5.000000050000001e-31,4.99800084970012e-31,4.99600164940024e-31,4.994002449100361e-31,4.99200324880048e-31,4.9900040485006e-31,4.9880048482007205e-31,4.98600564790084e-31,4.98400644760096e-31,4.98200724730108e-31,4.9800080470012e-31,4.97800884670132e-31,4.9760096464014395e-31,4.97401044610156e-31,4.97201124580168e-31,4.970012045501799e-31,4.96801284520192e-31,4.96601364490204e-31,4.964014444602159e-31,4.96201524430228e-31,4.9600160440023995e-31,4.958016843702519e-31,4.95601764340264e-31,4.9540184431027594e-31,4.952019242802879e-31,4.950020042502999e-31,4.948020842203119e-31,4.946021641903239e-31,4.944022441603359e-31,4.942023241303479e-31,4.940024041003599e-31,4.938024840703719e-31,4.936025640403839e-31,4.934026440103959e-31,4.9320272398040785e-31,4.930028039504199e-31,4.928028839204319e-31,4.9260296389044385e-31,4.924030438604559e-31,4.922031238304679e-31,4.920032038004798e-31,4.918032837704918e-31,4.916033637405039e-31,4.914034437105158e-31,4.912035236805278e-31,4.9100360365053985e-31,4.908036836205518e-31,4.906037635905638e-31,4.9040384356057584e-31,4.902039235305878e-31,4.900040035005998e-31,4.898040834706118e-31,4.896041634406238e-31,4.894042434106358e-31,4.892043233806477e-31,4.890044033506598e-31,4.888044833206718e-31,4.886045632906837e-31,4.884046432606958e-31,4.8820472323070775e-31,4.880048032007197e-31,4.878048831707318e-31,4.8760496314074375e-31,4.874050431107557e-31,4.872051230807678e-31,4.870052030507797e-31,4.868052830207917e-31,4.866053629908038e-31,4.864054429608157e-31,4.862055229308277e-31,4.860056029008397e-31,4.858056828708517e-31,4.856057628408637e-31,4.854058428108757e-31,4.852059227808877e-31,4.850060027508997e-31,4.8480608272091165e-31,4.846061626909237e-31,4.844062426609357e-31,4.842063226309476e-31,4.840064026009597e-31,4.838064825709717e-31,4.836065625409836e-31,4.834066425109956e-31,4.8320672248100766e-31,4.830068024510196e-31,4.828068824210316e-31,4.8260696239104365e-31,4.824070423610556e-31,4.822071223310676e-31,4.820072023010796e-31,4.818072822710916e-31,4.816073622411036e-31,4.814074422111156e-31,4.812075221811276e-31,4.810076021511396e-31,4.808076821211516e-31,4.806077620911636e-31,4.804078420611756e-31,4.802079220311875e-31,4.800080020011996e-31,4.7980808197121155e-31,4.796081619412235e-31,4.794082419112356e-31,4.792083218812475e-31,4.790084018512595e-31,4.788084818212716e-31,4.786085617912835e-31,4.784086417612955e-31,4.7820872173130756e-31,4.780088017013195e-31,4.778088816713315e-31,4.776089616413435e-31,4.774090416113555e-31,4.772091215813675e-31,4.7700920155137945e-31,4.768092815213915e-31,4.766093614914035e-31,4.764094414614154e-31,4.762095214314275e-31,4.760096014014395e-31,4.758096813714514e-31,4.756097613414635e-31,4.754098413114755e-31,4.752099212814874e-31,4.750100012514995e-31,4.7481008122151145e-31,4.746101611915234e-31,4.744102411615354e-31,4.742103211315474e-31,4.740104011015594e-31,4.738104810715714e-31,4.736105610415834e-31,4.734106410115954e-31,4.732107209816074e-31,4.730108009516194e-31,4.728108809216314e-31,4.726109608916434e-31,4.724110408616554e-31,4.722111208316674e-31,4.7201120080167935e-31,4.718112807716913e-31,4.716113607417034e-31,4.714114407117153e-31,4.712115206817273e-31,4.710116006517394e-31,4.708116806217513e-31,4.706117605917633e-31,4.704118405617754e-31,4.702119205317873e-31,4.700120005017993e-31,4.6981208047181135e-31,4.696121604418233e-31,4.694122404118353e-31,4.692123203818473e-31,4.690124003518593e-31,4.688124803218713e-31,4.6861256029188324e-31,4.684126402618953e-31,4.682127202319073e-31,4.680128002019192e-31,4.678128801719313e-31,4.676129601419433e-31,4.674130401119552e-31,4.672131200819673e-31,4.6701320005197925e-31,4.668132800219912e-31,4.666133599920033e-31,4.664134399620152e-31,4.662135199320272e-31,4.660135999020393e-31,4.658136798720512e-31,4.656137598420632e-31,4.654138398120752e-31,4.652139197820872e-31,4.650139997520992e-31,4.648140797221112e-31,4.646141596921232e-31,4.644142396621352e-31,4.6421431963214715e-31,4.640143996021592e-31,4.638144795721712e-31,4.6361455954218315e-31,4.634146395121952e-31,4.632147194822072e-31,4.630147994522191e-31,4.628148794222311e-31,4.626149593922432e-31,4.624150393622551e-31,4.622151193322671e-31,4.6201519930227915e-31,4.618152792722911e-31,4.616153592423031e-31,4.614154392123151e-31,4.612155191823271e-31,4.610155991523391e-31,4.608156791223511e-31,4.606157590923631e-31,4.604158390623751e-31,4.602159190323871e-31,4.600159990023991e-31,4.598160789724111e-31,4.59616158942423e-31,4.594162389124351e-31,4.5921631888244705e-31,4.59016398852459e-31,4.588164788224711e-31,4.5861655879248305e-31,4.58416638762495e-31,4.582167187325071e-31,4.58016798702519e-31,4.57816878672531e-31,4.576169586425431e-31,4.57417038612555e-31,4.57217118582567e-31,4.57017198552579e-31,4.56817278522591e-31,4.56617358492603e-31,4.5641743846261496e-31,4.56217518432627e-31,4.56017598402639e-31,4.5581767837265095e-31,4.55617758342663e-31,4.55417838312675e-31,4.552179182826869e-31,4.55017998252699e-31,4.54818078222711e-31,4.546181581927229e-31,4.54418238162735e-31,4.5421831813274695e-31,4.540183981027589e-31,4.538184780727709e-31,4.5361855804278295e-31,4.534186380127949e-31,4.532187179828069e-31,4.530187979528189e-31,4.528188779228309e-31,4.526189578928429e-31,4.524190378628549e-31,4.522191178328669e-31,4.520191978028789e-31,4.518192777728909e-31,4.516193577429029e-31,4.514194377129149e-31,4.512195176829268e-31,4.510195976529389e-31,4.5081967762295085e-31,4.506197575929628e-31,4.504198375629749e-31,4.502199175329868e-31,4.500199975029988e-31,4.498200774730109e-31,4.496201574430228e-31,4.494202374130348e-31,4.4922031738304685e-31,4.490203973530588e-31,4.488204773230708e-31,4.4862055729308285e-31,4.484206372630948e-31,4.482207172331068e-31,4.4802079720311875e-31,4.478208771731308e-31,4.476209571431428e-31,4.474210371131547e-31,4.472211170831668e-31,4.470211970531788e-31,4.468212770231907e-31,4.466213569932028e-31,4.464214369632148e-31,4.462215169332267e-31,4.460215969032388e-31,4.4582167687325075e-31,4.456217568432627e-31,4.454218368132747e-31,4.452219167832867e-31,4.450219967532987e-31,4.448220767233107e-31,4.446221566933227e-31,4.444222366633347e-31,4.442223166333467e-31,4.440223966033587e-31,4.438224765733707e-31,4.436225565433827e-31,4.434226365133947e-31,4.432227164834067e-31,4.4302279645341865e-31,4.428228764234307e-31,4.426229563934427e-31,4.424230363634546e-31,4.422231163334666e-31,4.420231963034787e-31,4.418232762734906e-31,4.416233562435026e-31,4.414234362135147e-31,4.412235161835266e-31,4.410235961535386e-31,4.4082367612355065e-31,4.406237560935626e-31,4.404238360635746e-31,4.402239160335866e-31,4.400239960035986e-31,4.398240759736106e-31,4.3962415594362254e-31,4.394242359136346e-31,4.392243158836466e-31,4.390243958536585e-31,4.388244758236706e-31,4.386245557936826e-31,4.384246357636945e-31,4.382247157337066e-31,4.3802479570371855e-31,4.378248756737305e-31,4.376249556437426e-31,4.374250356137545e-31,4.372251155837665e-31,4.370251955537786e-31,4.368252755237905e-31,4.366253554938025e-31,4.364254354638145e-31,4.362255154338265e-31,4.360255954038385e-31,4.358256753738505e-31,4.356257553438625e-31,4.354258353138745e-31,4.3522591528388645e-31,4.350259952538985e-31,4.348260752239105e-31,4.3462615519392244e-31,4.344262351639345e-31,4.342263151339465e-31,4.340263951039584e-31,4.338264750739705e-31,4.336265550439825e-31,4.334266350139944e-31,4.332267149840064e-31,4.3302679495401845e-31,4.328268749240304e-31,4.326269548940424e-31,4.324270348640544e-31,4.322271148340664e-31,4.320271948040784e-31,4.318272747740904e-31,4.316273547441024e-31,4.314274347141144e-31,4.312275146841264e-31,4.310275946541384e-31,4.308276746241504e-31,4.306277545941623e-31,4.304278345641744e-31,4.3022791453418635e-31,4.300279945041983e-31,4.298280744742104e-31,4.2962815444422234e-31,4.294282344142343e-31,4.292283143842464e-31,4.290283943542583e-31,4.288284743242703e-31,4.286285542942824e-31,4.284286342642943e-31,4.282287142343063e-31,4.2802879420431835e-31,4.278288741743303e-31,4.276289541443423e-31,4.2742903411435426e-31,4.272291140843663e-31,4.270291940543783e-31,4.2682927402439025e-31,4.266293539944023e-31,4.264294339644143e-31,4.262295139344262e-31,4.260295939044383e-31,4.258296738744503e-31,4.256297538444622e-31,4.254298338144743e-31,4.2522991378448625e-31,4.250299937544982e-31,4.248300737245102e-31,4.2463015369452224e-31,4.244302336645342e-31,4.242303136345462e-31,4.240303936045582e-31,4.238304735745702e-31,4.236305535445822e-31,4.234306335145942e-31,4.232307134846062e-31,4.230307934546182e-31,4.228308734246302e-31,4.226309533946422e-31,4.2243103336465416e-31,4.222311133346662e-31,4.220311933046782e-31,4.2183127327469015e-31,4.216313532447021e-31,4.214314332147142e-31,4.212315131847261e-31,4.210315931547381e-31,4.208316731247502e-31,4.206317530947621e-31,4.204318330647741e-31,4.2023191303478615e-31,4.200319930047981e-31,4.198320729748101e-31,4.1963215294482215e-31,4.194322329148341e-31,4.192323128848461e-31,4.1903239285485805e-31,4.188324728248701e-31,4.186325527948821e-31,4.18432632764894e-31,4.182327127349061e-31,4.180327927049181e-31,4.1783287267493e-31,4.176329526449421e-31,4.1743303261495406e-31,4.17233112584966e-31,4.170331925549781e-31,4.1683327252499005e-31,4.16633352495002e-31,4.164334324650141e-31,4.16233512435026e-31,4.16033592405038e-31,4.1583367237505e-31,4.15633752345062e-31,4.15433832315074e-31,4.15233912285086e-31,4.15033992255098e-31,4.1483407222511e-31,4.14634152195122e-31,4.14434232165134e-31,4.14234312135146e-31,4.1403439210515795e-31,4.1383447207517e-31,4.13634552045182e-31,4.134346320151939e-31,4.132347119852059e-31,4.13034791955218e-31,4.128348719252299e-31,4.126349518952419e-31,4.1243503186525396e-31,4.122351118352659e-31,4.120351918052779e-31,4.1183527177528995e-31,4.116353517453019e-31,4.114354317153139e-31,4.112355116853259e-31,4.110355916553379e-31,4.108356716253499e-31,4.106357515953619e-31,4.104358315653739e-31,4.102359115353859e-31,4.100359915053978e-31,4.098360714754099e-31,4.096361514454219e-31,4.094362314154338e-31,4.092363113854459e-31,4.0903639135545785e-31,4.088364713254698e-31,4.086365512954819e-31,4.084366312654938e-31,4.082367112355058e-31,4.080367912055179e-31,4.078368711755298e-31,4.076369511455418e-31,4.074370311155538e-31,4.072371110855658e-31,4.070371910555778e-31,4.068372710255898e-31,4.066373509956018e-31,4.064374309656138e-31,4.0623751093562575e-31,4.060375909056378e-31,4.058376708756498e-31,4.056377508456617e-31,4.054378308156738e-31,4.052379107856858e-31,4.050379907556977e-31,4.048380707257098e-31,4.046381506957218e-31,4.044382306657337e-31,4.042383106357457e-31,4.0403839060575775e-31,4.038384705757697e-31,4.036385505457817e-31,4.034386305157937e-31,4.032387104858057e-31,4.030387904558177e-31,4.028388704258297e-31,4.026389503958417e-31,4.024390303658537e-31,4.022391103358657e-31,4.020391903058777e-31,4.018392702758897e-31,4.016393502459017e-31,4.014394302159137e-31,4.0123951018592565e-31,4.010395901559376e-31,4.008396701259497e-31,4.0063975009596164e-31,4.004398300659736e-31,4.002399100359857e-31,4.000399900059976e-31,3.998400699760096e-31,3.996401499460217e-31,3.994402299160336e-31,3.992403098860456e-31,3.9904038985605765e-31,3.988404698260696e-31,3.986405497960816e-31,3.9844062976609355e-31,3.982407097361056e-31,3.980407897061176e-31,3.9784086967612955e-31,3.976409496461416e-31,3.974410296161536e-31,3.972411095861655e-31,3.970411895561776e-31,3.968412695261896e-31,3.966413494962015e-31,3.964414294662136e-31,3.9624150943622555e-31,3.960415894062375e-31,3.958416693762496e-31,3.9564174934626154e-31,3.954418293162735e-31,3.952419092862855e-31,3.950419892562975e-31,3.948420692263095e-31,3.946421491963215e-31,3.944422291663335e-31,3.942423091363455e-31,3.940423891063575e-31,3.9384246907636947e-31,3.936425490463815e-31,3.9344262901639345e-31,3.9324270898640547e-31,3.930427889564175e-31,3.9284286892642945e-31,3.9264294889644146e-31,3.9244302886645347e-31,3.9224310883646544e-31,3.9204318880647745e-31,3.918432687764894e-31,3.9164334874650143e-31,3.9144342871651344e-31,3.912435086865254e-31,3.910435886565374e-31,3.9084366862654943e-31,3.906437485965614e-31,3.904438285665734e-31,3.902439085365854e-31,3.900439885065974e-31,3.898440684766094e-31,3.8964414844662137e-31,3.894442284166334e-31,3.892443083866454e-31,3.8904438835665736e-31,3.8884446832666938e-31,3.8864454829668134e-31,3.8844462826669336e-31,3.8824470823670537e-31,3.8804478820671733e-31,3.8784486817672935e-31,3.876449481467413e-31,3.8744502811675333e-31,3.8724510808676534e-31,3.870451880567773e-31,3.868452680267893e-31,3.8664534799680133e-31,3.864454279668133e-31,3.862455079368253e-31,3.8604558790683728e-31,3.858456678768493e-31,3.856457478468613e-31,3.8544582781687327e-31,3.852459077868853e-31,3.850459877568973e-31,3.8484606772690926e-31,3.8464614769692127e-31,3.8444622766693324e-31,3.8424630763694525e-31,3.8404638760695726e-31,3.8384646757696923e-31,3.8364654754698124e-31,3.8344662751699326e-31,3.8324670748700522e-31,3.8304678745701724e-31,3.828468674270292e-31,3.826469473970412e-31,3.8244702736705323e-31,3.822471073370652e-31,3.820471873070772e-31,3.8184726727708917e-31,3.816473472471012e-31,3.814474272171132e-31,3.8124750718712517e-31,3.8104758715713718e-31,3.808476671271492e-31,3.8064774709716116e-31,3.8044782706717317e-31,3.8024790703718514e-31,3.8004798700719715e-31,3.7984806697720916e-31,3.7964814694722113e-31,3.7944822691723314e-31,3.7924830688724515e-31,3.790483868572571e-31,3.7884846682726913e-31,3.786485467972811e-31,3.784486267672931e-31,3.7824870673730512e-31,3.780487867073171e-31,3.778488666773291e-31,3.776489466473411e-31,3.774490266173531e-31,3.772491065873651e-31,3.7704918655737706e-31,3.7684926652738907e-31,3.766493464974011e-31,3.7644942646741305e-31,3.7624950643742507e-31,3.7604958640743708e-31,3.7584966637744905e-31,3.7564974634746106e-31,3.7544982631747303e-31,3.7524990628748504e-31,3.7504998625749705e-31,3.74850066227509e-31,3.7465014619752103e-31,3.74450226167533e-31,3.74250306137545e-31,3.74050386107557e-31,3.73850466077569e-31,3.73650546047581e-31,3.73450626017593e-31,3.73250705987605e-31,3.73050785957617e-31,3.7285086592762896e-31,3.7265094589764097e-31,3.72451025867653e-31,3.7225110583766495e-31,3.7205118580767696e-31,3.7185126577768897e-31,3.7165134574770094e-31,3.7145142571771295e-31,3.7125150568772492e-31,3.7105158565773693e-31,3.7085166562774895e-31,3.706517455977609e-31,3.7045182556777293e-31,3.7025190553778494e-31,3.700519855077969e-31,3.698520654778089e-31,3.696521454478209e-31,3.694522254178329e-31,3.692523053878449e-31,3.6905238535785688e-31,3.688524653278689e-31,3.6865254529788086e-31,3.6845262526789287e-31,3.682527052379049e-31,3.6805278520791685e-31,3.6785286517792886e-31,3.6765294514794087e-31,3.6745302511795284e-31,3.6725310508796485e-31,3.670531850579768e-31,3.6685326502798883e-31,3.6665334499800084e-31,3.664534249680128e-31,3.6625350493802482e-31,3.6605358490803683e-31,3.658536648780488e-31,3.656537448480608e-31,3.654538248180728e-31,3.652539047880848e-31,3.650539847580968e-31,3.6485406472810877e-31,3.646541446981208e-31,3.644542246681328e-31,3.6425430463814477e-31,3.6405438460815678e-31,3.6385446457816875e-31,3.6365454454818076e-31,3.6345462451819277e-31,3.6325470448820474e-31,3.6305478445821675e-31,3.6285486442822876e-31,3.6265494439824073e-31,3.6245502436825274e-31,3.622551043382647e-31,3.620551843082767e-31,3.6185526427828873e-31,3.616553442483007e-31,3.614554242183127e-31,3.612555041883247e-31,3.610555841583367e-31,3.608556641283487e-31,3.6065574409836067e-31,3.604558240683727e-31,3.602559040383847e-31,3.6005598400839666e-31,3.5985606397840867e-31,3.5965614394842064e-31,3.5945622391843265e-31,3.5925630388844467e-31,3.5905638385845663e-31,3.5885646382846865e-31,3.5865654379848066e-31,3.5845662376849263e-31,3.5825670373850464e-31,3.580567837085166e-31,3.578568636785286e-31,3.5765694364854063e-31,3.574570236185526e-31,3.572571035885646e-31,3.570571835585766e-31,3.568572635285886e-31,3.566573434986006e-31,3.5645742346861257e-31,3.562575034386246e-31,3.560575834086366e-31,3.5585766337864856e-31,3.5565774334866057e-31,3.5545782331867254e-31,3.5525790328868455e-31,3.5505798325869656e-31,3.5485806322870853e-31,3.5465814319872054e-31,3.5445822316873255e-31,3.5425830313874452e-31,3.5405838310875653e-31,3.538584630787685e-31,3.536585430487805e-31,3.5345862301879253e-31,3.532587029888045e-31,3.530587829588165e-31,3.528588629288285e-31,3.526589428988405e-31,3.524590228688525e-31,3.5225910283886447e-31,3.5205918280887648e-31,3.518592627788885e-31,3.5165934274890046e-31,3.5145942271891247e-31,3.512595026889245e-31,3.5105958265893645e-31,3.5085966262894846e-31,3.5065974259896043e-31,3.5045982256897244e-31,3.5025990253898445e-31,3.500599825089964e-31,3.4986006247900843e-31,3.496601424490204e-31,3.494602224190324e-31,3.4926030238904442e-31,3.490603823590564e-31,3.488604623290684e-31,3.486605422990804e-31,3.484606222690924e-31,3.482607022391044e-31,3.4806078220911636e-31,3.4786086217912837e-31,3.476609421491404e-31,3.4746102211915235e-31,3.4726110208916437e-31,3.4706118205917638e-31,3.4686126202918835e-31,3.4666134199920036e-31,3.4646142196921232e-31,3.4626150193922434e-31,3.4606158190923635e-31,3.458616618792483e-31,3.4566174184926033e-31,3.4546182181927234e-31,3.452619017892843e-31,3.450619817592963e-31,3.448620617293083e-31,3.446621416993203e-31,3.444622216693323e-31,3.442623016393443e-31,3.440623816093563e-31,3.438624615793683e-31,3.4366254154938027e-31,3.434626215193923e-31,3.4326270148940425e-31,3.4306278145941626e-31,3.4286286142942827e-31,3.4266294139944024e-31,3.4246302136945225e-31,3.422631013394642e-31,3.4206318130947623e-31,3.4186326127948825e-31,3.416633412495002e-31,3.4146342121951223e-31,3.4126350118952424e-31,3.410635811595362e-31,3.408636611295482e-31,3.406637410995602e-31,3.404638210695722e-31,3.402639010395842e-31,3.4006398100959618e-31,3.398640609796082e-31,3.396641409496202e-31,3.3946422091963217e-31,3.392643008896442e-31,3.3906438085965615e-31,3.3886446082966816e-31,3.3866454079968017e-31,3.3846462076969214e-31,3.3826470073970415e-31,3.3806478070971616e-31,3.3786486067972813e-31,3.3766494064974014e-31,3.374650206197521e-31,3.3726510058976412e-31,3.3706518055977613e-31,3.368652605297881e-31,3.366653404998001e-31,3.364654204698121e-31,3.362655004398241e-31,3.360655804098361e-31,3.3586566037984807e-31,3.356657403498601e-31,3.354658203198721e-31,3.3526590028988406e-31,3.3506598025989608e-31,3.3486606022990804e-31,3.3466614019992006e-31,3.3446622016993207e-31,3.3426630013994404e-31,3.3406638010995605e-31,3.3386646007996806e-31,3.3366654004998003e-31,3.3346662001999204e-31,3.33266699990004e-31,3.33066779960016e-31,3.3286685993002803e-31,3.3266693990004e-31,3.32467019870052e-31,3.3226709984006402e-31,3.32067179810076e-31,3.31867259780088e-31,3.3166733975009997e-31,3.31467419720112e-31,3.31267499690124e-31,3.3106757966013596e-31,3.3086765963014797e-31,3.3066773960016e-31,3.3046781957017195e-31,3.3026789954018397e-31,3.3006797951019593e-31,3.2986805948020794e-31,3.2966813945021996e-31,3.2946821942023192e-31,3.2926829939024394e-31,3.290683793602559e-31,3.288684593302679e-31,3.2866853930027993e-31,3.284686192702919e-31,3.282686992403039e-31,3.280687792103159e-31,3.278688591803279e-31,3.276689391503399e-31,3.2746901912035187e-31,3.272690990903639e-31,3.270691790603759e-31,3.2686925903038786e-31,3.2666933900039987e-31,3.264694189704119e-31,3.2626949894042385e-31,3.2606957891043586e-31,3.2586965888044783e-31,3.2566973885045984e-31,3.2546981882047185e-31,3.252698987904838e-31,3.2506997876049583e-31,3.2487005873050785e-31,3.246701387005198e-31,3.2447021867053182e-31,3.242702986405438e-31,3.240703786105558e-31,3.238704585805678e-31,3.236705385505798e-31,3.234706185205918e-31,3.2327069849060376e-31,3.2307077846061578e-31,3.228708584306278e-31,3.2267093840063976e-31,3.2247101837065177e-31,3.222710983406638e-31,3.2207117831067575e-31,3.2187125828068776e-31,3.2167133825069973e-31,3.2147141822071174e-31,3.2127149819072375e-31,3.210715781607357e-31,3.2087165813074773e-31,3.2067173810075974e-31,3.204718180707717e-31,3.2027189804078372e-31,3.200719780107957e-31,3.198720579808077e-31,3.196721379508197e-31,3.194722179208317e-31,3.192722978908437e-31,3.190723778608557e-31,3.1887245783086767e-31,3.186725378008797e-31,3.1847261777089165e-31,3.1827269774090366e-31,3.1807277771091568e-31,3.1787285768092764e-31,3.1767293765093966e-31,3.1747301762095162e-31,3.1727309759096364e-31,3.1707317756097565e-31,3.168732575309876e-31,3.1667333750099963e-31,3.1647341747101164e-31,3.162734974410236e-31,3.160735774110356e-31,3.158736573810476e-31,3.156737373510596e-31,3.154738173210716e-31,3.152738972910836e-31,3.150739772610956e-31,3.148740572311076e-31,3.1467413720111957e-31,3.144742171711316e-31,3.1427429714114355e-31,3.1407437711115556e-31,3.1387445708116757e-31,3.1367453705117954e-31,3.1347461702119155e-31,3.1327469699120356e-31,3.1307477696121553e-31,3.1287485693122754e-31,3.126749369012395e-31,3.1247501687125152e-31,3.1227509684126354e-31,3.120751768112755e-31,3.118752567812875e-31,3.1167533675129953e-31,3.114754167213115e-31,3.112754966913235e-31,3.1107557666133548e-31,3.108756566313475e-31,3.106757366013595e-31,3.1047581657137147e-31,3.102758965413835e-31,3.1007597651139545e-31,3.0987605648140746e-31,3.0967613645141947e-31,3.0947621642143144e-31,3.0927629639144345e-31,3.0907637636145546e-31,3.0887645633146743e-31,3.0867653630147944e-31,3.084766162714914e-31,3.082766962415034e-31,3.0807677621151543e-31,3.078768561815274e-31,3.076769361515394e-31,3.0747701612155142e-31,3.072770960915634e-31,3.070771760615754e-31,3.0687725603158737e-31,3.066773360015994e-31,3.064774159716114e-31,3.0627749594162336e-31,3.0607757591163538e-31,3.058776558816474e-31,3.0567773585165936e-31,3.0547781582167137e-31,3.0527789579168334e-31,3.0507797576169535e-31,3.0487805573170736e-31,3.0467813570171933e-31,3.0447821567173134e-31,3.042782956417433e-31,3.040783756117553e-31,3.0387845558176733e-31,3.036785355517793e-31,3.034786155217913e-31,3.032786954918033e-31,3.030787754618153e-31,3.028788554318273e-31,3.0267893540183927e-31,3.024790153718513e-31,3.022790953418633e-31,3.0207917531187526e-31,3.0187925528188727e-31,3.016793352518993e-31,3.0147941522191125e-31,3.0127949519192326e-31,3.0107957516193523e-31,3.0087965513194724e-31,3.0067973510195926e-31,3.0047981507197122e-31,3.0027989504198324e-31,3.0007997501199525e-31,2.998800549820072e-31,2.9968013495201923e-31,2.994802149220312e-31,2.992802948920432e-31,2.990803748620552e-31,2.988804548320672e-31,2.986805348020792e-31,2.984806147720912e-31,2.982806947421032e-31,2.980807747121152e-31,2.9788085468212716e-31,2.9768093465213917e-31,2.974810146221512e-31,2.9728109459216315e-31,2.9708117456217516e-31,2.9688125453218713e-31,2.9668133450219914e-31,2.9648141447221115e-31,2.962814944422231e-31,2.9608157441223513e-31,2.9588165438224714e-31,2.956817343522591e-31,2.9548181432227112e-31,2.952818942922831e-31,2.950819742622951e-31,2.948820542323071e-31,2.946821342023191e-31,2.944822141723311e-31,2.942822941423431e-31,2.9408237411235508e-31,2.938824540823671e-31,2.9368253405237905e-31,2.9348261402239107e-31,2.932826939924031e-31,2.9308277396241505e-31,2.9288285393242706e-31,2.9268293390243907e-31,2.9248301387245104e-31,2.9228309384246305e-31,2.92083173812475e-31,2.9188325378248703e-31,2.9168333375249904e-31,2.91483413722511e-31,2.91283493692523e-31,2.91083573662535e-31,2.90883653632547e-31,2.90683733602559e-31,2.90483813572571e-31,2.90283893542583e-31,2.90083973512595e-31,2.8988405348260697e-31,2.89684133452619e-31,2.8948421342263095e-31,2.8928429339264296e-31,2.8908437336265498e-31,2.8888445333266694e-31,2.8868453330267896e-31,2.8848461327269097e-31,2.8828469324270293e-31,2.8808477321271495e-31,2.878848531827269e-31,2.8768493315273893e-31,2.8748501312275094e-31,2.872850930927629e-31,2.870851730627749e-31,2.8688525303278693e-31,2.866853330027989e-31,2.864854129728109e-31,2.8628549294282288e-31,2.860855729128349e-31,2.858856528828469e-31,2.8568573285285887e-31,2.854858128228709e-31,2.8528589279288285e-31,2.8508597276289486e-31,2.8488605273290687e-31,2.8468613270291884e-31,2.8448621267293085e-31,2.8428629264294286e-31,2.8408637261295483e-31,2.8388645258296684e-31,2.836865325529788e-31,2.8348661252299082e-31,2.8328669249300284e-31,2.830867724630148e-31,2.828868524330268e-31,2.8268693240303883e-31,2.824870123730508e-31,2.822870923430628e-31,2.8208717231307477e-31,2.818872522830868e-31,2.816873322530988e-31,2.8148741222311077e-31,2.8128749219312278e-31,2.810875721631348e-31,2.8088765213314676e-31,2.8068773210315877e-31,2.8048781207317074e-31,2.8028789204318275e-31,2.8008797201319476e-31,2.7988805198320673e-31,2.7968813195321874e-31,2.7948821192323075e-31,2.792882918932427e-31,2.7908837186325473e-31,2.788884518332667e-31,2.786885318032787e-31,2.7848861177329072e-31,2.782886917433027e-31,2.780887717133147e-31,2.7788885168332667e-31,2.776889316533387e-31,2.774890116233507e-31,2.7728909159336266e-31,2.7708917156337467e-31,2.768892515333867e-31,2.7668933150339865e-31,2.7648941147341067e-31,2.7628949144342263e-31,2.7608957141343465e-31,2.7588965138344666e-31,2.7568973135345863e-31,2.7548981132347064e-31,2.7528989129348265e-31,2.750899712634946e-31,2.7489005123350663e-31,2.746901312035186e-31,2.744902111735306e-31,2.742902911435426e-31,2.740903711135546e-31,2.738904510835666e-31,2.736905310535786e-31,2.734906110235906e-31,2.732906909936026e-31,2.7309077096361456e-31,2.7289085093362657e-31,2.726909309036386e-31,2.7249101087365055e-31,2.7229109084366256e-31,2.7209117081367453e-31,2.7189125078368654e-31,2.7169133075369855e-31,2.7149141072371052e-31,2.7129149069372253e-31,2.7109157066373455e-31,2.708916506337465e-31,2.7069173060375853e-31,2.704918105737705e-31,2.702918905437825e-31,2.700919705137945e-31,2.698920504838065e-31,2.696921304538185e-31,2.694922104238305e-31,2.6929229039384248e-31,2.690923703638545e-31,2.6889245033386646e-31,2.6869253030387847e-31,2.684926102738905e-31,2.6829269024390245e-31,2.6809277021391446e-31,2.6789285018392647e-31,2.6769293015393844e-31,2.6749301012395045e-31,2.672930900939624e-31,2.6709317006397443e-31,2.6689325003398644e-31,2.666933300039984e-31,2.6649340997401042e-31,2.6629348994402243e-31,2.660935699140344e-31,2.658936498840464e-31,2.656937298540584e-31,2.654938098240704e-31,2.652938897940824e-31,2.6509396976409437e-31,2.648940497341064e-31,2.6469412970411835e-31,2.6449420967413037e-31,2.6429428964414238e-31,2.6409436961415435e-31,2.6389444958416636e-31,2.6369452955417837e-31,2.6349460952419034e-31,2.6329468949420235e-31,2.630947694642143e-31,2.6289484943422633e-31,2.6269492940423834e-31,2.624950093742503e-31,2.622950893442623e-31,2.6209516931427433e-31,2.618952492842863e-31,2.616953292542983e-31,2.614954092243103e-31,2.612954891943223e-31,2.610955691643343e-31,2.6089564913434627e-31,2.606957291043583e-31,2.604958090743703e-31,2.6029588904438226e-31,2.6009596901439427e-31,2.5989604898440624e-31,2.5969612895441825e-31,2.5949620892443027e-31,2.5929628889444223e-31,2.5909636886445425e-31,2.588964488344662e-31,2.5869652880447823e-31,2.5849660877449024e-31,2.582966887445022e-31,2.580967687145142e-31,2.5789684868452623e-31,2.576969286545382e-31,2.574970086245502e-31,2.5729708859456218e-31,2.570971685645742e-31,2.568972485345862e-31,2.5669732850459817e-31,2.564974084746102e-31,2.562974884446222e-31,2.5609756841463416e-31,2.5589764838464617e-31,2.5569772835465814e-31,2.5549780832467015e-31,2.5529788829468216e-31,2.5509796826469413e-31,2.5489804823470614e-31,2.5469812820471815e-31,2.5449820817473012e-31,2.5429828814474213e-31,2.540983681147541e-31,2.538984480847661e-31,2.5369852805477813e-31,2.534986080247901e-31,2.532986879948021e-31,2.5309876796481407e-31,2.528988479348261e-31,2.526989279048381e-31,2.5249900787485007e-31,2.5229908784486208e-31,2.520991678148741e-31,2.5189924778488606e-31,2.5169932775489807e-31,2.5149940772491004e-31,2.5129948769492205e-31,2.5109956766493406e-31,2.5089964763494603e-31,2.5069972760495804e-31,2.5049980757497005e-31,2.50299887544982e-31,2.5009996751499403e-31,2.49900047485006e-31,2.49700127455018e-31,2.4950020742503002e-31,2.49300287395042e-31,2.49100367365054e-31,2.48900447335066e-31,2.48700527305078e-31,2.4850060727509e-31,2.4830068724510196e-31,2.4810076721511397e-31,2.47900847185126e-31,2.4770092715513795e-31,2.4750100712514997e-31,2.4730108709516198e-31,2.4710116706517395e-31,2.4690124703518596e-31,2.4670132700519793e-31,2.4650140697520994e-31,2.4630148694522195e-31,2.461015669152339e-31,2.4590164688524593e-31,2.457017268552579e-31,2.455018068252699e-31,2.453018867952819e-31,2.451019667652939e-31,2.449020467353059e-31,2.447021267053179e-31,2.445022066753299e-31,2.443022866453419e-31,2.4410236661535386e-31,2.4390244658536587e-31,2.437025265553779e-31,2.4350260652538985e-31,2.4330268649540186e-31,2.4310276646541387e-31,2.4290284643542584e-31,2.4270292640543785e-31,2.4250300637544982e-31,2.4230308634546183e-31,2.4210316631547385e-31,2.419032462854858e-31,2.4170332625549783e-31,2.4150340622550984e-31,2.413034861955218e-31,2.411035661655338e-31,2.409036461355458e-31,2.407037261055578e-31,2.405038060755698e-31,2.4030388604558178e-31,2.401039660155938e-31,2.3990404598560576e-31,2.3970412595561777e-31,2.395042059256298e-31,2.3930428589564175e-31,2.3910436586565376e-31,2.3890444583566577e-31,2.3870452580567774e-31,2.3850460577568975e-31,2.383046857457017e-31,2.3810476571571373e-31,2.3790484568572574e-31,2.377049256557377e-31,2.3750500562574972e-31,2.3730508559576173e-31,2.371051655657737e-31,2.369052455357857e-31,2.367053255057977e-31,2.365054054758097e-31,2.363054854458217e-31,2.3610556541583367e-31,2.359056453858457e-31,2.357057253558577e-31,2.3550580532586966e-31,2.3530588529588168e-31,2.3510596526589364e-31,2.3490604523590566e-31,2.3470612520591767e-31,2.3450620517592964e-31,2.3430628514594165e-31,2.3410636511595366e-31,2.3390644508596563e-31,2.3370652505597764e-31,2.335066050259896e-31,2.333066849960016e-31,2.3310676496601363e-31,2.329068449360256e-31,2.327069249060376e-31,2.325070048760496e-31,2.323070848460616e-31,2.321071648160736e-31,2.3190724478608557e-31,2.317073247560976e-31,2.315074047261096e-31,2.3130748469612156e-31,2.3110756466613357e-31,2.3090764463614554e-31,2.3070772460615755e-31,2.3050780457616957e-31,2.3030788454618153e-31,2.3010796451619355e-31,2.2990804448620556e-31,2.2970812445621752e-31,2.2950820442622954e-31,2.293082843962415e-31,2.291083643662535e-31,2.2890844433626553e-31,2.287085243062775e-31,2.285086042762895e-31,2.283086842463015e-31,2.281087642163135e-31,2.279088441863255e-31,2.2770892415633747e-31,2.275090041263495e-31,2.273090840963615e-31,2.2710916406637346e-31,2.2690924403638547e-31,2.2670932400639744e-31,2.2650940397640945e-31,2.2630948394642146e-31,2.2610956391643343e-31,2.2590964388644544e-31,2.2570972385645745e-31,2.255098038264694e-31,2.2530988379648143e-31,2.251099637664934e-31,2.249100437365054e-31,2.2471012370651743e-31,2.245102036765294e-31,2.243102836465414e-31,2.241103636165534e-31,2.239104435865654e-31,2.237105235565774e-31,2.2351060352658936e-31,2.2331068349660138e-31,2.231107634666134e-31,2.2291084343662536e-31,2.2271092340663737e-31,2.225110033766494e-31,2.2231108334666135e-31,2.2211116331667336e-31,2.2191124328668533e-31,2.2171132325669734e-31,2.2151140322670935e-31,2.213114831967213e-31,2.2111156316673333e-31,2.209116431367453e-31,2.207117231067573e-31,2.2051180307676932e-31,2.203118830467813e-31,2.201119630167933e-31,2.199120429868053e-31,2.197121229568173e-31,2.195122029268293e-31,2.1931228289684126e-31,2.1911236286685327e-31,2.189124428368653e-31,2.1871252280687725e-31,2.1851260277688926e-31,2.1831268274690128e-31,2.1811276271691324e-31,2.1791284268692526e-31,2.1771292265693722e-31,2.1751300262694924e-31,2.1731308259696125e-31,2.171131625669732e-31,2.1691324253698523e-31,2.1671332250699724e-31,2.165134024770092e-31,2.163134824470212e-31,2.161135624170332e-31,2.159136423870452e-31,2.157137223570572e-31,2.155138023270692e-31,2.153138822970812e-31,2.151139622670932e-31,2.1491404223710517e-31,2.147141222071172e-31,2.1451420217712915e-31,2.1431428214714116e-31,2.1411436211715317e-31,2.1391444208716514e-31,2.1371452205717715e-31,2.135146020271891e-31,2.1331468199720113e-31,2.1311476196721314e-31,2.129148419372251e-31,2.1271492190723712e-31,2.1251500187724914e-31,2.123150818472611e-31,2.121151618172731e-31,2.119152417872851e-31,2.117153217572971e-31,2.115154017273091e-31,2.1131548169732108e-31,2.111155616673331e-31,2.109156416373451e-31,2.1071572160735707e-31,2.105158015773691e-31,2.1031588154738105e-31,2.1011596151739306e-31,2.0991604148740507e-31,2.0971612145741704e-31,2.0951620142742905e-31,2.0931628139744106e-31,2.0911636136745303e-31,2.0891644133746504e-31,2.08716521307477e-31,2.08516601277489e-31,2.0831668124750103e-31,2.08116761217513e-31,2.07916841187525e-31,2.07716921157537e-31,2.07517001127549e-31,2.07317081097561e-31,2.0711716106757297e-31,2.06917241037585e-31,2.06717321007597e-31,2.0651740097760896e-31,2.0631748094762098e-31,2.0611756091763294e-31,2.0591764088764496e-31,2.0571772085765697e-31,2.0551780082766894e-31,2.0531788079768095e-31,2.0511796076769296e-31,2.0491804073770493e-31,2.0471812070771694e-31,2.045182006777289e-31,2.043182806477409e-31,2.0411836061775293e-31,2.039184405877649e-31,2.037185205577769e-31,2.035186005277889e-31,2.033186804978009e-31,2.031187604678129e-31,2.0291884043782487e-31,2.027189204078369e-31,2.025190003778489e-31,2.0231908034786086e-31,2.0211916031787287e-31,2.019192402878849e-31,2.0171932025789685e-31,2.0151940022790886e-31,2.0131948019792083e-31,2.0111956016793284e-31,2.0091964013794486e-31,2.0071972010795682e-31,2.0051980007796884e-31,2.003198800479808e-31,2.001199600179928e-31,1.9992003998800483e-31,1.997201199580168e-31,1.995201999280288e-31,1.993202798980408e-31,1.991203598680528e-31,1.989204398380648e-31,1.9872051980807677e-31,1.985205997780888e-31,1.983206797481008e-31,1.9812075971811276e-31,1.9792083968812477e-31,1.977209196581368e-31,1.9752099962814875e-31,1.9732107959816076e-31,1.9712115956817275e-31,1.9692123953818474e-31,1.9672131950819673e-31,1.9652139947820874e-31,1.9632147944822073e-31,1.9612155941823272e-31,1.9592163938824471e-31,1.9572171935825672e-31,1.9552179932826871e-31,1.953218792982807e-31,1.951219592682927e-31,1.9492203923830468e-31,1.947221192083167e-31,1.9452219917832869e-31,1.9432227914834068e-31,1.9412235911835267e-31,1.9392243908836468e-31,1.9372251905837667e-31,1.9352259902838866e-31,1.9332267899840065e-31,1.9312275896841266e-31,1.9292283893842465e-31,1.9272291890843664e-31,1.9252299887844863e-31,1.9232307884846064e-31,1.9212315881847263e-31,1.9192323878848462e-31,1.917233187584966e-31,1.9152339872850862e-31,1.9132347869852061e-31,1.911235586685326e-31,1.909236386385446e-31,1.907237186085566e-31,1.905237985785686e-31,1.9032387854858058e-31,1.9012395851859257e-31,1.8992403848860458e-31,1.8972411845861657e-31,1.8952419842862856e-31,1.8932427839864055e-31,1.8912435836865257e-31,1.8892443833866456e-31,1.8872451830867655e-31,1.8852459827868854e-31,1.8832467824870052e-31,1.8812475821871254e-31,1.8792483818872453e-31,1.8772491815873652e-31,1.875249981287485e-31,1.8732507809876052e-31,1.871251580687725e-31,1.869252380387845e-31,1.8672531800879649e-31,1.865253979788085e-31,1.863254779488205e-31,1.8612555791883248e-31,1.8592563788884447e-31,1.8572571785885648e-31,1.8552579782886847e-31,1.8532587779888046e-31,1.8512595776889245e-31,1.8492603773890446e-31,1.8472611770891645e-31,1.8452619767892844e-31,1.8432627764894043e-31,1.8412635761895244e-31,1.8392643758896443e-31,1.8372651755897642e-31,1.8352659752898841e-31,1.8332667749900043e-31,1.8312675746901242e-31,1.829268374390244e-31,1.827269174090364e-31,1.825269973790484e-31,1.823270773490604e-31,1.8212715731907239e-31,1.8192723728908438e-31,1.8172731725909637e-31,1.8152739722910838e-31,1.8132747719912037e-31,1.8112755716913236e-31,1.8092763713914435e-31,1.8072771710915636e-31,1.8052779707916835e-31,1.8032787704918034e-31,1.8012795701919233e-31,1.7992803698920434e-31,1.7972811695921633e-31,1.7952819692922832e-31,1.793282768992403e-31,1.7912835686925232e-31,1.7892843683926431e-31,1.787285168092763e-31,1.785285967792883e-31,1.783286767493003e-31,1.781287567193123e-31,1.7792883668932428e-31,1.7772891665933627e-31,1.7752899662934829e-31,1.7732907659936028e-31,1.7712915656937226e-31,1.7692923653938425e-31,1.7672931650939627e-31,1.7652939647940826e-31,1.7632947644942025e-31,1.7612955641943224e-31,1.7592963638944423e-31,1.7572971635945624e-31,1.7552979632946823e-31,1.7532987629948022e-31,1.751299562694922e-31,1.7493003623950422e-31,1.747301162095162e-31,1.745301961795282e-31,1.7433027614954019e-31,1.741303561195522e-31,1.739304360895642e-31,1.7373051605957618e-31,1.7353059602958817e-31,1.7333067599960018e-31,1.7313075596961217e-31,1.7293083593962416e-31,1.7273091590963615e-31,1.7253099587964816e-31,1.7233107584966015e-31,1.7213115581967214e-31,1.7193123578968413e-31,1.7173131575969614e-31,1.7153139572970813e-31,1.7133147569972012e-31,1.7113155566973211e-31,1.7093163563974413e-31,1.7073171560975612e-31,1.705317955797681e-31,1.703318755497801e-31,1.701319555197921e-31,1.699320354898041e-31,1.6973211545981609e-31,1.6953219542982808e-31,1.6933227539984007e-31,1.6913235536985208e-31,1.6893243533986407e-31,1.6873251530987606e-31,1.6853259527988805e-31,1.6833267524990006e-31,1.6813275521991205e-31,1.6793283518992404e-31,1.6773291515993603e-31,1.6753299512994804e-31,1.6733307509996003e-31,1.6713315506997202e-31,1.6693323503998401e-31,1.6673331500999602e-31,1.6653339498000801e-31,1.6633347495002e-31,1.66133554920032e-31,1.65933634890044e-31,1.65733714860056e-31,1.6553379483006798e-31,1.6533387480007997e-31,1.6513395477009199e-31,1.6493403474010398e-31,1.6473411471011597e-31,1.6453419468012796e-31,1.6433427465013997e-31,1.6413435462015196e-31,1.6393443459016395e-31,1.6373451456017594e-31,1.6353459453018795e-31,1.6333467450019994e-31,1.6313475447021193e-31,1.6293483444022392e-31,1.627349144102359e-31,1.6253499438024792e-31,1.623350743502599e-31,1.621351543202719e-31,1.619352342902839e-31,1.617353142602959e-31,1.615353942303079e-31,1.6133547420031988e-31,1.6113555417033187e-31,1.6093563414034388e-31,1.6073571411035587e-31,1.6053579408036786e-31,1.6033587405037985e-31,1.6013595402039186e-31,1.5993603399040385e-31,1.5973611396041584e-31,1.5953619393042783e-31,1.5933627390043985e-31,1.5913635387045184e-31,1.5893643384046383e-31,1.5873651381047582e-31,1.5853659378048783e-31,1.5833667375049982e-31,1.581367537205118e-31,1.579368336905238e-31,1.577369136605358e-31,1.575369936305478e-31,1.5733707360055979e-31,1.5713715357057178e-31,1.569372335405838e-31,1.5673731351059578e-31,1.5653739348060777e-31,1.5633747345061976e-31,1.5613755342063175e-31,1.5593763339064376e-31,1.5573771336065575e-31,1.5553779333066774e-31,1.5533787330067973e-31,1.5513795327069174e-31,1.5493803324070373e-31,1.5473811321071572e-31,1.5453819318072771e-31,1.5433827315073972e-31,1.5413835312075171e-31,1.539384330907637e-31,1.537385130607757e-31,1.535385930307877e-31,1.533386730007997e-31,1.5313875297081169e-31,1.5293883294082368e-31,1.5273891291083569e-31,1.5253899288084768e-31,1.5233907285085967e-31,1.5213915282087166e-31,1.5193923279088367e-31,1.5173931276089566e-31,1.5153939273090765e-31,1.5133947270091964e-31,1.5113955267093165e-31,1.5093963264094364e-31,1.5073971261095563e-31,1.5053979258096762e-31,1.5033987255097963e-31,1.5013995252099162e-31,1.4994003249100361e-31,1.497401124610156e-31,1.495401924310276e-31,1.493402724010396e-31,1.491403523710516e-31,1.4894043234106358e-31,1.4874051231107557e-31,1.4854059228108758e-31,1.4834067225109957e-31,1.4814075222111156e-31,1.4794083219112355e-31,1.4774091216113557e-31,1.4754099213114756e-31,1.4734107210115955e-31,1.4714115207117154e-31,1.4694123204118355e-31,1.4674131201119554e-31,1.4654139198120753e-31,1.4634147195121952e-31,1.4614155192123153e-31,1.4594163189124352e-31,1.457417118612555e-31,1.455417918312675e-31,1.453418718012795e-31,1.451419517712915e-31,1.449420317413035e-31,1.4474211171131548e-31,1.445421916813275e-31,1.4434227165133948e-31,1.4414235162135147e-31,1.4394243159136346e-31,1.4374251156137545e-31,1.4354259153138746e-31,1.4334267150139945e-31,1.4314275147141144e-31,1.4294283144142343e-31,1.4274291141143544e-31,1.4254299138144743e-31,1.4234307135145942e-31,1.4214315132147141e-31,1.4194323129148343e-31,1.4174331126149542e-31,1.415433912315074e-31,1.413434712015194e-31,1.411435511715314e-31,1.409436311415434e-31,1.4074371111155539e-31,1.4054379108156738e-31,1.4034387105157939e-31,1.4014395102159138e-31,1.3994403099160337e-31,1.3974411096161536e-31,1.3954419093162737e-31,1.3934427090163936e-31,1.3914435087165135e-31,1.3894443084166334e-31,1.3874451081167535e-31,1.3854459078168734e-31,1.3834467075169933e-31,1.3814475072171132e-31,1.3794483069172333e-31,1.3774491066173532e-31,1.3754499063174731e-31,1.373450706017593e-31,1.371451505717713e-31,1.369452305417833e-31,1.367453105117953e-31,1.3654539048180728e-31,1.3634547045181927e-31,1.3614555042183129e-31,1.3594563039184328e-31,1.3574571036185527e-31,1.3554579033186725e-31,1.3534587030187927e-31,1.3514595027189126e-31,1.3494603024190325e-31,1.3474611021191524e-31,1.3454619018192725e-31,1.3434627015193924e-31,1.3414635012195123e-31,1.3394643009196322e-31,1.3374651006197523e-31,1.3354659003198722e-31,1.333466700019992e-31,1.331467499720112e-31,1.3294682994202321e-31,1.327469099120352e-31,1.325469898820472e-31,1.3234706985205918e-31,1.321471498220712e-31,1.3194722979208318e-31,1.3174730976209517e-31,1.3154738973210716e-31,1.3134746970211917e-31,1.3114754967213116e-31,1.3094762964214315e-31,1.3074770961215514e-31,1.3054778958216713e-31,1.3034786955217915e-31,1.3014794952219114e-31,1.2994802949220312e-31,1.2974810946221511e-31,1.2954818943222713e-31,1.2934826940223912e-31,1.291483493722511e-31,1.289484293422631e-31,1.287485093122751e-31,1.285485892822871e-31,1.2834866925229909e-31,1.2814874922231108e-31,1.279488291923231e-31,1.2774890916233508e-31,1.2754898913234707e-31,1.2734906910235906e-31,1.2714914907237107e-31,1.2694922904238306e-31,1.2674930901239505e-31,1.2654938898240704e-31,1.2634946895241905e-31,1.2614954892243104e-31,1.2594962889244303e-31,1.2574970886245502e-31,1.2554978883246703e-31,1.2534986880247902e-31,1.2514994877249101e-31,1.24950028742503e-31,1.2475010871251502e-31,1.24550188682527e-31,1.24350268652539e-31,1.2415034862255098e-31,1.2395042859256297e-31,1.2375050856257499e-31,1.2355058853258698e-31,1.2335066850259897e-31,1.2315074847261096e-31,1.2295082844262297e-31,1.2275090841263496e-31,1.2255098838264695e-31,1.2235106835265894e-31,1.2215114832267095e-31,1.2195122829268294e-31,1.2175130826269493e-31,1.2155138823270692e-31,1.2135146820271893e-31,1.2115154817273092e-31,1.209516281427429e-31,1.207517081127549e-31,1.2055178808276691e-31,1.203518680527789e-31,1.201519480227909e-31,1.1995202799280288e-31,1.197521079628149e-31,1.1955218793282688e-31,1.1935226790283887e-31,1.1915234787285086e-31,1.1895242784286287e-31,1.1875250781287486e-31,1.1855258778288685e-31,1.1835266775289884e-31,1.1815274772291086e-31,1.1795282769292285e-31,1.1775290766293484e-31,1.1755298763294683e-31,1.1735306760295882e-31,1.1715314757297083e-31,1.1695322754298282e-31,1.167533075129948e-31,1.165533874830068e-31,1.163534674530188e-31,1.161535474230308e-31,1.1595362739304279e-31,1.1575370736305478e-31,1.155537873330668e-31,1.1535386730307878e-31,1.1515394727309077e-31,1.1495402724310276e-31,1.1475410721311477e-31,1.1455418718312676e-31,1.1435426715313875e-31,1.1415434712315074e-31,1.1395442709316275e-31,1.1375450706317474e-31,1.1355458703318673e-31,1.1335466700319872e-31,1.1315474697321073e-31,1.1295482694322272e-31,1.1275490691323471e-31,1.125549868832467e-31,1.1235506685325872e-31,1.121551468232707e-31,1.119552267932827e-31,1.1175530676329469e-31,1.1155538673330668e-31,1.1135546670331869e-31,1.1115554667333068e-31,1.1095562664334267e-31,1.1075570661335466e-31,1.1055578658336667e-31,1.1035586655337866e-31,1.1015594652339065e-31,1.0995602649340264e-31,1.0975610646341465e-31,1.0955618643342664e-31,1.0935626640343863e-31,1.0915634637345062e-31,1.0895642634346263e-31,1.0875650631347462e-31,1.0855658628348661e-31,1.083566662534986e-31,1.0815674622351061e-31,1.079568261935226e-31,1.077569061635346e-31,1.0755698613354658e-31,1.073570661035586e-31,1.0715714607357058e-31,1.0695722604358257e-31,1.0675730601359456e-31,1.0655738598360658e-31,1.0635746595361857e-31,1.0615754592363056e-31,1.0595762589364255e-31,1.0575770586365456e-31,1.0555778583366655e-31,1.0535786580367854e-31,1.0515794577369053e-31,1.0495802574370252e-31,1.0475810571371453e-31,1.0455818568372652e-31,1.043582656537385e-31,1.041583456237505e-31,1.039584255937625e-31,1.037585055637745e-31,1.035585855337865e-31,1.0335866550379848e-31,1.031587454738105e-31,1.0295882544382248e-31,1.0275890541383447e-31,1.0255898538384646e-31,1.0235906535385847e-31,1.0215914532387046e-31,1.0195922529388245e-31,1.0175930526389444e-31,1.0155938523390645e-31,1.0135946520391844e-31,1.0115954517393043e-31,1.0095962514394242e-31,1.0075970511395444e-31,1.0055978508396643e-31,1.0035986505397842e-31,1.001599450239904e-31,9.996002499400242e-32,9.97601049640144e-32,9.95601849340264e-32,9.936026490403839e-32,9.91603448740504e-32,9.896042484406239e-32,9.876050481407438e-32,9.856058478408637e-32,9.836066475409837e-32,9.816074472411036e-32,9.796082469412236e-32,9.776090466413435e-32,9.756098463414635e-32,9.736106460415834e-32,9.716114457417034e-32,9.696122454418233e-32,9.676130451419433e-32,9.656138448420632e-32,9.636146445421832e-32,9.616154442423031e-32,9.596162439424231e-32,9.57617043642543e-32,9.55617843342663e-32,9.536186430427829e-32,9.51619442742903e-32,9.496202424430228e-32,9.476210421431429e-32,9.456218418432628e-32,9.436226415433828e-32,9.416234412435027e-32,9.396242409436227e-32,9.376250406437426e-32,9.356258403438626e-32,9.336266400439825e-32,9.316274397441025e-32,9.296282394442224e-32,9.276290391443424e-32,9.256298388444623e-32,9.236306385445823e-32,9.216314382447022e-32,9.196322379448221e-32,9.176330376449421e-32,9.15633837345062e-32,9.13634637045182e-32,9.116354367453019e-32,9.096362364454219e-32,9.076370361455418e-32,9.056378358456618e-32,9.036386355457817e-32,9.016394352459017e-32,8.996402349460216e-32,8.976410346461416e-32,8.956418343462615e-32,8.936426340463815e-32,8.916434337465014e-32,8.896442334466215e-32,8.876450331467414e-32,8.856458328468614e-32,8.836466325469813e-32,8.816474322471013e-32,8.796482319472212e-32,8.776490316473412e-32,8.756498313474611e-32,8.736506310475811e-32,8.71651430747701e-32,8.69652230447821e-32,8.676530301479409e-32,8.656538298480609e-32,8.636546295481808e-32,8.616554292483008e-32,8.596562289484207e-32,8.576570286485406e-32,8.556578283486606e-32,8.536586280487805e-32,8.516594277489005e-32,8.496602274490204e-32,8.476610271491404e-32,8.456618268492603e-32,8.436626265493803e-32,8.416634262495002e-32,8.396642259496202e-32,8.376650256497401e-32,8.356658253498601e-32,8.3366662504998e-32,8.316674247501e-32,8.2966822445022e-32,8.2766902415034e-32,8.256698238504599e-32,8.236706235505799e-32,8.216714232506998e-32,8.196722229508198e-32,8.176730226509397e-32,8.156738223510597e-32,8.136746220511796e-32,8.116754217512996e-32,8.096762214514195e-32,8.076770211515395e-32,8.056778208516594e-32,8.036786205517794e-32,8.016794202518993e-32,7.996802199520193e-32,7.976810196521392e-32,7.956818193522592e-32,7.936826190523791e-32,7.91683418752499e-32,7.89684218452619e-32,7.876850181527389e-32,7.856858178528589e-32,7.836866175529788e-32,7.816874172530988e-32,7.796882169532187e-32,7.776890166533387e-32,7.756898163534586e-32,7.736906160535787e-32,7.716914157536985e-32,7.696922154538186e-32,7.676930151539385e-32,7.656938148540585e-32,7.636946145541784e-32,7.616954142542984e-32,7.596962139544183e-32,7.576970136545383e-32,7.556978133546582e-32,7.536986130547782e-32,7.516994127548981e-32,7.497002124550181e-32,7.47701012155138e-32,7.45701811855258e-32,7.437026115553779e-32,7.417034112554979e-32,7.397042109556178e-32,7.377050106557378e-32,7.357058103558577e-32,7.337066100559777e-32,7.317074097560976e-32,7.297082094562175e-32,7.277090091563375e-32,7.257098088564574e-32,7.237106085565774e-32,7.217114082566973e-32,7.197122079568173e-32,7.177130076569372e-32,7.157138073570572e-32,7.137146070571771e-32,7.117154067572972e-32,7.09716206457417e-32,7.077170061575371e-32,7.05717805857657e-32,7.03718605557777e-32,7.017194052578969e-32,6.997202049580169e-32,6.977210046581368e-32,6.957218043582568e-32,6.937226040583767e-32,6.917234037584967e-32,6.897242034586166e-32,6.877250031587366e-32,6.857258028588565e-32,6.837266025589765e-32,6.817274022590964e-32,6.797282019592164e-32,6.777290016593363e-32,6.757298013594563e-32,6.737306010595762e-32,6.717314007596962e-32,6.697322004598161e-32,6.677330001599361e-32,6.65733799860056e-32,6.637345995601759e-32,6.617353992602959e-32,6.597361989604158e-32,6.577369986605358e-32,6.557377983606557e-32,6.537385980607758e-32,6.517393977608957e-32,6.497401974610157e-32,6.477409971611356e-32,6.457417968612556e-32,6.437425965613755e-32,6.417433962614955e-32,6.397441959616154e-32,6.377449956617354e-32,6.357457953618553e-32,6.337465950619753e-32,6.317473947620952e-32,6.297481944622152e-32,6.277489941623351e-32,6.257497938624551e-32,6.23750593562575e-32,6.21751393262695e-32,6.197521929628149e-32,6.177529926629349e-32,6.157537923630548e-32,6.137545920631748e-32,6.117553917632947e-32,6.097561914634147e-32,6.077569911635346e-32,6.057577908636546e-32,6.037585905637745e-32,6.017593902638945e-32,5.997601899640144e-32,5.977609896641343e-32,5.957617893642544e-32,5.937625890643743e-32,5.917633887644943e-32,5.897641884646142e-32,5.877649881647342e-32,5.857657878648541e-32,5.837665875649741e-32,5.81767387265094e-32,5.79768186965214e-32,5.777689866653339e-32,5.757697863654539e-32,5.737705860655738e-32,5.717713857656938e-32,5.697721854658137e-32,5.677729851659337e-32,5.657737848660536e-32,5.637745845661736e-32,5.617753842662935e-32,5.597761839664135e-32,5.577769836665334e-32,5.557777833666534e-32,5.537785830667733e-32,5.517793827668933e-32,5.497801824670132e-32,5.477809821671332e-32,5.457817818672531e-32,5.437825815673731e-32,5.41783381267493e-32,5.39784180967613e-32,5.37784980667733e-32,5.357857803678528e-32,5.337865800679729e-32,5.317873797680928e-32,5.297881794682128e-32,5.277889791683327e-32,5.257897788684527e-32,5.237905785685726e-32,5.217913782686926e-32,5.197921779688125e-32,5.177929776689325e-32,5.157937773690524e-32,5.137945770691724e-32,5.117953767692923e-32,5.097961764694123e-32,5.077969761695322e-32,5.057977758696522e-32,5.037985755697721e-32,5.017993752698921e-32,4.99800174970012e-32,4.97800974670132e-32,4.958017743702519e-32,4.938025740703719e-32,4.9180337377049183e-32,4.898041734706118e-32,4.8780497317073173e-32,4.858057728708517e-32,4.8380657257097164e-32,4.818073722710916e-32,4.7980817197121155e-32,4.778089716713315e-32,4.7580977137145146e-32,4.738105710715714e-32,4.7181137077169136e-32,4.698121704718113e-32,4.6781297017193127e-32,4.658137698720512e-32,4.638145695721712e-32,4.6181536927229113e-32,4.598161689724111e-32,4.5781696867253104e-32,4.55817768372651e-32,4.5381856807277095e-32,4.518193677728909e-32,4.4982016747301085e-32,4.478209671731308e-32,4.4582176687325076e-32,4.438225665733707e-32,4.4182336627349067e-32,4.3982416597361057e-32,4.378249656737305e-32,4.3582576537385047e-32,4.338265650739704e-32,4.318273647740904e-32,4.2982816447421033e-32,4.278289641743303e-32,4.2582976387445024e-32,4.238305635745702e-32,4.2183136327469015e-32,4.198321629748101e-32,4.1783296267493005e-32,4.1583376237505e-32,4.1383456207516996e-32,4.118353617752899e-32,4.0983616147540987e-32,4.078369611755298e-32,4.058377608756498e-32,4.0383856057576973e-32,4.018393602758897e-32,3.9984015997600964e-32,3.978409596761296e-32,3.9584175937624954e-32,3.938425590763695e-32,3.9184335877648945e-32,3.898441584766094e-32,3.8784495817672936e-32,3.858457578768493e-32,3.8384655757696926e-32,3.818473572770892e-32,3.7984815697720917e-32,3.778489566773291e-32,3.758497563774491e-32,3.73850556077569e-32,3.7185135577768893e-32,3.698521554778089e-32,3.6785295517792884e-32,3.658537548780488e-32,3.6385455457816875e-32,3.618553542782887e-32,3.5985615397840865e-32,3.578569536785286e-32,3.5585775337864856e-32,3.538585530787685e-32,3.5185935277888847e-32,3.498601524790084e-32,3.478609521791284e-32,3.4586175187924833e-32,3.438625515793683e-32,3.4186335127948823e-32,3.398641509796082e-32,3.3786495067972814e-32,3.358657503798481e-32,3.3386655007996805e-32,3.31867349780088e-32,3.2986814948020796e-32,3.278689491803279e-32,3.2586974888044786e-32,3.238705485805678e-32,3.2187134828068777e-32,3.198721479808077e-32,3.178729476809277e-32,3.1587374738104763e-32,3.138745470811676e-32,3.1187534678128754e-32,3.0987614648140744e-32,3.078769461815274e-32,3.0587774588164734e-32,3.038785455817673e-32,3.0187934528188725e-32,2.998801449820072e-32,2.9788094468212716e-32,2.958817443822471e-32,2.9388254408236707e-32,2.91883343782487e-32,2.8988414348260697e-32,2.878849431827269e-32,2.858857428828469e-32,2.8388654258296683e-32,2.818873422830868e-32,2.7988814198320674e-32,2.778889416833267e-32,2.7588974138344665e-32,2.738905410835666e-32,2.7189134078368655e-32,2.698921404838065e-32,2.6789294018392646e-32,2.658937398840464e-32,2.6389453958416637e-32,2.618953392842863e-32,2.598961389844063e-32,2.5789693868452623e-32,2.558977383846462e-32,2.5389853808476614e-32,2.518993377848861e-32,2.4990013748500604e-32,2.47900937185126e-32,2.4590173688524592e-32,2.4390253658536588e-32,2.4190333628548583e-32,2.3990413598560578e-32,2.3790493568572574e-32,2.359057353858457e-32,2.3390653508596564e-32,2.319073347860856e-32,2.2990813448620552e-32,2.2790893418632548e-32,2.2590973388644543e-32,2.2391053358656538e-32,2.2191133328668534e-32,2.199121329868053e-32,2.1791293268692525e-32,2.159137323870452e-32,2.1391453208716515e-32,2.119153317872851e-32,2.0991613148740506e-32,2.07916931187525e-32,2.0591773088764497e-32,2.0391853058776492e-32,2.0191933028788487e-32,1.9992012998800483e-32,1.9792092968812475e-32,1.959217293882447e-32,1.9392252908836466e-32,1.9192332878848461e-32,1.8992412848860457e-32,1.8792492818872452e-32,1.8592572788884447e-32,1.8392652758896443e-32,1.8192732728908438e-32,1.7992812698920434e-32,1.779289266893243e-32,1.7592972638944424e-32,1.739305260895642e-32,1.7193132578968415e-32,1.699321254898041e-32,1.6793292518992406e-32,1.6593372489004398e-32,1.6393452459016394e-32,1.619353242902839e-32,1.5993612399040384e-32,1.579369236905238e-32,1.5593772339064375e-32,1.539385230907637e-32,1.5193932279088366e-32,1.499401224910036e-32,1.4794092219112357e-32,1.4594172189124352e-32,1.4394252159136347e-32,1.4194332129148343e-32,1.3994412099160338e-32,1.3794492069172333e-32,1.359457203918433e-32,1.339465200919632e-32,1.3194731979208317e-32,1.2994811949220312e-32,1.2794891919232307e-32,1.2594971889244303e-32,1.2395051859256298e-32,1.2195131829268293e-32,1.1995211799280289e-32,1.1795291769292284e-32,1.159537173930428e-32,1.1395451709316275e-32,1.119553167932827e-32,1.0995611649340264e-32,1.079569161935226e-32,1.0595771589364255e-32,1.039585155937625e-32,1.0195931529388246e-32,9.996011499400241e-33,9.796091469412236e-33,9.596171439424232e-33,9.396251409436226e-33,9.196331379448221e-33,8.996411349460216e-33,8.796491319472212e-33,8.596571289484207e-33,8.396651259496202e-33,8.196731229508198e-33,7.996811199520193e-33,7.796891169532187e-33,7.596971139544182e-33,7.397051109556178e-33,7.197131079568173e-33,6.997211049580169e-33,6.797291019592164e-33,6.597370989604159e-33,6.397450959616155e-33,6.19753092962815e-33,5.9976108996401446e-33,5.79769086965214e-33,5.5977708396641346e-33,5.39785080967613e-33,5.197930779688125e-33,4.998010749700121e-33,4.7980907197121154e-33,4.598170689724111e-33,4.398250659736106e-33,4.1983306297481014e-33,3.998410599760096e-33,3.7984905697720915e-33,3.598570539784087e-33,3.398650509796082e-33,3.198730479808077e-33,2.9988104498200722e-33,2.7988904198320676e-33,2.5989703898440626e-33,2.399050359856058e-33,2.199130329868053e-33,1.9992102998800483e-33,1.7992902698920433e-33,1.5993702399040387e-33,1.3994502099160337e-33,1.1995301799280289e-33,9.99610149940024e-34,7.996901199520192e-34,5.997700899640144e-34,3.998500599760096e-34,1.999300299880048e-34,1.0e-38]}

},{}],106:[function(require,module,exports){
module.exports={"expected":[-0.27144176165949063,-0.26983871933084325,-0.26827289306844765,-0.26674278391664363,-0.26524699629517506,-0.2637842113780734,-0.2623531636218688,-0.26095267901461255,-0.25958162176434785,-0.25823893215365745,-0.2569236042671694,-0.2556346662022879,-0.254371210386881,-0.2531323732923691,-0.2519173173306836,-0.250725259914923,-0.24955545482916067,-0.24840717553555522,-0.2472797429991166,-0.24617250379086697,-0.24508484252892795,-0.2440161433804127,-0.24296584407281802,-0.24193339728454075,-0.24091827865944984,-0.23991998556973596,-0.2389380442489298,-0.2379719754207168,-0.2370213434250626,-0.23608572170603107,-0.23516470034894418,-0.2342578929046808,-0.23336490485607037,-0.23248537918437015,-0.23161896468836676,-0.2307653231107882,-0.229924128524898,-0.22909507376186197,-0.22827784174477267,-0.2274721473074136,-0.22667770838397755,-0.22589425265774676,-0.22512152365939897,-0.22435925414148156,-0.22360720514761528,-0.22286513924935045,-0.22213282682002647,-0.22141004570475162,-0.22069658694064712,-0.21999223025017614,-0.2192967801902886,-0.21861004151816865,-0.21793182504830907,-0.2172619530768121,-0.21660023641701073,-0.21594650838604015,-0.2153006017216972,-0.2146623541202478,-0.21403160804701943,-0.2134082158307096,-0.21279201833093164,-0.2121828766063907,-0.21158065047400737,-0.21098520369589174,-0.2103964038362122,-0.20981412705282254,-0.20923823819890988,-0.20866862043110887,-0.20810515521240436,-0.2075477271809346,-0.20699622870924955,-0.20645054107444383,-0.20591056251916245,-0.2053761893304203,-0.20484732046599566,-0.20432385746570664,-0.2038057087539596,-0.203292771963359,-0.20278496031509197,-0.2022821848593529,-0.20178435883545295,-0.20129140177742236,-0.20080322270631873,-0.20031974523848103,-0.19984089070078773,-0.19936658228738505,-0.1988967450024797,-0.19843130954811794,-0.1979701964632698,-0.19751333596959827,-0.19706067139208197,-0.19661212818793486,-0.19616763360365116,-0.19572713901360453,-0.1952905670843083,-0.19485787172370933,-0.19442898585517554,-0.19400384396498677,-0.19358240348380037,-0.1931645942511092,-0.19275037587592425,-0.19233968776521962,-0.19193247069801245,-0.19152868731874156,-0.19112827373179486,-0.19073119446264888,-0.19033739457541882,-0.1899468203443806,-0.18955943892148008,-0.1891751919082887,-0.1887940480875993,-0.18841595107141368,-0.1880408711845167,-0.18766876026065032,-0.18729957115615956,-0.18693327635454557,-0.18656982407897008,-0.18620918815678106,-0.1858513245726307,-0.18549619022234654,-0.18514376081784986,-0.18479398866920227,-0.18444685066349528,-0.18410230645861428,-0.1837603165274531,-0.18342085940779448,-0.18308389104567707,-0.18274939100984014,-0.1824173165885481,-0.182087648329726,-0.1817603503564128,-0.1814353874930561,-0.18111274166586602,-0.18079237326860698,-0.18047426509007652,-0.180158384032467,-0.17984469763062783,-0.179533189889201,-0.17922382398776665,-0.17891658469292365,-0.1786114413949197,-0.17830836405646583,-0.17800733851955908,-0.1777083304707035,-0.177411326426694,-0.17711629300666537,-0.17682321737064513,-0.17653207197297924,-0.17624282976821948,-0.17595547882576074,-0.17566998793831587,-0.175386345746838,-0.1751045266367071,-0.17482450544909806,-0.17454627163390493,-0.1742697959534472,-0.17399506836661285,-0.17372206500445897,-0.17345076241448398,-0.17318115127672426,-0.17291320414303427,-0.1726469121476704,-0.1723822530038632,-0.172119204806302,-0.17185775933342134,-0.17159789076713897,-0.1713395912920205,-0.17108283570143254,-0.1708276165684949,-0.1705739135821693,-0.17032170677015623,-0.17007098925733044,-0.1698217372732589,-0.16957394429111314,-0.1693275912617117,-0.1690826594479179,-0.16883914281791051,-0.1685970189168826,-0.16835628202574585,-0.16811691424807534,-0.16787889797552866,-0.16764222793383265,-0.16740688287598918,-0.1671728578089654,-0.16694013194124635,-0.16670870054946108,-0.16647854718967406,-0.16624965567644404,-0.1660220216703462,-0.16579562545516258,-0.165570462934466,-0.16534651860006444,-0.16512377718357318,-0.16490223493477915,-0.16468187312946816,-0.16446268823668828,-0.1642446656089549,-0.1640277908216734,-0.16381206065648304,-0.16359745730606837,-0.16338397775015656,-0.16317160813440862,-0.16296033481202593,-0.16275015504530596,-0.16254105187595813,-0.16233302274544484,-0.1621260510175409,-0.1619201343058726,-0.1617152597654154,-0.16151141473949968,-0.16130859708752376,-0.16110679093785613,-0.16090599430584004,-0.160706195002938,-0.16050738101670656,-0.1603095505852144,-0.1601126885477285,-0.15991679328370478,-0.1597218532130497,-0.15952785692056046,-0.1593348029877146,-0.15914267691581102,-0.15895147741462584,-0.15876119023756963,-0.15857181421785466,-0.15838333855477363,-0.15819575259839236,-0.15800905535839171,-0.15782323318893748,-0.1576382852118392,-0.15745420113656813,-0.15727097081427613,-0.15708859042987192,-0.15690705927374282,-0.15672635818930813,-0.15654648665271978,-0.1563674441040018,-0.1561892117865568,-0.15601178931859533,-0.1558351702823644,-0.1556593543046556,-0.15548432314038715,-0.15531007658503812,-0.15513661439652884,-0.1549639186979265,-0.15479198940913727,-0.1546208264120322,-0.15445041218524352,-0.15428074676626446,-0.15411182441598814,-0.15394364517109252,-0.15377619196572584,-0.15360946498419403,-0.1534434643719264,-0.15327817339148378,-0.15311359233027147,-0.15294971586953046,-0.15278654429055666,-0.15262406127713093,-0.15246226724541467,-0.15230116257217421,-0.15214073124522312,-0.15198097377115902,-0.15182189061704598,-0.1516634660650431,-0.1515057007072511,-0.1513485897585882,-0.1511921337989575,-0.1510363174886352,-0.1508811415265175,-0.1507266065718097,-0.1505726975581284,-0.1504194152593847,-0.15026675522322142,-0.15011471820794414,-0.14996328949866616,-0.14981246996298778,-0.14966226042885822,-0.1495126464357446,-0.14936362891704746,-0.14921520876658398,-0.14906737177059606,-0.14892011892468188,-0.14877344620149607,-0.14862735457715062,-0.14848183015566477,-0.14833687401029097,-0.14819248717495653,-0.14804865598394878,-0.14790538156503366,-0.1477626601574042,-0.14762049286719764,-0.14747886632549612,-0.14733778172809597,-0.14719724023184425,-0.1470572286830811,-0.14691774832533527,-0.14677880036337718,-0.1466403718527884,-0.1465024640821709,-0.14636507363306125,-0.14622820177003942,-0.1460918358187161,-0.14595597712388944,-0.14582062699210316,-0.14568577294505342,-0.14555141636692398,-0.14541755860388172,-0.1452841873684227,-0.14515130408188248,-0.1450189056287111,-0.14488699340446837,-0.14475555536816845,-0.144624592987402,-0.14449410769233814,-0.14436408762120903,-0.14423453427397245,-0.14410544472660908,-0.14397682045238344,-0.14384864982126125,-0.14372093437344585,-0.14359367561236108,-0.14346686207657075,-0.1433404953343992,-0.14321457691767772,-0.1430890955292864,-0.14296405276399915,-0.14283944594570055,-0.14271527664152175,-0.14259153376703168,-0.14246821894981182,-0.14234533378164008,-0.14222286733298742,-0.1421008212542972,-0.14197919302691947,-0.14185798427320132,-0.14173718426425705,-0.14161679467882549,-0.141496817160553,-0.14137724112678385,-0.141258068275926,-0.14113930027160498,-0.14102092667388685,-0.14090294919958998,-0.14078536553475476,-0.14066817736770101,-0.140551374443537,-0.14043495850177426,-0.1403189312478724,-0.14020328256192519,-0.1400880141991477,-0.1399731239761404,-0.13985861361948151,-0.13974447318438743,-0.13963070444535816,-0.13951730914357868,-0.1394042774620943,-0.1392916111886945,-0.1391793120781703,-0.13906737043849268,-0.1389557880697873,-0.13884456295904082,-0.1387336968777109,-0.1386231802959794,-0.13851301502901534,-0.1384032028597279,-0.13829373437680342,-0.13818461140569505,-0.1380758320424856,-0.13796739808403513,-0.13785930027299162,-0.13775154044726579,-0.13764412041324367,-0.1375370310261148,-0.13743027413224124,-0.13732385154677362,-0.13721775423501748,-0.13711198405106162,-0.13700653923388084,-0.1369014216091889,-0.13679662228546677,-0.13669214312603734,-0.13658798596373786,-0.13648414201178713,-0.13638061313967395,-0.1362774011867098,-0.1361744974686603,-0.13607190386056306,-0.1359696187306515,-0.13586764392591147,-0.13576597089554138,-0.13566460152106685,-0.1355635376545482,-0.13546277084286568,-0.13536230297176371,-0.13526213249269256,-0.13516226126362105,-0.13506268095859505,-0.13496339346817016,-0.13486440065413682,-0.13476569428368032,-0.1346672762503857,-0.13456914841936923,-0.13447130264910082,-0.13437374083572462,-0.13427646154025424,-0.13417946663150881,-0.13408274808687606,-0.13398630780521864,-0.13389014765761234,-0.13379425970860157,-0.13369864585859448,-0.1336033047393616,-0.13350823822433283,-0.13341343849164447,-0.13331890744314526,-0.13322464695356484,-0.13313064928433008,-0.13303691633792902,-0.1329434499900125,-0.13285024258371575,-0.13275729602180794,-0.13266460902949465,-0.13257218348309638,-0.13248001183230565,-0.13238809597973814,-0.13229643780181932,-0.13220502982642182,-0.1321138739556708,-0.13202296897528767,-0.1319323167613383,-0.1318419099436937,-0.13175175042335324,-0.13166184007575785,-0.13157217160564472,-0.13148274691283351,-0.13139356787185166,-0.1313046272609436,-0.13121592697847728,-0.13112746589030624,-0.13103924586931426,-0.13095125978970254,-0.1308635095475023,-0.13077599701406217,-0.13068871513405453,-0.1306016658014733,-0.1305148479342116,-0.1304282634011912,-0.1303419052391132,-0.13025577533889762,-0.13016987556737633,-0.1300841990288622,-0.12999874761171626,-0.12991352318046126,-0.12982851890584737,-0.1297437366734709,-0.1296591754703105,-0.12957483715748766,-0.1294907149925588,-0.12940681085713124,-0.12932312660954642,-0.12923965557116895,-0.1291563996203999,-0.12907336061261493,-0.1289905319319058,-0.12890791545329347,-0.1288255102272165,-0.12874331810482303,-0.12866133255220458,-0.12857955543961988,-0.1284979886148527,-0.12841662560429942,-0.1283354682744662,-0.12825451571716523,-0.12817376977545175,-0.1280932240545821,-0.12801288041583267,-0.12793274069854044,-0.1278527985659767,-0.1277730558753356,-0.1276935144620966,-0.12761416804660294,-0.12753501848183707,-0.12745606491474296,-0.1273773091754526,-0.12729874505897615,-0.12722037441249076,-0.12714219906197352,-0.1270642128573899,-0.12698641764142948,-0.1269088125970615,-0.1268313995445426,-0.12675417240575856,-0.1266771330172485,-0.12660028319485134,-0.12652361691340314,-0.1264471360047126,-0.12637084228009815,-0.126294729766519,-0.1262188002909589,-0.12614305308449614,-0.12606748995227154,-0.12599210498948732],"x":[-50.0,-50.896414342629484,-51.79282868525896,-52.689243027888445,-53.58565737051793,-54.48207171314741,-55.37848605577689,-56.27490039840637,-57.17131474103586,-58.06772908366534,-58.96414342629482,-59.8605577689243,-60.756972111553786,-61.65338645418327,-62.54980079681275,-63.44621513944223,-64.34262948207171,-65.2390438247012,-66.13545816733068,-67.03187250996017,-67.92828685258964,-68.82470119521912,-69.7211155378486,-70.61752988047809,-71.51394422310757,-72.41035856573706,-73.30677290836654,-74.20318725099601,-75.0996015936255,-75.99601593625498,-76.89243027888446,-77.78884462151395,-78.68525896414343,-79.58167330677291,-80.4780876494024,-81.37450199203187,-82.27091633466135,-83.16733067729083,-84.06374501992032,-84.9601593625498,-85.85657370517929,-86.75298804780877,-87.64940239043824,-88.54581673306772,-89.44223107569721,-90.33864541832669,-91.23505976095618,-92.13147410358566,-93.02788844621514,-93.92430278884463,-94.8207171314741,-95.71713147410358,-96.61354581673307,-97.50996015936255,-98.40637450199203,-99.30278884462152,-100.199203187251,-101.09561752988049,-101.99203187250995,-102.88844621513944,-103.78486055776892,-104.6812749003984,-105.57768924302789,-106.47410358565737,-107.37051792828686,-108.26693227091633,-109.16334661354581,-110.0597609561753,-110.95617529880478,-111.85258964143426,-112.74900398406375,-113.64541832669323,-114.54183266932272,-115.43824701195219,-116.33466135458167,-117.23107569721115,-118.12749003984064,-119.02390438247012,-119.9203187250996,-120.81673306772909,-121.71314741035856,-122.60956175298804,-123.50597609561753,-124.40239043824701,-125.2988047808765,-126.19521912350598,-127.09163346613546,-127.98804780876495,-128.88446215139442,-129.78087649402391,-130.67729083665338,-131.57370517928288,-132.47011952191235,-133.36653386454182,-134.26294820717132,-135.1593625498008,-136.0557768924303,-136.95219123505976,-137.84860557768926,-138.74501992031873,-139.6414342629482,-140.5378486055777,-141.43426294820716,-142.33067729083666,-143.22709163346613,-144.12350597609563,-145.0199203187251,-145.91633466135457,-146.81274900398407,-147.70916334661354,-148.60557768924303,-149.5019920318725,-150.398406374502,-151.29482071713147,-152.19123505976097,-153.08764940239044,-153.9840637450199,-154.8804780876494,-155.77689243027888,-156.67330677290838,-157.56972111553785,-158.46613545816734,-159.3625498007968,-160.25896414342628,-161.15537848605578,-162.05179282868525,-162.94820717131475,-163.84462151394422,-164.74103585657372,-165.6374501992032,-166.53386454183266,-167.43027888446215,-168.32669322709162,-169.22310756972112,-170.1195219123506,-171.0159362549801,-171.91235059760956,-172.80876494023903,-173.70517928286853,-174.601593625498,-175.4980079681275,-176.39442231075697,-177.29083665338646,-178.18725099601593,-179.08366533864543,-179.9800796812749,-180.87649402390437,-181.77290836653387,-182.66932270916334,-183.56573705179284,-184.4621513944223,-185.3585657370518,-186.25498007968127,-187.15139442231074,-188.04780876494024,-188.9442231075697,-189.8406374501992,-190.73705179282868,-191.63346613545818,-192.52988047808765,-193.42629482071712,-194.32270916334662,-195.21912350597609,-196.11553784860558,-197.01195219123505,-197.90836653386455,-198.80478087649402,-199.70119521912352,-200.597609561753,-201.49402390438246,-202.39043824701196,-203.28685258964143,-204.18326693227093,-205.0796812749004,-205.9760956175299,-206.87250996015936,-207.76892430278883,-208.66533864541833,-209.5617529880478,-210.4581673306773,-211.35458167330677,-212.25099601593627,-213.14741035856574,-214.0438247011952,-214.9402390438247,-215.83665338645417,-216.73306772908367,-217.62948207171314,-218.52589641434264,-219.4223107569721,-220.3187250996016,-221.21513944223108,-222.11155378486055,-223.00796812749005,-223.90438247011951,-224.800796812749,-225.69721115537848,-226.59362549800798,-227.49003984063745,-228.38645418326692,-229.28286852589642,-230.1792828685259,-231.0756972111554,-231.97211155378486,-232.86852589641435,-233.76494023904382,-234.6613545816733,-235.5577689243028,-236.45418326693226,-237.35059760956176,-238.24701195219123,-239.14342629482073,-240.0398406374502,-240.93625498007967,-241.83266932270917,-242.72908366533864,-243.62549800796813,-244.5219123505976,-245.4183266932271,-246.31474103585657,-247.21115537848607,-248.10756972111554,-249.003984063745,-249.9003984063745,-250.79681274900398,-251.69322709163347,-252.58964143426294,-253.48605577689244,-254.3824701195219,-255.27888446215138,-256.1752988047809,-257.0717131474104,-257.9681274900398,-258.8645418326693,-259.7609561752988,-260.6573705179283,-261.55378486055776,-262.45019920318725,-263.34661354581675,-264.2430278884462,-265.1394422310757,-266.0358565737052,-266.9322709163347,-267.82868525896413,-268.7250996015936,-269.6215139442231,-270.51792828685257,-271.41434262948206,-272.31075697211156,-273.20717131474106,-274.1035856573705,-275.0,-275.8964143426295,-276.79282868525894,-277.68924302788844,-278.58565737051794,-279.48207171314743,-280.3784860557769,-281.2749003984064,-282.17131474103587,-283.0677290836653,-283.9641434262948,-284.8605577689243,-285.7569721115538,-286.65338645418325,-287.54980079681275,-288.44621513944224,-289.3426294820717,-290.2390438247012,-291.1354581673307,-292.0318725099602,-292.9282868525896,-293.8247011952191,-294.7211155378486,-295.61752988047806,-296.51394422310756,-297.41035856573706,-298.30677290836655,-299.203187250996,-300.0996015936255,-300.996015936255,-301.8924302788845,-302.78884462151393,-303.68525896414343,-304.5816733067729,-305.47808764940237,-306.37450199203187,-307.27091633466136,-308.16733067729086,-309.0637450199203,-309.9601593625498,-310.8565737051793,-311.75298804780874,-312.64940239043824,-313.54581673306774,-314.44223107569724,-315.3386454183267,-316.2350597609562,-317.1314741035857,-318.0278884462151,-318.9243027888446,-319.8207171314741,-320.7171314741036,-321.61354581673305,-322.50996015936255,-323.40637450199205,-324.3027888446215,-325.199203187251,-326.0956175298805,-326.99203187251,-327.8884462151394,-328.7848605577689,-329.6812749003984,-330.57768924302786,-331.47410358565736,-332.37051792828686,-333.26693227091636,-334.1633466135458,-335.0597609561753,-335.9561752988048,-336.85258964143424,-337.74900398406373,-338.64541832669323,-339.54183266932273,-340.43824701195217,-341.33466135458167,-342.23107569721117,-343.12749003984067,-344.0239043824701,-344.9203187250996,-345.8167330677291,-346.71314741035854,-347.60956175298804,-348.50597609561754,-349.40239043824704,-350.2988047808765,-351.195219123506,-352.0916334661355,-352.9880478087649,-353.8844621513944,-354.7808764940239,-355.6772908366534,-356.57370517928285,-357.47011952191235,-358.36653386454185,-359.2629482071713,-360.1593625498008,-361.0557768924303,-361.9521912350598,-362.8486055776892,-363.7450199203187,-364.6414342629482,-365.53784860557766,-366.43426294820716,-367.33067729083666,-368.22709163346616,-369.1235059760956,-370.0199203187251,-370.9163346613546,-371.81274900398404,-372.70916334661354,-373.60557768924303,-374.50199203187253,-375.398406374502,-376.2948207171315,-377.19123505976097,-378.0876494023904,-378.9840637450199,-379.8804780876494,-380.7768924302789,-381.67330677290835,-382.56972111553785,-383.46613545816734,-384.3625498007968,-385.2589641434263,-386.1553784860558,-387.0517928286853,-387.9482071713147,-388.8446215139442,-389.7410358565737,-390.6374501992032,-391.53386454183266,-392.43027888446215,-393.32669322709165,-394.2231075697211,-395.1195219123506,-396.0159362549801,-396.9123505976096,-397.80876494023903,-398.7051792828685,-399.601593625498,-400.49800796812747,-401.39442231075697,-402.29083665338646,-403.18725099601596,-404.0836653386454,-404.9800796812749,-405.8764940239044,-406.77290836653384,-407.66932270916334,-408.56573705179284,-409.46215139442234,-410.3585657370518,-411.2549800796813,-412.1513944223108,-413.0478087649402,-413.9442231075697,-414.8406374501992,-415.7370517928287,-416.63346613545815,-417.52988047808765,-418.42629482071715,-419.3227091633466,-420.2191235059761,-421.1155378486056,-422.0119521912351,-422.9083665338645,-423.804780876494,-424.7011952191235,-425.59760956175296,-426.49402390438246,-427.39043824701196,-428.28685258964146,-429.1832669322709,-430.0796812749004,-430.9760956175299,-431.87250996015933,-432.76892430278883,-433.66533864541833,-434.56175298804783,-435.45816733067727,-436.35458167330677,-437.25099601593627,-438.14741035856576,-439.0438247011952,-439.9402390438247,-440.8366533864542,-441.73306772908364,-442.62948207171314,-443.52589641434264,-444.42231075697214,-445.3187250996016,-446.2151394422311,-447.1115537848606,-448.00796812749,-448.9043824701195,-449.800796812749,-450.6972111553785,-451.59362549800795,-452.49003984063745,-453.38645418326695,-454.2828685258964,-455.1792828685259,-456.0756972111554,-456.9721115537849,-457.8685258964143,-458.7649402390438,-459.6613545816733,-460.55776892430276,-461.45418326693226,-462.35059760956176,-463.24701195219126,-464.1434262948207,-465.0398406374502,-465.9362549800797,-466.83266932270914,-467.72908366533864,-468.62549800796813,-469.52191235059763,-470.4183266932271,-471.31474103585657,-472.21115537848607,-473.1075697211155,-474.003984063745,-474.9003984063745,-475.796812749004,-476.69322709163345,-477.58964143426294,-478.48605577689244,-479.38247011952194,-480.2788844621514,-481.1752988047809,-482.0717131474104,-482.9681274900398,-483.8645418326693,-484.7609561752988,-485.6573705179283,-486.55378486055776,-487.45019920318725,-488.34661354581675,-489.2430278884462,-490.1394422310757,-491.0358565737052,-491.9322709163347,-492.82868525896413,-493.7250996015936,-494.6215139442231,-495.51792828685257,-496.41434262948206,-497.31075697211156,-498.20717131474106,-499.1035856573705,-500.0]}

},{}],107:[function(require,module,exports){
module.exports={"expected":[0.27144176165949063,0.2712791534712182,0.27111694109829493,0.27095510915890453,0.27079366976160113,0.27063260760941277,0.2704719347647537,0.270311636014655,0.2701517233756388,0.2699921817179098,0.26983302301234474,0.2696742322115046,0.2695158212408666,0.26935777513454207,0.26920010577285386,0.26904279827066896,0.26888586446339996,0.2687292895458863,0.2685730853088733,0.2684172370264005,0.26826174985951406,0.2681066289165143,0.267951859588817,0.2677974535565562,0.26764339628846345,0.2674896994208486,0.26733634849902366,0.26718335511571284,0.26703070489208297,0.26687840937751034,0.2667264542683011,0.2665748510707201,0.26642358555550705,0.2662726691860506,0.26612208780682783,0.26597185283858565,0.26582195019885185,0.2656723912659644,0.26552316202982446,0.2653742675203012,0.2652257127178765,0.26507748371976136,0.26492959179928427,0.2647820231243749,0.2646347889267602,0.2644878754444422,0.2643412938677744,0.2641950305041931,0.2640490965029052,0.26390347824015203,0.26375818682421975,0.26361320869953303,0.26346855493368176,0.26332421203866135,0.2631801910415886,0.2630364785214242,0.26289308546503426,0.2627499985177475,0.26260722257904456,0.26246476250209944,0.26232260503069016,0.26218076105201993,0.26203921737477487,0.26189798484667554,0.26175705034074526,0.2616164246654389,0.2614760947575532,0.26133607138649284,0.26119634155227167,0.26105691598545844,0.2609177817487345,0.260778949534046,0.2606404064661991,0.26050216319872943,0.26036420691803197,0.2602265482394426,0.2600891744104161,0.2599520902018293,0.25981530034108086,0.2596787921662386,0.25954257619805216,0.25940663983435497,0.2592709935584247,0.25913562482735397,0.25900054408715384,0.2588657388536757,0.2587312195358679,0.25859697370784657,0.2584630117417004,0.25832932126932157,0.25819591262614083,0.2580627735013445,0.2579299141939055,0.2577973224498277,0.2576650085318258,0.2575329602422503,0.25740118222586916,0.2572696790865737,0.2571384387103653,0.2570074712701756,0.2568767647072004,0.25674632915880075,0.2566161526209154,0.25648624519552893,0.256356594932877,0.25622721189975983,0.25609808420026964,0.25596922186621385,0.25584061305510536,0.2557122677639492,0.2555841742032485,0.2554563423353948,0.25532876042345615,0.2552014330018911,0.25507436456643406,0.25494754345821385,0.2548209795539076,0.25469466124616663,0.25456859837770723,0.25444277939229487,0.25431721409886865,0.2541918909919045,0.25406681984674684,0.253941989208183,0.25381740881814435,0.2536930672713348,0.25356897427645303,0.2534451184777293,0.25332150955080907,0.25319813618906306,0.25307500803526145,0.2529521138315344,0.2528294579921879,0.2527070448950308,0.2525848633546272,0.2524629229323297,0.2523412124905269,0.2522197415583103,0.25209849904552634,0.25197749444917844,0.25185671672620846,0.2517361753417034,0.2516158592993419,0.2514957780324654,0.2513759205911347,0.2512562963771156,0.25113689448650023,0.251017724289647,0.25089877492833274,0.2507800557416761,0.25066155591679523,0.25054327975136476,0.2504252315086175,0.2503074004430492,0.2501897958164046,0.25007240692767924,0.24995524300795588,0.2498382934003999,0.24972156236063184,0.2496050590462888,0.24948876298550607,0.24937268336099677,0.24925681946883432,0.24914118040666075,0.24902574586230952,0.24891052495810156,0.24879551700305658,0.24868073103545116,0.2485661469006119,0.24845177366110577,0.24833761063859106,0.24822365715783895,0.24810992218379133,0.2479963857556078,0.24788305686204776,0.2477699348401485,0.24765702859687289,0.24754431832407103,0.24743181295215413,0.24731951183013787,0.2472074238076092,0.24709552922704217,0.24698383696111134,0.24687234637053093,0.24676106624810745,0.24664997708491254,0.24653908769648764,0.24642839745497352,0.24631791509698442,0.24620762126020201,0.24609752470363044,0.2459876248105729,0.24587792096708294,0.24576842184034883,0.24565910824857992,0.2455499888809335,0.24544106313430605,0.24533233962098833,0.2452237993014671,0.24511545080967384,0.2450072935531003,0.24489933608970285,0.24479155952037987,0.24468397242440715,0.244576574219631,0.24446937341022967,0.24436235123568192,0.24425551622117095,0.24414886779466352,0.24404240538662075,0.24393613743476913,0.24383004534929067,0.24372413758853317,0.24361841359279485,0.24351288174724914,0.24340752359666287,0.24330234754653096,0.243197353046769,0.24309254843053044,0.24298791537544434,0.24288346223469223,0.24277918846759333,0.242675102355807,0.24257118570813407,0.24246744682597482,0.24236388517784407,0.2422605002345237,0.24215730021403506,0.24205426708681374,0.24195140909027082,0.24184872570413207,0.24174622509608362,0.24164388936404088,0.2415417266948057,0.24143973657685186,0.24133792712803517,0.24123628057215762,0.24113480504592186,0.24103350004635968,0.24093237364199385,0.2408314081809493,0.24073061175033236,0.24062998385554774,0.2405295325162766,0.24042924020343037,0.2403291149550161,0.24022915628463076,0.24012936370789215,0.2400297451841104,0.23993028333556218,0.23983098613956855,0.23973185311972078,0.23963289218757028,0.23953408608482263,0.23943544274079326,0.23933696168687763,0.239238650787339,0.23914049290186234,0.23904249591223364,0.2389446593574867,0.23884699105506213,0.23874947398119958,0.2386521159706253,0.23855491656985067,0.2384578753272318,0.23836100000232519,0.2382642737150994,0.23816770424210687,0.23807129113898576,0.2379750421194943,0.23787894041704044,0.23778299376215178,0.23768720171759658,0.23759157195178068,0.2374960878102055,0.23740075697782403,0.23730557902438654,0.2372105615733867,0.23711568808109654,0.23702096618733864,0.23692639546870117,0.23683198350420048,0.23673771385957812,0.23664359412996536,0.2365496238986477,0.23645580275056313,0.23636213820973367,0.23626861397694307,0.23617523759206668,0.23608200864656903,0.23598893462095238,0.23589599932262337,0.2358032102477327,0.23571056699413856,0.2356180769992404,0.2355257241758368,0.2354335159767745,0.23534145200617593,0.23524953965874937,0.23515776295147478,0.23506612929431023,0.23497463829751616,0.23488328957286797,0.23479209046228094,0.2347010251112901,0.23461010087681874,0.2345193173766269,0.23442868191084587,0.23433817872654075,0.23424781513866164,0.2341575907708336,0.23406751288179917,0.23397756581900614,0.2338877568558299,0.23379808562164422,0.23370855933419285,0.23361916244017775,0.23352990217179304,0.23344077816404746,0.23335179759407115,0.23326294500671,0.23317422759336529,0.23308564499456993,0.23299719685222076,0.232908890293215,0.23282070998354476,0.23273266306415885,0.2326447491823434,0.2325569754252311,0.23246932655452457,0.23238180967123584,0.23229442442793544,0.23220717787236123,0.23212005486087264,0.23203306245491784,0.23194620031224925,0.23185947544157504,0.2317728727928745,0.23168639938840002,0.23160005489098592,0.23151383896472166,0.23142775857003461,0.23134179877249605,0.23125596654587421,0.23117026155921858,0.23108469073473198,0.23099923922933166,0.2309139139784015,0.23082871465585642,0.23074364814602538,0.23065869969618638,0.2305738762036925,0.23048917734723137,0.23040460997360457,0.2303201594194808,0.23023583254453156,0.23015162903212683,0.23006755569188264,0.22998359794890375,0.2298997626255246,0.2298160494097093,0.2297324579905569,0.22964899513167608,0.22956564636739663,0.22948241847385975,0.22939931114465098,0.22931633110694816,0.2292334639814215,0.22915071650763544,0.22906808838357837,0.22898558630032564,0.22890319596397987,0.2288209240778598,0.2287387703442746,0.228656741418522,0.22857482309124236,0.22849302202983582,0.22841133794085228,0.22832977053188958,0.22824832641397394,0.2281669914821806,0.22808577235946517,0.22800466875756892,0.22792368725245657,0.2278428138217771,0.2277620550532889,0.22768141066280048,0.22760088719152732,0.22752047069884018,0.2274401677376147,0.22735997802765234,0.2272799080757277,0.22719994402209398,0.2271200923850546,0.22704035288833135,0.2269607252566152,0.22688121595405722,0.22680181122085305,0.22672251753252143,0.226643334617585,0.22656426890643433,0.22648530671830425,0.2264064544948261,0.22632771196828555,0.22624908553560882,0.22617056159427026,0.22609214655231244,0.2260138401457163,0.22593564873823677,0.2258575588047995,0.22577957672015317,0.22570170222390804,0.2256239416469373,0.22554628154084091,0.22546872824736527,0.2253912815096852,0.22531394107185693,0.22523671322405306,0.22515958461264163,0.2250825615385203,0.22500564374923118,0.22492883750270404,0.22485212952027392,0.2247755260704793,0.2246990269042867,0.22462263824766138,0.2245463468961644,0.22447015908625517,0.22439407457226462,0.22431809954846865,0.22424222088392373,0.22416644478328715,0.22409077100419533,0.22401519930510194,0.22393973584105334,0.2238643675719636,0.22378910066312196,0.22371393487621583,0.2236388763352098,0.22356391207190662,0.22348904822040494,0.22341428454556983,0.223339627140549,0.22326506310833602,0.22319059855210563,0.2231162332398455,0.2230419732341484,0.22296780570851077,0.22289373673544657,0.22281976608601267,0.22274589979250553,0.22267212509824577,0.22259844804534729,0.22252486840788335,0.22245138596067343,0.22237800669850274,0.2223047179510328,0.22223152572273844,0.22215842979139147,0.22208543612205217,0.22201253211271357,0.2219397237380252,0.22186701077866108,0.2217943991702058,0.2217218763783352,0.2216494483481241,0.22157711486309975,0.22150488182961725,0.22143273678039552,0.22136068563118258,0.22128872816831063,0.22121686417880576,0.22114509953282838,0.22107342184601494,0.22100183699779888,0.2209303447779527,0.22085895102795142,0.22078764342906632,0.22071642783195122,0.22064530402907917,0.2205742778334771,0.220503336991439,0.22043248732507775,0.22036172862952197,0.22029106668958517,0.22022048931598007,0.2201500023025145,0.22007960544692876,0.2200093045060549,0.21993908735442821,0.21986895975778514,0.21979892151643426,0.21972897243131984,0.21965911822461917,0.21958934684982034,0.219519664037894,0.2194500695923002,0.2193805692077472,0.21931115090023362,0.21924182037317388,0.2191725774325026,0.21910342774568253,0.21903435939065227,0.2189653780434946,0.2188964835125786,0.21882768143834253,0.2187589599601016,0.21869032472682948,0.21862177554928994,0.21855331223883917,0.21848494040244218,0.21841664825535415,0.21834844141297124,0.21828031968899606,0.2182122886638577,0.21814433661294735,0.2180764691250431,0.21800868601615625,0.21794099284039317,0.21787337793274125,0.21780584685557489,0.21773839942717693,0.2176710411755419,0.21760376049472044,0.21753656292089532,0.21746944827458464,0.2174024220578796,0.21733547272336806,0.21726860578125073,0.21720182105424535,0.21713511836561405,0.2170685031853584,0.2170019640385087,0.21693550640307915,0.21686913010448813,0.2168028405872946,0.2167366264339069,0.21667049309682057,0.21660444040357585,0.2165384737734904,0.21647258184584606,0.21640677004782174,0.21634103820904635,0.21627539172379517,0.2162098192877252,0.21614432630289887,0.21607891260100087,0.21601357801422486,0.21594832790581936,0.2158831510412198,0.21581805279137067,0.2157530329904813,0.21568809697719785,0.21562323357223254,0.21555844812185543,0.21549374046226027,0.21542911590768266,0.21536456333363355,0.21530008806190148,0.21523568993063394,0.21517137422984586,0.21510712988937472,0.21504296220671842,0.21497887102194788,0.2149148616010455,0.21485092292770855,0.21478706027533337,0.2147232734858847,0.21465956240179612,0.21459593225927032,0.2145323721086826,0.21446888719356452,0.21440547735820734,0.21434214781519662,0.21427888766773878,0.2142157021356813,0.21415259106514475,0.214089559645279,0.21402659703167362,0.21396370842067425,0.21390089366020282,0.21383815791615324,0.21377549039605528,0.21371289627293336,0.21365037539648352,0.21358792761684098,0.2135255580710791,0.2134632560310389,0.21340102664084393,0.21333886975237001,0.21327679047983153,0.2132147781460333,0.21315283787217637,0.21309096951185114,0.2130291781565864,0.2129674531797251,0.21290579967972031,0.21284421751185117,0.21278271174513239,0.2127212718030248,0.2126599027614057,0.21259860447721785,0.2125373768078159,0.21247622479431058,0.21241513792222655,0.2123541212394612,0.2122931746050018,0.2122323030378247,0.21217149607264454,0.21211075873516436,0.21205009088597987,0.21198949752209897,0.21192896822702173,0.21186850800442353,0.21180811671648472,0.21174779933840893,0.2116875455020819,0.21162736018931633,0.21156724326385387,0.21150719967925624,0.21144721911539993,0.21138730653239807,0.21132746179553072,0.2112676847704591,0.21120798038391814,0.21114833837522484,0.21108876367759458,0.21102925615819876,0.2109698207224899,0.21091044715690388,0.2108511403733173,0.21079190024039007,0.2107327316424492,0.21067362441266915,0.21061458344174575,0.2105556085998056,0.2104967047502057,0.21043786177248325,0.21037908453630952,0.21032037291325653,0.2102617267752544,0.21020315095966374,0.2101446354034536,0.2100861849502314,0.2100277994733467,0.20996948378953403,0.20991122788129546,0.2098530365715591,0.20979490973507378,0.20973685216809826,0.2096788538983055,0.20962091972809554,0.2095630495335962,0.20950524809073942,0.20944750547201132,0.20938982645943313,0.20933221093049215,0.20927466364094074,0.20921717470772438,0.2091597488926335,0.20910238607449555,0.2090450861324699,0.20898785379728926,0.2089306792409821,0.20887356720025615,0.20881651755558722,0.20875953501785463,0.20870260980276453,0.20864574662712146,0.20858894537269898,0.20853221073066555,0.20847553296006427,0.20841891675793942,0.20836236200734415,0.20830587337987722,0.2082494411775813,0.20819307007788238,0.2081367599650952,0.2080805107238472,0.2080243270014711,0.20796819915329104,0.20791213183240703,0.20785612492468605,0.20780018305820364,0.2077442966305385,0.207688470275486,0.20763270388013558,0.207577002053442,0.20752135523491355,0.20746576803917816,0.20741024035453057,0.20735477677094025,0.20729936776952337,0.20724401794587632,0.20718872718948256,0.20713350007146006,0.20707832711421495,0.20702321289444647,0.20696815730281035,0.20691316023025305,0.20685822622451444,0.20680334585917134,0.2067485236874886,0.2066937596015648,0.20663905813058503,0.20658440988871302,0.20652981941061432,0.206475286589524,0.20642081593620198,0.20636639810509214,0.2063120376123909,0.20625773435245415,0.20620349281774536,0.2061493037026848,0.20609517150512874,0.20604109612053895,0.205987077444651,0.20593311994723618,0.20587921437226364,0.20582536519484404,0.20577157231179996,0.20571784017489053,0.2056641595673903,0.20561053494635534,0.20555696620968067,0.20550345779123752,0.2054500005133129,0.20539659881503333,0.20534325259535152,0.20528996627037444,0.20523673070111131,0.20518355030888277,0.20513042499368536,0.20507735915398353,0.20502434368922207,0.20497138300303824,0.2049184769964583,0.2048656255707636,0.20481283310253545,0.2047600905388644,0.2047074022614541,0.2046547681725985,0.20460219263150697,0.2045496666230711,0.20449719451158274,0.20444477620033494,0.2043924160312833,0.20434010502684344,0.20428784753401413,0.20423564345707415,0.20418349712084274,0.20413139958498525,0.20407935517932493,0.20402736380911343,0.20397542537984362,0.20392354419507713,0.20387171136066037,0.203819931185111,0.20376820357487863,0.20371653281664814,0.20366491005290902,0.20361333957526417,0.20356182129110745,0.2035103594703605,0.203458945291891,0.203407583030501,0.20335627259451633,0.2033050182372079,0.20325381117355934,0.2032026556616848,0.20315155161082993,0.2031004989304683,0.20304950185321427,0.20299855163883163,0.20294765252473193,0.20289680442129374,0.2028460115447299,0.20279526519034002,0.20274456957909812,0.2026939246222757,0.20264333451979366,0.20259279060223356,0.20254229707424137,0.20249185384797033,0.20244146510715733,0.2023911222174148,0.20234082936716938,0.20229058646944448,0.20224039769190022,0.20219025443493158,0.2021401608708532,0.20209011691354767,0.20204012247711045,0.20199018170925478,0.20194028605350833,0.20189043966219555,0.20184064245025735,0.20179089854956747,0.20174119943788635,0.20169154925166483,0.2016419479066783,0.2015923995190652,0.20154289560057823,0.20149344027189892,0.20144403344962664,0.2013946792342674,0.20134536917132825,0.20129610736582482,0.20124689373517,0.20119772819697837,0.20114861483235888,0.20109954522868054,0.2010505234715205,0.20100154947929402,0.20095262731770594,0.20090374860735288,0.20085491741837516,0.20080613366997876,0.20075740141256426,0.20070871229972567,0.20066007038626676,0.20061147559217418,0.20056293195264355,0.20051443115403803,0.20046597723592438,0.2004175701190601,0.20036921382353395,0.20032090006825257,0.20027263287764416,0.2002244121732274,0.2001762378767098,0.20012811398943323,0.20008003227066953,0.20003199672606103,0.19998400727806454,0.1999360679131328,0.19988817042258122,0.19984031879713188,0.1997925129599818,0.19974475688278978,0.19969704238869615,0.19964937345359848,0.19960175000142474,0.19955417598913436,0.199506643271476,0.1994591558096175,0.1994117135282088,0.19936431635207888,0.1993169682199443,0.1992696610257632,0.19922239871242325,0.1991751812054642,0.19912801242911274,0.19908088430845597,0.19903380077186186,0.19898676174557242,0.19893977113941608,0.1988928209093991,0.19884591496946202,0.19879905324654035,0.19875223963615526,0.1987054661250245,0.19865873661275224,0.19861205102695917,0.19856541324894933,0.19851881529594614,0.198472261053308,0.19842575044933233,0.19837928735119537,0.19833286380642254,0.1982864836862159,0.1982401469195416,0.19819385343553142,0.19814760316348268,0.1981013960328575,0.19805523979935966,0.19800911873333785,0.19796304059812225,0.19791700532382941,0.19787101284073846,0.19782506307929032,0.19777915597008736,0.1977332914438929,0.19768747719974156,0.19764169762530215,0.19759596042713354,0.1975502655366379,0.19750461288537588,0.19745900240506628,0.19741343402758538,0.1973679076849666,0.19732242330940003,0.197276988537023,0.19723158788566597,0.19718622899887778,0.19714091180947035,0.19709563625040988,0.19705040225481643,0.1970052097559634,0.19696005868727712,0.19691495662973274,0.19686988821526974,0.19682486103217683,0.19677987501448746,0.1967349300963858,0.19669002621220624,0.19664516329643297,0.19660034128369946,0.19655556010878816,0.19651082729144007,0.19646612759021476,0.1964214685320588,0.19637685005234562,0.19633227208659554,0.19628773457047496,0.19624323743979633,0.19619878063051738,0.19615437160866753,0.196109995243829,0.1960656590091424,0.19602136284114285,0.19597710667650878,0.19593289045206141,0.1958887141047645,0.19584457757172374,0.19580048079018655,0.19575643116654964,0.1957124136936104,0.19566843578477283,0.19562449737784668,0.19558059841078115,0.1955367388216646,0.19549291854872416,0.19544913753032525,0.1954054031205501,0.19536170042025028,0.1953180367904248,0.19527441216998845,0.19523082649799234,0.1951872797136236,0.19514377175620487,0.19510030256519392,0.19505687208018335,0.1950134875971653,0.194970134336931,0.1949268196022897,0.19488354333336907,0.19484030547042977,0.19479710595386482,0.1947539447241993,0.19471082172208998,0.19466774419256055,0.1946246974616004,0.19458168878096327,0.19453871809182885,0.19449578533550677,0.19445289045343603,0.19441003338718468,0.19436721407844954,0.19432443972190208,0.1942816957474233,0.19423898935632936,0.19419632049082816,0.19415368909325445,0.19411109510606944,0.1940685384718606,0.19402601913334105,0.19398353703334947,0.1939410993106348,0.19389869151042313,0.19385632077801393,0.19381398705674394,0.19377169029007357,0.19372943042158655,0.1936872073949896,0.19364502115411197,0.19360287878862575,0.19356076594494806,0.19351868971921923,0.19347665005575557,0.1934346468989942,0.19339268019349282,0.1933507498839293,0.19330885591510152,0.19326699823192667,0.19322518386956314,0.19318339858679154,0.19314164942514794,0.19309993633002434,0.1930582592469307,0.19301661812149443,0.1929750128994602,0.1929334435266895,0.1928919169904937,0.19285041914824316,0.1928089569935478,0.19276753047273337,0.19272613953224085,0.19268478411862622,0.19264346417855985,0.19260217965882667,0.19256093050632545,0.1925197236552127,0.19247854507234985,0.1924374016981048,0.19239629347982914,0.19235522036498667,0.19231418230115335,0.19227317923601686,0.19223221111737648,0.19219128483272818,0.1921503864450167,0.1921095228478733,0.19206869398954002,0.19202789981836862,0.1919871402828207,0.19194641533146709,0.19190572491298757,0.19186506897617078,0.1918244543566693,0.1917838672241504,0.19174331442031792,0.19170279589439235,0.19166231159570138,0.1916218614736797,0.19158144547786857,0.19154106355791567,0.19150072250395825,0.19146040857933055,0.1914201285801478,0.19137988245648016,0.1913396701585027,0.19129949163649512,0.19125934684084153,0.19121923572202998,0.19117915823065232,0.19113912110626818,0.19109911071626515,0.19105913380609982,0.19101919032677625,0.190979280229401,0.19093940346518262,0.19089955998543157,0.19085974974155973,0.19081997942871695,0.19078023550562767,0.19074052467326807,0.1907008468834535,0.19066120208809947,0.1906215902392214,0.19058201128893423,0.19054246518945245,0.19050295859202326,0.19046347804563996,0.1904240302073067,0.1903846150296327,0.19034523246532511,0.1903058824671889,0.19026656498812652,0.19022727998113767,0.19018802739931906,0.1901488138451234,0.19010962596784226,0.1900704703756086,0.1900313470219044,0.1899922558603075,0.1899531968444909,0.189914169928223,0.18987517506536702,0.18983621881552365,0.18979728791604275,0.18975838893213828,0.1897195218180507,0.18968068652811412,0.189641883016756,0.18960311123849702,0.18956437114795083,0.18952566269982368,0.18948699240608355,0.18944834710193512,0.18940973330488586,0.18937115097001025,0.1893326000524742,0.189294080507535,0.1892555922905408,0.18921713535693044,0.18917871617683524,0.18914032167138406,0.18910195831618298,0.18906362606703142,0.18902532487981835,0.18898705471052205,0.1889488155152099,0.18891060725003805,0.18887242987125133,0.1888342898024712,0.1887961740603223,0.1887580890738296,0.18872003479958996,0.1886820111942877,0.18864401821469443,0.1886060558176686,0.18856812396015557,0.18853022902492156,0.1884923581124545,0.18845451761086174,0.1884167074774334,0.18837892766954514,0.1883411781446582,0.18830345886031882,0.18826576977415843,0.18822811084389302,0.18819048840686461,0.18815288965677845,0.18811532093624897,0.1880777822033289,0.1880402734161548,0.1880027945329466,0.1879653455120075,0.1879279263117237,0.18789054322953086,0.18785318354100689,0.1878158535487996,0.18777855321162512,0.18774128248828145,0.18770404133764826,0.18766682971868684,0.18762964759043974,0.18759250121087215,0.18755537793652105,0.18751828403050458,0.18748121945218854,0.18744418416101877,0.18740717811652138,0.18737020127830223,0.18733325360604683,0.18729633505952023,0.18725945185279563,0.18722259143241543,0.1871857600175404,0.18714895756825134,0.18711218404470734,0.18707543940714597,0.18703872361588253,0.18700203663131043,0.1869653846289361,0.18692875513436782,0.1868921543281425,0.1868555821709628,0.18681903862360824,0.186782523646935,0.18674603720187577,0.1867095792494394,0.18667314975071095,0.18663675483830508,0.18660038212574126,0.18656403775060137,0.1865277216742729,0.18649143385821818,0.1864551742639747,0.18641894285315463,0.1863827395874447,0.18634657056176743,0.18631042346687762,0.18627430440260992,0.1862382133309473,0.18620215021394648,0.18616611501373742,0.18613010769252353,0.18609412821258114,0.18605817653625945,0.1860222587165575,0.18598636253011594,0.1859504940347847,0.18591465319320266,0.18587883996808074,0.1858430543222017,0.18580729621841974,0.18577156561966066,0.185735868542078,0.18570019283777728,0.18566454452770964,0.18562892357508476,0.18559332994318287,0.18555776359535453,0.18552222449502048,0.18548671260567154,0.18545122789086835,0.18541577632577816,0.18538034584643326,0.18534494243273947,0.18530956604853502,0.18527421665772723,0.1852388942242921,0.18520359871227432,0.18516833008578712,0.18513309428397226,0.1850978793166139,0.18506269112754076,0.1850275296811382,0.18499239494185923,0.18495728687422422,0.18492220544282095,0.1848871506123043,0.18485212234739606,0.18481712654715954,0.18478215130340991,0.18474720251984025,0.18471228016143865,0.18467738419325921,0.1846425145804222,0.18460767128811348,0.18457285428158474,0.18453806942466797,0.1845033048812724,0.1844685665198099,0.18443385430579315,0.18439916820479968,0.1843645081824717,0.184329874204516,0.18429526623670367,0.18426069010800064,0.18422613405364832,0.18419160390714334,0.18415709963451285,0.18412262120184758,0.18408816857530166,0.18405374172109257,0.18401934060550093,0.18398496519487031,0.18395062127937195,0.18391629717359992,0.18388199867220179,0.18384772574177158,0.18381347834896558,0.18377925646050203,0.1837450600431613,0.18371088906378533,0.18367674927843747,0.1836426290714631,0.18360853420335438,0.18357446464119898,0.1835404203521456,0.18350640130340376,0.18347240746224378,0.1834384387959966,0.18340449527205363,0.18337058260852324,0.18333668926735322,0.1833028209710282,0.18326897768717992,0.1832351593834998,0.18320136602773884,0.18316759758770756,0.18313385403127566,0.1831001410431788,0.1830664471535847,0.18303277805155913,0.1829991337052076,0.1829655140826943,0.18293191915224177,0.18289834888213097,0.18286480324070095,0.18283128219634887,0.18279779139666955,0.1827643194477376,0.1827308720014271,0.18269744902636598,0.18266405049123943,0.18263067636478988,0.18259732661581687,0.18256400121317692,0.1825307057718047,0.18249742896451115,0.18246417641046567,0.18243094807875104,0.18239774393850652,0.1823645639589273,0.18233140810926482,0.18229827635882612,0.18226516867697426,0.18223209064229268,0.1821990310018562,0.18216599533843356,0.1821329836216093,0.18209999582102313,0.1820670319063697,0.18203409184739833,0.1820011756139133,0.18196828875252913,0.18193542007561908,0.18190257513393976,0.18186975389751286,0.18183695633641406,0.18180418242077304,0.18177143212077326,0.18173870540665182,0.18170600779337248,0.18167332815794565,0.18164067201943448,0.18160803934828962,0.18157543011501473,0.18154284429016643,0.1815102818443541,0.18147774274823988,0.18144522697253845,0.18141273999698074,0.18138027077051563,0.1813478247769264,0.1813154019871368,0.18128300237212247,0.18125062590291094,0.18121827255058137,0.18118594228626458,0.18115364055870176,0.18112135638010515,0.181089095203227,0.18105685699940333,0.1810246417400211,0.1809924493965183,0.1809602799403834,0.18092813334315588,0.18089600957642543,0.18086391405443328,0.18083183585980792,0.18079978041075598,0.18076774767906822,0.18073573763658543,0.1807037502551981,0.18067178550684665,0.18063984336352087,0.1806079292091138,0.1805760321881849,0.18054415768855267,0.1805123056824043,0.18048047614197604,0.180448669039553,0.1804168843474692,0.18038512203810736,0.18035338208389873,0.18032166983494755,0.1802899745047531,0.18025830144730084,0.18022665063521529,0.18019502204116902,0.18016341563788263,0.1801318313981244,0.1801002692947104,0.18006873464801965,0.18003721673218961,0.1800057208714418,0.17997424703878198,0.1799427952072632,0.1799113653499855,0.17987995744009588,0.1798485714507883,0.17981720735530332,0.17978587044092173,0.1797545500492883,0.17972325147148333,0.17969197468093337,0.1796607196511112,0.1796294863555357,0.17959827476777174,0.17956708486143017,0.1795359218946714,0.17950477526852401,0.17947365024491033,0.17944254679762373,0.17941146490050303,0.17938040452743234,0.17934936565234091,0.17931834824920312,0.17928735229203832,0.17925638300657926,0.17922542985997153,0.17919449808166818,0.17916358764586746,0.17913269852681213,0.17910183069878932,0.17907098413613054,0.17904015881321136,0.17900935992723174,0.17897857700350334,0.17894781524290992,0.1789170746200028,0.17888635510937706,0.17885565668567135,0.1788249793235679,0.17879432299779222,0.17876369287728203,0.17873307854495454,0.17870248517339526,0.1786719127375024,0.1786413612122171,0.1786108305725233,0.1785803207934477,0.17854983185005963,0.17851936371747096,0.17848892153314325,0.17845849494413954,0.17842808909152935,0.17839770395059373,0.17836733949665592,0.178336995705081,0.17830667255127602,0.17827637001068983,0.17824609319308485,0.17821583180196357,0.17818559095066158,0.17815537061479383,0.17812517077001688,0.17809499139202828,0.17806483245656685,0.1780346939394125,0.17800457581638607,0.1779744831663984,0.17794440575580506,0.1779143486670512,0.17788431187612064,0.17785429535903774,0.17782429909186734,0.17779432305071458,0.1777643672117248,0.17773443662665714,0.17770452111717394,0.17767462573853468,0.17764475046704495,0.17761489527905008,0.1775850601509352,0.1775552450591251,0.17752544998008407,0.17749567489031595,0.1774659248113351,0.17743618962640118,0.1774064743604915,0.17737677899026685,0.17734710349242713,0.17731744784371117,0.1772878120208967,0.17725819600080023,0.17722860477831634,0.17719902829091128,0.17716947153690954,0.17713993449328203,0.17711041713703787,0.1770809194452246,0.17705144139492798,0.1770219829632718,0.1769925441274179,0.17696312985260648,0.1769337301366807,0.1769043499482742,0.17687498926470013,0.1768456480633094,0.17681632632149039,0.17678702401666904,0.17675774112630854,0.1767284825895465,0.1766992384573635,0.17667001367225857,0.17664080821184378,0.17661162205376804,0.17658245517571744,0.17655330755541465,0.17652417917061922,0.1764950749346046,0.17646598495099597,0.1764369141363968,0.1764078624687128,0.17637882992588602,0.17634981648589496,0.17632082212675412,0.17629184682651428,0.17626289056326216,0.17623395822145535,0.17620503996336342,0.17617614067673887,0.17614726033981187,0.17611839893084832,0.1760895564281497,0.17606073281005297,0.17603192805493062,0.17600314702187256,0.1759743799247675,0.17594563162596966,0.17591690210399247,0.17588819133738445,0.17585949930472916,0.175830825984645,0.17580217135578521,0.1757735353968379,0.17574492293862795,0.17571632425255082,0.17568774417266175,0.17565918267778713,0.17563063974678775,0.17560211535855877,0.17557360949202952,0.1755451221261636,0.17551665806690156,0.1754882076362605,0.17545977564338142,0.17543136206736398,0.17540296688734158,0.1753745900824814,0.17534623163198435,0.17531789151508487,0.17528956971105103,0.1752612709980945,0.17523298575463261,0.17520471876204458,0.17517646999973188,0.1751482394471292,0.1751200270837044,0.17509183288895835,0.17506365684242492,0.17503550369790147,0.17500736388345714,0.17497924215602778,0.1749511384952785,0.1749230528809071,0.1748949852926439,0.1748669357102518,0.1748389041135261,0.17481089048229445,0.17478289954314707,0.1747549217794772,0.17472696192098142,0.17469901994761616,0.17467109583937002,0.17464318957626346,0.1746153011383489,0.17458743050571054,0.17455958238098185,0.17453174729626425,0.17450392995726938,0.17447613034420809,0.17444834843732293,0.17442058421688772,0.17439283766320773,0.1743651087566196,0.17433739747749108,0.17430970850175642,0.174282032415794,0.17425437389858492,0.17422673293062135,0.17419910949242642,0.17417150356455413,0.17414391512758923,0.17411634416214727,0.17408879532065108,0.17406125923726912,0.1740337405674437,0.17400623929191272,0.17397875539144445,0.17395128884683747,0.17392383963892072,0.17389640774855342,0.17386899780485254,0.1738416004893531,0.1738142204341646,0.17378685762026652,0.1737595120286683,0.1737321836404092,0.17370487243655838,0.17367757839821463,0.17365030150650648,0.17362304636457437,0.17359580370674127,0.17356857813911,0.17354136964292727,0.17351417819946913,0.1734870037900409,0.17345984639597725,0.17343270599864202,0.17340558717829818,0.17337848071575288,0.1733513911942053,0.17332431859513545,0.1732972629000523,0.17327022409049367,0.1732432021480262,0.17321619705424515,0.17318920879077465,0.1731622419123767,0.17313528725166688,0.17310834936631417,0.17308142823805678,0.17305452384866113,0.17302763617992215,0.17300076521366292,0.17297391093173478,0.17294707786643965,0.17292025689601825,0.17289345255565378,0.17286666482730986,0.17283989369297806,0.1728131391346778,0.1727864011344564,0.17275967967438877,0.17273297473657775,0.1727062908282874,0.17267961887861352,0.1726529633976731,0.17262632436767916,0.1725997017708721,0.1725730955895198,0.17254650580591732,0.17251993240238708,0.17249337986413954,0.1724668391650591,0.17244031479318414,0.1724138067309456,0.1723873149608014,0.17236083946523634,0.17233438022676217,0.1723079372279175,0.17228151045126772,0.17225510435743682,0.1722287099702356,0.17220233175308836,0.17217596968866708,0.17214962375967022,0.17212329394882264,0.17209698023887574,0.17207068261260713,0.17204440550898328,0.172018139995789,0.1719918905147666,0.17196565704879868,0.17193943958079397,0.17191323809368717,0.17188705257043901,0.17186088299403618,0.17183473378197023,0.171808596045624,0.1717824742052411,0.17175636824391138,0.1717302781447505,0.17170420389089971,0.17167814546552582,0.17165210285182114,0.17162607603300362,0.17160006940262146,0.1715740741206615,0.17154809458339743,0.1715221307741485,0.1714961826762592,0.1714702502730993,0.1714443335480636,0.171418432484572,0.17139255145507948,0.17136668166238667,0.17134082748165055,0.17131498889639094,0.17128916589015242,0.17126335844650434,0.17123756654904093,0.171211790181381,0.17118602932716803,0.1711602883353373,0.17113455845642284,0.171108844042036,0.17108314507591832,0.17105746154183588,0.171031793423579,0.1710061407049624,0.17098050336982495,0.1709548857463804,0.1709292791272127,0.17090368784318885,0.1708781118782444,0.1708525512163389,0.17082700584145585,0.1708014757376028,0.17077596088881103,0.17075046127913585,0.17072498121368423,0.17069951203192496,0.17067405804159314,0.17064861922683888,0.17062319557183597,0.17059778706078166,0.17057239367789676,0.1705470154074256,0.17052165653411622,0.1704963084387426,0.1704709754086587,0.1704456574282022,0.1704203544817342,0.17039506655363884,0.1703697936283235,0.17034453569021868,0.1703192927237779,0.1702940689910454,0.17026885591885282,0.17024365777182554,0.17021847453450903,0.1701933061914715,0.17016815272730404,0.17014301412662045,0.17011789037405725,0.17009278571165323,0.1700676916068193,0.1700426123041539,0.17001754778838396,0.169992498044259,0.16996746305655094,0.16994244281005416,0.16991743728958536,0.16989245071734124,0.1698674746009767,0.16984251316522675,0.16981756639499715,0.16979263427521585,0.16976771679083297,0.16974281392682067,0.1697179256681731,0.16969305199990642,0.16966819712208786,0.16964335258725102,0.16961852259797772,0.16959370713937166,0.16956890619655837,0.16954411975468506,0.16951934779892072,0.16949459031445596,0.1694698514818568,0.16944512289320132,0.1694204087315493,0.1693957089821776,0.16937102363038448,0.1693463526614897,0.1693216960608343,0.16929705381378077,0.16927242590571273,0.1692478164954456,0.16922321721915895,0.1691986322381388,0.16917406153785364,0.16914950510379304,0.16912496292146761,0.16910043497640903,0.16907592125416984,0.16905142589439692,0.16902694057213202,0.1690024694294723,0.16897801245205388,0.16895356962553365,0.16892914093558925,0.16890472636791898,0.16888032590824184,0.16885593954229747,0.1688315713883516,0.16880721316478947,0.1687828689923047,0.16875853885671901,0.1687342227438745,0.1687099206396337,0.1686856325298795,0.16866135840051513,0.1686371023509623,0.168612856137803,0.168588623862867,0.16856440551213833,0.1685402010716212,0.16851601052733997,0.16849183386533895,0.16846767107168242,0.16844352213245478,0.1684193911260575,0.16839526985167638,0.16837116239009897,0.16834706872748914,0.16832298885003047,0.1682989227439264,0.16827487039540007,0.16825083179069428,0.16822681098968326,0.16820279982910025,0.16817880237118618,0.16815481860226222,0.16813084850866905,0.16810689207676682,0.168082949292935,0.16805902014357255,0.16803510461509777,0.1680112067467168,0.167987318417045,0.16796344366763383,0.16793958248497862,0.1679157348555939,0.16789190076601332,0.16786808020278965,0.16784427315249473,0.16782048363611682,0.16779670356918486,0.16777293697501355,0.16774918384025067,0.16772544415156287,0.1677017178956357,0.1676780050591735,0.1676543056288994,0.1676306236077267,0.16760695094780514,0.16758329165435581,0.16755964571417667,0.16753601311408428,0.16751239384091388,0.1674887878815191,0.1674651952227723,0.16744161585156417,0.1674180537506426,0.1673945009130096,0.16737096132370025,0.16734743496967883,0.16732392183792802,0.16730042191544878,0.16727693518926018,0.16725346164639968,0.16723000525183881,0.16720655803458884,0.16718312396189025,0.16715970302085298,0.167136295198605,0.1671129004822923,0.1670895188590788,0.16706615031614647,0.16704279484069517,0.16701945637786297,0.16699612699683375,0.16697281064499442,0.16694950730961614,0.16692621697798785,0.16690293963741626,0.16687967527522574,0.16685642387875824,0.1668331893756673,0.16680996387054883,0.1667867512932873,0.16676355163129505,0.16674036487200194,0.1667171910028553,0.16669403001131985,0.16667088188487783,0.1666477466110287,0.1666246280979168,0.1666015184896469,0.16657842169657464,0.16655533770626874,0.16653226650631509,0.16650920808431688,0.16648616242789438,0.16646312952468503,0.1664401132656332,0.166417105829673,0.16639411110994273,0.16637112909414806,0.16634815977001152,0.16632520312527274,0.16630225914768812,0.16627932782503094,0.1662564091450915,0.16623350697962166,0.16621061354641625,0.166187732719402,0.1661648644864361,0.16614200883539262,0.16611916575416222,0.16609633523065218,0.16607351725278643,0.16605071567539534,0.16602792275053352,0.16600514233518918,0.1659823744173524,0.16595961898502967,0.16593687602624402,0.16591414552903483,0.16589142748145777,0.16586872572155048,0.16584603253536398,0.16582335176307694,0.16580068339281032,0.16577802741270137,0.16575538381090343,0.16573275257558612,0.16571013369493515,0.1656875271571524,0.1656649367815355,0.16564235489207052,0.16561978531017774,0.16559722802412313,0.16557468302218867,0.16555215029267234,0.165529629823888,0.16550712160416542,0.16548462943627837,0.16546214567765943,0.16543967413318852,0.1654172147912587,0.16539476764027874,0.16537233266867324,0.1653499098648823,0.16532749921736184,0.16530510071458338,0.16528271814087997,0.1652603438910075,0.16523798175138704,0.16521563171055242,0.16519329375705297,0.16517096787945337,0.16514865406633394,0.16512635230629027,0.16510406636739447,0.16508178867731138,0.1650595230061852,0.16503726934267293,0.16501502767544696,0.1649927979931949,0.16497058028461956,0.164948374538439,0.1649261807433864,0.1649040026493856,0.16488183272082704,0.16485967470968887,0.16483752860476478,0.16481539439486342,0.16479327206880862,0.16477116161543906,0.16474906302360845,0.1647269800272365,0.16470490512309768,0.16468284204715036,0.16466079078830786,0.1646387513354984,0.16461672367766494,0.1645947078037652,0.16457270370277174,0.16455071136367183,0.16452873450252262,0.16450676565224015,0.164484808530903,0.16446286312755715,0.16444092943126312,0.16441900743109614,0.1643970971161458,0.16437519847551638,0.16435331520951219,0.1643314398829199,0.16430957619804998,0.1642877241440646,0.16426588371014023,0.1642440548854678,0.1642222376592526,0.16420043202071416,0.1641786379590864,0.16415685915709058,0.16413508821508407,0.1641133288177774,0.1640915809544614,0.16406984461444127,0.1640481197870361,0.16402640646157937,0.16400470462741848,0.16398301795176745,0.16396133906635263,0.16393967164036238,0.1639180156632004,0.16389637112428437,0.16387473801304592,0.1638531163189307,0.16383150603139812,0.16380991080226873,0.16378832329440554,0.16376674716158868,0.16374518239333308,0.1637236289791675,0.1637020869086345,0.16368055617129035,0.16365903675670507,0.16363752865446238,0.1636160354991993,0.16359454998853346,0.16357307575904514,0.16355161280037267,0.16353016110216798,0.16350872065409652,0.16348729144583732,0.1634658734670829,0.16344447033731452,0.16342307478480111,0.16340169043095276,0.16338031726551586,0.16335895527825023,0.16333760445892903,0.16331626479733882,0.1632949362832795,0.16327361890656425,0.1632523162697554,0.16323102113533638,0.16320973710778247,0.16318846417695984,0.16316720233274795,0.16314595156503942,0.16312471186374003,0.1631034832187687,0.16308226921776434,0.16306106265338735,0.16303986711517543,0.16301868259309985,0.16299750907714486,0.16297634655730775,0.1629551950235987,0.162934054466041,0.16291292487467077,0.16289180982046672,0.16287070212977575,0.16284960537545978,0.1628285195476065,0.16280744463631636,0.16278638063170275,0.16276532752389175,0.16274428530302215,0.16272325752537686,0.16270223704701545,0.16268122742609015,0.16266022865279064,0.16263924071731936,0.16261826360989126,0.16259729732073394,0.16257634184008768,0.16255539715820522,0.16253446681496225,0.16251354369958856,0.16249263135381398,0.16247172976794128,0.1624508389322859,0.16242995883717554,0.1624090894729505,0.16238823082996331,0.16236738643361634,0.16234654920239805,0.1623257226635514,0.16230490680747836,0.1622841016245934,0.16226330710532302,0.16224252324010616,0.16222175001939396,0.16220099095421833,0.16218023899211628,0.16215949764594717,0.16213876690621082,0.16211804676341926,0.1620973372080967,0.1620766382307793,0.16205594982201546,0.16203527197236556,0.16201460817681676,0.16199395141533712,0.16197330518472636,0.1619526694755929,0.1619320442785571,0.1619114295842513,0.16189082538331978,0.1618702316664187,0.16184965191438036,0.16182907913578187,0.16180851681325503,0.1617879649375034,0.16176742349924236,0.1617468924891991,0.16172637189811243,0.1617058617167331,0.16168536193582342,0.16166487602041094,0.1616443970110145,0.1616239283744466,0.16160347010151638,0.1615830221830445,0.16156258460986328,0.16154215737281666,0.16152174046276016,0.16150133733077743,0.1614809410455661,0.16146055505998216,0.1614401793649272,0.1614198139513142,0.16139945881006776,0.16137911393212384,0.1613587793084298,0.16133845492994442,0.16131814423218135,0.1612978403153014,0.16127754661657626,0.16125726312701014,0.16123698983761853,0.16121672673942827,0.16119647382347743,0.16117623108081536,0.16115600193321836,0.16113577950860508,0.16111556723049744,0.1610953650899896,0.1610751730781869,0.16105499118620578,0.16103481940517392,0.16101465772622994,0.16099450614052369,0.1609743680544913,0.16095423662704605,0.1609341152663558,0.1609140039636145,0.16089390271002715,0.16087381149680968,0.1608537303151891,0.1608336591564032,0.16081360141335305,0.1607935502722977,0.16077350912785765,0.16075347797131442,0.16073345679396034,0.1607134455870986,0.16069344434204322,0.16067345305011896,0.16065347170266148,0.16063350367745666,0.16061354219129956,0.16059359062368206,0.16057364896598272,0.16055371720959083,0.16053379534590634,0.16051388336633987,0.16049398126231276,0.16047409239827373,0.16045421001796026,0.16043433748751518,0.16041447479840212,0.16039462194209542,0.16037477891007987,0.16035494569385084,0.16033512228491414,0.16031531203447316,0.16029550821302102,0.16027571417344316,0.16025592990728738,0.16023615540611183,0.16021639066148513,0.16019663566498624,0.16017689040820454,0.16015715488273977,0.16013743242500264,0.16011771633536534,0.1600980099519076,0.16007831326627034,0.16005862627010498,0.16003894895507303,0.1600192813128463,0.15999962333510678,0.15997997834521183,0.15996033966989817,0.15994071063418047,0.15992109122978154,0.15990148144843436,0.159881881281882,0.1598622907218776,0.15984270976018453,0.15982313838857615,0.15980357991583086,0.15978402769812916,0.15976448504589405,0.15974495195093907,0.1597254284050878,0.15970591440017376,0.1596864099280405,0.15966691498054153,0.15964743285358982,0.1596279569293476,0.15960849050536105,0.1595890335735234,0.15956958612573757,0.15955014815391658,0.1595307196499831,0.15951130060586977,0.15949189101351893,0.1594724941544741,0.159453103439915,0.1594337221530057,0.1594143502857277,0.15939498783007228,0.1593756347780404,0.15935629112164273,0.15933695685289964,0.15931763524067336,0.15929831972175038,0.15927901356660248,0.1592597167672886,0.15924042931587737,0.159221151204447,0.15920188242508526,0.15918262296988953,0.15916337283096677,0.15914413526301477,0.15912490373142005,0.15910568149247759,0.15908646853833233,0.15906726486113879,0.15904807045306094,0.15902888530627218,0.1590097094129553,0.15899054601530738,0.15897138860395438,0.1589522404226796,0.15893310146370349,0.15891397171925584,0.15889485118157579,0.15887573984291187,0.15885663769552186,0.15883754796918564,0.15881846417959844,0.15879938955811565,0.15878032409703222,0.1587612677886523,0.15874222062528934,0.158723182599266,0.15870415370291405,0.15868513392857458,0.1586661264921572,0.15864712493735855,0.15862813248165172,0.15860914911741442,0.1585901748370334,0.1585712096329045,0.15855225349743268,0.158533306423032,0.15851437161337004,0.15849544263685633,0.15847652269871149,0.15845761179138568,0.1584387099073381,0.158419817039037,0.15840093317895942,0.15838205831959165,0.1583631924534287,0.1583443387704629,0.15832549086670847,0.158306651933699,0.1582878219639652,0.15826900095004673,0.15825018888449205,0.15823138575985857,0.1582125915687124,0.15819380948897552,0.1581750331410259,0.1581562657043164,0.1581375071714484,0.15811875753503207,0.15810001678768643,0.1580812849220391,0.15806256193072651,0.15804384780639386,0.15802514571347884,0.1580064492995754,0.1579877617306407,0.1579690829993546,0.15795041309840566,0.15793175202049103,0.15791309975831652,0.1578944563045965,0.1578758248118666,0.15785719895174236,0.15783858187826857,0.157819973584194,0.1578013740622759,0.15778278330528012,0.1577642013059809,0.15774562805716108,0.15772706355161198,0.1577085109285725,0.15768996388649287,0.15767142556611,0.15765289596024898,0.15763437506174346,0.1576158628634354,0.1575973593581753,0.1575788645388218,0.15756038153287663,0.15754190406247626,0.15752343525661044,0.15750497510817135,0.15748652673882074,0.1574680838824798,0.15744964966229336,0.15743122407118693,0.15741280710209424,0.15739439874795727,0.15737599900172633,0.15735760785635983,0.15733922530482455,0.15732085134009538,0.1573024859551555,0.15728412914299614,0.15726578089661689,0.15724744120902534,0.1572291100732373,0.1572107874822768,0.1571924734291758,0.15717417411500054,0.1571558771138571,0.15713758862972044,0.157119308655655,0.15710103718473328,0.1570827742100359,0.15706451972465146,0.15704627372167662,0.15702803619421604,0.15700980713538235,0.15699158653829623,0.1569733743960863,0.15695517070188922,0.15693697544884952,0.15691878863011968,0.15690061023886018,0.1568824402682394,0.1568642848706444,0.1568461317179871,0.15682798696552325,0.15680985060645283,0.1567917226339836,0.15677360304133123,0.1567554918217191,0.15673738896837863,0.15671929447454883,0.15670120833347664,0.1566831305384168,0.15666506108263173,0.15664699995939171,0.15662894716197479,0.15661090268366665,0.15659286651776083,0.15657483865755847,0.1565568252074321,0.15653881393575944,0.15652081094974238,0.15650281624271284,0.1564848298080105,0.15646685163898263,0.15644888172898413,0.15643092007137757,0.15641296665953314,0.1563950214868286,0.1563770845466493,0.15635915583238827,0.15634123533744596,0.15632332305523047,0.1563054189791575,0.15628752310265018,0.1562696354191392,0.1562517619856339,0.15623389066566423,0.15621602751903033,0.15619817253919285,0.15618032571962007,0.1561624870537875,0.15614465653517828,0.15612683415728296,0.15610901991359946,0.1560912137976331,0.15607341580289674,0.15605562592291047,0.1560378441512019,0.1560200704813059,0.15600230490676475,0.15598454742112813,0.155966798017953,0.15594906270752437,0.15593132944723617,0.15591360425012651,0.15589588710978158,0.15587817801979487,0.15586047697376718,0.15584278396530654,0.1558250989880283,0.15580742203555495,0.15578975310151627,0.15577209217954932,0.1557544392632982,0.15573679434641444,0.15571915742255651,0.15570152848539032,0.1556839075285887,0.15566629454583183,0.15564869550130714,0.15563109844500903,0.15561350934384094,0.1555959281915115,0.15557835498173644,0.15556078970823856,0.15554323236474782,0.15552568294500116,0.15550814144274264,0.1554906078517234,0.15547308216570158,0.1554555643784423,0.15543805448371786,0.1554205524753074,0.15540305834699722,0.15538557209258042,0.15536809370585727,0.15535062910553243,0.1553331664329614,0.1553157116095285,0.15529826462906168,0.15528082548539593,0.15526339417237306,0.1552459706838419,0.15522855501365812,0.15521114715568426,0.1551937471037898,0.15517635485185102,0.15515897039375115,0.15514159372338018,0.155124224834635,0.1551068637214193,0.15508951037764357,0.15507217067975643,0.15505483285398916,0.15503750277943637,0.15502018045003568,0.15500286585973164,0.15498555900247543,0.1549682598722251,0.1549509684629453,0.1549336847686075,0.15491640878318994,0.15489914050067746,0.15488187991506167,0.1548646270203409,0.15484738181052005,0.1548301442796108,0.15481291442163148,0.15479569223060705,0.15477848353866366,0.15476127666105474,0.15474407743251745,0.15472688584710326,0.15470970189887026,0.15469252558188315,0.15467535689021317,0.15465819581793822,0.1546410423591427,0.15462389650791755,0.15460675825836037,0.15458962760457517,0.15457250454067256,0.1545553890607697,0.15453828115899018,0.15452118082946417,0.15450408806632826,0.15448700865796766,0.15446993100748613,0.15445286090584548,0.15443579834720816,0.15441874332574318,0.15440169583562585,0.15438465587103806,0.154367623426168,0.15435059849521035,0.15433358107236614,0.15431657115184277,0.15429956872785416,0.1542825737946204,0.1542655863463681,0.15424860637733015,0.15423163388174582,0.1542146688538607,0.15419771703888943,0.15418076692663657,0.15416382426485953,0.15414688904782922,0.15412996126982276,0.1541130409251236,0.1540961280080214,0.15407922251281211,0.15406232443379797,0.15404543376528745,0.15402855050159522,0.15401167463704224,0.15399480616595568,0.15397794508266882,0.1539610913815213,0.15394424505685883,0.1539274061030334,0.15391058022264908,0.15389375599108268,0.15387693911344802,0.15386012958412176,0.15384332739748657,0.15382653254793135,0.15380974502985106,0.15379296483764682,0.15377619196572584,0.1537594264085014,0.15374266816039295,0.1537259172158259,0.1537091735692319,0.1536924372150484,0.15367570814771922,0.15365898636169398,0.15364227185142848,0.15362557027746587,0.15360887029964782,0.15359217758099472,0.15357549211598645,0.15355881389910875,0.15354214292485344,0.15352547918771828,0.15350882268220703,0.15349217340282936,0.15347553134410097,0.15345889650054342,0.15344226886668424,0.15342564843705692,0.15340903520620086,0.15339242916866128,0.1533758303189894,0.1533592386517424,0.153342659785942,0.1533260824648076,0.1533095123098064,0.15329294931551898,0.15327639347653174,0.15325984478743704,0.15324330324283292,0.15322676883732336,0.1532102415655181,0.15319372142203275,0.15317720840148868,0.15316070249851305,0.15314420370773885,0.15312771202380482,0.15311122744135544,0.15309474995504102,0.15307827955951758,0.15306182183281544,0.1530453656004643,0.15302891644290853,0.1530124743548271,0.15299603933090467,0.15297961136583163,0.1529631904543041,0.15294677659102388,0.15293036977069843,0.15291396998804088,0.15289757723777006,0.15288119151461044,0.15286481281329214,0.15284844112855092,0.15283207645512822,0.15281571878777106,0.15279936812123204,0.15278302999307009,0.15276669331007756,0.1527503636121966,0.15273404089420226,0.15271772515087517,0.15270141637700158,0.15268511456737321,0.15266881971678745,0.15265253182004715,0.15263625087196078,0.15261997686734224,0.1526037098010111,0.1525874496677923,0.1525711964625164,0.15255495018001944,0.15253871081514292,0.1525224783627339,0.1525062583203905,0.1524900396751389,0.15247382792693046,0.15245762307063399,0.1524414251011239,0.15242523401327995,0.15240904980198736,0.15239287246213684,0.15237670198862438,0.15236053837635158,0.15234438162022523,0.15232823171515772,0.1523120886560667,0.15229595243787525,0.15227982305551177,0.15226370050391017,0.152247590243517,0.15223148133594916,0.15221537924397846,0.15219928396256016,0.15218319548665477,0.15216711381122822,0.15215103893125165,0.1521349708417016,0.1521189095375599,0.15210285501381363,0.1520868072654552,0.15207076628748228,0.15205473207489786,0.1520387046227101,0.15202268392593252,0.15200666997958387,0.15199066277868808,0.15197466774469673,0.1519586740175157,0.15194268702089256,0.15192670674987221,0.15191073319950477,0.15189476636484553,0.15187880624095498,0.1518628528228988,0.1518469061057479,0.15183096608457824,0.15181503275447109,0.15179910611051278,0.1517831861477949,0.15176727286141403,0.15175136624647204,0.15173546629807583,0.15171957301133748,0.1517036917691979,0.15168781178887636,0.15167193845558116,0.15165607176444487,0.15164021171060504,0.15162435828920431,0.15160851149539048,0.15159267132431634,0.15157683777113973,0.15156101083102363,0.15154519049913598,0.15152937677064984,0.15151356964074325,0.15149776910459933,0.15148197515740613,0.1514661877943568,0.1514504070106495,0.15143463815119038,0.15141887050955374,0.1514031094328851,0.15138735491640254,0.1513716069553292,0.15135586554489303,0.15134013068032706,0.15132440235686925,0.15130868056976252,0.15129296531425468,0.15127725658559849,0.1512615543790517,0.1512458586898769,0.15123016951334162,0.1512144868447183,0.15119881067928434,0.15118314101232191,0.1511674831511701,0.1511518264648167,0.1511361762628125,0.15112053254045923,0.15110489529306348,0.15108926451593674,0.15107364020439532,0.1510580223537604,0.15104241095935794,0.15102680601651877,0.15101120752057853,0.15099561546687773,0.15098002985076156,0.15096445066758013,0.15094887791268832,0.1509333115814458,0.15091775166921692,0.1509022034462331,0.15088665635597062,0.15087111567084538,0.15085558138624094,0.15084005349754548,0.1508245320001521,0.15080901688945847,0.15079350816086712,0.15077800580978526,0.15076250983162476,0.15074702022180234,0.1507315369757393,0.1507160600888617,0.15070058955660032,0.15068512537439055,0.15066966753767252,0.15065421604189105,0.15063877612062102,0.1506233372909186,0.15060790478851663,0.15059247860887856,0.15057705874747246,0.15056164519977105,0.15054623796125172,0.15053083702739636,0.15051544239369166,0.15050005405562877,0.15048467200870355,0.15046929624841643,0.1504539267702724,0.15043856356978105,0.15042320664245665,0.15040785598381792,0.1503925115893882,0.1503771786565297,0.15036184677498518,0.15034652114424862,0.1503312017598616,0.15031588861737016,0.150300581712325,0.15028528104028122,0.1502699865967986,0.15025469837744135,0.15023941637777816,0.15022414059338227,0.15020887101983144,0.15019360765270787,0.15017835048759823,0.15016309952009382,0.15014785474579023,0.15013261616028764,0.15011738892517143,0.1501021627019935,0.15008694265444522,0.15007172877814454,0.15005652106871387,0.1500413195217801,0.15002612413297442,0.15001093489793257,0.14999575181229463,0.1499805748717051,0.14996540407181294,0.14995023940827146,0.14993508087673837,0.1499199284728758,0.14990478219235018,0.14988964203083244,0.14987450798399773,0.14985938517808334,0.14984426334558748,0.14982914761482805,0.14981403798149767,0.1497989344412934,0.14978383698991657,0.1497687456230728,0.14975366033647214,0.14973858112582886,0.14972350798686165,0.1497084409152934,0.14969337990685136,0.14967832495726707,0.1496632760622764,0.1496482332176194,0.1496331964190405,0.14961817075989295,0.14960314603867322,0.14958812735079186,0.1495731146920103,0.14955810805809427,0.14954310744481372,0.14952811284794287,0.14951312426326013,0.14949814168654818,0.14948316511359394,0.14946819454018848,0.14945322996212715,0.14943827137520949,0.14942331877523918,0.14940837215802424,0.14939343151937678,0.14937849685511304,0.1493635732240493,0.14934865049399576,0.1493337337258014,0.14931882291529922,0.14930391805832638,0.14928901915072423,0.14927412618833824,0.149259239167018,0.14924435808261724,0.14922948293099386,0.1492146137080099,0.1491997504095314,0.1491848930314287,0.1491700415695761,0.14915519601985208,0.14914035637813922,0.14912552264032417,0.1491106998310936,0.14909587788675124,0.1490810618339926,0.14906625166872065,0.14905144738684237,0.149036648984269,0.14902185645691557,0.14900706980070144,0.14899228901154984,0.14897751408538806,0.1489627450181475,0.14894798180576352,0.14893322444417556,0.14891847292932706,0.14890372725716544,0.1488889874236422,0.1488742534247128,0.1488595302513352,0.14884480790750018,0.14883009138615078,0.14881538068325842,0.14880067579479858,0.14878597671675062,0.14877128344509796,0.14875659597582788,0.14874191430493172,0.1487272384284047,0.14871256834224608,0.14869790404245897,0.14868324552505044,0.14866859278603156,0.14865394582141725,0.14863930462722644,0.14862466919948186,0.14861004449580673,0.14859542058708605,0.14858080243290483,0.14856619002930155,0.14855158337231847,0.14853698245800184,0.14852238728240175,0.1485077978415722,0.148493214131571,0.14847863614845985,0.14846406388830444,0.1484494973471741,0.14843493652114223,0.1484203814062859,0.1484058319986862,0.1483912882944279,0.14837675028959973,0.14836222290887752,0.14834769628926087,0.14833317535736462,0.14831866010929276,0.14830415054115303,0.14828964664905708,0.1482751484291203,0.1482606558774618,0.1482461689902046,0.14823168776347548,0.14821721219340495,0.14820274227612737,0.1481882780077808,0.14817381938450716,0.14815936640245203,0.1481449190577648,0.14813047734659865,0.14811604616106322,0.14810161570350586,0.14808719086795277,0.14807277165057203,0.14805835804753545,0.14804395005501866,0.1480295476692009,0.14801515088626518,0.1480007597023982,0.14798637411379037,0.14797199411663584,0.14795761970713237,0.14794325088148153,0.1479288876358885,0.14791452996656212,0.14790017786971496,0.1478858313415633,0.14787149524202542,0.1478571598380423,0.1478428299914266,0.14782850569840916,0.1478141869552246,0.14779987375811107,0.14778556610331034,0.1477712639870679,0.1477569674056329,0.14774267635525795,0.14772839083219944,0.1477141108327173,0.14769983635307513,0.14768556738954008,0.147671303938383,0.14765704599587817,0.14764279355830368,0.14762855145375514,0.14761431001302536,0.1476000740660826,0.1475858436092192,0.14757161863873103,0.14755739915091756,0.14754318514208187,0.14752897660853048,0.14751477354657358,0.14750057595252486,0.14748638382270154,0.1474721971534244,0.14745801594101782,0.1474438401818096,0.14742966987213113,0.14741550500831735,0.14740134558670664,0.14738719640393474,0.14737304785391664,0.14735890473513927,0.14734476704395505,0.14733063477672,0.14731650792979356,0.14730238649953864,0.14728827048232174,0.14727415987451273,0.14726005467248504,0.1472459548726155,0.14723186047128445,0.1472177714648757,0.1472036878497765,0.14718960962237757,0.14717553677907305,0.14716147408721533,0.14714741199947262,0.14713335528502872,0.14711930394029152,0.1471052579616724,0.1470912173455861,0.14707718208845086,0.14706315218668825,0.14704912763672334,0.14703510843498455,0.1470210945779037,0.14700708606191604,0.1469930828834602,0.14697908503897822,0.14696509252491552,0.14695110533772088,0.14693712347384646,0.14692315166987208,0.14690918044020543,0.14689521452323695,0.14688125391543233,0.14686729861326056,0.146853348613194,0.14683940391170835,0.14682546450528267,0.14681153039039935,0.14679760156354413,0.14678367802120607,0.14676975975987755,0.14675584677605433,0.14674193906623545,0.14672803662692324,0.14671413945462336,0.14670024754584485,0.14668636560674064,0.14667248421276244,0.1466586080718535,0.14664473718053603,0.1466308715353354,0.14661701113278044,0.14660315596940318,0.14658930604173886,0.1465754613463261,0.14656162187970673,0.14654778763842585,0.14653395861903185,0.1465201348180763,0.14650631623211416,0.1464925028577035,0.14647869469140568,0.14646489172978533,0.14645109864890885,0.1464373060845876,0.14642351871465822,0.1464097365356982,0.14639595954428833,0.14638218773701253,0.14636842111045803,0.14635465966121522,0.14634090338587763,0.14632715228104207,0.14631340634330856,0.14629966556928028,0.1462859299555636,0.14627219949876805,0.14625847419550642,0.14624475404239456,0.1462310390360516,0.14621733382279223,0.14620362909811402,0.1461899295100821,0.14617623505532829,0.1461625457304874,0.1461488615321975,0.14613518245709983,0.1461215085018387,0.14610783966306157,0.14609417593741908,0.14608051732156496,0.14606686381215608,0.14605321540585248,0.14603957209931723,0.14602593388921656,0.1460123007722198,0.14599867274499947,0.145985054424448,0.14597143656508652,0.14595782378553854,0.1459442160824889,0.14593061345262553,0.14591701589263945,0.14590342339922482,0.14588983596907876,0.14587625359890158,0.14586267628539656,0.14584910402527018,0.14583553681523184,0.14582197465199406,0.14580841753227247,0.14579486545278567,0.14578131841025535,0.14576777640140623,0.14575424401403297,0.14574071206102787,0.14572718513189753,0.14571366322337878,0.1457001463322115,0.14568663445513869,0.14567312758890621,0.14565962573026306,0.14564612887596118,0.14563263702275556,0.1456191501674042,0.14560566830666807,0.14559219143731117,0.14557871955610044,0.14556525265980588,0.14555179074520044,0.14553833380906003,0.1455248864104008,0.1455114394198442,0.14549799739809946,0.14548456034195437,0.14547112824819974,0.14545770111362932,0.1454442789350399,0.14543086170923103,0.14541744943300547,0.14540404210316873,0.14539063971652935,0.14537724226989876,0.14536384976009142,0.1453504621839246,0.14533707953821862,0.14532370181979662,0.14531032902548474,0.1452969656858348,0.14528360272856555,0.14527024468590333,0.1452568915546859,0.145243543331754,0.14523020001395112,0.1452168615981238,0.14520352808112139,0.14519019945979617,0.14517687573100327,0.14516355689160076,0.14515024293844953,0.14513693386841342,0.14512362967835907,0.14511033036515605,0.14509703592567677,0.14508374635679647,0.14507046616091218,0.14505718632221767,0.1450439113447662,0.14503064122544454,0.14501737596114214,0.14500411554875148,0.14499085998516772,0.14497760926728898,0.14496436339201615,0.144951122356253,0.14493788615690606,0.14492465479088468,0.14491142825510114,0.14489820654647045,0.14488498966191043,0.14487177759834174,0.14485857483194106,0.14484537239949546,0.14483217477882102,0.1448189819668496,0.14480579396051585,0.14479261075675717,0.14477943235251386,0.1447662587447289,0.14475308993034808,0.14473992590631998,0.14472676666959597,0.14471361221713014,0.14470046254587937,0.14468731765280335,0.14467417753486447,0.1446610421890279,0.14464791161226156,0.14463479025317436,0.14462166920384809,0.14460855291451336,0.14459544138214905,0.14458233460373685,0.1445692325762611,0.14455613529670894,0.1445430427620702,0.1445299549693375,0.14451687191550605,0.14450379359757393,0.1444907200125418,0.14447765115741315,0.14446458702919415,0.1444515276248936,0.14443847294152312,0.1444254229760969,0.14441238214995175,0.1443993416098698,0.14438630577879216,0.14437327465374378,0.14436024823175236,0.14434722650984833,0.14433420948506478,0.14432119715443742,0.14430818951500463,0.14429518656380758,0.14428218829788997,0.14426919471429822,0.14425620581008142,0.14424322158229128,0.14423024202798215,0.14421726714421113,0.14420429692803782,0.14419133577381804,0.14417837488244906,0.1441654186498737,0.1441524670731622,0.14413952014938744,0.14412657787562488,0.14411364024895265,0.14410070726645155,0.14408777892520486,0.14407485522229857,0.1440619361548213,0.14404902171986425,0.14403611191452118,0.1440232067358885,0.14401030618106528,0.14399741024715307,0.1439845189312561,0.14397163660103576,0.14395875451092818,0.14394587703016498,0.14393300415586066,0.1439201358851324,0.14390727221509989,0.1438944131428854,0.14388155866561375,0.14386870878041244,0.1438558634844114,0.14384302277474317,0.14383018664854288,0.14381735510294819,0.14380452813509928,0.14379170574213895,0.14377888792121252,0.1437660746694678,0.14375327032815424,0.1437404662046792,0.14372766664184564,0.14371487163681157,0.14370208118673755,0.1436892952887866,0.1436765139401243,0.14366373713791875,0.1436509648793406,0.14363819716156292,0.14362543398176142,0.1436126753371142,0.14359992122480197,0.14358717164200785,0.14357442658591751,0.14356168605371916,0.1435489500426034,0.1435362228676858,0.14352349588878593,0.14351077342255655,0.14349805546619818,0.14348534201691396,0.14347263307190944,0.14345992862839269,0.14344722868357415,0.14343453323466684,0.14342184227888619,0.1434091558134501,0.14339647383557894,0.14338379634249554,0.14337112333142515,0.14335845479959555,0.14334579074423687,0.14333313116258173,0.1433204803438859,0.14330782969983036,0.1432951835211918,0.14328254180521263,0.14326990454913768,0.1432572717502142,0.1432446434056918,0.1432320195128226,0.14321940006886114,0.14320678507106432,0.14319417451669147,0.14318156840300442,0.14316896672726728,0.14315636948674662,0.14314377667871145,0.14313118830043314,0.14311860434918547,0.1431060290886342,0.14309345398177933,0.14308088329379176,0.14306831702195483,0.14305575516355423,0.14304319771587812,0.14303064467621696,0.14301809604186366,0.14300555181011348,0.142993011978264,0.1429804765436152,0.14296794550346947,0.14295541885513155,0.14294289659590848,0.14293037872310968,0.14291786523404698,0.14290536036854443,0.14289285563741397,0.14288035528197,0.1428678592995337,0.1428553676874286,0.1428428804429806,0.1428303975635179,0.142817919046371,0.1428054448888728,0.14279297508835853,0.14278050964216568,0.1427680485476341,0.14275559180210598,0.14274313940292582,0.14273069134744043,0.1427182476329989,0.14270580825695267,0.1426933774340483,0.14268094672538684,0.14266852034718966,0.1426560982968175,0.14264368057163324,0.14263126716900215,0.14261885808629174,0.14260645332087185,0.14259405287011456,0.1425816567313943,0.1425692649020877,0.1425568773795738,0.14254449416123371,0.14253211524445103,0.14251974062661146,0.1425073703051031,0.14249500427731623,0.1424826467331783,0.14247028928356015,0.14245793611984892,0.1424455872394439,0.14243324263974674,0.14242090231816132,0.1424085662720937,0.14239623449895222,0.1423839069961475,0.14237158376109238,0.14235926479120192,0.14234695008389345,0.1423346396365865,0.14232233344670284,0.14231003151166646,0.14229773382890365,0.14228544039584282,0.14227315537784677,0.14226087043504473,0.14224858973424426,0.1422363132728826,0.14222404104839936,0.14221177305823623,0.14219950929983718,0.14218724977064834,0.1421749944681181,0.14216274338969698,0.1421504965328377,0.14213825389499526,0.14212601547362677,0.14211378126619154,0.14210155127015112,0.14208932548296913,0.1420771039021115,0.14206489066862724,0.1420526774913999,0.1420404685129085,0.14202826373062752,0.14201606314203377,0.1420038667446061,0.14199167453582567,0.14197948651317563,0.14196730267414143,0.1419551230162106,0.14194294753687287,0.1419307762336201,0.14191860910394627,0.1419064461453476,0.1418942873553223,0.14188213273137093,0.141869982270996,0.14185784009118,0.1418456979490641,0.1418335599630461,0.14182142613063714,0.14180929644935045,0.1417971709167014,0.14178504953020757,0.1417729322873885,0.14176081918576597,0.14174871022286384,0.1417366053962081,0.14172450470332684,0.14171240814175023,0.14170031570901062,0.1416882274026424,0.14167614322018207,0.14166406315916827,0.14165199131276046,0.141639919485868,0.1416278517730513,0.14161578817185735,0.14160372867983528,0.14159167329453629,0.1415796220135135,0.1415675748343224,0.1415555317545203,0.14154349277166672,0.14153145788332325,0.14151942708705348,0.14150740038042317,0.1414953777610001,0.14148335922635408,0.14147134477405704,0.14145933440168296,0.1414473321788084,0.14143532995762842,0.14142333180910652,0.1414113377308248,0.14139934772036752,0.14138736177532102,0.14137537989327356,0.1413634020718156,0.1413514283085395,0.14133945860103975,0.14132749294691282,0.1413155313437573,0.14130357378917363,0.14129162028076453,0.14127967081613454,0.14126772539289034,0.14125578400864058,0.14124385070961562,0.14123191739482077,0.1412199881118593,0.14120806285834792,0.1411961416319054,0.1411842244301525,0.14117231125071197,0.14116040209120861,0.14114849694926915,0.14113659582252241,0.14112469870859912,0.14111280560513212,0.1411009165097561,0.14108903142010784,0.14107715033382612,0.14106527324855164,0.14105340016192713,0.14104153509707004,0.1410296699993272,0.14101780889317517,0.1410059517762646,0.14099409864624815,0.14098224950078034,0.1409704043375178,0.140958563154119,0.1409467259482445,0.1409348927175567,0.14092306345972,0.14091123817240087,0.1408994168532676,0.14088759949999047,0.14087578611024174,0.1408639766816956,0.14085217521592636,0.1408403737014741,0.14082857614125951,0.14081678253296462,0.14080499287427325,0.14079320716287136,0.14078142539644667,0.14076964757268898,0.1407578736892899,0.14074610374394309,0.140734337734344,0.14072257565819013,0.14071081751318085,0.1406990632970174,0.14068731300740306,0.14067556664204292,0.14066382419864407,0.14065208965611128,0.1406403550484353,0.140628624355854,0.14061689757608203,0.140605174706836,0.1405934557458344,0.14058174069079768,0.14057002953944805,0.14055832228950976,0.14054661893870887,0.1405349194847734,0.1405232239254332,0.14051153225842003,0.14049984448146755,0.14048816059231128,0.14047648058868864,0.14046480446833892,0.14045313618772115,0.14044146782582734,0.1404298033404364,0.14041814272929506,0.14040648599015204,0.14039483312075787,0.14038318411886497,0.14037153898222754,0.1403598977086018,0.14034826029574565,0.14033662674141903,0.14032499704338358,0.1403133711994029,0.14030174920724237,0.14029013106466923,0.1402785167694527,0.1402669063193636,0.14025530364863587,0.14024370088081958,0.1402321019514555,0.1402205068583219,0.14020891559919896,0.14019732817186867,0.14018574457411487,0.14017416480372322,0.14016258885848118,0.14015101673617808,0.14013944843460505,0.14012788395155507,0.14011632328482287,0.1401047664322051,0.14009321339150016,0.1400816641605083,0.1400701187370315,0.14005858103329596,0.14004704321697312,0.14003550920158306,0.14002397898493513,0.14001245256484043,0.14000092993911178,0.1399894111055639,0.13997789606201325,0.13996638480627813,0.13995487733617856,0.13994337364953646,0.13993187374417546,0.13992037761792095,0.1399088852686002,0.13989739669404225,0.1398859118920778,0.1398744308605395,0.13986295748986022,0.13985148399140182,0.13984001425687867,0.1398285482841304,0.1398170860709985,0.13980562761532614,0.1397941729149583,0.13978272196774177,0.139771274771525,0.13975983132415828,0.13974839162349367,0.13973695566738495,0.13972552345368763,0.139714094980259,0.13970267024495814,0.13969124924564585,0.13967983198018466,0.13966842231742574,0.13965701251199664,0.13964560643401747,0.13963420408135777,0.1396228054518888,0.13961141054348356,0.13960001935401678,0.13958863188136492,0.1395772481234062,0.1395658680780205,0.13955449174308956,0.1395431191164967,0.13953175019612704,0.1395203849798674,0.1395090234656064,0.1394976656512342,0.1394863115346429,0.13947496496331035,0.139463618234711,0.13945227519757944,0.13944093584981454,0.13942960018931683,0.13941826821398853,0.13940693992173367,0.13939561531045785,0.13938429437806846,0.1393729771224745,0.13936166354158686,0.13935035363331785,0.13933904739558167,0.1393277448262942,0.1393164459233729,0.13930515068473703,0.13929385910830744,0.1392825750203947,0.13927129076090675,0.13926001015739858,0.13924873320779788,0.13923745991003397,0.13922619026203784,0.1392149242617421,0.1392036619070811,0.13919240319599085,0.13918114812640903,0.139169896696275,0.1391586489035297,0.13914740474611584,0.13913616422197775,0.13912492732906137,0.13911369406531446,0.1391024644286862,0.13909124222452257,0.13908001983475765,0.13906880106596994,0.1390575859161154,0.13904637438315157,0.13903516646503766,0.1390239621597345,0.1390127614652046,0.13900156437941216,0.13899037090032285,0.13897918102590417,0.1389679947541251,0.1389568120829564,0.1389456330103703,0.13893445753434083,0.1389232856528435,0.13891212115167578,0.13890095645195846,0.13888979534071047,0.1388786378159139,0.13886748387555242,0.1388563335176114,0.13884518674007776,0.13883404354094,0.13882290391818833,0.1388117678698145,0.1388006353938119,0.13878950648817556,0.13877838115090205,0.13876725937998954,0.13875614117343793,0.13874502652924856,0.13873391544542446,0.13872281168718448,0.13871170771690033,0.13870060730100076,0.1386895104374952,0.13867841712439455,0.1386673273597115,0.13865624114146013,0.13864515846765624,0.1386340793363172,0.13862300374546188,0.1386119316931108,0.13860086317728612,0.13858979819601142,0.13857873674731197,0.1385676788292146,0.13855662443974776,0.13854557357694133,0.13853452998563048,0.13852348616904653,0.138512445873223,0.13850140909619615,0.1384903758360038,0.1384793460906853,0.1384683198582816,0.13845729713683513,0.13844627792439002,0.13843526221899183,0.13842425001868774,0.13841324132152644,0.1384022361255582,0.1383912344288348,0.13838023622940968,0.1383692415253377,0.13835825031467527,0.1383472663220662,0.13833628209121515,0.13832530134795298,0.13831432409034228,0.13830335031644722,0.1382923800243335,0.13828141321206833,0.13827044987772044,0.13825949001936017,0.1382485336350593,0.13823758072289116,0.13822663128093063,0.13821568530725412,0.13820474279993955,0.13819380375706636,0.1381828681767155,0.13817193605696942,0.1381610111024701,0.13815008589701488,0.1381391641464216,0.13812824584877884,0.13811733100217663,0.1381064196047065,0.13809551165446154,0.13808460714953633,0.13807370608802685,0.1380628084680308,0.13805191428764718,0.13804102354497655,0.13803013623812102,0.13801925236518411,0.13800837192427096,0.13799749491348806,0.13798662133094347,0.13797575486146457,0.13796488812856544,0.13795402481823835,0.13794316492859726,0.1379323084577577,0.13792145540383666,0.13791060576495254,0.1378997595392253,0.1378889167247763,0.13787807731972848,0.13786724132220618,0.13785640873033522,0.1378455795422429,0.13783475375605803,0.1378239313699108,0.137813112381933,0.1378022967902577,0.1377914882600825,0.13778067945426725,0.13776987403916352,0.13775907201291035,0.13774827337364817,0.13773747811951897,0.13772668624866616,0.1377158977592346,0.1377051126493705,0.13769433091722175,0.13768355256093745,0.13767277757866833,0.13766200596856645,0.1376512377287854,0.13764047285748016,0.1376297113528071,0.13761895321292422,0.13760820208358118,0.13759745066661808,0.13758670260892794,0.13757595790867444,0.13756521656402262,0.13755447857313896,0.13754374393419141,0.13753301264534934,0.13752228470478348,0.137511560110666,0.13750083886117065,0.1374901209544724,0.13747940638874778,0.13746869516217464,0.1374579872729323,0.13744728271920154,0.13743658149916446,0.13742588723930294,0.1374151926800761,0.13740450144909852,0.13739381354455799,0.13738312896464372,0.13737244770754636,0.1373617697714579,0.1373510951545718,0.13734042385508288,0.1373297558711874,0.13731909120108293,0.13730842984296862,0.1372977717950448,0.13728711705551336,0.1372764656225775,0.13726581749444183,0.1372551726693124,0.13724453475458062,0.1372338965289683,0.13722326160098924,0.13721262996885494,0.13720200163077834,0.13719137658497382,0.13718075482965708,0.13717013636304523,0.13715952118335673,0.13714890928881146,0.13713830067763064,0.1371276953480369,0.1371170932982542,0.1371064945265079,0.13709589903102473,0.1370853068100328,0.13707472145311608,0.13706413577468718,0.1370535533654426,0.13704297422361592,0.13703239834744207,0.13702182573515737,0.13701125638499942,0.13700069029520726,0.13699012746402126,0.13697956788968313,0.13696901157043598,0.13695845850452418,0.13694790869019358,0.1369373621256913,0.1369268188092658,0.13691627873916692,0.13690574191364585,0.13689521190353396,0.13688468156082834,0.1368741544574627,0.13686363059169365,0.13685310996177905,0.13684259256597814,0.13683207840255146,0.13682156746976099,0.13681105976586994,0.13680055528914284,0.13679005403784567,0.1367795560102456,0.13676906120461127,0.1367585696192125,0.1367480812523206,0.13673759610220804,0.13672711416714872,0.13671663899939213,0.13670616348817707,0.13669569118684538,0.13668522209367623,0.13667475620695008,0.13666429352494874,0.1366538340459553,0.13664337776825417,0.13663292469013108,0.13662247480987308,0.13661202812576853,0.13660158463610708,0.1365911443391797,0.1365807072332787,0.13657027331669758,0.13655984258773127,0.13654941504467596,0.13653899422136773,0.13652857304394886,0.1365181550473379,0.13650774022983628,0.13649732858974659,0.13648692012537283,0.13647651483502027,0.13646611271699544,0.13645571376960622,0.13644531799116172,0.13643492537997234,0.1364245359343498,0.13641414965260712,0.13640376653305855,0.13639338657401967,0.1363830097738073,0.13637263613073955,0.1363622691604055,0.13635190182551699,0.1363415376427357,0.13633117661038488,0.13632081872678903,0.1363104639902739,0.1363001123991666,0.13628976395179537,0.13627941864648982,0.13626907648158085,0.1362587374554005,0.13624840156628223,0.13623806881256065,0.1362277391925717,0.13621741270465249,0.1362070893471415,0.13619676911837844,0.1361864555158695,0.13617614153856644,0.13616583068503849,0.13615552295363031,0.13614521834268792,0.1361349168505585,0.13612461847559054,0.1361143232161338,0.13610403107053914,0.13609374203715888,0.1360834561143464,0.13607317330045646,0.136062893593845,0.13605261699286916,0.13604234349588742,0.13603207310125942,0.13602180580734607,0.13601154509373284,0.13600128399528605,0.1359910259926446,0.1359807710841743,0.1359705192682423,0.13596027054321685,0.13595002490746752,0.13593978235936505,0.13592954289728146,0.13591930651958994,0.13590907322466494,0.13589884301088218,0.13588861587661846,0.13587839182025196,0.13586817084016198,0.13585795293472908,0.13584773810233503,0.13583752980480457,0.13582732111259732,0.13581711548858208,0.13580691293114544,0.13579671343867525,0.13578651700956057,0.13577632364219164,0.13576613333495993,0.13575594608625813,0.1357457618944801,0.13573558075802092,0.13572540267527688,0.1357152276446455,0.1357050556645254,0.13569488673331653,0.13568472084941996,0.13567455801123798,0.1356644016629926,0.13565424491041964,0.13564409119877582,0.13563394052646824,0.13562379289190513,0.13561364829349593,0.1356035067296513,0.13559336819878307,0.13558323269930422,0.13557310022962898,0.1355629707881727,0.13555284437335194,0.1355427209835845,0.13553260061728928,0.13552248327288638,0.1355123689487971,0.1355022576434439,0.13549215278360208,0.13548204750997053,0.13547194525035003,0.1354618460031678,0.13545174976685212,0.13544165653983256,0.1354315663205398,0.13542147910740562,0.1354113948988631,0.13540131369334643,0.1353912354892909,0.1353811602851331,0.13537108807931067,0.13536101887026242,0.13535095265642838,0.13534088943624972,0.135330832620222,0.13532077538166803,0.13531072113210035,0.1353006698699648,0.1352906215937083,0.13528057630177895,0.13527053399262598,0.1352604946646998,0.13525045831645197,0.13524042494633515,0.13523039455280322,0.1352203671343112,0.13521034268931517,0.1352003212162724,0.13519030271364135,0.13518028717988156,0.13517027461345377,0.13516026840770407,0.13515026177032166,0.13514025809566071,0.13513025738218648,0.13512025962836535,0.13511026483266486,0.13510027299355368,0.1350902841095016,0.13508029817897954,0.13507031520045953,0.1350603351724148,0.13505035809331967,0.13504038396164952,0.13503041277588096,0.13502044453449163,0.13501047923596043,0.1350005168787672,0.13499056083925892,0.1349806043591896,0.1349706508159053,0.13496070020789053,0.1349507525336307,0.13494080779161258,0.13493086598032386,0.13492092709825343,0.1349109911438913,0.13490105811572853,0.13489112801225736,0.1348812008319711,0.1348712765733642,0.1348613552349322,0.1348514368151717,0.13484152131258048,0.13483160872565741,0.13482170241389854,0.13481179565282495,0.13480189180292315,0.13479199086269644,0.13478209283064913,0.13477219770528673,0.13476230548511578,0.13475241616864395,0.13474252975437992,0.1347326462408336,0.13472276562651583,0.13471288790993877,0.1347030130896154,0.13469314116406003,0.1346832721317879,0.1346734059913154,0.13466354274115994,0.13465368572411354,0.13464382824916987,0.13463397366010268,0.13462412195543383,0.13461427313368615,0.13460442719338364,0.1345945841330513,0.1345847439512153,0.13457490664640281,0.13456507221714212,0.13455524066196256,0.1345454119793946,0.13453558616796968,0.1345257632262204,0.13451594315268042,0.1345061259458844,0.13449631160436817,0.13448650345436422,0.13447669483804844,0.1344668890826267,0.134457086186639,0.1344472861486265,0.1344374889671313,0.13442769464069673,0.13441790316786703,0.13440811454718757,0.13439832877720476,0.1343885458564661,0.13437876578352007,0.13436898855691629,0.1343592141752054,0.13434944263693915,0.1343396739406702,0.1343299080849524,0.1343201483796018,0.13431038819968955,0.13430063085599667,0.13429087634708112,0.13428112467150197,0.13427137582781928,0.13426162981459422,0.13425188663038895,0.13424214627376674,0.1342324087432918,0.13422267403752947,0.1342129421550461,0.13420321309440905,0.1341934868541868,0.1341837634329488,0.1341740428292655,0.1341643250417085,0.13415461336381856,0.1341449012032788,0.13413519185458658,0.1341254853163176,0.13411578158704854,0.13410608066535715,0.13409638254982217,0.1340866872390234,0.13407699473154164,0.13406730502595868,0.13405761812085745,0.13404793401482185,0.13403825270643668,0.13402857419428796,0.1340188984769626,0.1340092255530486,0.13399955542113492,0.1339898913586267,0.1339802268055388,0.13397056504022484,0.13396090606127775,0.13395124986729168,0.13394159645686168,0.13393194582858386,0.13392229798105534,0.1339126529128742,0.13390301062263957,0.13389337110895158,0.1338837343704114,0.13387410040562117,0.133864469213184,0.13385484079170412,0.13384521513978664,0.13383559225603772,0.13382597540186458,0.1338163580493375,0.13380674346080398,0.13379713163487417,0.13378752257015922,0.13377791626527133,0.1337683127188236,0.13375871192943029,0.13374911389570643,0.13373951861626818,0.13372992608973275,0.1337203363147182,0.13371074928984367,0.13370116501372925,0.13369158348499605,0.13368200470226613,0.13367243191201425,0.1336628586162308,0.1336532880623233,0.13364372024891774,0.13363415517464114,0.13362459283812148,0.13361503323798776,0.1336054763728699,0.13359592224139885,0.13358637084220654,0.13357682217392583,0.13356727623519057,0.13355773302463567,0.13354819254089687,0.133538654782611,0.13352911974841586,0.1335195874369501,0.13351006107895336,0.13350053420794414,0.13349101005558686,0.13348148862052414,0.13347196990139953,0.13346245389685762,0.13345294060554388,0.13344343002610487,0.133433922157188,0.13342441699744167,0.13341491454551527,0.13340541480005913,0.13339591775972456,0.1333864234231638,0.1333769317890301,0.13336744285597757,0.1333579566226614,0.1333484763042189,0.13333899546542996,0.133329517322349,0.1333200418736349,0.13331056911794756,0.13330109905394788,0.13329163168029765,0.13328216699565965,0.13327270499869753,0.133263245688076,0.13325378906246063,0.133244335120518,0.13323488386091556,0.1332254352823218,0.1332159893834061,0.13320654616283875,0.13319710561929107,0.13318767095242945,0.13317823575803164,0.13316880323667343,0.13315937338702977,0.13314994620777668,0.13314052169759102,0.1331310998551507,0.13312168067913446,0.13311226416822197,0.13310285032109395,0.13309343913643193,0.13308403061291846,0.13307462474923692,0.13306522154407177,0.13305582099610824,0.13304642310403259,0.13303702786653196,0.13302763846793167,0.13301824853474695,0.13300886125220474,0.1329994766189959,0.1329900946338122,0.13298071529534639,0.13297133860229204,0.13296196455334378,0.13295259314719698,0.1329432243825481,0.1329338582580944,0.13292449477253415,0.13291513392456647,0.13290577571289144,0.13289642013620998,0.13288706719322402,0.13287771688263636,0.13286837237355936,0.1328590273229885,0.1328496849009302,0.13284034510609094,0.13283100793717809,0.13282167339289988,0.13281234147196552,0.13280301217308507,0.13279368549496953,0.13278436143633074,0.13277503999588153,0.1327657211723356,0.1327564049644075,0.13274709137081278,0.13273778039026785,0.13272847202148993,0.13271916626319732,0.13270986626941617,0.13270056572736785,0.13269126779196522,0.13268197246193006,0.1326726797359851,0.13266338961285384,0.1326541020912608,0.13264481716993134,0.13263553484759172,0.13262625512296908,0.13261697799479147,0.1326077034617878,0.1325984315226879,0.13258916217622246,0.1325798954211231,0.13257063125612228,0.13256136967995338,0.13255211383168158,0.13254285742850302,0.1325336036103622,0.132524352375996,0.13251510372414219,0.13250585765353948,0.13249661416292735,0.13248737325104626,0.13247813491663749,0.1324688991584432,0.13245966597520648,0.13245043536567122,0.13244120732858225,0.1324319818626852,0.1324227589667267,0.13241353863945413,0.13240432087961573,0.1323951088114395,0.13238589618184812,0.13237668611594147,0.13236747861247136,0.1323582736701904,0.13234907128785214,0.13233987146421092,0.132330674198022,0.1323214794880415,0.13231228733302636,0.13230309773173443,0.13229391068292443,0.1322847261853559,0.13227554423778923,0.1322663648389857,0.13225718798770753,0.13224801368271763,0.13223884503352898,0.13222967581654543,0.13222050914214473,0.13221134500909335,0.1322021834161585,0.13219302436210836,0.13218386784571187,0.13217471386573895,0.13216556242096023,0.13215641351014723,0.13214726713207242,0.132138123285509,0.13212898196923104,0.1321198431820135,0.13211070692263216,0.13210157318986365,0.1320924450794819,0.13208331639541632,0.13207419023429895,0.1320650665949098,0.13205594547602972,0.1320468268764404,0.1320377107949244,0.13202859723026508,0.13201948618124665,0.13201037764665416,0.1320012716252735,0.13199216811589143,0.13198306711729546,0.13197396862827404,0.13196487264761642,0.1319557791741126,0.13194668820655353,0.13193760282623138,0.1319285168660888,0.13191943340826912,0.13191035245156651,0.13190127399477605,0.13189219803669364,0.13188312457611598,0.13187405361184062,0.13186498514266595,0.13185591916739114,0.13184685568481624,0.13183779469374207,0.13182873619297036,0.13181968018130355,0.13181062665754495,0.13180157562049877,0.13179252706896988,0.13178348406988688,0.13177444048496875,0.13176539938198814,0.13175636075975333,0.13174732461707336,0.13173829095275807,0.1317292597656182,0.1317202310544652,0.13171120481811144,0.13170218105537,0.13169315976505486,0.13168414094598077,0.13167512459696326,0.13166611071681877,0.13165709930436445,0.1316480903584183,0.1316390838777991,0.13163008291518855,0.13162108136084769,0.13161208226829552,0.131603085636354,0.13159409146384599,0.13158509974959515,0.1315761104924259,0.13156712369116352,0.13155813934463403,0.13154915745166432,0.131540178011082,0.13153120102171556,0.13152222648239423,0.13151325439194808,0.13150428474920794,0.13149531755300545,0.1314863528021731,0.13147739353526094,0.13146843367084082,0.1314594762482933,0.13145052126645398,0.13144156872415932,0.13143261862024652,0.1314236709535536,0.1314147257229193,0.1314057829271832,0.13139684256518572,0.131387904635768,0.13137896913777194,0.13137003607004036,0.13136110543141669,0.13135217722074533,0.13134325143687128,0.13133432807864048,0.13132541017058555,0.13131649165936016,0.1313075755703207,0.1312986619023162,0.13128975065419646,0.13128084182481203,0.1312719354130143,0.13126303141765536,0.1312541298375881,0.13124523067166624,0.13123633391874426,0.13122743957767735,0.13121854764732155,0.13120965812653362,0.13120077101417119,0.13119188630909254,0.13118300401015678,0.13117412712799187,0.13116524963710713,0.13115637454894766,0.13114750186237562,0.13113863157625397,0.13112976368944648,0.13112089820081765,0.13111203510923275,0.13110317441355776,0.13109431611265956,0.13108546020540568,0.13107660669066443,0.13106775556730496,0.13105890683419708,0.13105006049021145,0.13104121653421943,0.13103237496509318,0.13102353877966738,0.13101470198008344,0.13100586756398666,0.1309970355302522,0.13098820587775603,0.13097937860537484,0.13097055371198607,0.13096173119646798,0.13095291105769952,0.1309440932945604,0.1309352779059311,0.13092646489069287,0.13091765424772767,0.13090884597591826,0.13090004007414813,0.1308912365413015,0.13088243537626337,0.13087363956218534,0.13086484312861996,0.1308560490595229,0.1308472573537822,0.1308384680102865,0.1308296810279254,0.13082089640558903,0.1308121141421684,0.13080333423655519,0.1307945566876419,0.1307857814943217,0.13077700865548855,0.13076823817003713,0.13075947003686283,0.13075070425486188,0.1307419408229311,0.13073318271144355,0.1307244239755507,0.13071566758642356,0.13070691354296202,0.13069816184406666,0.13068941248863886,0.1306806654755806,0.13067192080379478,0.13066317847218484,0.1306544384796551,0.13064570082511057,0.13063696550745696,0.13062823252560074,0.13061950187844912,0.13061077356491,0.13060204758389202,0.1305933239343046,0.13058460557304796,0.1305758865822628,0.13056716991964104,0.130558455584095,0.13054974357453777,0.130541033889883,0.1305323265290452,0.13052362149093955,0.13051491877448199,0.1305062183785891,0.13049752030217832,0.1304888245441677,0.130480131103476,0.1304714399790228,0.13046275116972833,0.13045406467451356,0.13044538049230012,0.1304367015666221,0.1304280220063956,0.13041934475594022,0.13041066981418042,0.13040199718004153,0.1303933268524495,0.130384658830331,0.13037599311261347,0.130367329698225,0.13035866858609443,0.1303500097751513,0.13034135326432586,0.13033269905254907,0.1303240471387526,0.13031539752186883,0.13030675020083085,0.13029810517457246,0.13028946537336683,0.13028082493269433,0.13027218678360739,0.13026355092504266,0.13025491735593744,0.13024628607522978,0.13023765708185842,0.1302290303747628,0.130220405952883,0.13021178381515994,0.13020316396053513,0.13019454638795078,0.1301859310963499,0.13017731808467609,0.13016870735187366,0.13016009889688773,0.13015149271866397,0.13014289173431892,0.13013429010568814,0.13012569075066127,0.13011709366818688,0.13010849885721415,0.130099906316693,0.13009131604557403,0.13008272804280854,0.13007414230734854,0.13006555883814666,0.13005697763415627,0.13004839869433152,0.13003982201762704,0.13003124760299833,0.1300226754494015,0.13001410555579337,0.13000553792113148,0.12999697544947864,0.12998841232881903,0.12997985146398258,0.1299712928539296,0.129962736497621,0.12995418239401835,0.129945630542084,0.12993708094078088,0.1299285335890727,0.1299199884859238,0.1299114456302992,0.12990290502116458,0.12989436665748635,0.1298858305382316,0.12987729666236805,0.12986876502886407,0.12986023563668886,0.1298517113769534,0.1298431864635862,0.12983466378845943,0.1298261433505449,0.12981762514881506,0.1298091091822431,0.12980059544980282,0.1297920839504687,0.12978357468321597,0.12977506764702043,0.1297665628408586,0.12975806026370768,0.12974955991454548,0.1297410617923506,0.12973256589610216,0.12972407222478005,0.12971558077736484,0.12970709443211642,0.12969860742870565,0.12969012264614765,0.12968164008342567,0.1296731597395235,0.12966468161342576,0.12965620570411754,0.12964773201058472,0.12963926053181382,0.12963079126679203,0.12962232421450717,0.12961385937394776,0.12960539674410293,0.1295969363239625,0.12958847811251695,0.12958002210875744,0.12957156831167574,0.12956311958678035,0.12955467019928463,0.12954622301544635,0.12953777803426,0.12952933525472063,0.129520894675824,0.12951245629656646,0.12950402011594503,0.12949558613295747,0.12948715434660205,0.12947872475587782,0.12947029735978444,0.12946187215732216,0.12945344914749193,0.12944502832929541,0.1294366097017348,0.129428193263813,0.12941978186838557,0.1294113698060108,0.12940295993028778,0.129394552240222,0.12938614673481957,0.12937774341308728,0.12936934227403254,0.12936094331666348,0.12935254653998873,0.1293441519430177,0.12933575952476037,0.1293273692842274,0.12931898122043,0.1293105953323802,0.1293022116190905,0.12929383007957412,0.12928545355486695,0.12927707635920282,0.12926870133435583,0.12926032847934166,0.12925195779317677,0.12924358927487814,0.12923522292346348,0.1292268587379511,0.1292184967173599,0.1292101368607095,0.12920177916702008,0.12919342363531247,0.12918507026460818,0.12917671905392933,0.1291683700022986,0.12916002310873942,0.12915167837227576,0.12914333862147875,0.1291349981955498,0.1291266599237925,0.1291183238052334,0.12910998983889957,0.1291016580238189,0.12909332835901968,0.12908500084353106,0.1290766754763826,0.12906835225660462,0.12906003118322806,0.1290517122552844,0.1290433954718058,0.12903508083182508,0.12902676833437562,0.12901845797849146,0.12901014976320724,0.12900184650472463,0.12899354256702145,0.12898524076702617,0.12897694110377597,0.12896864357630863,0.12896034818366248,0.1289520549248765,0.1289437637989903,0.1289354748050441,0.1289271879420788,0.1289189032091358,0.12891062060525718,0.12890234012948562,0.12889406178086446,0.12888578555843758,0.12887751146124954,0.12886923948834544,0.12886097244365188,0.12885270471573385,0.1288444391092392,0.12883617562321556,0.12882791425671108,0.12881965500877465,0.12881139787845564,0.12880314286480407,0.1287948899668706,0.12878663918370653,0.12877839051436363,0.1287701439578944,0.1287618995133519,0.12875365717978984,0.1287454169562625,0.1287371788418247,0.12872894283553202,0.12872071172912913,0.12871247993558116,0.1287042502473487,0.12869602266348962,0.12868779718306247,0.12867957380512635,0.1286713525287409,0.12866313335296653,0.1286549162768641,0.12864670129949513,0.12863848841992173,0.1286302776372066,0.12862206895041306,0.12861386235860503,0.12860565786084693,0.12859745545620396,0.12858925514374175,0.1285810597031156,0.1285728635715055,0.12856466952927717,0.12855647757549865,0.12854828770923862,0.12854009992956636,0.1285319142355517,0.12852373062626507,0.12851554910077753,0.12850736965816073,0.12849919229748685,0.1284910170178287,0.1284828438182597,0.12847467269785381,0.12846650365568565,0.12845833669083037,0.1284501718023637,0.1284420117579427,0.12843385101877935,0.1284256923532357,0.1284175357603899,0.12840938123932058,0.128401228789107,0.1283930784088291,0.12838493009756727,0.1283767838544025,0.12836863967841644,0.12836049756869125,0.12835235752430973,0.12834421954435518,0.1283360836279116,0.12832794977406345,0.12831981798189582,0.1283116882504944,0.12830356333560838,0.12829543772230048,0.12828731416701958,0.12827919266885368,0.12827107322689132,0.12826295584022168,0.12825484050793445,0.12824672722911992,0.12823861600286898,0.12823050682827306,0.12822239970442414,0.12821429463041487,0.1282061916053384,0.12819809062828844,0.12818999169835932,0.1281818948146459,0.12817379997624367,0.12816570992708326,0.128157619175899,0.12814953046731598,0.12814144380043194,0.12813335917434523,0.1281252765881547,0.12811719604095978,0.12810911753186047,0.12810104105995737,0.1280929666243516,0.12808489422414493,0.12807682385843955,0.12806875552633834,0.12806068922694472,0.12805262495936265,0.12804456272269665,0.12803650251605186,0.12802844707162875,0.12802039092165599,0.1280123367990234,0.12800428470283834,0.1279962346322087,0.12798818658624292,0.1279801405640501,0.12797209656473976,0.1279640545874221,0.12795601463120782,0.12794797669520816,0.127939940778535,0.12793190688030068,0.12792387499961813,0.12791584513560092,0.12790781728736306,0.12789979417614483,0.127891770356127,0.12788374854923434,0.1278757287545831,0.12786771097129013,0.1278596951984728,0.127851681435249,0.12784366968073732,0.12783565993405674,0.12782765219432685,0.1278196464606678,0.1278116427322003,0.1278036410080456,0.12779564128732546,0.12778764356916225,0.1277796478526789,0.1277716541369988,0.12776366513180107,0.1277556754144221,0.1277476876952203,0.12773970197332132,0.12773171824785134,0.12772373651793711,0.12771575678270586,0.12770777904128544,0.1276998032928042,0.12769182953639102,0.1276838577711754,0.12767588799628735,0.12766792021085732,0.12765995441401645,0.12765199060489635,0.12764402878262918,0.12763606894634763,0.12762811379425526,0.12762015792667233,0.12761220404247667,0.12760425214080318,0.12759630222078722,0.12758835428156476,0.12758040832227227,0.12757246434204678,0.1275645223400258,0.12755658231534747,0.1275486442671504,0.12754070819457378,0.12753277409675726,0.1275248419728411,0.1275169118219661,0.12750898364327348,0.12750105743590517,0.12749313588667388,0.12748521361871376,0.1274772933195069,0.1274693749881973,0.12746145862392944,0.12745354422584834,0.12744563179309953,0.1274377213248292,0.12742981282018387,0.12742190627831074,0.12741400169835748,0.1274060990794723,0.12739819842080394,0.12739029972150168,0.12738240298071526,0.12737450819759508,0.1273666153712919,0.12735872717731161,0.12735083826143412,0.12734295129982962,0.1273350662916511,0.127327183236052,0.12731930213218634,0.12731142297920864,0.12730354577627392,0.12729567052253776,0.12728779721715625,0.127279925859286,0.12727205644808412,0.12726418898270828,0.12725632346231663,0.12724845988606792,0.1272405982531213,0.12723273856263653,0.12722488347889552,0.12721702767015752,0.12720917380136396,0.12720132187167663,0.12719347188025784,0.12718562382627047,0.12717777770887784,0.12716993352724384,0.12716209128053288,0.1271542509679098,0.12714641258854006,0.1271385761415896,0.12713074162622484,0.12712290904161275,0.1271150783869208,0.12710724966131695,0.12709942286396975,0.12709160064801928,0.12708377770403945,0.12707595668582508,0.12706813759254673,0.12706032042337545,0.12705250517748276,0.12704469185404077,0.12703688045222206,0.12702907097119967,0.12702126341014727,0.12701345776823894,0.12700565404464928,0.12699785223855342,0.12699005234912697,0.12698225437554606,0.12697445831698737,0.126966664172628,0.12695887458454755,0.12695108426547166,0.12694329585812988,0.1269355093617013,0.12692772477536565,0.12691994209830307,0.12691216132969424,0.1269043824687203,0.12689660551456294,0.12688883046640434,0.1268810573234272,0.12687328608481463,0.12686551674975038,0.1268577493174186,0.126849983787004,0.12684222015769167,0.12683445842866736,0.12682670123103051,0.12681894329949728,0.12681118726581234,0.12680343312916334,0.12679568088873847,0.12678793054372633,0.12678018209331612,0.1267724355366975,0.12676469087306055,0.126756948101596,0.1267492072214949,0.1267414682319489,0.12673373113215014,0.12672599592129122,0.12671826259856525,0.12671053116316583,0.12670280161428704,0.12669507657212783,0.1266873507932353,0.1266796268984489,0.12667190488696467,0.12666418475797916,0.1266564665106894,0.12664875014429292,0.12664103565798773,0.12663332305097236,0.12662561232244574,0.12661790347160737,0.12661019649765723,0.12660249139979574,0.12659478817722386,0.126587086829143,0.12657938735475507,0.1265716923640717,0.12656399663404239,0.1265563027753149,0.12654861078709312,0.12654092066858133,0.12653323241898437,0.12652554603750754,0.1265178615233566,0.12651017887573782,0.12650249809385794,0.12649481917692423,0.12648714212414433,0.12647946693472645,0.1264717936078793,0.12646412214281194,0.12645645253873408,0.1264487847948558,0.12644112151044037,0.12643345748396315,0.12642579531531895,0.1264181350037198,0.12641047654837817,0.1264028199485071,0.12639516520332,0.1263875123120308,0.12637986127385392,0.1263722120880042,0.126364564753697,0.1263569192701482,0.12634927563657403,0.12634163385219133,0.1263339939162173,0.1263263558278697,0.1263187195863667,0.12631108778030048,0.12630345522951736,0.12629582452323654,0.12628819566067812,0.1262805686410626,0.12627294346361106,0.126265320127545,0.12625769863208633,0.12625007897645754,0.1262424611598815,0.12623484518158157,0.12622723104078165,0.12621961873670598,0.1262120082685794,0.12620439963562713,0.12619679283707486,0.12618918787214878,0.12618158731884632,0.1261739860182317,0.12616638654892487,0.12615878891015386,0.12615119310114722,0.12614359912113385,0.12613600696934324,0.12612841664500526,0.12612082814735026,0.12611324147560912,0.12610565662901307,0.12609807360679387,0.1260904924081837,0.12608291303241534,0.12607533547872182,0.12606775974633677,0.12606018583449424,0.12605261631067255,0.12604504603700217,0.1260374775815795,0.1260299109436404,0.12602234612242127,0.1260147831171589,0.12600722192709057,0.12599966255145398,0.12599210498948732],"x":[50.0,50.08996401439424,50.17992802878848,50.26989204318273,50.35985605757697,50.44982007197121,50.53978408636545,50.6297481007597,50.71971211515394,50.80967612954818,50.89964014394242,50.98960415833667,51.07956817273091,51.16953218712515,51.25949620151939,51.34946021591364,51.43942423030788,51.52938824470212,51.61935225909636,51.7093162734906,51.79928028788485,51.88924430227909,51.97920831667333,52.06917233106757,52.15913634546182,52.24910035985606,52.3390643742503,52.42902838864454,52.51899240303879,52.60895641743303,52.69892043182727,52.78888444622151,52.87884846061576,52.96881247501,53.05877648940424,53.14874050379848,53.238704518192726,53.32866853258697,53.41863254698121,53.50859656137545,53.59856057576969,53.68852459016394,53.77848860455818,53.86845261895242,53.95841663334666,54.048380647740906,54.13834466213515,54.22830867652939,54.31827269092363,54.408236705317876,54.498200719712116,54.58816473410636,54.6781287485006,54.768092762894845,54.858056777289086,54.94802079168333,55.03798480607757,55.12794882047181,55.217912834866056,55.307876849260296,55.39784086365454,55.48780487804878,55.577768892443025,55.667732906837266,55.757696921231506,55.84766093562575,55.937624950019995,56.027588964414235,56.117552978808476,56.20751699320272,56.297481007596964,56.387445021991205,56.477409036385446,56.567373050779686,56.657337065173934,56.747301079568174,56.837265093962415,56.927229108356656,57.017193122750896,57.107157137145144,57.197121151539385,57.287085165933625,57.377049180327866,57.467013194722114,57.556977209116354,57.646941223510595,57.736905237904836,57.82686925229908,57.916833266693324,58.006797281087564,58.096761295481805,58.18672530987605,58.27668932427029,58.366653338664534,58.456617353058775,58.546581367453015,58.63654538184726,58.726509396241504,58.816473410635744,58.906437425029985,58.99640143942423,59.08636545381847,59.176329468212714,59.266293482606955,59.3562574970012,59.44622151139544,59.53618552578968,59.626149540183924,59.71611355457817,59.80607756897241,59.89604158336665,59.986005597760894,60.07596961215514,60.16593362654938,60.25589764094362,60.34586165533786,60.435825669732104,60.52578968412635,60.61575369852059,60.70571771291483,60.79568172730907,60.88564574170332,60.97560975609756,61.0655737704918,61.15553778488604,61.24550179928029,61.33546581367453,61.42542982806877,61.51539384246301,61.60535785685726,61.6953218712515,61.78528588564574,61.87524990003998,61.96521391443422,62.05517792882847,62.14514194322271,62.23510595761695,62.32506997201119,62.41503398640544,62.50499800079968,62.59496201519392,62.68492602958816,62.77489004398241,62.86485405837665,62.95481807277089,63.04478208716513,63.13474610155938,63.22471011595362,63.31467413034786,63.4046381447421,63.49460215913635,63.58456617353059,63.67453018792483,63.76449420231907,63.85445821671331,63.94442223110756,64.03438624550179,64.12435025989605,64.21431427429029,64.30427828868453,64.39424230307877,64.48420631747301,64.57417033186725,64.66413434626149,64.75409836065573,64.84406237504999,64.93402638944423,65.02399040383847,65.11395441823271,65.20391843262695,65.29388244702119,65.38384646141543,65.47381047580967,65.56377449020391,65.65373850459817,65.74370251899241,65.83366653338665,65.92363054778089,66.01359456217513,66.10355857656937,66.19352259096361,66.28348660535785,66.3734506197521,66.46341463414635,66.55337864854059,66.64334266293483,66.73330667732907,66.82327069172331,66.91323470611755,67.00319872051179,67.09316273490603,67.18312674930029,67.27309076369453,67.36305477808877,67.45301879248301,67.54298280687725,67.63294682127149,67.72291083566573,67.81287485005997,67.90283886445422,67.99280287884847,68.0827668932427,68.17273090763695,68.26269492203119,68.35265893642543,68.44262295081967,68.53258696521391,68.62255097960815,68.7125149940024,68.80247900839665,68.89244302279089,68.98240703718513,69.07237105157937,69.16233506597361,69.25229908036785,69.34226309476209,69.43222710915634,69.52219112355058,69.61215513794482,69.70211915233907,69.7920831667333,69.88204718112755,69.97201119552179,70.06197520991603,70.15193922431028,70.24190323870452,70.33186725309876,70.421831267493,70.51179528188725,70.60175929628149,70.69172331067573,70.78168732506997,70.87165133946421,70.96161535385846,71.0515793682527,71.14154338264694,71.23150739704118,71.32147141143543,71.41143542582967,71.5013994402239,71.59136345461815,71.6813274690124,71.77129148340664,71.86125549780088,71.95121951219512,72.04118352658936,72.1311475409836,72.22111155537785,72.31107556977209,72.40103958416633,72.49100359856058,72.58096761295482,72.67093162734906,72.7608956417433,72.85085965613754,72.94082367053178,73.03078768492603,73.12075169932027,73.21071571371452,73.30067972810876,73.390643742503,73.48060775689724,73.57057177129148,73.66053578568572,73.75049980007996,73.8404638144742,73.93042782886845,74.0203918432627,74.11035585765694,74.20031987205118,74.29028388644542,74.38024790083966,74.4702119152339,74.56017592962814,74.65013994402238,74.74010395841664,74.83006797281088,74.92003198720512,75.00999600159936,75.0999600159936,75.18992403038784,75.27988804478208,75.36985205917632,75.45981607357056,75.54978008796482,75.63974410235906,75.7297081167533,75.81967213114754,75.90963614554178,75.99960015993602,76.08956417433026,76.1795281887245,76.26949220311876,76.359456217513,76.44942023190724,76.53938424630148,76.62934826069572,76.71931227508996,76.8092762894842,76.89924030387844,76.9892043182727,77.07916833266694,77.16913234706118,77.25909636145542,77.34906037584966,77.4390243902439,77.52898840463814,77.61895241903238,77.70891643342662,77.79888044782088,77.88884446221512,77.97880847660936,78.0687724910036,78.15873650539784,78.24870051979208,78.33866453418632,78.42862854858056,78.51859256297482,78.60855657736906,78.6985205917633,78.78848460615754,78.87844862055178,78.96841263494602,79.05837664934026,79.1483406637345,79.23830467812874,79.328268692523,79.41823270691724,79.50819672131148,79.59816073570572,79.68812475009996,79.7780887644942,79.86805277888844,79.95801679328268,80.04798080767694,80.13794482207118,80.22790883646542,80.31787285085966,80.4078368652539,80.49780087964814,80.58776489404238,80.67772890843662,80.76769292283086,80.85765693722512,80.94762095161936,81.0375849660136,81.12754898040784,81.21751299480208,81.30747700919632,81.39744102359056,81.4874050379848,81.57736905237905,81.6673330667733,81.75729708116754,81.84726109556178,81.93722510995602,82.02718912435026,82.1171531387445,82.20711715313874,82.29708116753298,82.38704518192723,82.47700919632148,82.56697321071572,82.65693722510996,82.7469012395042,82.83686525389844,82.92682926829268,83.01679328268692,83.10675729708117,83.19672131147541,83.28668532586966,83.3766493402639,83.46661335465814,83.55657736905238,83.64654138344662,83.73650539784086,83.82646941223511,83.91643342662935,84.0063974410236,84.09636145541783,84.18632546981208,84.27628948420632,84.36625349860056,84.4562175129948,84.54618152738904,84.63614554178329,84.72610955617753,84.81607357057177,84.90603758496601,84.99600159936026,85.0859656137545,85.17592962814874,85.26589364254298,85.35585765693723,85.44582167133147,85.53578568572571,85.62574970011995,85.7157137145142,85.80567772890844,85.89564174330268,85.98560575769692,86.07556977209116,86.16553378648541,86.25549780087965,86.3454618152739,86.43542582966813,86.52538984406237,86.61535385845661,86.70531787285086,86.7952818872451,86.88524590163935,86.97520991603359,87.06517393042783,87.15513794482207,87.24510195921631,87.33506597361055,87.4250299880048,87.51499400239904,87.60495801679328,87.69492203118753,87.78488604558177,87.87485005997601,87.96481407437025,88.0547780887645,88.14474210315873,88.23470611755297,88.32467013194722,88.41463414634147,88.50459816073571,88.59456217512995,88.68452618952419,88.77449020391843,88.86445421831267,88.95441823270691,89.04438224710115,89.1343462614954,89.22431027588965,89.31427429028389,89.40423830467813,89.49420231907237,89.58416633346661,89.67413034786085,89.7640943622551,89.85405837664933,89.94402239104359,90.03398640543783,90.12395041983207,90.21391443422631,90.30387844862055,90.39384246301479,90.48380647740903,90.57377049180327,90.66373450619751,90.75369852059177,90.84366253498601,90.93362654938025,91.02359056377449,91.11355457816873,91.20351859256297,91.29348260695721,91.38344662135145,91.47341063574571,91.56337465013995,91.65333866453419,91.74330267892843,91.83326669332267,91.92323070771691,92.01319472211115,92.10315873650539,92.19312275089965,92.28308676529389,92.37305077968813,92.46301479408237,92.55297880847661,92.64294282287085,92.73290683726509,92.82287085165933,92.91283486605357,93.00279888044783,93.09276289484207,93.18272690923631,93.27269092363055,93.36265493802479,93.45261895241903,93.54258296681327,93.63254698120751,93.72251099560177,93.812475009996,93.90243902439025,93.99240303878449,94.08236705317873,94.17233106757297,94.26229508196721,94.35225909636145,94.44222311075569,94.53218712514995,94.62215113954419,94.71211515393843,94.80207916833267,94.89204318272691,94.98200719712115,95.07197121151539,95.16193522590963,95.25189924030389,95.34186325469813,95.43182726909237,95.5217912834866,95.61175529788085,95.70171931227509,95.79168332666933,95.88164734106357,95.97161135545781,96.06157536985206,96.1515393842463,96.24150339864055,96.33146741303479,96.42143142742903,96.51139544182327,96.60135945621751,96.69132347061175,96.781287485006,96.87125149940024,96.96121551379449,97.05117952818873,97.14114354258297,97.23110755697721,97.32107157137145,97.41103558576569,97.50099960015993,97.59096361455418,97.68092762894842,97.77089164334267,97.8608556577369,97.95081967213115,98.04078368652539,98.13074770091963,98.22071171531387,98.31067572970812,98.40063974410236,98.4906037584966,98.58056777289084,98.67053178728509,98.76049580167933,98.85045981607357,98.94042383046781,99.03038784486206,99.1203518592563,99.21031587365054,99.30027988804478,99.39024390243902,99.48020791683327,99.5701719312275,99.66013594562175,99.75009996001599,99.84006397441024,99.93002798880448,100.01999200319872,100.10995601759296,100.1999200319872,100.28988404638145,100.37984806077569,100.46981207516993,100.55977608956418,100.64974010395842,100.73970411835266,100.8296681327469,100.91963214714114,101.00959616153538,101.09956017592962,101.18952419032387,101.2794882047181,101.36945221911236,101.4594162335066,101.54938024790084,101.63934426229508,101.72930827668932,101.81927229108356,101.9092363054778,101.99920031987205,102.0891643342663,102.17912834866054,102.26909236305478,102.35905637744902,102.44902039184326,102.5389844062375,102.62894842063174,102.71891243502598,102.80887644942023,102.89884046381448,102.98880447820872,103.07876849260296,103.1687325069972,103.25869652139144,103.34866053578568,103.43862455017992,103.52858856457416,103.61855257896842,103.70851659336266,103.7984806077569,103.88844462215114,103.97840863654538,104.06837265093962,104.15833666533386,104.2483006797281,104.33826469412234,104.4282287085166,104.51819272291084,104.60815673730508,104.69812075169932,104.78808476609356,104.8780487804878,104.96801279488204,105.05797680927628,105.14794082367054,105.23790483806478,105.32786885245902,105.41783286685326,105.5077968812475,105.59776089564174,105.68772491003598,105.77768892443022,105.86765293882446,105.95761695321872,106.04758096761296,106.1375449820072,106.22750899640144,106.31747301079568,106.40743702518992,106.49740103958416,106.5873650539784,106.67732906837266,106.7672930827669,106.85725709716114,106.94722111155538,107.03718512594962,107.12714914034386,107.2171131547381,107.30707716913234,107.3970411835266,107.48700519792084,107.57696921231508,107.66693322670932,107.75689724110356,107.8468612554978,107.93682526989204,108.02678928428628,108.11675329868052,108.20671731307478,108.29668132746902,108.38664534186326,108.4766093562575,108.56657337065174,108.65653738504598,108.74650139944022,108.83646541383446,108.92642942822872,109.01639344262296,109.1063574570172,109.19632147141144,109.28628548580568,109.37624950019992,109.46621351459416,109.5561775289884,109.64614154338264,109.7361055577769,109.82606957217114,109.91603358656538,110.00599760095962,110.09596161535386,110.1859256297481,110.27588964414234,110.36585365853658,110.45581767293083,110.54578168732507,110.63574570171932,110.72570971611356,110.8156737305078,110.90563774490204,110.99560175929628,111.08556577369052,111.17552978808476,111.26549380247901,111.35545781687325,111.4454218312675,111.53538584566174,111.62534986005598,111.71531387445022,111.80527788884446,111.8952419032387,111.98520591763295,112.0751699320272,112.16513394642143,112.25509796081568,112.34506197520992,112.43502598960416,112.5249900039984,112.61495401839264,112.70491803278688,112.79488204718113,112.88484606157537,112.97481007596961,113.06477409036385,113.1547381047581,113.24470211915234,113.33466613354658,113.42463014794082,113.51459416233507,113.60455817672931,113.69452219112355,113.7844862055178,113.87445021991203,113.96441423430628,114.05437824870052,114.14434226309476,114.23430627748901,114.32427029188325,114.41423430627749,114.50419832067173,114.59416233506597,114.68412634946021,114.77409036385446,114.8640543782487,114.95401839264294,115.04398240703719,115.13394642143143,115.22391043582567,115.31387445021991,115.40383846461415,115.4938024790084,115.58376649340263,115.67373050779688,115.76369452219113,115.85365853658537,115.94362255097961,116.03358656537385,116.1235505797681,116.21351459416233,116.30347860855657,116.39344262295081,116.48340663734506,116.57337065173931,116.66333466613355,116.75329868052779,116.84326269492203,116.93322670931627,117.02319072371051,117.11315473810475,117.203118752499,117.29308276689325,117.38304678128749,117.47301079568173,117.56297481007597,117.65293882447021,117.74290283886445,117.8328668532587,117.92283086765293,118.01279488204717,118.10275889644143,118.19272291083567,118.28268692522991,118.37265093962415,118.46261495401839,118.55257896841263,118.64254298280687,118.73250699720111,118.82247101159537,118.91243502598961,119.00239904038385,119.09236305477809,119.18232706917233,119.27229108356657,119.36225509796081,119.45221911235505,119.5421831267493,119.63214714114355,119.72211115553779,119.81207516993203,119.90203918432627,119.99200319872051,120.08196721311475,120.17193122750899,120.26189524190323,120.35185925629749,120.44182327069173,120.53178728508597,120.62175129948021,120.71171531387445,120.80167932826869,120.89164334266293,120.98160735705717,121.07157137145141,121.16153538584567,121.25149940023991,121.34146341463415,121.43142742902839,121.52139144342263,121.61135545781687,121.70131947221111,121.79128348660535,121.8812475009996,121.97121151539385,122.06117552978809,122.15113954418233,122.24110355857657,122.33106757297081,122.42103158736505,122.51099560175929,122.60095961615355,122.69092363054779,122.78088764494203,122.87085165933627,122.96081567373051,123.05077968812475,123.14074370251899,123.23070771691323,123.32067173130747,123.41063574570173,123.50059976009597,123.5905637744902,123.68052778888445,123.77049180327869,123.86045581767293,123.95041983206717,124.04038384646141,124.13034786085566,124.2203118752499,124.31027588964415,124.40023990403839,124.49020391843263,124.58016793282687,124.67013194722111,124.76009596161535,124.85005997600959,124.94002399040384,125.02998800479808,125.11995201919233,125.20991603358657,125.2998800479808,125.38984406237505,125.47980807676929,125.56977209116353,125.65973610555778,125.74970011995202,125.83966413434626,125.9296281487405,126.01959216313475,126.10955617752899,126.19952019192323,126.28948420631747,126.37944822071171,126.46941223510596,126.5593762495002,126.64934026389444,126.73930427828869,126.82926829268293,126.91923230707717,127.0091963214714,127.09916033586565,127.1891243502599,127.27908836465414,127.36905237904838,127.45901639344262,127.54898040783686,127.6389444222311,127.72890843662535,127.81887245101959,127.90883646541383,127.99880047980808,128.0887644942023,128.17872850859655,128.2686925229908,128.35865653738506,128.4486205517793,128.53858456617354,128.62854858056778,128.71851259496202,128.80847660935626,128.8984406237505,128.98840463814474,129.07836865253898,129.16833266693322,129.25829668132747,129.3482606957217,129.43822471011595,129.5281887245102,129.61815273890443,129.70811675329867,129.7980807676929,129.88804478208718,129.97800879648142,130.06797281087566,130.1579368252699,130.24790083966414,130.33786485405838,130.42782886845262,130.51779288284686,130.6077568972411,130.69772091163534,130.78768492602958,130.87764894042382,130.96761295481807,131.0575769692123,131.14754098360655,131.2375049980008,131.32746901239503,131.4174330267893,131.50739704118354,131.59736105557778,131.68732506997202,131.77728908436626,131.8672530987605,131.95721711315474,132.04718112754898,132.13714514194322,132.22710915633746,132.3170731707317,132.40703718512594,132.49700119952018,132.58696521391443,132.67692922830867,132.7668932427029,132.85685725709718,132.94682127149142,133.03678528588566,133.1267493002799,133.21671331467414,133.30667732906838,133.39664134346262,133.48660535785686,133.5765693722511,133.66653338664534,133.75649740103958,133.84646141543382,133.93642542982806,134.0263894442223,134.11635345861654,134.20631747301078,134.29628148740503,134.3862455017993,134.47620951619353,134.56617353058778,134.65613754498202,134.74610155937626,134.8360655737705,134.92602958816474,135.01599360255898,135.10595761695322,135.19592163134746,135.2858856457417,135.37584966013594,135.46581367453018,135.55577768892442,135.64574170331866,135.7357057177129,135.82566973210714,135.9156337465014,136.00559776089565,136.0955617752899,136.18552578968414,136.27548980407838,136.36545381847262,136.45541783286686,136.5453818472611,136.63534586165534,136.72530987604958,136.81527389044382,136.90523790483806,136.9952019192323,137.08516593362654,137.17512994802078,137.26509396241502,137.35505797680926,137.44502199120353,137.53498600559777,137.624950019992,137.71491403438625,137.8048780487805,137.89484206317474,137.98480607756898,138.07477009196322,138.16473410635746,138.2546981207517,138.34466213514594,138.43462614954018,138.52459016393442,138.61455417832866,138.7045181927229,138.79448220711714,138.88444622151138,138.97441023590565,139.0643742502999,139.15433826469413,139.24430227908837,139.3342662934826,139.42423030787685,139.5141943222711,139.60415833666534,139.69412235105958,139.78408636545382,139.87405037984806,139.9640143942423,140.05397840863654,140.14394242303078,140.23390643742502,140.32387045181926,140.4138344662135,140.50379848060777,140.593762495002,140.68372650939625,140.7736905237905,140.86365453818473,140.95361855257897,141.0435825669732,141.13354658136745,141.2235105957617,141.31347461015594,141.40343862455018,141.49340263894442,141.58336665333866,141.6733306677329,141.76329468212714,141.85325869652138,141.94322271091562,142.0331867253099,142.12315073970413,142.21311475409837,142.3030787684926,142.39304278288685,142.4830067972811,142.57297081167533,142.66293482606957,142.7528988404638,142.84286285485805,142.9328268692523,143.02279088364654,143.11275489804078,143.20271891243502,143.29268292682926,143.3826469412235,143.47261095561774,143.562574970012,143.65253898440625,143.7425029988005,143.83246701319473,143.92243102758897,144.0123950419832,144.10235905637745,144.1923230707717,144.28228708516593,144.37225109956017,144.46221511395441,144.55217912834866,144.6421431427429,144.73210715713714,144.82207117153138,144.91203518592562,145.00199920031986,145.09196321471413,145.18192722910837,145.2718912435026,145.36185525789685,145.4518192722911,145.54178328668533,145.63174730107957,145.7217113154738,145.81167532986805,145.9016393442623,145.99160335865653,146.08156737305077,146.17153138744501,146.26149540183926,146.3514594162335,146.44142343062774,146.53138744502198,146.62135145941625,146.7113154738105,146.80127948820473,146.89124350259897,146.9812075169932,147.07117153138745,147.1611355457817,147.25109956017593,147.34106357457017,147.4310275889644,147.52099160335865,147.6109556177529,147.70091963214713,147.79088364654137,147.88084766093561,147.97081167532986,148.06077568972412,148.15073970411837,148.2407037185126,148.33066773290685,148.4206317473011,148.51059576169533,148.60055977608957,148.6905237904838,148.78048780487805,148.8704518192723,148.96041583366653,149.05037984806077,149.140343862455,149.23030787684925,149.3202718912435,149.41023590563773,149.50019992003197,149.59016393442624,149.68012794882048,149.77009196321472,149.86005597760897,149.9500199920032,150.03998400639745,150.1299480207917,150.21991203518593,150.30987604958017,150.3998400639744,150.48980407836865,150.5797680927629,150.66973210715713,150.75969612155137,150.8496601359456,150.93962415033985,151.0295881647341,151.11955217912836,151.2095161935226,151.29948020791684,151.38944422231108,151.47940823670532,151.56937225109957,151.6593362654938,151.74930027988805,151.8392642942823,151.92922830867653,152.01919232307077,152.109156337465,152.19912035185925,152.2890843662535,152.37904838064773,152.46901239504197,152.5589764094362,152.64894042383048,152.73890443822472,152.82886845261896,152.9188324670132,153.00879648140744,153.09876049580168,153.18872451019593,153.27868852459017,153.3686525389844,153.45861655337865,153.5485805677729,153.63854458216713,153.72850859656137,153.8184726109556,153.90843662534985,153.9984006397441,154.08836465413833,154.1783286685326,154.26829268292684,154.35825669732108,154.44822071171532,154.53818472610956,154.6281487405038,154.71811275489804,154.80807676929228,154.89804078368653,154.98800479808077,155.077968812475,155.16793282686925,155.2578968412635,155.34786085565773,155.43782487005197,155.5277888844462,155.61775289884045,155.70771691323472,155.79768092762896,155.8876449420232,155.97760895641744,156.06757297081168,156.15753698520592,156.24750099960016,156.3374650139944,156.42742902838864,156.51739304278289,156.60735705717713,156.69732107157137,156.7872850859656,156.87724910035985,156.9672131147541,157.05717712914833,157.14714114354257,157.23710515793684,157.32706917233108,157.41703318672532,157.50699720111956,157.5969612155138,157.68692522990804,157.77688924430228,157.86685325869652,157.95681727309076,158.046781287485,158.13674530187924,158.22670931627349,158.31667333066773,158.40663734506197,158.4966013594562,158.58656537385045,158.6765293882447,158.76649340263896,158.8564574170332,158.94642143142744,159.03638544582168,159.12634946021592,159.21631347461016,159.3062774890044,159.39624150339864,159.48620551779288,159.57616953218712,159.66613354658136,159.7560975609756,159.84606157536984,159.93602558976409,160.02598960415833,160.11595361855257,160.2059176329468,160.29588164734108,160.38584566173532,160.47580967612956,160.5657736905238,160.65573770491804,160.74570171931228,160.83566573370652,160.92562974810076,161.015593762495,161.10555777688924,161.19552179128348,161.28548580567772,161.37544982007196,161.4654138344662,161.55537784886045,161.64534186325469,161.73530587764893,161.8252698920432,161.91523390643744,162.00519792083168,162.09516193522592,162.18512594962016,162.2750899640144,162.36505397840864,162.45501799280288,162.54498200719712,162.63494602159136,162.7249100359856,162.81487405037984,162.90483806477408,162.99480207916832,163.08476609356256,163.1747301079568,163.26469412235107,163.35465813674531,163.44462215113955,163.5345861655338,163.62455017992804,163.71451419432228,163.80447820871652,163.89444222311076,163.984406237505,164.07437025189924,164.16433426629348,164.25429828068772,164.34426229508196,164.4342263094762,164.52419032387044,164.61415433826468,164.70411835265892,164.7940823670532,164.88404638144743,164.97401039584167,165.06397441023591,165.15393842463016,165.2439024390244,165.33386645341864,165.42383046781288,165.51379448220712,165.60375849660136,165.6937225109956,165.78368652538984,165.87365053978408,165.96361455417832,166.05357856857256,166.1435425829668,166.23350659736104,166.3234706117553,166.41343462614955,166.5033986405438,166.59336265493803,166.68332666933227,166.77329068372651,166.86325469812076,166.953218712515,167.04318272690924,167.13314674130348,167.22311075569772,167.31307477009196,167.4030387844862,167.49300279888044,167.58296681327468,167.67293082766892,167.76289484206316,167.85285885645743,167.94282287085167,168.0327868852459,168.12275089964015,168.2127149140344,168.30267892842863,168.39264294282287,168.48260695721711,168.57257097161136,168.6625349860056,168.75249900039984,168.84246301479408,168.93242702918832,169.02239104358256,169.1123550579768,169.20231907237104,169.29228308676528,169.38224710115955,169.4722111155538,169.56217512994803,169.65213914434227,169.7421031587365,169.83206717313075,169.922031187525,170.01199520191923,170.10195921631347,170.19192323070772,170.28188724510196,170.3718512594962,170.46181527389044,170.55177928828468,170.64174330267892,170.73170731707316,170.8216713314674,170.91163534586167,171.0015993602559,171.09156337465015,171.1815273890444,171.27149140343863,171.36145541783287,171.4514194322271,171.54138344662135,171.6313474610156,171.72131147540983,171.81127548980407,171.90123950419832,171.99120351859256,172.0811675329868,172.17113154738104,172.26109556177528,172.35105957616952,172.4410235905638,172.53098760495803,172.62095161935227,172.7109156337465,172.80087964814075,172.890843662535,172.98080767692923,173.07077169132347,173.1607357057177,173.25069972011195,173.3406637345062,173.43062774890043,173.52059176329468,173.61055577768892,173.70051979208316,173.7904838064774,173.88044782087164,173.9704118352659,174.06037584966015,174.1503398640544,174.24030387844863,174.33026789284287,174.4202319072371,174.51019592163135,174.6001599360256,174.69012395041983,174.78008796481407,174.8700519792083,174.96001599360255,175.0499800079968,175.13994402239103,175.22990803678528,175.31987205117952,175.40983606557376,175.49980007996803,175.58976409436227,175.6797281087565,175.76969212315075,175.859656137545,175.94962015193923,176.03958416633347,176.1295481807277,176.21951219512195,176.3094762095162,176.39944022391043,176.48940423830467,176.5793682526989,176.66933226709315,176.7592962814874,176.84926029588163,176.93922431027588,177.02918832467014,177.11915233906439,177.20911635345863,177.29908036785287,177.3890443822471,177.47900839664135,177.5689724110356,177.65893642542983,177.74890043982407,177.8388644542183,177.92882846861255,178.0187924830068,178.10875649740103,178.19872051179527,178.2886845261895,178.37864854058375,178.46861255497802,178.55857656937226,178.6485405837665,178.73850459816074,178.82846861255499,178.91843262694923,179.00839664134347,179.0983606557377,179.18832467013195,179.2782886845262,179.36825269892043,179.45821671331467,179.5481807277089,179.63814474210315,179.7281087564974,179.81807277089163,179.90803678528587,179.99800079968014,180.08796481407438,180.17792882846862,180.26789284286286,180.3578568572571,180.44782087165134,180.53778488604559,180.62774890043983,180.71771291483407,180.8076769292283,180.89764094362255,180.9876049580168,181.07756897241103,181.16753298680527,181.2574970011995,181.34746101559375,181.437425029988,181.52738904438226,181.6173530587765,181.70731707317074,181.79728108756498,181.88724510195922,181.97720911635346,182.0671731307477,182.15713714514195,182.2471011595362,182.33706517393043,182.42702918832467,182.5169932027189,182.60695721711315,182.6969212315074,182.78688524590163,182.87684926029587,182.9668132746901,183.05677728908438,183.14674130347862,183.23670531787286,183.3266693322671,183.41663334666134,183.50659736105558,183.59656137544982,183.68652538984406,183.7764894042383,183.86645341863255,183.9564174330268,184.04638144742103,184.13634546181527,184.2263094762095,184.31627349060375,184.406237504998,184.49620151939223,184.5861655337865,184.67612954818074,184.76609356257498,184.85605757696922,184.94602159136346,185.0359856057577,185.12594962015194,185.21591363454618,185.30587764894042,185.39584166333466,185.4858056777289,185.57576969212315,185.6657337065174,185.75569772091163,185.84566173530587,185.9356257497001,186.02558976409435,186.11555377848862,186.20551779288286,186.2954818072771,186.38544582167134,186.47540983606558,186.56537385045982,186.65533786485406,186.7453018792483,186.83526589364254,186.92522990803678,187.01519392243102,187.10515793682526,187.1951219512195,187.28508596561375,187.375049980008,187.46501399440223,187.55497800879647,187.64494202319074,187.73490603758498,187.82487005197922,187.91483406637346,188.0047980807677,188.09476209516194,188.18472610955618,188.27469012395042,188.36465413834466,188.4546181527389,188.54458216713314,188.63454618152738,188.72451019592162,188.81447421031586,188.9044382247101,188.99440223910435,189.0843662534986,189.17433026789286,189.2642942822871,189.35425829668134,189.44422231107558,189.53418632546982,189.62415033986406,189.7141143542583,189.80407836865254,189.89404238304678,189.98400639744102,190.07397041183526,190.1639344262295,190.25389844062374,190.34386245501798,190.43382646941222,190.52379048380647,190.6137544982007,190.70371851259497,190.79368252698922,190.88364654138346,190.9736105557777,191.06357457017194,191.15353858456618,191.24350259896042,191.33346661335466,191.4234306277489,191.51339464214314,191.60335865653738,191.69332267093162,191.78328668532586,191.8732506997201,191.96321471411434,192.05317872850858,192.14314274290282,192.2331067572971,192.32307077169133,192.41303478608557,192.50299880047982,192.59296281487406,192.6829268292683,192.77289084366254,192.86285485805678,192.95281887245102,193.04278288684526,193.1327469012395,193.22271091563374,193.31267493002798,193.40263894442222,193.49260295881646,193.5825669732107,193.67253098760497,193.7624950019992,193.85245901639345,193.9424230307877,194.03238704518193,194.12235105957618,194.21231507397042,194.30227908836466,194.3922431027589,194.48220711715314,194.57217113154738,194.66213514594162,194.75209916033586,194.8420631747301,194.93202718912434,195.02199120351858,195.11195521791282,195.2019192323071,195.29188324670133,195.38184726109557,195.4718112754898,195.56177528988405,195.6517393042783,195.74170331867253,195.83166733306678,195.92163134746102,196.01159536185526,196.1015593762495,196.19152339064374,196.28148740503798,196.37145141943222,196.46141543382646,196.5513794482207,196.64134346261494,196.7313074770092,196.82127149140345,196.9112355057977,197.00119952019193,197.09116353458617,197.1811275489804,197.27109156337465,197.3610555777689,197.45101959216314,197.54098360655738,197.63094762095162,197.72091163534586,197.8108756497401,197.90083966413434,197.99080367852858,198.08076769292282,198.17073170731706,198.26069572171133,198.35065973610557,198.4406237504998,198.53058776489405,198.6205517792883,198.71051579368253,198.80047980807677,198.890443822471,198.98040783686525,199.0703718512595,199.16033586565374,199.25029988004798,199.34026389444222,199.43022790883646,199.5201919232307,199.61015593762494,199.70011995201918,199.79008396641345,199.8800479808077,199.97001199520193,200.05997600959617,200.1499400239904,200.23990403838465,200.3298680527789,200.41983206717313,200.50979608156737,200.5997600959616,200.68972411035585,200.7796881247501,200.86965213914434,200.95961615353858,201.04958016793282,201.13954418232706,201.2295081967213,201.31947221111557,201.4094362255098,201.49940023990405,201.5893642542983,201.67932826869253,201.76929228308677,201.859256297481,201.94922031187525,202.0391843262695,202.12914834066373,202.21911235505797,202.3090763694522,202.39904038384645,202.4890043982407,202.57896841263494,202.66893242702918,202.75889644142342,202.8488604558177,202.93882447021193,203.02878848460617,203.1187524990004,203.20871651339465,203.2986805277889,203.38864454218313,203.47860855657737,203.5685725709716,203.65853658536585,203.7485005997601,203.83846461415433,203.92842862854857,204.0183926429428,204.10835665733705,204.1983206717313,204.28828468612554,204.3782487005198,204.46821271491405,204.5581767293083,204.64814074370253,204.73810475809677,204.828068772491,204.91803278688525,205.0079968012795,205.09796081567373,205.18792483006797,205.2778888444622,205.36785285885645,205.4578168732507,205.54778088764493,205.63774490203917,205.72770891643341,205.81767293082765,205.90763694522192,205.99760095961616,206.0875649740104,206.17752898840465,206.2674930027989,206.35745701719313,206.44742103158737,206.5373850459816,206.62734906037585,206.7173130747701,206.80727708916433,206.89724110355857,206.9872051179528,207.07716913234705,207.1671331467413,207.25709716113553,207.34706117552977,207.43702518992404,207.52698920431828,207.61695321871252,207.70691723310676,207.796881247501,207.88684526189525,207.9768092762895,208.06677329068373,208.15673730507797,208.2467013194722,208.33666533386645,208.4266293482607,208.51659336265493,208.60655737704917,208.6965213914434,208.78648540583765,208.87644942023192,208.96641343462616,209.0563774490204,209.14634146341464,209.23630547780888,209.32626949220312,209.41623350659737,209.5061975209916,209.59616153538585,209.6861255497801,209.77608956417433,209.86605357856857,209.9560175929628,210.04598160735705,210.1359456217513,210.22590963614553,210.31587365053977,210.40583766493404,210.49580167932828,210.58576569372252,210.67572970811676,210.765693722511,210.85565773690524,210.94562175129948,211.03558576569372,211.12554978008797,211.2155137944822,211.30547780887645,211.3954418232707,211.48540583766493,211.57536985205917,211.6653338664534,211.75529788084765,211.8452618952419,211.93522590963616,212.0251899240304,212.11515393842464,212.20511795281888,212.29508196721312,212.38504598160736,212.4750099960016,212.56497401039584,212.65493802479008,212.74490203918432,212.83486605357857,212.9248300679728,213.01479408236705,213.1047580967613,213.19472211115553,213.28468612554977,213.374650139944,213.46461415433828,213.55457816873252,213.64454218312676,213.734506197521,213.82447021191524,213.91443422630948,214.00439824070372,214.09436225509796,214.1843262694922,214.27429028388644,214.36425429828068,214.45421831267493,214.54418232706917,214.6341463414634,214.72411035585765,214.8140743702519,214.90403838464613,214.9940023990404,215.08396641343464,215.17393042782888,215.26389444222312,215.35385845661736,215.4438224710116,215.53378648540584,215.62375049980008,215.71371451419432,215.80367852858856,215.8936425429828,215.98360655737704,216.07357057177128,216.16353458616553,216.25349860055977,216.343462614954,216.43342662934825,216.52339064374252,216.61335465813676,216.703318672531,216.79328268692524,216.88324670131948,216.97321071571372,217.06317473010796,217.1531387445022,217.24310275889644,217.33306677329068,217.42303078768492,217.51299480207916,217.6029588164734,217.69292283086764,217.78288684526188,217.87285085965613,217.96281487405037,218.05277888844464,218.14274290283888,218.23270691723312,218.32267093162736,218.4126349460216,218.50259896041584,218.59256297481008,218.68252698920432,218.77249100359856,218.8624550179928,218.95241903238704,219.04238304678128,219.13234706117552,219.22231107556976,219.312275089964,219.40223910435824,219.49220311875249,219.58216713314675,219.672131147541,219.76209516193524,219.85205917632948,219.94202319072372,220.03198720511796,220.1219512195122,220.21191523390644,220.30187924830068,220.39184326269492,220.48180727708916,220.5717712914834,220.66173530587764,220.75169932027188,220.84166333466612,220.93162734906036,221.0215913634546,221.11155537784887,221.2015193922431,221.29148340663735,221.3814474210316,221.47141143542584,221.56137544982008,221.65133946421432,221.74130347860856,221.8312674930028,221.92123150739704,222.01119552179128,222.10115953618552,222.19112355057976,222.281087564974,222.37105157936824,222.46101559376248,222.55097960815675,222.640943622551,222.73090763694523,222.82087165133947,222.9108356657337,223.00079968012795,223.0907636945222,223.18072770891644,223.27069172331068,223.36065573770492,223.45061975209916,223.5405837664934,223.63054778088764,223.72051179528188,223.81047580967612,223.90043982407036,223.9904038384646,224.08036785285887,224.1703318672531,224.26029588164735,224.3502598960416,224.44022391043583,224.53018792483007,224.62015193922431,224.71011595361855,224.8000799680128,224.89004398240704,224.98000799680128,225.06997201119552,225.15993602558976,225.249900039984,225.33986405437824,225.42982806877248,225.51979208316672,225.609756097561,225.69972011195523,225.78968412634947,225.8796481407437,225.96961215513795,226.0595761695322,226.14954018392643,226.23950419832067,226.32946821271491,226.41943222710916,226.5093962415034,226.59936025589764,226.68932427029188,226.77928828468612,226.86925229908036,226.9592163134746,227.04918032786884,227.1391443422631,227.22910835665735,227.3190723710516,227.40903638544583,227.49900039984007,227.5889644142343,227.67892842862855,227.7688924430228,227.85885645741703,227.94882047181127,228.03878448620551,228.12874850059976,228.218712514994,228.30867652938824,228.39864054378248,228.48860455817672,228.57856857257096,228.66853258696523,228.75849660135947,228.8484606157537,228.93842463014795,229.0283886445422,229.11835265893643,229.20831667333067,229.2982806877249,229.38824470211915,229.4782087165134,229.56817273090763,229.65813674530187,229.74810075969611,229.83806477409036,229.9280287884846,230.01799280287884,230.10795681727308,230.19792083166735,230.2878848460616,230.37784886045583,230.46781287485007,230.5577768892443,230.64774090363855,230.7377049180328,230.82766893242703,230.91763294682127,231.0075969612155,231.09756097560975,231.187524990004,231.27748900439823,231.36745301879247,231.45741703318672,231.54738104758096,231.6373450619752,231.72730907636947,231.8172730907637,231.90723710515795,231.9972011195522,232.08716513394643,232.17712914834067,232.2670931627349,232.35705717712915,232.4470211915234,232.53698520591763,232.62694922031187,232.7169132347061,232.80687724910035,232.8968412634946,232.98680527788883,233.07676929228307,233.16673330667732,233.25669732107158,233.34666133546583,233.43662534986007,233.5265893642543,233.61655337864855,233.7065173930428,233.79648140743703,233.88644542183127,233.9764094362255,234.06637345061975,234.156337465014,234.24630147940823,234.33626549380247,234.4262295081967,234.51619352259095,234.6061575369852,234.69612155137943,234.7860855657737,234.87604958016794,234.96601359456218,235.05597760895643,235.14594162335067,235.2359056377449,235.32586965213915,235.4158336665334,235.50579768092763,235.59576169532187,235.6857257097161,235.77568972411035,235.8656537385046,235.95561775289883,236.04558176729307,236.1355457816873,236.22550979608155,236.31547381047582,236.40543782487006,236.4954018392643,236.58536585365854,236.67532986805278,236.76529388244703,236.85525789684127,236.9452219112355,237.03518592562975,237.125149940024,237.21511395441823,237.30507796881247,237.3950419832067,237.48500599760095,237.5749700119952,237.66493402638943,237.7548980407837,237.84486205517794,237.93482606957218,238.02479008396642,238.11475409836066,238.2047181127549,238.29468212714914,238.38464614154339,238.47461015593763,238.56457417033187,238.6545381847261,238.74450219912035,238.8344662135146,238.92443022790883,239.01439424230307,239.1043582566973,239.19432227109155,239.28428628548582,239.37425029988006,239.4642143142743,239.55417832866854,239.64414234306278,239.73410635745702,239.82407037185126,239.9140343862455,240.00399840063974,240.09396241503399,240.18392642942823,240.27389044382247,240.3638544582167,240.45381847261095,240.5437824870052,240.63374650139943,240.72371051579367,240.81367453018794,240.90363854458218,240.99360255897642,241.08356657337066,241.1735305877649,241.26349460215914,241.35345861655338,241.44342263094762,241.53338664534186,241.6233506597361,241.71331467413034,241.80327868852459,241.89324270291883,241.98320671731307,242.0731707317073,242.16313474610155,242.2530987604958,242.34306277489006,242.4330267892843,242.52299080367854,242.61295481807278,242.70291883246702,242.79288284686126,242.8828468612555,242.97281087564974,243.06277489004398,243.15273890443822,243.24270291883246,243.3326669332267,243.42263094762095,243.51259496201519,243.60255897640943,243.69252299080367,243.7824870051979,243.87245101959218,243.96241503398642,244.05237904838066,244.1423430627749,244.23230707716914,244.32227109156338,244.41223510595762,244.50219912035186,244.5921631347461,244.68212714914034,244.77209116353458,244.86205517792882,244.95201919232306,245.0419832067173,245.13194722111155,245.2219112355058,245.31187524990003,245.4018392642943,245.49180327868854,245.58176729308278,245.67173130747702,245.76169532187126,245.8516593362655,245.94162335065974,246.03158736505398,246.12155137944822,246.21151539384246,246.3014794082367,246.39144342263094,246.48140743702518,246.57137145141942,246.66133546581366,246.7512994802079,246.84126349460215,246.93122750899641,247.02119152339066,247.1111555377849,247.20111955217914,247.29108356657338,247.38104758096762,247.47101159536186,247.5609756097561,247.65093962415034,247.74090363854458,247.83086765293882,247.92083166733306,248.0107956817273,248.10075969612154,248.19072371051578,248.28068772491002,248.37065173930426,248.46061575369853,248.55057976809277,248.64054378248701,248.73050779688126,248.8204718112755,248.91043582566974,249.00039984006398,249.09036385445822,249.18032786885246,249.2702918832467,249.36025589764094,249.45021991203518,249.54018392642942,249.63014794082366,249.7201119552179,249.81007596961214,249.90003998400638,249.99000399840065,250.0799680127949,250.16993202718913,250.25989604158337,250.34986005597762,250.43982407037186,250.5297880847661,250.61975209916034,250.70971611355458,250.79968012794882,250.88964414234306,250.9796081567373,251.06957217113154,251.15953618552578,251.24950019992002,251.33946421431426,251.4294282287085,251.51939224310277,251.609356257497,251.69932027189125,251.7892842862855,251.87924830067973,251.96921231507397,252.05917632946822,252.14914034386246,252.2391043582567,252.32906837265094,252.41903238704518,252.50899640143942,252.59896041583366,252.6889244302279,252.77888844462214,252.86885245901638,252.95881647341065,253.0487804878049,253.13874450219913,253.22870851659337,253.3186725309876,253.40863654538185,253.4986005597761,253.58856457417033,253.67852858856457,253.76849260295882,253.85845661735306,253.9484206317473,254.03838464614154,254.12834866053578,254.21831267493002,254.30827668932426,254.3982407037185,254.48820471811277,254.578168732507,254.66813274690125,254.7580967612955,254.84806077568973,254.93802479008397,255.0279888044782,255.11795281887245,255.2079168332667,255.29788084766093,255.38784486205518,255.47780887644942,255.56777289084366,255.6577369052379,255.74770091963214,255.83766493402638,255.92762894842062,256.0175929628149,256.10755697720913,256.19752099160337,256.2874850059976,256.37744902039185,256.4674130347861,256.55737704918033,256.6473410635746,256.7373050779688,256.82726909236305,256.9172331067573,257.00719712115153,257.0971611355458,257.18712514994,257.27708916433426,257.3670531787285,257.45701719312274,257.546981207517,257.6369452219112,257.72690923630546,257.8168732506997,257.90683726509394,257.9968012794882,258.0867652938824,258.17672930827666,258.2666933226709,258.3566573370652,258.44662135145944,258.5365853658537,258.6265493802479,258.71651339464216,258.8064774090364,258.89644142343064,258.9864054378249,259.0763694522191,259.16633346661337,259.2562974810076,259.34626149540185,259.4362255097961,259.52618952419033,259.61615353858457,259.7061175529788,259.79608156737305,259.8860455817673,259.97600959616153,260.0659736105558,260.15593762495,260.24590163934425,260.3358656537385,260.42582966813274,260.515793682527,260.6057576969212,260.69572171131546,260.7856857257097,260.87564974010394,260.9656137544982,261.0555777688924,261.14554178328666,261.2355057976809,261.3254698120752,261.41543382646944,261.5053978408637,261.5953618552579,261.68532586965216,261.7752898840464,261.86525389844064,261.9552179128349,262.0451819272291,262.13514594162336,262.2251099560176,262.31507397041185,262.4050379848061,262.4950019992003,262.58496601359457,262.6749300279888,262.76489404238305,262.8548580567773,262.94482207117153,263.03478608556577,263.12475009996,263.21471411435425,263.3046781287485,263.39464214314273,263.484606157537,263.5745701719312,263.66453418632545,263.7544982007197,263.84446221511394,263.9344262295082,264.0243902439024,264.11435425829666,264.2043182726909,264.29428228708514,264.38424630147944,264.4742103158737,264.5641743302679,264.65413834466216,264.7441023590564,264.83406637345064,264.9240303878449,265.0139944022391,265.10395841663336,265.1939224310276,265.28388644542184,265.3738504598161,265.4638144742103,265.55377848860456,265.6437425029988,265.73370651739305,265.8236705317873,265.9136345461815,266.00359856057577,266.09356257497,266.18352658936425,266.2734906037585,266.36345461815273,266.45341863254697,266.5433826469412,266.63334666133545,266.7233106757297,266.81327469012393,266.9032387045182,266.9932027189124,267.08316673330665,267.1731307477009,267.26309476209514,267.3530587764894,267.4430227908837,267.5329868052779,267.62295081967216,267.7129148340664,267.80287884846064,267.8928428628549,267.9828068772491,268.07277089164336,268.1627349060376,268.25269892043184,268.3426629348261,268.4326269492203,268.52259096361456,268.6125549780088,268.70251899240304,268.7924830067973,268.8824470211915,268.97241103558576,269.06237504998,269.15233906437425,269.2423030787685,269.3322670931627,269.42223110755697,269.5121951219512,269.60215913634545,269.6921231507397,269.78208716513393,269.87205117952817,269.9620151939224,270.05197920831665,270.1419432227109,270.23190723710513,270.3218712514994,270.4118352658936,270.5017992802879,270.59176329468215,270.6817273090764,270.77169132347063,270.8616553378649,270.9516193522591,271.04158336665336,271.1315473810476,271.22151139544184,271.3114754098361,271.4014394242303,271.49140343862456,271.5813674530188,271.67133146741304,271.7612954818073,271.8512594962015,271.94122351059576,272.03118752499,272.12115153938424,272.2111155537785,272.3010795681727,272.39104358256697,272.4810075969612,272.57097161135545,272.6609356257497,272.7508996401439,272.84086365453817,272.9308276689324,273.02079168332665,273.1107556977209,273.20071971211513,273.29068372650937,273.3806477409036,273.47061175529785,273.56057576969215,273.6505397840864,273.74050379848063,273.8304678128749,273.9204318272691,274.01039584166335,274.1003598560576,274.19032387045183,274.2802878848461,274.3702518992403,274.46021591363456,274.5501799280288,274.64014394242304,274.7301079568173,274.8200719712115,274.91003598560576,275.0,275.08996401439424,275.1799280287885,275.2698920431827,275.35985605757696,275.4498200719712,275.53978408636544,275.6297481007597,275.7197121151539,275.80967612954817,275.8996401439424,275.98960415833665,276.0795681727309,276.1695321871251,276.25949620151937,276.3494602159136,276.43942423030785,276.52938824470215,276.6193522590964,276.70931627349063,276.79928028788487,276.8892443022791,276.97920831667335,277.0691723310676,277.15913634546183,277.2491003598561,277.3390643742503,277.42902838864455,277.5189924030388,277.60895641743303,277.6989204318273,277.7888844462215,277.87884846061576,277.96881247501,278.05877648940424,278.1487405037985,278.2387045181927,278.32866853258696,278.4186325469812,278.50859656137544,278.5985605757697,278.6885245901639,278.77848860455816,278.8684526189524,278.95841663334664,279.0483806477409,279.1383446621351,279.22830867652937,279.3182726909236,279.40823670531785,279.4982007197121,279.5881647341064,279.6781287485006,279.76809276289487,279.8580567772891,279.94802079168335,280.0379848060776,280.12794882047183,280.21791283486607,280.3078768492603,280.39784086365455,280.4878048780488,280.57776889244303,280.6677329068373,280.7576969212315,280.84766093562575,280.93762495002,281.02758896441424,281.1175529788085,281.2075169932027,281.29748100759696,281.3874450219912,281.47740903638544,281.5673730507797,281.6573370651739,281.74730107956816,281.8372650939624,281.92722910835664,282.0171931227509,282.1071571371451,282.19712115153936,282.2870851659336,282.37704918032784,282.4670131947221,282.5569772091163,282.6469412235106,282.73690523790486,282.8268692522991,282.91683326669335,283.0067972810876,283.0967612954818,283.18672530987607,283.2766893242703,283.36665333866455,283.4566173530588,283.54658136745303,283.63654538184727,283.7265093962415,283.81647341063575,283.90643742503,283.99640143942423,284.0863654538185,284.1763294682127,284.26629348260695,284.3562574970012,284.44622151139544,284.5361855257897,284.6261495401839,284.71611355457816,284.8060775689724,284.89604158336664,284.9860055977609,285.0759696121551,285.16593362654936,285.2558976409436,285.34586165533784,285.4358256697321,285.5257896841263,285.61575369852056,285.70571771291486,285.7956817273091,285.88564574170334,285.9756097560976,286.0655737704918,286.15553778488606,286.2455017992803,286.33546581367455,286.4254298280688,286.515393842463,286.60535785685727,286.6953218712515,286.78528588564575,286.87524990004,286.96521391443423,287.05517792882847,287.1451419432227,287.23510595761695,287.3250699720112,287.41503398640543,287.5049980007997,287.5949620151939,287.68492602958815,287.7748900439824,287.86485405837664,287.9548180727709,288.0447820871651,288.13474610155936,288.2247101159536,288.31467413034784,288.4046381447421,288.4946021591363,288.58456617353056,288.6745301879248,288.7644942023191,288.85445821671334,288.9444222311076,289.0343862455018,289.12435025989606,289.2143142742903,289.30427828868454,289.3942423030788,289.484206317473,289.57417033186726,289.6641343462615,289.75409836065575,289.84406237505,289.9340263894442,290.02399040383847,290.1139544182327,290.20391843262695,290.2938824470212,290.38384646141543,290.47381047580967,290.5637744902039,290.65373850459815,290.7437025189924,290.83366653338663,290.9236305477809,291.0135945621751,291.10355857656936,291.1935225909636,291.28348660535784,291.3734506197521,291.4634146341463,291.55337864854056,291.6433426629348,291.7333066773291,291.82327069172334,291.9132347061176,292.0031987205118,292.09316273490606,292.1831267493003,292.27309076369454,292.3630547780888,292.453018792483,292.54298280687726,292.6329468212715,292.72291083566574,292.81287485006,292.9028388644542,292.99280287884847,293.0827668932427,293.17273090763695,293.2626949220312,293.3526589364254,293.44262295081967,293.5325869652139,293.62255097960815,293.7125149940024,293.80247900839663,293.89244302279087,293.9824070371851,294.07237105157935,294.1623350659736,294.25229908036783,294.3422630947621,294.4322271091563,294.52219112355056,294.6121551379448,294.70211915233904,294.79208316673333,294.8820471811276,294.9720111955218,295.06197520991606,295.1519392243103,295.24190323870454,295.3318672530988,295.421831267493,295.51179528188726,295.6017592962815,295.69172331067574,295.78168732507,295.8716513394642,295.96161535385846,296.0515793682527,296.14154338264694,296.2315073970412,296.3214714114354,296.41143542582967,296.5013994402239,296.59136345461815,296.6813274690124,296.7712914834066,296.86125549780087,296.9512195121951,297.04118352658935,297.1311475409836,297.22111155537783,297.3110755697721,297.4010395841663,297.49100359856055,297.5809676129548,297.67093162734903,297.7608956417433,297.8508596561376,297.9408236705318,298.03078768492605,298.1207516993203,298.21071571371454,298.3006797281088,298.390643742503,298.48060775689726,298.5705717712915,298.66053578568574,298.75049980008,298.8404638144742,298.93042782886846,299.0203918432627,299.11035585765694,299.2003198720512,299.2902838864454,299.38024790083966,299.4702119152339,299.56017592962814,299.6501399440224,299.7401039584166,299.83006797281087,299.9200319872051,300.00999600159935,300.0999600159936,300.18992403038783,300.27988804478207,300.3698520591763,300.45981607357055,300.5497800879648,300.63974410235903,300.7297081167533,300.8196721311475,300.9096361455418,300.99960015993605,301.0895641743303,301.17952818872453,301.2694922031188,301.359456217513,301.44942023190725,301.5393842463015,301.62934826069574,301.71931227509,301.8092762894842,301.89924030387846,301.9892043182727,302.07916833266694,302.1691323470612,302.2590963614554,302.34906037584966,302.4390243902439,302.52898840463814,302.6189524190324,302.7089164334266,302.79888044782086,302.8888444622151,302.97880847660934,303.0687724910036,303.1587365053978,303.24870051979207,303.3386645341863,303.42862854858055,303.5185925629748,303.60855657736903,303.69852059176327,303.7884846061575,303.87844862055175,303.96841263494605,304.0583766493403,304.14834066373453,304.23830467812877,304.328268692523,304.41823270691725,304.5081967213115,304.59816073570573,304.6881247501,304.7780887644942,304.86805277888845,304.9580167932827,305.04798080767694,305.1379448220712,305.2279088364654,305.31787285085966,305.4078368652539,305.49780087964814,305.5877648940424,305.6777289084366,305.76769292283086,305.8576569372251,305.94762095161934,306.0375849660136,306.1275489804078,306.21751299480206,306.3074770091963,306.39744102359055,306.4874050379848,306.577369052379,306.66733306677327,306.7572970811675,306.84726109556175,306.93722510995605,307.0271891243503,307.1171531387445,307.20711715313877,307.297081167533,307.38704518192725,307.4770091963215,307.56697321071573,307.65693722510997,307.7469012395042,307.83686525389845,307.9268292682927,308.01679328268693,308.1067572970812,308.1967213114754,308.28668532586966,308.3766493402639,308.46661335465814,308.5565773690524,308.6465413834466,308.73650539784086,308.8264694122351,308.91643342662934,309.0063974410236,309.0963614554178,309.18632546981206,309.2762894842063,309.36625349860054,309.4562175129948,309.546181527389,309.63614554178326,309.7261095561775,309.81607357057175,309.906037584966,309.9960015993603,310.0859656137545,310.17592962814877,310.265893642543,310.35585765693725,310.4458216713315,310.5357856857257,310.62574970011997,310.7157137145142,310.80567772890845,310.8956417433027,310.98560575769693,311.07556977209117,311.1655337864854,311.25549780087965,311.3454618152739,311.43542582966813,311.5253898440624,311.6153538584566,311.70531787285086,311.7952818872451,311.88524590163934,311.9752099160336,312.0651739304278,312.15513794482206,312.2451019592163,312.33506597361054,312.4250299880048,312.514994002399,312.60495801679326,312.6949220311875,312.78488604558174,312.874850059976,312.9648140743702,313.0547780887645,313.14474210315876,313.234706117553,313.32467013194724,313.4146341463415,313.5045981607357,313.59456217512997,313.6845261895242,313.77449020391845,313.8644542183127,313.9544182327069,314.04438224710117,314.1343462614954,314.22431027588965,314.3142742902839,314.40423830467813,314.4942023190724,314.5841663334666,314.67413034786085,314.7640943622551,314.85405837664933,314.9440223910436,315.0339864054378,315.12395041983206,315.2139144342263,315.30387844862054,315.3938424630148,315.483806477409,315.57377049180326,315.6637345061975,315.75369852059174,315.843662534986,315.9336265493802,316.02359056377446,316.11355457816876,316.203518592563,316.29348260695724,316.3834466213515,316.4734106357457,316.56337465013996,316.6533386645342,316.74330267892844,316.8332666933227,316.9232307077169,317.01319472211117,317.1031587365054,317.19312275089965,317.2830867652939,317.3730507796881,317.46301479408237,317.5529788084766,317.64294282287085,317.7329068372651,317.82287085165933,317.9128348660536,318.0027988804478,318.09276289484205,318.1827269092363,318.27269092363053,318.3626549380248,318.452618952419,318.54258296681326,318.6325469812075,318.72251099560174,318.812475009996,318.9024390243902,318.99240303878446,319.0823670531787,319.172331067573,319.26229508196724,319.3522590963615,319.4422231107557,319.53218712514996,319.6221511395442,319.71211515393844,319.8020791683327,319.8920431827269,319.98200719712116,320.0719712115154,320.16193522590964,320.2518992403039,320.3418632546981,320.43182726909237,320.5217912834866,320.61175529788085,320.7017193122751,320.79168332666933,320.88164734106357,320.9716113554578,321.06157536985205,321.1515393842463,321.24150339864053,321.3314674130348,321.421431427429,321.51139544182325,321.6013594562175,321.69132347061174,321.781287485006,321.8712514994002,321.96121551379446,322.0511795281887,322.141143542583,322.23110755697724,322.3210715713715,322.4110355857657,322.50099960015996,322.5909636145542,322.68092762894844,322.7708916433427,322.8608556577369,322.95081967213116,323.0407836865254,323.13074770091964,323.2207117153139,323.3106757297081,323.40063974410236,323.4906037584966,323.58056777289084,323.6705317872851,323.7604958016793,323.85045981607357,323.9404238304678,324.03038784486205,324.1203518592563,324.21031587365053,324.30027988804477,324.390243902439,324.48020791683325,324.5701719312275,324.66013594562173,324.750099960016,324.8400639744102,324.93002798880445,325.0199920031987,325.10995601759294,325.19992003198723,325.2898840463815,325.3798480607757,325.46981207516995,325.5597760895642,325.64974010395844,325.7397041183527,325.8296681327469,325.91963214714116,326.0095961615354,326.09956017592964,326.1895241903239,326.2794882047181,326.36945221911236,326.4594162335066,326.54938024790084,326.6393442622951,326.7293082766893,326.81927229108356,326.9092363054778,326.99920031987205,327.0891643342663,327.1791283486605,327.26909236305477,327.359056377449,327.44902039184325,327.5389844062375,327.62894842063173,327.71891243502597,327.8088764494202,327.89884046381445,327.9888044782087,328.07876849260293,328.1687325069972,328.25869652139147,328.3486605357857,328.43862455017995,328.5285885645742,328.61855257896843,328.7085165933627,328.7984806077569,328.88844462215116,328.9784086365454,329.06837265093964,329.1583366653339,329.2483006797281,329.33826469412236,329.4282287085166,329.51819272291084,329.6081567373051,329.6981207516993,329.78808476609356,329.8780487804878,329.96801279488204,330.0579768092763,330.1479408236705,330.23790483806476,330.327868852459,330.41783286685325,330.5077968812475,330.5977608956417,330.68772491003597,330.7776889244302,330.86765293882445,330.9576169532187,331.04758096761293,331.13754498200717,331.2275089964014,331.3174730107957,331.40743702518995,331.4974010395842,331.58736505397843,331.67732906837267,331.7672930827669,331.85725709716115,331.9472211115554,332.03718512594963,332.1271491403439,332.2171131547381,332.30707716913236,332.3970411835266,332.48700519792084,332.5769692123151,332.6669332267093,332.75689724110356,332.8468612554978,332.93682526989204,333.0267892842863,333.1167532986805,333.20671731307476,333.296681327469,333.38664534186324,333.4766093562575,333.5665733706517,333.65653738504597,333.7465013994402,333.83646541383445,333.9264294282287,334.0163934426229,334.10635745701717,334.1963214714114,334.28628548580565,334.37624950019995,334.4662135145942,334.5561775289884,334.64614154338267,334.7361055577769,334.82606957217115,334.9160335865654,335.00599760095963,335.0959616153539,335.1859256297481,335.27588964414235,335.3658536585366,335.45581767293083,335.5457816873251,335.6357457017193,335.72570971611356,335.8156737305078,335.90563774490204,335.9956017592963,336.0855657736905,336.17552978808476,336.265493802479,336.35545781687324,336.4454218312675,336.5353858456617,336.62534986005596,336.7153138744502,336.80527788884444,336.8952419032387,336.9852059176329,337.07516993202717,337.1651339464214,337.25509796081565,337.34506197520994,337.4350259896042,337.5249900039984,337.61495401839267,337.7049180327869,337.79488204718115,337.8848460615754,337.97481007596963,338.06477409036387,338.1547381047581,338.24470211915235,338.3346661335466,338.42463014794083,338.5145941623351,338.6045581767293,338.69452219112355,338.7844862055178,338.87445021991203,338.9644142343063,339.0543782487005,339.14434226309476,339.234306277489,339.32427029188324,339.4142343062775,339.5041983206717,339.59416233506596,339.6841263494602,339.77409036385444,339.8640543782487,339.9540183926429,340.04398240703716,340.1339464214314,340.22391043582564,340.3138744502199,340.4038384646142,340.4938024790084,340.58376649340266,340.6737305077969,340.76369452219114,340.8536585365854,340.9436225509796,341.03358656537387,341.1235505797681,341.21351459416235,341.3034786085566,341.39344262295083,341.48340663734507,341.5733706517393,341.66333466613355,341.7532986805278,341.84326269492203,341.9332267093163,342.0231907237105,342.11315473810475,342.203118752499,342.29308276689324,342.3830467812875,342.4730107956817,342.56297481007596,342.6529388244702,342.74290283886444,342.8328668532587,342.9228308676529,343.01279488204716,343.1027588964414,343.19272291083564,343.2826869252299,343.3726509396241,343.4626149540184,343.55257896841266,343.6425429828069,343.73250699720114,343.8224710115954,343.9124350259896,344.00239904038386,344.0923630547781,344.18232706917235,344.2722910835666,344.3622550979608,344.45221911235507,344.5421831267493,344.63214714114355,344.7221111555378,344.81207516993203,344.90203918432627,344.9920031987205,345.08196721311475,345.171931227509,345.26189524190323,345.3518592562975,345.4418232706917,345.53178728508595,345.6217512994802,345.71171531387444,345.8016793282687,345.8916433426629,345.98160735705716,346.0715713714514,346.16153538584564,346.2514994002399,346.3414634146341,346.43142742902836,346.52139144342266,346.6113554578169,346.70131947221114,346.7912834866054,346.8812475009996,346.97121151539386,347.0611755297881,347.15113954418234,347.2411035585766,347.3310675729708,347.42103158736506,347.5109956017593,347.60095961615355,347.6909236305478,347.780887644942,347.87085165933627,347.9608156737305,348.05077968812475,348.140743702519,348.23070771691323,348.32067173130747,348.4106357457017,348.50059976009595,348.5905637744902,348.68052778888443,348.7704918032787,348.8604558176729,348.95041983206715,349.0403838464614,349.13034786085564,349.2203118752499,349.3102758896441,349.40023990403836,349.4902039184326,349.5801679328269,349.67013194722114,349.7600959616154,349.8500599760096,349.94002399040386,350.0299880047981,350.11995201919234,350.2099160335866,350.2998800479808,350.38984406237506,350.4798080767693,350.56977209116354,350.6597361055578,350.749700119952,350.83966413434626,350.9296281487405,351.01959216313475,351.109556177529,351.1995201919232,351.28948420631747,351.3794482207117,351.46941223510595,351.5593762495002,351.64934026389443,351.73930427828867,351.8292682926829,351.91923230707715,352.0091963214714,352.09916033586563,352.1891243502599,352.2790883646541,352.36905237904836,352.4590163934426,352.5489804078369,352.63894442223113,352.7289084366254,352.8188724510196,352.90883646541386,352.9988004798081,353.08876449420234,353.1787285085966,353.2686925229908,353.35865653738506,353.4486205517793,353.53858456617354,353.6285485805678,353.718512594962,353.80847660935626,353.8984406237505,353.98840463814474,354.078368652539,354.1683326669332,354.25829668132747,354.3482606957217,354.43822471011595,354.5281887245102,354.6181527389044,354.70811675329867,354.7980807676929,354.88804478208715,354.9780087964814,355.06797281087563,355.15793682526987,355.2479008396641,355.33786485405835,355.4278288684526,355.51779288284683,355.60775689724113,355.6977209116354,355.7876849260296,355.87764894042385,355.9676129548181,356.05757696921233,356.1475409836066,356.2375049980008,356.32746901239506,356.4174330267893,356.50739704118354,356.5973610555778,356.687325069972,356.77728908436626,356.8672530987605,356.95721711315474,357.047181127549,357.1371451419432,357.22710915633746,357.3170731707317,357.40703718512594,357.4970011995202,357.5869652139144,357.67692922830867,357.7668932427029,357.85685725709715,357.9468212714914,358.0367852858856,358.12674930027987,358.2167133146741,358.30667732906835,358.3966413434626,358.48660535785683,358.5765693722511,358.66653338664537,358.7564974010396,358.84646141543385,358.9364254298281,359.02638944422233,359.1163534586166,359.2063174730108,359.29628148740505,359.3862455017993,359.47620951619353,359.5661735305878,359.656137544982,359.74610155937626,359.8360655737705,359.92602958816474,360.015993602559,360.1059576169532,360.19592163134746,360.2858856457417,360.37584966013594,360.4658136745302,360.5557776889244,360.64574170331866,360.7357057177129,360.82566973210714,360.9156337465014,361.0055977608956,361.09556177528987,361.1855257896841,361.27548980407835,361.3654538184726,361.45541783286683,361.54538184726107,361.6353458616553,361.7253098760496,361.81527389044385,361.9052379048381,361.99520191923233,362.08516593362657,362.1751299480208,362.26509396241505,362.3550579768093,362.44502199120353,362.5349860055978,362.624950019992,362.71491403438625,362.8048780487805,362.89484206317474,362.984806077569,363.0747700919632,363.16473410635746,363.2546981207517,363.34466213514594,363.4346261495402,363.5245901639344,363.61455417832866,363.7045181927229,363.79448220711714,363.8844462215114,363.9744102359056,364.06437425029986,364.1543382646941,364.24430227908834,364.3342662934826,364.4242303078768,364.51419432227107,364.6041583366653,364.69412235105955,364.78408636545385,364.8740503798481,364.9640143942423,365.05397840863657,365.1439424230308,365.23390643742505,365.3238704518193,365.41383446621353,365.50379848060777,365.593762495002,365.68372650939625,365.7736905237905,365.86365453818473,365.953618552579,366.0435825669732,366.13354658136745,366.2235105957617,366.31347461015594,366.4034386245502,366.4934026389444,366.58336665333866,366.6733306677329,366.76329468212714,366.8532586965214,366.9432227109156,367.03318672530986,367.1231507397041,367.21311475409834,367.3030787684926,367.3930427828868,367.48300679728106,367.5729708116753,367.66293482606955,367.75289884046384,367.8428628548581,367.9328268692523,368.02279088364656,368.1127548980408,368.20271891243505,368.2926829268293,368.3826469412235,368.47261095561777,368.562574970012,368.65253898440625,368.7425029988005,368.83246701319473,368.92243102758897,369.0123950419832,369.10235905637745,369.1923230707717,369.28228708516593,369.3722510995602,369.4622151139544,369.55217912834866,369.6421431427429,369.73210715713714,369.8220711715314,369.9120351859256,370.00199920031986,370.0919632147141,370.18192722910834,370.2718912435026,370.3618552578968,370.45181927229106,370.5417832866853,370.63174730107954,370.7217113154738,370.8116753298681,370.9016393442623,370.99160335865656,371.0815673730508,371.17153138744504,371.2614954018393,371.3514594162335,371.44142343062776,371.531387445022,371.62135145941625,371.7113154738105,371.8012794882047,371.89124350259897,371.9812075169932,372.07117153138745,372.1611355457817,372.25109956017593,372.34106357457017,372.4310275889644,372.52099160335865,372.6109556177529,372.70091963214713,372.7908836465414,372.8808476609356,372.97081167532986,373.0607756897241,373.15073970411834,373.2407037185126,373.3306677329068,373.42063174730106,373.5105957616953,373.60055977608954,373.6905237904838,373.780487804878,373.8704518192723,373.96041583366656,374.0503798480608,374.14034386245504,374.2303078768493,374.3202718912435,374.41023590563776,374.500199920032,374.59016393442624,374.6801279488205,374.7700919632147,374.86005597760897,374.9500199920032,375.03998400639745,375.1299480207917,375.2199120351859,375.30987604958017,375.3998400639744,375.48980407836865,375.5797680927629,375.66973210715713,375.75969612155137,375.8496601359456,375.93962415033985,376.0295881647341,376.11955217912833,376.2095161935226,376.2994802079168,376.38944422231106,376.4794082367053,376.56937225109954,376.6593362654938,376.749300279888,376.83926429428226,376.92922830867656,377.0191923230708,377.10915633746504,377.1991203518593,377.2890843662535,377.37904838064776,377.469012395042,377.55897640943624,377.6489404238305,377.7389044382247,377.82886845261896,377.9188324670132,378.00879648140744,378.0987604958017,378.1887245101959,378.27868852459017,378.3686525389844,378.45861655337865,378.5485805677729,378.6385445821671,378.72850859656137,378.8184726109556,378.90843662534985,378.9984006397441,379.08836465413833,379.1783286685326,379.2682926829268,379.35825669732105,379.4482207117153,379.53818472610953,379.6281487405038,379.718112754898,379.80807676929226,379.8980407836865,379.9880047980808,380.07796881247504,380.1679328268693,380.2578968412635,380.34786085565776,380.437824870052,380.52778888444624,380.6177528988405,380.7077169132347,380.79768092762896,380.8876449420232,380.97760895641744,381.0675729708117,381.1575369852059,381.24750099960016,381.3374650139944,381.42742902838864,381.5173930427829,381.6073570571771,381.69732107157137,381.7872850859656,381.87724910035985,381.9672131147541,382.05717712914833,382.14714114354257,382.2371051579368,382.32706917233105,382.4170331867253,382.50699720111953,382.5969612155138,382.686925229908,382.77688924430225,382.8668532586965,382.9568172730908,383.04678128748503,383.1367453018793,383.2267093162735,383.31667333066775,383.406637345062,383.49660135945624,383.5865653738505,383.6765293882447,383.76649340263896,383.8564574170332,383.94642143142744,384.0363854458217,384.1263494602159,384.21631347461016,384.3062774890044,384.39624150339864,384.4862055177929,384.5761695321871,384.66613354658136,384.7560975609756,384.84606157536984,384.9360255897641,385.0259896041583,385.11595361855257,385.2059176329468,385.29588164734105,385.3858456617353,385.47580967612953,385.56577369052377,385.655737704918,385.74570171931225,385.8356657337065,385.92562974810073,386.01559376249503,386.10555777688927,386.1955217912835,386.28548580567775,386.375449820072,386.46541383446623,386.5553778488605,386.6453418632547,386.73530587764895,386.8252698920432,386.91523390643744,387.0051979208317,387.0951619352259,387.18512594962016,387.2750899640144,387.36505397840864,387.4550179928029,387.5449820071971,387.63494602159136,387.7249100359856,387.81487405037984,387.9048380647741,387.9948020791683,388.08476609356256,388.1747301079568,388.26469412235105,388.3546581367453,388.4446221511395,388.53458616553377,388.624550179928,388.71451419432225,388.8044782087165,388.89444222311073,388.98440623750497,389.07437025189927,389.1643342662935,389.25429828068775,389.344262295082,389.43422630947623,389.52419032387047,389.6141543382647,389.70411835265895,389.7940823670532,389.88404638144743,389.9740103958417,390.0639744102359,390.15393842463016,390.2439024390244,390.33386645341864,390.4238304678129,390.5137944822071,390.60375849660136,390.6937225109956,390.78368652538984,390.8736505397841,390.9636145541783,391.05357856857256,391.1435425829668,391.23350659736104,391.3234706117553,391.4134346261495,391.50339864054376,391.593362654938,391.68332666933225,391.7732906837265,391.8632546981207,391.95321871251497,392.0431827269092,392.1331467413035,392.22311075569775,392.313074770092,392.4030387844862,392.49300279888047,392.5829668132747,392.67293082766895,392.7628948420632,392.85285885645743,392.94282287085167,393.0327868852459,393.12275089964015,393.2127149140344,393.30267892842863,393.3926429428229,393.4826069572171,393.57257097161136,393.6625349860056,393.75249900039984,393.8424630147941,393.9324270291883,394.02239104358256,394.1123550579768,394.20231907237104,394.2922830867653,394.3822471011595,394.47221111555376,394.562175129948,394.65213914434224,394.7421031587365,394.8320671731307,394.92203118752496,395.0119952019192,395.1019592163135,395.19192323070774,395.281887245102,395.3718512594962,395.46181527389047,395.5517792882847,395.64174330267895,395.7317073170732,395.8216713314674,395.91163534586167,396.0015993602559,396.09156337465015,396.1815273890444,396.27149140343863,396.3614554178329,396.4514194322271,396.54138344662135,396.6313474610156,396.72131147540983,396.8112754898041,396.9012395041983,396.99120351859256,397.0811675329868,397.17113154738104,397.2610955617753,397.3510595761695,397.44102359056376,397.530987604958,397.62095161935224,397.7109156337465,397.8008796481407,397.89084366253496,397.9808076769292,398.07077169132344,398.16073570571774,398.250699720112,398.3406637345062,398.43062774890046,398.5205917632947,398.61055577768894,398.7005197920832,398.7904838064774,398.88044782087167,398.9704118352659,399.06037584966015,399.1503398640544,399.24030387844863,399.33026789284287,399.4202319072371,399.51019592163135,399.6001599360256,399.69012395041983,399.7800879648141,399.8700519792083,399.96001599360255,400.0499800079968,400.13994402239103,400.2299080367853,400.3198720511795,400.40983606557376,400.499800079968,400.58976409436224,400.6797281087565,400.7696921231507,400.85965613754496,400.9496201519392,401.03958416633344,401.1295481807277,401.219512195122,401.3094762095162,401.39944022391046,401.4894042383047,401.57936825269894,401.6693322670932,401.7592962814874,401.84926029588166,401.9392243102759,402.02918832467014,402.1191523390644,402.2091163534586,402.29908036785287,402.3890443822471,402.47900839664135,402.5689724110356,402.65893642542983,402.74890043982407,402.8388644542183,402.92882846861255,403.0187924830068,403.10875649740103,403.1987205117953,403.2886845261895,403.37864854058375,403.468612554978,403.55857656937224,403.6485405837665,403.7385045981607,403.82846861255496,403.9184326269492,404.00839664134344,404.0983606557377,404.1883246701319,404.2782886845262,404.36825269892046,404.4582167133147,404.54818072770894,404.6381447421032,404.7281087564974,404.81807277089166,404.9080367852859,404.99800079968014,405.0879648140744,405.1779288284686,405.26789284286286,405.3578568572571,405.44782087165134,405.5377848860456,405.6277489004398,405.71771291483407,405.8076769292283,405.89764094362255,405.9876049580168,406.07756897241103,406.16753298680527,406.2574970011995,406.34746101559375,406.437425029988,406.52738904438223,406.6173530587765,406.7073170731707,406.79728108756495,406.8872451019592,406.97720911635344,407.0671731307477,407.1571371451419,407.24710115953616,407.33706517393045,407.4270291883247,407.51699320271894,407.6069572171132,407.6969212315074,407.78688524590166,407.8768492602959,407.96681327469014,408.0567772890844,408.1467413034786,408.23670531787286,408.3266693322671,408.41663334666134,408.5065973610556,408.5965613754498,408.68652538984406,408.7764894042383,408.86645341863255,408.9564174330268,409.046381447421,409.13634546181527,409.2263094762095,409.31627349060375,409.406237504998,409.49620151939223,409.58616553378647,409.6761295481807,409.76609356257495,409.8560575769692,409.94602159136343,410.0359856057577,410.1259496201519,410.21591363454615,410.30587764894045,410.3958416633347,410.48580567772893,410.5757696921232,410.6657337065174,410.75569772091166,410.8456617353059,410.93562574970014,411.0255897640944,411.1155537784886,411.20551779288286,411.2954818072771,411.38544582167134,411.4754098360656,411.5653738504598,411.65533786485406,411.7453018792483,411.83526589364254,411.9252299080368,412.015193922431,412.10515793682526,412.1951219512195,412.28508596561375,412.375049980008,412.4650139944022,412.55497800879647,412.6449420231907,412.73490603758495,412.8248700519792,412.91483406637343,413.00479808076767,413.0947620951619,413.18472610955615,413.2746901239504,413.3646541383447,413.45461815273893,413.54458216713317,413.6345461815274,413.72451019592165,413.8144742103159,413.90443822471013,413.9944022391044,414.0843662534986,414.17433026789286,414.2642942822871,414.35425829668134,414.4442223110756,414.5341863254698,414.62415033986406,414.7141143542583,414.80407836865254,414.8940423830468,414.984006397441,415.07397041183526,415.1639344262295,415.25389844062374,415.343862455018,415.4338264694122,415.52379048380647,415.6137544982007,415.70371851259495,415.7936825269892,415.8836465413834,415.97361055577767,416.0635745701719,416.15353858456615,416.2435025989604,416.33346661335463,416.4234306277489,416.51339464214317,416.6033586565374,416.69332267093165,416.7832866853259,416.87325069972013,416.9632147141144,417.0531787285086,417.14314274290285,417.2331067572971,417.32307077169133,417.4130347860856,417.5029988004798,417.59296281487406,417.6829268292683,417.77289084366254,417.8628548580568,417.952818872451,418.04278288684526,418.1327469012395,418.22271091563374,418.312674930028,418.4026389444222,418.49260295881646,418.5825669732107,418.67253098760494,418.7624950019992,418.8524590163934,418.94242303078767,419.0323870451819,419.12235105957615,419.2123150739704,419.3022790883646,419.39224310275887,419.48220711715317,419.5721711315474,419.66213514594165,419.7520991603359,419.84206317473013,419.93202718912437,420.0219912035186,420.11195521791285,420.2019192323071,420.29188324670133,420.3818472610956,420.4718112754898,420.56177528988405,420.6517393042783,420.74170331867253,420.8316673330668,420.921631347461,421.01159536185526,421.1015593762495,421.19152339064374,421.281487405038,421.3714514194322,421.46141543382646,421.5513794482207,421.64134346261494,421.7313074770092,421.8212714914034,421.91123550579766,422.0011995201919,422.09116353458614,422.1811275489804,422.2710915633746,422.36105557776887,422.4510195921631,422.5409836065574,422.63094762095164,422.7209116353459,422.8108756497401,422.90083966413437,422.9908036785286,423.08076769292285,423.1707317073171,423.26069572171133,423.35065973610557,423.4406237504998,423.53058776489405,423.6205517792883,423.71051579368253,423.8004798080768,423.890443822471,423.98040783686525,424.0703718512595,424.16033586565374,424.250299880048,424.3402638944422,424.43022790883646,424.5201919232307,424.61015593762494,424.7001199520192,424.7900839664134,424.88004798080766,424.9700119952019,425.05997600959614,425.1499400239904,425.2399040383846,425.32986805277886,425.4198320671731,425.5097960815674,425.59976009596164,425.6897241103559,425.7796881247501,425.86965213914436,425.9596161535386,426.04958016793285,426.1395441823271,426.2295081967213,426.31947221111557,426.4094362255098,426.49940023990405,426.5893642542983,426.67932826869253,426.76929228308677,426.859256297481,426.94922031187525,427.0391843262695,427.12914834066373,427.219112355058,427.3090763694522,427.39904038384645,427.4890043982407,427.57896841263494,427.6689324270292,427.7588964414234,427.84886045581766,427.9388244702119,428.02878848460614,428.1187524990004,428.2087165133946,428.29868052778886,428.3886445421831,428.47860855657734,428.56857257097164,428.6585365853659,428.7485005997601,428.83846461415436,428.9284286285486,429.01839264294284,429.1083566573371,429.1983206717313,429.28828468612556,429.3782487005198,429.46821271491405,429.5581767293083,429.6481407437025,429.73810475809677,429.828068772491,429.91803278688525,430.0079968012795,430.09796081567373,430.18792483006797,430.2778888444622,430.36785285885645,430.4578168732507,430.54778088764493,430.6377449020392,430.7277089164334,430.81767293082765,430.9076369452219,430.99760095961614,431.0875649740104,431.1775289884046,431.26749300279886,431.3574570171931,431.44742103158734,431.5373850459816,431.6273490603759,431.7173130747701,431.80727708916436,431.8972411035586,431.98720511795284,432.0771691323471,432.1671331467413,432.25709716113556,432.3470611755298,432.43702518992404,432.5269892043183,432.6169532187125,432.70691723310676,432.796881247501,432.88684526189525,432.9768092762895,433.0667732906837,433.15673730507797,433.2467013194722,433.33666533386645,433.4266293482607,433.51659336265493,433.60655737704917,433.6965213914434,433.78648540583765,433.8764494202319,433.96641343462613,434.0563774490204,434.1463414634146,434.23630547780886,434.3262694922031,434.41623350659734,434.5061975209916,434.5961615353858,434.6861255497801,434.77608956417436,434.8660535785686,434.95601759296284,435.0459816073571,435.1359456217513,435.22590963614556,435.3158736505398,435.40583766493404,435.4958016793283,435.5857656937225,435.67572970811676,435.765693722511,435.85565773690524,435.9456217512995,436.0355857656937,436.12554978008797,436.2155137944822,436.30547780887645,436.3954418232707,436.4854058376649,436.57536985205917,436.6653338664534,436.75529788084765,436.8452618952419,436.93522590963613,437.02518992403037,437.1151539384246,437.20511795281885,437.2950819672131,437.38504598160733,437.4750099960016,437.5649740103958,437.65493802479006,437.74490203918435,437.8348660535786,437.92483006797283,438.0147940823671,438.1047580967613,438.19472211115556,438.2846861255498,438.37465013994404,438.4646141543383,438.5545781687325,438.64454218312676,438.734506197521,438.82447021191524,438.9144342263095,439.0043982407037,439.09436225509796,439.1843262694922,439.27429028388644,439.3642542982807,439.4542183126749,439.54418232706917,439.6341463414634,439.72411035585765,439.8140743702519,439.9040383846461,439.99400239904037,440.0839664134346,440.17393042782885,440.2638944422231,440.35385845661733,440.4438224710116,440.5337864854058,440.62375049980005,440.71371451419435,440.8036785285886,440.89364254298283,440.9836065573771,441.0735705717713,441.16353458616555,441.2534986005598,441.34346261495403,441.4334266293483,441.5233906437425,441.61335465813676,441.703318672531,441.79328268692524,441.8832467013195,441.9732107157137,442.06317473010796,442.1531387445022,442.24310275889644,442.3330667732907,442.4230307876849,442.51299480207916,442.6029588164734,442.69292283086764,442.7828868452619,442.8728508596561,442.96281487405037,443.0527788884446,443.14274290283885,443.2327069172331,443.32267093162733,443.41263494602157,443.5025989604158,443.59256297481005,443.6825269892043,443.7724910035986,443.86245501799283,443.95241903238707,444.0423830467813,444.13234706117555,444.2223110755698,444.31227508996403,444.4022391043583,444.4922031187525,444.58216713314675,444.672131147541,444.76209516193524,444.8520591763295,444.9420231907237,445.03198720511796,445.1219512195122,445.21191523390644,445.3018792483007,445.3918432626949,445.48180727708916,445.5717712914834,445.66173530587764,445.7516993202719,445.8416633346661,445.93162734906036,446.0215913634546,446.11155537784884,446.2015193922431,446.2914834066373,446.38144742103157,446.4714114354258,446.56137544982005,446.6513394642143,446.74130347860853,446.8312674930028,446.92123150739707,447.0111955217913,447.10115953618555,447.1911235505798,447.28108756497403,447.37105157936827,447.4610155937625,447.55097960815675,447.640943622551,447.73090763694523,447.8208716513395,447.9108356657337,448.00079968012795,448.0907636945222,448.18072770891644,448.2706917233107,448.3606557377049,448.45061975209916,448.5405837664934,448.63054778088764,448.7205117952819,448.8104758096761,448.90043982407036,448.9904038384646,449.08036785285884,449.1703318672531,449.2602958816473,449.35025989604156,449.4402239104358,449.53018792483005,449.6201519392243,449.7101159536185,449.80007996801277,449.89004398240706,449.9800079968013,450.06997201119555,450.1599360255898,450.249900039984,450.33986405437827,450.4298280687725,450.51979208316675,450.609756097561,450.69972011195523,450.78968412634947,450.8796481407437,450.96961215513795,451.0595761695322,451.14954018392643,451.2395041983207,451.3294682127149,451.41943222710916,451.5093962415034,451.59936025589764,451.6893242702919,451.7792882846861,451.86925229908036,451.9592163134746,452.04918032786884,452.1391443422631,452.2291083566573,452.31907237105156,452.4090363854458,452.49900039984004,452.5889644142343,452.6789284286285,452.76889244302276,452.858856457417,452.9488204718113,453.03878448620554,453.1287485005998,453.218712514994,453.30867652938826,453.3986405437825,453.48860455817675,453.578568572571,453.6685325869652,453.75849660135947,453.8484606157537,453.93842463014795,454.0283886445422,454.11835265893643,454.20831667333067,454.2982806877249,454.38824470211915,454.4782087165134,454.56817273090763,454.6581367453019,454.7481007596961,454.83806477409036,454.9280287884846,455.01799280287884,455.1079568172731,455.1979208316673,455.28788484606156,455.3778488604558,455.46781287485004,455.5577768892443,455.6477409036385,455.73770491803276,455.827668932427,455.9176329468213,456.00759696121554,456.0975609756098,456.187524990004,456.27748900439826,456.3674530187925,456.45741703318674,456.547381047581,456.6373450619752,456.72730907636947,456.8172730907637,456.90723710515795,456.9972011195522,457.0871651339464,457.17712914834067,457.2670931627349,457.35705717712915,457.4470211915234,457.53698520591763,457.6269492203119,457.7169132347061,457.80687724910035,457.8968412634946,457.98680527788883,458.0767692922831,458.1667333066773,458.25669732107156,458.3466613354658,458.43662534986004,458.5265893642543,458.6165533786485,458.70651739304276,458.796481407437,458.88644542183124,458.97640943622554,459.0663734506198,459.156337465014,459.24630147940826,459.3362654938025,459.42622950819674,459.516193522591,459.6061575369852,459.69612155137946,459.7860855657737,459.87604958016794,459.9660135945622,460.0559776089564,460.14594162335067,460.2359056377449,460.32586965213915,460.4158336665334,460.5057976809276,460.59576169532187,460.6857257097161,460.77568972411035,460.8656537385046,460.95561775289883,461.0455817672931,461.1355457816873,461.22550979608155,461.3154738104758,461.40543782487003,461.4954018392643,461.5853658536585,461.67532986805276,461.765293882447,461.85525789684124,461.9452219112355,462.0351859256298,462.125149940024,462.21511395441826,462.3050779688125,462.39504198320674,462.485005997601,462.5749700119952,462.66493402638946,462.7548980407837,462.84486205517794,462.9348260695722,463.0247900839664,463.11475409836066,463.2047181127549,463.29468212714914,463.3846461415434,463.4746101559376,463.56457417033187,463.6545381847261,463.74450219912035,463.8344662135146,463.92443022790883,464.01439424230307,464.1043582566973,464.19432227109155,464.2842862854858,464.37425029988003,464.4642143142743,464.5541783286685,464.64414234306275,464.734106357457,464.82407037185123,464.9140343862455,465.0039984006397,465.093962415034,465.18392642942825,465.2738904438225,465.36385445821674,465.453818472611,465.5437824870052,465.63374650139946,465.7237105157937,465.81367453018794,465.9036385445822,465.9936025589764,466.08356657337066,466.1735305877649,466.26349460215914,466.3534586165534,466.4434226309476,466.53338664534186,466.6233506597361,466.71331467413034,466.8032786885246,466.8932427029188,466.98320671731307,467.0731707317073,467.16313474610155,467.2530987604958,467.34306277489003,467.43302678928427,467.5229908036785,467.61295481807275,467.702918832467,467.79288284686123,467.8828468612555,467.9728108756497,468.06277489004395,468.15273890443825,468.2427029188325,468.33266693322673,468.422630947621,468.5125949620152,468.60255897640945,468.6925229908037,468.78248700519794,468.8724510195922,468.9624150339864,469.05237904838066,469.1423430627749,469.23230707716914,469.3222710915634,469.4122351059576,469.50219912035186,469.5921631347461,469.68212714914034,469.7720911635346,469.8620551779288,469.95201919232306,470.0419832067173,470.13194722111155,470.2219112355058,470.3118752499,470.40183926429427,470.4918032786885,470.58176729308275,470.671731307477,470.76169532187123,470.85165933626547,470.9416233506597,471.03158736505395,471.12155137944825,471.2115153938425,471.30147940823673,471.39144342263097,471.4814074370252,471.57137145141945,471.6613354658137,471.75129948020793,471.8412634946022,471.9312275089964,472.02119152339066,472.1111555377849,472.20111955217914,472.2910835665734,472.3810475809676,472.47101159536186,472.5609756097561,472.65093962415034,472.7409036385446,472.8308676529388,472.92083166733306,473.0107956817273,473.10075969612154,473.1907237105158,473.28068772491,473.37065173930426,473.4606157536985,473.55057976809275,473.640543782487,473.7305077968812,473.82047181127547,473.9104358256697,474.00039984006395,474.0903638544582,474.1803278688525,474.2702918832467,474.36025589764097,474.4502199120352,474.54018392642945,474.6301479408237,474.72011195521793,474.81007596961217,474.9000399840064,474.99000399840065,475.0799680127949,475.16993202718913,475.2598960415834,475.3498600559776,475.43982407037186,475.5297880847661,475.61975209916034,475.7097161135546,475.7996801279488,475.88964414234306,475.9796081567373,476.06957217113154,476.1595361855258,476.24950019992,476.33946421431426,476.4294282287085,476.51939224310274,476.609356257497,476.6993202718912,476.78928428628546,476.8792483006797,476.96921231507395,477.0591763294682,477.1491403438624,477.2391043582567,477.32906837265097,477.4190323870452,477.50899640143945,477.5989604158337,477.6889244302279,477.77888844462217,477.8688524590164,477.95881647341065,478.0487804878049,478.13874450219913,478.2287085165934,478.3186725309876,478.40863654538185,478.4986005597761,478.58856457417033,478.6785285885646,478.7684926029588,478.85845661735306,478.9484206317473,479.03838464614154,479.1283486605358,479.21831267493,479.30827668932426,479.3982407037185,479.48820471811274,479.578168732507,479.6681327469012,479.75809676129546,479.8480607756897,479.93802479008394,480.0279888044782,480.1179528188724,480.20791683326667,480.29788084766096,480.3878448620552,480.47780887644944,480.5677728908437,480.6577369052379,480.74770091963217,480.8376649340264,480.92762894842065,481.0175929628149,481.10755697720913,481.19752099160337,481.2874850059976,481.37744902039185,481.4674130347861,481.55737704918033,481.6473410635746,481.7373050779688,481.82726909236305,481.9172331067573,482.00719712115153,482.0971611355458,482.18712514994,482.27708916433426,482.3670531787285,482.45701719312274,482.546981207517,482.6369452219112,482.72690923630546,482.8168732506997,482.90683726509394,482.9968012794882,483.0867652938824,483.17672930827666,483.2666933226709,483.3566573370652,483.44662135145944,483.5365853658537,483.6265493802479,483.71651339464216,483.8064774090364,483.89644142343064,483.9864054378249,484.0763694522191,484.16633346661337,484.2562974810076,484.34626149540185,484.4362255097961,484.52618952419033,484.61615353858457,484.7061175529788,484.79608156737305,484.8860455817673,484.97600959616153,485.0659736105558,485.15593762495,485.24590163934425,485.3358656537385,485.42582966813274,485.515793682527,485.6057576969212,485.69572171131546,485.7856857257097,485.87564974010394,485.9656137544982,486.0555777688924,486.14554178328666,486.2355057976809,486.3254698120752,486.41543382646944,486.5053978408637,486.5953618552579,486.68532586965216,486.7752898840464,486.86525389844064,486.9552179128349,487.0451819272291,487.13514594162336,487.2251099560176,487.31507397041185,487.4050379848061,487.4950019992003,487.58496601359457,487.6749300279888,487.76489404238305,487.8548580567773,487.94482207117153,488.03478608556577,488.12475009996,488.21471411435425,488.3046781287485,488.39464214314273,488.484606157537,488.5745701719312,488.66453418632545,488.7544982007197,488.84446221511394,488.9344262295082,489.0243902439024,489.11435425829666,489.2043182726909,489.29428228708514,489.38424630147944,489.4742103158737,489.5641743302679,489.65413834466216,489.7441023590564,489.83406637345064,489.9240303878449,490.0139944022391,490.10395841663336,490.1939224310276,490.28388644542184,490.3738504598161,490.4638144742103,490.55377848860456,490.6437425029988,490.73370651739305,490.8236705317873,490.9136345461815,491.00359856057577,491.09356257497,491.18352658936425,491.2734906037585,491.36345461815273,491.45341863254697,491.5433826469412,491.63334666133545,491.7233106757297,491.81327469012393,491.9032387045182,491.9932027189124,492.08316673330665,492.1731307477009,492.26309476209514,492.3530587764894,492.4430227908837,492.5329868052779,492.62295081967216,492.7129148340664,492.80287884846064,492.8928428628549,492.9828068772491,493.07277089164336,493.1627349060376,493.25269892043184,493.3426629348261,493.4326269492203,493.52259096361456,493.6125549780088,493.70251899240304,493.7924830067973,493.8824470211915,493.97241103558576,494.06237504998,494.15233906437425,494.2423030787685,494.3322670931627,494.42223110755697,494.5121951219512,494.60215913634545,494.6921231507397,494.78208716513393,494.87205117952817,494.9620151939224,495.05197920831665,495.1419432227109,495.23190723710513,495.3218712514994,495.4118352658936,495.5017992802879,495.59176329468215,495.6817273090764,495.77169132347063,495.8616553378649,495.9516193522591,496.04158336665336,496.1315473810476,496.22151139544184,496.3114754098361,496.4014394242303,496.49140343862456,496.5813674530188,496.67133146741304,496.7612954818073,496.8512594962015,496.94122351059576,497.03118752499,497.12115153938424,497.2111155537785,497.3010795681727,497.39104358256697,497.4810075969612,497.57097161135545,497.6609356257497,497.7508996401439,497.84086365453817,497.9308276689324,498.02079168332665,498.1107556977209,498.20071971211513,498.29068372650937,498.3806477409036,498.47061175529785,498.56057576969215,498.6505397840864,498.74050379848063,498.8304678128749,498.9204318272691,499.01039584166335,499.1003598560576,499.19032387045183,499.2802878848461,499.3702518992403,499.46021591363456,499.5501799280288,499.64014394242304,499.7301079568173,499.8200719712115,499.91003598560576,500.0]}

},{}],108:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var rcbrtf = require( './../lib' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var veryLargeNegative = require( './fixtures/julia/very_large_negative.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var tinyNegative = require( './fixtures/julia/tiny_negative.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof rcbrtf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[50,500]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[20,50]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[3,20]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.8,3]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.0,0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[1e-30,1e-38]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of subnormal `x`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge positive)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge negative)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = hugeNegative.expected;
	x = hugeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-50,-500]', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = veryLargeNegative.expected;
	x = veryLargeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-50]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = largeNegative.expected;
	x = largeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-3]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = mediumNegative.expected;
	x = mediumNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-3,-0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smallNegative.expected;
	x = smallNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-0.8,0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-1e-30,-1e-38]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = tinyNegative.expected;
	x = tinyNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = rcbrtf( NaN );
	t.equal( isnanf( v ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', function test( t ) {
	var v = rcbrtf( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', function test( t ) {
	var v = rcbrtf( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', function test( t ) {
	var v = rcbrtf( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', function test( t ) {
	var v = rcbrtf( NINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rcbrtf/test/test.js")
},{"./../lib":92,"./fixtures/julia/huge_negative.json":94,"./fixtures/julia/huge_positive.json":95,"./fixtures/julia/large_negative.json":96,"./fixtures/julia/large_positive.json":97,"./fixtures/julia/medium_negative.json":98,"./fixtures/julia/medium_positive.json":99,"./fixtures/julia/small_negative.json":100,"./fixtures/julia/small_positive.json":101,"./fixtures/julia/smaller.json":102,"./fixtures/julia/subnormal.json":103,"./fixtures/julia/tiny_negative.json":104,"./fixtures/julia/tiny_positive.json":105,"./fixtures/julia/very_large_negative.json":106,"./fixtures/julia/very_large_positive.json":107,"@stdlib/constants/float32/eps":70,"@stdlib/constants/float32/ninf":71,"@stdlib/constants/float32/pinf":72,"@stdlib/math/base/assert/is-nanf":85,"@stdlib/math/base/special/abs":87,"@stdlib/number/float64/base/to-float32":121,"tape":305}],109:[function(require,module,exports){
(function (__filename,__dirname){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var tryRequire = require( '@stdlib/utils/try-require' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var veryLargeNegative = require( './fixtures/julia/very_large_negative.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var tinyNegative = require( './fixtures/julia/tiny_negative.json' );


// VARIABLES //

var rcbrtf = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( rcbrtf instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof rcbrtf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[50,500]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[20,50]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[3,20]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.8,3]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.0,0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[1e-30,1e-38]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of subnormal `x`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge positive)', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge negative)', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = hugeNegative.expected;
	x = hugeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-50,-500]', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = veryLargeNegative.expected;
	x = veryLargeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-50]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = largeNegative.expected;
	x = largeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-3]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = mediumNegative.expected;
	x = mediumNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-3,-0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smallNegative.expected;
	x = smallNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-0.8,0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-1e-30,-1e-38]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;
	var e;

	expected = tinyNegative.expected;
	x = tinyNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrtf( x[ i ] );
		e = float64ToFloat32( expected[ i ] );
		if ( y === e ) {
			t.equal( y, e, 'x: '+x[ i ]+', y: '+y+', expected: '+e );
		} else {
			delta = abs( y - e );
			tol = EPS * abs( e );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+e+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', opts, function test( t ) {
	var v = rcbrtf( NaN );
	t.equal( isnanf( v ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', opts, function test( t ) {
	var v = rcbrtf( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', opts, function test( t ) {
	var v = rcbrtf( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', opts, function test( t ) {
	var v = rcbrtf( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', opts, function test( t ) {
	var v = rcbrtf( NINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rcbrtf/test/test.native.js","/lib/node_modules/@stdlib/math/base/special/rcbrtf/test")
},{"./fixtures/julia/huge_negative.json":94,"./fixtures/julia/huge_positive.json":95,"./fixtures/julia/large_negative.json":96,"./fixtures/julia/large_positive.json":97,"./fixtures/julia/medium_negative.json":98,"./fixtures/julia/medium_positive.json":99,"./fixtures/julia/small_negative.json":100,"./fixtures/julia/small_positive.json":101,"./fixtures/julia/smaller.json":102,"./fixtures/julia/subnormal.json":103,"./fixtures/julia/tiny_negative.json":104,"./fixtures/julia/tiny_positive.json":105,"./fixtures/julia/very_large_negative.json":106,"./fixtures/julia/very_large_positive.json":107,"@stdlib/constants/float32/eps":70,"@stdlib/constants/float32/ninf":71,"@stdlib/constants/float32/pinf":72,"@stdlib/math/base/assert/is-nanf":85,"@stdlib/math/base/special/abs":87,"@stdlib/number/float64/base/to-float32":121,"@stdlib/utils/try-require":173,"path":187,"tape":305}],110:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":111}],111:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],112:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":114}],113:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":56}],114:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":113,"@stdlib/array/float64":4,"@stdlib/array/uint32":10}],115:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":56}],116:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":117}],117:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":115,"@stdlib/array/float64":4,"@stdlib/array/uint32":10}],118:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":56,"dup":115}],119:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":120}],120:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setHighWord;

},{"./high.js":118,"@stdlib/array/float64":4,"@stdlib/array/uint32":10}],121:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Convert a double-precision floating-point number to the nearest single-precision floating-point number.
*
* @module @stdlib/number/float64/base/to-float32
*
* @example
* var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
*
* var y = float64ToFloat32( 1.337 );
* // returns 1.3370000123977661
*/

// MODULES //

var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var float64ToFloat32;
if ( typeof builtin === 'function' ) {
	float64ToFloat32 = builtin;
} else {
	float64ToFloat32 = polyfill;
}


// EXPORTS //

module.exports = float64ToFloat32;

},{"./main.js":122,"./polyfill.js":123}],122:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var fround = ( typeof Math.fround === 'function' ) ? Math.fround : null; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = fround;

},{}],123:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Float32Array = require( '@stdlib/array/float32' );


// VARIABLES //

var FLOAT32_VIEW = new Float32Array( 1 );


// MAIN //

/**
* Converts a double-precision floating-point number to the nearest single-precision floating-point number.
*
* @param {number} x - double-precision floating-point number
* @returns {number} nearest single-precision floating-point number
*
* @example
* var y = float64ToFloat32( 1.337 );
* // returns 1.3370000123977661
*/
function float64ToFloat32( x ) {
	FLOAT32_VIEW[ 0 ] = x;
	return FLOAT32_VIEW[ 0 ];
}


// EXPORTS //

module.exports = float64ToFloat32;

},{"@stdlib/array/float32":1}],124:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @private
* @param {number} x - input value
* @param {Collection} out - output array
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array index offset
* @returns {Collection} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( 3.14e201, out, 1, 0 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( x, out, stride, offset ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ offset ] = UINT32_VIEW[ HIGH ];
	out[ offset + stride ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":126,"@stdlib/array/float64":4,"@stdlib/array/uint32":10}],125:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords.assign( 3.14e201, out, 1, 0 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var assign = require( './assign.js' );


// MAIN //

setReadOnly( main, 'assign', assign );


// EXPORTS //

module.exports = main;

},{"./assign.js":124,"./main.js":127,"@stdlib/utils/define-nonenumerable-read-only-property":150}],126:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":56,"dup":113}],127:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './assign.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {number} x - input value
* @returns {Array<number>} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	return fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );
}


// EXPORTS //

module.exports = toWords;

},{"./assign.js":124}],128:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Object constructor.
*
* @module @stdlib/object/ctor
*
* @example
* var Object = require( '@stdlib/object/ctor' );
*
* var o = new Object( null );
* // returns {}
*
* o = new Object( 5.0 );
* // returns <Number>
*
* o = new Object( 'beep' );
* // returns <String>
*
* var o1 = {};
*
* var o2 = new Object( o1 );
* // returns {}
*
* var bool = ( o1 === o2 );
* // returns true
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":129}],129:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an object.
*
* @name Object
* @constructor
* @type {Function}
* @param {*} value - input value
* @returns {Object} object
*
* @example
* var o = new Object( null );
* // returns {}
*
* @example
* var o = new Object( 5.0 );
* // returns <Number>
*
* @example
* var o = new Object( 'beep' );
* // returns <String>
*
* @example
* var o1 = {};
*
* var o2 = new Object( o1 );
* // returns {}
*
* var bool = ( o1 === o2 );
* // returns true
*/
var Obj = Object; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Obj;

},{}],130:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
*
* @example
* var reFunctionName = require( '@stdlib/regexp/function-name' );
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var REGEXP = require( './regexp.js' );


// MAIN //

setReadOnly( main, 'REGEXP', REGEXP );


// EXPORTS //

module.exports = main;

},{"./main.js":131,"./regexp.js":132,"@stdlib/utils/define-nonenumerable-read-only-property":150}],131:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @returns {RegExp} regular expression
*
* @example
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/
function reFunctionName() {
	return /^\s*function\s*([^(]*)/i;
}


// EXPORTS //

module.exports = reFunctionName;

},{}],132:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var reFunctionName = require( './main.js' );


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = reFunctionName();


// EXPORTS //

module.exports = RE_FUNCTION_NAME;

},{"./main.js":131}],133:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( './is_number.js' );

// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
var abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math
var lowercase = String.prototype.toLowerCase;
var uppercase = String.prototype.toUpperCase;
var replace = String.prototype.replace;


// VARIABLES //

var RE_EXP_POS_DIGITS = /e\+(\d)$/;
var RE_EXP_NEG_DIGITS = /e-(\d)$/;
var RE_ONLY_DIGITS = /^(\d+)$/;
var RE_DIGITS_BEFORE_EXP = /^(\d+)e/;
var RE_TRAILING_PERIOD_ZERO = /\.0$/;
var RE_PERIOD_ZERO_EXP = /\.0*e/;
var RE_ZERO_BEFORE_EXP = /(\..*[^0])0*e/;


// MAIN //

/**
* Formats a token object argument as a floating-point number.
*
* @private
* @param {Object} token - token object
* @throws {Error} must provide a valid floating-point number
* @returns {string} formatted token argument
*/
function formatDouble( token ) {
	var digits;
	var out;
	var f = parseFloat( token.arg );
	if ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
		if ( !isNumber( token.arg ) ) {
			throw new Error( 'invalid floating-point number. Value: ' + out );
		}
		// Case: NaN, Infinity, or -Infinity
		f = token.arg;
	}
	switch ( token.specifier ) {
	case 'e':
	case 'E':
		out = f.toExponential( token.precision );
		break;
	case 'f':
	case 'F':
		out = f.toFixed( token.precision );
		break;
	case 'g':
	case 'G':
		if ( abs( f ) < 0.0001 ) {
			digits = token.precision;
			if ( digits > 0 ) {
				digits -= 1;
			}
			out = f.toExponential( digits );
		} else {
			out = f.toPrecision( token.precision );
		}
		if ( !token.alternate ) {
			out = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );
			out = replace.call( out, RE_PERIOD_ZERO_EXP, 'e' );
			out = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );
		}
		break;
	default:
		throw new Error( 'invalid double notation. Value: ' + token.specifier );
	}
	out = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );
	out = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );
	if ( token.alternate ) {
		out = replace.call( out, RE_ONLY_DIGITS, '$1.' );
		out = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );
	}
	if ( f >= 0 && token.sign ) {
		out = token.sign + out;
	}
	out = ( token.specifier === uppercase.call( token.specifier ) ) ?
		uppercase.call( out ) :
		lowercase.call( out );
	return out;
}


// EXPORTS //

module.exports = formatDouble;

},{"./is_number.js":136}],134:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( './is_number.js' );
var zeroPad = require( './zero_pad.js' );

// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
var lowercase = String.prototype.toLowerCase;
var uppercase = String.prototype.toUpperCase;


// MAIN //

/**
* Formats a token object argument as an integer.
*
* @private
* @param {Object} token - token object
* @throws {Error} must provide a valid integer
* @returns {string} formatted token argument
*/
function formatInteger( token ) {
	var base;
	var out;
	var i;

	switch ( token.specifier ) {
	case 'b':
		// Case: %b (binary)
		base = 2;
		break;
	case 'o':
		// Case: %o (octal)
		base = 8;
		break;
	case 'x':
	case 'X':
		// Case: %x, %X (hexadecimal)
		base = 16;
		break;
	case 'd':
	case 'i':
	case 'u':
	default:
		// Case: %d, %i, %u (decimal)
		base = 10;
		break;
	}
	out = token.arg;
	i = parseInt( out, 10 );
	if ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
		if ( !isNumber( out ) ) {
			throw new Error( 'invalid integer. Value: ' + out );
		}
		i = 0;
	}
	if ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {
		i = 0xffffffff + i + 1;
	}
	if ( i < 0 ) {
		out = ( -i ).toString( base );
		if ( token.precision ) {
			out = zeroPad( out, token.precision, token.padRight );
		}
		out = '-' + out;
	} else {
		out = i.toString( base );
		if ( !i && !token.precision ) {
			out = '';
		} else if ( token.precision ) {
			out = zeroPad( out, token.precision, token.padRight );
		}
		if ( token.sign ) {
			out = token.sign + out;
		}
	}
	if ( base === 16 ) {
		if ( token.alternate ) {
			out = '0x' + out;
		}
		out = ( token.specifier === uppercase.call( token.specifier ) ) ?
			uppercase.call( out ) :
			lowercase.call( out );
	}
	if ( base === 8 ) {
		if ( token.alternate && out.charAt( 0 ) !== '0' ) {
			out = '0' + out;
		}
	}
	return out;
}


// EXPORTS //

module.exports = formatInteger;

},{"./is_number.js":136,"./zero_pad.js":140}],135:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Generate string from a token array by interpolating values.
*
* @module @stdlib/string/base/format-interpolate
*
* @example
* var formatInterpolate = require( '@stdlib/string/base/format-interpolate' );
*
* var tokens = ['Hello ', { 'specifier': 's' }, '!' ];
* var out = formatInterpolate( tokens, 'World' );
* // returns 'Hello World!'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":138}],136:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.
}


// EXPORTS //

module.exports = isNumber;

},{}],137:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string primitive
*
* @example
* var bool = isString( 'beep' );
* // returns true
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns false
*/
function isString( value ) {
	return ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.
}


// EXPORTS //

module.exports = isString;

},{}],138:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var formatInteger = require( './format_integer.js' );
var isString = require( './is_string.js' );
var formatDouble = require( './format_double.js' );
var spacePad = require( './space_pad.js' );
var zeroPad = require( './zero_pad.js' );


// VARIABLES //

var fromCharCode = String.fromCharCode;
var isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.


// FUNCTIONS //

/**
* Returns a boolean indicating whether a value is `NaN`.
*
* @private
* @param {*} value - input value
* @returns {boolean} boolean indicating whether a value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 4 );
* // returns false
*/
function isnan( value ) { // explicitly define a function here instead of `@stdlib/math/base/assert/is-nan` in order to avoid circular dependencies
	return ( value !== value );
}

/**
* Initializes token object with properties of supplied format identifier object or default values if not present.
*
* @private
* @param {Object} token - format identifier object
* @returns {Object} token object
*/
function initialize( token ) {
	var out = {};
	out.specifier = token.specifier;
	out.precision = ( token.precision === void 0 ) ? 1 : token.precision;
	out.width = token.width;
	out.flags = token.flags || '';
	out.mapping = token.mapping;
	return out;
}


// MAIN //

/**
* Generates string from a token array by interpolating values.
*
* @param {Array} tokens - string parts and format identifier objects
* @param {Array} ...args - variable values
* @throws {TypeError} first argument must be an array
* @throws {Error} invalid flags
* @returns {string} formatted string
*
* @example
* var tokens = [ 'beep ', { 'specifier': 's' } ];
* var out = formatInterpolate( tokens, 'boop' );
* // returns 'beep boop'
*/
function formatInterpolate( tokens ) {
	var hasPeriod;
	var flags;
	var token;
	var flag;
	var num;
	var out;
	var pos;
	var i;
	var j;

	if ( !isArray( tokens ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );
	}
	out = '';
	pos = 1;
	for ( i = 0; i < tokens.length; i++ ) {
		token = tokens[ i ];
		if ( isString( token ) ) {
			out += token;
		} else {
			hasPeriod = token.precision !== void 0;
			token = initialize( token );
			if ( !token.specifier ) {
				throw new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );
			}
			if ( token.mapping ) {
				pos = token.mapping;
			}
			flags = token.flags;
			for ( j = 0; j < flags.length; j++ ) {
				flag = flags.charAt( j );
				switch ( flag ) {
				case ' ':
					token.sign = ' ';
					break;
				case '+':
					token.sign = '+';
					break;
				case '-':
					token.padRight = true;
					token.padZeros = false;
					break;
				case '0':
					token.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.
					break;
				case '#':
					token.alternate = true;
					break;
				default:
					throw new Error( 'invalid flag: ' + flag );
				}
			}
			if ( token.width === '*' ) {
				token.width = parseInt( arguments[ pos ], 10 );
				pos += 1;
				if ( isnan( token.width ) ) {
					throw new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );
				}
				if ( token.width < 0 ) {
					token.padRight = true;
					token.width = -token.width;
				}
			}
			if ( hasPeriod ) {
				if ( token.precision === '*' ) {
					token.precision = parseInt( arguments[ pos ], 10 );
					pos += 1;
					if ( isnan( token.precision ) ) {
						throw new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );
					}
					if ( token.precision < 0 ) {
						token.precision = 1;
						hasPeriod = false;
					}
				}
			}
			token.arg = arguments[ pos ];
			switch ( token.specifier ) {
			case 'b':
			case 'o':
			case 'x':
			case 'X':
			case 'd':
			case 'i':
			case 'u':
				// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)
				if ( hasPeriod ) {
					token.padZeros = false;
				}
				token.arg = formatInteger( token );
				break;
			case 's':
				// Case: %s (string)
				token.maxWidth = ( hasPeriod ) ? token.precision : -1;
				token.arg = String( token.arg );
				break;
			case 'c':
				// Case: %c (character)
				if ( !isnan( token.arg ) ) {
					num = parseInt( token.arg, 10 );
					if ( num < 0 || num > 127 ) {
						throw new Error( 'invalid character code. Value: ' + token.arg );
					}
					token.arg = ( isnan( num ) ) ? String( token.arg ) : fromCharCode( num ); // eslint-disable-line max-len
				}
				break;
			case 'e':
			case 'E':
			case 'f':
			case 'F':
			case 'g':
			case 'G':
				// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)
				if ( !hasPeriod ) {
					token.precision = 6;
				}
				token.arg = formatDouble( token );
				break;
			default:
				throw new Error( 'invalid specifier: ' + token.specifier );
			}
			// Fit argument into field width...
			if ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {
				token.arg = token.arg.substring( 0, token.maxWidth );
			}
			if ( token.padZeros ) {
				token.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len
			} else if ( token.width ) {
				token.arg = spacePad( token.arg, token.width, token.padRight );
			}
			out += token.arg || '';
			pos += 1;
		}
	}
	return out;
}


// EXPORTS //

module.exports = formatInterpolate;

},{"./format_double.js":133,"./format_integer.js":134,"./is_string.js":137,"./space_pad.js":139,"./zero_pad.js":140}],139:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

/**
* Returns `n` spaces.
*
* @private
* @param {number} n - number of spaces
* @returns {string} string of spaces
*/
function spaces( n ) {
	var out = '';
	var i;
	for ( i = 0; i < n; i++ ) {
		out += ' ';
	}
	return out;
}


// MAIN //

/**
* Pads a token with spaces to the specified width.
*
* @private
* @param {string} str - token argument
* @param {number} width - token width
* @param {boolean} [right=false] - boolean indicating whether to pad to the right
* @returns {string} padded token argument
*/
function spacePad( str, width, right ) {
	var pad = width - str.length;
	if ( pad < 0 ) {
		return str;
	}
	str = ( right ) ?
		str + spaces( pad ) :
		spaces( pad ) + str;
	return str;
}


// EXPORTS //

module.exports = spacePad;

},{}],140:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

/**
* Tests if a string starts with a minus sign (`-`).
*
* @private
* @param {string} str - input string
* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)
*/
function startsWithMinus( str ) {
	return str[ 0 ] === '-';
}

/**
* Returns a string of `n` zeros.
*
* @private
* @param {number} n - number of zeros
* @returns {string} string of zeros
*/
function zeros( n ) {
	var out = '';
	var i;
	for ( i = 0; i < n; i++ ) {
		out += '0';
	}
	return out;
}


// MAIN //

/**
* Pads a token with zeros to the specified width.
*
* @private
* @param {string} str - token argument
* @param {number} width - token width
* @param {boolean} [right=false] - boolean indicating whether to pad to the right
* @returns {string} padded token argument
*/
function zeroPad( str, width, right ) {
	var negative = false;
	var pad = width - str.length;
	if ( pad < 0 ) {
		return str;
	}
	if ( startsWithMinus( str ) ) {
		negative = true;
		str = str.substr( 1 );
	}
	str = ( right ) ?
		str + zeros( pad ) :
		zeros( pad ) + str;
	if ( negative ) {
		str = '-' + str;
	}
	return str;
}


// EXPORTS //

module.exports = zeroPad;

},{}],141:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tokenize a string into an array of string parts and format identifier objects.
*
* @module @stdlib/string/base/format-tokenize
*
* @example
* var formatTokenize = require( '@stdlib/string/base/format-tokenize' );
*
* var str = 'Hello %s!';
* var tokens = formatTokenize( str );
* // returns [ 'Hello ', {...}, '!' ]
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":142}],142:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var RE = /%(?:([1-9]\d*)\$)?([0 +\-#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([%A-Za-z])/g;


// FUNCTIONS //

/**
* Parses a delimiter.
*
* @private
* @param {Array} match - regular expression match
* @returns {Object} delimiter token object
*/
function parse( match ) {
	var token = {
		'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,
		'flags': match[ 2 ],
		'width': match[ 3 ],
		'precision': match[ 5 ],
		'specifier': match[ 6 ]
	};
	if ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {
		token.precision = '1';
	}
	return token;
}


// MAIN //

/**
* Tokenizes a string into an array of string parts and format identifier objects.
*
* @param {string} str - input string
* @returns {Array} tokens
*
* @example
* var tokens = formatTokenize( 'Hello %s!' );
* // returns [ 'Hello ', {...}, '!' ]
*/
function formatTokenize( str ) {
	var content;
	var tokens;
	var match;
	var prev;

	tokens = [];
	prev = 0;
	match = RE.exec( str );
	while ( match ) {
		content = str.slice( prev, RE.lastIndex - match[ 0 ].length );
		if ( content.length ) {
			tokens.push( content );
		}
		tokens.push( parse( match ) );
		prev = RE.lastIndex;
		match = RE.exec( str );
	}
	content = str.slice( prev );
	if ( content.length ) {
		tokens.push( content );
	}
	return tokens;
}


// EXPORTS //

module.exports = formatTokenize;

},{}],143:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Insert supplied variable values into a format string.
*
* @module @stdlib/string/format
*
* @example
* var format = require( '@stdlib/string/format' );
*
* var out = format( '%s %s!', 'Hello', 'World' );
* // returns 'Hello World!'
*
* out = format( 'Pi: ~%.2f', 3.141592653589793 );
* // returns 'Pi: ~3.14'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":145}],144:[function(require,module,exports){
arguments[4][137][0].apply(exports,arguments)
},{"dup":137}],145:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var interpolate = require( '@stdlib/string/base/format-interpolate' );
var tokenize = require( '@stdlib/string/base/format-tokenize' );
var isString = require( './is_string.js' );


// MAIN //

/**
* Inserts supplied variable values into a format string.
*
* @param {string} str - input string
* @param {Array} ...args - variable values
* @throws {TypeError} first argument must be a string
* @throws {Error} invalid flags
* @returns {string} formatted string
*
* @example
* var str = format( 'Hello %s!', 'world' );
* // returns 'Hello world!'
*
* @example
* var str = format( 'Pi: ~%.2f', 3.141592653589793 );
* // returns 'Pi: ~3.14'
*/
function format( str ) {
	var args;
	var i;

	if ( !isString( str ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );
	}
	args = [ tokenize( str ) ];
	for ( i = 1; i < arguments.length; i++ ) {
		args.push( arguments[ i ] );
	}
	return interpolate.apply( null, args );
}


// EXPORTS //

module.exports = format;

},{"./is_string.js":144,"@stdlib/string/base/format-interpolate":135,"@stdlib/string/base/format-tokenize":141}],146:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Symbol factory.
*
* @module @stdlib/symbol/ctor
*
* @example
* var Symbol = require( '@stdlib/symbol/ctor' );
*
* var s = Symbol( 'beep' );
* // returns <symbol>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":147}],147:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Sym;

},{}],148:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":149}],149:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var RE = require( '@stdlib/regexp/function-name' ).REGEXP;
var isBuffer = require( '@stdlib/assert/is-buffer' );


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/
function constructorName( v ) {
	var match;
	var name;
	var ctor;
	name = nativeClass( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		match = RE.exec( ctor.toString() );
		if ( match ) {
			return match[ 1 ];
		}
	}
	if ( isBuffer( v ) ) {
		return 'Buffer';
	}
	return name;
}


// EXPORTS //

module.exports = constructorName;

},{"@stdlib/assert/is-buffer":45,"@stdlib/regexp/function-name":130,"@stdlib/utils/native-class":168}],150:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":151}],151:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	defineProperty( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

module.exports = setNonEnumerableReadOnly;

},{"@stdlib/utils/define-property":155}],152:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var defineProperty = Object.defineProperty;


// EXPORTS //

module.exports = defineProperty;

},{}],153:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

module.exports = main;

},{}],154:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( './define_property.js' );


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @private
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	// Test basic support...
	try {
		defineProperty( {}, 'x', {} );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = hasDefinePropertySupport;

},{"./define_property.js":153}],155:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var hasDefinePropertySupport = require( './has_define_property_support.js' );
var builtin = require( './builtin.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var defineProperty;
if ( hasDefinePropertySupport() ) {
	defineProperty = builtin;
} else {
	defineProperty = polyfill;
}


// EXPORTS //

module.exports = defineProperty;

},{"./builtin.js":152,"./has_define_property_support.js":154,"./polyfill.js":156}],156:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// MODULES //

var format = require( '@stdlib/string/format' );


// VARIABLES //

var objectProtoype = Object.prototype;
var toStr = objectProtoype.toString;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function defineProperty( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {
		throw new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );
	}
	if ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {
		throw new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );
	}
	hasValue = ( 'value' in descriptor );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = ( 'get' in descriptor );
	hasSet = ( 'set' in descriptor );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

module.exports = defineProperty;

},{"@stdlib/string/format":143}],157:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var builtin = require( './native.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var getProto;
if ( isFunction( Object.getPrototypeOf ) ) {
	getProto = builtin;
} else {
	getProto = polyfill;
}


// EXPORTS //

module.exports = getProto;

},{"./native.js":160,"./polyfill.js":161,"@stdlib/assert/is-function":53}],158:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":159}],159:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Object = require( '@stdlib/object/ctor' );
var getProto = require( './detect.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/
function getPrototypeOf( value ) {
	if (
		value === null ||
		value === void 0
	) {
		return null;
	}
	// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
	value = Object( value );

	return getProto( value );
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./detect.js":157,"@stdlib/object/ctor":128}],160:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var getProto = Object.getPrototypeOf;


// EXPORTS //

module.exports = getProto;

},{}],161:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var getProto = require( './proto.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/
function getPrototypeOf( obj ) {
	var proto = getProto( obj );
	if ( proto || proto === null ) {
		return proto;
	}
	if ( nativeClass( obj.constructor ) === '[object Function]' ) {
		// May break if the constructor has been tampered with...
		return obj.constructor.prototype;
	}
	if ( obj instanceof Object ) {
		return Object.prototype;
	}
	// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
	return null;
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./proto.js":162,"@stdlib/utils/native-class":168}],162:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/
function getProto( obj ) {
	// eslint-disable-next-line no-proto
	return obj.__proto__;
}


// EXPORTS //

module.exports = getProto;

},{}],163:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var getThis = require( './codegen.js' );
var Self = require( './self.js' );
var Win = require( './window.js' );
var GlobalThis = require( './global_this.js' );


// MAIN //

/**
* Returns the global object.
*
* ## Notes
*
* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
*
* @private
* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
* @throws {TypeError} must provide a boolean
* @throws {Error} unable to resolve global object
* @returns {Object} global object
*
* @example
* var g = getGlobal();
* // returns {...}
*/
function getGlobal( codegen ) {
	if ( arguments.length ) {
		if ( !isBoolean( codegen ) ) {
			throw new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );
		}
		if ( codegen ) {
			return getThis();
		}
		// Fall through...
	}
	// Case: 2020 revision of ECMAScript standard
	if ( GlobalThis ) {
		return GlobalThis;
	}
	// Case: browsers and web workers
	if ( Self ) {
		return Self;
	}
	// Case: browsers
	if ( Win ) {
		return Win;
	}
	// Case: unknown
	throw new Error( 'unexpected error. Unable to resolve global object.' );
}


// EXPORTS //

module.exports = getGlobal;

},{"./codegen.js":164,"./global_this.js":165,"./self.js":166,"./window.js":167,"@stdlib/assert/is-boolean":39,"@stdlib/string/format":143}],164:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the global object using code generation.
*
* @private
* @returns {Object} global object
*/
function getGlobal() {
	return new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals
}


// EXPORTS //

module.exports = getGlobal;

},{}],165:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef


// EXPORTS //

module.exports = obj;

},{}],166:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof self === 'object' ) ? self : null;


// EXPORTS //

module.exports = obj;

},{}],167:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof window === 'object' ) ? window : null;


// EXPORTS //

module.exports = obj;

},{}],168:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var main;
if ( hasToStringTag() ) {
	main = polyfill;
} else {
	main = builtin;
}


// EXPORTS //

module.exports = main;

},{"./main.js":169,"./polyfill.js":170,"@stdlib/assert/has-tostringtag-support":26}],169:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":171}],170:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":171,"./tostringtag.js":172,"@stdlib/assert/has-own-property":22}],171:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],172:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Symbol = require( '@stdlib/symbol/ctor' );


// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{"@stdlib/symbol/ctor":146}],173:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Wrap `require` in a try/catch block.
*
* @module @stdlib/utils/try-require
*
* @example
* var tryRequire = require( '@stdlib/utils/try-require' );
*
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.log( out.message );
* }
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":174}],174:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isError = require( '@stdlib/assert/is-error' );


// MAIN //

/**
* Wraps `require` in a try/catch block.
*
* @param {string} id - module id
* @returns {*|Error} `module.exports` of the resolved module or an error
*
* @example
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.error( out.message );
* }
*/
function tryRequire( id ) {
	try {
		return require( id ); // eslint-disable-line stdlib/no-dynamic-require
	} catch ( error ) {
		if ( isError( error ) ) {
			return error;
		}
		// Handle case where a literal is thrown...
		if ( typeof error === 'object' ) {
			return new Error( JSON.stringify( error ) );
		}
		return new Error( error.toString() );
	}
}


// EXPORTS //

module.exports = tryRequire;

},{"@stdlib/assert/is-error":47}],175:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var RE = require( './fixtures/re.js' );
var nodeList = require( './fixtures/nodelist.js' );
var typedarray = require( './fixtures/typedarray.js' );


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof RE === 'function' ||

		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof typedarray === 'object' ||

		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof nodeList === 'function'
	) {
		return true;
	}
	return false;
}


// EXPORTS //

module.exports = check;

},{"./fixtures/nodelist.js":176,"./fixtures/re.js":177,"./fixtures/typedarray.js":178}],176:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getGlobal = require( '@stdlib/utils/global' );


// MAIN //

var root = getGlobal();
var nodeList = root.document && root.document.childNodes;


// EXPORTS //

module.exports = nodeList;

},{"@stdlib/utils/global":163}],177:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var RE = /./;


// EXPORTS //

module.exports = RE;

},{}],178:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var typedarray = Int8Array; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = typedarray;

},{}],179:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

var usePolyfill = require( './check.js' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var main = ( usePolyfill() ) ? polyfill : builtin;


// EXPORTS //

module.exports = main;

},{"./check.js":175,"./main.js":180,"./polyfill.js":181}],180:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return ctorName( v ).toLowerCase();
	}
	return type;
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":148}],181:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	return ctorName( v ).toLowerCase();
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":148}],182:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],183:[function(require,module,exports){

},{}],184:[function(require,module,exports){
arguments[4][183][0].apply(exports,arguments)
},{"dup":183}],185:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":182,"buffer":185,"ieee754":288}],186:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],187:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":295}],188:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":186,"inherits":289,"readable-stream/lib/_stream_duplex.js":190,"readable-stream/lib/_stream_passthrough.js":191,"readable-stream/lib/_stream_readable.js":192,"readable-stream/lib/_stream_transform.js":193,"readable-stream/lib/_stream_writable.js":194,"readable-stream/lib/internal/streams/end-of-stream.js":198,"readable-stream/lib/internal/streams/pipeline.js":200}],189:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],190:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":192,"./_stream_writable":194,"_process":295,"inherits":289}],191:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":193,"inherits":289}],192:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":189,"./_stream_duplex":190,"./internal/streams/async_iterator":195,"./internal/streams/buffer_list":196,"./internal/streams/destroy":197,"./internal/streams/from":199,"./internal/streams/state":201,"./internal/streams/stream":202,"_process":295,"buffer":185,"events":186,"inherits":289,"string_decoder/":304,"util":183}],193:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":189,"./_stream_duplex":190,"inherits":289}],194:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":189,"./_stream_duplex":190,"./internal/streams/destroy":197,"./internal/streams/state":201,"./internal/streams/stream":202,"_process":295,"buffer":185,"inherits":289,"util-deprecate":313}],195:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":198,"_process":295}],196:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":185,"util":183}],197:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":295}],198:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":189}],199:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],200:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":189,"./end-of-stream":198}],201:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":189}],202:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":186}],203:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":204,"get-intrinsic":279}],204:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var setFunctionLength = require('set-function-length');

var $TypeError = require('es-errors/type');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = require('es-define-property');
var $max = GetIntrinsic('%Math.max%');

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"es-define-property":264,"es-errors/type":270,"function-bind":278,"get-intrinsic":279,"set-function-length":299}],205:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":206,"./lib/keys.js":207}],206:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],207:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],208:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

},{"es-define-property":264,"es-errors/syntax":269,"es-errors/type":270,"gopd":280}],209:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require('define-data-property');

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = require('has-property-descriptors')();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"define-data-property":208,"has-property-descriptors":281,"object-keys":293}],210:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],211:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":242,"./ToPrimitive":244,"./Type":249}],212:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = require('es-errors/type');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (typeof LeftFirst !== 'boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = typeof px === 'string' && typeof py === 'string';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":257,"../helpers/isNaN":258,"../helpers/isPrefixOf":259,"./ToNumber":242,"./ToPrimitive":244,"es-errors/type":270,"get-intrinsic":279}],213:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var callBound = require('call-bind/callBound');

var $charCodeAt = callBound('String.prototype.charCodeAt');
var $toUpperCase = callBound('String.prototype.toUpperCase');

// https://262.ecma-international.org/5.1/#sec-15.10.2.8

module.exports = function Canonicalize(ch, IgnoreCase) {
	if (typeof ch !== 'string' || ch.length !== 1) {
		throw new $TypeError('Assertion failed: `ch` must be a character');
	}

	if (typeof IgnoreCase !== 'boolean') {
		throw new $TypeError('Assertion failed: `IgnoreCase` must be a Boolean');
	}

	if (!IgnoreCase) {
		return ch; // step 1
	}

	var u = $toUpperCase(ch); // step 2

	if (u.length !== 1) {
		return ch; // step 3
	}

	var cu = u; // step 4

	if ($charCodeAt(ch, 0) >= 128 && $charCodeAt(cu, 0) < 128) {
		return ch; // step 5
	}

	return cu;
};

},{"call-bind/callBound":203,"es-errors/type":270}],214:[function(require,module,exports){
'use strict';

var RequireObjectCoercible = require('es-object-atoms/RequireObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value) {
	return RequireObjectCoercible(value, arguments.length > 1 ? arguments[1] : void undefined);
};

},{"es-object-atoms/RequireObjectCoercible":272}],215:[function(require,module,exports){
'use strict';

var $EvalError = require('es-errors/eval');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":218,"./InLeapYear":222,"./MonthFromTime":232,"es-errors/eval":265}],216:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":263,"./floor":253}],217:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":253}],218:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":216,"./DayFromYear":217,"./YearFromTime":251}],219:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":254}],220:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	}
	throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');

};

},{"../helpers/records/property-descriptor":261,"./IsAccessorDescriptor":223,"./IsDataDescriptor":225,"es-errors/type":270}],221:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":263,"./floor":253,"./modulo":254}],222:[function(require,module,exports){
'use strict';

var $EvalError = require('es-errors/eval');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":219,"./YearFromTime":251,"es-errors/eval":265}],223:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!hasOwn(Desc, '[[Get]]') && !hasOwn(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/records/property-descriptor":261,"es-errors/type":270,"hasown":287}],224:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":290}],225:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!hasOwn(Desc, '[[Value]]') && !hasOwn(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/records/property-descriptor":261,"es-errors/type":270,"hasown":287}],226:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');

var isPropertyDescriptor = require('./IsPropertyDescriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"./IsAccessorDescriptor":223,"./IsDataDescriptor":225,"./IsPropertyDescriptor":227,"es-errors/type":270}],227:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor(Desc);
};

},{"../helpers/records/property-descriptor":261}],228:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":257,"../helpers/timeConstants":263}],229:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":257,"./DateFromTime":215,"./Day":216,"./MonthFromTime":232,"./ToInteger":241,"./YearFromTime":251,"./floor":253,"./modulo":254,"get-intrinsic":279}],230:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":257,"../helpers/timeConstants":263,"./ToInteger":241}],231:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":263,"./floor":253,"./modulo":254}],232:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":218,"./InLeapYear":222}],233:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":258}],234:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":263,"./floor":253,"./modulo":254}],235:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":249}],236:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":257,"./ToNumber":242,"./abs":252,"get-intrinsic":279}],237:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":263,"./DayFromYear":217}],238:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":263,"./modulo":254}],239:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],240:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":242}],241:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":257,"../helpers/isNaN":258,"../helpers/sign":262,"./ToNumber":242,"./abs":252,"./floor":253}],242:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

var callBound = require('call-bind/callBound');

var $replace = callBound('String.prototype.replace');

var safeRegexTester = require('safe-regex-test');

var isNonDecimal = safeRegexTester(/^0[ob]|^[+-]0x/);

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	var trimmed = $replace(
		prim,
		// eslint-disable-next-line no-control-regex
		/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g,
		''
	);
	if (isNonDecimal(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":244,"call-bind/callBound":203,"safe-regex-test":298}],243:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = require('es-object-atoms/ToObject');

},{"es-object-atoms/ToObject":273}],244:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":275}],245:[function(require,module,exports){
'use strict';

var hasOwn = require('hasown');

var $TypeError = require('es-errors/type');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (hasOwn(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (hasOwn(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (hasOwn(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (hasOwn(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (hasOwn(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (hasOwn(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((hasOwn(desc, '[[Get]]') || hasOwn(desc, '[[Set]]')) && (hasOwn(desc, '[[Value]]') || hasOwn(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":224,"./ToBoolean":239,"./Type":249,"es-errors/type":270,"hasown":287}],246:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":279}],247:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":257,"../helpers/isNaN":258,"../helpers/sign":262,"./ToNumber":242,"./abs":252,"./floor":253,"./modulo":254}],248:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":242}],249:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],250:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":216,"./modulo":254}],251:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":203,"get-intrinsic":279}],252:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":279}],253:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],254:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":260}],255:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":263,"./modulo":254}],256:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	Canonicalize: require('./5/Canonicalize'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":211,"./5/AbstractRelationalComparison":212,"./5/Canonicalize":213,"./5/CheckObjectCoercible":214,"./5/DateFromTime":215,"./5/Day":216,"./5/DayFromYear":217,"./5/DayWithinYear":218,"./5/DaysInYear":219,"./5/FromPropertyDescriptor":220,"./5/HourFromTime":221,"./5/InLeapYear":222,"./5/IsAccessorDescriptor":223,"./5/IsCallable":224,"./5/IsDataDescriptor":225,"./5/IsGenericDescriptor":226,"./5/IsPropertyDescriptor":227,"./5/MakeDate":228,"./5/MakeDay":229,"./5/MakeTime":230,"./5/MinFromTime":231,"./5/MonthFromTime":232,"./5/SameValue":233,"./5/SecFromTime":234,"./5/StrictEqualityComparison":235,"./5/TimeClip":236,"./5/TimeFromYear":237,"./5/TimeWithinDay":238,"./5/ToBoolean":239,"./5/ToInt32":240,"./5/ToInteger":241,"./5/ToNumber":242,"./5/ToObject":243,"./5/ToPrimitive":244,"./5/ToPropertyDescriptor":245,"./5/ToString":246,"./5/ToUint16":247,"./5/ToUint32":248,"./5/Type":249,"./5/WeekDay":250,"./5/YearFromTime":251,"./5/abs":252,"./5/floor":253,"./5/modulo":254,"./5/msFromTime":255}],257:[function(require,module,exports){
'use strict';

var $isNaN = require('./isNaN');

module.exports = function (x) { return (typeof x === 'number' || typeof x === 'bigint') && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{"./isNaN":258}],258:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],259:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":203}],260:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],261:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var allowed = {
	__proto__: null,
	'[[Configurable]]': true,
	'[[Enumerable]]': true,
	'[[Get]]': true,
	'[[Set]]': true,
	'[[Value]]': true,
	'[[Writable]]': true
};

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function isPropertyDescriptor(Desc) {
	if (!Desc || typeof Desc !== 'object') {
		return false;
	}

	for (var key in Desc) { // eslint-disable-line
		if (hasOwn(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	var isData = hasOwn(Desc, '[[Value]]') || hasOwn(Desc, '[[Writable]]');
	var IsAccessor = hasOwn(Desc, '[[Get]]') || hasOwn(Desc, '[[Set]]');
	if (isData && IsAccessor) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"es-errors/type":270,"hasown":287}],262:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],263:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],264:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;

},{"get-intrinsic":279}],265:[function(require,module,exports){
'use strict';

/** @type {import('./eval')} */
module.exports = EvalError;

},{}],266:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Error;

},{}],267:[function(require,module,exports){
'use strict';

/** @type {import('./range')} */
module.exports = RangeError;

},{}],268:[function(require,module,exports){
'use strict';

/** @type {import('./ref')} */
module.exports = ReferenceError;

},{}],269:[function(require,module,exports){
'use strict';

/** @type {import('./syntax')} */
module.exports = SyntaxError;

},{}],270:[function(require,module,exports){
'use strict';

/** @type {import('./type')} */
module.exports = TypeError;

},{}],271:[function(require,module,exports){
'use strict';

/** @type {import('./uri')} */
module.exports = URIError;

},{}],272:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

/** @type {import('./RequireObjectCoercible')} */
module.exports = function RequireObjectCoercible(value) {
	if (value == null) {
		throw new $TypeError((arguments.length > 0 && arguments[1]) || ('Cannot call method on ' + value));
	}
	return value;
};

},{"es-errors/type":270}],273:[function(require,module,exports){
'use strict';

var $Object = require('./');
var RequireObjectCoercible = require('./RequireObjectCoercible');

/** @type {import('./ToObject')} */
module.exports = function ToObject(value) {
	RequireObjectCoercible(value);
	return $Object(value);
};

},{"./":274,"./RequireObjectCoercible":272}],274:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Object;

},{}],275:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":276,"is-callable":290}],276:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],277:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],278:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":277}],279:[function(require,module,exports){
'use strict';

var undefined;

var $Error = require('es-errors');
var $EvalError = require('es-errors/eval');
var $RangeError = require('es-errors/range');
var $ReferenceError = require('es-errors/ref');
var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');
var $URIError = require('es-errors/uri');

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();
var hasProto = require('has-proto')();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('hasown');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"es-errors":266,"es-errors/eval":265,"es-errors/range":267,"es-errors/ref":268,"es-errors/syntax":269,"es-errors/type":270,"es-errors/uri":271,"function-bind":278,"has-proto":282,"has-symbols":283,"hasown":287}],280:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":279}],281:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;

},{"es-define-property":264}],282:[function(require,module,exports){
'use strict';

var test = {
	__proto__: null,
	foo: {}
};

var $Object = Object;

/** @type {import('.')} */
module.exports = function hasProto() {
	// @ts-expect-error: TS errors on an inherited property for some reason
	return { __proto__: test }.foo === test.foo
		&& !(test instanceof $Object);
};

},{}],283:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":284}],284:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],285:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

/** @type {import('.')} */
module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":284}],286:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":278}],287:[function(require,module,exports){
'use strict';

var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require('function-bind');

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);

},{"function-bind":278}],288:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],289:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],290:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

},{}],291:[function(require,module,exports){
'use strict';

var callBound = require('call-bind/callBound');
var hasToStringTag = require('has-tostringtag/shams')();
var has;
var $exec;
var isRegexMarker;
var badStringifier;

if (hasToStringTag) {
	has = callBound('Object.prototype.hasOwnProperty');
	$exec = callBound('RegExp.prototype.exec');
	isRegexMarker = {};

	var throwRegexMarker = function () {
		throw isRegexMarker;
	};
	badStringifier = {
		toString: throwRegexMarker,
		valueOf: throwRegexMarker
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
	}
}

var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';

module.exports = hasToStringTag
	// eslint-disable-next-line consistent-return
	? function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		var descriptor = gOPD(value, 'lastIndex');
		var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}

		try {
			$exec(value, badStringifier);
		} catch (e) {
			return e === isRegexMarker;
		}
	}
	: function isRegex(value) {
		// In older browsers, typeof regex incorrectly returns 'function'
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return $toString(value) === regexClass;
	};

},{"call-bind/callBound":203,"has-tostringtag/shams":285}],292:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":294}],293:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":292,"./isArguments":294}],294:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],295:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],296:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":295,"through":311,"timers":312}],297:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":185}],298:[function(require,module,exports){
'use strict';

var callBound = require('call-bind/callBound');
var isRegex = require('is-regex');

var $exec = callBound('RegExp.prototype.exec');
var $TypeError = require('es-errors/type');

module.exports = function regexTester(regex) {
	if (!isRegex(regex)) {
		throw new $TypeError('`regex` must be a RegExp');
	}
	return function test(s) {
		return $exec(regex, s) !== null;
	};
};

},{"call-bind/callBound":203,"es-errors/type":270,"is-regex":291}],299:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');
var define = require('define-data-property');
var hasDescriptors = require('has-property-descriptors')();
var gOPD = require('gopd');

var $TypeError = require('es-errors/type');
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};

},{"define-data-property":208,"es-errors/type":270,"get-intrinsic":279,"gopd":280,"has-property-descriptors":281}],300:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":256,"function-bind":278}],301:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":300,"./polyfill":302,"./shim":303,"define-properties":209,"function-bind":278}],302:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":300}],303:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":302,"define-properties":209}],304:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":297}],305:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":306,"./lib/results":308,"./lib/test":309,"_process":295,"defined":210,"through":311,"timers":312}],306:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":295,"fs":184,"through":311}],307:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":295,"timers":312}],308:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":295,"events":186,"function-bind":278,"has":286,"inherits":289,"object-inspect":310,"resumer":296,"through":311,"timers":312}],309:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":307,"deep-equal":205,"defined":210,"events":186,"has":286,"inherits":289,"path":187,"string.prototype.trim":301}],310:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],311:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":295,"stream":188}],312:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":295,"timers":312}],313:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[108,109]);
