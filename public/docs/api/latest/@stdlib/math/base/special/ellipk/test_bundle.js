// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './float64array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float64array.js":1,"./polyfill.js":3,"@stdlib/assert/has-float64array-support":14}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './uint16array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":5,"./uint16array.js":6,"@stdlib/assert/has-uint16array-support":22}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":8,"./uint32array.js":9,"@stdlib/assert/has-uint32array-support":25}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './uint8array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":11,"./uint8array.js":12,"@stdlib/assert/has-uint8array-support":28}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":15}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":13,"@stdlib/assert/is-float64array":31}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './main.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./main.js":17}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './main.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./main.js":19}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './main.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":18}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":24,"@stdlib/assert/is-uint16array":36,"@stdlib/constants/uint16/max":47}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":26}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":27,"@stdlib/assert/is-uint32array":38,"@stdlib/constants/uint32/max":48}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":29}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":30,"@stdlib/assert/is-uint8array":40,"@stdlib/constants/uint8/max":49}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":87}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":4,"@stdlib/array/uint8":10}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":35}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":33}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":37}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":87}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":39}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":87}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":41}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":87}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/float64/eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/float64/exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/float64/exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* One half times the mathematical constant `π`.
*
* @module @stdlib/constants/float64/half-pi
* @type {number}
*
* @example
* var HALF_PI = require( '@stdlib/constants/float64/half-pi' );
* // returns 1.5707963267948966
*/


// MAIN //

/**
* One half times the mathematical constant `π`.
*
* @constant
* @type {number}
* @default 1.5707963267948966
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var HALF_PI = 1.5707963267948966;


// EXPORTS //

module.exports = HALF_PI;

},{}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":79}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './main.js' );


// EXPORTS //

module.exports = isnan;

},{"./main.js":51}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './main.js' );


// EXPORTS //

module.exports = abs;

},{"./main.js":53}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the complete elliptic integral of the first kind.
*
* @module @stdlib/math/base/special/ellipk
*
* @example
* var ellipk = require( '@stdlib/math/base/special/ellipk' );
*
* var v = ellipk( 0.5 );
* // returns ~1.854
*
* v = ellipk( -1.0 );
* // returns ~1.311
*
* v = ellipk( 2.0 );
* // returns NaN
*
* v = ellipk( Infinity );
* // returns NaN
*
* v = ellipk( -Infinity );
* // returns NaN
*
* v = ellipk( NaN );
* // returns NaN
*/

// MODULES //

var ellipk = require( './main.js' );


// EXPORTS //

module.exports = ellipk;

},{"./main.js":55}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original Julia code and copyright notice are from the [Julia library]{@link https://github.com/JuliaMath/SpecialFunctions.jl/blob/master/src/ellip.jl}. The implementation has been modified for JavaScript.
*
* ```text
* The MIT License (MIT)
*
* Copyright (c) 2017 Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and others:
*
* https://github.com/JuliaMath/SpecialFunctions.jl/graphs/contributors
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
* ```
*/

'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var ln = require( '@stdlib/math/base/special/ln' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var HALF_PI = require( '@stdlib/constants/float64/half-pi' );
var poly1 = require( './poly_p1.js' );
var poly2 = require( './poly_p2.js' );
var poly3 = require( './poly_p3.js' );
var poly4 = require( './poly_p4.js' );
var poly5 = require( './poly_p5.js' );
var poly6 = require( './poly_p6.js' );
var poly7 = require( './poly_p7.js' );
var poly8 = require( './poly_p8.js' );
var poly9 = require( './poly_p9.js' );
var poly10 = require( './poly_p10.js' );
var poly11 = require( './poly_p11.js' );
var poly12 = require( './poly_p12.js' );


// VARIABLES //

var ONE_DIV_PI = 0.3183098861837907;


// MAIN //

/**
* Computes the complete elliptic integral of the first kind.
*
* ## Method
*
* -   The function computes the complete elliptic integral of the first kind in terms of parameter \\( m \\), instead of the elliptic modulus \\( k \\).
*
*     ```tex
*     K(m) = \int_0^{\pi/2} \frac{1}{\sqrt{1 - m sin^2\theta}} d\theta
*     ```
*
* -   The function uses a piecewise approximation polynomial as given in Fukushima (2009).
*
* -   For \\( m < 0 \\), the implementation follows Fukushima (2015). Namely, we use Equation 17.4.17 from the _Handbook of Mathematical Functions_ (Abramowitz and Stegun) to compute the function for \\( m < 0 \\) in terms of the piecewise polynomial representation of \\( m > 0 )).
*
*     ```tex
*     F(\phi|-m) = (1+m)^(-1/2) K(m/(1+m)) - (1+m)^(-1/2) F(\pi/2-\phi|m/(1+m))
*     ```
*
*     Since \\( K(m) \\) is equivalent to \\( F(\phi|m) \\), the above reduces to
*
*     ```tex
*     F(\phi|-m) = (1+m)^(-1/2) K(m/(1+m))
*     ```
*
* ## References
*
* -   Fukushima, Toshio. 2009. "Fast computation of complete elliptic integrals and Jacobian elliptic functions." _Celestial Mechanics and Dynamical Astronomy_ 105 (4): 305. doi:[10.1007/s10569-009-9228-z](https://doi.org/10.1007/s10569-009-9228-z).
* -   Fukushima, Toshio. 2015. "Precise and fast computation of complete elliptic integrals by piecewise minimax rational function approximation." _Journal of Computational and Applied Mathematics_ 282 (July): 71–76. doi:[10.1016/j.cam.2014.12.038](https://doi.org/10.1016/j.cam.2014.12.038).
*
* @param {number} m - input value
* @returns {number} evaluated elliptic integral
*
* @example
* var v = ellipk( 0.5 );
* // returns ~1.854
*
* v = ellipk( 2.0 );
* // returns NaN
*
* v = ellipk( -1.0 );
* // returns ~1.311
*
* v = ellipk( Infinity );
* // returns NaN
*
* v = ellipk( -Infinity );
* // returns NaN
*
* v = ellipk( NaN );
* // returns NaN
*/
function ellipk( m ) {
	var FLG;
	var kdm;
	var td;
	var qd;
	var t;
	var x;

	x = m;
	if ( m < 0.0 ) {
		x = m / ( m - 1.0 );
		FLG = true;
	}
	if ( x === 0.0 ) {
		return HALF_PI;
	}
	if ( x === 1.0 ) {
		return PINF;
	}
	if ( x > 1.0 ) {
		return NaN;
	}
	if ( x < 0.1 ) {
		t = poly1( x - 0.05 );
	} else if ( x < 0.2 ) {
		t = poly2( x - 0.15 );
	} else if ( x < 0.3 ) {
		t = poly3( x - 0.25 );
	} else if ( x < 0.4 ) {
		t = poly4( x - 0.35 );
	} else if ( x < 0.5 ) {
		t = poly5( x - 0.45 );
	} else if ( x < 0.6 ) {
		t = poly6( x - 0.55 );
	} else if ( x < 0.7 ) {
		t = poly7( x - 0.65 );
	} else if ( x < 0.8 ) {
		t = poly8( x - 0.75 );
	} else if ( x < 0.85 ) {
		t = poly9( x - 0.825 );
	} else if ( x < 0.9 ) {
		t = poly10( x - 0.875 );
	} else {
		td = 1.0 - x;
		qd = poly11( td );
		kdm = poly12( td - 0.05 );
		t = -ln( qd ) * ( kdm * ONE_DIV_PI );
	}
	if ( FLG ) {
		// Complete the transformation mentioned above for m < 0:
		return t / sqrt( 1.0 - m );
	}
	return t;
}


// EXPORTS //

module.exports = ellipk;

},{"./poly_p1.js":56,"./poly_p10.js":57,"./poly_p11.js":58,"./poly_p12.js":59,"./poly_p2.js":60,"./poly_p3.js":61,"./poly_p4.js":62,"./poly_p5.js":63,"./poly_p6.js":64,"./poly_p7.js":65,"./poly_p8.js":66,"./poly_p9.js":67,"@stdlib/constants/float64/half-pi":44,"@stdlib/constants/float64/pinf":46,"@stdlib/math/base/special/ln":73,"@stdlib/math/base/special/sqrt":77}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.5910034537907922;
	}
	return 1.5910034537907922 + (x * (0.41600074399178694 + (x * (0.24579151426410342 + (x * (0.17948148291490615 + (x * (0.14455605708755515 + (x * (0.12320099331242772 + (x * (0.10893881157429353 + (x * (0.09885340987159291 + (x * (0.09143962920174975 + (x * (0.0858425915954139 + (x * 0.08154111871830322))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2.473596173751344;
	}
	return 2.473596173751344 + (x * (3.727624244118099 + (x * (15.607393035549306 + (x * (84.12850842805888 + (x * (506.98181970406137 + (x * (3252.2770581451236 + (x * (21713.242419574344 + (x * (149037.04518909327 + (x * (1043999.3310899908 + (x * (7427974.817042039 + (x * (53503839.67558661 + (x * (389249886.99487084 + (x * (2855288351.1008105 + (x * (21090077038.76684 + (x * (156699833947.7902 + (x * (1170222242422.44 + (x * (8777948323668.9375 + (x * (66101242752484.95 + (x * (499488053713388.8 + (x * 37859743397240296.0))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0;
	}
	return 0.0 + (x * (0.0625 + (x * (0.03125 + (x * (0.0205078125 + (x * (0.01513671875 + (x * (0.011934280395507812 + (x * (0.009816169738769531 + (x * (0.008315593004226685 + (x * (0.007199153304100037 + (x * (0.00633745662344154 + (x * (0.00565311038371874 + (x * (0.005097046040418718 + (x * (0.004636680381850056 + (x * (0.004249547423822886 + (x * 0.003919665602267974))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],59:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"dup":56}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.63525673226458;
	}
	return 1.63525673226458 + (x * (0.4711906261487323 + (x * (0.3097284108314996 + (x * (0.2522083117731357 + (x * (0.22672562321968465 + (x * (0.21577444672958598 + (x * (0.21310877187734892 + (x * (0.21602912460518828 + (x * (0.2232558316330579 + (x * (0.23418050129420992 + (x * (0.24855768297226408 + (x * 0.26636380989261754))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.685750354812596;
	}
	return 1.685750354812596 + (x * (0.5417318486132803 + (x * (0.40152443839069024 + (x * (0.3696424734208891 + (x * (0.37606071535458363 + (x * (0.4052358870851259 + (x * (0.45329438175399905 + (x * (0.5205189476511842 + (x * (0.609426039204995 + (x * (0.7242635222829089 + (x * (0.8710138477098124 + (x * 1.057652872753547))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.7443505972256133;
	}
	return 1.7443505972256133 + (x * (0.6348642753719353 + (x * (0.5398425641644455 + (x * (0.5718927051937874 + (x * (0.6702951362654062 + (x * (0.8325865900109772 + (x * (1.0738574482479333 + (x * (1.4220914606754977 + (x * (1.9203871834023047 + (x * (2.6325525483316543 + (x * (3.6521097473190394 + (x * (5.115867135558866 + (x * 7.224080007363877))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.8138839368169826;
	}
	return 1.8138839368169826 + (x * (0.7631632457005573 + (x * (0.7619286053215958 + (x * (0.9510746536684279 + (x * (1.315180671703161 + (x * (1.9285606934774109 + (x * (2.9375093425313787 + (x * (4.594894405442878 + (x * (7.33007122188172 + (x * (11.871512597425301 + (x * (19.45851374822938 + (x * (32.20638657246427 + (x * (53.73749198700555 + (x * 90.27388602941))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.8989249102715535;
	}
	return 1.8989249102715535 + (x * (0.9505217946182445 + (x * (1.1510775899590158 + (x * (1.7502391069863006 + (x * (2.952676812636875 + (x * (5.285800396121451 + (x * (9.83248571665998 + (x * (18.787148683275596 + (x * (36.61468615273698 + (x * (72.45292395127771 + (x * (145.1079577347069 + (x * (293.4786396308497 + (x * (598.385181505501 + (x * (1228.4200130758634 + (x * 2536.5297553827645))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2.0075983984243764;
	}
	return 2.0075983984243764 + (x * (1.2484572312123474 + (x * (1.9262346570764797 + (x * (3.7512896400875877 + (x * (8.119944554932045 + (x * (18.665721308735552 + (x * (44.603924842914374 + (x * (109.50920543094983 + (x * (274.2779548232414 + (x * (697.5598008606327 + (x * (1795.7160145002472 + (x * (4668.38171679039 + (x * (12235.762468136643 + (x * (32290.17809718321 + (x * (85713.07608195965 + (x * (228672.1890493117 + (x * 612757.2711915852))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2.1565156474996434;
	}
	return 2.1565156474996434 + (x * (1.7918056418494632 + (x * (3.8267512874657132 + (x * (10.386724683637972 + (x * (31.403314054680703 + (x * (100.92370394986955 + (x * (337.3268282632273 + (x * (1158.7079305678278 + (x * (4060.9907421936323 + (x * (14454.001840343448 + (x * (52076.661075994045 + (x * (189493.65914621568 + (x * (695184.5762413896 + (x * (2567994.048255285 + (x * (9541921.966748387 + (x * (35634927.44218076 + (x * (133669298.46120408 + (x * (503352186.68662846 + (x * (1901975729.53866 + (x * 7208915015.330104))))))))))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 2.3181226217125106;
	}
	return 2.3181226217125106 + (x * (2.6169201502912327 + (x * (7.897935075731356 + (x * (30.502397154466724 + (x * (131.48693655235286 + (x * (602.9847637356492 + (x * (2877.024617809973 + (x * (14110.519919151804 + (x * (70621.4408815654 + (x * (358977.266582531 + (x * (1847238.2637239718 + (x * (9600515.416049214 + (x * (50307677.08502367 + (x * (265444188.6527128 + (x * (1408862325.0287027 + (x * 7515687935.373775))))))))))))))))))))))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],68:[function(require,module,exports){
module.exports={"x":[0.99744793371691087,0.99324955444722696,0.99892177960640072,0.99773250245566991,0.99242579130138553,0.9931153249471234,0.99129584016400063,0.99652520294682845,0.99225045372518217,0.99784901834445627,0.99349978910798531,0.99976561208303927,0.9928705590732777,0.99520186669468547,0.99927395259480389,0.99070863426277944,0.99051308620234835,0.99855009302165099,0.99592607488056428,0.99344898892622158,0.99162882611028569,0.99280894657736085,0.99838321926180529,0.99547550669000229,0.99167544175900446,0.99354487881853104,0.99502150395530742,0.99600401175410735,0.99999229544833645,0.99198235891949782,0.9935537161393776,0.9935809153399332,0.99047073004366037,0.99215066894710546,0.99213639220799477,0.99298034461301699,0.99397799339936443,0.99346540483904577,0.99333634817881022,0.9907652969133588,0.99229579571276805,0.99183800468082794,0.99936026563273317,0.99359248409176248,0.99683120465057806,0.99477465097045825,0.99962017585586449,0.99739304903011283,0.99437929374853817,0.99826731904372434,0.99940242624487863,0.9931146416458797,0.99005833735731197,0.99788439343919444,0.99610245994554969,0.9995831050481857,0.99800995649206981,0.99055867159934197,0.99232958236055679,0.9908072786782337,0.99932375433564025,0.9911327073041496,0.99763186450147467,0.99572212055608322,0.99826366891531948,0.99525487172046301,0.99573406242128504,0.99953176504668262,0.9979250241112082,0.99212654576036308,0.99329008292146559,0.99723874465141282,0.9922343962821476,0.99729929173703702,0.99312355107182193,0.99084046745576781,0.9958446502989996,0.9925073445090169,0.99829831151429049,0.99442936108997992,0.99290433445086212,0.99684625065039423,0.99402514131089559,0.998990436250078,0.99861971094787283,0.99001514686360514,0.99614678071433604,0.99741712887976508,0.99991088664878269,0.99970872613295192,0.99203678503632542,0.99223547432223957,0.99827126362455076,0.99962402784920368,0.99675794031155684,0.99938149286353117,0.99248924577845166,0.99255521552952242,0.9947573804381098,0.99813137786940742,0.99399035323293294,0.99232331650875549,0.99599378303213348,0.99869260471577781,0.99800442713101001,0.99838385122669793,0.99105058263825851,0.99766375934501084,0.99821360047269891,0.99978881374142203,0.99841002222190511,0.99270527703830902,0.99354470791231952,0.99685171134725115,0.99430026457312426,0.99154462656043374,0.99572181994125086,0.997677695170335,0.99700754654609458,0.99090318053684145,0.99742395504068138,0.99891455722598121,0.99757808361490297,0.99783453259089727,0.99389089853844437,0.99545656241241565,0.99429259557972027,0.9916141613581313,0.99956249028233579,0.99114665111011013,0.99572914071537322,0.99124085557490793,0.9984963707815816,0.99548668327317646,0.99276317680624993,0.9949693923091516,0.99622261378691601,0.99706437626854816,0.99588302850392596,0.99551026652144781,0.99963372117943428,0.99480212076533725,0.99085894104808891,0.99547526711725975,0.99500448847506284,0.99097590763097276,0.99521537516485015,0.99327791150587819,0.99090156982186806,0.99953865970650868,0.99904576014193025,0.99501716572284304,0.99884300492900913,0.99995025667126702,0.99438945764763065,0.99694053930997406,0.99781644444375461,0.99031962317627897,0.9914845018246109,0.99066925467656874,0.99619753948665457,0.99535113862566837,0.99260597621784541,0.9911130843442173,0.99445611650150456,0.99168490555048994,0.99843915108351822,0.9986318952935811,0.99196185302135398,0.9941449183698452,0.9930382123978827,0.9945828373263369,0.99483246239266199,0.99835954320487963,0.99337778268807864,0.99019403199096212,0.99798405980911942,0.99878489805331216,0.99987388823022461,0.9977006710707641,0.99159031653682184,0.9943875159108555,0.99236856096402581,0.99313702207396992,0.99702166412412507,0.99355019325881988,0.9937543411486528,0.99495597600043684,0.9997360753126654,0.99779419539351411,0.99972208320848988,0.99606221548930673,0.99643633674549659,0.99711301531355201,0.99860012868033909,0.99106706570436598,0.99401843206117957,0.99601504829201382,0.99631867600323376,0.99957665515052552,0.99985138115493022,0.99284585319997676,0.99559421462770992,0.99298915821079348,0.99933498553542111,0.99823426157885387,0.9972027117012755,0.99489607412411596,0.9948399010720721,0.99990943221273432,0.99638967193950356,0.99380994050981453,0.99887548106225976,0.99428700499032463,0.99198716881269056,0.99068374149871363,0.993953267399867,0.99018092077163722,0.99992076079816228,0.99878544747402698,0.99402311375201491,0.99882181057526653,0.99658790592406266,0.99967587064476326,0.99901257991308245,0.99210735551248774,0.99995282236203364,0.99536780768157607,0.99653097963078785,0.99601494544703417,0.99108425582738013,0.99979105189784101,0.9903611042307231,0.99162258492675237,0.99618029425115395,0.99801509547709133,0.99567087648750929,0.99701888547748163,0.99961868458503556,0.99786849642138387,0.99746030854094536,0.99953681207512479,0.99662449846859646,0.99495331499368067,0.9952326098774581,0.99629337563305675,0.99259868285446173,0.99980930196017492,0.99961897567106273,0.99745575725249691,0.99540150018672435,0.99571434287889116,0.99030267135022298,0.99560334035962705,0.99696244835670478,0.99252555382075047,0.99519664180374801,0.99920937362093687,0.99059024653297167,0.99063858212754941,0.99889947234733589,0.99061562725660923,0.99330169218177555,0.99770659772224091,0.99229678223861473,0.99897050389847575,0.99113937246015149,0.99837195954545077,0.99310891621446074,0.99183319672226444,0.9922840947985283,0.99278794905758549,0.9965193197092681,0.99446257620035461,0.99066153507084465,0.99607723564983386,0.99275403838400356,0.99024834753593383,0.99281792052819118,0.9998974082503449,0.9987997825034447,0.9986980219358601,0.99444285925376275,0.9922601371564439,0.9975583853022123,0.99871296715336988,0.99603236043169374,0.99872482962660558,0.99783187613319702,0.99538106162345341,0.99113919249074955,0.99472959954275497,0.99978466033006508,0.99368988264561076,0.99848511817050767,0.99771141262544805,0.99050641426932418,0.99848412787550989,0.99466155208377005,0.99920720708071809,0.99325620705491213,0.99679216465115195,0.99630142104104158,0.9905141726328176,0.99230276133227768,0.99522487033178353,0.99579826982063613,0.99615093800193555,0.99603095999531255,0.99958187048937708,0.99599819108818144,0.99317348612979328,0.99448383037860455,0.99276957172877989,0.99035419916440803,0.99410700129111407,0.99513763453161552,0.99771455123184827,0.99407689388894682,0.99950100776975248,0.99108035227885094,0.99553889737552359,0.99459829641487751,0.99079200509525411,0.99450837660193003,0.99792674338425391,0.99551085222053359,0.99680758070990816,0.99805323779461574,0.99550150183882591,0.99700779989637667,0.99437935895555185,0.99872148279497397,0.99617230234230048,0.99052186935125008,0.99118424938476968,0.99219659342103561,0.99500835952834066,0.99459596046307053,0.9929047159732366,0.9995843774381904,0.99484056860061709,0.99789966348583015,0.99830646079393548,0.99451829423739646,0.99366536066684386,0.99333394841683376,0.99637874071200683,0.99059089401214684,0.99603309677576646,0.99740831211348036,0.99417487401420646,0.99506743844461021,0.99581512743653755,0.99199905421512313,0.99720953437706572,0.99427150829408295,0.99844982282393102,0.99168673402881224,0.99944353369705474,0.99751619427378524,0.99134392269697735,0.99368314011841052,0.99070298400252921,0.99941723612215738,0.99666999790612842,0.99017170821421496,0.99424981031283344,0.99828973006037369,0.99461219754259267,0.99626528320420416,0.99043797663917132,0.995386926401718,0.99232296287437483,0.99650442584207788,0.99867277416385014,0.99726556867126648,0.99923790547368252,0.99094479119048706,0.99371365674702816,0.99877486177455865,0.99614733883739004,0.99014360706207061,0.99329606209428301,0.99294273191361337,0.99919641795883418,0.99179896885563779,0.99226212536855252,0.9992620164031174,0.99136937825188487,0.99068173619621669,0.99324939624298503,0.99581035113511884,0.99761695898926028,0.99637087508019384,0.99479710120350751,0.99651204140386451,0.99032977716709025,0.99864535556098166,0.99101030914162536,0.99055946934635608,0.99372826258495195,0.99816773485712562,0.99528918474336592,0.99528869575012957,0.99718686317491012,0.99694281127467799,0.99682202161778533,0.99212383658576409,0.99594963917831658,0.9954322562227913,0.99053611783453144,0.99702450015778299,0.9980229934411905,0.999563389184148,0.99256160422212747,0.9944449771442273,0.9910107317428587,0.99085389286492231,0.99827718822499478,0.99057334414821485,0.99326139759279553,0.99629387544252301,0.9913275442125925,0.99796099448272702,0.99386545315721864,0.99691122216773609,0.99309480819317231,0.99345273331832673,0.99726983857942675,0.99946721982057063,0.99898871542653533,0.99520138301644123,0.99637877709746914,0.99953717647218976,0.99178854613761835,0.99073588279288682,0.99028889162921829,0.99207011239709708,0.99693712602580942,0.99774950312936628,0.99329433363698705,0.99914096402777453,0.99332576155975272,0.99782472392324406,0.99980506759471444,0.99295504641027654,0.9935552042486826,0.99151830535558938,0.99855483465572559,0.99847825731431039,0.99852163931768012,0.99784776107296158,0.99026888893021592,0.99270804417495662,0.99889487981706337,0.9922778792820065,0.99214478684797325,0.99320991115779078,0.99832846503559591,0.99829478846843955,0.9962197446247707,0.9982209997704159,0.99161380713241987,0.99570625783545308,0.99600181389897058,0.99571772452919161,0.99577644638182805,0.99285989667775243,0.997012815807787,0.99699063643213337,0.99897871758194889,0.99796178318983131,0.9904920122798534,0.99441544897608547,0.99826198930566379,0.99446170987760441,0.99599266077493942,0.99465615845405753,0.99465726772991314,0.99279011280178786,0.99738891423636045,0.9967530777550111,0.99785073385533507,0.99903574159611341,0.99602650164123441,0.99908435042272181,0.9997248940826563,0.99747122228228136,0.9920974626500525,0.99260485457060676,0.99598549611677689,0.99689568877174217,0.99037570514709916,0.99131817485010065,0.99400811224866958,0.99123488486231004,0.99120060605510485,0.99190883761236814,0.99231169927479346,0.99145717524583588,0.9929103307606294,0.99584985106411039,0.99822190890178364,0.99073354357246446,0.99364803906587273,0.99822243990045201,0.99216513343604029,0.99722830678694652,0.99636474488524163,0.99925765451742521,0.99313213247452115,0.99492589331542702,0.99410603504744477,0.99654817406772234,0.99735895643154693,0.99890034462762645,0.99851390548277019,0.99538471726706457,0.99075119324556804,0.9928217694694258,0.99016869038361732,0.99975859923622845,0.99674300734902666,0.99036421869965618,0.99934965169140388,0.99326211947953114,0.99368448296756295,0.99972916322720839,0.99911849690687937,0.99364996118397175,0.9961435129440841,0.99309118705394006,0.99460229868071171,0.99120900292072167,0.99545419619797981,0.99915674132672783,0.99176657538296864,0.99135464650708438,0.99959991874963461,0.99332084674959487,0.99869262725385832,0.99897390149840848,0.99083588578130255,0.99499598811726198,0.99760561709656359,0.99615226713640637,0.99935125084283571,0.99583074660807547,0.99098744994287002,0.99698184102825216,0.99598950300383726,0.99029329406995281,0.99401367597442403,0.99527829895055364,0.99998714826151169,0.99032069640191478,0.99576925692502549,0.99827059607970925,0.99303702296179674,0.99339952209972615,0.99185357013206743,0.99846626290681539,0.99173628818600479,0.99246044965675873,0.99226901383337474,0.99581433097927619,0.99744650914539068,0.99937583114683071,0.99307516341686219,0.99047782507845361,0.99811114167626269,0.9905397225701571,0.99776510136453833,0.99020615967368686,0.99695342114653462,0.99681410362294076,0.99856145755020731,0.99598568659510323,0.9976062417978665,0.99114018633838763,0.9915643727476301,0.99796165720612806,0.99904895601195698,0.99617788807999086,0.99049295092188216,0.99070206503039437,0.9966433662084353,0.99069272043162138,0.99296221845076049,0.99135993785753918,0.99691732312208392,0.99788812430519191,0.99563229129123054,0.99092389223203603,0.9909323068515421,0.992378450031701,0.99825242691793314,0.99243623547958748,0.99263341061902133,0.99104811731074516,0.99226987008487855,0.99858266924577022,0.99300402605244886,0.99698129951134717,0.99306721959436917,0.99733668761828953,0.99064464383057615,0.99650465573701841,0.99408718745242686,0.99516218941071866,0.9937144101209594,0.99326355491151475,0.99937693052371723,0.99661710016962302,0.99576033767461258,0.99117553727004981,0.99237127368660893,0.99147802632046911,0.99490241160841397,0.99019762687883639,0.99260339794151298,0.99964195305913084,0.99169978622448696,0.99970275865404812,0.99220971287708493,0.99123848120290226,0.9985808809942317,0.99467363281856247,0.99838003339318282,0.99656628336075759,0.99114739476200586,0.9929015654983171,0.99451810859215095,0.99754461189261523,0.99475428106673414,0.99558062234689548,0.99809107559080024,0.99427749819000744,0.99229713716507628,0.99267167338176188,0.99302414776490211,0.99753660700475144,0.99381740885586667,0.99898286492634614,0.99231222270955077,0.99728371188666232,0.9921294760367686,0.99406789455513,0.99355223976123541,0.99938222013044498,0.99225239655149589,0.99255401913948049,0.99670507181565604,0.99533109924786634,0.99807552741153882,0.99954659396527545,0.99498801035378381,0.99267720767833778,0.99018585070030507,0.992500596103431,0.99583218397701623,0.99927579948586032,0.99838021036169788,0.99068575491920319,0.99004016946899209,0.99299370444965041,0.9964645637113948,0.99591524371599915,0.99876590330076165,0.99203278814601314,0.99394029806731621,0.99635819616085686,0.99227947369580849,0.99798290421623947,0.9910874063372207,0.9950165088126417,0.9938349605217276,0.99650747059451883,0.99241896765711668,0.99795875388183075,0.99751541012504907,0.99233350424033751,0.99925272179972513,0.99600778858326211,0.99210628661939682,0.99112451130705159,0.99911989811152468,0.99515714082479523,0.99152376341939508,0.99837756899689878,0.99954457735998115,0.99920698032867694,0.99260434729268032,0.99498178102247326,0.99717570388233867,0.99277583366708944,0.99097846641434495,0.99652454706330762,0.99606224589860415,0.99917207072527214,0.99343209044797232,0.99509788468857852,0.99095499859661906,0.999740940616338,0.99592874208930859,0.99197259215716949,0.9939050597794955,0.9911117386431747,0.99911776317257706,0.99297324552970379,0.9966691521938138,0.99396378896323567,0.99180164143990401,0.99420713605315214,0.99862035840376717,0.99311444207409794,0.99831747976419838,0.99693773779466355,0.99990739962055852,0.99091862642054862,0.99728822593291733,0.99402048403689613,0.99901719737702321,0.99295151279962757,0.99866028163008602,0.99306466131386084,0.9932020665531387,0.991055505752655,0.99132386328377387,0.99593768218063627,0.99908207684931905,0.99282699239546923,0.99873367212741582,0.99155206100042181,0.99298947063827137,0.9900065860108116,0.99866828556343956,0.99283567055290745,0.99551417609968751,0.99550755798008472,0.99197434191168288,0.99870815097903454,0.99453799967399237,0.99042249200700716,0.99748270000177641,0.99904631507552344,0.99823986102889783,0.99130960990920991,0.99298778532017928,0.99833645577575636,0.99184889250604857,0.99800388323481382,0.99614742917828636,0.99917788300082089,0.99524435905731978,0.99137289934215389,0.99082685376598845,0.99504681838937703,0.99910644191825293,0.99404917984655361,0.99135663257736528,0.99173554805182829,0.99165222215350224,0.99575126095795718,0.9964820294364185,0.99606157312258126,0.99582717881664984,0.9921442429773859,0.99057904591010948,0.9951988026145776,0.99987492890706331,0.9998908688661915,0.99939545007453945,0.99489866172438324,0.99011875624756307,0.99694803725282588,0.99653529055960499,0.99411380684857908,0.99921501822164027,0.99034773268155152,0.99043430152588052,0.99292802272784619,0.99128788713164839,0.99801361592578486,0.99168855600482508,0.99346467338392763,0.99920761614187525,0.99083307612239058,0.99820351442671584,0.99511055258215897,0.99874188447923096,0.99366796721763018,0.99556375650125395,0.99739405560532934,0.99048558523456376,0.99524687685728419,0.99594582622211569,0.99804440427085728,0.99301047208783499,0.99816829489385617,0.99429786318149627,0.99189452530494893,0.99792533962803986,0.9912368108566515,0.99748725956187045,0.99820914379948977,0.99106164038724354,0.99637833831845246,0.99254516810628046,0.99016118195046576,0.99184422602451805,0.99895865028588815,0.99512839731058156,0.99515323522988941,0.99234490348745552,0.99544467489376409,0.9941094822400014,0.99606381563016977,0.99354384705588616,0.99760360177869389,0.99447377210653964,0.99855261334291912,0.99795145158097243,0.99382830164919633,0.99257948736842072,0.99084640721895523,0.99773170133993327,0.99733799912225896,0.99802207252744235,0.99331956132004995,0.99944992844730729,0.99839665555470392,0.9965986561671174,0.99371686135198711,0.99846541845166048,0.9982813244854335,0.99838736343769419,0.99176500976976523,0.99328862730973999,0.99129506906644504,0.99478900802810832,0.99879795591551812,0.9933659476465343,0.99044074723533637,0.99475106844854588,0.9968665134720448,0.99652546100680339,0.99733699532443421,0.99168129905716862,0.99437128724499135,0.99271173526116041,0.99379800930951789,0.99433279319512236,0.9997955947074455,0.99794424435165596,0.9939895352060697,0.99669809746354232,0.9944014289862444,0.99528512453643581,0.99156792207743205,0.99398648407470713,0.99326001677741882,0.9985741564863212,0.99314030524442876,0.99517798732243568,0.99894411213204848,0.99803640414623218,0.9924699948027762,0.99101873952451791,0.99310647944542629,0.99653006323815851,0.99408828019197559,0.99887172402173063,0.99707940090828895,0.99600465833697416,0.99143623227980937,0.99664202677689495,0.99871234935480513,0.99131682569186874,0.99083147582787456,0.99531998765519492,0.9946169166199621,0.9959734208389891,0.99030385985275149,0.99711866789256365,0.99753125211651184,0.99228549249709486,0.99699972666092795,0.99607259626475209,0.9921449079869552,0.99308276758738467,0.99679836697913682,0.99147492992902753,0.99557236949591199,0.99433188400788086,0.99850593832599532,0.99563120620173162,0.99558509640615822,0.99248961047351014,0.99901683486104176,0.99358663324236218,0.99419475752282449,0.99088417354793612,0.99358092538557086,0.99843642545642308,0.99488938618325762,0.99602974870327154,0.99255936546040935,0.99019327770209797,0.99929076355843827,0.99211559162695007,0.9946671014429822,0.99131829611247058,0.99253982447194866,0.99595857093048468,0.99431175328811094,0.99265324342219619,0.99702459751782124,0.99962007687781518,0.99402289633554897,0.9978762281004977,0.99181821898156641,0.992178281657767,0.99856165491497539,0.99406631120898992,0.99584142808682008,0.99052114904760447,0.99373541426410406,0.99440257589075365,0.99221672375434544,0.99377206389300266,0.99218972213739665,0.9992455442370507,0.99522180216357836,0.999906729859391,0.99433379365448959,0.998678355142958,0.99741229862989667,0.99066763707282557,0.99070442584602747,0.99589495776260917,0.99847248704419378,0.9969159307105725,0.99679812248251864,0.99394429959049491,0.99136637857560506,0.99796889935189248,0.99858316349346865,0.99461212758398077,0.99199814139841491,0.99189664593322802,0.99607279187182451,0.99422848007176257,0.99542990677048548,0.99907798334395204,0.99162308461981497,0.99362866006477357,0.99005652496365015,0.99960118402504639,0.99771407995059591,0.99638223030111195,0.99764711078779122,0.99203243591313273,0.99421027243624205,0.99804362786529399,0.99056807505414379,0.99070726701308764,0.99585688421172303,0.99883076576647978,0.99174137827915254,0.99227197613010465,0.99728537797253836,0.9945774356042405,0.99534237621524624,0.99813738087937043,0.99253038982794484,0.99739858854855779,0.99916965047624795,0.99201938895329556,0.99758118711395327,0.99160415596593032,0.99886942030675896,0.99545765719368495,0.99068791293634451,0.99216074495909123,0.99183509844643858,0.99427643680728206,0.99736998948898326,0.99069533782657471,0.99696645176795118,0.99586441782299051,0.99776915203800698,0.99475933822928064,0.99501853230204962,0.99594187744144447,0.99425454279292258,0.99525666757781805,0.9961117600594922,0.99961669433586253,0.99855686307599345,0.99944740591669734,0.99670730027797649,0.99916202321589154,0.99523539686326123,0.99639942402332782,0.99298785528344724,0.99435909164071923,0.99703898680765035,0.99318784777840463,0.99381572715560085,0.9975524201187892,0.99567628228606253,0.99624538081025305,0.99887772170040523,0.99201762343306765,0.9984286499117464,0.99388124238754927,0.99898708678306702,0.99093468320008227,0.99938909193557246,0.99518880961704048,0.99815353612244917,0.99961328254632109,0.99001357691785674,0.99694604629591854,0.99003090386408477,0.99404057717457384,0.99087460065128119,0.99797072437768175,0.99260701277632191,0.9970603124903531,0.99022796391519996,0.99774768918287937,0.99424042406249558,0.99859330881453368,0.99341030867469748,0.99227364599211609,0.99541299796257354,0.9997232638118646,0.99926076467010982,0.99008143597748499,0.99298469595951999,0.99593488066299773,0.99338050981910941,0.99901977221479099,0.99859394158028369,0.99250466687748717,0.9934044426113362,0.99304183884279473,0.99138106586584007,0.99687758102920399,0.99507748177975486,0.99068192970336666,0.99856570816329349,0.99004886643493706,0.99384275183677484,0.99631601421191684,0.99695621355674924,0.99589112756003906,0.99627841387458405,0.9914474103901999,0.99450343116596385,0.99795149230829205,0.99473570582373505,0.99128534966877424,0.99949611389130444,0.9903440553077012,0.99083489215250331,0.9903689991869512,0.99279800932946571,0.9987103518210898,0.99446962607284795,0.99458251386379004,0.99587512508747844,0.99091530029480368,0.99877546381206506,0.99073227309380818,0.99469053609962754,0.99028754125107588,0.99437374729709005,0.99993808772110959,0.99746110325680759,0.99311208991191446,0.99467863670547263,0.99628074551945478,0.99860741269883535,0.9925922045077421,0.99466465364353496,0.99386512444486586,0.9949805467593299,0.99568158479264612,0.99487381905347716,0.9999309494749421,0.99229445826707452,0.99593563238166849,0.99085543678047971,0.99259245695705967,0.9906737657382334,0.9925767316695987,0.99888302095001369,0.99845182062071858,0.99233144369265391,0.99013598555671212,0.99861509599359544,0.9935949913455534,0.99711663918594273,0.99121379439652413,0.998727257094986,0.99895002138350319,0.99937908210140702,0.99228170266332105,0.99139675306136066,0.99592545399031784,0.9939386075669322,0.99500722504410399,0.99980464775224842,0.9916558886785295,0.99644729547685496,0.99195710573937279,0.9989632013205767,0.99955192556579475,0.99482182182049861,0.99390206932937142,0.99014091666105719,0.99532350640575007,0.99622818054847839,0.99645831102950588,0.99231072249659102,0.99588052715412967,0.99527381222424238,0.99153900998042432,0.99724919459858119,0.99871545247903559,0.99607355050720203,0.99438751867660691,0.99588307611303117,0.99586015102979286,0.99433391498902979,0.99465233973354639,0.99244148481064176,0.99005698296557065,0.9942891746222251,0.9908615176179435,0.99010176433440766,0.99956858282535355,0.99608760563465815,0.99648336949421068,0.99957879391216997,0.99240197779499417,0.9909543698025628,0.99536272257283398,0.99035587004378767,0.99555067914841577,0.99886146490442773,0.99115957831384105,0.99246916666043317,0.99967139056510224,0.99008914163804818,0.9959525555840596,0.99814838781582094,0.99334865588913879,0.99140485387982547,0.99158839738468874,0.99879778454136381,0.99558310672736328,0.99095367247001942,0.99532958937107308,0.99352524846230883,0.99772965072846787,0.99593361227495147,0.99356871382235412,0.99585123116476859,0.99983815685408606,0.99667615000126908,0.99415834213770782,0.99647962312091487,0.99065164764213332,0.99433325730357991,0.99603604460817508,0.99139744786561601,0.99114390236291594,0.99751854318364985,0.99176555976551417,0.99241762616755924,0.99095671884978376,0.99650394278077314,0.99419382927098821,0.99857288324191351,0.99491286777852306,0.99084362027040118,0.9993387628208783,0.99971991948291217,0.99698452347423805,0.99031456790645633,0.99073763565770656,0.99835321008571953,0.99721498159670452,0.99835629775386925,0.9985068078801117,0.99049852517052928,0.99554307006565801,0.99545831622243319,0.99703790202545717,0.99943075517341651,0.99996582999139527,0.99321440923346094,0.99051130070724891,0.99806386158602445,0.99112551760755552,0.99601338616153479,0.99552004918451886,0.99789541502854018,0.99811036350369153,0.99799105111659314,0.9965518289826466,0.99049559808125653,0.99224737621674564,0.99283170319420888,0.99206814949347655,0.99653391481710063,0.99260660699076442,0.99489606378281303,0.99952947508131362,0.99972754951134812,0.99931214361097198,0.99748415060814377,0.99148033673796476,0.99567784358301759,0.99982752229999305,0.99298934267337757,0.99772568363982572,0.99256084168024239,0.99932604081588305,0.99886475138075115,0.99212955636229228,0.99446756182818341,0.99671080140967061,0.99815905654603454,0.99214356037689233,0.99098327467788616,0.99217793933316789,0.9985950749679976,0.9932909185462373,0.99027626240261246,0.99702216162879853,0.99899066514161883,0.99722398362177445,0.99899845505283769,0.99227143372853166,0.99524053592743722,0.99841904417761318,0.99120187495299916,0.9949415627826671,0.99177776318978561,0.99056204037306739,0.9970603698354622,0.99058485660256812,0.99831276619970721,0.99652837958929519,0.99034830337154678,0.99254134852671017,0.99757762926805804,0.99898360028797173,0.99957016462565285,0.99972350592220738,0.9934283622918525,0.99521014721249579,0.99638179884854283,0.99589217295821097,0.99342971507955113,0.99773374901104184,0.99216449748082947,0.99972511253045893,0.9978612200506094,0.99912123855344903,0.99723017650476464,0.99509754124417593,0.99278811025805813,0.99278552982592949,0.99582373187552509,0.99076501652482984,0.99420963682325814,0.99450070284295944,0.99092059502096519,0.99640405456405801,0.99024024916194631,0.99972226144813325,0.99491096688779934,0.99931045653285622,0.99278239194588824,0.99222093217342555,0.99339723185964435,0.99644014552280535,0.99287320870041007,0.99730727594229485,0.99170886138133307,0.99942940210867715,0.99399223386010405,0.99916511763778282,0.99697579809881087,0.99018597716359136,0.99203656071479318,0.99638527371025432,0.99666259857814643,0.99391241059275159,0.99443021777916163,0.99874135857205948,0.99433251937408906,0.99098716710753576,0.99175221917273737,0.99814108025351633,0.99193182994666884,0.99328794404341747,0.99616359692079226,0.99624300333958138,0.99268983705161229,0.99596605236031044,0.99559621968110301,0.9939318717236314,0.99944689510009899,0.99823951287247426,0.99714400188245156,0.99670600257715558,0.99679151728605242,0.99959830572521213,0.99959284637398171,0.99910265356979,0.99775256773794696,0.99791499242574389,0.99607666194731137,0.99664019110249702,0.99947907560292282,0.9980828114160667,0.99059635661336798,0.99211837837063355,0.99268685476138629,0.99463992961591596,0.99986581370735117,0.99765897060236686,0.99772129515123642,0.99127952131787733,0.99475306763752147,0.99135352185663073,0.99680831464908082,0.99342627091349012,0.99416893059594347,0.99531079119174548,0.99380111192622822,0.99313302484375887,0.99213249062901598,0.99071343424303482,0.99382899694467519,0.99866386735000645,0.99029664789744554,0.99202534461722569,0.99472273835364311,0.99242100258667831,0.99333339349022487,0.99605368073421829,0.99975747222278011,0.994881989900396,0.99555387993300593,0.99785745492235267,0.99846219004913328,0.99461399902690151,0.9940802269081177,0.99098355358576029,0.99461971964852047,0.99236440107596802,0.99826224087496962,0.9970306798405959,0.99991104076958348,0.99472665613368616,0.99523895259992168,0.99075094945435616,0.99925344345598155,0.99733646365760875,0.99738947961369173,0.99195783802794124,0.99567373306874485,0.99938213780044993,0.99968680781583208,0.99857261135085318,0.99824416969715546,0.99865327356746647,0.99959513319179527,0.99194794626202876,0.99646281432937311,0.99405595482477171,0.99379535527534224,0.99824754159748363,0.99476527020738992,0.99889993839740676,0.99911798621134085,0.99820110453761923,0.99014852369511008,0.99773126364347076,0.99156678181026059,0.99167304795224032,0.99471520718918083,0.99985522211552846,0.995429373934967,0.99604939148442262,0.99059685060497837,0.99748722735762829,0.996579645003976,0.99576489196860418,0.99889546340924262,0.99168109011721861,0.99109621647780788,0.99307471904115652,0.9943772933792292,0.99769762739389323,0.99280202065616241,0.99944237003507164,0.99985147789570084,0.99577520816561582,0.99608697833755311,0.99598580735693731,0.99253723833836771,0.9903439230754485,0.99132601469151416,0.99336894136527365,0.99544950395631482,0.99248199089346845,0.99827721150340276,0.99911403740971694,0.9983692257025838,0.99018433856295229,0.99833265315387421,0.99036830510207052,0.99203695060426411,0.99749387789099986,0.99544363259658608,0.99676090056889433,0.99874855229622095,0.99215529123714286,0.9912098798152541,0.99653431629572198,0.99856265131185407,0.99524073316881734,0.99899686039225988,0.99973911141398475,0.99217843330615363,0.99945096960838531,0.99076971382772694,0.99883391879762407,0.99474167743031328,0.99422989954712959,0.99834943968204803,0.99268477451354376,0.99469346561475303,0.99381980227617062,0.99413728564317194,0.99160749206281451,0.9950269598772854,0.99294405914371997,0.99125427417677525,0.99431521449101457,0.9913227209492731,0.99826595900640447,0.99870388315915637,0.99789128027902119,0.99602889883534562,0.9943148419922534,0.99265275195188962,0.99905328805872984,0.99864716100534379,0.99463733521767383,0.9905810364409795,0.99458087118669414,0.99457708106656717,0.99441530903558106,0.99722137425867508,0.9957066881216573,0.99338965249940236,0.99921061307568426,0.99401179732378731,0.99625072230275713,0.99526927056470627,0.9904158854998355,0.99894146287275176,0.99891794669162481,0.99778282828545217,0.99123384521447977,0.99069360667104134,0.99027037546574326,0.99278756651085864,0.99033064327332954,0.99379331899316981,0.99283270960413217,0.9986458607948594,0.99639441935185691,0.99419918369594118,0.99632281509926612,0.99239853486048402,0.99490411747873997,0.99597594751822616,0.99321950450191621,0.99479356460361201,0.99844569964028174,0.99898457649346806,0.99196376948223397,0.99934615767663082,0.99253377729610115,0.99817805044418195,0.99595182249928982,0.99708838087718954,0.9950695163410983,0.99743146246112091,0.99362520822538203,0.99899619812050511,0.99868658522305354,0.99065233284075693,0.99380708804461315,0.99335877579229626,0.99227837126681739,0.99004334640246816,0.99596208323227586,0.99828012791612997,0.99421458091126957,0.99507384634149443,0.99448410232088247,0.9936612582309865,0.99258846323059935,0.99226617048956567,0.99976691221669711,0.9953477822163419,0.99924358878792185,0.99289455923529857,0.99057185271442072,0.99068364056741054,0.99516364624933895,0.99084962251675612,0.9941641729167856,0.99068332636594048,0.99145659600948244,0.99409775517451082,0.99412853035665516,0.99123369039991316,0.99810983369466866,0.99442972291917986,0.99533373480179366,0.99898849845473137,0.99104255505633332,0.99353603640385946,0.99351824139377687,0.99120166102631557,0.9916163653174771,0.99569054108503807,0.99814723243246761,0.99874945220143296,0.99458376157155837,0.99348540122664064,0.99464489945940582,0.99041916817674269,0.99034328472232191,0.99142325482926585,0.99740393441784025,0.99076585180737475,0.99278164050658624,0.99740452534810753,0.99339520161416683,0.99456479477917192,0.99363630574252038,0.99668182486692936,0.99839122007786829,0.99699176148068758,0.995803099644467,0.99571300076075386,0.99923408659253432,0.996286304717106,0.99965755664887201,0.99877676146865257,0.99745874275779256,0.99662285503022041,0.99629659971002327,0.99875326076223092,0.99046105075171353,0.99467470269875646,0.99069793125401018,0.99141321897422174,0.99607829966793859,0.99068127645755322,0.99048266375362037,0.99714170985673733,0.99098026880427448,0.99307955227328715,0.99958368640774231,0.99671096854207475,0.99398542337410734,0.99652355596745246,0.99230215206144656,0.99530995729440452,0.99539664873043354,0.99715035522791506,0.99079952439818131,0.99504760139735715,0.99892333260842947,0.99487950558744231,0.99164012823250092,0.99497788526367836,0.99749293711878384,0.99935881958939021,0.99230724479695775,0.99389242759157992,0.9901696463604821,0.99117133444300243,0.9999003974759022,0.99240399515225619,0.99171687891296456,0.996848400079272,0.99037020502198769,0.99839169686501472,0.994290426615977,0.9997004761641235,0.9945892237327737,0.99215148094658623,0.99565140572538902,0.99760267315902207,0.99456127154241891,0.99584044438492669,0.99426227657661492,0.99402911280658091,0.99235604208810879,0.99509989332720494,0.99322141050508961,0.9949559465270249,0.99981831224059381,0.9965130321225717,0.99025729816645081,0.99743631776106123,0.99030927818332493,0.99301923270331227,0.99587916430216883,0.99089602978659075,0.99344477838859446,0.99825882884796469,0.99465412475371873,0.9938954805225434,0.99195765814933412,0.99775227322266735,0.99913025699609403,0.99179351161131402,0.99442386608430233,0.99109350274949681,0.99099643075453325,0.99905067822768767,0.99618853494959325,0.9987626336936597,0.99676929423806604,0.99999692587033495,0.99471021041220753,0.99864168262909581,0.9937589745296328,0.9903687383728651,0.99255185241767208,0.99544627967680588,0.99847619713213431,0.99997516418833543,0.99388674404220512,0.99510957050060478,0.9945233265244765,0.9987342482069016,0.99634365415638337,0.9907021444759061,0.99473777717368028,0.99987439983371174,0.99568986722878905,0.99922621161350578,0.99108836113608023,0.9956420449208957,0.99627810075101209,0.99431418908168256,0.99562328368809627,0.99337810778493318,0.99965777480100926,0.9972065136130952,0.99002029812921488,0.99013654204545842,0.99132092175113251,0.99374022790083916,0.99209592136754632,0.99922592946960942,0.99940122040984214,0.99546424996056615,0.99756652948803215,0.99473839475806214,0.99987063476831295,0.99496487660763622,0.99748180616352422,0.9930894018172568,0.99538916439051572,0.99950742469257814,0.99844608503424259,0.99981895083351202,0.99070035599156026,0.99513511746266625,0.99942019402814053,0.99992490562125569,0.99271226845985838,0.99455798118985306,0.99014305428892979,0.99425998280484551,0.99068449264467828,0.99213193455932291,0.99186259580105285,0.99193230159575674,0.99200377748069701,0.99832670966809711,0.99876403703314853,0.99726564438254828,0.99589428602723518,0.99529692721775709,0.99453771189382978,0.99828997826794108,0.99915632862679171,0.99511823248957187,0.99195492868557367,0.99551906648136901,0.99946875834198157,0.99213263560747167,0.9989144522275335,0.99587761840542077,0.99936480134636929,0.99142748947875126,0.9974810462570185,0.99052218308244921,0.99252811197088653,0.99683239578848581,0.99916687337777343,0.99608498623523345,0.99545259499318706,0.99219633971688637,0.9950799279588628,0.99406239314259381,0.99787578840654811,0.99629844954842095,0.99195150090216655,0.99555252093633495,0.99731653806440412,0.99127566301313064,0.99847061965212103,0.99169181410425922,0.99656141341490623,0.99000999313722149,0.99628889788845343,0.99418120652573927,0.99818861457172037,0.9948843682510794,0.99979236054293597,0.99159852851381713,0.99905822342810569,0.99666771892693873,0.99777647663017011,0.99017918582367193,0.99218959139045493,0.99119663390523083,0.99449557675779376,0.99952030096038658,0.99728829535141605,0.99975756381152381,0.99838213052188696,0.99030911451043813,0.99142227357184975,0.99493832452773234,0.99968940367377634,0.99862635849898218,0.9993402519033181,0.99242851876998694,0.9922518888987496,0.99834186733861985,0.99912433987109428,0.9981350983521966,0.99365087328828938,0.99628910213966315,0.9900213849880497,0.99002237972501195,0.99925555354507145,0.99379685966486597,0.99457312346948124,0.99904315255515108,0.99773394876441335,0.99680283630542599,0.99725926354253547,0.9937878524551762,0.99919821517112806,0.99631891517321947,0.99469317637023213,0.99243245197817376,0.99597587769697071,0.99571355929122074,0.9922015431685941,0.99981630598125859,0.99528444584012166,0.99849597056943218,0.9909994151889151,0.99283415839693023,0.99617934030204125,0.99682389420611828,0.99178676771055041,0.99358088714230575,0.99889380758784307,0.9998682807413426,0.99766581528543674,0.99083977891170227,0.99799451752041324,0.99250280859283846,0.993724563809121,0.99811265482865552,0.99328037278254355,0.99084414665482778,0.99193205295749565,0.99531200840407774,0.99004425995950374,0.99800542915484258,0.99245804683802163,0.99738749355737932,0.9992414707787256,0.99141648818555128,0.99357869002749633,0.9943785046712702,0.99400218198169443,0.99350345337478119,0.99521077606708208,0.99478449643564293,0.99927467507054213,0.99587344659995425,0.9978405241257855,0.99145791113826232,0.99141810436218536,0.99905240076702062,0.99193179544461796,0.99640130225258317,0.9948976965190347,0.99162923282008852,0.99080052396589635,0.99565854001150322,0.9977530216028806,0.99931522978682652,0.99273188550415559,0.99783023573994123,0.99620609393957371,0.99685618568588275,0.996440802507505,0.99466172665436936,0.99180150171591042,0.99260292067012723,0.9935761249676377,0.99569211243927103,0.9954461835553029,0.99248745790173298,0.99165875008353355,0.99319269661095644,0.99160702793340427,0.99910711157000109,0.99265459620291063,0.99885131516700698,0.99682268415028441,0.99794509967891454,0.99204348537184761,0.99925717221740051,0.99877968567344222,0.99178822064499139,0.9986868330790819,0.99517489397378633,0.99062803279259082,0.99626942620907211,0.99012377406566565,0.99913091027915657,0.99716457855868923,0.99663901859383419,0.99494322642173783,0.99389153905202332,0.99455929097570406,0.99739933582526419,0.99280422923440625,0.99817553098662914,0.99203684234884149,0.99600284764047808,0.99156763125913328,0.99084988560537013,0.9988413381307425,0.99922265769507079,0.99308897710213273,0.99053592452061157,0.99997452286924304,0.9952697224810424,0.99747588815152854,0.99118841388474122,0.99753182728339262,0.9938010497922718,0.99465227316693772,0.998127512457052,0.9982569036917297,0.99244071509130583,0.99202091837892281,0.9988433421737517,0.9989516863519039,0.99712575528661929,0.99658989477871962,0.99378110628686889,0.9920611333431294,0.99248894719602754,0.99642453720241853,0.99252828460452869,0.99202285824625491,0.99767166876556024,0.99079950464680488,0.9904985689895307,0.99924745297105444,0.99685220040101741,0.99568785288638229,0.9962021609548819,0.99283185548980002,0.99746609958213472,0.99566866302729518,0.99977157917781079,0.99796043101208798,0.99383875120059217,0.99417765249090062,0.99260179581713115,0.99755343829479648,0.99877381788730646,0.99512978591569257,0.99806015372605039,0.99456678779642449,0.99461074968102414,0.99660871913956295,0.99090952591563719,0.99088225192106072,0.99564212397994722,0.99709326689606115,0.9918736415255377,0.99647537106442308,0.99531636420651359,0.99220029852689873,0.99354997814714674,0.99812635078789991,0.9931475202099338,0.99820077584156297,0.99726668794852635,0.9979137000119781,0.99515721284840841,0.99182731557531423,0.99790565831727063,0.99852519472375412,0.99204472134379695,0.99662788000947744,0.99678038269899805,0.99073060248681322,0.99052480298939394,0.99285694096714283,0.99801092248896339,0.99212666046222153,0.99678500781066059,0.99994281478144342,0.99945914345851905,0.99276831910412011,0.99091548987216549,0.99916467443775425,0.99908347531847796,0.99127012416982696,0.99509902043695908,0.99019978872565872,0.99614842071414733,0.99452152984065534,0.99316039590736427,0.99469098199323724,0.99077479733242624,0.99717370162030583,0.99850529002035404,0.99343825171106681,0.99144512455483336,0.99085488147672285,0.99370448741494866,0.99346265949083912,0.99622329196174164,0.99074822076118807,0.99997452141419707,0.99906325555222064,0.99517292401144675,0.99158350293819064,0.99990412164636,0.99855908915669467,0.99226511802801842,0.99877857942873838,0.99397965384199005,0.99853452230896522,0.99696499030112051,0.99902099525894761,0.9906463428889587,0.99869959339485637,0.99747586812311129,0.99899618831465897,0.9942035839296619,0.997302153961523,0.99811236288124106,0.99831085605954706,0.99379567323665108,0.99992822906040379,0.99319035908071551,0.99907318525874866,0.99985952457248584,0.99867935777907402,0.9971810909119625,0.99390193940423965,0.99413142037135571,0.99634597502460143,0.99098620374136537,0.99354809385791587,0.9973448566539671,0.99861416967406025,0.99637242563774531,0.9933131962504077,0.9907383448657533,0.99926678178354278,0.99120496119869594,0.99299889490837934,0.99981498042736505,0.99974072814004422,0.99496749739924883,0.99662844843425713,0.99022411409628153,0.99775056953141839,0.99053826166904835,0.99197388737626391,0.99140859710556573,0.99048846071044472,0.99893384966930376,0.99148116630508887,0.99465773491142784,0.99870342787642585,0.9956080065827414,0.99125762446326804,0.99494406897718457,0.99540924448399715,0.99067778709427123,0.99255910681375981,0.99897556781010766,0.994644061299362,0.99288536456213772,0.99137647311672872,0.99269019913690026,0.99201833739038459,0.99594134761379705,0.99217075011150069,0.99475831437510176,0.99411653835871627,0.99368274208766616,0.99727460875102758,0.99655545533443568,0.99018040771543214,0.99938106582266162,0.99875638576569703,0.99620363140109247,0.99829822648838629,0.99282811806096294,0.99483738236183095,0.99205160730826802,0.9946259481603491,0.99439090167020583,0.99718812690680914,0.99027247493881754,0.99570318690149651,0.99876096716777774,0.99881698191547252,0.99610031240473962,0.99165357285059075,0.99203572022667574,0.9972021733342542,0.99519864829821858,0.99972244510753194,0.99053818915653968,0.99545720098903723,0.99862101214546029,0.99114652462819919,0.99442890372129555,0.99530136074991449,0.99547954359058755,0.99020784541781637,0.99566804145026699,0.99934848619257077,0.99680326951569065,0.99863277803390638,0.99371341435033245,0.99979427427764189,0.9907822088781385,0.99611214248748725,0.99456305087277941,0.99299432781696717,0.99047839015313544,0.99156385770790623,0.99738183167072947,0.99149934824333297,0.990379977320475,0.99741283321379848,0.99954148901669004,0.9917239847849405,0.99742298099098115,0.99061756366442399,0.99937355826486574,0.99002790120088657,0.99513312643358853,0.99859017924804327,0.99240880707087298,0.99796429472727766,0.99259939284939736,0.99068257923823078,0.9975889826125488,0.99545984115255037,0.99993243429467915,0.99887959000275472,0.99356670083954235,0.99319379456771817,0.99752782555534336,0.99939737000424922,0.99110037495970915,0.99252251437166117,0.99596985528251414,0.99232060311335901,0.99430552142152817,0.9947468877195732,0.99730644947150859,0.99093559135831522,0.99261150051767333,0.99221792111286589,0.99094798197134493,0.99619031484101939,0.99450918386843701,0.99943518986495461,0.99640010499416987,0.99518797067709197,0.99132025615954467,0.99075041889103754,0.99452777142694548,0.99718351801250737,0.99652134379233492,0.99373293718214706,0.99826915637571056,0.99121501968959969,0.99308046102052272,0.99697355204556626,0.99402323344293519,0.99403966456739234,0.99884142895587813,0.99266177611461137,0.99700509457939557,0.99122942065006192,0.99241848107343655,0.9992076249606181,0.99759755830448349,0.99967900949328325,0.99290896647923133,0.99462780949710239,0.99277410977281766,0.99517384898768335,0.99006107194283444,0.99445257119694186,0.99374673671738611,0.99020842014934751,0.99436889091925162,0.9911855772411281,0.99304268039484178,0.99121796630675396,0.99290831240695177,0.99739600163507225,0.99242492052503051,0.99981392843376049,0.99936589936598896,0.99991936570005391,0.99860104218615708,0.99771500556705284,0.99397188534672021,0.99613297228818387,0.99479371159119534,0.99946713592145398,0.99564939592505386,0.99943974133499291,0.99489570430729557,0.99049679328398077,0.99269784652810911,0.99325417581069098,0.99989641173007826,0.99177970008882388,0.9918365732670994,0.99641593096383008,0.99861570556009183,0.99935129776981535,0.99032629304430186,0.99686856034695215,0.99331924822674289,0.99180281987118601,0.99748672122511406,0.9962075201314331,0.99644302027465537,0.99016545586524063,0.99169221039593269,0.99838371436390672,0.99952109881449214,0.99208955365088436,0.9954321591048727,0.99684304442509608,0.99251388333210466,0.99558160447035493,0.99578514449784139,0.99912172463659332,0.9991538505554034,0.99159410324864905,0.9989550696109033,0.99943698950077309,0.99482458367009108,0.99929621197936314,0.99442695696984973,0.99910128067684778,0.99311723774594374,0.99383478091084887,0.99055308240446238,0.99802409236410283,0.99753716395678438,0.99211986949945008,0.991319342788755,0.99948741625254622,0.99355886526083148,0.99168300380303498,0.9939583137834328,0.99371185872922096,0.99885432677699204,0.99249405025421711,0.99021237418680896,0.99959687572229627,0.99843996312723238,0.99380631608567038,0.99288041837187579,0.99317285847649306,0.9925031784655326,0.99914924598200616,0.99488330797651714,0.99014518652265593,0.9972896321289525,0.99031550454866979,0.99202595839753538,0.99083325768419495,0.99216254573333773,0.99914058139025275,0.9997623687878251,0.99341642006812736,0.99593176468081679,0.99229090603649284,0.99304373137107815,0.99646711104297292,0.99967606110446505,0.99361490336376079,0.99895880234867196,0.99026606673462758,0.99190006473492709,0.9975710084013284,0.99001799148087044,0.99162980254393329,0.99711692589751955,0.99184886594971289,0.99867640019669313,0.99132205597928091,0.99118296072618661,0.99862798313816381,0.99039019074002121,0.99276153458080019,0.9959813470659018,0.99105212474490278,0.99604253073298854,0.99725479527784788,0.99516380766166623,0.99795933583970231,0.99007506654968902,0.99720506420335775,0.99688864468916782,0.99804114649036924,0.99945925772735589,0.99427148800026532,0.99873449102963485,0.99511746967297421,0.99113265124879335,0.99093659375231158,0.99354533885518781,0.99393277502550281,0.99241912636887863,0.99726164001679163,0.99560277270776776,0.99769450833399898,0.99612665834303804,0.99259331213764956,0.99300779010047946,0.99710157505974539,0.99798061898850021,0.99501249134448677,0.99795562060671905,0.99441438148915118,0.99781014156394265,0.99288835098236639,0.99351063323060818,0.99902958873270842,0.99054291921543236,0.99476819182568976,0.99708633748042419,0.99514010378891715,0.99992829150632212,0.99458357887132609,0.99162460235618477,0.99695542699612882,0.99113554974932228,0.99953745302870955,0.99912784139623279,0.99609463299002354,0.99481608811743416,0.9958088687319222,0.99851720771549568,0.99575380711153005,0.99809832812442911,0.99528432942945722,0.99186740867883594,0.99714141959484826,0.99247175135759258,0.99134314974627524,0.99054183424699327,0.9917125020298222,0.9960890055937841,0.99124798016692373,0.99777154700415183,0.99779698791314819,0.995110129799336,0.99903008734321685,0.99027747311961933,0.99823243750990298,0.99990286245653259,0.9933651266280964,0.99500889828182215,0.99430659058001936,0.99331964287945251,0.99401595882752813,0.9917386575060908,0.99980759611312975,0.99625573833988346,0.99470675050371282,0.99575077319859995,0.99552869720038817,0.99750910288475525,0.99072204310536216,0.99153503444320312,0.99511249129011037,0.99356751518106501,0.99907367145131243,0.99143936405331357,0.99352784162434393,0.99850522593547186,0.99906333903461197,0.99337835948461106,0.99904044949174531,0.99275168976747619,0.99023267781958979,0.99006010376220777,0.99154832934986359,0.99801831777540961,0.99483799505260218,0.99497358537458624,0.99865901461560325,0.99537789055672288,0.99183569697786611,0.99870825436412725,0.99341384125168175,0.99722771286044853,0.99485774066243626,0.99668019123672735,0.99858075177450611,0.99178809905203502,0.99986161001193241,0.99550440305156052,0.9980574184397778,0.99959779096020107,0.99225298244846794,0.99595962070776312,0.99652697066475771,0.99808489852939819,0.99456049560247028,0.99984433897904812,0.99812180085206215,0.99885835854417504,0.99545859344245402,0.99213815618936596,0.99720098760678944,0.99034626601846054,0.9914984500143339,0.99451078678669191,0.99328847117282748,0.99013793183555898,0.99069515934713981,0.99473663379620247,0.99477749288483008,0.99951101970151224,0.99397788941130061,0.99248927386898778,0.99228243231883828,0.99386384159017027,0.99337777212793676,0.994313902314232,0.99567217008160847,0.99830803399433077,0.99208901949534822,0.99824564356330614,0.99533491667862473,0.99452953311749215,0.99530155086040517,0.99380522117635695,0.99377633429937062,0.99925775959735552,0.99246715867832347,0.99740769541842256,0.99479726061834761,0.99737559308765433,0.99212447636367174,0.99946821301169197,0.99994145251150102,0.99510048695803754,0.99516551749670157,0.99791800000583353,0.99047329072674062,0.99452128285998265,0.99144394558343829,0.9984911379053516,0.99147746274273862,0.99390391782447063,0.9987152476434793,0.99738302674540968,0.99782861365465636,0.99976340909217198,0.99699293370532549,0.99523246730390236,0.99658106018404735,0.99429872312998091,0.99027917681552446,0.99207137371943988,0.99181585958605822,0.9932336903809702,0.99385436211678102,0.99110859129020201,0.99811076777600127,0.99375172534842993,0.99003132702638375,0.99329870987758107,0.99537475965857436,0.99342070955771467,0.99948915702302354,0.99817037140979659,0.99728337895351205,0.99531632140022419,0.99887843202825544,0.99521069940361817,0.9936153168133367,0.99774232277765962,0.99908438441492453,0.99120250740678728,0.99856987815053455,0.99625387606491655,0.99367588297286791,0.99346614014945389,0.99988681925432432,0.99334585919294061,0.99712112208722903,0.99574559103712534,0.99608101687671968,0.99863851245168944,0.99316557649738924,0.99198543219084034,0.99411403899243866,0.99672383717612989,0.9953885495742133,0.99901741183450765,0.9965200519931805,0.99199137264313753,0.99431736014608496,0.99298254320848123,0.99888503002631801,0.99496470617402366,0.99580638103860564,0.99889815245066116,0.99114291910568464,0.99501364454410712,0.99038211222682959,0.99276967536996075,0.99659286350326071,0.99533904781264526,0.99587623854222618,0.99574192130866879,0.99414081203912086,0.99412763118944247,0.99907309065049343,0.99014762189019001,0.99278623088339057,0.99702694530322633,0.99234483526325856,0.99506696480967549,0.99343021459102399,0.99381227969298769,0.99494241546989026,0.99064925044569396,0.99086312966457502,0.99358544102655633,0.99626188167215513,0.99234227820033272,0.99553799197372983,0.99203483699745498,0.99617487630005641,0.99813698203845647,0.99745014137323762,0.99393395255349226,0.99268692378876866,0.99053569815270248,0.99710170484053662,0.99375014074280199,0.99718473051514656,0.99774916675066716,0.99706158554851498,0.9916528109279733,0.99117069362677401,0.99912127671290352,0.99798846485729631,0.99319173861797994,0.99798819079647139,0.99329746685622489,0.9981758347746259,0.99204215243330451,0.99616661393423611,0.99767138012401035,0.99804936995407956,0.99069966155979661,0.99073446429763878,0.9994993895118206,0.99025254923386541,0.99158193960417129,0.99877483138621381,0.99286417224778767,0.99383295914436265,0.99687060398583716,0.99622582522244285,0.99141135705545003,0.99636201394082624,0.99512035437035462,0.99766939752488726,0.99721254797755365,0.99326611302440171,0.99928752246790986,0.99766672169063031,0.99732030637280944,0.99409194283843227,0.9974977303196888,0.99688698936131992,0.99407278866871351,0.99698612751695259,0.99239467744506149,0.99256647630980654,0.99520798389433085,0.99393326782281133,0.99219055449820914,0.99530001868765106,0.99842303662363296,0.99555916574264547,0.99662866616035695,0.99869208422370559,0.99816153661025386,0.99488424861603297,0.99793798211768103,0.99795780043558191,0.99469058291020362,0.99613633653613409,0.99309494024383527,0.99485484952793224,0.99687510488313247,0.99421201958098493,0.999867535420218,0.99295120392711811,0.99769856884125063,0.99527512133728013,0.99829497888157981,0.99439727616156193,0.99706014149567479,0.99994054385971642,0.99595276886586681,0.99506507020009427,0.9975279883319218,0.99867391226824109,0.99496672527734098,0.99644512002477048,0.99865046143148417,0.99240084873516898,0.99068020889146435,0.9954707395914586,0.99968449084713729,0.99558955837573482,0.99098746436994223,0.99818325001266295,0.995469223854904,0.99812005358625944,0.99402929607719137,0.99635536296744875,0.99107029450965001,0.99462533187968838,0.99724093758965815,0.99096360175982234,0.99613620977718242,0.99456928185702231,0.99782889892748372,0.99895951399421179,0.99566563920656403,0.99213332771814589,0.99811238031618432,0.99164498139759782,0.99576718179196066,0.99526738587737473,0.99943934787425703,0.995630434624593,0.99871365001693579,0.99491620410123049,0.99507551452962095,0.9907812259771025,0.99788744282915787,0.9900174142000987,0.99472983335817133,0.99895851968561511,0.99828718814622286,0.99933566193392664,0.99322449344724995,0.99071500090619946,0.99976048925717664,0.99153272319458519,0.99278183214196514,0.99728562804256471,0.99072823524336884,0.99150320646892509,0.99751148480204743,0.99600048348405934,0.9983110550423262,0.9918753150938423,0.99922245863313719,0.99334722909430828,0.99326991590702807,0.99656863138129814,0.99803988852743664,0.99576818771531661,0.99538196504172849,0.99830761766259979,0.99463248550511008,0.99064052947498205,0.99820668170799876,0.9992505137429698,0.99951811313459094,0.99529381922319671,0.99076265256164131,0.99928508537992922,0.9970860019817368,0.99134618588251577,0.99234902947876158,0.9953886623018654,0.99398855667017161,0.99466292014595958,0.99268097615203632,0.99400667081724037,0.99832430058684196,0.9988310919249358,0.99995274271397938,0.99335336902759241,0.99649686003355242,0.99671027863375816,0.99703882438493918,0.99601869517275599,0.99932209972018282,0.99038497005591264,0.99687583784451428,0.99655235844013024,0.99568297079729895,0.99663710048700616,0.99380809449876983,0.99095644219315682,0.9963451602849781,0.99686596679380068,0.99363192298564829,0.9926777809292141,0.99407578677587161,0.99789181575690322,0.99368662858305612,0.99212549392041138,0.99468351921128106,0.99417568460520267,0.99503363501839504,0.99289292498117288,0.99910444726436465,0.99976159671247866,0.99206410373689935,0.99771387289871372,0.99338569811272992,0.99988081290590369,0.99574068210535327,0.99569807202600524,0.99486883747649635,0.99709673732046433,0.99262192764040802,0.99497785735938815,0.99579535502126393,0.99761143685454079,0.99878239866142582,0.99195930876981719,0.99060944127868533,0.99369504344933801,0.99440832378808286,0.99988375472722624,0.99084249572005467,0.99505283806834721,0.99563181291400993,0.99066572391781005,0.99539256647199015,0.99773018769166077,0.99767981096320524,0.99346829899306133,0.99233066963146066,0.99753367716369568,0.99587303003075978,0.99590595890448452,0.99458927966474209,0.99616210151297646,0.9986089542537262,0.99706402638236591,0.99660770010216837,0.9917721904567145,0.99353843776056638,0.9966154498657579,0.99347151578781356,0.9909603847718399,0.99253692732403054,0.99245096403259903,0.99952432889788856,0.99528018260189233,0.99298171173932104,0.99341485589832945,0.99158390231921778,0.99860707940716176,0.99361260933590334,0.99086988740573612,0.99741554926785503,0.99865347132567894,0.99705829421117387,0.99541273405447761,0.99700822089356722,0.99015737239790846,0.99006225166386919,0.99041378598019969,0.99374308167441794,0.99090028290934018,0.99901405467088544,0.99823331274917515,0.99318312992327384,0.99545024923320602,0.99597023218366243,0.99381451959546185,0.99297765398152427,0.99800700027859623,0.991250018786482,0.99223473771975068,0.99388316830506429,0.99503020636894457,0.99817605975965917,0.99209597037582375,0.99981077584727829,0.99792260031187185,0.9986190363932016,0.99251311006711262,0.99083812501794777,0.99353846424473169,0.99337678218680614,0.99061400636096997,0.99236105553641729,0.99224980569658172,0.99317773612128379,0.99114403102157567,0.99984349961539032,0.99315958436651408,0.99548196059427707,0.99998311486234914,0.99749176335761736,0.99731616732101047,0.99841767551710869,0.99147511188893256,0.99166873016259027,0.99298354830071489,0.99903007302556412,0.99281051504943862,0.99105113618199181,0.99594220360921271,0.99745018584177148,0.99552703539816756,0.99729299001893379,0.9936352452817121,0.99717397849111555,0.99904216063748597,0.99133418420677488,0.99707946716060769,0.99445744418558546,0.99682398369493963,0.99508736354426319,0.99209009434830742,0.99530437240878911,0.99559687982732659,0.9985963107443887,0.99312890132486698,0.99677657135848019,0.99725726877922771,0.99805757673947071,0.99230884571306943,0.99531189739454395,0.9995483591549168,0.99955800247114224,0.99663250984712948,0.99066670280990332,0.99014101628165485,0.99541463878652292,0.99315342453984101,0.9928163217748599,0.9937151261642303,0.99480852243462459,0.99541361094435399,0.99684795290522177,0.9972205313074558,0.99208237559465828,0.99781162023058112,0.99608100177683423,0.9914731474068782,0.99326143555669177,0.99784066940689087,0.99880759122084217,0.99216136462011495,0.99133381269977305,0.99932648529868007,0.99102397544121201,0.99888091087954833,0.99959020987485647,0.99624969916795303,0.99152886712478916,0.99003007059532355,0.99152522828521317,0.99678043341142542,0.99155537029186658,0.99953385192255073,0.9908956044335745,0.99759083927685832,0.99454379121804559,0.99178906569147696,0.99668828802064058,0.99157966957642463,0.99831218552460421,0.99033980285078071,0.99790156108698591,0.99662261325279222,0.997126396459043,0.99106824669420091,0.99472550242887392,0.99385137876728147,0.99708517293377308,0.99902184899147572,0.99957963675862593,0.99831315924837416,0.99505724982370414,0.99849467487075461,0.99305022614468519,0.99057228253035412,0.99789732199786418,0.99638826782709433,0.99236363327263666,0.9918155938946579,0.99234279401996128,0.99945776376760187,0.99464652926691088,0.99484183359200384,0.99619324862117575,0.99212371355173012,0.99615267873283564,0.99062083042894811,0.9912261163709597,0.99465302110947318,0.99123781152088919,0.99113170702171605,0.9928443054826751,0.99520844359574512,0.99735659228909668,0.99747189600350217,0.99411266971499468,0.99090364292485267,0.99828898999371118,0.99193020966098477,0.9993502060476348,0.99076916640915536,0.9939902675132628,0.99179044143398132,0.99052206153139821,0.99816788497829601,0.99571128979893098,0.99907532609936289,0.99747595209672624,0.99429777535957564,0.99320211534723335,0.99775306186225754,0.99492885026224376,0.99301353434738937,0.99221630590471044,0.99110692693874081,0.99939179811161261,0.99709313982049141,0.99482257061278101,0.99139999796294564,0.99539942083286215,0.99909020831221662,0.99221034993580259,0.99680423024880982,0.99095935408010893,0.99157375034684636,0.99060159397113978,0.99501314869702207,0.99819426926229471,0.99270560418386822,0.99771401161930751,0.99261594257058017,0.99195676163845348,0.99396728493126252,0.99895028641838668,0.99995578220963011,0.99684231710463667,0.99896182861620841,0.99656780795563216,0.99357813886771051,0.99990282159418475,0.9971755158834108,0.99033688421008714,0.99924855750695218,0.99424210850290395,0.99052894094699828,0.99489934673676106,0.99321118620645554,0.99583446118687002,0.99303930774953009,0.99083261425353986,0.99331461662208309,0.99660088614967002,0.99564242371942402,0.99052299989405812,0.99894251086672581,0.99556774855150121,0.99172205686062598,0.99711954046619145,0.99217504429681247,0.99487861836091918,0.99589407225420445,0.9961753888510696,0.99504782509729384,0.99213756194625002,0.99381871797588861,0.99645594095978018,0.99685326506632654,0.99380604229955816,0.99516885142847733,0.991037024668593,0.99774233851078109,0.99377473770183555,0.99342131040790349,0.9926283451964697,0.99364020340800752,0.99241261485409438,0.99729300931866394,0.99622861753720648,0.99757749047995004,0.99522875474587569,0.9914489626006836,0.99413196425358341,0.99458242457285495,0.99217770257041016,0.9918475850785361,0.99858467761201197,0.99856053993068328,0.99860922153054454,0.99547070669345039,0.99283910620985949,0.99022795051946444,0.99615331316083011,0.99012860466474506,0.99779411551730868,0.99937256218693304,0.99954751823377774,0.99725551117212208,0.99919511284542684,0.99369876289613446,0.99384777221575848,0.99429632179888294,0.99162626751548744,0.99137103178944419,0.99796671743241949,0.99343036738715085,0.9911380579622795,0.99257835359424651,0.9915880841516973,0.99519356258184921,0.99355792536397114,0.99321888458247642,0.99847673791802416,0.99405695442042363,0.99582722923573985,0.99180964421620499,0.99586119044714372,0.99432821001439353,0.99925745404933508,0.99372898782644159,0.99575020761407007,0.99513830248852608,0.99009976399769173,0.99282889329550528,0.99809296351648213,0.99397241267867265,0.99608747476432846,0.99811651086585851,0.99479865683393132,0.99816133444965416,0.99268413318746718,0.99149772411167136,0.99258070579600732,0.99264918724981765,0.99480961438495641,0.99058720008103707,0.99227318749431592,0.99459512566709307,0.99048597442328468,0.99045600595123784,0.9916922489069262,0.99830376376024021,0.99258420465782959,0.99236254718905037,0.99197890269401556,0.99273509848552333,0.9960563249462514,0.99939909219437117,0.99823621272337459,0.99828127794258592,0.99810533896909648,0.99572530273470905,0.9980215679244725,0.99608976350280265,0.9970804256448077,0.9954766757344915,0.99859291923004034,0.99098057648015414,0.9978100641019495,0.99382082431445196,0.99203776470832339,0.99321096795421115,0.9999324392185549,0.991298510729827,0.99093615169303906,0.99462693899313193,0.99650553478501902,0.99757887537178369,0.99215155010666878,0.99454359778539392,0.99243848710158422,0.99689785107719497,0.99339653834514174,0.99426390625607597,0.99197842553437732,0.99799319431321787,0.99506782696284579,0.99286608305610502,0.9995066290990321,0.99321984377208283,0.99394567759123076,0.99293059931632521,0.99584406389916358,0.99963282708975021,0.99606476597076843,0.99099083751578976,0.99714571399899898,0.99951850382259111,0.99401496202323658,0.99114994538315193,0.99858605156655589,0.99018511354839078,0.99920392933699886,0.99963725304402806,0.99750763799565634,0.99841726190922386,0.99285563141409916,0.99806823638088482,0.99796736101439942,0.99684795933070502,0.99142751553920727,0.99355985823311399,0.99504499735390606,0.99245384573840489,0.99610626880201303,0.99364838521316878,0.99703726356291111,0.99792620393235021,0.99383301598893592,0.99593101560916564,0.99728610569342646,0.99290043590536314,0.99887195949473551,0.99842465763567601,0.99055842737743649,0.99793236202460855,0.9913820251834905,0.99471788656676585,0.99862978673403546,0.99560832776843222,0.99421704310053982,0.99679708841275283,0.99411273044745085,0.99000670431652804,0.99959045429232019,0.99561941907659823,0.99750170265813687,0.9966546943515292,0.99980899010540314,0.99850406357488197,0.99233492448862504,0.9988308897713204,0.99096217136811815,0.99262149135475819,0.99384543745825327,0.99008403251057076,0.99500222523830695,0.99168253528287797,0.99570198846042179,0.99098710408658319,0.99976533936318468,0.99007751297091673,0.99492805893838476,0.99628815178276808,0.99400842775851694,0.99521209054167337,0.99994890764107924,0.99323613140572331,0.99260971904082895,0.99692554230912311,0.99665258179235316,0.9905779571143174,0.9996416018948362,0.99231217590130283,0.99671083923853865,0.99247530261969563,0.99299144938676076,0.99505302694728692,0.9953107341376457,0.9970961264944801,0.99001463029666503,0.990473039068968,0.99883700437516365,0.99029794421306272,0.99404343414692575,0.99567668088020078,0.99301175468877045,0.99482697476697757,0.99950486534348404,0.99477418799577255,0.99460602123315844,0.99899353304194816,0.99287618746826078,0.99396836236605535,0.99084618178925987,0.99157983270687022,0.9958212311729332,0.99090315507004434,0.99153053388115042,0.9979865143157467,0.99073086996850213,0.99703735022777917,0.99580506721587503,0.99303032818571435,0.99286986047891856,0.99969125647581181,0.99361883892097391,0.99445847989897129,0.99724752207325351,0.99602776782925095,0.99858225848744742,0.9935388204981952,0.99347880899288832,0.99000012140903859,0.99961649431476252,0.99060816450258993,0.99953473696534079,0.99592340187258876,0.99206016768613459,0.99601190429146702,0.99768168036673355,0.99532106456151515,0.99615470326289257,0.99423723491128924,0.9991883059772565,0.99473911151837979,0.9960247700596635,0.99234857403073784,0.99702068014286294,0.99744914456894596,0.99743600584575953,0.9985790862473678,0.99385063762039294,0.99637520216816988,0.99251478642677748,0.99166434810879645,0.99036756061439635,0.99439130119790153,0.99472075658098602,0.99518259299933975,0.99645007825350107,0.99318236488103773,0.99278942045597829,0.99580999957970784,0.99517809124298529,0.99742992439135625,0.99245642074845009,0.99078259574344196,0.99297478424434482,0.99232667106959149,0.99650409041556087,0.99917691328832181,0.99891304170826567,0.9922140661163118,0.99861020357252139,0.99527786647363214,0.99209894081149896,0.99675911868929323,0.99399054004919951,0.99074151027526491,0.99887794236220584,0.99131102108965063,0.99256502354764309,0.99925996417364082,0.99966704918741034,0.99764874596616204,0.99619095435818283,0.99191360706692233,0.9916532923200494,0.99118189915255916,0.9982611641106619,0.99524876236875381,0.99655627530524038,0.99309463028411538,0.99546397940814824,0.99292062407966164,0.99251304154026598,0.9940165935442038,0.99040152368593104,0.99699629119953415,0.99233352071611447,0.99646640833025146,0.99361076822312544,0.99854778831957602,0.99633391687677919,0.99589461301914162,0.99985999487594723,0.99060040589464871,0.9920713593319449,0.99385637669432325,0.99757008236349021,0.99540846141315897,0.99886239482316463,0.99137119762278325,0.99472182634244832,0.99835357259704494,0.99158897638125065,0.99417908099220897,0.99810839697060427,0.99437700571081411,0.99476460097469499,0.99943960184846281,0.99116275906768581,0.99372772323082736,0.99875633044834011,0.99010721048080452,0.99635122857179703,0.99707999547267911,0.99097271618428595,0.99651788349039572,0.99908348613005171,0.99841954518138121,0.99035012518459442,0.99850626314348101,0.99039745717224947,0.99632451495152174,0.99988469035439964,0.9933410678614788,0.9968611298414084,0.99140740698735419,0.99376651519263537,0.99611391656571369,0.99504273819127886,0.99385922095772128,0.9976341933130799,0.99411689282887539,0.9904886990981977,0.99180189804250485,0.99725855063517976,0.9976031607763669,0.9970125792405875,0.99607615939071814,0.99458844938755542,0.99040593879138583,0.99582236578521388,0.99284139262258819,0.99339055891390815,0.99716350683000476,0.99170608349364153,0.99361352015512439,0.99399153480944247,0.99704049042192566,0.99919685221207577,0.99317928988226456,0.9922602283726959,0.99020949072563558,0.99360970594409181,0.9955013018037574,0.99324529549498108,0.99947100203223149,0.9908357375947614,0.99397915957333893,0.99512614267838562,0.99144418635281062,0.99832781535639126,0.99513224242446319,0.9990452303631725,0.99491737823023252,0.99723523556934734,0.99334899019352441,0.99382957528937654,0.99371063727048248,0.99297987258445308,0.99159722692045704,0.99691642469752673,0.99176788767382684,0.99880368883634985,0.99320846928402762,0.99924455855862282,0.99274909425408675,0.99081244645686961,0.99903832025192185,0.99482624750704807,0.99382830402150324,0.99128252228623792,0.99361941987311764,0.99252885870049568,0.99179156154934756,0.99883873134714873,0.99833805667789954,0.99196257287800937,0.99350321993884072,0.99121341513470906,0.99823209729686657,0.99543640620955198,0.99747211697726457,0.99314589287949906,0.99007938466992551,0.99382002707262984,0.9962340784272935,0.99791460105561813,0.99482721080570435,0.99839095563897162,0.99128103379280075,0.99680168366221522,0.99221999932364391,0.99416880315952239,0.99573125565384046,0.9964282552314182,0.99317792366390933,0.99214060043384478,0.99032654158478395,0.99617209080654845,0.99113146074179348,0.99675123628138185,0.99561073067796413,0.99600963383768293,0.99578773824422295,0.99346274873754081,0.9981211812841615,0.99364364925726567,0.99728084068279643,0.99171463925726622,0.99527270652197974,0.99795282032761556,0.99584537585245114,0.9949261764417705,0.99629633154620878,0.99354587389306392,0.99834237032125051,0.9977498369658091,0.99321435322932228,0.99236781128474738,0.99183648967296045,0.99844748966581232,0.99065083127518649,0.99816445313472857,0.99873979355251485,0.9984614373922488,0.99393708028546068,0.99370149831743537,0.9905840269376649,0.9938319120932585,0.9902842770683854,0.99861248614160059,0.99931986040438314,0.99463862801324365,0.99866977882709962,0.99570491162921859,0.9979008608373664,0.99695237278705295,0.99126871255170834,0.99960821180644932,0.99201549560172875,0.99546258343002803,0.99852088033541964,0.99636512916638331,0.993839932220692,0.99570835396308566,0.99836765015781836,0.99927019435764497,0.99977791505806612,0.99863679193079635,0.99305504847211901,0.99169822265067598,0.99376471756361628,0.99178681156214488,0.99690546722099993,0.99243480016633567,0.9998036400618846,0.99751704173913924,0.99993533875274843,0.99199114460367177,0.99394866884454014,0.99982842220287693,0.99213201006806218,0.99709567736019189,0.99347574028922614,0.99175418598984943,0.99860599688785612,0.99858211556700871,0.99950832049339633,0.99909320545089619,0.99071192474338943,0.99961566909647981,0.99724949509700989,0.99570542641052628,0.99879801939975721,0.99562822945464891,0.99435981922657901,0.99176643535166931,0.9951974684118905,0.99513627693411688,0.99404747449305997,0.99548417070439343,0.99427862795989497,0.99165260914452158,0.99838046257820812,0.99493843648479197,0.99506790846870274,0.99535063752644926,0.9985414488051978,0.99198787281982093,0.9930277704383349,0.99623106596988975,0.99573654937194611,0.99026312762318269,0.99347678755218516,0.99318759079167152,0.99525951377584532,0.99532946236068942,0.99533588444019805,0.99326741061114709,0.99615642425638462,0.99602130220778173,0.99762004165205176,0.99361896535632344,0.99367986027709698,0.99134907144593953,0.99302812685243547,0.99913722123272786,0.99261819907221915,0.99640494777605848,0.99791515970714484,0.99658708264273732,0.99644037204902336,0.99675262797351849,0.99717825556508632,0.99744483255524652,0.99765547385210729,0.99842093355601302,0.99445662923177935,0.99516605502096023,0.99204806350764096,0.99151853519698419,0.99063464111798794,0.99380626210462764,0.99025696341740321,0.99820937300532053,0.99705271553918695,0.99171347242444685,0.9965545524143683,0.99329942286641937,0.99568005388403591,0.99966375339879254,0.99258580527129159,0.9980621196910876,0.99407318185939286,0.99222165716581134,0.9915122016541148,0.99999673149015733,0.9904355105410656,0.9906373232496839,0.99159328849738537,0.9942544056717153,0.99411882025498222,0.99404297718798229,0.99117184473578424,0.99400252853640325,0.99409384382460708,0.99111911448787826,0.99976704482376966,0.9942426833764475,0.99949783405367421,0.99613484527927354,0.99395162215024979,0.99987962480147574,0.99898777819531925,0.99219878787718507,0.99921175462562428,0.9935404566636693,0.99804831324146992,0.99266215254781698,0.99123068567869788,0.99291468883759315,0.99835189007264113,0.99188370707981688,0.99240520852093883,0.99022857332571546,0.99745890894034273,0.99449359244055224,0.99254798605779071,0.99243615828532283,0.99206896940607947,0.99868639675385484,0.99088268393469559,0.99528557907883886,0.99202464683536418,0.99914043753392856,0.99352870680866623,0.99973832781933014,0.99595424721821535,0.99585367421028947,0.99083871419284753,0.99118963481267885,0.99550336794580196,0.9992643993913235,0.99004322591301863,0.995935014178019,0.99312314713242666,0.99883526940624578,0.99652964300224811,0.99424433483969321,0.99061263425026036,0.99607196661163655,0.99644510626119931,0.99070756508799174,0.99265217516234139,0.99924679949476169,0.99630382153868924,0.99642015210816048,0.99430062601353575,0.99104489218614555,0.99001966848075551,0.99700155048310313,0.99479183495434231,0.99395764743289305,0.99747828897510649,0.99084896257773114,0.99745630326025581,0.99214457420638624,0.99306687182440589,0.99248774015039276,0.9975643280593024,0.99226630472628985,0.99154126487802063,0.99702934096546514,0.99136462548263415,0.99754077170028121,0.99553207871333227,0.99547231904738764,0.99561891352610243,0.99553428076598582,0.99109234342937103,0.99630509732768147,0.99440955478493886,0.99985358398050417,0.99939804061516369,0.99634214777635666,0.99324217373452151,0.99600395566848621,0.99078727191208671,0.99909096038708278,0.99706450581420392,0.9957077955303979,0.9905883502541617,0.9933538637758268,0.99755644180541347,0.9995704344377434,0.992083003767119,0.99439879124858388,0.9996701157492448,0.99601482442911204,0.99196881883642174,0.99720190333126157,0.99733836771218454,0.99678710460179409,0.99834668050042796,0.99212737733894285,0.99947486218314052,0.99081615205628426,0.99950226036414735,0.99274451957781074,0.99509139455482221,0.99867431630308734,0.99829671828314981,0.99559301130466482,0.99726756718742893,0.9946458130839555,0.99792911834991838,0.99430257872252192,0.99259073302786682,0.99773908519088195,0.99689060744844771,0.99653855030964333,0.99237087007314406,0.99657663499337756,0.99482127982401058,0.9916100479919685,0.99973770898710068,0.99432333590129041,0.99352193616066498,0.9950503557086473,0.99686545831226014,0.99375294742177989,0.99991377424228678,0.99480324197024195,0.99047978111425694,0.99342387160548795,0.99697904405035709,0.99777068722328843,0.99518836778824726,0.9938390546673147,0.99889415601199516,0.99711485264786637,0.9997446354111631,0.99480885316308909,0.99259420148039168,0.99729107304354936,0.99715621133876176,0.99937465482478327,0.99918985594114917,0.99517202676722294,0.99708311495395463,0.99902978441660728,0.99668407589526731,0.99218170820031082,0.99693058911872634,0.99873132012121335,0.99883578072337986,0.99082684663277099,0.99445373268217618,0.99465356879344513,0.99175538463113855,0.9902192762848302,0.99992630218139422,0.9980819972212126,0.99012360403713795,0.99179191579601167,0.9903221009659704,0.99165375709666403,0.99601492248757229,0.99181585301623443,0.99759344468921674,0.99691367421824573,0.99583700047029766,0.99213742138880612,0.99879972520489713,0.99298075043116762,0.99984419999771001,0.9976825830772742,0.99780826905709219,0.99501099979661711,0.99090364643325957,0.99909373864260986,0.99025364060450694,0.99057847121815568,0.9921064620863046,0.99436708256014128,0.99508329604580648,0.99572197514227778,0.9978770114786415,0.99565010657185016,0.99352670636951501,0.99823734181812074,0.99941786936749044,0.99126086218507403,0.99128163252444257,0.99300086769001605,0.99015261141754218,0.99002121816993549,0.99351837912726748,0.99951012245728843,0.99660049249803206,0.99766222731426912,0.99514215683787566,0.99751229031551514,0.99685768394093255,0.99138850944817325,0.99940052267221402,0.99349284611502309,0.99359456369472854,0.99151325430190795,0.99184199624683589,0.99496671000983428,0.998863089657685,0.99808571390458567,0.9912794279435011,0.99632805503188726,0.99577714239668169,0.99688332651697698,0.9997203412669915,0.99639506260790656,0.99536943901629749,0.99729248795822023,0.99077441888310902,0.99859759727744057,0.99369732531301092,0.99626892682564328,0.9958234378747497,0.99180573308281206,0.99768222027726772,0.99573249219383975,0.99096275801240186,0.99163549797579575,0.99887471609452205,0.99905961133945076,0.9939936182164808,0.99077335046494519,0.99897696713832573,0.99338500799023055,0.99591231515771195,0.99580559490402276,0.99048570623618948,0.99475187633199247,0.99104325143902261,0.99805239948557523,0.99972948948344353,0.99530725062714076,0.99153686756603232,0.99227287598642711,0.99263927964834842,0.99709414028451471,0.99420965955456875,0.99148617686192997,0.99597934282733447,0.99658050369297291,0.99603778489674111,0.99633919152563388,0.99169442493870108,0.99229283323677653,0.99087923749876272,0.99182209797823129,0.99187832590762615,0.99166335874269995,0.99635425237855968,0.99149592129803243,0.99929662318700407,0.99202727126575585,0.9908291548246283,0.99954863405152017,0.9913480615532182,0.99015906748226934,0.99091254172313892,0.99957418597936254,0.99607311902669604,0.99025689715111609,0.99169502685049149,0.99971013549982335,0.99837195768764797,0.99297565916234276,0.9959708496935461,0.99525020569523492,0.99726722581268379,0.9986225297933633,0.99729993462757904,0.99896315264754176,0.99511068651856149,0.99188991652239467,0.99315272597341864,0.9966065348151899,0.99845756210886127,0.99941136815676002,0.99004687895617172,0.9997560955257655,0.99600862605186802,0.99107924461169428,0.99431103569899915,0.99178881335623492,0.99926009451316966,0.99746476771450554,0.99384780970007158,0.99049463572779806,0.9970168497005012,0.99071277748648634,0.9989780392162213,0.99489076605809268,0.99943588812639939,0.99849808827365094,0.99727949364543955,0.99996941742244994,0.99319112734267745,0.99004392175093869,0.99480715731279201,0.99542553204081108,0.99021849047384947,0.99861262041091781,0.99255548937849258,0.99909048110191334,0.99300478124227742,0.99845266022416812,0.99832340395024532,0.99878784992492853,0.99776911043533167,0.99746107620226432,0.99612317198762712,0.99117477629961448,0.99674358059059054,0.99508971349710484,0.99813945326065223,0.99168814876189337,0.99772783820443389,0.99831028393313026,0.99673538534546036,0.99927918053086173,0.99750731924978664,0.99169467478057627,0.99970725277432126,0.99883648949374881,0.99245252359513914,0.99387824106764955,0.99492573925515615,0.99382531204649105,0.99753591268706343,0.99271425776616151,0.99713738644013339,0.99867796356330552,0.99600773794766118,0.99741428313105596,0.99113251599470109,0.9944782794363024,0.99270862757623379,0.99709567898984341,0.99198534273461203,0.9994423684869026,0.99270406943160849,0.99174100459772996,0.99381516020681981,0.99244571825651307,0.99510883510172998,0.99640865030707204,0.99885273039829592,0.99808531643490705,0.9991093614273181,0.99853285667473546,0.99627149821320593,0.99398077839932075,0.99046406299027845,0.99115482259957721,0.99608123224215273,0.99080272919637036,0.99948554016744673,0.99360431569474217,0.99984546882809022,0.99828822660207928,0.99599239078591528,0.99214588247898938,0.99183179841374258,0.99790961222435992,0.99031134809452059,0.99654622848496954,0.99076895889398642,0.9902614383124444,0.99854039228116209,0.99785697707826082,0.99809396901845671,0.99922470788282691,0.99873214362836182,0.99492263898514399,0.99904035366823574,0.99833928250643211,0.99475529547591834,0.99131340550030977,0.99211190169314267,0.99759707496148187,0.99274043855557448,0.99925643605724557,0.99897204307174725,0.99832624302902351,0.99724585297252211,0.99259375223901214,0.99450144874377433,0.9921300046445054,0.99629821278799136,0.99522262553104246,0.99298389371001161,0.9939731737026537,0.99277376424478925,0.99479061873144148,0.99476869256871359,0.99993804251923246,0.99355127948907485,0.99604418010096807,0.99228073857079169,0.9994481415507076,0.99677534842141502,0.99490393165190472,0.99831092257726606,0.99437902764274089,0.99238026309817606,0.99772578309513016,0.994525269185497,0.9974399216050347,0.99143527445911028,0.99442859773559722,0.99663218597251357,0.99052994751057444,0.99631715573159185,0.99087813065108798,0.9939153933672169,0.99797906163530192,0.99215372568214122,0.99655516815491596,0.99615638537988349,0.9903233231766766,0.99517149131029359,0.99557011126451422,0.99223950118184345,0.99719729578258631,0.99308466264861217,0.9911039701059996,0.99483867350214039,0.99216625706912576,0.99621437941618074,0.9981093911558131,0.99702041064971847,0.99138648013858122,0.99878827309653972,0.9988181101278788,0.99047406786564718,0.99923463706088222,0.99280672596297648,0.99012754287926297,0.99663161860700744,0.99377121543821734,0.99037604073658148,0.99167794909660612,0.99626353305391824,0.99540168776892701,0.99258657286975249,0.9910165226839408,0.99038957245954518,0.99039263819491352,0.99636939265371649,0.99933135790551963,0.99085694735103891,0.99971494728806798,0.99061271260856187,0.99360891927637995,0.99822243615923778,0.9964414097994736,0.99658829447256325,0.9906794050681782,0.99510692609068541,0.99207891204272836,0.99782772011439758,0.9903959988715989,0.99334265940942212,0.9946931237278317,0.99636482254279291,0.9915008171483588,0.99096015164320517,0.9999120778867977,0.99711945897895915],"expected":[4.3738744855850094,3.8902546265235265,4.8035416338715953,4.4327808060224676,3.8331737202787557,3.8804904340792232,3.764301357691604,4.2202041116067015,3.821833715941469,4.4590710824653597,3.9089905951225346,5.565828448382141,3.8631690062064714,4.059733755797259,5.0009683611999929,3.7319916909482012,3.7216875410950898,4.6557479750447683,4.141071346033665,3.9051289484409959,3.7836141256006295,3.8589031727680818,4.60140986117207,4.0889176208664164,3.7863793805176149,3.9124436798078372,4.0413987978194603,4.1506776224216306,7.273156083415846,3.8049848504519774,3.9131233084831711,3.9152209449789077,3.7194838711724816,3.8154949413507819,3.8145946626201295,3.8708629884066243,3.9469058323142461,3.9063735214400062,3.8966728175272438,3.7350183430284281,3.8247412564051393,3.7961462497443681,5.0641732387955409,3.9161158541644103,4.2660859710166923,4.0173587036001113,5.3246061494219061,4.3632749387084013,3.9811390027737357,4.5668828877199186,5.0982231358852452,3.8804412208140713,3.6985304516422404,4.4673362085167607,4.1630846684024965,5.2780784334805873,4.4978349511064897,3.7240703318382966,3.8269190429891995,3.7372729119227155,5.0364539728470543,3.7551099801501282,4.4111414086624192,4.1167806250165766,4.5658334799032687,4.0652538997744871,4.1181705027664561,5.2200585985275447,4.4770019773807208,3.8139747130567141,3.8932412103635077,4.3346330478565385,3.8208081444362185,4.3456756329749977,3.8810832887676683,3.7390626260096314,4.1312303733098714,3.8385385903620892,4.5758835098238952,3.9855815535201753,3.8655232730466191,4.2684552759101839,3.9508068570906398,4.8363813968631844,4.6802960045394366,3.6963868924542393,4.1687733412108798,4.3678975043272281,6.0492075467181037,5.4572422629744288,3.8083589674218761,3.8208769307718757,4.5680194441760174,5.3296991093762411,4.254708003455387,5.0810264240767724,3.8373429292422103,3.8417151811985568,4.0157197712467676,4.5292209121171023,3.9479255072187081,3.8265144360324439,4.1494061839538832,4.7073657914790061,4.4964517714701495,4.6016048479508926,3.7505471402882553,4.4178980499737888,4.5516579036032958,5.6179232225489537,4.6097474893760966,3.8518078349722757,3.9124305456024508,4.2693179827705698,3.9742069779838003,3.778658481383772,4.1167456876759436,4.4208793215310642,4.29459202523205,3.742462367390381,4.3692157762070503,4.800209555277652,4.399952462438689,4.4557258577198571,3.9397797246105388,4.0868407712780215,3.9735394467062259,3.7827474156183349,5.2539655283814213,3.7558889252735943,4.1175972073205731,3.761184108277797,4.6375991582962435,4.0901470049106079,3.8557579894174845,4.0362255447750819,4.178660827209951,4.3041389807469308,4.1358443998675911,4.0927511457620751,5.3427499227135709,4.0199767749633644,3.740061654268477,4.0888913021421924,4.0397036677609757,3.7464346944512967,4.0611347380433607,3.8923423831634874,3.7423747535697123,5.2274693136849661,4.8645142804958237,4.040966058409702,4.7683492599197166,6.3406778774527668,3.9820376327567741,4.2835663438437495,4.4515800864992432,3.7117019075423885,3.7751501236406821,3.7298991606108873,4.1753696292319953,4.0754398598138346,3.8451060711237495,3.7540158684232634,3.9879720923311206,3.7869426807282971,4.6189698739048453,4.6847195884391448,3.8037195797915366,3.9608581965125929,3.8749673743956876,3.9994542469972596,4.022884769327459,4.594159341236689,3.8997665324212738,3.70532666057023,4.4913897819451085,4.7438957118570224,5.8756190762979754,4.4258339178180774,3.7813414045493388,3.9818658297897476,3.8294435226015886,3.8820556839389728,4.296946577573789,3.9128522712242084,3.9288098060143191,4.0349023933664716,5.506515114544789,4.4465276180926097,5.4807001018951889,4.1579751974251415,4.2076381165328858,4.3124584211945463,4.6732678840902429,3.7514595431509141,3.9502498469256455,4.1520531444527737,4.1914760477433646,5.2704081125780933,5.7935352794401886,3.8614540170091405,4.1021338266332403,3.8714859063537177,5.0448178392923868,4.5574586942812072,4.328176079956453,4.029037553940424,4.0236003253397268,6.0411144833449555,4.201164952672813,3.9332468036094479,4.7825580677599859,3.9730533939677093,3.8052821061982502,3.7306679160494132,3.9448722637214471,3.7046658636257659,6.1079152547130517,4.7441213970242773,3.9506384603439595,4.7592902278559048,4.2292662091697615,5.4038351865195766,4.8474518888500606,3.8127687026215611,6.367152939169924,4.0772251128581782,4.2210320885486912,4.1520403088732731,3.7524128940982933,5.6232482065338134,3.7138259047140862,3.7832450749441247,4.1731186818642021,4.4991239362333886,4.1108604006654881,4.2964822664488347,5.3226483121963843,4.4636049783297969,4.3762959399573225,5.2254725743839963,4.2346322865679804,4.0346403783939948,4.0629279566030227,4.1880685556912614,3.8446174240020325,5.6689266244481251,5.3230298663463556,4.3754039895161219,4.0808533705065795,4.1158774989689011,3.7108365466497752,4.1031645935341858,4.2871444699044341,3.8397444957216225,4.0591929379551299,4.9584194684580316,3.7257275935363303,3.7282754598779415,4.793321120531524,3.7270638126044386,3.8941000542628177,4.4271200154731893,3.8248047084712193,4.8266224356461409,3.7554821626972861,4.5979485273042782,3.8800290523195606,3.7958545825014793,3.8239892922830219,3.8574577812446962,4.2193622813521738,3.9885509912740411,3.7294900046000037,4.1598760098489764,3.8551324192458503,3.7080736548651934,3.8595222029218519,5.9787985814713194,4.7500462131508057,4.7094375061018763,3.9867861389337413,3.8224532213292006,4.3959165334032893,4.7151981133058767,4.1542185435444257,4.7198183879604443,4.4551148318523781,4.0786492210963257,3.7554721094928607,4.0130947849509422,5.6081894163963506,3.9237152991463287,4.6338801057587196,4.4281673171921394,3.7213397619271329,4.6335541338641422,4.0067233741004564,4.9570530748176136,3.8907436236884796,4.2599905807855567,4.1891495843866657,3.7217441953927248,3.8251894512540932,4.0621218762139382,4.1257110613941137,4.1693103055833092,4.1540430248047242,5.2766011284328949,4.1499537086658265,3.884697487358816,3.9904605319187474,3.856196226704486,3.7134716986825635,3.9576541032439869,4.0531259318562567,4.4288511936379669,3.9551246840894079,5.1882769326791802,3.752196243801583,4.0959311944082399,4.0008734410735247,3.7364514674769036,3.9926750680904264,4.4774151546277281,4.0928159953793655,4.2623885776288502,4.5087968574141435,4.0917817189724381,4.2946341810939623,3.9811447627701244,4.7185104959497597,4.1720789902819311,3.7221457451228361,3.757995462681309,3.81840212590531,4.0400888024445702,4.0006587314496311,3.8655499309396308,5.2796055964460606,4.0236645882496376,4.470946845410519,4.578277452165044,3.9935726520475403,3.9217909306491481,3.8964942324831875,4.1996607598667071,3.7257616361782344,4.1543108555839625,4.366199968213623,3.96340432009272,4.0460041654861705,4.1277100187753648,3.8060174064087975,4.3293922489738144,3.9717085887811487,4.6223918463890277,3.7870515891849044,5.1338215074085483,4.3873809141789373,3.7670436180634423,3.9231854285727548,3.7316909017041358,5.1107575954841442,4.2413865429274571,3.7042020888649345,3.9698317707221094,4.5733749995362816,4.0021531010089468,4.1843122803893644,3.7177865670810673,4.0792806902444037,3.8264916105977629,4.217237492695709,4.6998546413149622,4.3394949383313355,4.9767721769382209,3.7447311899179052,3.9255881753195956,4.739791007101501,4.1688453957874518,3.7027901361981268,3.893683357895878,3.8682134589378272,4.9503037802712528,3.7937831891426086,3.8225805154131387,4.9928256582947412,3.7685016305015528,3.7305614311321285,3.8902430036919733,4.1271428302034554,4.4080150373375542,4.1985812264409406,4.0194973371012903,4.2183228058870199,3.7122209831264907,4.6896525221015741,3.7483249499865963,3.7241121340250194,3.926742331480602,4.539017463348733,4.0688605300645548,4.0688089469494724,4.3253624644856252,4.2839361979447244,4.2646454540497549,3.8138042756860271,4.1439562083083734,4.0841888060182301,3.7228899791677628,4.2974209265063985,4.5011114783412554,5.254993034653257,3.8421406724883549,3.9869754079468849,3.7483482159175745,3.7397884529954908,4.5697313988302533,3.72483974816129,3.8911254893365319,4.1881356443851017,3.7661077940452601,4.4857187877155198,3.9377170661209964,4.2788183653550202,3.8790148983991974,3.9054125531325283,4.3402732770008905,5.1555487652502183,4.8355312978314409,4.0596836663916802,4.1996657591264697,5.2258657473441952,3.7931541595300446,3.7334448492917809,3.7101342395632861,3.8104365663660373,4.2830112116327648,4.436531207241087,3.8935555012618721,4.9169856576340045,3.8958854710085156,4.4534734380971823,5.6579502199460681,3.8690793533517049,3.9132378428319106,3.7771195204120978,4.6573820592292776,4.6316261130246303,4.6460532044139891,4.4587798443410689,3.70911655416166,3.8519959006660058,4.7912427326878095,3.8235903164997578,3.8151238216667314,3.8873506829144486,4.5847995754075397,4.5748521307635448,4.1782831174904835,4.5537275575382079,3.7827264992166851,4.1149404260287943,4.1504041517350663,4.1162699659651825,4.1231351944495556,3.8624281298630363,4.2954695348235399,4.2917863576687498,4.8306207697792747,4.4859116402056181,3.7205898876680488,3.9843430947136436,4.5653513365741878,3.9884733145939233,4.1492668850027057,4.0062218561803427,4.0063249588127796,3.8576065294378266,4.3624855004752305,4.2539620051570406,4.4594687439865739,4.8593005832815495,4.1534846666782981,4.885122360746692,5.485780092271356,4.3784413371940554,3.8121481394165389,3.845030890449407,4.1483785020887378,4.2763209930556405,3.7145757246824154,3.7655732536634012,3.9493943090449117,3.7608467976450517,3.7589147143843786,3.8004633941827524,3.8257651517602889,3.7735638250051617,3.8659424167312779,4.1318531229412256,4.5539824451874633,3.7333199301674536,3.9204361257009994,4.5541313784975204,3.8164087431299318,4.3327539655341445,4.1977415039617707,4.9898828945391394,3.8817025095658013,4.0319483746799056,3.9575727243192871,4.2235047979969575,4.356802969362815,4.7937168597083453,4.6434504311631759,4.0790427348688061,3.7342632447094544,3.8597879445752241,3.7040502618237054,5.5510950826239673,4.2524205942195792,3.7139857499561604,5.055955170776933,3.8911786216838311,3.9232909127824507,5.493595759384343,4.9040959717872399,3.9205862802234317,4.1683516770734608,3.8787549294949217,4.0012415274935966,3.7593872910161297,4.0865819761317201,4.9262406710594906,3.7918308164052537,3.7676573159865954,5.2986458158171761,3.8955203745784557,4.7073743929199585,4.828272463356952,3.7388151693022635,4.0388590108451075,4.4056492318210845,4.1694821023785167,5.057184719821211,4.1295693551429027,3.7470680974305317,4.2903333026457844,4.1488751402329234,3.7103585081762587,3.949855371300333,4.0677134766543057,7.0173294269065591,3.7117567452551978,4.1222895345997337,4.5678269211452083,3.8748826661089479,3.9013975106561407,3.7970916921317621,4.6277099500957686,3.7900123786130724,3.8354465316522237,3.8230218001701028,4.1276153938502329,4.3735964875861493,5.0764753924297024,3.8776062041747177,3.7198523159842924,4.5238506212380605,3.723078442649673,4.4399973017840138,3.7059386817897919,4.2856670432222987,4.2634067301522904,4.6596734864425704,4.148402099866801,4.4057792455204003,3.7555276290197388,3.7798161838274162,4.4858808299969146,4.8661889631751736,4.1728054261199423,3.7206387254200903,3.7316419980343651,4.2374219888500457,3.7311449960005731,3.8695843581556093,3.7679604100164314,4.2798026916133338,4.468215962292172,4.1064489347123434,3.743590362577836,3.7440493790051281,3.8300860611566709,4.5626152548229912,3.8338575198609921,3.8469485018308114,3.7504108203172963,3.8230766805191392,4.6670842211905006,3.8725385084405723,4.2902439796225522,3.8770377078161995,4.3526206614896408,3.7285959201462657,4.2172702208501391,3.9559880213756009,4.0556415756028725,3.9256476410467873,3.891284289453715,5.0773558579584899,4.2335426760318375,4.121242411919023,3.757506539663531,3.8296196972541137,3.774773759500313,4.0296547586445497,3.7055079962597479,3.8449332740758031,5.354107375644376,3.7878297103819554,5.4471079240961231,3.819235800116227,3.7610499422822916,4.6664551844358195,4.0078485326376718,4.6004280531864064,4.2261224770663155,3.7559305027498913,3.8653298428527281,3.9935558354497798,4.3931138936355749,4.0154262228504711,4.1006025255047458,4.5185821212120141,3.9722279583734017,3.8248275388840738,3.8495297115681049,3.8739666619991326,4.3914922797593716,3.9338458529747546,4.8326519054473485,3.8257988875313722,4.3428106242476954,3.8141591267205279,3.954371131496893,3.9130097033291569,5.081614039704899,3.8219579472858398,3.8416355416827495,4.2466566932394736,4.073302141522877,4.5145378645282497,5.2361358517643479,4.0380675936431398,3.8499041787502621,3.7049142243663074,3.8380924289706648,4.1297408137631795,5.0022402443306078,4.6004825398447986,3.7307748553001456,3.6976276305943845,3.8718075287902338,4.211595090916707,4.139750957082005,4.7361554615878463,3.8081103931759652,3.9438089542914283,4.1968460199879587,3.8236926315248403,4.491104115856543,3.7525878198417764,4.0409005645240592,3.9352565743679624,4.2176711230795876,3.8327274764201089,4.4851713298947713,4.3872236540591798,3.8271724612777831,4.9865758017011936,4.1511479118298302,3.8127016149474526,3.7546527017796798,4.9048901920951948,4.0551233023031541,3.7774382492284517,4.5996699119644253,5.2339188259987628,4.9569102830024141,3.8449968928914302,4.0374505058737133,4.3233908617013386,3.8566257290622388,3.7465750413260728,4.2201101906405247,4.1579790383833988,4.9354005263268093,3.9038510638294284,4.0490805071953559,3.7452893545643935,5.5158134701891903,4.141397037067498,3.8043818080898131,3.9409314128529727,3.7539409258109564,4.9036805861412587,3.8703618193120404,4.2412601565632864,3.9457365762972154,3.7939446141200892,3.9661612510675606,4.6805300804976593,3.8804268480242703,4.5815328225334948,4.2831106632650027,6.0300194690563469,3.7433033314301287,4.3436390211335896,3.9504201377307893,4.849791649684307,3.8688307315592438,4.695180392211376,3.8768547651207554,3.8867780742135047,3.7508194765868068,3.7658977205012003,4.1424902706987332,4.8838843163352861,3.8601487794951668,4.7232905197751309,3.7790940362812089,3.8715080022314101,3.69596312522616,4.6981701173190871,3.8607489104063006,4.093184182133669,4.0924513618741942,3.804489791170488,4.7133344419706189,3.9953609252898685,3.7169861828536104,4.3807076427118039,4.8648046704925063,4.5590425091281706,3.7650851155470888,3.8713888228540427,4.5871893733890525,3.796807382904801,4.4963159224683951,4.1688570599269674,4.9389180353530397,4.0641541610130778,3.7687036483919001,3.7383277143372911,4.0439315003596645,4.8973148152724564,3.9528077445562744,3.7677710582237602,3.7899680251957379,3.7850000412447611,4.1201790721054152,4.2140594256154813,4.157894067891478,4.1291440224917295,3.8150895213418523,3.7251390697166431,4.0594165273622318,5.8797610654000918,5.947909526374314,5.0924261392408843,4.0292894660363805,3.7015448769934975,4.2847879851455266,4.221650879969304,3.958227661022502,4.9619970877298334,3.7131402222696717,3.7175964861295405,3.8671811732517973,3.7638492494930058,4.4987524853735481,3.7871601343599561,3.9063179992009767,4.9573107749986098,3.7386634810291794,4.5488505367116288,4.0503661548064489,4.7265370366585868,3.9219951240243938,4.0987089910157488,4.3634673098436494,3.720255617647513,4.0644173275787461,4.1434882652704159,4.5065398693490284,3.8729955699515917,4.5391698868674464,3.9739978568449841,3.7995880222606657,4.477077776948776,3.7609555798437779,4.3816108174937511,4.5504154718052181,3.7511590431631503,4.1996054754915368,3.8410467592515176,3.7036727164759031,3.7965239147966976,4.8209081875956645,4.0521828836288023,4.0547227375667907,3.8279097831244693,4.0855419883108492,3.9578631150834704,4.1581773495760332,3.9123643937879997,4.4052300328596701,3.9895559453728304,4.6566158722248883,4.4833912923482453,3.9347208899781747,3.8433336619653797,3.7393836190611793,4.43260477377902,4.3528660013285769,4.5008793185742206,3.8954249311155982,5.1395948164451433,4.6055720455574827,4.2308366517537612,3.9258411726067957,4.6274353936848867,4.5709301014099193,4.6026899016152143,3.7917366521955773,3.8931336308918478,3.7642575046749607,4.0187253049117917,4.7492873367044561,3.8988808837852722,3.7179299141142321,4.0151221325849296,4.2716640671166051,4.2202410700625421,4.3526782124417824,3.7867279402509708,3.9804322665105287,3.8522468735630087,3.9322912879176224,3.9770484406469078,5.6342340941861897,4.4816406566235862,3.9478579555897513,4.2456042669551062,3.9830981676433157,4.0684323883780928,3.7800245675895896,3.9476060785579432,3.8910238744449859,4.6640968535140441,3.8822929685676275,4.0572668626487722,4.813988095800469,4.5045046187663713,3.8360743274457745,3.7487892856613683,3.8798537361462642,4.2209006488971434,3.9560797599040467,4.7808934274466477,4.3066940074544444,4.1507581030073526,3.7723515505039207,4.2372234278692211,4.7149586591563004,3.765496329451369,3.7385771050477028,4.0721207728463229,4.0025882677421887,4.1468848235899403,3.7108971678601996,4.3134343720829342,4.3904104450291115,3.8240790555354782,4.2932926047537894,4.1592881131618809,3.8151314618732499,3.8781510088052142,4.2609539709936337,3.774593895325133,4.0996750695441264,3.9769687981054171,4.6407832888839922,4.1063254426102578,4.1011060482474617,3.8373669935289869,4.8496075578309554,3.9156630544402526,3.9651016303399942,3.741429489497714,3.9152217213622373,4.6180996399349397,4.0283870533716257,4.1538912619594761,3.8419915275583629,3.7052886207478299,5.0126667899768949,3.8132859387156723,4.0072399043009685,3.765580168203281,3.8406916343360176,4.1450540873030572,3.9752086809766776,3.848284734900778,4.2974372187919894,5.3244759664902288,3.9506204064621162,4.4654162028477922,3.7949470891094057,3.8172408646749436,4.6597419339190651,3.9542386701412213,4.1308449320991292,3.72210815182095,3.9273084452413638,3.9831998910230033,3.8196818854222081,3.9302198052337753,3.8179660542223544,4.981802504585862,4.0618026872154216,6.0264168368227571,3.9771360932507847,4.7019571009890422,4.3669667935501053,3.7298133958086526,3.731767640120236,4.1372874023854758,4.6297382792758244,4.279577868261712,4.2609159585683569,3.9441367805278476,3.7683295935634904,4.4876550550471555,4.6672582184067526,4.0021466527030896,3.8059608952529036,3.7997176261874985,4.1593128861425503,3.9679936913000824,4.0839332172832767,4.8816629733144481,3.7832746123486798,3.9189248008150126,3.6984403132478749,5.3002283923435316,4.4287484452713572,4.2001404492296759,4.4143597393340723,3.8080884931636549,3.9664300917798441,4.5063419845793229,3.7245633023442783,3.7319188890702804,4.1326965335830321,4.7630978397918806,3.7903175169393362,3.8232116908596243,4.3431162157080463,3.9989593114238771,4.0745039849142479,4.5308252095065074,3.8400652558419002,4.3643345457402596,4.9339431103299987,3.8072779873222498,4.4005913297717223,3.7821569572217117,4.7798754589059049,4.0869605543858318,3.7308895004281721,3.8161313193085435,3.7959699269200002,3.9721358885613633,4.3588882123593615,3.73128415407994,4.2878010938959426,4.1336015562987738,4.4409013726085176,4.0159052879568344,4.0411023340410424,4.1430041189568421,3.9702405096736455,4.0654420108042189,4.1642729549206452,5.3200472861170951,4.6580827441240622,5.1373094421450425,4.2469934385190014,4.9293778230610448,4.0632185456906962,4.202510753719034,3.8713937698203398,3.979357697668505,4.2998510320328869,3.885741882940315,3.9337108973069546,4.3947007848353898,4.1114816012548738,4.1816682358739934,4.7835534859894748,3.8071684118737079,4.6156254047343497,3.9389959599291293,4.8347280696639698,3.7441790862802535,5.0872007363016207,4.0583833506279312,4.5351685572167151,5.3156197521350181,3.6963091517828457,4.2844633046971907,3.6971678322191441,3.9520907541719805,3.7409101009592605,4.4881031615263645,3.8451755587631395,4.3034501661006406,3.7070409538020175,4.4361296935323589,3.9690220909481022,4.6708433230186879,3.9022087707978823,3.8233187655401561,4.0820976521512371,5.4828274737919669,4.9919793938617136,3.6996807027809306,3.8711704297093239,4.1421474290508549,3.8999708369435089,4.8511011566274354,4.6710677842058921,3.8383615140896112,3.9017674175423012,3.8752257295393324,3.769172511927648,4.2734255143766999,4.0470168470381589,3.7305717056781762,4.6611497136007403,3.6980596034582986,3.9358840995617617,4.1911164486543839,4.2861235896264489,4.1368236298580721,4.1860644553799142,3.7729982183228734,3.9922280960951806,4.4834012025481123,4.0136705659520544,3.7637050891791448,5.1834015727765888,3.7129518174107101,3.7387615197681385,3.7142312023810904,3.858149763658242,4.7141852167715594,3.9891835553377892,3.9994245956090717,4.134890687663308,3.7431221159711119,4.7400362812060406,3.7332520973487684,4.0094271609974035,3.7100654693105608,3.9806493083310306,6.2312713482696713,4.3764518508458767,3.8802574812535116,4.0083153293363782,4.1863762422384401,4.6758705627850095,3.8441837885472654,4.0070119983770685,3.9376904763284659,4.0373283291452431,4.1120916906862668,4.0268762293150271,6.1767197637983475,3.8246552466953361,4.1422393989121682,3.7398719916067158,3.8442006793755432,3.7301384147973748,3.8431496399841127,4.7859156555598643,4.6230350771578435,3.8270392995478471,3.7024078908186131,4.6786307309603536,3.9163100189638591,4.3130838831633769,3.7596571597963577,4.7207691598245516,4.8167892911043078,5.0790835155539469,3.8238357021339446,3.7700744162267119,4.1409955602823443,3.9436705248668789,4.0399759004635847,5.6568749219823795,3.7852175905525232,4.2091706079594227,3.8034271229259167,4.8230943549860985,5.2420452067534491,4.0218630085879967,3.9406879850915564,3.7026551690609435,4.0724945761391256,4.179394483768089,4.2107158357808823,3.8257022038427868,4.1355423610215052,4.0672414763543641,3.7783296836651643,4.3365214576276889,4.7161625718629514,4.1594089764968922,3.9818660744582104,4.1358501504707945,4.1330887776166261,3.97714672471422,4.0058670862793182,3.8342015623984027,3.6984630901546032,3.9732419676170592,3.7402011536006969,3.7006952396618948,5.2609714894897603,4.1611926092199516,4.2142490087740132,5.2729385252648724,3.8316181505416815,3.7452549522965235,4.0766798151820911,3.7135573855596382,4.0972457636722046,4.7763760209398569,3.7566121852682861,3.836019827780865,5.3969759378154816,3.7000650257581484,4.1443144213948298,4.5337803100505401,3.8975897489407441,3.7705408059240653,3.7812284163831622,4.7492161966685158,4.1008820611378081,3.7452168030042907,4.0731414478002739,3.9109373632996354,4.4321544689067336,4.1419922854184001,3.9142788445988006,4.1320185104651417,5.7509280599513239,4.2423069055202376,3.9619975451329408,4.2137191767646138,3.7289664470927191,3.9770891003477824,4.1546805840867638,3.7701144009452041,3.7557352737406218,4.3878522834932028,3.7917697297761737,3.8326397950042903,3.7453834845229488,4.2171687304755343,3.965022262214458,4.6636515729580204,4.0306747684762056,3.7392329823481836,5.0476625873452186,5.4768245721089972,4.290776008447998,3.7114436850851455,3.7335384766820896,4.5922376707084274,4.3303653811686447,4.5931736408548529,4.6410736933355352,3.7209288550288271,4.0963963693061478,4.0870326745687944,4.2996686492743033,5.122481103772599,6.5284227081672217,3.8876793156838554,3.7215944467509092,4.5115249011204037,3.7547088232657466,4.1518457428175646,4.0938354154937056,4.4699396522266523,4.5236452626800991,4.4931215633034212,4.224031999872139,3.7207764839052744,3.8216369931058485,3.8604744601807512,3.8103139570767173,4.2214533217340966,3.8451483549995658,4.0290365474353704,5.2176213719871676,5.490627080506167,5.0279524015200474,4.3809948061703823,3.7749080106811608,4.1116611609709812,5.7191191596820898,3.871498952022042,4.4312844710007955,3.842089867340825,5.0381453833994758,4.7778187044897695,3.8141641828912904,3.9889982528945858,4.247522960508082,4.5366614634063174,3.8150464751131326,3.7468388786742048,3.8172191818574883,4.6714700842749144,3.8933029792533911,3.7094914515632866,4.2970297563531261,4.8364945802367858,4.3319777636539696,4.8403619745090545,3.8231769160686921,4.0637548258095384,4.6125856750830865,3.7589860989517745,4.0334848602474427,3.792504235494941,3.7242468808518461,4.3034598795086323,3.725444297729763,4.580137671430645,4.2206592512661221,3.7131694672239806,3.8407928931833579,4.3998590022815405,4.8330129096453325,5.2628066310733166,5.4832648630059841,3.9035695814303066,4.060592068857682,4.2000811153059354,4.1369501667347741,3.9036717007191157,4.4330548404911356,3.8163685306188446,5.4861770571570814,4.4619064212198953,4.9056511571543702,4.3330900399968675,4.0490456979928569,3.8574688615410282,3.8572915225738229,4.1287334437637311,3.7350033199409478,3.9663755972379651,3.9919816813948912,3.7434106171159978,4.2031510566896957,3.7076631042483683,5.4810206982181162,4.0304891780340881,5.0267290613717659,3.8570759592955262,3.8199498514719963,3.9012254330407359,4.2081702066459794,3.8633532885499196,4.3471502961935276,3.7883714629788225,5.1212952663132709,3.9480808421278644,4.9312249498465395,4.2893374339394583,3.704920597009405,3.8083450131083869,4.2005591847704924,4.240281850659402,3.9415302927030775,3.9856579177727482,4.7263284990783081,3.9770244532531311,3.7470525666136609,3.7909680334132401,4.5318164460233552,3.8018729268251303,3.893083141025619,4.1709489533373825,4.1813533289611753,3.8507597884756395,4.1459755718376323,4.1023601168208375,3.9431193346087561,5.1368479215753746,4.5589438853005104,4.3178321645655293,4.2467973137772006,4.2598901351500036,5.2966355295651777,5.2898910660988525,4.8952027042801998,4.4372102905493591,4.4745979767836266,4.1598032732063075,4.2369514315987633,5.1667899077078685,4.5164284224181905,3.7260489385244915,3.813461072205544,3.8505576113044908,4.0047159078515602,5.8445976270915088,4.4168777165136177,4.4303238295128535,3.7633741245058956,4.0153113437507795,3.7675929189377673,4.2625030328858955,3.9034117490094684,3.9628981049259067,4.0711451478699505,3.9325395843599993,3.88176694625608,3.8143489188980055,3.7322473608189504,3.9347767970164398,4.696517554568695,3.7105294273146296,3.8076478005442409,4.0124486208831893,3.8328605117663592,3.8964529452686216,4.1568983595258597,5.5487673357093446,4.0276686518994165,4.0976035002676579,4.4610297831339452,4.6263871420198281,4.0023191785013568,3.9554040642915749,3.746854187161123,4.0028469288702926,3.8291734859318849,4.565423521505668,4.2984561002942421,6.0500728659018437,4.0128174809074721,4.0635895377970286,3.7342502025464346,4.9870582620128436,4.352578777828513,4.3625933714747696,3.8034722243035946,4.1111885639707832,5.081547484138631,5.4209873218357174,4.6635565384655813,4.5602646657089112,4.6925773130730724,5.2927051125046507,3.8028633433898613,4.2113489347805508,3.953373139946593,3.932078989828244,4.5612232059123192,4.0164678170442514,4.7935325206597534,4.9038068174527583,4.54818210248804,3.7030368809221481,4.4325086233853108,3.7799576120299818,3.786236999511754,4.0117403324316045,5.8066232523004508,4.0838752703301893,4.1563580637147464,3.7260749280241878,4.3816044325941386,4.2280627889837357,4.1217768106141293,4.7915063619063893,3.7867155022698382,3.7530773163084041,3.8775743852809725,3.9809623347947403,4.4251747240055819,3.858425948861842,5.1327780749063203,5.7938607475859341,4.1229894462393064,4.1611128664655554,4.1484170612640803,3.840519858176914,3.7129450440329865,3.7660204921464961,3.8991047616390602,4.0860691812611245,3.8368644623649506,4.5697381369194057,4.9015766605276783,4.5971117400251433,3.7048380322902172,4.5860506884305385,3.7141955572150609,3.808369267119259,4.3829247299951648,4.0854282735098497,4.2551627070690055,4.7291886195060719,3.8157867724352945,3.7594366689845722,4.2215109663990225,4.6600876350354321,4.0637754202626795,4.8395678399408464,5.512297242874646,3.8172504703792414,5.1405411522495363,3.7352550599591434,4.7644454174611726,4.0142342978640437,3.9681157986117275,4.5910971238566978,3.850416635065824,4.0097012674599508,3.9340379875460938,3.9602115363798083,3.7823537548701678,4.0419435653578404,3.8683067100175199,3.7619430279371344,3.975510862717349,3.7658325448240637,4.5664916197662002,4.7116887698456065,4.4689613715466683,4.1537848097180197,3.9754783326758929,3.8482515782703826,4.8684680380020549,4.6903179155462134,4.004475586847998,3.7252436082961919,3.999274041020906,3.9989268440658829,3.9843306529533344,4.331509852729738,4.1149902523968445,3.9006563844438396,4.9592028545502878,3.9496996405848512,4.1823764719969008,4.0667641555126997,3.7166450965935929,4.8127373461373626,4.8017705269142663,4.4439659848774404,3.760788087247795,3.7311921099484624,3.7091921126254777,3.8574314874618616,3.712265284223391,3.9319161680955759,3.860544066184429,4.6898386356205197,4.2018196456200192,3.965480256139315,4.1920357447018963,3.8313936540874738,4.0298210243393218,4.1471969942840055,3.8880518447840231,4.019159821853215,4.6210669268808049,4.8334925533712907,3.8038376928959177,5.0532792035638154,3.8402900626088963,4.5418325460645441,4.1442243544756421,4.3082274076017706,4.0462135121416178,4.3706696654023194,3.9186560849980649,4.8392384027429971,4.7050738116982682,3.7290027116074134,3.9330181941727549,3.898344967697537,3.8236218853552124,3.6977853827691032,4.1454864824653024,4.5705830345198848,3.9667996393775571,4.0466500418161218,3.9904850119578033,3.9214697230079678,3.8439335358543372,3.8228396035822736,5.5686083124261856,4.0750811670592171,4.980509950464671,3.864840746747384,3.7247614834883493,3.730662555876044,4.0557912315275537,3.739557465838192,3.9624932558589885,3.7306458699078009,3.7735302559046109,3.9568759269863447,3.9594708126855465,3.7607793452485523,4.5235054953845708,3.9856138051030343,4.0735827644030298,4.835424215077043,3.7501033951343405,3.9117645958722864,3.9104007954044087,3.7589740633209652,3.782877575525331,4.1131238841692683,4.5334692911220973,4.7295475671947615,3.9995389811585733,3.9078938059450654,4.0051765948724425,3.716814547725265,3.7129123467691993,3.7716018548330381,4.3653592595339532,3.7350480753484643,3.8570243515941987,4.3654726608838113,3.9010729403892603,3.9978030241409446,3.9195205169066538,4.2431573912380571,4.6038840936420069,4.2919725299868263,4.1262829519273172,4.11572182188175,4.974276237293604,4.1871204090308778,5.3763712193330369,4.7405653662036551,4.3759889007996868,4.2343900364191782,4.188501478612606,4.7310695686568982,3.7189816719108393,4.0079483012896997,3.7314220768225894,3.7710228759778088,4.1600109392401858,3.7305370214959508,3.7201037469709903,4.3174326787399515,3.7466739248194383,3.8779205724751113,5.2787756201912082,4.2475482522760748,3.9475185457038982,4.2199683018160972,3.8251502321165498,4.071056777326568,4.0803292867181069,4.3189411970662297,3.7368556991010324,4.0440100473944751,4.8042610381785087,4.027427584541531,3.7842831434589144,4.0370649768546878,4.3827377499016498,5.0630456127542374,3.8254781508281446,3.9399039481745723,3.7040983519270454,3.7572708513737765,5.993580233730067,3.8317497398774685,3.7888505766878358,4.2687946738605058,3.7142931349592612,4.6040319279442885,3.9733508174963714,5.4432853866410715,4.0000400453668039,3.8155461948942269,4.1086293827789264,4.4050369930264495,3.9974812268809066,4.1307273213915323,3.9709091972179382,3.9511368720835058,3.8286313149105542,4.0492841383280735,3.8881912703432486,4.0348994905177813,5.6931180189177573,4.2184641705846522,3.7085278112619791,4.3716122157482902,3.7111736322813136,3.8736174294197858,4.1353778736984959,3.7420735262025806,3.9048102321343716,4.5644453705296311,4.0060328879694529,3.940152068476424,3.8034611452644755,4.4371449889086971,4.9108013165129405,3.7934537343233088,3.9850920159086192,3.752926487991632,3.7475614999048448,4.8670937675821735,4.1741930292888023,4.7348351643679392,4.2564542691747294,7.7325439015680084,4.0112709570125631,4.6883016071633259,3.9291780429431666,3.7142178078056456,3.8414913433586744,4.0857171215415393,4.6309512702903675,6.6879416413698927,3.9394423622940371,4.0502663650137523,3.9940287179881588,4.7235175674214265,4.1948632886565038,3.7316462255838814,4.0138660327759439,5.8776510151969674,4.113046148742062,4.9691684190402894,3.7526408454424511,4.1075603636828726,4.1860225995289282,3.9754213196495907,4.1054247282167724,3.8997908827851582,5.376689632308449,4.3288534182070304,3.6966420597781942,3.7024357906087704,3.7657299094517627,3.9276898501221034,3.8120515277307581,4.9689863837853681,5.0972162951764943,4.0876825015223472,4.3975811976103634,4.013924327255503,5.8628870895466845,4.0357797988760042,4.3805307802500204,3.8786268142212186,4.0795218704144505,5.1947425919070866,4.6211906178011821,5.6948778360703853,3.7315510634355511,4.0528687803844292,5.1132992109982842,6.1347731875362452,3.8522831386249052,3.9971808894933667,3.7027624026492205,3.9707107758983344,3.73070780910676,3.81431390444892,3.7976407434765882,3.8019018833583953,3.8063099207114388,4.5842761299929347,4.7354014170853951,4.3395087287135894,4.1372060352106157,4.0696779891945445,3.995334762518385,4.5734473776660503,4.9259963792485877,4.0511472094598666,3.8032930634284621,4.0937263893294444,5.1569933083896373,3.8143580482726946,4.8001612776833138,4.1351913601971253,5.0677268173911392,3.7718463610010096,4.380380468181067,3.7221621199399433,3.8399141453013832,4.2662731284288951,4.9322760390744165,4.1608597131447107,4.0864069276036048,3.8183860182250258,4.0472638127244034,3.9539110409175544,4.4653130228994824,4.1887500422822352,3.8030820600556838,4.0974515800216924,4.3488664932657892,3.7631551521266973,4.6291288630554588,3.7873542971259893,4.2254171716862334,3.6961317360931747,4.1874679194849103,3.9639442472224569,4.5447320609257327,4.0278995473610326,5.6263882117799238,3.7818251701425187,4.8710772793389703,4.2410460374154271,4.4425403374493886,3.7045784900566954,3.8179577603875043,3.7586913196507363,3.9915190396386233,5.2079748975299953,4.3436517712931977,5.5489560997869063,4.6010741198534717,3.7111652787670404,3.7715452149703674,4.0331669380173585,5.4251462384155182,4.6827045568543344,5.0487885175196316,3.8333522010143239,3.8219254831042582,4.5888143570371023,4.9074162309793063,4.5302145969433933,3.9206575491762994,4.1874953015129881,3.6966959141737541,3.6967452090710791,4.9884716364130632,3.9321993158013724,3.9985645655646591,4.8631520223956146,4.433098766998893,4.2616493408200906,4.3383478369796897,3.9314793277498024,4.9514217317206093,4.1915083715890917,4.0096741968979224,3.833609697271847,4.1471883652377874,4.1157866018810454,3.8187164910375211,5.6876292081497448,4.0683608571903189,4.6374664082719885,3.7477255734668162,3.8606442858533652,4.1729944649864317,4.2649388624188536,3.7930469086352359,3.9152187657143123,4.7907587320677889,5.8538730687550435,4.4183367512059135,3.7390254297070058,4.4939824504292387,3.83823866004693,3.9264497979741035,4.5242501827491708,3.8925240098036924,3.7392614302900422,3.8018866181908932,4.0712741677800119,3.6978307552872245,4.4967021442652957,3.8352886214680191,4.3622145458260864,4.9791137124897711,3.7712114052317411,3.9150489904543684,3.9810693057483979,3.9489033456846472,3.9092703127662634,4.0606573133897834,4.0182954537547486,5.0014655164619573,4.1346883794123315,4.4571067660968469,3.7736064762702579,3.7713046338239824,4.8680003876566662,3.8018708086651798,4.2027703722137781,4.0291954848425036,3.7836381845904699,3.7369094601314505,4.1094456834500219,4.4373109409253866,5.0301980533161652,3.8536192360674058,4.4547378911123126,4.1764900123887791,4.2700259801828846,4.208262045880276,4.0067396147751575,3.7939361734310206,3.8449012938215672,3.9148508573211354,4.1133052015743212,4.0857066298608773,3.83722497379134,3.7853874358638708,3.8860949961366353,3.7823263709760999,4.8976890973364648,3.8483760106486335,4.771946721003844,4.2647492437745704,4.4818480935121778,3.8087759561851264,4.989558572300238,4.7417596968921822,3.7931345284258122,4.7051679773551802,4.0569481984067997,3.7277182533858557,4.1848644598912133,3.7017960620856045,4.911176461100534,4.3214330254953532,4.2367777762432519,4.0336482709408941,3.9398317575031472,3.9973004224779705,4.3644776591295429,3.8585780785838386,4.5411435244014697,3.8083625327107455,4.1505327574149753,3.7800074901091922,3.7395716934073571,4.7676308279403097,4.9668803191325965,3.8785963399783876,3.7228798743374147,6.6751951789412063,4.066811630529056,4.3793613781030496,3.7582293460820071,4.3905265316816866,3.9325346106722607,4.0058609043127822,4.528190617137696,4.5638943191908954,3.8341510997380381,3.8073729295109371,4.7684947469742971,4.8175813966289285,4.3146607701727238,4.2295563749738045,3.9309407628265061,3.8098759554520423,3.8373232282525498,4.2059933251403994,3.8399255960031411,3.8074933770754429,4.419587905520336,3.7368546368467959,3.7209311364088764,4.9830674187067006,4.2693953190681686,4.1128138488631309,4.1759745917032536,3.8604849927195795,4.3774331748495161,4.1106062684917957,5.5787163065418603,4.4855810552212638,3.9355617820868889,3.9636411478338913,3.844825929650872,4.394908086174576,4.7393660064773213,4.0523245345435335,4.5105710726503743,3.9979851506450368,4.0020196641985608,4.2323112163635574,3.7428076724867148,3.7413251853180434,4.1075693826919437,4.3090637282779953,3.7983135147752236,4.213118513759138,4.0717361423314431,3.8186374232563725,3.9128357261626574,4.527881400045465,3.8828148177820849,4.5480910011798903,4.3396988474000153,4.4742891053569824,4.0551306922211179,3.7954980471232602,4.4723715363358592,4.6472543348427671,3.8088529143231002,4.2351311134307892,4.2581656610609011,3.7331629153288115,3.7222988841310509,3.8622229495533054,4.4980769922616988,3.8139819303894487,4.2588812493664676,6.2709772727961743,5.1480335654315521,3.856110354932297,3.7431324428113708,4.930959974080146,4.8846454702728037,3.7628409738446686,4.049195636430456,3.7056170778544271,4.1689850976611407,3.9938658398389926,3.8837474761992059,4.0094688721916061,3.7355276430598221,4.323037932972519,4.6405668848275434,3.9043166027682314,3.7728659106019129,3.7398419434396297,3.9248649907327238,3.9061651638187969,4.1787501473625763,3.7341042485724136,6.675166625716014,4.8737518088215621,4.0567453678675971,3.7809403782963367,6.0126296749707908,4.6588528441890285,3.8227721807623332,4.7413075374488098,3.9470426948200261,4.6504193360778956,4.2875612890450512,4.8517243776630794,3.7286857807728104,4.7100400972242813,4.3793574251488456,4.8392335266065887,3.9658569511608848,4.3462037753470844,4.5241730664113513,4.5795734077497077,3.9321044189626351,6.1574023533983429,3.8859247353642541,4.8790718266602067,5.8217026895901167,4.7023357551184723,4.3243416542295412,3.9406774116858316,3.9597151937511561,4.1951791961457712,3.7469996707444393,3.9126908220012022,4.3541508008044332,4.6782971451446835,4.1987938496036561,3.8949525953210369,3.7335763633441954,4.9960606111098889,3.7591597656345406,3.8721749833495807,5.6840355026353127,5.5154037597565164,4.0360384488405563,4.2352150137150391,3.7068461532999009,4.4367674048678412,3.7230020548109533,3.8044617380212058,3.7707564649184313,3.7204051427198057,4.8091604273407018,3.7749562232010323,4.0063683878561953,4.7115135332753075,4.1036924822057284,3.7621326941363478,4.0337310514377602,4.0816911089695687,3.7303517947541169,3.841974299589638,4.8290837002581579,4.0050988702542849,3.864199617405236,3.7689087739669018,3.8507843408280045,3.8072127200613557,4.142939194631535,3.8167640377258647,4.015808260718047,3.9584580544495007,3.9231541665824938,4.3411442515549847,4.2245556363825552,3.7046400240237651,5.0806817066640759,4.7323218851660931,4.1761672320528946,4.5758585931212536,3.8602265827015732,4.0233579245796944,3.8092818914302007,4.0034221761165902,3.9821654372331778,4.3255862327067947,3.7092988456604963,4.1145849629906772,4.734163549947275,4.7572491663461527,4.1628106792832726,3.7850801721959413,3.8082927325952838,4.3280802406170249,4.0594005561591535,5.4813512583527713,3.7229982635747398,4.0869106362229486,4.6807665406614625,3.7558818540374626,3.9855407890563028,4.0701466956485808,4.0893613130568669,3.7060238130548102,4.1105349273470813,5.0550609519042169,4.261716794637799,4.6850416031904629,3.9255690438544573,5.6310159158150839,3.7359253297583295,4.1643218792757377,3.9976437170393324,3.8718516451203504,3.719881672186911,3.7797859528076332,4.3611361661458234,3.776014105307139,3.7147953361526831,4.3670697133952183,5.2305425190852661,3.7892756019735527,4.3690274530252502,3.7271659082497304,5.0746600054236248,3.6970189198961343,4.0526654654636696,4.6697346562605446,3.8320637566209763,4.4865262532570949,3.8446649715531493,3.7306061952580225,4.4021996964721373,4.0871995941676911,6.1875869992983699,4.7843850145921687,3.9141235915581083,3.8861749893052284,4.3897194195794143,5.0940148404804084,3.7533085335924388,3.8395430036936236,4.1464446343849826,3.8263393262370329,3.9746650712352576,4.0147266859058846,4.3469974456693325,3.7442286649686376,3.8454765161424986,3.819758110936021,3.7449056010382265,4.1744253816685264,3.9927480678337077,5.1263875766242348,4.2026048652907315,4.0582967107214847,3.7656919461712,3.7342218200580488,3.9944319010771578,4.324770625131392,4.2196517453441134,3.9271122904165661,4.5674119572377938,3.759726195409641,3.8779856899833711,4.2889677955758216,3.9506483995499115,3.952014753945039,4.7676699491839472,3.8488607420856655,4.2941842186640224,3.7605383042458711,3.8326956709033695,4.9573163320932538,4.4039750682919756,5.4086976864063141,3.865847021734564,4.0035942138742833,3.8565074508707311,4.0568405945685573,3.6986664861158118,3.9876546609473555,3.9282060408501298,3.7060528407806936,3.9802209387484786,3.758070024619069,3.8752857027573135,3.7598922538185087,3.8658012934242723,4.363839435817412,3.8331167518409672,5.6812017293689099,5.0685908972584279,6.0991903766358044,4.6735935470490348,4.4289502675573491,3.9464027006264453,4.1669939809089733,4.0191738450150822,5.15547011107284,4.1083996655419064,5.1304289717761211,4.0290015614428247,3.7208386950748711,3.8513031829399802,3.8905942664525281,5.9739664058031368,3.7926209155251875,3.7960593971893957,4.2047970962031753,4.6788503697735866,5.0572208466496242,3.7120428116191424,4.2719893646006204,3.8954016866591981,3.7940158086052853,4.3815040961817076,4.1766770485056144,4.2085721910803899,3.7038875854055675,3.7873779189153525,4.6015626137525913,5.2088064693455136,3.8116525833834607,4.084178238280912,4.2679494394458208,3.8389712816953239,4.1007130124506785,4.1241602455199242,4.9059273923522309,4.9245320318496857,3.7815644196621387,4.8191948642244045,5.1279816208347793,4.0221280121670402,5.0165178763815792,3.9853673161754943,4.8944394811988277,3.8806282253469897,3.9352421176260557,3.7237775561808535,4.5013886556308096,4.3916049347807711,3.8135548081278841,3.7656398551087795,5.1748526564025363,3.9135197309033956,3.7868294337891388,3.9452866189272169,3.9254462821587457,4.7732568708756293,3.8376600454428371,3.7062525922970391,5.2948600835211872,4.6192294363931552,3.9329563441135331,3.863855072733958,3.88465189414537,3.8382631104522762,4.921822453418577,4.0277966002705243,3.7028693890123487,4.3438973623405772,3.7114915183738639,3.8076859286616402,3.7386732817974657,3.8162451388867584,4.9167633209912189,5.5589605251056655,3.9026690030533904,4.1417663827974884,3.8244268795085334,3.8753606108487335,4.2119537455631209,5.4041288889271364,3.9178547511381998,4.8209810789171028,3.7089731380426052,3.7999266410107486,4.3984990664717136,3.6965277838061712,3.7836718886854164,4.3131334017908598,3.7968057692623409,4.7012196256222971,3.7657946090700549,3.7579231126047246,4.6832949746450838,3.7153207568413644,3.8556455123646405,4.1478647676886782,3.7506324301258944,4.1554950720532906,4.3375365207718914,4.0558078156381319,4.4853134647877608,3.699363252259984,4.3285950862927054,4.275192615181818,4.5057100767126546,5.1481391092463582,3.9717068300811595,4.7236133010791672,4.0510695749885315,3.755106851212997,3.7442833940436855,3.9124790355333658,3.9431932155439351,3.8327378510507919,4.3387798812625151,4.1031004136254943,4.4245001098838692,4.1661824877552673,3.8442579019349856,3.8728053498751889,4.3104890478122817,4.4905396833065536,4.040500212047883,4.4844067697425478,3.9842481950447826,4.4501435633457129,3.8644077640280026,3.9098188591346785,4.8561254244833592,3.7232456308664417,4.0167451095114011,4.3078780649304687,4.0533783287826362,6.1578375062791189,3.9995222301750051,3.7833643382962245,4.2859949480241362,3.7552686678903862,5.2261643499521604,4.9094166163200477,4.1620868136739926,4.0213133046624687,4.1269669260356743,4.6445601124939815,4.1204771242253484,4.5204798939278623,4.0683485891296094,3.7979337723205866,4.3173821108289223,3.8361899454897412,3.7669994135602121,3.7231888793840211,3.788588963895112,4.1613706200046163,3.7615869098041004,4.4414366803625187,4.4471589513312137,4.0503231931652603,4.8563819785904396,3.7095530367567484,4.5569438398385342,6.0061072398019091,3.8988195037176543,4.0401424273264945,3.9747582920875058,3.8954309863722774,3.950044674554364,3.7901543898468795,5.6644756485093843,4.1830424786025153,4.0109462094374786,4.1201219955927142,4.0947959085534578,4.3859605518896325,3.7327062439143077,3.7780970864205461,4.050563207033032,3.9141863924638201,4.8793337766206664,3.7725326417411531,3.9111360834408084,4.640545498438156,4.8737963001912616,3.8998097363892956,4.8617438038744858,3.8549717731510391,3.7072795823971605,3.6986183187626667,3.7788753651404505,4.499933876397991,4.0234168790160156,4.0366398034713544,4.6947087628769957,4.0783081232729002,3.796006234976943,4.713374374812398,3.9024747470545624,4.3326472571687908,4.0253206205699392,4.2429124113609271,4.6664097607757489,3.7931271951152326,5.829178874373885,4.0921024003212887,4.5098686046051091,5.2959956862081814,3.8219954178165687,4.1451832845362526,4.2204573332755873,4.5169714583798539,3.9974103840365296,5.7703949395179572,4.526672130045406,4.7750162332672819,4.0870630150196261,3.8147058085600127,4.3278692243171335,3.713065071258788,3.7759617900106832,3.9928930490127419,3.893122092721216,3.7025054752367796,3.7312746636752498,4.0137581262520552,4.0176289162146714,5.1984018472536659,3.9468972623285987,3.8373447827454159,3.8238825455319629,3.9375867189459681,3.8997657414670321,3.9753962808124075,4.1110089814578643,4.5787409266850254,3.8116191326685422,4.5606834188845431,4.073708657491137,3.9945917896048715,4.070166803784466,3.9328686322744892,3.9305601569539279,4.989953583434211,3.8358877084615868,4.3660814496780125,4.019512556281378,4.3599506526864804,3.8138445195421302,5.1564808103108177,6.2592075227050712,4.0493443353090797,4.0559835246974032,4.4753174961860278,3.7196168154056282,3.9938434540361811,3.7727976838226152,4.6358662060768649,3.7747410173147777,3.9408384415798543,4.7160830124704427,4.3613635887025879,4.4543654381730633,5.5611531794052631,4.292166583313116,4.0629130955565964,4.2282687399200301,3.9740727338261768,3.7096397112675512,3.810515368762708,3.7948042872028074,3.8890904996573767,3.9368206942141919,3.7537656931530932,4.523751938945173,3.9286020372400521,3.6971888219201299,3.8938792828397699,4.0779715768390474,3.9029922896064542,5.1765519811083509,4.5397354539730221,4.342749580594238,4.0717316002142558,4.783869469380015,4.0606493589886687,3.9178868770266173,4.4349437455343912,4.8851408940980976,3.7590216828688643,4.6626022051464862,4.1827951096906792,3.9226157515473234,3.906429342625259,5.9296961013567024,3.8973812436423163,4.3138587014207568,4.1195159967120016,4.1603556785897258,4.6871385460245563,3.8841232338648028,3.8051747606685402,3.9582472373716802,4.2494995171749261,4.0794556021099018,4.8499005869001817,4.2194669857144573,3.8055420539689577,3.9756982829372713,3.8710183046234889,4.7868141479181894,4.0357629832068351,4.1266718730451215,4.7927229021076903,3.7556803225635629,4.0406150985909264,3.7149051180729158,3.8562033323384353,4.2299898160091525,4.074148956329938,4.1350249380900523,4.119087309162933,3.9605101945115706,3.9593948033414552,4.8790208697866682,3.7029916139004411,3.8573396960941073,4.2978302606451928,3.8279053669838503,4.0459564594946,3.9037094132093411,3.9334343554195588,4.0335686085696612,3.7288395952381626,3.7402884523756241,3.9155708393340398,4.1838593839637062,3.8277398773165947,4.0958303171994377,3.8082377994650445,4.1724136060537695,4.5307184591155352,4.3743056063265868,3.9432895420119154,3.8505622899107421,3.7228680419863052,4.3105113450553763,3.9284762171438579,4.3249850643644496,4.436456725932322,4.3036658479594312,3.7850349690528255,3.757234925289652,4.9056728371783365,4.4924802309926859,3.8860252108329694,4.4924123187122493,3.8937872947316015,4.5412265538105467,3.8086929738914668,4.1713402952278527,4.4195261358227285,4.507807353339234,3.7315141189000132,3.7333690949679252,5.1866595226384575,3.7082867972959797,3.7808484116847407,4.7397786298877049,3.8627250838983787,3.9350955089793196,4.2723143607637333,4.17908393721686,3.7709155349621875,4.1973678731391413,4.0513632247183402,4.4191020642085928,4.3299303854013935,3.8914726583563324,5.0103899266162921,4.4185302850958408,4.3495664319233933,3.9563873737245832,4.3836911419428182,4.2749278234721908,3.9547807937422212,4.291040925469261,3.8311422530267873,3.8424654042684536,4.0603676873384549,3.9432335260330205,3.8180188576898457,4.0700047679237201,4.6138468289495611,4.0981948371514756,4.2352471541497865,4.707167192016529,4.5373336166591614,4.0278879303529074,4.4801245489781643,4.4849385520549312,4.0094315397353206,4.1674269108803506,3.8790243811765168,4.0250414176646148,4.2730308820277783,3.9665799149647181,5.8510526508594918,3.8688090055202222,4.4253785275095252,4.0673791475382117,4.5749078199941913,3.9827300128630876,4.3034212032759189,6.2515082487524705,4.1443406283108368,4.0457656745246506,4.3897522245581593,4.7002826668028126,4.0359622328725582,4.2088660110796692,4.6915365848137505,3.8315445189373118,3.7304803441947514,4.0883941851869192,5.4173042509989351,4.1016087212408507,3.7470688896510085,4.5432575492274561,4.0882278706694439,4.5262085265076291,3.951152106448629,4.1964591051251006,3.7516384690590598,4.0033652283509742,4.3350287385631079,3.745760288870863,4.1674105919776441,3.9982131582994747,4.4544309204893535,4.82132234808644,4.1102593078542631,3.8144016332058701,4.5241776714220494,3.7845707014861523,4.1220457155348704,4.0665662132089277,5.1300783102478524,4.106237649536248,4.7154629201776475,4.031000673655182,4.046818323388341,3.7358725709835241,4.4680551511373094,3.6964991883298355,4.0131168198114819,4.8208455928409224,4.5726343745178859,5.0453260575278014,3.8884168734254327,3.7323308376239828,5.5550232678971891,3.7779619125119122,3.8570375123048946,4.3431620994899429,3.7330365725109713,3.7762388822192805,4.3864371826432631,4.1502386866594136,4.5796321582785273,3.7984155285829391,4.9667524680934889,3.8974833644470741,3.8917528201436289,4.2264628954808101,4.5053900298585603,4.1221638921331243,4.0787464409325542,4.5786182307839471,4.0040266677736218,3.7283783862608093,4.549730417953552,4.9851025061832512,5.205701695362686,4.0693496812786369,3.7348766781694307,5.008684693532226,4.3078207309859131,3.7671730709229601,3.828176931554029,4.0794677518555735,3.9477771614745678,4.0068506621471078,3.8501593281622855,3.9492749288214539,4.5835586442497656,4.76323706814419,6.3663096185189207,3.8979413326865155,4.2161616179882362,4.2474438583409011,4.299823719885306,4.1525085090265081,5.0352335471381009,3.7150521128594898,4.2731476640240587,4.2241084177895551,4.1122512840134586,4.2364938245308448,3.9330988438540402,3.745368345023294,4.1950682740377401,4.2715772229244475,3.9191789445869794,3.8499429829185137,3.9550319186880838,4.4690879570156659,3.9234595031727109,3.8139085335496219,4.0087712283813062,3.9634734003242884,4.0426108882354113,3.86472673189725,4.8962016243620106,5.5573394176658564,3.8100613424719842,4.4287033106997571,3.900359754807142,5.9038485251931663,4.1189426326734733,4.1139934782741587,4.0263937303547728,4.3096586044047891,3.846176492261145,4.0370622164967225,4.1253662448073039,4.4068617678952977,4.7428703268799044,3.8035628192436315,3.7267378038409684,3.9241212528983089,3.9837100101486191,5.9163413306712282,3.7391722126260833,4.0445356824221568,4.1063944876548479,3.7297119803241108,4.0798887261727357,4.4322723441324623,4.4213335182349995,3.9065932680541318,3.8269892855921501,4.3909000793931243,4.1346381830927692,4.1386218749534915,4.0000451788430214,4.1707550960159798,4.6764231297378833,4.3040796370427383,4.2321616933068471,3.7921686849129497,3.911948923890249,4.2332999480346194,3.9068376270672331,3.7455841391256279,3.8404992040215586,3.83482344315127,5.2121872864886685,4.0679117697395357,3.8709595610715657,3.9025511687941825,3.7809638755368842,4.6757511756917527,3.917676538441937,3.7406545801683868,4.367592946760678,4.6926505822592395,4.3031084206963079,4.0820690570663425,4.2947042402477784,3.7034812724685331,3.6987251840821465,3.7165367504926379,3.9279161060825327,3.7423047640151501,4.8481979849573804,4.5571908149019817,3.8853985508462983,4.0861505938577194,4.146491146586655,3.9336140139382123,3.8706729797271588,4.497094970382193,3.7617022276162677,3.8208299294511794,3.939152182259416,4.0422680089821732,4.5412880542269036,3.812054599407773,5.6728045514250249,4.4764200703970412,4.6800522484852269,3.8389200928526712,3.7389360951151294,3.9119509571977309,3.8996916005483055,3.7269783684330746,3.8289564196924082,3.8217922856247961,3.8850063210398935,3.7557424645264716,5.7677069518710038,3.8836886396134962,4.0896271543913905,6.8808575619690231,4.3825045615067486,4.3487976833882751,4.6121540701903525,3.7746044632492919,3.7859802863694796,3.8710893240543274,4.8563746097708975,3.859011311088222,3.7505777536226388,4.1430440913246933,4.3743142941817235,4.0946111954696001,4.3445148059537555,3.9194378476664715,4.3230867206588091,4.8626347995714863,3.7664869711800937,4.306705303225951,3.988091020017551,4.2649528884104795,4.0480152661710385,3.8116864460920166,4.0704653373309219,4.1024346435298629,4.6719090982890581,3.8814692634141923,4.2575767528435424,4.3379854779839091,4.509909231619714,3.8255812781938121,4.0712623997936772,5.238084589173452,5.2488670519496257,4.2358148973654499,3.7297638683337286,3.7026601659832528,4.0822754765223648,3.88324228207181,3.8594118626735767,3.9257041668173156,4.0205888990846166,4.0821640765997618,4.2687240452927542,4.3313587889448755,3.8112032580784549,4.4504802016291816,4.1603537621647702,3.7744903814666295,3.8911282834145946,4.4571402976717405,4.7533035297780986,3.8161704825761902,3.7664657485255035,5.0384748537583954,3.7490778950986203,4.784973737970307,5.2866662814221153,4.1822407346752595,3.7777364721275943,3.697126503040153,3.7775238266626601,4.2581735015935669,3.7792880390358756,5.2222900865971731,3.7420504061972988,4.4025835323178617,3.9958877430319055,3.7931854964756737,4.2441277969167164,3.7807149028731395,4.5799660697885063,3.7127340392183075,4.4713973749225682,4.2343544073332371,4.3147718678618618,3.7515249807479538,4.0127088306813574,3.9365798592790138,4.3076790819625295,4.8521598724957222,5.2739392477562648,4.5802538591290398,4.0449789501183,4.637036868801018,3.8758237772550821,3.7247840372843433,4.4703914901820161,4.2009714838622685,3.8291236606318138,3.7947882088863838,3.8277732559862296,5.1467609796933935,4.005327765907186,4.023786391782437,4.1748086041828785,3.8137965368717204,4.1695353152113066,3.7273381941193895,3.7603518483185492,4.0059303693497554,3.761012107932193,3.7550541486810682,3.8613467788303009,4.0604153595087107,4.3563572844447807,4.3785740798951602,3.9581317794427857,3.7424875215826985,4.5731592561758614,3.8017734636218394,5.0563810588894702,3.7352257158024904,3.9479184281623674,3.7932684841797828,3.7221557756662986,4.5390583167962362,4.1155234322743155,4.8802262976190862,4.379373999003314,3.9739902107001543,3.8867816338312782,4.4373198699434369,4.0322379556655523,3.8732128507179842,3.8196552873117109,3.7536730536592402,5.0894181075440414,4.3090419593909699,4.0219348422792383,3.7702611822986403,4.0806286780653345,4.8883264346330915,3.8192763179283333,4.261866420132348,3.7455277158240157,3.780366941393293,3.7263245523932866,4.0405656969691668,4.5462910647161401,3.8518300653506534,4.4287335495011106,3.8457745908905214,3.8034059313083284,3.946024094308779,4.8169152967232138,6.3995457272958136,4.2678347640445473,4.8224339423894156,4.2263434877708539,3.9150064104556992,6.0058969976515097,4.3233577133922498,3.7125846247974006,4.983800860301872,3.9691672969346987,3.7225149711909902,4.0293561759333381,3.8874438166633358,4.1300125756468145,3.8750453951410853,3.7386385500728401,3.895057958292047,4.2311630413001557,4.1076035782843272,3.7222047549894066,4.8132317424930218,4.0991565257260412,3.7891602502195822,4.3135851981752911,3.8170358486606495,4.027341520275832,4.1371801437298776,4.1724802649325285,4.0440324900288358,3.8146683633466996,3.9339509348185921,4.2103829626907139,4.2695637211472812,3.9329344099820034,4.0563263117223389,3.7497979219520552,4.434947218340227,3.9304328805116793,3.903037590902251,3.8466078002707276,3.9198244823129049,3.8323123874981704,4.3445183569786208,4.1794521215559426,4.3998304567642981,4.0625262770472927,3.7730880830080404,3.9597611982341818,3.9994164107394981,3.8172041858792345,3.7967279459831462,4.6677916343675188,4.6593553731159254,4.6765189969268119,4.0883905748522382,3.8609867027270854,3.7070402758447796,4.1696173477985443,3.7020379968939388,4.4465095714606173,5.0738664989758071,5.2371552786258988,4.3376664186744236,4.9494935055710911,3.9244140355079558,3.9362888724347149,3.9738636748082441,3.7834627984834364,3.7685964896818747,4.4871198484109112,3.9037209497017891,3.7554087387543573,3.8432579416704336,3.7812099775694583,4.0588744907787637,3.9134473459975552,3.8880065057146895,4.6311283240659877,3.953456614538891,4.1291500306358095,3.7944283017438631,4.1332136447654735,3.9766470962178597,4.9897480643330621,3.9267997106604082,4.1200558203918671,4.0531941948433534,3.7005953147280715,3.8602801721398152,4.5190754385712726,3.9464461177110635,4.1611759717679844,4.5252698576847337,4.019645871666099,4.5372787925713514,3.8503731812036697,3.7759195155377534,3.8434150489159156,3.8480111554713434,4.0206933865331793,3.7255674513209418,3.8232893634810488,4.0005820235916838,3.7202758528383693,3.7187201317513847,3.7873802145037372,4.5774838924667423,3.843648836205579,3.8290531896881523,3.8047713635004463,3.8538384150574845,4.1572317319203611,5.0954442327324232,4.5580100069728688,4.5709165970545618,4.522321332952604,4.1171506079098599,4.500752155534582,4.1614670180767055,4.3068687499554059,4.0890460685873915,4.6707051759012739,3.7466908066566478,4.4501259343678417,3.9341200556566651,3.8084199142745008,3.887427873552554,6.1876234325400858,3.7644532654596699,3.7442592575772657,4.0035137483513372,4.2173953832441171,4.4001153706200489,3.8155505605370803,3.9958701386920903,3.8340050622980271,4.2766678840573356,3.9011733375482827,3.9710502201230242,3.8047418971957665,4.4936536538242748,4.0460433016953052,3.8628578544748966,5.1939363928151847,3.8880766597644412,3.9442497241849415,3.8673618411098771,4.1311602057847416,5.3415317647935394,4.1582974489467972,3.7472541511909125,4.318130785774092,5.2061068708220439,3.9499620066464738,3.7560731343818539,4.668276166319167,3.7048770800081967,4.9549929573450813,5.3475912004894148,4.3856676489549304,4.6120237132142634,3.8621320699745478,4.5126526528697894,4.4872776538050179,4.2687250600896531,3.7718478660932289,3.9135962148894725,4.0437488723976962,3.8350126522526913,4.1635709858257268,3.920463163110111,4.2995613368795285,4.4772854760889889,3.9351000829497904,4.1416748242640784,4.3432497524401805,3.8652509549067227,4.7809975958062552,4.6143597958627769,3.72405753524811,4.478767831060372,3.7692276184888804,4.0119922052795767,4.6839512488897643,4.1037288385888075,3.9670109512052263,4.2607552216847102,3.9581368998511826,3.6959689789326706,5.2869643616559214,4.1049859529115995,4.3844826493685902,4.2391044914338547,5.6681099509132391,4.6401577551481958,3.8272642650084321,4.7631507695694495,3.7456819583821765,3.8461471843015316,3.9361005890499676,3.6998101722772421,4.0394786351789103,3.786801537942508,4.1144463117174412,3.7470491061268638,5.5652472935272428,3.6994851569037541,4.0321604427667364,4.1873679090099012,3.9494204436152973,4.0607937197572141,6.3273002101383362,3.8892694464405824,3.8453570245292421,4.2811318684401956,4.2387902920306963,3.7250818978283933,5.3536175657821374,3.8257958706097446,4.247528684952032,3.8364237758178148,3.8716479687249734,4.0445546517444289,4.0711391011766214,4.3095538491214009,3.6963613116992873,3.7196037483695807,4.7657677041201838,3.7105955066512766,3.9523287532275617,4.1115274360853826,3.8730865644559458,4.0223575563227039,5.1921537553506925,4.0173146974096881,4.0015841352248511,4.837914895882526,3.8635605451095993,3.9461127392953954,3.7393714326939977,3.7807244959743822,4.1284357882387273,3.7424609820183945,3.7778339042987796,4.4919970885310079,3.7331771932151563,4.2995759020964002,4.1265161179742318,3.8744061545895585,3.8631204302508464,5.4281360037118702,3.9181606369911255,3.988183814237086,4.3362187323333146,4.153643178323323,4.666939662203915,3.9119783091801574,3.907392093593109,3.6956433662570265,5.3197866293300065,3.7266705431072777,5.2232394799751507,4.1407451616621511,3.8098157023068571,4.1516609074014754,4.421735168356796,4.0722351445693761,4.1697971378004706,3.9687472893876001,4.9452886946954075,4.0139919916881031,4.1532679754149981,3.8281474352203966,4.2967821048719621,4.3741108997018365,4.3715516104125189,4.6658246608722793,3.9365200474222002,4.1991748147313208,3.8390310717859193,3.7857198894529871,3.714157326461335,3.9822008036240342,4.0122621413087556,4.0577417017021515,4.2095605127394267,3.8853428990268575,3.8575589287243583,4.127101108460888,4.0572775716894176,4.3703714554920454,3.8351817856780048,3.7359460969238159,3.8704704036074791,3.8267310098304068,4.217189744799696,4.9383294516086744,4.7995131832376954,3.8195127386726306,4.6768713955632109,4.0676679607758448,3.8122408123394487,4.2548889555505447,3.9479409355683566,3.7337454986214933,4.7836516240891802,3.7651655089939391,3.8423685531212288,4.9914389505472512,5.3904177392580017,4.414706149339791,4.1745088927837601,3.8007554510099322,3.7850635284707024,3.7578635199269828,4.5651146298084972,4.0646144975744862,4.2246741149159188,3.8790021227431488,4.087652853683803,3.866662755416987,3.8389155567474393,3.950097320691635,3.7159044301782966,4.2927228126091599,3.8271735261608257,4.2118547803460489,3.9175335572602856,4.6549556505259257,4.1935400790276054,4.1372456420060404,5.8233789603133799,3.7262620167614844,3.810514469818127,3.9369833902594058,4.3983091533498424,4.0816063358611716,4.7767838091888253,3.7686060041231495,4.0123627942941624,4.5923474682282093,3.7812625014911609,3.9637629525933504,4.5231266751577701,3.9809369337860878,4.0164043216882694,5.1303046298827564,3.7567903076753884,3.9266996635437375,4.7322996898484426,3.7009674000283908,4.1958950332120937,4.3067953876509355,3.7462597027990778,4.2191569902581358,4.8846513592876093,4.6127437594386516,3.7132628375309347,4.6408917481593717,3.7156949152589167,4.1922657854321956,5.9203809465843005,3.8970242349192268,4.2708094962025669,3.7706878882033723,3.9297779239712858,4.1645489019196065,4.0435223992909899,3.9372131826327879,4.4116316493826702,3.9584879606676302,3.7204175409562246,3.7939601157920642,4.3382183033247834,4.4051383487149138,4.2954301051246242,4.159739565547981,3.9999689808891241,3.7161320066258368,4.1285708175490798,3.8611450160086682,3.9007244022976284,4.3212448296775259,3.788205570142555,3.9177472881760695,3.948023096651637,4.3001039432890966,4.9505736769014508,3.8851192763684219,3.822459060673947,3.7061069165134186,3.9174510793212094,4.0917596160442589,3.8899418286063527,5.1591074692434642,3.73880716781456,3.9470019506019463,4.0519529761384998,3.7728116163159666,4.5846057787968828,4.0525752212310584,4.8642372114572971,4.0311154183624094,4.3340005294162234,3.8976146786228023,3.9348233051522028,3.9253499122705233,3.8708296490988729,3.7817484618215533,4.2796576173623579,3.7919097583771357,4.7516730328875179,3.8872453849181947,4.981150551346416,3.8547943001894396,3.7375511571904267,4.8606373251630641,4.0222877284321665,3.9347210807189001,3.7635445075504537,3.9182058067884582,3.8399636774132322,3.7933360622624162,4.7665093114748887,4.5876695397187914,3.8037639418386506,3.9092524883272466,3.7596357933471833,4.5568478715870908,4.0846405915417368,4.3786176258892908,3.8826970667664242,3.6995784437357728,3.9340560371864486,4.1801729662309581,4.4745044237480354,4.0223802217116562,4.6038021197133414,3.7634599894267819,4.2614699110090415,3.8198904407839143,3.9628872565448074,4.1178434804947903,4.2065110091417059,3.8850199536410082,3.8148598584314684,3.7120555193695197,4.1720515005793137,3.7550404033674631,4.2536797847002248,4.1040009189870812,4.1513778447647836,4.1244663233395515,3.9061719357934694,4.5265076901109724,3.9200933682965826,4.3422844324914536,3.7887166917497956,4.0671252264527462,4.4837244584617233,4.1313172054688119,4.0319760945857714,4.1884654556592054,3.9125201586034808,4.5889656624816233,4.4366051366789101,3.8876752226317266,3.8293948466656795,3.7960543255000552,4.6216416900032877,3.7289232439210358,4.5381252242924637,4.7257084390047899,4.6261430737888452,3.9435454942850634,3.9246294698609341,3.7254007049033087,3.9350112661157666,3.7098992751996924,4.6776914436618844,5.0335865931843351,4.0045953248295865,4.69872989108275,4.1147845701606354,4.4712310737343337,4.2854957496159045,3.7627609351467841,5.3091110673054613,3.8070363823474498,4.0874999069970421,4.6457971707191357,4.1977941015334963,3.9356569108976425,4.11518320115501,4.5966301282970941,4.9983901783107552,5.5927746881624572,4.6865084639600525,3.8761679572799119,3.7877364312077688,3.9296348512519632,3.7930495528945416,4.27789165054363,3.8337634909170846,5.6543034358880417,4.3875509283726633,6.2095528250035734,3.8055279494104188,3.9444949822275914,5.721733790799016,3.8143186589169411,4.3094768377049109,3.9071587191308561,3.791086146170378,4.67536360807253,4.6668893737721557,5.1956518952651534,4.8899737688469376,3.7321669432991942,5.3187126854588076,4.3365758670901355,4.1148441627277172,4.7493136925631436,4.105986822487953,3.9794217405362411,3.791822393452021,4.0592784591028472,4.052987218922353,3.9526655289099955,4.0898703650252903,3.9723259793130907,3.7850229983940391,4.6005602048434202,4.0331779262155658,4.0460515123344667,4.0753862918190542,4.652782695569976,3.8053256295556168,3.874224224420181,4.1797751881867233,4.1184604431849205,3.7088238251593344,3.9072383509058159,3.8857231751026364,4.0657402887376577,4.073127932673021,4.0738117669699019,3.8915682348377452,4.1700198143653786,4.1528342910298894,4.4086600018636108,3.9181704671544257,3.9229278835383194,3.7673381729215825,3.8742495717912346,4.9148151026986833,3.8459260779211797,4.2032746637028895,4.4746379690668698,4.2291461454575137,4.2082018705972271,4.2538930577467529,4.3238409980647665,4.3732695086291233,4.4161339881622785,4.613182103131968,3.9880180168990864,4.0560387756097471,3.8090610754240641,3.777132938049188,3.7280672252065234,3.9329520193929692,3.708510818469092,4.5504792942000085,4.302165033776979,3.7886469538066967,4.2244252051637998,3.8939320543617448,4.1119154720016775,5.3854959167539658,3.8437558231840958,4.5110765794962271,3.9548137205705154,3.8199960292388715,3.7767633336981539,7.7018880286744356,3.7176590096109767,3.7282089338075748,3.7815164270455077,3.9702286619072917,3.9586506070034599,3.9522906787134744,3.7572994618011171,3.948932023310328,3.9565471070273284,3.7543518299996017,5.5688927158222619,3.9692168632784663,5.1851098038510957,4.1672349610338442,3.9447372485618191,5.8988903118662774,4.8350689081086262,3.8185414739781414,4.959925450971129,3.912103948138538,4.5075373581496825,3.8488861690831637,3.760609706816167,3.8662472715210261,4.5918380693984844,3.7989273888279573,3.8318289031378545,3.7070717970172233,4.3760214790365701,3.9913400664483536,3.8412341366918179,3.833852462322902,3.8103651677439609,4.7050022202464028,3.7413486326985197,4.0684803006538086,3.8076044578296062,4.9166797569880609,3.9112024023883336,5.5107984994925934,4.1445223183979785,4.1323114139677273,3.7389679173621011,3.7582979360064033,4.0919879625513449,4.9944407145051155,3.6977793988806815,4.1421637628477921,3.8810541602959101,4.7650237725317437,4.220840385446416,3.969359282280196,3.7269060503812197,4.1592083781167872,4.2088640845629968,3.731934759729548,3.8482126684976414,4.9826340000859588,4.1894725868614522,4.2053834557280343,3.9742384610844228,3.7502325445904874,3.6966108630906018,4.2935953628463537,4.0189948367752573,3.9452318853789365,4.3798354501828518,3.7395217788103801,4.3755109102681224,3.8151104106998908,3.8770128347876875,3.8372435933122162,4.3971306771567038,3.8228482037234461,3.7784616601909025,4.2982316387151975,3.7682290783549455,4.3923352946364362,4.095171984459002,4.0885675508382873,4.1049285831346625,4.0954170401454366,3.7528620674014173,4.1896443382483062,3.9838193282318475,5.80099937428185,5.094570950918154,4.1946583538401176,3.8897126775738209,4.1506706420247337,3.7361971860429235,4.8887392905172087,4.3041609546040966,4.1151185114099809,3.7256279060941422,3.8979782537362406,4.3955201074865577,5.263120330850442,3.8112425634477471,3.9828642960285925,5.3950412198216249,4.1520252056436426,3.8041490247929657,4.3280321820306078,4.3529349743721575,4.2592060012764481,4.5902641248766054,3.8140270404962231,5.1627658615679142,3.737750772473512,5.1895324791300403,3.8544816540258888,4.0484231252574645,4.7004347072984025,4.575416823264562,4.101998069353284,4.3398590852225842,4.0052613314321386,4.4779864738867534,3.9744085856385327,3.8440853466018119,4.4342296218550965,4.2755067679052194,4.222119298432542,3.8295934810461181,4.2276250269219604,4.0218110198975783,3.7825045834630826,5.5096180589993766,3.9762206328632388,3.9106836502452462,4.0442864439038484,4.2714964602284455,3.9286990936519053,6.0656743675669302,4.0200839291977264,3.719953941513289,3.903230739944815,4.2898721150016925,4.4412444412103396,4.0583377197183639,3.9355862239739445,4.7909159579900384,4.3127754372528893,5.5229922725502805,4.0206205437713356,3.8443174174385955,4.3441622214361892,4.319965632306821,5.075535020712338,4.9462430423439327,4.0566530137108341,4.3073276354244188,4.8562260955655212,4.2434951548164896,3.8174579543390537,4.28194978821515,4.7223646063566713,4.7652429030986072,3.7383273295511095,3.987758632884721,4.0059812416030072,3.7911581417865361,3.7066014701419765,6.144157820227548,4.516216741646244,3.7017875485838219,3.7933574363791234,3.7118285223554381,3.7850911037224657,4.152037443460423,3.7948038896235454,4.4031226604835139,4.2792137437847542,4.1303157893931024,3.8146595067767333,4.7500223902561558,3.8708916530870074,5.7699488640226448,4.4219292362542744,4.4497175889780465,4.040351657440298,3.7424877124471161,4.8902674011451515,3.7083421751687418,3.7251088922229743,3.8127126272701384,3.9800615226011344,4.0476040560422915,4.1167637247718671,4.4656000858813742,4.108480879244353,3.9110490763190899,4.5583293216984302,5.1113006310312219,3.7623160574544188,3.7634939842506849,3.8723147168505316,3.7032421207625017,3.6966876478688833,3.910411336753052,5.1974860532125984,4.2311054091845621,4.4175713934512126,4.0535882808246075,4.3865984725103262,4.2702632827472158,3.7696002595340024,5.0966346290190341,3.9084610256074703,3.9162768957514853,3.7768247434359727,3.7963885233592993,4.0359607259391481,4.7770887262286283,4.5171837680921829,3.7633688240283498,4.1927452070203861,4.1232171399562674,4.274342404720783,5.4775776894911461,4.2019084205609945,4.0774001752171944,4.344422438970037,3.7355073449750678,4.6723665553912221,3.9243008530846573,4.184797869461752,4.1286984399306705,3.7941918534634755,4.4218512311186968,4.1179875256963356,3.7457140824295281,3.7840089498837641,4.7822186806337754,4.8718135101378426,3.9481952176208179,3.7354500450225387,4.8297659788427074,3.9003080050755567,4.1393945508482028,4.1265786700718365,3.7202619088272386,4.0151985851502339,3.7501418735880367,4.5085822268390929,5.4941981081747011,4.0707700526327004,3.7782043234827922,3.8232693884371236,3.8473435493188601,4.3092133713473828,3.9663775460125272,3.775247525791892,4.1476167941838256,4.2281877436527724,4.154898987442408,4.1942564182101574,3.7875099422463787,3.8245507629571405,3.7411616098287288,3.7951819547551127,3.798599108664976,3.7856611169572534,4.1963075200145026,3.7758145406145975,5.0168097388661934,3.807767494142873,3.7384518557805726,5.2383887558024069,3.7672803840264186,3.7035664474522747,3.7429718729807018,5.2675026470959869,4.1593543219810707,3.7085074546778363,3.7875458322627598,5.4596660556194179,4.597947958181404,3.8705321556584003,4.1465673610105718,4.0647654809463347,4.3397968648793617,4.6813159113438134,4.3457942112819223,4.8230709232583111,4.0503797657116705,3.7993064705185611,3.8831916876006245,4.2319907663410996,4.6248883049192147,5.105753470311055,3.6979608530687313,5.5459385287252916,4.1512522536464713,3.7521347847310826,3.9751460547091342,3.7931702765994846,4.9915269074465538,4.3771713942627244,3.9362918958931239,3.7207263984422885,4.2961423642063012,3.7322123709614141,4.8302893306865107,4.0285211963902681,5.1270054638328073,4.638169251195488,4.3420377594855353,6.5838770899760988,3.8859806874540994,3.6978139574071616,4.0204583032479677,4.0834576572905963,3.7065617375150199,4.6777397240637493,3.8417334121828262,4.8884761446181759,3.8725920338747262,4.6233056525995666,4.5832918669829148,4.745109452857796,4.4408920789333841,4.3764465423605348,4.1657349766831278,3.7574638571857584,4.2525082080619914,4.0482529943299328,4.5313802546711504,3.7871358705685561,4.4317567863843328,4.5794045235769012,4.2512571212927952,5.0045770766241713,4.3856039389488801,3.78752483917585,5.4547209318855323,4.7655468138896753,3.8349258329916047,3.9387526040693794,4.0319332918330906,3.9344805753892671,4.3913518754732346,3.8524184632053924,4.3166800083002732,4.7018092957106115,4.1511416037481785,4.3673489636448499,3.7550993015874474,3.989961105311552,3.8520355601266778,4.3094771171137021,3.8051692317596064,5.1327766881460288,3.851725783696319,3.7902951092302897,3.9336654082517444,3.8344791988867537,4.0501916539574827,4.203787366944181,4.7725619643482835,4.5170802624839537,4.898948650334753,4.6498526816528551,4.1851408475358083,3.9471354083814023,3.7191379034474021,3.7563459854476156,4.1603830128290706,3.737028087698604,5.1730276932962607,3.9170327796983591,5.7740361648397727,4.5729368111162927,4.1492333787562394,3.8151929271700253,3.7957697887885318,4.4733134344520655,3.7112792884049211,4.2232243866238104,3.7352145924923308,3.7087380252840929,4.6524214777299484,4.460918636750292,4.5193383773424198,4.968198998920502,4.7226886003386275,4.0316298662326533,4.8616939555104999,4.5880375218616338,4.0155222806130384,3.7653013762377543,3.8130541399741045,4.4038748359210578,3.8542029130286206,4.9890639482604735,4.8273692508713495,4.5841370721871302,4.3359168108113337,3.8442873529588,3.9920490369117583,3.8141924014199886,4.1887182217106096,4.0618883239086001,3.8711137329071059,3.9465087822149694,3.8564837472488995,4.0188788585901563,4.0167926509462362,6.230906487174364,3.912935825830187,4.1557024034290411,3.8237738148757892,5.1379748350634067,4.2573879391566702,4.0298029096799732,4.5795930466230086,3.9811154972807641,3.8302039555680785,4.4313062633311677,3.9942048901504474,4.3723129817559041,3.7722961789400973,3.9855135189697966,4.2357670334092958,3.7225675490458139,4.1912706321773499,3.7411015612047755,3.9417735105538614,4.4901553965880145,3.8156879107772079,4.2245141481748361,4.1700147830924736,3.7118909892454739,4.0565979068650515,4.099421591990752,3.821133957078958,4.327212787951364,3.8782868752690312,3.7535085164404514,4.0234821691119054,3.8164798003655438,4.1775775885498545,4.5233887806615796,4.2967370685375039,3.7694836077366896,4.7452836937878811,4.7577253106384481,3.7196571696335003,4.974635242195375,3.8587501130963355,3.7019848083930258,4.2356831961778703,3.9301522112824756,3.7145929721325293,3.7865285584579156,4.1840792052100815,4.0808736454308372,3.8438071386641428,3.7486671420979487,3.7152889339167485,3.7154467477255744,4.1983780311521262,5.0421009849996663,3.7399537397412583,5.4680310139972397,3.7269101800231703,3.9173900094094289,4.5541303290142103,4.2083469537561653,4.2293228834683996,3.7304376733727111,4.0499977653155934,3.8109865966197476,4.4541603882727481,3.7156198024898632,3.8971427946696,4.0096692702247729,4.1977521327051983,3.7760996703308636,3.7455713763646004,6.0559351024391876,4.3135711110040678]}
},{}],69:[function(require,module,exports){
module.exports={"x":[-7677452469.0111923,-7283232671.0146952,-2601677764.4812956,-3823290696.0539694,-1110076583.8795795,-2241926813.3426237,-1401923716.4624138,-9329360765.4720631,-4029392107.0556059,-4748304202.7465038,-3452478552.4262438,-8989584683.5416679,-849860064.66903687,-6697660764.0782242,-5668169253.4732885,-1085716109.6829586,-7102392432.5696449,-6872918650.3549738,-3681177036.537303,-2573127069.7875452,-7045781601.0501299,-9026144733.7498589,-3779712117.4334536,-63072583.700502396,-9524658038.3284378,-4533122601.5342417,-53901065.669910431,-6133489520.6756554,-7932358472.8147945,-6718584138.7625217,-3926360421.4900656,-7422154811.4687147,-6523696715.3598232,-5016068507.0186348,-2822629330.4661884,-4422177896.4613695,-9720067046.610693,-5228721166.9723616,-9331582358.639473,-6791906850.7332973,-729358625.59399414,-3020366838.4341822,-9122282359.8368511,-7046571073.8833265,-6676014385.0528736,-2292427735.7082758,-4738191066.3703289,-6995839085.7303228,-7533578733.22892,-4797990606.6866236,-4571005448.7762356,-4044654803.01478,-2191321524.6409645,-2236774001.1155329,-4781176220.2161989,-4840167854.4972401,-680500658.69528198,-2640699975.4628153,-8528880202.358551,-2394948546.6038675,-5832343013.4425859,-4025402938.1475573,-7197071318.7949381,-2677756509.0788717,-4018996854.4451571,-3171900329.8628721,-9635251453.1828136,-6044485173.5837021,-9363134962.1046181,-2561810196.6554947,-6771174960.6269341,-7450592452.915144,-9016214690.7352219,-1677631208.1083727,-8299553764.6883945,-6035986887.6874752,-6288362024.7231178,-2137588966.4927683,-9602383787.3178482,-3501839505.6926966,-2907590489.6124659,-6121710099.2020483,-3586586400.1108656,-7600533715.6892204,-8259391347.1204195,-8172268786.1847239,-9378480545.7729244,-4689204199.7706909,-5933405764.3419571,-5378354713.782897,-5369370752.4772825,-1634395004.6210089,-7973257070.6099453,-55331695.88800621,-1304501137.6344337,-3749541945.9148664,-4020596366.0423021,-1789585869.6490402,-9769864617.8699188,-3383430559.8497849,-1005735665.9935341,-1090905050.2410221,-5470538859.242897,-4481467891.5706911,-9419738259.2245045,-4261012983.6166458,-8937306255.2084274,-7094543990.9696312,-15747049.890506744,-7962736792.6004801,-1336725990.6886253,-1756535690.1708384,-3847942017.6340008,-7288201812.4602528,-9730555138.1119823,-5104442956.415616,-6774773637.6210175,-6184497548.1831341,-5362237622.4938555,-5797370500.3515387,-9009827664.2210026,-9644548653.1948357,-4290118574.2701349,-5611506829.0114508,-6741249084.3328705,-2455940251.9930496,-5495076666.5709324,-937833384.11994553,-4221562056.9143953,-6804373541.7007732,-9251556934.3980064,-802169361.60587692,-9426573363.6557789,-1989676215.0899525,-6990435670.8965721,-665614780.50637245,-4782787552.6251211,-3391202847.2028809,-4381197658.9293356,-4418128138.0349293,-7584452270.771719,-5715042374.0596447,-872798358.07161903,-4689532365.2496624,-1742657305.1015148,-3892485206.6261597,-5554541193.859025,-4686527355.1740961,-179374440.15823364,-114834672.82858849,-4217324369.2339487,-7244472876.466692,-7655765011.6753864,-9241905063.4665413,-1894095566.4686527,-4741592701.1190138,-5487258316.0033007,-9342445263.2391872,-7500308328.5581341,-117056680.43454361,-445624723.5889492,-2367232375.1445503,-8573496500.1728106,-5291551007.4287338,-4874366191.7283764,-387850358.18079185,-280748676.54926682,-2469937145.5316753,-3516793782.5397854,-1981747127.9399033,-3853289958.2385998,-4539558666.8386221,-5303496292.7962494,-1270850418.077116,-4222192993.0340376,-4795985394.6778708,-886867787.66896057,-1529149390.6728468,-6237797201.9873219,-3263878573.8714838,-7712352231.8393307,-9819515517.4651928,-5764751318.3343754,-329891707.31820107,-7264037803.0890331,-8421147468.1920633,-5554341555.5519505,-4898132244.6351957,-3724849541.3677664,-1190773903.8075161,-4653587439.6321049,-6552487828.6478796,-6145578450.9087591,-128363153.02174377,-1265499052.5337486,-1800146594.9979172,-6996512692.722023,-1944442189.6384649,-5999702879.1620665,-4370460096.378315,-4822764893.1144753,-1657656029.2353411,-9381752891.9935074,-2973273830.2596741,-7686327817.1498594,-3201706100.4694195,-8815140102.6427956,-4128515169.1459551,-9012199665.9841995,-132998990.41602516,-1097245503.6415958,-623198643.79877853,-9666109192.2184925,-8931811759.3551941,-1609650054.8542538,-6744874893.0818558,-4927332720.7608833,-7051555668.2987022,-8862835569.4209251,-6467535009.4952583,-5095543475.3807373,-2150902408.9600801,-4005582815.1699581,-2496280733.7806616,-9097838662.6549702,-5836630301.0350456,-217759670.73660278,-6643898920.4916716,-3469812314.2134151,-32228837.786504745,-5388678724.8730068,-6666773460.2074165,-1362418875.4963245,-8693242815.9195118,-7371709295.8113279,-889422470.68345642,-1760370557.55474,-8550133763.4918079,-6710246925.1055593,-9861565502.3743057,-586994724.35816574,-3440664367.0092363,-7558919294.050065,-3220557796.9811268,-428898340.11689758,-1840155481.7111759,-4891750317.112072,-8343279001.0030279,-4354201476.6542358,-91868162.680303574,-62838651.76792717,-5395697185.7644463,-2290160628.8066483,-2471878776.1482649,-6861980809.2126083,-1384502361.4588032,-9421273751.7078781,-7837364112.7089138,-9559262036.3899727,-7976909061.1648073,-1870560341.8619299,-3992492121.7794075,-5879267219.4004622,-8956654442.1129189,-6158368301.4963684,-2993192200.7839661,-4768734686.5997677,-3660439567.8087187,-1078510350.5085564,-6262153289.6546164,-5940793564.483387,-8704341056.4205799,-3956111029.8605242,-5319831665.1420012,-9051964501.9451103,-458271234.31911278,-6640187222.8465576,-2472740331.0204239,-8551581625.5058374,-5223807893.2397442,-7551194727.6656876,-6664362599.009798,-6210283451.1612701,-213393420.95966339,-7296803868.6460381,-8372874993.5279703,-7844006966.5494356,-8618083153.989521,-3662688937.6719141,-1128067130.6444492,-2002844292.0732203,-1283697177.1306419,-7914859778.4562874,-777325021.09396935,-1037438082.0080147,-1818872581.5885162,-2542905347.2361526,-803920499.50307465,-4636141902.8378468,-6478480026.4780598,-300348090.04654312,-4196229228.3989258,-4351168305.7123222,-3133521564.9914761,-7823100991.2991362,-3552160429.0160646,-1422367127.0730124,-4777665427.47686,-1380006853.4217453,-236627302.17756081,-6866978053.3168516,-2316416141.8797617,-6730157919.5550613,-409540406.92166138,-1599865943.1021261,-4231082327.3094673,-5074672110.4056139,-4619821226.7623215,-9480975123.6398983,-5081265597.1647663,-2219816312.0405664,-1777607608.4774666,-5733276124.0733185,-7744916407.6169376,-7200381201.9718876,-3536669307.5690374,-6664919855.872263,-3846442073.7332973,-6330600506.9930096,-3238699155.1387959,-2052075877.6491528,-4696889475.9839563,-9613092117.9815598,-6665891285.8534584,-2733306634.0351992,-7825212807.1463814,-1273155376.2564793,-6117698159.4570532,-7141852167.2551441,-2596512847.3890419,-3431507391.5806475,-7668004282.9833889,-7681133784.585619,-255443391.89893913,-3780460646.9979677,-452520447.80659676,-9248762331.0467815,-6270379822.6085167,-332441233.13393974,-8597752303.02528,-3900300451.2330055,-2736917786.0951681,-6162848181.9406261,-3742510707.2777052,-9694302256.7153206,-4766399893.50173,-1424344147.9474344,-3266918021.9275494,-3964568109.3894405,-9081806370.6146469,-1521595999.0493593,-1220583818.7995205,-4953837474.3813906,-8323699482.8842497,-9920891611.8447609,-3543177033.4889145,-809268235.21670723,-2549577949.8480101,-5892952052.3557358,-4487230845.8126421,-2676342523.9234896,-2671777250.5123749,-8488947190.4954386,-7825590509.6730919,-1847667205.9626789,-8130646620.598361,-903974653.66560745,-7905374865.7227573,-2220575423.7578335,-3452663201.0964813,-2428768603.888298,-8127161376.3655481,-5948024739.4508476,-9991296010.5584316,-2980989216.131773,-7386697123.5541639,-4345390631.9170809,-7468181434.3406372,-4152636514.6300344,-3658261749.1306171,-6550854051.3649111,-1322981404.0769711,-2957667606.6556616,-6121436122.7270756,-8391363222.7785196,-4838479618.1267262,-9984860669.3573532,-3031703269.3402987,-4379991477.4517002,-4915783831.8924541,-4535158747.422307,-3619462177.7954559,-4491722391.0721455,-2890241749.8299894,-3054632335.6644745,-9537055227.020483,-725059079.46814728,-2310356957.2099199,-557896886.96510887,-5895539385.2113867,-967366735.88852501,-1522120745.7690554,-3958937135.1978312,-7700197613.0967398,-737902413.58290482,-7662401164.6499844,-8830537367.7290688,-8978636234.6351776,-6591984867.4591007,-9112874111.2493477,-9632695580.4037285,-3137771774.3039379,-4616301458.4016705,-8432374703.8546228,-2627712006.9522352,-2834071967.0703964,-8187774955.4762487,-4312681698.3434105,-5737533369.5278301,-5183155676.8316822,-9018320436.6875877,-8451814863.5199623,-6967784371.5302477,-2397686832.8790112,-2198773914.3312445,-4606268355.230938,-4630395789.2363491,-8420038633.2065306,-2309285654.5241404,-5964592777.1304722,-3610563546.5924263,-5637193865.1133823,-1068517513.069334,-7005877599.8852139,-9393096193.7319164,-872511615.49245644,-8242284527.6899014,-4798847917.0561485,-5836681379.4216442,-7880860883.9544849,-2602081590.6062212,-9105504618.5814266,-1070452044.6795998,-5452209664.963479,-9741466934.8185501,-9283352184.6467152,-8624369683.8130302,-8744964420.4552822,-5759125694.5909557,-3191519128.8395367,-2354332155.8469419,-6319280320.6808996,-4755628114.1593218,-1946655349.6799631,-2455186444.1578445,-1834790579.3941889,-8302015538.9628553,-7118277072.7290058,-3272729893.8877277,-7023365348.8751631,-3813472604.9977102,-4476650271.6513958,-9931539134.1292782,-4268639614.4473925,-2597744700.7734432,-9426364656.5951347,-82645203.047309875,-3722784589.672471,-8718186407.4781857,-4596332531.0314207,-6394172434.5899868,-1598750623.7831688,-8089267339.2828217,-4401545350.5340309,-2856023461.3409996,-770210459.35437202,-8221329848.9255676,-8614119577.8258209,-131512455.23208809,-8972976796.8973846,-9830008696.3160458,-4066298569.6803093,-9602035349.2747345,-2719418807.6832762,-1956694695.0402517,-4426818900.3676319,-1402077133.2301159,-8780487747.9848862,-4337474734.6229935,-2179063470.8849401,-2458873193.9994936,-3059185951.2452631,-4804852365.5699797,-3929841344.3861332,-4140955252.2274761,-8827391474.1593494,-8092669707.4480333,-5727827393.4113989,-4965585328.6763334,-5909283433.9842548,-9490853645.8897114,-6829579032.8089352,-9439042522.6280766,-8003047839.9381237,-6648026011.2880878,-5514271851.1462688,-3690952386.8723106,-9643139592.4075661,-1080221897.883112,-2425348694.2623949,-3266033705.5316696,-7571559760.4967203,-3147329553.7156982,-7508528856.8097343,-3042552069.0596199,-5892396010.8692303,-2001685684.8809986,-2591364007.2527304,-3393948330.2732182,-3534203922.0912933,-4800634077.3387604,-4678468988.8091707,-6682635855.7270832,-6474601708.2394447,-658272850.33004379,-9257465021.2933578,-7535230564.199996,-150005506.40526772,-4887936334.6369038,-3261438606.5151052,-2596821173.3688698,-2794852983.9270248,-7458314637.4420376,-9755370821.8282719,-1544152359.3924379,-8713250528.2183762,-4618455810.0792007,-1673691788.1239491,-898638601.39367294,-9153930291.1524162,-6492935889.7512484,-4351046325.7381239,-646751172.37893677,-3000461974.4155273,-722805392.92481804,-9738458709.3517952,-4122996398.3698177,-8828741165.4607983,-8982378637.9855747,-5270143487.0323763,-6331240572.4021893,-9126468289.2652187,-7241544714.473362,-176514749.00058365,-7339024956.1385441,-9432699761.875824,-7734613495.6397524,-1696840360.1940212,-9986792162.5277195,-8993724288.985178,-1069926250.2220078,-4917386756.7868357,-5465024884.778018,-9238204427.6053066,-4215789912.84694,-8137509513.3669519,-6843944576.4188461,-6312265466.3361301,-59831248.193344116,-4349562139.815382,-161071157.6011467,-5741472195.7941132,-354521075.29684448,-5115766381.4019794,-3337347652.4980707,-3690409793.6837816,-2738418256.1931257,-3983875520.6633139,-6659574443.8084545,-2700329758.9568386,-4772272389.9048967,-398428387.50310326,-7266456375.6375685,-1091661407.5717754,-2816209675.0655708,-9605307437.0533047,-2219824484.3961582,-2415706364.7307062,-9189357799.558939,-6327177521.6743031,-7784198571.6837645,-9845407092.9592476,-7960405056.5687943,-1063029939.2711372,-3759007002.8511076,-1163082226.1319084,-2747948868.9253883,-586338365.46054459,-1656358142.7521,-4025772272.7409353,-9811046142.1499863,-7681127744.958724,-7978823697.396575,-7016359400.3025131,-5309070363.1785555,-4372732022.8742657,-6216048221.4822426,-4517526343.0817766,-6596062635.4119692,-4347453010.8337641,-9361488160.275444,-429426788.84382629,-2386640674.264616,-6838894011.7689047,-5973379144.3820629,-6942952890.2547874,-3257102866.8657064,-2675812303.3553629,-4489243440.8811045,-828758001.77897835,-9485428398.5265083,-138401958.21493912,-6925040574.5861778,-8906562633.45611,-345552299.20580864,-8708251856.8622875,-685248475.98761749,-6888528548.0265427,-6219732736.1497126,-6404032612.1133881,-3823298118.6948891,-1835799546.331749,-4374666126.0761471,-3077176968.3280334,-1694392870.0795469,-5856393082.4817314,-423012644.54454231,-2031460961.6581497,-9244943461.4564037,-7641619502.3369312,-1119756080.1669102,-629325584.5142231,-4375527075.5886316,-4017881742.3454723,-8056448742.4760008,-6358015374.6447105,-7785472120.3798275,-5495496674.4255905,-2942369492.4989786,-9925745662.7748661,-4032385596.6709251,-9173840063.2410393,-4137039324.8549948,-1313964602.0090733,-315058523.36055756,-8552975049.3870792,-4182565773.9533501,-1811765659.022336,-9001997097.0294991,-6510020054.7601414,-8333971738.0505877,-7828381441.2850666,-8979062051.6143951,-8207784258.0084114,-8537528938.7600794,-8719069378.1129456,-3284352324.6432533,-7845646105.9221268,-3601468159.5256901,-6837539614.9601479,-6275645438.9541407,-8482342465.0011187,-8371270345.6868267,-5330783685.6705637,-6104811907.6697559,-5361553337.8888378,-2000234346.7054596,-8022341621.306119,-6002062971.6378403,-9362102553.7778568,-2448809217.4854155,-482710412.25819969,-7047895924.483407,-2649903172.4307785,-3599940876.6508112,-7740033774.3970213,-1148828434.2460213,-5243454399.0630007,-7903566793.7482738,-5339368063.0255785,-5196435119.0401049,-5625141524.2159243,-8870124430.5086498,-4828881400.6887789,-8676303606.61273,-6589899373.1161175,-9359977399.0630379,-4321269528.5768709,-9207026003.9392338,-7449978932.5276451,-3730458368.7085533,-5520269780.4020786,-5886660302.4691963,-6080275972.3000946,-3614103140.4823818,-2211324424.3304272,-1434430343.4898338,-5574829334.3699999,-2364249626.0068216,-9242786013.1313133,-238397045.57149124,-8816750000.8149548,-2184627564.4741669,-6167272837.2845201,-644168025.81825829,-650508695.75132942,-2608478333.143199,-4742438654.0097427,-7463802327.6555557,-283184557.72784996,-2807497119.7846241,-9295996707.0031834,-3064873819.93295,-3948189330.4267979,-2266810476.6219339,-3978264404.5972996,-2527829167.2489777,-4367178979.4273853,-6816163319.4814081,-6057803046.818161,-4895690423.9468937,-6221656264.1837597,-2269335182.691062,-9401513543.0398045,-4271844712.1931763,-5314931159.8418798,-461496686.11976242,-1729288828.4549685,-8284276987.1318941,-1162975240.4511604,-927648994.58190155,-7735657559.4685345,-2477805817.786315,-1383633158.1000004,-7138247681.1365023,-5931707085.5170765,-3725896597.0703182,-2877179536.2837677,-5371720749.4163494,-6981532473.8846207,-8705607508.4386253,-5832828595.7197161,-4506153329.8249331,-7903317662.6312819,-304906806.94673538,-3677384735.2516708,-5578595113.917016,-103287818.89998436,-4090360713.3166332,-87587678.399251938,-8890297559.6665897,-5582640574.2897749,-8001477089.9103861,-5030044352.6670752,-8370359006.9664469,-3385291770.762064,-9631225713.5655708,-4936254683.9227114,-7272753361.8852825,-2327255176.6818895,-7698664139.2550468,-4271001311.1263018,-6414553106.6553516,-4863324706.0249987,-8656573027.9723644,-1707385313.5950985,-14053996.253974915,-9582206739.6201763,-4864791450.6042271,-5972072319.5304127,-6121536950.0373001,-1652686249.8338203,-7501472446.8516903,-4939631999.5106688,-6352475784.15242,-371911347.40953255,-6009424615.5847654,-4826084920.7225676,-736992369.4009037,-5951475885.6359005,-5045270694.4495535,-9640125599.725769,-3908129984.6564512,-2953599312.5816822,-9951915321.8764477,-9462204198.4067726,-4122712358.9544268,-5693797341.5128651,-2225375814.2095003,-447801094.06044579,-3428168169.4142942,-1918290130.2052355,-4716853104.1287575,-1596557177.5122662,-1742268361.5113306,-4278557536.2987213,-375662358.50882339,-1236906262.0596313,-6862635421.8804016,-5893640336.9912109,-2029149402.7300396,-5629905013.3388815,-7148242069.2278118,-3094623417.8184147,-9851051208.1123829,-6474459474.3275566,-9058502458.5957565,-8738767134.6174774,-6712769787.1559887,-9962652456.019083,-6944336768.0796413,-4931839691.0505276,-9819778662.6586227,-2476322844.9112253,-8377925926.0503283,-1350177585.5466423,-5560105338.6709929,-9660667262.5396729,-2332299692.3917093,-7370351183.0254984,-3187440650.7532043,-1974503913.2998619,-2854632687.0724821,-7928291287.014678,-5402191232.8840103,-1757781040.7476511,-807315899.04712296,-9394274787.1065884,-110565806.79665375,-921608545.79395103,-673988895.49204445,-1580245803.0209541,-5384766490.1945343,-8961914298.2284203,-950778320.87096977,-3856699281.0551376,-6135483510.247385,-605287597.05717659,-3969834461.4798985,-4065194882.580307,-4396809903.5337925,-6956838292.8397102,-1541602400.5117025,-7498851146.3334398,-7151950463.006093,-485743743.85325813,-3366815059.6434555,-3009004863.678154,-3977418190.9362507,-8771411907.0506821,-3435370510.6348467,-7760241462.6073952,-6900659133.990099,-657829124.01771927,-6683561932.6272049,-7141157181.7537451,-8118026761.9919739,-1060653553.306921,-8993165905.2223969,-8379361315.3267784,-7134360522.3183479,-1621229262.9290962,-6451737799.5708885,-6931679512.2152739,-4642383014.387702,-1348241682.5638847,-91670200.753862381,-8598307126.8075199,-9718219141.969696,-7317022406.7644053,-2904679778.2758751,-9204742275.2579575,-948429828.01786232,-6152384898.5444145,-1341706191.589756,-6313397784.6203804,-8808306770.052721,-2229836844.6848497,-447247976.92682457,-8841890257.4333839,-5590992083.7482567,-5663301439.9238396,-1242397831.2316723,-3372404771.5884008,-1350483555.2803574,-6530029580.809721,-6448494235.8744698,-6949878831.2333679,-3688535504.6742487,-7862047676.6764755,-1354507460.1921272,-9180454791.1398087,-9790082690.3269997,-872832518.98365211,-9231797433.5350895,-9118036504.4574261,-6232855706.8523893,-4637262467.8312054,-8508063389.6032305,-4468832943.210289,-9659031077.7878494,-1263286714.3844223,-2177502911.8544741,-5302788855.5120296,-6727549219.8312435,-3677638658.0233078,-1825236704.5523214,-3340413016.9330797,-8263809501.8327446,-5412674835.410491,-3238822671.7952414,-656542518.17916107,-1243995158.8773804,-8301203579.346097,-2428445258.0036497,-7557145196.7230988,-7703742895.039319,-2979142422.092947,-6410563802.7055302,-9394549343.3298626,-6368359069.2374344,-4012029371.8231411,-7325568939.8266048,-2344202593.2688589,-6626972402.7832747,-5986152922.6703415,-9130393550.818203,-2790341382.6358795,-5484403504.9759398,-4514699050.3081865,-5453359750.5541439,-1933884151.1552153,-9709644876.4495335,-8535840036.4939241,-3628981321.2902126,-1474564460.4930763,-9405412150.1407051,-7026415465.2313194,-8308038804.8493052,-9873622425.37883,-3153202608.9124098,-5664724964.1506901,-4454326918.9032373,-2842002476.8156786,-9939641717.3617344,-1200160422.3110485,-7119148513.590292,-3439572556.6003666,-6233884373.5907078,-4394748202.1542816,-8535069637.1470537,-8938331597.1251545,-9254663838.1481457,-4718455318.8896751,-5392571199.2147551,-9606072139.0343246,-6296056141.5159216,-9346179270.7165737,-1754424838.2424583,-2735396000.3517857,-4624643463.7132797,-5242310511.4240694,-1824839190.4661446,-7433246867.9878883,-5396191713.3949051,-4399139364.8100901,-9859661906.9716606,-3184458735.1491795,-9950167951.1790638,-5275151087.4436483,-8337732160.1644945,-7351590504.6689987,-6340611609.9962254,-4562389874.4432802,-2817895201.2873936,-6251219674.3884335,-8405763602.5093307,-6821902853.2889166,-7212285253.0324173,-5687160294.4685965,-3550615534.8313017,-8516693408.7493172,-7127958517.8088245,-6261216742.3604507,-6780691144.8442106,-109788527.30426407,-8445832019.3615532,-8850994263.8905468,-6123368612.4125957,-278281097.80686188,-1042668617.7605629,-8575218599.4321337,-1122331249.9497395,-9925258159.6449261,-6063866699.5080547,-4405926017.1844244,-3245422596.3216906,-4887526373.4245186,-7477858034.2147617,-8321331048.0865145,-500122959.27856255,-1392069594.8640537,-3753178248.3409595,-9775792029.7086926,-7930520607.831151,-4825761989.2764645,-8903448414.1671486,-4134292281.8193455,-4341503850.2845697,-9045270842.1298428,-7256665989.0995951,-8464359969.519906,-9288347419.4225044,-4789046682.938488,-8415506971.2271299,-9239034969.4357338,-9504797072.1993332,-3547524777.8862991,-3191162551.0371227,-3126410558.5758076,-2182441931.9996643,-86652216.095884323,-1926348016.9390345,-6924845162.1552858,-7349464032.1327362,-9233707655.2978535,-1041006032.3420582,-4006685855.0007706,-3920139116.8430634,-6097897552.3440027,-9855991634.5546608,-1565974735.1013088,-6559712512.2969952,-9747395990.4416676,-4663352657.1775026,-7122184229.3711414,-3722374283.8707333,-1847168561.8864403,-5532626961.8046293,-4978448048.2704802,-1888943583.1186533,-3149066530.8531494,-8551720085.2329922,-3209513093.5582542,-251706315.71366882,-848885510.10060501,-1662399390.1491566,-2502069928.03615,-6598988357.3401546,-8960616430.3716297,-3837609321.9608831,-6744717220.1699886,-6962438368.0766029,-1771309846.9037085,-9107812284.5811749,-7343279880.2715378,-4784741988.9271107,-3713462183.4149694,-1747084672.9224081,-5138708593.3442945,-2360733794.812355,-3813598461.6021252,-523606947.17384911,-1300197319.0662766,-6664527247.5277481,-8105241239.7260294,-6102616135.420723,-7932906835.5466728,-8495871268.8288689,-11679901.343294144,-6662955750.1136436,-8356108116.1503792,-4463211673.3999071,-6039196043.6713772,-4497060485.2688255,-9856733426.000349,-8395789545.1898232,-8239246262.4135056,-8829105317.2440491,-4210582180.5276289,-6014495655.3615074,-2529245096.5402336,-1686169978.5969133,-128414080.06842613,-8149987952.9687052,-5375656036.656848,-4992142406.327384,-4118176962.3715019,-8736855224.8325462,-4944056221.789567,-1353715440.1916904,-4664921248.8651743,-2333543150.0553894,-5360158540.306798,-4356464602.1518574,-6691402325.2718697,-6104306215.8099346,-9992595240.4744873,-5098623398.7158918,-4224628999.9411678,-1130959087.4726944,-3045517323.3027868,-949517168.07837486,-9163438361.2217617,-5016110444.474165,-7528432777.8642836,-4707730550.3825216,-1420309360.5313797,-902992799.85649872,-3197553251.6188984,-4214015598.9874763,-207319004.50911522,-2242148924.4634218,-9709429286.9150639,-3386053723.0131845,-3768366345.3619146,-5303427647.3375883,-4506019475.4879103,-7802323813.3042812,-3763994605.4383984,-3974102640.6614351,-3614871919.3279724,-8157410079.3319254,-883914945.62740707,-8024902795.638958,-7261870978.6739235,-1380078523.3504677,-5451443188.8129539,-8743507459.4197006,-8332700638.7328959,-3544197432.4110765,-8351326564.0260887,-5626817895.5368385,-4001951257.8323812,-3873949347.2108431,-6791057605.6172676,-2625175859.5852795,-8514390804.4877615,-6967205552.2218761,-6526533770.7223005,-9570322865.6632233,-1459443760.9585333,-1644924695.9733953,-5104463436.1990299,-6306918249.8348331,-2084205502.9700994,-3386606882.0563221,-8534202200.9728374,-1042800835.2981625,-6801447179.4883175,-7259009396.9314461,-1270477283.6876335,-21015185.463693619,-6357179198.3127079,-1656466194.7971954,-8009610064.5267563,-2086563162.3656473,-2022032694.2919083,-3433872939.2784023,-1342465068.1480732,-4563269781.0267696,-5791473284.3189383,-6133186710.4537754,-4762389699.9865618,-1777679138.7078028,-3230148372.9173498,-4046654906.7192106,-1407419492.8841858,-2183586739.3196383,-8254480955.8311701,-123254499.45452309,-575612588.79670525,-2117461942.4588804,-8172638849.5380163,-1470791123.2633677,-4294190672.7968311,-5143871738.5953503,-3785809025.3241768,-1262439273.7058811,-1219263620.1557007,-6661529103.627862,-9951803518.9296818,-7946832233.7795582,-4175955709.6523714,-5056429342.8611116,-5352970341.2195396,-9687910391.9803257,-3416362587.0895691,-1724255842.5186214,-2988950098.6345167,-7357425617.7840233,-990123763.6501236,-3225006648.0855083,-8894878903.0487289,-2061356663.1007986,-4899580716.6655111,-3181561378.9783087,-6242113612.0366859,-3492407613.1533346,-6742656142.7766037,-7626582742.9060307,-4396357632.3368464,-5225965222.8212061,-6850275737.5484324,-635807321.87765884,-7667133512.6743555,-7588964901.1743097,-5390426242.2536955,-7908861220.5577402,-2110514024.5958481,-7275279707.0821419,-5036492385.4665384,-2241825823.0509491,-4940699458.1625223,-6685885817.6095886,-8800763820.8836002,-3969252980.9172697,-7589018147.214201,-8159851366.8380527,-559579323.52429008,-9125411443.0341015,-8294522790.4088087,-6910846215.0503845,-3422509572.1951246,-7691216017.3504648,-1387174961.5527649,-908129448.98030853,-5604033766.2883224,-631156527.44283104,-7005501487.5917988,-9681211565.6530762,-4240145744.400527,-4063529547.431901,-6196177131.8767519,-9561824786.986269,-7702542958.079546,-5750971532.3860159,-7470587604.0007858,-4784187223.3525324,-7733236104.4766312,-1596605790.2223501,-987409093.38716316,-3749703183.4638872,-5346101627.6848583,-7447953224.4373341,-6150156832.685111,-953087619.01353073,-7888573019.5107994,-2326993970.96772,-4414675001.1478739,-4373345003.0946712,-7490600673.7327614,-1028464726.1382179,-480319770.07367516,-6319205910.3355017,-9396881463.5321121,-6622689920.8153,-5725060825.1979742,-3811446447.5442572,-1538314829.4953318,-9131045625.6319809,-4770046705.9030771,-6245024677.2758541,-4348607459.6706905,-8126189299.1151648,-8600324848.8067551,-1894733140.5899458,-1863887899.9032154,-2767518084.2881851,-4727934699.5671129,-3253259559.3709736,-3891386893.2574129,-860185847.6003437,-7442335670.604023,-1790390988.7014885,-5782325494.0592403,-4512753617.5671854,-9914736442.7420826,-9844584050.6038513,-5442611908.5302076,-9053136434.0350666,-2310932055.8846064,-4852417072.3303385,-6496249628.6036568,-475173595.84823227,-3370262401.3757915,-1569388043.978466,-6891453559.8212643,-649877510.50289917,-6940642495.4798965,-265869175.59168625,-3111412644.6094885,-6274736118.8754406,-3052334772.1863537,-6790993090.5742245,-3744208696.9238806,-2167521001.1573563,-2875617915.5455666,-7877782834.9060116,-6699972972.6038294,-408477935.50219536,-1261503254.9372768,-697671324.9448967,-7821506755.6443748,-6342705176.5776234,-1365155748.4894619,-6550876105.0834751,-6919271357.199913,-3073183731.8686409,-6092837858.4045248,-2833961353.8882208,-4376578156.933012,-1996565038.207324,-2885570987.8391638,-4063295215.0306187,-3514665300.6750698,-9028249899.9539204,-6613202807.8321877,-4404908300.4712763,-8945145076.2462463,-9569100402.3386803,-4184901826.6651697,-2423682760.739234,-7406310572.0826378,-3403524701.2118731,-3613181836.6104546,-4005406746.308938,-9084765405.9513206,-7730052527.2672377,-4118579824.5775633,-2862856419.0737391,-321719242.29636574,-2754975886.3429804,-1843163013.3426132,-6557820334.9091129,-1599458740.932868,-9672491753.0409679,-5628639578.7907495,-1563841529.1028337,-5453909223.8881931,-2296998867.1383848,-7370227445.1799412,-4903533617.5442009,-3242541736.2019205,-2930367144.9973211,-9450152937.8435001,-2088260935.4793243,-6962742375.0479927,-6693309771.6933613,-6538639655.6828737,-863248571.7358551,-3168448308.2345991,-4232950388.0992832,-1642653074.4855881,-7120907248.7513905,-3540755829.9541063,-7331351412.2614117,-7728185770.3290272,-1098218258.4291515,-2931981608.9784002,-6338988119.171093,-1173863248.8508701,-8499846095.3692703,-5129397288.4518814,-536724271.73341751,-6417281299.7220936,-3491646843.6818838,-7722992087.0107517,-177854335.45209885,-1573307936.4568081,-8061663045.2760754,-9801595236.6602631,-1712574021.3225183,-8154299676.1372128,-5061979105.7242231,-4853165883.6199312,-4092214683.1958961,-1327678929.9502811,-9551094302.4868145,-3862936255.2044563,-4355418489.413413,-2899747913.0163641,-3664556970.5220528,-430344297.57626152,-5019002380.3476524,-5164298927.8950071,-9403763678.9158173,-9824812058.3769035,-4848368098.5431671,-8657122955.3261681,-9468050617.7778511,-1439081105.328371,-1563680836.3775187,-3551095254.4328251,-4053272219.038126,-3519084295.9060173,-3089811665.2313395,-5576403132.1508627,-3527732340.8005333,-1771815566.7032061,-3765601597.8841238,-7151679229.2761021,-461416790.28440094,-4882483967.1603298,-8230560063.5614176,-3925915412.2808943,-5250948023.0602674,-5291527233.091712,-1575963924.0843468,-4742229236.8156357,-5030365447.0794001,-1271476655.6743698,-2375952713.9539137,-6799340318.2771692,-8201227418.7925663,-960266786.60012245,-3083779419.0669651,-8431459188.1524963,-855751418.02602959,-6339635630.5042553,-8373425819.6080589,-142648751.90185928,-5719038772.3591785,-4434797820.2603378,-9581481309.183815,-6009371923.6818047,-7742537453.5307226,-3184297534.8530617,-3338496336.4482613,-3648204624.822381,-1286551177.907362,-5394684467.9252167,-6552716526.5475864,-9278925627.0764618,-9727484311.4700737,-9596224420.2786636,-947173362.10612106,-1758007140.2573748,-5289377556.6535063,-5289024825.2133255,-895359773.16797066,-9747664395.2793388,-6720202239.5582542,-7949287025.4630165,-3088964524.9043283,-6221100460.1845112,-9825520212.7795067,-6596606839.7885532,-4876531474.8046255,-8557781553.9714479,-6681863249.1457109,-750798604.91037941,-6638875485.2683258,-9507649263.8819523,-466543944.57456398,-9003114737.6699753,-2494945971.5800819,-37260736.403745651,-6660757707.7658367,-6053092813.0483217,-3671672521.7918854,-2616448575.4378166,-5844542961.9831867,-662400842.18104935,-4235002005.5836182,-9512641709.346632,-404994742.50735283,-295712855.68362999,-3841517675.3525267,-8931406871.5225334,-8494221028.0910892,-8656217302.3301067,-1617293049.0226355,-5318413023.3737469,-2738345794.6402149,-2439893855.0723343,-8911538014.7629166,-2851632748.0483332,-8386484605.8872061,-8280995374.2516937,-7029897098.26085,-7477437118.3205938,-5764175586.3603373,-4311681010.8635378,-4715855822.9612007,-3347990378.4713278,-7249026226.6205473,-6681275205.0872383,-1720439140.5815363,-9303330325.1255341,-2072152624.2338552,-8854561227.0226612,-7262520115.164979,-3245924458.1174231,-3843055989.7433004,-4514726449.8183289,-8984492770.4977245,-5755865355.4466648,-3300367892.4584455,-1184342744.2447968,-6526034025.3571186,-9215628532.7712269,-3305043986.2710104,-2115593665.1365662,-7046977649.7381535,-1189355404.0659561,-3195720322.6449003,-1963863559.870863,-6062269311.3263798,-6398940084.3965454,-6081816668.5483532,-9913864834.2427311,-7930366951.2478867,-9752408564.1154881,-2754796895.4573832,-5237945842.5671997,-1806946451.1980515,-497036935.78054428,-735283588.05439568,-7748508763.2590456,-4858800038.2781324,-7793270633.7766218,-8068567132.770443,-6871403626.013483,-3970990901.0188284,-9833097788.521946,-8018198099.6511822,-4364112571.9110937,-5896074190.2148876,-9717766745.0442028,-1469251840.2971163,-6206487266.2605019,-5709182089.6237373,-9452634139.5068665,-743414239.02094269,-5806430012.8727045,-6269222859.2006388,-2807627761.0587654,-3017536279.0466623,-7468253260.2658901,-4113745792.426198,-3255002422.4670963,-8991338543.2290878,-3804930849.6203184,-5876050009.8045969,-334017708.46720505,-752917745.60967255,-7046551956.1591778,-9444495290.5733566,-6520614235.5442009,-6159524529.1594124,-9314345817.6158562,-7593598850.3120708,-3182549980.21947,-7721913929.7908249,-3576500514.233222,-6428796155.735343,-166189652.91967392,-758974331.88953209,-8162499701.3223362,-4975016536.6936045,-6320793384.5883713,-1967623544.2631598,-9438787405.4352379,-6497279699.3107548,-3285695326.7203112,-5413174885.7838163,-5173120347.7999964,-489033382.40574265,-8339862134.4736366,-8670166244.3976746,-3824947914.7261391,-9296927554.6031933,-8517464974.5777121,-2939185603.2965231,-1071906267.6268139,-682972295.67580605,-2776116620.0746393,-8910990841.7956276,-7499763199.843895,-3483031544.0890884,-5529667875.2452116,-8539378624.5554991,-3757163973.6837893,-3060370733.2584419,-4118754396.3375444,-3743863725.7290516,-9615737136.9574776,-9562765981.5800819,-7432793863.3744154,-2020761699.7480059,-8668691062.035923,-137893030.00917244,-6396769415.9475098,-5632551806.4843035,-6696044325.6932869,-6552511526.1507883,-390951485.40266228,-9511938830.8864136,-6726287547.826313,-7747970922.1439533,-1645658743.4718761,-4189870812.1141958,-1093911224.4698067,-3986246660.9531288,-4229557652.1377974,-7474815959.8290358,-4735335098.1746702,-3456583470.7604666,-1144826953.2535381,-9399044045.7728939,-6909832307.4465656,-594939073.55690384,-4165129934.5553989,-9074694269.8949528,-815284530.15368462,-6660220697.8561411,-8753184466.7474518,-3489503614.3242006,-1038622153.8877316,-4960892266.1664619,-4817940372.094903,-4690748567.7581997,-8867691496.9660168,-6208762750.4086876,-2224616711.805459,-2310925937.0952921,-64559391.296291351,-7174887319.843605,-7726198751.706768,-3507272608.761817,-1423073456.0833693,-778161802.78564644,-5618362499.373476,-6693281131.1958885,-7986618594.9334736,-1865608767.4884348,-1498246587.2660923,-2123644033.7688828,-8950351842.3183861,-8756775225.1713448,-2696933006.6667509,-8426124511.9096651,-9254375586.8264103,-5850017292.3743734,-8636728159.7539597,-3126672059.9848948,-4090233105.825778,-3422960949.3223991,-1674436182.6162329,-3200225025.1640759,-2928478443.7709475,-9906133259.6559811,-5383490433.9124393,-8713904300.3675461,-2414408527.1418991,-2360936206.1323957,-932509841.83849335,-1580845018.2937088,-6940372137.1931257,-2530514028.2046328,-8713792031.7594948,-554765363.70271301,-3880863839.9066753,-802857734.71699715,-1841972899.5076952,-7769257065.5974789,-5834223651.7437706,-4902328178.79632,-2061502636.2728233,-2122598049.0872908,-9042216485.9276657,-4775480866.0233192,-689630656.0371933,-3826080528.7053061,-8611462917.3177223,-4417593004.740222,-4264112031.6608677,-2690079764.7283382,-1391139266.4763794,-9365978897.6126137,-201762268.36822701,-5072134673.1568928,-9814272529.9298229,-7700759554.511755,-9753814276.7981014,-6626089190.0046463,-5573789263.5867567,-4483618923.0832424,-5837162435.4710627,-2563143266.1772947,-7531715948.3814888,-5876944526.5109739,-4515507177.5325508,-4923816654.4074669,-7021044679.283968,-8710276277.3991394,-1761922799.8746157,-7851643455.4296341,-2826120320.9592867,-7071703535.3318081,-8461115723.6297026,-5500341705.4965601,-4099020807.1969566,-7597178844.9753084,-2399423945.0582352,-7367365209.1833553,-1041695234.3302689,-1084174228.326725,-8941867274.8036842,-4138601679.0097237,-8939707924.2522335,-613253795.08351326,-4811626552.1916533,-3819201270.2707739,-1506050637.3755922,-7492809605.5697718,-1441207130.8297977,-8974625470.6849327,-522369447.64633942,-4536360975.4356127,-5221111863.3981133,-5573543906.6544991,-2699493605.9078999,-3084938617.6490211,-5543922281.8039989,-2405605447.3067093,-3786151370.1893454,-6005788084.9846401,-8027323382.1725607,-4325865994.3093128,-7494554117.1068516,-7944160767.5708313,-6828329437.7294884,-564713858.54585648,-6073337055.6697454,-4871933542.2391272,-2505537113.924242,-7237533929.5683594,-7019482681.3601246,-7708604475.7124376,-8687092566.5283318,-470715843.62834549,-2589183604.1544847,-3105791712.4035397,-6137785176.2014465,-2921272454.0942097,-7956572026.2186708,-3430780892.4516335,-7625526252.905798,-2210325508.6917524,-8808004602.4434166,-4195304506.5731506,-373882533.54802322,-4967698611.3566341,-8053099829.8982592,-1212686969.3803883,-1659265405.8668575,-6070507262.295043,-7393125267.9600487,-7573644928.8768024,-4445244344.5068197,-7183733661.9406891,-8260487171.5295868,-952289924.93030739,-5435041243.2012691,-2973247806.778636,-2949457045.8839149,-1469442707.8738451,-4333872802.6565123,-6213163030.7125006,-8538342157.9906197,-3669783659.9123678,-9558243432.5920734,-9684431587.8431168,-2890905307.8511105,-799664576.52661896,-7377871759.4980717,-5302531177.1821108,-3688445490.0191145,-4800968152.0594673,-5773496034.5121269,-2336878863.4639435,-3076271133.7240686,-6637834008.1879959,-8730952653.6951427,-3740148791.7379904,-4032277796.0829248,-6730979958.4103832,-2321686209.9472923,-6888931519.6630058,-5769646841.0587225,-3539216037.0887461,-3287996769.1569548,-5663083682.7360773,-4676554068.5240183,-8971134536.0711899,-2763677882.7542381,-7638490291.0828266,-7909682910.1670961,-282172056.42111969,-235352067.78763962,-3011025789.4270449,-6757777796.9167862,-3405497438.0024519,-9277794542.7946243,-6739026585.4542561,-7101497231.341176,-9801780844.5927544,-3100304913.931386,-4295274078.0194664,-8183802846.0694599,-9636651014.4798222,-135201561.31985092,-7352572533.1010904,-2790455271.7452116,-8093415701.4868393,-1392563656.8332253,-5507003774.8501005,-2188231957.4605503,-2313448254.3220158,-2641583111.4073324,-3720638065.7611799,-2563058411.0492239,-6852997041.1564293,-6960859867.1167393,-7079568689.5154219,-25776052.913604736,-9217620068.307972,-9399084057.7190018,-8280561680.6118031,-3554100720.8564539,-2787196525.1625223,-8139356849.9011784,-9105514071.505558,-9159754123.622757,-821877965.6900959,-4106367952.7797031,-5703230498.3226233,-8742266050.6656837,-9202771294.0104332,-3535451000.2714825,-4278558819.1955681,-9597048237.9601021,-1682276808.0915403,-7615849888.1906242,-6526321990.2971611,-4522074068.0472813,-2201109906.5070963,-7475005511.9126282,-2916607640.9263287,-8811259097.5385532,-4090576428.5796499,-2157205507.0121899,-6230063022.0256691,-6214847059.8332844,-6061749738.1035862,-9467371578.8472347,-5716911487.2439699,-8297376819.1252069,-5769743898.840826,-8749987266.6170998,-7810757176.7038364,-824652580.53056526,-5032353508.7829428,-471666812.45257759,-9601302824.4886646,-6407177360.1563435,-4351834965.0376167,-8053708314.1589365,-9508570386.1459789,-6431774313.4527798,-1277187555.9693241,-3428593944.4839945,-1399752370.4762058,-7271090660.0514565,-6617420588.4926033,-4264041307.024559,-259695368.39598465,-1949677856.9783983,-452249938.17990875,-6678498213.0458984,-113790019.9382782,-8568122643.1892691,-8422823262.0929813,-303160954.30514717,-9970816492.571619,-6540611836.008215,-7518200390.2890549,-5851467051.958149,-6537098808.094698,-7672338951.6118269,-7666612910.3401165,-1132138768.1664715,-2441088169.1720638,-6499011798.6462231,-7740723164.978054,-8239213125.9563036,-5515567521.0817833,-4610774287.095912,-7405554354.4502716,-7292019131.3985424,-6542054827.2051792,-9952414447.912117,-970450526.54067039,-4084213993.638011,-9872991326.2777386,-3176900877.8339481,-8677771932.1120281,-6348695264.0973549,-6119373497.0099096,-2191213642.5622387,-1593789843.2860241,-8807552387.1258259,-7867336988.196702,-3644574774.1334219,-647656010.46774483,-9964846482.0382881,-301996191.07070923,-5149562298.8052778,-6247414462.643611,-2195831696.3519583,-151371544.74620628,-9126560313.248806,-8779143057.8856621,-4520489192.1843939,-2390425299.1239281,-2584189293.7163515,-4206383168.345396,-1992264956.5709982,-3788434637.8659477,-1376266079.8858547,-5100957600.4240952,-9097031001.0918941,-7795496462.13344,-3662780253.8503466,-8558657586.253027,-1708499745.8293037,-3648242927.7915649,-9532595893.8805275,-1975843062.029767,-7044806422.495573,-3303567439.5216856,-2086273758.5322275,-5283970402.5596189,-5142443415.7289343,-555218899.17005348,-3310450751.5377226,-4085191318.8911018,-7967491776.4200258,-7732522359.8102741,-9091192933.3560009,-3161563091.6638966,-9950360255.3208637,-6793571415.2122726,-3990892973.3980665,-2510814544.0967245,-5928804770.0534954,-18567951.462928772,-4875731114.8105326,-7302666504.6714468,-3710577681.8239326,-681303640.36242294,-6933490517.8558674,-3036129410.1436996,-9401303015.2435265,-9047407198.3269272,-4187804412.2122974,-7541278237.7228165,-6651211632.7505312,-653424473.48272514,-9728743841.4330826,-5202157837.8185301,-3115842212.6799641,-1174722540.6091728,-3520823531.5007124,-2207026810.6989231,-7061654776.6285973,-9817161136.3251057,-5285028550.3140335,-2292382499.0425253,-7117217912.1612911,-3142015992.8839378,-3586653930.3107443,-1323329423.0249252,-1322833477.4558468,-4194903281.1665144,-9619438210.5403233,-3738952200.5545673,-7811839217.5389004,-8888528107.3109646,-2513538320.3661556,-7863057758.8728189,-8842881545.5401726,-9636302348.2626781,-4575767925.0858936,-5554550725.9455757,-6186544113.2425022,-6734191030.5904818,-1701966222.2741117,-7127057742.6147461,-302725346.7973671,-5035480044.812952,-9410899924.1732559,-8182948073.5539503,-6250940084.366642,-662081300.7491188,-5451239934.6459837,-598187163.48103523,-962541008.8062191,-4085369150.2800941,-8742910793.6424942,-9991913842.9694519,-1015762838.9677734,-969935558.70800781,-4088331179.8188467,-3171070551.7169561,-8979631976.792181,-9261489859.8560104,-1546331486.5787563,-36158374.110105515,-5159148418.3629808,-6855430328.6016407,-4203846285.2336073,-1907801570.7143517,-9409111437.9125137,-5385493946.257493,-810121829.60915947,-4128585311.7056551,-2747010687.1601048,-5224044912.5066528,-2965434613.4097605,-4475463668.9025841,-6709514912.5469036,-8246834604.2449074,-4433785789.2715073,-4127551310.8172913,-9009794751.2812195,-8451984694.8480396,-2022674175.3114004,-5545474482.2143583,-8015393112.0532522,-4623785785.4713373,-1179327192.6670456,-5380998859.6438999,-50133893.79564476,-1658902848.9735146,-9698899514.0719509,-38276839.600532532,-9184216260.9916134,-277557238.97734642,-5996613356.2194748,-2540706252.4938354,-3574936327.7013283,-8000430488.2275887,-711220510.76719093,-9636707652.8621922,-4814515680.1275787,-8113959348.017827,-8039276730.4652662,-4224526573.0844221,-555063752.4706707,-3717276582.6569891,-6129949828.996829,-6352252441.3575172,-6323568057.6365013,-3634419930.8040543,-2127681820.0436268,-1087065458.723362,-714578908.86535263,-7464817937.251379,-1889331169.3061857,-7136406665.9542503,-2700354061.8194208,-8745808280.1985245,-1167071965.4750347,-4714262264.8436127,-1413317514.5108137,-1792336351.5932961,-6747259223.2276316,-7002245385.9652214,-8346713115.6264992,-2123210840.7148752,-3112540555.4096546,-5629874265.7240839,-3390359152.7693949,-4494602871.6779661,-1249177482.3885517,-138855256.19502449,-7809702728.6283493,-3102190190.2189913,-4931386290.6249599,-298632209.69371223,-9914406405.3047352,-9040341619.4981365,-2002906127.2355556,-1019077651.1694489,-3603410884.4463043,-9415569070.3194141,-7848716434.3064575,-8766818482.0864468,-9415869899.1525173,-3692742516.9173965,-7339827851.6583462,-6298956529.1417732,-5953583845.8076868,-6804277291.8410025,-4881976638.5010853,-2043056670.4407053,-6847424572.6489506,-6982951909.6053696,-6503711229.0741978,-3925383152.1163292,-3383221775.9550276,-5380277634.1289644,-1233143837.6021881,-7074073085.3883266,-7771825320.3101902,-1675810418.9241333,-9246300566.0855465,-4294740469.7654743,-2363457752.6896887,-9294918859.4480114,-1525800859.9373608,-7336883035.2890778,-9107229588.6425858,-8291251727.0850716,-4426598281.6912603,-4396925757.7337561,-8334382032.2107935,-7979094977.6926947,-6927762849.0979586,-5076311890.0625753,-8348406655.8790751,-2706325846.5222569,-602692306.05012512,-450036191.40518761,-3210039318.7525368,-2376316614.2800703,-5090466591.5548401,-9199318620.456356,-3069690932.2814426,-617537764.83930016,-4255691785.9397736,-255261527.88319969,-7328187662.9096298,-3928895681.7722692,-7059028223.451026,-425050443.53017807,-723778394.51285744,-6693494548.4204521,-6035974319.4893322,-987848591.49500084,-1724334578.857378,-9996343706.7348442,-8091862832.8525314,-5167199769.5406132,-8011357663.3981695,-8525252493.7115145,-4843380989.5568409,-6850079100.4283543,-7647041003.4550791,-8286245451.4801626,-3643527092.1164389,-4070930637.5464697,-295644976.23778534,-3423919873.9697237,-7208702185.0046825,-6510373128.4613686,-2023860002.734169,-9463065548.3879642,-4767160087.8814907,-9528319705.3248501,-348989133.29119682,-9441421879.5113049,-7623455366.3573971,-9284880051.9265099,-4230498669.7803211,-9843244529.3449154,-9710248559.7423382,-263209870.12747574,-8449868473.8450165,-2652032797.4939547,-5747629946.9886303,-2476143840.0557899,-2102033194.0129747,-9666863943.0178051,-2051567580.4144297,-8823938868.1261597,-1598657724.3563604,-7386967279.2782745,-7975585875.3038292,-1066419934.8159466,-6926065776.8045197,-279388612.64264488,-6236399761.7774773,-59261120.452898026,-5285372213.0006456,-6532137324.4490089,-6443379633.4843044,-7076978665.1375303,-4744740475.9603357,-8127525914.6476679,-4371739118.9228086,-2568516627.2315655,-7323322824.9358063,-2819812773.5135765,-3798089207.3045721,-8111052757.7836294,-1105445286.6828499,-5660621966.6692772,-7730089016.4857082,-9544068591.2491341,-9497613289.9093838,-3445265286.7918921,-2895725258.4051485,-2189577963.0529118,-2487176508.4626932,-1370995725.4366322,-4365275216.3866758,-2146471229.7015505,-8642788098.7950878,-5665077015.7253914,-229722620.96505165,-6521787562.2897129,-4821732019.1264267,-9446114497.3146477,-6269927949.5519714,-1805585581.697401,-3466992295.0691328,-8939596596.2799816,-7292061057.2125416,-9939259565.4414234,-2747129915.0760946,-7249576500.8920097,-3371824592.5490694,-572286977.90977859,-4430684701.630846,-3257406664.2895155,-9108600474.5175247,-6143416022.3362007,-4618448352.5136852,-1430537089.1654301,-9942413994.5825405,-3251751072.9139557,-7434145282.2792406,-3919030829.0095434,-2502140065.9392366,-5605741606.9990301,-5301842506.0477676,-387147984.96306992,-1073704397.7328148,-1770935022.1637535,-4430155200.509408,-9895005738.3731689,-975655322.86556625,-8583832625.441309,-6246929250.5672035,-5171901633.0488148,-8254411888.9490433,-4193815701.2904387,-270182826.59792519,-7070110338.101717,-9240362069.1798306,-5611330278.1909981,-9859838017.7421951,-6017348119.4559803,-4654057464.1656284,-8626945205.1701317,-3503651279.6744146,-472382966.91609573,-1402853707.2456551,-6399553337.0288048,-9200645508.3245697,-1630225992.6672068,-84128965.218280792,-9586642698.891819,-8133643765.6547861,-5761694102.9718933,-4147084847.2122583,-9243620275.5954266,-4974965903.0135336,-6861851252.929266,-1540706889.6184769,-540173469.12598419,-7963008671.2713547,-1454965426.5097494,-7663387230.3654366,-8264688810.0414791,-6154259725.3927345,-4641164159.9381351,-2222293017.7442026,-7051107888.404871,-7637689979.9831686,-971278416.43006706,-7858148513.1103354,-9186125856.4399452,-8365262458.264389,-2125251065.7958174,-652186948.34384537,-8255915071.5239992,-1310099820.5440788,-2800120444.2913465,-9297020137.3803253,-7679933395.9343987,-490793263.09360886,-7928625196.4256287,-6749306794.1153793,-7838678893.3836575,-3117711852.0615435,-233294571.3295536,-4508230547.0385351,-6181509872.3489857,-9248637245.1117973,-3647111044.9006186,-6952503505.4676437,-9534359611.6173992,-4721361026.6957331,-7679316220.1057949,-3620408001.0624638,-1251596164.3674908,-9735548617.344717,-5398574483.5753689,-6431402552.7640953,-9969364295.2510052,-370641868.59311867,-5350587280.0007715,-2697889321.2825603,-1759281075.4523058,-7913134030.740778,-1281144258.9724255,-4902241270.1019716,-6989254758.5286913,-1509648785.8441143,-7639947918.0140495,-3365808847.0924091,-1684217323.4493475,-9223233042.3625221,-5622473911.3543491,-8142590476.385725,-4929126904.387475,-8402074235.651247,-8145254187.0057135,-5749443683.7326736,-8485014222.2481499,-6049295498.918932,-931943676.87560081,-9587825827.8074265,-72500951.183919907,-4731450228.0817423,-6099185608.7174702,-4771584175.1186152,-1731894506.0370312,-4110992097.4190598,-459423203.50968361,-5161570068.9326248,-1061579385.7348671,-6029228058.5750551,-1589937443.7546577,-1787835101.9525661,-3167158405.5141277,-8086318471.6603527,-8282037421.7671013,-1103156209.8816891,-7624486915.5390835,-4832232441.338603,-5657148363.968646,-7101036620.1505756,-9749378142.9034748,-5039710184.1239328,-7313534089.1670971,-7313419888.064703,-198406568.77722359,-6235107691.4037132,-6873075445.4953136,-2267406844.3759165,-4282483594.1325073,-5709905294.1991444,-3883367800.7654552,-6608690987.6802368,-984619363.18131065,-1554474661.5056238,-6039600803.4471836,-6884186037.6620274,-3072333429.7014885,-4225673473.5518818,-7955141810.4391222,-2275455331.7366323,-9371472133.8520641,-7995814606.7477741,-3776141089.0783014,-6184921441.9812346,-3119804228.8783522,-5824637557.7974377,-7032148645.0905638,-7180561484.1196079,-4284381622.5544643,-2986523546.9798241,-6837774406.0377979,-3400691885.6954155,-1905019968.6262684,-8346861193.5875416,-6345024227.9958439,-797756019.50295639,-3012100968.743041,-9386267201.1050377,-3665740464.9817724,-6286836995.6488705,-354209003.07196045,-4983731462.1905031,-7992033306.7100525,-3313270558.8061199,-4018222599.4228277,-7549611870.4444809,-9162965638.1810799,-2331342860.8918705,-4555852918.9644012,-5660194044.901042,-1538508532.9492998,-7336251149.2204094,-9593016677.5767689,-7173155707.1241837,-6706395575.6403952,-9490157237.7930813,-2906503382.382596,-369969819.2384243,-1396891231.1119518,-1560174602.462183,-4991013799.3635941,-7300674526.7564783,-52404160.209106445,-5204652254.9492273,-5713598591.238492,-7447741388.1328392,-7326547485.1122684,-3173852714.9268913,-5270481205.5526562,-2984427924.5038433,-8391546693.3257008,-898308088.98181343,-8411021870.719842,-6900094640.7512293,-7316580319.5798111,-6171236138.7080612,-2428799351.5030956,-673484137.28310394,-3908259717.8910818,-7923458565.6998367,-330669727.21203804,-1911475754.6861639,-2266792341.4431019,-8790818883.6926918,-4271354233.4876108,-1191864538.4216366,-5497765006.0164032,-1690338848.5240221,-7129429236.8071384,-2246874948.8075132,-2476134026.2441607,-9901622466.2871685,-9056418323.9837322,-9731999521.6361961,-8932142555.8204384,-2716513630.7310858,-2651063712.117342,-7527181089.637351,-6454079742.8979912,-9561123447.5366058,-4193664000.484581,-4492231375.1572666,-7011445656.2519951,-6432719056.385601,-2863190554.3304129,-4620147878.8421087,-6395138001.8955746,-2045888664.064991,-2815404758.5757818,-8804369054.3886089,-46762613.177970886,-9285564872.0420074,-9162998965.5594082,-747912943.82273674,-5317941059.3609629,-2747647355.5701933,-9061969393.0267544,-7327796719.3042164,-2748295402.4138355,-9644864220.2076797,-879545557.29339027,-6361207634.1088047,-9135855713.4799538,-745946474.83308411,-4800491137.9500227,-464252837.49019051,-4473690018.6104546,-6147317241.7969246,-3148509620.9083433,-8248339749.5821896,-7003452163.4893045,-8246879247.1925163,-3981222881.1404305,-4327350752.9954386,-8014960959.7522221,-8396713670.9691505,-3432425787.3978357,-8817359500.2172375,-3016429402.1668425,-420331092.1123333,-5403196171.8514357,-7363566155.8090572,-8423408279.3530865,-4783343228.5675163,-5782141834.9192371,-9311763313.6677551,-4039456379.2646008,-1644157057.9979582,-6776685004.9105482,-9022246867.0504036,-1692711800.2362442,-1010650944.3979931,-8773149857.4202251,-9503999010.2436924,-7488192988.3451233,-8650645669.684639,-623924828.60642242,-3272463998.9643955,-3447917900.7034044,-8189955083.8343353,-2470891264.5545158,-7733686645.7418938,-1891414735.8114395,-2063054033.4174623,-9515732810.8809872,-9105535654.9062233,-5852908615.9032688,-7574418627.4338932,-2745109485.2564745,-2943590142.0728083,-8609559855.09725,-7467941520.9888268,-3674427406.5636129,-8467109585.3341675,-7531665419.4752083,-1526386824.8181858,-1600277266.3737774,-9053111949.5645828,-1633291806.4653578,-139551119.46794891,-5469275822.8503942,-3909699137.4659739,-6052412677.4853745,-3020744510.6929092,-384046992.78297424,-3564697746.8309784,-9918216967.4977493,-8221534367.3629322,-6015613153.9752893,-3290233051.6096725,-5122277262.1770773,-6142118676.0200529,-3818632399.8158045,-873309081.40164948,-9299900068.5058289,-6588421604.0059137,-8573120783.6914902,-6079597245.3625412,-3457733689.0645981,-8072488322.1154709,-7816803979.4400511,-9919695963.6254444,-8808680763.5872784,-1853740951.8609734,-9568628992.4628277,-3160819782.1624126,-8344418243.670619,-838032389.04453659,-4888940929.0149765,-8512381711.1921787,-1327319772.3843365,-9431623213.5156441,-2337392641.5320168,-6657330533.8238525,-8650490741.8460617,-5491009175.7626734,-9350793280.2380142,-1496304928.7098246,-3275550527.7049093,-3987076057.2567892,-5177930761.6108713,-1354240310.3116264,-5045820852.3056946,-2922489506.4345951,-6865163303.7595081,-7562338637.8975048,-6764990247.6438847,-8538466505.8524637,-908986878.09346199,-1464161110.0328426,-5496633770.3946466,-4949993850.2369823,-2513641976.5687008,-7855395726.1427078,-8147466741.6875381,-116946481.69091415,-9150779829.445467,-3612952393.652689,-7929707933.4243164,-6191194137.0078983,-4410843351.4834671,-6702954618.1243076,-3382995627.5508699,-7406701711.2657928,-607868452.56432152,-441814329.03399849,-9597546281.3332806,-3036477079.8456879,-8363415077.4923401,-896131241.20749664,-5618766588.5970287,-1614409560.2448988,-6743323954.6135845,-1017387503.2593498,-9100676402.5395393,-6570168522.063899,-1896803612.6998014,-5027466854.5778112,-6004410239.8017635,-2134970166.5756302,-3446856993.9058628,-5188236572.3295689,-4331565015.5848293,-5094000192.3840284,-9968781380.4516125,-4586508742.6093121,-3486485209.5017052,-952772289.48794174,-6829026553.6312771,-9187408511.1424809,-7340661615.8648806,-5707951959.1860981,-5395517966.7048178,-2915412009.0051575,-3768390620.2848196,-4670087458.1674995,-1981465698.5560284,-3416733334.9649544,-4388358754.2013683,-8749064027.9225235,-9751959091.5428791,-3492185746.5047121,-2064595607.4372473,-5694342400.3779106,-7269111776.5318851,-6919725032.3656406,-1770886567.7785072,-468008360.84735489,-3114452206.7525702,-4554666604.9255877,-3960975544.1997528,-222007775.26004601,-6130499064.8436222,-5156358173.6014061,-9344646609.4538269,-8159392024.57446,-14066108.104057312,-2297817923.4331617,-3389560993.0248842,-9006927965.7738571,-7708277032.008461,-6108894376.4733191,-9077454283.9257584,-4720541211.3730583,-7590213364.6968269,-4715923136.628581,-974303368.45026016,-5428798401.7197313,-7826520074.376255,-7709726381.8103046,-5204772472.3954535,-5499366359.3039398,-907717420.23180771,-3060401052.4648552,-8062175561.4020605,-8817484593.1371403,-5520123923.6453762,-2897995066.1422424,-3821999135.5793161,-378179823.54493332,-4057869653.3460464,-7720539099.764782,-3341227807.7704649,-5824373541.817399,-7323198050.993885,-8821299080.854805,-5761328128.1247025,-7169829635.2325821,-2006762056.4794798,-635576891.71796417,-676871755.62704277,-1431609313.8605576,-5302808993.0343971,-9532497243.5368195,-6936966164.8095493,-2633512344.4823275,-5606281683.2883024,-9042247915.736248,-6931399591.5739689,-5256984290.209857,-7249870244.6886272,-4675657118.7374153,-8612526138.4518623,-606914834.12736511,-8334525304.5473518,-1480631223.8003693,-5060526109.7945013,-1195333423.9734287,-9134164853.1080856,-8906649113.7420731,-731610891.87039566,-4945543385.6162415,-8515237518.7346945,-753438326.98915291,-8395208029.7025976,-5986753104.1902666,-2822764141.7371569,-7192752242.8347034,-3251055388.9206257,-6157902691.4318485,-6414804580.0486183,-4905076630.4573631,-9095420935.2816715,-6816305481.2157955,-9917519574.5274944,-1247467662.6173744,-6272209720.1275349,-3239688003.1804399,-2116928597.3035154,-8811643158.6701412,-5527139455.527318,-7262026958.907011,-9003753184.9061794,-4055049962.4929705,-1941688620.3598738,-4881884134.8863707,-3405450178.0384073,-1509028969.716012,-5476359127.0760841,-2623704854.2052727,-4666376363.5537529,-6772644161.5694523,-4733352619.7499619,-5920608647.1099606,-3703189364.7984743,-9225880617.8189068,-3534355750.9540052,-767816564.52575493,-8081692638.9988289,-9514540371.0679398,-1982679437.7163544,-778130545.27173805,-8034290150.0045013,-3137060618.7143383,-5887063600.0685616,-3492028748.801712,-7643066363.1791935,-5125354598.7637815,-7277945580.6988087,-5457431776.9033413,-9913315058.2288456,-4190312873.6874189,-717191790.22752953,-6038769393.1584568,-4797805087.2297783,-3156762228.5660238,-5358743903.2256145,-3728585187.9728851,-4764702714.1061945,-2442815865.6800594,-6631878917.4423084,-1940196392.4667006,-6676210472.6926327,-7473669573.9172983,-117121134.94161987,-8386948693.2393169,-5262830970.3512583,-6580911497.9273844,-2531390626.2646761,-7843214206.1475506,-3300411725.1554155,-2947385456.1869698,-2044080040.2818813,-3904597061.3644352,-7274565759.8531256,-7102311775.3780785,-7160848679.7705774,-3967405032.0384512,-2827442500.9918842,-8587592947.4380388,-8153628821.2037201,-5266627718.7021837,-1662966439.8684931,-3760414000.7588739,-8303349886.7248898,-4502396265.1289072,-467343205.60801888,-6925722528.5564537,-2774519590.4521551,-45744193.316278458,-8657515959.4827785,-3779755873.2963104,-1469075082.257391,-4249252314.3230772,-683072515.29805183,-9459134519.6199379,-4358153294.8704329,-8440527566.8645716,-6011766714.9083996,-7092087129.421751,-5583974987.2443895,-4687520587.4167595,-2983192650.8372869,-1882422334.3949938,-7399570106.323081,-6114192787.0150986,-9714705443.5039253,-9363294737.4771957,-520347669.73729324,-82036201.902603149,-38310427.749183655,-4642171469.1215124,-2205167287.8088093,-2884112366.7210922,-105985855.74176407,-8097253644.5635424,-5124470403.4398365,-7923786000.0905876,-8720173393.5041542,-1417268874.050643,-5356327286.4544859,-673263963.31326103,-2574095116.7394876,-4819735712.8897934,-3266083796.716341,-2891810010.8981466,-1260204977.2985535,-2066591506.2202539,-2417496045.4126492,-1331120632.5244293,-3828247585.9510593,-2894609268.5339375,-7251827772.9815636,-6799355440.6274729,-6636216556.9897594,-8632737191.0650368,-1642764553.7977581,-8998134883.6865044,-6141136226.1644955,-2375725573.6912136,-9196534354.7857094,-9635241755.7865067,-1344156328.9886475,-2678177429.629652,-5646259384.6651535,-7815211795.0232601,-8279191267.3830709,-1234299520.4415264,-9957035928.9689121,-1815770699.9953604,-3475031639.1704731,-8841278283.0413589,-6303103780.7436199,-3371237747.5684118,-6239008026.1079903,-4611681930.7939768,-5586575358.6160841,-7015458019.7487612,-4838761538.7832594,-7193158322.7602596,-6998853893.3193741,-906816337.70128059,-5216781893.2920637,-9494602824.6118374,-9937531189.0679474,-1768358946.6697216,-8285641041.7557487,-5676359860.6588764,-6964425654.4541035,-7991694582.361393,-2555354368.6860828,-9538372785.3648052,-4191066583.7337542,-3994364427.0718565,-2987928190.9697838,-233336674.094841,-1953355808.1500254,-564996626.70593262,-1480147548.4062099,-9389250155.1337337,-8822790391.3952427,-7578497878.5179615,-3427363467.1286974,-4140191199.8439503,-2470485298.7159748,-1089539116.6738739,-2978712151.0635176,-535523675.86292458,-3948815458.5936489,-9697211659.5436935,-9617333712.5602074,-4785243699.382926,-8048499131.3047161,-2170575485.4163885,-6693183009.3777428,-7582546801.0823917,-3571665993.1375055,-3473349689.2273369,-7825960691.7700138,-7774918002.764616,-9230901908.6720238,-3297243305.2209234,-194106419.62001038,-5966857527.7859859,-7932410340.4972754,-8951120495.4354305,-167466575.33176231,-7840566113.8071375,-3896289852.5925179,-2718160122.895503,-7520214480.130249,-848263021.07671356,-4820420719.2698059,-5011950012.3295822,-2871689440.9296999,-4742415305.7528,-7401309686.5071278,-5649152382.246376,-8853139937.9699898,-8451615104.1409531,-4503305107.9047871,-166454248.64801407,-7810982344.8909855,-3344765599.5512381,-6878244199.6365747,-3502649092.7651968,-268669182.94215012,-5812561209.7323151,-6908095062.553874,-8466217499.3797102,-537524904.13936424,-9649265916.1218071,-5894381336.8127098,-590161565.7008934,-9896664007.1115417,-4797572198.3784866,-6899310024.7652588,-6618482577.9526386,-8447931572.0187988,-8821875902.4762554,-59174628.525402069,-63159524.991140366,-5497607894.226388,-9003165667.0449619,-4547817155.7983608,-1759809261.0806074,-7376682190.4868603,-7704019285.9680662,-1174587617.5794945,-6279931597.3179779,-8969389340.0120182,-833361675.94814682,-1764373093.2700386,-9463298036.7705479,-5728242728.3550396,-40768411.540765762,-796553181.47336388,-7251303936.6296854,-4719878403.0666094,-6869696970.4107513,-1291653621.8813171,-1849104241.351779,-6471891852.9141951,-5863052788.6042385,-5998475919.8777943,-4715755568.41436,-4020771124.0667992,-1182425463.0569172,-884820673.12927437,-6501819319.441555,-8670129845.9831562,-4384600807.0772038,-9578325843.9463348,-402773864.13001823,-5989610397.1922884,-8194519609.8590851,-4042923153.0424547,-6384181515.6752663,-803207045.87502289,-3506263886.2964325,-7062241847.4549789,-9392362819.1139965,-4549606561.7401447,-7899473330.6817169,-2183182170.4649591,-7005478258.0784836,-6726004600.3866405,-3617375554.2238512,-9047372269.0737686,-6666416894.0465345,-5583173877.5356236,-2740717496.0518808,-9709231844.2009583,-3136590377.6483173,-3246096217.2832289,-5578527222.8296404,-8884096252.8435688,-6178285235.4555893,-8003597199.1851578,-821849991.08826447,-4698384556.0525141,-8147073257.8998032,-3726431548.7571239,-3195301851.4724903,-6264033678.8270121,-8335146645.7161703,-3935463661.934412,-1045973867.6077042,-1536113138.6913385,-7556906794.4421673,-2980543147.5431738,-4148121826.0045538,-6071260869.895895,-8160456230.582222,-4281313396.6308451,-3342764522.6147165,-7502262662.4146404,-7495652069.5881004,-2726532670.9309435,-135654351.7291317,-6566708560.9106789,-1536801423.3268137,-9213653230.1869545,-5978345924.9248924,-6977690731.0118141,-4756742441.6197376,-6995975191.53967,-3905999884.6187611,-9767788038.6122818,-6171406254.0895233,-8238857500.431222,-2740824807.6955299,-1390812057.9313526,-1263739304.559351,-3440518237.8406811,-9994473643.6014938,-1434623993.3927546,-2040422357.0177822,-7290595369.6844349,-2554400878.3059797,-1040522161.3701591,-6124776211.0234222,-7912096055.4333286,-4377883899.1221695,-358318238.08631706,-4374795619.4952145,-5856399103.4821758,-4095029710.4511795,-7704347872.8705025,-5673985660.9744043,-1816298024.150281,-2320423271.3436594,-6395565055.2055082,-2619807923.4850054,-4984759341.9612455,-356660097.40479851,-2523258785.5335407,-5390885575.2040634,-1681501160.7419624,-9800986102.8020916,-6055290194.1571007,-285072977.22914505,-9033636548.6530228,-793162834.35428238,-7346083848.071249,-4278895338.6380329,-2080549873.2722778,-7143246894.9879913,-631392538.55305481,-6757938471.0156488,-4317414104.5754433,-3561765934.0531569,-619784373.33106422,-7732654942.891983,-4027516088.1143904,-4318509037.2432451,-120480315.35074615,-5280789982.5337543,-2376515016.2564268,-468564688.71555328,-8143841256.5731478,-8348412593.0604877,-4832299915.6591272,-9470645219.6061974,-3598479044.7981634,-2063806511.7896929,-1310490971.3687649,-3886309443.6530514,-3998816265.3933954,-9092682697.9009647,-3306205.4527797699,-1370435434.7908802,-8708236969.6709347,-4484031249.8549671,-7066293540.7040682,-6702372231.8504753,-5231206219.6545725,-9336468365.5754166,-8704175669.8294907,-3559414926.629097,-7718765347.0271692,-8107033698.0775518,-8189279521.0652285,-6124514851.6410284,-3279844208.8268433,-9647980460.466629,-6742151554.5340338,-9208150324.4908752,-2094124761.2693224,-2749891589.1893902,-4539860962.5047798,-2084036838.1235466,-7694434446.9789028,-2214894721.5973577,-3132375267.5553837,-7103178913.5290718,-9509173966.9932995,-7461916106.0755367,-4274014649.5539913,-5659215066.5503817,-62376825.201366425,-1079376964.7906017,-6370309687.116868,-4656018934.2813616,-4412793375.6447601,-4012367062.4037437,-727196422.8671608,-6134831416.8071556,-7401235047.9876995,-2171811755.5980997,-1675249762.734271,-3141655829.4896126,-8248740902.811326,-9440283803.3252392,-1201578039.6244698,-7536809218.8280849,-7203672365.5650883,-6891546084.3907375,-1505240018.8633404,-1091317351.4013767,-1932839840.5259523,-2863327940.7083006,-8108748442.2168427,-7464083123.7400808,-214410427.5393486,-3043689928.7131872,-7462723339.2302303,-9537877347.3665314,-2214538697.9318762,-5510455486.8136168,-1892154524.9135914,-9958587693.9859676,-5020470486.986146,-7026401183.3996391,-842768536.86501312,-1132976453.241045,-8990164615.7805157,-2937543735.1486883,-8641754102.5633373,-2281162788.4663677,-1416832025.5555315,-7335071058.7446995,-9813535201.8475723,-1689218672.3578377,-2716720198.0781145,-3578859002.5058622,-1833421321.0054483,-2376278525.5150785,-8837795523.1115131,-2926967009.6779814,-5114436205.9650784,-5683887489.5716448,-6525515986.488266,-2788201638.7529306,-2261090020.957365,-4094263760.4979086,-7147132654.4939766,-5367515583.5202045,-1756032920.3355961,-6737590830.6336946,-8269389169.4637232,-7138783852.8558807,-1363565370.8384647,-5320211253.5969248,-739452390.46061707,-9768839324.8476276,-8088962640.8044214,-2989234168.3178911,-9496475027.4588032,-6495419284.6792765,-4515505231.0683699,-9512552348.9456062,-9904821065.7296886,-2577052531.5748835,-1716363356.3457508,-5841499995.8560944,-914555965.8999939,-3549485807.952116,-2947032536.1539669,-4588120573.2758121,-7566696915.5532064,-1736358335.1367168,-4107684072.2306471,-6115135581.1554327,-611000420.53324699,-917830188.73556519,-1044979860.0389977,-4694726572.4368849,-3937738000.55583,-868074671.34719086,-2076216720.3713303,-5266515855.2194519,-1638324724.8808184,-2655530905.6198282,-4398589127.7915306,-4683815723.3510361,-9993048910.9836025,-7241438741.6059132,-7487248652.8659286,-9353359572.1884003,-5680513990.0779362,-8942444208.1838417,-5693471355.3287182,-2887604365.3708763,-1247669568.6949177,-9976299984.8486347,-9323590502.6762085,-5388176951.5529184,-6600932034.5381012,-9134389904.8799133,-8229379351.4278889,-7064449130.8510323,-7539648011.1071644,-3404841123.3426533,-2721805102.9196854,-6195101910.6512403,-7117951095.8580837,-6173737068.1118603,-7626583352.9223166,-3608458995.0612621,-8603409857.163166,-3062685724.110239,-7792697223.1241016,-1126135500.104002,-1824532962.2904158,-7603017604.2182131,-6217709433.1999493,-5267022301.4505577,-3344847823.693037,-3211975715.3362579,-641867095.60902977,-5856818275.474823,-5735188806.8559866,-3500038446.577199,-3948399711.5397692,-95063379.093570709,-304155783.76602745,-245813986.796278,-6353490462.4256687,-6736391894.8456898,-3355524237.9321203,-6033843725.8506775,-6852449174.3538208,-8768453826.3196468,-1142841645.9365101,-5519183073.6409168,-7044552695.3016768,-8090576797.4490509,-7046339193.1887226,-7928793814.7060518,-929179299.59853363,-8816915792.5313644,-5071154104.5729361,-5071761776.2546663,-7928603443.0585938,-7133592658.4971867,-9741807521.8123608,-1593181633.7655067,-8297910646.2400036,-2095181712.274229,-6976594480.5225697,-5991589124.7153282,-385603889.38741493,-8670910403.7310085,-2163425663.8041191,-6770253274.9127522,-3267435413.5272131,-4776506987.9227018,-1592777316.3679228,-5189564351.939146,-5791457209.6913013,-6609851718.2879286,-2962626503.5528994,-8292520817.0743093,-5187133835.1785927,-4364606123.9811554,-1794240112.3056993,-9184837131.8425312,-5626097964.5602818,-5351459898.9851151,-1400261557.1239872,-5601435776.7741127,-9911027662.4649334,-4697810258.3152409,-39688845.695444107,-1311294525.7992878,-7247989343.2888155,-9483199142.9026146,-9664835904.2927513,-6287119367.9968529,-8479000437.2255096,-4400296593.6449013,-5204038420.2403603,-7951722331.5499096,-1111576576.6747169,-4257196258.3964958,-7165808964.3384504,-1923545664.9839907,-2158729707.2093468,-9089253435.4681053,-8296075011.7739267,-6660485237.7051277,-2687064549.6856613,-2371219290.2519684,-7533781666.0896015,-7561088404.8620949,-9181590699.6725826,-8215826815.1726332,-1470912602.6516819,-237148055.8517189,-3134478345.2685738,-9058116355.5394249,-418893826.22089577,-5635084463.7199116,-149443937.51928139,-8070219648.2636118,-4652773843.2159224,-289513034.32011604,-940195497.56570625,-4273637829.4554195,-5233513836.7598858,-1142761906.0976791,-1103287468.1570358,-9205663669.933836,-9761502391.2169113,-4473211388.6563425,-8712751653.639801,-4392942367.6822834,-2593597973.0405436,-4708473689.9176359,-6089797988.9249935,-4510703427.3346968,-6063715396.842598,-2956605698.6863527,-3981516538.78971,-3155552058.6994638,-9761145324.4701462,-569749377.67960548,-6123290141.5007734,-4625051396.9707584,-9432538724.5611572,-6865247991.2495155,-3104294366.8928194,-6711746475.5224743,-4796090918.1821766,-9049567608.2578049,-9239135386.9640236,-3522856254.7783165,-5937402488.6043911,-9615038454.1054573,-5697871225.8505983,-4540953848.5912237,-3406877224.992897,-4401714276.1509037,-7816088230.1018534,-7440653902.2687893,-9189113411.2021599,-4584114568.3839226,-5323283239.7354383,-7130047423.1207361,-2713282840.1237774,-7515754364.6793289,-3860161614.7526169,-4746492815.2636538,-994022503.46449089,-8753636228.0452881,-7472206417.2582884,-3119115448.3136063,-7799046836.0821953,-5110501086.3626432,-7641950049.6733875,-6569913640.0300102,-1898704856.5129471,-8045024427.3151398,-2975909435.8926697,-9200183604.9238968,-1214951389.4163895,-9731822421.3354244,-2889887723.8514299,-1225956025.0137978,-3389197609.582757,-2205942644.1200829,-5604225665.3048029,-5547187866.6226912,-4372063964.2368021,-6472390767.0739803,-96886773.652711868,-1606165828.0913544,-426845863.48748779,-4800049390.6981688,-6631817303.4690838,-5960463865.598423,-8445442065.286375,-656407085.25037384,-5829208805.642868,-1329718121.2631645,-4455229815.1844788,-6774307927.4393215,-9702478835.8546295,-2127099785.3440666,-1332937328.5459538,-3693527626.5043325,-1055857572.6676445,-3563417164.3211718,-5028096207.4490767,-2326852419.2496185,-7907129940.7861385,-9277579039.4074936,-2784028712.9160099,-4110155418.1728668,-3002838958.7544975,-3434896553.591753,-5392527683.1674604,-4471904887.4392872,-8294069494.7570305,-8678801383.4896145,-2056285471.9841385,-9766371897.4451408,-1115003648.1712189,-1250638666.9720116,-8574854873.72896,-2464922583.4841585,-603284035.81768799,-2821432606.5692987,-9997391428.3330364,-6116743123.0814762,-5611949814.922328,-7134430369.1831303,-9888322320.777914,-3175735309.0054817,-7654844969.7455482,-4799792441.1281643,-2930157932.6941805,-5888811285.0873127,-3058356380.3186207,-429967647.44406128,-7348791638.1886892,-3397540138.7633142,-6734263764.5552454,-9620750551.1499214,-9067660642.4153862,-8007088278.1538992,-9584006462.2877789,-4188506333.7385693,-2407198486.2119617,-1853774074.3483362,-6751255048.7637806,-5964579787.5088634,-4781781840.6599588,-9209500202.056839,-481121208.07364845,-1443975424.3182917,-3310215788.1653957,-7959568705.6138086,-5268783793.3264771,-9720079235.2948856,-3506278414.9285946,-1215053727.7974892,-3343640797.0401659,-9130166925.1112251,-7698525602.6937809,-1724310562.3764877,-1951103213.5824146,-6946616005.4578018,-4972149520.6839046,-5175731475.9474268,-5659702863.0469332,-9266676816.696991,-2909664174.785203,-3453509975.8793821,-4447360130.116539,-3741919762.1494122,-7449962066.2758198,-7405249462.7224369,-9247994334.5121536,-5691007576.3824158,-4108976228.751749,-74376162.202800751,-3257579298.8985424,-1653578403.309165,-4119865832.0413666,-7194998450.8577595,-4662977411.014082,-6025448511.7520809,-5273836267.1876955,-4425033191.7764692,-6761888016.8047638,-9917318366.9418831,-5690139134.3798189,-5111590575.4499969,-2351022063.1224127,-632464139.26205826,-35373252.881637573,-7143824326.6257267,-7349817089.5358181,-8895028738.8811302,-2079329980.3980398,-6579081812.2842522,-8653907396.499567,-8889599337.8192444,-9644638509.5251312,-8971677755.574152,-5460535095.0615683,-6244875896.1662683,-4370229372.8520088,-4396591124.2195044,-7691171996.0606737,-7765351508.5018644,-8552375799.1897297,-2508586897.3325796,-3229041768.4493828,-1656008014.3585138,-6459294923.4695921,-5043532462.3549328,-4895276902.7539673,-7503405655.9839001,-3052933477.5599985,-5231840238.4519367,-4047070472.1651888,-9787487378.3651905,-4938892499.118515,-3319825079.0287542,-2236007429.5044432,-9357199340.6573505,-3147972545.8060675,-5339275817.8528786,-6805063628.4454288,-4651224497.3092527,-1678571175.6846933,-9615613590.0330486,-3391784390.6297827,-3128517859.8368721,-4129317815.5369682,-2514168148.211935,-9809215697.4789543,-4760266331.0827799,-1630499696.7303267,-4067366931.7150593,-8860021310.5067654,-6099613446.6666737,-1595795602.4467897,-439178073.80350876,-6625032751.2271557,-2482692134.3870134,-5705643699.4682093,-4889490649.1495075,-2062213335.5143604,-3309617120.0446548,-8584325215.9208126,-3103382113.1480103,-3918981613.2680922,-2046678521.0687494,-693711725.52858925,-8637768500.6207485,-3635562365.5797691,-2753233968.5392714,-9522293403.326807,-8859969826.9948463,-3016538709.1691074,-7257599865.8262777,-7428904758.0920811,-2577483461.5150347,-3090984915.1427393,-8907052774.5572433,-6368202339.2896738,-2566382534.1483383,-4581157747.2666683,-1669000807.1200314,-7778580817.6161003,-5407759633.8401442,-945126675.97481918,-9666052933.3500729,-6264588318.6730433,-2855279353.2304077,-9211834974.200119,-7950188974.123538,-9690700646.0551281,-1375822532.8531246,-3730991937.3813362,-3295489578.2469692,-630033629.48642349,-2658917576.3430471,-6800647061.6380939,-4978092664.8892679,-2548252750.0019646,-357099800.40360069,-7110715939.486618,-9783621854.1704426,-8756459539.4148712,-7587547833.3412066,-4859190069.1874237,-373970268.79115677,-6124881338.7156353,-3483423691.4289293,-213902314.24083328,-9102077523.8018608,-7081822657.7838297,-2346048057.8447104,-4076574298.6798496,-9206050084.9832306,-4286435596.2849121,-2547004004.7543678,-3841440010.0347309,-9606975014.3608093,-4390857404.1931677,-1386170299.6538048,-7201406024.6762791,-8193311600.6608973,-8481503664.6677628,-2146751706.808094,-2669874935.6782684,-9128717931.540266,-9603014786.3017635,-7868754274.8906097,-1983776936.1778488,-3322698884.380022,-5935831084.3225441,-4399810999.7262392,-1699885617.3746452,-6331530132.2321396,-289645186.66513443,-3409767919.8790531,-5775169455.8687859,-1886444663.0433073,-9460951534.6194439,-9277376008.7579403,-2129632309.8662071,-2892637153.4011765,-3699229756.0689411,-6863253480.1371441,-4911806160.1615887,-2174556658.9201336,-4323138446.1834545,-7751210599.8969288,-6908091365.2032528,-2893929063.1217966,-2528640300.3169518,-2122802749.1325579,-6633391494.7337341,-5772032633.3809414,-1166456251.8228722,-5528018931.3741169,-6663440792.2236805,-5437051947.6849051,-2039854308.4549847,-1116771617.3956451,-1952161673.3298922,-9699838580.5936813,-9497613254.9847889,-79455488.422149658,-5974948653.4224701,-8300921092.9110994,-348083580.41231155,-6061764033.9051046,-5856240578.4101524,-3246114594.6059313,-6694764318.2751694,-2998293485.2613163,-3636276447.8505583,-4384095811.3810072,-1419746341.1104841,-2441283490.7990055,-2117160156.6918316,-6451186698.7506409,-4615902565.9580841,-5371549602.5951357,-2583295515.0831146,-7687022316.0352135,-2602793882.4093609,-7584986186.3621607,-5552053964.2102966,-4454669952.9471111,-1495901349.3853817,-9566529125.4842129,-5054651424.7832842,-7040133839.7691154,-518424612.02114487,-8913405877.6466846,-2022118080.2738466,-7808689507.8749304,-8669554148.9337158,-2853432130.7831974,-7622302412.2932024,-7792951073.7182388,-8722765359.6896133,-4343602823.193512,-4658796017.1266527,-5748325717.1292973,-9433033168.3725834,-886931220.04951286,-5314250018.450551,-3193160834.0059214,-173121966.47296906,-7515049074.0936432,-3177788393.3228712,-6969897821.8486109,-1290992808.9334831,-3077703028.2125587,-5037894382.17208,-2957223910.6113205,-7123377884.5601482,-6579545860.0551529,-8169806890.8383284,-401834930.32175636,-387809901.52815437,-437941177.30736542,-2437385200.3477793,-9562958632.6395416,-496465052.49704552,-7063435595.7762442,-3287333502.1741381,-4847542690.6284323,-8139453849.4756212,-9450683153.7550144,-7101580417.0735321,-8989624546.4761639,-9417921807.6751575,-441902555.54978943,-9559337776.1983452,-7465731452.9382763,-7204411635.4549065,-8172223316.6883287,-8295303795.1914968,-8004096853.7463884,-3228994408.3681622,-2401858177.7958612,-975820655.90560722,-9535864798.8641968,-6480126798.0392494,-4024127629.2518291,-8998414862.5354691,-5316030886.4926338,-2069977664.7160568,-6207990609.4886026,-5315675691.7042427,-6534052042.1715012,-3126587924.3035116,-8499687144.2171698,-3169214674.9547215,-8259390909.3988094,-5785641095.556797,-9009076934.4069061,-3406574789.6283522,-1702636015.4998703,-3665728648.8266077,-8639645951.4704227,-4748539876.2522926,-8351124287.7478218,-8087185544.6187658,-3963245954.968214,-4880939899.5243521,-4230400070.6593561,-2516697403.7918386,-3328743847.7541513,-5801730850.1999693,-918397443.34586906,-2625205769.0097599,-8709329015.2387543,-3135322652.0466518,-4100335117.5537996,-442739935.61622047,-60234678.506175995,-6920935418.7646999,-3237453872.0828695,-6576991309.7541246,-9361658501.5026302,-6129664306.4502392,-3056747159.6836357,-9738240914.9111309,-4544476653.063467,-3664535943.5866261,-9226109131.7824059,-4347489469.7842503,-1053584221.2481556,-6344885833.4612703,-6117220756.5204334,-5785412944.809103,-9932848459.5820408,-5377997302.4467783,-6072441633.2521648,-6855612190.2890739,-8824983104.2496185,-7743383115.3831463,-4905793131.8385401,-8840631172.1769028,-8286244701.7654896,-8660338942.5611534,-6668662052.0033875,-534765504.78145599,-8931426422.3116798,-5075670267.0163898,-4040670567.7880697,-2517863673.4405422,-9326115895.5957355,-6890648422.1423645,-3300467578.8985167,-9922947194.4349575,-1849596310.2906408,-3843783229.2737617,-9986722078.1756802,-6424266603.2015734,-8084306861.4655132,-3511709280.4952288,-2223921679.7379313,-1540227719.4972715,-4366354111.6797438,-8986467889.1457863,-1572072471.8691244,-4116981635.4584732,-4190983235.0199471,-4176178062.9170389,-8175564811.281764,-4781962375.2127237,-7699959150.2798395,-5454001666.9669399,-6847865591.1408901,-332980000.91499519,-2272666444.3777094,-8176930467.780447,-3447643761.2469807,-4406078700.5355978,-4108821626.8760719,-3735255082.7643576,-3839733733.9459486,-9698700062.0293922,-2212056315.8171473,-3577269437.4338121,-4973504113.0704021,-1618388703.4654322,-2017231062.852911,-6048639808.2452583,-6001101436.9590006,-5626577963.5585775,-1470084312.2935781,-9151172207.2876453,-3809440762.8892975,-4186225296.5795336,-3267744503.1915512,-1283180225.5808945,-5834961128.8376312,-7930929286.1466904,-2057237665.4975557,-9053899694.7944031,-4272338559.9581556,-8120478005.3364229,-8194569104.9973078,-3321634191.7562151,-9943831975.1117668,-2675790943.4721165,-1237504366.7302151,-3689895524.343049,-2054891645.3058825,-5317938453.9860601,-6427841480.2472649,-6856376682.722517,-1618766084.6858549,-3585333349.8246689,-9966887945.7782536,-4379731112.2561541,-266252489.33690834,-3362733340.5545645,-4402285090.7417479,-8751229562.4558678,-8193071005.1153021,-3259728220.9654627,-9334369981.7280025,-3196887172.0419064,-9044185062.0346413,-698798525.61159897,-4969727364.8717642,-1711803133.0312958,-1333340318.8088684,-8218996485.4076824,-419082335.22320557,-507593714.65001106,-6874804648.4175739,-8003771465.9369955,-7581230346.35532,-7823193376.1702223,-1457183161.6733952,-9914780564.1490498,-9429136291.2033653,-6993734203.5796452,-6646827801.9316902,-7255291755.1200008,-7708701265.7393017,-4135515497.1868677,-3531436329.4230375,-6034471532.72647,-7788806413.5214548,-8135972260.6839132,-2011245250.103796,-6071836036.0914688,-4495971084.6571169,-8454061658.2762394,-568637734.75651169,-1676955517.2824116,-1301992636.5781021,-8502479239.9823618,-8373876833.5195293,-3204540466.6379623,-2909184604.1952915,-2499100182.4898672,-6206102520.606822,-9851099902.3131924,-9277293616.9780788,-8577535038.4905338,-2073073658.0222349,-9693443973.1137047,-4477730598.8529224,-1913044835.3181877,-6365207089.4746876,-9528540421.7900925,-9939097948.3784542,-3338185190.8893385,-5734284597.409915,-5439675604.4492693,-6017256696.1754522,-1970036188.9435081,-3799923151.4201765,-6415610972.6846876,-4339073880.6760283,-9746659607.6518326,-250344612.67931557,-7814118419.992465,-2946289967.0539293,-2890851032.6997738,-3159830163.4513378,-4510792124.1683874,-2129543987.8898525,-1303069690.1807804,-943827585.75715065,-2611643421.2711811,-9139321844.6452312,-8967698705.4858761,-1641460832.5785875,-285667878.1500721,-749638223.54865265,-2612873987.1021233,-1698084916.8183384,-9861424218.4114456,-5229607504.3382282],"expected":[0.00014570776776169698,0.00014929033449554224,0.000239694369503418,0.00020083985025148903,0.0003541691709403407,0.00025663895111309649,0.00031827261949510737,0.00013318868250630135,0.00019604956841056127,0.00018179067551797105,0.00021048225776217742,0.00013548673040895628,0.00040019352394631203,0.00015516770098773672,0.00016756305133090187,0.00035778370848358996,0.00015102982579686395,0.0001533323385631586,0.00020436774146866625,0.00024091172548279253,0.00015158768140981788,0.00013523341815359775,0.00020190110336841045,0.0013052658233685382,0.00013192227330849639,0.00018571093027206504,0.0014012526198053396,0.00016158527594385336,0.00014353085714093934,0.00015494492282655848,0.00019839848648317779,0.00014799624476006051,0.00015706006186545613,0.00017725930906691088,0.0002308888697369723,0.00018783977946750435,0.00013069247710619788,0.00017390441604592179,0.00013317406048257924,0.00015417214911803671,0.00042915861482638898,0.00022381904052965008,0.00013457440438738942,0.00015157985115583296,0.00015539924866655555,0.00025402902554713485,0.00018196909374965507,0.00015208527989137293,0.00014698354652609776,0.0001809220849335768,0.00018500132514807352,0.00019570903657304903,0.00025934152610353217,0.00025691005968258153,0.00018121455262703733,0.00018019498040838106,0.00044296877633806303,0.00023806162453830366,0.00013881307653297888,0.00024897943172171787,0.00016537479646671989,0.00019613887824736369,0.00015011116530410217,0.00023654330719672978,0.00019628257455703432,0.00021884187429941168,0.00013122178832731851,0.0001626765824788512,0.00013296691954826404,0.00024139971209658059,0.00015438940681578432,0.00014773568854685703,0.00013530207685261754,0.00029313823666088796,0.00014056819446189013,0.00016278200682677755,0.000159740309529537,0.00026231234186203017,0.00013142873715870515,0.00020911348862629782,0.00022776550663151335,0.00016172837690702966,0.00020682780553948123,0.00014638545180654521,0.0001408828644137729,0.00014157318048537307,0.00013286654577619649,0.00018284122918850958,0.00016407185741721729,0.00017166058539261057,0.00017179272846675489,0.00029666733424154094,0.00014319106901115091,0.0013847797339086962,0.00032894616609138104,0.0002026463171137908,0.00019624666627132811,0.00028458449409960769,0.00013038482083435382,0.0002124454815011957,0.00037053140600308164,0.00035700396683195298,0.00017032300409111796,0.00018669254782311393,0.0001325978647027738,0.00019107478165244032,0.0001358515725024577,0.00015110677391842107,0.002437437957516463,0.00014327822360133422,0.00032529069832174635,0.00028702694161004022,0.00020024729169139846,0.00014924343066326115,0.00013062748650803161,0.00017584037255305944,0.00015435163052556115,0.00016097019699454286,0.00017189788352259277,0.00016583336247497562,0.00013534629401190291,0.00013116344010013077,0.00019047749029436759,0.00016833985341579584,0.00015470474290472434,0.00024612209778919085,0.00016997248265755531,0.00038256957761252679,0.00019189393240387275,0.00015404195817105969,0.00013370401845257671,0.00041089842372214888,0.00013255352238853289,0.00027108395649751442,0.00015213942296767106,0.00044746604246678978,0.00018118645778054357,0.00021222158675103354,0.00018864590006522781,0.00018791895324267387,0.00014652840456752468,0.00016692894902247448,0.00039535044572149106,0.00018283534098912204,0.00028807259441915116,0.00019919047787697884,0.00016913241757692826,0.00018288926543909834,0.00081301627123167488,0.00099530633507666612,0.00019198258555816624,0.00014965782983251695,0.00014589783650782517,0.00013376839299244751,0.00027727396355228779,0.0001819090137294331,0.00017008391700049167,0.00013310263065636921,0.00014728363041714807,0.00098670014089933698,0.00053737006584290677,0.00025031312527826769,0.00013847959077973603,0.00017295099790496735,0.00017961216969875388,0.00057247928624584092,0.00066322950942394995,0.0002454809085112845,0.00020870434456890015,0.0002715808791479343,0.00020011946722643223,0.00018558976778791438,0.00017277159761736014,0.00033290622471581947,0.00019188074114712199,0.00018095688067803974,0.00039247044408604963,0.00030585564356744641,0.00016033533032740971,0.00021598646045108613,0.00014540353498417467,0.00013008034722303342,0.00016626471455533681,0.00061627927019384122,0.00014947196870880589,0.00013962891114391426,0.00016913521713526823,0.00017921064354624354,0.0002032627612670494,0.00034297464123782967,0.00018348370729012541,0.00015674182474408657,0.00016143882641305772,0.00094631256037345558,0.00033355004775884126,0.00028381783660929173,0.00015207853425123173,0.00027395821501585412,0.00016323456968733485,0.00018885893255120892,0.00018049387535993219,0.00029475204165783149,0.000132845178177305,0.00022544048763526269,0.00014563020538010878,0.00021790350412132962,0.00013671639298459704,0.0001938708688130256,0.0001353298618467329,0.0009312120411392482,0.00035605847010727773,0.00046112428961502704,0.00013102842664459852,0.00013589009764007371,0.00029874882665600872,0.00015466642785031746,0.00017872117236370009,0.00015153047987520981,0.0001363766810684427,0.00015768675569797979,0.0001759816368836618,0.00026156620376641105,0.00019658454411761766,0.00024428834626828586,0.00013474099634434023,0.00016531885485891051,0.00074445904952309563,0.00015574480106400084,0.00020999836451623732,0.0017668489014125641,0.00017150913484218269,0.00015549843045113468,0.00032246678331753403,0.00013759690461701642,0.00014846204676963,0.00039195461886032873,0.00028674012254410297,0.00013865389343681038,0.00015503356895335275,0.0001298242369500908,0.00047389672572187823,0.00021081409541259913,0.00014675627662942212,0.00021731653983206894,0.00054682451048023719,0.00028097169592485179,0.000179318190972004,0.00014022813268525601,0.00018918296147973259,0.0011011434773865907,0.0013074587736373242,0.00017140641209106405,0.00025414439139930233,0.00024539237969915719,0.00015344488496887303,0.00032010075604627569,0.00013258789924194421,0.00014433004528973685,0.00013170183094092638,0.00014316084506142511,0.00027886828141344993,0.00019688066388077853,0.00016476577565625582,0.0001357161790967256,0.00016128434586741997,0.00022475015432478742,0.00018143192176968859,0.00020489913829444643,0.00035887555026657762,0.000160047843503545,0.00016397788113802183,0.00013751599928943871,0.00019771109259604877,0.0001725272188304854,0.00013505542041386133,0.00053055713933939416,0.00015578489395872943,0.00024535313111173054,0.00013864306890888322,0.00017397967739130017,0.00014682544193390316,0.00015552433308774812,0.0001606620672344816,0.00075134341653595137,0.00014916233471501587,0.00013999942673281729,0.0001442736946912334,0.00013814883660559011,0.00020484128255299718,0.00035157298220745803,0.00027026503970252263,0.0003313765997789525,0.00014367702377693792,0.00041684899584326721,0.00036530783544329418,0.00028247437732872947,0.00024222193683078269,0.0004104891169894517,0.00018380102691821842,0.00015756400693466645,0.00064317164277240366,0.00019242584210023888,0.00018924360708162435,0.00022006922778507109,0.00014445125659398887,0.00020774672047887957,0.00031616903761750204,0.00018127580942712074,0.00032057793973049844,0.00071686351902614355,0.00015339342912828809,0.00025281840886819882,0.00015482212941697214,0.00055845772365837188,0.00029958472896629421,0.0001916952349726953,0.00017631435080760609,0.00018409945835604552,0.00013220222551743569,0.00017620902339229828,0.00025780872878132543,0.00028546206344906653,0.00016668432544904261,0.00014512147799264976,0.00015007937222989489,0.00020816445325068771,0.00015551834783479791,0.00020028319128994584,0.0001592485802779905,0.00021675639488414751,0.00026727140792864206,0.0001827035247592164,0.00013136120528111272,0.00015550790371172572,0.00023432365376774145,0.0001444332953897132,0.00033263013000570617,0.00016177721142323926,0.00015064479311000591,0.00023991315075525744,0.00021107243935768102,0.00014579047429561881,0.000145675580635953,0.00069234995866486416,0.0002018827182246417,0.00053362092585494865,0.00013372264714529164,0.00015995111389608053,0.00061412268740506336,0.00013829933945151796,0.0001990068763123559,0.00023418163541904274,0.00016123035007785971,0.00020282125165451933,0.00013085254906707464,0.0001814728109704495,0.000315967939067824,0.00021589410730846214,0.00019751706658397173,0.00013485061907665376,0.00030655038449513722,0.00033911443751359253,0.00017828052962383476,0.00014038008343986158,0.00012946559536605249,0.00020798864157367598,0.00040924712055365902,0.00024193071406206104,0.00016458949608887176,0.00018658221964298717,0.00023660068347703214,0.00023678621886175292,0.00013911372128668777,0.00014443007497597134,0.00028044735360740932,0.00014190677363244781,0.00038905686288313293,0.00014375644409543326,0.00025776828877246987,0.00021047707950023239,0.00024738213140984821,0.00014193481536232163,0.00016388606439511193,0.0001290440086803695,0.00022517228734162398,0.00014832316376395182,0.00018935929836215668,0.00014757524995856201,0.0001933521798937905,0.00020495519542515278,0.00015675983239153791,0.00032683399457604425,0.00022598609505830562,0.00016173170944098499,0.00013985715347968771,0.00018022391180728126,0.00012908236880828958,0.00022343420207891125,0.00018866979368577989,0.00017891425634833317,0.00018567257766924773,0.00020596218583505778,0.00018649637565605341,0.00022839241074549199,0.00022266220323878167,0.00013184316636496345,0.00043031938625133948,0.00025312246885184054,0.00048502175431740544,0.00016455623112284219,0.00037718289444280291,0.00030650195609312268,0.00019764618872435629,0.00014550926839752338,0.00042688124113398972,0.00014583959838146855,0.00013660643657263202,0.00013556287911808089,0.00015630855437131027,0.00013463844669679386,0.00013123784457803509,0.00021993223217434666,0.00018416402292555117,0.0001395431800997789,0.00023860113721746175,0.00023046028621426891,0.00014144952796483291,0.00019001850296106908,0.00016662737509726567,0.00017460635858287141,0.00013528750252148641,0.00013939513450365203,0.00015236707695925222,0.00024884888779281878,0.00025893785809122469,0.00018434845209604301,0.00018390591931592137,0.00013963739153680682,0.00025317634571799913,0.0001636762971250824,0.00020619535241044693,0.00016798629195032257,0.00036040737618070327,0.00015198484330726105,0.00013277116692978635,0.00039540984493765006,0.00014101756776895661,0.00018090721537877477,0.00016531819085521595,0.00014396236105174211,0.00023967729259206138,0.00013468868080381515,0.0003601092059959924,0.00017058632956267074,0.00013055997848147901,0.00013349265693480156,0.00013810240408003091,0.00013722111332776414,0.00016633946831979909,0.00021822278248842815,0.00025094165827655254,0.00015937989936500537,0.0001816618152088043,0.00027381532881281558,0.00024615678030415515,0.0002813480941336167,0.00014054898017058526,0.0001508744574009407,0.0002157178587928687,0.00015181038649689094,0.0002010774022296074,0.00018678494265898048,0.00012940155154601133,0.00019091769458001923,0.0002398609107304419,0.00013255487122830467,0.0011551420621397526,0.00020331457967636576,0.00013741526528431903,0.00018453166715394622,0.00015851744387003057,0.00029968048724970649,0.00014224088990019324,0.00018824427462551345,0.00022964510422903781,0.00041860416490861123,0.00014118312693083053,0.00013817814226853986,0.00093597011097126034,0.00013560229918635079,0.00013001629142644973,0.00019522933849644178,0.00013143093682846662,0.0002348723888418696,0.0002731701280938742,0.00018774916716072398,0.00031825666939324076,0.00013696488990401763,0.00018951817072776562,0.00026000986098010238,0.00024598729969982103,0.0002225098932049288,0.00018080315723686992,0.00019831766765941635,0.00019360281714679643,0.0001366288774293109,0.00014221332245623118,0.00016675730819793973,0.00017808632000686415,0.000164379902109506,0.00013213875757246915,0.00015377981215984778,0.00013247274224261052,0.00014294514952328783,0.00015570026023111424,0.00016969986761429496,0.00020411875656208112,0.00013117227027117633,0.00035861525496900073,0.00024754217507196675,0.00021592096629833766,0.00014664332733969711,0.00021962513664565032,0.00014720931007873505,0.00022306787818659991,0.0001645966480932664,0.00027033677610453137,0.00024013187639207212,0.00021214268283681302,0.0002082311831354562,0.00018087624152716576,0.00018303412662404943,0.00015532830075249595,0.00015760746433557049,0.00044973833501708946,0.00013366466795703249,0.00014696869754470839,0.00088174996014526129,0.00017938255391596088,0.00021606069218926474,0.00023990007303252605,0.00023193983413527362,0.00014766518651878742,0.00013047412586491582,0.00030449040182696849,0.00013745115429674535,0.00018412449697593263,0.00029345428344958706,0.00039011150090115704,0.00013435966065546024,0.0001574023331549232,0.0001892460473716363,0.00045337945934817355,0.00022449985720490143,0.00043093183148772141,0.00013057858601447879,0.00019399015464748682,0.00013661924709804115,0.00013553683450600045,0.00017327398958241703,0.00015924116635974563,0.00013454593548264555,0.00014968570299511312,0.00081897077801275548,0.00014876633013274232,0.00013251381118005846,0.00014521052838098298,0.00029161246545538882,0.00012907085079416701,0.00013545797769868242,0.0003601901676562213,0.00017888742098911642,0.00017040208291307612,0.00013379309082364377,0.00019201471648803278,0.00014185159647724815,0.00015363103252107979,0.00015946144476938721,0.0013367453421647374,0.0001892757473772781,0.00085372683556062662,0.00016657474228985315,0.00059639888081896078,0.0001756611502378028,0.00021378850768007806,0.00020413255423822944,0.00023412270767922413,0.00019707634564951833,0.00015557582832671364,0.00023563332280172758,0.00018137002794982342,0.0005655027072802506,0.00014944904070381864,0.00035689075779368057,0.00023113042723394591,0.00013141028932530478,0.00025780829606175773,0.00024799519142240493,0.00013412056403455905,0.00015928825007701665,0.00014478351122302054,0.0001299224590506666,0.00014329757170981842,0.00036125746406871702,0.0002024115859014864,0.00034668857161180888,0.00023374949433453216,0.00047413879319054019,0.00029485787621203607,0.00019613060642561351,0.00013013212434916669,0.00014567563790788047,0.00014314501580213002,0.0001518801961107668,0.00017268808809536854,0.00018881379779638958,0.00016059343028956017,0.00018600559562984757,0.00015626404388192328,0.00018931797888022044,0.00013297770115461248,0.00054651765924381638,0.00024937683679472324,0.00015368328703011972,0.00016356540148388193,0.0001526178781131545,0.00021619279691795326,0.00023662220554974449,0.00018654373781499005,0.00040481971898581408,0.00013217359902186184,0.00091454707837012781,0.00015279960846951993,0.00013606757376318935,0.00060339982017226952,0.00013748752026761075,0.00044156433156730131,0.0001531721770735597,0.00016054961130451307,0.00015840498704902504,0.00020083966902341983,0.00028127718344618757,0.00018877539492241559,0.00022191132906648089,0.00029180546728871897,0.00016506176624577799,0.00055027964237008191,0.00026851209010315995,0.00013374811705012013,0.00014602223215012968,0.00035276480217908253,0.00045906910456807338,0.00018875831249699182,0.00019630762161862997,0.00014250766352919472,0.00015893198179221912,0.00014477259943646036,0.00016996649749194119,0.00022652501061662134,0.00012943638972777945,0.00019598262733826647,0.00013422512712138969,0.0001936870645061694,0.00032785915555837912,0.00062932390586014882,0.00013863265774236822,0.00019271467614164248,0.00028298186902763286,0.00013540056391734019,0.0001572119537031366,0.0001403002982552171,0.00014440634033524821,0.00013555991713839349,0.00014129047844333985,0.00013874823353226081,0.00013740885657413763,0.00021536676807718303,0.00014425980276572571,0.00020643454398249717,0.00015369731369413583,0.00015988928827291799,0.00013916364616694372,0.00014001179762404049,0.0001723639821454521,0.00016193436947874474,0.00017190797464352483,0.00027042672794487239,0.00014278660202242862,0.00016320501037340662,0.0001329736814546951,0.00024645081561493892,0.00051813427725177661,0.0001515667313105024,0.00023768165901754784,0.00020647479160394933,0.00014516365836377091,0.00034865076175046651,0.00017367935074888611,0.00014377160323114443,0.00017223637509873051,0.00017440086573583644,0.00016815188736531107,0.00013632500594568418,0.00018038864106089097,0.00013772069269430489,0.00015633133874144522,0.00013298760532573086,0.00018984472211516315,0.00013400182892760423,0.00014774129242913647,0.00020312221725700695,0.00016961496340641319,0.00016467046741110936,0.00016223494595538648,0.00020610250757587852,0.00025826251745729987,0.0003149482679520566,0.000168848789690196,0.00025045800956905411,0.00013376250892791776,0.00071443903411413446,0.00013670487993096977,0.00025970581744834501,0.00016117707006807044,0.00045420874828963251,0.00045218170570111073,0.0002394072683152883,0.00018189408823865276,0.00014761514891750254,0.00066062756613312259,0.0002314595443621137,0.00013340889693465343,0.00022232010384981509,0.00019789338903090228,0.00025534237328426378,0.0001972041022172236,0.00024288404141134645,0.000188924184419455,0.00015391916489558929,0.00016251180313925519,0.00017925177167395885,0.00016052675240004166,0.00025521197739383403,0.00013271634420040603,0.00019085180473915519,0.0001726004135394224,0.00052886306676357044,0.0002890913454606584,0.00014068762914573127,0.00034670316979669322,0.00038448465722347311,0.00014520150004447368,0.00024512276355098873,0.00032019284481934015,0.00015067983903453261,0.00016409349282418693,0.00020323650248725629,0.00022886804491566197,0.00017175813243151472,0.00015222877904943124,0.00013750677317969661,0.00016536845524714683,0.00018622139401081459,0.00014377369156064787,0.00063877679682438954,0.00020446459052455491,0.00016879631619534844,0.0010442531859790659,0.00019470038260218538,0.0011251802854032736,0.00013618229494866867,0.00016873999695697517,0.00014295808691513028,0.00017703250095614206,0.00014001882012326639,0.00021239180007133631,0.00013124708496350484,0.00017857246016752276,0.00014938940990166425,0.00025227736391191674,0.00014552261960568846,0.00019086913838613494,0.0001582852867076387,0.00017979969174864208,0.00013786532015629585,0.00029078552494031317,0.0025649097328746279,0.00013155629989979105,0.00017977474485359095,0.00016358188060689181,0.00016173048173697907,0.00029515795222540762,0.00014727310565670153,0.00017851627048117105,0.00015899579302365661,0.00058352997214842378,0.00016311291985710315,0.00018043673061133987,0.0004271219905992595,0.00016384229922138048,0.00017678643763272995,0.0001311911824859996,0.00019882346897609978,0.00022612901088645649,0.00012927928976045269,0.00013232310730306406,0.00019399630246928941,0.00016721541107689837,0.00025751300951382057,0.00053617774762762527,0.00021116689427171114,0.00027566474732583951,0.00018234736125138657,0.00029986909659459454,0.00028810207306632912,0.0001907140299074561,0.00058086825400430599,0.00033705835431054401,0.00015343813659740146,0.0001645806435932479,0.00026865235286165019,0.00016808637248527441,0.00015058273812732452,0.00022133572916358237,0.00012988812068549238,0.00015760906152189027,0.00013501047625106004,0.00013726597186679147,0.00015500672487751775,0.00012921500011253982,0.00015260386375659106,0.00017864599869402779,0.00013007873631834017,0.00024519013703806352,0.00013996051002480644,0.00032380248125339547,0.00016905447924957009,0.00013106246630991244,0.00025202680612458985,0.00014847464732895788,0.00021835102363710406,0.00027203734855760529,0.00022969648213344657,0.00014356479041036167,0.00017131153577986397,0.00028693369730300842,0.00040969915925318255,0.00013276348362312732,0.0010125370465867334,0.00038563500548489314,0.00044491832687173295,0.00030128359388270713,0.00017156647231001963,0.00013567944610996235,0.00038017858226011328,0.00020003812085983376,0.00016156109484194873,0.00046730445487538653,0.0001973965384770693,0.0001952537077964815,0.00018833750167994342,0.0001524774741598762,0.00030472108034838743,0.00014729682451272472,0.00015054675339985522,0.00051665605747111879,0.00021292663234536355,0.00022420685390552112,0.00019722339851778337,0.00013703020671607439,0.00021096332840574928,0.00014498932959017581,0.00015304807557901096,0.00044987684784466041,0.00015531838325246798,0.0001506515510640402,0.00014200840182803807,0.00036162757589116613,0.00013546185651818293,0.00013994945675602861,0.00015071765568253445,0.00029776905636219169,0.00015786446415381661,0.00015273217353329636,0.00018368730906287783,0.00032401532663776841,0.0011022191440855928,0.00013829522736273503,0.00013070393877896814,0.00014897228716658365,0.00022787030616109569,0.00013401715139787332,0.0003806088361928501,0.00016135655946815502,0.00032473718248596603,0.00015944827334103955,0.00013676528600214472,0.00025727649523846842,0.00053647997247116509,0.00013652554135200047,0.00016862391848919333,0.00016762934023158911,0.00033637544806742477,0.00021276437964570213,0.00032376888242254513,0.00015698989248047243,0.00015790103164189335,0.00015254779836266155,0.00020418022320274303,0.00014412102991168775,0.00032332802226212867,0.00013418052660898956,0.00013026056557587483,0.00039534337158429061,0.00013383590310672776,0.00013460329445673394,0.00016039386019391379,0.00018378058730591956,0.00013896954381967534,0.000186935168977533,0.00013107270439025655,0.00033381737249768041,0.0002600953400214819,0.00017278220820716528,0.00015484977563430866,0.00020445810403492569,0.00028202236660039456,0.00021369833275213041,0.00014084813478565402,0.00017115873054166894,0.00021675259656949553,0.00045027923172363278,0.0003361776368435306,0.00014055531757109138,0.00024739724879481142,0.00014677215034540226,0.0001454784033546392,0.0002252363958748785,0.00015833064388994037,0.00013276169424893391,0.000158813038600897,0.00019643924091873721,0.00014889217964509001,0.0002514387187683506,0.00015592790116733565,0.00016340459945191966,0.00013451925947063911,0.00023211197629330901,0.00017012466667031299,0.00018605916493734232,0.00017056976713711276,0.0002746431293461637,0.00013075714887979514,0.00013876088210025754,0.00020571367442649976,0.00031099194018786825,0.00013269096688280711,0.00015178001961215152,0.00014050199797587738,0.00012975108793866522,0.00021943711300288204,0.00016760993923372618,0.00018721495120289016,0.00023016472839095062,0.00012935289184103879,0.00034174412106457216,0.00015086594425084722,0.00021084484261753224,0.00016038166921836171,0.00018837813275470589,0.00013876666233898188,0.00013584437857281492,0.00013368331415546022,0.00018231886985744605,0.00017145213854870536,0.00013140546128451454,0.00015965037757847308,0.00013307809961427602,0.00028718520452787421,0.00023424145312320551,0.00018401111749545145,0.00017369679503810817,0.00028205053028583662,0.000147894438015356,0.00017139917753595117,0.00018829162026870228,0.00012983579865485291,0.00021844493866544034,0.0001292897547312857,0.00017319826365916457,0.00014027112909683706,0.00014864911504068365,0.00015913273294712482,0.00018516195874775673,0.00023106692985430181,0.00016017669487488123,0.00013974666012160226,0.00015385949845992113,0.00014996518852988894,0.0001673052223696293,0.00020778825894305239,0.00013890460557932038,0.00015078000727576106,0.0001600588729035035,0.00015428956463242626,0.0010157783485534961,0.00013944063987878435,0.00013646077951293438,0.00016170820199355282,0.00066589891414773944,0.00036446827539739413,0.00013846676454346308,0.00035239414642130581,0.00012943931407853571,0.00016243695009790943,0.00018815815971616308,0.00021654995123448486,0.0001793894793071474,0.00014748722859838232,0.00014039849978522145,0.00050982685098068111,0.00031930259184144682,0.00020255603862046319,0.00013034835899812693,0.00014354619217939462,0.00018044228957481837,0.00013608951377159226,0.00019374623890513779,0.00018943725084856746,0.0001351014957388854,0.00014954191004360197,0.00013929986008314241,0.00013345954812652374,0.00018107746829781616,0.00013967204911316148,0.00013378754655456502,0.00013204932686096236,0.00020787144617766712,0.00021823398318004665,0.00022029904271279849,0.00025982511717883916,0.0011306607200670176,0.00027513534767792825,0.00015280159808232722,0.00014866892391809876,0.00013382313614408717,0.00036473447191251712,0.0001965596606468,0.00019854319313412461,0.00016201889089930048,0.00012985808606741898,0.00030253868749903067,0.00015666228856751178,0.00013052335462543011,0.00018330684782410286,0.00015083631796798623,0.00020332488379649365,0.00028048206437240381,0.00016944046839354146,0.0001778744501683563,0.00027762049598158817,0.00021956947784011936,0.00013864203892966374,0.00021765981349470146,0.00069700620234126398,0.00040040348590835286,0.0002943662705712702,0.0002440287231650325,0.00015623213158566569,0.00013568850450875622,0.00020049499098298513,0.000154668089790167,0.00015242095622569304,0.00028592692211818995,0.00013467294079853458,0.00014872660040277916,0.00018115240519068088,0.00020354905117327737,0.00028773770612048824,0.0001752997917518297,0.00025062912825644782,0.00020107435160179312,0.00049926540090506732,0.00032944431813828397,0.00015552256602269584,0.00014211160975747964,0.0001619611921013183,0.00014352629178752521,0.00013906144032260621,0.0027864642636434346,0.00015553946430560921,0.0001401288522023642,0.00018704343309426899,0.00016274216657820238,0.00018639450995417046,0.0001298535853586695,0.00013982315990071584,0.00014104152982205497,0.00013661664874249405,0.0001921239010872075,0.00016304958145064598,0.00024282161663300816,0.0002924568847268247,0.0009461423970592973,0.00014175144325009696,0.00017170024868604851,0.0001776497465452132,0.00019409452262228398,0.00013727981741663554,0.00017844274654282524,0.00032341464608264225,0.00018327849054647826,0.00025196516654528949,0.00017192856757199682,0.00018913775744290576,0.00015523453277889449,0.0001619405476621414,0.00012903627404962535,0.0001759327082879113,0.00019182984864258155,0.00035116126180825455,0.0002229680817825312,0.00038040943967522782,0.00013429536407259584,0.00017725863097698755,0.00014702984060850364,0.00018250984428998357,0.00031637878370932522,0.00038925024055827149,0.00021803348290788685,0.0001920518923320788,0.00076126823985438511,0.00025662728535255386,0.00013075849114826995,0.00021236983325367533,0.0002021803260067167,0.0001727726268198924,0.00018622394377810071,0.00014462840813438547,0.00020228824473063003,0.00019729903530675766,0.00020608235909457307,0.00014169198283418578,0.00039306936112085524,0.00014276559477044472,0.00014949251651507427,0.00032057031253912197,0.00017059737046810566,0.00013723165279919193,0.00014031016770286358,0.0002079611174661777,0.00014016582588969757,0.00016812881892183432,0.00019666655179154666,0.00019962810109817519,0.00015418102927149618,0.00023870694525050503,0.00013892192161716468,0.00015237290554070534,0.00015702861165810898,0.0001316316072520266,0.00031246391714646502,0.00029579544857898733,0.00017584004360136232,0.00015952369230307241,0.00026537346418638807,0.00021235389049262138,0.00013877316057342228,0.00036444713002416939,0.00015407249243860009,0.0001495196709427067,0.00033295099163259542,0.0021413993910640349,0.00015894160167275779,0.00029484905896002558,0.00014289115914174373,0.00026523586802360764,0.00026908564077778914,0.00021100560362554682,0.00032465310337672048,0.00018514553089977128,0.00016591108504490911,0.00016158895180604197,0.00018154309868190747,0.00028545679763224569,0.00021701984439272264,0.00019566455539673478,0.00031770275109009697,0.00025976260978924056,0.00014092148289304932,0.00096389579673987209,0.00047815111987456628,0.00026345327342612411,0.00014157022609016052,0.00031135720503946941,0.00019039439129016521,0.00017521879493043128,0.00020175155212310197,0.00033391995203301575,0.00033928248593336591,0.00015555480468686442,0.0001292799605711424,0.00014341031367965431,0.00019285489647102215,0.00017660679689930286,0.00017203479667843898,0.00013089236377881308,0.00021150192839356648,0.00028947786452394696,0.00022489661326457539,0.00014859478349655783,0.00037319258808557302,0.00021717874924084965,0.00013614995198638972,0.00026671875947997001,0.00017918626486318991,0.00021853631233743274,0.00016028426043170044,0.00020937285581999258,0.00015468986721259479,0.00014615483440094548,0.00018834640861166153,0.00017394662005575071,0.00015356560595460348,0.00045692630698088816,0.00014579810153830477,0.00014648824603838252,0.00017148354051209951,0.00014372724306183004,0.00026385079607273951,0.00014936550549456612,0.00017692816423399982,0.00025664425850219875,0.00017849852202452037,0.00015529352102484423,0.0001368193085131877,0.00019740983567840411,0.0001464877708289966,0.00014167243985676838,0.0004843557164333926,0.00013455312182213084,0.00014060749062239298,0.00015294411348326241,0.00021132726939178167,0.0001455875505323427,0.00031981813959330705,0.00038824193625734601,0.00016844315071563585,0.00045846057615791467,0.00015198860719228255,0.00013093412214851269,0.00019150668515636814,0.0001952904998939635,0.00016083040137282109,0.00013168554816932144,0.00014548884780240135,0.00016644800716689845,0.00014755335300995092,0.00018116207085843244,0.00014522244429940342,0.00029986491292803769,0.00037366155697503392,0.00020264231367343545,0.00017213649624877572,0.00014775981097602794,0.00016138347708710175,0.00037975701283419013,0.00014389748206260967,0.00025229035503099864,0.00018798655201971573,0.00018880162217915926,0.00014737155722932365,0.00036676258777793231,0.00051930883468841876,0.00015938075830245263,0.0001327464993569093,0.00015597433982356224,0.00016679440216008396,0.00020112653574068571,0.00030501930624979827,0.00013451482747495682,0.00018140896164341795,0.00016024985451261125,0.00018929486064404034,0.00014194264384899806,0.00013828026994695036,0.0002772311740037112,0.00027932560308512055,0.00023298904357206353,0.00018215060257085558,0.00021631010792832407,0.00019921632777733479,0.00039799016724451617,0.00014781118709663994,0.00028452581623920431,0.00016603187876388821,0.00018609605765915671,0.00012950265748870005,0.00012992747131704128,0.0001707247291046941,0.00013504736522773804,0.00025309355901878566,0.00017998554233248986,0.00015736534944073809,0.00052186626415375666,0.0002128265189432913,0.00030223698464135781,0.00015314222902818663,0.00045238220037708269,0.00015264127946429227,0.00067986599785485971,0.00022078625068428588,0.000159899958557351,0.00022273917796153565,0.00015418169759279042,0.00020277895855317867,0.000260644209128452,0.00022892511864214661,0.00014398828530554623,0.00015514303188318801,0.00055911927580166684,0.00033403336950355825,0.00043795549388590523,0.00014446482848160005,0.00015910854544586077,0.00032217053645030897,0.00015675958649469728,0.00015285828907509008,0.00022204374216510964,0.00016208083538194794,0.0002304644173084478,0.00018873745892534769,0.00027065456378513799,0.00022856212800729915,0.00019529567812532749,0.00020876242158471964,0.00013521888476882761,0.00015607735976928762,0.00018817815546971748,0.00013579666326901169,0.00013163936336111931,0.00019266519628656256,0.00024762025862428084,0.00014814204847380606,0.00021186816824826334,0.00020612665988010913,0.00019658852048031952,0.00013483036992162174,0.0001452500123341457,0.00019408579196990598,0.00022939321903793367,0.00062335841561408922,0.00023347552292396031,0.00028076138986822779,0.00015668310801397189,0.00029961967781429508,0.00013098855073862984,0.00016810377494550717,0.00030272772538518337,0.00017056186328049045,0.0002537969193222824,0.00014847579837159848,0.0001791197847879071,0.00021663832912003177,0.00022695068945563854,0.00013240089728062666,0.00026513692690938352,0.00015241789734175089,0.00015521415567749274,0.00015689464253057007,0.00039734401069219674,0.00021895138288253308,0.00019165632556796187,0.00029598285774789655,0.00015084877385287724,0.00020805399892219879,0.00014883805867898589,0.00014526617764981561,0.00035591411616621649,0.00022689328130195917,0.00015915150057672616,0.00034522751466867311,0.00013903145936234636,0.00017544616678345077,0.00049366075193992844,0.00015825428682105023,0.00020939382028776598,0.00014531118900937395,0.00081616418889195891,0.00030189168566057344,0.0001424651762948392,0.00013018998670512018,0.00029038134263728371,0.00014171688821747403,0.00017651766299918588,0.0001799727624331006,0.00019465981645675604,0.00032630392452549794,0.00013175375762282469,0.00019988956461692222,0.00018915864561037338,0.00022804822509435541,0.00020479327914443125,0.00054598619425800154,0.00017721162086370163,0.00017489949040755469,0.00013270169223958167,0.00013004799682835654,0.000180054687854135,0.00013786128214654764,0.00013228542201838004,0.00031448160435718574,0.00030274198042993654,0.00020777535459680292,0.00019551760318244906,0.00020864189681583283,0.00022149400357665571,0.00016882685136752508,0.00020840666316088578,0.00028588950153928493,0.00020224855689217374,0.00015054939223338706,0.0005289048236497715,0.00017947469893145806,0.00014111013029466065,0.00019840882619325678,0.00017356523385882107,0.00017295135412647884,0.00030165843127469608,0.00018189778330770511,0.00017702729958354497,0.00033283114220938675,0.0002498910672942068,0.00015409447508319519,0.00014134253209007678,0.00037845585852196081,0.00022169293794185047,0.00013955016461743706,0.00039893167043519531,0.00015914401801311669,0.00013999517745282318,0.00090209598331982932,0.00016687523938881783,0.00018759372075598249,0.00013156088874052314,0.00016311357472057579,0.0001451420221981382,0.00021845002299744981,0.0002137547011410187,0.00020521472025487536,0.00033103980276312208,0.00017142121961711488,0.00015673930516570697,0.00013352202379683084,0.00013064650455059704,0.00013146763471142572,0.00038083966250653824,0.00028691678131202784,0.00017298370114921289,0.00017298901713023556,0.00039076406867322763,0.00013052168914660058,0.00015492773288827537,0.00014338990093740951,0.00022152191122007202,0.00016053335389541596,0.0001300436734210873,0.00015625810298379187,0.00017957547521613902,0.00013859675975006277,0.00015533657268725231,0.0004235153268571812,0.00015579907123735527,0.00013203105567781927,0.0005262463580293429,0.00013539281247611988,0.00024434833016445136,0.0016551047324999978,0.00015556310519245441,0.00016257001720685731,0.00020461075134596362,0.0002390721681633982,0.00016521577166047109,0.00044845623849093438,0.00019161361661711532,0.00013199910025867202,0.00056130573269296262,0.00064774060526924559,0.00020040118532517294,0.00013589293643272033,0.00013907389393395618,0.00013786792565112575,0.00029810097216149435,0.00017254839731612349,0.00023412554968209415,0.00024686375062116803,0.00013603253936868246,0.00022980742482432348,0.00013989465359723441,0.0001407133197158757,0.00015174538900795576,0.0001474910532553848,0.00016627236019742841,0.00019003878044668629,0.00018236510086258522,0.00021347595237607362,0.00014961450530829879,0.00015534287297361594,0.00028977206662638474,0.00013336039390401909,0.00026608042448094814,0.00013643543209302403,0.00014948635576866637,0.00021653456970800774,0.00020036429986557808,0.00018605864510597736,0.00013552212866237468,0.00016638283969055699,0.00021488591834259435,0.00034382590305029743,0.00015703414858323229,0.00013394412860840235,0.00021474616014643518,0.00026355998102732357,0.00015157582321419883,0.00034316182466429695,0.00021809092870391322,0.00027271234607498766,0.00016245666363928969,0.00015846304048780147,0.00016221601417757396,0.00012950790798778222,0.00014354747407206754,0.00013049240469364688,0.00023348249005401793,0.00017376339337226744,0.00028332764944465105,0.00051126830108950017,0.00042757521153468498,0.00014509046183200708,0.00017987670812908514,0.00014470581824598338,0.00014240897602458207,0.00015334791579304054,0.00019737010867659758,0.00012999745242594845,0.00014282059709388157,0.00018898522654349324,0.00016454936461401715,0.00013070674032909338,0.00031150660225234936,0.00016070730940824534,0.00016700781056420527,0.00013238486841141573,0.00042543227439454772,0.00016571418617516209,0.00015996470317443355,0.00023145460049156034,0.00022391545508079557,0.00014757459787070114,0.00019419063727390946,0.00021625688179932292,0.00013547454726176554,0.00020128480153973704,0.00016480730826945065,0.00061280115235082006,0.00042297025941354804,0.00015158004745873687,0.00013243747226228527,0.00015709425754996571,0.00016127040112172745,0.00013328764806966938,0.00014644704356281215,0.00021850512292543518,0.0001453205427585624,0.00020709568809859359,0.00015812367518534359,0.00084169033640478454,0.00042142464823011737,0.0001416512502454686,0.00017793089581602688,0.00015936232248983659,0.00027247321429118443,0.0001324743922844532,0.00015735385900681248,0.00021532631190345652,0.00017115145377002064,0.00017476216772214728,0.00051506800675538643,0.00014025461453786523,0.00013776562271965298,0.00020079983808598859,0.00013340274254716362,0.00013889880580618045,0.00022663768475709658,0.00035988557854566266,0.00044223587403890969,0.00023265738464377437,0.00013603639089611574,0.00014728856961276774,0.00020963169479686669,0.00016948220636070407,0.00013873437527557342,0.0002024572294084575,0.00022247031217566041,0.00019408200655109909,0.00020278754660616667,0.00013134454135962337,0.00013167956696511933,0.00014789859062812739,0.0002691632563418103,0.00013777643454009175,0.00091607634432433601,0.00015848780192123709,0.0001680500072916192,0.00015518495682421157,0.00015674156827219957,0.00057040562771316493,0.0001320035981708608,0.00015486315951716284,0.0001450951067069352,0.00029573496923934327,0.00019256008095106712,0.00035655468998885254,0.00019702243247865633,0.0001917270172161424,0.00014751488531341067,0.00018201957333842129,0.00021036734471516124,0.00034920798376268636,0.00013273242157302718,0.00015295444809812971,0.00047099764236790558,0.00019308525276029944,0.0001348993467555215,0.00040786402873949383,0.00015556887819928001,0.00013716169154255785,0.00020945291220963061,0.00036511724046969844,0.00017816382350039356,0.00018057701403493656,0.00018281353006952637,0.0001363422522634803,0.00016068018401197375,0.00025755332213184913,0.00025309386739931857,0.0012915979821403662,0.00015032483455388842,0.00014528339218122021,0.00020896454460846492,0.00031609714210252343,0.00041664409429496634,0.00016824525778554755,0.00015521446050813424,0.00014308060861969714,0.00027920743005237729,0.00030873010456078262,0.00026310116117654982,0.00013576023503685696,0.00013713575842076074,0.00023576954349831912,0.00013959088733085754,0.00013368523588760804,0.00016514457030963908,0.0001380112637242975,0.00022029058122376301,0.00019470317830115079,0.00021131446547705896,0.00029339447879607212,0.00021794983192929728,0.0002270179008967013,0.00012955451325220445,0.00017158519133606036,0.00013744640214389213,0.0002480563683123958,0.00025061926903263378,0.00038356682667701992,0.00030123125454568401,0.00015264402122982173,0.00024276570776136553,0.00013744721502544814,0.00048626925472031282,0.000199464502029235,0.00041073737038445335,0.00028084455016977046,0.00014491176296650967,0.00016535025157921851,0.00017914004840742021,0.00026671009755459854,0.00026316062776895137,0.00013512253777077065,0.00018131395219393753,0.00044028053141122983,0.00020077251137945863,0.00013819778551283873,0.00018792942716938744,0.00019101090069064029,0.00023604514858073601,0.00031940037734228005,0.00013294829908520249,0.00077072373478082664,0.00017635493615393634,0.00013011239300447558,0.00014550436841057813,0.00013048373570203001,0.00015593747947621875,0.00016886329915543981,0.00018665134159945285,0.0001653119214010982,0.00024134207061641587,0.00014700029561350736,0.0001647957525275229,0.00018604385025376745,0.0001787798916358196,0.000151833500899827,0.00013747278533158253,0.00028662428607844384,0.00014420901406178265,0.00023075784771811557,0.00015133143221238355,0.00013932447968715116,0.00016989756489902631,0.00019451111573653583,0.00014641524350037099,0.00024876617983741664,0.00014850236870133599,0.00036462405044199853,0.00035801645317118619,0.00013581961827229138,0.0001936534367952684,0.00013583473981522171,0.0004645233762100934,0.0001806859963183746,0.00020093868314481855,0.00030799611275462551,0.00014735154291693045,0.00031426900705099791,0.00013559081081197149,0.00049980466948546345,0.00018564993888898001,0.00017402101982389237,0.00016886671754760623,0.00023566683033114235,0.00022165466701651142,0.00016928146939767375,0.00024847258537489983,0.00020174316845774964,0.00016315838782231197,0.00014274574893750994,0.00018975191429024745,0.00014733572818615922,0.0001434325442528041,0.00015379277231347257,0.00048234092012490221,0.00016232026538494341,0.00017965343269172367,0.00024387365363546121,0.00014972392250188832,0.00015184906290818145,0.00014543611746719548,0.00013764180464614234,0.00052411429942733373,0.00024022469668697242,0.00022096973333757394,0.0001615331908254966,0.00022727493594453977,0.00014332937971268172,0.00021109297843517014,0.00014616416363163096,0.00025831606621543811,0.00013676744436348884,0.00019244534355353294,0.00058212638575413304,0.00017805145642297817,0.00014253497972521137,0.00034012358392421108,0.00029462097280222267,0.00016235510913668091,0.00014826372524064305,0.00014662472343628737,0.00018739080502232715,0.00015023950795169593,0.00014087424591265228,0.00037990246693353377,0.00017083415652229767,0.00022544139552262154,0.00022627482663496661,0.00031148806859742132,0.00018959059959962999,0.00016062777206527452,0.000138742138876611,0.00020465915688415182,0.00013170829476530344,0.00013091404608152755,0.00022836833423173306,0.0004114861531036138,0.0001484048928212948,0.00017278607489008529,0.00020418251910554587,0.00018087044829650614,0.00016614873248926604,0.00025180004736863153,0.00022194134413133798,0.00015581032528256031,0.00013732260234314544,0.00020288012082109335,0.00019598504261022988,0.00015481341284317209,0.00025255488611099859,0.00015316804721695831,0.00016619975084569517,0.00020809559933705884,0.00021525704257298315,0.00016763230404250688,0.00018306860453310835,0.00013561513850986147,0.0002331376539855709,0.00014604980013891575,0.00014372035991781827,0.00066170513425869342,0.00071862690548123154,0.00022413772074937477,0.00015453032719061821,0.00021181176172169487,0.00013352953161433333,0.00015472823672128794,0.00015103859624447576,0.00013018884198342663,0.00022114930226638122,0.00019037230595871619,0.00014148116865550121,0.0001312130001585858,0.0009243019988184381,0.00014863995878634852,0.00023210762662205636,0.00014220727755534111,0.00031925070013675053,0.00016980292723068664,0.00025950946176410541,0.00025296719352965724,0.0002380250787009475,0.00020336849147068538,0.0002413457340110682,0.00015353751102151244,0.00015243688483183027,0.00015125394759877314,0.0019536633154194922,0.00013393078775252138,0.00013273216057837836,0.0001407167217064,0.00020769458402095683,0.00023223220854880829,0.00014183674988871935,0.00013468861089001337,0.00013432026522333001,0.00040636519281450834,0.00019435100183994846,0.00016708802418878308,0.00013724063811912864,0.00013403038360921231,0.0002081974247400492,0.00019071400131529971,0.00013146243785797784,0.00029276691637535621,0.00014624971784465922,0.00015703096212066144,0.00018591951877298908,0.00025881173147569416,0.00014751315893134662,0.00022744181721237944,0.00013674415335791096,0.00019469566063353905,0.00026121529294381084,0.00016042696532882249,0.00016060772327140748,0.00016246307261458059,0.00013228979866266812,0.00016690382394169077,0.00014058519714036318,0.00016619846257558436,0.00013718479557097091,0.00014455641813739339,0.00040573967010545275,0.00017699511576582403,0.00052363214099669772,0.00013143555880311395,0.00015836918245543436,0.00018923027579596463,0.00014253001357678597,0.00013202515838237953,0.00015808995535476552,0.00033214888655247731,0.00021115484170179828,0.00031849866781075088,0.00014940514512534343,0.00015603153931233827,0.00019101236151925345,0.00068717086974497946,0.00027362057461351711,0.00053376643316009901,0.00015537262528254303,0.00099943626696957603,0.00013851961824117205,0.00013961611039302096,0.00064044856090022487,0.00012916620032470125,0.00015687284498610033,0.0001471220106289224,0.00016512573282420894,0.000156911668788582,0.00014575251226635319,0.00014580267254106749,0.0003509937512460541,0.00024680830562713444,0.00015733454441355709,0.00014515770197339156,0.00014104179328706143,0.00016968151713072475,0.00018426554771191524,0.00014814901965442219,0.00014920742304441568,0.00015685690796841877,0.00012927629162166933,0.00037663421724068989,0.00019483507344406444,0.00012975491490877788,0.00021868354912395752,0.00013770995070147552,0.00015903939120258959,0.00016175680997022274,0.00025934738531759087,0.00030010759044794843,0.00013677068450678194,0.000144076364552702,0.0002053086395307147,0.0004530901104367032,0.00012920188241636243,0.00064157168218578308,0.00017512965462613764,0.000160221623392004,0.00025909698644990955,0.00087813071894278613,0.0001345453101923398,0.00013697455701346806,0.00018594950187155674,0.00024919555280533283,0.00024043772588900144,0.00019221207678242049,0.00027092234104363446,0.00020168726268089321,0.00032097673651342175,0.00017589565293119655,0.00013474651162368394,0.00014468677519257391,0.0002048389373963501,0.00013859022105067797,0.00029069856215420257,0.00020521373015075381,0.00013187160464394389,0.00027195277173346647,0.00015159734342127021,0.00021479025873239819,0.00026525274754527286,0.00017306515389449212,0.00017524118403229621,0.00048608794726811449,0.00021458493002507399,0.0001948136393895671,0.0001432388116938361,0.00014522862902127158,0.00013478640225017592,0.00021917032647499255,0.00012928860504644825,0.0001541547425387782,0.00019691693409723868,0.0002436382175923114,0.00016413047123613262,0.0022637838175199629,0.00017958903498423983,0.00014910715226795274,0.00020362177267506886,0.00044273024893726524,0.0001527137970211652,0.00022328451959248945,0.00013271771176813949,0.00013508679005548417,0.00019260376684883637,0.00014691438141897317,0.00015566590209755281,0.00045125917225310503,0.00013063870420877208,0.00017431254011365747,0.00022064200176074653,0.00034511190451706958,0.00020859451980200178,0.00025849314444290674,0.00015143060786780392,0.00013009473424475189,0.00017304920783617431,0.00025403132466098955,0.00015088479344063318,0.00021979569898030702,0.00020682601800771981,0.00032679462932394077,0.00032685072971407411,0.0001924538059626737,0.00013132123118870555,0.00020290996162648317,0.00014454719128119094,0.00013619479200042639,0.0002435169881618371,0.00014411250124435863,0.0001365184839283066,0.00013121518867193781,0.00018491272633827747,0.00016913228072833796,0.00016094567375281001,0.00015477941324769918,0.00029120955983229392,0.00015078878550885762,0.00064086786167184058,0.00017694453006553674,0.00013265527724859479,0.00014148798538350616,0.00016017999610659802,0.00044855506991630994,0.00017060029675989788,0.00046982847555340675,0.0003780466263283872,0.00019480973994747926,0.00013723597210596144,0.0001290403297407777,0.00036885364364300661,0.00037672566524228282,0.00019474482639549094,0.00021886817872874775,0.00013555595181489208,0.00013363787486769563,0.00030429370931092762,0.0016776478046102896,0.00017497982275457784,0.00015351241069795456,0.00019226541332973446,0.00027635871120837923,0.00013266690413211662,0.00017155580518301222,0.00040904997695304166,0.00019386935032673585,0.00023378614781897802,0.00017397604349027836,0.00022571403098268456,0.00018680771930134029,0.00015504136195645273,0.00014098169405121132,0.00018761341379746357,0.0001938916846178941,0.00013534652014638072,0.00013939384629090289,0.00026904649739556934,0.00016925965294322529,0.00014284363643117786,0.00018402682405122895,0.00034449446545136336,0.00017162175896453041,0.0014478293853129123,0.00029465048429832955,0.00013082393834351055,0.0016351629989186855,0.00013415518458727987,0.00066668850090844138,0.00016327328639876844,0.00024231815853832742,0.00020713733132797884,0.0001429667024693155,0.00043412439081679308,0.00013121264726110573,0.00018063610258228763,0.00014204120991414344,0.00014264788323284147,0.00019183199375542409,0.00048614994557133392,0.00020345301378497691,0.0001616282356569347,0.00015899836689647683,0.00015933011866951671,0.00020557212651515477,0.00026287198161655055,0.00035758042134814027,0.00043319114831977994,0.00014760589335657736,0.00027759437788709297,0.00015069774465286022,0.000235632349002138,0.00013721501222768996,0.00034614559069797969,0.00018239345802459602,0.00031709476366642943,0.00028438418993944562,0.0001546412494473955,0.00015202116262010663,0.00014020153375442652,0.00026312578438941308,0.00022074949444562155,0.00016808679816616138,0.000212245857350278,0.00018644138256549035,0.00033553839197465409,0.00091319181804874001,0.00014456542112287966,0.00022108754546902983,0.00017865355609254901,0.00064485099268302669,0.00012950464713463758,0.00013513546111252478,0.00027026121059491818,0.00036830429005823911,0.00020638337909293652,0.00013262494485571466,0.00014423379623031623,0.00013706330386827249,0.00013262298780694273,0.00020407326153081879,0.00014875883046100473,0.00015961651569811164,0.0001638155865737293,0.00015404296524432131,0.00017948328710049147,0.00026781197808009572,0.00015359506526204796,0.00015221452159619022,0.00015728217506255664,0.00019842119907288725,0.00021245150702632601,0.00017163234938003043,0.00033752878285180261,0.00015130807352253499,0.00014488969631669347,0.0002932841780033132,0.00013373905931773596,0.00019038317899298514,0.00025049651974916841,0.00013341603238087191,0.00030616301704070032,0.00014878634139852036,0.00013467692057353984,0.00014063306029784558,0.00018775347640870763,0.00018833521918602215,0.00014029711843646886,0.0001431427708190143,0.00015277194926870022,0.00017628813340150355,0.00014018842827252689,0.0002353934628903337,0.00046822200607927892,0.00053496197794238585,0.00021764341878987854,0.00024987350224172852,0.00017606238110063176,0.00013405358424632309,0.0002221597647635384,0.0004630493967549454,0.00019118462813766396,0.00069257426255358559,0.00014886765501973971,0.00019833961923597758,0.00015145655727288754,0.0005490755183913613,0.00043066707642590822,0.00015521217678117163,0.00016278215904928838,0.00037358550440029975,0.00028947180400124939,0.00012901395411024739,0.0001422198633203251,0.0001748542910773825,0.00014287679528081636,0.00013884030066069883,0.00018013997255643012,0.00015356764465148935,0.00014597451724298322,0.00014067222096236844,0.00020533577588896298,0.00019512715732104729,0.00064780828645147803,0.00021128726270803816,0.00014999953095652709,0.00015720802208654133,0.000268974176540567,0.00013231754937029872,0.00018145949085983059,0.00013189889446384382,0.00060068622302510957,0.00013245734315319384,0.00014618246360142132,0.00013348252884554738,0.00019170739647948398,0.0001299356286599752,0.00013075340150561177,0.00068298202119428575,0.00013940993268107482,0.00023759400988635857,0.00016649255449525892,0.0002451982702250669,0.00026433861513521596,0.00013102371531838379,0.00026730177958090716,0.00013665351849687595,0.00029968847089078946,0.00014832066142808276,0.00014317179791683941,0.00036073156191498594,0.00015278919546163667,0.00066469658434117212,0.00016035187263640089,0.0013425382190867701,0.00017304402569906806,0.00015696655393112241,0.00015795874914997663,0.00015127945572590551,0.00018185348624957145,0.00014193188249330275,0.00018883352023808103,0.00024111014986739811,0.00014891321509328414,0.00023099475588356084,0.00020145141034818561,0.00014206466770020983,0.00035484742465217739,0.00016766585965180046,0.00014524968903597822,0.00013179847788482785,0.00013209538206243211,0.00021068466779384639,0.00022819367343164656,0.00025943625472844292,0.00024469841020789761,0.00032154127756165953,0.00018896207469732231,0.00026181379959617774,0.00013796664784921571,0.00016760514896251529,0.00072658007620745647,0.00015708123726802784,0.00018051166430886197,0.00013242699482964346,0.00015995642047056689,0.00028342553837911854,0.00021007684650465743,0.00013583552262875966,0.00014920703203089047,0.00012935519037697959,0.00023378148764044017,0.00014960927127651672,0.00021278120081430073,0.00047941729204838498,0.00018767380257362194,0.00021618353258960247,0.0001346675694813956,0.00016146499094960536,0.00018412463054193814,0.00031534062167689751,0.00012933625128130463,0.0002163562098001693,0.00014788620956811976,0.00019856900565492092,0.00024402558616028362,0.00016841952611177353,0.00017279639898210334,0.00057295229375028207,0.0003596096810888053,0.00028595466539331715,0.0001876841162328693,0.00012962169210952384,0.00037571388854781997,0.00013840268824798888,0.00016022735423057246,0.00017478112015165492,0.0001409220321084273,0.00019247675979977669,0.00067490647534596449,0.00015134713754448559,0.00013377868593437116,0.00016834228542280441,0.00012983472731583256,0.00016301398744923454,0.00018347518403976628,0.00013808339614562715,0.00020906378324950584,0.0005232699692490696,0.00031817596036918508,0.00015845604278446576,0.00013404466290057468,0.00029701479936535485,0.0011458802728502974,0.00013152821763977348,0.00014188266801866992,0.00016630532980519387,0.00019347116791364264,0.00013375694221118568,0.00017793172296859413,0.00015344621397457833,0.00030480222283345065,0.00049221993888953915,0.00014327597576682479,0.00031290414006903718,0.00014583094419697379,0.00014084122729832117,0.00016133392179847107,0.00018370949835041801,0.00025767685398163744,0.00015153491834540476,0.00014605685021522896,0.00037648734902809061,0.00014415398571158438,0.00013414232514653341,0.00014005814550037535,0.00026300987027863689,0.00045164998381536911,0.0001409102010400467,0.00032830169929119014,0.0002317393640395399,0.00013340213183555687,0.00014568606970068943,0.00051422478923074041,0.0001435620045575861,0.0001546196326747383,0.00014431888410444568,0.00022058120719133185,0.00072150140802799316,0.0001861819229714124,0.000161006019423671,0.00013372347668859995,0.00020524299674109915,0.00015252125944122737,0.00013186034996678778,0.00018226723478583176,0.00014569146659083732,0.00020593745128314901,0.00033524136300258048,0.00013059657754694603,0.00017136435751410656,0.00015809415934744543,0.00012917487586613138,0.00058443963629910343,0.00017207005704681296,0.00023573116669209121,0.00028682151607831933,0.00014369146516615404,0.00033167879150813889,0.00017914151195548542,0.00015215126346332565,0.00030765956081692605,0.00014603695379679523,0.00021295588050719349,0.00029261225164049255,0.00013389319422969214,0.00016818860874240007,0.00014181078720437571,0.00017869123762333713,0.0001397749360587059,0.00014178941069596765,0.0001664683702886015,0.00013914344214480462,0.00016261700029488585,0.00038367337218783541,0.00013152073263842848,0.0012256203208074969,0.00018208831703293127,0.00016200313447875767,0.00018138206408746993,0.0002888918844641535,0.00019425044488551705,0.00052995011962184125,0.00017494203986527791,0.00036148323792119615,0.00016286601053632665,0.00030044060576192138,0.00028471222958804211,0.00021899234663478576,0.00014226479625949401,0.00014070516425787691,0.00035518418630911178,0.00014617334993362742,0.00018033107412646123,0.00016771325059363558,0.00015104311115872246,0.00013051111590108469,0.00017687617082768063,0.00014900501833606426,0.00014900608676376897,0.00077661877796330638,0.00016036717987528201,0.00015333072763276656,0.00025531155054801357,0.00019063359716302528,0.00016699807267490227,0.00019940535859537328,0.00015612643924712793,0.00037414544779330546,0.00030356224420474855,0.00016273714457844,0.0001532166831946942,0.0002220719677731676,0.0001918080446284685,0.00014334125325530354,0.00025489676426524637,0.00013291235845355834,0.00014300473556039584,0.00020198885549055674,0.00016096511726935186,0.00022051323248097537,0.00016547548280245863,0.00015172300247915714,0.00015027009302918739,0.00019059475175402222,0.00022498052965918021,0.00015369487685998765,0.00021194925652714803,0.00027654368382087457,0.000140200391552643,0.00015908175645188514,0.00041193577824885668,0.00022410096701611429,0.00013281570182227285,0.000204762885593924,0.00015975815096009457,0.000596638152691325,0.00017778765230667487,0.00014303592101269985,0.00021450099488445223,0.00019629996381563265,0.00014683962694631242,0.00013429856252555924,0.00025207427287037395,0.00018528412458860234,0.000167671696286325,0.00030500170659733344,0.00014879224488077676,0.00013148790565652795,0.00015034154837705529,0.00015507457752333712,0.00013214322723968975,0.00022780463152334167,0.00058492303524420208,0.00031879730557272663,0.00030305355298211763,0.0001776682309481142,0.00014912588932618778,0.0014191795446146633,0.00017427408714900156,0.00016694836831012772,0.00014776173986416494,0.00014888301536800162,0.00021878001265048636,0.00017326888130964315,0.00022505307961161633,0.00013985574661301307,0.00039017712360500315,0.00013970638091759087,0.00015305384704384866,0.00014897642687051416,0.00016112939517047697,0.00024738069136973626,0.00044507058831964148,0.00019882043275434668,0.00014360514527370845,0.00061561860514884614,0.0002761149850564953,0.00025534331012484225,0.0001368906575543951,0.00019086188414323553,0.0003428309426000679,0.00016993422055916786,0.00029212604950995476,0.0001507656729147852,0.0002563794624062892,0.0002451987174571903,0.0001295817325386413,0.00013502479502901203,0.00013061854821267693,0.00013588777017861664,0.00023498769410700912,0.00023763388115852509,0.0001470411015289628,0.00015783808508308496,0.00013168999789283015,0.00019247996067628208,0.00018648665084551635,0.00015192923140542886,0.00015807926305969112,0.00022938092059507492,0.00018409347085438744,0.00015850641761232064,0.0002676418669551871,0.00023116077213069055,0.00013679348030463457,0.0014940208105670642,0.00013347799164081922,0.00013429832891946071,0.00042426115863146267,0.00017255544668556936,0.00023376127166507601,0.00013498665524952426,0.00014887132193948193,0.00023373595599039896,0.00013116145788363297,0.00039396094676257963,0.00015889524086082978,0.00013448216965622944,0.00042477181336420065,0.00018087871900589994,0.00052742904361269261,0.00018684178327859111,0.00016141780333864042,0.0002195873195231155,0.00014096983861044295,0.00015200909575647966,0.00014098134270806731,0.00019713671283414777,0.0001897219727225838,0.00014284718912488495,0.0001398160655536299,0.00021104648246410924,0.00013670053028117738,0.00022395319205015807,0.00055187704910046934,0.00017129686876049026,0.00014853767009508022,0.00013961163904313803,0.00018117677793998157,0.0001660343045342964,0.00013330468313489674,0.00019582480815825409,0.00029585873767729948,0.00015433157034560664,0.0001352603595630112,0.00029193826576103421,0.00036970594996871666,0.00013701769386858614,0.00013205443795942433,0.00014739339308488027,0.0001379088565529108,0.00046087917223224163,0.00021572591104111286,0.0002106101575400293,0.00014143217686648428,0.00024543739290251303,0.00014521854607436568,0.00027745411034519766,0.00026661807904361707,0.0001319793158788182,0.00013468847244775948,0.00016510700155112818,0.0001466178240374913,0.00023386048691140035,0.00022648185609478,0.00013821187352601122,0.00014757743813021134,0.00020454021639283135,0.00013927899692716704,0.00014700075017460811,0.00030610915839353472,0.00029954944005654901,0.00013504752672079359,0.00029675915564764349,0.0009111237666857674,0.00017034110936358236,0.00019878677273724353,0.00016257843436519827,0.00022380618335623705,0.00057505561250487775,0.00020741057291640707,0.0001294816905133213,0.00014118151181988293,0.00016303563299106293,0.00021518980481225104,0.00017555835986519269,0.00016148069367547728,0.00020095244903663853,0.00039524472447510339,0.00013338308042818009,0.00015634749122818453,0.00013848238873820218,0.00016224328312845683,0.00021033517868059202,0.00014237708701049994,0.0001445048715970512,0.00012947278935044273,0.00013676260143744056,0.00028002564759442355,0.00013164235621687019,0.00021919400414243932,0.00014021931028951085,0.00040276565621393939,0.0001793655977114022,0.00013893703428315813,0.00032634435495974032,0.00013252079142185132,0.0002517746475810236,0.00015559997949400565,0.00013790999856721139,0.00017003042938206297,0.00013304781734821902,0.00030891358950207949,0.00021563248591543454,0.00019700358624419689,0.00017468742991054491,0.00032335723158569395,0.00017677756458114773,0.00022723145980788699,0.00015341211031759123,0.00014672570081357257,0.00015445440939772904,0.0001387412004160091,0.00038807443371385538,0.00031200231813774843,0.00016995031512832988,0.0001783442238121503,0.00024351237899272095,0.00014417726344656082,0.00014177165995512409,0.00098712136791487986,0.00013438099241802184,0.00020613267767359702,0.00014355297419970924,0.00016088999825000444,0.0001880616494710807,0.00015511123942838628,0.00021245803321472319,0.00014813844256495685,0.00046639766021866312,0.00053947806971074155,0.00013145928786790993,0.00022327277640870203,0.00014007240488892611,0.00039061021510757428,0.00016823969042597135,0.00029834486367523075,0.00015468280900471007,0.00036858406694640971,0.00013472161827806845,0.00015654740801073207,0.00027709236636164691,0.00017707426176903182,0.00016317562703543071,0.00026245990781135998,0.00021063994617288395,0.00017452764270476658,0.00018963704916657276,0.00017600616871414669,0.00012917835319811916,0.00018471338559124449,0.00020953623330010186,0.00037981448922849031,0.0001537855462743667,0.00013413368458800679,0.00014875104789829107,0.00016702437957711282,0.00017140903046424888,0.0002274846548543823,0.00020217972933360851,0.00018318518653387953,0.0002715985685212809,0.00021149138106052757,0.00018850424100216585,0.00013719147274390421,0.00013049518164608384,0.00020937896868027171,0.0002665267420860268,0.00016720804469386264,0.00014942388971226942,0.00015285367520765476,0.00028595825041628623,0.00052549482314294665,0.00022068723623318629,0.00018530632680755749,0.00019759941208097537,0.00073795039798632165,0.00016162156899648681,0.00017502339558033101,0.00013308816464446585,0.00014167611671189615,0.002563920060360905,0.00025375539641956475,0.00021226882188654032,0.00013536638235368419,0.00014543896277041167,0.00016188452800973703,0.00013488043401299491,0.00018228180253766779,0.00014647714592948608,0.00018236389845935843,0.00037595225912833612,0.00017092455340996277,0.00014442217532817945,0.00014542636382268011,0.00017427223467612922,0.00016991143650278758,0.00038832251002932338,0.00022246930230033398,0.00014246099682670962,0.00013669963357379328,0.00016961703101237415,0.00022811156815357258,0.00020087104989137026,0.0005791033904730085,0.00019541570613256426,0.00014533246648717723,0.00021367438604354635,0.00016547893666113764,0.00014891438868381529,0.0001366723786523263,0.00016631019043729161,0.00015037367966355225,0.00027002290623930091,0.00045700194043114313,0.00044405186830231324,0.00031523241163545145,0.00017278190438893093,0.00013187223280330165,0.00015267853940435026,0.00023835971570134278,0.00016841206200936894,0.0001351223240497454,0.00015273501717622253,0.00017347348254937518,0.00014960647670116261,0.00018308475850370686,0.0001381899246241263,0.00046673206430511503,0.0001402960037818479,0.00031040750481951357,0.00017654098812799044,0.00034237515682660678,0.00013449365067184782,0.00013606696556692666,0.00042855451802196331,0.00017841805391528455,0.00013891555753548841,0.00042283670111653918,0.00013982762602681616,0.00016339705269774587,0.00023088380448750909,0.00015015269563686137,0.00021637748332241512,0.00016128996406386718,0.00015828242420512346,0.00017909385608746149,0.00013475751621450002,0.00015391768813242051,0.00012948588914857287,0.00033574887104739494,0.00015992961697406237,0.00021672599107686242,0.00026348372061755739,0.00013674140255680715,0.00016951788778553202,0.00014949103403244648,0.00013538838080679328,0.00019547818304307157,0.00027413632332975362,0.00017948484791730074,0.00021181311483124698,0.00030771744955183233,0.0001702396555981011,0.00023876838031506426,0.00018325219491884255,0.00015437398460974407,0.00018205464647295101,0.00016423505341239375,0.00020380842377020785,0.00013387547373223217,0.00020822707349965348,0.00041920004848748941,0.00014230232073657271,0.00013198694700838169,0.00027152229772276534,0.0004166517409026516,0.00014268868028621611,0.0002199551321224471,0.00016466526982202327,0.00020938329482113847,0.00014600949719850508,0.00017550983554568233,0.00014934029670069893,0.0001705111708788722,0.00012951122272712818,0.00019255073557794021,0.00043246946852939518,0.00016274746685292893,0.0001809253059596558,0.00021932339475069784,0.00017194945502200482,0.0002031691174611858,0.00018150254518908501,0.00024672817018729659,0.00015587475588023269,0.00027423299620345622,0.00015539714795218915,0.0001475253058563106,0.00098645403402144722,0.00013989108806068432,0.00017338475990378438,0.00015642964828184756,0.00024272711619533223,0.00014428041550371723,0.00021488460619605175,0.00022634786240604472,0.00026775046468226145,0.00019890615848714449,0.00014937225724945063,0.00015103060852546097,0.00015046053972410798,0.00019745211221284994,0.00023070828450560301,0.00013837474895477466,0.0001417222669627391,0.00017332722091352638,0.00029432025688282007,0.00020237677144044255,0.00014053856668851412,0.00018629285931886187,0.00052583575543584235,0.00015279267672813231,0.00023271887092059902,0.0015089324240145274,0.00013785839062272707,0.00020190002345634662,0.00031152377576017958,0.00019131782021599556,0.0004422062392588251,0.00013234291317869396,0.00018910404158566725,0.00013948103072692868,0.00016308365661593638,0.00015113088779024393,0.00016872143468135757,0.0001828714388145864,0.00022509587881294594,0.00027806110687115425,0.00014820421315483111,0.00016181991509688529,0.00013072573499766789,0.00013296587101187552,0.00050068970807253129,0.001159013476599837,0.0016345168936081069,0.00018369115395766271,0.00025859313331216659,0.00022861521213712245,0.0010321283196053912,0.00014217620861324391,0.00017552377626777672,0.00014360240544518914,0.00013740083183429402,0.00031668950337511247,0.00017198515969344541,0.00044513705572527424,0.0002408701267282792,0.00018054606039701588,0.00021591944376821393,0.00022833551598323954,0.00033419088444079729,0.00026640863016814536,0.00024791091431797284,0.0003259172888066836,0.00020072025129287433,0.00022823407357940259,0.00014958787138596682,0.00015409432203279571,0.00015582781954820072,0.00013804067520129611,0.00029597365170461263,0.00013542735463188888,0.00016149259186314953,0.00024990202798191939,0.00013407229920369256,0.00013122185436143563,0.00032446596485384132,0.00023652624053511806,0.0001678620664374386,0.0001445184423104843,0.00014072745804420426,0.00033738406409492911,0.0001292486238342634,0.0002826955212522908,0.00020985335426876452,0.00013652989044892882,0.00015956814580274861,0.00021279822419795113,0.00016032099876958427,0.00018424886122922739,0.00016868527400142118,0.00015188919038478232,0.00018021907856144196,0.00015014878679785038,0.00015205509266903193,0.00038849890524931266,0.00017408748038331558,0.00013211468844172975,0.00012936556447316823,0.00028614556322123557,0.00014067694740310563,0.00016745169547067854,0.00015240092195937632,0.00014303871403227646,0.00024167949956152538,0.00013183476488691981,0.00019253481513074471,0.00019683821983212471,0.00022493194274891652,0.00072144221832108613,0.00027338417441954044,0.00048223073406563661,0.00031045397101090442,0.000132796248137026,0.00013666172409951673,0.00014658145096706915,0.00021118968036792034,0.00019361924455042561,0.00024545590237915019,0.00035720870105651105,0.00022525133574859122,0.00049416542750584981,0.00019787896198483236,0.00013083444846714968,0.00013133447692530609,0.00018114366873188777,0.00014257252379396113,0.00026047586074509448,0.00015521550739306446,0.00014654537382020064,0.00020722448676006267,0.00020990004819916621,0.00014442693402988299,0.00014486313747858601,0.00013384189355243462,0.00021497946418904299,0.00078438772258188495,0.00016364769293274412,0.00014353042743951936,0.00013575485753755843,0.00083877101355026506,0.00014430287078712089,0.00019910102856583663,0.00023492232251780146,0.00014710385780782178,0.00040053778222957958,0.00018053425680027656,0.00017732632126002827,0.00022906889159802368,0.00018189449776827185,0.0001481881610904094,0.00016782249089786528,0.00013644552671336358,0.00013939664915392361,0.00018627556466804023,0.00084108274821041165,0.00014455450135278982,0.0002135705046852893,0.00015327764319683786,0.00020909127169669458,0.00067663359397978164,0.00016563368411341505,0.00015297216583147285,0.0001392857625615694,0.00049332511206898687,0.00013113386097959176,0.00016457111653800729,0.00047273427750884765,0.0001296116713832364,0.00018092934349645697,0.00015306186728395135,0.00015602000496589159,0.00013942466831731129,0.00013666825449669864,0.0013434240794248813,0.0013044538053614354,0.00016993645118265488,0.00013539246113150022,0.00018543466222698809,0.00028678204617241829,0.00014841591419403357,0.00014547599836036616,0.00034513004708375337,0.00015983902498463372,0.00013562730082481721,0.00040379595807856638,0.00028644173422103105,0.00013231605361354413,0.00016675174153094253,0.0015893469294398662,0.00041221995098216245,0.00014959284897686636,0.00018229357878235382,0.00015336546280806507,0.0003304403652364601,0.00028034739590802334,0.00015763785729105322,0.00016497542037611465,0.00016324993892665463,0.00018236687923984342,0.00019624273931785998,0.00034408098507997367,0.00039288534466808101,0.0001573032479073796,0.00013776589122362111,0.00018857854044180002,0.00013158087309003526,0.00056271411750068254,0.00016336115835721124,0.0001413958554619242,0.00019574757679636536,0.00015863164797700734,0.00041065572247137326,0.00020899217494260535,0.00015142480813619996,0.00013277595222685476,0.00018540110445230544,0.00014380593754855585,0.00025978469538368942,0.0001519888313047933,0.00015486616189956109,0.0002060167844684146,0.00013508702970008537,0.00015550225355715652,0.00016873257650032675,0.00023403249958981709,0.0001307597222077343,0.00021997028252773363,0.00021652930268117383,0.00016879726040148896,0.00013622611016187884,0.00016104471397049703,0.00014294063097893797,0.00040637151361169104,0.00018267678155154998,0.00014177481295334719,0.00020322308644066652,0.0002181040545082582,0.00016002571715239414,0.00014029117994603246,0.00019818735601627969,0.0003639408956792314,0.00030521954681368186,0.00014677429175714287,0.00022518776644124005,0.00019344892840158674,0.00016234582830694169,0.00014166760046864488,0.00019065756285176387,0.00021362924469553254,0.00014726595508505702,0.00014732578282207595,0.00023459079990269808,0.00092290165943229203,0.00015658539587609524,0.00030515690337370121,0.00013395736680779088,0.00016350281418515898,0.00015226737752749219,0.00018164222768953699,0.00015208391191660363,0.0001988733092217631,0.00013039760422911469,0.00016112734881384064,0.00014104460546539234,0.0002340282899845591,0.00031943479566923976,0.00033376262632700402,0.00021081820763349375,0.00012902509101141724,0.00031492879375174458,0.00026797052148152525,0.00014922084435396976,0.00024172090879023665,0.00036481206416843202,0.00016169108722504145,0.0001437001494793193,0.0001887115653680625,0.00059351179854743186,0.00018877282133190296,0.00016506168989145029,0.00019459827422963063,0.00014547313970272066,0.00016748394866649471,0.0002826578871303759,0.0002526179568296387,0.00015850154280657101,0.00023893137838789944,0.00017777077886385872,0.00059476703896900473,0.00024308589710512985,0.00017147681342402681,0.00029282880899443668,0.00013019371355849386,0.0001625428495052731,0.00065863264298888981,0.0001351816971187301,0.0004130242963695454,0.00014870043978327597,0.00019070710443857026,0.00026558725392236048,0.0001506312396406189,0.00045838232189043392,0.0001545286361801145,0.00018992267365638914,0.00020748902502713701,0.00046228233135218641,0.00014522748160769106,0.00019609155138237684,0.00018990052839931121,0.00097389299030112601,0.00017311312127799903,0.00024986392685682487,0.00052521021049637892,0.00014180074825906062,0.00014018837842327296,0.00018032991545274542,0.00013226870452985167,0.00020651334216495408,0.0002665734832102969,0.00032825682342080612,0.00019933595138571405,0.00019673743340013723,0.00013477621739473109,0.004890261400884343,0.00032160147969843335,0.00013748762742828001,0.00018664345105343544,0.00015138479514699619,0.00015511745109319662,0.00017386638847633013,0.0001331419119075469,0.00013751720216200565,0.00020755200476929776,0.00014534785685378759,0.00014209712792345521,0.00014143754819028807,0.00016169426786529561,0.0002155027335639546,0.00013114192038689448,0.00015469519984137139,0.00013399427635074035,0.00026479609598664141,0.00023367365048796449,0.00018558408245067357,0.00026538331555509974,0.00014555948462194391,0.00025807142036322688,0.00022010622245442822,0.00015102211932736874,0.00013202129304413232,0.00014763233728976307,0.0001908072325516869,0.00016768504561604948,0.0013118229463301397,0.00035874367885165487,0.00015879064467766034,0.00018343962329871172,0.00018802341785706267,0.00019643163537075414,0.00042974110917242921,0.00016156900275882198,0.00014818885098987454,0.00026040782812301595,0.00029332916024277065,0.00021980727061814885,0.00014096668298555024,0.00013246471223099074,0.00034155949439483552,0.00014695450942972722,0.00015004777905446921,0.00015314127472760688,0.00030807209758292557,0.0003569422389298502,0.00027471117202734573,0.00022937586901519767,0.00014208328217051979,0.00014761258329211289,0.00074972173751576999,0.0002230295647232621,0.00014762497584773292,0.00013183791779868372,0.00025809045557438338,0.00016975395550142174,0.00027740436118348696,0.00012923932905046208,0.00017718776921828871,0.00015178016455946915,0.00040172940224206315,0.00035087496083130264,0.00013548269723405787,0.00022669585442694693,0.00013797426161504293,0.00025460391497942128,0.00031673422565537323,0.00014880327207566344,0.00013011690687725458,0.00029221482708544191,0.00023497948932589964,0.00020703294907347636,0.00028144441747976386,0.0002498753424514372,0.00013655470150985367,0.00022707173698543071,0.00017568217350050184,0.00016734956505771173,0.00015703988838302349,0.0002321937575753944,0.00025563859944237815,0.00019461501243955517,0.00015059350489794911,0.000171820054948696,0.00028706461266851858,0.00015474342765409372,0.00014080432305495043,0.00015067462124582302,0.00032234257681446168,0.0001725215498110215,0.00042647219221544561,0.00013039113621529134,0.0001422433591771255,0.00022488679491580464,0.00013210268167915807,0.00015737462009119435,0.00018604388289158901,0.00013199966611186483,0.00012956243168074001,0.00024074318688443647,0.00029008729340413071,0.00016525538630856606,0.00038699204777484084,0.00020781865097724777,0.00022636031206247037,0.00018468353135461162,0.0001466867506388123,0.00028855119069588037,0.00019432236817517074,0.00016180842139008029,0.00046530470749077803,0.00038636014382696079,0.00036409924156384987,0.00018274225103326924,0.00019813471745728161,0.00039633255508403505,0.00026584137599601216,0.00017332890859896038,0.00029634098799794515,0.00023745025789363537,0.00018830245442552512,0.00018293797259961075,0.00012903357804325554,0.00014968671322929556,0.00014740195769907867,0.00013303098097945871,0.00016739530747484363,0.00013581557286193789,0.00016721982107799406,0.00022848819427874446,0.00033572399341682933,0.00012913344655391903,0.00013322668427959828,0.00017151648484898331,0.00015621094100891467,0.00013449212117267855,0.00014111945713129532,0.00015140300665693974,0.00014692901015245493,0.00021183052296103221,0.00023477781261972949,0.00016084324774168655,0.00015087764047716921,0.00016109933737153495,0.00014615482855580969,0.00020625061645541715,0.00013825741111635082,0.00022239305286146706,0.00014471072065520114,0.00035184884335969467,0.00028207223539900993,0.00014636341568855657,0.00016057367376634709,0.0001733212439773322,0.00021356809152750576,0.00021758312531832606,0.00045495151178123565,0.00016505625035194053,0.0001666587310423368,0.00020916293552608673,0.00019788854235937064,0.0010842330912624893,0.00063949424266655254,0.00070455516064712391,0.00015898409628722408,0.00015475611312633245,0.00021325556877800942,0.0001628086277851265,0.0001535431707938094,0.00013705151983860184,0.00034948550055385414,0.00016963033280974245,0.0001515998591508436,0.00014223027728923186,0.0001515821495154133,0.00014356059664228399,0.00038419494929834683,0.00013670369888494865,0.00017637062551809153,0.00017636089735242574,0.00014356218172842641,0.00015072512945894862,0.00013055788246535467,0.00030016009120740729,0.00014058102890944919,0.00026473480946034313,0.00015227840347145275,0.00016333631193751196,0.00057399654282748003,0.00013776017609287323,0.00026087045642650755,0.00015439909334270029,0.00021587839680211357,0.00018129603304786114,0.00030019500399073478,0.0001745070896349483,0.00016591129839615547,0.00015611380428995968,0.00022581227060888953,0.00014062313769229286,0.00017454472178417578,0.00018897539907624365,0.00028424580921981158,0.00013415100135326794,0.00016813872623359054,0.00017205714002386288,0.00031844561346224172,0.00016847911706653881,0.00012952500633593635,0.00018268704916313277,0.0016086876271584445,0.00032816469516755111,0.00014962436542798437,0.00013218793319022757,0.00013103639165706012,0.00015975484501721629,0.00013918892211158446,0.00018826884016977799,0.00017428354799790477,0.00014336966421305989,0.00035395037576774647,0.00019115354478779555,0.00015041254192671224,0.00027531909594633242,0.00026113066006853449,0.00013479967058804579,0.000140595367308079,0.00015556603337625065,0.00023616672740456397,0.0002501198813446993,0.00014698172109076121,0.00014673687511424093,0.00013417287511326774,0.00014122670744626088,0.00031134542485008782,0.00071614738077164109,0.00022003836612425828,0.00013501312117067019,0.00055273933380254518,0.00016801523809178504,0.00088325168679469115,0.0001423955318175692,0.00018349846887045636,0.00065401679687223562,0.00038212971878223104,0.00019081496939224609,0.00017383110410027115,0.00034949666143742813,0.00035516484963411858,0.00013401096627248068,0.00013043632157523914,0.00018685097698420384,0.00013745477842784241,0.00018841374911408824,0.00024003689719856149,0.00018249659118752955,0.00016211808584971573,0.00018613496620093007,0.00016243882104278437,0.00022602337178860088,0.00019713002419755138,0.00021936203445081727,0.00013043853175626524,0.00048039065111844727,0.00016170915995868712,0.00018400365165533469,0.00013251485608668258,0.0001534112376845765,0.00022101868783990999,0.00015501761322335867,0.00018095505142331963,0.00013507192107291136,0.00013378688353193132,0.00020853919226068707,0.00016402099617754314,0.00013134894323757774,0.00016716035550219427,0.0001855635363881247,0.00021177233164718356,0.0001882409497050773,0.00014451097745938845,0.00014782657845570626,0.00013412220916394617,0.00018475776535394815,0.00017247572273360197,0.00015075965254745114,0.00023511613352050125,0.00014714408180415998,0.00019995560842588257,0.00018182259086489845,0.00037252232709436247,0.00013715842221181823,0.00014753861629677485,0.00022053560044701191,0.0001446564164647802,0.00017574441552221096,0.00014601932640413286,0.00015655020166101618,0.00027696509362012045,0.00014260089915580905,0.0002253487532984341,0.00013404777219207944,0.00033983323766759329,0.00013061963813745448,0.00022840525991939486,0.00033843332853916621,0.00021227928326813598,0.00025855142678834993,0.00016844049950077373,0.00016923558610365557,0.00018882706281463392,0.0001576322638421332,0.0010749471811533637,0.00029904564897994417,0.00054802153754000696,0.00018088637269933312,0.00015587542572090987,0.00016372849356764401,0.0001394436141862,0.00045032165587052087,0.00016541573058837861,0.00032607467051969465,0.00018719749875359786,0.00015435651564981847,0.00013080168573436246,0.00026290497864471426,0.00032571379371958771,0.00020405332521756132,0.00036237821208640178,0.00020744482867580914,0.00017706406113827375,0.00025229740222413883,0.00014374174268843331,0.00013353095411884009,0.00023235351498041945,0.00019426862766073506,0.00022441820963836617,0.00021097670476023908,0.00017145277326067795,0.00018687608689508137,0.00014061102954142057,0.00013770241398060527,0.00026702028752468183,0.0001304063226666281,0.00035345210179163705,0.00033535884905960101,0.00013846947505319134,0.00024571001058812305,0.00046801229823660188,0.00023093384350024584,0.00012900771534327072,0.00016178884183099256,0.00016833373318252408,0.00015071697417451058,0.00012966208822494043,0.00021872042243653339,0.00014590592404321097,0.00018089082977835395,0.00022695813031784783,0.00016464276696100038,0.00022253761251012685,0.00054620416780718449,0.00014867519216045608,0.00021203959123101187,0.00015477864116669572,0.00013131297118735148,0.00013494758435251763,0.00014291190005630823,0.00013154490360780497,0.00019258892805022691,0.00024839710124840335,0.00028002335621389314,0.00015459908159769949,0.00016367645820288725,0.00018120399023823668,0.00013398522297978008,0.00051891413342782552,0.00031399286116798894,0.00021459192602705601,0.00014330450566999494,0.00017329457305421972,0.00013069239516397344,0.00020899177482187469,0.00033982013345245802,0.00021360351563081019,0.00013452080165229994,0.00014552383154143027,0.000289473649321802,0.00027352888115199229,0.00015258079708943767,0.00017797809954425445,0.00017472158439138749,0.0001676783955550365,0.00013360337436192909,0.00022769093835021731,0.00021045336176756321,0.00018734979293654695,0.00020283597589910635,0.00014774145008490544,0.00014815183059460813,0.00013372777242306994,0.0001672531405955026,0.00019429425908525143,0.0012115516750613772,0.0002161782667783612,0.00029508495306984557,0.00019405792748836801,0.00015013109179039315,0.00018331363198594152,0.00016291303942497955,0.00017321813480493723,0.00018778401755477239,0.00015448705065008075,0.00012948710317256301,0.0001672648899652231,0.0001757271695308973,0.00025110374416326657,0.00045802754633015615,0.0016943180865402216,0.00015062563034555151,0.00014866563866372501,0.00013614889950296601,0.00026565871796295265,0.00015644968759944455,0.00013788488853344152,0.00013618722424882384,0.0001311628727051426,0.00013561134828498424,0.00017046655834210975,0.00016025161428734691,0.00018886352149043961,0.00018834181211697438,0.00014558792822870557,0.00014494535213505178,0.00013863713463194404,0.00024373750797502543,0.00021705401183044504,0.00029488644724612713,0.00015777937516934604,0.00017681447049365388,0.00017925873661163411,0.0001472556132279529,0.00022271911518630894,0.00017385669632844346,0.00019565531454916041,0.0001302764946093712,0.00017852856560146257,0.00021430628533874964,0.0002569504711988063,0.00013300580922921183,0.00021960453057190676,0.00017223774935701429,0.0001540347610331196,0.00018352658995420359,0.00029306298394862355,0.00013134531983093414,0.0002122048666699695,0.00022023085740600614,0.0001938535381497257,0.0002434889835478696,0.00013014333067746272,0.00018158035059334326,0.00029699194904937628,0.00019520575685371577,0.00013639665563937133,0.00016199790365020633,0.00029993467158979025,0.00054095202094263514,0.00015594892694049064,0.0002449011932566893,0.00016705548590442387,0.0001793563140548602,0.00026666793127646474,0.00021460976228856372,0.00013839902582423179,0.00022104853506897903,0.00019857015519215269,0.00026759448606122248,0.00043909555642096862,0.00013800360238902596,0.00020554242822638501,0.00023354334351424592,0.00013193737362414561,0.00013639702057483368,0.00022394946370904155,0.00014953304513304911,0.00014793426454516947,0.00024072470680906651,0.00022145538207309231,0.00013606412329438171,0.00015881484227254914,0.00024120217375729006,0.00018481261422233526,0.00029383204186258556,0.00014483168927225149,0.00017123032235067282,0.00038121661673181495,0.00013102878612269252,0.0001600191953629087,0.00022967258737741674,0.00013396956353221487,0.00014338241032653878,0.00013087498273152133,0.00032102412643530184,0.00020310885882193541,0.00021503202360765404,0.00045883347446111353,0.00023731134693848513,0.00015408084155596523,0.00017788029005702871,0.00024198846120817289,0.00059443335242276871,0.00015094834782179123,0.00013030022927275659,0.00013713803299627441,0.00014650085108561673,0.00017987006934515497,0.00058206416357292471,0.0001616898125363382,0.00020962085141801065,0.00075053055797697269,0.0001347120642703964,0.00015123177180617449,0.00025134792725129427,0.00019500289443474204,0.0001340083774479136,0.00019055274425689179,0.00024204292156034964,0.00020040304599879021,0.00013139976509518871,0.00018845489360773171,0.00031992428707104751,0.00015006953150136683,0.00014140546461014638,0.00013916998554096619,0.00026179810517193262,0.00023686366808881178,0.00013453064995979459,0.00013142475635714374,0.00014406440304357286,0.00027145339327030684,0.00021422109836735423,0.00016404099458772198,0.00018827839701301491,0.00029137288555669332,0.00015923781655058873,0.00065388098693038379,0.00021168980992699107,0.00016612656550436269,0.00027778907501718991,0.00013233118666682156,0.00013353230830249972,0.00026276150412981843,0.00022830552443474288,0.00020390867509403033,0.0001534317794725568,0.00017898090995207606,0.00026025696238986902,0.00018980697368566236,0.00014506715644204871,0.00015297220676837035,0.00022825871450699695,0.0002428482751770291,0.00026314898785749084,0.00015585838461066272,0.00016616812295154192,0.00034622920916205197,0.00016950547560110914,0.00015553424728223267,0.00017080506963538942,0.00026800474621874903,0.0003531959186454144,0.00027346085738546043,0.00013081809750856616,0.00013209537148555208,0.0011758925095369294,0.00016354561623173989,0.0001405575270748233,0.00060139744020976625,0.00016246289832931059,0.00016506374551844682,0.00021652874036201951,0.0001551986194817996,0.00022457442188685605,0.00020552387197883375,0.0001885885263046331,0.00031643624601916036,0.00024679924396697099,0.00026347050146692259,0.00015787068075709957,0.0001841713390303159,0.00017176065710142687,0.00024047591286551468,0.00014562414248615792,0.00023964717353437413,0.00014652365341752071,0.00016916729402529179,0.00018720832073193026,0.00030895177040504761,0.00013165567381505697,0.00017663538289645778,0.00015164369211937703,0.00050153617690608995,0.00013601939630794666,0.00026908042879111827,0.0001445740640518189,0.00013777011380146196,0.00022974085972749135,0.00014619265627489544,0.0001447085499165362,0.00013738201260675041,0.000189395146401305,0.00018338930502015622,0.00016648327777506902,0.00013251165264357428,0.00039245760947977245,0.00017261060036573373,0.00021817123115487226,0.0008262192642890621,0.00014715043779028699,0.00021865548727173137,0.00015234579083006175,0.00033051780238719565,0.00022189390269893998,0.00017690550571763209,0.00022600166500065429,0.00015082467288354763,0.0001564446026433924,0.00014159284370275456,0.0005633129450771403,0.00057250649841766833,0.00054164801524796298,0.00024698033943553426,0.00013167834914779995,0.00051153685066975658,0.00015141301021158625,0.00021527700003253926,0.00018006879504982613,0.00014183597485081949,0.00013239747455757596,0.00015103777712324455,0.00013548645106518464,0.0001326096599535657,0.00053942896446502672,0.00013170134175942647,0.0001475975722904919,0.00015004068346235813,0.0001415735442254222,0.00014060138702727063,0.00014293651701827764,0.00021705547111945659,0.00024865043733282512,0.00037568477049335807,0.0001318507558667133,0.00015754555782080833,0.00019616745492890731,0.00013542541625833135,0.00017258397613854358,0.00026620863235831896,0.00016068938895888571,0.00017258928878822934,0.00015694536630345995,0.0002202933030735842,0.00013903265700114477,0.00021892705808106887,0.00014088286814694609,0.0001659880629268039,0.00013535149051711502,0.00021178097381842294,0.0002911570433129968,0.00020476318872373448,0.00013798977301178946,0.00018178652382481108,0.00014016739149286782,0.00014225776856155103,0.00019754736067182366,0.00017950082729403831,0.00019170945724809107,0.00024337662108267171,0.00021404224787979556,0.00016577597060735423,0.00038625100114000226,0.00023870569351123897,0.00013747968093061601,0.00022001114270465185,0.00019448244834388589,0.0005389635811822816,0.0013326942400647109,0.00015284136134348725,0.00021679469817594628,0.00015647258632887703,0.00013297658802025706,0.00016163170443050882,0.00022259142377910763,0.00013057992567566584,0.00018549735273347011,0.00020479381964512159,0.00013387394376190701,0.00018931725093110745,0.00036273575846693335,0.00015908335873334847,0.00016178302039171092,0.00016599107402040487,0.00012939368640509585,0.00017166584159986677,0.00016233128946862283,0.00015351053081081475,0.00013664606950580335,0.00014513472165469493,0.00017908181902129096,0.00013653450092080972,0.0001406722273261695,0.00013783767628643687,0.00015547814141886473,0.00049448497563141908,0.00013589279819089243,0.00017629838953664751,0.00019579774789956717,0.0002433248659774711,0.00013321004935948076,0.00015315046604764216,0.00021488293464182171,0.0001294532244586308,0.00028031319505169287,0.00020034687254035614,0.00012907127040240546,0.00015817501197241943,0.00014228110724965993,0.00020884316526019456,0.00025759025552588531,0.0003048456703876538,0.00018894059814996973,0.00013550839234426179,0.00030200038418616131,0.00019412043882773697,0.00019253657152853388,0.00019285017841023846,0.0001415468676945572,0.00018120084606804748,0.00014551134618333159,0.00017056052438552523,0.00015359050509652797,0.00061367002524684018,0.00025504024986322456,0.00014153597063573171,0.00021061785272111057,0.00018815515750302315,0.00019429762260456967,0.00020300226380595991,0.00020044398291192131,0.00013082518511792589,0.00025822330775289161,0.00020707522892862427,0.0001779557865057551,0.00029800846360763893,0.00026937923939848176,0.00016262512334084425,0.00016321705257507752,0.00016813212045719601,0.00031142577824010977,0.00013437833446541567,0.00020117521241095007,0.00019263718037027669,0.00021586901815170861,0.00033143772286793003,0.00016534062456222601,0.00014354278040710011,0.0002669635900643207,0.00013504211640334002,0.00019084165923225269,0.000141988647441341,0.00014139545859669629,0.00021425264421400957,0.00012932774890581398,0.00023662307532427082,0.00033698376388113381,0.00020414562565427411,0.00026710335553669897,0.00017255548085870495,0.00015813449138629972,0.00015350264333963116,0.0002979766230378079,0.00020686102598388101,0.00012918968056828062,0.00018867495339549184,0.00067942057991140928,0.00021304535759997581,0.00018822972499691376,0.000137175816191339,0.00014140738004224694,0.00021611277171256768,0.00013315571776471811,0.00021805434991828984,0.00013510897161794527,0.00043763266113355695,0.00017801800569824426,0.00029044128016400051,0.00032566870642983248,0.0001412016060543092,0.00055262599369531749,0.00050639019245263728,0.00015331296165826283,0.00014293919402999861,0.00014655710105878689,0.00014445047240991838,0.000312685890142297,0.00012950239145042121,0.00013253690781734619,0.00015210636299363469,0.00015571318909937408,0.00014955496530071754,0.00014543527265367461,0.00019371988197656214,0.00020830616914054657,0.00016280083119335327,0.00014474402805877317,0.00014186394534452759,0.00026974666643815495,0.00016233874441300768,0.00018641528166110858,0.00013937804923331288,0.00048081903680622225,0.00029319236714940973,0.00032923622402972815,0.00013901160791960417,0.00013999170197580873,0.00021781493153581562,0.00022770817755532745,0.00024416179419959753,0.00016071189724286341,0.00012988783272289194,0.0001335328477845541,0.00013844952608788887,0.00026602619226058201,0.00013085789377769656,0.00018676420644518543,0.00027601110479829428,0.00015884925402992307,0.00013189748602990476,0.0001293561535304393,0.00021376386087817404,0.00016667082772720611,0.00017076714798701148,0.00016301512247623363,0.00027232012716248003,0.00020140670528479623,0.00015827326784710448,0.00018948604492518661,0.00013052790156487288,0.00069872782703368926,0.00014452775768850016,0.00022638650923118887,0.0002283703048954176,0.00021922553576002584,0.00018613327785534418,0.00026276650217329329,0.00032911158387624449,0.00038145649414803674,0.00023927401598745424,0.00013445865012373721,0.00013563908590056862,0.00029608136542744689,0.00065800815670515663,0.00042381473862276788,0.00023922227752570346,0.00029151447697720669,0.00012982508976254893,0.0001738908504597327]}
},{}],70:[function(require,module,exports){
module.exports={"x":[-0.57293764851056039,-0.96934781782329082,-0.044627890456467867,-0.94464748189784586,-0.27575296210125089,-0.65019449382089078,-0.41910828789696097,-0.15250476659275591,-0.45974209485575557,-0.13194850413128734,-0.29455881216563284,-0.030656280694529414,-0.99497111374512315,-0.70894638285972178,-0.21748422761447728,-0.040449150605127215,-0.073140427237376571,-0.88514773547649384,-0.99170434451662004,-0.71249348763376474,-0.17537165619432926,-0.4029111007694155,-0.23266413155943155,-0.18039012071676552,-0.0028631053864955902,-0.40132562001235783,-0.77234692499041557,-0.89612555759958923,-0.080457794480025768,-0.28447140264324844,-0.35800068895332515,-0.83528878283686936,-0.89467981830239296,-0.32842836924828589,-0.73183908686041832,-0.4232138623483479,-0.23615623312070966,-0.37653004052117467,-0.19448984670452774,-0.037724413676187396,-0.89574700221419334,-0.52468120935373008,-0.53024122817441821,-0.33791428571566939,-0.78093811101280153,-0.7132027605548501,-0.077292098198086023,-0.17619928740896285,-0.67967736907303333,-0.10381250968202949,-0.1424561960157007,-0.32497706543654203,-0.74015333503484726,-0.63895842898637056,-0.12193705211393535,-0.7889236097689718,-0.81173238344490528,-0.21320610493421555,-0.24080616817809641,-0.039305821759626269,-0.96831070608459413,-0.13702942617237568,-0.35766084049828351,-0.73088938929140568,-0.4331290905829519,-0.019979926291853189,-0.6235904588829726,-0.012179315788671374,-0.78745162300765514,-0.42149897711351514,-0.20784315862692893,-0.77827529446221888,-0.85455652163363993,-0.54526152112521231,-0.51085755042731762,-0.64021344669163227,-0.9871542586479336,-0.040140451630577445,-0.81338797602802515,-0.012227532453835011,-0.51476954389363527,-0.51180003676563501,-0.16177392122335732,-0.43493261211551726,-0.85894303536042571,-0.15601310785859823,-0.26778301596641541,-0.54659032658673823,-0.30893308273516595,-0.64073756732977927,-0.96550737600773573,-0.93973875814117491,-0.51114273676648736,-0.76217542192898691,-0.028609590837731957,-0.14780525770038366,-0.8875486187171191,-0.35308318119496107,-0.25678622396662831,-0.80846128612756729,-0.36145862727425992,-0.90481861145235598,-0.40581708867102861,-0.40475247567519546,-0.50137749314308167,-0.21088944678194821,-0.43214734131470323,-0.2316349686589092,-0.57349575008265674,-0.40329352603293955,-0.92376055778004229,-0.26328196399845183,-0.70941334357485175,-0.5857534424867481,-0.43866495531983674,-0.30156203545629978,-0.36666652630083263,-0.81549874553456903,-0.069224137347191572,-0.92131263390183449,-0.022230845876038074,-0.14473247481510043,-0.90640345634892583,-0.24643341545015574,-0.33826506114564836,-0.22201735037378967,-0.39722709753550589,-0.93109202710911632,-0.52618213091045618,-0.91267245868220925,-0.64374366216361523,-0.12455988000147045,-0.52442156081087887,-0.078208523336797953,-0.32897798251360655,-0.26803455664776266,-0.04035479947924614,-0.97338038659654558,-0.91091573820449412,-0.2831808237824589,-0.20225753961130977,-0.51019752211868763,-0.40922425477765501,-0.59546544402837753,-0.087803245987743139,-0.15531194815412164,-0.89887068304233253,-0.58471629838459194,-0.70670535787940025,-0.38638043939135969,-0.94841179577633739,-0.28177103982307017,-0.49587181420065463,-0.97938467026688159,-0.23162424983456731,-0.32986781257204711,-0.71701461845077574,-0.74731708830222487,-0.77463974989950657,-0.82795981806702912,-0.66871035355143249,-0.85686144814826548,-0.546748650027439,-0.40105603937990963,-0.26261536427773535,-0.20120382215827703,-0.49011434218846262,-0.88595104776322842,-0.61748580960556865,-0.24168090289458632,-0.094516783487051725,-0.89263386838138103,-0.034742250572890043,-0.99888894381001592,-0.37173264496959746,-0.36383447237312794,-0.86796883447095752,-0.33004878927022219,-0.38169822143390775,-0.094368451740592718,-0.61697989702224731,-0.85411197482608259,-0.0088062512222677469,-0.1935102844145149,-0.71317271771840751,-0.51120949978940189,-0.29380856826901436,-0.78744356404058635,-0.46479410328902304,-0.42461827443912625,-0.80678896466270089,-0.37564793229103088,-0.31056490121409297,-0.1505071057472378,-0.94954500021412969,-0.10846790694631636,-0.81556588504463434,-0.025143538136035204,-0.95434167981147766,-0.55857661226764321,-0.11495849722996354,-0.41031589149497449,-0.16020561754703522,-0.55102172028273344,-0.88184475339949131,-0.44418978039175272,-0.58958514523692429,-0.79922392405569553,-0.879771409323439,-0.81081143068149686,-0.42790747922845185,-0.45637630904093385,-0.05060986615717411,-0.1444610939361155,-0.74361483915708959,-0.35914583946578205,-0.010134568437933922,-0.26825896347872913,-0.65019195736385882,-0.49489373923279345,-0.7914776208344847,-0.73885728698223829,-0.33417283883318305,-0.33809414622373879,-0.02665529097430408,-0.90309847611933947,-0.37730017933063209,-0.72709464724175632,-0.93646210758015513,-0.4190418713260442,-0.62649046862497926,-0.062011523172259331,-0.8337484619114548,-0.63719499739818275,-0.76872191810980439,-0.8204358690418303,-0.94779136637225747,-0.85731399222277105,-0.098243678687140346,-0.96106376545503736,-0.20670829783193767,-0.39798624720424414,-0.62698567262850702,-0.80789774446748197,-0.16794529464095831,-0.87265116046182811,-0.2461654469370842,-0.52663318905979395,-0.37813689885661006,-0.95848001237027347,-0.60590681526809931,-0.64613388339057565,-0.64072203892283142,-0.29368095984682441,-0.91114753810688853,-0.57182898838073015,-0.65832299436442554,-0.86163880256935954,-0.45132940635085106,-0.44386780238710344,-0.53945253859274089,-0.13649473898112774,-0.35454762144945562,-0.90526752965524793,-0.48647915641777217,-0.40442557632923126,-0.18557352689094841,-0.76637340500019491,-0.90281678992323577,-0.89266931707970798,-0.53628643858246505,-0.44736926397308707,-0.41018250910565257,-0.61058774776756763,-0.81282792938873172,-0.94708711979910731,-0.388669851468876,-0.66034730267710984,-0.94805801776237786,-0.27292226115241647,-0.42427305411547422,-0.030168407596647739,-0.15765529242344201,-0.92770463391207159,-0.50027403165586293,-0.19795519881881773,-0.56097511830739677,-0.042925062123686075,-0.8509429139085114,-0.94445686670951545,-0.97172055277042091,-0.3516791055444628,-0.24333021254278719,-0.2104991446249187,-0.2038937599863857,-0.76512003596872091,-0.70644440921023488,-0.075601655058562756,-0.8847932550124824,-0.29918683739379048,-0.6249083667062223,-0.49697808688506484,-0.17110625212080777,-0.78506906260736287,-0.15822342014871538,-0.68642613640986383,-0.33476154715754092,-0.45367418765090406,-0.039860018761828542,-0.87457216228358448,-0.056882109493017197,-0.27133053354918957,-0.8873005083296448,-0.18590543395839632,-0.35171255399473011,-0.47402652353048325,-0.51919594733044505,-0.57039103121496737,-0.9334793034940958,-0.86160089401528239,-0.1022287723608315,-0.8453190450090915,-0.50276986672542989,-0.80092997662723064,-0.22869657329283655,-0.17998494952917099,-0.93963776854798198,-0.70970010594464839,-0.73754253447987139,-0.36394152021966875,-0.34893062897026539,-0.56235896958969533,-0.86639609048143029,-0.68751585576683283,-0.36145426146686077,-0.9792912695556879,-0.61505690938793123,-0.38412372744642198,-0.23430187650956213,-0.23808325687423348,-0.34708431712351739,-0.5654333361890167,-0.61851093382574618,-0.400936956750229,-0.69998141657561064,-0.46679841447621584,-0.65986044704914093,-0.65695187635719776,-0.081073466222733259,-0.043550821486860514,-0.54373318143188953,-0.95663905632682145,-0.55750304646790028,-0.37535621970891953,-0.54581417958252132,-0.2013867583591491,-0.054717989871278405,-0.40769410924986005,-0.78088104771450162,-0.026975729037076235,-0.11759720230475068,-0.54919503047131002,-0.98012457741424441,-0.90542814205400646,-0.65823511686176062,-0.86170292994938791,-0.23397255479358137,-0.65325222490355372,-0.65719629917293787,-0.032076939241960645,-0.38119359384290874,-0.3625460157636553,-0.54697883292101324,-0.88810602808371186,-0.98983739432878792,-0.56471451045945287,-0.4009188327472657,-0.81452370714396238,-0.3984316517598927,-0.046613331418484449,-0.35058255074545741,-0.20841400418430567,-0.65727936709299684,-0.35609154705889523,-0.50670074345543981,-0.69264763384126127,-0.29822605336084962,-0.49847476859577,-0.112197395414114,-0.92364428122527897,-0.94494214793667197,-0.98034336743876338,-0.90163805242627859,-0.47610370488837361,-0.35021721548400819,-0.84033450088463724,-0.23592910822480917,-0.94732502312399447,-0.012041058158501983,-0.50145314703695476,-0.87467521382495761,-0.23412516247481108,-0.63552282354794443,-0.63644905551336706,-0.32376990932971239,-0.67708113929256797,-0.62424182309769094,-0.98175328108482063,-0.13654151186347008,-0.052977231796830893,-0.70802324335090816,-0.85383335570804775,-0.86652501579374075,-0.01895431219600141,-0.32734948745928705,-0.21551921754144132,-0.79741501854732633,-0.14044654881581664,-0.13148480141535401,-0.36397976917214692,-0.24884267407469451,-0.88406978244893253,-0.58062035497277975,-0.20850847265683115,-0.99976893118582666,-0.95391440857201815,-0.85053626587614417,-0.42320678825490177,-0.72616569744423032,-0.19826140976510942,-0.12757498188875616,-0.10444533941335976,-0.3987488595303148,-0.50675554154440761,-0.67881154851056635,-0.6011524498462677,-0.71570692397654057,-0.46033893013373017,-0.56468419684097171,-0.58515443070791662,-0.0962409523781389,-0.49091880861669779,-0.074894356774166226,-0.16986899403855205,-0.4947075538802892,-0.089384742081165314,-0.37241819035261869,-0.42564724269323051,-0.28073606942780316,-0.9095377956982702,-0.97608712036162615,-0.39397352025844157,-0.42506749927997589,-0.82862063916400075,-0.95346553111448884,-0.9596271316986531,-0.57746861618943512,-0.057918384671211243,-0.53226573904976249,-0.14163030567578971,-0.97737201675772667,-0.028408098733052611,-0.93492595688439906,-0.86861964641138911,-0.076043664244934916,-0.84776596399024129,-0.4658571348991245,-0.37398694222792983,-0.63320352928712964,-0.29274982563219965,-0.63605381944216788,-0.66776120406575501,-0.84862633608281612,-0.49374247808009386,-0.8503914016764611,-0.80225968593731523,-0.64919790788553655,-0.28281476371921599,-0.66403390048071742,-0.95433506136760116,-0.21597215160727501,-0.78507965127937496,-0.51326078828424215,-0.88704474247060716,-0.535201984224841,-0.73316838452592492,-0.8687474480830133,-0.73047600733116269,-0.11360853002406657,-0.6587948810774833,-0.32544257072731853,-0.92657791450619698,-0.16484035644680262,-0.86724567622877657,-0.34351206128485501,-0.92160752206109464,-0.016083019785583019,-0.87401368259452283,-0.02021012594923377,-0.47734069242142141,-0.74984698346816003,-0.86252617673017085,-0.37542929733172059,-0.19520565634593368,-0.2717575766146183,-0.53111756686121225,-0.50182968401350081,-0.12777814688161016,-0.15017170505598187,-0.060452422825619578,-0.80908179795369506,-0.47602894925512373,-0.87585621164180338,-0.93372515728697181,-0.99720957642421126,-0.98904384858906269,-0.84704721160233021,-0.037375847110524774,-0.46583917061798275,-0.72975399857386947,-0.48936639470048249,-0.6781327489297837,-0.61478411685675383,-0.81301640509627759,-0.68940354557707906,-0.65732591156847775,-0.99644455011002719,-0.92080671549774706,-0.18475755699910223,-0.22083480400033295,-0.36158154741860926,-0.031648352742195129,-0.55166061921045184,-0.94926130934618413,-0.75591423036530614,-0.47831679927185178,-0.19661491527222097,-0.0484107646625489,-0.17602911381982267,-0.57810391974635422,-0.14780934993177652,-0.21487046591937542,-0.53274823841638863,-0.9817036185413599,-0.02930102520622313,-0.24836820317432284,-0.15875598345883191,-0.6101105366833508,-0.92145179281942546,-0.20462214201688766,-0.76240111817605793,-0.12132530962117016,-0.18242911738343537,-0.83715696539729834,-0.59417128167115152,-0.9415439129807055,-0.53368778084404767,-0.20738335512578487,-0.048463780432939529,-0.69937715982086957,-0.034994699060916901,-0.3417324589099735,-0.23471513343974948,-0.90856656827963889,-0.42546640825457871,-0.86716296849772334,-0.084074978716671467,-0.065729083493351936,-0.50456759100779891,-0.71459067147225142,-0.83398762112483382,-0.92840380896814167,-0.67400233284570277,-0.40310812089592218,-0.70356389810331166,-0.3542074728757143,-0.44170150463469326,-0.92089453199878335,-0.9325231914408505,-0.80177922104485333,-0.93102215533144772,-0.19924517255276442,-0.83321542176418006,-0.29647141066379845,-0.052561734337359667,-0.96970565477386117,-0.18891158560290933,-0.37978323688730597,-0.2895443132147193,-0.043493332108482718,-0.029754443094134331,-0.10955964541062713,-0.0015732105821371078,-0.76019944041036069,-0.012545195175334811,-0.33546454412862659,-0.84991341945715249,-0.49500975292176008,-0.041521197883412242,-0.5301457482855767,-0.46954095247201622,-0.61471596010960639,-0.92591347941197455,-0.96049296180717647,-0.68817909457720816,-0.73352496675215662,-0.10482921660877764,-0.73700183909386396,-0.16523168585263193,-0.81297099450603127,-0.99765124823898077,-0.3490370069630444,-0.35979015775956213,-0.0045162818860262632,-0.19681742182001472,-0.60257504577748477,-0.75486924243159592,-0.97625288646668196,-0.93587776692584157,-0.73809245508164167,-0.73685168195515871,-0.44931776099838316,-0.89727964019402862,-0.49195545678958297,-0.51628097845241427,-0.49641687679104507,-0.58111554104834795,-0.12845242884941399,-0.6187109942547977,-0.63119703088887036,-0.11323488317430019,-0.99337603733874857,-0.57944248523563147,-0.86519889906048775,-0.71615212736651301,-0.92287645884789526,-0.95181885897181928,-0.31844264478422701,-0.78083401499316096,-0.7666632232721895,-0.76082398695871234,-0.79714955273084342,-0.97074151271954179,-0.34514552750624716,-0.29768908256664872,-0.1883102972060442,-0.99236444849520922,-0.18642944865860045,-0.38907932140864432,-0.30469064880162477,-0.5919104665517807,-0.46273275115527213,-0.7510533204767853,-0.91339654941111803,-0.34754027659073472,-0.21363043691962957,-0.6797229100484401,-0.86852852394804358,-0.89632787113077939,-0.99323589843697846,-0.46443510777316988,-0.66195265622809529,-0.83512975880876184,-0.63992345589213073,-0.11656130058690906,-0.5428149001672864,-0.33354299119673669,-0.033236348303034902,-0.15225750347599387,-0.80619641859084368,-0.23733893246389925,-0.7932871519587934,-0.19298622733913362,-0.70581951644271612,-0.36704755597747862,-0.080544158117845654,-0.28957268642261624,-0.82937659742310643,-0.31133646424859762,-0.42317230370827019,-0.67905214265920222,-0.2717148195952177,-0.46835150220431387,-0.9734855794813484,-0.12680604122579098,-0.90627905423752964,-0.94546032533980906,-0.88196615199558437,-0.49959921883419156,-0.82091435650363564,-0.56723678624257445,-0.58402677066624165,-0.095717509742826223,-0.5028112584259361,-0.36981664691120386,-0.34808576595969498,-0.016963777365162969,-0.73112751846201718,-0.41479966696351767,-0.0044551389291882515,-0.15936348284594715,-0.53453365270979702,-0.53118622000329196,-0.51550714229233563,-0.45477766799740493,-0.65362574951723218,-0.8208958781324327,-0.81178393005393445,-0.36553829978220165,-0.55644651898182929,-0.037041227798908949,-0.012393617304041982,-0.46598624810576439,-0.55939194606617093,-0.52038574335165322,-0.7414323971606791,-0.20633391407318413,-0.54559948807582259,-0.9072862840257585,-0.29960361076518893,-0.11920045362785459,-0.53371202177368104,-0.99612646480090916,-0.86405242490582168,-0.48847090546041727,-0.43909053178504109,-0.32153636938892305,-0.47083992813713849,-0.43425235734321177,-0.21925898431800306,-0.52154135541059077,-0.49190504942089319,-0.67948715621605515,-0.26363215991295874,-0.39842020720243454,-0.24023780901916325,-0.086847258731722832,-0.60179345379583538,-0.31748218717984855,-0.32070911768823862,-0.053266529692336917,-0.48534066625870764,-0.90091099380515516,-0.39088020357303321,-0.48897107527591288,-0.85718135139904916,-0.88987165736034513,-0.39225207734853029,-0.45473812380805612,-0.65967794274911284,-0.31121410080231726,-0.56142863444983959,-0.85258300905115902,-0.75664825388230383,-0.22243896313011646,-0.15092905913479626,-0.60094876773655415,-0.13680959097109735,-0.10170005168765783,-0.89294023136608303,-0.69295612117275596,-0.84539157198742032,-0.93894884758628905,-0.86044604633934796,-0.7805288543459028,-0.63037403696216643,-0.91716706589795649,-0.38794337585568428,-0.049604663392528892,-0.41679704003036022,-0.98362934170290828,-0.093957165721803904,-0.88533156551420689,-0.42487921635620296,-0.98759005637839437,-0.24737138976342976,-0.78377267089672387,-0.13303630566224456,-0.9885724731720984,-0.045919495169073343,-0.35755073907785118,-0.21857171878218651,-0.48300906061194837,-0.69948221300728619,-0.75445786048658192,-0.25208888063207269,-0.80625266162678599,-0.21199272712692618,-0.90912942308932543,-0.45892619132064283,-0.63155833189375699,-0.771620221901685,-0.99220709386281669,-0.23973115487024188,-0.39729868550784886,-0.27225089655257761,-0.52114526135846972,-0.21144500584341586,-0.69188231020234525,-0.84865486691705883,-0.25555555429309607,-0.61720466939732432,-0.16065072151832283,-0.96627766615711153,-0.73756807786412537,-0.91206835256889462,-0.4857619390822947,-0.75822666892781854,-0.55322586791589856,-0.66533910413272679,-0.65878885588608682,-0.27362095401622355,-0.16085819224826992,-0.44430577894672751,-0.017507495125755668,-0.67083099973388016,-0.37353549408726394,-0.99328383337706327,-0.81872482877224684,-0.45854041329585016,-0.87698298646137118,-0.49205490690656006,-0.42003129026852548,-0.48103185021318495,-0.67146419524215162,-0.89725298481062055,-0.731813631253317,-0.37995856394991279,-0.44976089359261096,-0.63006601482629776,-0.81948310346342623,-0.33006121637299657,-0.32150813145563006,-0.82066185656003654,-0.94431150751188397,-0.36197948921471834,-0.96594281657598913,-0.076854402432218194,-0.71348154032602906,-0.97096655610948801,-0.92260995414108038,-0.7174275922589004,-0.099427714478224516,-0.30214649997651577,-0.15339405136182904,-0.27308222022838891,-0.60430152923800051,-0.03695650165900588,-0.83078473573550582,-0.54654586804099381,-0.56954768649302423,-0.49217313178814948,-0.58378186216577888,-0.31519623659551144,-0.27123652002774179,-0.028027433436363935,-0.59352632518857718,-0.32425519218668342,-0.048192544840276241,-0.62094910349696875,-0.088014982407912612,-0.52277870988473296,-0.04858568636700511,-0.051252918317914009,-0.65399879845790565,-0.6764113181270659,-0.70975578646175563,-0.73191340873017907,-0.11329924035817385,-0.19580541155301034,-0.78996920306235552,-0.65595281729474664,-0.86912345327436924,-0.11115347035229206,-0.47948411712422967,-0.21530322474427521,-0.094537245342507958,-0.94249891536310315,-0.59746976313181221,-0.32686373125761747,-0.78423874150030315,-0.94297022419050336,-0.92126051359809935,-0.45474262093193829,-0.06694014323875308,-0.26588943786919117,-0.39712843345478177,-0.81048478581942618,-0.62250783224590123,-0.17329629487358034,-0.33506855997256935,-0.68636936042457819,-0.20780973206274211,-0.56258523743599653,-0.66650787554681301,-0.022028251783922315,-0.30734113114885986,-0.95005708211101592,-0.79618431767448783,-0.88006068696267903,-0.041286405641585588,-0.35694865928962827,-0.28816753951832652,-0.98463981132954359,-0.83309341128915548,-0.4168436462059617,-0.55722282780334353,-0.81327444058842957,-0.36700643156655133,-0.41579305287450552,-0.0700328319799155,-0.11430762172676623,-0.47066902951337397,-0.92737793107517064,-0.37352558015845716,-0.16758623858913779,-0.31918107881210744,-0.012044966686517,-0.076802476309239864,-0.94649295811541378,-0.84716585325077176,-0.6660462690051645,-0.5942792056594044,-0.86527937208302319,-0.68752400274388492,-0.38079166412353516,-0.3061010402161628,-0.34601290058344603,-0.10931213176809251,-0.27529525989666581,-0.50932902982458472,-0.70944792311638594,-0.1941764890216291,-0.39708232600241899,-0.67356109176762402,-0.26142888469621539,-0.45012085884809494,-0.4666430545039475,-0.6112156652379781,-0.88899640832096338,-0.10317099536769092,-0.2404792932793498,-0.32387991365976632,-0.87228851742111146,-0.17160305264405906,-0.71290734643116593,-0.88991115032695234,-0.97911573760211468,-0.72077266592532396,-0.56034396402537823,-0.23236383148469031,-0.90945440391078591,-0.78394340467639267,-0.55655287159606814,-0.96593787427991629,-0.54593960754573345,-0.56344810524024069,-0.13093937654048204,-0.06313629262149334,-0.34330327203497291,-0.73791103321127594,-0.87792878807522357,-0.43025450222194195,-0.47294359863735735,-0.64044695883058012,-0.21724043856374919,-0.97316137119196355,-0.1980510086286813,-0.49958080798387527,-0.96757343807257712,-0.17298509436659515,-0.082481208024546504,-0.74101757816970348,-0.92569064581766725,-0.95411499007605016,-0.65988056501373649,-0.75352839776314795,-0.28145622252486646,-0.33926785294897854,-0.73132175719365478,-0.67059030500240624,-0.67709918972104788,-0.34050375293008983,-0.027001565089449286,-0.98699587141163647,-0.98622300592251122,-0.28193214489147067,-0.72693971521221101,-0.60888118343427777,-0.65721310838125646,-0.96649474464356899,-0.17204868770204484,-0.59398459899239242,-0.14335474302060902,-0.28369236062280834,-0.4394965844694525,-0.078663581516593695,-0.68431400414556265,-0.015984257217496634,-0.62415136699564755,-0.016579125309363008,-0.78186679119244218,-0.10369390458799899,-0.60685413796454668,-0.13429679092951119,-0.083448950201272964,-0.19903903058730066,-0.092306982493028045,-0.44502114923670888,-0.46529174200259149,-0.58112785336561501,-0.037846159422770143,-0.87287748767994344,-0.98755387030541897,-0.34537925943732262,-0.16160706942901015,-0.136035090778023,-0.43157030176371336,-0.72540156310424209,-0.95952921244315803,-0.15983606246300042,-0.17606215947307646,-0.9292447529733181,-0.8700831166934222,-0.6212079250253737,-0.30077575310133398,-0.73183056432753801,-0.87202669028192759,-0.84707881975919008,-0.82042934605851769,-0.36900042626075447,-0.01383285503834486,-0.68362518167123199,-0.96795447287149727,-0.040888146031647921,-0.25556554039940238,-0.50132601079531014,-0.15124068362638354,-0.26139149069786072,-0.0036640805192291737,-0.98724433616735041,-0.10215898463502526,-0.39464680966921151,-0.39976443466730416,-0.4235486825928092,-0.33154472871683538,-0.19262118451297283,-0.023035419406369328,-0.34503193665295839,-0.87041135691106319,-0.12177160964347422,-0.13982777507044375,-0.097627078648656607,-0.1384397002402693,-0.84776713722385466,-0.8504569292999804,-0.80741991312243044,-0.2907853526994586,-0.20902435062453151,-0.53601448191329837,-0.93929489073343575,-0.83305614115670323,-0.61017280421219766,-0.91627843584865332,-0.70003414410166442,-0.56345084612257779,-0.26582008926197886,-0.99612853629514575,-0.89579074317589402,-0.72411825717426836,-0.20742450980469584,-0.79198932554572821,-0.21727105556055903,-0.66400021850131452,-0.46760230953805149,-0.22373873088508844,-0.74664766038767993,-0.29727226076647639,-0.92904541525058448,-0.80855294479988515,-0.37419666489586234,-0.71539143449626863,-0.97531853290274739,-0.15558589342981577,-0.93795750406570733,-0.61591401579789817,-0.87038801982998848,-0.21702824835665524,-0.54938593180850148,-0.012752580223605037,-0.32766415691003203,-0.57574890088289976,-0.14388916804455221,-0.014380967244505882,-0.50155457737855613,-0.62455264828167856,-0.95121549698524177,-0.70666406466625631,-0.68616763735190034,-0.68499548267573118,-0.35836883122101426,-0.45456503378227353,-0.21361335646361113,-0.36450587399303913,-0.71084950142540038,-0.75581111176870763,-0.50213198899291456,-0.76170458109118044,-0.18156538670882583,-0.32702106051146984,-0.40487170964479446,-0.70820801751688123,-0.46357539272867143,-0.74771065963432193,-0.66912685823626816,-0.80976705043576658,-0.58830977510660887,-0.19272937043569982,-0.20599375851452351,-0.35713921370916069,-0.65679178363643587,-0.41231160680763423,-0.53739326004870236,-0.94097072118893266,-0.63217633916065097,-0.0033022279385477304,-0.32042937818914652,-0.42116453452035785,-0.43222097097896039,-0.33627696149051189,-0.34822315396741033,-0.54935295647010207,-0.50888625485822558,-0.51256579020991921,-0.60154177178628743,-0.0072471380699425936,-0.52251578983850777,-0.31241316674277186,-0.93341237329877913,-0.5345148304477334,-0.58897151472046971,-0.30693924566730857,-0.030908042332157493,-0.11316982097923756,-0.21927897329442203,-0.032077881740406156,-0.27098211087286472,-0.30961154238320887,-0.23434937908314168,-0.87751635443419218,-0.24341919925063848,-0.45711858104914427,-0.15672967908903956,-0.95635771029628813,-0.22984315059147775,-0.39582797070033848,-0.021339068654924631,-0.66327887028455734,-0.88864055974408984,-0.62907472136430442,-0.60392305953428149,-0.83767713513225317,-0.50793935195542872,-0.40611679456196725,-0.74190537934191525,-0.72478225431405008,-0.96303377789445221,-0.76320429006591439,-0.025618674699217081,-0.61678227176889777,-0.27357401931658387,-0.53548750886693597,-0.85203516809269786,-0.64171789796091616,-0.85210544080473483,-0.52601838065311313,-0.29517590161412954,-0.77825347264297307,-0.6190064842812717,-0.040416906587779522,-0.92358855693601072,-0.57085361541248858,-0.58915965375490487,-0.58741941093467176,-0.85700944415293634,-0.70469390274956822,-0.20107988128438592,-0.56889487197622657,-0.069751842180266976,-0.067438371246680617,-0.99528052099049091,-0.40202831826172769,-0.34995942236855626,-0.05364438402466476,-0.32146753766573966,-0.70328627014532685,-0.74637716053985059,-0.4061381861101836,-0.15681908722035587,-0.58150358707644045,-0.70604122895747423,-0.19935315940529108,-0.97313961572945118,-0.26583003415726125,-0.90669283992610872,-0.58986598975025117,-0.20211502769961953,-0.81355810025706887,-0.28859737096354365,-0.81539983162656426,-0.21659321477636695,-0.37290524831041694,-0.37607735698111355,-0.27178941550664604,-0.1745845430996269,-0.29283420136198401,-0.96497741434723139,-0.20067948219366372,-0.59452502708882093,-0.45793444477021694,-0.75033124140463769,-0.91325977491214871,-0.51910315919667482,-0.51241702330298722,-0.11916087078861892,-0.57885158341377974,-0.71931518334895372,-0.49826898262836039,-0.40085749211721122,-0.65238173422403634,-0.97377386130392551,-0.25650478200986981,-0.84480133652687073,-0.62479483312927186,-0.16608912800438702,-0.57794896652922034,-0.80510663869790733,-0.045449386117979884,-0.17021196358837187,-0.20674677309580147,-0.66192514053545892,-0.52714529726654291,-0.32888345350511372,-0.49875239725224674,-0.94763367879204452,-0.63167610066011548,-0.26569093577563763,-0.45998322148807347,-0.50051822210662067,-0.60353752225637436,-0.056700060842558742,-0.57152634137310088,-0.71022758120670915,-0.63807546533644199,-0.62343957438133657,-0.034305202309042215,-0.88624463439919055,-0.81139458506368101,-0.035149292787536979,-0.21118123293854296,-0.56748843658715487,-0.11502970848232508,-0.91543680429458618,-0.29029436130076647,-0.28332358947955072,-0.19057952868752182,-0.49321262515150011,-0.33975436817854643,-0.67191225802525878,-0.78494110004976392,-0.24647585907950997,-0.78919209400191903,-0.16399417305365205,-0.62697134236805141,-0.74628364341333508,-0.64094662293791771,-0.46557498257607222,-0.46004143753089011,-0.56483477167785168,-0.12696004146710038,-0.84229585085995495,-0.86855836003087461,-0.39951880252920091,-0.13646044139750302,-0.062549235532060266,-0.87657766253687441,-0.89224142371676862,-0.38429674273356795,-0.10001856693997979,-0.58851011376827955,-0.44953501061536372,-0.53887523128651083,-0.5726433137897402,-0.44924195762723684,-0.84761917288415134,-0.15795586397871375,-0.75245399540290236,-0.9671605103649199,-0.55263120122253895,-0.93099680985324085,-0.46721656015142798,-0.47628598660230637,-0.64534886367619038,-0.5218227026052773,-0.22688518580980599,-0.41365482192486525,-0.11831885948777199,-0.23986198287457228,-0.26590790878981352,-0.070870688185095787,-0.59356779116205871,-0.67632224387489259,-0.39582125772722065,-0.45940042706206441,-0.35889494535513222,-0.55686044739559293,-0.87253316165879369,-0.87466778699308634,-0.50380800059065223,-0.51813413295894861,-0.68953064805828035,-0.49022587947547436,-0.42142552975565195,-0.9785681392531842,-0.056391066173091531,-0.35015166876837611,-0.5730603919364512,-0.64971924643032253,-0.96687155542895198,-0.89396895514801145,-0.070566121488809586,-0.46312027028761804,-0.075017745606601238,-0.78577079228125513,-0.6416930821724236,-0.3307412916328758,-0.74001088016666472,-0.5024700581561774,-0.21314035984687507,-0.11220618966035545,-0.48841775301843882,-0.60834845062345266,-0.43747284705750644,-0.53369931061752141,-0.31520623294636607,-0.82808784255757928,-0.90760339912958443,-0.89749739854596555,-0.12742103356868029,-0.54337879340164363,-0.057062123203650117,-0.071775138378143311,-0.90340576739981771,-0.025396453216671944,-0.15411748946644366,-0.99423188087530434,-0.090604380005970597,-0.7208614582195878,-0.98865885427221656,-0.88114019972272217,-0.47631729766726494,-0.3103880665730685,-0.34965472132898867,-0.95395829109475017,-0.61485465383157134,-0.078486429527401924,-0.35069795162416995,-0.13608550047501922,-0.23714652587659657,-0.15074627124704421,-0.42431401927024126,-0.53729903744533658,-0.36808085301890969,-0.58014990156516433,-0.72179599618539214,-0.67777038342319429,-0.16016357531771064,-0.44016194739378989,-0.57316503836773336,-0.9426120447460562,-0.36837761872448027,-0.42395182838663459,-0.16653301636688411,-0.37726457417011261,-0.72981453640386462,-0.93502704985439777,-0.59919926314614713,-0.81022954289801419,-0.44574540620669723,-0.87267333641648293,-0.55613464349880815,-0.26801650901325047,-0.90961588174104691,-0.49404506734572351,-0.25561868608929217,-0.80787126580253243,-0.96738455374725163,-0.49686517869122326,-0.57025746232829988,-0.1954785545822233,-0.96273771836422384,-0.50889581628143787,-0.024202244356274605,-0.59998819907195866,-0.47766009066253901,-0.30275415419600904,-0.090370016405358911,-0.951912707882002,-0.61675207619555295,-0.73702051327563822,-0.1155477634165436,-0.23812236962839961,-0.74498238461092114,-0.87558100861497223,-0.090950160985812545,-0.57567806867882609,-0.10543955815955997,-0.54681696649640799,-0.60148284235037863,-0.082834354368969798,-0.37498000171035528,-0.39901520777493715,-0.43240271112881601,-0.82917059841565788,-0.10548811499029398,-0.066576181445270777,-0.78583419718779624,-0.38955766404978931,-0.99614083953201771,-0.46572300442494452,-0.11941853514872491,-0.98140329774469137,-0.76487836474552751,-0.34121727291494608,-0.75513537647202611,-0.72099715610966086,-0.35908296541310847,-0.70704805781133473,-0.69547552056610584,-0.011820745887234807,-0.17437918577343225,-0.43876808532513678,-0.1163112826179713,-0.95740992808714509,-0.05462703900411725,-0.46655228640884161,-0.60920465760864317,-0.5663406930398196,-0.198679932160303,-0.51358738192357123,-0.84288671356625855,-0.44905454106628895,-0.37483460363000631,-0.81998279644176364,-0.30101465433835983,-0.047320633661001921,-0.91413106489926577,-0.89079127111472189,-0.46882042824290693,-0.58032494806684554,-0.11143347900360823,-0.2214314229786396,-0.7363339951261878,-0.42995897028595209,-0.76521447720006108,-0.2263662819750607,-0.16034277458675206,-0.59607428614981472,-0.50445997575297952,-0.077132205944508314,-0.84763363655656576,-0.47644430887885392,-0.76923184120096266,-0.43249938799999654,-0.34204604104161263,-0.75148234493099153,-0.43705162289552391,-0.28867922956123948,-0.70817125868052244,-0.86766361678019166,-0.3776950107421726,-0.82846133853308856,-0.28409459441900253,-0.63608463760465384,-0.71926896367222071,-0.42666512518189847,-0.58772684424184263,-0.34415937541052699,-0.63779428764246404,-0.076936478726565838,-0.21860798192210495,-0.12949460372328758,-0.86451285122893751,-0.37905584927648306,-0.097930483752861619,-0.25908040744252503,-0.71036391123197973,-0.60662320256233215,-0.50044207414612174,-0.15315055684186518,-0.21640961128287017,-0.4161076694726944,-0.32293793605640531,-0.22973379748873413,-0.85018826765008271,-0.96911388449370861,-0.30338052334263921,-0.16514162137173116,-0.8709869587328285,-0.46969914948567748,-0.05405371030792594,-0.4930277937091887,-0.11358815082348883,-0.52234403020702302,-0.48499538609758019,-0.94202013220638037,-0.32059125090017915,-0.73772660596296191,-0.023206639336422086,-0.78607886307872832,-0.87453964282758534,-0.97770542255602777,-0.24775694753043354,-0.75792013108730316,-0.17294808896258473,-0.77473272290080786,-0.21856967103667557,-0.93180978624150157,-0.80911733489483595,-0.15313002606853843,-0.5713586644269526,-0.13725996972061694,-0.98554325383156538,-0.24778077285736799,-0.67471450800076127,-0.75267274654470384,-0.86529797245748341,-0.76077761501073837,-0.54948253254406154,-0.81475649983622134,-0.42772507178597152,-0.080072763375937939,-0.20797671657055616,-0.56911457749083638,-0.58026338671334088,-0.85032349498942494,-0.46746345027349889,-0.94158568559214473,-0.074295608792454004,-0.70237836288288236,-0.10091816470958292,-0.45217972132377326,-0.45516660436987877,-0.11900677345693111,-0.098876048577949405,-0.76174792856909335,-0.94817328942008317,-0.8811867437325418,-0.19139748113229871,-0.087678489042446017,-0.66509542521089315,-0.25913127628155053,-0.77131688292138278,-0.57092523272149265,-0.17759818979538977,-0.87469613435678184,-0.6517654147464782,-0.99646575190126896,-0.83452940196730196,-0.63886839686892927,-0.97186642931774259,-0.42139822640456259,-0.044630229938775301,-0.70455311145633459,-0.31970929354429245,-0.29537129774689674,-0.13943789014592767,-0.1587802383583039,-0.060906479135155678,-0.98986321687698364,-0.31980603584088385,-0.49246972426772118,-0.082576247630640864,-0.87014186521992087,-0.74330833205021918,-0.13512286939658225,-0.11438187165185809,-0.12133844709023833,-0.079957215813919902,-0.04755677399225533,-0.69993655825965106,-0.82241221470758319,-0.92660905094817281,-0.87899003131315112,-0.23260126588866115,-0.32357617700472474,-0.91504778689704835,-0.5980322624091059,-0.27123591676354408,-0.9890604296233505,-0.55211035232059658,-0.6429277858696878,-0.34875133889727294,-0.059986156644299626,-0.83049813541583717,-0.03431209153495729,-0.46855076053179801,-0.2773934961296618,-0.36619914090260863,-0.80875652912072837,-0.98590399487875402,-0.34472051402553916,-0.5296286684460938,-0.068968482548370957,-0.11367402411997318,-0.88242332637310028,-0.88597156433388591,-0.43589518405497074,-0.55745885521173477,-0.079009477281942964,-0.34045210899785161,-0.94375830772332847,-0.70522703090682626,-0.65485980245284736,-0.049631597008556128,-0.38567837048321962,-0.30571375391446054,-0.27010560710914433,-0.79319347091950476,-0.80768202501349151,-0.44523767731152475,-0.030091090826317668,-0.12072151224128902,-0.5295270795468241,-0.44214231218211353,-0.20426229294389486,-0.24766593868844211,-0.74946221197023988,-0.10509920702315867,-0.88155537680722773,-0.15815582545474172,-0.76119163609109819,-0.86914331722073257,-0.36164381401613355,-0.8108460649382323,-0.75612378166988492,-0.84636016632430255,-0.96729685575701296,-0.97109793149866164,-0.41192351584322751,-0.99091510265134275,-0.56531813740730286,-0.4035482588224113,-0.3308709014672786,-0.39095067349262536,-0.44127033511176705,-0.081076569156721234,-0.74958118540234864,-0.26642555743455887,-0.89159484906122088,-0.69885305128991604,-0.29489929648116231,-0.50442552356980741,-0.36975209484808147,-0.74183697602711618,-0.53243667376227677,-0.26714563672430813,-0.3256038217805326,-0.88323925388976932,-0.27563416282646358,-0.2539584340993315,-0.38599641853943467,-0.19021089328452945,-0.8866689361166209,-0.254766316851601,-0.4786944193765521,-0.66285668616183102,-0.36931225471198559,-0.4156750189140439,-0.71219030045904219,-0.53104788833297789,-0.93199627636931837,-0.91273496532812715,-0.34092783555388451,-0.17128257034346461,-0.90678731701336801,-0.31405529286712408,-0.69971583830192685,-0.73267494351603091,-0.4675729984883219,-0.030516435392200947,-0.62705974467098713,-0.8162258043885231,-0.053180038463324308,-0.70005907444283366,-0.78811271791346371,-0.58881511399522424,-0.18381250859238207,-0.76351081393659115,-0.60880135977640748,-0.80494467774406075,-0.75543786725029349,-0.29462071927264333,-0.70764861139468849,-0.81945174443535507,-0.59860291238874197,-0.4776670855935663,-0.49691817164421082,-0.70382817788049579,-0.78093477874062955,-0.5372181145939976,-0.39492554264143109,-0.07476758910343051,-0.16135762073099613,-0.78411085833795369,-0.82115872669965029,-0.99899112223647535,-0.61896074120886624,-0.09339375770650804,-0.85824187006801367,-0.31995805655606091,-0.11307024816051126,-0.48504819488152862,-0.65683362726122141,-0.47793111810460687,-0.91669619316235185,-0.89708142494782805,-0.12790778907947242,-0.0031195080373436213,-0.78782543237321079,-0.64103117701597512,-0.64071145886555314,-0.37475739675574005,-0.94290452287532389,-0.60663348180241883,-0.2498771995306015,-0.99233754794113338,-0.97401193832047284,-0.45471506705507636,-0.041581547586247325,-0.49088962841778994,-0.24055022280663252,-0.75322107737883925,-0.99616878828965127,-0.95460472721606493,-0.37297877389937639,-0.15827026008628309,-0.068157305475324392,-0.95175008475780487,-0.68278485792689025,-0.68367949943058193,-0.50610329885967076,-0.21658056299202144,-0.97538595669902861,-0.027599939610809088,-0.27835804899223149,-0.41353591857478023,-0.52959909406490624,-0.2219561489764601,-0.26504678977653384,-0.2723025600425899,-0.43620072770863771,-0.34901320608332753,-0.13170059258118272,-0.33538498007692397,-0.00080386083573102951,-0.061220205388963223,-0.081876953598111868,-0.46491873939521611,-0.21999520272947848,-0.60155988275073469,-0.56294503388926387,-0.32954233279451728,-0.95918929413892329,-0.55946553451940417,-0.092486502369865775,-0.86712605878710747,-0.021491291467100382,-0.56079624686390162,-0.82216931227594614,-0.45235725864768028,-0.37639132142066956,-0.60486362408846617,-0.38387480168603361,-0.60172800021246076,-0.76880867592990398,-0.24865134991705418,-0.11001886893063784,-0.47764965309761465,-0.33254113350994885,-0.50956696970388293,-0.48718202626332641,-0.91132106562145054,-0.88424804667010903,-0.74914836836978793,-0.74119290802627802,-0.55244097183458507,-0.81656495877541602,-0.36203909874893725,-0.97506772796623409,-0.29055470926687121,-0.83404272445477545,-0.0073801910039037466,-0.43045466532930732,-0.067805131431668997,-0.48291604872792959,-0.90777050564065576,-0.54010456753894687,-0.046460030367597938,-0.28964798944070935,-0.83720434061251581,-0.54525179648771882,-0.029544917633756995,-0.060333736473694444,-0.4029933346901089,-0.78688969532959163,-0.75977287557907403,-0.86722989054396749,-0.92970484006218612,-0.13706265040673316,-0.69995878264307976,-0.8017142612952739,-0.1864551785402,-0.11038625845685601,-0.92329012067057192,-0.96960075059905648,-0.64552690670825541,-0.49304377799853683,-0.86798912729136646,-0.36553394538350403,-0.8418203741312027,-0.40061099012382329,-0.93785294587723911,-0.93001814861781895,-0.29815651895478368,-0.85145631525665522,-0.91351830447092652,-0.1044097482226789,-0.38321276241913438,-0.046564528718590736,-0.8262284102384001,-0.90863081207498908,-0.34859893773682415,-0.074011215940117836,-0.50130359269678593,-0.42718075634911656,-0.71548930997960269,-0.78880923613905907,-0.16944025573320687,-0.89867385034449399,-0.1816401167307049,-0.88673914386890829,-0.061830597696825862,-0.14909003116190434,-0.99967390391975641,-0.090120107168331742,-0.3596107738558203,-0.23397485539317131,-0.99264430929906666,-0.6276740450412035,-0.89357888768427074,-0.84847176494076848,-0.8932055882178247,-0.48982711788266897,-0.63289095484651625,-0.20563693740405142,-0.76039229845628142,-0.8159473673440516,-0.65385979972779751,-0.55870628962293267,-0.75038016331382096,-0.82884738454595208,-0.61293568485416472,-0.1657257170882076,-0.57896163058467209,-0.51958606229163706,-0.3599227094091475,-0.50650186813436449,-0.21244703186675906,-0.29011854715645313,-0.73000557301566005,-0.88896459201350808,-0.15601763990707695,-0.071291883708909154,-0.25953162275254726,-0.35078031336888671,-0.17389805102720857,-0.32039278652518988,-0.81780775380320847,-0.49812372238375247,-0.93456381885334849,-0.2215439963620156,-0.38964973785914481,-0.53499629138968885,-0.29844718985259533,-0.86708636023104191,-0.88838229025714099,-0.18970778351649642,-0.90417627245187759,-0.33938361937180161,-0.40216623106971383,-0.3574357801117003,-0.18776739039458334,-0.43063798127695918,-0.18542182864621282,-0.20245649944990873,-0.91056302958168089,-0.7392378207296133,-0.26872129016555846,-0.6363968551158905,-0.096143418690189719,-0.90135059040039778,-0.54776821122504771,-0.9905563504435122,-0.92931232345290482,-0.68154682987369597,-0.75872185081243515,-0.2108079781755805,-0.26813494274392724,-0.46787939174100757,-0.95950838294811547,-0.34317684802226722,-0.57547723571769893,-0.28510471642948687,-0.45978491497226059,-0.38577885925769806,-0.046172157395631075,-0.69470345298759639,-0.79109425214119256,-0.94402467063628137,-0.88366790674626827,-0.35128342336975038,-0.35377993225120008,-0.69942358089610934,-0.89158890931867063,-0.83905007340945303,-0.016503073507919908,-0.3366625786293298,-0.75165595975704491,-0.39742754795588553,-0.39364427351392806,-0.88406096468679607,-0.18330473313108087,-0.019038115162402391,-0.1699457869399339,-0.46707552997395396,-0.51096066692844033,-0.89576505217701197,-0.2392717448528856,-0.83842921769246459,-0.08489206968806684,-0.042715084506198764,-0.099025044590234756,-0.38529849471524358,-0.78576249140314758,-0.14554955647327006,-0.45293889543972909,-0.27843793574720621,-0.21529052243568003,-0.32071001431904733,-0.80555890593677759,-0.099631589371711016,-0.25311084720306098,-0.95104870316572487,-0.52444177726283669,-0.58376670768484473,-0.41674141655676067,-0.39111409545876086,-0.73945191851817071,-0.41908786911517382,-0.91517754620872438,-0.18497742689214647,-0.70186715526506305,-0.071919170906767249,-0.08287064591422677,-0.16944853938184679,-0.52948180795647204,-0.18696642271243036,-0.73053244641050696,-0.23514045728370547,-0.23702952614985406,-0.053395299939438701,-0.22782789566554129,-0.41736510558985174,-0.97870037471875548,-0.84474637964740396,-0.12001380627043545,-0.57160964119248092,-0.20182981994003057,-0.32774488907307386,-0.67583476495929062,-0.18529148702509701,-0.3309555861633271,-0.46760325110517442,-0.70370613434351981,-0.84067563037388027,-0.070047953398898244,-0.54874710878357291,-0.71803956688381732,-0.039885589154437184,-0.83112002885900438,-0.94146933406591415,-0.25483339722268283,-0.42560941493138671,-0.52286565233953297,-0.38988192053511739,-0.34655546140857041,-0.31962446798570454,-0.03342406521551311,-0.32602599821984768,-0.68697251076810062,-0.72852852661162615,-0.92356054368428886,-0.64291102765128016,-0.20858485950157046,-0.069752625422552228,-0.63461602153256536,-0.45206252997741103,-0.41490061464719474,-0.32397744082845747,-0.81666329386644065,-0.83706555841490626,-0.92308105761185288,-0.33157789474353194,-0.84633723367005587,-0.59805431240238249,-0.17312401090748608,-0.26150260516442358,-0.69904325902462006,-0.77747653378173709,-0.6161155104637146,-0.93700232543051243,-0.34925105283036828,-0.80427567264996469,-0.18262948049232364,-0.32925093080848455,-0.23373377416282892,-0.99301263899542391,-0.62582443794235587,-0.78819939028471708,-0.81013752496801317,-0.59690201282501221,-0.35349824372678995,-0.26657673739828169,-0.99639469967223704,-0.22027605469338596,-0.71711209719069302,-0.065296091139316559,-0.36139940819703043,-0.073053727857768536,-0.40792542253620923,-0.11904361168853939,-0.67471079668030143,-0.0041511098388582468,-0.011048742802813649,-0.95826244144700468,-0.87676415592432022,-0.704426588723436,-0.26412300812080503,-0.80242150416597724,-0.84338298416696489,-0.39477180270478129,-0.56535258376970887,-0.9574959366582334,-0.16775678400881588,-0.12284199404530227,-0.64009044063277543,-0.37605718499980867,-0.92376195034012198,-0.47102754772640765,-0.44307445338927209,-0.58551058382727206,-0.72606977424584329,-0.67435554321855307,-0.86794531648047268,-0.97128473385237157,-0.30034515215083957,-0.78722301172092557,-0.51409509521909058,-0.28890646528452635,-0.81728374306112528,-0.94710654928348958,-0.89878546167165041,-0.64361508353613317,-0.7984156752936542,-0.59673413261771202,-0.8652539886534214,-0.581683365162462,-0.67621084442362189,-0.39937806129455566,-0.049454954685643315,-0.28285904484800994,-0.4678694405592978,-0.15477642510086298,-0.75231429026462138,-0.75449888315051794,-0.56272374838590622,-0.79078232194297016,-0.33091221516951919,-0.91040143906138837,-0.45230429596267641,-0.04055990232154727,-0.39094550255686045,-0.54462118074297905,-0.13686524285003543,-0.52114816359244287,-0.6193040469661355,-0.55611125566065311,-0.25104438164271414,-0.91781514533795416,-0.84330319846048951,-0.84690321120433509,-0.9418761832639575,-0.21945115155540407,-0.66029303800314665,-0.36517234635539353,-0.18282359093427658,-0.17340473853982985,-0.62245233030989766,-0.55202233185991645,-0.027395067038014531,-0.76164644793607295,-0.39468140946701169,-0.046663743909448385,-0.66176383313722908,-0.3325739570427686,-0.072016281774267554,-0.17304190853610635,-0.10157530405558646,-0.75178737682290375,-0.14929354167543352,-0.6481205252930522,-0.7432080814614892,-0.32235561846755445,-0.71450449549593031,-0.5161206426564604,-0.22005308629013598,-0.72160706087015569,-0.29860477172769606,-0.034992813598364592,-0.50748822721652687,-0.37644440750591457,-0.03233225317671895,-0.34024194558151066,-0.52383850864134729,-0.069855065550655127,-0.0050944762770086527,-0.91313654324039817,-0.50942137301899493,-0.97021863330155611,-0.49654659815132618,-0.9688273633364588,-0.23122712573967874,-0.24612174392677844,-0.61191551713272929,-0.54438886605203152,-0.54674073727801442,-0.98996031866408885,-0.86714603612199426,-0.23907281109131873,-0.24149367166683078,-0.94925661128945649,-0.43476306088268757,-0.92531143268570304,-0.35136340232565999,-0.36924727936275303,-0.20194193464703858,-0.95540585089474916,-0.77955175726674497,-0.69882537750527263,-0.14210922294296324,-0.83565432648174465,-0.095271081198006868,-0.017489925725385547,-0.70798011450096965,-0.49871000158600509,-0.27413024473935366,-0.23747907835058868,-0.66055419575423002,-0.35815101489424706,-0.72731877444311976,-0.26338441646657884,-0.8297254100907594,-0.40795171563513577,-0.3359817722812295,-0.38099871086888015,-0.46414833748713136,-0.97409459506161511,-0.17089058272540569,-0.62321287649683654,-0.73263791459612548,-0.98226457950659096,-0.82384422305040061,-0.35074144671671093,-0.56881363410502672,-0.55625184648670256,-0.52434496441856027,-0.51493171905167401,-0.21477908710949123,-0.76263197045773268,-0.86934840679168701,-0.44303907826542854,-0.94864426809363067,-0.23987447377294302,-0.37249352666549385,-0.35562308318912983,-0.97091244207695127,-0.87751710368320346,-0.86380538414232433,-0.92761037312448025,-0.30544440192170441,-0.57420276012271643,-0.48432104126550257,-0.95308432402089238,-0.4574175791349262,-0.2926102033816278,-0.19151649577543139,-0.3006149847060442,-0.20631396886892617,-0.34968614275567234,-0.49813290708698332,-0.81977650849148631,-0.7233679429627955,-0.7009652522392571,-0.88033506227657199,-0.48390759760513902,-0.11340223858132958,-0.9817366017960012,-0.029711009934544563,-0.10951870167627931,-0.057473684195429087,-0.70527098071761429,-0.36187186627648771,-0.88130795629695058,-0.90940984897315502,-0.61383325303904712,-0.92529188492335379,-0.55511876638047397,-0.81754906009882689,-0.87165706581436098,-0.96831234218552709,-0.00047200801782310009,-0.27506369142793119,-0.78937492659315467,-0.85584119590930641,-0.057805180782452226,-0.36407318199053407,-0.50059805158525705,-0.21015244419686496,-0.2069774258416146,-0.43374686827883124,-0.87364530051127076,-0.62258607242256403,-0.62012418592348695,-0.17841388424858451,-0.21969648473896086,-0.695119165815413,-0.75288163707591593,-0.68062690552324057,-0.46428404236212373,-0.21502011152915657,-0.45289630652405322,-0.49626355897635221,-0.90735746058635414,-0.73900326597504318,-0.62445167917758226,-0.26752447686158121,-0.33209437830373645,-0.83705003117211163,-0.91752344206906855,-0.078924781642854214,-0.37234452273696661,-0.77777653303928673,-0.73278203140944242,-0.91639128257520497,-0.91655678511597216,-0.92629844415932894,-0.90665744291618466,-0.23044833587482572,-0.92996604391373694,-0.18232297757640481,-0.23928988026455045,-0.25957446522079408,-0.90146745322272182,-0.24175121542066336,-0.52621840429492295,-0.038805021438747644,-0.60455830907449126,-0.53357503633014858,-0.30451071122661233,-0.21300351340323687,-0.43654945981688797,-0.57743191043846309,-0.88353152619674802,-0.056270042667165399,-0.13404539413750172,-0.99868560442700982,-0.48833009437657893,-0.018732089316472411,-0.9423870206810534,-0.42980582104064524,-0.33174170344136655,-0.65352944820187986,-0.3683948484249413,-0.44249694258905947,-0.85863763326779008,-0.70021529891528189,-0.34108274383470416,-0.84092718013562262,-0.1740483078174293,-0.33474371396005154,-0.77246181736700237,-0.31579721160233021,-0.93757305853068829,-0.2075906372629106,-0.73968360712751746,-0.65137556521221995,-0.052011371590197086,-0.7499252671841532,-0.45914544211700559,-0.65499661746434867,-0.47354919998906553,-0.67136740777641535,-0.038843346759676933,-0.072514468105509877,-0.022350842831656337,-0.24392756447196007,-0.91263042623177171,-0.71176136354915798,-0.49991400353610516,-0.39382012584246695,-0.26401377888396382,-0.23397063533775508,-0.15080014523118734,-0.1538476541172713,-0.80955736828036606,-0.098018809221684933,-0.72727486956864595,-0.4042928577400744,-0.098602307727560401,-0.93146385275758803,-0.38375193206593394,-0.78195662144571543,-0.60954900970682502,-0.13059150660410523,-0.56192669086158276,-0.58578214654698968,-0.71904215030372143,-0.33879084745422006,-0.8855763808824122,-0.21651515574194491,-0.80951880593784153,-0.75211399514228106,-0.25386663246899843,-0.44557471084408462,-0.38439888413995504,-0.77041460014879704,-0.88292011152952909,-0.99308723770081997,-0.52569702640175819,-0.23336059902794659,-0.90787789761088789,-0.97816674690693617,-0.85531905805692077,-0.60689656645990908,-0.13822783855721354,-0.74745984422042966,-0.065507010789588094,-0.79578307387419045,-0.79131908505223691,-0.3377205291762948,-0.60913617163896561,-0.08525792439468205,-0.31238645245321095,-0.99309745011851192,-0.72447073319926858,-0.25357679999433458,-0.92090350412763655,-0.20032920083031058,-0.85859086294658482,-0.092201055958867073,-0.64864381356164813,-0.025426062988117337,-0.62456756224855781,-0.88013650756329298,-0.5500849059317261,-0.48103023506700993,-0.45349135203287005,-0.17802519234828651,-0.30198393552564085,-0.36297720368020236,-0.26852315803989768,-0.046089619630947709,-0.49691107333637774,-0.053073623916134238,-0.60221203626133502,-0.033394758589565754,-0.098658265778794885,-0.93265581666491926,-0.029290865873917937,-0.56246521137654781,-0.073989238124340773,-0.67916005337610841,-0.82432237989269197,-0.86594794294796884,-0.28776960098184645,-0.86541484808549285,-0.91416780487634242,-0.1940523402299732,-0.1451086385641247,-0.47523573460057378,-0.69732587621547282,-0.055743026547133923,-0.76039655483327806,-0.011659926036372781,-0.42220461997203529,-0.59010582324117422,-0.46049592643976212,-0.62881212518550456,-0.46879350766539574,-0.77314591105096042,-0.1245263007003814,-0.55396904214285314,-0.089000958716496825,-0.73377856030128896,-0.50484202103689313,-0.54090360715053976,-0.06869473890401423,-0.56709467223845422,-0.42080435063689947,-0.74037656863220036,-0.51387674571014941,-0.86628548824228346,-0.48645584401674569,-0.58077158429659903,-0.14369983645156026,-0.49313948955386877,-0.76810766034759581,-0.67567544733174145,-0.093275561463087797,-0.31531119765713811,-0.82062223204411566,-0.55690648825839162,-0.65845766896381974,-0.56433692062273622,-0.25072432402521372,-0.2069764812476933,-0.49073918326757848,-0.18444363353773952,-0.0050704434979707003,-0.24788734642788768,-0.41905566793866456,-0.21074405452236533,-0.74535650131292641,-0.49873254587873816,-0.32665963214822114,-0.44481807807460427,-0.70892050699330866,-0.36925026075914502,-0.17744519072584808,-0.9020108284894377,-0.92571074259467423,-0.75432382244616747,-0.036716090515255928,-0.3842748561874032,-0.32941061747260392,-0.69504004018381238,-0.35900983470492065,-0.23303239746019244,-0.9091168474406004,-0.732770906528458,-0.36698714992962778,-0.9604936926625669,-0.60166963166557252,-0.70343822753056884,-0.0078810229897499084,-0.44363503134809434,-0.10414814786054194,-0.030925533035770059,-0.2277590970043093,-0.31087528890930116,-0.96291413623839617,-0.28211860335431993,-0.73495443328283727,-0.44097087741829455,-0.68548286473378539,-0.46664579305797815,-0.0093530197627842426,-0.12427600403316319,-0.020709217991679907,-0.60690141469240189,-0.0045198679435998201,-0.54193306155502796,-0.30959991575218737,-0.79175479570403695,-0.72159087401814759,-0.24272684007883072,-0.58893813472241163,-0.45330797182396054,-0.062169528100639582,-0.64261180278845131,-0.72584382956847548,-0.29900221014395356,-0.33408349612727761,-0.89077750127762556,-0.64796120766550303,-0.99338923534378409,-0.011945031117647886,-0.40269791684113443,-0.91938767256215215,-0.3408239318523556,-0.98603602894581854,-0.41999356588348746,-0.66593703371472657,-0.090048390673473477,-0.29934820299968123,-0.36399385053664446,-0.26953777065500617,-0.47443874692544341,-0.93434919393621385,-0.74037692183628678,-0.051206819480285048,-0.94882913585752249,-0.44356134976260364,-0.26804986875504255,-0.65484098321758211,-0.83570860442705452,-0.7809647205285728,-0.71960299089550972,-0.95834641251713037,-0.74057255010120571,-0.3516271619591862,-0.45290404139086604,-0.29423424345441163,-0.45873153442516923,-0.055991364410147071,-0.21188682317733765,-0.030098386341705918,-0.13039445062167943,-0.10943824634887278,-0.21245947061106563,-0.33411502465605736,-0.030572144547477365,-0.72176164644770324,-0.81953189428895712,-0.34114779764786363,-0.069401039276272058,-0.53146802238188684,-0.95484812068752944,-0.78290849691256881,-0.75935412035323679,-0.024104416836053133,-0.99114496842958033,-0.97879425878636539,-0.32840646617114544,-0.68503609346225858,-0.095186770427972078,-0.0027282307855784893,-0.42758369282819331,-0.18534298846498132,-0.84453870798461139,-0.8200970443431288,-0.49763256800360978,-0.42396770743653178,-0.43226711847819388,-0.96730084507726133,-0.81172823021188378,-0.01366953132674098,-0.6758035400416702,-0.2478189377579838,-0.28396265232004225,-0.68101773271337152,-0.44707128498703241,-0.98959720251150429,-0.8577182637527585,-0.14584058127366006,-0.61963644111528993,-0.24163878266699612,-0.60343075031414628,-0.91309908241964877,-0.42325829970650375,-0.96106979507021606,-0.98059850139543414,-0.38632762432098389,-0.42241993639618158,-0.43831434333696961,-0.067803910467773676,-0.37275944044813514,-0.89312722370959818,-0.2512934491969645,-0.26785024185664952,-0.8269270877353847,-0.029477210715413094,-0.56252345116809011,-0.39111445867456496,-0.38400896708481014,-0.28033438813872635,-0.61361637013033032,-0.69724767282605171,-0.69383273366838694,-0.54097760515287519,-0.16566050122492015,-0.95197138609364629,-0.65967224142514169,-0.6146478895097971,-0.96336695994250476,-0.63828361965715885,-0.26271071378141642,-0.71241594548337162,-0.49541062349453568,-0.18328726873733103,-0.1600519644562155,-0.5494719035923481,-0.70657699322327971,-0.19336747983470559,-0.78593184100463986,-0.20982705848291516,-0.93394220643676817,-0.71704213181510568,-0.14118540962226689,-0.93169076205231249,-0.19033683347515762,-0.9450692692771554,-0.46060461131855845,-0.36247735610231757,-0.79922210238873959,-0.57571442378684878,-0.2658813672605902,-0.094468650175258517,-0.82945503108203411,-0.5826791194267571,-0.15265233465470374,-0.84594167326577008,-0.30120684672147036,-0.46000073337927461,-0.69506941945292056,-0.06290863174945116,-0.66395539022050798,-0.33904493600130081,-0.87699671019800007,-0.60534255323000252,-0.85501195816323161,-0.74100945261307061,-0.85793521464802325,-0.15208783838897943,-0.34518092055805027,-0.054943920345976949,-0.78896814119070768,-0.62300016591325402,-0.38349056546576321,-0.93271981459110975,-0.49117004848085344,-0.81841823132708669,-0.56209953362122178,-0.42425238806754351,-0.18434803234413266,-0.81411496666260064,-0.38964304886758327,-0.70855164132080972,-0.83488574204966426,-0.53833589563146234,-0.46808005217462778,-0.6530225605238229,-0.20018884586170316,-0.68183428165502846,-0.39853824255988002,-0.54008542443625629,-0.050342405680567026,-0.7641050776001066,-0.77790289581753314,-0.97224795934744179,-0.56736455112695694,-0.34154654899612069,-0.14783452916890383,-0.84119643643498421,-0.61296142055653036,-0.19733740133233368,-0.40423882193863392,-0.59142022696323693,-0.31758461426943541,-0.67260812153108418,-0.85100143472664058,-0.25398527202196419,-0.077068471349775791,-0.25364807713776827,-0.96284101833589375,-0.82604503585025668,-0.94275855016894639,-0.88245519530028105,-0.76111854310147464,-0.82596247037872672,-0.89028617832809687,-0.37259083986282349,-0.48327265423722565,-0.15810974477790296,-0.67465870617888868,-0.48991715046577156,-0.1300718174315989,-0.8342362514231354,-0.90770722390152514,-0.28569471277296543,-0.89391020825132728,-0.092962698778137565,-0.87828935333527625,-0.78146225353702903,-0.90534774633124471,-0.12903855461627245,-0.28620324702933431,-0.78816405055113137,-0.93913943064399064,-0.16333506023511291,-0.61866203555837274,-0.14069831068627536,-0.61217932915315032,-0.47662252583540976,-0.69104345119558275,-0.52263721078634262,-0.32204174343496561,-0.11011686641722918,-0.74212905415333807,-0.93492380040697753,-0.23310866858810186,-0.49054387956857681,-0.36568314954638481,-0.37920204852707684,-0.99239700008183718,-0.2664325584191829,-0.89154722285456955,-0.77000376884825528,-0.44216863624751568,-0.97812812426127493,-0.53656610823236406,-0.86101111373864114,-0.0072583039291203022,-0.23049254808574915,-0.79677263903431594,-0.030234816251322627,-0.7249985400121659,-0.61320558795705438,-0.27760428935289383,-0.0065722104627639055,-0.12138084741309285,-0.67360653588548303,-0.33385771512985229,-0.86283896840177476,-0.35269421781413257,-0.61524637043476105,-0.93958928063511848,-0.43736416264437139,-0.86788006126880646,-0.36616457533091307,-0.09171623457223177,-0.45839361799880862,-0.54774145968258381,-0.68500657775439322,-0.23716960265301168,-0.84067327552475035,-0.17534479568712413,-0.847383763641119,-0.86956542218104005,-0.86304922611452639,-0.31725060613825917,-0.29019688488915563,-0.39488159259781241,-0.53513553040102124,-0.53565449034795165,-0.88672882062382996,-0.12559017958119512,-0.29912114702165127,-0.84126020292751491,-0.82001386466436088,-0.55573092633858323,-0.19633192056789994,-0.17863031104207039,-0.48604389629326761,-0.32181213586591184,-0.45156164397485554,-0.13399223471060395,-0.79215524205937982,-0.60988484742119908,-0.21541112475097179,-0.83763992483727634,-0.47351036360487342,-0.68070225487463176,-0.4289766401052475,-0.50841196998953819,-0.57795924320816994,-0.23859088076278567,-0.27884369227103889,-0.5499807286541909,-0.92686169152148068,-0.044841873925179243,-0.40513807558454573,-0.85626135487109423,-0.13802263210527599,-0.55247260094620287,-0.55119893839582801,-0.32505732262507081,-0.3474226132966578,-0.30869121546857059,-0.69652688317000866,-0.5131450742483139,-0.39256004407070577,-0.88667812547646463,-0.7210976870264858,-0.62678007455542684,-0.20043765776790679,-0.3045086192432791,-0.20383087894879282,-0.8875273740850389,-0.045913095586001873,-0.51208318094722927,-0.55566183477640152,-0.98540454637259245,-0.54311718652024865,-0.92345707328058779,-0.40018286020494998,-0.48318925313651562,-0.1573781743645668,-0.21681461296975613,-0.96879955334588885,-0.092242084909230471,-0.81272986182011664,-0.070034694392234087,-0.056405600858852267,-0.56545006460510194,-0.052077863831073046,-0.21504174079746008,-0.54701561317779124,-0.19325042399577796,-0.1891674508806318,-0.19522916618734598,-0.071120803477242589,-0.094234967138618231,-0.32728271279484034,-0.95938212797045708,-0.62766771973110735,-0.36568200145848095,-0.59430431062355638,-0.097093238960951567,-0.5611760828178376,-0.22502615489065647,-0.32135080476291478,-0.17260751151479781,-0.53492967155762017,-0.11582193104550242,-0.046735836192965508,-0.17028475971892476,-0.64530201652087271,-0.71151701826602221,-0.66097914334386587,-0.17771455319598317,-0.10413994989357889,-0.92361565376631916,-0.45456574321724474,-0.083185303490608931,-0.25071627926081419,-0.83237591898068786,-0.87512280512601137,-0.05271183792501688,-0.54676518426276743,-0.46123855770565569,-0.9252505605109036,-0.20119118900038302,-0.33665938442572951,-0.95337618142366409,-0.29634836222976446,-0.31694520264863968,-0.081049428321421146,-0.57735740626230836,-0.33992809546180069,-0.13779994333162904,-0.30989508260972798,-0.65239549148827791,-0.14627638482488692,-0.75113221653737128,-0.53209827258251607,-0.85402736370451748,-0.54152131266891956,-0.97635892848484218,-0.19389581028372049,-0.42928631021641195,-0.17523276573047042,-0.42419870896264911,-0.80956389708444476,-0.90094694565050304,-0.97432679450139403,-0.30905069131404161,-0.94318504119291902,-0.08588101202622056,-0.85706442315131426,-0.16272277082316577,-0.82858125935308635,-0.50881349155679345,-0.3741552229039371,-0.36914346786215901,-0.97048479202203453,-0.87784951901994646,-0.5276677377987653,-0.49721506726928055,-0.32155722822062671,-0.7832851205021143,-0.8852110302541405,-0.35917691909708083,-0.76393607957288623,-0.45844993065111339,-0.71091939741745591,-0.37038952787406743,-0.82724370458163321,-0.68160198535770178,-0.6762938795145601,-0.66931563382968307,-0.198889902792871,-0.63546676258556545,-0.70036629866808653,-0.65886647650040686,-0.22437427891418338,-0.66073392378166318,-0.44722917093895376,-0.016396663151681423,-0.44530828180722892,-0.38279143208637834,-0.26935271453112364,-0.2175473200622946,-0.22637518355622888,-0.0010206287261098623,-0.099152900278568268,-0.34160003066062927,-0.86183284362778068,-0.18976653227582574,-0.20592317869886756,-0.84726206376217306,-0.81058663106523454,-0.25910100736655295,-0.97102562268264592,-0.20857582939788699,-0.87261280743405223,-0.44947212841361761,-0.86626431392505765,-0.033230559201911092,-0.8716890427749604,-0.51109403651207685,-0.064740207511931658,-0.4900912104640156,-0.7267699392978102,-0.77567934454418719,-0.057320745894685388,-0.028484683018177748,-0.36184949893504381,-0.57041244278661907,-0.12746917852200568,-0.61134008108638227,-0.63292675977572799,-0.95934024639427662,-0.76379809412173927,-0.96264757681638002,-0.81268176040612161,-0.667478111339733,-0.45435073622502387,-0.37661990942433476,-0.74488355196081102,-0.02772351517342031,-0.69417639216408134,-0.19125225930474699,-0.98445138102397323,-0.74685031175613403,-0.41251190355978906,-0.81921692029573023,-0.037441691849380732,-0.44279069663025439,-0.15015232912264764,-0.024027199717238545,-0.99205970740877092,-0.3656345964409411,-0.36597445653751493,-0.64250962762162089,-0.64070886466652155,-0.14652970153838396,-0.88594038784503937,-0.58071912592276931,-0.45918207615613937,-0.65844861790537834,-0.58357861987315118,-0.050371108110994101,-0.4829015030991286,-0.52556476718746126,-0.11387712205760181,-0.80448946706019342,-0.8506040908396244,-0.61891973717138171,-0.56532347900792956,-0.71341938036493957,-0.94096119259484112,-0.29386047041043639,-0.61896994663402438,-0.45707409433089197,-0.27763053635135293,-0.1776755265891552,-0.9048807721119374,-0.20256341574713588,-0.3328096023760736,-0.71200896217487752,-0.70359945110976696,-0.014180362923070788,-0.40143723366782069,-0.74516148981638253,-0.84814801067113876,-0.93648631102405488,-0.56362289492972195,-0.18999261967837811,-0.98731769784353673,-0.43771006143651903,-0.77097705099731684,-0.42158029554411769,-0.73632034356705844,-0.9809632885735482,-0.4886147752404213,-0.020143059780821204,-0.78491511172614992,-0.99049264611676335,-0.65389020834118128,-0.22737793647684157,-0.25218290882185102,-0.069217524025589228,-0.5863805441185832,-0.73686952423304319,-0.94424743857234716,-0.85867035295814276,-0.60997186345048249,-0.010589824756607413,-0.52551605715416372,-0.53139865142293274,-0.17467928538098931,-0.56310139945708215,-0.69635642715729773,-0.76017054356634617,-0.17820986290462315,-0.60779445967637002,-0.43432023469358683,-0.39538886235095561,-0.94561837939545512,-0.93923207861371338,-0.73998582107014954,-0.40960555686615407,-0.41089644888415933,-0.80090019782073796,-0.52026638691313565,-0.090625170851126313,-0.80134938494302332,-0.52254446409642696,-0.76098734000697732,-0.50980414752848446,-0.21980651980265975,-0.81713063875213265,-0.38269007974304259,-0.17860185657627881,-0.85587119730189443,-0.97729890164919198,-0.2838679829146713,-0.30461490107700229,-0.59849356929771602,-0.36935084965080023,-0.53761463123373687,-0.50191976386122406,-0.29271799582056701,-0.031561221927404404,-0.59878945513628423,-0.058597073657438159,-0.98561459826305509,-0.21925013023428619,-0.92535955528728664,-0.51378254825249314,-0.40893182763829827,-0.46557284379377961,-0.55399848218075931,-0.26424384140409529,-0.073379402048885822,-0.016641283640637994,-0.90510664228349924,-0.38400476286187768,-0.62458121357485652,-0.810422676615417,-0.45400113263167441,-0.97974351281300187,-0.88832162856124341,-0.37300349515862763,-0.095536764478310943,-0.61767545621842146,-0.36672300798818469,-0.053157813381403685,-0.094588361214846373,-0.30646274657920003,-0.36944706435315311,-0.07705081719905138,-0.98577172518707812,-0.0048146857880055904,-0.68352221022360027,-0.49765372392721474,-0.88812925689853728,-0.67081392649561167,-0.37053686520084739,-0.69181333761662245,-0.93929055146872997,-0.83506053872406483,-0.3260050774551928,-0.88054423895664513,-0.52256091148592532,-0.53996615437790751,-0.6944541959092021,-0.57522872579284012,-0.48366702068597078,-0.22867038217373192,-0.29297174536623061,-0.67229523649439216,-0.18638902041129768,-0.34517575614154339,-0.68419166002422571,-0.12057413859292865,-0.68869781657122076,-0.51389869628474116,-0.65502313314937055,-0.14766559493727982,-0.33369511063210666,-0.093573334161192179,-0.13892837567254901,-0.19502324797213078,-0.23822075058706105,-0.25630194996483624,-0.12416242458857596,-0.36568072694353759,-0.12876449874602258,-0.98866013530641794,-0.8272095937281847,-0.68171211588196456,-0.14977601217105985,-0.814094761852175,-0.040411624824628234,-0.31866364693269134,-0.22979301074519753,-0.82814217847771943,-0.12498464761301875,-0.6722889959346503,-0.93258652230724692,-0.36526168626733124,-0.35320778912864625,-0.28764628642238677,-0.67590340343303978,-0.98015942447818816,-0.35965308570303023,-0.27450402732938528,-0.12024896894581616,-0.42178800422698259,-0.6263623246923089,-0.096072318963706493,-0.23326244484633207,-0.047488193958997726,-0.83191334153525531,-0.56865345081314445,-0.4802753149997443,-0.78253523726016283,-0.37254439247772098,-0.69313753582537174,-0.28608631528913975,-0.10389472777023911,-0.69360389513894916,-0.87261403515003622,-0.73631289228796959,-0.26991423428989947,-0.083996495697647333,-0.40684690908528864,-0.38496573292650282,-0.476794115267694,-0.90682494547218084,-0.13824753183871508,-0.37230279319919646,-0.66508480394259095,-0.80797198368236423,-0.055227580014616251,-0.22303531016223133,-0.56334061827510595,-0.1354994997382164,-0.30806814832612872,-0.66641838173381984,-0.9577486370690167,-0.86458599916659296,-0.67072973772883415,-0.23453284776769578,-0.1502755566034466,-0.68138626916334033,-0.57753098080866039,-0.74762048642151058,-0.4344874715898186,-0.79992538713850081,-0.22076836228370667,-0.93099014600738883,-0.40693601802922785,-0.44808926875703037,-0.07297960203140974,-0.5961883794516325,-0.39785989141091704,-0.24988420074805617,-0.47752809012308717,-0.51281650178134441,-0.18336288654245436,-0.61521387146785855,-0.84350204141810536,-0.93859149096533656,-0.27771845459938049,-0.78630850533954799,-0.60881912335753441,-0.45612663310021162,-0.70182557008229196,-0.58935539377853274,-0.12701088539324701,-0.099036797182634473,-0.47232304327189922,-0.94371046638116241,-0.23552137915976346,-0.55649075098335743,-0.46240898780524731,-0.46218747389502823,-0.51229150802828372,-0.86593939713202417,-0.80726823257282376,-0.45905277621932328,-0.59833968966268003,-0.14263181039132178,-0.14641738473437726,-0.80198263935744762,-0.38930473779328167,-0.84439089754596353,-0.96864886395633221,-0.93862223462201655,-0.45431113918311894,-0.33892601332627237,-0.16561677982099354,-0.98139735474251211,-0.66517915786243975,-0.70889706304296851,-0.24016796355135739,-0.02617617161013186,-0.52124289213679731,-0.2353595441672951,-0.49102228577248752,-0.75631606974638999,-0.53719157492741942,-0.31788394600152969,-0.053625456988811493,-0.86214548768475652,-0.84302540239877999,-0.37018833053298295,-0.9839382937643677,-0.14298531366512179,-0.088576206006109715,-0.10020167147740722,-0.050265449564903975,-0.65163159882649779,-0.5454490187112242,-0.51368980412371457,-0.7537829193752259,-0.32048251037485898,-0.042590413009747863,-0.29587810719385743,-0.527665228350088,-0.53911594743840396,-0.032122120959684253,-0.63572770217433572,-0.89709828770719469,-0.71973478002473712,-0.36605443339794874,-0.9237955673597753,-0.066889016190543771,-0.5553750297985971,-0.57410560641437769,-0.83429370494559407,-0.36161382985301316,-0.60125102428719401,-0.73756051692180336,-0.07941533625125885,-0.038770230952650309,-0.4886656126473099,-0.52671487350016832,-0.085857674013823271,-0.34577796631492674,-0.90806606225669384,-0.60246453853324056,-0.0069628262426704168,-0.64252401236444712,-0.90356638166122139,-0.23283005808480084,-0.68685250193811953,-0.90402339003048837,-0.21462488337419927,-0.96871612896211445,-0.39759974600747228,-0.029226167825981975,-0.5340916512068361,-0.34380516968667507,-0.70186865446157753,-0.068930078763514757,-0.86682721716351807,-0.4306031686719507,-0.70499104540795088,-0.37761299777776003,-0.83337291516363621,-0.50517604337073863,-0.68289605947211385,-0.47648879699409008,-0.89016032009385526,-0.68726999964565039,-0.1679120387416333,-0.32380613638088107,-0.028407244244590402,-0.9943853213917464,-0.7817287293728441,-0.72577251633629203,-0.29392236890271306,-0.92542055435478687,-0.96098630712367594,-0.84308446268551052,-0.38370487256906927,-0.70234737452119589,-0.33063583029434085,-0.82358293957076967,-0.96279846201650798,-0.79603042453527451,-0.99666543467901647,-0.69888246315531433,-0.85753564839251339,-0.063191924476996064,-0.1375945380423218,-0.69288012012839317,-0.72396258404478431,-0.16718908865004778,-0.46830846066586673,-0.907251215307042,-0.47777869622223079,-0.3206165237352252,-0.43238228023983538,-0.92616299190558493,-0.66696745040826499,-0.3007838879711926,-0.58658344415016472,-0.63479447667486966,-0.58565184869803488,-0.36204601917415857,-0.016078214626759291,-0.58343720994889736,-0.94226070027798414,-0.63340650056488812,-0.60345711186528206,-0.80126488651148975,-0.20867942157201469,-0.34239608235657215,-0.40581453940831125,-0.1743731782771647,-0.69043691246770322,-0.046478883130475879,-0.098197091137990355,-0.80624394817277789,-0.90687301754951477,-0.011983605800196528,-0.68097285996191204,-0.60231905151158571,-0.11303838901221752,-0.2508891171310097,-0.34256832324899733,-0.47531756479293108,-0.31548310932703316,-0.20609645475633442,-0.52605137438513339,-0.36419196240603924,-0.85875583626329899,-0.96189899812452495,-0.049075117567554116,-0.89649998070672154,-0.11737387953326106,-0.031216527335345745,-0.56256145471706986,-0.20408059214241803,-0.16504319780506194,-0.20316944574005902,-0.674856600118801,-0.4976688192691654,-0.63236069865524769,-0.45224331878125668,-0.20516053191386163,-0.74820894934237003,-0.90069128246977925,-0.73537820111960173,-0.048218441661447287,-0.77847318048588932,-0.99852607492357492,-0.41570258233696222,-0.70460415515117347,-0.26358195673674345,-0.95154545060358942,-0.067972751799970865,-0.5572596131823957,-0.58964426163583994,-0.21015362767502666,-0.95556359039619565,-0.08647938771173358,-0.49939760030247271,-0.46674563828855753,-0.35663824994117022,-0.19592355866916478,-0.48216674057766795,-0.43733964441344142,-0.29999676533043385,-0.24912354536354542,-0.60899024712853134,-0.99076964147388935,-0.80657548760063946,-0.52321515115909278,-0.43884314014576375,-0.74967047246173024,-0.69845803920179605,-0.69208173942752182,-0.94530683755874634,-0.033050900558009744,-0.11236795294098556,-0.79119563894346356,-0.12453185697086155,-0.47952374396845698,-0.8747368601616472,-0.774453867925331,-0.95305067067965865,-0.43280212837271392,-0.047998945694416761,-0.0018364742863923311,-0.35786576103419065,-0.86813466856256127,-0.1019835916813463,-0.045323410537093878,-0.7995277838781476,-0.87612248747609556,-0.85647132433950901,-0.81376179889775813,-0.15634881751611829,-0.35349729424342513,-0.039675647160038352,-0.87183092418126762,-0.6182258315384388,-0.91867949813604355,-0.86673686560243368,-0.34077294473536313,-0.54630977124907076,-0.9726011457387358,-0.45801842771470547,-0.014820198761299253,-0.46125416201539338,-0.46066904929466546,-0.63655936531722546,-0.62616508221253753,-0.83223577868193388,-0.29326511640101671,-0.28380608628503978,-0.052588625345379114,-0.84574982058256865,-0.61772264819592237,-0.77231340575963259,-0.30709144659340382,-0.043063281569629908,-0.3979286861140281,-0.3555432774592191,-0.22474229335784912,-0.26232869387604296,-0.40816579200327396,-0.5610903047490865,-0.62382019148208201,-0.8980154397431761,-0.14935080311261117,-0.10523433634079993,-0.77426480571739376,-0.56327725108712912,-0.20304171019233763,-0.76698837731964886,-0.0031189948786050081,-0.24959781672805548,-0.71868918091058731,-0.82802092540077865,-0.28961902228184044,-0.51779603795148432,-0.33535792725160718,-0.81352050206623971,-0.5851644673384726,-0.24272983171977103,-0.50173009559512138,-0.78596473066136241,-0.050876970868557692,-0.92386730876751244,-0.046818330651149154,-0.089489493519067764,-0.26707669137977064,-0.30724344053305686,-0.61531999311409891,-0.77236533630639315,-0.95991727011278272,-0.2037128834053874,-0.41706641740165651,-0.5214528045617044,-0.43528735963627696,-0.25621922872960567,-0.64481738349422812,-0.060952210100367665,-0.11979917576536536,-0.62141986261121929,-0.37546987039968371,-0.48185421223752201,-0.37598445545881987,-0.13357598101720214,-0.70425859093666077,-0.70160218304954469,-0.9253200723323971,-0.88524894486181438,-0.7062940071336925,-0.73267530463635921,-0.76526019326411188,-0.22591717471368611,-0.65410262160003185,-0.41219472326338291,-0.15150964027270675,-0.77764499909244478,-0.83963561849668622,-0.013307019136846066,-0.84213562402874231,-0.083545516012236476,-0.49134072894230485,-0.50247576460242271,-0.39669899991713464,-0.47190847084857523,-0.83860303391702473,-0.58190783369354904,-0.36454567615874112,-0.27089340449310839,-0.15605942904949188,-0.34191940259188414,-0.21773078665137291,-0.68822850938886404,-0.73543364647775888,-0.013341031968593597,-0.68530103727243841,-0.27601497620344162,-0.81680442625656724,-0.61074084183201194,-0.55252673057839274,-0.018232686910778284,-0.67332138516940176,-0.29179686959832907,-0.72018370893783867,-0.30408318853005767,-0.068236092105507851,-0.17988395737484097,-0.60030759079381824,-0.43332914123311639,-0.62057683803141117,-0.93777773506008089,-0.40715354750864208,-0.49653085274621844,-0.93149331281892955,-0.25934697012417018,-0.79476233711466193,-0.29248163336887956,-0.27638171636499465,-0.77385042072273791,-0.42485238937661052,-0.14124665968120098,-0.79976749629713595,-0.2900945208966732,-0.15651965863071382,-0.44425112055614591,-0.57626999216154218,-0.97892961883917451,-0.45524903782643378,-0.4743861653842032,-0.47203261614777148,-0.28302462236024439,-0.81489217956550419,-0.8578710372094065,-0.91831028694286942,-0.18750257370993495,-0.53590638027526438,-0.3442133073695004,-0.9694452213589102,-0.42593014845624566,-0.56501583801582456,-0.65775527618825436,-0.44213504111394286,-0.36042152787558734,-0.3612178647890687,-0.91747582983225584,-0.96578258811496198,-0.52983162133023143,-0.29009954980574548,-0.85839188727550209,-0.83067605528049171,-0.34244336001574993,-0.40661752969026566,-0.61068553104996681,-0.39193508448079228,-0.051499916473403573,-0.22764041647315025,-0.035600647097453475,-0.94372638873755932,-0.14871102175675333,-0.14527485007420182,-0.71211381116881967,-0.61571567272767425,-0.91941760154440999,-0.60038103256374598,-0.98498617368750274,-0.67458251374773681,-0.45837357151322067,-0.44460989022627473,-0.21688107959926128,-0.7045798902399838,-0.94033829611726105,-0.63388000219129026,-0.15159332240000367,-0.65095167071558535,-0.36349894874729216,-0.36977594997733831,-0.13472968782298267,-0.33555791969411075,-0.5265049219597131,-0.0079036606475710869,-0.74215701594948769,-0.055638735182583332,-0.9813946841750294,-0.64965213602408767,-0.97062657354399562,-0.80700205522589386,-0.32999977190047503,-0.080423855455592275,-0.98460971959866583,-0.71130794892087579,-0.91272158268839121,-0.44914057804271579,-0.19204816431738436,-0.080675841774791479,-0.77951846760697663,-0.90995147614739835,-0.94880471914075315,-0.74230369902215898,-0.80429773963987827,-0.57295204559341073,-0.36943922541104257,-0.42227671225555241,-0.59804722084663808,-0.10047860560007393,-0.090598706156015396,-0.78177438513375819,-0.4958189323078841,-0.032968112733215094,-0.56241985154338181,-0.56601862004026771,-0.44588550459593534,-0.21517757559195161,-0.47806394565850496,-0.47476615733467042,-0.70633248332887888,-0.66872315108776093,-0.47491125343367457,-0.56840635347180068,-0.31235357001423836,-0.28209840063937008,-0.18361694971099496,-0.083787925308570266,-0.50894712237641215,-0.10997201362624764,-0.67904650280252099,-0.86529394099488854,-0.89681802922859788,-0.88008724804967642,-0.41235967958346009,-0.10654757544398308,-0.96602712082676589,-0.34691445622593164,-0.39630127348937094,-0.95972192357294261,-0.060128299752250314,-0.49528404022566974,-0.086375141516327858,-0.10554653778672218,-0.070510387420654297,-0.61427153483964503,-0.87743189861066639,-0.70794812170788646,-0.49576209136284888,-0.76596343284472823,-0.30937553872354329,-0.79905164777301252,-0.029031322104856372,-0.61969394003972411,-0.24310565926134586,-0.40520985703915358,-0.47058954858221114,-0.73161403089761734,-0.21322052855975926,-0.37755735614337027,-0.78479492361657321,-0.19543269160203636,-0.64452803949825466,-0.89602873707190156,-0.90377582213841379,-0.27075968729332089,-0.76193464687094092,-0.35140973841771483,-0.30726428143680096,-0.52534537087194622,-0.86862492258660495,-0.06708789081312716,-0.1667845007032156,-0.90355632407590747,-0.47873576427809894,-0.40089307888410985,-0.58791098464280367,-0.76643528928980231,-0.38810897851362824,-0.96767166024073958,-0.89584492309950292,-0.4201407425571233,-0.056329670595005155,-0.157801846973598,-0.46704538911581039,-0.44310300867073238,-0.52418266283348203,-0.16011700872331858,-0.29877356206998229,-0.79504772857762873,-0.47984555386938155,-0.37874511582776904,-0.58308708248659968,-0.82597911031916738,-0.88246507220901549,-0.71046018181368709,-0.3578538631554693,-0.98149707028642297,-0.060152438003569841,-0.29850361496210098,-0.31333129294216633,-0.047908633016049862,-0.23392922640778124,-0.25099066295661032,-0.79939118050970137,-0.24327261070720851,-0.068228938616812229,-0.45791091932915151,-0.92017874191515148,-0.71793713001534343,-0.049024188658222556,-0.75512515334412456,-0.40605402993969619,-0.71368178282864392,-0.31859738635830581,-0.036865590140223503,-0.70030742674134672,-0.76930465153418481,-0.84870472643524408,-0.46267858776263893,-0.6828601392917335,-0.79499174957163632,-0.16609917115420103,-0.56595870177261531,-0.58709352067671716,-0.85778803378343582,-0.16079538036137819,-0.62441623187623918,-0.050403116270899773,-0.20643937028944492,-0.64233434782363474,-0.18718435009941459,-0.05939697939902544,-0.09620909346267581,-0.9479902945458889,-0.45962426345795393,-0.6939305851701647,-0.18213669070973992,-0.41776665905490518,-0.29158335621468723,-0.3860996994189918,-0.95679115084931254,-0.070286265341565013,-0.85405402258038521,-0.097333186073228717,-0.76666434039361775,-0.48609066545031965,-0.75329892244189978,-0.39484203164465725,-0.82971726288087666,-0.12095045135356486,-0.76494316081516445,-0.64926132769323885,-0.72453892393968999,-0.23323027510195971,-0.048393375240266323,-0.68567476631142199,-0.65332901570945978,-0.26803060132078826,-0.70267806923948228,-0.022705288138240576,-0.59557379665784538,-0.19230762962251902,-0.69776257546618581,-0.39322809013538063,-0.24268891382962465,-0.9652251114603132,-0.64025610452517867,-0.87685207230970263,-0.87510043126530945,-0.26991915144026279,-0.38281744183041155,-0.10640706005506217,-0.64448054390959442,-0.66280868230387568,-0.63706181431189179,-0.18765041790902615,-0.93151171179488301,-0.80814138241112232,-0.13283812766894698,-0.76168092573061585,-0.54210380231961608,-0.6422872575931251,-0.9223846138920635,-0.33842072170227766,-0.095078807789832354,-0.069669818505644798,-0.71830411441624165,-0.89281682763248682,-0.38612215686589479,-0.7010734376963228,-0.33814205508679152,-0.75349319935776293,-0.79997540730983019,-0.19461402553133667,-0.040013773366808891,-0.62393502634949982,-0.33489401102997363,-0.90129191079176962,-0.45870015840046108,-0.39057579054497182,-0.13103112671524286,-0.34240054874680936,-0.44295252952724695,-0.58319763257168233,-0.97860188386403024,-0.3574810593854636,-0.5173194445669651,-0.97531299199908972,-0.19201441877521574,-0.31086090137250721,-0.26399063738062978,-0.087939959950745106,-0.42769560497254133,-0.34208436426706612,-0.9910151488147676,-0.39454922103323042,-0.28171953721903265,-0.10061012278310955,-0.55057340255007148,-0.95572624146007001,-0.34038322861306369,-0.94608921767212451,-0.2467916551977396,-0.095876909326761961,-0.19526098575443029,-0.933089564088732,-0.97084441944025457,-0.001289277570322156,-0.22018273407593369,-0.10400956892408431,-0.43264950811862946,-0.10037664626725018,-0.92388337547890842,-0.28095808927901089,-0.74837817461229861,-0.42600879794918001,-0.8665454713627696,-0.37745215045288205,-0.43552607577294111,-0.70307688810862601,-0.45901871868409216,-0.32943537435494363,-0.93107854737900198,-0.88437512307427824,-0.011569132562726736,-0.69823624286800623,-0.74890456348657608,-0.47454779222607613,-0.68452700530178845,-0.83175515197217464,-0.69934304896742105,-0.42427648673765361,-0.95796095812693238,-0.8101380888838321,-0.47209870046935976,-0.81066857185214758,-0.74397766822949052,-0.044358402024954557,-0.59129000594839454,-0.40333022503182292,-0.052487354725599289,-0.83363837259821594,-0.08071902790106833,-0.81502634123899043,-0.87875632802024484,-0.0882852200884372,-0.40805516648106277,-0.18310256605036557,-0.64034782652743161,-0.4476555697619915,-0.28069306327961385,-0.78849242650903761,-0.4764489158987999,-0.0068464668001979589,-0.73915664246305823,-0.93306060670875013,-0.50692069414071739,-0.81930044200271368,-0.14416409563273191,-0.86675621452741325,-0.2755937185138464,-0.45436252444051206,-0.80088969878852367,-0.66850528283976018,-0.84271412435919046,-0.28970754984766245,-0.62952448008581996,-0.45560110034421086,-0.13772799097932875,-0.5769695108756423,-0.31523737101815641,-0.83574849250726402,-0.36580211785621941,-0.53931763605214655,-0.85867670620791614,-0.9434060831554234,-0.92069775308482349,-0.84187194821424782,-0.12385465414263308,-0.05687703238800168,-0.57957129506394267,-0.93355626543052495,-0.5123363914899528,-0.61193947540596128,-0.53967450791969895,-0.0093181964475661516,-0.48432275536470115,-0.17639182950370014,-0.72800560900941491,-0.91944761504419148,-0.76842016633599997,-0.28614609781652689,-0.10046592191793025,-0.9436576240696013,-0.091302677523344755,-0.37811301951296628,-0.39635714259929955,-0.84968010731972754,-0.63476352347061038,-0.057896521640941501,-0.40140949399210513,-0.99573517148382962,-0.33151285909116268,-0.031138099962845445,-0.10543590993620455,-0.1665637253317982,-0.91266447864472866,-0.40751204895786941,-0.46098965057171881,-0.54666586010716856,-0.57155006751418114,-0.027355260215699673,-0.38284650933928788,-0.14644766203127801,-0.44112412142567337,-0.56084574409760535,-0.77414930774830282,-0.76259483862668276,-0.8954804721288383,-0.1583979504648596,-0.99002234451472759,-0.6742451039608568,-0.94084669440053403,-0.92331548221409321,-0.6773476239759475,-0.89663998992182314,-0.22052349545992911,-0.22145534120500088,-0.66452141315676272,-0.35317510250024498,-0.38043138664215803,-0.48973895539529622,-0.0071142821107059717,-0.83831538446247578,-0.35199430212378502,-0.89242744352668524,-0.46022417605854571,-0.7675189299043268],"expected":[1.3981432641518734,1.316533515531785,1.5536977520362254,1.3210420571489536,1.4766443796341762,1.3804997606084002,1.4364325962508269,1.5155577951639059,1.4258729295236254,1.5225058880015319,1.4710835464766143,1.5589609123139507,1.3119251730007002,1.367705969986752,1.4944841912638533,1.5552635458910951,1.5431989752891651,1.3321801562281652,1.3125088762639057,1.3669498043846082,1.5079916209956967,1.4407384720879295,1.4897447189388213,1.5063534174321931,1.5696737950905504,1.4411630040913872,1.3544557561812114,1.3300948357844766,1.5405552928630699,1.4740548556459157,1.4529805815294281,1.34183107571536,1.3303686659629534,1.4612964266574489,1.3628572270510864,1.4353500753957134,1.4886637829184188,1.4478745242841504,1.5017926703267024,1.5562883396462022,1.3301665127191353,1.4096759397323226,1.4083259980628549,1.4586061706109887,1.3527023471717172,1.3667988190766651,1.5416965359325485,1.5077209080537812,1.3740152511729393,1.5322507892012955,1.5189365780264135,1.4622806659361138,1.3611144829608086,1.3830061621434819,1.525941662503665,1.3510812772835916,1.3464966263998592,1.4958320252673849,1.4872298223531564,1.5556931916817791,1.3167214997232264,1.5207753144069596,1.4530749724538088,1.3630569054565822,1.4327503561017623,1.5630372030290429,1.3864664030999692,1.5660460124544329,1.3513794651314284,1.4358018066998863,1.4975292700652754,1.3532447673700405,1.3380660311611878,1.4047070644587276,1.4130568251198801,1.3827252305449462,1.3133237319844306,1.5553794978750841,1.3461664405502716,1.5660273345013651,1.412096477521811,1.4128251959097078,1.5124705167465717,1.4322796908025417,1.3372151877025378,1.5143859768759413,1.4790292471650801,1.404388848976907,1.466894705761373,1.3826079809466896,1.3172301985397297,1.3219459390437851,1.4129867191355625,1.3565444069544608,1.5597386545252396,1.5171338155190193,1.3317228932642138,1.4543490206709431,1.4823479619963615,1.3471500276233519,1.4520216871013998,1.3284534008875233,1.4399617775939897,1.4402461079329258,1.4153959213934235,1.4965641464489092,1.4330068478252542,1.490063946538889,1.3980122671859592,1.4406361549666418,1.3249065602342325,1.4803836482834081,1.3676063209263754,1.3951485194507447,1.4313078032150597,1.4690361469117539,1.4505827504709063,1.3457459797524232,1.5446222565093348,1.3253626512955825,1.562173804628082,1.5181682524813525,1.3281550816052106,1.4855026122036261,1.4585071056456294,1.4930618685480375,1.4422629785540115,1.3235445848898237,1.4093109694351604,1.3269778559118095,1.3819363257535946,1.5250382076523383,1.4097391186925017,1.5413657730689325,1.4611399572489274,1.4789537178992103,1.555298981480856,1.3158036703240208,1.3273072915272619,1.4744369172692959,1.4993060945554066,1.4132191348179186,1.4390534615471766,1.3928974891510693,1.5379217103211758,1.5146198485669302,1.3295755590121889,1.3953898411691541,1.3681846394379531,1.4451918928793597,1.3203506912335063,1.4748547678055888,1.416762157784758,1.3147201629203698,1.4900672729158386,1.460886787650336,1.3659886065239695,1.359620566883373,1.3539868476124033,1.343275200559862,1.3764119598849727,1.3376186596740807,1.4043509553844693,1.4412352421459003,1.4805846993169023,1.4996423387658351,1.4181970453001262,1.3320270855842342,1.3878513736287617,1.4869607508544789,1.5355321902981318,1.3307565920138937,1.5574134340488606,1.3112265973293207,1.4491889725127467,1.4513644669660859,1.3354717428258354,1.4608353207490574,1.446464315823885,1.5355848064004463,1.3879664199517079,1.3381523887156428,1.5673551462522273,1.502107546511126,1.3668052129369146,1.4129703092910633,1.4713036278311293,1.3513810984566248,1.4245835571849281,1.4349805909230611,1.3474846004990233,1.4481158226433564,1.466422483641229,1.516226837504087,1.3201428659473839,1.5306191394747639,1.3457326149614013,1.5610597382468923,1.3192647193126981,1.4015325192297658,1.5283571580739683,1.438762972311056,1.5129909080346362,1.4033299019312144,1.332810330447922,1.4298744355035669,1.3942585300081296,1.3490025754812445,1.3332065560005415,1.3466804488513979,1.4341168648248341,1.4267347790946736,1.5514685208160341,1.5182597624454133,1.3603917445084479,1.4526627207261431,1.5668390204588065,1.4788863503900498,1.3805003241948099,1.4170054693633849,1.3505645689543526,1.3613855151009469,1.4596646629493597,1.4585553712406458,1.5604829170267782,1.3287775111523201,1.4476639989824647,1.3638560288516861,1.322550768712299,1.4364501377533161,1.3858105671562202,1.5472589621769517,1.3421340328189171,1.3834013183604681,1.3551985393690122,1.3447647138637047,1.3204645348396187,1.3375308990848136,1.5342128260505161,1.3180382698677209,1.497889522045571,1.4420589579732113,1.3856987112180752,1.3472627326615476,1.5104304393355377,1.3345711228338981,1.4855846607194652,1.4092013685922637,1.4474354252488535,1.3185091009465066,1.3904948786715852,1.3814032822634617,1.3826114541456991,1.4713410757460752,1.3272638023273315,1.3984036457710853,1.3786987491544394,1.3366934446060568,1.4280313739831343,1.4299577978547833,1.4061018604975966,1.5209570179041296,1.4539409059320598,1.3283688707794528,1.4191062835407608,1.4403334635663072,1.5046696338291452,1.3556806993664337,1.3288306191245396,1.3307498665734103,1.4068646147753532,1.4290523835033537,1.4387984521739636,1.3894235869137084,1.346278095440502,1.3205938090579095,1.4445715133444232,1.3782518059068773,1.3204156013984465,1.4774894738717665,1.4350713758055049,1.5591461460919629,1.5138388543153991,1.3241731200712652,1.4156692859035518,1.5006810920231879,1.4009639788569415,1.5543349563468454,1.3387687033219877,1.3210771073314422,1.3161038704766139,1.454740785683478,1.4864540022715034,1.4966876479186024,1.4987846336782316,1.3559383239512532,1.3682404235134769,1.5423074969177284,1.3322477262269037,1.469729131404093,1.3861681922029596,1.4164871743048504,1.5093902398085857,1.3518627130460317,1.5136497771134523,1.3725493160087066,1.4594978876034066,1.4274283386322781,1.5554848663036451,1.3342023808855483,1.5491464342309544,1.477965616349493,1.3317701162613256,1.5045621010166061,1.4547314475106303,1.422240344365884,1.4110132667293098,1.3987416804874198,1.3231023883545496,1.336700775437708,1.5328076392714243,1.3398654312392457,1.4150513115867791,1.3486596027708175,1.490977051951561,1.5064853865496157,1.3219645628286776,1.3675451415800293,1.3616606965663969,1.4513348854944212,1.4555090091546217,1.4006364070058102,1.3357748368479911,1.3723132450822708,1.4520228959994397,1.3147369884585625,1.3884040915599725,1.4458045560540052,1.4892373434352633,1.4880687799763181,1.4560260716305393,1.3999098615809673,1.3876183833486928,1.4412671571206255,1.369625184773823,1.4240734252900882,1.3783592406274479,1.3790018320839934,1.540333779691144,1.5541006588264357,1.4050734513142054,1.3188450127886644,1.4017873216076595,1.4481956586650568,1.4045746785881683,1.4995839393260799,1.549945866844447,1.4394610724712571,1.3527139612559063,1.5603607742245984,1.5274418160122667,1.4037659959068238,1.3145869058833151,1.3283386334832772,1.3787181656636547,1.3366810439181742,1.4893393063317071,1.3798210730136169,1.3789477817956306,1.55842208419341,1.446601745122635,1.4517207252576314,1.4042958706695974,1.3316168273664011,1.3128429593950879,1.4000795904587862,1.4412720147511631,1.3459401351960849,1.4419393148544666,1.5529562696816255,1.4550470688647688,1.4973482050222062,1.3789294147084208,1.4535111840451449,1.4140803958489516,1.3712038766310584,1.4700098578947129,1.4161155177104678,1.5293175832972379,1.3249282094029529,1.3209878819940419,1.3145475129172914,1.3290529521453709,1.4217154626348818,1.4551491750689969,1.3408407133689777,1.4887339811310492,1.320550132554436,1.5660995756216012,1.4153771878036105,1.3341826121786218,1.4892920528866631,1.3837764770886833,1.3835686189291139,1.462625610619871,1.3745809969106659,1.3863189802904941,1.3142937799428329,1.5209411191512801,1.5505902516895949,1.3679030594894854,1.3382065253878326,1.3357499796884789,1.5634313155631334,1.4616037879819197,1.4951026047899441,1.3493666349372127,1.5196163466833634,1.5226642634990113,1.4513243164671095,1.484765826535025,1.3323856779729575,1.396344655077171,1.4973182501627245,1.3110699077596544,1.3193428402520095,1.3388478758750841,1.4353519375610333,1.3640519616500886,1.5005830442808077,1.5240025694626915,1.5320285353806025,1.4418541340442235,1.4140668813694384,1.3742038107463244,1.3915866515552018,1.3662663242325408,1.4257203398549312,1.4000867500640282,1.3952878748552273,1.534921184820647,1.4179961738440248,1.542563450696278,1.5097970143115094,1.4170518065452462,1.5373573190044112,1.4490008178299967,1.4347101452618984,1.4751618588129658,1.3275659405460178,1.3153147528005722,1.4431388084565357,1.4348624928884628,1.3431447161716281,1.319424932904725,1.3182999754695519,1.3970812975608145,1.5487642841922686,1.4078358526839561,1.51921577383929,1.315082933226865,1.5598153157641623,1.3228347311838393,1.335346406721688,1.5421476411235504,1.3393877764293904,1.4243128979201001,1.4485706612844926,1.3842975497661774,1.4716144532304483,1.3836572983652933,1.3766202360900823,1.3392199996151717,1.4172920972388587,1.338876085140104,1.3483925471968194,1.3807212730384419,1.4745453648423663,1.3774394555729645,1.319265929257575,1.4949599601937551,1.3518605637311072,1.4124665222435224,1.3318188038395939,1.4071262879360644,1.3625779475801085,1.335321800061168,1.3631438603782555,1.5288263961928343,1.3785945061401959,1.4621477434359194,1.3243824675163787,1.5114553124052976,1.3356110708665438,1.4570287833637632,1.3253076728752402,1.5645370463236545,1.3343095376764786,1.5629488055622696,1.4214032901224014,1.3590946720386625,1.3365218916641712,1.4481756569382147,1.5015627613410472,1.4778378060734065,1.408113740459781,1.4152839649243647,1.5239328982351434,1.5163392963974018,1.5478315754227381,1.3470259757407341,1.4217343379354495,1.3339561471924863,1.3230568845961896,1.3115258455139751,1.3129850711502518,1.3395280058690811,1.5564196568239079,1.4243174699547243,1.3632957923493256,1.4183839155779896,1.3743517188574856,1.3884662275389266,1.3462405151375822,1.3719047207888657,1.3789191237559106,1.3116622629913137,1.3254569965553549,1.5049341406629158,1.4934323291850677,1.4519876521585855,1.5585845506563942,1.4031775136014419,1.3201948806281987,1.3578370211738948,1.4211571657392634,1.5011105809837981,1.5522863667129312,1.5077765531354401,1.3969326750074142,1.5171324399798685,1.4953070241590285,1.4077191463540153,1.3143027138346528,1.5594757146280607,1.4849107988065307,1.5134726313240643,1.3895326391190739,1.3253367055401899,1.4985527578714781,1.3564979111408899,1.5261527256857821,1.5056900697799824,1.3414640269626352,1.3931965385820124,1.3216132343133629,1.4074920117424554,1.497675184535751,1.5522666274066346,1.3697549624268177,1.5573180501905026,1.4575294414963926,1.4891094366248689,1.3277483761223008,1.4347576581699224,1.3356270098103344,1.5392558977577091,1.5458974248866022,1.4146069183673307,1.3665035778396883,1.3420869746721631,1.3240432826510711,1.3752532078629138,1.440685755769237,1.3688568552819995,1.4540356547477606,1.4305192202012962,1.3254406181960243,1.3232794136561898,1.3484890163635024,1.3235575368022581,1.5002682387541852,1.3422389419233161,1.4705231481887249,1.550744235953873,1.3164686815261415,1.5035897043154758,1.4469861428554776,1.4725572947186847,1.5541221774578167,1.5593033960481912,1.5302376214633311,1.5701790745562909,1.3569517733030096,1.5659043047840462,1.4592988450956876,1.3389691802455872,1.4169765996074792,1.554861169670567,1.4083491326150788,1.4233766917893442,1.3884817539885153,1.3245059877065042,1.3181422242168397,1.3721696504194989,1.3625030732095627,1.5318937853624048,1.3617739352541027,1.5113259727661319,1.3462495691747074,1.3114471153196166,1.4554792424025895,1.4524840106671832,1.569027278479127,1.5010456535409054,1.3912595828218852,1.3580532745624094,1.3152848356597047,1.3226587552673053,1.3615455674449619,1.361805390102605,1.4285496208341804,1.3298764199940267,1.4177375104870269,1.411726198612709,1.4166266438454509,1.3962290704937383,1.5237017688633787,1.3875729333643654,1.3847490331975987,1.5289563865290168,1.3122100413207634,1.3966197562408291,1.3360057534566412,1.3661717481463607,1.3250712058619951,1.3197262704917883,1.464152164191082,1.3527235341408637,1.3556211584615707,1.356822960488008,1.3494200980152644,1.3162810784283285,1.4565699023724767,1.4701668555596865,1.5037839793761942,1.3123908401389683,1.5043923976701925,1.4444606791281722,1.4681255392472732,1.3937196268922463,1.425109040079602,1.3588442164283148,1.3268421698886623,1.4558983044410185,1.4956980976912881,1.3740053362919868,1.3353639524331757,1.3300565358502634,1.3122350816636807,1.424675012026839,1.3778978079627322,1.3418623396727374,1.3827901220923839,1.5278008690931102,1.4052937896105135,1.45984318547611,1.5579829617159315,1.5156405355699476,1.3476032339070081,1.4882984787263009,1.3501989920594821,1.5022761227472041,1.3683740493322567,1.4504777178543766,1.5405242114114603,1.4725489375844854,1.3429955129155084,1.4661994385599613,1.4353610153316192,1.3741514026092758,1.4778506006802046,1.4236786853135339,1.3157846548260943,1.5242663903193661,1.3281784877510394,1.3208926366979901,1.332787146254512,1.4158365731375651,1.3446697765160993,1.3994844246107163,1.3955503801180342,1.5351065659654675,1.4150410728135914,1.4497154060829986,1.4557455142206752,1.5641974941468773,1.3630068258243129,1.4375725066101761,1.5690511686571351,1.5132706721420486,1.4072876583155205,1.4080971178907518,1.4119157241029703,1.4271449280089623,1.3797382651486576,1.3446734423004347,1.346486340866919,1.4508939472539228,1.4020382767043187,1.5565457663642226,1.5659630049702316,1.424280039594719,1.4013391405613762,1.4107227210005746,1.3608472307881607,1.4980084512898679,1.4046261001503184,1.3279890290856018,1.4696074299847275,1.5268868552710182,1.4074861536011707,1.311719000951127,1.3362270481568359,1.4186077895675584,1.431197167731171,1.4632647895343218,1.423047209609809,1.4324571375899311,1.4939266251651793,1.4104407720608292,1.4177500833234467,1.3740566664045251,1.4802780750869546,1.4419423885098783,1.4874047670860053,1.5382633246074033,1.3914392372083126,1.4644281349307418,1.4635018387964716,1.550483077706696,1.4193915676356592,1.3291901691261629,1.4439736632212772,1.4184827271846674,1.3375566191850918,1.3312810956710885,1.4436031472991524,1.4271550800329134,1.3783995232934387,1.4662348016800864,1.4008565902537624,1.3384495878792408,1.3576852084661251,1.4929298867156773,1.5160854104235417,1.3916335073579023,1.520850009609926,1.5329937413974912,1.3306984726557611,1.3711373123138755,1.3398512629777355,1.3220916386883703,1.3369241848512319,1.352785652613737,1.3849344000640758,1.3261365781059926,1.4447682455700885,1.5518421160672748,1.4370435795147571,1.3139564815110965,1.5357307395363011,1.3321451208813397,1.4349119859623003,1.3132455932661944,1.4852155741941959,1.3521259689776088,1.5221346422297068,1.3130695182832812,1.5532152092742344,1.4531055582553496,1.4941424305149122,1.4199766053975265,1.3697323960929417,1.3581384480565983,1.4837756387934444,1.3475919715833848,1.4962152846806644,1.3276426362736697,1.4260816426202707,1.3846676895662291,1.3546045211010054,1.312418973307157,1.4875607953502206,1.4422437339701806,1.4776902204057942,1.4105373843882223,1.4963884313587255,1.3713690757628241,1.3392144375059527,1.482721416258314,1.387915300812345,1.5128431336596053,1.317090336239235,1.3616553479790039,1.3270911036980149,1.4192859754899063,1.3573590038637811,1.4028044786944218,1.3771523466746394,1.3785958369315132,1.477280683573178,1.5127742753633187,1.4298444078717301,1.5639880437532807,1.3759471084835337,1.4486943923332907,1.3122265163083016,1.3451044394211635,1.4261803734518539,1.3337402333724324,1.4177127066093442,1.4361889159926822,1.4204735446398089,1.3758084418005427,1.3298814629232931,1.3628625775682703,1.4469383324670766,1.4284353889571439,1.3850038050053426,1.3449538391564431,1.4608317869707765,1.463272878339283,1.3447198717852773,1.3211038385473952,1.4518774914163555,1.3171511273946315,1.5418546243530606,1.3667394939853363,1.31624033616267,1.3251208541738031,1.3659009530238722,1.5337947217411987,1.468865844881321,1.5152603842692451,1.4774416618278789,1.3908630946577509,1.5565777047737315,1.3427177787132167,1.4043994906138395,1.3989400989786218,1.4176832225739315,1.3956074201114734,1.4650858850119193,1.4779937603316331,1.5599601927978353,1.3933456763515866,1.4624868980889176,1.5523676281197802,1.3870649160805737,1.537846093877099,1.4101391511339132,1.5522212425654711,1.5512297343146302,1.3796555841887321,1.3747271214203318,1.3675332637836557,1.3628416058463062,1.5289339933918988,1.5013702476999617,1.3508696379317067,1.3792228537054898,1.3352494160976607,1.5296814056797603,1.4208630716227681,1.4951706496209949,1.5355249327193741,1.3214373643361943,1.3924348886948741,1.4617422673492899,1.3520312994698425,1.3213506065799456,1.325372369526588,1.4271539254881203,1.5454550370118343,1.4795983725587725,1.4422895036965027,1.346745673177774,1.3867115835451225,1.5086714091687192,1.4594109470857812,1.3725616204604296,1.4975398755590088,1.4005828787158876,1.3768954685538828,1.5622514271228136,1.4673560369791565,1.3200489979761603,1.3496145668290387,1.3331512434126371,1.5549492553473678,1.4532728639906458,1.4729630654000476,1.3137749614244747,1.3422629600941769,1.4370312478348786,1.4018538624312937,1.3461890725694334,1.4504890523844378,1.4373093402469643,1.544327874581165,1.5285833171424326,1.4230905386396402,1.3242338077491527,1.4486971100223769,1.5105487981419718,1.4639401435948296,1.5660980612836255,1.5418733840152572,1.3207029177595113,1.3395048544020323,1.3769968978753009,1.3931715893298215,1.3359902262969219,1.3723114808254717,1.4467112468553782,1.4677158456765118,1.4563264938056408,1.5303240801830078,1.4767808802431688,1.4134328323400098,1.3675989429244155,1.5018933659916072,1.442301900092765,1.3753496626526258,1.4809428481799678,1.4283426255404204,1.4241129385914326,1.3892801518045972,1.3314474776003324,1.5324762400697327,1.4873304255055695,1.4625941620724709,1.3346407822681579,1.5092270431552171,1.3668616961293796,1.3312735902895771,1.3147686119004052,1.3651918556162981,1.4011134901364499,1.4898378352932755,1.3275816006670687,1.3520912857659331,1.4020130061196321,1.3171520247466497,1.4045446406566762,1.4003788312028922,1.522850644784516,1.5468464547098411,1.4570874832232796,1.3615835445461759,1.3335591134157985,1.4335019381253971,1.4225143235694324,1.3826729868657828,1.4945608532210817,1.3158432650469554,1.5006504109822028,1.4158411384255438,1.3168552047676001,1.5087734608383665,1.5398278213542091,1.3609338798904993,1.3245474240818511,1.3193061640940738,1.3783548004668855,1.3583309709737197,1.4749481489100347,1.4582240631666166,1.3629659824215963,1.3759998352876643,1.3745770600568832,1.4578755567360315,1.5603509280514849,1.3133521358010225,1.3134907725368168,1.4748069909062673,1.3638886984680152,1.3898137417214909,1.3789440650384484,1.3170509325527635,1.5090807207828585,1.3932396993949618,1.5186330795415348,1.4742854301960526,1.431091642608425,1.5412016480074275,1.3730073769381703,1.564575142210292,1.3863394490974794,1.5643457455697405,1.3525133933220146,1.5322924600804657,1.3902777826167028,1.5217049666274136,1.5394804344373691,1.5003341802338639,1.5363168836807424,1.4296592864777298,1.4244568250767027,1.3962261971252015,1.5562424854893115,1.3345276559530992,1.3132520806889705,1.4565042932166909,1.5125258433499578,1.5211132981004003,1.4331576988516763,1.3642132228230421,1.3183178210975013,1.5131136489741639,1.5077657468199139,1.3238871907296914,1.33506474955239,1.3870062194275512,1.4692653921711136,1.3628590183932356,1.3346910858520542,1.3395218377559615,1.3447660082966277,1.4499399233182526,1.5654060430007337,1.3731569056561759,1.3167860960955875,1.5550987193452444,1.4827183842401708,1.4154086701875839,1.5159810001941381,1.4809541420936565,1.5693604038138884,1.3133075794197515,1.5328321977770227,1.442957374548516,1.4415815666053728,1.435261950302001,1.4604102044235614,1.5023935976211156,1.561865708878156,1.4566017923072689,1.3350016119204506,1.5259987305710228,1.5198259214725398,1.5344307602446123,1.5202965222456142,1.3393875475816175,1.3388633246937063,1.347358327892094,1.4721919503367806,1.4971547180564548,1.4069302166129432,1.3220278022967931,1.342270297212564,1.3895184076481797,1.326302726364476,1.3696138628760308,1.4003781832557609,1.4796192340252219,1.3117186314177629,1.3301582298147334,1.3644842338691161,1.4976621219043993,1.350461146842963,1.494551224437447,1.377446868107874,1.4238690439661199,1.4925233316639381,1.3597598690888502,1.4702887754256264,1.3239241837067266,1.347131700255328,1.4485131971257974,1.3663333618496389,1.3154535039388846,1.5145284550536355,1.3222745900176895,1.3882089404467053,1.3350061004298122,1.4946275927768997,1.4037203935940537,1.5658240086808535,1.4615141128113356,1.3974839514437349,1.5184526969683676,1.5651941663188729,1.4153520730860463,1.3862486553683389,1.3198367581485895,1.3681934662050912,1.3726053415973705,1.3728595116276725,1.4528783625333317,1.4271995204654147,1.4957034875954653,1.4511789763972516,1.3673000421594796,1.3578583542952931,1.4152091397313573,1.3566414272400378,1.5059709093197049,1.4616974096104003,1.4402142514255132,1.3678636005506408,1.424894130419619,1.3595386967588443,1.376320607350638,1.346889038015886,1.3945544866678983,1.5023587779297096,1.4981165436680701,1.4532199036422444,1.379037239055662,1.4382325667667359,1.4065977626548625,1.3217188394312882,1.384528598805866,1.5695019481824681,1.4635820364878367,1.4358899773436011,1.4329876043808518,1.459068970497813,1.4557070432836756,1.403728270248499,1.4135418338476533,1.4126371229687842,1.3914971094940947,1.5679619258002802,1.4102032177592545,1.4658884325896191,1.3231147772642162,1.4072922041651312,1.3944008923307107,1.4674726003119933,1.5588653630558293,1.5289790264624981,1.493920350576317,1.5584217269994871,1.4780699323738444,1.4666982890993432,1.4892226384808007,1.3336380810367785,1.4864266829050505,1.4265445159568919,1.5141471305015834,1.3188963810919354,1.4906204588997529,1.4426393238054207,1.5625156125456343,1.377605659657424,1.3315151487082713,1.38522727001323,1.3909499685747195,1.3413619039670732,1.413775063550029,1.4398817782994842,1.3607484613195062,1.3643439806769246,1.317679761489527,1.3563325048752923,1.5608783429716735,1.3880113718631046,1.4772947049845246,1.4070573718026533,1.3385561457079187,1.3823887893186473,1.3385424752762254,1.409350767644012,1.4709026341959295,1.3532492163784842,1.3875058153584059,1.5552756554163474,1.3249385850709055,1.3986328975651452,1.3943572373580291,1.3947612622236456,1.3375899565105762,1.3686148904868809,1.4996819106263675,1.3990937743068312,1.5444301323402787,1.5452732037833388,1.3118699458119374,1.4409747803837818,1.4552212436591869,1.5503431468686042,1.463284506845504,1.3689163312563841,1.3598161752330449,1.4398760690831705,1.5141173408785193,1.3961385231749339,1.3683266323253949,1.500233700635486,1.3158471983883804,1.4796162423194235,1.328100641175521,1.3941933950913012,1.4993515509664523,1.3461325312492227,1.4728363300744238,1.3457656705941361,1.4947644638768538,1.4488672050726648,1.4479983326310759,1.4778282789236379,1.5082492811014896,1.4715896716102894,1.3173264610252913,1.4998097817490816,1.3931147689666532,1.426335517157701,1.3589941081537291,1.3268677952600925,1.4110359363512315,1.4126736523453864,1.5269005459337124,1.3967578548673878,1.3655006213266327,1.4161665933688681,1.4412884559182688,1.3800141383392655,1.3157325487383491,1.4824333306400592,1.3399665850995932,1.3861938711909518,1.5110427484436117,1.3969689183469389,1.3478215355516083,1.5533907639619955,1.5096842071014607,1.4978773021072471,1.3779038721616059,1.4090769783839072,1.4611668634671493,1.4160466235608868,1.3204934758800146,1.384641179471628,1.4796580894727573,1.4258112733886512,1.4156087718971682,1.3910384889755956,1.5492136124428462,1.3984747625053209,1.367432638150377,1.3832039587932525,1.3865005623724986,1.5575786281509909,1.3319711616378875,1.3465640385381701,1.5572596522189504,1.4964718474190983,1.3994251044897268,1.5283324234258548,1.3264601694340572,1.4723364434520936,1.4743946315755838,1.5030513775581389,1.4174240989300764,1.4580868290092635,1.3757103547524947,1.3518886883658061,1.4854896183470685,1.3510269195734483,1.5117351556953027,1.3857019475664705,1.3598356437133068,1.3825612256903252,1.4243847150501197,1.4257963892776078,1.4000511881961109,1.5242135370762668,1.3404565896861738,1.3353582073600136,1.4416474704514854,1.5209686765998485,1.5470616955526135,1.3338178847344557,1.3308310576011142,1.4457575447076492,1.5335862712940658,1.3945079789328434,1.4284936126743026,1.4062408072156014,1.3982123715316142,1.4285691656228061,1.3394164104290094,1.5137388087480397,1.3585536623010877,1.3169301153856214,1.4029461507274139,1.3235622351481147,1.4239671004529371,1.4216694422959995,1.3815782514699897,1.4103721654291161,1.4915411755220143,1.437876059065287,1.5271919052096001,1.4875204988709838,1.4795928163505077,1.5440231418500603,1.3933360858032937,1.3747465584277694,1.4426411305372018,1.4259603139948756,1.4527323355903003,1.4019399337658915,1.3345937872961755,1.3341840368495617,1.414794613152162,1.4112727797089588,1.371877232780343,1.4181691875603031,1.4358211679358626,1.3148672868623401,1.5493276651902732,1.4551674978089602,1.3981144493829767,1.3806053752742518,1.3169825465098171,1.3305033955497616,1.5441338832394069,1.4250101885448743,1.5425187856427596,1.3517203059985829,1.3823943360130253,1.4606384576687133,1.3611442620314103,1.415125482756294,1.4958527804720005,1.5293145200195724,1.4186210826219068,1.389935632417189,1.4316179101873971,1.4074892254069629,1.4650830058711342,1.3432499168531482,1.3279294040733403,1.3298352253808619,1.5240553723045462,1.4051584676516236,1.5490800197659675,1.5436944903037353,1.3287195860649521,1.5609631698016548,1.5150186302220912,1.3120571614615886,1.5369226960728679,1.3651730548185843,1.3130540413325564,1.3329449172763339,1.4216615379013366,1.4664736244220389,1.4553064460404488,1.3193348159975544,1.3884501596537062,1.5412655318243038,1.455014822438744,1.5210961553333,1.4883578809734259,1.5161466686526486,1.4350606016126792,1.4066204709369523,1.4501930525553259,1.3964545051285624,1.3649752443224963,1.3744307052330276,1.5130048693583633,1.4309188013375711,1.3980898850301384,1.3214165374434126,1.4501113412131184,1.4351558732409908,1.5108962189490587,1.4476737290566777,1.3632830505972864,1.3228160358020657,1.3920362519642211,1.3467966494402683,1.429471972058761,1.3345668636012418,1.4021123932620749,1.4789591364341683,1.3275512775062064,1.4172167375321429,1.4827022484120689,1.3472680292365771,1.3168894686557542,1.4165152289595933,1.3987730978518536,1.5014751509743713,1.3177336126323527,1.4135394796477072,1.5614193804545453,1.3918545724512768,1.4213227337028023,1.4686888779798108,1.5370061698868029,1.3197090884302825,1.3880182407146706,1.361770023614008,1.5281525349850844,1.4880567141031491,1.3601066656301335,1.3340089046660215,1.5367995754569168,1.397500546890357,1.5316796498372851,1.4043346056949455,1.3915106613593959,1.5397010130794331,1.4482986506762678,1.4417826277259675,1.4329401106102928,1.3430361638236843,1.5316626196326446,1.5455879290136532,1.351707441963381,1.4443312498234986,1.3117164366554201,1.4243470366062281,1.5268114364233771,1.3143567446540709,1.3559880226691801,1.4576745207120054,1.3579981857927161,1.3651443244309602,1.4526801648326786,1.3681113939640781,1.3705942068871959,1.5661849450605454,1.5083165366336404,1.4312809894705396,1.5278875840255732,1.3187043104179637,1.5499795048698508,1.4241360262061331,1.3897397525659572,1.399695744339448,1.5004490807094104,1.4123863844928572,1.3403409637772532,1.4286174932522844,1.4483384629116169,1.3448546351586048,1.4691957224388017,1.5526925036604482,1.3267045910414579,1.3311063760738147,1.423559594718107,1.3964136276937016,1.5295837808818127,1.4932453733121493,1.3619138589167736,1.4335793048882135,1.3559189046216065,1.4917029528116199,1.512945365101495,1.3927568968095925,1.414633503500571,1.5417542779471345,1.3394135889371244,1.4216294762265651,1.3550939474229926,1.4329148490515078,1.4574411661002136,1.3587551917340122,1.4317275548387662,1.4728121996064023,1.3678714500914557,1.3355305403114481,1.4475561198297551,1.343176166370966,1.4741663604352366,1.3836503827847668,1.3655104178309476,1.4344428325178491,1.3946898497812403,1.4568468608613663,1.3832669723824611,1.5418249742393351,1.4941310402294212,1.5233448407356991,1.3361381568749127,1.447184570076204,1.5343235059563376,1.4816528855877786,1.3674035672706184,1.3903306920794734,1.4156276412790092,1.5153417923573407,1.4948222462206235,1.4372260364217613,1.462863555367405,1.4906544521532572,1.3389156455273201,1.3165759076695174,1.468506558993744,1.5113557359326859,1.3348909247105469,1.4233365476768844,1.5501916248474827,1.4174701583979046,1.5288334847693037,1.4102450778572468,1.4194781377499179,1.321525522898175,1.4635356273207891,1.361622155444125,1.5618001787539322,1.3516578073557237,1.3342086194574769,1.315022809027689,1.4850976572411274,1.357422328382172,1.5087855980232376,1.3539678483185444,1.4941430737251242,1.3234115675093756,1.3470188727297772,1.5153486573477533,1.3985141704055299,1.5206969982867873,1.3136127582288821,1.4850903719862196,1.3750975888478383,1.3585083090122863,1.3359866374901861,1.3568325228994651,1.4036973201643514,1.3458937691936277,1.4341647044287285,1.5406938960193999,1.497486898468031,1.3990420465051223,1.396428003111402,1.338889309421271,1.4239043382336065,1.3216055395186748,1.5427802713813241,1.369110909282099,1.5332691394369589,1.4278125597547424,1.4270450947094702,1.5269538493598589,1.5339894615735246,1.3566324939184298,1.3203944501904683,1.332936024445629,1.5027876965652334,1.537966271969579,1.3772059296916366,1.4816374899931306,1.3546666390702935,1.398616059071331,1.5072638261114688,1.3341785990793746,1.3801509019526412,1.3116584815278918,1.3419803973939934,1.38302632503704,1.3160774752889994,1.4358283655809525,1.5536968773992255,1.3686450276737805,1.4637885644222794,1.4708453702926261,1.5199580391561693,1.5134645656450993,1.5476647155052168,1.3128383360794145,1.4637608102451432,1.4176092673074969,1.5397936898099132,1.3350534482206695,1.3604556743885272,1.5214236649024169,1.5285575100513955,1.5261481916332529,1.5407355016076139,1.55260448729023,1.3696348172765869,1.3443727704382848,1.3243766803805652,1.3333560119562511,1.4897642100501658,1.4626810029480624,1.3265329695189607,1.3923051825254815,1.4779939409330463,1.3129821010720211,1.4030702876766825,1.3821184783106824,1.4555591842600575,1.5480030061855088,1.3427742863475218,1.5575760235734668,1.4236280754475132,1.4761555797846044,1.4507116330412015,1.3470909969222651,1.3135480150077381,1.4566892380358507,1.408474448573211,1.5447153725153571,1.5288036161197107,1.3326998525201583,1.3320231771516016,1.4320287647301895,1.4017978143676,1.5410769466322454,1.4578901122716414,1.3212055918443018,1.3685007972864667,1.3794648367559565,1.5518321006189866,1.4453823720131347,1.4678282952979786,1.4783324970292806,1.3502179078580658,1.3473058860178191,1.4296032746305518,1.5591755104958871,1.5263611753235575,1.4084990746716697,1.4304049015035047,1.4986672936712047,1.4851254871743909,1.3591745988371216,1.5317990439888944,1.3328656013432232,1.5136722676357706,1.3567471574163483,1.3352455925992013,1.4519704127073354,1.3466735338916043,1.3577936737561063,1.3396621081250848,1.3169053784919242,1.316216554212541,1.4383356435006784,1.3126500636022802,1.3999370562634532,1.4405680193687691,1.4606016254228542,1.4439546205367435,1.4306310780215583,1.5403326636439574,1.3591498828754203,1.4794371407377735,1.3309537827840696,1.3698675694594387,1.4709837144725226,1.4146420149832515,1.4497331568187382,1.3607627435813119,1.407794502399849,1.479220707128363,1.462101711468776,1.3325441186493345,1.4766798038135718,1.4832066925474381,1.4452960683895977,1.5031702806186604,1.331890356158564,1.4829611340830497,1.4210619990574203,1.3776986324585787,1.4498541308784849,1.4373405985964873,1.3670143668158823,1.4081306121723078,1.3233770159293932,1.3269661405646782,1.4577560557179283,1.5093323111217913,1.3280828696949274,1.4654146624241242,1.3696822171099008,1.3626815885265258,1.423876493723875,1.5590139981400326,1.385681983297625,1.3456012817554959,1.5505151159737722,1.3696085098587658,1.3512455087600004,1.3944371873965939,1.5052407479953684,1.3562694018392434,1.3898320026374844,1.3478539920900037,1.3579355829962689,1.4710653927277102,1.3679830780653195,1.3449600659095413,1.3921736504174684,1.4213209697124305,1.4165020613320156,1.3688002492363238,1.3527030253767574,1.4066399751620282,1.442882292539629,1.5426093448683227,1.5126085751497702,1.352057272601406,1.3446213017979214,1.3112083994521984,1.3875162045818459,1.5359307494300349,1.337351035567838,1.4637172020463143,1.5290136780814008,1.4194648958149882,1.3790279843138336,1.4212543926495469,1.3262246066677577,1.3299139222762544,1.523888447544357,1.5695734437927107,1.351303713851755,1.3825423171265834,1.3826138205816421,1.4483596052951828,1.3213626993095218,1.3903283368237114,1.484449949065618,1.3123956494610696,1.3156895236643382,1.4271609994478409,1.5548385322290958,1.4180034578338208,1.4873085927808567,1.3583946532011415,1.3117114509622283,1.3192166343771412,1.4488470397723869,1.5136341931128119,1.5450109903238523,1.3197388624307722,1.3733394173795372,1.373145111870046,1.4142277760560236,1.494768445236232,1.3154413295912011,1.5601229643009378,1.4758685226203891,1.437907602041141,1.4084816174862647,1.4930810313526377,1.4798519461926616,1.4776747680915236,1.4319491548894883,1.4554859021464162,1.5225905519050227,1.4593213664137963,1.5704807940427521,1.5475494721398328,1.5400449062063855,1.4245518118744038,1.4936956013630005,1.3914929446726909,1.4004977797976976,1.4609793690051514,1.3183797786779865,1.4013216927534768,1.5362530698670276,1.3356341230942312,1.5624572435182005,1.4010063438652016,1.3444209157355005,1.427766891994076,1.4479124588398287,1.3907341148324919,1.4458722053922577,1.391454286737563,1.3551807417435815,1.4848242771725639,1.530077268306528,1.4213253658786118,1.4601273475702308,1.4133742718679543,1.4189302824192709,1.3272312499086805,1.3323516808689968,1.3592398071087843,1.360897253365871,1.4029914836710509,1.3455338066929972,1.4518609930906046,1.3154987946447225,1.4722598182580684,1.3420761332731261,1.5679101026887066,1.4334495481631193,1.545139412202255,1.4199999654107462,1.3278979887747024,1.405945001493722,1.5530134649572842,1.4725267586096624,1.3414547245807884,1.4047093944204152,1.5593830142409706,1.5478752044305741,1.4407164678794315,1.3514933723630687,1.3570397826324805,1.3356141129271974,1.3238018249162891,1.5207640269582161,1.369630044960241,1.348502061451714,1.5043840671773649,1.5299490360040762,1.3249941587780447,1.316487686976032,1.3815385599202368,1.4174661749009214,1.3354678339871371,1.4508951488879227,1.3405496668087542,1.4413545342852028,1.3222938924258467,1.3237437062668893,1.4700301839606846,1.3386687750578643,1.3268193602646356,1.5320410314144355,1.4460521921298963,1.5529744765157303,1.3436173391693689,1.3277363052382796,1.4556018403616173,1.5428833044720027,1.4154142218336585,1.4343075023587648,1.3663125630002972,1.3511044363930713,1.5099380846788577,1.329612763630883,1.5059466018788901,1.3318769875776548,1.5473253623199679,1.5167022315465182,1.311086824360824,1.5370952029460025,1.4525337554306985,1.4893385939247701,1.3123408106588652,1.3855432876212852,1.330577349706257,1.3392501351076338,1.3306481412549831,1.4182687939075362,1.3843678404269733,1.4982299690726766,1.3569119906838043,1.345656687917316,1.3796863887632766,1.4015017549508477,1.3589839505214925,1.3430999560302699,1.3888875763334827,1.5111627590069641,1.3967321314449723,1.4109179727606085,1.4524472577119532,1.4141294478415642,1.4960717363315481,1.4723881987335896,1.3632428453677563,1.3314535274526738,1.5143844657342787,1.5438700523966917,1.4815163486840108,1.4549918100455523,1.508474162800749,1.4635925282742395,1.3452866756962385,1.4162026514996766,1.3229017115728972,1.4932101090576702,1.4443063424496632,1.4071759444312559,1.4699452242421382,1.335641774029094,1.331564272598933,1.5033326256444821,1.3285743916834807,1.458191403116645,1.440937851901511,1.4531374964834323,1.5039594871855222,1.4334015750598106,1.5047187930981474,1.4992426434085859,1.3273734767525256,1.3613059130085778,1.4787476014145462,1.3835803297642526,1.5349557195306265,1.3291071972896022,1.4041070370697628,1.3127142621556838,1.3238746520433435,1.3736084984083481,1.3572567361682728,1.4965899214471037,1.4789235800598974,1.4237986285774034,1.3183216173728576,1.4571230316365469,1.3975476051777411,1.4738675296884893,1.4258619795599436,1.4453551015373356,1.553120893357296,1.370760542322651,1.3506420750270043,1.3211565939616532,1.3324623340798163,1.454851272624516,1.4541547852006413,1.3697449905800836,1.3309549104207576,1.3410925202775623,1.5643750647004888,1.4589599152978097,1.3587191729393431,1.442209095452557,1.4432275682556959,1.3323873597213951,1.5054056029780947,1.5633990958604236,1.5097717528593482,1.4240029573141293,1.4130314747386674,1.3301630947035807,1.4877023369895568,1.3412143093734779,1.5389630530921503,1.5544136119038039,1.5339368546210026,1.4454854824489238,1.3517219901783384,1.5178928796776152,1.4276173227801356,1.4758447588461399,1.4951746516927942,1.463501581775118,1.3477309202005539,1.5337227811785263,1.4834645124279298,1.3198673084118986,1.4097341990836092,1.3956109499722098,1.4370582977170998,1.4439104641858356,1.3612611357003428,1.4364379890237298,1.326508684671138,1.5048628467793259,1.369220521225688,1.5436421818521566,1.5396879841066264,1.5099353585048343,1.4085100495316569,1.5042185854909744,1.3631319870045879,1.4889778457226401,1.4883940077678832,1.5504353838498584,1.4912474678934411,1.436893304766679,1.3148434556811641,1.3399773249211084,1.5266056590941208,1.3984551869436594,1.4994425408089047,1.4614911094879064,1.3748529528691158,1.504761037242401,1.4605775621128285,1.423868804658269,1.3688263884675487,1.3407738703830918,1.5443223724560418,1.403873020259969,1.3657711062960995,1.555475257286925,1.3426516835061952,1.3216269727250778,1.4829407528709648,1.4347200836565954,1.4101179683560479,1.4442435418422215,1.4561743272481307,1.4638129017390793,1.5579119167488937,1.4619812239181857,1.3724309304895355,1.3635538350713816,1.3249438011718078,1.382122220840007,1.4972940307196769,1.5444298472607683,1.3839801059513777,1.4278427082719103,1.4375457540680399,1.462566283041373,1.345514245558584,1.3414819760046692,1.325033095675511,1.4604007854593088,1.3396665852730043,1.3923000991058103,1.508727902288199,1.4809205838866337,1.3698266978675471,1.3534076588394182,1.3881630801881737,1.3224509696143929,1.455419356065953,1.3479880945137008,1.5056249555023671,1.4610622789718029,1.4894132556799722,1.3122749783896022,1.3859610708566061,1.3512279507406286,1.3468150289870116,1.3925658588495968,1.4542332986717559,1.4793916891121179,1.3116711542916291,1.4936075122732555,1.3659679145186492,1.5460557302464917,1.4520380853213759,1.5432304206208169,1.4393994211755186,1.5269411059838423,1.3750983996196811,1.5691699852040051,1.5664842559570054,1.3185487811885543,1.3337821541985813,1.3686721130368973,1.4801301555249224,1.3483600635301607,1.3402438816609443,1.4429237031883635,1.3999289243580919,1.3186886157921838,1.5104925746161573,1.525629678200501,1.3827527541309126,1.448003850721951,1.3249063009669904,1.4229996478344422,1.4301632921190608,1.3952050113386678,1.3640722005522525,1.3751760175471766,1.3354762729638252,1.3161827418740417,1.4693910032276547,1.3514258014839051,1.4122618438978525,1.4727452236641192,1.3453908519633362,1.320590241781006,1.3295916667062546,1.3819650253245168,1.3491651910458458,1.3926045961393123,1.3359951239114285,1.396096582088695,1.3747708687171372,1.4416852376987173,1.5518977915492735,1.4745322444118869,1.4238011572256455,1.5147985804146278,1.3585826305340938,1.3581299535941342,1.4005501155004108,1.3507051524161753,1.4605898858416151,1.3274038036819176,1.4277805148685043,1.5552219553272995,1.4439560178118138,1.4048605218500281,1.5208310987718499,1.4105366763920468,1.3874382407776078,1.402117952019275,1.4840939230514187,1.3260154620436826,1.340259487572155,1.3395561080929206,1.3215520332002701,1.4938663082277843,1.3782637787316141,1.4509949505125856,1.5055618851432992,1.5086358545485707,1.3867241580273326,1.4030912708210688,1.5602009981156846,1.3566534080848636,1.4429480535065837,1.5529374632871569,1.3779394251107582,1.4601180338071937,1.5436069184674155,1.5087548275369391,1.5330376654922226,1.3586919113877702,1.516633917937718,1.3809609173301793,1.3604765870171944,1.463030199830375,1.3665219014826104,1.411765458448677,1.4936774443287959,1.3650152256534802,1.469899173937522,1.557318762486972,1.4138862381226887,1.447897941239322,1.5583253371604402,1.4579493521714868,1.4098810347317112,1.544392563788356,1.568801443429783,1.3268908851307728,1.4134101040793088,1.3163757622732379,1.4165944007279085,1.316627837435189,1.4901905357539209,1.4855980439197307,1.3891203603197098,1.4049162140216187,1.4043528491393928,1.3128209514220321,1.3356302730180181,1.4877636458429377,1.4870183257389715,1.3201957420899819,1.4323239098308576,1.3246179523127151,1.4548289370057701,1.4498720055171666,1.4994067699297833,1.3190702354933908,1.3529846329977526,1.3698735164051909,1.5190538459576062,1.3417592220713785,1.5352647510302861,1.5639948098493377,1.3679122704595381,1.4160571431919964,1.4771285743002061,1.4882552176773394,1.3782061616511538,1.4529388379636736,1.3638087744224079,1.4803527586044445,1.34292669185394,1.4393924140797079,1.4591524762733656,1.4466548345011963,1.4247480857605526,1.3156745874141831,1.509461110605643,1.3865518921571902,1.3626893673464353,1.3142018165457217,1.3440890848193348,1.4550026694351643,1.3991129031786524,1.4020845382197791,1.4097577588573149,1.4120567267740045,1.4953358272505737,1.3564503602273401,1.3352061188140423,1.4301724580344151,1.3203080453119371,1.4875166517879006,1.4489801475717881,1.4536415129800289,1.3162501325739124,1.3336379375618024,1.3362747530399626,1.3241906285490086,1.4679065247501242,1.3978463950762108,1.4196472787800558,1.3194946668539533,1.4264679064635084,1.4716554651009226,1.5027493472525142,1.4693122845550897,1.4980147883907782,1.4552976587742201,1.4162003714509044,1.3448955856753961,1.3646427942902974,1.3694139975745494,1.3330987893751651,1.4197510233320378,1.5288981581159995,1.3142967803837176,1.5593198988422852,1.530251921970031,1.5489282258798061,1.3684913935471552,1.4519072806533346,1.3329128664219991,1.327589967950799,1.3886829070926361,1.3246215883530248,1.4023539324445575,1.3453381011207282,1.3347621138545742,1.3167212030774971,1.5706110188767677,1.4768499621615505,1.3509899084028019,1.3378166049496683,1.5488060101590622,1.4512985058695482,1.4155889914157429,1.4967973905783096,1.4978040548905243,1.4325890584141479,1.3343802401962963,1.3866938583408861,1.3872520662473538,1.5069975872216728,1.4937893193738532,1.3706709696768706,1.3584650061929999,1.373808588302698,1.4247135039116658,1.4952598603659997,1.4276282722939209,1.4166647561449155,1.3279756452398175,1.3613549760597785,1.3862714981689546,1.4791068955710036,1.4602541415062571,1.3414850250988395,1.3260699710317547,1.5411074766960997,1.4490210314935608,1.3533464700215643,1.3626590932026097,1.326281622334025,1.3262506734758579,1.3244344157664607,1.32810729974284,1.4904323943951314,1.323753370918286,1.505724568304976,1.4876967484421664,1.4815033875221013,1.3290851437004705,1.4869391318168883,1.4093021541367234,1.5558815526776988,1.3908041668187592,1.4075192593394303,1.4681778441456106,1.4958959859045211,1.4318583158730862,1.3970898865809669,1.3324883523935169,1.5493723463211431,1.5217906199189448,1.3112628150797232,1.4186430066221565,1.5635167679775708,1.3214579653036802,1.4336194047319952,1.4603542686318711,1.3797596124382345,1.4501065978152607,1.4303129608948233,1.3372743508147127,1.3695749675565472,1.4577124152939691,1.3407245893541047,1.5084249288137996,1.4595029383445663,1.3544322427571767,1.4649128369261182,1.3223455681479346,1.4976093976309366,1.3612126865245797,1.3802374413140543,1.5509483071261758,1.3590784130040447,1.4260255438233049,1.3794345371633756,1.4223610784934373,1.3758296338659262,1.5558671341443144,1.5434260712047392,1.5621278368108023,1.4862706547787432,1.326985734119025,1.3671057296019453,1.415758526762205,1.4431801582281403,1.4801630666561258,1.489339900714278,1.5161286125654378,1.5151087820609963,1.3469309335876074,1.5342922890238475,1.3638180306624199,1.440368935896394,1.5340861339656771,1.3234756698522243,1.4459056021848524,1.3524951220379333,1.3896610067023221,1.522969571164706,1.4007386960985828,1.3951418431918829,1.3655584965154219,1.4583586699939408,1.3320984687415545,1.494789028834399,1.3469386391514182,1.3586241669039822,1.4832346073057183,1.4295161093038351,1.4457297942074212,1.3548514816682899,1.332605023199555,1.3122616469369259,1.4094288844800156,1.4895288589731608,1.3278778012298325,1.3149396361952606,1.3379179566780908,1.3902680628002431,1.5203684070701766,1.3595908685542373,1.5459786073234274,1.3496954420918092,1.3505966179893336,1.4586609034458446,1.3897554161292762,1.538832011781716,1.4658961455104926,1.3122598219319617,1.3644097741684229,1.4833227539109615,1.3254389448833011,1.4999216869662935,1.3372834122474748,1.536354542872481,1.380844498834509,1.5609518659048736,1.3862452814370552,1.3331367474318288,1.4035534783158972,1.4204739508903121,1.4274753206726094,1.5071244284113137,1.4689132043913775,1.451601459053101,1.4788070558593951,1.5531517009362035,1.4165038250803836,1.5505545383495383,1.391343010590667,1.557923007430426,1.5340663700020087,1.3232548518838836,1.5594795765968534,1.4006112722300428,1.5428912681275335,1.3741278994410964,1.3439944175957559,1.3358612563739107,1.4730804400088744,1.3359640881351753,1.3266977110421272,1.5019332687654163,1.5180414501868653,1.4219346867344023,1.3701959178149392,1.5495669847406193,1.3569111127380555,1.5662472748208247,1.4356158525022429,1.3941377821123202,1.4256802132950823,1.3852864926311528,1.4235664304144802,1.3542922751828603,1.5250497592624555,1.4026275139333553,1.5374941954121837,1.362449834970852,1.4145391333787452,1.4057528797628389,1.5448151047974601,1.3995179291713209,1.4359849607830044,1.361067823378374,1.4123153985370567,1.3357961628486346,1.4191121226804018,1.3963093512581934,1.5185165904784341,1.4174423233322673,1.355324577886222,1.3748877323657569,1.5359727238750389,1.465052775524694,1.3447277339040571,1.4019289970268287,1.3786689951347579,1.400168782653987,1.4841915128033067,1.4978043548280324,1.4180410146879192,1.5050359578597337,1.5688108274019676,1.4850577860928411,1.4364464938067196,1.4966101469585964,1.3600287219928828,1.4160515492371986,1.4618004691398798,1.4297118259831916,1.3677114927931746,1.4498711853175188,1.5073137875647789,1.3289826220434469,1.3245436868163787,1.3581662045804559,1.5566683462931943,1.4457634913032358,1.4610168422095633,1.3706880167395448,1.4527004557564458,1.4896305630370037,1.3276449983847758,1.3626614300664106,1.4504943668386197,1.3181420910915824,1.3914677078227788,1.3688837761880039,1.5677151014610011,1.4300180771294315,1.5321328930201887,1.5588587259131441,1.4912688939243552,1.4663327381474502,1.3177015223317998,1.4747517037911404,1.3622030948491677,1.4307087884905476,1.3727538030068374,1.4241122420429833,1.5671426034202298,1.5251358760685236,1.5627572295912378,1.3902669521519886,1.569025877361937,1.405505525107495,1.4667016540783402,1.3505085441161855,1.365018651250588,1.4866392992250139,1.3944086383013308,1.4275224494378467,1.5472009843724062,1.382189052619861,1.3641198778941968,1.4697830583477944,1.4596899801931909,1.3311089915134535,1.3809963699346057,1.3122076831757843,1.5661367828453592,1.440795522843161,1.3257217775930512,1.4577853304603015,1.3135243218834571,1.4361988719973244,1.377020904994811,1.5371207570332446,1.4696820059876547,1.4513204255612866,1.4785027075220369,1.4221361126304424,1.3229414150521439,1.3610677495582313,1.5512468468554768,1.3202741364178203,1.4300371603073594,1.4789491207345014,1.3794690047633238,1.3417485542526282,1.3526969314877968,1.3654396258191737,1.3185334660724735,1.3610268656314761,1.4547552878691159,1.4276262836499172,1.471178739736233,1.4261314567538212,1.549475254566008,1.4962487563142668,1.5591727396007613,1.5230369571015658,1.5302800245134645,1.4960678068735132,1.4596810456625264,1.5589928497534995,1.3649825128273674,1.3449441513337785,1.457694090187035,1.5445578390115224,1.4080288957322018,1.3191721488417705,1.3523015777924541,1.3571262045889851,1.5614567789837799,1.3126089362631703,1.3148265372230443,1.4613026637718822,1.3728507021840601,1.5352946334243622,1.5697265941242551,1.4342017883828826,1.5047443448289033,1.3400179120128559,1.3448319579483545,1.4163246010021289,1.4351516957946084,1.4329755441000835,1.3169046547467766,1.3464974551444349,1.5654692018817937,1.3748597690589508,1.4850787023378695,1.4742054134295781,1.3737235653073867,1.4291293379744527,1.3128859671018192,1.3374525207354599,1.5177948521870603,1.3873627730505145,1.4869737022535956,1.3910630084211526,1.326897904491144,1.4353383780668645,1.3180371719455062,1.3145015826208544,1.4452062183703156,1.4355591323206256,1.4313989785621932,1.545139857515442,1.4489071983207351,1.33066300414732,1.4840179987130393,1.4790090598082073,1.3434792304485856,1.5594087462927928,1.4005974946401212,1.4439103660521035,1.4458357421929622,1.475281119584031,1.3887323501461346,1.3702127409836022,1.3709482360688947,1.4057350933982917,1.5111842999715361,1.3196983459821332,1.3784007817815727,1.3884972615642763,1.3176191692653394,1.383157318178418,1.4805559338647343,1.366966315406688,1.4168768635603015,1.5054112744145054,1.5130419357131071,1.4036998588466052,1.368212079254405,1.5021534749056658,1.3516876323261477,1.4969004188339134,1.3230167176969179,1.3659827660706318,1.5193662675915944,1.323433621491803,1.5031296540158989,1.3209645133213612,1.4256524375022805,1.4517397204307736,1.3490029418966893,1.3974920290582189,1.4796008002946306,1.5355492632201757,1.3429800365623292,1.3958643779141133,1.5155084247816657,1.3397438207379748,1.4691396847691029,1.4258067960474592,1.3706816870751097,1.5469299092408788,1.3774567339237611,1.4582869616050107,1.3337376045382416,1.3906242593405043,1.3379775829594251,1.3609355774277287,1.3374104673915552,1.5156973213648854,1.4565599666172542,1.5498623209890061,1.3510722607361769,1.3866000623708523,1.4459766546424293,1.3232430003677045,1.4179334658504819,1.3451653530390575,1.4006977928317568,1.4350768112905585,1.505066970999452,1.3460215618416853,1.4443081518607856,1.3677902319734223,1.3419103191935327,1.4063706688573596,1.4237476438750887,1.3798719987182038,1.4999665368900692,1.3735460014743044,1.441910689229146,1.405949605677508,1.5515678862434958,1.3561470987793047,1.3533207002236169,1.3160084511879135,1.3994543059481002,1.4575817874346675,1.5171239764978641,1.3406718480567241,1.3888817060934078,1.5008789952628849,1.4403833793986356,1.3938331668412083,1.464398693387452,1.3755580806510892,1.338757311233693,1.4831985321926688,1.5417772971675199,1.4833010742830308,1.3177148220272137,1.3436535971864993,1.3213895681740291,1.332693768320766,1.3567622265100014,1.343669923958716,1.3312023276888321,1.4489534493620564,1.4199104127394317,1.513687600733729,1.3751097794833504,1.4182463020731264,1.5231473145326473,1.3420380604570656,1.3279098850926319,1.4736931108755134,1.3305145324384644,1.5360838539847623,1.3334900933173404,1.3525956885891828,1.3283537686168994,1.5235009843752596,1.4735428474554562,1.3512351097169977,1.3220564792030298,1.5119532920617198,1.387584055267628,1.5195311133275144,1.3890601469365571,1.4215844939087958,1.3715502466654681,1.4101736291280191,1.4631200575217318,1.5300430589312881,1.3607017636736316,1.32283512999904,1.4896069251761814,1.4180897764179583,1.4508539771971032,1.4471446781666282,1.3123850206172243,1.4794350357848087,1.3309628245466454,1.3549356809773352,1.430398075903442,1.314946598666165,1.4067971662733241,1.3368148505352564,1.5679575764864599,1.4904186593330397,1.3494960216148597,1.5591209265007795,1.3642983090223415,1.3888260175566343,1.4760928253261099,1.568224923704155,1.5261335586846532,1.375339727270412,1.4597539688686472,1.3364614432470254,1.4544575027834823,1.3883609437011177,1.3219735050245143,1.4316461972270322,1.3354888430525989,1.4507211665708595,1.5365269600931455,1.4262179501034407,1.4041134347168245,1.3728571048174933,1.4883507558594813,1.3407743317575236,1.5080004105149341,1.3394623363262403,1.3351643551026895,1.3364208165737008,1.4644947099651375,1.472365137076169,1.4428941301801332,1.4071423297809176,1.4070170748406707,1.3318789532381616,1.5246839638747967,1.4697483176106427,1.3406593589286233,1.3448484682252519,1.402208361091889,1.5012013353242808,1.5069269815606956,1.419215321970638,1.4631858060894338,1.4279715970041953,1.5218087345946434,1.3504276202900003,1.3895842265184968,1.4951366558576151,1.3413692082181168,1.422370903728611,1.3737921945636162,1.4338365985938919,1.4136586330269465,1.39696651451981,1.4879122169708032,1.4757240852107603,1.4035783504176127,1.3243297276564376,1.5536177614787172,1.4401430958669603,1.337735072164387,1.5204380482002147,1.4029839457995914,1.4032876251690469,1.4622577451406638,1.455931270876591,1.4669647552704472,1.3703678397672692,1.4124949202678125,1.4435200288318275,1.3318886063376056,1.3651230413879856,1.3857451466555302,1.4998870340150683,1.46817845229908,1.4988046589165376,1.3317269364867927,1.553217598498785,1.4127556415538687,1.4022247877459948,1.3136376560772187,1.4052212404967124,1.3249630682460949,1.4414693321474066,1.4199313546607071,1.5139311194151031,1.4946948002162981,1.3166328782488574,1.5363399556970163,1.346297650984436,1.5443271969134644,1.5493222994622884,1.399905912737244,1.5509236458145621,1.4952530440164715,1.4042870697131116,1.5021911267107209,1.5035070685305143,1.5015552129251757,1.54393222572869,1.5356321628222194,1.4616228206810493,1.3183446289476852,1.3855447154325531,1.4508542939831679,1.3931657859851849,1.5346195549120145,1.4009163878295239,1.4921211203011566,1.4633179484451344,1.5088973223841864,1.4071920288199744,1.5280573717228929,1.552910571013665,1.5096602683104197,1.3815886960359951,1.3671577864859066,1.3781124312279021,1.5072258328642116,1.5321357721536055,1.3249335396923594,1.4271993383074195,1.5395750400239434,1.4841939661225128,1.3424042382004053,1.3340967638740637,1.5506885993315771,1.4043469982888597,1.4254904715682437,1.324629275165168,1.4996463720704873,1.458960818493561,1.3194412761684478,1.4705591735177905,1.4645825278841635,1.5403424256411815,1.3971073210081282,1.4580378385041926,1.5205136383966749,1.4666162374213805,1.3800110862193911,1.5176481107344926,1.3588278432204546,1.4078763691001377,1.338168827960087,1.4056044363588405,1.3152656989286411,1.5019835858974073,1.4337554674387774,1.5080370723453882,1.4350909301326951,1.3469296290145432,1.3291833825477786,1.3156326323522998,1.4668606493294887,1.3213110714970147,1.5386089499004891,1.3375792942526161,1.5121560574126509,1.3431524905038752,1.4135597500831301,1.4485245514680236,1.4499005659400335,1.3163275621895048,1.3335742893046429,1.4089501276905072,1.4164282989156991,1.4632588146121441,1.3522250320425862,1.3321680927131911,1.4526540981700766,1.356181874764983,1.4262035346828659,1.3672851435093196,1.4495579151903868,1.3434166643490688,1.3735965057101989,1.3747527481007151,1.3762792115754376,1.5003818918144938,1.3837890622165818,1.3695425504019754,1.3785786931976896,1.4923247165640066,1.3781665157889036,1.42908856093156,1.5644160916627861,1.4295850126136724,1.4461667891794789,1.4785581972809152,1.4944643540354905,1.4917001769342351,1.5703957567691622,1.5338917182362035,1.4575667279619013,1.3366559232597341,1.5033136644003682,1.4981389763845891,1.3394860813577736,1.3467253352999744,1.4816466508787396,1.3162296435349292,1.4972968937410729,1.3345784892594246,1.4285098230692566,1.3358002457851268,1.5579851529403594,1.3347559684380521,1.4129986898121321,1.5462590720409382,1.4182028230170969,1.3639245020031707,1.3537744688109206,1.5489846255334623,1.5597861759239902,1.4519134721055333,1.3987366444561677,1.5240388581573208,1.3892517391245722,1.3843597879544207,1.3183522627765267,1.3562102719087166,1.3177500106122655,1.3463072432796481,1.3766823828031529,1.4272545492034088,1.4478499507816698,1.3601272596817833,1.5600759041365102,1.3708741431997729,1.5028344963294089,1.3138088027981187,1.3597176925880365,1.4381793807148919,1.3450066973091017,1.5563948470068871,1.4302368224964719,1.5163457942262917,1.5614863011939339,1.3124453266163065,1.4508673744739427,1.4507736081471572,1.382211876614992,1.382614400827475,1.5175628442850844,1.3320291163315154,1.3963215969954739,1.4260161713622923,1.3786709947222775,1.3956547635910272,1.5515572215101223,1.4200036187092462,1.4094610403651135,1.5287329844788475,1.3479452330765143,1.3388346692621809,1.3875255177562562,1.3999357952346905,1.3667527208312451,1.3217205952887341,1.4712883978517517,1.3875141138071587,1.4265559159097592,1.476085012254746,1.5072385747776247,1.3284416948262896,1.499208551184098,1.4600511764979949,1.3670529883279448,1.3688492396006913,1.56527169639473,1.4411331002295475,1.3600693483719155,1.3393132643047498,1.3225462967123542,1.4003375133641696,1.5032407042726297,1.3132944249413805,1.4315561794368707,1.3547362446538314,1.4357803719265798,1.3619167197763697,1.3144359239872629,1.4185718114649901,1.5629745568850133,1.3518939640385743,1.3127256634188016,1.3796796494230228,1.4913876237890551,1.4837470009112534,1.5446246649334578,1.3950026938471998,1.3618016523464758,1.3211156214095838,1.3372680117530136,1.3895643356626879,1.5666623035647314,1.4094728839303308,1.4080456885662176,1.5082182570287002,1.4004608032748109,1.3704045294022809,1.3569577345558892,1.5070641592615217,1.3900624361942648,1.4324394272333991,1.4427575264594084,1.3208635908968711,1.3220393885983908,1.3611495007289955,1.4389519662381067,1.4386085880078203,1.3486655860770584,1.4107518558452663,1.5369152919285787,1.3485753452805922,1.4101962299894282,1.3567892775839052,1.4133159094633125,1.4937547945966785,1.3454212964995125,1.4461943618038631,1.5069362635208829,1.3378107824056924,1.3150961198920241,1.474233437045354,1.4681475568667199,1.3921988493069597,1.4498435139160111,1.4065444169809724,1.4152616669555715,1.4716238023006245,1.558617589076879,1.3921306648856957,1.5485142308794182,1.313599952760264,1.4939294045211282,1.324609001305469,1.4123385051018098,1.4391313212876529,1.4243852595015578,1.4026205056645027,1.4800937518198189,1.5431123154325599,1.5643217844176653,1.3283991627974883,1.4458368847469372,1.3862421931794344,1.34675807665695,1.4273443426108177,1.3146555282914238,1.3315758118224883,1.4488402599384829,1.5351706014903392,1.3878082579592783,1.4505671789218588,1.5505233491154859,1.5355068031918506,1.4676108575135653,1.4498170479959591,1.5417836736435173,1.3135717522435923,1.5689107076194111,1.3731792646137004,1.4163193472210303,1.3316124080878471,1.3759508482746907,1.4495174227716741,1.3713839680805611,1.3220286027020787,1.3418759492457843,1.4619871935963908,1.3330588057077475,1.4101922219128398,1.405978293270707,1.3708142612697232,1.3976058444434236,1.4198114060133185,1.4909852019720511,1.4715492781154911,1.3756265395009251,1.5044054874258872,1.4565614163854685,1.3730339301094618,1.5264120725654036,1.3720573896141861,1.4123100143142733,1.3794286652280958,1.5171807642845696,1.4598000603095327,1.535866987140214,1.5201307720010655,1.5016213337785311,1.4880263665252178,1.4824948683269035,1.5251749612414818,1.4508546456539586,1.5235948508623267,1.3130538118147914,1.3434234043335833,1.3735725609019025,1.5164720188168264,1.3460255874628708,1.5552776390694187,1.4640886954605457,1.4906360448309957,1.3432391866062949,1.5248921170699121,1.3756279050772826,1.32326768473665,1.4509702898221115,1.4543142749606521,1.4731168208256908,1.3748379700645292,1.3145806313603112,1.4525220213023802,1.4770169810463591,1.5265244005401037,1.4357256282261774,1.3858395184853087,1.5349808966954797,1.4895592720589348,1.5526300467589269,1.3424953560524935,1.3991506244527594,1.4206638880541251,1.3523774582438195,1.4489661920923906,1.3710981738097987,1.4735773928601408,1.5322219055518571,1.3709975833129333,1.3345782534506121,1.3619182812985564,1.4783898518802703,1.539284039115284,1.4396869731717423,1.4455758311446159,1.4215411902579527,1.3280757919297044,1.5203617244873144,1.4490324822139757,1.3772082654273354,1.3472478829348793,1.5497574562643244,1.4927432941504364,1.4004042422482927,1.5212954890713504,1.4671452756181524,1.3769151306054572,1.3186425082798932,1.3361240370495693,1.3759692899651377,1.4891658497220452,1.5163044713043587,1.3736434124013044,1.3970667049788157,1.3595574525811815,1.432395796364176,1.3488615129306212,1.4934531557029764,1.3235634704514094,1.4396632055158192,1.4288665135866248,1.543257307875372,1.3927305575083986,1.4420929071738153,1.4844478123561173,1.4213560235530458,1.4125755706168399,1.5053867187591312,1.3883683446029877,1.3402205957707571,1.3221575759725284,1.476058842532336,1.3516112276766543,1.3898279388492198,1.4267988022819036,1.3692294394896427,1.3943118249774575,1.5241960891149213,1.5339327054025651,1.4226714274598389,1.3212143931585629,1.4888600359917605,1.4020277664398035,1.4251916512286102,1.4252481845546825,1.4127044755359619,1.3358629045582755,1.3473886792916179,1.4260492526886663,1.3922343153090972,1.5188772402621615,1.5176006475101256,1.3484481698097812,1.4443996799347341,1.3400468031153792,1.3166601935045732,1.3221519027859092,1.4272647182069802,1.4583205218079287,1.5111987420258892,1.3143578139573644,1.3771875165447145,1.3677164966275424,1.4874262722652849,1.5606656252018059,1.4105135683369179,1.488910082521484,1.4179703450898731,1.3577539026225141,1.4066463720740232,1.4643126686920442,1.5503501547738472,1.3365954773801885,1.3403138299649449,1.4496132178645631,1.3139009702057995,1.5187578274831832,1.5376457470511533,1.5335216983933901,1.5515964818355772,1.3801806039576285,1.4046621445067184,1.412361256774388,1.3582782393206383,1.4635668026906761,1.5544603210701713,1.470696887604156,1.4089507368761289,1.4061828642294105,1.5584049613584139,1.3837304880909149,1.3299107316695118,1.3654116994634744,1.4507515466492673,1.3249000422063293,1.5454737017513467,1.4022929851320358,1.3978691833105732,1.3420267584423147,1.451978714165181,1.3915639775743092,1.3616569311724989,1.5409306850023901,1.5558946418747397,1.4185590992985184,1.4091815243781647,1.5386173021733096,1.4563924051278825,1.3278424332032495,1.3912849775809819,1.5680726889297829,1.3822086632375101,1.3286893142228415,1.4896932798666078,1.3724569295911606,1.3286031955259834,1.4953844386689867,1.316648000171583,1.4421628139151697,1.5595041719215188,1.4073944249616572,1.4569463952051767,1.3692201997160875,1.5447293623248819,1.3356917221943687,1.4334106848493173,1.3685512947901735,1.447578525199235,1.3422079415477928,1.4144566480118481,1.3733152592597115,1.421618246755372,1.3312262413747749,1.3723664907071385,1.510441400038868,1.4626152535341588,1.55981564090545,1.3120297603221149,1.3525414768753152,1.3641349274298049,1.4712702354871883,1.3245976555930452,1.3180523744690582,1.3403022758156315,1.4459183941696883,1.3691175526558808,1.4606684304606703,1.3441408267712425,1.3177225630232334,1.3496455832825454,1.3116228692192764,1.3698612491317621,1.3374879229420755,1.5468260645887766,1.5205833766690713,1.3711537102579687,1.3645171250174004,1.510679762186216,1.4236896185177832,1.3279956235239139,1.4212928248976562,1.4635283821426506,1.4329454494280907,1.3244595969144468,1.3767945177349439,1.4692630195949101,1.394955525829948,1.3839400223226184,1.3951721501982339,1.4518590777551976,1.5645388997308844,1.3956877078837329,1.3214812238457525,1.3842519145600423,1.3910569544972009,1.3485923188647635,1.4972640509892288,1.4573426549541286,1.4399624581419712,1.5083185043186791,1.371681307068142,1.5530064306477587,1.5342292873596737,1.3475937163727243,1.3280667499958136,1.566121835985717,1.3737333260516189,1.3913184138193968,1.5290247658936715,1.484141261689504,1.457294192422671,1.4219140125061542,1.4650032700589519,1.4980839058946345,1.4093427483841656,1.4512656889416664,1.3372514509591928,1.3178862210027538,1.5520390901481471,1.3300239575387702,1.5275191899293286,1.5587483218210056,1.4005885045868722,1.4987251416802807,1.5113882644641454,1.4990153723151418,1.3750665490807938,1.4163155985535028,1.384487117961382,1.4277961999065001,1.4983814670110278,1.3594350737327683,1.3292316469449954,1.3621142204331533,1.55235798358012,1.3532044254585862,1.3112912326312829,1.4373332988453615,1.3686341011460521,1.4802932077448412,1.3197763321381926,1.5450782827092515,1.4018451265795386,1.394244818329152,1.496797015905952,1.3190414180533943,1.5383948707243145,1.4158865714263433,1.4240868475249078,1.4533591534917514,1.5013323369114515,1.4201882159429886,1.4316525788677901,1.469492666145054,1.4846800371492508,1.3897887933687989,1.3126760922022385,1.3475273354822108,1.4100328299596705,1.4312614766389535,1.3591313353375163,1.3699524659683848,1.3713260196356982,1.3209208459624517,1.5580531621536555,1.5292581783046835,1.3506215756846311,1.5250478478237914,1.42085309269172,1.3341707869647685,1.3540248365559557,1.3195008237930443,1.4328357559238314,1.5524397371644609,1.5700758890731596,1.4530180537487531,1.3354398010093693,1.532893926827873,1.553437822639131,1.3489414622109543,1.3339051096074939,1.33769433510626,1.3460919346963442,1.5142740578131735,1.454233563347441,1.5555541586051094,1.3347287027586223,1.3876831643981662,1.3258540014647917,1.3357091387617399,1.4577996969639917,1.4044560088257354,1.3159445686252009,1.4263140109399208,1.5650244712381089,1.4254864858614409,1.4256359706796464,1.383543873020787,1.3858840862449642,1.3424318400349959,1.471463138148237,1.4742517606801533,1.5507342680137259,1.3397812879700577,1.3877975298863345,1.3544626164268145,1.4674284509811995,1.5542831904373295,1.4420744230190468,1.4536637204396765,1.4922097618487136,1.4806711981540377,1.4393353684078807,1.4009367003402315,1.3864144001293306,1.3297372464770449,1.5166146991112128,1.5317516360602583,1.354063480153749,1.4004192238543394,1.4990560802791137,1.355554371494504,1.5695736446048119,1.484535225314799,1.365633331604774,1.3432631321459592,1.4725352901237954,1.4113554555211616,1.4593290243066384,1.3461400250355784,1.3952855394140682,1.4866383802338425,1.4153086183844847,1.351680960068373,1.5513693160163626,1.3248866859336954,1.5528798010229521,1.537319968842451,1.4792414239205303,1.4673843675281855,1.38834417843967,1.3544519880751495,1.3182471042667119,1.4988422392466516,1.4369723104746166,1.410462368228232,1.4321871918131523,1.4825199685549912,1.3816967649488365,1.547647914421705,1.5266798397582031,1.386958163327584,1.4481645524008346,1.4202667653810328,1.4480237468173369,1.5219506109566991,1.3687080807508012,1.3692773508574856,1.3246163452828621,1.3321608666944555,1.368272580046562,1.3626815126654122,1.3559095047579017,1.4918430325212477,1.3796325770868949,1.4382636075651778,1.5158909115980836,1.3533732966449328,1.3409777013147781,1.5656094298391245,1.3404879518501782,1.539445789775989,1.4178908719055343,1.4151240708513486,1.4424049787757685,1.422776425545637,1.3411802082271282,1.3960442226804475,1.4511679833746469,1.4780964958148715,1.5143705321052665,1.4574768128136568,1.4944066759649053,1.3721589544523902,1.3621025940427021,1.5655962705020927,1.3727932355748742,1.4765662641717763,1.3454861731818457,1.38938860973902,1.4029710459970703,1.5637088821461609,1.3754020744957733,1.4718944694742244,1.3653165890973336,1.468302150897786,1.544982266956324,1.5065182888984978,1.3917810508020474,1.4326981155011771,1.3871493589076822,1.3223077777831085,1.4396051920030397,1.4165983141838268,1.3234702103115534,1.4815722175043704,1.3499012771989543,1.4716932350035719,1.4764569568624644,1.3541481954787116,1.4349190384559718,1.5193455447649111,1.3488932588714226,1.4723952720857156,1.5142171168312573,1.4298585565152746,1.3973618900126743,1.31480214618597,1.4270239393711777,1.4221494061526603,1.4227449799201348,1.4744831886107559,1.3458667486296954,1.3374229068319992,1.3259229595980384,1.5040451285961871,1.4069562967646974,1.4568317082157582,1.3165158663069272,1.4346358276739379,1.4000084302220419,1.3788242071869206,1.4304067868530146,1.4523089855446925,1.4520883611601949,1.3260788689793672,1.3171802207361147,1.4084252565066593,1.4723937915580423,1.3373219653789223,1.3427392055244942,1.4573293519778263,1.4397481624830633,1.3894012460713483,1.4436887237803271,1.5511380595114879,1.4913058579146783,1.5570892087756263,1.3212114639139485,1.5168294924309151,1.5179854364053953,1.3670306569663835,1.3882540898133373,1.3257161907690496,1.3917641474224338,1.3137127657544172,1.375126425467575,1.4262230819371662,1.4297656980610538,1.4946738890815052,1.3686392953003816,1.3218353995952676,1.3841454797671886,1.5158628866388257,1.3803315646704211,1.4514572023062373,1.4497265969468129,1.5215575248185684,1.4592724162535746,1.4092325319355981,1.5677062899612351,1.3606959264430885,1.5496055147758789,1.3143582944643049,1.3806202920986996,1.3163018893045144,1.3474419486955904,1.4608492597238452,1.5405675079625603,1.3137803655363853,1.3672023347487208,1.3269686487770391,1.4285953066893688,1.5025780841608114,1.5404768251125638,1.3529914144702424,1.327488267296651,1.3202786147779282,1.3606653070407808,1.3479836702592725,1.3981398842152608,1.449819204186007,1.4355968603491032,1.392301733988865,1.5334240589921857,1.5369247167016078,1.3525321896275524,1.4167753083341346,1.5580845057084287,1.4006220032597438,1.3997717305479747,1.4294357508196731,1.4952102395452402,1.4212209046881696,1.4220533498174928,1.3682643533799705,1.3764091525937425,1.422016679140331,1.3992088216216494,1.4659056395381111,1.4747576936908793,1.5053042288859628,1.5393588365851345,1.4135268474260496,1.5300936259593729,1.3741526310290111,1.3359874153280129,1.3299637636991999,1.3331461651775318,1.4382198009160676,1.5312912481955627,1.3171358210267821,1.4560736819869264,1.4425119639220549,1.3182827007850895,1.5479507358231019,1.4169083539982132,1.538432157015067,1.5316421302848293,1.544154152165671,1.3885830147503886,1.3336542540510523,1.3679191032899316,1.4167894440049051,1.355764944179924,1.4667665999259809,1.3490372295322877,1.559578254132665,1.387349720132889,1.4865229511272451,1.4401239231899876,1.4231106919140128,1.3629045347307329,1.4958274720133919,1.4475937269714219,1.3519183635759378,1.5014898730923403,1.3817613035639336,1.3301131665305284,1.3286498442743186,1.4781365418882217,1.3565940167282993,1.4548159974747945,1.4673783234062827,1.4095143887388983,1.3353453908197226,1.545401105087522,1.5108132308804563,1.3286912097438985,1.4210515811281081,1.4412789174750258,1.3946470841462333,1.3556679847762361,1.4447233894368516,1.3168373886300959,1.3301479704671173,1.4361600316776655,1.5493503313371149,1.5137900698022349,1.4240106211253234,1.4301558934546774,1.4097972594096679,1.5130203337953199,1.469849855221365,1.3498437134272891,1.4207720650372571,1.4472693727869073,1.3957692916592559,1.3436666334527436,1.3326918827125118,1.3673830402333988,1.4530213582345299,1.3143398729850431,1.5479418602358743,1.4699287343469751,1.4656234607119891,1.5524733806772102,1.4893527237427548,1.4841103006009533,1.3489689348495575,1.4864716875080526,1.5449848748164716,1.4263415417688232,1.3255741430345309,1.3657928372977515,1.5520580399784876,1.3580003017649276,1.439898530197959,1.3666968886926887,1.4641077233012714,1.5566119780970575,1.3695551888389672,1.3550790158987052,1.3392047175905015,1.4251228589033609,1.3733230625838313,1.3498550036222055,1.5110394324575633,1.3997858689533713,1.3948369792821267,1.3374389960283197,1.5127951207829562,1.3862795179952743,1.55154532888064,1.4979749471305697,1.3822510345982508,1.5041480703774108,1.5482197489728384,1.534932465037854,1.3204280286136534,1.4259030632737135,1.3709271374965284,1.5057851254398995,1.4367871202184197,1.4719572403791013,1.4452680475646233,1.3188172468523796,1.5442356711369449,1.3381636482664665,1.5345346837654377,1.3556209289794598,1.4192036039250964,1.3583785211090176,1.4429047860133688,1.3429282991332614,1.526282123482128,1.3559746968478632,1.3807071720546331,1.3643953710635381,1.4895692404561052,1.5522928415433845,1.3727121909911055,1.3798040472589419,1.4789549054200535,1.3690466645541763,1.5619920931920768,1.3928724641229075,1.5024945356401362,1.3701019911525989,1.4433397990566625,1.4866509498676987,1.3172814654644456,1.3827156860684764,1.3337653115948471,1.3341010546330045,1.4783883780766545,1.4461597136722628,1.5313404797797758,1.3817718987732024,1.3777092055194411,1.3834311823702903,1.5039973132845128,1.3234668006608847,1.3472140015244596,1.5222022465376881,1.3566463023927458,1.4054645182498173,1.3822615555019546,1.3251628399921287,1.4584631539218391,1.535332902579382,1.5444599880956902,1.3657149919666873,1.3307218819626849,1.4452619550174133,1.3693907833875281,1.4585418412878837,1.3583382640547834,1.3488514564155734,1.5017527744676236,1.5554270913608972,1.3863884089259286,1.4594603734200031,1.3291182715133463,1.4261394868207613,1.4440559356658749,1.5228192850236495,1.4573413981794983,1.4301948844350505,1.3957435299665903,1.3148612053084299,1.4531249164984457,1.4114720347511946,1.3154545044510775,1.5025889518299846,1.4663368976251812,1.4801700396826005,1.5378728843981619,1.4341724332807764,1.4574303794757026,1.31263216277379,1.4429836659435464,1.4748700427236632,1.5333776993478661,1.4034368763419087,1.3190117061370157,1.4579095267931201,1.3207770805090979,1.485392955076279,1.5350501028155032,1.5015449967344385,1.3231745368466103,1.3162624473395774,1.5702903955253849,1.4936367796904666,1.5321815653144775,1.4328756266908842,1.5334600038374171,1.3248836948338512,1.4750959584812087,1.3593998898267061,1.4346151699314533,1.3357460359800661,1.4476224719827873,1.4321249622385395,1.3689611943508733,1.4260579668501894,1.4610097985172341,1.3235470835429413,1.3323274481587386,1.5662824690306967,1.3700001446823062,1.3592904725184847,1.4221085458220708,1.372961153150456,1.3425265221031577,1.3697622900786173,1.4350704729823638,1.3186037736768932,1.3468149163478855,1.4227282421998759,1.3467089731799324,1.3603160839731747,1.5537985175440281,1.3938633328959331,1.4406263378955584,1.5507718084320286,1.3421556969164348,1.5404612860254492,1.3458400326775466,1.3334007268706722,1.5377496092790361,1.4393648459382471,1.5054712610911052,1.3826951646958561,1.4289784607419846,1.4751746254766569,1.3511685949639516,1.4216283133272922,1.568118030770586,1.3613228926310716,1.3231798981034406,1.4140261543118704,1.3449901107649294,1.5183599387761681,1.3357054088952658,1.4766918645624951,1.4272515219069424,1.3486676956221548,1.3764569479517668,1.3403747333295806,1.4725092173442276,1.3851258625897276,1.4269336031004285,1.5205380657124883,1.3971981061323366,1.4650740376688072,1.341740714858386,1.4508211525209767,1.4061343235878676,1.3372667808992689,1.321270396046673,1.3254773199713512,1.3405395695638607,1.525280894231503,1.5491483075688532,1.3965896601887366,1.3230881431632888,1.4126934530232282,1.3891148915321685,1.4060484526562336,1.567156136264255,1.4196468487335421,1.5076579596865389,1.3636640078599915,1.3257105882693916,1.3552604490030584,1.4735597307286616,1.5334285303053126,1.3212241147865107,1.5366741018915164,1.4474419463767927,1.4424969334909667,1.3390146318108975,1.3839469745036468,1.5487723423223783,1.4411405320720061,1.3117888116416319,1.460419255468923,1.558778073941657,1.5316809294028324,1.5108860841200942,1.3269793516071842,1.4395096046336164,1.4255540548686723,1.4043707700101498,1.3984691867113315,1.5602161621503305,1.4461518065318681,1.5175904564633385,1.4306690187530271,1.4009946200802421,1.3540870898358242,1.3564580081512245,1.3302169883369093,1.5135917131832457,1.3128098471132794,1.3752001508432785,1.3217416949323539,1.3249894356566216,1.3745228807338896,1.3299974579675056,1.4935299216464184,1.4932378804828328,1.3773321859173635,1.4543233889563196,1.4468094317511944,1.4182908200638225,1.5680136798787849,1.3412366444243704,1.4546527992249096,1.330795758490583,1.425749672876548,1.3554454258662205]}
},{}],71:[function(require,module,exports){
module.exports={"x":[0.80657645498402419,0.13412223406601698,0.89673401477281001,0.82665850388584661,0.12571694375015796,0.95917909338371832,0.90424209709977732,0.21882370234234258,0.62603565748315304,0.30508537985617296,0.096564997604582453,0.54174839038169009,0.27571323621086774,0.18649815622251481,0.54141270383493978,0.98295248877257113,0.94793176134349777,0.9864967120718211,0.95523964847205201,0.95801798741798849,0.15603694573743268,0.71858057354344052,0.96088685108581562,0.97129859463544566,0.94759528025519102,0.10876313311513514,0.48052189188078043,0.79012479807017366,0.79227766846306624,0.29405915487790479,0.14046748165972531,0.0047356495424173773,0.4175436728890054,0.11133987079840153,0.90657816844526673,0.63336572331609209,0.7842852518591098,0.86964633876224984,0.94989750094944614,0.49862605070695282,0.64918328904546796,0.78994932885747404,0.035354562581051144,0.35768106132745742,0.84063801239943126,0.20980508887208998,0.92465331325074662,0.67454594295937564,0.67194780659163367,0.39475113455671818,0.75016272427048536,0.73324077205499638,0.73570114639587703,0.47001109363976867,0.38830474945250898,0.41786680420394984,0.64892311460338536,0.17212652012938634,0.16947482285555451,0.29889399556908758,0.69898562287213284,0.78930711592314762,0.031514516039751472,0.31338494036346676,0.27415375236421824,0.86370453180279583,0.045709676546975969,0.14762283663265408,0.09616045816568658,0.9841278093564324,0.81522324605612084,0.81368423196952788,0.68788033605320376,0.12393093672813847,0.31392848400631918,0.75611251237336541,0.94071982496185225,0.48568314900621773,0.034101619413122536,0.65696946529671552,0.43435691651422531,0.12463766703614965,0.37774287350708619,0.208106983685866,0.75786162403877821,0.050704261350911113,0.78724790508393194,0.036076838888693598,0.18500387733802198,0.40464384930906816,0.48486675098771231,0.45340926376171409,0.4411303374124691,0.4826932374970056,0.63984988129930576,0.78603522168472406,0.70227118082810192,0.91166604307712984,0.74713981105014682,0.79945571500807999,0.27326482678530739,0.69871650908840821,0.6729056523693725,0.0027902480796910822,0.64854702376294882,0.70359683618880808,0.16098561470629646,0.63752134691923856,0.11780770253157243,0.45147249622503294,0.49338040944188832,0.76617795750964435,0.9501465149293653,0.56801711970940227,0.33698186754249038,0.86798984086140984,0.57941506935283538,0.80009373510489235,0.22157382411416621,0.017596156569197774,0.74375438957009465,0.8130335314781405,0.25254415940260516,0.81263237627455964,0.50089747490594161,0.93067328839329999,0.69208595399977635,0.40853984960122036,0.88199422196019439,0.41893346506403761,0.94969850689871238,0.57514711066614832,0.54174337810836737,0.15647700858302413,0.13723819600883871,0.75411390152061353,0.14780106611084193,0.22785450385417788,0.25493316653184595,0.80163720318814735,0.83231007751543074,0.97863638460170477,0.25173935703467576,0.32912379945628345,0.80614197905408214,0.29683338857721536,0.24108971962938086,0.013403735342435538,0.91997099019354212,0.21506546085001901,0.34648392739472911,0.8982910705078393,0.1946292918990366,0.83998311399947856,0.24857301465701312,0.94546739769866694,0.60988422479247673,0.77110873281257231,0.46855595474364237,0.97758503047982226,0.34814291679533199,0.066919427246320995,0.82252034290926535,0.78566160551737996,0.57941145092714574,0.58855852542445064,0.54422637118259443,0.72547073788242411,0.90802172782598067,0.68828055472578853,0.28298062753630804,0.67302159273996953,0.74962822761386627,0.38839726433157923,0.74619180011563002,0.5559418677608482,0.37664138766238464,0.20598737639375031,0.56214342480758206,0.52209774389164521,0.075095750370528555,0.40016643291804938,0.05341061856597662,0.34923478400800378,0.5254895779467188,0.58689563961233948,0.77137555886059994,0.35278170879464599,0.92467057165224109,0.95531670816941183,0.1286071477853693,0.15289403323084116,0.56313542227260771,0.39095912839053198,0.46469673225190489,0.38342294598463922,0.011783049206715078,0.71968517439672719,0.33375141992932184,0.38468410932691766,0.16056047988357022,0.9182179131964221,0.78634169505676255,0.43175638914573938,0.30810288825770837,0.85405140509828925,0.52324780441587793,0.61415641296654944,0.16399224846856669,0.11835170925362036,0.59596212035045026,0.46723723358474673,0.26034156964626165,0.33681750208837913,0.64753830450586969,0.52454356846399608,0.68232235328759994,0.70893970241770143,0.74067007490666581,0.97849560345523057,0.44603618342662232,0.71328852662583808,0.082983164170291279,0.90345171703258531,0.22668719875859097,0.50044352014549076,0.90420398791786283,0.55268606857862324,0.1508542369119823,0.49815812082029881,0.81755880476441234,0.4578494641673751,0.53295900825876741,0.54112604213878512,0.9861733682337217,0.44310855779796837,0.077393773386720571,0.84590647685341536,0.43825148815289139,0.59818916939198974,0.10558624548604711,0.49355874449014664,0.95227909696754065,0.97012634849175805,0.0045878834836184977,0.033974140095524491,0.76716136000351975,0.96723201408516613,0.80913019130006436,0.35955459607997908,0.86000775998225432,0.67272449666401368,0.083591491417028013,0.34277105913497508,0.3957848188304342,0.84731638496741657,0.25727170240832492,0.044608948593959211,0.79206779147498307,0.65351829924853522,0.42709968734532594,0.74244156327797095,0.90154111934825776,0.13166607077233494,0.18002855330938472,0.97253695806954055,0.26116488826693968,0.094401622528675941,0.14408359494991602,0.27984655779087914,0.13470786743564531,0.79409035451710219,0.86059928752714765,0.076781458910554642,0.57390754354884843,0.62111049445113165,0.54436160252429544,0.008012972571887076,0.14350525029469283,0.67348418880254035,0.84450080445036291,0.52859377666376528,0.61583457993110646,0.43428016338497399,0.34744286183500661,0.19755570416338741,0.5081170478300191,0.1366213127458468,0.39778995589585975,0.37850960749201479,0.075207022838294502,0.7547970719542354,0.23751699379412458,0.040066400310024619,0.12208574454300106,0.25042641433887186,0.18206871243892236,0.499723284705542,0.23755299918120726,0.8143789021647535,0.41309439622331412,0.97190589107573033,0.049157880640123039,0.81522086035693064,0.89368894958635792,0.29880903494311495,0.93533932277234266,0.047464842356275766,0.48595545363379644,0.24536912644514813,0.48436011169105769,0.53861554068513218,0.33434221309376883,0.87884887143038215,0.8910533102578484,0.34040114036528396,0.36555431398563087,0.032935882424935697,0.1100907265394926,0.16124340229667722,0.77244954139692712,0.86859027524711563,0.38584145280299709,0.20819885016186163,0.23927437196485699,0.27002550621517002,0.39987302049994466,0.48751756866462526,0.095489985414315012,0.2211857430031523,0.13065356159582733,0.48539848138578234,0.93263007805449882,0.9453939402918331,0.94657319255406036,0.64544898499036207,0.56945650768931955,0.74992859958903868,0.059181748917326332,0.43089322911808264,0.23243211085209622,0.5473523961659521,0.34962699111085382,0.052621044565457853,0.81298209995264181,0.31928563653957098,0.015249406511429697,0.40093156975228339,0.042593560628592965,0.89934927861671898,0.16730012711836026,0.8010458706482313,0.64262432268122216,0.25571293865097688,0.72440516476286576,0.12854805966373534,0.64126850240165367,0.48839358196360988,0.44641447141533719,0.37471542446175587,0.54153880106052388,0.71128525017527866,0.29335759980836884,0.28492693441221489,0.73724587717093526,0.61720122114289555,0.18706546165980398,0.80375524098984896,0.67990768295014281,0.30938289977610112,0.18167604225687684,0.38185341661563144,0.36479974914109337,0.34049045402789491,0.61936237210175027,0.80761137382825832,0.77242516231723124,0.6625922856037505,0.080314508839510385,0.37562464830698444,0.92009211133467028,0.4539119312725961,0.76795555142685767,0.30057783150812611,0.48192371235927567,0.90145933619700369,0.43149999955203383,0.48373153734952212,0.44231591189280151,0.74823199727805334,0.3032859797263518,0.10698129634140059,0.50342357191722842,0.38965395339298992,0.5056638446473517,0.86148489756044,0.80945143364835526,0.35725210615899411,0.78688309756340458,0.90794673642609269,0.63787495179567488,0.5383674480230547,0.37482329448452217,0.13874239940196276,0.80346465729642658,0.19787414129823447,0.52749733236618335,0.93943583566462618,0.34721983053954319,0.98020885518053547,0.92961154806660484,0.23767519008368254,0.867183383947704,0.01635537839261815,0.5446547798300162,0.38472902040230111,0.61625033515272665,0.7718924734904431,0.58117425443138926,0.471871690757107,0.20566487066214903,0.53473662568721925,0.29823387306416405,0.01826633496908471,0.46621410839259625,0.89118136629229405,0.22818328224588186,0.19255042981356382,0.83586570099927482,0.87713813771260907,0.19281664894893766,0.4368112295656465,0.22366256737383083,0.14635071981931105,0.16900096698431297,0.23710743885487318,0.22538765193661675,0.79165664330357688,0.43134169953642415,0.46828490958083419,0.30799126634839924,0.088924924798775465,0.91414584807353094,0.63810502816457304,0.4259053136687726,0.62673302824376154,0.18296815676148981,0.57853841087780888,0.89583215824328366,0.71938783721532673,0.96995089541422197,0.35109175163554029,0.4344812727556564,0.67360257802996781,0.11000802783295512,0.70024830845184627,0.25548405236564575,0.16070523304631934,0.40463264920050279,0.13239902072120457,0.58894711341010408,0.44506051152013243,0.25958962999284269,0.04163358408724889,0.59681465468136596,0.78939046533778312,0.70410362139344218,0.16588023179909214,0.21952926100697367,0.82290214444510634,0.11624347771285101,0.32171390029136093,0.29370911218458784,0.64922209849348289,0.31559051626827567,0.41598805203102529,0.41992508819326757,0.77409006018424409,0.50277970190159971,0.11206061057746411,0.084660632251761847,0.98359937076224013,0.25985741815762592,0.17975724929245188,0.7930044739111326,0.75530210257507857,0.028928077665623279,0.26326144763035697,0.91956560158403589,0.24169688145630061,0.72302755947690456,0.099731106483377518,0.48372288705781102,0.3408846395323053,0.57273980833590032,0.27881106753135099,0.23491073705954477,0.95895397166255858,0.45426034039584917,0.21163501119939609,0.95345765495672818,0.59986892774468292,0.5413376631075516,0.22428580650826915,0.51592447593575341,0.18800644665258004,0.22927844195393846,0.39755576344672588,0.48400876527652142,0.4091577242547646,0.6178194867284037,0.16845075583085417,0.67234418670879681,0.29606129725696517,0.39156006411882116,0.63010388266760853,0.36376228716457265,0.15005841675912962,0.97810217906953767,0.76155074710026383,0.037361474514473227,0.87512891476275401,0.87631632772972812,0.94962938915938133,0.90415395992109548,0.017885607343632728,0.7882220333162695,0.5770179206505418,0.097725155053194609,0.75918554463889454,0.25925247652921823,0.32451978749362753,0.33200327614322306,0.12777550249826164,0.6729306722455658,0.28904117616126312,0.13518760226899759,0.8386385523760691,0.7140152285783552,0.22845674860524012,0.10569424528162927,0.49695464160991831,0.64721978047164153,0.0015819248626939952,0.48923219741089269,0.012413415242917836,0.7712612071121111,0.28372071130201221,0.70788671357324351,0.097712051456328483,0.89468335718382153,0.38090765469241888,0.88201327689690512,0.35179520466132091,0.33082141828257589,0.71277122636558488,0.69175837398972362,0.06479061392135918,0.19583173131337389,0.50872059445828199,0.030235533714294435,0.41973854979733005,0.73663351567229252,0.68290324660716573,0.49502221166621896,0.25140367509797218,0.47512291792547329,0.39750436350004748,0.89567501557990903,0.26183178592706097,0.60376797689124939,0.92490808033850047,0.61148972382070499,0.46779998890589924,0.85084788108011711,0.60480703233042732,0.79743453083094207,0.48351786675397307,0.5709543024259619,0.50937437123386187,0.18109324475750327,0.24256905643036589,0.23753269469132646,0.32967518824618308,0.87764681395841759,0.49733875231817365,0.028387409769929945,0.59009735418716447,0.4850023762579076,0.30705443777376784,0.16624787242384628,0.9533675458305515,0.9688938458100893,0.230076350918971,0.70556752329692241,0.73943516416708011,0.49546691106632351,0.31930762945907193,0.46637749536428602,0.31504981955979017,0.05902267280034721,0.94294731357134876,0.67515218116343023,0.52937383506679903,0.04200682361377403,0.86308710109675302,0.070731004904955624,0.92525662338361148,0.51643333981046458,0.66044294212711974,0.095762728226836763,0.28679251153254881,0.80996707383077593,0.064869216831866652,0.80937162290560083,0.22956972983200102,0.7152151942416094,0.69767648300388829,0.14836679329862817,0.1931563271046616,0.65300920394947748,0.41799620475852861,0.5134089905605651,0.92669451332883912,0.96324481369927528,0.14079503216547892,0.64250157488510007,0.63674919451586898,0.79232727187452834,0.4680048178927973,0.44925973026081917,0.43256358136190098,0.42806759201455863,0.24187644369900227,0.81706066086189821,0.50086022088769822,0.082635114400181925,0.89787465213099493,0.13183929811930284,0.075738933719694618,0.17165472333552315,0.7067648812872358,0.38702842689352107,0.61103286749683317,0.82306594516849141,0.18719335242407395,0.79533075144281606,0.39301198796834796,0.059866469479165969,0.27488741663983091,0.39526518773054703,0.84951830833218989,0.52160706849535932,0.8998472088435665,0.41263147008139639,0.61110629401635375,0.65029129257425666,0.17901051553431899,0.62169362433487552,0.50987348232418295,0.28906423492357136,0.81638538928236815,0.42733466119738295,0.35573119319044055,0.015332251586951316,0.80795585058163855,0.97422308842884375,0.2904543610964902,0.1654967310000211,0.17039663281990214,0.10515418245457113,0.48786169136641544,0.36868564121425151,0.193371521551162,0.19613721444737167,0.85566441735019905,0.48479076635325324,0.20215519505320118,0.33609848185675217,0.61010955327423289,0.94211415526689957,0.86927004507975647,0.91112871677381913,0.38854439558694137,0.05215022394899279,0.9371114825969562,0.73047951909480613,0.16503128569805994,0.26642822727095333,0.96215862652519712,0.41860725585138425,0.55832524556200946,0.54239219009410589,0.59238522265339266,0.93330961531028156,0.12990963166812436,0.41356665932340547,0.56110962136415765,0.97322194117354233,0.5488364679459482,0.29844040085328744,0.30738506087567657,0.69408777090953666,0.11944244147278368,0.65967546177562331,0.73041291175642986,0.53373519929358737,0.24029641587054357,0.69112446190556509,0.8146305556269362,0.65986263751052321,0.18362121137324722,0.17635113146854564,0.30955016909865662,0.12673425014130771,0.87290816050954168,0.98908958607120434,0.6674708163994364,0.1694098507007584,0.73190458112396295,0.03227481670444831,0.061917807972058654,0.55558779934421176,0.13024594587273897,0.87304784146836023,0.089053379371762276,0.66248355580726637,0.0082313006976619356,0.18852893344592303,0.45194530769018454,0.36522738260915505,0.62796028745826338,0.45611867467174305,0.52446536224801088,0.97182156917173412,0.4928907339647412,0.15484090529847891,0.33243991948664187,0.84696757615311069,0.25029511559754608,0.63831689415732396,0.23133868682663888,0.37250949035631492,0.17143140137661247,0.18901445941999553,0.59002121995668855,0.42397046298952773,0.71962421229109164,0.47720184063306076,0.86879736177390443,0.11940549701917916,0.70008812938118348,0.58361240972997619,0.23241794717498124,0.22392580288695171,0.47321578884031623,0.38077293714042754,0.018029645257629453,0.57715651732636619,0.73985788655234497,0.24928805641829968,0.64817634557839487,0.28753625982441006,0.077286272859200839,0.6109199764416553,0.46804140967782587,0.26262809543637561,0.9865103163197636,0.81613250171067198,0.52677654671715568,0.97283676323946566,0.89044164602877574,0.72294630025746298,0.76517191784223537,0.34043823856394739,0.20172209891024978,0.57822863463778051,0.8980375359160826,0.10669132324866951,0.37106443570693953,0.89724506934173409,0.83960799887543547,0.87085718989837912,0.32343225326389075,0.80958295597694818,0.32346929337596519,0.25812071904307232,0.65261851355200629,0.58841268452117224,0.58089733238099139,0.022287468526046721,0.048493370292708275,0.42100672686472534,0.7622660087607801,0.30959170031826944,0.48683464924804865,0.15986989649478345,0.48330217488342897,0.17697852379409595,0.42483530499273908,0.41865683482959865,0.39078043813817204,0.093287042307201778,0.76868926341645416,0.5925384251098148,0.96500684248516333,0.46621501011773941,0.74102010768838222,0.68898981756297872,0.62815698363119732,0.69288897366262969,0.071458455990068614,0.63214544647838922,0.62702966377604752,0.033267797492444517,0.52363142622867598,0.068118041935376822,0.29320597467944026,0.31640374003909527,0.32207459034863861,0.52555563668953253,0.62480872489046302,0.64790124887600542,0.98456036819843573,0.40354300771839918,0.51088734846794981,0.81178140659350906,0.71720937437843535,0.71117535910801966,0.2431190006621182,0.95896283931797366,0.32901572428643705,0.526020568201784,0.7411230242159218,0.32189422687981278,0.67613682053284718,0.10457291018916294,0.67445865679532291,0.60484907203819605,0.078053948446176941,0.7710142183257267,0.45434692444978281,0.41921839061658828,0.69116539059206838,0.089915054272860284,0.067205983141902834,0.26380677927983925,0.068448652359656983,0.15212014675838872,0.52177238961216066,0.27819525333819911,0.25942831062711774,0.43568428865633907,0.47854141072835771,0.52187131660524755,0.12949740958632902,0.45285012525273488,0.093496360788121818,0.8666178821912035,0.11917786489706486,0.51287158381193876,0.96013883366016672,0.93418639410752802,0.74871882881736385,0.63133200995391237,0.26549461466493085,0.94811699717072773,0.71765692347893495,0.23829996666871012,0.41160488551016894,0.66936107893707231,0.46997121765743943,0.2861739255487919,0.054887012082617731,0.66509008407359937,0.6076067015016452,0.68818909255089233,0.48571299283532426,0.067312835957854991,0.89543011837173248,0.25224225343437867,0.92586212743772189,0.22179962581722065,0.9090938534354791,0.66115439888555561,0.30078701837221161,0.8359482342051342,0.78220075883204121,0.34101778897689655,0.22396513373125343,0.77271446003811428,0.44446234366390852,0.66857874478446322,0.5050078237010166,0.0066481640841811896,0.22832560614449904,0.59614877837710079,0.7047619720268995,0.38290347646689044,0.97460808357456696,0.90683132939273492,0.64866111550480132,0.0011395468516275287,0.26994031301233917,0.4578246655734256,0.46432540750829504,0.42010555654065684,0.0029711931059136988,0.4563072036858648,0.44195969358086584,0.76245812854031103,0.96123470861697569,0.31924709309125321,0.30161686504958196,0.77689190160948784,0.21295795400859788,0.46664358288282526,0.24510922122979537,0.035405103906523433,0.79838651631725954,0.17411567485425622,0.48150738756638017,0.71454045143444089,0.40342689631506801,0.46875113697722554,0.21347300110850484,0.15119398744544013,0.53484956606989731,0.33771335933357477,0.71579399506095798,0.60131532391766085,0.28085697677219285,0.1898278005165048,0.53743347629439087,0.73104257176397369,0.74836543784709642,0.2404211031133309,0.32865751351229844,0.90825009870808571,0.79374534345930436,0.26637096818536521,0.84850170750869436,0.75784502141643317,0.014742783119436354,0.18677535326220096,0.876093238578178,0.28462319272337483,0.58715607129503045,0.090202333023771647,0.085355056731496001,0.57044728625798602,0.91562718286877498,0.67652960481354962,0.9045823761750944,0.54112718058982867,0.97094920726027334,0.42147154819685967,0.89102188817923889,0.63799835145240646,0.94021743797231461,0.64114144720835609,0.92517673496156927,0.67222658741287888,0.0082410281267948447,0.629428841129411,0.77001609065104271,0.93572237247833978,0.025699288747273386,0.20684557601111009,0.58199827908072621,0.70218888112111022,0.64328296282561492,0.23386827156879009,0.32495409031631423,0.11820228496100753,0.10996856836834923,0.6012309026671574,0.12302993098273873,0.44563631304306911,0.964175908297766,0.45413823869777842,0.52789717578096318,0.6553253024979494,0.6556772788753733,0.76258265835000205,0.70117505600675945,0.34671583464369177,0.068051193952560429,0.65538950500544157,0.20389602246461436,0.41199700110359117,0.42909537980798629,0.83350986292585727,0.011080660410225391,0.82458765429211778,0.068569900277070703,0.25387658507796002,0.33963119179476053,0.60732612714171408,0.30910777956247332,0.57642667224397881,0.98281518867239359,0.53533194568706677,0.26637369272299111,0.86124161594314497,0.84849557868205006,0.26213123612338679,0.35205480584409088,0.31489333290606736,0.73930059690261263,0.11802239010343328,0.83640770696103572,0.93043117726687341,0.21496723688906058,0.63909635187126701,0.95530265720793972,0.47466859297826886,0.70507072645006696,0.63292379086604345,0.97284118911484252,0.53926894704345618,0.75230001477990294,0.64083836567820984,0.19132777096470818,0.53844707298092542,0.34906361596891655,0.71383615776663645,0.19433733809972181,0.51727035096148033,0.82374724784167486,0.98376757338875909,0.94306881919037555,0.21648986594751476,0.75969635118730361,0.10474028969183564,0.85334912118036299,0.10860048997448757,0.45110710000153631,0.062955459421500562,0.32935700097586962,0.40053419663105161,0.82987736368551845,0.44388917908770964,0.54876570165390148,0.36215801671380177,0.1196569169824943,0.75586959702428425,0.21006189221749083,0.62161741864867504,0.48632686274126169,0.76426058351760728,0.40555824954528363,0.9235250338143669,0.75191637452691795,0.96301344421226531,0.35349358345381915,0.19010806093225255,0.76406819520285352,0.13748545448295771,0.97172500113956628,0.68930366770131513,0.83770010475302115,0.0928818228864111,0.82627540923189369,0.52015035918680952,0.36352253661258144,0.52504078205907712,0.050119684603996573,0.85252841069363061,0.96580598394619299,0.48000479423208164,0.83416340044001114,0.389521793955937,0.8607657844363712,0.66471683140844107,0.074743448062799867,0.73384536608587947,0.032052307496778669,0.51485194487264374,0.60779248799895869,0.34423554536188022,0.72832348275231196,0.14849728343775495,0.60937252620002258,0.58023114466806869,0.65600377852097158,0.25952386006945743,0.94175178208155552,0.044009551238268614,0.26322863954119385,0.7473839314654469,0.91019186906749383,0.24035750613547863,0.1172125821467489,0.43797828894574192,0.30993504876270889,0.68091811921913181,0.86339424569159751,0.35563592818798495,0.23130725921597331,0.72897667428245772,0.79997790952445935,0.39076039941748603,0.55096644899575042,0.67658170525683092,0.93415638731326911,0.69700695946114133,0.49866642803186551,0.43788236032705752,0.659752656777855,0.019381852643564342,0.15143607529113068,0.3275493002263829,0.96349648698465895,0.42006640156963837,0.62742923819459973,0.26756771834101528,0.17686328507261351,0.1950832627946511,0.073401376095134765,0.81350396946072578,0.49002503232797606,0.42562219018349423,0.77812010818859556,0.87889324750984088,0.46003294135211037,0.38727116314228621,0.87420134431449692,0.76142324473243206,0.6408952103205956,0.39282359656412152,0.89420855971053237,0.80042896156897769,0.0059138783742673697,0.74752632290124887,0.68662619012407955,0.37362159037264064,0.57923874797299502,0.21385872717713936,0.10430767944781109,0.78250314263161269,0.98041669752448801,0.93981087172636757,0.22769210481550545,0.32428978073643522,0.32957875528838487,0.66455172350630165,0.68248902261257172,0.43425852566957474,0.95180653836345297,0.82516559234121811,0.22433310213033109,0.76116570769809189,0.91499899162212384,0.16558100772555917,0.86748372918460515,0.85336067787604408,0.42742708364501597,0.97997343000490222,0.46617853427538647,0.50927921871654691,0.55648145506158475,0.87543820717837662,0.82923925784183661,0.58214579758001495,0.14682579020736738,0.15320482552517206,0.63288540093228218,0.19786419212585316,0.98563775018323208,0.40288528451230377,0.63300016228342426,0.7412186589441262,0.43512314131949098,0.8173279776494019,0.028104466306976973,0.78206340041477229,0.082319392352364962,0.31533900617854671,0.52506351327756418,0.52872348332544783,0.77418149838689709,0.089051171850878741,0.72927877295063803,0.11058869157219306,0.18825935773551464,0.13492962359217928,0.2592089908802882,0.67186578325694424,0.44772232047049326,0.49022524919360877,0.45542661583749577,0.18781330390367657,0.66690077167237172,0.49005576566560194,0.17518354147206991,0.14613214021548629,0.1859525269945152,0.054424408413469794,0.095521944332867856,0.84220554746221754,0.32063586091389878,0.55495393151650207,0.16862322989618406,0.92031278044218201,0.024486731893848628,0.68970052403630688,0.82233655463671307,0.57696305786725133,0.24238010029541329,0.80724324108101431,0.14061465717153623,0.87022376532666379,0.15388754786225037,0.97902249975828448,0.2999806172400713,0.00051715135574340824,0.033236594391055405,0.85678420346695927,0.40519648788264023,0.60644080223981289,0.77529240878066052,0.98005070199491451,0.43893819241784515,0.52240327473962678,0.017313328818418086,0.47472814994165674,0.282926521722693,0.79333412244915957,0.94188273391686383,0.22556450992589816,0.16960187389981002,0.49311335450503974,0.093208332674112174,0.89184396669734267,0.2711726303701289,0.56891460614511746,0.19935029647545888,0.83672640225850048,0.74558519149431957,0.7312538887001574,0.79287062650546436,0.58012716782977802,0.58022334516048435,0.24426717729074882,0.49202457441017033,0.65975205516675484,0.58506351229967546,0.082647984728682788,0.56310360764851797,0.61970019033411516,0.18324702586513011,0.65433510871371259,0.89264007359510289,0.722454337736126,0.024217524987179787,0.88184459989657626,0.26173270933795723,0.97248019156744703,0.77469011078355832,0.76133879052009434,0.59370509770698843,0.57563202465651553,0.55065328206634145,0.91902993097901342,0.095567418755963446,0.5742894614883699,0.91751916956389323,0.016813108550850303,0.3944074039394036,0.11965097924228757,0.039503910988569257,0.85408361388137566,0.57926560979336494,0.47945354812312868,0.40908278633141892,0.83640712286811325,0.12823808012064547,0.20731103491270914,0.60284958527656274,0.54676842863671482,0.054852351676672698,0.6235845458786935,0.83981280020205307,0.031671109185554089,0.44754327939357608,0.60856628457549955,0.48016423454275353,0.35878735199337825,0.066772385656367991,0.04903725876705721,0.21879582492867483,0.48467428545467556,0.63792107900138939,0.19058528513414785,0.96607350680278614,0.12185290583409369,0.93984892005566512,0.20343922722386196,0.72910776603268457,0.14504975955700503,0.41664507612353191,0.18718145251041279,0.6788764961692505,0.042225882892962543,0.67935392275219786,0.62884594313101838,0.22895360284717753,0.27904818597715347,0.98482700546504931,0.53321071012644095,0.43123714137123897,0.68821141024818644,0.73635470696026462,0.49412485454231503,0.33467003282625229,0.53044304666575048,0.35928661083569752,0.44073133072117343,0.97998441920382906,0.1226929527008906,0.71782749520847577,0.48545371458632869,0.82913158512907104,0.84446817085146908,0.39405507028335707,0.8651881317445077,0.84317878434201698,0.26759139461908488,0.16988688589073717,0.20637674532132222,0.93792031460674474,0.55932977405609563,0.34738767934497444,0.63390870891278606,0.38102984697790815,0.41285866632359103,0.3957327271462418,0.20391575830522923,0.71118276284309101,0.93845378990750761,0.8275583541230298,0.081250491009559486,0.94136550142429765,0.1046523336879909,0.06334164465079084,0.14062071223743261,0.65788041744846848,0.16479584046872334,0.17454842040315272,0.61474905821727588,0.36724848749348893,0.56797266871668395,0.16671590765006841,0.051557116541080174,0.11207066462840885,0.92188937055878339,0.15104770812671631,0.72137506240513172,0.39156161724356936,0.73046323617920283,0.39251037661917509,0.06277045893715695,0.027684852706734091,0.85183615524088963,0.4455319448118098,0.92506107119377701,0.097558346274308858,0.97455432927701624,0.90685763293644417,0.85034942599944774,0.46165384715655816,0.77770339868729932,0.7416375070461072,0.50824364271014932,0.72203598590567708,0.17582643093075603,0.72894387702690433,0.3946036019967869,0.64998280553380028,0.13259193965233862,0.21364523268537597,0.030580653338693083,0.050977719873189928,0.92975028857588771,0.058111555378418417,0.29829300382873042,0.41719275566982106,0.29257849061395974,0.80230631136568265,0.32960692175198347,0.31365093591157345,0.4623975004814565,0.87525073363445693,0.6417164207668975,0.40501704089110718,0.024975898421835153,0.19955131917726249,0.83378454702906313,0.025244664838537573,0.55344222342828286,0.065776037920732056,0.84555894917109975,0.66963282782351596,0.34440040247747672,0.080264729324262582,0.44156638559885325,0.32611741901608182,0.053697089636698364,0.3658839784283191,0.17533645925810559,0.788888901011087,0.65617998073110362,0.17472036546561867,0.32752070825546981,0.091783342792186889,0.88950128316180777,0.059018385456874968,0.11697364803403616,0.28403756765183064,0.97853374767350032,0.70882604079321021,0.53458227993920449,0.48860642759129402,0.6998482437548228,0.89607328097568828,0.98949670298723502,0.40050752935465422,0.2849708513310179,0.066702539760153737,0.41037731073796746,0.37127440305193887,0.46019154032925141,0.84009278217097738,0.75631750755244864,0.36106101252604278,0.81002200461225582,0.14118506793631241,0.099219328598119313,0.41748255957383662,0.1763357788603753,0.86027293217601253,0.35603856390807775,0.98707098559476436,0.056137645386625079,0.52835556379286575,0.51666681885486465,0.39062069125939158,0.3324904831708409,0.32894368239445609,0.17391234090551733,0.04260146317072213,0.20685720277950168,0.84795017765136438,0.89610202600015332,0.1788861747365445,0.66863726886687802,0.32998299807077275,0.46378351725870742,0.42705071136122569,0.9030111542274244,0.32418611023575067,0.10297145809046925,0.2500643866765313,0.73809061591280622,0.13024940087227152,0.72890478152548899,0.089616499117109921,0.55624280700227247,0.94262170781381427,0.18235215816646813,0.2767489754129201,0.59123923694947733,0.57237733257701617,0.29693761827657,0.3494798840582371,0.13278170485049487,0.31379274256294593,0.21047551875002682,0.76897271306253967,0.88599226264050235,0.36647772063966838,0.070738287395797669,0.18957160846330226,0.2400616981065832,0.010914334994740784,0.053216846545692531,0.38835173458792271,0.43730483326362446,0.89760659404797483,0.013150366251356899,0.97741034197853882,0.8882194338482805,0.70183420878835023,0.19469161028042437,0.63157324908999724,0.092436809311620891,0.61484397470019758,0.30429322630399835,0.91584382325643676,0.45149708644486963,0.87194044047268104,0.10065270208055153,0.019257797668687997,0.98543582506477834,0.71320113558322196,0.32877190559869635,0.58516605564393098,0.29437334846472368,0.055946040549315512,0.061424767852295191,0.63239048314047974,0.29526153113460168,0.29350683301454411,0.04588775297161192,0.45991437924792988,0.50037385911215093,0.93845389686059211,0.75381163043668498,0.54641313233412803,0.62475929666077723,0.49837620991514997,0.088992739508394147,0.13200311175081877,0.080053797096479681,0.70599409806774927,0.7694681271258742,0.91584912573220212,0.89608339034719386,0.89451332920929416,0.52843423216603691,0.62992943780729549,0.10806266970466823,0.33854934497969225,0.81755076553439721,0.65701683537103239,0.33471674343338237,0.65301428883103652,0.29103332372847945,0.26773384137544781,0.73885029099415989,0.63585731528000911,0.010233249454759062,0.42496125031728299,0.047962864323053508,0.79419056471670046,0.6612369639007375,0.32886172682745379,0.59743330128723759,0.70340155714424324,0.52084144161315638,0.64773516963701694,0.72241235473193233,0.23824871954508126,0.7001809485233389,0.90992606990737834,0.77356328189838675,0.59779893077909951,0.28509720879374073,0.37941302682738753,0.68560666468692943,0.77232424101792274,0.55110313964774826,0.4900546933687292,0.39255558250704781,0.8762100025336258,0.060974758369848128,0.39400772602530199,0.77237377527868378,0.27515839265193792,0.33420803030719981,0.24010111423674971,0.60178725348087025,0.0014763799170032144,0.73384151208680126,0.39103736457182092,0.10376511336537078,0.19997739260550587,0.12660949443932623,0.76435401095543054,0.54404470652807502,0.60237217690330003,0.48037711197976024,0.77126637289999056,0.88157092493260281,0.49439828356029464,0.79097067987313496,0.38066609147004782,0.72699766765348617,0.82242360522737723,0.050818567459937188,0.12667762401513755,0.072156449798494574,0.2471683859685436,0.087642186668235811,0.49812107471516354,0.79036735591012985,0.12692931205267086,0.93357805372215807,0.96889975957805285,0.67687841431936246,0.71960062175989148,0.13076212727464737,0.22116503190714865,0.71549728945596147,0.67575124820927157,0.109249945753254,0.4442209452507086,0.11631792282219976,0.66533833624329419,0.63431074071675542,0.90027189764427018,0.32552607195451855,0.8303745173499919,0.6472739079524763,0.20977051121648402,0.74164014537585898,0.94155947121558714,0.57735386766493324,0.86911270164884624,0.73263200247427451,0.70197963501792404,0.23247864028438925,0.96100627503823488,0.72760796592570842,0.41868031057063487,0.96089253365993499,0.82890364044578746,0.85826099068159234,0.092386105482000852,0.085372183746658267,0.66669237036025153,0.36277225565398113,0.097386901171412313,0.36550681529100987,0.69051668578991665,0.67817819302668791,0.21379180382005869,0.59196221997728571,0.77005171663127836,0.78147030683699992,0.079929240548517549,0.3639763864944689,0.40124815295683219,0.20396758030168713,0.20541553536197171,0.085799882446881387,0.084182343359570949,0.76421457870863374,0.5139907088479958,0.20361777156824246,0.96870243551675228,0.38438891927478835,0.16442931040422989,0.5462607417069375,0.90928973478265107,0.22666371748549863,0.30170438033295793,0.63552121682558205,0.57508048119954769,0.47963556406321006,0.83543891831533978,0.15032706953817979,0.38419152813730761,0.7741126533318311,0.0059534067590720947,0.099600263214670123,0.0098206205363385382,0.29112567541189494,0.19638909380184486,0.23499929029494523,0.3894482577173039,0.5255635341606103,0.19455538662616162,0.090583744319155807,0.82690573377767573,0.40126226523192599,0.77194160506362097,0.1037977893766947,0.076431367120239888,0.11116112683899701,0.288505684195552,0.77658361418405542,0.27272540844278409,0.28865461175562812,0.61548893176484853,0.59749810448382046,0.91195947992848236,0.95477844164706771,0.22316418213536962,0.42816014630952848,0.28194760088576004,0.68780467665754264,0.083787419556174428,0.7505182844982482,0.32451910382369531,0.42831590595887975,0.051577850226312873,0.64894305489957327,0.60477551528485496,0.10865750150056555,0.53912702260538936,0.92442225148435686,0.34442475297488273,0.18558619608404114,0.5216969125438482,0.26351705005858095,0.98986268353415652,0.78985195429762822,0.8466968709812499,0.48272773101925848,0.89393381982576103,0.76126868139021098,0.12751742493594065,0.39204667875543237,0.60965989161981271,0.27020940074929967,0.82203809168189768,0.036862286436371502,0.97795251966454089,0.66656196112744515,0.63916239493992177,0.42526881534839051,0.74282897685421634,0.44722183927427978,0.74979819796280933,0.60375859498511997,0.65997773654758929,0.058809264516457918,0.53462722720345479,0.31265332225710152,0.7229521593963727,0.76499490702990447,0.77194437316618858,0.68946866081329061,0.48376056335633622,0.12407885952852667,0.58782108137151223,0.12884992990409955,0.95750142430420959,0.091428817750420416,0.077593892980366938,0.0077420945232734087,0.034817456637974829,0.41887828948907552,0.36848922832868991,0.64901744860690092,0.077134274546988305,0.71569329527439551,0.7763455356960185,0.52589720358140768,0.47234871649648996,0.10772975771455094,0.43624587832717227,0.62544871278572822,0.27897519487654793,0.12523486862657593,0.51163695958675814,0.13296027247561143,0.36418198973871768,0.097608152527827771,0.11671257324982434,0.14060697176260872,0.59263874548953022,0.16656878584530205,0.016416869040112941,0.19428643373306839,0.46309940868057309,0.31430497891735287,0.10544299842556938,0.31326471057487654,0.33534182543400676,0.21538767591817304,0.086023062646854664,0.24853142880834639,0.20310637954389676,0.88399317948846146,0.5126012349966913,0.69619098902447152,0.47201141320634632,0.55018056464614351,0.034838315255474296,0.18258932801429181,0.84460768193006519,0.20991053170524537,0.94110772259300579,0.076573337889276449,0.84440610763616863,0.90466240312904123,0.97049731549574059,0.69964805939001962,0.85368434672243887,0.5522110742563382,0.81309395213378588,0.31029469349188732,0.90943792081670838,0.16454152977559716,0.59224943303503097,0.61627228081924845,0.81850670459680264,0.97805538455955687,0.53223007273860279,0.16872769747395069,0.90400712071219458,0.25521432705922054,0.16610448222141713,0.39283132692100481,0.018699730304069816,0.073254821556620303,0.84793513506883755,0.67725510239135478,0.83296294772531831,0.39836444816552102,0.78030510300071909,0.97300684883957733,0.72222334880847483,0.39816213995218275,0.72720200082985686,0.61446522893384103,0.58059875210048628,0.15282610880210995,0.5575975999329239,0.37753175157587976,0.91499020325951275,0.15952262881910428,0.59918480556691067,0.7505313074192963,0.10030893089482561,0.8624000132759102,0.61282440911047165,0.34726897340733559,0.72648192628053943,0.67868035135790705,0.28805453695356847,0.29120714830700306,0.31543861476704477,0.5253230137308128,0.56815389103721825,0.82409915161086245,0.63485110550187529,0.5915152932330966,0.054867456033825875,0.33195821708533912,0.9701156354346312,0.29623276909813284,0.78459139837883407,0.448066613052506,0.63278844035463411,0.41841919590951876,0.32108309837523846,0.35601025107549505,0.96295225275680418,0.55273600575746973,0.50018261132296171,0.73511990732280541,0.91222896666498854,0.4200914378114976,0.56391569066327063,0.42506222785916181,0.44188313960563391,0.12362402885919437,0.95482082779984923,0.024189675233792514,0.11899477274157107,0.28728340521454809,0.97507459886837755,0.31434537537395951,0.22767011811956764,0.64715323444688688,0.59102597019402314,0.94736656315857548,0.56464426337275653,0.92637355933897192,0.75699725064681844,0.45330747439060359,0.40806078483816238,0.23807361729210241,0.055325952842831608,0.75625896134180948,0.50094169101677832,0.75173410826129838,0.170320858634077,0.73324158503673975,0.52373571378411721,0.73625145551282911,0.52917187191545967,0.10486120960442349,0.67585810171673077,0.67474482314195483,0.4677034699707292,0.45862797313369807,0.32750627973116936,0.21004157067043708,0.37076980946352706,0.097533555517438794,0.13654662722256034,0.81533872957108544,0.72209583238000052,0.17325963965384289,0.32600640793796626,0.16193420719821006,0.65390170139260595,0.65932734884787347,0.063106141565367577,0.88544547698227682,0.89831181894522161,0.51139262849232181,0.10361156584694982,0.69567528914194554,0.098258894279133521,0.15205447549000381,0.38859502865234391,0.94392249427735808,0.65901269471738488,0.53547523977002132,0.4906424185470678,0.67293656273279334,0.45776821877807378,0.036197386540006843,0.20917348572984337,0.8011118148313835,0.40540778868366034,0.74113268733490256,0.10664725973038003,0.11898514811648056,0.48442789136432113,0.51979471805272626,0.11070478246081621,0.32257529144408181,0.35501276765484363,0.54098494981415568,0.28775576973566785,0.39489194543799383,0.3245255288458429,0.4109424512973055,0.25643844936741517,0.1789303820882924,0.53975514147430659,0.25283287694910539,0.068935469607822597,0.020330423929262906,0.017168096902314574,0.91443886103108529,0.13356999841053038,0.64716288557974622,0.88757448669522998,0.92328743108315392,0.7348993576155044,0.16187724684365093,0.59762657196493818,0.91188628206728028,0.94335651468951254,0.78671130670700218,0.90502121989382434,0.57162025387398896,0.23992795880651102,0.43563523868098852,0.89304700910579415,0.25503759976476431,0.43870224584592504,0.74442692900542173,0.55705545889679342,0.22638279114849866,0.34762569375336172,0.063545219935476779,0.036311305866111067,0.75965621335431932,0.55814550237497318,0.66449016370810565,0.34371718686539682,0.70806038625072687,0.76400465147104113,0.63564021757571021,0.62388755457010114,0.41485780871473255,0.88368261101190004,0.38685445871204138,0.85337360997917133,0.80797870258335025,0.33423595912288873,0.31425358358072114,0.65714409271487961,0.80639437012374404,0.67751778331585233,0.78118278167909005,0.39608023408334703,0.84374125614529472,0.018208184991963208,0.50058025344042112,0.0040451396838761863,0.62930477762594816,0.38639553639572111,0.94138546638423581,0.98994216166203841,0.43952451775548979,0.19806388690369203,0.05941863386426121,0.62176230158424006,0.85808239147765564,0.91028775250772009,0.62487684732070192,0.84425460490398108,0.35152291271137076,0.81956362696364526,0.98703323576599356,0.91437505821464582,0.22192978380247949,0.27311094780452549,0.64592656024731698,0.63855962671805178,0.59894073839765039,0.41400628306204451,0.3833729730779305,0.98212558284401896,0.14076528583886103,0.46603809772990645,0.02488363617332652,0.66858257849933578,0.41690112687880171,0.92399684536037963,0.18225928370375186,0.56539195141056553,0.71851751801557839,0.43395889337640253,0.36665905982488767,0.31684567686868831,0.83314448122400786,0.90630925957811992,0.72688738818978893,0.97228702369378883,0.56531561572104694,0.27690803447272627,0.17508651128271593,0.019579439016524702,0.9478101870347746,0.33293567077489572,0.26266880998620762,0.87728602478513495,0.91533508915454154,0.11015261457301675,0.22153270457172766,0.30895660229958594,0.36982817145762964,0.51957659737905482,0.086625350501853979,0.11818135327426717,0.63371538037899877,0.75326771545456717,0.17881071864394471,0.30952670580474662,0.04460059841629118,0.28609709174372255,0.71594174314057457,0.32255223982734604,0.34396326724207027,0.40754055166617037,0.65401065569836647,0.26072093569440769,0.38002991838846356,0.48155418438138442,0.62107303597731511,0.22444151890464126,0.021433315607719123,0.92198789209825915,0.90146429245825854,0.04410150023410097,0.7925530685065314,0.96671021626330911,0.73838901063892992,0.77516566061647607,0.80498168699210504,0.44601855115033684,0.37947325662709774,0.21182300176005811,0.61110644107684498,0.10206701762974262,0.5697399073163979,0.53954054241534322,0.52475118537666277,0.53072631029644979,0.27231905425898728,0.66125555921578782,0.24614267338765786,0.080024992141406986,0.44712237843777985,0.64030954975169152,0.22543570060981438,0.14428506620926781,0.79640508803073318,0.39906137198209762,0.97624319754308087,0.90925513292429971,0.02969202879583463,0.41921204650076105,0.53030754655832424,0.63589230253826823,0.08620644316077232,0.60949762765550985,0.79407052232651043,0.79165059791877868,0.97925345733761782,0.43831734497565777,0.066276797794271258,0.69324448341038081,0.93000437522074209,0.81087343253195288,0.017995756343007086,0.2627072741417214,0.67700022812001404,0.055148333504330363,0.77589911144692447,0.70041199669009069,0.52879618998616928,0.79265891610179096,0.87650584974791856,0.95763228163355962,0.8900148483621888,0.98213129930198195,0.61967824973864483,0.041815325960051268,0.13649029821390285,0.91403018269222225,0.21562358422670513,0.062192248203791677,0.18031966231763363,0.37767469667829573,0.041401669462211431,0.12644180053146556,0.10587224333547056,0.43476895027561113,0.61027905362891033,0.0085165323573164649,0.93026439407374706,0.86526327274041248,0.35091117011150347,0.8781439812225289,0.40652279602596536,0.51331040517194193,0.97450592263368885,0.30271992614725607,0.93612339998362581,0.39243151185801251,0.66987823144532743,0.39861382495611908,0.97841924217995258,0.22269981627585367,0.75916307204402977,0.54578654284821826,0.3333322754013352,0.28303627679357307,0.65575804113177583,0.36751923231175171,0.24172363793710247,0.048965113149024547,0.2925521783111617,0.80600161373382428,0.67337658524047583,0.61508556811837478,0.52256836397107687,0.30770421763882039,0.40747757981065658,0.22680586251430213,0.59661183521384376,0.42650571232661605,0.743014851633925,0.71727157082408666,0.57769783984869716,0.8534474922018126,0.54627458659932016,0.67529051783261818,0.57773491107858721,0.57144247410586102,0.5067017183010466,0.79394872350851076,0.081766800801269704,0.16541879193624481,0.71237443526275457,0.6311193796154112,0.98619454909348858,0.9816651424393058,0.35098895773524419,0.90028342322213573,0.96154622929869216,0.46914974651299418,0.34298427310539409,0.60404712052317333,0.87767842113040384,0.88883625741116701,0.45014791431371121,0.7053558089747094,0.40929301552707331,0.42131744263228027,0.21555474839173258,0.52238098078407347,0.12439804302994162,0.22630332777276635,0.30582544126315042,0.88563555474160238,0.71884338908130307,0.1076971460133791,0.77504334570374334,0.9404090264439583,0.68684973636176438,0.39409930713940411,0.0097042313776910302,0.027750755168963224,0.83478120225481689,0.44259597223252056,0.91310868160100656,0.20385797159979119,0.76324467212660241,0.88195613098796455,0.042233254357706758,0.931005469460506,0.37440427995985376,0.075217235013842587,0.69729622721672058,0.13714548197574913,0.72221791448537265,0.50885438608238476,0.22203429701970889,0.85841572252102194,0.26636418173555282,0.79820777304936197,0.66630085015436635,0.83164550055284048,0.47271727452054618,0.90745982259744773,0.61747924476396288,0.81628921333467586,0.23408048101002349,0.64961428185459225,0.17535251397639512,0.89455788992112506,0.82134695439599459,0.27577192464144901,0.75925245116930451,0.81599928841693325,0.92513348557753483,0.67646464395336803,0.10681001074612141,0.70966261813882736,0.18040522755123675,0.77307216393761335,0.098104325865861028,0.65563811076572165,0.48486615974921732,0.74329901883378624,0.19131288097472862,0.20011957313166931,0.88693265593377868,0.56309502281947066,0.098098750936333093,0.64212299461942168,0.04372391320299357,0.69082727777771646,0.55172220069682221,0.6311459450097755,0.76477011354407298,0.80103896341519432,0.30882065156009048,0.78144518853630873,0.17719265424180775,0.71812329171225431,0.33556612264830621,0.026836688700132071,0.20804417687002569,0.94356722263852133,0.50505099494475869,0.13500331334536894,0.8973006837931462,0.20682552807033061,0.62263470475561922,0.12941823802655564,0.10051854787627235,0.86267923735314977,0.38694620394380763,0.88004379485500972,0.054070456170011313,0.006305839300621301,0.49627008401323108,0.68840319902636116,0.42740396057255564,0.8116031376994215,0.98758474418660624,0.64786780759692186,0.80348655386595058,0.45552694267127664,0.4807951487135142,0.72578675382072111,0.88550327659584582,0.56128532707225531,0.13617113130865618,0.43933440104126931,0.38610486787743864,0.52042379535036165,0.91808265972649683,0.56024608630919825,0.90831889190012594,0.63449493674794211,0.70643827422754835,0.5900743837072514,0.6121540045877919,0.75952920195646578,0.3398550118692219,0.67132569807115938,0.9266670591174625,0.13287251885281876,0.12352630186127499,0.24832262480864301,0.7232795112091116,0.3280411223717965,0.6400126625108532,0.18163160440279172,0.82482046626275407,0.58926913508679712,0.39429940114729106,0.76655852216994391,0.74232399164233354,0.34088164922548458,0.82686830434715375,0.29242112251929936,0.31923579156165943,0.89490025665611028,0.54673900363035499,0.47157155458582567,0.96933784102555365,0.56814923996105793,0.54381544705945994,0.27000228010816502,0.32711937787011264,0.15736763342516497,0.61327684025047347,0.68962237452389674,0.35703020501649008,0.19169007638236507,0.74894445072859528,0.1377566533908248,0.40976174640934915,0.10562927635386586,0.4874216550285928,0.29944449369795623,0.68779580370057369,0.29148892542812971,0.96300654896534976,0.0039815120492130516,0.32447741494048388,0.13677328017074614,0.82942514967871828,0.7365347260585986,0.73168150418903677,0.17082705213921145,0.9446327120857313,0.6443884209170937,0.031603404195047917,0.79577164962887759,0.35330029525794088,0.51389334857929503,0.65602730174548929,0.087633249631617213,0.27868654094869272,0.69039434967096891,0.22807923556538298,0.85637082910398021,0.70401726461481307,0.45080142278457058,0.61832718333927916,0.88028272873722013,0.58470256361877548,0.52669397386489436,0.65383358541643244,0.32018378958804533,0.047079132192302496,0.17931454304605723,0.34529695630073548,0.55354382493998855,0.44682717639952896,0.24705379749415443,0.23849594505736604,0.37353473155992106,0.70789456701837483,0.10131918368395418,0.84762046710820871,0.97704736902611333,0.2786926220613532,0.25079563183011488,0.72374031972605735,0.41385509565705431,0.13638526198687032,0.43231091345893219,0.82835554876131934,0.72496408268110824,0.13721570105524733,0.3800029908749275,0.58232729097129776,0.29230169971939174,0.36249523172155024,0.84032301804749299,0.79869195173727348,0.12546085403999313,0.49874297509202731,0.47216107514686884,0.48469839392462744,0.77725992486812179,0.86827822878956795,0.98806066489778455,0.34961039332905786,0.78652294826461,0.44494912656722591,0.027026533191092311,0.95389498197007927,0.94971992978593334,0.04187481769127771,0.33213815066730601,0.96322875275742259,0.04655061868485063,0.18731477367924526,0.59987836958141993,0.66044909123796969,0.96431660208385439,0.58057521573733539,0.68448581664590169,0.66836129325907678,0.66773966303095222,0.35741182722151277,0.1988035004446283,0.61407564241206269,0.20680584708927199,0.80303937011165538,0.85471584122395139,0.0190649031708017,0.85688200491713362,0.083034769494552171,0.71390880288323388,0.96505365451332181,0.019966466501355171,0.6448360384767875,0.37090456643141806,0.22892543707508595,0.31012843284755948,0.39945623147534204,0.49332223549252374,0.12080031068762764,0.72189152847742666,0.26575443436391649,0.70779171964153642,0.25526771278353405,0.12475515753496438,0.32834858298534525,0.79260715173091734,0.15071167720947415,0.32747957810992373,0.34452758490806445,0.40955694462172687,0.12044187425170094,0.32588307650992648,0.87531152493786069,0.60925806104438374,0.093335604309104384,0.31076839746208862,0.92074021890526636,0.77600623210659248,0.39502976485993713,0.66374391423538326,0.046927450590301303,0.53205657870043066,0.33894976856885478,0.71441896379459646,0.72860649236943575,0.722484836652875,0.78673533334862444,0.63308706327807163,0.53945684148464357,0.62983701098011802,0.67936122990678993,0.10098997632740066,0.8846963722771034,0.11357562476070597,0.054243869762867686,0.5505189964757301,0.30062476455001158,0.46229353609029206,0.04572963804937899,0.73616833060747011,0.19352199555141852,0.090804231329821045,0.71296414183918388,0.78909411655040462,0.71453573858365416,0.54018184947548431,0.86902108042733739,0.96076365450164303,0.57660863493802028,0.20374686417169868,0.069977490229066464,0.89177830257453028,0.9135171245969832,0.72776531949872147,0.79236836882773787,0.78207206061808388,0.28308738953433932,0.39350854048272593,0.53822659519035365,0.90001156069803978,0.97492847997928034,0.11343900072388351,0.70852128835162143,0.14767496934626251,0.83057990507455537,0.21256043313536793,0.42892795835388825,0.12918729819590224,0.465918469321914,0.068662492835428565,0.55510628318879751,0.08863513218937441,0.26640062438556922,0.5907761515304446,0.74152828236110513,0.94737410381203513,0.49884889737004412,0.11963704145746305,0.64034156652633101,0.84701511956518516,0.30466812060680243,0.81400819608941677,0.13733739130664616,0.46731503964867444,0.47081720549147577,0.66587727836798871,0.3588346872618422,0.16236601391108707,0.78023229307495057,0.7582842562976293,0.77249286592472344,0.23917552956612781,0.66182708906941112,0.53198641701601446,0.13216881711501627,0.71574247479205955,0.021340328429359942,0.20342286962550132,0.55424230026779697,0.57828327245078981,0.29781082912813872,0.14303299434017389,0.93001561728073279,0.4526533965789713,0.97109459799248721,0.41297685086494312,0.28375418254639956,0.39190528262872248,0.79281208605738351,0.44643359780777248,0.88715024022851141,0.61805070016533137,0.59155131037579844,0.55450550143606958,0.87517656282288958,0.77499925544718284,0.93429422863293443,0.2982251543132588,0.54366650497773661,0.79826147848041729,0.72110295301303262,0.69516719606705013,0.57099071395816281,0.34021286075469104,0.025598900138866156,0.020398654234595595,0.44206566979642958,0.38313507576473055,0.639838941427879,0.31438230922445654,0.51599092538002878,0.1332376753538847,0.36858953326474875,0.43110621650470421,0.92776331716915594,0.73893854411551729,0.82123749943915758,0.0092777951387688525,0.84059461779892442,0.9873037514649331,0.36880889888154345,0.27870791035937142,0.58725272830110042,0.9607661775802262,0.86382703826297069,0.77969275763724,0.92416658981703226,0.9683874626015313,0.66177963440073651,0.15241295733489096,0.20470869579585269,0.38405800343491137,0.64731208282755692,0.90891445968998597,0.071331033837050195,0.49867414271458982,0.40265964600490406,0.45514588865451516,0.66026221792213613,0.11748035394586623,0.92438840567367153,0.59356063797371461,0.80284052657894789,0.84006123608211059,0.47970279283588751,0.15049862343817949,0.74918171439087022,0.63437991631217305,0.41287697973428295,0.70244389692088594,0.96206813292112203,0.080434516423847524,0.9780949551262893,0.71347427024971688,0.85550605486845599,0.0033482608152553437,0.38499493181705474,0.85043701319955289,0.45019440271658823,0.97611652360064904,0.24422032792121171,0.19173326606629415,0.77657886399189013,0.33307332515716553,0.87400923052802681,0.60817424620036031,0.90457456445088613,0.90110691333655268,0.55270207419991491,0.024982940037734807,0.59287942404393101,0.12104359138291329,0.14738795774756,0.15423926746007055,0.89071634557563806,0.73789646079763771,0.44588964433176442,0.099902603910304602,0.2036156207509339,0.11414494594093412,0.89065447482978921,0.92968761637341235,0.75495968397706747,0.49532578462734816,0.87366144514409827,0.16867380925454198,0.28210071413777771,0.84783219410805033,0.66649372966960074,0.3288590140454471,0.6576371028693393,0.52177746435161676,0.12158684574533254,0.44107294233050198,0.40324523719260469,0.31207596576539798,0.2725340841268189,0.15210214959690346,0.70950304252328356,0.3117855176073499,0.28055053313495593,0.84439157699933276,0.88723686600336804,0.39851115737110376,0.81831310268724333,0.92969189380528405,0.38612624627770853,0.40556108195800333,0.49292390970513222,0.76147504944121469,0.68785714198602366,0.35947334124008196,0.82602531304350124,0.6348505216394551,0.60353339304914699,0.86092565002385524,0.56898978632641961,0.91804444889305159,0.32278175261802972,0.40931026931852099,0.45186035259626806,0.92033206634223463,0.7066576301632449,0.43360635826131327,0.87556099462090065,0.80059436543611806,0.71364711772883316,0.34943481485825034,0.018426647961605341,0.33219585393089801,0.66802870074519882,0.32256695117801426,0.43412373550934719,0.096006327015347781,0.43344197736354545,0.71304720496991647,0.11586645241593942,0.0063315204880200326,0.80653487028786908,0.40628167859511449,0.32160687943920491,0.89241605298360804,0.24376583378529176,0.061675062272697687,0.33928608876653016,0.88578091527801006,0.37193521521985529,0.45494938979158178,0.54108825266361238,0.33400309644173831,0.55630095052532846,0.41875902757979927,0.39186400473117827,0.21563187770079822,0.39414957439759746,0.096364239058457313,0.51021354564931243,0.24577265559229999,0.65095523634692654,0.44621432416141033,0.94140604793792593,0.42747445418033747,0.71512502910336484,0.4130401020892896,0.39607894718879832,0.43693798579741266,0.8235526296473108,0.15163249416975305,0.13299495823681354,0.010013663708232343,0.059862104917410758,0.74176534525584426,0.083404576380271461,0.94284704505465922,0.16225933535490186,0.9001418560626917,0.32097772284876552,0.073466273797675966,0.29870951094897463,0.50803821741370481,0.011564184471499175,0.089399321659002454,0.53450604497920717,0.031802254181820901,0.094418967829551545,0.11657108169514686,0.14504970884649082,0.14842326106969267,0.624829790268559,0.84419768696185205,0.8507272117235698,0.2435368375503458,0.96447941187769171,0.9041807901626453,0.56513003921136262,0.78250516160158434,0.98688170698704192,0.9469964672229253,0.54800615611486136,0.34463425401365383,0.51030386799015104,0.68018855120055377,0.32737524698954074,0.58168412260478364,0.42570178125752134,0.41211296152789145,0.48688818871742112,0.96513757833978164,0.070326718788128351,0.0064764562086202203,0.87886182612273844,0.55965043899603184,0.063987253115046772,0.73589541422668847,0.43182310389820489,0.7385950285568833,0.8183632113598287,0.2733871324779466,0.39058933464344592,0.92560562812490388,0.60734013246372343,0.79947354321135211,0.81045432626735414,0.50587417388102041,0.87737268605735153,0.41280456235399471,0.92180051536532115,0.15415993892820551,0.18887680134968832,0.98313347413670271,0.2559964318620041,0.28368687862996012,0.88888702993048352,0.26574471661588178,0.58742824315326292,0.77504798225825655,0.49880168449832124,0.060209794873371719,0.60668149278033523,0.70302168906200679,0.81122802211437373,0.61877776124048978,0.52657027616864072,0.86837593896081666,0.20005434673279524,0.3406700197281316,0.4493545328755863,0.710508779080119,0.42363181333523242,0.44020697363186628,0.9563922276953235,0.17926464459160343,0.61385450515430418,0.59470473448047412,0.68843605482950809,0.41625905616441738,0.71296296881278975,0.010944153468590229,0.34342623782576992,0.29158586479956283,0.51182051366893577,0.63426499038236217,0.55112768676364798,0.69147579218493771,0.15493026644457131,0.74482574945082891,0.55643548413645472,0.43952624652301892,0.6878552534803748,0.86235350343631578,0.42219098494620994,0.095090432662982491,0.82790771268540997,0.8482113091391511,0.7240731966798194,0.30575193199329076,0.35643073343904691,0.47344240675214677,0.4496702503133565,0.57385776933515442,0.38252600053790958,0.30807985415915029,0.76779909589095041,0.022492484680842608,0.72692839686060329,0.53580252289306374,0.42597506137099117,0.76684326954418791,0.68681504691252482,0.29146138039883224,0.93576135272858663,0.71548082813154901,0.77639027135912331,0.55261906777275727,0.69851613709470262,0.73169948129681872,0.10824089641682803,0.21934984213672579,0.38603134662145749,0.87227945962222297,0.58499568145489322,0.37566221673041583,0.45478624576935545,0.32330550002865494,0.049836583246942609,0.64117603431455794,0.22640070371562615,0.93951312793884423,0.82584717253921558,0.49253523274557665,0.015488248192705214,0.10789620345225558,0.85507375303655864,0.9471457647392526,0.077288359135854995,0.91587360438890753,0.66235216302098709,0.37222188890213148,0.49520921314135191,0.46023198634386064,0.21581386183155701,0.38247151255141942,0.56589956734562297,0.94328063769964499,0.12096726237796247,0.22095860853558405,0.66445456815417858,0.89303510504309092,0.59358969325432553,0.010571965032722801,0.055416396658401937,0.66009206340182569,0.055779581672977654,0.92817571742925797,0.15097563350340351,0.016854057982563973,0.019424857003614307,0.0021908753877505661,0.43082379098050294,0.024359003864228724,0.82389926182804629,0.59921527405735109,0.61121626944746821,0.10107667678501457,0.51492812405107546,0.38508644516346974,0.8552295438037254,0.17181124963564798,0.096720941655803472,0.59989925078814854,0.89897167798597366,0.61095129410270599,0.10693653140449896,0.27037565102102235,0.51182679554913191,0.25258617882616818,0.14172446737764402,0.033239662146661429,0.55377686879597599,0.33461078012594953,0.0045338269975036382,0.71409111870685593,0.75901517183287071,0.94394042851170523,0.84022213893011211,0.10678947068285197,0.90765305408975105,0.86677541117649526,0.97709859425202006,0.4450468680867925,0.50008177046896884,0.25842036816291508,0.26870740441605451,0.75179432446137073,0.099743002017494295,0.79685612186556676,0.50277034258469944,0.23898279688088223,0.57975303579820314,0.34429480336373669,0.75525822507217522,0.7263211603509262,0.082133021070621912,0.26975364392157641,0.65498023104853931,0.88012112009106203,0.51180922020692377,0.76977104592137036,0.16933754188707098,0.28825801381375643,0.92917228667763996,0.14568061471916735,0.58457834798377006,0.45371453183703125,0.43622833295026792,0.7224280332704075,0.93249974189093332,0.77870502239093187,0.64935467951931058,0.71152675093151629,0.4474262519739568,0.27351478075375779,0.83130044639110567,0.016289561446756123,0.52729726878460492,0.37769405887462199,0.5483481978415512,0.5337005441891961,0.67326487550977621,0.33551528005627917,0.3635180044756271,0.82786985613405706,0.23689770085969938,0.49008998604258525,0.57313425200292845,0.83524783764034505,0.85821818040451037,0.90164823977742348,0.4027089921757579,0.55369548879330976,0.11148898783139885,0.36311356184771282,0.43940737762022763,0.77987365909852091,0.29718255789717657,0.30885041333036495,0.39737298754043876,0.56236887522507462,0.82502993157366289,0.083816899191588162,0.39959238159935923,0.072420218463521452,0.38627417184412477,0.92679699812550098,0.35684440146200358,0.52414183516055346,0.13885280471993611,0.65435888041974977,0.25752888746559621,0.63159098693635318,0.085946950083598497,0.588360009896569,0.42510335777420549,0.98297786316135893,0.25470995360054077,0.81707037330837917,0.29457982946187256,0.60878101409878582,0.42060982235474509,0.73327664766926315,0.11801518990192562,0.51542543284362186,0.49011625109240414,0.71324228900950404,0.69934315965743732,0.12164171037264168,0.24113763737725094,0.67570915295043965,0.77721937743248415,0.71077657992253085,0.07334867611527443,0.66800743344705549,0.38994459378998725,0.65967385402182122,0.0033601805521175265,0.46809375191805885,0.21847012397367507,0.056778492133598771,0.0012875655409879982,0.37234091477701442,0.18728786990744992,0.61845386511879041,0.14105921780923381,0.11315526156686247,0.26539523588726299,0.52833283510990436,0.1731431421590969,0.64805037881713357,0.13726248127408325,0.94712773415492846,0.59289675413165244,0.94591341511113569,0.89204732208279891,0.88820198320783672,0.92998596522957089,0.89709282254800204,0.21897261745529248,0.14360854784259572,0.47784466462908315,0.37257834901101888,0.37225100342184303,0.6753435326786712,0.51854223519796505,0.52798187179025258,0.2622238630265929,0.70840359685476872,0.06767364679835737,0.81574988373555246,0.43196381036192177,0.0042167555890046064,0.17211450796108693,0.67421926190843806,0.0258460380602628,0.7337896011164412,0.94513148641213773,0.90885883970651771,0.42629055176395925,0.57443549739662558,0.95194298837101088,0.020686636017635464,0.7547903362149373,0.8288023247569799,0.0072751772333867846,0.59109542999882247,0.67323825318133457,0.27202101542847229,0.69889125083573167,0.31201977644115686,0.63867750307777893,0.0057813215511851009,0.54678674850147213,0.47704218019265682,0.21592764124274252,0.16679300146177412,0.7646425496321172,0.37135419950354842,0.22574804234085605,0.50816820044768973,0.36715606804238632,0.96620926023228093,0.88201953273033717,0.16610953252762556,0.84781313502229749,0.85828327403403815,0.39840921010589225,0.71966594520024951,0.31483892743941394,0.40686707316432147,0.60254907776601607,0.67332860387396065,0.90109327428275721,0.35974450810812414,0.90000720881391316,0.29259621785720807,0.58567846349207686,0.4564486883254722,0.32924569231923667,0.68343680765479797,0.8445329943322577,0.1504698929353617,0.43797391769941896,0.075212472144048664,0.89531192414928229,0.58485823659924785,0.032847613398917022,0.47845137789845466,0.5271022140188143,0.80011756443651394,0.70933237006422134,0.95618840277660633,0.17750882669119164,0.10293169966433197,0.33316759738605467,0.6912290857639164,0.18583582227816806,0.46921368693932891,0.31870791654568165,0.10716932608745992,0.39981814780505376,0.21668173332698643,0.543080635573715,0.41992670747218652,0.048251206611748781,0.18726151473121716,0.54720481404801835,0.10679237939184531,0.27206329416716474,0.38191978607559574,0.23908672554418445,0.08275937129510566,0.24071372721344234,0.54855862204218286,0.15261786169605329,0.017165497296955438,0.9468521907390095,0.98655953778885308,0.92630475830985237,0.98920097886119041,0.81052729316521432,0.63646025730064137,0.72097922811750326,0.59782391677144919,0.17405360610689968,0.71764601311180742,0.35676726777339351,0.7680205074464902,0.18690207860665395,0.19516700936481357,0.0011864183493889868,0.10010188309242948,0.31325532198417932,0.2257662759977393,0.69262081784661855,0.38057550658704714,0.61900262618204582,0.69682284387527038,0.53763155663385986,0.33401549447095019,0.43464682990685105,0.93670520286541437,0.28455299208406359,0.79868760930374261,0.49664251217152922,0.53266973312711341,0.75393072338774803,0.7995697083254345,0.75478396743535991,0.11616100973915308,0.57029534695437178,0.2968611000292003,0.74018620970193294,0.37452101187547671,0.63907916146796195,0.73103124096058314,0.12198732142802328,0.78682189412182191,0.49935388235142453,0.78181588124250989,0.3437886967579834,0.41163722199155017,0.091226202507968993,0.88605122974840922,0.14637097498169169,0.67847997682867567,0.1961880037933588,0.035215907818637787,0.6655475325579755,0.86482100721448663,0.42719606751808897,0.56992739376844836,0.68745987604837866,0.071456307708285746,0.25421671386575329,0.66091558670857919,0.0096610603644512599,0.80777423802064729,0.52696024232776839,0.44614848877536134,0.2765980454790406,0.78973077714443207,0.93676785524468864,0.3668304127268493,0.89737882800400259,0.78395227832486847,0.38875773195410146,0.60180975327501074,0.024606688076164573,0.015411763137672096,0.66472243261523545,0.32823820786317809,0.82879892715252934,0.62233843871857975,0.9617846452421509,0.20488993932260199,0.056363555886782706,0.52628724949434402,0.44582057684194298,0.0092877249489538363,0.57664560036733747,0.5212537243170664,0.6797714383201674,0.41637349803932011,0.71223842251813041,0.49719876502174881,0.64354033919982612,0.82252921379171307,0.71964540882501749,0.46890011570882051,0.37010918976506219,0.32387409489601848,0.57576625930611047,0.8457944043120369,0.11495732676470652,0.95435019089374695,0.057077820855192841,0.3678359685698524,0.96996756949229168,0.3321133642899804,0.28197548590600491,0.49472745357546954,0.58902455412782728,0.59857095387065784,0.95253942261915658,0.54694415071047842,0.18392048408277334,0.42222006857860833,0.19110941725317387,0.5088348699104972,0.33822766075842081,0.50496452752500776,0.92356892145937308,0.032356635583564636,0.38676086416002364,0.16648887368151918,0.27048453917261212,0.79140057410812004,0.15042760705109687,0.82494524778099731,0.39313775350106878,0.63531802233075718,0.37097524628508838,0.14330335698556154,0.12980356256011874,0.085830803182907409,0.43069031076505782,0.73600558650679881,0.090598038921598345,0.38150711428374051,0.60848068799357857,0.86332850481150669,0.010869299448095261,0.81454732008045538,0.56752778376219792,0.19207887435564772,0.78183255877811464,0.27520051557105035,0.23301310144364834,0.5336110873846337,0.44353952225530519,0.039952367576770481,0.56366459847427908,0.77092405756702642,0.060787432577926667,0.079398602731525894,0.49132599212927741,0.6556147956848144,0.63589207964250816,0.4413675314630382,0.21905307429609819,0.57610192188061771,0.82868587912525982,0.32377432772191239,0.9613644823548384,0.27847545220982284,0.83790916391881187,0.026707138780038803,0.50093946275068446,0.33547695650719106,0.2760868491511792,0.91329909197520465,0.73915104975225399,0.19745867051649837,0.23456107584759592,0.84129876463674003,0.94777182453079145,0.60433450415264811,0.61405743457144124,0.80344087199075143,0.59425952382618563,0.37069481783313679,0.1708784571569413,0.053185125505551697,0.0894432685431093,0.91653660379350188,0.25270958032691854,0.87426710916683081,0.84998483031056815,0.033030498102307321,0.90195637898985292,0.95307953523471955,0.69263742922805249,0.66243148970883337,0.71793053090572356,0.076159177974332123,0.22758722187252714,0.20105119143147021,0.57029292760184036,0.11285943878581747,0.80252182390540838,0.50203990603331472,0.39980493771610781,0.3686525689694099,0.978554875056725,0.70243936086539183,0.089098825904075057,0.46553018467733637,0.31773162458790466,0.22171680079540237,0.50629484479548414,0.83872906234581024,0.060000300519168374,0.8148933960590512,0.7184310452942736,0.33200727512827144,0.55099019465502352,0.076556544872000809,0.52406630184967073,0.40128247844288123,0.82168261236045503,0.3043358063092455,0.85017144684679802,0.44806620045332235,0.78113863149192186,0.40934963289415466,0.31465472403215244,0.35089196189073846,0.44768538200994951,0.028445141615811735,0.74470569668803366,0.077373766705859451,0.1087630913942121,0.53466097666416312,0.10864494327222929,0.37423217884730547,0.26718483183067293,0.16505354323424398,0.51939097223337738,0.51781367839314041,0.96292456735158338,0.6817860451131128,0.70330459771910681,0.6826079394598491,0.30874134723097085,0.2889874324668199,0.28854255765443665,0.47746112257009371,0.84185375963570552,0.80244566708570342,0.90253094801679257,0.97751286826562134,0.632883391182404,0.051466811257414521,0.25281659518601374,0.1868984080874361,0.087779182274825868,0.59434103682870043,0.82987303116358813,0.43812604394042864,0.57887143281754105,0.59085170005448162,0.93862764952238653,0.35818920695688578,0.060418640593998131,0.21630655688932166,0.57879489382496108,0.42696890539024024,0.28225700140697879,0.48661697436589746,0.81945484691765158,0.70560054575325926,0.18907658233540131,0.14771935741184281,0.43810466369614004,0.097808957865927373,0.38947738883318378,0.54817651186371219,0.81830823816591869,0.48612914843950422,0.67010238413466139,0.30707850083475935,0.20552700352622197,0.59438300899928431,0.31492368107428775,0.60385101858526469,0.13247287828009577,0.43158110226038843,0.66474826086312533,0.45743583048926667,0.56528116553323338,0.84827224243199451,0.16806939593749121,0.88238827377324924,0.14617921524681152,0.9260266348812729,0.47131892056670038,0.13141070760553702,0.89902139180805529,0.13352379352552815,0.54665327520109708,0.53869726044824351,0.032610494953114542,0.55979760574875403,0.053324296132195741,0.60351537168491631,0.79701259791618217,0.42918536054436118,0.44686110657406969,0.46988067219033836,0.37881976521341132,0.55371103709796443,0.78174726254073901,0.83034815548919139,0.36064400014467535,0.95484990474767983,0.52702643038239327,0.76873642212012783,0.70454014349263161,0.19084190984023736,0.8627617546543479,0.2482461279979907,0.32540271079167721,0.88689036774449048,0.64361684546107423,0.29772859050426631,0.96508778222836555,0.94762983924010769,0.075207688759546726,0.62870349499164147,0.58114897316554559,0.88931900675408537,0.4097476309072226,0.37720728380838409,0.3060450606630184,0.79431803158717229,0.26119570158887656,0.61655627007130531,0.75117860800120984,0.18028960942290723,0.98526381938019769,0.8479609255143441,0.18470572786638514,0.3389101477526128,0.77333381820470093,0.17887913127662614,0.19384000556543468,0.1587911278079264,0.9824353812122717,0.73321645382791756,0.79423895499436181,0.15392157692229375,0.41998444485012443,0.15853548135375603,0.72157522740773861,0.387235738390591,0.49337004536530005,0.5811018983647227,0.80090036212932314,0.63119303802028293,0.35294385013170543,0.062893847990781071,0.072511004344560204,0.36445741628995165,0.58508154380600896,0.39045985940610989,0.90108595099300148,0.68664391782833267,0.19182827152311802,0.70891472472343597,0.42804411074146625,0.63372324096970256,0.74166813020361588,0.73715771832503374,0.038792640015017241,0.7629780867230147,0.93686173930764194,0.080501904473640029,0.75603659089654685,0.43199507523793729,0.55323234620969741,0.64261140302522113,0.18200451361946762,0.31187618915922938,0.4929693269636482,0.60601398428902031,0.51266714345198128,0.90902845900040119,0.98430057685123751,0.95883900793036447,0.84630316538270567,0.67459236128954214,0.95277990593807771,0.20432580744149162,0.67215159486047926,0.66421576150925832,0.39946637565270066,0.64366427293047312,0.92562929587438703,0.66759096920024608,0.47468970468733457,0.32264495939249171,0.22947369771776721,0.4820130465365946,0.39232734739081931,0.7757020739000291,0.69802669534692541,0.76587892313953487,0.55297344114398583,0.56686461309436709,0.74906439469428732,0.60299869793001559,0.98552624375559383,0.93685846156440677,0.95280709069222214,0.44543950899504126,0.52971643576165661,0.19306807375280186,0.95423142272047701,0.92254954377422105,0.11446961931651459,0.79369400897528974,0.050933811021968721,0.026567582061979921,0.30130545823602006,0.0025110405986197293,0.57438991141039875,0.64208426907425742,0.52565480663208286,0.43719234996708112,0.89219601199496534,0.64460723978234458,0.53514492047019302,0.92642637042095888,0.42766081070993095,0.12794373048003763,0.53724031879333778,0.11316720735048875,0.70529065472306685,0.62036454232642424,0.016507970017846672,0.085031302138231693,0.7929116739006713,0.096584752115886657,0.14108423146186397,0.80198409053497011,0.47368972423486411,0.65242967082420367,0.25426699772011491,0.70098507482791317,0.36540076785022391,0.88877822475973511,0.65514726595021788,0.14060252606403081,0.16791272096335888,0.58470778864575546,0.27599617806030435,0.81777036465005948,0.1962395738507621,0.89073303440585727,0.1931208170671016,0.98494097619317467,0.32357125401031228,0.02163417234783992,0.87153448528843003,0.48755262000253424,0.46639084098860623,0.96918668888742099,0.39992967774393035,0.31122644225601109,0.17743915989529341,0.54612418751232328,0.95923574532615019,0.57944528820924457,0.40338118193903938,0.38454708974808455,0.83604252164717763,0.67383717524120579,0.60917184348916631,0.51309912649914624,0.37284496991196647,0.23085285220993682,0.86840993044897918,0.43469978505279866,0.77700390015961607,0.5991605355148204,0.46030474048806352,0.52504165174439554,0.80583715792279687,0.75470474355155603,0.88945969500811772,0.8189637328754179,0.42494616370880978,0.026633154214359821,0.3309861285681836,0.10420042486628517,0.59068063274491578,0.76865546716377142,0.89297090046107763,0.021262625399976968,0.69504578195745126,0.73070191904436799,0.37368055471451955,0.2197399901621975,0.72760636693099512,0.48644042110070584,0.94456176023930305,0.27584908091928811,0.53738497698912402,0.76167202152544633,0.53470477164722974,0.69183473872253676,0.30799853800563143,0.97668248613132158,0.070522228335030371,0.39478251491440458,0.1801606622664258,0.83536662240978332,0.092059036495629701,0.48880314520094542,0.45885435547213999,0.77920659455470742,0.0092391841532662514,0.55529089527670294,0.90587565102847289,0.92496318906778474,0.6363143152068369,0.90804176839068529,0.0014048626483418047,0.76014803319470958,0.030081420312635599,0.2365394762554206,0.20638551731826738,0.72041574579197909,0.4504164836509153,0.29610905180918051,0.12599337114254014,0.83602698901668193,0.0085612120083533218,0.019255936362314967,0.7198088087048381,0.13988850542809814,0.3505753028509207,0.51628911265404898,0.77264148576417935,0.70470072617288682,0.43229007282061505,0.35283499747747554,0.43218923934269698,0.037164892901200799,0.048721048515290022,0.25255082207266238,0.049135582766029987,0.057669789581559598,0.090189171570818877,0.55869814440608023,0.58809665821027013,0.70121157587505878,0.2386732163373381,0.1403946793405339,0.83295541168190534,0.27334042578935625,0.84864063887391239,0.60275265420321378,0.95397607776336368,0.28192257939605042,0.48401079000905156,0.51298049340024587,0.21810700257774443,0.15223569665802641,0.2239465538598597,0.81940854821819809,0.5314199245604686,0.53442144508939238,0.75448860865551981,0.65049027694389228,0.34409148393664507,0.25805999228032306,0.45661944169085472,0.81869998956564816,0.63293052245629955,0.8106218039640225,0.90816268461523575,0.21548648212803528,0.15995684635592625,0.7669256165041588,0.7084790543303825,0.023482835898175836,0.5719614853849635,0.3364202806376852,0.42896599147003145,0.263074405817315,0.87540035638958213,0.28229183976072819,0.38912123667541892,0.58717002060497181,0.17718540148576722,0.35060596772935243,0.62700024845078584,0.21450551788788288,0.61776054981630291,0.66383799768285823,0.32466218722751367,0.061816720480564982,0.79493566075572741,0.36700954277766867,0.98948307730257512,0.36869047530926763,0.97116837902460251,0.96815172924427317,0.12576657159486784,0.745926440062467,0.22991774203022941,0.73396639295155186,0.023396141433622689,0.9720837024226785,0.60135828286875037,0.87243371501332145,0.10970122922211885,0.34093948571942745,0.40338491538539528,0.39544244126183914,0.87523604095447805,0.36398712652036919,0.54265145036391915,0.034884782682638615,0.36531304741976783,0.57543055316666136,0.20626252449816093,0.44662311383290215,0.43653384028701109,0.7444507435848936,0.94663419499760493,0.066714694609399883,0.12278565682237967,0.738161562688183,0.46605561659904199,0.28330665580462666,0.8483273677574471,0.24400456736097112,0.042956564929336312,0.50545941996155308,0.68470889265881851,0.6104234460555017,0.96919561301590873,0.081321954340673977,0.28043521788669751,0.743439755954314,0.13244269584305585,0.7523559295758605,0.67842689190991223,0.28356363271828738,0.90036000923719262,0.19001377694774418,0.60476029244950036,0.91193943429272617,0.89098297270014881,0.17454204332549125,0.19149941084207966,0.69674271826632317,0.74688033917918806,0.27195675022434446,0.34279810881474987,0.67953386255772785,0.41443915884476157,0.98086115512764083,0.15416263188701124,0.82643128828145562,0.81081057846313342,0.59928057583048944,0.61867429496487603,0.080459351898171008,0.73117481671739371,0.77151021440746259,0.79706129153491934,0.88294885246083143,0.066550432189833378,0.36456933623878285,0.9412824182398617,0.084920213380828502,0.49260123732034117,0.91518111751182007,0.74759444740600878,0.63103450104827064,0.73498101537348703,0.83351917337626213,0.82281827801372853,0.32216122787911444,0.15493682815460488,0.29563007671153174,0.4527356310538016,0.46232699995860455,0.61191949174040927,0.25884607947198673,0.92286151670152317,0.98389414360513905,0.82673735135933379,0.64974190085660666,0.88646928077330811,0.95162870304426173,0.57669333578785886,0.88986641822615642,0.57691933941096063,0.34564423757605256,0.84637668041512371,0.13544588036835192,0.03451704732142389,0.045107143898494538,0.87656589261023332,0.53609822719590738,0.40365350385429338,0.13443852084456012,0.036018213154748083,0.46206749489530918,0.7386864651460201,0.61986962614813823,0.15328048238530756,0.83085381007986148,0.1424692432489246,0.90586785152088845,0.59989946238929404,0.39416274991119282,0.2519360352284275,0.70101603152230385,0.32091266195056961,0.90835239149630065,0.3977730112080462,0.12321422428591176,0.40230958763742819,0.90909034518990661,0.38232923244824635,0.18946506336797028,0.60370380596257744,0.32252867234637961,0.1652218170859851,0.61433620939962563,0.18621114762034266,0.71188517722534017,0.093682579477317632,0.90694645954761655,0.31995441256323831,0.24829715775791555,0.76190096220932901,0.31948240877827627,0.23177682036766784,0.37020574304508047,0.73296181812649597,0.22039529931731522,0.68589023142820227,0.4168478937470354,0.81583742760121825,0.4874114624457434,0.81969777286984025,0.47570519840810449,0.29043425391661004,0.56495370815042401,0.30627554986160249,0.82275196456583211,0.5177995034214109,0.22095043077366427,0.32204600298777225,0.68635802163043991,0.82352407985832543,0.80314366803970183,0.80219183745095501,0.81563497693743559,0.55142828370910135,0.127477623866871,0.2603343943390064,0.15144730144646018,0.67376054105116057,0.42262275339569894,0.23131661599734799,0.31811716464115308,0.45186111417599023,0.43554404481081294,0.38072122140554709,0.83689888900145892,0.533215422516223,0.3955839724629186,0.98178668724372986,0.27389295764034616,0.7476681959372945,0.44792130898917093,0.97065030404599384,0.29415566551499067,0.23243481579702346,0.5975717670377344,0.52327349344035612,0.96949663270264863,0.050921697432640939,0.24456630109576508,0.74930672018788758,0.093541070173960184,0.59595996999414635,0.52615531525807457,0.84859701884211969,0.64456498570740217,0.97839437028625975,0.26290807049022985,0.92018963387701658,0.099242582134902474,0.40541978102875875,0.93874672818230465,0.0003380487347021699,0.28028528372291478,0.53546954152174298,0.5996492869080976,0.20565331650199367,0.11913454290479422,0.21709074520273133,0.98359812097856769,0.32254820004338397,0.34883475088980048,0.094989920505322512,0.69299550884636119,0.74005832331720744,0.67521522309165449,0.74102386372396722,0.64248668420361355,0.53786643482744689,0.52704763475339855,0.33475099262315777,0.28436292446684092,0.8240103305317461,0.00062182016205042595,0.54704645709833133,0.28774898559087886,0.94796768444124613,0.61447389674372965,0.88390498837223275,0.59554507938679302,0.35293858177028598,0.50942274837289003,0.54093787247780711,0.64574753853259603,0.34321492803515868,0.98257541299564766,0.6165747593552805,0.54878482804633677,0.78865843716775996,0.32749983534682542,0.73841615182813258,0.65043965010205285,0.12428086993284523,0.74658501405268907,0.81417006658622992,0.10693224982358515,0.024898996157571674,0.15819638452492654,0.41028459002031015,0.80705401133978738,0.72409339467762035,0.5876248058653436,0.77356026646681131,0.034957993221469225,0.36361305741593242,0.054779836332891137],"expected":[2.2724136748477828,1.627852366039573,2.5629801249152937,2.3224846584410002,1.6239938860588352,3.0062762908339136,2.5985064854077815,1.6692405705278153,1.9787370699138158,1.7168757126424867,1.6109263063759172,1.8911589814090952,1.6999519632330824,1.6528795944732133,1.8908462879661181,3.4325861316285855,2.8888273137863876,3.5473369974816715,2.9617288705518412,2.9927041070026092,1.6381126282623593,2.1037014804094842,3.0269736953697666,3.177445566393474,2.8857287118934511,1.6163359392763563,1.8379151624161465,2.2353370771067347,2.2400100615463647,1.7104311478120884,1.6307930270509174,1.5726609822069928,1.7898859625714723,1.6174892791024191,2.6101540253081228,1.9873475357192651,2.2229138143262515,2.4540745641412913,2.9073509970769598,1.8529123961956284,2.0065800525182791,2.2349584523598751,1.5849631032308276,1.7492591401923443,2.361102592433638,1.6646011428782836,2.7120225666455844,2.0394621233689958,2.0359688200819521,1.7738967179375222,2.1568073191396087,2.1275146532246874,2.1316481773872926,1.8294686161722287,1.7694946575318664,1.790117569897874,2.0062561822098637,1.6458369664979609,1.6445524526280133,1.7132431583479959,2.0738706970841441,2.2335755542317135,1.5833963517761682,1.7218018297792406,1.6990748027923857,2.4333686765131843,1.5892231861710158,1.6341383820343744,1.6107483050227864,3.4677227859678457,2.293265205847792,2.289479317503007,2.0578765926182445,1.6231793581751053,1.7221267434824985,2.1676134766720572,2.8265363160342654,1.8421316207306899,1.5844511294084469,2.0163943310256593,1.8021285953156343,1.6235014478835892,1.7623916782968043,1.6637341900235114,2.1708438325385582,1.5912965490081357,2.2291713959942712,1.585258577116319,1.6521409016696278,1.7807536930075427,1.8414615909360337,1.8164946554374852,1.8071742223387381,1.8396834125180839,1.9951210209290471,2.22659889462135,2.0787244401682159,2.6366054890179429,2.1514218092842943,2.2559704774078835,1.6985757459995767,2.0734756607478531,2.0372532035211632,1.571893777753782,2.0057884748146066,2.0806991381507363,1.6404707678277719,1.9923121829542663,1.6204008306751336,1.8150093469060742,1.8485067304449454,2.1865512133648193,2.9097506336048533,1.9164347921998752,1.7361760953046657,2.4482041081154358,1.9279274199146443,2.2574183485149901,1.670667188488687,1.5777755624942162,2.1454715164294589,2.2878885733926357,1.6871312120580271,2.2869108005202063,1.8548357773974797,2.751681881568532,2.0638605625248156,1.7834886694546404,2.500461560393024,1.7908831145035806,2.9054421675521898,1.9235847718771844,1.891154310618187,1.6383217005410593,1.6292934150913114,2.1639524563889818,1.6342221101851251,1.6739464248469278,1.6884326243901964,2.2609413333767407,2.3376868583311081,3.3218007950006845,1.6866938366201025,1.7313272361033223,2.2713921381515165,1.7120420593825043,1.6809549912814929,1.5761000202932618,2.6833793400470842,1.6673000117668202,1.7421250175292646,2.5701216977519139,1.6569259037473134,2.3592149867330008,1.6849781279513252,2.8665948059918263,1.9603924964517474,2.1961478958704714,1.8283137463036592,3.298265752833339,1.7431734595741464,1.5981131914506066,2.311681658989067,2.2258094524187269,1.9279237179033142,1.9373943536321809,1.8934749875677257,2.1147237188293495,2.6175038985187045,2.0584422995262641,1.704067479829779,2.037408943840568,2.1558500320208767,1.7695574710194752,2.1497470233742266,1.9046137956748761,1.7616585862772933,1.6626549448920953,1.9106404410910742,1.8732630473436807,1.6016009986331312,1.7776348105424107,1.5924251399172709,1.7438651047811198,1.8762939910379965,1.9356557347324148,2.1966734789845961,1.7461207943636925,2.7121315172251612,2.962561125793552,1.6253159466075211,1.6366229738319924,1.9116130782865599,1.771301037129333,1.8252675964706153,1.7661949113825235,1.5754544415085552,2.1054489240557714,1.7341750739206523,1.7670445987365386,1.6402675733480943,2.6730994972435851,2.2272475600735282,1.8002090427003448,1.7186591437337095,2.4016696024012019,1.874288101747609,1.9651636042342626,1.6419110878631706,1.6206468087063186,1.9452288813901109,1.827270135977374,1.691396067893878,1.7360740229445444,2.0045366940949512,1.8754462631168465,2.0501001289899765,2.0887551516838441,2.1401231397088178,3.3185819864060306,1.8108708100881608,2.0954303962856811,1.604998484734111,2.5946324779986947,1.6733347160096586,1.8544506158405742,2.5983189332715129,1.9014864160551044,1.6356594668625857,1.8525173502327297,2.2990747495449297,1.819921769930305,1.8830529242130831,1.8905794589333202,3.5356723037317286,1.8086605185744657,1.6025875033954622,2.3765917584881446,1.8050215538598562,1.9476160856764797,1.6149191026012053,1.848655687587929,2.930819907395124,3.1579314867427679,1.5726026488014107,1.5843990810161994,2.1884478745499583,3.1129096826067317,2.2784675640491652,1.7504662558175592,2.4209586472525859,2.0370099798175589,1.6052618800784633,1.7397891975628756,1.7746073995347855,2.3808315103196653,1.6897110424631494,1.5887678879406872,2.2395522490288609,2.0120148529496982,1.7967957618264616,2.1431866350488766,2.58540242402468,1.6267205375089946,1.6496922104133598,3.1989624938410985,1.6918493026603729,1.6099754362142829,1.6324797673955909,1.7022870068825318,1.6281227628342911,2.2439846973214461,2.4229211200625249,1.6023243774841034,1.9223323982055254,1.9730535848061546,1.8936017743158109,1.5739572762283802,1.6322094632839328,2.0380309324898591,2.3724051971871849,1.8790887118014745,1.9670534370606212,1.80207180192571,1.7427306820299684,1.6583933385483816,1.8610133137805365,1.6290076615270959,1.775989806151461,1.762902822645539,1.6016487027878212,2.1652002923849096,1.6790497705010607,1.5868951482175642,1.6223397872181464,1.6859814300782037,1.6506942994330263,1.8538403114407336,1.6790689214523915,2.291184054288335,1.7867112089652948,3.1878768113266642,1.5906533057101828,2.2932593113762008,2.5493323406081321,1.7131935586621212,2.7849513286283978,1.5899504031144693,1.8423553642584087,1.6832502372717992,1.841046369328375,1.8882503861781308,1.7345402230478411,2.4881794359683025,2.5378446464323208,1.7383058640604097,1.7543582753540683,1.5839754590404629,1.616929699077406,1.6405940342018668,2.1987955915916575,2.4503230189609004,1.7678260312171945,1.6637810386351959,1.6799856803487534,1.6967628592855284,1.7774313213381239,1.8436414151882405,1.6104534868405131,1.6704655326896505,1.6262550033664813,1.8418978576385316,2.7653438732960502,2.86594806011896,2.8764403511748196,2.0019561963458403,1.9178678214355416,2.156387731345522,1.5948439294709538,1.7995740443093713,1.6763552234863177,1.8964163416158275,1.7441138622891665,1.592095502075568,2.287763090533371,1.7253444215539198,1.5768366726178979,1.7781659693640333,1.587935779992085,2.5750405586470877,1.6435024165139747,2.2595881860705354,1.9984934875497327,1.6888584097758232,2.112999865713312,1.6252888689491802,1.9968419005151365,1.8443644957822494,1.8111573449263807,1.760380193467924,1.890963718783319,2.0923420602759784,1.7100248886024998,1.705177534426902,2.1342644760171203,1.968599072521994,1.6531604368883424,2.2658233755969608,2.0467671499505102,1.7194182714283799,1.6505012104147805,1.7651401413954546,1.7538665589696676,1.7383616585781623,1.9710555215110137,2.2748567925965615,2.1987473020829102,2.0236324635759928,1.6038453122472061,1.7609831648547523,2.6840981763211764,1.8168810961805018,2.189985849753239,1.7142275524174539,1.8390558156704997,2.5850115017795949,1.8000203146480089,1.8405318353573716,1.8080642844547294,2.1533596349385546,1.7158162977589277,1.6155405759740502,1.8569860891482037,1.7704117462856437,1.8589031320564808,2.4258756517261388,2.2792351700716891,1.7489833123074572,2.2283958838449998,2.6171191372566702,1.9927374669131497,1.888020973569158,1.7604516791871458,1.6299911531508022,2.2651502882181411,1.6585533771021848,1.8780992898799731,2.8162691606275572,1.7425897273341904,3.3592916471514145,2.744434712724372,1.6791339212295133,2.4453739933456595,1.577278837096654,1.8938767849670917,1.7670748922234472,1.9675230139742717,2.1976935373240232,1.9297313545571253,1.8309503535978355,1.6624910153640815,1.8846788398529759,1.7128579565260393,1.5780441509680112,1.8264624045942839,2.5383960603713822,1.6741189020692828,1.6558870758900521,2.3475308100170933,2.4816385320782604,1.6560199416065853,1.8039491417949243,1.6717544732078444,1.6335413381637987,1.6443233933917589,1.678832002584747,1.6726549158245863,2.2386568164147849,1.7999038369359395,1.8280990146934519,1.7185930186758958,1.6075795909753048,2.6500771303976229,1.9930144231723086,1.7959252227035694,1.9795483594652676,1.6511369762305104,1.9270315212310019,2.5588948077109546,2.1049778209886956,3.1550780673340677,1.7450443555317752,1.8022206305603348,2.0381902666237823,1.6168926835208595,2.0757292938994594,1.6887333777259146,1.6403367456545528,1.780745859023005,1.6270579141551758,1.9378017395327842,1.8101327768642983,1.6909826165772261,1.5875401187890399,1.9461410333777438,2.2337547802486313,2.08145655323916,1.6428184811457585,1.6696060431300206,2.3126671809387065,1.6196944956676629,1.7268121645110586,1.7102283877975504,2.0066283855243396,1.7231220272419654,1.788772932900462,1.7915961929141075,2.2020578110628994,1.8564368675137282,1.6178125501726013,1.6057252751253996,3.4516097435224391,1.6911298054228205,1.6495591604219695,2.2415992728874579,2.166125136989955,1.5823450049065877,1.6930059917407878,2.6809815909623995,1.6812797630396463,2.1107817685659773,1.612322517036703,1.840524759250574,1.738608007344397,1.9211562183058704,1.7017006317191894,1.677666191176695,3.0036142114271263,1.8171491753866815,1.6655377205304824,2.9428822524546563,1.9494261620743312,1.8907764213505818,1.6720795281816547,1.8678064474812661,1.653626750321906,1.6746940135542423,1.7758280848138355,1.8407586820042672,1.7839242374582513,1.9693002800987294,1.6440576073375446,2.0364998387666349,1.7115930230068335,1.7717111959625036,1.9834931291638329,1.7531915433217673,1.6352842587508958,3.3096989429477905,2.1777394931044656,1.5857847199514012,2.474076979106306,2.4785301855490771,2.904780976877821,2.5980728411424945,1.5778915408690171,2.2312491523191809,1.9254824546152707,1.6114372827650656,2.1733055177241249,1.69079738543397,1.7285154217982293,1.7330967008222187,1.6249350265949856,2.0372868071737451,1.7075351207468836,1.6283444170230872,2.3553649556257512,2.0965564361868609,1.6742624248975222,1.6149671760487023,1.8515031716354355,2.0041422221796648,1.5714181006260775,1.8450579788576349,1.5757053978753806,2.1964481536154898,1.7044891839790512,2.0871549537720071,1.6114315073460224,2.5537439121747165,1.7645059871143218,2.5005370058060512,1.7454920516306385,1.7323694189662546,2.0946306923818301,2.0633913171996303,1.5972107178350696,1.6575281403270115,1.8615342332053157,1.5828760716402128,1.7914619503421281,2.1332253606667857,2.050906008165124,1.8498802448035652,1.6865115624671618,1.8335533488338884,1.7757925999095141,2.5581867394142939,1.6922168396671444,1.9536596847213392,2.7136335148924884,1.9621788174955406,1.8277151426671054,2.3916345630869946,1.95479550338107,2.251415813382891,1.8403570866670587,1.9193645446354883,1.8620992962911724,1.6502148199487876,1.6817467972250939,1.6790581215476228,1.7316654180897524,2.4835734264337135,1.8518265750882201,1.5821256294343693,1.9390100794039902,1.8415728199750174,1.718038504904005,1.6429954415430679,2.9419489979601932,3.1382385138172206,1.6751136000202684,2.083652273505328,2.1380007711338957,1.8502531170682117,1.7253576889497226,1.8265912804594935,1.7227979453532036,1.5947770347364094,2.8449034812792475,2.0402815595310924,1.8797941606743633,1.5876938992271576,2.4312715763687938,1.5997348284956223,2.7158466127897696,1.8682533530248011,2.0208504017610838,1.6105733869079708,1.7062446971650951,2.2804701578730007,1.5972439991887752,2.2790443350716654,1.6748471334332033,2.0984225426490277,2.0719525460714685,1.6344880056376845,1.6561895405139995,2.0113728063945504,1.7902103586105851,1.8656047595249134,2.725090862542503,3.057123910541566,1.6309454863427171,1.998343684224406,1.9913850652783585,2.2401183350718501,1.8278772422008878,1.8133194073110424,1.8008038278640583,1.7975027009274416,1.6813758665696157,2.2978290759570839,1.8548041544923046,1.604847873181547,2.5682006604555752,1.6268002452560406,1.6018768298156318,1.6456080868906833,2.0854569338290192,1.7686291590220617,1.9616696935163349,2.3130906785711884,1.6532237789247397,2.2467259491901501,1.7727040287913638,1.5951320133239957,1.6994872048865328,1.7742499738857942,2.3875360486609671,1.8728265258048706,2.5773737465551072,1.7863824135947621,1.9617514768232693,2.0079622282815208,1.6491932087338601,1.9737223104123074,1.86253123540371,1.7075483767424828,2.2961461874688536,1.7969672614289702,1.7480069674041669,1.5768697745000682,2.2756730830714278,3.2299039702278627,1.7083484132694251,1.6426339793837204,1.6449984686041301,1.614726845389864,1.8439253000614375,1.7564057458192528,1.6562970267858748,1.657681300177789,2.4068103609353035,1.8413992884142294,1.6607118298454993,1.7356278339690807,1.9606427216368094,2.8379484685202994,2.4527341830102443,2.6337382099837057,1.7696573881828093,1.5918990867487091,2.7982409549899057,2.1229239520638123,1.6424101813645278,1.6947600816191468,3.0429968622270769,1.7906488294409657,1.9069190428045057,1.8917593831780664,1.9414244945094756,2.7701843528014098,1.6259133436135083,1.7870469303112653,1.9096293635520303,3.2112927042015644,1.8978205032805839,1.712978428654323,1.7182341075458898,2.0667397982941762,1.6211405061910673,2.0198615928187911,2.1228138372057033,1.8837620430427398,1.6805310871652441,2.0624847843303891,2.2918032840406002,2.0201025249365872,1.6514587289719582,1.64789293525472,1.7195175878751843,1.6244586722700045,2.4658661163770148,3.6525702961946154,2.0300187013474069,1.6445210368274963,2.1252868598803927,1.5837060021882963,1.5959964883228315,1.9042724842781071,1.6260677599191458,2.4663781202482218,1.6076355999212368,2.0234912676375769,1.5740438035827464,1.6538859335989053,1.8153714144749091,1.7541451494492255,1.9809800896171466,1.818582229383618,1.8753762642495557,3.1864148003056534,1.8480980163564675,1.6375450084881416,1.7333657590704923,2.3797787789234248,1.6859102633103675,1.9932696269820209,1.6757783983627978,1.7589212939011638,1.6454997989471878,1.6541269491003034,1.9389299858465374,1.794519193986776,2.1053522916408145,1.8352270563770636,2.4510561739508248,1.6211237728493626,2.0754930546466177,1.932245195288971,1.6763477457328171,1.671891730181396,1.8320243284381823,1.764415742990594,1.5779492689158918,1.9256234051065455,2.1387260663925174,1.685364875684829,2.0053280273208784,1.7066710059885108,1.6025412937259156,1.9615439867948121,1.8279062077664596,1.6926561809925023,3.5478339439634183,2.2955176340922634,1.8774502238078969,3.2043202435816385,2.5352200923616954,2.1106513015906043,2.1846196680320897,1.7383290384037289,1.6604928820266236,1.9267154306335306,2.5689511090296109,1.6154113080309069,1.7579686694422054,2.5653116831441465,2.3581374598112386,2.4584153658484147,1.7278543279660867,2.2795498370869356,1.7278768246707048,1.6901762855180742,2.0108807757846403,1.9372415655438509,1.9294468426089215,1.5796600475550644,1.5903772520288528,1.7923755329821431,2.1790896135566764,1.7195422512396532,1.8430786569072468,1.6399377517866045,1.840180765206554,1.6481992683978044,1.7951470193300085,1.7906844279826344,1.7711791610896213,1.6094865366060309,2.1914116963483941,1.941586696341693,3.0809742507632634,1.8264631157354707,2.1407266863419072,2.0594467604812703,1.9812100321577595,2.0650131306471287,1.6000451705746372,1.9859012480791254,1.9798939493370817,1.5841108289115964,1.8746306265312027,1.5986223403702908,1.7099371437281503,1.7236099903731716,1.7270306767373973,1.8763532558211351,1.9773136798533055,2.0049866474793507,3.4813217832215866,1.7799844778549432,1.8634101348020184,2.28484396811271,2.1015424873795072,2.09217331322025,1.6820415901674619,3.0037187890063772,1.7312609866731359,1.8767706254751528,2.1409043068438169,1.7269213933655396,2.041615987469851,1.6144683577481667,2.0393442764013465,1.9548415262463545,1.60287141557237,2.1959618815361956,1.8172158255953479,1.7910878679030056,2.0625432544026849,1.6080115376040749,1.5982348482317463,1.6933074550877258,1.5987629067079747,1.6362571201874614,1.8729735464447081,1.7013523527868237,1.6908939764900357,1.8031121252073454,1.8363093923363283,1.8730615491149265,1.6257241657780905,1.8160652590711908,1.6095783007196864,2.4434001917601145,1.6210206882058285,1.8651360051185453,3.0177964159120432,2.7765055915683066,2.1542262972163226,1.9849400331433891,1.6942420773964022,2.8905419150276694,2.1022459304258798,1.6794664540508246,1.7856542940934677,2.0325203484375018,1.8294369223099467,1.7058905056384472,1.5930423456951941,2.0268896733944541,1.9578720901473523,2.0583129493952352,1.8421561360662948,1.5982802231306186,2.5570854711956525,1.6869670778319152,2.7197168068955322,1.6707845717261756,2.6230406151921404,2.0217691868639105,1.7143500294455667,2.3477619705934818,2.2185655428142232,1.7386912567657629,1.6719122426273385,2.1993206916309185,1.8096810057798627,2.0314831116623422,1.8583407804099057,1.5734168630883634,1.6741935905850744,1.9454284136361757,2.0824425730126066,1.7658454849414102,3.2372575286392133,2.6114344204549873,2.0059303024078967,1.5712441128689463,1.6967153015217746,1.819902543986452,1.8249757748052349,1.7917261123899506,1.5719650656748114,1.8187279137274162,1.8077966375968975,2.1794529947682122,3.0313028280545109,1.7253211710708001,1.7148362977478799,2.2076880964867569,1.6662163291980583,1.8268012568170284,1.6831104255102067,1.5849837709450005,2.2535550432619922,1.6468035553118132,1.8387167018748976,2.0973721923028763,1.7799034359866586,1.8284684510099143,1.6664808683361274,1.6358197699370567,1.8847823708570488,1.736630697760108,2.0993256719955635,1.9509913915162451,1.7028600875679556,1.6545310531246935,1.8871585296334734,2.1238559529549286,2.1535970089630392,1.6805976815256833,1.7310414900369762,2.6186776207283304,2.24322534468208,1.6947282909995258,2.3844279086013862,2.1708130530086356,1.5766343124101958,1.653016792518794,2.477690120529259,1.7050040780782654,1.935927524629357,1.6081369622971489,1.606026582913896,1.9188572555527934,2.6583185622173171,2.0421495263149341,2.6001845984821448,1.8905805182611188,3.1715457020406452,1.7927109374133212,2.5377094451259512,1.9928859865652129,2.8224920513485978,1.9966874746292045,2.7153384140512613,2.0363422222894378,1.5740476592359463,1.9827000490586568,2.1940024389463413,2.7877917672923527,1.5810369595559146,1.6630915290711277,1.9305791751846813,2.0786021578834566,1.9992982531808408,1.6771142467940463,1.7287797565344363,1.6205792281143629,1.6168750230049957,1.950899865161362,1.6227691494738916,1.8105681612271507,3.0695776881763899,1.8170552043235606,1.8784598144727096,2.0143020097585493,2.0147490186985979,2.1796887016571107,2.0770987701399304,1.7422714003891289,1.5985939252699772,2.0143835099975536,1.6615932275830281,1.7859322423556847,1.7982548194858319,2.3409837194815664,1.5751750239463271,2.3170448866637838,1.5988144719678594,1.6878564801065974,1.7378252210895113,1.9575626922747573,1.7192549762915235,1.9248817285014928,3.4286425360062691,1.8852248710773618,1.694729803618221,2.425062055894954,2.3844092370246619,1.6923819910679163,1.7456574043603721,1.7227042035193167,2.1377701483632952,1.6204978835057531,2.3490511161956538,2.750019249003933,1.667249432916623,1.9942099182897159,2.9624092638823809,1.8331885466372722,2.0829058118045038,1.9868231510687802,3.2043997875062993,1.8888552390470852,2.1606571979961715,1.9963193406937563,1.6552774931222964,1.8880945885330562,1.7437565933293069,2.0962786774915592,1.6567798312049322,1.8689895703403483,2.3148566046230008,3.4566808102503277,2.8459265085552072,1.6680342796478889,2.1742591679808632,1.6145427709539195,2.3994500139547168,1.6162632660070306,1.8147297700133487,1.5964345835618015,1.7314702274869758,1.7778900192708649,2.3310777896286852,1.8092486197252848,1.8977534331661052,1.7521501284616481,1.6212376646304609,2.1671668028446183,1.6647324322737937,1.9736348553538332,1.8426607479844872,2.1828775495965469,1.7813938241285967,2.7049553182807013,2.1599635454263604,3.0540792512104278,1.7465751618852134,1.654670403785687,2.1825106952634141,1.6294080146648653,3.1847459233165467,2.0598920229877344,2.3526977756269534,1.6093089579904816,2.3214731767874972,1.8715334634005893,1.7530357246280357,1.8758915909659719,1.5910532461962239,2.3968702493113954,3.0921985325978323,1.8374952543606276,2.3427901193630198,1.7703218153880669,2.423475072879393,2.0264012780857303,1.6014500038507975,2.1285266029114958,1.5836153517733409,1.8668661850162005,1.9580770946184467,1.7407087804942649,2.119374314745949,1.6345493648674096,1.9598248414180466,1.9287632322839825,2.0151641134565113,1.6909464754129013,2.8349555567871074,1.5885202045966991,1.6929878630942072,2.1518541662120598,2.6287817942095568,1.680563713419549,1.6201319354541264,1.8048178984833163,1.7197462121212794,2.0481585546454015,2.4323135483643621,1.7479458971407729,1.6757618325375927,2.1204465171303664,2.2571551395880465,1.7711654960985224,1.8998446178216035,2.0422203494084621,2.7762878213460582,2.0709750070958792,1.8529465033289798,1.8047464146460384,2.0199609406968526,1.5784916761611927,1.6359340369848125,1.7303632431308249,3.0604580737058895,1.7916979208792398,1.9803599369004947,1.6953933083665329,1.6481429819345457,1.6571531552346994,1.6008753894070129,2.2890380481649957,1.8457147518841175,1.7957191555371024,2.2101799340783077,2.4883503886909808,1.8216183785992897,1.7687936099336139,2.4706289979933147,2.1774992744783761,1.9963883606883459,1.7725750580640032,2.5516321371842499,2.2581810493637779,1.5731264587842302,2.15210655905571,2.0561089052829074,1.7596560749420176,1.9277470657651172,1.6666791118473103,1.614350473949953,2.2191935679956383,3.3644718969473626,2.8192446989614393,1.6738612604314582,1.7283755063335347,1.7316062508814765,2.0261854239759369,2.0503311886666196,1.802055792653749,2.9260689661464383,2.318556180353462,1.6721042074311758,2.177014483499657,2.6548054230016853,1.6426745166946741,2.4464258901842366,2.3994864487382861,1.7970347387115393,3.3534901660901268,1.8264343502897205,1.8620170042367536,1.9051345123149555,2.4752326495692505,2.3293607243313392,1.9307311453995581,1.6337641870236541,1.6367700055278733,1.9867776308953862,1.6585483758246979,3.5169436312410829,1.7795256385423175,1.9869137224192361,2.141069427589259,1.8026960273803587,2.2984970896748647,1.5820108800677071,2.218280567311643,1.6047113061987524,1.72297124227928,1.8759119622815754,1.8792059241510521,2.2022403799202719,1.6076346373200923,2.1209433428490647,1.6171526673529584,1.6537521854217845,1.6282252048117065,1.6907735013646321,2.035859022193093,1.8121496370633028,1.8458807854920884,1.8180479211028113,1.6535309875795077,2.0292672897059467,1.8457402334454192,1.6473235356550726,1.6334388520896315,1.6526096888072075,1.5928488380476307,1.6104675341586381,2.3656540716611314,1.7261598359416976,1.9036621938281153,1.6441409018580164,2.6854107214704657,1.5805469868220903,2.0604557403791861,2.3112080555741215,1.9254266739602259,1.6816455638366228,2.2739861551446827,1.6308615222641483,2.456139297529615,1.6370932041801169,3.3307406500112999,1.7138781121864031,1.5709994707555279,1.5840981006620831,2.4104148056649914,1.7811404412111609,1.9565879871046976,2.2044647702102056,3.3553866843597246,1.8055339361953699,1.8735351053966891,1.5776622749608249,1.8332363484586023,1.7040366689638302,2.2423220263864336,2.8360348963348532,1.6727473565602153,1.6446138931859726,1.8482837759349173,1.6094520368601628,2.5412600971190331,1.6974038242042611,1.9173277027846658,1.6592961821575227,2.3499475257353026,2.1486788721545729,2.1242062774126835,2.2413061615314889,1.9286566425804619,1.9287552357845292,1.6826578291311927,1.8473761218649127,2.0199601663456295,1.9337489487375028,1.604853441417289,1.9115818472637731,1.971440864087896,1.651274336822051,2.013047104812637,2.5447255061649896,2.1098622981630206,1.5804382979286207,2.4998695944925422,1.6921622137884382,3.1979547396076367,2.2032573322615661,2.1773402353343725,1.9428240779025157,1.9240757775314019,1.899546360856128,2.6778323962715298,1.6104875230804063,1.922717839094547,2.6690656492503666,1.5774619998949966,1.773660691648508,1.6212349744490262,1.5866639454829492,2.4017716682391952,1.9277745366549923,1.8370481197436463,1.7838713835766116,2.3490494749802271,1.6251468517006264,1.6633285380205081,1.9526584536631899,1.8958651932787269,1.5930278435237262,1.9758984980841241,2.3587254268690141,1.5834601056979247,1.8120136424928179,1.958932067760434,1.8376246787173187,1.7499714504958783,1.598050781482282,1.590603180378531,1.6692261378454569,1.841303801095421,1.992792977651535,1.6549078122823655,3.0960159308864657,1.6222339848427447,2.8195476412158325,1.6613617400161251,2.1206620352703407,1.6329317847697018,1.7892426278771163,1.653217884638652,2.0453520383130859,1.5877841863630888,2.0460066081165738,1.9820164817064827,1.6745233329120475,1.7018348241002927,3.48989792138401,1.8832827350179899,1.7998269222188745,2.0583445083728606,2.1327531064338769,1.84912892061658,1.7347429919796546,1.8807631831254386,1.7502933543885746,1.8068751373031677,3.3537594252700096,1.6226158515959173,2.1025143441824063,1.8419432029093736,2.3290716580771917,2.3723084772532705,1.7734189112102285,2.4384487347634258,2.3685039793201952,1.695406477116326,1.6447517601934571,1.6628529598496122,2.8044353619278621,1.9078947031696094,1.7426958020058707,1.9879927641815887,1.7645878595963937,1.7865437450801493,1.7745715532530855,1.6616032323402714,2.0921846801191419,2.8085666616270655,2.324869840000944,1.6042493388622825,2.8317862242082361,1.6145036657277834,1.5965977695202727,1.6308643405615713,2.0175582513364518,1.6422970263202075,1.6470141832612843,1.9658299801974257,1.7554646498297097,1.9163906203233583,1.6432208520543417,1.5916518120578653,1.6178170617606,2.6948992926149855,1.6357507427896545,2.1081366070594338,1.7717122566009382,2.1228970305539887,1.7723607286790053,1.5963564367127367,1.5818407724286658,2.3947059685831369,1.81048920777908,2.7146036294024611,1.6113637686988627,3.2362240150868256,2.6115676614604153,2.3900935495580677,1.8228827337813631,2.2093328548597566,2.1417933704963272,1.8611225195225185,2.1091925287299174,1.6476369427216426,2.1203926150703438,1.7737953950389245,2.0075769324381838,1.6271467676771489,1.6665693731904043,1.5830163876571648,1.5914104211143312,2.7453752809278722,1.5943941357114864,1.7128924447636316,1.7896345995783893,1.7095742429802909,2.2624776217429474,1.7316235316653779,1.7219607981362173,1.823464204329345,2.4745317970496084,1.9973867830780665,1.7810148170148663,1.5807445679395564,1.6593974553901134,2.3417420429416205,1.5808531738317722,1.9022105294711533,1.5976281845153111,2.3755529753286893,2.0328812585901197,1.7408124400741327,1.6038238373039502,1.8075013411706069,1.7294887353188551,1.5925448145215715,1.7545733057859665,1.6473980579903753,2.2326774033031089,2.0153883045424839,1.6470979073869978,1.7303457606948158,1.6088280196339908,2.5312148169242392,1.5947752319971213,1.6200240341331031,1.7046698784664511,3.3194519949891999,2.0885821243811633,1.8845373974211082,1.8445403879954496,2.0751395139830908,2.5599834485931052,3.6713624766597914,1.7778715077789535,1.7052026206217541,1.5980211401272884,1.7847854536898875,1.7581069362483162,1.8217419066114258,2.3595305139566936,2.1679907922101425,1.7514396706039506,2.2806019293315867,1.6311271143494182,1.6120964576518964,1.7898421749467508,1.647885442391948,2.4218373133543332,1.7482040775058538,3.5687677594945701,1.5935660196781549,1.878873537056571,1.8684585761240518,1.7710702387796056,1.7333969288341846,1.7312168319860035,1.6467046301893753,1.587939038929959,1.6630974474660396,2.3827508374150375,2.5601134045630465,1.6491323091328809,2.0315606128716692,1.7318543403015594,1.8245503048544858,1.7967600256278888,2.5924873756359439,1.7283124597449502,1.6137571742948309,1.6857852367905755,2.1357021709135076,1.6260693466044798,2.1203283710096885,1.6078812366847757,1.9049041252847614,2.8421730320301566,1.6508337434294942,1.7005356934019569,1.9402132874569797,1.9207918322938233,1.7121027196485361,1.7440205401532496,1.6272341902355199,1.7220455747060577,1.6649439967297293,2.1919638239292119,2.5165767413986746,1.754960897971803,1.5997379339704212,1.6544037167250858,1.6804057594492203,1.5751088906461284,1.5923442138128414,1.7695265570394638,1.8043163377062295,2.5669683561142556,1.5759990154796026,3.294464162815034,2.5258119731215869,2.0780755946962111,1.6569570909996607,1.9852248590631054,1.6091140428252468,1.9659368083993489,1.716408950079769,2.6595364112430211,1.8150281690512404,2.4623350189062232,1.612729961808288,1.5784418793101715,3.5100657967893172,2.0952951882834991,1.7311115706497402,1.9338554288080732,1.7106132374418286,1.5934857390530219,1.5957885178671003,1.9861912517497344,1.7111284669119542,1.7101112696731937,1.5892969000034625,1.8215260601195107,1.8543915452720976,2.8085674935804352,2.1634015273788947,1.89553024342405,1.9772564427758699,1.8527014199809955,1.6076091585387784,1.6268756378009797,1.6037328553417749,2.0842943029148207,2.1929305689167693,2.6595662599841288,2.5600291486908158,2.5529865336673323,1.8789445841019401,1.9832880306799812,1.6160230593195746,1.7371509209643015,2.2990546178603868,2.016454773337494,1.7347718932584855,2.0113792141734708,1.7086821271676211,1.6954857160072119,2.136999334100504,1.990316841411772,1.574838211947303,1.7952385349898619,1.5901570223342822,2.2442055082278398,2.0218759472222421,1.7311666075572212,1.9468042537486732,2.0804076552365771,1.872146374115633,2.004780691749763,2.1097950357465596,1.6794391667176551,2.075629931946338,2.6273853519805166,2.2010075558103508,1.947196747350207,1.7052748079899056,1.7635059822059451,2.0546775091209999,2.1985474581167468,1.899974871669182,1.8457393443565413,1.7723916545305871,2.4781296095459644,1.5955988052416621,1.7733864341716699,2.1986455338803146,1.6996396411447787,1.7344572577742083,1.680426802711247,1.9515034275180481,1.5713765818072094,2.1285201444269819,1.7713544106819685,1.6141094481037541,1.6596122006942675,1.624401641396843,2.183055816189281,1.8933047316097738,1.9521389745582107,1.8377975480496636,2.1964583299987113,2.4987888492779913,1.8493576980546422,2.237167036691182,1.7643441849871175,2.1172064748167543,2.3114323113949351,1.5913441432549056,1.6244327850497153,1.600343202166733,1.6842195903787345,1.6070207746289058,1.8524860915847485,2.2358610185796675,1.6245478612220874,2.7721105364213168,3.138331092204782,2.0426239172998781,2.1053149037987149,1.6263048909471745,1.6704547738767535,2.098862462554735,2.0410929224577066,1.6165535488445522,1.809498839019728,1.6197280800767322,2.0272148326326409,1.9884711649619415,2.5793733048127843,1.7291281757245018,2.3324202876048106,2.0042092285051716,1.6645834688602235,2.1417979345976379,2.8333749999248425,1.9258241938055844,2.4521749143710121,2.1264981913953913,2.0782914198887261,1.6763797899128867,3.0284554874496421,2.1182029698122484,1.7907012851258743,3.027044098857878,2.3284603345501038,2.4152139209138679,1.6090918414328574,1.6060340174915924,2.0289929289063893,1.7525485205407896,1.6112882272255937,1.7543273035212146,2.0616175041944933,2.0443965233028059,1.6666447088901231,1.9409769874461857,2.1940722209773473,2.2170522733830227,1.603679141014773,1.7533307455965548,1.7783859604423207,1.6616295039582301,1.6623643291639374,1.6062197256337367,1.6055178966070429,2.1827897966208409,1.8661128030275798,1.661452202317435,3.1352516903651382,1.7668455473708702,1.6421209427355212,1.8953866672621973,2.6240595204391846,1.6733224215463969,1.7148876167348432,1.9899150226050724,1.9235173530176213,1.8371957017077454,2.3463374211228674,1.6354108775069325,1.7667125021052947,2.202102914049787,1.5731420858088367,1.6122647080577095,1.574674325809577,1.708735386607261,1.6578076335607865,1.6777131151798452,1.7702717852758281,1.8763603416621253,1.6568889213192113,1.6083035534558487,2.3231386715900837,1.7783957699305741,2.1977906196360548,1.614123959246802,1.6021740227279806,1.6174091530768451,1.7072274118059778,2.2070649211645303,1.6982732383967341,1.7073129640272937,1.9666634619546544,1.9468737900491992,2.6381789801463356,2.9567782701245098,1.6714947456904432,1.7975703697407517,1.7034796620761326,2.0577697361792708,1.6053467553580147,2.1574453419734265,1.7285150058366576,1.7976842768053756,1.5916604532901288,2.0062809951117306,1.9547610036568956,1.6162887385790301,1.8887237812489555,2.7105663786016492,1.7408277537298098,1.6524285895970861,1.8729064175408683,1.6931472597657371,3.6888941687178711,2.2347484839446712,2.3789635090325856,1.8397115681349385,2.5504146738930329,2.1772082555732624,1.6248169014537999,1.7720436542155202,1.9601435321620315,1.696865536529232,2.3104400493469628,1.5855801759439552,3.306362294407089,2.0288213389204741,1.9942896895920894,1.7954621136956914,2.1438596039618201,1.8117696070450804,2.1561542132264178,1.9536494438388068,2.0202507511562717,1.5946873121527314,1.8845785818073713,1.7213649405546416,2.1106607074485644,2.1842807286554629,2.1977960899749185,2.0601262945120076,1.8405555801444788,1.6232467493795715,1.9366223837619694,1.6254272252377282,2.9867890607213554,1.6086729400098845,1.6026735419417293,1.5738499521618654,1.5847435412132889,1.7908434769640993,1.7562769886597793,2.0063735810827272,1.6024759667491009,2.0991684038732958,2.2065842927222326,1.8766598373255874,1.8313311681084667,1.6158744520730435,1.8035290066714174,1.9780555133467306,1.7017935110468771,1.6237738471673311,1.8640612387738098,1.627316473746178,1.753464472641985,1.6113857171498682,1.619906171560777,1.6308579451644167,1.94169294559925,1.6431499814700972,1.5773034372858772,1.6567543683881774,1.8240138441233298,1.7223519677991808,1.6148553497300815,1.7217299985877756,1.7351588667722511,1.6674659807458241,1.606316669858346,1.6849556478254069,1.6611931578190871,2.5084463612507655,1.8649004063485777,2.0697867818224678,1.8310618563843246,1.8990965784426208,1.5847520653866318,1.6509504629878651,2.3727221118783515,1.6646550442339014,2.8296831536583937,1.6022349875483639,2.3721245923362844,2.6005801616883337,3.1640212258115845,2.0748447168532826,2.4005081070266434,1.9010322309769216,2.2880360346467157,1.7199599741778602,2.6248318513166526,1.6421748445370241,1.9412807837091333,1.967547815937545,2.3014550620276952,3.308653179879077,1.8823881476327773,1.6441913627487275,2.5973512969293031,1.6885860916656559,1.6429264116398419,1.7725803493150836,1.578217953279603,1.6008126979198309,2.3827051862053432,2.0431368437689232,2.3394777665411244,1.7763868148955158,2.2146494316627483,3.2073866307960772,2.1094923577883429,1.7762469601006274,2.1175398441430446,1.965510701328681,1.9291403076825842,1.6365908477149589,1.9062138164096918,1.7622510555761306,2.6547564655966913,1.6397720116825012,1.9486879711479033,2.1574687289357541,1.6125779231580661,2.4289495195603843,1.9636699261465176,1.7426207808140415,2.1163662303826767,2.0450834200332149,1.7069683690950561,1.708782378613833,1.7230309521359828,1.8761445974849176,1.9165707357452237,2.3157715605917035,1.9891150731075238,1.9405047174246841,1.5930341632256424,1.7330689466520171,3.1577567697111735,1.7116927011846501,2.2235561984447085,1.8124112881816383,1.9866626845593645,1.7905138295998801,1.7264303229856319,1.7481859167603959,3.0532772692825558,1.9015341960403118,1.8542294189251745,2.1306679700854763,2.6396288472604565,1.7917159466881447,1.912379809584545,1.7953119242363096,1.8077391427965452,1.6230395765788059,2.957231078986331,1.5804270558654219,1.6209377953987225,1.706526016967711,3.2463216347465367,1.7223761416402172,1.6738497318207251,2.0040598577185191,1.9399882901067467,2.8836341415272666,1.9130970916140515,2.7230112771028958,2.1692443596975917,1.8164164493094415,1.7831512996262235,1.679345946190117,1.5932260534343095,2.1678829971118128,1.8548733133953681,2.159634394459141,1.6449617845447879,2.1275160123184622,1.8747237939480819,2.1325783516923624,1.8796113921051811,1.6145965389527375,2.0412378121259613,2.0397307630940036,1.8276387823016402,1.8205258264667168,1.7303369387488754,1.6647220412544346,1.757774739315821,1.6113528444979435,1.6289730810838845,2.2935506333229188,2.109288275008157,1.6463872644463284,1.7294210222957322,1.6409245653279592,2.0124990540524363,2.0194138827525796,1.5964982466457831,2.5143382284574742,2.5702176293818066,1.8638488955151131,1.6140412668692392,2.0690375813971356,1.611672608574378,1.6362260913714519,1.7696917793425118,2.8531780762498591,2.0190096287778614,1.8853564152938025,1.8462269605476525,2.0372947189620736,1.8198587853089758,1.5853079158167391,1.6642784411391676,2.2597388748645693,1.7812884186145166,2.1409209880032676,1.6153916689401706,1.6209334384969525,1.8411018929757996,1.8712184262998832,1.6172046681710317,1.727334223532077,1.7475466618692539,1.8904481948235003,1.706796921172105,1.7739934498954262,1.728518914996265,1.7851851954723117,1.6892550118434611,1.6491539598181779,1.8893059127160856,1.6872882452176494,1.5989699897285905,1.5788726759684399,1.577604116108698,2.6516955496223606,1.6275975768231299,2.0040718019499151,2.5231180005429339,2.7034807952849289,2.1302966349816668,1.6408972998580678,1.9470116764848766,2.6377859634755576,2.8483577725500284,2.2280311771555277,2.6023580032332654,1.9200318463783415,1.6803343685108625,1.8030757358938556,2.5465072383793097,1.6884896201956547,1.8053578076755099,2.1466468748520913,1.9056891999156418,1.6731753646975547,1.742846270648194,1.5966838224309108,1.5853545479945177,2.174184154423092,1.906744719997979,2.0261049729857916,1.7403830324265639,2.0874184525634281,2.1823895973806553,1.9900572467984041,1.9762483191858224,1.7879663011788713,2.5071964101269928,1.7685113418319205,2.3995272233462064,2.2757272892358076,1.7344745246480062,1.7223212143449536,2.0166171932186336,2.2719852626047201,2.0434949113499874,2.2164580853028544,1.7748107505343027,2.3701595581377051,1.5780208379432696,1.8545665879850506,1.5723884741294891,1.9825544617449198,1.7682007207974784,2.8319495039843452,3.692785780980258,1.8059719668819305,1.6586487721862242,1.5949435679236681,1.9738011420437074,2.4146307425400737,2.6292865955483062,1.9773925778885553,2.3716760343647327,1.7453186941610832,2.3041246956566952,3.5673297355656479,2.6513426537977103,1.6708522517146784,1.6984894247442728,2.0025445936146462,1.9935622099653374,1.9484249453105502,1.7873597166783166,1.7661612824843824,3.4093061454629585,1.6309316381501611,1.8263236198611588,1.5807072934199995,2.0314881880531122,1.7894258317686986,2.7078974097957316,1.6507880469570442,1.9138345525817295,2.103601950490134,1.8018341704589453,1.7550793553310555,1.7238754378904053,2.3399770488838274,2.6087979271180819,2.1170266650124079,3.194541287959515,1.9137591977557136,1.7006254193746388,1.6472762573510489,1.5785710038403395,2.8877053869749894,1.7336714756237184,1.6926786582610442,2.4822001970818226,2.6566816748348487,1.6169574023929634,1.6706458165348221,1.7191652770548984,1.7571556019385985,1.8710253348485151,1.6065784219941452,1.6205697622983861,1.9877629137458068,2.1624119864385865,1.6490953572861289,1.7195036548967051,1.5887644362768001,1.7058465357227184,2.0995565260833269,1.72732024318428,1.7405376393492569,1.7827852783552802,2.0126367588359741,1.6916048382439821,1.7639184010746136,1.8387548049336739,1.9730106660337992,1.6721607865293193,1.5793161812452186,2.6954988046156663,2.5850351830216356,1.588558188492214,2.2406115475109782,3.1052264233139746,2.1362112065500387,2.2042103898941288,2.2686759122911648,1.810857459735721,1.7635462285188179,1.6656340736635362,1.9617516406377424,1.6133561523993969,1.9181505833223316,1.8891069280053805,1.8756321526990116,1.8810203075241212,1.6980455181033443,2.0218999956919532,1.6836666712736987,1.6037204326384242,1.811694128539219,1.9956778249134737,1.6726800277438607,1.6325739780735005,2.2491144969402703,1.776868992412864,3.2698063330783298,2.623879367739816,1.5826552114074857,1.7910833076868153,1.8806402466716774,1.9903586930925776,1.6063963458953154,1.9599635487640976,2.243941011058709,2.2386436642742042,3.3361682718600054,1.8050706628782105,1.5978405166115843,2.0655244263267143,2.7471028057611453,2.2826495631650454,1.5779356859352942,1.6926998944218843,2.0427897175355154,1.5931517037397875,2.2056845254804966,2.075970848774698,1.8792716425702103,2.2408429489299868,2.4792450967469115,2.9882804864732022,2.5333978106085024,3.4094633058701986,1.9714158256276606,1.587614990839042,1.62894700217648,2.649439844606686,1.6675875423298294,1.5961123037663711,1.6498350275965303,1.7623462617636465,1.5874446002637927,1.6243249960909727,1.6150464216844136,1.8024336241190797,1.9608310535575886,1.5741568782879221,2.7488773839412866,2.4387075863126824,1.7449295152052993,2.4854726925181079,1.7820702370062946,1.8655187257963506,3.2352952173746616,1.7154836550304589,2.7907842861549277,1.772306782490775,2.0332074546146717,1.7765592793295812,3.3168450057244963,1.6712529138690253,2.1732636120735047,1.8949402327546336,1.7339162321611155,1.7040991723103098,2.0148516560927514,1.7556417619747071,1.6812940817740891,1.5905732031325248,1.7095590332558106,2.2710626305409085,2.0378861682300551,1.9662088498075874,1.8736821872075717,1.7184230246743182,1.7827409971667187,1.6733968530347887,1.9459238410880773,1.7963625839718012,2.144182868339195,2.1016401742794861,1.9261744027049428,2.3997602447156039,1.895399709177316,2.0404687763978728,1.9262121646042767,1.9198535957706067,1.859794483238818,2.2436728110445876,1.6044724069729346,1.6425964945719398,2.0940183321198722,1.984689152179663,3.5364279242827026,3.3968118909028995,1.7449789797015895,2.5794276940599969,3.0352136000869492,1.8287845893458718,1.7399229382598511,1.9539645062287565,2.4836939308539643,2.5284036947160473,1.8139968362577634,2.0833339971005955,1.7840196773872494,1.792599705517061,1.6675520675910369,1.8735152474527939,1.6233922075445819,1.6731337786935747,1.7173123139752939,2.5151151294699656,2.1041165788976079,1.6158598980054533,2.2039650516651497,2.8240302135044124,2.0564234300976891,1.7734492591727022,1.5746281127620305,1.5818674832424009,2.3445046614542275,1.8082748414787888,2.6443941726489659,1.6615739391080571,2.1809439614796844,2.5003107825652235,1.5877872249779668,2.7539728310110179,1.7601740735008591,1.6016530812211613,2.0713970678871969,1.6292504533766448,2.1094836584159977,1.8616498031445528,1.6709066059758761,2.415719789639879,1.6947245233007977,2.2531525689435936,2.0284779914469011,2.3358713764324253,1.8316256503237724,2.6146288057161904,1.9689142418198755,2.2959070338052499,1.6772265355585041,2.0071171321837173,1.6474058829264493,2.5531849033338849,2.3086668250388724,1.6999850145527675,2.1734303060163347,2.2951868993913713,2.7150635234517484,2.042061238533635,1.6154642123926783,2.0898573477215412,1.649877016399159,2.2000307378286537,1.6116044432607262,2.0146992509331869,1.841461106119566,2.1446775614911937,1.6552700757346845,1.6596838894837742,2.5204530152364426,1.9115734203373627,1.6116019849381134,1.9978820088665623,1.5884022344144793,2.0620604815214301,1.9005653226025054,1.984720487937276,2.1838506872172312,2.2595724054435258,1.7190846308634784,2.2170003317695803,1.6483038802616905,2.1029802258181536,1.7352978220589712,1.5814971859971461,1.6637021642826337,2.8501465035792997,1.858377762426193,1.6282592528658004,2.5655661386662567,1.6630813242586853,1.9748038870120495,1.6256878436681867,1.6126706220877085,2.4298917043383792,1.7685734702389142,2.4928057296503656,1.5927008511548659,1.5732814462599547,1.8509274752956846,2.0586158129841654,1.7970178555193432,2.2844122423761668,3.5887717981891121,2.0049451683380264,2.2652009711152288,1.8181253328396441,1.8381372450679547,2.1152363384177915,2.5145743291126004,1.9098010237229146,1.6287992718818556,1.8058298797386541,1.7680041146572454,1.8717758544959586,2.6723158974777017,1.9087867971818855,2.619031781373736,1.9886905404947972,2.0849638875018384,1.9389859126524416,1.9629202558272949,2.1739468709437211,1.7379648775888477,2.0351367923100074,2.7249126081405883,1.6272760347303068,1.6229950781843585,1.6848427952319835,2.111186554362257,1.7306640945097218,1.9953181125906267,1.6504793653521548,2.3176530506505886,1.9381396560990725,1.7735865608703394,2.1872841879438214,2.1429826175334714,1.7386061379195779,2.3230395937658175,1.7094832863085923,1.7253143539493208,2.5547119288001965,1.8958374424587567,1.830710945086564,3.1452395230658245,1.9165661120492841,1.8930899753787698,1.6967498930659406,1.7301004557720838,1.6387452062943726,1.9641766464398704,2.0603446710590596,1.748840704661857,1.655458021038777,2.154628559889229,1.6295337524197724,1.7843505253614116,1.6149382559525298,1.8435623282008233,1.7135646986025306,2.057757206413612,1.708944948472114,3.053988813581046,1.5723633743283127,1.7284896421773461,1.6290780349014773,2.3298602366323009,2.1330579668246554,2.124916087793447,1.6452069156777349,2.8592981290531463,2.0006525837899276,1.5834325394771216,2.2477045746400091,1.7464517373580952,1.8660277271656622,2.0151940360884186,1.6070168843575661,1.7016301780345522,2.0614431553022778,1.674064310312269,2.4090807713107556,2.0813273904275182,1.8144960430908763,1.9698770051513519,2.4937365719320415,1.9333743702713004,1.8773759360401088,2.0124129876463259,1.7258866257198839,1.5897904631102553,1.6493421586023274,1.7413766842029752,1.9023079275104289,1.8114701944053491,1.6841577789339337,1.6795708246543066,1.7595986342066077,2.0871668655064961,1.613024910144975,2.3817513200641449,3.2866596953988436,1.7016336182457616,1.6861816282780833,2.111927912136871,1.7872521197395146,1.628898378138264,1.800617547795565,2.3269939227075058,2.1139031747332444,1.6292829909330864,1.7639003894101264,1.9309181958047821,1.7094142764872358,1.7523687918156539,2.3601936699636492,2.2542436656983393,1.6238769792978933,1.8530111716545556,1.8311813270831905,1.8413235625082249,2.2084332232389619,2.4492205549573516,3.6080632931322847,1.7441033317794949,2.2276316565401721,1.8100486119601791,1.5815740616865479,2.9474381010221058,2.9056472915256748,1.5876395030633961,1.7331797892989682,3.0569119280618251,1.5895714257359141,1.653283927015949,1.9494363597148048,2.0208583339072974,3.0714882423821446,1.9291161543616389,2.0531096103026756,2.0311952780913947,2.0303735669920755,1.7490859927929756,1.659020855113748,1.9650728709534231,1.6630713065158254,2.2641670824721913,2.4037799300372726,1.5783644636800105,2.4107310204663834,1.6050208213572092,2.0963913356466257,3.0816244947170666,1.5787264410983923,2.001202268388746,1.7578634271719056,1.6745085375038498,1.7198611384828715,1.7771424556189206,1.8484581521587946,1.6217560749039104,2.1089615073316934,1.694386161889091,2.0870108986833018,1.6886152387401607,1.6235550219448203,1.7308522943646387,2.2407297672660373,1.6355922248581194,1.7303206132896167,1.7408924300984123,1.7842059329390596,1.6215934800692733,1.7293458087498521,2.4747589388735398,1.9596979693536207,1.6095078238158238,1.7202417181818366,2.6879638797460559,2.2059002529326328,1.7740881508602493,2.0251309821167025,1.5897275861666178,1.8822300906507579,1.7374003571374514,2.0971833593019285,2.1198385307995635,2.1099111683645608,2.2280821661972401,1.9870168059421833,1.8890293446226047,1.9831794049163527,2.0460166346524722,1.6128791903499407,2.5112894828961743,1.618493033287967,1.5927733473460846,1.8994185380291548,1.7142550277575503,1.8233828604014208,1.5892314483650143,2.1324377146136357,1.6563722052017451,1.6083998925247023,2.0949287431481793,2.2331178841735779,2.097364865327322,1.8897018740646379,2.4518495762290211,3.0254499346509229,1.9250665108747327,1.6615176231967543,1.5994136544443061,2.5409754533989419,2.6466237139154867,2.1184602844263405,2.2402080616370803,2.2182985288677521,1.7041282836313281,1.7730441748521979,1.8878907860538605,2.5781465139144251,3.2434642070169573,1.618431613903947,2.0881185566691816,1.6341628707715319,2.3329761227033452,1.666012285852162,1.7981322016753984,1.6255819148334063,1.8262293212823411,1.5988538555238052,1.9038087921324827,1.607453267684914,1.6947447559721738,1.9397248923375248,2.1416044641643781,2.8837030489126056,1.8531006745154139,1.6212286598082688,1.9957166360136871,2.3799221198248341,1.7166297764961331,2.2902734945633125,1.6293393858029499,1.8273316314948722,1.8301098839605738,2.027921632009424,1.7500019586660631,1.6411313275326418,2.2144997357950498,2.1716281076326833,2.1988814213928856,1.6799329770033502,2.0226398244284018,1.8821661899363742,1.6269519171769591,2.099245202633663,1.5792787666750312,1.661353453311589,1.9029781598001638,1.9267711638242055,1.7126113085344006,1.6319888937053748,2.7471793896748959,1.8159142937636139,3.1739919873292748,1.7866276948073887,1.7045082675213075,1.771947021240482,2.2411780274726527,1.8111718379546826,2.5213546869269585,1.9695628272390282,1.9405427561495425,1.9032310152342902,2.4742548206257027,2.2038766506070235,2.777289032510514,1.7128528715548392,1.8929505186135986,2.2532734571385524,2.1077026524170703,2.0683007653408891,1.9194010008659519,1.7381882725831443,1.5809963682860411,1.5789000970976987,1.8078762438674743,1.7660012324584251,1.9951077786439475,1.7223982447869319,1.8678647770111974,1.6274443378894998,1.7563427373673106,1.7997306336412324,2.7320845667824125,2.1371502899578996,2.3083866658295125,1.574458845741455,2.3609772640910096,3.5777294725380209,1.7564865691521425,1.7016422672943783,1.9360284445391742,3.0254810923103923,2.433785953875228,2.2133921017692555,2.7089605168422479,3.1303770715613317,2.0225783444142369,1.6363955020443546,1.6620054276717895,1.7666225306649117,2.0042564932153319,2.6221094714818518,1.5999907905844359,1.8529530203412905,1.7793683574046391,1.8178313964300674,2.0206173427996141,1.6202528985624345,2.7103534637894207,1.9426706537009226,2.2637081551974227,2.3594397290837459,1.8372502263742241,1.6354917559922379,2.1550519954110556,1.9885535383493518,1.7865567523808163,2.0789811827161806,3.041838658659215,1.6038970890226707,3.3095373543304212,2.0957179184412444,2.4063029852474083,1.5721136679162311,1.7672543051830614,2.3903639410679074,1.8140323266272596,3.2672045348212992,1.6826326641909994,1.6554795474199826,2.2070553262371799,1.7337564079965442,2.4699181967062951,1.9584986730477185,2.6001460045925149,2.5833307795734428,1.901501729630261,1.5807474129587789,1.9419479640172213,1.6218664747670239,1.6340280711600381,1.6372598208912781,2.5363968885126913,2.1353712920119734,1.810759871572289,1.6123983020285659,1.6614511124375055,1.618749085956235,2.5361315689465007,2.7449501676955728,2.1654978559361591,1.8501347461908633,2.4686343082846922,1.6441653322810648,1.7035667280437692,2.3823929085716071,2.0287315900976748,1.7311649452123783,2.0172470420974102,1.8729780603062653,1.6221131250273246,1.8071311860318175,1.7797766788619069,1.72102053293455,1.6981660029327657,1.6362486164967669,2.0896137970830448,1.7208473943823008,1.7026861871467172,2.372081551179968,2.5217141703751818,1.776488266760023,2.3009678331720078,2.7449791695893406,1.7680185713584287,1.7813958086601094,1.8481256932776857,2.1775968597284816,2.0578438318558114,1.7504138225564139,2.3208141199374843,1.9891143768107276,1.9534037020630581,2.4240076173093055,1.9174025914651165,2.6720947634571082,1.7274594616253292,1.7840318506394905,1.8153063326494914,2.6855256133294927,2.0852949624505821,1.8015735839308726,2.4756922776847508,2.2585578737571361,2.0959856576331131,1.7439919537111661,1.578108430413186,1.7332153426495644,2.0307554294340902,1.7273291652655129,1.8019560795206617,1.610680509272338,1.8014521379898367,2.0950571403031057,1.6195244569239164,1.5732916034028037,2.2723157960577876,1.7819010337858803,1.7267473541933624,2.5437476543368542,1.6823886246065729,1.5958940798442445,1.7376099905117495,2.5157101692386195,1.7585424243762691,1.8176799098533134,1.8905442974831346,1.7343305827777098,1.9049602436767199,1.7907578146417766,1.7719188157613426,1.667591816628796,1.7734837471575029,1.6108379594721174,1.8628258074744086,1.683467415325663,2.008792731069545,1.8110057162851214,2.8321178864169618,1.7970693284058312,2.0982820310871459,1.7866726315350108,1.7748098644543666,1.8040434030464565,2.3143514223931332,1.636026774751236,1.6273324590555798,1.5747509882848387,1.5951301762676711,2.1420145777637791,1.6051809281951035,2.8440609489246578,1.6410802355214353,2.5787600911150537,1.7263665746148178,1.6009031541841732,1.7131354654120847,1.860945327077965,1.5753673508973263,1.6077864821961014,1.884467554593398,1.583513507802669,1.6099830498857519,1.619842311293296,1.6329317610299507,1.6345145566910468,1.977338075695992,2.3715076346775903,2.3912610078515928,1.6822657273927106,3.0737087493646382,2.5982048048512043,1.9135760658402048,2.2191977643419909,3.5615997380967452,2.8802645717403879,1.8970342803864662,1.7409595317218778,1.8629040847205092,2.0471534399110944,1.7302568317766178,1.9302557324749783,1.7957770734095411,1.786014479155263,1.8431227463509021,3.0827924712135366,1.5995624714492551,1.5733489323321588,2.4882293353632359,1.9082066629366099,1.5968707456966771,2.1319763068480047,1.8002581666970168,2.136563017797295,2.3010938866432427,1.6986443701131198,1.7710488621832798,2.7180733656770153,1.9575781306832793,2.2560108689060576,2.2816404203713883,1.8590836024596067,2.4825296598644009,1.7865053197517939,2.694359272286166,1.6372222345956811,1.6540585991760832,3.4378339174210284,1.6890133308126352,1.7044698953754243,2.5286176949884571,1.694380771837136,1.9362117658550269,2.2039743490383255,1.8530607777344468,1.5952765499407291,1.9568527416378887,2.0798412357420624,2.2835052104578719,1.9703895419427955,1.8772646762334639,2.4495654715675581,1.6596509999424649,1.7384738591156961,1.8133916572164328,2.0911511970440135,1.7942736363872791,1.8064824492370126,2.9743329098090454,1.6493177080119068,1.9648245625651566,1.9438873729766319,2.058662308860213,1.7889665984786509,2.0949269301952773,1.5751207459663115,1.7402003181893024,1.7090008937241012,1.8642208383636465,1.988416695326116,1.8999982674320244,2.0629869606066653,1.6375873866893431,2.147345432556663,1.9050901222177601,1.8059732591504234,2.0578411645266899,2.4287927765156123,1.7932306516023067,1.6102779131535494,2.3257994084373945,2.383544077023644,2.1124642757526351,1.7172689239013015,1.74845571822339,1.8322056989360287,1.8136323667899665,1.9222821925360813,1.7655917754325381,1.7186454973164451,2.1896824258572849,1.5797426335500537,2.1170935202474745,1.8856570278985136,1.7959760046812285,2.1878334498688545,2.0563746069471707,1.708929053346957,2.788081796828036,2.0988367787123834,2.2066745627005733,1.9014223186898578,2.0731817777114618,2.124945954990328,1.6161026427524061,1.6695130710068151,1.7679544016659645,2.4635688704182059,1.9336785295208581,1.7610081000091982,1.8175541830214523,1.7277773533617675,1.5909354788630274,1.9967295067605582,1.6731847396362409,2.8168808420996729,2.3203452915734801,1.8478015631972637,1.5769321135756849,1.615948743355796,2.4049209074489601,2.8816209448604204,1.6025421904655157,2.6597040807358705,2.0233207071149564,1.7587315052729704,1.85003699828917,1.8217734151795362,1.6676856204648984,1.7655551670431946,1.9143360127005757,2.8477153178009358,1.6218318332713759,1.6703475603373776,2.0260584612928265,2.5464550171600808,1.9427015072535085,1.5749727989399029,1.5932639183478947,2.0203980365493397,1.5934160091919096,2.7348117490548911,1.6357167366786758,1.577478390667348,1.5785089401746901,1.5716577434367913,1.7995230069924266,1.5804954140389067,2.31525160665353,1.9487208185756533,1.9618740000482233,1.6129175614977487,1.8669328945047405,1.7673160698993238,2.4054184738595361,1.6456840053083996,1.6109949471464489,1.949458913355723,2.5732792066451378,1.9615788557491758,1.6155206170158534,1.6969583868580951,1.8642263015960108,1.6871540621838894,1.6313784485605707,1.5840993520287341,1.902531421098536,1.7347063337548703,1.5725813114293434,2.0966742064805013,2.1729879199530235,2.8533316346099493,2.359902980584561,1.615455056198374,2.6156154591057592,2.4439491408437211,3.2877534853236998,1.8101224665906046,1.8541439605118784,1.6903406281441486,1.6960277389314429,2.1597431091339208,1.6123277731706349,2.250121258708047,1.8564288897470462,1.6798302327099957,1.9282733461229771,1.7407460376826207,2.1660447049183817,2.1161046578267806,1.6046307151877273,1.696611117985741,2.0138642481371516,2.4931067621472018,1.8642110168466677,2.1935227717494636,1.6444860767788196,1.7070851802335183,2.7414693977135345,1.6332272367939633,1.9332455459446878,1.8167292928843335,1.8035159754106131,2.1098201535975174,2.7644212253490945,2.2113717960019521,2.0067935445554239,2.0927131474273359,1.8119247779138561,1.6987160055594852,2.3349317423120155,1.5772525080271034,1.8779190246764663,1.7623591594854531,1.8973579691114608,1.8837303550866926,2.0377359340960459,1.7352663198080638,1.7530327797256571,2.3256985840411453,1.6787205313770686,1.8457686081523628,1.9215531229669021,2.3458041700341634,2.415074062609877,2.5859149695829875,1.7794027485200123,1.9024533616459862,1.6175561379933949,1.7527700732788631,1.8058844138338312,2.213763159865227,1.7122453104347359,1.7191022840892582,1.7757019172448409,1.9108612807008361,2.3182009573273299,1.6053595275780093,1.777236793454303,1.6004558924108994,1.768118618180833,2.7257568850972973,1.7487213374243897,1.8750868232302076,1.6300424192991849,2.0130771859871528,1.689851911977402,1.9852458097248196,1.6062836053717293,1.9371863962003577,1.7953418210213903,3.4333184675301078,1.6883108327740368,2.297853328885092,1.710732951644836,1.9591696487642116,1.7920893702152467,2.1275746321279598,1.620494628115049,1.8673686653377715,1.8457903879093578,2.0953588537483618,2.0743961182804318,1.6221380443480533,1.6809806120494737,2.0410358568606974,2.2083510637559245,2.0915615319991767,1.6008528447094812,2.0307273199096714,1.7706095947173939,2.0198595239416521,1.5721183665111318,1.8279476449798178,1.669057558573404,1.5938346613869776,1.5713023191305595,1.7588100389813737,1.6532705989089831,1.9700210406540528,1.6310684996295213,1.6183040927096684,1.6941869812982904,1.8788530127189083,1.6463306487806724,2.0051716737399237,1.629304669220847,2.8814569274470738,1.9419663329664745,2.8705410424774143,2.542142755766684,2.5257388676741099,2.7469774194274201,2.5646158342284617,1.6693176765111639,1.6322577270564742,1.8357460607589762,1.7589667480776014,1.7587507136211049,2.0405405464054698,1.8701109673793666,1.8785362246427306,1.6924330913134211,2.0879396719616548,1.5984334840499677,2.2945683715420992,1.8003617937233631,1.5724561820899274,1.6458311373093193,2.0390212387323627,1.5810963048355999,2.1284331624078177,2.8636446072479069,2.621821162686313,1.796205792066395,1.9228653215032765,2.9274358615575067,1.5790158579727163,2.16518797120606,2.328188892527439,1.5736650330944588,1.9400615565062629,2.0377001389131868,1.6978785873219602,2.0737321237079112,1.7209870316952665,1.9937043714528968,1.5730740592969503,1.8958824717953688,1.8350982578827284,1.6677442804539884,1.6432579947760735,2.1836068456799054,1.7581594968378045,1.6728433107587346,1.8610574363473604,1.7554042112938373,3.0979648241935616,2.5005617776989584,1.642928842697565,2.3823351160686652,2.4152867366877149,1.7764177656339879,2.1054184409889309,1.722671618001115,1.7823119634388491,1.952331385528975,2.0378216331482464,2.5832658596012066,1.7505888335785442,2.5781260347146087,1.7095844904982136,1.9343879373204347,1.8188372813219487,1.7314019698722869,2.0516476240842385,2.3725006229644134,1.6354782098250324,1.8048146408377908,1.6016510391512127,2.5565549297193022,1.9335358782168448,1.5839394677535346,1.8362365527994067,1.8777433527997622,2.2574725197615289,2.089353468844346,2.9720793174767457,1.6484583995610478,1.613739536202645,1.7338145848929492,2.062634264891233,1.6525519848419239,1.828835324906346,1.7249960774976063,1.6156244234203323,1.7773932778543713,1.668133299148546,1.8924024412783615,1.7915973584380298,1.5902767051804796,1.6532575430529912,1.896276980503576,1.6154563528063755,1.6979022629149818,1.7651846837747196,1.6798856326744531,1.6049016355058325,1.6807540172528479,1.8975572353246233,1.6364923713224919,1.5776030751716583,2.8789575407874017,3.5496361861434536,2.7225667088718901,3.6576408366159066,2.281815943380701,1.9910386883372695,2.1075054884500823,1.9472235832887697,1.646773355020418,2.1022287676549452,1.7486717950147919,2.1901118870109268,1.6530795323165579,1.6571950932104651,1.5712625433743932,1.6124863841417836,1.7217243899681942,1.6728528450402176,2.064627888614996,1.7642835280272309,1.9706455735583641,2.0707065957338222,1.8873412812531964,1.7343382450989175,1.8023431928649547,2.7951603983311513,1.7049640005534323,2.2542338676580966,1.8512405720636669,1.8827889748611992,2.1636185037925189,2.2562288058580191,2.1651763216111033,1.6196572956016972,1.9187053613217859,1.7120581860971862,2.1392902640920353,1.7602513901532149,1.9941891571421564,2.1238371768982822,1.6222950597270946,2.2282659150187927,1.8535276646411745,2.2177675246917508,1.7404279539205321,1.7856772078538459,1.6085843406221632,2.5168188192865295,1.6335508367473555,2.0448091914592426,1.6577067706855477,1.5849064097958387,2.0274890387423965,2.4371862074948236,1.7968660971493666,1.9183377592732616,2.0572831146031061,1.6000442536824189,1.6880418502197965,2.0214605496529332,1.5746109729925719,2.2752425311584541,1.8776155387958013,1.8109558535137809,1.7004505733611783,2.2344873343384029,2.7956341189331448,1.7551913237085257,2.5659239183538132,2.2222162385586026,1.7698023124874671,1.9515278558750511,1.580595428475021,1.5769015473716677,2.0264086028436274,1.7307847216289425,2.3281797927042063,1.9744630759507669,3.0382285780851697,1.6620974211229873,1.5936606975521761,1.8770102274505158,1.8107075946880224,1.5744627862884566,1.925104059671183,1.872512481602244,2.0465798983887069,1.7890484109099416,2.093808634743326,1.8517086809440646,1.9996131673950017,2.3117045314474565,2.1053858881929219,1.8285865760027387,1.7573402675918937,1.7281227740911207,1.92421180632414,2.3762564971126183,1.6191147740255947,2.9522275468048784,1.5939602095962504,1.7558490664599207,3.1553485092124149,1.7331645184375908,1.703495517015311,1.8496332935917317,1.9378829764320906,1.9480267674393692,2.9334577958330574,1.8960309582416195,1.6516062732648809,1.7932516763103556,1.6551687363708352,1.8616329428237597,1.7369506549324032,1.8583036949153495,2.7052281964454163,1.5837393411483967,1.7684479716586632,1.6431114925426105,1.6970192133321715,2.2381000753102547,1.6354582733516143,2.317979363198797,1.7727901510868902,1.9896722899965134,1.7579099522221031,1.6321151513407737,1.6258646565750061,1.6062331552904676,1.7994249177135415,2.1321625088759992,1.608309798511893,1.7649078138834948,1.9588374013970367,2.4320903192575214,1.5750909860373874,2.2915983725406104,1.9159488011609036,1.6556518499491573,2.2178020734206396,1.6996633428732468,1.676662091520198,1.8836485693964176,1.808985084671676,1.5868482644917061,1.9121329107969074,2.1957845119720671,1.5955198634906671,1.6034503976829844,1.8467948745751179,2.0146696292368151,1.9903584264513972,1.8073521280564075,1.6693593426536646,1.9245521602419586,2.327877124184349,1.7280621423875844,3.0329280635020028,1.701510780719796,2.353290536959515,1.5814447356839521,1.8548714216857742,1.7352425761633334,1.7001624200840615,2.6454321970934696,2.1375140021974994,1.6583445859339796,1.6774809661303489,2.3630153709449813,2.887351922792047,1.9542785693530753,1.9650524200907904,2.2650952403389093,1.9434134593878718,1.7577253940144317,1.64523181860462,1.5923309677462749,1.6078056541703303,2.6634528289286954,1.6872211760681697,2.470872582324144,2.3889697873842861,1.5840140422435283,2.5873925872762795,2.9389784468262885,2.0646517426064568,2.0234236722490069,2.1026765667023941,1.6020571691578147,1.6738062688856421,1.6601539721265086,1.9187029431596292,1.6181711893805188,2.2629736175876527,1.8558067808086252,1.7773841198132954,1.7563840624327827,3.3199345524403245,2.0789744378213348,1.6076554177026681,1.8259234106634747,1.7244081519949943,1.6707415106535359,1.8594448061479909,2.355623059700918,1.5951883478314886,2.292450991335321,2.103465496588004,1.7330991641010118,1.899867242189003,1.6022277757744665,1.8750192788808924,1.7784098206429393,2.3095271025105295,1.7164340246152769,2.3895446203040787,1.8124109745124521,2.2163669198127174,1.7840596247103766,1.7225613128007369,1.7449173018678923,1.8121215756823053,1.5821490475324584,2.14713503034183,1.6025789029608142,1.6163359206324373,1.8846095086969825,1.6162831274451319,1.7600601124477611,1.6951804124525047,1.6424208801860243,1.8708610855073795,1.8694682167074552,3.0529148660527099,2.0493575102175079,2.0802630054824869,2.0504961271849331,1.7190375955284456,1.7075042264829254,1.7072485921080194,1.8354363116786985,2.3646284919316392,2.2627982793516663,2.5901607654273171,3.2966917154769502,1.9867752480124754,1.5916141777613779,1.6872793877898413,1.6530777149447333,1.6070804138447141,1.9435001853352276,2.3310661084315232,1.8049280284041083,1.927371613228088,1.9398045289409425,2.8099210303544888,1.7495861528132295,1.5953645009225459,1.6679397021747211,1.9272934234397732,1.7967003419379415,1.7036556201337691,1.8428994547686539,2.3038491706761661,2.0837019392915201,1.6541577985803098,1.634183722869641,1.8049120905629523,1.6114742211326669,1.770291603729685,1.8971954619345393,2.3009555979307144,1.8424981512508529,2.0335056318895899,1.7180527375584222,1.6624209601854218,1.9435448491030409,1.7227223814453412,1.953750340909155,1.627091928445761,1.8000800041257852,2.0264423804263205,1.8196012126690573,1.9137251949472471,2.3837293808057769,1.6438735020771866,2.502024351599033,1.6334609218230167,2.7207739367286989,1.8305095429873111,1.6266030687268598,2.5735107090134348,1.6275762671533207,1.8957566028912634,1.8883259823448424,1.5838428020732593,1.9083499173501581,1.5923890862947305,1.9533840435806265,2.2504710862767827,1.7983207368238143,1.81149592645324,1.829364965501846,1.763109787459036,1.9024682743343095,2.2176254055943394,2.3323489966703193,1.7511699523566986,2.9575419582830627,1.8776751212390586,2.191503506130033,2.0821100742129577,1.6550355419547498,2.4301705270200014,1.6848014596161112,1.7290530033512255,2.5202779828019217,1.9997068244139709,1.712563379944942,3.0820991076958171,2.8860460167182462,1.6016489882974978,1.9818496087270598,1.9297053718999104,2.5304425657142136,1.7843405578815819,1.7620350387713677,1.7174419783345882,2.2444865435410599,1.6918662762071457,1.9678689059768779,2.1586328168365458,1.6498202811193581,3.5042827121307862,2.3827834579261373,1.6519936930717842,1.737375668662398,2.2005508794151996,1.6491288596970415,1.6565311378671823,1.6394231390283895,3.4178975957186841,2.1274740015305538,2.2443121759694136,1.6371093210549599,1.7916389189645356,1.6393012942070937,2.1084561162441355,1.7687696056098894,1.848498075452625,1.9296569956204599,2.2592558723899052,1.9847760434688904,1.7462242355595861,1.5964085560904067,1.6004946872995431,1.7536436885442372,1.9337676704166125,1.7709606084876832,2.5832310056195094,2.0561338389730266,1.6555269040680973,2.0887171218772704,1.7974855350833183,1.9877722567294469,2.1418463491983259,2.1341147198809987,1.5863718059248422,2.1804380331964919,2.7963448920452549,1.60392616663911,2.1674738209427855,1.8003848234074593,1.9020094117545121,1.9984777175815793,1.6506627236620202,1.7209014357522561,1.8481635859222953,1.9561189278633551,1.86495782990477,2.6227009642843626,3.4731088050569219,3.0022605165852658,2.3777805046571414,2.0395248076453609,2.9359078451623688,1.6618111625090715,2.0362417427728126,2.0257465570084294,1.7771494836631518,1.9997648948263091,2.7182247639245132,2.0301772594802503,1.8332054907123694,1.7273764789611974,1.6747966455811665,1.8391286209696744,1.7722355422711722,2.2052880032044491,2.0724648012931723,2.1859761589442037,1.901761454210853,1.9152911179148318,2.1548425659263306,1.9528208454531468,3.5131335733217179,2.7963200587045955,2.9361856089725129,1.8104192947065811,1.8801043965049251,1.6561454685832095,2.9509732308054963,2.6989315462633532,1.6188951905642102,2.2431124752042981,1.5913921343478821,1.5813882427388308,1.714653746504869,1.5717838053691047,1.9228192780743998,1.9978348131621952,1.876442243328899,1.8042326293023296,2.5427892386300814,2.0009212048894032,1.8850532481788078,2.7233528154390161,1.7972054354371543,1.6250120475761931,1.8869804020970555,1.6183094605950565,2.0832360981924896,1.9721997600113403,1.5773398866782455,1.6058860752980499,2.2413960295102471,1.610935000842727,1.631080148978322,2.2617371080326234,1.8324037337370966,2.0106431637655708,1.6880692628821259,2.0768176591437655,1.754258163836748,2.5281592187312087,2.0140760914942355,1.6308558759730623,1.6437978929890129,1.9333797900766945,1.7001113338135958,2.2996048711897665,1.6577326345506693,2.5364684818567431,1.6561718068764579,3.4936103096315945,1.7279387585869048,1.5793970121413494,2.4608620487392994,1.8436703213249064,1.8266018090914966,3.1428445864267136,1.7774706060800953,1.7205143527159712,1.6484243464216284,1.8952580561874555,3.0069485704597514,1.9279583381788614,1.779871533651731,1.7669521911506745,2.3480262027623873,2.0385061832858669,1.9596024332598962,1.8653344107701511,1.7591427987293258,1.6755223940131638,2.4496855243415929,1.8023824039992924,2.2079147184096697,1.9486618080628808,1.8218300992001923,1.8758923703429693,2.2706768916942557,2.1650314344647668,2.5310385032280114,2.3026074270702379,1.79522757144408,1.5814147853937091,1.732470691724928,1.6143028149441929,1.9396242276963021,2.191345913194914,2.5461734663717634,1.5792475049403789,2.068124890908948,2.1232918334733299,1.7596950737522528,1.6697152701631781,2.1182003558509765,1.8427541673607029,2.8586831060835522,1.7000284708578663,1.8871137965254141,2.1779681052022442,1.8846496446202445,2.063500658692651,1.718597326061255,3.2789395306784055,1.5996458114452832,1.7739182729544465,1.6497570156481927,2.3461355873414149,1.6089486630160765,1.8447030235793906,1.8207016587890963,2.2123965063200548,1.5744435237756915,1.9039865058851919,2.6066197536087063,2.7139827233416147,1.9908638466076634,2.617606776612166,1.5713484514561107,2.1751042384928723,1.5828134315478333,1.6785302215521984,1.6628574221268198,2.1066087248645311,1.8142019140636374,1.7116207804672641,1.6241201201178643,2.3479826629262899,1.5741745940058609,1.5784411322179424,2.1056449687820877,1.6305236997668244,1.7447160152356629,1.868126634530042,2.1991759830018891,2.0823507447998972,1.8006021870507785,1.7461547877475607,1.8005278757552059,1.5857041557513585,1.5904718106918678,1.68713483511693,1.5906440391221295,1.5942086322961082,1.608131215092206,1.9072809429730799,1.9369106869050643,2.0771528297884303,1.6796652583085805,1.6307591498321088,2.3394570520902724,1.6986181620915599,2.3848513787296128,1.9525529259239924,2.9482877845608186,1.7034654358724548,1.8407603392685288,1.8652309560976861,1.6688697031022124,1.6363117225245654,1.6719025524137889,2.3037319556449378,1.8816506319029511,1.8843900628271122,2.1646364139509355,2.008210951674708,1.7406182205107539,1.6901429889011335,1.8189693152579598,2.3019420417929677,1.9868311334615587,2.2820433969905873,2.6182279939278903,1.667516889806518,1.6399792622401421,2.1879924258383161,2.0880543543255725,1.5801418478727782,1.92037420721209,1.7358274605121975,1.7981600532811139,1.6929026507427321,2.4750910589818433,1.7036754382014758,1.7700493781496813,1.9359420875663622,1.6483003364836979,1.7447355028448595,1.9798596662567314,1.6670117725449998,1.969233383665939,2.0252536495794784,1.7286020714529584,1.595953838367973,2.2458508975938942,1.7553084097448215,3.6707217216064456,1.7564089153357334,3.1752381956118279,3.1267610872008094,1.624016545951833,2.1492794269454865,1.6750301558077678,2.128729469180783,1.5801068828367362,3.1909744858467968,1.9510379740740342,2.4641314148476861,1.6167553955234659,1.7386422967352029,1.7798741389818213,1.7743718587829669,2.4744769164149072,1.7533377298682418,1.8920014271843884,1.584771055711542,1.7542009824438634,1.9238717010281543,1.6627948612235863,1.8113154735020007,1.8037429448225066,2.1466885547910857,2.8769895739841815,1.5980262982500877,1.62265801790705,2.1358231437641417,1.8263374312728284,1.7042531931304006,2.3838970894897558,1.6825167917092887,1.5880855109110501,1.8587278084409822,2.0534211820570003,1.9609915581089639,3.1429856521468089,1.6042802057246472,1.702620769418334,2.1449227808041087,1.627078027863331,2.1607583922171494,2.0447365713364793,1.7043996392538003,2.5797892700725606,1.6546235180430593,1.9547443412468744,2.6380713166577627,2.537542057960386,1.6470110784854042,1.6553630058236817,2.0705898399878699,2.1509627522583661,1.6978426024928559,1.7398061621002043,2.0462535846984888,1.7876679544918579,3.3757392159248059,1.6372235104698254,2.3218844584495613,2.2824980695052814,1.9487912281497766,1.9702717900123787,1.6039078051313298,2.1240751561557571,2.1969389660558423,2.2505800071241859,2.5042570363021981,1.5979565969917664,1.7537165376783819,2.8311073578239765,1.6058378762621976,1.8478565873487311,2.6558211767803059,2.1522273654461794,1.9845890482812161,2.130434081960153,2.3410094013319376,2.312450509139178,1.7270831824146318,1.637590498680533,1.7113424694426882,1.8159773914637263,1.8234090413528063,1.9626583467362642,1.6905742365426493,2.7008494348392516,3.4605319247492354,2.3226931317013695,2.007276300934421,2.5185388062276624,2.9242934400340688,1.9251525536997105,2.5327657927904399,1.9253822297118435,1.7415954745019881,2.3780011598779787,1.6284638074409594,1.5846207975825828,1.5889738853301183,2.4794718287425033,1.8859288340023581,1.7800616165964422,1.6279983755652983,1.5852345848151093,1.8232060605475737,2.1367192566116939,1.9716342758168965,1.6368058069061902,2.3337184917671361,1.6317257686946243,2.606580669417526,1.9494591419111331,1.7734927872992559,1.6868006744504669,2.0768634520015246,1.7263272206013072,2.6192043437482195,1.7759781026900421,1.6228530159112049,1.7791244790071166,2.6230223873401681,1.765459591294942,1.6543507733079243,1.9535896437669249,1.7273059505196031,1.6425017768896588,1.9653656517746201,1.6527375951547156,2.0932645158233516,1.6096599579645874,2.612017903240806,1.7257480781798464,1.6848290334039249,2.1784000151863654,1.7254631427822997,1.6760094217089818,1.7574037366764841,2.1270485763911298,1.670055145929944,2.0550751300049606,1.7893877362607349,2.294785380880171,1.843553924710736,2.3044647108076397,1.8340213999352366,1.7083368289244765,1.9134021363819382,1.7175781091972249,2.3122792627828042,1.8694557217263181,1.670343313568599,1.7270133533269569,2.0557319162284271,2.3142773634963349,2.2644079965977437,2.262214396395176,2.2942836987034902,1.9002848783697115,1.6247986875144131,1.6913921203702185,1.6359393366873285,2.0384029581372416,1.7935428989813793,1.6757667645169885,1.7246402138050727,1.8153069160261466,1.8030080900065317,1.7643811055882241,2.3504334571338266,1.8832870388505427,1.7744692082102527,3.4000789018316708,1.698928318223796,2.1523581842890702,1.8123008399805629,3.1665554200253445,1.7104870705980173,1.676356651587126,1.9469528475368321,1.8743110293260936,3.1477685029569482,1.5913870895554663,1.682818543127101,2.1552752606450047,1.6095979041547201,1.9452265833020397,1.8768916716585224,2.3847183785475807,2.000869320046986,3.3162805947172425,1.6928107745991952,2.6846777791310266,1.6121067259412025,1.7812968187867899,2.8108509381425111,1.5709291034715154,1.7025357299610813,1.8853511834466745,1.94918901301035,1.662485143765579,1.6210010729450188,1.6683444734400465,3.4515722617646123,1.7273177931897712,1.7436115542912312,1.6102337592157594,2.0651662832145106,2.1390704107374239,2.0403668661863632,2.1407331674425558,1.9983255151855761,1.8875580937980003,1.8776942113255102,1.7347930857045981,1.7048555129031391,2.3155404418958696,1.571040600449062,1.8961274998290967,1.7067930290090809,2.8891593389169685,1.9655204479555439,2.5080910615977898,1.944783437509725,1.7462208740564369,1.8621411416466276,1.8904044065934571,2.0023239292405779,1.7400676730393398,3.4218315227745149,1.9678898196624612,1.8977715594417508,2.232183270572301,1.7303329985653542,2.1362575378790938,2.0081476554187372,1.6233388025815476,2.1504408750425612,2.2906708582040607,1.6155187080828175,1.5807134986737184,1.6391397395055081,1.7847199096857989,2.2735393101313965,2.1124968430285072,1.9364171717910852,2.201001551334119,1.5848009775049632,1.7530945482954583,1.5929975044955791]}
},{}],72:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var HALF_PI = require( '@stdlib/constants/float64/half-pi' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var ellipk = require( './../lib' );


// FIXTURES //

var mediumPositive = require( './fixtures/cpp/medium_positive.json' );
var closeToUnity = require( './fixtures/cpp/close_to_unity.json' );
var mediumNegative = require( './fixtures/cpp/medium_negative.json' );
var largeNegative = require( './fixtures/cpp/large_negative.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof ellipk, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the complete elliptic integral of the first kind (medium positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = ellipk( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 25.0 * EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the complete elliptic integral of the first kind (values close to positive unity)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = closeToUnity.expected;
	x = closeToUnity.x;
	for ( i = 0; i < x.length; i++ ) {
		y = ellipk( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 8000.0 * EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the complete elliptic integral of the first kind (medium negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumNegative.expected;
	x = mediumNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = ellipk( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 1.5 * EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the complete elliptic integral of the first kind (large negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largeNegative.expected;
	x = largeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = ellipk( x[i] );
		if ( y === expected[i] ) {
			t.equal( y, expected[i], 'x: '+x[i]+', y: '+y+', expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = 1e9 * EPS * abs( expected[i] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. Δ: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided values larger than `1.0`', function test( t ) {
	var v = ellipk( 1.01 );
	t.equal( isnan( v ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `1.0`', function test( t ) {
	var v = ellipk( 1.0 );
	t.equal( v, PINF, 'return expected value' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = ellipk( PINF );
	t.equal( isnan( v ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = ellipk( NINF );
	t.equal( isnan( v ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `π/2` if provided `0`', function test( t ) {
	var v = ellipk( 0 );
	t.equal( v, HALF_PI, 'returns expected value' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/ellipk/test/test.js")
},{"./../lib":54,"./fixtures/cpp/close_to_unity.json":68,"./fixtures/cpp/large_negative.json":69,"./fixtures/cpp/medium_negative.json":70,"./fixtures/cpp/medium_positive.json":71,"@stdlib/constants/float64/eps":42,"@stdlib/constants/float64/half-pi":44,"@stdlib/constants/float64/ninf":45,"@stdlib/constants/float64/pinf":46,"@stdlib/math/base/assert/is-nan":50,"@stdlib/math/base/special/abs":52,"tape":195}],73:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the natural logarithm.
*
* @module @stdlib/math/base/special/ln
*
* @example
* var ln = require( '@stdlib/math/base/special/ln' );
*
* var v = ln( 4.0 );
* // returns ~1.386
*
* v = ln( 0.0 );
* // returns -Infinity
*
* v = ln( Infinity );
* // returns Infinity
*
* v = ln( NaN );
* // returns NaN
*
* v = ln( -4.0 );
* // returns NaN
*/

// MODULES //

var ln = require( './ln.js' );


// EXPORTS //

module.exports = ln;

},{"./ln.js":74}],74:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var polyvalP = require( './polyval_p.js' );
var polyvalQ = require( './polyval_q.js' );


// VARIABLES //

var LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
var LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
var ONE_THIRD = 0.33333333333333333;

// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


// MAIN //

/**
* Evaluates the natural logarithm.
*
* @param {NonNegativeNumber} x - input value
* @returns {number} function value
*
* @example
* var v = ln( 4.0 );
* // returns ~1.386
*
* @example
* var v = ln( 0.0 );
* // returns -Infinity
*
* @example
* var v = ln( Infinity );
* // returns Infinity
*
* @example
* var v = ln( NaN );
* // returns NaN
*
* @example
* var v = ln( -4.0 );
* // returns NaN
*/
function ln( x ) {
	var hfsq;
	var hx;
	var t2;
	var t1;
	var k;
	var R;
	var f;
	var i;
	var j;
	var s;
	var w;
	var z;

	if ( x === 0.0 ) {
		return NINF;
	}
	if ( isnan( x ) || x < 0.0 ) {
		return NaN;
	}
	hx = getHighWord( x );
	k = 0|0; // asm type annotation
	if ( hx < HIGH_MIN_NORMAL_EXP ) {
		// Case: 0 < x < 2**-1022
		k -= 54|0; // asm type annotation

		// Subnormal number, scale up `x`:
		x *= TWO54;
		hx = getHighWord( x );
	}
	if ( hx >= HIGH_MAX_NORMAL_EXP ) {
		return x + x;
	}
	k += ( ( hx>>20 ) - BIAS )|0; // asm type annotation
	hx &= HIGH_SIGNIFICAND_MASK;
	i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

	// Normalize `x` or `x/2`...
	x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
	k += ( i>>20 )|0; // asm type annotation
	f = x - 1.0;
	if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
		// Case: -2**-20 <= f < 2**-20
		if ( f === 0.0 ) {
			if ( k === 0 ) {
				return 0.0;
			}
			return (k * LN2_HI) + (k * LN2_LO);
		}
		R = f * f * ( 0.5 - (ONE_THIRD*f) );
		if ( k === 0 ) {
			return f - R;
		}
		return (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );
	}
	s = f / (2.0 + f);
	z = s * s;
	i = ( hx - 0x6147a )|0; // asm type annotation
	w = z * z;
	j = ( 0x6b851 - hx )|0; // asm type annotation
	t1 = w * polyvalP( w );
	t2 = z * polyvalQ( w );
	i |= j;
	R = t2 + t1;
	if ( i > 0 ) {
		hfsq = 0.5 * f * f;
		if ( k === 0 ) {
			return f - ( hfsq - (s * (hfsq+R)) );
		}
		return (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );
	}
	if ( k === 0 ) {
		return f - (s*(f-R));
	}
	return (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );
}


// EXPORTS //

module.exports = ln;

},{"./polyval_p.js":75,"./polyval_q.js":76,"@stdlib/constants/float64/exponent-bias":43,"@stdlib/constants/float64/ninf":45,"@stdlib/math/base/assert/is-nan":50,"@stdlib/number/float64/base/get-high-word":82,"@stdlib/number/float64/base/set-high-word":85}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.3999999999940942;
	}
	return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.6666666666666735;
	}
	return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the principal square root of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/sqrt
*
* @example
* var sqrt = require( '@stdlib/math/base/special/sqrt' );
*
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/

// MODULES //

var sqrt = require( './main.js' );


// EXPORTS //

module.exports = sqrt;

},{"./main.js":78}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Compute the principal square root of a double-precision floating-point number.
*
* @type {Function}
* @param {number} x - input value
* @returns {number} principal square root
*
* @example
* var v = sqrt( 4.0 );
* // returns 2.0
*
* v = sqrt( 9.0 );
* // returns 3.0
*
* v = sqrt( 0.0 );
* // returns 0.0
*
* v = sqrt( -4.0 );
* // returns NaN
*
* v = sqrt( NaN );
* // returns NaN
*/
var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = sqrt;

},{}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var Number = require( './number.js' );


// EXPORTS //

module.exports = Number;

},{"./number.js":80}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":34}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './main.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./main.js":83}],83:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":81,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],84:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":34,"dup":81}],85:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
* var PINF = require( '@stdlib/constants/float64/pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

var setHighWord = require( './main.js' );


// EXPORTS //

module.exports = setHighWord;

},{"./main.js":86}],86:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setHighWord;

},{"./high.js":84,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],87:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":88,"./polyfill.js":89,"@stdlib/assert/has-tostringtag-support":20}],88:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":90}],89:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":90,"./tostringtag.js":91,"@stdlib/assert/has-own-property":16}],90:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],91:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],92:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],93:[function(require,module,exports){

},{}],94:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"dup":93}],95:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],96:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":187}],97:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":95,"inherits":182,"readable-stream/lib/_stream_duplex.js":99,"readable-stream/lib/_stream_passthrough.js":100,"readable-stream/lib/_stream_readable.js":101,"readable-stream/lib/_stream_transform.js":102,"readable-stream/lib/_stream_writable.js":103,"readable-stream/lib/internal/streams/end-of-stream.js":107,"readable-stream/lib/internal/streams/pipeline.js":109}],98:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],99:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":101,"./_stream_writable":103,"_process":187,"inherits":182}],100:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":102,"inherits":182}],101:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":98,"./_stream_duplex":99,"./internal/streams/async_iterator":104,"./internal/streams/buffer_list":105,"./internal/streams/destroy":106,"./internal/streams/from":108,"./internal/streams/state":110,"./internal/streams/stream":111,"_process":187,"buffer":112,"events":95,"inherits":182,"string_decoder/":194,"util":93}],102:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":98,"./_stream_duplex":99,"inherits":182}],103:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":98,"./_stream_duplex":99,"./internal/streams/destroy":106,"./internal/streams/state":110,"./internal/streams/stream":111,"_process":187,"buffer":112,"inherits":182,"util-deprecate":203}],104:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":107,"_process":187}],105:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":112,"util":93}],106:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":187}],107:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":98}],108:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],109:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":98,"./end-of-stream":107}],110:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":98}],111:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":95}],112:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":92,"buffer":112,"ieee754":181}],113:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":114,"get-intrinsic":177}],114:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":176,"get-intrinsic":177}],115:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":116,"./lib/keys.js":117}],116:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],117:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],118:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"object-keys":185}],119:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],120:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":150,"./ToPrimitive":152,"./Type":157}],121:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = GetIntrinsic('%TypeError%');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (Type(LeftFirst) !== 'Boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = Type(px) === 'String' && Type(py) === 'String';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":166,"../helpers/isNaN":167,"../helpers/isPrefixOf":168,"./ToNumber":150,"./ToPrimitive":152,"./Type":157,"get-intrinsic":177}],122:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

},{"get-intrinsic":177}],123:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":126,"./InLeapYear":130,"./MonthFromTime":140,"get-intrinsic":177}],124:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":172,"./floor":161}],125:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":161}],126:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":124,"./DayFromYear":125,"./YearFromTime":159}],127:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":162}],128:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else {
		throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
	}
};

},{"../helpers/assertRecord":165,"./IsAccessorDescriptor":131,"./IsDataDescriptor":133,"./Type":157,"get-intrinsic":177}],129:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":172,"./floor":161,"./modulo":162}],130:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":127,"./YearFromTime":159,"get-intrinsic":177}],131:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":165,"./Type":157,"has":180}],132:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":183}],133:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":165,"./Type":157,"has":180}],134:[function(require,module,exports){
'use strict';

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"../helpers/assertRecord":165,"./IsAccessorDescriptor":131,"./IsDataDescriptor":133,"./Type":157}],135:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor({
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor,
		Type: Type
	}, Desc);
};

},{"../helpers/isPropertyDescriptor":169,"./IsAccessorDescriptor":131,"./IsDataDescriptor":133,"./Type":157}],136:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":166,"../helpers/timeConstants":172}],137:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":166,"./DateFromTime":123,"./Day":124,"./MonthFromTime":140,"./ToInteger":149,"./YearFromTime":159,"./floor":161,"./modulo":162,"get-intrinsic":177}],138:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":166,"../helpers/timeConstants":172,"./ToInteger":149}],139:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":172,"./floor":161,"./modulo":162}],140:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":126,"./InLeapYear":130}],141:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":167}],142:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":172,"./floor":161,"./modulo":162}],143:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":157}],144:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":166,"./ToNumber":150,"./abs":160,"get-intrinsic":177}],145:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":172,"./DayFromYear":125}],146:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":172,"./modulo":162}],147:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],148:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":150}],149:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":166,"../helpers/isNaN":167,"../helpers/sign":171,"./ToNumber":150,"./abs":160,"./floor":161}],150:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":152}],151:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Object = GetIntrinsic('%Object%');

var CheckObjectCoercible = require('./CheckObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = function ToObject(value) {
	CheckObjectCoercible(value);
	return $Object(value);
};

},{"./CheckObjectCoercible":122,"get-intrinsic":177}],152:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":173}],153:[function(require,module,exports){
'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (has(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (has(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (has(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (has(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (has(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (has(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":132,"./ToBoolean":147,"./Type":157,"get-intrinsic":177,"has":180}],154:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":177}],155:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":166,"../helpers/isNaN":167,"../helpers/sign":171,"./ToNumber":150,"./abs":160,"./floor":161,"./modulo":162}],156:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":150}],157:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],158:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":124,"./modulo":162}],159:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":113,"get-intrinsic":177}],160:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":177}],161:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],162:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":170}],163:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":172,"./modulo":162}],164:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":120,"./5/AbstractRelationalComparison":121,"./5/CheckObjectCoercible":122,"./5/DateFromTime":123,"./5/Day":124,"./5/DayFromYear":125,"./5/DayWithinYear":126,"./5/DaysInYear":127,"./5/FromPropertyDescriptor":128,"./5/HourFromTime":129,"./5/InLeapYear":130,"./5/IsAccessorDescriptor":131,"./5/IsCallable":132,"./5/IsDataDescriptor":133,"./5/IsGenericDescriptor":134,"./5/IsPropertyDescriptor":135,"./5/MakeDate":136,"./5/MakeDay":137,"./5/MakeTime":138,"./5/MinFromTime":139,"./5/MonthFromTime":140,"./5/SameValue":141,"./5/SecFromTime":142,"./5/StrictEqualityComparison":143,"./5/TimeClip":144,"./5/TimeFromYear":145,"./5/TimeWithinDay":146,"./5/ToBoolean":147,"./5/ToInt32":148,"./5/ToInteger":149,"./5/ToNumber":150,"./5/ToObject":151,"./5/ToPrimitive":152,"./5/ToPropertyDescriptor":153,"./5/ToString":154,"./5/ToUint16":155,"./5/ToUint32":156,"./5/Type":157,"./5/WeekDay":158,"./5/YearFromTime":159,"./5/abs":160,"./5/floor":161,"./5/modulo":162,"./5/msFromTime":163}],165:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
	'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
		if (Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	}
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
	var predicate = predicates[recordType];
	if (typeof predicate !== 'function') {
		throw new $SyntaxError('unknown record type: ' + recordType);
	}
	if (!predicate(Type, value)) {
		throw new $TypeError(argumentName + ' must be a ' + recordType);
	}
};

},{"get-intrinsic":177,"has":180}],166:[function(require,module,exports){
'use strict';

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],167:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],168:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":113}],169:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var has = require('has');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
	if (ES.Type(Desc) !== 'Object') {
		return false;
	}
	var allowed = {
		'[[Configurable]]': true,
		'[[Enumerable]]': true,
		'[[Get]]': true,
		'[[Set]]': true,
		'[[Value]]': true,
		'[[Writable]]': true
	};

	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
		if (has(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"get-intrinsic":177,"has":180}],170:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],171:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],172:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],173:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":174,"is-callable":183}],174:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],175:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],176:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":175}],177:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":176,"has":180,"has-symbols":178}],178:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":179}],179:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],180:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":176}],181:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],182:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],183:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};

},{}],184:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":186}],185:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":184,"./isArguments":186}],186:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],187:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],188:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":187,"through":201,"timers":202}],189:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":112}],190:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":164,"function-bind":176}],191:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":190,"./polyfill":192,"./shim":193,"define-properties":118,"function-bind":176}],192:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":190}],193:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":192,"define-properties":118}],194:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":189}],195:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":196,"./lib/results":198,"./lib/test":199,"_process":187,"defined":119,"through":201,"timers":202}],196:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":187,"fs":94,"through":201}],197:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":187,"timers":202}],198:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":187,"events":95,"function-bind":176,"has":180,"inherits":182,"object-inspect":200,"resumer":188,"through":201,"timers":202}],199:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":197,"deep-equal":115,"defined":119,"events":95,"has":180,"inherits":182,"path":96,"string.prototype.trim":191}],200:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],201:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":187,"stream":97}],202:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":187,"timers":202}],203:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[72]);
