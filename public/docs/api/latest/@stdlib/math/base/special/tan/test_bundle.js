// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a filled "generic" array.
*
* @module @stdlib/array/base/filled
*
* @example
* var filled = require( '@stdlib/array/base/filled' );
*
* var out = filled( 0.0, 3 );
* // returns [ 0.0, 0.0, 0.0 ]
*
* @example
* var filled = require( '@stdlib/array/base/filled' );
*
* var out = filled( 'beep', 3 );
* // returns [ 'beep', 'beep', 'beep' ]
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":2}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a filled "generic" array.
*
* @param {*} value - fill value
* @param {NonNegativeInteger} len - array length
* @returns {Array} filled array
*
* @example
* var out = filled( 0.0, 3 );
* // returns [ 0.0, 0.0, 0.0 ]
*
* @example
* var out = filled( 'beep', 3 );
* // returns [ 'beep', 'beep', 'beep' ]
*/
function filled( value, len ) {
	var arr;
	var i;

	// Manually push elements in order to ensure "fast" elements...
	arr = [];
	for ( i = 0; i < len; i++ ) {
		arr.push( value );
	}
	return arr;
}


// EXPORTS //

module.exports = filled;

},{}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a zero-filled "generic" array.
*
* @module @stdlib/array/base/zeros
*
* @example
* var zeros = require( '@stdlib/array/base/zeros' );
*
* var out = zeros( 3 );
* // returns [ 0.0, 0.0, 0.0 ]
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":4}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var filled = require( '@stdlib/array/base/filled' );


// MAIN //

/**
* Returns a zero-filled "generic" array.
*
* @param {NonNegativeInteger} len - array length
* @returns {Array} output array
*
* @example
* var out = zeros( 3 );
* // returns [ 0.0, 0.0, 0.0 ]
*/
function zeros( len ) {
	return filled( 0.0, len );
}


// EXPORTS //

module.exports = zeros;

},{"@stdlib/array/base/filled":1}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './float64array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float64array.js":5,"./polyfill.js":7,"@stdlib/assert/has-float64array-support":18}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './uint16array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":9,"./uint16array.js":10,"@stdlib/assert/has-uint16array-support":26}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":12,"./uint32array.js":13,"@stdlib/assert/has-uint32array-support":29}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './uint8array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":15,"./uint8array.js":16,"@stdlib/assert/has-uint8array-support":32}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":19}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":17,"@stdlib/assert/is-float64array":35}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './main.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './main.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './main.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./main.js":25}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":22}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":27}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":28,"@stdlib/assert/is-uint16array":40,"@stdlib/constants/uint16/max":56}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":30}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":31,"@stdlib/assert/is-uint32array":42,"@stdlib/constants/uint32/max":57}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":33}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":34,"@stdlib/assert/is-uint8array":44,"@stdlib/constants/uint8/max":58}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":36}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":121}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":8,"@stdlib/array/uint8":14}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":39}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":37}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":41}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":121}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":43}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":121}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":45}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":121}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/float64/eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/float64/exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/float64/exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":98}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The mathematical constant `π`.
*
* @module @stdlib/constants/float64/pi
* @type {number}
*
* @example
* var PI = require( '@stdlib/constants/float64/pi' );
* // returns 3.141592653589793
*/


// MAIN //

/**
* The mathematical constant `π`.
*
* @constant
* @type {number}
* @default 3.141592653589793
* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
*/
var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


// EXPORTS //

module.exports = PI;

},{}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/float64/smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],59:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './main.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./main.js":60}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/float64/ninf":52,"@stdlib/constants/float64/pinf":54}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './main.js' );


// EXPORTS //

module.exports = isnan;

},{"./main.js":62}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './main.js' );


// EXPORTS //

module.exports = abs;

},{"./main.js":64}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":66}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toWords = require( '@stdlib/number/float64/base/to-words' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ];


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = copysign;

},{"@stdlib/number/float64/base/from-words":102,"@stdlib/number/float64/base/get-high-word":106,"@stdlib/number/float64/base/to-words":117}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a double-precision floating-point number toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './main.js' );


// EXPORTS //

module.exports = floor;

},{"./main.js":68}],68:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a double-precision floating-point number toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = floor;

},{}],69:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the tangent of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-tan
*
* @example
* var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
*
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*/

// MODULES //

var kernelTan = require( './kernel_tan.js' );


// EXPORTS //

module.exports = kernelTan;

},{"./kernel_tan.js":70}],70:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
var polyvalOdd = require( './polyval_t_odd.js' );
var polyvalEven = require( './polyval_t_even.js' );


// VARIABLES //

var PIO4 = 7.85398163397448278999e-01;
var PIO4LO = 3.06161699786838301793e-17;
var T0 = 3.33333333333334091986e-01; // 3FD55555, 55555563

// Absolute value mask: 2147483647 => 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation


// MAIN //

/**
* Computes the tangent on \\( \approx\[-\pi/4, \pi/4] \\) (except on -0), \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \tan(-x) = -\tan(x) \\), we need only to consider positive \\( x \\).
*
* -   Callers must return \\( \tan(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\( -0 \\). Callers may do the optimization \\( \tan(x) \approx x \\) for tiny \\( x \\).
*
* -   \\( \tan(x) \\) is approximated by a odd polynomial of degree 27 on \\( \[0, 0.67434] \\)
*
*     ```tex
*     \tan(x) \approx x + T_1 x^3 + \ldots + T_{13} x^{27}
*     ```
*     where
*
*     ```tex
*     \left| \frac{\tan(x)}{x} - \left( 1 + T_1 x^2 + T_2 x^4 + \ldots + T_{13} x^{26} \right) \right|  \le 2^{-59.2}
*     ```
*
* -   Note: \\( \tan(x+y) = \tan(x) + \tan'(x) \cdot y \approx \tan(x) + ( 1 + x \cdot x ) \cdot y \\). Therefore, for better accuracy in computing \\( \tan(x+y) \\), let
*
*     ```tex
*     r = x^3 \cdot \left( T_2+x^2 \cdot (T_3+x^2 \cdot (\ldots+x^2 \cdot (T_{12}+x^2 \cdot T_{13}))) \right)
*     ```
*
*     then
*
*     ```tex
*     \tan(x+y) = x^3 + \left( T_1 \cdot x^2 + (x \cdot (r+y)+y) \right)
*     ```
*
* -   For \\( x \\) in \\( \[0.67434, \pi/4] \\),  let \\( y = \pi/4 - x \\), then
*
*     ```tex
*     \tan(x) = \tan\left(\tfrac{\pi}{4}-y\right) = \frac{1-\tan(y)}{1+\tan(y)} \\
*     = 1 - 2 \cdot \left( \tan(y) - \tfrac{\tan(y)^2}{1+\tan(y)} \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~π/4 in magnitude)
* @param {number} y - tail of `x`
* @param {integer} k - indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned
* @returns {number} tangent
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, 1 );
* // returns ~1.0
*
* @example
* var out = kernelTan( 3.141592653589793/4.0, 0.0, -1 );
* // returns ~-1.0
*
* @example
* var out = kernelTan( 3.141592653589793/6.0, 0.0, 1 );
* // returns ~0.577
*
* @example
* var out = kernelTan( 0.664, 5.288e-17, 1 );
* // returns ~0.783
*
* @example
* var out = kernelTan( NaN, 0.0, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( 3.0, NaN, 1 );
* // returns NaN
*
* @example
* var out = kernelTan( NaN, NaN, 1 );
* // returns NaN
*/
function kernelTan( x, y, k ) {
	var hx;
	var ix;
	var a;
	var r;
	var s;
	var t;
	var v;
	var w;
	var z;

	hx = getHighWord( x );

	// High word of |x|:
	ix = (hx & HIGH_WORD_ABS_MASK)|0; // asm type annotation

	// Case: |x| >= 0.6744
	if ( ix >= 0x3FE59428 ) {
		if ( x < 0 ) {
			x = -x;
			y = -y;
		}
		z = PIO4 - x;
		w = PIO4LO - y;
		x = z + w;
		y = 0.0;
	}
	z = x * x;
	w = z * z;

	// Break x^5*(T[1]+x^2*T[2]+...) into x^5(T[1]+x^4*T[3]+...+x^20*T[11]) + x^5(x^2*(T[2]+x^4*T[4]+...+x^22*T[12]))...
	r = polyvalOdd( w );
	v = z * polyvalEven( w );
	s = z * x;
	r = y + (z * ((s * (r + v)) + y));
	r += T0 * s;
	w = x + r;
	if ( ix >= 0x3FE59428 ) {
		v = k;
		return ( 1.0 - ( (hx >> 30) & 2 ) ) * ( v - (2.0 * (x - ((w * w / (w + v)) - r)) )); // eslint-disable-line max-len
	}
	if ( k === 1 ) {
		return w;
	}
	// Compute -1/(x+r) accurately...
	z = w;
	setLowWord( z, 0 );
	v = r - (z - x); // z + v = r + x
	a = -1.0 / w; // a = -1/w
	t = a;
	setLowWord( t, 0 );
	s = 1.0 + (t * z);
	return t + (a * (s + (t * v)));
}


// EXPORTS //

module.exports = kernelTan;

},{"./polyval_t_even.js":71,"./polyval_t_odd.js":72,"@stdlib/number/float64/base/get-high-word":106,"@stdlib/number/float64/base/set-low-word":114}],71:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.05396825397622605;
	}
	return 0.05396825397622605 + (x * (0.0088632398235993 + (x * (0.0014562094543252903 + (x * (0.0002464631348184699 + (x * (0.00007140724913826082 + (x * 0.00002590730518636337))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],72:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.13333333333320124;
	}
	return 0.13333333333320124 + (x * (0.021869488294859542 + (x * (0.0035920791075913124 + (x * (0.0005880412408202641 + (x * (0.00007817944429395571 + (x * -0.000018558637485527546))))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],73:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":74}],74:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/number/float64/base/normalize' );
var floatExp = require( '@stdlib/number/float64/base/exponent' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		exp === 0 ||
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	normalize( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	toWords( WORDS, frac );
	high = WORDS[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/constants/float64/exponent-bias":47,"@stdlib/constants/float64/max-base2-exponent":50,"@stdlib/constants/float64/max-base2-exponent-subnormal":49,"@stdlib/constants/float64/min-base2-exponent-subnormal":51,"@stdlib/constants/float64/ninf":52,"@stdlib/constants/float64/pinf":54,"@stdlib/math/base/assert/is-infinite":59,"@stdlib/math/base/assert/is-nan":61,"@stdlib/math/base/special/copysign":65,"@stdlib/number/float64/base/exponent":100,"@stdlib/number/float64/base/from-words":102,"@stdlib/number/float64/base/normalize":111,"@stdlib/number/float64/base/to-words":117}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":77}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var zeros = require( '@stdlib/array/base/zeros' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zeros( 20 );
var Q = zeros( 20 );
var FQ = zeros( 20 );
var IQ = zeros( 20 );


// FUNCTIONS //

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/array/base/zeros":3,"@stdlib/math/base/special/floor":67,"@stdlib/math/base/special/ldexp":73}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = [ 0.0, 0.0, 0.0 ]; // WARNING: not thread safe
var TY = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = (hx & ABS_MASK)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":76,"./rempio2_medium.js":78,"@stdlib/number/float64/base/from-words":102,"@stdlib/number/float64/base/get-high-word":106,"@stdlib/number/float64/base/get-low-word":108}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":79,"@stdlib/number/float64/base/get-high-word":106}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":80}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = round;

},{}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Evaluate the tangent of a number.
*
* @module @stdlib/math/base/special/tan
*
* @example
* var tan = require( '@stdlib/math/base/special/tan' );
*
* var v = tan( 0.0 );
* // returns ~0.0
*
* v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* v = tan( NaN );
* // returns NaN
*/

// MODULES //

var tan = require( './tan.js' );


// EXPORTS //

module.exports = tan;

},{"./tan.js":82}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelTan = require( '@stdlib/math/base/special/kernel-tan' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Scratch buffer:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word for pi/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word for a small value: 2^-27 = 7.450580596923828e-9 => high word => 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation


// MAIN //

/**
* Evaluates the tangent of a number.
*
* ## Method
*
* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
*
* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
*
* -   We have
*
*     | n | sin(x) | cos(x) | tan(x) |
*     | - | ------ | ------ | ------ |
*     | 0 |    S   |    C   |   T    |
*     | 1 |    C   |   -S   |  -1/T  |
*     | 2 |   -S   |   -C   |   T    |
*     | 3 |   -C   |    S   |  -1/T  |
*
*
* @param {number} x - input value (in radians)
* @returns {number} tangent
*
* @example
* var v = tan( 0.0 );
* // returns ~0.0
*
* @example
* var v = tan( -3.141592653589793/4.0 );
* // returns ~-1.0
*
* @example
* var v = tan( 3.141592653589793/4.0 );
* // returns ~1.0
*
* @example
* var v = tan( NaN );
* // returns NaN
*/
function tan( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< π/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: |x| < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return x;
		}
		return kernelTan( x, 0.0, 1 );
	}
	// Case: tan(Inf or NaN) is NaN
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction needed...
	n = rempio2( x, buffer );
	return kernelTan( buffer[ 0 ], buffer[ 1 ], 1-((n&1)<<1) );
}


// EXPORTS //

module.exports = tan;

},{"@stdlib/math/base/special/kernel-tan":69,"@stdlib/math/base/special/rempio2":75,"@stdlib/number/float64/base/get-high-word":106}],83:[function(require,module,exports){
module.exports={"expected":[11.111731272046756,0.7835390657124364,4.059088264572109,-2.2209259297915893,-0.5245588593954359,0.18354212472923637,1.1295202343501969,16.638659144114083,-1.4473823315080774,-0.2928037795477555,0.37988159091646834,1.7209304486712318,-8.190390687634755,-0.9656849031989609,-0.1206377528267856,0.628766047247089,2.643824443784751,-3.0201026425648974,-0.6405221163715126,0.07836159154720754,0.8878953854300224,7.656455376144585,-1.7546176967145395,-0.4285803577755863,0.24788380388807266,1.421755328743687,-28.632963992252456,-1.2295645348779094,-0.24483875854606535,0.5139187599649204,2.0797574117251374,-4.940899963358165,-0.8827743997175711,-0.008380798436462554,0.7437742187844072,3.4335239196587555,-2.1722502696803874,-0.5352929243993371,0.15769149386717574,1.038513523938498,8.39054903447454,-1.4736386908473793,-0.26575083137589484,0.33270810714970606,1.6882011118364024,-21.647451251483808,-1.0500317213977362,-0.09524948148711955,0.5282251299586356,2.5783149924732043,-2.783966582200432,-0.7523673407340075,0.06993486459801943,0.9985184774254082,4.804591634988728,-1.7893104797649853,-0.5209036143721841,0.23900647805083558,1.3967318490094345,24.726513620638137,-1.2508348519042416,-0.18356652961064673,0.42207381160724383,2.0358909772337728,-7.9994287773225015,-0.8977974215764752,-0.016762774253016057,0.6327790682437241,3.329339150200836,-2.2210660003510636,-0.6364809323704685,0.14911362974667994,1.168293797927329,7.8314636276767935,-1.500551706258702,-0.42518640843692984,0.32342548217026,1.6563849946307325,-26.45545877991036,-1.067809353419557,-0.24179799083611325,0.7011421206669605,2.515576760483194,-4.868965834304658,-0.571890579603576,0.06151800984057069,0.7482427044445754,12.522934089712953,-1.825059599049754,-0.5316051821170963,0.09258720694585748,1.3722874270815353,20.475116815723066,-1.6984067962827785,-0.1922430813559473,0.4122348085761154,1.4653012285477771,-3.9182143422134987,-0.9130482315942141,-0.16039724436838748,0.8248215637535306,3.2308105934515066,-3.467582949480871,-0.47236050352313563,0.14055717823093847,0.878089762589007,674.4809068157485,-1.5281502492929253,-0.43511770599749017,0.17219814439997258,1.6254401148390147,-34.00288722549917,-1.4297588059203972,-0.11219138561739024,0.506973350737618,1.7439036561990218,-2.937829033802001,-0.778954100178111,-0.0810173471341122,0.9655936546853048,4.430966424233656,-2.665057703878139,-0.3799356248960614,0.22135685710965983,1.0271263921126959,-13.008969579421253,-1.2947451461325188,-0.3449930533048303,0.2539869651047357,1.9524950512480825,-9.257562327253654,-1.215243544756884,-0.03353497151782194,0.6095507087520518,2.110703585545397,-2.32436784366597,-0.6602884470007864,-0.0026390014946460322,1.129412778654915,6.907857634012678,-2.1398200280140847,-0.2928550473766409,0.30500909854409686,1.2022541223567196,-6.40318173145294,-1.1043391885998257,-0.2596130299553139,0.33909755521128015,2.3977073537942855,-5.319927093817243,-1.0380318244392306,0.044709130972319815,0.7224189018664943,2.6228854220908215,-1.8999475877604994,-0.5532984975808241,0.07570693413436654,1.3250442047080908,15.230831644742143,-1.765431420222235,-0.5136257633980246,0.10685007453513891,2.758231698192359,-4.2115952956067275,-0.944263162599662,-0.17763763342344646,0.428854771869883,1.5106875509973747,-1.6996748285921448,-0.4930271021085048,0.12350341409520797,0.8488328307627733,3.400076570185931,-3.292228861249497,-0.16073190108143223,0.44845228112240715,1.5660084863426738,-79.1122863678104,-1.4820412540130212,-0.4184232501602414,0.18677552671541164,3.6187472400533722,-3.107630702016211,-0.8062443550588327,-0.09791309476231164,0.5248544881791408,1.8024193277651783,-1.4307524301610353,-0.3992410757756912,0.2038377317368454,0.9932621390582146,4.741829439281802,-2.554775355150377,-0.0813457430151066,0.5460011358106536,1.8743850892268803,-10.977902688787994,-1.2576252177043918,-0.32926559559220003,0.26907531193725276,5.160466374329295,-2.4360459180059397,-0.684628875885902,-0.01940263406171942,0.6290895470276323,2.1901135342140328,-1.216051916316585,-0.3111452532951786,0.28678007550417817,1.1620719785239024,7.670300649429496,-2.063340672025359,-0.0029652498330689945,0.6522704567172379,2.288946713423672,-5.859193637634436,-1.073473349654777,-0.24459306845410833,0.3549204616444976,8.795622557796081,-1.9797626189716093,-0.5753979832968609,0.05886945111895385,0.7441343251797524,2.7384500685730195,-1.0387098329532907,-0.22724305847979512,0.37353597025754015,1.3647061850289501,19.422979199996675,-1.708704378380641,0.0753788265621369,0.7699884291995284,2.884729226478087,-3.9618192420683416,-0.9178989433139091,-0.16310528646611389,0.44567728888985314,28.55565416272782,-1.6460389129522814,-0.475592359464975,0.13786703763282954,0.8734267864994322,3.5864187752058627,-0.8880642880516059,-0.14627669906827817,0.46552385139777336,1.615869777090296,-37.357776635386344,-1.4378229082537775,0.154653928680454,0.9028241924162099,3.828539793461092,-2.9634434201350643,-0.7832031017712701,-0.08367423859098776,0.5430026966642147,-23.135485667876477,-1.3885708090865443,-0.38295860009225624,0.21859016374958812,1.0217179341605298,5.09731770574372,-0.7570214730210251,-0.06714545443195608,0.5644771106581579,1.9398606512912457,-9.492100178181754,-1.221800897811781,0.23587406098758,1.0558862979961872,5.581371186334217,-2.341368825449592,-0.6640846174012658,-0.005278039747296753,0.6489786920834841,-8.196825220151895,-1.1816348036258588,-0.29572259657415345,0.3021269092187347,1.1958210790243662,8.618001480557707,-0.6406553069669613,0.011157430901516581,0.6725895753370029,2.3800087202904163,-5.39835519945162,-1.04352943659554,0.3201531934646905,1.236562196694801,10.059335230326791,-1.9121741626701947,-0.556750441329079,0.07305333726143054,0.7663110336952415,-4.943300981345833,-1.0097734570921433,-0.21243811429127182,0.3897150615340052,1.4059270979817775,26.784438302692678,-0.535414428295947,0.08959735867763355,0.792732271543245,3.0219719157016494,-3.7385136934758068,-0.8922095277068494,0.40876988693676586,1.4560096398007327,47.87929085854571,-1.5948401162026342,-0.458390267633687,0.1522867055944361,3.1972155056877525,-3.5066039772245396,-0.8631157154392186,-0.1318810995644443,0.4828213869356099,1.6680600026358006,-24.44581271183342,-1.3953646680180272,-0.3856128868739597,0.21616812726944476,-3.2999701898263853,-0.8348358378028473,-0.11519495798926283,0.5032515615017249,1.7319821361776944,-17.427122050618717,-1.3480118135035783,-0.3668513070957874,0.23343396469727662,1.0510069800184403,5.507959831138741,-2.3564417334372867,-0.667422441331798,1.7996503329766635,-13.534007051798056,-1.3027118229895196,-0.3483146257236705,0.2508328043562499,1.086207447697026,6.074311217438311,-2.2527527784958044,-0.6439221459256789,0.00884444895790994,0.6692358025466558,2.364679884060734,-0.3299889830716742,0.2683757017382078,1.122687657899808,6.766294823820935,-2.1564682868895035,-0.6209140850469874,0.02528456318648969,0.6932984219675254,2.477405430608309,-5.002809038401182,-1.0144553264798348,-0.2148564306345089,0.38705345075148395,-2.066775689693489,-0.5983709026753652,0.04173834773025922,0.7179157669582259,2.5997009705067575,-4.607505003610081,-0.9816508102232767,-0.19772174275656493,0.406073238045903,1.4488181478653717,43.103948259598106,-1.6030657336479808,-0.46119195113733974,2.7329143624319485,-4.267859418630156,-0.9498880764253959,-0.18069806414811293,0.42534862255212563,1.500998479397316,147.91336450569852,-1.5458969337150752,-0.4414094728565003,0.16676853396026053,0.9244914630309169,4.02221458679267,-0.16377520785609043,0.44489542134718923,1.5558186271710146,-103.3629208622196,-1.491561353049242,-0.4219119786200652,0.18370853246529295,0.9554462388943494,4.32455090428694,-2.7084333264839744,-0.7386079914217301,-0.055291600314628944,0.5801547086425167,-1.4398261979349336,-0.4026830417397909,0.200751141931208,0.9873887623380023,4.673156298837627,-2.577264796081172,-0.7135094871012265,-0.03881988234208033,0.6023348176314567,2.08222873185202,-7.462601262844481,-1.1537244355084681,1.0203851900693808,5.079770116155781,-2.4567575183111923,-0.6889928471076104,-0.02236917087500214,0.6249584948221972,2.173036080039323,-6.632617349978325,-1.1161228249457809,-0.26525453416863876,0.33322312259103287,1.2668733835016321,11.428909191391206,-0.005930551811739883,0.648051780861325,2.2705704235436004,-5.965808686242441,-1.0798759706926273,-0.24773799759192733,0.3515851937655031,1.310600303523493,14.09265970290431,-1.7873641498733328,-0.5203143426496162,0.10151478461747455,0.8121457304207521,-1.0448933901202049,-0.23036353473584398,0.3701607202411395,1.3562525948898168,18.36244741398915,-1.7203863706929097,-0.4996052228809243,0.11814835863988674,0.8397923755366344,3.334950380395996,-3.3558193454755214,-0.8427155667295237,1.403986651214564,26.323735828143114,-1.6570922920811493,-0.4792334483474158,0.13484666110787122,0.8682129271469214,3.5457458385514102,-3.1648187263020913,-0.8149904970151329,-0.10324449014768912,0.5181410925006156,1.7802057618371978,-14.442779234476319,0.15161914819577268,0.8974563627952178,3.7826319235162176,-2.9927066309009964,-0.7879983934523319,-0.08666099031757715,0.5391693094840111,1.8507969688488417,-11.658707293283776,-1.2713421672595357,-0.3351260431487928,0.2634231612002263,1.1122859935403655,-0.7616965471168056,-0.07012466629979348,0.5605735640160936,1.925817767435259,-9.770057858054006,-1.2292195423268812,-0.3169437898655737,0.2810765879355107,1.149742039561527,7.3667845849918185,-2.0913948255985484,-0.6046700308069867,2.005743168802233,-8.40405639398739,-1.188765299724745,-0.2989499930792424,0.29889388580306914,1.18864101719624,8.400368776228833,-2.006001905814314,-0.5824448927056209,0.05357476487236159,0.7359657281161163,2.694230567739184,-4.358527163216996,0.31688711185769375,1.2290902222659528,9.765092484593698,-1.9260603172552522,-0.5606412561403722,0.07007290813717071,0.7616151629363078,2.8362669923731283,-4.051823502107235,-0.9276712786978993,-0.1685284083066114,0.43936572806607715,1.540109712203527,-0.5392357891129489,0.08660909866456665,0.7879149101287576,2.9921939103153306,-3.7834205325156565,-0.8975493557942026,-0.1516718376997137,0.4591177348631664,1.596971764174592,-46.53952393200767,-1.4541362226914893,-0.4080686521236642,3.1642514348719515,-3.5464450092635698,-0.8683032604616985,-0.13489910309587197,0.4791701159381983,1.6568993728604502,-26.35952573602783,-1.404139693053623,-0.3890229605563541,0.21306630353310507,1.0109879720623436,4.958633360397722,-2.489675249355109,0.49954086351832905,1.720182442610105,-18.379881861991144,-1.3563988497029458,-0.370219283604365,0.23030929706614794,1.0447856574891394,5.416529242200987,-2.376009201337281,-0.6717170691416865,-0.01055637357091926,0.6415032884566649,2.242393932575968,-0.35164306654142236,0.24768333213606739,1.0797644101007173,5.963924649478102,-2.270887499600705,-0.6481249190210255,0.005879044941003643,0.6649509898229616,2.3452699143732745,-5.562113042782177,-1.0546160800778246,-0.23523972753209826,6.630300844931992,-2.173330829486714,-0.6250301187004625,0.022317640087311397,0.6889168946949201,2.4563951920911804,-5.081151022795716,-1.020490327029505,-0.2179605437828296,0.38364788433593905,1.3903320449262413,23.462309315455744,-1.67455316326129,0.7134317638658114,2.5768712314072744,-4.674332875007537,-0.9874904867672305,-0.2008047232672913,0.4026231861712705,1.43966792945277,38.21639379418912,-1.613701699014323,-0.46479282810321176,0.14689059881419714,0.8891398215796075,3.713040488998342,-0.18376177627979942,0.4218513064596927,1.4913952745459789,102.8155088915394,-1.5559948180863448,-0.4449571223351875,0.16372232174170126,0.9190068953395659,3.971877268624381,-2.8791367282321367,-0.7690315712292018,-0.07477445261007164,-149.04891369953887,-1.5011660381763654,-0.4254094473324934,0.18064487783523808,0.9497901037656578,4.266869985473451,-2.7333506110937824,-0.7432009682236931,-0.058266403123097006,0.5761982229017628,1.9827226701583116,-8.748775101505403,-1.1999891789746457,0.9815496779980031,4.606360363661176,-2.6001006233177026,-0.717993820791975,-0.041789942642595106,0.598300958480481,2.0665042064095567,-7.634506515652368,-1.1606603987996151,-0.2861297742157647,0.31180454545410385,1.2175427206309914,-0.6933746863342568,-0.0253361012562331,0.620842725281054,2.1561772972272903,-6.768705212659114,-1.1228040881240906,-0.268430917256064,0.32993187043923805,1.259177910853362,11.05141618723531,-1.8716756970323352,0.6438492874227326,0.08195073594305413,-6.0762637293475725,2.946783453537807,-0.25088755068822044,-0.9059360112567432,1.3025729201300895,0.4535290594149859,-1.7998686699040378,0.667347995740464,0.09851987865583132,-5.509574335698663,3.114047621663054,-0.23348827700969604,-0.8764489311617719,1.3478667267837727,0.47349512122453474,-1.7321881626042808,-30.025005094203173,0.11514276975786189,-0.394358115800149,3.2993579086850207,-0.21622203970775133,-0.8477993503068071,1.3952128912781732,0.4937743953178965,-1.66825483341494,-20.092725295334706,0.13182869903699135,-0.37548782411476556,3.5059192754291963,1.0351575302017126,-0.8199372485567855,-2.407089384864412,0.5143855315869041,-1.6077340567301,-15.09208488356393,0.14858709529054842,-0.35684902662086204,3.73774247701156,1.0697957988289435,-0.7928161470914513,-2.299668899234891,0.5353481601601845,0.0012534786770855878,-12.079264554703242,0.16542754808676846,-0.3384275994672296,3.9999143524265293,1.105674003234261,-0.7663927874560357,-2.200073284078523,0.5566829731064329,0.0176902817253243,-10.06460127391302,2.4242252849537858,-0.3202099786466508,-1.0299776739904822,1.1428803991375978,-0.7406268443581554,-2.1074293155231625,0.5784118135502451,0.03413664605525746,-8.621879986505595,2.54194721160928,-0.3021831165860562,-0.9966684706421715,1.1815113915441398,0.39725782227801526,-2.020988595676932,32.471706978515115,0.05060147635908713,-7.537308887226392,2.6699350287665298,-0.2843344416533151,-0.9644329991888865,1.221672514172132,0.4164132326416384,-1.9401059975331263,69.6750640939458,0.06709371732466772,-0.45050987749267835,2.809671728349358,0.9105108761524562,-0.9332035635271718,1.2634795529938128,0.43583266273468896,-1.8642224268705634,-479.93625081809927,0.08362237313303911,-0.43088284711520614,2.962939674539122,0.9410303573300539,-0.9029176831884569,-2.7730361978641223,0.4555323238770858,-0.06290889007167337,-53.9936893437882,0.10019652723089514,-0.4115318660097336,3.131900204208162,0.9725087715915773,-0.8735175875598156,-2.636434151185535,0.47552920610232846,-0.04642444869933792,-28.59776615003823,2.042356439110874,-0.39244091070747733,-1.1715757368562383,1.0050098715610243,-0.84494976733668,-2.5111793032905134,0.4958411423181091,-0.029965145137217486,-19.44248061270547,2.130305235090954,-0.37359466291952975,-1.1333155700096622,1.038602763847904,0.3248106413373247,-2.395854349280679,0.5164868779268119,-0.013522046674946638,-14.721550007846774,2.2246365001759005,-0.35497845579839515,-1.0964547325730405,1.0733624990913926,0.3430786844362158,-2.2892681057458946,12.723917844183001,0.0029137443131048916,-0.5299985358626288,2.3261280461647273,-0.336578224109522,-1.0608989733452052,1.1093707411632314,0.36155392259406016,-2.190412122073412,16.109410186218344,0.019351109648533957,-0.5091269456357644,2.4356888101550997,0.8269300022528099,-1.0265619623655629,-3.451328130585072,0.3802500575409605,-2.0984269126372035,21.933402002282012,0.03579893455692172,-0.4886017731962746,2.5543877337850596,0.8549872429259443,-0.9933644627130161,-3.2504988776748527,0.39918136235771373,-0.11092230799052558,34.32381425772551,1.748980311475898,-0.4684036444184406,2.683490625839075,0.8838442970712478,-0.9612336036053915,-3.070040534251347,0.4183627289832149,-0.09431391931870695,78.79118566029553,1.8176693030855398,-0.44851414578350923,-1.2913958154286274,0.9135521382385869,0.25532172985754886,-2.9069193945635625,0.4378097193841312,-0.07775694309614822,-267.1023938069219,1.890588997185611,-0.42891575092052114,-1.2484596374989427,0.944165738642456,0.2729034294930847,-2.7586751087372225,6.9694586251777535,-0.061242234048988875,-49.550175927608855,1.9681859276514553,-0.4095917529870391,-1.2072501480305307,0.9757444847937866,0.290643567366225,-2.623291312600422,7.889682481418844,-0.0447607391199452,-0.5926560730395092,2.050971217675879,0.7243282863820787,-1.1676442692595006,1.0083526454269067,0.3085540132524432,-2.4990997732624716,9.084133777377204,-0.02830347746927854,-0.570660739659834,2.13953272163399,0.7496900681499408,-1.1295299890426131,-4.1882315357793685,0.32664705185751053,-0.17634488891418473,10.69787918975261,-0.011861520810304092,-0.5490741882428641,2.23455001221859,0.7756846753996701,-1.0928051311244744,-3.9031067492411595,0.34493541910929026,-0.15944629811916805,13.00020757187369,1.570344485676611,-0.5278737815992052,-1.4780420061914654,0.8023506787634297,-1.05737628536293,-3.6523598334546152,0.3634323409190159,-0.14263604906792945,16.55381552588097,1.628822244586603,-0.5070380954394356,-1.4269398523481458,0.8297294126456594,0.20514362589255936,-3.4300135484385894,4.771443337423321,-0.12590443651833197,22.764017147487472,1.690517273800349,-0.4865468240325531,-1.37817984654749,0.8578652428574076,0.2223297226364387,-3.2313998136078688,5.195325998801076,-0.10924193044365765,-0.682789449359087,1.7557388174858537,0.6308404751715957,-1.3315799679781901,0.8868058652847697,0.23964188667935404,-3.0528198559309065,5.698360586612925,-0.09263915379017365,-0.6589577735776653,1.8248365596457479,0.654058698435991,-1.286976211596088,-5.815230926452501,0.25709097038107126,-2.8913050009734738,6.305361981277339,-0.07608686096056771,-0.6356368042744878,1.8982074803859945,0.6777815569000184,-1.2442203988639733,-5.292891038819283,0.27468814766402533,-0.22592522628337824,7.052726764735335,1.3683003194229606,-0.6127980930934505,1.9763041553760363,0.7020389302569842,-1.203178299700497,-4.854160685498636,0.29244494442293717,-0.20871374879407423,7.996082796748481,1.416595979134322,-0.5904148671316115,-1.6413987777388819,0.7268626513323537,0.13914456235370629,-4.48026573468017,0.3103732707674821,-0.19161995590232142,9.224924533813686,1.4671942649836929,-0.5684618937339878,-1.5822745493503108,0.7522866839961455,0.15593763671077993,-4.157660767946111,3.8482610499617116,-0.174633500444351,-0.7811827138478651,1.520293257193568,-0.5469153575259378,-1.5261476521947863,0.7783473201558861,0.172817015565179,-3.8763272289247577,4.125652018688588,-0.15774428012733221,-0.7550515182005212,1.5761139571910077,0.5661311611120055,-1.472767672852687,-9.379251009370748,0.1897925592003585,-3.6286956519631,4.4433999680700085,-0.14094241251908063,-0.7295609669083168,1.6349037215232054,0.5880394123049086,-1.4219109569664616,-8.112222342826307,0.20687434514318195,-0.29436000395116774,4.811217263779058,1.1988715897554603,-0.7046745057187191,1.6969403315347151,0.6103752951622795,-1.373377112973542,-7.14332341678886,0.22407269305273578,-0.27658538164521757,5.242203353733219,1.2397372735343173,-0.6803579307847634,-1.9063514083702675,0.6331638845972261,-1.326986049596173,-6.37803661813729,0.2413981908032937,-0.2589716376353951,5.754462420900127,1.282303028523771,-0.6565791894843882,-1.8324962153668571,0.6564317820163826,0.09086104181100517,-5.757978576715662,3.034720848243018,-0.24150720638371664,6.3737460408402296,1.32670168856924,-0.6333082005692107,-1.762959932254518,0.6802072491443724,0.10745796154245846,-5.2451387396148865,3.211338879207052,-0.22418087769254305,-0.8609307981893911,1.3730798507690918,0.48436800818924347,-1.6973400402517407],"x":[-1.8110048645192806e18,-1.6848065908881925e298,-3.369613181776385e298,-5.054419772664577e298,-6.73922636355277e298,-8.424032954440962e298,-1.0108839545329155e299,-1.1793646136217347e299,-1.347845272710554e299,-1.5163259317993734e299,-1.6848065908881925e299,-1.853287249977012e299,-2.021767909065831e299,-2.1902485681546504e299,-2.3587292272434695e299,-2.527209886332289e299,-2.695690545421108e299,-2.8641712045099274e299,-3.032651863598747e299,-3.201132522687566e299,-3.369613181776385e299,-3.538093840865205e299,-3.706574499954024e299,-3.875055159042843e299,-4.043535818131662e299,-4.212016477220482e299,-4.380497136309301e299,-4.54897779539812e299,-4.717458454486939e299,-4.885939113575759e299,-5.054419772664578e299,-5.222900431753397e299,-5.391381090842216e299,-5.559861749931036e299,-5.728342409019855e299,-5.896823068108674e299,-6.065303727197494e299,-6.233784386286313e299,-6.402265045375132e299,-6.570745704463951e299,-6.73922636355277e299,-6.90770702264159e299,-7.07618768173041e299,-7.244668340819228e299,-7.413148999908048e299,-7.581629658996866e299,-7.750110318085686e299,-7.918590977174506e299,-8.087071636263324e299,-8.255552295352144e299,-8.424032954440964e299,-8.592513613529782e299,-8.760994272618602e299,-8.929474931707421e299,-9.09795559079624e299,-9.26643624988506e299,-9.434916908973878e299,-9.603397568062698e299,-9.771878227151518e299,-9.940358886240336e299,-1.0108839545329156e300,-1.0277320204417975e300,-1.0445800863506794e300,-1.0614281522595614e300,-1.0782762181684432e300,-1.0951242840773252e300,-1.1119723499862072e300,-1.128820415895089e300,-1.145668481803971e300,-1.162516547712853e300,-1.1793646136217348e300,-1.1962126795306168e300,-1.2130607454394987e300,-1.2299088113483806e300,-1.2467568772572626e300,-1.2636049431661444e300,-1.2804530090750264e300,-1.2973010749839083e300,-1.3141491408927902e300,-1.3309972068016722e300,-1.347845272710554e300,-1.364693338619436e300,-1.381541404528318e300,-1.3983894704371998e300,-1.415237536346082e300,-1.4320856022549637e300,-1.4489336681638456e300,-1.4657817340727277e300,-1.4826297999816095e300,-1.4994778658904914e300,-1.5163259317993732e300,-1.5331739977082553e300,-1.5500220636171372e300,-1.566870129526019e300,-1.583718195434901e300,-1.600566261343783e300,-1.6174143272526648e300,-1.634262393161547e300,-1.6511104590704287e300,-1.6679585249793106e300,-1.6848065908881927e300,-1.7016546567970745e300,-1.7185027227059564e300,-1.7353507886148385e300,-1.7521988545237203e300,-1.7690469204326022e300,-1.7858949863414843e300,-1.802743052250366e300,-1.819591118159248e300,-1.8364391840681298e300,-1.853287249977012e300,-1.8701353158858938e300,-1.8869833817947756e300,-1.9038314477036577e300,-1.9206795136125395e300,-1.9375275795214214e300,-1.9543756454303035e300,-1.9712237113391853e300,-1.9880717772480672e300,-2.0049198431569493e300,-2.021767909065831e300,-2.038615974974713e300,-2.055464040883595e300,-2.072312106792477e300,-2.0891601727013588e300,-2.106008238610241e300,-2.1228563045191227e300,-2.1397043704280046e300,-2.1565524363368864e300,-2.1734005022457685e300,-2.1902485681546503e300,-2.2070966340635322e300,-2.2239446999724143e300,-2.240792765881296e300,-2.257640831790178e300,-2.27448889769906e300,-2.291336963607942e300,-2.3081850295168238e300,-2.325033095425706e300,-2.3418811613345877e300,-2.3587292272434696e300,-2.3755772931523517e300,-2.3924253590612335e300,-2.4092734249701154e300,-2.4261214908789975e300,-2.4429695567878793e300,-2.459817622696761e300,-2.476665688605643e300,-2.493513754514525e300,-2.510361820423407e300,-2.5272098863322888e300,-2.544057952241171e300,-2.5609060181500527e300,-2.5777540840589346e300,-2.5946021499678167e300,-2.6114502158766985e300,-2.6282982817855804e300,-2.6451463476944625e300,-2.6619944136033443e300,-2.678842479512226e300,-2.695690545421108e300,-2.71253861132999e300,-2.729386677238872e300,-2.746234743147754e300,-2.763082809056636e300,-2.779930874965518e300,-2.7967789408743996e300,-2.8136270067832814e300,-2.830475072692164e300,-2.8473231386010457e300,-2.8641712045099275e300,-2.8810192704188093e300,-2.897867336327691e300,-2.914715402236573e300,-2.9315634681454554e300,-2.948411534054337e300,-2.965259599963219e300,-2.982107665872101e300,-2.998955731780983e300,-3.0158037976898646e300,-3.0326518635987464e300,-3.049499929507629e300,-3.0663479954165107e300,-3.0831960613253925e300,-3.1000441272342743e300,-3.116892193143156e300,-3.133740259052038e300,-3.1505883249609204e300,-3.167436390869802e300,-3.184284456778684e300,-3.201132522687566e300,-3.217980588596448e300,-3.2348286545053296e300,-3.251676720414212e300,-3.268524786323094e300,-3.2853728522319757e300,-3.3022209181408575e300,-3.3190689840497393e300,-3.335917049958621e300,-3.352765115867503e300,-3.3696131817763854e300,-3.386461247685267e300,-3.403309313594149e300,-3.420157379503031e300,-3.437005445411913e300,-3.4538535113207946e300,-3.470701577229677e300,-3.487549643138559e300,-3.5043977090474407e300,-3.5212457749563225e300,-3.5380938408652043e300,-3.554941906774086e300,-3.5717899726829686e300,-3.5886380385918504e300,-3.605486104500732e300,-3.622334170409614e300,-3.639182236318496e300,-3.656030302227378e300,-3.6728783681362596e300,-3.689726434045142e300,-3.706574499954024e300,-3.7234225658629057e300,-3.7402706317717875e300,-3.7571186976806693e300,-3.773966763589551e300,-3.7908148294984336e300,-3.8076628954073154e300,-3.824510961316197e300,-3.841359027225079e300,-3.858207093133961e300,-3.875055159042843e300,-3.891903224951725e300,-3.908751290860607e300,-3.925599356769489e300,-3.9424474226783707e300,-3.9592954885872525e300,-3.9761435544961343e300,-3.992991620405016e300,-4.0098396863138986e300,-4.0266877522227804e300,-4.043535818131662e300,-4.060383884040544e300,-4.077231949949426e300,-4.094080015858308e300,-4.11092808176719e300,-4.127776147676072e300,-4.144624213584954e300,-4.1614722794938357e300,-4.1783203454027175e300,-4.1951684113115994e300,-4.212016477220482e300,-4.2288645431293636e300,-4.2457126090382454e300,-4.262560674947127e300,-4.279408740856009e300,-4.296256806764891e300,-4.313104872673773e300,-4.329952938582655e300,-4.346801004491537e300,-4.363649070400419e300,-4.3804971363093007e300,-4.3973452022181825e300,-4.4141932681270644e300,-4.431041334035947e300,-4.4478893999448286e300,-4.4647374658537104e300,-4.481585531762592e300,-4.498433597671474e300,-4.515281663580356e300,-4.5321297294892384e300,-4.54897779539812e300,-4.565825861307002e300,-4.582673927215884e300,-4.5995219931247657e300,-4.6163700590336475e300,-4.6332181249425294e300,-4.650066190851412e300,-4.6669142567602936e300,-4.6837623226691755e300,-4.700610388578057e300,-4.717458454486939e300,-4.734306520395821e300,-4.7511545863047034e300,-4.768002652213585e300,-4.784850718122467e300,-4.801698784031349e300,-4.8185468499402307e300,-4.8353949158491125e300,-4.852242981757995e300,-4.869091047666877e300,-4.8859391135757586e300,-4.9027871794846405e300,-4.919635245393522e300,-4.936483311302404e300,-4.953331377211286e300,-4.9701794431201684e300,-4.98702750902905e300,-5.003875574937932e300,-5.020723640846814e300,-5.037571706755696e300,-5.0544197726645775e300,-5.07126783857346e300,-5.088115904482342e300,-5.1049639703912236e300,-5.1218120363001055e300,-5.138660102208987e300,-5.155508168117869e300,-5.1723562340267516e300,-5.1892042999356334e300,-5.206052365844515e300,-5.222900431753397e300,-5.239748497662279e300,-5.256596563571161e300,-5.273444629480043e300,-5.290292695388925e300,-5.307140761297807e300,-5.3239888272066886e300,-5.3408368931155705e300,-5.357684959024452e300,-5.374533024933334e300,-5.391381090842216e300,-5.408229156751098e300,-5.42507722265998e300,-5.441925288568863e300,-5.458773354477744e300,-5.475621420386626e300,-5.492469486295508e300,-5.50931755220439e300,-5.526165618113272e300,-5.543013684022154e300,-5.559861749931035e300,-5.576709815839917e300,-5.593557881748799e300,-5.610405947657681e300,-5.627254013566563e300,-5.644102079475445e300,-5.660950145384328e300,-5.67779821129321e300,-5.694646277202091e300,-5.711494343110973e300,-5.728342409019855e300,-5.745190474928737e300,-5.762038540837619e300,-5.7788866067465e300,-5.795734672655382e300,-5.812582738564264e300,-5.829430804473146e300,-5.846278870382028e300,-5.863126936290911e300,-5.879975002199793e300,-5.896823068108674e300,-5.913671134017556e300,-5.930519199926438e300,-5.94736726583532e300,-5.964215331744202e300,-5.981063397653084e300,-5.997911463561965e300,-6.014759529470847e300,-6.031607595379729e300,-6.048455661288611e300,-6.065303727197493e300,-6.082151793106376e300,-6.098999859015258e300,-6.11584792492414e300,-6.132695990833021e300,-6.149544056741903e300,-6.166392122650785e300,-6.183240188559667e300,-6.200088254468549e300,-6.21693632037743e300,-6.233784386286312e300,-6.250632452195194e300,-6.267480518104076e300,-6.284328584012958e300,-6.301176649921841e300,-6.318024715830723e300,-6.334872781739604e300,-6.351720847648486e300,-6.368568913557368e300,-6.38541697946625e300,-6.402265045375132e300,-6.419113111284014e300,-6.435961177192895e300,-6.452809243101777e300,-6.469657309010659e300,-6.486505374919541e300,-6.503353440828424e300,-6.520201506737306e300,-6.537049572646188e300,-6.55389763855507e300,-6.570745704463951e300,-6.587593770372833e300,-6.604441836281715e300,-6.621289902190597e300,-6.638137968099479e300,-6.65498603400836e300,-6.671834099917242e300,-6.688682165826124e300,-6.705530231735006e300,-6.722378297643889e300,-6.739226363552771e300,-6.756074429461653e300,-6.772922495370535e300,-6.789770561279416e300,-6.806618627188298e300,-6.82346669309718e300,-6.840314759006062e300,-6.857162824914944e300,-6.874010890823826e300,-6.890858956732707e300,-6.907707022641589e300,-6.924555088550472e300,-6.941403154459354e300,-6.958251220368236e300,-6.975099286277118e300,-6.991947352186e300,-7.008795418094881e300,-7.025643484003763e300,-7.042491549912645e300,-7.059339615821527e300,-7.076187681730409e300,-7.09303574763929e300,-7.109883813548172e300,-7.126731879457054e300,-7.143579945365937e300,-7.160428011274819e300,-7.177276077183701e300,-7.194124143092583e300,-7.210972209001465e300,-7.227820274910346e300,-7.244668340819228e300,-7.26151640672811e300,-7.278364472636992e300,-7.295212538545874e300,-7.312060604454756e300,-7.328908670363637e300,-7.345756736272519e300,-7.362604802181402e300,-7.379452868090284e300,-7.396300933999166e300,-7.413148999908048e300,-7.42999706581693e300,-7.446845131725811e300,-7.463693197634693e300,-7.480541263543575e300,-7.497389329452457e300,-7.514237395361339e300,-7.53108546127022e300,-7.547933527179102e300,-7.564781593087985e300,-7.581629658996867e300,-7.598477724905749e300,-7.615325790814631e300,-7.632173856723513e300,-7.649021922632395e300,-7.665869988541276e300,-7.682718054450158e300,-7.69956612035904e300,-7.716414186267922e300,-7.733262252176804e300,-7.750110318085686e300,-7.766958383994567e300,-7.78380644990345e300,-7.800654515812332e300,-7.817502581721214e300,-7.834350647630096e300,-7.851198713538978e300,-7.86804677944786e300,-7.884894845356741e300,-7.901742911265623e300,-7.918590977174505e300,-7.935439043083387e300,-7.952287108992269e300,-7.96913517490115e300,-7.985983240810032e300,-8.002831306718915e300,-8.019679372627797e300,-8.036527438536679e300,-8.053375504445561e300,-8.070223570354443e300,-8.087071636263325e300,-8.103919702172206e300,-8.120767768081088e300,-8.13761583398997e300,-8.154463899898852e300,-8.171311965807734e300,-8.188160031716616e300,-8.205008097625499e300,-8.22185616353438e300,-8.238704229443262e300,-8.255552295352144e300,-8.272400361261026e300,-8.289248427169908e300,-8.30609649307879e300,-8.322944558987671e300,-8.339792624896553e300,-8.356640690805435e300,-8.373488756714317e300,-8.390336822623199e300,-8.40718488853208e300,-8.424032954440964e300,-8.440881020349845e300,-8.457729086258727e300,-8.474577152167609e300,-8.491425218076491e300,-8.508273283985373e300,-8.525121349894255e300,-8.541969415803136e300,-8.558817481712018e300,-8.5756655476209e300,-8.592513613529782e300,-8.609361679438664e300,-8.626209745347546e300,-8.643057811256429e300,-8.65990587716531e300,-8.676753943074192e300,-8.693602008983074e300,-8.710450074891956e300,-8.727298140800838e300,-8.74414620670972e300,-8.760994272618601e300,-8.777842338527483e300,-8.794690404436365e300,-8.811538470345247e300,-8.828386536254129e300,-8.845234602163012e300,-8.862082668071894e300,-8.878930733980775e300,-8.895778799889657e300,-8.912626865798539e300,-8.929474931707421e300,-8.946322997616303e300,-8.963171063525185e300,-8.980019129434066e300,-8.996867195342948e300,-9.01371526125183e300,-9.030563327160712e300,-9.047411393069594e300,-9.064259458978477e300,-9.081107524887359e300,-9.09795559079624e300,-9.114803656705122e300,-9.131651722614004e300,-9.148499788522886e300,-9.165347854431768e300,-9.18219592034065e300,-9.199043986249531e300,-9.215892052158413e300,-9.232740118067295e300,-9.249588183976177e300,-9.266436249885059e300,-9.283284315793942e300,-9.300132381702824e300,-9.316980447611705e300,-9.333828513520587e300,-9.350676579429469e300,-9.367524645338351e300,-9.384372711247233e300,-9.401220777156115e300,-9.418068843064996e300,-9.434916908973878e300,-9.45176497488276e300,-9.468613040791642e300,-9.485461106700525e300,-9.502309172609407e300,-9.519157238518289e300,-9.53600530442717e300,-9.552853370336052e300,-9.569701436244934e300,-9.586549502153816e300,-9.603397568062698e300,-9.62024563397158e300,-9.637093699880461e300,-9.653941765789343e300,-9.670789831698225e300,-9.687637897607107e300,-9.70448596351599e300,-9.721334029424872e300,-9.738182095333754e300,-9.755030161242635e300,-9.771878227151517e300,-9.788726293060399e300,-9.805574358969281e300,-9.822422424878163e300,-9.839270490787045e300,-9.856118556695926e300,-9.872966622604808e300,-9.88981468851369e300,-9.906662754422572e300,-9.923510820331455e300,-9.940358886240337e300,-9.957206952149219e300,-9.9740550180581e300,-9.990903083966982e300,-1.0007751149875864e301,-1.0024599215784746e301,-1.0041447281693628e301,-1.005829534760251e301,-1.0075143413511391e301,-1.0091991479420273e301,-1.0108839545329155e301,-1.0125687611238038e301,-1.014253567714692e301,-1.0159383743055802e301,-1.0176231808964684e301,-1.0193079874873565e301,-1.0209927940782447e301,-1.0226776006691329e301,-1.0243624072600211e301,-1.0260472138509093e301,-1.0277320204417975e301,-1.0294168270326856e301,-1.0311016336235738e301,-1.032786440214462e301,-1.0344712468053503e301,-1.0361560533962385e301,-1.0378408599871267e301,-1.0395256665780149e301,-1.041210473168903e301,-1.0428952797597912e301,-1.0445800863506794e301,-1.0462648929415676e301,-1.0479496995324558e301,-1.049634506123344e301,-1.0513193127142321e301,-1.0530041193051203e301,-1.0546889258960086e301,-1.0563737324868968e301,-1.058058539077785e301,-1.0597433456686732e301,-1.0614281522595614e301,-1.0631129588504495e301,-1.0647977654413377e301,-1.0664825720322259e301,-1.0681673786231141e301,-1.0698521852140023e301,-1.0715369918048905e301,-1.0732217983957788e301,-1.0749066049866668e301,-1.0765914115775551e301,-1.0782762181684432e301,-1.0799610247593315e301,-1.0816458313502196e301,-1.0833306379411079e301,-1.085015444531996e301,-1.0867002511228842e301,-1.0883850577137725e301,-1.0900698643046606e301,-1.091754670895549e301,-1.093439477486437e301,-1.0951242840773253e301,-1.0968090906682133e301,-1.0984938972591016e301,-1.1001787038499897e301,-1.101863510440878e301,-1.103548317031766e301,-1.1052331236226544e301,-1.1069179302135424e301,-1.1086027368044307e301,-1.110287543395319e301,-1.111972349986207e301,-1.1136571565770954e301,-1.1153419631679835e301,-1.1170267697588718e301,-1.1187115763497598e301,-1.1203963829406481e301,-1.1220811895315362e301,-1.1237659961224245e301,-1.1254508027133126e301,-1.1271356093042009e301,-1.128820415895089e301,-1.1305052224859772e301,-1.1321900290768655e301,-1.1338748356677536e301,-1.135559642258642e301,-1.13724444884953e301,-1.1389292554404183e301,-1.1406140620313063e301,-1.1422988686221946e301,-1.1439836752130827e301,-1.145668481803971e301,-1.147353288394859e301,-1.1490380949857474e301,-1.1507229015766357e301,-1.1524077081675237e301,-1.154092514758412e301,-1.1557773213493e301,-1.1574621279401884e301,-1.1591469345310765e301,-1.1608317411219648e301,-1.1625165477128528e301,-1.1642013543037411e301,-1.1658861608946292e301,-1.1675709674855175e301,-1.1692557740764056e301,-1.1709405806672939e301,-1.1726253872581822e301,-1.1743101938490702e301,-1.1759950004399585e301,-1.1776798070308466e301,-1.179364613621735e301,-1.181049420212623e301,-1.1827342268035113e301,-1.1844190333943993e301,-1.1861038399852876e301,-1.1877886465761757e301,-1.189473453167064e301,-1.191158259757952e301,-1.1928430663488404e301,-1.1945278729397287e301,-1.1962126795306167e301,-1.197897486121505e301,-1.199582292712393e301,-1.2012670993032814e301,-1.2029519058941695e301,-1.2046367124850578e301,-1.2063215190759458e301,-1.2080063256668341e301,-1.2096911322577222e301,-1.2113759388486105e301,-1.2130607454394986e301,-1.2147455520303869e301,-1.2164303586212752e301,-1.2181151652121632e301,-1.2197999718030515e301,-1.2214847783939396e301,-1.223169584984828e301,-1.224854391575716e301,-1.2265391981666043e301,-1.2282240047574923e301,-1.2299088113483806e301,-1.2315936179392687e301,-1.233278424530157e301,-1.234963231121045e301,-1.2366480377119334e301,-1.2383328443028217e301,-1.2400176508937097e301,-1.241702457484598e301,-1.243387264075486e301,-1.2450720706663744e301,-1.2467568772572625e301,-1.2484416838481508e301,-1.2501264904390388e301,-1.2518112970299271e301,-1.2534961036208152e301,-1.2551809102117035e301,-1.2568657168025916e301,-1.2585505233934799e301,-1.2602353299843682e301,-1.2619201365752562e301,-1.2636049431661445e301,-1.2652897497570326e301,-1.266974556347921e301,-1.268659362938809e301,-1.2703441695296973e301,-1.2720289761205853e301,-1.2737137827114736e301,-1.2753985893023617e301,-1.27708339589325e301,-1.2787682024841383e301,-1.2804530090750264e301,-1.2821378156659147e301,-1.2838226222568027e301,-1.285507428847691e301,-1.287192235438579e301,-1.2888770420294674e301,-1.2905618486203555e301,-1.2922466552112438e301,-1.2939314618021318e301,-1.2956162683930201e301,-1.2973010749839082e301,-1.2989858815747965e301,-1.3006706881656848e301,-1.3023554947565729e301,-1.3040403013474612e301,-1.3057251079383492e301,-1.3074099145292375e301,-1.3090947211201256e301,-1.310779527711014e301,-1.312464334301902e301,-1.3141491408927903e301,-1.3158339474836783e301,-1.3175187540745666e301,-1.3192035606654547e301,-1.320888367256343e301,-1.3225731738472313e301,-1.3242579804381194e301,-1.3259427870290077e301,-1.3276275936198957e301,-1.329312400210784e301,-1.330997206801672e301,-1.3326820133925604e301,-1.3343668199834485e301,-1.3360516265743368e301,-1.3377364331652248e301,-1.3394212397561131e301,-1.3411060463470012e301,-1.3427908529378895e301,-1.3444756595287778e301,-1.3461604661196659e301,-1.3478452727105542e301,-1.3495300793014422e301,-1.3512148858923305e301,-1.3528996924832186e301,-1.354584499074107e301,-1.356269305664995e301,-1.3579541122558833e301,-1.3596389188467713e301,-1.3613237254376596e301,-1.3630085320285477e301,-1.364693338619436e301,-1.3663781452103243e301,-1.3680629518012124e301,-1.3697477583921007e301,-1.3714325649829887e301,-1.373117371573877e301,-1.374802178164765e301,-1.3764869847556534e301,-1.3781717913465415e301,-1.3798565979374298e301,-1.3815414045283178e301,-1.3832262111192061e301,-1.3849110177100944e301,-1.3865958243009825e301,-1.3882806308918708e301,-1.3899654374827589e301,-1.3916502440736472e301,-1.3933350506645352e301,-1.3950198572554235e301,-1.3967046638463116e301,-1.3983894704372e301,-1.400074277028088e301,-1.4017590836189763e301,-1.4034438902098643e301,-1.4051286968007526e301,-1.406813503391641e301,-1.408498309982529e301,-1.4101831165734173e301,-1.4118679231643054e301,-1.4135527297551937e301,-1.4152375363460817e301,-1.41692234293697e301,-1.418607149527858e301,-1.4202919561187464e301,-1.4219767627096345e301,-1.4236615693005228e301,-1.4253463758914108e301,-1.4270311824822991e301,-1.4287159890731874e301,-1.4304007956640755e301,-1.4320856022549638e301,-1.4337704088458519e301,-1.4354552154367402e301,-1.4371400220276282e301,-1.4388248286185165e301,-1.4405096352094046e301,-1.442194441800293e301,-1.443879248391181e301,-1.4455640549820693e301,-1.4472488615729573e301,-1.4489336681638456e301,-1.450618474754734e301,-1.452303281345622e301,-1.4539880879365103e301,-1.4556728945273984e301,-1.4573577011182867e301,-1.4590425077091747e301,-1.460727314300063e301,-1.462412120890951e301,-1.4640969274818394e301,-1.4657817340727275e301,-1.4674665406636158e301,-1.4691513472545038e301,-1.4708361538453921e301,-1.4725209604362804e301,-1.4742057670271685e301,-1.4758905736180568e301,-1.4775753802089449e301,-1.4792601867998332e301,-1.4809449933907212e301,-1.4826297999816095e301,-1.4843146065724976e301,-1.485999413163386e301,-1.487684219754274e301,-1.4893690263451623e301,-1.4910538329360503e301,-1.4927386395269386e301,-1.494423446117827e301,-1.496108252708715e301,-1.4977930592996033e301,-1.4994778658904914e301,-1.5011626724813797e301,-1.5028474790722677e301,-1.504532285663156e301,-1.506217092254044e301,-1.5079018988449324e301,-1.5095867054358205e301,-1.5112715120267088e301,-1.512956318617597e301,-1.5146411252084851e301,-1.5163259317993734e301,-1.5180107383902615e301,-1.5196955449811498e301,-1.5213803515720379e301,-1.5230651581629262e301,-1.5247499647538142e301,-1.5264347713447025e301,-1.5281195779355906e301,-1.529804384526479e301,-1.531489191117367e301,-1.5331739977082553e301,-1.5348588042991436e301,-1.5365436108900316e301,-1.53822841748092e301,-1.539913224071808e301,-1.5415980306626963e301,-1.5432828372535844e301,-1.5449676438444727e301,-1.5466524504353607e301,-1.548337257026249e301,-1.550022063617137e301,-1.5517068702080254e301,-1.5533916767989135e301,-1.5550764833898018e301,-1.55676128998069e301,-1.5584460965715781e301,-1.5601309031624664e301,-1.5618157097533545e301,-1.5635005163442428e301,-1.5651853229351309e301,-1.5668701295260192e301,-1.5685549361169072e301,-1.5702397427077955e301,-1.5719245492986836e301,-1.573609355889572e301,-1.57529416248046e301,-1.5769789690713483e301,-1.5786637756622366e301,-1.5803485822531246e301,-1.582033388844013e301,-1.583718195434901e301,-1.5854030020257893e301,-1.5870878086166774e301,-1.5887726152075657e301,-1.5904574217984537e301,-1.592142228389342e301,-1.59382703498023e301,-1.5955118415711184e301,-1.5971966481620065e301,-1.5988814547528948e301,-1.600566261343783e301,-1.6022510679346711e301,-1.6039358745255594e301,-1.6056206811164475e301,-1.6073054877073358e301,-1.6089902942982239e301,-1.6106751008891122e301,-1.6123599074800002e301,-1.6140447140708885e301,-1.6157295206617766e301,-1.617414327252665e301,-1.619099133843553e301,-1.6207839404344413e301,-1.6224687470253296e301,-1.6241535536162176e301,-1.625838360207106e301,-1.627523166797994e301,-1.6292079733888823e301,-1.6308927799797704e301,-1.6325775865706587e301,-1.6342623931615467e301,-1.635947199752435e301,-1.637632006343323e301,-1.6393168129342114e301,-1.6410016195250997e301,-1.6426864261159878e301,-1.644371232706876e301,-1.6460560392977641e301,-1.6477408458886524e301,-1.6494256524795405e301,-1.6511104590704288e301,-1.6527952656613169e301,-1.6544800722522052e301,-1.6561648788430932e301,-1.6578496854339815e301,-1.6595344920248696e301,-1.661219298615758e301,-1.6629041052066462e301,-1.6645889117975343e301,-1.6662737183884226e301,-1.6679585249793106e301,-1.669643331570199e301,-1.671328138161087e301,-1.6730129447519753e301,-1.6746977513428634e301,-1.6763825579337517e301,-1.6780673645246397e301,-1.679752171115528e301,-1.681436977706416e301,-1.6831217842973044e301]}
},{}],84:[function(require,module,exports){
module.exports={"expected":[-6.420676210313675e-11,0.6550436337224089,1.520329130807131,2.2229716489648492,-1.103242584636981,-0.8010291915287792,0.5253352378935542,-0.37322349855309983,1.0334895307380332,-2.431746301371779,2.066068916754913,2.161655556979708,0.30559821123437747,-0.6053406896179885,-0.5816959849823272,-4.857705299744476,1.3490100481190683,1.3995119598370787,0.1098991440753763,-0.8975541760045962,-0.8664673696582346,-62.89805926696544,0.9237294422415245,-0.095438563031598,0.9907313114354653,-0.060252527694834974,-1.2630136972946502,5.782994162182802,0.6250659435953592,-0.29001939763647727,0.6748073835548071,-0.2524728773616521,-1.9088296141637886,2.6700623579717617,0.3896149191545897,-0.5072116376418861,0.4304673145496979,-0.4639933444863082,-3.2856697560767683,1.6477184768698827,0.1865156292547726,1.7856367145312344,-13.60897944306501,-0.7162585613959924,-0.03771656933910967,1.1115865582582836,-6.931012427182714,-1.1238591512271536,0.032253667848321774,0.7080352279560224,12.66322568826556,-0.9768906765850459,-0.19216745790438103,0.8186996069494484,3.222443201342409,-1.5431291903296775,-0.12048991740992258,0.5003706077450858,4.252499259426075,-2.715073344455713,-0.35599707413062803,0.24667680163880945,2.054110527929577,-2.2223199411486423,-0.6326799782971048,0.32230197991619886,1.248950495679316,-4.914425885696335,-0.5387458551155935,0.08993546625928303,1.4454793264656451,46.823366220148024,-0.8704677608969726,-0.13318051773286604,0.9195120722366367,-20.565193683125255,-1.3645098618335312,-0.06254154423364248,0.5744165877769029,5.705471834362217,-2.298613078209264,-0.29249326627551603,0.671493634708843,9.621059489745056,-5.249117508807604,-0.5549704385227443,0.3869906597634206,2.961335937061329,-1.630198665436717,-0.8926632276227914,0.14821710117502512,1.6392784720926479,-2.9373566017744897,-0.3841506155328227,-0.07509037309331743,1.0315830265853236,-9.395097685238795,-0.6679122519995564,0.29517921383606255,0.6535223250505792,8.577787836549097,-1.0524764520087864,0.06502407792767474,1.3716097704281665,2.843665422646039,-1.6768315781948933,-0.1584697722442877,0.874823045388288,1.5941483215345047,-3.0621927719601283,-0.39855308761338243,0.5419402187841843,4.977377553689807,-10.658300917689585,-0.6861263218253502,0.28165064158370096,2.23708439125154,-2.0412709547654027,-1.0791527464974253,0.052491274846852155,1.3362278227476767,-4.20580603390199,-0.49728291248453943,-0.17129899853075586,0.8530122730338094,-88.20637195898733,-0.8145782445939267,0.1947324599820994,0.525890334168002,4.67429444237445,-1.2749186619626598,-0.029778814242913117,1.1294701089762587,2.164125168841972,-2.1074934088247317,-0.25733006212711745,0.7200061236726891,1.3020075168355612,-4.452174447141528,-0.5129591498340075,0.42507189830897546,3.315073056272616,867.3335571610929,-0.8355696878554257,0.1818001064864378,1.7666878373021089,-2.6500948204803287,-1.3082412050263421,-0.042284713392534486,1.101441597190032,-7.161973656519344,-0.6216327547442609,-0.2706902584478305,0.7012099706783065,11.96747912457433,-0.9858439465078999,0.09793415138535545,0.4104028074455288,3.17127366153464,-1.5586599277817954,-0.8570039026295543,0.9342522497382926,1.7163248394703392,-0.7420403206614737,-0.36114431865555024,-0.05480382933694052,5.984108773852902,-7.8793010324826795,0.015410901474678752,0.31727472299028203,0.6827402013115225,-1.8828806563577152,-1.0107802190238173,0.7909638942326814,1.43148121078005,3.0384319524336996,-0.4571469362954635,-0.13782510554960434,0.15610680689174428,-22.698791804126074,-2.864756317997076,0.2288918937285009,0.5683666880505238,1.0476280137290044,-1.1924989691027663,-0.6568180517024585,1.206743907377536,2.364139115109428,9.193617979026055,-0.2227537275531106,0.07277185147321778,26.174589350232534,-3.8577992934627727,-1.6478132038591178,0.46422676718413197,0.8885283502072981,-1.4138207163652807,-0.7815132819273753,-0.3896442875867345,1.909721771428404,5.184063423553414,-0.3108583152358138,-0.009569654910476844,0.28999175559626206,-5.776386563145811,-2.0020458259247786,0.36776039218830225,0.7511359800179785,1.3579312753467798,-0.9233735753363674,-0.48770144431781987,1.578873069996632,3.5746943019165416,-52.49344052614167,-0.09204112109167771,0.20274819859918236,-11.180202003396783,-2.4962403849723707,-1.2548704198524472,0.6297595290410394,1.147172885042253,-1.0885984288944375,-0.5939696309907186,-0.2491244288972581,2.6976888869288396,15.81037490059459,-0.1757730884275968,0.11837176402412976,0.4342064463739874,-3.246378549830904,-1.4914891840107691,0.5203584661018432,0.9728176565982322,1.7989064011507572,-0.7111751663949808,-0.3384713136699851,-0.03456215938295964,6.830062299860325,-6.779826035868176,0.03562539544433857,0.33965532529739434,0.7127753951455282,-1.7944165806758028,-0.9707528793790405,0.8243403886422956,1.4949188470705161,3.2586745044124066,-0.4329448886086045,-0.11729509123649835,4.317704471624649,-15.548265554140645,-2.688923856360827,0.2502525623159322,0.5954071145061248,-2.2024678067829946,-1.144716445089513,-0.6282774339544115,1.257608215304986,2.5039398294410518,-0.5344083564611848,-0.20164285554803113,0.09311215049366917,55.59352347950439,-3.5601179171983857,0.16446237144317702,0.4890166365441243,0.9253428550221015,-1.3549155234860077,-0.7494762297469666,1.0648624058306932,2.0073754940788904,5.813106725592282,-0.28884087838009276,0.01063169147158382,9.946724700721475,-5.154624745643135,-1.9047969375549365,0.39086794724850654,0.7832252178593851,-1.6179478255769342,-0.8866298389167238,-0.462936622186243,1.6517654904661765,3.8747348758170927,-0.3802907510492296,-0.07170438174705356,0.22386861186427376,-9.103677167829407,-2.357159427653385,0.29884415903153316,0.6583391677226854,1.1950742783371888,-1.0454030679569062,-0.5669625608898129,-0.2277746007596346,2.874563146029507,23.26053722086478,-0.15501918018149974,0.138907364607247,0.4584314137221826,-3.027601173408632,-1.4282481583573585,0.546305180506936,1.0129294019976038,1.887717046164893,-0.6811843996001452,-0.3161062909674059,2.257460366330868,7.946856330188053,-5.945266485567922,0.05586900930631915,0.3623452099870218,-4.143743881851317,-1.7121423358559653,-0.9322654122132313,0.8588474483587492,1.562307765348445,-0.8089910141027135,-0.4091625583366521,-0.09686214929329286,0.19777816057254463,-0.3294165881048495,-0.026408307972135656,0.2718303256008915,0.6231060139559303,1.1361663553113288,0.348766769674917,0.7251323390418695,1.3111246247648307,2.658638720040838,14.695379321806103,1.5215956053878723,3.3559086084770073,-451.4896504484407,-3.3023855068386636,-1.507008015504648,-13.793054466873313,-2.6233135160133134,-1.2991493338929097,-0.7183949139684953,-0.34380579867286054,-1.1260690564887326,-0.6169732199299954,-0.2670789191825211,0.030841718068483858,0.3343342676072661,-0.19317911073232935,0.10133543243809144,0.41434336160049573,0.816346332175175,1.4795713084295847,0.4991515389127381,0.9405795740547667,1.7296908951179875,4.22574124421023,-16.801319035664143,2.049029517063645,6.110627949083762,-7.672337232542968,-2.2307231040274877,-1.1558171272147544,-4.939077964425606,-1.8676693947942284,-1.003994598989104,-0.5405671928870383,-0.20662036873282494,-0.872183765695367,-0.45308151158639154,-0.13439486500576792,0.15955855184587864,0.48310931326662143,-0.06352086112253938,0.2324389329302398,0.5728310464898032,1.054717190215384,1.9835704658165696,5.651347943504729,1.2150499002665445,2.386508555084141,9.490849076306635,-5.2896936080905625,-1.9271158444831535,28.708694480214742,-3.8049949652275123,-1.6353696976303318,-0.8952009603656073,-0.46875197969675614,-1.403768747636321,-0.7761027020096375,-0.3857701965064721,-0.07650902343875748,0.21885606572507724,-0.30716887421383726,-0.006201597277567784,0.2936464034053969,0.6515111999519496,1.1835371731004503,0.37158848632710556,0.7564173612541611,1.367553391540371,2.830899789699512,20.929473342523945,1.5906993441377961,3.621663592004514,-44.604434942789375,-3.076893546987872,-1.4428738818027416,-10.771260325260684,-2.4720897121358894,-1.2462356895635902,-0.6882029203008603,-0.32137014472138986,-1.0812663840208419,-0.5894226890001895,-0.24555055038463935,0.05107694641216066,0.35694874750161404,-0.172303230814531,0.12178817376801786,0.43821512607367824,0.8505782990434836,1.54598796033449,0.5246457620438797,0.9793943152104763,1.8132598226168208,4.64227593024036,-12.528420841745119,2.1585929846517393,6.9943182094531515,-6.625182149553652,-2.115191823663068,-1.109700620127164,-4.472573546208627,-1.7802898265403444,-0.9642326004211492,-0.5147421395760778,-0.1856420164134514,-0.8372275115335674,-0.4289515779241038,-0.11388224621009893,0.18034331306669155,0.5082736959959153,-0.04326193954489727,0.2538343554870449,0.5999780761862656,1.0983246552351114,2.0874272460323113,0.6997559032386131,1.2663395854742927,2.5286314164141284,11.76742633359678,-4.760713661089723,3.1605214855042574,68.40430278840763,-3.5146099884629605,-1.5635079443480382,-0.8594533943039686,-2.7621287855101717,-1.3454083484530046,-0.7442298396155967,-0.3627396488132031,-0.05621872185939219,-0.6404596717816708,-0.2851955894821662,0.01400005051790083,0.31572288065346943,0.6806741403792382,0.08435712713787534,0.39475545621574193,0.7886734313997237,1.4271889256734884,3.0240607352847544,0.9093464996221653,1.664392214358458,3.9293793896538176,-23.45105117044871,-2.877795669603327,5.525402334467705,-8.829594903390642,-2.3352529827100272,-1.1959211452657508,-0.6588389945308587,-1.9456780340684665,-1.038379316659824,-0.5625205985887062,-0.22423472974505085,0.07135398049688564,-0.47352767386649414,-0.1515721892264353,0.14234181274924354,0.4625133605649677,0.8860073611040572,1.6166873234856491,0.5506862338315994,1.0197761262242437,1.9031845184557268,5.145030545040683,-9.981685843575862,2.2781485441743174,8.168854442362568,-5.825260532082127,-2.009130113772668,-1.0656066083026687,-4.083390110120225,-1.6989777445293646,-0.9259901885159223,-0.4894486952449513,-0.16482043892206083,-0.8034341464498125,-0.40523628445081766,-0.09346380196407943,0.2012800887279362,0.5339602598627619,-0.023038401189818973,0.2754503542686938,0.6277913121404436,1.1439113287737714,2.200429657478212,0.7302836536044639,1.3203226062910554,2.686057312151478,15.46409537259547,-4.324562540571781,3.3976777776508333,-179.12192142028118,-3.262729684840778,-1.4960471371004702,-0.8249260731164773,-2.597001290062025,-1.2901366764117521,-0.7133012581341452,-0.34004420745617187,-0.0359744598197288,-0.6123330088535548,-0.2634740707612096,0.03421312956418997,0.3380828033102357,0.710650358566904,0.10473903588441862,0.41829492881232316,0.8219740747651898,1.4903656368651095,3.242360408193824,0.9469471123727745,1.7432135872103627,4.290165429761509,-15.898351650976943,-2.700577294260858,6.242464004101223,-7.475799642408447,-2.2107464429838872,-1.1479806083609811,-0.6302465142529444,-1.852648296132921,-0.9972547128970561,-0.5362231123083164,-0.2031111724048555,0.0916895614490799,-0.4490284749518306,-0.13096772826716255,0.16301400852645764,0.48726998045671854,0.9227279276941276,0.23599152987812352,0.5773126636258006,1.0618569096963406,2.0003011014218712,5.764429825362665,1.2234241506331127,2.4092404938435186,9.807708870262495,-5.1937985630626295,-1.9113428896124172,31.785279260553036,-3.7535268551124137,-1.6230625106097907,-0.8891523886209111,-0.46465058271169657,-1.3938113769307492,-0.7707203327403426,-0.3819061589511178,-0.07312232413904199,0.22238784024706415,-0.30348705876461685,-0.002833680332880623,0.297308286966409,0.6563191512580502,1.1916549494389226,0.37542617386332877,0.7617257199171227,1.3772645514930826,2.861549857889367,22.520236099409896,1.6026530133598602,3.6697928223143337,-38.77607161654883,-3.0420028139676023,-1.432544724802476,-10.39094962380416,-2.448337858799776,-1.237673138749186,-0.683251443153698,-0.31765847600095337,-0.01575960372890093,-0.5848937634397064,-0.24198257803503748,0.05445417137291216,0.36075028215475885,0.7414998857273131,0.12520738724698754,0.4422356556514744,0.8563994214737267,1.5574650206770317,3.491265102298586,0.9860145031028703,1.8277896282075177,4.719429831768834,-12.017967588396248,-2.5416967605627674,7.166499182123827,-6.477288679765802,-2.0968864488837604,-1.1022134447996572,-0.602373022181789,-1.7663314641050778,-0.9577545322728506,-0.5104893086233786,-0.18216026915564526,0.11210062315522436,-0.4249697884513013,-0.11047201809975724,0.18382281940782624,0.5125188802497329,0.9608436098313322,0.2574222778902965,0.6045675478118713,1.1057828049323797,2.105597789037722,6.547117708583318,-7.083230579251124,-2.16858697143123,0.815446299644343,1.4778494785322909,3.19792869368868,88.88452967460681,-3.4701667848822266,-1.5519679319396997,-0.8536147343685281,-0.44031372580807926,-0.12357381397901733,0.17049238781929146,-2.2339561242380572,-1.1570800969332038,-0.6357205793054066,-0.2815572964514202,0.017368727216657665,0.3194303918649214,0.6856137083876945,1.241754184192501,2.4596340563121832,10.569230881503135,-4.997656534891705,0.4824430381293678,0.9155181772698214,1.6771612928013684,3.9854895860121977,-21.731345861375967,-2.8468362564041803,-1.3726147274734077,-0.7591867480513783,-0.3735918629836342,-0.06581115369046957,-5.305397932131312,-1.9296655279744828,-1.0314045198789599,-0.5580954349633493,-0.2207002012510049,0.07473979898239781,0.3837506054291119,0.7732877727274762,1.3985559033592347,2.929828207501693,-0.07705254610288949,0.21828991435422598,0.5550835678422767,1.026670042142757,1.9188515521809197,5.239181531283394,-9.65378759179491,-2.3983365666470076,-1.219415533551184,-0.6726313385545349,2.8260366319712236,20.694894970428063,-4.024673822831531,-1.6859629494365886,-0.9197539830023153,-0.48528090355572423,-0.16136300987921684,0.13260434924327436,0.4509629086999508,0.8690911408519181,-0.6889994700611888,-0.3219663908858152,-0.01966901730945723,0.27907710561208,0.6324964646660984,1.151716208522243,2.2202512065601385,7.568427697251929,-6.178806836443704,-2.0582076587083087,0.8496474645334648,1.5441577033736864,3.440413932413118,-111.72166188029188,-3.2239358992552245,-1.4851961571765038,-0.819282058350918,-0.4164060443653709,-0.10311297902820353,0.19135491675884964,-2.1181530339363195,-1.1109070712557014,-0.6077118969448455,-0.2598756141435974,0.03758531809089779,0.3418398850202201,0.7157312254869942,1.2944318507852572,2.6095118672143225,13.464587064171566,0.17978545639528165,0.5075939535306304,0.9533553951244595,1.7568959976140373,4.356478595761315,-15.087165834486083,-2.6728989919771995,-1.3159189366723394,-0.7278199312290345,-0.35074112787489775,11.692540394209479,-4.773533392563792,-1.8378134821233014,-0.9905599485833949,-0.5318946935970039,-0.19960677372331315,0.09508678176032531,0.40711036153816277,0.8060846706423733,1.4600128246676993,-0.3633512035439656,-0.056760783345470744,0.23954977842578137,0.5818117419903338,1.0690478783410304,2.017258685453135,5.881989328258591,-8.061311273613224,-2.268227218405019,-1.1703782916416527,1.4255492570683432,3.0185879869450383,35.59951461825421,-3.703343752994767,-1.6108891402809375,-0.883139934087036,-0.46056200203489006,-0.1407009114977164,0.15321823182936456,0.47549857090375947,-1.1972351367742902,-0.6596141512999169,-0.29981276200684864,0.0005341723294453128,0.300977511107071,0.6611484045404326,1.199838146872672,2.34567361601665,8.958449588699224,-5.475127316147767,-1.9566416261557475,0.8850433157383397,1.6147364228920842,3.7191266314894675,-34.29415181295499,-3.0078197443201415,-1.422314757494552,-0.7860674443091911,-0.39289726897604,-0.08273721622369874,0.21237938166653003,-2.0118545361305,-1.066761172729529,-0.580382645309847,-0.23842041648006312,0.057832635285817925,0.3645610654364911,0.7467325333618937,1.3499387522975144,2.7760726421946633,18.52383897830756,0.20071792156130933,0.5332660654117486,0.9926788055541965,1.84249942505647,4.799075970906035,-11.547227927322394,-2.5167850387453576,-1.262159707361074,-0.6973622095365082,-0.3282119621842779,15.335414962185986,-4.335233113606483,-1.752538189308612,-0.9513181208249993,-0.5062510759774493,-0.17868279131198414,0.1155120912294401,0.43085757312806716,0.8399674912874413,1.525205559491855,-0.3406471347283439,-0.036515506880387745,0.2610164268737654,0.6091757467916707,1.1132967123550412,2.1240278800905052,6.698178809443057,-6.914905486243933,-2.1495201097561476,-1.1236065136966977,1.4886265085525006,3.2361504384754363,126.86498965979827,-3.4267503987978847,-1.540547927115733,-0.8478095487774164,-0.43629887433968484,-0.12015594983240074,0.17396013246312764,0.5005102186923245,-1.149233811557241,-0.6310017364246682,-0.2779258968698059,0.020737798042669526,0.32314588871968,0.6905761406043073,1.2503510744960853,2.4835750992701553,10.962827902357576,-4.911619266566769,0.4866015258198837,0.921728031327512,1.6900754414287278,4.043126560831482,-20.246197635005913,-2.816464866968806,-1.3629462809508062,-0.7538913161102169,-0.3697587731617982,-0.062429458902427404,-5.2089573332019725,-1.9138598034393515,-1.0244780110031102,-0.5536868750813919,-0.2171709231917314,0.07812732240620325,0.3876194293053981,0.7786835742058196,1.4085582640113987,2.9624270578425613,-0.07366557197833705,0.22182084801014088,0.5594973737724462,1.0336117973662433,1.9347223968938083,5.336714750478464,-9.346539585728966,-2.3757789332517567,-1.211074015144504,-0.6677508070799889,2.856592651333358,22.248958802717315,-3.9675279919792814,-1.6730951180556093,-0.9135562927316144,-0.48112671295697684,-0.15790933665876059,0.13603295831415826,0.45502184405028057,0.8750201610481037,1.5945437769426343,-0.318253439143647,-0.01630007979203115,0.2827106808783336,0.6372217054206379,1.1595818714280948,2.2403714197804687,7.769844126276632,-6.049551783334042,-2.0406942175092513,-1.0789111025905904,1.555615545228032,3.4841520494085474,-81.17512505948382,-3.1859754920845336,-1.4744531886581842,-0.813669104100622,-0.4124597545600081,-0.09971049481980028,0.19484834573205229,0.526032869771291,-1.1034109371927503,-0.6031096623416423,-0.2562834509297827,0.040958360442455724,0.34560562751780805,0.7208366462596406,1.303482190081761,2.6360465270683227,14.107693893325195,-4.449850854213037,0.5118367984656096,0.9598049614125183,1.7707412887621568,4.424766630613089,-14.354428936656765,-2.645714560925441,-1.3067597447440773,-0.7226806430103572,-0.3469634208821047,-0.04217286488837858,-4.694690953173649,-1.8231611784632964,-0.9839097040866808,-0.5275817545445168,-0.19610708352106462,0.09848617861179483,0.4110417945061804,0.8116559946570812,1.4706118507854546,3.172508603636481,-0.0533827208245683,0.2431137729825188,0.5863284864918392,1.076290814835002,2.0344482598259117,6.004300600056579,-7.844957909939524,-2.2476891137206714,-1.1624285270055221,-0.6389277346536628,3.0529931068315093,40.45295292228903,-3.654397031248551,-1.5988471442592116,-0.8771631390544213,-0.45648608536961444,-0.13726800782922605,0.15666693242306304,0.4796345209264556,0.9113344839086798,-0.6547916825661485,-0.29614587783574636,0.0039020371094375616,0.3046541814095687,0.6659992119666294,1.20808774734005,2.3677464221124374,9.240614015641583,-5.3726900094870205,-1.9404865621734182,0.8910671774333789,1.6269519751010428,3.76971197698598,-30.74034137683752,-2.974322272404328,-1.412182329193199,-0.7806329674471949,-0.3890146584163077,-0.0793472485768188,0.21590166601848804,-1.9949694835149558,-1.0595865385249161,-0.5758891280562849,-0.2348639709249202,0.06121241551605706,0.36838121790340134,0.7519915664083622,1.359487385823344,2.805671898719845,19.759943874499566,0.20422383246943737,0.5375994325371325,0.9993878176844544,1.8573929184917524,4.881338983753158,-11.111731272046756],"x":[1.6470993291652855e6,1.8128176838469328e15,3.625635366046766e15,5.438453048246599e15,7.251270730446433e15,9.064088412646266e15,1.08769060948461e16,1.2689723777045932e16,1.4502541459245766e16,1.63153591414456e16,1.812817682364543e16,1.9940994505845268e16,2.17538121880451e16,2.3566629870244932e16,2.537944755244477e16,2.71922652346446e16,2.900508291684443e16,3.0817900599044268e16,3.26307182812441e16,3.4443535963443932e16,3.625635364564377e16,3.80691713278436e16,3.988198901004343e16,4.169480669224326e16,4.35076243744431e16,4.5320442056642936e16,4.713325973884277e16,4.89460774210426e16,5.075889510324243e16,5.2571712785442264e16,5.4384530467642104e16,5.619734814984194e16,5.801016583204177e16,5.98229835142416e16,6.163580119644143e16,6.344861887864126e16,6.52614365608411e16,6.7074254243040936e16,6.888707192524077e16,7.06998896074406e16,7.251270728964043e16,7.432552497184027e16,7.61383426540401e16,7.795116033623994e16,7.976397801843976e16,8.15767957006396e16,8.338961338283944e16,8.520243106503926e16,8.70152487472391e16,8.882806642943893e16,9.064088411163877e16,9.245370179383861e16,9.426651947603843e16,9.607933715823827e16,9.78921548404381e16,9.970497252263794e16,1.0151779020483778e17,1.033306078870376e17,1.0514342556923744e17,1.0695624325143726e17,1.087690609336371e17,1.1058187861583693e17,1.1239469629803677e17,1.142075139802366e17,1.1602033166243643e17,1.1783314934463627e17,1.196459670268361e17,1.2145878470903594e17,1.2327160239123578e17,1.250844200734356e17,1.2689723775563544e17,1.2871005543783526e17,1.305228731200351e17,1.3233569080223493e17,1.3414850848443477e17,1.3596132616663461e17,1.3777414384883443e17,1.3958696153103427e17,1.413997792132341e17,1.4321259689543394e17,1.4502541457763376e17,1.468382322598336e17,1.4865104994203344e17,1.5046386762423328e17,1.522766853064331e17,1.5408950298863293e17,1.5590232067083277e17,1.577151383530326e17,1.5952795603523245e17,1.6134077371743226e17,1.631535913996321e17,1.6496640908183194e17,1.6677922676403178e17,1.685920444462316e17,1.7040486212843142e17,1.7221767981063126e17,1.740304974928311e17,1.7584331517503094e17,1.776561328572308e17,1.794689505394306e17,1.8128176822163043e17,1.8309458590383027e17,1.849074035860301e17,1.8672022126822995e17,1.8853303895042976e17,1.903458566326296e17,1.9215867431482944e17,1.9397149199702928e17,1.957843096792291e17,1.9759712736142893e17,1.9940994504362877e17,2.012227627258286e17,2.0303558040802845e17,2.0484839809022826e17,2.066612157724281e17,2.0847403345462794e17,2.1028685113682778e17,2.1209966881902762e17,2.1391248650122742e17,2.1572530418342726e17,2.175381218656271e17,2.1935093954782694e17,2.2116375723002678e17,2.229765749122266e17,2.2478939259442643e17,2.2660221027662627e17,2.284150279588261e17,2.3022784564102595e17,2.3204066332322576e17,2.338534810054256e17,2.3566629868762544e17,2.3747911636982528e17,2.3929193405202512e17,2.4110475173422493e17,2.4291756941642477e17,2.447303870986246e17,2.4654320478082445e17,2.4835602246302426e17,2.501688401452241e17,2.5198165782742394e17,2.5379447550962378e17,2.556072931918236e17,2.5742011087402342e17,2.5923292855622326e17,2.610457462384231e17,2.6285856392062294e17,2.646713816028228e17,2.664841992850226e17,2.6829701696722243e17,2.7010983464942227e17,2.719226523316221e17,2.7373547001382195e17,2.7554828769602176e17,2.773611053782216e17,2.7917392306042144e17,2.8098674074262128e17,2.8279955842482112e17,2.8461237610702093e17,2.8642519378922077e17,2.882380114714206e17,2.900508291536204e17,2.918636468358203e17,2.936764645180201e17,2.9548928220021997e17,2.973020998824198e17,2.991149175646196e17,3.0092773524681946e17,3.0274055292901926e17,3.0455337061121914e17,3.0636618829341894e17,3.0817900597561875e17,3.099918236578186e17,3.118046413400184e17,3.136174590222183e17,3.154302767044181e17,3.172430943866179e17,3.190559120688178e17,3.208687297510176e17,3.226815474332174e17,3.244943651154173e17,3.263071827976171e17,3.2812000047981696e17,3.299328181620168e17,3.317456358442166e17,3.3355845352641645e17,3.3537127120861626e17,3.371840888908161e17,3.3899690657301594e17,3.4080972425521574e17,3.426225419374156e17,3.444353596196154e17,3.462481773018153e17,3.480609949840151e17,3.498738126662149e17,3.516866303484148e17,3.534994480306146e17,3.5531226571281446e17,3.571250833950143e17,3.589379010772141e17,3.6075071875941395e17,3.6256353644161376e17,3.643763541238136e17,3.6618917180601344e17,3.6800198948821325e17,3.698148071704131e17,3.716276248526129e17,3.734404425348128e17,3.752532602170126e17,3.770660778992124e17,3.788788955814123e17,3.806917132636121e17,3.82504530945812e17,3.843173486280118e17,3.861301663102116e17,3.8794298399241146e17,3.8975580167461126e17,3.9156861935681114e17,3.9338143703901094e17,3.9519425472121075e17,3.970070724034106e17,3.9881989008561043e17,4.006327077678103e17,4.024455254500101e17,4.042583431322099e17,4.060711608144098e17,4.078839784966096e17,4.096967961788095e17,4.115096138610093e17,4.133224315432091e17,4.1513524922540896e17,4.1694806690760877e17,4.1876088458980864e17,4.2057370227200845e17,4.2238651995420826e17,4.241993376364081e17,4.2601215531860794e17,4.2782497300080774e17,4.296377906830076e17,4.314506083652074e17,4.332634260474073e17,4.350762437296071e17,4.368890614118069e17,4.387018790940068e17,4.405146967762066e17,4.4232751445840646e17,4.441403321406063e17,4.459531498228061e17,4.4776596750500595e17,4.4957878518720576e17,4.5139160286940563e17,4.5320442055160544e17,4.5501723823380525e17,4.568300559160051e17,4.586428735982049e17,4.604556912804048e17,4.622685089626046e17,4.640813266448044e17,4.658941443270043e17,4.677069620092041e17,4.6951977969140397e17,4.713325973736038e17,4.731454150558036e17,4.7495823273800346e17,4.7677105042020326e17,4.7858386810240314e17,4.8039668578460294e17,4.8220950346680275e17,4.840223211490026e17,4.858351388312024e17,4.876479565134023e17,4.894607741956021e17,4.912735918778019e17,4.930864095600018e17,4.948992272422016e17,4.967120449244015e17,4.985248626066013e17,5.003376802888011e17,5.0215049797100096e17,5.039633156532008e17,5.0577613333540064e17,5.0758895101760045e17,5.0940176869980026e17,5.112145863820001e17,5.1302740406419994e17,5.148402217463998e17,5.166530394285996e17,5.184658571107994e17,5.202786747929993e17,5.220914924751991e17,5.23904310157399e17,5.257171278395988e17,5.275299455217986e17,5.2934276320399846e17,5.311555808861983e17,5.329683985683981e17,5.3478121625059795e17,5.3659403393279776e17,5.384068516149976e17,5.4021966929719744e17,5.4203248697939725e17,5.438453046615971e17,5.456581223437969e17,5.474709400259968e17,5.492837577081966e17,5.510965753903964e17,5.529093930725963e17,5.547222107547961e17,5.56535028436996e17,5.583478461191958e17,5.601606638013956e17,5.6197348148359546e17,5.6378629916579526e17,5.6559911684799514e17,5.6741193453019494e17,5.6922475221239475e17,5.710375698945946e17,5.7285038757679443e17,5.746632052589943e17,5.764760229411941e17,5.782888406233939e17,5.801016583055937e17,5.819144759877937e17,5.837272936699935e17,5.855401113521933e17,5.873529290343931e17,5.891657467165929e17,5.909785643987928e17,5.927913820809926e17,5.946041997631924e17,5.964170174453923e17,5.982298351275921e17,6.00042652809792e17,6.018554704919918e17,6.036682881741916e17,6.054811058563914e17,6.072939235385912e17,6.091067412207912e17,6.10919558902991e17,6.127323765851908e17,6.145451942673906e17,6.163580119495904e17,6.181708296317903e17,6.199836473139901e17,6.2179646499619e17,6.236092826783898e17,6.254221003605896e17,6.272349180427895e17,6.290477357249893e17,6.308605534071891e17,6.326733710893889e17,6.344861887715887e17,6.362990064537887e17,6.381118241359885e17,6.399246418181883e17,6.417374595003881e17,6.435502771825879e17,6.453630948647878e17,6.471759125469876e17,6.489887302291875e17,6.508015479113873e17,6.526143655935871e17,6.54427183275787e17,6.562400009579868e17,6.580528186401866e17,6.598656363223864e17,6.616784540045862e17,6.634912716867862e17,6.65304089368986e17,6.671169070511858e17,6.689297247333856e17,6.707425424155854e17,6.725553600977853e17,6.743681777799852e17,6.76180995462185e17,6.779938131443848e17,6.798066308265846e17,6.816194485087844e17,6.834322661909843e17,6.852450838731841e17,6.870579015553839e17,6.888707192375837e17,6.906835369197836e17,6.924963546019835e17,6.943091722841833e17,6.961219899663831e17,6.979348076485829e17,6.997476253307827e17,7.015604430129827e17,7.033732606951825e17,7.051860783773823e17,7.069988960595821e17,7.088117137417819e17,7.106245314239818e17,7.124373491061816e17,7.142501667883814e17,7.160629844705812e17,7.17875802152781e17,7.19688619834981e17,7.215014375171808e17,7.233142551993806e17,7.251270728815804e17,7.269398905637802e17,7.287527082459802e17,7.3056552592818e17,7.323783436103798e17,7.341911612925796e17,7.360039789747794e17,7.378167966569793e17,7.396296143391791e17,7.41442432021379e17,7.432552497035788e17,7.450680673857786e17,7.468808850679785e17,7.486937027501783e17,7.505065204323781e17,7.523193381145779e17,7.541321557967777e17,7.559449734789777e17,7.577577911611775e17,7.595706088433773e17,7.613834265255771e17,7.631962442077769e17,7.650090618899768e17,7.668218795721766e17,7.686346972543764e17,7.704475149365763e17,7.72260332618776e17,7.74073150300976e17,7.758859679831758e17,7.776987856653756e17,7.795116033475754e17,7.813244210297752e17,7.831372387119752e17,7.84950056394175e17,7.867628740763748e17,7.885756917585746e17,7.903885094407744e17,7.922013271229743e17,7.940141448051741e17,7.95826962487374e17,7.976397801695738e17,7.994525978517736e17,8.012654155339735e17,8.030782332161733e17,8.048910508983731e17,8.067038685805729e17,8.085166862627727e17,8.103295039449727e17,8.121423216271725e17,8.139551393093723e17,8.157679569915721e17,8.175807746737719e17,8.193935923559718e17,8.212064100381716e17,8.230192277203715e17,8.248320454025713e17,8.266448630847711e17,8.28457680766971e17,8.302704984491708e17,8.320833161313706e17,8.338961338135704e17,8.357089514957702e17,8.375217691779702e17,8.3933458686017e17,8.411474045423698e17,8.429602222245696e17,8.447730399067694e17,8.465858575889693e17,8.483986752711692e17,8.50211492953369e17,8.520243106355688e17,8.538371283177686e17,8.556499459999685e17,8.574627636821683e17,8.592755813643681e17,8.61088399046568e17,8.629012167287677e17,8.647140344109677e17,8.665268520931675e17,8.683396697753673e17,8.701524874575671e17,8.719653051397669e17,8.737781228219668e17,8.755909405041667e17,8.774037581863665e17,8.792165758685663e17,8.810293935507661e17,8.82842211232966e17,8.846550289151658e17,8.864678465973656e17,8.882806642795654e17,8.900934819617652e17,8.91906299643965e17,8.93719117326165e17,8.955319350083648e17,8.973447526905646e17,8.991575703727644e17,9.009703880549642e17,9.027832057371642e17,9.04596023419364e17,9.064088411015638e17,9.082216587837636e17,9.100344764659634e17,9.118472941481633e17,9.136601118303631e17,9.15472929512563e17,9.172857471947628e17,9.190985648769626e17,9.209113825591625e17,9.227242002413623e17,9.245370179235621e17,9.263498356057619e17,9.281626532879617e17,9.299754709701617e17,9.317882886523615e17,9.336011063345613e17,9.354139240167611e17,9.372267416989609e17,9.390395593811608e17,9.408523770633606e17,9.426651947455604e17,9.444780124277603e17,9.462908301099601e17,9.4810364779216e17,9.499164654743598e17,9.517292831565596e17,9.535421008387594e17,9.553549185209592e17,9.571677362031592e17,9.58980553885359e17,9.607933715675588e17,9.626061892497586e17,9.644190069319584e17,9.662318246141583e17,9.680446422963581e17,9.69857459978558e17,9.716702776607578e17,9.734830953429576e17,9.752959130251575e17,9.771087307073573e17,9.789215483895571e17,9.807343660717569e17,9.825471837539567e17,9.843600014361567e17,9.861728191183565e17,9.879856368005563e17,9.897984544827561e17,9.916112721649559e17,9.934240898471558e17,9.952369075293556e17,9.970497252115555e17,9.988625428937553e17,1.0006753605759551e18,1.002488178258155e18,1.0043009959403548e18,1.0061138136225546e18,1.0079266313047544e18,1.0097394489869542e18,1.0115522666691542e18,1.013365084351354e18,1.0151779020335538e18,1.0169907197157536e18,1.0188035373979534e18,1.0206163550801533e18,1.0224291727623532e18,1.024241990444553e18,1.0260548081267528e18,1.0278676258089526e18,1.0296804434911525e18,1.0314932611733523e18,1.0333060788555521e18,1.0351188965377519e18,1.0369317142199517e18,1.0387445319021517e18,1.0405573495843515e18,1.0423701672665513e18,1.0441829849487511e18,1.0459958026309509e18,1.0478086203131508e18,1.0496214379953507e18,1.0514342556775505e18,1.0532470733597503e18,1.0550598910419501e18,1.05687270872415e18,1.0586855264063498e18,1.0604983440885496e18,1.0623111617707494e18,1.0641239794529492e18,1.0659367971351492e18,1.067749614817349e18,1.0695624324995488e18,1.0713752501817486e18,1.0731880678639484e18,1.0750008855461484e18,1.0768137032283482e18,1.078626520910548e18,1.0804393385927478e18,1.0822521562749476e18,1.0840649739571475e18,1.0858777916393473e18,1.0876906093215471e18,1.089503427003747e18,1.0913162446859468e18,1.0931290623681466e18,1.0949418800503465e18,1.0967546977325463e18,1.0985675154147461e18,1.1003803330969459e18,1.1021931507791457e18,1.1040059684613457e18,1.1058187861435455e18,1.1076316038257453e18,1.1094444215079451e18,1.1112572391901449e18,1.1130700568723448e18,1.1148828745545446e18,1.1166956922367444e18,1.1185085099189443e18,1.120321327601144e18,1.122134145283344e18,1.1239469629655438e18,1.1257597806477436e18,1.1275725983299434e18,1.1293854160121432e18,1.1311982336943432e18,1.133011051376543e18,1.1348238690587428e18,1.1366366867409426e18,1.1384495044231424e18,1.1402623221053423e18,1.1420751397875421e18,1.143887957469742e18,1.1457007751519418e18,1.1475135928341416e18,1.1493264105163415e18,1.1511392281985413e18,1.152952045880741e18,1.154764863562941e18,1.1565776812451407e18,1.1583904989273405e18,1.1602033166095404e18,1.1620161342917404e18,1.1638289519739402e18,1.16564176965614e18,1.1674545873383398e18,1.1692674050205396e18,1.1710802227027395e18,1.1728930403849393e18,1.174705858067139e18,1.176518675749339e18,1.1783314934315387e18,1.1801443111137388e18,1.1819571287959386e18,1.1837699464781384e18,1.1855827641603382e18,1.187395581842538e18,1.1892083995247378e18,1.1910212172069376e18,1.1928340348891374e18,1.1946468525713372e18,1.196459670253537e18,1.1982724879357368e18,1.200085305617937e18,1.2018981233001367e18,1.2037109409823365e18,1.2055237586645363e18,1.207336576346736e18,1.209149394028936e18,1.2109622117111357e18,1.2127750293933356e18,1.2145878470755354e18,1.2164006647577352e18,1.2182134824399352e18,1.220026300122135e18,1.2218391178043348e18,1.2236519354865347e18,1.2254647531687345e18,1.2272775708509343e18,1.229090388533134e18,1.230903206215334e18,1.2327160238975337e18,1.2345288415797335e18,1.2363416592619336e18,1.2381544769441334e18,1.2399672946263332e18,1.241780112308533e18,1.2435929299907328e18,1.2454057476729326e18,1.2472185653551324e18,1.2490313830373322e18,1.250844200719532e18,1.2526570184017318e18,1.254469836083932e18,1.2562826537661317e18,1.2580954714483315e18,1.2599082891305313e18,1.2617211068127311e18,1.263533924494931e18,1.2653467421771308e18,1.2671595598593306e18,1.2689723775415304e18,1.2707851952237302e18,1.2725980129059302e18,1.27441083058813e18,1.2762236482703299e18,1.2780364659525297e18,1.2798492836347295e18,1.2816621013169293e18,1.283474918999129e18,1.285287736681329e18,1.2871005543635287e18,1.2889133720457285e18,1.2907261897279286e18,1.2925390074101284e18,1.2943518250923282e18,1.296164642774528e18,1.2979774604567278e18,1.2997902781389276e18,1.3016030958211274e18,1.3034159135033272e18,1.305228731185527e18,1.3070415488677268e18,1.308854366549927e18,1.3106671842321267e18,1.3124800019143265e18,1.3142928195965263e18,1.3161056372787261e18,1.317918454960926e18,1.3197312726431258e18,1.3215440903253256e18,1.3233569080075254e18,1.3251697256897252e18,1.3269825433719252e18,1.328795361054125e18,1.3306081787363249e18,1.3324209964185247e18,1.3342338141007245e18,1.3360466317829243e18,1.337859449465124e18,1.339672267147324e18,1.3414850848295237e18,1.3432979025117235e18,1.3451107201939236e18,1.3469235378761234e18,1.3487363555583232e18,1.350549173240523e18,1.3523619909227228e18,1.3541748086049226e18,1.3559876262871224e18,1.3578004439693222e18,1.359613261651522e18,1.3614260793337219e18,1.363238897015922e18,1.3650517146981217e18,1.3668645323803215e18,1.3686773500625213e18,1.3704901677447212e18,1.372302985426921e18,1.3741158031091208e18,1.3759286207913206e18,1.3777414384735204e18,1.3795542561557202e18,1.3813670738379203e18,1.38317989152012e18,1.38499270920232e18,1.3868055268845197e18,1.3886183445667195e18,1.3904311622489193e18,1.392243979931119e18,1.394056797613319e18,1.3958696152955187e18,1.3976824329777185e18,1.3994952506599186e18,1.4013080683421184e18,1.4031208860243182e18,1.404933703706518e18,1.4067465213887178e18,1.4085593390709176e18,1.4103721567531174e18,1.4121849744353172e18,1.413997792117517e18,1.4158106097997169e18,1.4176234274819167e18,1.4194362451641167e18,1.4212490628463165e18,1.4230618805285164e18,1.4248746982107162e18,1.426687515892916e18,1.4285003335751158e18,1.4303131512573156e18,1.4321259689395154e18,1.4339387866217152e18,1.435751604303915e18,1.437564421986115e18,1.439377239668315e18,1.4411900573505147e18,1.4430028750327145e18,1.4448156927149143e18,1.446628510397114e18,1.448441328079314e18,1.4502541457615137e18,1.4520669634437135e18,1.4538797811259133e18,1.4556925988081134e18,1.4575054164903132e18,1.459318234172513e18,1.4611310518547128e18,1.4629438695369126e18,1.4647566872191124e18,1.4665695049013123e18,1.468382322583512e18,1.4701951402657119e18,1.4720079579479117e18,1.4738207756301117e18,1.4756335933123116e18,1.4774464109945114e18,1.4792592286767112e18,1.481072046358911e18,1.4828848640411108e18,1.4846976817233106e18,1.4865104994055104e18,1.4883233170877102e18,1.49013613476991e18,1.49194895245211e18,1.49376177013431e18,1.4955745878165097e18,1.4973874054987095e18,1.4992002231809093e18,1.501013040863109e18,1.502825858545309e18,1.5046386762275087e18,1.5064514939097085e18,1.5082643115919084e18,1.5100771292741084e18,1.5118899469563082e18,1.513702764638508e18,1.5155155823207078e18,1.5173284000029076e18,1.5191412176851075e18,1.5209540353673073e18,1.522766853049507e18,1.524579670731707e18,1.5263924884139067e18,1.5282053060961068e18,1.5300181237783066e18,1.5318309414605064e18,1.5336437591427062e18,1.535456576824906e18,1.5372693945071058e18,1.5390822121893056e18,1.5408950298715054e18,1.5427078475537052e18,1.544520665235905e18,1.546333482918105e18,1.548146300600305e18,1.5499591182825047e18,1.5517719359647045e18,1.5535847536469043e18,1.5553975713291041e18,1.557210389011304e18,1.5590232066935037e18,1.5608360243757036e18,1.5626488420579034e18,1.5644616597401034e18,1.5662744774223032e18,1.568087295104503e18,1.5699001127867028e18,1.5717129304689027e18,1.5735257481511025e18,1.5753385658333023e18,1.577151383515502e18,1.578964201197702e18,1.5807770188799017e18,1.5825898365621018e18,1.5844026542443016e18,1.5862154719265014e18,1.5880282896087012e18,1.589841107290901e18,1.5916539249731008e18,1.5934667426553006e18,1.5952795603375004e18,1.5970923780197002e18,1.5989051957019e18,1.6007180133841e18,1.6025308310663e18,1.6043436487484997e18,1.6061564664306995e18,1.6079692841128993e18,1.6097821017950991e18,1.611594919477299e18,1.6134077371594988e18,1.6152205548416986e18,1.6170333725238984e18,1.6188461902060982e18,1.6206590078882982e18,1.622471825570498e18,1.6242846432526979e18,1.6260974609348977e18,1.6279102786170975e18,1.6297230962992973e18,1.631535913981497e18,1.633348731663697e18,1.6351615493458967e18,1.6369743670280965e18,1.6387871847102966e18,1.6406000023924964e18,1.6424128200746962e18,1.644225637756896e18,1.6460384554390958e18,1.6478512731212956e18,1.6496640908034954e18,1.6514769084856952e18,1.653289726167895e18,1.6551025438500948e18,1.656915361532295e18,1.6587281792144947e18,1.6605409968966945e18,1.6623538145788943e18,1.6641666322610941e18,1.665979449943294e18,1.6677922676254938e18,1.6696050853076936e18,1.6714179029898934e18,1.6732307206720932e18,1.6750435383542932e18,1.676856356036493e18,1.6786691737186929e18,1.6804819914008927e18,1.6822948090830925e18,1.6841076267652923e18,1.685920444447492e18,1.687733262129692e18,1.6895460798118917e18,1.6913588974940915e18,1.6931717151762916e18,1.6949845328584914e18,1.6967973505406912e18,1.698610168222891e18,1.7004229859050908e18,1.7022358035872906e18,1.7040486212694904e18,1.7058614389516902e18,1.70767425663389e18,1.7094870743160899e18,1.71129989199829e18,1.7131127096804897e18,1.7149255273626895e18,1.7167383450448893e18,1.7185511627270892e18,1.720363980409289e18,1.7221767980914888e18,1.7239896157736886e18,1.7258024334558884e18,1.7276152511380882e18,1.7294280688202883e18,1.731240886502488e18,1.7330537041846879e18,1.7348665218668877e18,1.7366793395490875e18,1.7384921572312873e18,1.740304974913487e18,1.742117792595687e18,1.7439306102778867e18,1.7457434279600865e18,1.7475562456422866e18,1.7493690633244864e18,1.7511818810066862e18,1.752994698688886e18,1.7548075163710858e18,1.7566203340532856e18,1.7584331517354854e18,1.7602459694176852e18,1.762058787099885e18,1.7638716047820849e18,1.765684422464285e18,1.7674972401464847e18,1.7693100578286845e18,1.7711228755108844e18,1.7729356931930842e18,1.774748510875284e18,1.7765613285574838e18,1.7783741462396836e18,1.7801869639218834e18,1.7819997816040832e18,1.7838125992862833e18,1.785625416968483e18,1.787438234650683e18,1.7892510523328827e18,1.7910638700150825e18,1.7928766876972823e18,1.794689505379482e18,1.796502323061682e18,1.7983151407438817e18,1.8001279584260815e18,1.8019407761082816e18,1.8037535937904814e18,1.8055664114726812e18,1.807379229154881e18,1.8091920468370808e18,1.8110048645192806e18]}
},{}],85:[function(require,module,exports){
module.exports={"expected":[1.4695761589768238e-15,-0.964474036965116,-27.639385539309814,1.1148355568422008,0.07245535362129163,-0.8337548073494883,-9.180954248158752,1.2916227795967024,0.14567547116534252,-0.7179293425740855,-5.469882355126812,1.5049156412977849,0.22045774922595393,-0.6135580348424844,-3.8654593963979544,1.7704156972977507,0.29766785392899286,-0.5180715194346442,-2.9631148916841754,2.114053591055239,0.37828185039076656,-0.42949421768118984,-2.379743901901522,2.5820065007541846,0.4634394038786121,-0.3462634383068229,-1.967962285311665,3.2653428234795197,0.554514618609342,-0.2671067398821419,-1.6589572126461911,4.3722312217553005,0.653214533631977,-0.1909557596198657,-1.4162661931388025,6.505608406613792,0.7617213114316034,-0.1168832367581559,-1.218747738859836,12.443516159795704,0.882904880221367,-0.04405479120514181,-1.053282487525432,127.1940098936875,1.0206525898024514,0.028310196115136896,-0.911281793472932,-15.490289214531634,1.1804006289277813,0.10097266742350139,-0.7868714839183508,-7.264495499117512,1.3700296073885434,0.17470617321171952,-0.6758820330561729,-4.711915780969912,1.6014549561360183,0.2503303073851776,-0.5752556773555983,-3.4586612781635107,1.8936364991945815,0.3287484246305248,-0.4826819686409894,-2.7076682518298143,2.2787450169640335,0.41099347150638527,-0.39636459843871136,-2.203014387021733,2.8161706325193294,0.4982871576036841,-0.3148666716395644,-1.8372903975852832,3.6291397559350083,0.5921201643345024,-0.2370043537714894,-1.5574984715292233,5.022180509799906,0.6943653727480827,-0.1617710301240556,-1.3344514674506105,8.008971289054502,0.807443608868555,-0.0882809201943779,-1.1507337891978444,19.25491758435895,0.9345749743714784,-0.015724982894803664,-0.9952939845743556,-48.914967181370486,1.0801742868970652,0.05666580801700474,-0.8607650920704407,-10.748434459980965,1.2504992244364894,0.1296534852891387,-0.742031434911709,-6.001849236738341,1.4547639990087884,0.20402547238172386,-0.6354136087103699,-4.132367366286038,1.7071636927931446,0.28062929527987035,-0.5381808821059029,-3.1244221070305644,2.0308172239971554,0.3604129597890697,-0.4482465633865906,-2.4885956999337076,2.4661508415181954,0.4444752733386364,-0.3639702342662005,-2.0470351733802046,3.09090758677049,0.5341321460714594,-0.284024697203425,-1.7195399614025537,4.076250709236559,0.6310079710312155,-0.20730322768261558,-1.464609137052321,5.887580516682626,0.7371665078615963,-0.13285240062477172,-1.25859339655553,10.393962198919326,0.8553051281902156,-0.05982121589560904,-1.0870114774916109,42.391014704629214,0.9890535501154701,0.012579613061529294,-0.9404838064389389,-20.499335183583632,1.1434511575500392,0.08511254338823862,-0.8126518474617497,-8.219124505230583,1.3257432206884248,0.15854562559562851,-0.6990365394535312,-5.105966289668649,1.5467776996750155,0.23368543583964455,-0.5963754039811096,-3.6742173510077976,1.8236091736496127,0.3114135695585728,-0.502218876022749,-2.8445067481367294,2.184733967170516,0.39273032541551983,-0.4146741735238082,-2.2983599923470104,2.681689099287009,0.4788104282914161,-0.33223664889218624,-1.908144263470786,3.418336591502772,0.5710778303854963,-0.25367475442190823,-1.6127216473072965,4.640016262480373,0.6713104294088932,-0.1779486871962904,-1.3791161357063837,7.0991701667992295,0.7817921817640465,-0.1041504864567378,-1.1879551400926995,14.767761718272048,0.9055419875182246,-0.031457744506133915,-1.0270939959648058,-211.99281182766165,1.0466708438299366,0.04090437650597005,-0.8885166060125365,-12.95355582097576,1.2109617932765402,0.11369669769911758,-0.7667026350778856,-6.644693601458517,1.4068555920371075,0.1876982975899878,-0.6577103466554208,-4.436374181715552,1.647218920528296,0.26374045454169615,-0.5586335162986836,-3.302398846645633,1.952732573634858,0.3427454711769183,-0.46726514386896356,-2.6063138895723106,2.358945526952499,0.4257743973175857,-0.3818808840300616,-2.131368025741047,2.9326430460569,0.5140892153431622,-0.30109445328845197,-1.783490045132364,3.8159286218688337,0.6092377717880411,-0.2237576245672393,-1.5152313427369273,5.374292255120695,0.7131744560758958,-0.14888842658873255,-1.3000480989152836,8.920265509926095,0.8284379379329854,-0.07561733107583887,-1.1219135952399464,25.426221681354495,0.9584223677474134,-0.0031447477574990967,-0.9705625276223674,-30.273904647342793,1.107806974516194,0.06929481677571868,-0.8390996311772527,-9.457143615787558,1.2832656277865624,0.14246545818477716,-0.7227057479336724,-5.5688185803157655,1.4946971197136396,0.21716244621637573,-0.6178950018947647,-3.9162091707263644,1.7574861265604587,0.2942476637828833,-0.5220668206746326,-2.994159967295812,2.0969678543945216,0.37469136940526054,-0.43322409999300115,-2.400855921430787,2.55809067284137,0.45962479892715735,-0.3497890752959568,-1.9833816764699777,3.2290400977952562,0.5504100610519866,-0.27047868522399393,-1.6708186244661865,4.309828213722313,0.6487371532968997,-0.19421713626255876,-1.4257609951235848,6.372100065920058,0.7567637954942519,-0.12007211921999747,-1.2265935957367144,11.971890741202635,0.8773242302087543,-0.0472060789497435,-1.0599380763779398,90.85106719520223,1.0142524012417917,0.025163208116830933,-0.9170545916888939,-16.286814403656923,1.1729019959706062,0.09779686587808328,-0.7919759860219082,-7.437551146933833,1.3610210399367146,0.17146722018949404,-0.6804731117879272,-4.785978131281073,1.5903011783003251,0.24699112187557176,-0.5794486674545822,-3.4998728029926323,1.8793004997945262,0.32526740538794324,-0.48656528018136147,-2.7340936254364494,2.2594091662499998,0.4073222716074945,-0.40000794276946294,-2.2215498646329506,2.7883320086124495,0.49436774181320164,-0.3183266188578565,-1.8511306354316315,3.585079467381371,0.5878807423303086,-0.2403282226979983,-1.5683247796846496,4.941000121604558,0.6897145615504322,-0.16499971803702285,-1.3432331107683577,7.809143923550164,0.8022617528708978,-0.09145105670635736,-1.1580693205789137,18.152599210630136,0.9287007726704155,-0.018870663827491047,-1.001573606164166,-57.8108847690417,1.073383389223991,0.053511524523334804,-0.866254695214172,-11.127708152522391,1.2424684636906926,0.12645717746190033,-0.7469191196979933,-6.120514421645744,1.4450085311075929,0.20075192045619306,-0.6398368884693477,-4.189961726778363,1.6949196010306984,0.2772398810132333,-0.5422433458846495,-3.1586017576812098,2.0148051089526704,0.35686373986845116,-0.45202850063271144,-2.511394636549156,2.44405144263056,0.4407145113115144,-0.3675356613488886,-2.0634632787789844,3.058038325148775,0.5300969886407261,-0.2874261700004976,-1.7320508075688694,4.021554537491703,0.6266197834750319,-0.21058525941596892,-1.4745453847224212,5.7774662378948465,0.7323240844178225,-0.136053990009894,-1.2667518960787014,10.061929312382704,0.8498744570566393,-0.06297781120485668,-1.093895572612376,37.401863168386754,0.9828518148349078,0.009434492078272651,-0.9464276939241554,-21.91525186637519,1.1362207129717983,0.08194586220778106,-0.817886774453052,-8.44042965750449,1.3171072840472469,0.15532343574752094,-0.7037282885968767,-5.1924866714943745,1.536160719462831,0.23037139235012566,-0.6006466345982041,-3.7203488200047854,1.8100839728697058,0.3079672242246123,-0.5061630332192351,-2.873354387090005,2.1667030222720403,0.3891050182483787,-0.41836448768301693,-2.3182605768087465,2.656144459037148,0.47495052946379757,-0.3357321697739654,-1.9228271903538317,3.3788696493980246,0.5669149624696473,-0.2570245417380079,-1.6241032013821224,4.570184836680289,0.6667580873414,-0.18119483225870225,-1.388281823380692,6.9410654426602845,0.7767377936845693,-0.10733038781511937,-1.1955663074916691,14.109365540315281,0.8998347792389848,-0.03460591571170399,-1.0335771478231683,-635.9826284744069,1.0401025820016532,0.03775477220311552,-0.8941597798006442,-13.506913688295956,1.203234923123287,0.11051243650338148,-0.7717080375836338,-6.789715464806963,1.3975278930344954,0.18444467881535595,-0.662224795902934,-4.502332216795481,1.6356016124746429,0.2603797485489903,-0.56276691129812,-3.340232616138398,1.9376887671338725,0.339235079549749,-0.4711021437269248,-2.6310230276366986,2.338453456446482,0.42206452496388375,-0.38548857235910267,-2.14891613060131,2.9027281128261175,0.5101197666984493,-0.30452754785961555,-1.7967118784207294,3.767572503075959,0.604934031454009,-0.22706214716770537,-1.525645823918624,5.281879551675895,0.7084408499302997,-0.15210439213931068,-1.3085425918975888,8.673803360757233,0.8231486998483251,-0.07878081270833255,-1.129041755026559,23.54077855869491,0.9524070683319563,-0.006289557715207828,-0.9766882983347417,-33.46283857733849,1.1008271941527925,0.0661356570850305,-0.8444727370136242,-9.750264457589228,1.2749756562202041,0.13925832020288892,-0.7275039136822775,-5.671281819617168,1.4845742119078746,0.2138716409991614,-0.622248856290157,-3.9682245482558396,1.7446986898797232,0.290833797426251,-0.52607526220715,-3.0257952333478384,2.080105983026688,0.3711093398595013,-0.4369641592075939,-2.422289161339499,2.5345565583583984,0.45582120535074344,-0.3533224772166448,-1.9989946236174005,3.193467233978421,0.5463196881064282,-0.2738563717165281,-1.6828053415845554,4.2490941225209635,0.6442780045063206,-0.19748249920217562,-1.4353413234823578,6.243837264834646,0.7518298196381459,-0.12326341081339372,-1.2345002150726803,11.53448890481704,0.8717742890897309,-0.0503583024582095,-1.066638182940466,70.66007756394002,1.007892910545297,0.022016718133675662,-0.9228607826138269,-17.16933692947398,1.1654584768562748,0.09462301714525229,-0.7971059777946984,-7.618895945570536,1.3520892583960644,0.16823175830878737,-0.6850838817055261,-4.862303927566575,1.5792584075364728,0.2436571195962909,-0.5836569665499012,-3.5420015893839136,1.8651329542368331,0.32179350022589615,-0.4904604938381744,-2.7609773525458174,2.2403461499272552,0.4036604647461892,-0.40366046474613454,-2.240346149926972,2.760977352546223,0.49046049383823276,-0.32179350022584424,-1.8651329542366224,3.5420015893845505,0.5836569665499642,-0.2436571195962411,-1.5792584075363083,4.862303927567734,0.6850838817055952,-0.168231758308739,-1.3520892583959312,7.618895945573313,0.7971059777947752,-0.09462301714520484,-1.1654584768561638,17.169336929487894,0.922860782613914,-0.02201671813362861,-1.0078929105452021,-70.66007756370516,1.0666381829405667,0.05035830245825665,-0.871774289089648,-11.534488904810736,1.234500215072799,0.12326341081344146,-0.7518298196380722,-6.243837264832766,1.4353413234825017,0.1974824992022245,-0.6442780045062539,-4.249094122520067,1.6828053415847355,0.2738563717165787,-0.5463196881063671,-3.1934672339778944,1.9989946236176355,0.3533224772166977,-0.4558212053506866,-2.5345565583580494,2.422289161339822,0.4369641592076499,-0.3711093398594478,-2.08010598302674,3.0257952333483162,0.5260752622071374,-0.2908337974262,-1.7446986898797627,3.968224548256627,0.6222488562901434,-0.2138716409991122,-1.4845742119079062,5.671281819618728,0.7275039136822625,-0.13925832020284099,-1.27497565622023,9.750264457593747,0.8444727370136074,-0.06613565708498326,-1.100827194152814,33.462838577391196,0.9766882983347225,0.006289557715254862,-0.9524070683319751,-23.5407785586688,1.1290417550265366,0.07878081270837987,-0.8231486998483415,-8.673803360753647,1.3085425918975622,0.1521043921393588,-0.7084408499303144,-5.281879551674536,1.525645823918591,0.22706214716775483,-0.6049340314540224,-3.767572503075244,1.796711878420688,0.30452754785966696,-0.5101197666984617,-2.9027281128256743,2.148916130601255,0.3854885723591567,-0.4220645249638953,-2.3384534564461776,2.631023027636621,0.4711021437269823,-0.33923507954975995,-1.937688767133649,3.3402326161382785,0.5627669112981819,-0.26037974854900076,-1.63560161247447,4.502332216795272,0.6622247959030017,-0.1844446788153661,-1.3975278930343566,6.789715464806501,0.7717080375837089,-0.1105124365033914,-1.203234923123172,13.506913688294155,0.8941597798007289,-0.03775477220312535,-1.0401025820015553,635.982628470438,1.0335771478232658,0.03460591571169416,-0.8998347792388998,-14.109365540317244,1.1955663074917833,0.10733038781510945,-0.7767377936844938,-6.941065442660768,1.3882818233808296,0.18119483225869212,-0.6667580873414142,-4.5701848366792595,1.6241032013822936,0.25702454173799744,-0.5669149624696603,-3.3788696493974406,1.9228271903540526,0.3357321697739545,-0.4749505294638096,-2.6561444590367693,2.3182605768090463,0.41836448768300544,-0.38910501824839,-2.1667030222717725,2.87335438709044,0.5061630332192227,-0.3079672242246231,-1.8100839728695046,3.7203488200054835,0.6006466345981908,-0.23037139235001627,-1.5361607194626732,5.19248667149569,0.7037282885968621,-0.15532343574741456,-1.3171072840471183,8.440429657507888,0.8178867744530357,-0.0819458622076765,-1.1362207129716904,21.915251866397824,0.9464276939241368,-0.009434492078168768,-0.9828518148348153,-37.401863168320915,1.0938955726123545,0.06297781120496097,-0.8498744570565584,-10.061929312377895,1.2667518960786759,0.13605399000999976,-0.7323240844177503,-5.777466237893229,1.4745453847223902,0.21058525941607742,-0.6266197834749664,-4.021554537490895,1.7320508075688301,0.28742617000061005,-0.5300969886406658,-3.0580383251482877,2.0634632787789324,0.3675356613490065,-0.4407145113114582,-2.444051442630232,2.5113946365490847,0.45202850063283656,-0.3568637398683981,-2.0148051089524324,3.158601757681102,0.5422433458847838,-0.2772398810131827,-1.694919601030516,4.189961726778181,0.6398368884694942,-0.20075192045614415,-1.4450085311074476,6.1205144216453675,0.746919119698155,-0.12645717746185253,-1.242468463690573,11.127708152521167,0.8662546952143537,-0.05351152452328764,-1.0733833892238898,57.8108847690089,1.001573606164374,0.018870663827538093,-0.9287007726703279,-18.15259921063338,1.1580693205791568,0.09145105670640478,-0.8022617528708205,-7.809143923550772,1.343233110768649,0.16499971803707114,-0.6897145615503628,-4.941000121604808,1.5683247796850088,0.24032822269804804,-0.5878807423302453,-3.5850794673815067,1.8511306354320913,0.31832661885790836,-0.49436774181314314,-2.788332008612535,2.221549864633398,0.4000079427695175,-0.4073222716074728,-2.2594091662500597,2.734093625437089,0.48656528018141965,-0.32526740538792265,-1.8793004997945708,3.499872802993632,0.5794486674546451,-0.24699112187555203,-1.5903011783003598,4.785978131282877,0.6804731117879961,-0.17146722018947488,-1.3610210399367426,7.437551146938082,0.7919759860219848,-0.0977968658780645,-1.1729019959706295,16.286814403677013,0.9170545916889805,-0.02516320811681231,-1.0142524012418115,-90.85106719457939,1.0599380763780397,0.04720607894976215,-0.8773242302087717,-11.971890741191745,1.2265935957368321,0.12007211922001634,-0.7567637954942673,-6.37210006591692,1.4257609951237276,0.19421713626257808,-0.6487371532969137,-4.309828213720836,1.6708186244663648,0.2704786852240139,-0.5504100610519995,-3.2290400977943943,1.9833816764702097,0.3497890752959777,-0.45962479892716923,-2.5580906728408013,2.4008559214311056,0.4332240999930233,-0.3746913694052717,-2.0969678543941144,2.9941599672962806,0.5220668206746564,-0.29424766378289396,-1.75748612656015,3.916209170727133,0.6178950018947903,-0.217162446216386,-1.4946971197133956,5.568818580317271,0.7227057479337007,-0.14246545818478717,-1.2832656277863628,9.45714361579181,0.8390996311772845,-0.06929481677572853,-1.1078069745160262,30.273904647385944,0.9705625276224035,0.0031447477574892842,-0.9584223677472687,-25.42622168132404,1.1219135952399886,0.07561733107582899,-0.8284379379328581,-8.920265509922304,1.3000480989153336,0.1488884265887225,-0.713174456075782,-5.37429225511929,1.5152313427369886,0.22375762456722897,-0.6092377717879376,-3.815928621868102,1.7834900451324418,0.3010944532884413,-0.5140892153430668,-2.9326430460564485,2.13136802574115,0.3818808840300503,-0.42577439731749656,-2.35894552695219,2.6063138895724554,0.46726514386895157,-0.34274547117683396,-1.9527325736346317,3.3023988466458545,0.5586335162986708,-0.26374045454161543,-1.6472189205281214,4.436374181715937,0.6577103466554067,-0.18769829758990966,-1.4068555920369674,6.644693601459357,0.7667026350780054,-0.11369669769906994,-1.2109617932764942,12.953555820974104,0.8885166060126715,-0.04090437650592294,-1.0466708438298977,211.99281182722066,1.0270939959649608,0.031457744506180996,-0.9055419875181907,-14.767761718274198,1.1879551400928816,0.10415048645678533,-0.7817921817640165,-7.099170166799734,1.3791161357066026,0.17794868719633894,-0.6713104294088662,-4.640016262480594,1.6127216473075683,0.2536747544219583,-0.5710778303854717,-3.4183365915028965,1.908144263471136,0.3322366488922385,-0.47881042829139325,-2.681689099287089,2.2983599923474842,0.4146741735238633,-0.39273032541549835,-2.184733967170573,2.844506748137415,0.5022188760228079,-0.31141356955855237,-1.8236091736496551,3.674217351008892,0.5963754039811734,-0.23368543583962492,-1.5467776996750489,5.105966289670691,0.6990365394536011,-0.15854562559560945,-1.3257432206884516,8.219124505235756,0.8126518474618278,-0.08511254338821987,-1.1434511575500619,20.499335183615415,0.9404838064390275,-0.01257961306151068,-0.9890535501154896,-42.39101470449355,1.0870114774917135,0.05982121589562772,-0.8553051281902326,-10.3939621989111,1.2585933965556517,0.13285240062479067,-0.7371665078616115,-5.887580516679935,1.4646091370524692,0.20730322768263498,-0.6310079710312293,-4.07625070923523,1.71953996140274,0.28402469720344514,-0.534132146071472,-3.090907586769694,2.0470351733804484,0.3639702342662216,-0.44447527333864817,-2.466150841517661,2.4885956999340455,0.4482465633866129,-0.3604129597890808,-2.0308172239967686,3.1244221070310707,0.5381808821059268,-0.2806292952798809,-1.7071636927928493,4.132367366286888,0.6354136087103961,-0.20402547238173407,-1.4547639990085532,6.001849236740082,0.7420314349117378,-0.12965348528914866,-1.250499224436296,10.748434459986445,0.8607650920704731,-0.05666580801701459,-1.0801742868969018,48.914967181483064,0.9952939845743927,0.01572498289479385,-0.9345749743713371,-19.254917584341467,1.1507337891978877,0.08828092019436802,-0.8074436088684305,-8.008971289051438,1.3344514674506625,0.16177103012404553,-0.6943653727479708,-5.022180509798673,1.557498471529287,0.23700435377147905,-0.5921201643344005,-3.6291397559343417,1.8372903975853647,0.3148666716395536,-0.49828715760358994,-2.8161706325189093,2.2030143870218417,0.3963645984387,-0.41099347150629706,-2.278745016963742,2.7076682518299697,0.4826819686409773,-0.3287484246304411,-1.893636499194366,3.458661278163752,0.5752556773555854,-0.25033030738509743,-1.6014549561358506,4.711915780970344,0.6758820330561586,-0.17470617321164175,-1.3700296073884082,7.264495499118513,0.786871483918335,-0.10097266742342517,-1.1804006289276687,15.490289214536118,0.911281793472914,-0.028310196115075605,-1.0206525898023846,-127.19400989361633,1.0532824875253812,0.04405479120520317,-0.8829048802213086,-12.443516159795019,1.2187477388597765,0.11688323675821798,-0.7617213114315515,-6.505608406613602,1.4162661931387517,0.19095575961993652,-0.6532145336319201,-4.372231221755069,1.6589572126461276,0.2671067398822151,-0.5545146186092899,-3.265342823479385,1.9679622853115826,0.34626343830689943,-0.46343940387856364,-2.5820065007540967,2.379743901901362,0.4294942176812624,-0.37828185039072904,-2.114053591055215,2.9631148916839405,0.518071519434722,-0.29766785392895717,-1.7704156972977325,3.8654593963975716,0.6135580348425687,-0.2204577492259195,-1.5049156412977707,5.469882355126069,0.7179293425741783,-0.14567547116530902,-1.2916227795966906,9.180954248156702,0.8337548073495921,-0.07245535362125864,-1.114835556842191,27.639385539291435,0.9644740369652341,3.135095805817224e-14],"x":[-37.69911184307752,-38.466427766476826,-39.233743689876135,-40.001059613275444,-40.76837553667475,-41.53569146007406,-42.30300738347337,-43.07032330687268,-43.83763923027199,-44.6049551536713,-45.37227107707061,-46.139587000469916,-46.906902923869225,-47.674218847268534,-48.44153477066784,-49.20885069406715,-49.97616661746646,-50.74348254086577,-51.51079846426508,-52.27811438766439,-53.0454303110637,-53.812746234463006,-54.580062157862315,-55.34737808126162,-56.114694004660926,-56.882009928060235,-57.649325851459544,-58.41664177485885,-59.18395769825816,-59.95127362165747,-60.71858954505678,-61.48590546845609,-62.2532213918554,-63.02053731525471,-63.787853238654016,-64.55516916205333,-65.32248508545264,-66.08980100885195,-66.85711693225126,-67.62443285565057,-68.39174877904988,-69.15906470244919,-69.9263806258485,-70.6936965492478,-71.46101247264711,-72.22832839604642,-72.99564431944572,-73.76296024284503,-74.53027616624433,-75.29759208964364,-76.06490801304295,-76.83222393644226,-77.59953985984157,-78.36685578324088,-79.13417170664019,-79.9014876300395,-80.6688035534388,-81.43611947683812,-82.20343540023742,-82.97075132363673,-83.73806724703604,-84.50538317043535,-85.27269909383466,-86.04001501723397,-86.80733094063328,-87.57464686403259,-88.3419627874319,-89.1092787108312,-89.87659463423051,-90.64391055762982,-91.41122648102913,-92.17854240442844,-92.94585832782775,-93.71317425122706,-94.48049017462637,-95.24780609802568,-96.01512202142499,-96.7824379448243,-97.5497538682236,-98.31706979162291,-99.08438571502222,-99.85170163842153,-100.61901756182084,-101.38633348522015,-102.15364940861946,-102.92096533201877,-103.68828125541808,-104.45559717881738,-105.2229131022167,-105.990229025616,-106.75754494901531,-107.52486087241462,-108.29217679581393,-109.05949271921324,-109.82680864261255,-110.59412456601186,-111.36144048941117,-112.12875641281047,-112.89607233620978,-113.66338825960909,-114.4307041830084,-115.19802010640771,-115.96533602980702,-116.73265195320633,-117.49996787660564,-118.26728380000495,-119.03459972340426,-119.80191564680356,-120.56923157020287,-121.33654749360218,-122.10386341700149,-122.8711793404008,-123.63849526380011,-124.40581118719942,-125.17312711059873,-125.94044303399804,-126.70775895739735,-127.47507488079665,-128.24239080419596,-129.00970672759527,-129.77702265099458,-130.5443385743939,-131.3116544977932,-132.0789704211925,-132.84628634459182,-133.61360226799113,-134.38091819139044,-135.14823411478974,-135.91555003818905,-136.68286596158836,-137.45018188498767,-138.21749780838698,-138.9848137317863,-139.7521296551856,-140.5194455785849,-141.28676150198422,-142.05407742538353,-142.82139334878283,-143.58870927218214,-144.35602519558145,-145.12334111898076,-145.89065704238007,-146.65797296577938,-147.4252888891787,-148.192604812578,-148.9599207359773,-149.72723665937662,-150.49455258277592,-151.26186850617523,-152.02918442957454,-152.79650035297385,-153.56381627637316,-154.33113219977247,-155.09844812317178,-155.8657640465711,-156.6330799699704,-157.4003958933697,-158.167711816769,-158.93502774016832,-159.70234366356763,-160.46965958696694,-161.23697551036625,-162.00429143376556,-162.77160735716487,-163.53892328056418,-164.3062392039635,-165.0735551273628,-165.8408710507621,-166.6081869741614,-167.37550289756072,-168.14281882096003,-168.91013474435934,-169.67745066775865,-170.44476659115796,-171.21208251455727,-171.97939843795658,-172.74671436135588,-173.5140302847552,-174.2813462081545,-175.0486621315538,-175.81597805495312,-176.58329397835243,-177.3506099017517,-178.11792582515102,-178.88524174855033,-179.65255767194964,-180.41987359534895,-181.18718951874826,-181.95450544214756,-182.72182136554687,-183.48913728894618,-184.2564532123455,-185.0237691357448,-185.7910850591441,-186.55840098254342,-187.32571690594273,-188.09303282934204,-188.86034875274134,-189.62766467614065,-190.39498059953996,-191.16229652293927,-191.92961244633858,-192.6969283697379,-193.4642442931372,-194.2315602165365,-194.99887613993582,-195.76619206333513,-196.53350798673443,-197.30082391013374,-198.06813983353305,-198.83545575693236,-199.60277168033167,-200.37008760373098,-201.1374035271303,-201.9047194505296,-202.6720353739289,-203.43935129732822,-204.20666722072752,-204.97398314412683,-205.74129906752614,-206.50861499092545,-207.27593091432476,-208.04324683772407,-208.81056276112338,-209.5778786845227,-210.345194607922,-211.1125105313213,-211.87982645472061,-212.64714237811992,-213.41445830151923,-214.18177422491854,-214.94909014831785,-215.71640607171716,-216.48372199511647,-217.25103791851578,-218.0183538419151,-218.7856697653144,-219.5529856887137,-220.320301612113,-221.08761753551232,-221.85493345891163,-222.62224938231094,-223.38956530571025,-224.15688122910956,-224.92419715250887,-225.69151307590818,-226.45882899930749,-227.2261449227068,-227.9934608461061,-228.7607767695054,-229.52809269290472,-230.29540861630403,-231.06272453970334,-231.83004046310265,-232.59735638650196,-233.36467230990127,-234.13198823330058,-234.89930415669988,-235.6666200800992,-236.4339360034985,-237.2012519268978,-237.96856785029712,-238.73588377369643,-239.50319969709574,-240.27051562049505,-241.03783154389436,-241.80514746729366,-242.57246339069297,-243.33977931409228,-244.1070952374916,-244.8744111608909,-245.6417270842902,-246.40904300768952,-247.17635893108883,-247.94367485448814,-248.71099077788745,-249.47830670128675,-250.24562262468606,-251.01293854808537,-251.78025447148468,-252.547570394884,-253.3148863182833,-254.0822022416826,-254.84951816508192,-255.61683408848123,-256.38415001188054,-257.1514659352798,-257.91878185867915,-258.68609778207843,-259.4534137054778,-260.22072962887705,-260.9880455522764,-261.75536147567567,-262.522677399075,-263.2899933224743,-264.0573092458736,-264.8246251692729,-265.59194109267224,-266.3592570160715,-267.12657293947086,-267.89388886287014,-268.6612047862695,-269.42852070966876,-270.1958366330681,-270.9631525564674,-271.7304684798667,-272.497784403266,-273.26510032666533,-274.0324162500646,-274.79973217346395,-275.56704809686323,-276.33436402026257,-277.10167994366185,-277.8689958670612,-278.63631179046047,-279.4036277138598,-280.1709436372591,-280.9382595606584,-281.7055754840577,-282.47289140745704,-283.2402073308563,-284.00752325425566,-284.77483917765494,-285.5421551010543,-286.30947102445356,-287.0767869478529,-287.8441028712522,-288.6114187946515,-289.3787347180508,-290.14605064145013,-290.9133665648494,-291.68068248824875,-292.44799841164803,-293.21531433504737,-293.98263025844665,-294.749946181846,-295.51726210524527,-296.2845780286446,-297.0518939520439,-297.8192098754432,-298.5865257988425,-299.35384172224184,-300.1211576456411,-300.88847356904046,-301.65578949243974,-302.4231054158391,-303.19042133923836,-303.9577372626377,-304.725053186037,-305.4923691094363,-306.2596850328356,-307.02700095623493,-307.7943168796342,-308.56163280303355,-309.3289487264328,-310.09626464983216,-310.86358057323145,-311.6308964966308,-312.39821242003006,-313.1655283434294,-313.9328442668287,-314.700160190228,-315.4674761136273,-316.23479203702664,-317.0021079604259,-317.76942388382525,-318.53673980722454,-319.3040557306239,-320.07137165402315,-320.8386875774225,-321.60600350082177,-322.3733194242211,-323.1406353476204,-323.9079512710197,-324.675267194419,-325.44258311781834,-326.2098990412176,-326.97721496461696,-327.74453088801624,-328.5118468114156,-329.27916273481486,-330.0464786582142,-330.8137945816135,-331.5811105050128,-332.3484264284121,-333.11574235181143,-333.8830582752107,-334.65037419861005,-335.41769012200933,-336.18500604540867,-336.95232196880795,-337.7196378922073,-338.48695381560657,-339.2542697390059,-340.0215856624052,-340.7889015858045,-341.5562175092038,-342.32353343260314,-343.0908493560024,-343.85816527940176,-344.62548120280104,-345.3927971262004,-346.16011304959966,-346.927428972999,-347.6947448963983,-348.4620608197976,-349.2293767431969,-349.99669266659623,-350.7640085899955,-351.53132451339485,-352.29864043679413,-353.06595636019347,-353.83327228359275,-354.6005882069921,-355.36790413039137,-356.1352200537907,-356.90253597719,-357.6698519005893,-358.4371678239886,-359.20448374738794,-359.9717996707872,-360.73911559418656,-361.50643151758584,-362.2737474409852,-363.04106336438446,-363.8083792877838,-364.5756952111831,-365.3430111345824,-366.1103270579817,-366.87764298138103,-367.6449589047803,-368.41227482817965,-369.1795907515789,-369.94690667497827,-370.71422259837755,-371.4815385217769,-372.24885444517616,-373.0161703685755,-373.7834862919748,-374.5508022153741,-375.3181181387734,-376.08543406217274,-376.852749985572,-377.62006590897136,-378.38738183237064,-379.15469775577,-379.92201367916925,-380.6893296025686,-381.4566455259679,-382.2239614493672,-382.9912773727665,-383.7585932961658,-384.5259092195651,-385.29322514296445,-386.0605410663637,-386.827856989763,-387.59517291316234,-388.3624888365616,-389.12980475996096,-389.89712068336024,-390.6644366067596,-391.43175253015886,-392.1990684535582,-392.9663843769575,-393.7337003003568,-394.5010162237561,-395.26833214715543,-396.0356480705547,-396.80296399395405,-397.57027991735333,-398.33759584075267,-399.10491176415195,-399.8722276875513,-400.63954361095057,-401.4068595343499,-402.1741754577492,-402.9414913811485,-403.7088073045478,-404.47612322794714,-405.2434391513464,-406.01075507474576,-406.77807099814504,-407.5453869215444,-408.31270284494366,-409.080018768343,-409.8473346917423,-410.6146506151416,-411.3819665385409,-412.14928246194023,-412.9165983853395,-413.68391430873885,-414.45123023213813,-415.21854615553747,-415.98586207893675,-416.7531780023361,-417.52049392573537,-418.2878098491347,-419.055125772534,-419.8224416959333,-420.5897576193326,-421.35707354273194,-422.1243894661312,-422.89170538953056,-423.65902131292984,-424.4263372363292,-425.19365315972846,-425.9609690831278,-426.7282850065271,-427.4956009299264,-428.2629168533257,-429.03023277672503,-429.7975487001243,-430.56486462352365,-431.3321805469229,-432.09949647032226,-432.86681239372155,-433.6341283171209,-434.40144424052016,-435.1687601639195,-435.9360760873188,-436.7033920107181,-437.4707079341174,-438.23802385751674,-439.005339780916,-439.77265570431535,-440.53997162771464,-441.307287551114,-442.07460347451325,-442.8419193979126,-443.60923532131187,-444.3765512447112,-445.1438671681105,-445.9111830915098,-446.6784990149091,-447.44581493830844,-448.2131308617077,-448.98044678510706,-449.74776270850634,-450.5150786319057,-451.28239455530496,-452.0497104787043,-452.8170264021036,-453.5843423255029,-454.3516582489022,-455.11897417230153,-455.8862900957008,-456.65360601910015,-457.42092194249943,-458.18823786589877,-458.95555378929805,-459.7228697126974,-460.49018563609667,-461.257501559496,-462.0248174828953,-462.7921334062946,-463.5594493296939,-464.32676525309324,-465.0940811764925,-465.86139709989186,-466.62871302329114,-467.3960289466905,-468.16334487008976,-468.9306607934891,-469.6979767168884,-470.4652926402877,-471.232608563687,-471.99992448708633,-472.7672404104856,-473.53455633388495,-474.30187225728423,-475.06918818068357,-475.83650410408285,-476.6038200274822,-477.37113595088147,-478.1384518742808,-478.9057677976801,-479.6730837210794,-480.4403996444787,-481.20771556787804,-481.9750314912773,-482.74234741467666,-483.50966333807594,-484.2769792614753,-485.04429518487456,-485.8116111082739,-486.5789270316732,-487.3462429550725,-488.1135588784718,-488.88087480187113,-489.6481907252704,-490.41550664866975,-491.182822572069,-491.95013849546837,-492.71745441886765,-493.484770342267,-494.25208626566626,-495.0194021890656,-495.7867181124649,-496.5540340358642,-497.3213499592635,-498.08866588266284,-498.8559818060621,-499.62329772946146,-500.39061365286074,-501.1579295762601,-501.92524549965935,-502.6925614230587,-503.459877346458,-504.2271932698573,-504.9945091932566,-505.7618251166559,-506.5291410400552,-507.29645696345455,-508.0637728868538,-508.83108881025316,-509.59840473365244,-510.3657206570518,-511.13303658045106,-511.9003525038504,-512.6676684272497,-513.434984350649,-514.2023002740483,-514.9696161974476,-515.736932120847,-516.5042480442462,-517.2715639676455,-518.0388798910449,-518.8061958144442,-519.5735117378434,-520.3408276612428,-521.1081435846421,-521.8754595080414,-522.6427754314407,-523.41009135484,-524.1774072782393,-524.9447232016387,-525.7120391250379,-526.4793550484372,-527.2466709718366,-528.0139868952358,-528.7813028186351,-529.5486187420345,-530.3159346654338,-531.083250588833,-531.8505665122324,-532.6178824356317,-533.385198359031,-534.1525142824303,-534.9198302058296,-535.687146129229,-536.4544620526283,-537.2217779760275,-537.9890938994268,-538.7564098228262,-539.5237257462255,-540.2910416696247,-541.0583575930241,-541.8256735164234,-542.5929894398228,-543.360305363222,-544.1276212866213,-544.8949372100207,-545.66225313342,-546.4295690568192,-547.1968849802186,-547.9642009036179,-548.7315168270172,-549.4988327504165,-550.2661486738158,-551.0334645972151,-551.8007805206145,-552.5680964440137,-553.335412367413,-554.1027282908124,-554.8700442142117,-555.6373601376109,-556.4046760610103,-557.1719919844096,-557.9393079078089,-558.7066238312082,-559.4739397546075,-560.2412556780068,-561.0085716014062,-561.7758875248054,-562.5432034482047,-563.3105193716041,-564.0778352950034,-564.8451512184026,-565.612467141802,-566.3797830652013,-567.1470989886006,-567.9144149119999,-568.6817308353992,-569.4490467587985,-570.2163626821979,-570.9836786055971,-571.7509945289964,-572.5183104523958,-573.2856263757951,-574.0529422991943,-574.8202582225937,-575.587574145993,-576.3548900693924,-577.1222059927916,-577.8895219161909,-578.6568378395903,-579.4241537629896,-580.1914696863888,-580.9587856097882,-581.7261015331875,-582.4934174565868,-583.260733379986,-584.0280493033854,-584.7953652267847,-585.5626811501841,-586.3299970735833,-587.0973129969826,-587.864628920382,-588.6319448437813,-589.3992607671805,-590.1665766905799,-590.9338926139792,-591.7012085373785,-592.4685244607778,-593.2358403841771,-594.0031563075764,-594.7704722309758,-595.537788154375,-596.3051040777743,-597.0724200011737,-597.839735924573,-598.6070518479722,-599.3743677713716,-600.1416836947709,-600.9089996181702,-601.6763155415695,-602.4436314649688,-603.2109473883681,-603.9782633117675,-604.7455792351667,-605.512895158566,-606.2802110819654,-607.0475270053647,-607.8148429287639,-608.5821588521633,-609.3494747755626,-610.116790698962,-610.8841066223612,-611.6514225457605,-612.4187384691598,-613.1860543925592,-613.9533703159584,-614.7206862393577,-615.4880021627571,-616.2553180861564,-617.0226340095556,-617.789949932955,-618.5572658563543,-619.3245817797537,-620.0918977031529,-620.8592136265522,-621.6265295499516,-622.3938454733509,-623.1611613967501,-623.9284773201495,-624.6957932435488,-625.4631091669481,-626.2304250903474,-626.9977410137467,-627.765056937146,-628.5323728605454,-629.2996887839446,-630.0670047073439,-630.8343206307433,-631.6016365541426,-632.3689524775418,-633.1362684009412,-633.9035843243405,-634.6709002477398,-635.4382161711391,-636.2055320945384,-636.9728480179377,-637.7401639413371,-638.5074798647363,-639.2747957881356,-640.042111711535,-640.8094276349343,-641.5767435583335,-642.3440594817329,-643.1113754051322,-643.8786913285315,-644.6460072519308,-645.4133231753301,-646.1806390987294,-646.9479550221288,-647.715270945528,-648.4825868689273,-649.2499027923267,-650.017218715726,-650.7845346391252,-651.5518505625246,-652.3191664859239,-653.0864824093233,-653.8537983327225,-654.6211142561218,-655.3884301795212,-656.1557461029205,-656.9230620263197,-657.690377949719,-658.4576938731184,-659.2250097965177,-659.992325719917,-660.7596416433163,-661.5269575667156,-662.294273490115,-663.0615894135142,-663.8289053369135,-664.5962212603129,-665.3635371837121,-666.1308531071114,-666.8981690305108,-667.6654849539101,-668.4328008773093,-669.2001168007087,-669.967432724108,-670.7347486475073,-671.5020645709066,-672.2693804943059,-673.0366964177052,-673.8040123411046,-674.5713282645038,-675.3386441879031,-676.1059601113025,-676.8732760347018,-677.640591958101,-678.4079078815004,-679.1752238048997,-679.942539728299,-680.7098556516983,-681.4771715750976,-682.2444874984969,-683.0118034218963,-683.7791193452955,-684.5464352686948,-685.3137511920942,-686.0810671154935,-686.8483830388927,-687.6156989622921,-688.3830148856914,-689.1503308090907,-689.91764673249,-690.6849626558893,-691.4522785792886,-692.219594502688,-692.9869104260872,-693.7542263494865,-694.5215422728859,-695.2888581962852,-696.0561741196844,-696.8234900430838,-697.5908059664831,-698.3581218898825,-699.1254378132817,-699.892753736681,-700.6600696600804,-701.4273855834797,-702.1947015068789,-702.9620174302783,-703.7293333536776,-704.4966492770769,-705.2639652004762,-706.0312811238755,-706.7985970472748,-707.5659129706742,-708.3332288940734,-709.1005448174727,-709.8678607408721,-710.6351766642714,-711.4024925876706,-712.16980851107,-712.9371244344693,-713.7044403578686,-714.4717562812679,-715.2390722046672,-716.0063881280665,-716.7737040514659,-717.5410199748651,-718.3083358982644,-719.0756518216638,-719.8429677450631,-720.6102836684623,-721.3775995918617,-722.144915515261,-722.9122314386603,-723.6795473620596,-724.4468632854589,-725.2141792088582,-725.9814951322576,-726.7488110556568,-727.5161269790561,-728.2834429024555,-729.0507588258548,-729.818074749254,-730.5853906726534,-731.3527065960527,-732.120022519452,-732.8873384428513,-733.6546543662506,-734.42197028965,-735.1892862130493,-735.9566021364485,-736.7239180598478,-737.4912339832472,-738.2585499066465,-739.0258658300457,-739.7931817534451,-740.5604976768444,-741.3278136002438,-742.095129523643,-742.8624454470423,-743.6297613704417,-744.397077293841,-745.1643932172402,-745.9317091406396,-746.6990250640389,-747.4663409874382,-748.2336569108375,-749.0009728342368,-749.7682887576361,-750.5356046810355,-751.3029206044347,-752.070236527834,-752.8375524512334,-753.6048683746327,-754.3721842980319,-755.1395002214313,-755.9068161448306,-756.6741320682299,-757.4414479916292,-758.2087639150285,-758.9760798384278,-759.7433957618272,-760.5107116852264,-761.2780276086257,-762.0453435320251,-762.8126594554244,-763.5799753788236,-764.347291302223,-765.1146072256223,-765.8819231490216,-766.6492390724209,-767.4165549958202,-768.1838709192195,-768.9511868426189,-769.7185027660181,-770.4858186894174,-771.2531346128168,-772.0204505362161,-772.7877664596153,-773.5550823830147,-774.322398306414,-775.0897142298134,-775.8570301532126,-776.6243460766119,-777.3916620000113,-778.1589779234106,-778.9262938468098,-779.6936097702092,-780.4609256936085,-781.2282416170078,-781.995557540407,-782.7628734638064,-783.5301893872057,-784.2975053106051,-785.0648212340043,-785.8321371574036,-786.599453080803,-787.3667690042023,-788.1340849276015,-788.9014008510009,-789.6687167744002,-790.4360326977995,-791.2033486211988,-791.9706645445981,-792.7379804679974,-793.5052963913968,-794.272612314796,-795.0399282381953,-795.8072441615947,-796.574560084994,-797.3418760083932,-798.1091919317926,-798.8765078551919,-799.6438237785912,-800.4111397019905,-801.1784556253898,-801.9457715487891,-802.7130874721885,-803.4804033955877,-804.247719318987]}
},{}],86:[function(require,module,exports){
module.exports={"expected":[-1.4695761589768238e-15,0.964474036965116,27.639385539309814,-1.1148355568422008,-0.07245535362129163,0.8337548073494883,9.180954248158752,-1.2916227795967024,-0.14567547116534252,0.7179293425740855,5.469882355126812,-1.5049156412977849,-0.22045774922595393,0.6135580348424844,3.8654593963979544,-1.7704156972977507,-0.29766785392899286,0.5180715194346442,2.9631148916841754,-2.114053591055239,-0.37828185039076656,0.42949421768118984,2.379743901901522,-2.5820065007541846,-0.4634394038786121,0.3462634383068229,1.967962285311665,-3.2653428234795197,-0.554514618609342,0.2671067398821419,1.6589572126461911,-4.3722312217553005,-0.653214533631977,0.1909557596198657,1.4162661931388025,-6.505608406613792,-0.7617213114316034,0.1168832367581559,1.218747738859836,-12.443516159795704,-0.882904880221367,0.04405479120514181,1.053282487525432,-127.1940098936875,-1.0206525898024514,-0.028310196115136896,0.911281793472932,15.490289214531634,-1.1804006289277813,-0.10097266742350139,0.7868714839183508,7.264495499117512,-1.3700296073885434,-0.17470617321171952,0.6758820330561729,4.711915780969912,-1.6014549561360183,-0.2503303073851776,0.5752556773555983,3.4586612781635107,-1.8936364991945815,-0.3287484246305248,0.4826819686409894,2.7076682518298143,-2.2787450169640335,-0.41099347150638527,0.39636459843871136,2.203014387021733,-2.8161706325193294,-0.4982871576036841,0.3148666716395644,1.8372903975852832,-3.6291397559350083,-0.5921201643345024,0.2370043537714894,1.5574984715292233,-5.022180509799906,-0.6943653727480827,0.1617710301240556,1.3344514674506105,-8.008971289054502,-0.807443608868555,0.0882809201943779,1.1507337891978444,-19.25491758435895,-0.9345749743714784,0.015724982894803664,0.9952939845743556,48.914967181370486,-1.0801742868970652,-0.05666580801700474,0.8607650920704407,10.748434459980965,-1.2504992244364894,-0.1296534852891387,0.742031434911709,6.001849236738341,-1.4547639990087884,-0.20402547238172386,0.6354136087103699,4.132367366286038,-1.7071636927931446,-0.28062929527987035,0.5381808821059029,3.1244221070305644,-2.0308172239971554,-0.3604129597890697,0.4482465633865906,2.4885956999337076,-2.4661508415181954,-0.4444752733386364,0.3639702342662005,2.0470351733802046,-3.09090758677049,-0.5341321460714594,0.284024697203425,1.7195399614025537,-4.076250709236559,-0.6310079710312155,0.20730322768261558,1.464609137052321,-5.887580516682626,-0.7371665078615963,0.13285240062477172,1.25859339655553,-10.393962198919326,-0.8553051281902156,0.05982121589560904,1.0870114774916109,-42.391014704629214,-0.9890535501154701,-0.012579613061529294,0.9404838064389389,20.499335183583632,-1.1434511575500392,-0.08511254338823862,0.8126518474617497,8.219124505230583,-1.3257432206884248,-0.15854562559562851,0.6990365394535312,5.105966289668649,-1.5467776996750155,-0.23368543583964455,0.5963754039811096,3.6742173510077976,-1.8236091736496127,-0.3114135695585728,0.502218876022749,2.8445067481367294,-2.184733967170516,-0.39273032541551983,0.4146741735238082,2.2983599923470104,-2.681689099287009,-0.4788104282914161,0.33223664889218624,1.908144263470786,-3.418336591502772,-0.5710778303854963,0.25367475442190823,1.6127216473072965,-4.640016262480373,-0.6713104294088932,0.1779486871962904,1.3791161357063837,-7.0991701667992295,-0.7817921817640465,0.1041504864567378,1.1879551400926995,-14.767761718272048,-0.9055419875182246,0.031457744506133915,1.0270939959648058,211.99281182766165,-1.0466708438299366,-0.04090437650597005,0.8885166060125365,12.95355582097576,-1.2109617932765402,-0.11369669769911758,0.7667026350778856,6.644693601458517,-1.4068555920371075,-0.1876982975899878,0.6577103466554208,4.436374181715552,-1.647218920528296,-0.26374045454169615,0.5586335162986836,3.302398846645633,-1.952732573634858,-0.3427454711769183,0.46726514386896356,2.6063138895723106,-2.358945526952499,-0.4257743973175857,0.3818808840300616,2.131368025741047,-2.9326430460569,-0.5140892153431622,0.30109445328845197,1.783490045132364,-3.8159286218688337,-0.6092377717880411,0.2237576245672393,1.5152313427369273,-5.374292255120695,-0.7131744560758958,0.14888842658873255,1.3000480989152836,-8.920265509926095,-0.8284379379329854,0.07561733107583887,1.1219135952399464,-25.426221681354495,-0.9584223677474134,0.0031447477574990967,0.9705625276223674,30.273904647342793,-1.107806974516194,-0.06929481677571868,0.8390996311772527,9.457143615787558,-1.2832656277865624,-0.14246545818477716,0.7227057479336724,5.5688185803157655,-1.4946971197136396,-0.21716244621637573,0.6178950018947647,3.9162091707263644,-1.7574861265604587,-0.2942476637828833,0.5220668206746326,2.994159967295812,-2.0969678543945216,-0.37469136940526054,0.43322409999300115,2.400855921430787,-2.55809067284137,-0.45962479892715735,0.3497890752959568,1.9833816764699777,-3.2290400977952562,-0.5504100610519866,0.27047868522399393,1.6708186244661865,-4.309828213722313,-0.6487371532968997,0.19421713626255876,1.4257609951235848,-6.372100065920058,-0.7567637954942519,0.12007211921999747,1.2265935957367144,-11.971890741202635,-0.8773242302087543,0.0472060789497435,1.0599380763779398,-90.85106719520223,-1.0142524012417917,-0.025163208116830933,0.9170545916888939,16.286814403656923,-1.1729019959706062,-0.09779686587808328,0.7919759860219082,7.437551146933833,-1.3610210399367146,-0.17146722018949404,0.6804731117879272,4.785978131281073,-1.5903011783003251,-0.24699112187557176,0.5794486674545822,3.4998728029926323,-1.8793004997945262,-0.32526740538794324,0.48656528018136147,2.7340936254364494,-2.2594091662499998,-0.4073222716074945,0.40000794276946294,2.2215498646329506,-2.7883320086124495,-0.49436774181320164,0.3183266188578565,1.8511306354316315,-3.585079467381371,-0.5878807423303086,0.2403282226979983,1.5683247796846496,-4.941000121604558,-0.6897145615504322,0.16499971803702285,1.3432331107683577,-7.809143923550164,-0.8022617528708978,0.09145105670635736,1.1580693205789137,-18.152599210630136,-0.9287007726704155,0.018870663827491047,1.001573606164166,57.8108847690417,-1.073383389223991,-0.053511524523334804,0.866254695214172,11.127708152522391,-1.2424684636906926,-0.12645717746190033,0.7469191196979933,6.120514421645744,-1.4450085311075929,-0.20075192045619306,0.6398368884693477,4.189961726778363,-1.6949196010306984,-0.2772398810132333,0.5422433458846495,3.1586017576812098,-2.0148051089526704,-0.35686373986845116,0.45202850063271144,2.511394636549156,-2.44405144263056,-0.4407145113115144,0.3675356613488886,2.0634632787789844,-3.058038325148775,-0.5300969886407261,0.2874261700004976,1.7320508075688694,-4.021554537491703,-0.6266197834750319,0.21058525941596892,1.4745453847224212,-5.7774662378948465,-0.7323240844178225,0.136053990009894,1.2667518960787014,-10.061929312382704,-0.8498744570566393,0.06297781120485668,1.093895572612376,-37.401863168386754,-0.9828518148349078,-0.009434492078272651,0.9464276939241554,21.91525186637519,-1.1362207129717983,-0.08194586220778106,0.817886774453052,8.44042965750449,-1.3171072840472469,-0.15532343574752094,0.7037282885968767,5.1924866714943745,-1.536160719462831,-0.23037139235012566,0.6006466345982041,3.7203488200047854,-1.8100839728697058,-0.3079672242246123,0.5061630332192351,2.873354387090005,-2.1667030222720403,-0.3891050182483787,0.41836448768301693,2.3182605768087465,-2.656144459037148,-0.47495052946379757,0.3357321697739654,1.9228271903538317,-3.3788696493980246,-0.5669149624696473,0.2570245417380079,1.6241032013821224,-4.570184836680289,-0.6667580873414,0.18119483225870225,1.388281823380692,-6.9410654426602845,-0.7767377936845693,0.10733038781511937,1.1955663074916691,-14.109365540315281,-0.8998347792389848,0.03460591571170399,1.0335771478231683,635.9826284744069,-1.0401025820016532,-0.03775477220311552,0.8941597798006442,13.506913688295956,-1.203234923123287,-0.11051243650338148,0.7717080375836338,6.789715464806963,-1.3975278930344954,-0.18444467881535595,0.662224795902934,4.502332216795481,-1.6356016124746429,-0.2603797485489903,0.56276691129812,3.340232616138398,-1.9376887671338725,-0.339235079549749,0.4711021437269248,2.6310230276366986,-2.338453456446482,-0.42206452496388375,0.38548857235910267,2.14891613060131,-2.9027281128261175,-0.5101197666984493,0.30452754785961555,1.7967118784207294,-3.767572503075959,-0.604934031454009,0.22706214716770537,1.525645823918624,-5.281879551675895,-0.7084408499302997,0.15210439213931068,1.3085425918975888,-8.673803360757233,-0.8231486998483251,0.07878081270833255,1.129041755026559,-23.54077855869491,-0.9524070683319563,0.006289557715207828,0.9766882983347417,33.46283857733849,-1.1008271941527925,-0.0661356570850305,0.8444727370136242,9.750264457589228,-1.2749756562202041,-0.13925832020288892,0.7275039136822775,5.671281819617168,-1.4845742119078746,-0.2138716409991614,0.622248856290157,3.9682245482558396,-1.7446986898797232,-0.290833797426251,0.52607526220715,3.0257952333478384,-2.080105983026688,-0.3711093398595013,0.4369641592075939,2.422289161339499,-2.5345565583583984,-0.45582120535074344,0.3533224772166448,1.9989946236174005,-3.193467233978421,-0.5463196881064282,0.2738563717165281,1.6828053415845554,-4.2490941225209635,-0.6442780045063206,0.19748249920217562,1.4353413234823578,-6.243837264834646,-0.7518298196381459,0.12326341081339372,1.2345002150726803,-11.53448890481704,-0.8717742890897309,0.0503583024582095,1.066638182940466,-70.66007756394002,-1.007892910545297,-0.022016718133675662,0.9228607826138269,17.16933692947398,-1.1654584768562748,-0.09462301714525229,0.7971059777946984,7.618895945570536,-1.3520892583960644,-0.16823175830878737,0.6850838817055261,4.862303927566575,-1.5792584075364728,-0.2436571195962909,0.5836569665499012,3.5420015893839136,-1.8651329542368331,-0.32179350022589615,0.4904604938381744,2.7609773525458174,-2.2403461499272552,-0.4036604647461892,0.40366046474613454,2.240346149926972,-2.760977352546223,-0.49046049383823276,0.32179350022584424,1.8651329542366224,-3.5420015893845505,-0.5836569665499642,0.2436571195962411,1.5792584075363083,-4.862303927567734,-0.6850838817055952,0.168231758308739,1.3520892583959312,-7.618895945573313,-0.7971059777947752,0.09462301714520484,1.1654584768561638,-17.169336929487894,-0.922860782613914,0.02201671813362861,1.0078929105452021,70.66007756370516,-1.0666381829405667,-0.05035830245825665,0.871774289089648,11.534488904810736,-1.234500215072799,-0.12326341081344146,0.7518298196380722,6.243837264832766,-1.4353413234825017,-0.1974824992022245,0.6442780045062539,4.249094122520067,-1.6828053415847355,-0.2738563717165787,0.5463196881063671,3.1934672339778944,-1.9989946236176355,-0.3533224772166977,0.4558212053506866,2.5345565583580494,-2.422289161339822,-0.4369641592076499,0.3711093398594478,2.08010598302674,-3.0257952333483162,-0.5260752622071374,0.2908337974262,1.7446986898797627,-3.968224548256627,-0.6222488562901434,0.2138716409991122,1.4845742119079062,-5.671281819618728,-0.7275039136822625,0.13925832020284099,1.27497565622023,-9.750264457593747,-0.8444727370136074,0.06613565708498326,1.100827194152814,-33.462838577391196,-0.9766882983347225,-0.006289557715254862,0.9524070683319751,23.5407785586688,-1.1290417550265366,-0.07878081270837987,0.8231486998483415,8.673803360753647,-1.3085425918975622,-0.1521043921393588,0.7084408499303144,5.281879551674536,-1.525645823918591,-0.22706214716775483,0.6049340314540224,3.767572503075244,-1.796711878420688,-0.30452754785966696,0.5101197666984617,2.9027281128256743,-2.148916130601255,-0.3854885723591567,0.4220645249638953,2.3384534564461776,-2.631023027636621,-0.4711021437269823,0.33923507954975995,1.937688767133649,-3.3402326161382785,-0.5627669112981819,0.26037974854900076,1.63560161247447,-4.502332216795272,-0.6622247959030017,0.1844446788153661,1.3975278930343566,-6.789715464806501,-0.7717080375837089,0.1105124365033914,1.203234923123172,-13.506913688294155,-0.8941597798007289,0.03775477220312535,1.0401025820015553,-635.982628470438,-1.0335771478232658,-0.03460591571169416,0.8998347792388998,14.109365540317244,-1.1955663074917833,-0.10733038781510945,0.7767377936844938,6.941065442660768,-1.3882818233808296,-0.18119483225869212,0.6667580873414142,4.5701848366792595,-1.6241032013822936,-0.25702454173799744,0.5669149624696603,3.3788696493974406,-1.9228271903540526,-0.3357321697739545,0.4749505294638096,2.6561444590367693,-2.3182605768090463,-0.41836448768300544,0.38910501824839,2.1667030222717725,-2.87335438709044,-0.5061630332192227,0.3079672242246231,1.8100839728695046,-3.7203488200054835,-0.6006466345981908,0.23037139235001627,1.5361607194626732,-5.19248667149569,-0.7037282885968621,0.15532343574741456,1.3171072840471183,-8.440429657507888,-0.8178867744530357,0.0819458622076765,1.1362207129716904,-21.915251866397824,-0.9464276939241368,0.009434492078168768,0.9828518148348153,37.401863168320915,-1.0938955726123545,-0.06297781120496097,0.8498744570565584,10.061929312377895,-1.2667518960786759,-0.13605399000999976,0.7323240844177503,5.777466237893229,-1.4745453847223902,-0.21058525941607742,0.6266197834749664,4.021554537490895,-1.7320508075688301,-0.28742617000061005,0.5300969886406658,3.0580383251482877,-2.0634632787789324,-0.3675356613490065,0.4407145113114582,2.444051442630232,-2.5113946365490847,-0.45202850063283656,0.3568637398683981,2.0148051089524324,-3.158601757681102,-0.5422433458847838,0.2772398810131827,1.694919601030516,-4.189961726778181,-0.6398368884694942,0.20075192045614415,1.4450085311074476,-6.1205144216453675,-0.746919119698155,0.12645717746185253,1.242468463690573,-11.127708152521167,-0.8662546952143537,0.05351152452328764,1.0733833892238898,-57.8108847690089,-1.001573606164374,-0.018870663827538093,0.9287007726703279,18.15259921063338,-1.1580693205791568,-0.09145105670640478,0.8022617528708205,7.809143923550772,-1.343233110768649,-0.16499971803707114,0.6897145615503628,4.941000121604808,-1.5683247796850088,-0.24032822269804804,0.5878807423302453,3.5850794673815067,-1.8511306354320913,-0.31832661885790836,0.49436774181314314,2.788332008612535,-2.221549864633398,-0.4000079427695175,0.4073222716074728,2.2594091662500597,-2.734093625437089,-0.48656528018141965,0.32526740538792265,1.8793004997945708,-3.499872802993632,-0.5794486674546451,0.24699112187555203,1.5903011783003598,-4.785978131282877,-0.6804731117879961,0.17146722018947488,1.3610210399367426,-7.437551146938082,-0.7919759860219848,0.0977968658780645,1.1729019959706295,-16.286814403677013,-0.9170545916889805,0.02516320811681231,1.0142524012418115,90.85106719457939,-1.0599380763780397,-0.04720607894976215,0.8773242302087717,11.971890741191745,-1.2265935957368321,-0.12007211922001634,0.7567637954942673,6.37210006591692,-1.4257609951237276,-0.19421713626257808,0.6487371532969137,4.309828213720836,-1.6708186244663648,-0.2704786852240139,0.5504100610519995,3.2290400977943943,-1.9833816764702097,-0.3497890752959777,0.45962479892716923,2.5580906728408013,-2.4008559214311056,-0.4332240999930233,0.3746913694052717,2.0969678543941144,-2.9941599672962806,-0.5220668206746564,0.29424766378289396,1.75748612656015,-3.916209170727133,-0.6178950018947903,0.217162446216386,1.4946971197133956,-5.568818580317271,-0.7227057479337007,0.14246545818478717,1.2832656277863628,-9.45714361579181,-0.8390996311772845,0.06929481677572853,1.1078069745160262,-30.273904647385944,-0.9705625276224035,-0.0031447477574892842,0.9584223677472687,25.42622168132404,-1.1219135952399886,-0.07561733107582899,0.8284379379328581,8.920265509922304,-1.3000480989153336,-0.1488884265887225,0.713174456075782,5.37429225511929,-1.5152313427369886,-0.22375762456722897,0.6092377717879376,3.815928621868102,-1.7834900451324418,-0.3010944532884413,0.5140892153430668,2.9326430460564485,-2.13136802574115,-0.3818808840300503,0.42577439731749656,2.35894552695219,-2.6063138895724554,-0.46726514386895157,0.34274547117683396,1.9527325736346317,-3.3023988466458545,-0.5586335162986708,0.26374045454161543,1.6472189205281214,-4.436374181715937,-0.6577103466554067,0.18769829758990966,1.4068555920369674,-6.644693601459357,-0.7667026350780054,0.11369669769906994,1.2109617932764942,-12.953555820974104,-0.8885166060126715,0.04090437650592294,1.0466708438298977,-211.99281182722066,-1.0270939959649608,-0.031457744506180996,0.9055419875181907,14.767761718274198,-1.1879551400928816,-0.10415048645678533,0.7817921817640165,7.099170166799734,-1.3791161357066026,-0.17794868719633894,0.6713104294088662,4.640016262480594,-1.6127216473075683,-0.2536747544219583,0.5710778303854717,3.4183365915028965,-1.908144263471136,-0.3322366488922385,0.47881042829139325,2.681689099287089,-2.2983599923474842,-0.4146741735238633,0.39273032541549835,2.184733967170573,-2.844506748137415,-0.5022188760228079,0.31141356955855237,1.8236091736496551,-3.674217351008892,-0.5963754039811734,0.23368543583962492,1.5467776996750489,-5.105966289670691,-0.6990365394536011,0.15854562559560945,1.3257432206884516,-8.219124505235756,-0.8126518474618278,0.08511254338821987,1.1434511575500619,-20.499335183615415,-0.9404838064390275,0.01257961306151068,0.9890535501154896,42.39101470449355,-1.0870114774917135,-0.05982121589562772,0.8553051281902326,10.3939621989111,-1.2585933965556517,-0.13285240062479067,0.7371665078616115,5.887580516679935,-1.4646091370524692,-0.20730322768263498,0.6310079710312293,4.07625070923523,-1.71953996140274,-0.28402469720344514,0.534132146071472,3.090907586769694,-2.0470351733804484,-0.3639702342662216,0.44447527333864817,2.466150841517661,-2.4885956999340455,-0.4482465633866129,0.3604129597890808,2.0308172239967686,-3.1244221070310707,-0.5381808821059268,0.2806292952798809,1.7071636927928493,-4.132367366286888,-0.6354136087103961,0.20402547238173407,1.4547639990085532,-6.001849236740082,-0.7420314349117378,0.12965348528914866,1.250499224436296,-10.748434459986445,-0.8607650920704731,0.05666580801701459,1.0801742868969018,-48.914967181483064,-0.9952939845743927,-0.01572498289479385,0.9345749743713371,19.254917584341467,-1.1507337891978877,-0.08828092019436802,0.8074436088684305,8.008971289051438,-1.3344514674506625,-0.16177103012404553,0.6943653727479708,5.022180509798673,-1.557498471529287,-0.23700435377147905,0.5921201643344005,3.6291397559343417,-1.8372903975853647,-0.3148666716395536,0.49828715760358994,2.8161706325189093,-2.2030143870218417,-0.3963645984387,0.41099347150629706,2.278745016963742,-2.7076682518299697,-0.4826819686409773,0.3287484246304411,1.893636499194366,-3.458661278163752,-0.5752556773555854,0.25033030738509743,1.6014549561358506,-4.711915780970344,-0.6758820330561586,0.17470617321164175,1.3700296073884082,-7.264495499118513,-0.786871483918335,0.10097266742342517,1.1804006289276687,-15.490289214536118,-0.911281793472914,0.028310196115075605,1.0206525898023846,127.19400989361633,-1.0532824875253812,-0.04405479120520317,0.8829048802213086,12.443516159795019,-1.2187477388597765,-0.11688323675821798,0.7617213114315515,6.505608406613602,-1.4162661931387517,-0.19095575961993652,0.6532145336319201,4.372231221755069,-1.6589572126461276,-0.2671067398822151,0.5545146186092899,3.265342823479385,-1.9679622853115826,-0.34626343830689943,0.46343940387856364,2.5820065007540967,-2.379743901901362,-0.4294942176812624,0.37828185039072904,2.114053591055215,-2.9631148916839405,-0.518071519434722,0.29766785392895717,1.7704156972977325,-3.8654593963975716,-0.6135580348425687,0.2204577492259195,1.5049156412977707,-5.469882355126069,-0.7179293425741783,0.14567547116530902,1.2916227795966906,-9.180954248156702,-0.8337548073495921,0.07245535362125864,1.114835556842191,-27.639385539291435,-0.9644740369652341,-3.135095805817224e-14],"x":[37.69911184307752,38.466427766476826,39.233743689876135,40.001059613275444,40.76837553667475,41.53569146007406,42.30300738347337,43.07032330687268,43.83763923027199,44.6049551536713,45.37227107707061,46.139587000469916,46.906902923869225,47.674218847268534,48.44153477066784,49.20885069406715,49.97616661746646,50.74348254086577,51.51079846426508,52.27811438766439,53.0454303110637,53.812746234463006,54.580062157862315,55.34737808126162,56.114694004660926,56.882009928060235,57.649325851459544,58.41664177485885,59.18395769825816,59.95127362165747,60.71858954505678,61.48590546845609,62.2532213918554,63.02053731525471,63.787853238654016,64.55516916205333,65.32248508545264,66.08980100885195,66.85711693225126,67.62443285565057,68.39174877904988,69.15906470244919,69.9263806258485,70.6936965492478,71.46101247264711,72.22832839604642,72.99564431944572,73.76296024284503,74.53027616624433,75.29759208964364,76.06490801304295,76.83222393644226,77.59953985984157,78.36685578324088,79.13417170664019,79.9014876300395,80.6688035534388,81.43611947683812,82.20343540023742,82.97075132363673,83.73806724703604,84.50538317043535,85.27269909383466,86.04001501723397,86.80733094063328,87.57464686403259,88.3419627874319,89.1092787108312,89.87659463423051,90.64391055762982,91.41122648102913,92.17854240442844,92.94585832782775,93.71317425122706,94.48049017462637,95.24780609802568,96.01512202142499,96.7824379448243,97.5497538682236,98.31706979162291,99.08438571502222,99.85170163842153,100.61901756182084,101.38633348522015,102.15364940861946,102.92096533201877,103.68828125541808,104.45559717881738,105.2229131022167,105.990229025616,106.75754494901531,107.52486087241462,108.29217679581393,109.05949271921324,109.82680864261255,110.59412456601186,111.36144048941117,112.12875641281047,112.89607233620978,113.66338825960909,114.4307041830084,115.19802010640771,115.96533602980702,116.73265195320633,117.49996787660564,118.26728380000495,119.03459972340426,119.80191564680356,120.56923157020287,121.33654749360218,122.10386341700149,122.8711793404008,123.63849526380011,124.40581118719942,125.17312711059873,125.94044303399804,126.70775895739735,127.47507488079665,128.24239080419596,129.00970672759527,129.77702265099458,130.5443385743939,131.3116544977932,132.0789704211925,132.84628634459182,133.61360226799113,134.38091819139044,135.14823411478974,135.91555003818905,136.68286596158836,137.45018188498767,138.21749780838698,138.9848137317863,139.7521296551856,140.5194455785849,141.28676150198422,142.05407742538353,142.82139334878283,143.58870927218214,144.35602519558145,145.12334111898076,145.89065704238007,146.65797296577938,147.4252888891787,148.192604812578,148.9599207359773,149.72723665937662,150.49455258277592,151.26186850617523,152.02918442957454,152.79650035297385,153.56381627637316,154.33113219977247,155.09844812317178,155.8657640465711,156.6330799699704,157.4003958933697,158.167711816769,158.93502774016832,159.70234366356763,160.46965958696694,161.23697551036625,162.00429143376556,162.77160735716487,163.53892328056418,164.3062392039635,165.0735551273628,165.8408710507621,166.6081869741614,167.37550289756072,168.14281882096003,168.91013474435934,169.67745066775865,170.44476659115796,171.21208251455727,171.97939843795658,172.74671436135588,173.5140302847552,174.2813462081545,175.0486621315538,175.81597805495312,176.58329397835243,177.3506099017517,178.11792582515102,178.88524174855033,179.65255767194964,180.41987359534895,181.18718951874826,181.95450544214756,182.72182136554687,183.48913728894618,184.2564532123455,185.0237691357448,185.7910850591441,186.55840098254342,187.32571690594273,188.09303282934204,188.86034875274134,189.62766467614065,190.39498059953996,191.16229652293927,191.92961244633858,192.6969283697379,193.4642442931372,194.2315602165365,194.99887613993582,195.76619206333513,196.53350798673443,197.30082391013374,198.06813983353305,198.83545575693236,199.60277168033167,200.37008760373098,201.1374035271303,201.9047194505296,202.6720353739289,203.43935129732822,204.20666722072752,204.97398314412683,205.74129906752614,206.50861499092545,207.27593091432476,208.04324683772407,208.81056276112338,209.5778786845227,210.345194607922,211.1125105313213,211.87982645472061,212.64714237811992,213.41445830151923,214.18177422491854,214.94909014831785,215.71640607171716,216.48372199511647,217.25103791851578,218.0183538419151,218.7856697653144,219.5529856887137,220.320301612113,221.08761753551232,221.85493345891163,222.62224938231094,223.38956530571025,224.15688122910956,224.92419715250887,225.69151307590818,226.45882899930749,227.2261449227068,227.9934608461061,228.7607767695054,229.52809269290472,230.29540861630403,231.06272453970334,231.83004046310265,232.59735638650196,233.36467230990127,234.13198823330058,234.89930415669988,235.6666200800992,236.4339360034985,237.2012519268978,237.96856785029712,238.73588377369643,239.50319969709574,240.27051562049505,241.03783154389436,241.80514746729366,242.57246339069297,243.33977931409228,244.1070952374916,244.8744111608909,245.6417270842902,246.40904300768952,247.17635893108883,247.94367485448814,248.71099077788745,249.47830670128675,250.24562262468606,251.01293854808537,251.78025447148468,252.547570394884,253.3148863182833,254.0822022416826,254.84951816508192,255.61683408848123,256.38415001188054,257.1514659352798,257.91878185867915,258.68609778207843,259.4534137054778,260.22072962887705,260.9880455522764,261.75536147567567,262.522677399075,263.2899933224743,264.0573092458736,264.8246251692729,265.59194109267224,266.3592570160715,267.12657293947086,267.89388886287014,268.6612047862695,269.42852070966876,270.1958366330681,270.9631525564674,271.7304684798667,272.497784403266,273.26510032666533,274.0324162500646,274.79973217346395,275.56704809686323,276.33436402026257,277.10167994366185,277.8689958670612,278.63631179046047,279.4036277138598,280.1709436372591,280.9382595606584,281.7055754840577,282.47289140745704,283.2402073308563,284.00752325425566,284.77483917765494,285.5421551010543,286.30947102445356,287.0767869478529,287.8441028712522,288.6114187946515,289.3787347180508,290.14605064145013,290.9133665648494,291.68068248824875,292.44799841164803,293.21531433504737,293.98263025844665,294.749946181846,295.51726210524527,296.2845780286446,297.0518939520439,297.8192098754432,298.5865257988425,299.35384172224184,300.1211576456411,300.88847356904046,301.65578949243974,302.4231054158391,303.19042133923836,303.9577372626377,304.725053186037,305.4923691094363,306.2596850328356,307.02700095623493,307.7943168796342,308.56163280303355,309.3289487264328,310.09626464983216,310.86358057323145,311.6308964966308,312.39821242003006,313.1655283434294,313.9328442668287,314.700160190228,315.4674761136273,316.23479203702664,317.0021079604259,317.76942388382525,318.53673980722454,319.3040557306239,320.07137165402315,320.8386875774225,321.60600350082177,322.3733194242211,323.1406353476204,323.9079512710197,324.675267194419,325.44258311781834,326.2098990412176,326.97721496461696,327.74453088801624,328.5118468114156,329.27916273481486,330.0464786582142,330.8137945816135,331.5811105050128,332.3484264284121,333.11574235181143,333.8830582752107,334.65037419861005,335.41769012200933,336.18500604540867,336.95232196880795,337.7196378922073,338.48695381560657,339.2542697390059,340.0215856624052,340.7889015858045,341.5562175092038,342.32353343260314,343.0908493560024,343.85816527940176,344.62548120280104,345.3927971262004,346.16011304959966,346.927428972999,347.6947448963983,348.4620608197976,349.2293767431969,349.99669266659623,350.7640085899955,351.53132451339485,352.29864043679413,353.06595636019347,353.83327228359275,354.6005882069921,355.36790413039137,356.1352200537907,356.90253597719,357.6698519005893,358.4371678239886,359.20448374738794,359.9717996707872,360.73911559418656,361.50643151758584,362.2737474409852,363.04106336438446,363.8083792877838,364.5756952111831,365.3430111345824,366.1103270579817,366.87764298138103,367.6449589047803,368.41227482817965,369.1795907515789,369.94690667497827,370.71422259837755,371.4815385217769,372.24885444517616,373.0161703685755,373.7834862919748,374.5508022153741,375.3181181387734,376.08543406217274,376.852749985572,377.62006590897136,378.38738183237064,379.15469775577,379.92201367916925,380.6893296025686,381.4566455259679,382.2239614493672,382.9912773727665,383.7585932961658,384.5259092195651,385.29322514296445,386.0605410663637,386.827856989763,387.59517291316234,388.3624888365616,389.12980475996096,389.89712068336024,390.6644366067596,391.43175253015886,392.1990684535582,392.9663843769575,393.7337003003568,394.5010162237561,395.26833214715543,396.0356480705547,396.80296399395405,397.57027991735333,398.33759584075267,399.10491176415195,399.8722276875513,400.63954361095057,401.4068595343499,402.1741754577492,402.9414913811485,403.7088073045478,404.47612322794714,405.2434391513464,406.01075507474576,406.77807099814504,407.5453869215444,408.31270284494366,409.080018768343,409.8473346917423,410.6146506151416,411.3819665385409,412.14928246194023,412.9165983853395,413.68391430873885,414.45123023213813,415.21854615553747,415.98586207893675,416.7531780023361,417.52049392573537,418.2878098491347,419.055125772534,419.8224416959333,420.5897576193326,421.35707354273194,422.1243894661312,422.89170538953056,423.65902131292984,424.4263372363292,425.19365315972846,425.9609690831278,426.7282850065271,427.4956009299264,428.2629168533257,429.03023277672503,429.7975487001243,430.56486462352365,431.3321805469229,432.09949647032226,432.86681239372155,433.6341283171209,434.40144424052016,435.1687601639195,435.9360760873188,436.7033920107181,437.4707079341174,438.23802385751674,439.005339780916,439.77265570431535,440.53997162771464,441.307287551114,442.07460347451325,442.8419193979126,443.60923532131187,444.3765512447112,445.1438671681105,445.9111830915098,446.6784990149091,447.44581493830844,448.2131308617077,448.98044678510706,449.74776270850634,450.5150786319057,451.28239455530496,452.0497104787043,452.8170264021036,453.5843423255029,454.3516582489022,455.11897417230153,455.8862900957008,456.65360601910015,457.42092194249943,458.18823786589877,458.95555378929805,459.7228697126974,460.49018563609667,461.257501559496,462.0248174828953,462.7921334062946,463.5594493296939,464.32676525309324,465.0940811764925,465.86139709989186,466.62871302329114,467.3960289466905,468.16334487008976,468.9306607934891,469.6979767168884,470.4652926402877,471.232608563687,471.99992448708633,472.7672404104856,473.53455633388495,474.30187225728423,475.06918818068357,475.83650410408285,476.6038200274822,477.37113595088147,478.1384518742808,478.9057677976801,479.6730837210794,480.4403996444787,481.20771556787804,481.9750314912773,482.74234741467666,483.50966333807594,484.2769792614753,485.04429518487456,485.8116111082739,486.5789270316732,487.3462429550725,488.1135588784718,488.88087480187113,489.6481907252704,490.41550664866975,491.182822572069,491.95013849546837,492.71745441886765,493.484770342267,494.25208626566626,495.0194021890656,495.7867181124649,496.5540340358642,497.3213499592635,498.08866588266284,498.8559818060621,499.62329772946146,500.39061365286074,501.1579295762601,501.92524549965935,502.6925614230587,503.459877346458,504.2271932698573,504.9945091932566,505.7618251166559,506.5291410400552,507.29645696345455,508.0637728868538,508.83108881025316,509.59840473365244,510.3657206570518,511.13303658045106,511.9003525038504,512.6676684272497,513.434984350649,514.2023002740483,514.9696161974476,515.736932120847,516.5042480442462,517.2715639676455,518.0388798910449,518.8061958144442,519.5735117378434,520.3408276612428,521.1081435846421,521.8754595080414,522.6427754314407,523.41009135484,524.1774072782393,524.9447232016387,525.7120391250379,526.4793550484372,527.2466709718366,528.0139868952358,528.7813028186351,529.5486187420345,530.3159346654338,531.083250588833,531.8505665122324,532.6178824356317,533.385198359031,534.1525142824303,534.9198302058296,535.687146129229,536.4544620526283,537.2217779760275,537.9890938994268,538.7564098228262,539.5237257462255,540.2910416696247,541.0583575930241,541.8256735164234,542.5929894398228,543.360305363222,544.1276212866213,544.8949372100207,545.66225313342,546.4295690568192,547.1968849802186,547.9642009036179,548.7315168270172,549.4988327504165,550.2661486738158,551.0334645972151,551.8007805206145,552.5680964440137,553.335412367413,554.1027282908124,554.8700442142117,555.6373601376109,556.4046760610103,557.1719919844096,557.9393079078089,558.7066238312082,559.4739397546075,560.2412556780068,561.0085716014062,561.7758875248054,562.5432034482047,563.3105193716041,564.0778352950034,564.8451512184026,565.612467141802,566.3797830652013,567.1470989886006,567.9144149119999,568.6817308353992,569.4490467587985,570.2163626821979,570.9836786055971,571.7509945289964,572.5183104523958,573.2856263757951,574.0529422991943,574.8202582225937,575.587574145993,576.3548900693924,577.1222059927916,577.8895219161909,578.6568378395903,579.4241537629896,580.1914696863888,580.9587856097882,581.7261015331875,582.4934174565868,583.260733379986,584.0280493033854,584.7953652267847,585.5626811501841,586.3299970735833,587.0973129969826,587.864628920382,588.6319448437813,589.3992607671805,590.1665766905799,590.9338926139792,591.7012085373785,592.4685244607778,593.2358403841771,594.0031563075764,594.7704722309758,595.537788154375,596.3051040777743,597.0724200011737,597.839735924573,598.6070518479722,599.3743677713716,600.1416836947709,600.9089996181702,601.6763155415695,602.4436314649688,603.2109473883681,603.9782633117675,604.7455792351667,605.512895158566,606.2802110819654,607.0475270053647,607.8148429287639,608.5821588521633,609.3494747755626,610.116790698962,610.8841066223612,611.6514225457605,612.4187384691598,613.1860543925592,613.9533703159584,614.7206862393577,615.4880021627571,616.2553180861564,617.0226340095556,617.789949932955,618.5572658563543,619.3245817797537,620.0918977031529,620.8592136265522,621.6265295499516,622.3938454733509,623.1611613967501,623.9284773201495,624.6957932435488,625.4631091669481,626.2304250903474,626.9977410137467,627.765056937146,628.5323728605454,629.2996887839446,630.0670047073439,630.8343206307433,631.6016365541426,632.3689524775418,633.1362684009412,633.9035843243405,634.6709002477398,635.4382161711391,636.2055320945384,636.9728480179377,637.7401639413371,638.5074798647363,639.2747957881356,640.042111711535,640.8094276349343,641.5767435583335,642.3440594817329,643.1113754051322,643.8786913285315,644.6460072519308,645.4133231753301,646.1806390987294,646.9479550221288,647.715270945528,648.4825868689273,649.2499027923267,650.017218715726,650.7845346391252,651.5518505625246,652.3191664859239,653.0864824093233,653.8537983327225,654.6211142561218,655.3884301795212,656.1557461029205,656.9230620263197,657.690377949719,658.4576938731184,659.2250097965177,659.992325719917,660.7596416433163,661.5269575667156,662.294273490115,663.0615894135142,663.8289053369135,664.5962212603129,665.3635371837121,666.1308531071114,666.8981690305108,667.6654849539101,668.4328008773093,669.2001168007087,669.967432724108,670.7347486475073,671.5020645709066,672.2693804943059,673.0366964177052,673.8040123411046,674.5713282645038,675.3386441879031,676.1059601113025,676.8732760347018,677.640591958101,678.4079078815004,679.1752238048997,679.942539728299,680.7098556516983,681.4771715750976,682.2444874984969,683.0118034218963,683.7791193452955,684.5464352686948,685.3137511920942,686.0810671154935,686.8483830388927,687.6156989622921,688.3830148856914,689.1503308090907,689.91764673249,690.6849626558893,691.4522785792886,692.219594502688,692.9869104260872,693.7542263494865,694.5215422728859,695.2888581962852,696.0561741196844,696.8234900430838,697.5908059664831,698.3581218898825,699.1254378132817,699.892753736681,700.6600696600804,701.4273855834797,702.1947015068789,702.9620174302783,703.7293333536776,704.4966492770769,705.2639652004762,706.0312811238755,706.7985970472748,707.5659129706742,708.3332288940734,709.1005448174727,709.8678607408721,710.6351766642714,711.4024925876706,712.16980851107,712.9371244344693,713.7044403578686,714.4717562812679,715.2390722046672,716.0063881280665,716.7737040514659,717.5410199748651,718.3083358982644,719.0756518216638,719.8429677450631,720.6102836684623,721.3775995918617,722.144915515261,722.9122314386603,723.6795473620596,724.4468632854589,725.2141792088582,725.9814951322576,726.7488110556568,727.5161269790561,728.2834429024555,729.0507588258548,729.818074749254,730.5853906726534,731.3527065960527,732.120022519452,732.8873384428513,733.6546543662506,734.42197028965,735.1892862130493,735.9566021364485,736.7239180598478,737.4912339832472,738.2585499066465,739.0258658300457,739.7931817534451,740.5604976768444,741.3278136002438,742.095129523643,742.8624454470423,743.6297613704417,744.397077293841,745.1643932172402,745.9317091406396,746.6990250640389,747.4663409874382,748.2336569108375,749.0009728342368,749.7682887576361,750.5356046810355,751.3029206044347,752.070236527834,752.8375524512334,753.6048683746327,754.3721842980319,755.1395002214313,755.9068161448306,756.6741320682299,757.4414479916292,758.2087639150285,758.9760798384278,759.7433957618272,760.5107116852264,761.2780276086257,762.0453435320251,762.8126594554244,763.5799753788236,764.347291302223,765.1146072256223,765.8819231490216,766.6492390724209,767.4165549958202,768.1838709192195,768.9511868426189,769.7185027660181,770.4858186894174,771.2531346128168,772.0204505362161,772.7877664596153,773.5550823830147,774.322398306414,775.0897142298134,775.8570301532126,776.6243460766119,777.3916620000113,778.1589779234106,778.9262938468098,779.6936097702092,780.4609256936085,781.2282416170078,781.995557540407,782.7628734638064,783.5301893872057,784.2975053106051,785.0648212340043,785.8321371574036,786.599453080803,787.3667690042023,788.1340849276015,788.9014008510009,789.6687167744002,790.4360326977995,791.2033486211988,791.9706645445981,792.7379804679974,793.5052963913968,794.272612314796,795.0399282381953,795.8072441615947,796.574560084994,797.3418760083932,798.1091919317926,798.8765078551919,799.6438237785912,800.4111397019905,801.1784556253898,801.9457715487891,802.7130874721885,803.4804033955877,804.247719318987]}
},{}],87:[function(require,module,exports){
module.exports={"expected":[4.898587196589413e-16,-0.025163208116819352,-0.050358302458249654,-0.0756173310758552,-0.10097266742349074,-0.12645717746189428,-0.15210439213932836,-0.17794868719628548,-0.2040254723817206,-0.2303713923500973,-0.2570245417380039,-0.28402469720342594,-0.3114135695585755,-0.33923507954975696,-0.367535661348923,-0.39636459843871885,-0.4257743973175618,-0.4558212053507245,-0.4865652801813708,-0.5180715194346439,-0.5504100610519699,-0.5836569665499151,-0.6178950018947853,-0.6532145336319704,-0.6897145615503797,-0.7275039136822585,-0.7667026350778731,-0.8074436088685448,-0.8498744570566366,-0.8941597798006832,-0.9404838064389347,-0.9890535501154691,-1.040102582001606,-1.0938955726123774,-1.1507337891978564,-1.210961793276557,-1.2749756562202343,-1.343233110768455,-1.4162661931388139,-1.494697119713588,-1.579258407536433,-1.6708186244662315,-1.770415697297748,-1.8793004997944796,-1.9989946236174652,-2.1313680257411534,-2.2787450169639873,-2.444051442630342,-2.631023027636634,-2.8445067481366975,-3.0909075867704705,-3.378869649398059,-3.720348820005171,-4.132367366286077,-4.640016262480458,-5.281879551675317,-6.120514421645867,-7.264495499118026,-8.920265509924707,-11.53448890481154,-16.286814403659744,-27.639385539310563,-90.8510671951067,70.66007756374,25.426221681343986,15.49028921453417,11.127708152523132,8.673803360755915,7.099170166799567,6.001849236738522,5.192486671495128,4.5701848366803715,4.076250709236544,3.674217351007761,3.3402326161383114,3.058038325148461,2.8161706325192712,2.6063138895724687,2.4222891613396067,2.259409166249954,2.1140535910552507,1.9833816764700498,1.8651329542367947,1.7574861265603976,1.6589572126462089,1.5683247796847728,1.4845742119079146,1.4068555920370462,1.3344514674506278,1.2667518960787056,1.2032349231232342,1.1434511575500443,1.0870114774916122,1.0335771478232187,0.98285181483491,0.9345749743714686,0.8885166060125242,0.8444727370136045,0.8022617528708409,0.7617213114316087,0.7227057479336966,0.6850838817055428,0.6487371532968829,0.6135580348424853,0.579448667454596,0.5463196881064114,0.5140892153431401,0.48268196864100077,0.45202850063274913,0.4220645249638933,0.3927303254155239,0.36397023426620256,0.3357321697739623,0.3079672242245839,0.280629295279868,0.2536747544219042,0.2270621471677264,0.20075192045618975,0.1747061732117115,0.14888842658875195,0.12326341081343717,0.0977968658780726,0.07245535362129064,0.0472060789497551,0.02201671813363559,-0.0031447477575153263,-0.028310196115140573,-0.05351152452332885,-0.07878081270834993,-0.10415048645673117,-0.1296534852891337,-0.15532343574749152,-0.18119483225869656,-0.20730322768261647,-0.23368543583964718,-0.26037974854899787,-0.2874261700005304,-0.31486667163957155,-0.34274547117689363,-0.37110933985948347,-0.40000794276947377,-0.4294942176811874,-0.45962479892714175,-0.4904604938381851,-0.5220668206746517,-0.5545146186093336,-0.5878807423302607,-0.6222488562901373,-0.6577103466554504,-0.6943653727480709,-0.73232408441782,-0.7717080375836655,-0.812651847461746,-0.8553051281902178,-0.8998347792389407,-0.9464276939241566,-0.9952939845743625,-1.046670843829951,-1.1008271941528138,-1.1580693205789947,-1.2187477388598233,-1.2832656277865202,-1.3520892583960273,-1.425760995123621,-1.5049156412977769,-1.590301178300289,-1.6828053415846116,-1.7834900451324374,-1.8936364991945474,-2.014805108952503,-2.1489161306012643,-2.2983599923469775,-2.4661508415181825,-2.656144459037156,-2.873354387090245,-3.1244221070305684,-3.41833659150282,-3.7675725030756277,-4.189961726778422,-4.711915780970134,-5.374292255120127,-6.243837264833005,-7.43755114693433,-9.180954248158836,-11.971890741200708,-17.16933692948583,-30.273904647356055,-127.19400989374698,57.81088476906749,23.540778558685325,14.767761718273096,10.748434459981535,8.440429657506437,6.941065442660556,5.887580516682595,5.105966289668628,4.50233221679533,4.0215545374912125,3.6291397559349163,3.3023988466458953,3.025795233347998,2.788332008612399,2.5820065007541464,2.4008559214308742,2.2403461499272037,2.096967854394441,1.9679622853116967,1.8511306354317894,1.7446986898797805,1.6472189205282197,1.5574984715292506,1.4745453847224264,1.3975278930344368,1.3257432206884308,1.258593396555536,1.1955663074917284,1.1362207129717967,1.0801742868970579,1.0270939959647916,0.9766882983347227,0.9287007726703509,0.8829048802213763,0.8390996311772798,0.7971059777947198,0.7567637954942332,0.7179293425740892,0.6804731117879423,0.6442780045063048,0.6092377717880171,0.5752556773556083,0.5422433458846923,0.5101197666984595,0.4788104282914226,0.44824656338659274,0.41836448768301576,0.38910501824834876,0.3604129597890693,0.332236648892182,0.30452754785963937,0.27723988101322994,0.2503303073851712,0.22375762456725923,0.19748249920221825,0.17146722018948496,0.14567547116534152,0.12007211922001101,0.09462301714521187,0.06929481677570415,0.044054791205138125,0.018870663827498763,-0.006289557715225097,-0.031457744506125575,-0.05666580801699983,-0.08194586220775393,-0.1073303878151138,-0.1328524006247726,-0.15854562559562926,-0.1844446788153633,-0.21058525941599873,-0.23700435377149626,-0.26374045454167255,-0.290833797426234,-0.3183266188578629,-0.3462634383068285,-0.37469136940524184,-0.40366046474614453,-0.4332240999930189,-0.4634394038786042,-0.4943677418131573,-0.5260752622071317,-0.5586335162987106,-0.5921201643344917,-0.6266197834750297,-0.6622247959029626,-0.6990365394535278,-0.7371665078615928,-0.7767377936845302,-0.8178867744530471,-0.8607650920704467,-0.905541987518237,-0.9524070683319747,-1.0015736061642353,-1.0532824875254212,-1.1078069745161587,-1.165458476856244,-1.2265935957367442,-1.291622779596696,-1.3610210399366853,-1.4353413234823917,-1.515231342736985,-1.601454956135979,-1.6949196010305703,-1.7967118784206952,-1.9081442634707615,-2.0308172239971456,-2.166703022272046,-2.318260576808912,-2.48859569993371,-2.68168909928704,-2.9027281128259124,-3.158601757681245,-3.4586612781635884,-3.815928621868538,-4.2490941225201135,-4.785978131281284,-5.469882355126842,-6.372100065919503,-7.618895945572901,-9.457143615788866,-12.443516159796278,-18.15259921062759,-33.46283857735784,-211.99281182728717,48.91496718138221,21.91525186638987,14.109365540316384,10.39396219891962,8.219124505230534,6.789715464806628,5.777466237893865,5.022180509799735,4.436374181716008,3.968224548256102,3.5850794673812914,3.265342823479461,2.9941599672959756,2.760977352546149,2.5580906728412844,2.379743901901518,2.2215498646329936,2.0801059830267636,1.952732573634759,1.837290397585318,1.7320508075688759,1.6356016124745698,1.546777699675023,1.4646091370523284,1.3882818233807632,1.3171072840472549,1.2504992244364808,1.1879551400926918,1.1290417550265368,1.0733833892239164,1.020652589802462,0.9705625276223984,0.9228607826138512,0.8773242302087333,0.8337548073494925,0.791975986021925,0.7518298196381283,0.7131744560758694,0.675882033056189,0.6398368884693943,0.6049340314540249,0.5710778303855033,0.5381808821059052,0.5061630332192338,0.4749505294637657,0.44447527333863596,0.41467417352380376,0.3854885723591277,0.35686373986844755,0.3287484246305181,0.3010944532884727,0.273856371716576,0.2469911218755624,0.22045774922595662,0.19421713626257261,0.16823175830874618,0.14246545818476242,0.11688323675815217,0.09145105670636514,0.06613565708501315,0.0409043765059784,0.015724982894808563,-0.00943449207824215,-0.034605915711698465,-0.059821215895606336,-0.08511254338823936,-0.11051243650338508,-0.13605399000992305,-0.16177103012406227,-0.18769829758996495,-0.213871640999145,-0.24032822269800438,-0.2671067398821473,-0.29424766378286543,-0.3217935002258537,-0.3497890752959696,-0.3782818503907673,-0.40732227160748197,-0.4369641592076447,-0.46726514386898427,-0.49828715760367415,-0.530096988640724,-0.562766911298146,-0.5963754039811066,-0.6310079710312123,-0.6667580873413648,-0.7037282885968723,-0.7420314349117143,-0.7817921817640517,-0.8231486998483413,-0.8662546952142265,-0.9112817934729486,-0.9584223677473829,-1.0078929105452705,-1.0599380763779649,-1.1148355568421955,-1.1729019959705818,-1.2345002150727085,-1.3000480989153307,-1.3700296073885116,-1.4450085311074907,-1.525645823918585,-1.6127216473072776,-1.7071636927931235,-1.81008397286971,-1.9228271903539536,-2.0470351733802064,-2.1847339671705384,-2.338453456446341,-2.5113946365491797,-2.7076682518298645,-2.932643046056718,-3.193467233977922,-3.499872802992749,-3.8654593963979136,-4.309828213722052,-4.862303927567475,-5.568818580316228,-6.505608406613952,-7.809143923549685,-9.750264457590887,-12.953555820974355,-19.25491758435713,-37.40186316834406,-635.9826284721753,42.39101470463406,20.499335183583323,13.506913688295302,10.061929312379785,8.00897128905431,6.644693601459513,5.671281819617688,4.941000121604412,4.372231221755199,3.9162091707266327,3.5420015893844345,3.229040097795126,2.9631148916841696,2.734093625436541,2.5345565583580822,2.358945526952387,2.2030143870217795,2.063463278779011,1.9376887671337781,1.8236091736496223,1.719539961402563,1.624103201382211,1.536160719462841,1.4547639990087777,1.379116135706374,1.3085425918975624,1.2424684636906134,1.1804006289277595,1.1219135952399903,1.066638182940494,1.0142524012417675,0.9644740369651207,0.9170545916889129,0.8717742890897112,0.8284379379329558,0.7868714839183687,0.7469191196980448,0.7084408499303172,0.6713104294089008,0.6354136087103774,0.6006466345982028,0.5669149624696177,0.5341321460714589,0.5022188760227442,0.4711021437269514,0.44071451131151057,0.4109934715063782,0.38188088403008336,0.3533224772166949,0.3252674053879335,0.2976678539289957,0.27047868522400825,0.24365711959625225,0.2171624462163606,0.19095575961987293,0.16499971803703076,0.13925832020287132,0.11369669769912602,0.08828092019438284,0.0629778112048873,0.03775477220312105,0.01257961306153199,-0.012579613061530031,-0.03775477220311908,-0.06297781120488534,-0.08828092019438087,-0.11369669769912404,-0.13925832020286932,-0.16499971803702876,-0.1909557596198709,-0.21716244621635855,-0.24365711959625017,-0.2704786852240062,-0.2976678539289936,-0.3252674053879313,-0.3533224772166927,-0.3818808840300811,-0.41099347150637594,-0.44071451131150824,-0.47110214372694903,-0.5022188760227417,-0.5341321460714564,-0.5669149624696151,-0.6006466345982001,-0.6354136087103748,-0.671310429408898,-0.7084408499303142,-0.7469191196980418,-0.7868714839183655,-0.8284379379329526,-0.8717742890897078,-0.9170545916889092,-0.9644740369651169,-1.0142524012417635,-1.0666381829404898,-1.121913595239986,-1.1804006289277549,-1.2424684636906085,-1.308542591897557,-1.3791161357063684,-1.4547639990087715,-1.5361607194628344,-1.6241032013822039,-1.7195399614025553,-1.8236091736496138,-1.9376887671337688,-2.063463278779001,-2.203014387021768,-2.358945526952374,-2.5345565583580676,-2.7340936254365245,-2.9631148916841505,-3.229040097795104,-3.542001589384408,-3.9162091707266007,-4.372231221755159,-4.941000121604362,-5.671281819617623,-6.644693601459424,-8.008971289054182,-10.061929312379586,-13.506913688294944,-20.4993351835825,-42.39101470463054,635.9826284729678,37.4018631683468,19.25491758435786,12.953555820974685,9.750264457591076,7.809143923549807,6.505608406614036,5.56881858031629,4.862303927567523,4.30982821372209,3.8654593963979447,3.4998728029927753,3.1934672339779437,2.9326430460567368,2.707668251829881,2.511394636549194,2.3384534564463535,2.1847339671705495,2.0470351733802166,1.9228271903539629,1.8100839728697182,1.7071636927931313,1.6127216473072847,1.5256458239185915,1.4450085311074967,1.3700296073885174,1.300048098915336,1.2345002150727133,1.1729019959705864,1.1148355568421997,1.059938076377969,1.0078929105452745,0.9584223677473866,0.9112817934729522,0.8662546952142298,0.8231486998483446,0.781792181764055,0.7420314349117173,0.7037282885968753,0.6667580873413677,0.631007971031215,0.5963754039811092,0.5627669112981487,0.5300969886407265,0.4982871576036766,0.46726514386898665,0.43696415920764703,0.40732227160748424,0.3782818503907695,0.3497890752959718,0.32179350022585584,0.2942476637828676,0.2671067398821494,0.24032822269800647,0.21387164099914704,0.18769829758996698,0.16177103012406427,0.13605399000992505,0.11051243650338706,0.08511254338824134,0.0598212158956083,0.03460591571170043,0.009434492078244108,-0.015724982894806602,-0.040904376505976434,-0.06613565708501119,-0.09145105670636317,-0.11688323675815018,-0.14246545818476042,-0.16823175830874415,-0.1942171362625706,-0.22045774922595457,-0.24699112187556033,-0.2738563717165739,-0.30109445328847056,-0.32874842463051596,-0.35686373986844533,-0.3854885723591255,-0.4146741735238014,-0.4444752733386336,-0.4749505294637633,-0.5061630332192314,-0.5381808821059026,-0.5710778303855008,-0.6049340314540222,-0.6398368884693916,-0.6758820330561861,-0.7131744560758664,-0.7518298196381253,-0.7919759860219218,-0.8337548073494891,-0.8773242302087298,-0.9228607826138475,-0.9705625276223945,-1.020652589802458,-1.0733833892239122,-1.1290417550265324,-1.1879551400926869,-1.2504992244364757,-1.3171072840472495,-1.3882818233807577,-1.4646091370523224,-1.5467776996750164,-1.6356016124745627,-1.732050807568868,-1.8372903975853094,-1.9527325736347494,-2.0801059830267534,-2.2215498646329817,-2.3797439019015045,-2.5580906728412693,-2.7609773525461323,-2.994159967295956,-3.265342823479438,-3.5850794673812643,-3.968224548256069,-4.436374181715967,-5.022180509799685,-5.7774662378937975,-6.789715464806536,-8.219124505230399,-10.393962198919407,-14.109365540315993,-21.915251866388925,-48.91496718137752,211.99281182737522,33.46283857736004,18.152599210628235,12.443516159796584,9.457143615789041,7.6188959455730165,6.372100065919585,5.469882355126902,4.785978131281331,4.249094122520151,3.8159286218685686,3.4586612781636137,3.158601757681266,2.9027281128259306,2.6816890992870563,2.488595699933724,2.3182605768089246,2.166703022272057,2.030817223997156,1.9081442634707706,1.7967118784207035,1.6949196010305778,1.6014549561359859,1.5152313427369914,1.4353413234823977,1.3610210399366909,1.291622779596701,1.226593595736749,1.1654584768562484,1.107806974516163,1.0532824875254252,1.0015736061642393,0.9524070683319785,0.9055419875182406,0.8607650920704502,0.8178867744530505,0.7767377936845333,0.7371665078615958,0.6990365394535307,0.6622247959029655,0.6266197834750324,0.5921201643344943,0.5586335162987132,0.5260752622071343,0.49436774181315973,0.4634394038786066,0.43322409999302125,0.4036604647461468,0.37469136940524406,0.3462634383068307,0.31832661885786506,0.29083379742623616,0.26374045454167466,0.23700435377149834,0.2105852594160008,0.18444467881536533,0.1585456255956313,0.1328524006247746,0.10733038781511577,0.0819458622077559,0.056665808017001794,0.03145774450612754,0.006289557715227058,-0.018870663827496803,-0.04405479120513616,-0.06929481677570219,-0.09462301714520989,-0.12007211922000902,-0.14567547116533952,-0.17146722018948296,-0.19748249920221622,-0.22375762456725717,-0.25033030738516915,-0.27723988101322783,-0.30452754785963726,-0.33223664889217985,-0.36041295978906707,-0.38910501824834653,-0.4183644876830135,-0.4482465633865904,-0.47881042829142023,-0.510119766698457,-0.5422433458846897,-0.5752556773556058,-0.6092377717880143,-0.644278004506302,-0.6804731117879395,-0.7179293425740862,-0.7567637954942358,-0.7971059777947107,-0.8390996311772765,-0.8829048802213727,-0.9287007726703539,-0.9766882983347119,-1.0270939959647876,-1.0801742868970536,-1.1362207129718005,-1.1955663074917149,-1.2585933965555218,-1.3257432206884254,-1.397527893034431,-1.4745453847224315,-1.5574984715292317,-1.6472189205282124,-1.7446986898797727,-1.8511306354317962,-1.9679622853116698,-2.0969678543944306,-2.2403461499271917,-2.4008559214308853,-2.5820065007541584,-2.7883320086123504,-3.025795233347978,-3.3023988466458722,-3.6291397559349385,-4.021554537491118,-4.502332216795288,-5.105966289668576,-5.887580516682652,-6.941065442660285,-8.440429657506295,-10.748434459981308,-14.767761718273444,-23.54077855868621,-57.81088476904906,127.19400989377868,30.273904647357853,17.169336929485358,11.971890741201504,9.180954248159003,7.43755114693444,6.243837264832941,5.3742922551202925,4.7119157809701795,4.189961726778458,3.7675725030756575,3.4183365915028,3.1244221070306275,2.8733543870902634,2.656144459037172,2.466150841518171,2.298359992347012,2.1489161306012754,2.014805108952513,1.89363649919454,1.7834900451324602,1.6828053415846191,1.5903011783002958,1.5049156412977833,1.425760995123616,1.3520892583960429,1.2832656277865255,1.2187477388598282,1.1580693205789911,1.100827194152826,1.046670843829955,0.9952939845743664,0.9464276939241535,0.8998347792389507,0.8553051281902211,0.8126518474617492,0.7717080375836686,0.7323240844178176,0.6943653727480791,0.6577103466554531,0.62224885629014,0.5878807423302586,0.5545146186093408,0.5220668206746542,0.49046049383818746,0.4596247989271398,0.4294942176811939,0.40000794276947604,0.3711093398594857,0.3427454711768958,0.3148666716395698,0.28742617000053444,0.260379748549,0.23368543583964738,0.2073032276826148,0.18119483225870225,0.15532343574749535,0.1296534852891357,0.10415048645673135,0.07878081270835548,0.0535115245233326,0.028310196115142537,0.0031447477575155093,-0.022016718133637182,-0.04720607894975135,-0.07245535362128867,-0.0977968658780724,-0.12326341081343699,-0.14888842658874632,-0.17470617321170764,-0.20075192045618773,-0.2270621471677262,-0.2536747544218983,-0.28062929527986397,-0.3079672242245818,-0.33573216977396214,-0.3639702342662044,-0.39273032541551955,-0.42206452496389096,-0.4520285006327489,-0.48268196864100055,-0.5140892153431331,-0.5463196881064065,-0.5794486674545933,-0.6135580348424851,-0.6487371532968751,-0.6850838817055372,-0.7227057479336936,-0.7617213114316084,-0.8022617528708434,-0.8444727370135982,-0.8885166060125207,-0.9345749743714683,-0.9828518148349097,-1.0335771478232074,-1.087011477491604,-1.14345115755004,-1.2032349231232338,-1.2667518960786912,-1.3344514674506174,-1.4068555920370405,-1.484574211907914,-1.5683247796847783,-1.658957212646195,-1.7574861265603896,-1.8651329542367858,-1.983381676470049,-2.1140535910552205,-2.259409166249931,-2.422289161339593,-2.606313889572467,-2.8161706325192224,-3.058038325148422,-3.3402326161382874,-3.6742173510077585,-4.0762507092365725,-4.570184836680289,-5.1924866714950735,-6.001849236738449,-7.099170166799557,-8.673803360755496,-11.127708152522667,-15.4902892145337,-25.42622168134387,-70.66007756374796,90.85106719513755,27.639385539312062,16.286814403659793,11.534488904811326,8.92026550992501,7.264495499118131,6.120514421645942,5.281879551675322,4.640016262480582,4.132367366286145,3.7203488200051997,3.378869649398061,3.0909075867704536,2.8445067481367317,2.6310230276366497,2.444051442630343,2.2787450169639776,2.1313680257411742,1.9989946236174838,1.8793004997944884,1.7704156972977487,1.6708186244662524,1.5792584075364462,1.4946971197135945,1.4162661931388143,1.3432331107684505,1.2749756562202441,1.210961793276562,1.1507337891978568,1.0938955726123738,1.0401025820016139,0.9890535501154765,0.9404838064389384,0.8941597798006835,0.8498744570566461,0.807443608868551,0.7667026350778762,0.7275039136822588,0.6897145615503772,0.6532145336319757,0.617895001894788,0.5836569665499153,0.5504100610519679,0.5180715194346487,0.4865652801813754,0.45582120535072684,0.425774397317562,0.39636459843872524,0.36753566134892723,0.3392350795497592,0.31141356955857574,0.2840246972034242,0.2570245417380079,0.23037139235009935,0.2040254723817208,0.17794868719628384,0.152104392139334,0.12645717746189808,0.10097266742349273,0.07561733107585537,0.05035830245825518,0.02516320811682309,1.4695761589768238e-15],"x":[-12.566370614359172,-12.591528513487019,-12.616686412614865,-12.64184431174271,-12.667002210870557,-12.692160109998403,-12.717318009126249,-12.742475908254097,-12.767633807381943,-12.792791706509789,-12.817949605637635,-12.84310750476548,-12.868265403893327,-12.893423303021173,-12.918581202149019,-12.943739101276865,-12.968897000404711,-12.994054899532557,-13.019212798660403,-13.044370697788251,-13.069528596916097,-13.094686496043943,-13.11984439517179,-13.145002294299635,-13.170160193427481,-13.195318092555327,-13.220475991683173,-13.24563389081102,-13.270791789938865,-13.295949689066711,-13.321107588194558,-13.346265487322404,-13.371423386450251,-13.396581285578097,-13.421739184705944,-13.44689708383379,-13.472054982961636,-13.497212882089482,-13.522370781217328,-13.547528680345174,-13.57268657947302,-13.597844478600866,-13.623002377728712,-13.648160276856558,-13.673318175984404,-13.698476075112252,-13.723633974240098,-13.748791873367944,-13.77394977249579,-13.799107671623636,-13.824265570751482,-13.849423469879328,-13.874581369007174,-13.89973926813502,-13.924897167262866,-13.950055066390712,-13.975212965518558,-14.000370864646406,-14.025528763774252,-14.050686662902098,-14.075844562029944,-14.10100246115779,-14.126160360285636,-14.151318259413483,-14.176476158541329,-14.201634057669175,-14.22679195679702,-14.251949855924867,-14.277107755052713,-14.302265654180559,-14.327423553308407,-14.352581452436253,-14.377739351564099,-14.402897250691945,-14.42805514981979,-14.453213048947637,-14.478370948075483,-14.503528847203329,-14.528686746331175,-14.553844645459021,-14.579002544586867,-14.604160443714713,-14.62931834284256,-14.654476241970407,-14.679634141098253,-14.7047920402261,-14.729949939353945,-14.755107838481791,-14.780265737609637,-14.805423636737483,-14.83058153586533,-14.855739434993176,-14.880897334121022,-14.906055233248868,-14.931213132376714,-14.956371031504561,-14.981528930632408,-15.006686829760254,-15.0318447288881,-15.057002628015946,-15.082160527143792,-15.107318426271638,-15.132476325399484,-15.15763422452733,-15.182792123655176,-15.207950022783022,-15.233107921910868,-15.258265821038714,-15.283423720166562,-15.308581619294408,-15.333739518422254,-15.3588974175501,-15.384055316677946,-15.409213215805792,-15.434371114933638,-15.459529014061484,-15.48468691318933,-15.509844812317176,-15.535002711445022,-15.560160610572868,-15.585318509700715,-15.610476408828562,-15.635634307956408,-15.660792207084254,-15.6859501062121,-15.711108005339947,-15.736265904467793,-15.761423803595639,-15.786581702723485,-15.81173960185133,-15.836897500979177,-15.862055400107023,-15.887213299234869,-15.912371198362717,-15.937529097490563,-15.962686996618409,-15.987844895746255,-16.0130027948741,-16.038160694001945,-16.063318593129793,-16.08847649225764,-16.113634391385485,-16.138792290513333,-16.163950189641177,-16.189108088769025,-16.21426598789687,-16.239423887024717,-16.26458178615256,-16.28973968528041,-16.314897584408254,-16.3400554835361,-16.365213382663946,-16.390371281791793,-16.41552918091964,-16.440687080047486,-16.465844979175333,-16.491002878303178,-16.516160777431026,-16.54131867655887,-16.566476575686718,-16.591634474814562,-16.61679237394241,-16.641950273070254,-16.667108172198102,-16.692266071325946,-16.717423970453794,-16.74258186958164,-16.767739768709486,-16.792897667837334,-16.818055566965178,-16.843213466093026,-16.86837136522087,-16.893529264348718,-16.918687163476562,-16.94384506260441,-16.969002961732254,-16.994160860860102,-17.019318759987947,-17.044476659115794,-17.069634558243642,-17.094792457371486,-17.119950356499334,-17.14510825562718,-17.170266154755026,-17.19542405388287,-17.22058195301072,-17.245739852138563,-17.27089775126641,-17.296055650394255,-17.321213549522103,-17.34637144864995,-17.371529347777795,-17.396687246905643,-17.421845146033487,-17.447003045161335,-17.47216094428918,-17.497318843417027,-17.52247674254487,-17.54763464167272,-17.572792540800563,-17.59795043992841,-17.623108339056255,-17.648266238184103,-17.67342413731195,-17.698582036439795,-17.723739935567643,-17.748897834695487,-17.774055733823335,-17.79921363295118,-17.824371532079027,-17.84952943120687,-17.87468733033472,-17.899845229462564,-17.92500312859041,-17.950161027718256,-17.975318926846104,-18.00047682597395,-18.025634725101796,-18.050792624229643,-18.075950523357488,-18.101108422485336,-18.12626632161318,-18.151424220741028,-18.176582119868872,-18.20174001899672,-18.226897918124564,-18.252055817252412,-18.277213716380256,-18.302371615508104,-18.327529514635952,-18.352687413763796,-18.377845312891644,-18.403003212019488,-18.428161111147336,-18.45331901027518,-18.478476909403028,-18.503634808530872,-18.52879270765872,-18.553950606786564,-18.579108505914412,-18.604266405042257,-18.629424304170104,-18.654582203297952,-18.679740102425797,-18.704898001553644,-18.73005590068149,-18.755213799809336,-18.78037169893718,-18.80552959806503,-18.830687497192873,-18.85584539632072,-18.881003295448565,-18.906161194576413,-18.93131909370426,-18.956476992832105,-18.981634891959953,-19.006792791087797,-19.031950690215645,-19.05710858934349,-19.082266488471337,-19.10742438759918,-19.13258228672703,-19.157740185854873,-19.18289808498272,-19.208055984110565,-19.233213883238413,-19.25837178236626,-19.283529681494105,-19.308687580621953,-19.333845479749797,-19.359003378877645,-19.38416127800549,-19.409319177133337,-19.43447707626118,-19.45963497538903,-19.484792874516874,-19.50995077364472,-19.535108672772566,-19.560266571900414,-19.58542447102826,-19.610582370156106,-19.635740269283954,-19.660898168411798,-19.686056067539646,-19.71121396666749,-19.736371865795338,-19.761529764923182,-19.78668766405103,-19.811845563178874,-19.837003462306722,-19.862161361434566,-19.887319260562414,-19.912477159690262,-19.937635058818106,-19.962792957945954,-19.9879508570738,-20.013108756201646,-20.03826665532949,-20.063424554457338,-20.088582453585182,-20.11374035271303,-20.138898251840875,-20.164056150968722,-20.189214050096567,-20.214371949224414,-20.239529848352262,-20.264687747480107,-20.289845646607954,-20.3150035457358,-20.340161444863647,-20.36531934399149,-20.39047724311934,-20.415635142247183,-20.44079304137503,-20.465950940502875,-20.491108839630723,-20.516266738758567,-20.541424637886415,-20.566582537014263,-20.591740436142107,-20.616898335269955,-20.6420562343978,-20.667214133525647,-20.69237203265349,-20.71752993178134,-20.742687830909183,-20.76784573003703,-20.793003629164875,-20.818161528292723,-20.84331942742057,-20.868477326548415,-20.893635225676263,-20.918793124804107,-20.943951023931955,-20.9691089230598,-20.994266822187647,-21.01942472131549,-21.04458262044334,-21.069740519571184,-21.09489841869903,-21.120056317826876,-21.145214216954724,-21.17037211608257,-21.195530015210416,-21.220687914338264,-21.245845813466108,-21.271003712593956,-21.2961616117218,-21.321319510849648,-21.346477409977492,-21.37163530910534,-21.396793208233184,-21.421951107361032,-21.447109006488876,-21.472266905616724,-21.497424804744572,-21.522582703872416,-21.547740603000264,-21.57289850212811,-21.598056401255956,-21.6232143003838,-21.64837219951165,-21.673530098639493,-21.69868799776734,-21.723845896895185,-21.749003796023032,-21.774161695150877,-21.799319594278725,-21.824477493406572,-21.849635392534417,-21.874793291662264,-21.89995119079011,-21.925109089917957,-21.9502669890458,-21.97542488817365,-22.000582787301493,-22.02574068642934,-22.050898585557185,-22.076056484685033,-22.101214383812877,-22.126372282940725,-22.151530182068573,-22.176688081196417,-22.201845980324265,-22.22700387945211,-22.252161778579957,-22.2773196777078,-22.30247757683565,-22.327635475963493,-22.35279337509134,-22.377951274219186,-22.403109173347033,-22.428267072474878,-22.453424971602725,-22.478582870730573,-22.503740769858418,-22.528898668986265,-22.55405656811411,-22.579214467241957,-22.6043723663698,-22.62953026549765,-22.654688164625494,-22.67984606375334,-22.705003962881186,-22.730161862009034,-22.75531976113688,-22.780477660264726,-22.805635559392574,-22.830793458520418,-22.855951357648266,-22.88110925677611,-22.906267155903958,-22.931425055031802,-22.95658295415965,-22.981740853287494,-23.006898752415342,-23.032056651543186,-23.057214550671034,-23.082372449798882,-23.107530348926726,-23.132688248054574,-23.15784614718242,-23.183004046310266,-23.20816194543811,-23.23331984456596,-23.258477743693803,-23.28363564282165,-23.308793541949495,-23.333951441077343,-23.359109340205187,-23.384267239333035,-23.409425138460882,-23.434583037588727,-23.459740936716575,-23.48489883584442,-23.510056734972267,-23.53521463410011,-23.56037253322796,-23.585530432355803,-23.61068833148365,-23.635846230611495,-23.661004129739343,-23.686162028867187,-23.711319927995035,-23.736477827122883,-23.761635726250727,-23.786793625378575,-23.81195152450642,-23.837109423634267,-23.86226732276211,-23.88742522188996,-23.912583121017803,-23.93774102014565,-23.962898919273496,-23.988056818401343,-24.013214717529188,-24.038372616657036,-24.063530515784883,-24.088688414912728,-24.113846314040575,-24.13900421316842,-24.164162112296268,-24.189320011424112,-24.21447791055196,-24.239635809679804,-24.26479370880765,-24.289951607935496,-24.315109507063344,-24.34026740619119,-24.365425305319036,-24.390583204446884,-24.415741103574728,-24.440899002702576,-24.46605690183042,-24.491214800958268,-24.516372700086112,-24.54153059921396,-24.566688498341804,-24.591846397469652,-24.617004296597496,-24.642162195725344,-24.667320094853192,-24.692477993981036,-24.717635893108884,-24.74279379223673,-24.767951691364576,-24.79310959049242,-24.81826748962027,-24.843425388748113,-24.86858328787596,-24.893741187003805,-24.918899086131653,-24.944056985259497,-24.969214884387345,-24.994372783515193,-25.019530682643037,-25.044688581770885,-25.06984648089873,-25.095004380026577,-25.12016227915442,-25.14532017828227,-25.170478077410113,-25.19563597653796,-25.220793875665805,-25.245951774793653,-25.271109673921497,-25.296267573049345,-25.321425472177193,-25.346583371305037,-25.371741270432885,-25.39689916956073,-25.422057068688577,-25.44721496781642,-25.47237286694427,-25.497530766072114,-25.52268866519996,-25.547846564327806,-25.573004463455653,-25.598162362583498,-25.623320261711346,-25.648478160839193,-25.673636059967038,-25.698793959094886,-25.72395185822273,-25.749109757350578,-25.774267656478422,-25.79942555560627,-25.824583454734114,-25.849741353861962,-25.874899252989806,-25.900057152117654,-25.925215051245498,-25.950372950373346,-25.975530849501194,-26.000688748629038,-26.025846647756886,-26.05100454688473,-26.076162446012578,-26.101320345140422,-26.12647824426827,-26.151636143396114,-26.176794042523962,-26.201951941651807,-26.227109840779654,-26.252267739907502,-26.277425639035346,-26.302583538163194,-26.32774143729104,-26.352899336418886,-26.37805723554673,-26.40321513467458,-26.428373033802423,-26.45353093293027,-26.478688832058115,-26.503846731185963,-26.529004630313807,-26.554162529441655,-26.579320428569503,-26.604478327697347,-26.629636226825195,-26.65479412595304,-26.679952025080887,-26.70510992420873,-26.73026782333658,-26.755425722464423,-26.78058362159227,-26.805741520720115,-26.830899419847963,-26.856057318975807,-26.881215218103655,-26.906373117231503,-26.931531016359347,-26.956688915487195,-26.98184681461504,-27.007004713742887,-27.03216261287073,-27.05732051199858,-27.082478411126424,-27.10763631025427,-27.132794209382116,-27.157952108509964,-27.183110007637808,-27.208267906765656,-27.233425805893503,-27.258583705021348,-27.283741604149196,-27.30889950327704,-27.334057402404888,-27.359215301532732,-27.38437320066058,-27.409531099788424,-27.434688998916272,-27.459846898044116,-27.485004797171964,-27.51016269629981,-27.535320595427656,-27.560478494555504,-27.585636393683348,-27.610794292811196,-27.63595219193904,-27.661110091066888,-27.686267990194732,-27.71142588932258,-27.736583788450424,-27.761741687578272,-27.786899586706117,-27.812057485833964,-27.837215384961812,-27.862373284089657,-27.887531183217504,-27.91268908234535,-27.937846981473196,-27.96300488060104,-27.98816277972889,-28.013320678856733,-28.03847857798458,-28.063636477112425,-28.088794376240273,-28.113952275368117,-28.139110174495965,-28.164268073623813,-28.189425972751657,-28.214583871879505,-28.23974177100735,-28.264899670135197,-28.29005756926304,-28.31521546839089,-28.340373367518733,-28.36553126664658,-28.390689165774425,-28.415847064902273,-28.441004964030117,-28.466162863157965,-28.491320762285813,-28.516478661413657,-28.541636560541505,-28.56679445966935,-28.591952358797197,-28.61711025792504,-28.64226815705289,-28.667426056180734,-28.69258395530858,-28.717741854436426,-28.742899753564274,-28.768057652692118,-28.793215551819966,-28.818373450947814,-28.843531350075658,-28.868689249203506,-28.89384714833135,-28.919005047459198,-28.944162946587042,-28.96932084571489,-28.994478744842734,-29.019636643970582,-29.044794543098426,-29.069952442226274,-29.09511034135412,-29.120268240481966,-29.145426139609814,-29.17058403873766,-29.195741937865506,-29.22089983699335,-29.246057736121198,-29.271215635249042,-29.29637353437689,-29.321531433504735,-29.346689332632582,-29.371847231760427,-29.397005130888274,-29.42216303001612,-29.447320929143967,-29.472478828271814,-29.49763672739966,-29.522794626527507,-29.54795252565535,-29.5731104247832,-29.598268323911043,-29.62342622303889,-29.648584122166735,-29.673742021294583,-29.698899920422427,-29.724057819550275,-29.749215718678123,-29.774373617805967,-29.799531516933815,-29.82468941606166,-29.849847315189507,-29.87500521431735,-29.9001631134452,-29.925321012573043,-29.95047891170089,-29.975636810828735,-30.000794709956583,-30.025952609084428,-30.051110508212275,-30.076268407340123,-30.101426306467967,-30.126584205595815,-30.15174210472366,-30.176900003851507,-30.20205790297935,-30.2272158021072,-30.252373701235044,-30.27753160036289,-30.302689499490736,-30.327847398618584,-30.353005297746428,-30.378163196874276,-30.403321096002124,-30.428478995129968,-30.453636894257816,-30.47879479338566,-30.503952692513508,-30.529110591641352,-30.5542684907692,-30.579426389897044,-30.604584289024892,-30.629742188152736,-30.654900087280584,-30.68005798640843,-30.705215885536276,-30.730373784664124,-30.75553168379197,-30.780689582919816,-30.80584748204766,-30.83100538117551,-30.856163280303353,-30.8813211794312,-30.906479078559045,-30.931636977686892,-30.956794876814737,-30.981952775942585,-31.00711067507043,-31.032268574198277,-31.057426473326124,-31.08258437245397,-31.107742271581817,-31.13290017070966,-31.15805806983751,-31.183215968965353,-31.2083738680932,-31.233531767221045,-31.258689666348893,-31.283847565476737,-31.309005464604585,-31.33416336373243,-31.359321262860277,-31.384479161988125,-31.40963706111597,-31.434794960243817,-31.45995285937166,-31.48511075849951,-31.510268657627353,-31.5354265567552,-31.560584455883046,-31.585742355010893,-31.610900254138738,-31.636058153266585,-31.661216052394433,-31.686373951522278,-31.711531850650125,-31.73668974977797,-31.761847648905817,-31.78700554803366,-31.81216344716151,-31.837321346289354,-31.8624792454172,-31.887637144545046,-31.912795043672894,-31.937952942800738,-31.963110841928586,-31.988268741056434,-32.01342664018428,-32.038584539312126,-32.063742438439974,-32.088900337567814,-32.11405823669566,-32.13921613582351,-32.16437403495136,-32.1895319340792,-32.214689833207046,-32.239847732334894,-32.26500563146274,-32.29016353059058,-32.31532142971843,-32.34047932884628,-32.365637227974126,-32.390795127101974,-32.415953026229815,-32.44111092535766,-32.46626882448551,-32.49142672361336,-32.5165846227412,-32.54174252186905,-32.566900420996895,-32.59205832012474,-32.61721621925259,-32.64237411838043,-32.66753201750828,-32.69268991663613,-32.717847815763974,-32.743005714891815,-32.76816361401966,-32.79332151314751,-32.81847941227536,-32.8436373114032,-32.86879521053105,-32.893953109658895,-32.91911100878674,-32.94426890791459,-32.96942680704243,-32.99458470617028,-33.01974260529813,-33.044900504425975,-33.070058403553816,-33.09521630268166,-33.12037420180951,-33.14553210093736,-33.1706900000652,-33.19584789919305,-33.221005798320896,-33.24616369744874,-33.27132159657659,-33.29647949570443,-33.32163739483228,-33.34679529396013,-33.371953193087975,-33.397111092215816,-33.422268991343664,-33.44742689047151,-33.47258478959936,-33.4977426887272,-33.52290058785505,-33.548058486982896,-33.573216386110744,-33.59837428523859,-33.62353218436643,-33.64869008349428,-33.67384798262213,-33.699005881749976,-33.72416378087782,-33.749321680005664,-33.77447957913351,-33.79963747826136,-33.8247953773892,-33.84995327651705,-33.875111175644896,-33.900269074772744,-33.92542697390059,-33.95058487302843,-33.97574277215628,-34.00090067128413,-34.026058570411976,-34.05121646953982,-34.076374368667665,-34.10153226779551,-34.12669016692336,-34.1518480660512,-34.17700596517905,-34.2021638643069,-34.227321763434745,-34.25247966256259,-34.27763756169043,-34.30279546081828,-34.32795335994613,-34.35311125907398,-34.37826915820182,-34.403427057329665,-34.42858495645751,-34.45374285558536,-34.4789007547132,-34.50405865384105,-34.5292165529689,-34.554374452096745,-34.57953235122459,-34.604690250352434,-34.62984814948028,-34.65500604860813,-34.68016394773598,-34.70532184686382,-34.730479745991666,-34.75563764511951,-34.78079554424736,-34.8059534433752,-34.83111134250305,-34.8562692416309,-34.881427140758746,-34.90658503988659,-34.931742939014434,-34.95690083814228,-34.98205873727013,-35.00721663639798,-35.03237453552582,-35.057532434653666,-35.082690333781514,-35.10784823290936,-35.1330061320372,-35.15816403116505,-35.1833219302929,-35.208479829420746,-35.233637728548594,-35.258795627676434,-35.28395352680428,-35.30911142593213,-35.33426932505998,-35.35942722418782,-35.38458512331567,-35.409743022443514,-35.43490092157136,-35.4600588206992,-35.48521671982705,-35.5103746189549,-35.535532518082746,-35.560690417210594,-35.585848316338435,-35.61100621546628,-35.63616411459413,-35.66132201372198,-35.68647991284982,-35.71163781197767,-35.736795711105515,-35.76195361023336,-35.7871115093612,-35.81226940848905,-35.8374273076169,-35.86258520674475,-35.887743105872595,-35.912901005000435,-35.93805890412828,-35.96321680325613,-35.98837470238398,-36.01353260151182,-36.03869050063967,-36.063848399767515,-36.08900629889536,-36.11416419802321,-36.13932209715105,-36.1644799962789,-36.18963789540675,-36.214795794534595,-36.239953693662436,-36.265111592790284,-36.29026949191813,-36.31542739104598,-36.34058529017382,-36.36574318930167,-36.390901088429516,-36.41605898755736,-36.44121688668521,-36.46637478581305,-36.4915326849409,-36.51669058406875,-36.541848483196596,-36.567006382324436,-36.592164281452284,-36.61732218058013,-36.64248007970798,-36.66763797883582,-36.69279587796367,-36.717953777091516,-36.743111676219364,-36.76826957534721,-36.79342747447505,-36.8185853736029,-36.84374327273075,-36.868901171858596,-36.89405907098644,-36.919216970114284,-36.94437486924213,-36.96953276836998,-36.99469066749782,-37.01984856662567,-37.04500646575352,-37.070164364881364,-37.09532226400921,-37.12048016313705,-37.1456380622649,-37.17079596139275,-37.195953860520596,-37.22111175964844,-37.246269658776285,-37.27142755790413,-37.29658545703198,-37.32174335615982,-37.34690125528767,-37.37205915441552,-37.397217053543365,-37.42237495267121,-37.44753285179905,-37.4726907509269,-37.49784865005475,-37.5230065491826,-37.54816444831044,-37.573322347438285,-37.59848024656613,-37.62363814569398,-37.64879604482182,-37.67395394394967,-37.69911184307752]}
},{}],88:[function(require,module,exports){
module.exports={"expected":[-4.898587196589413e-16,0.025163208116819352,0.050358302458249654,0.0756173310758552,0.10097266742349074,0.12645717746189428,0.15210439213932836,0.17794868719628548,0.2040254723817206,0.2303713923500973,0.2570245417380039,0.28402469720342594,0.3114135695585755,0.33923507954975696,0.367535661348923,0.39636459843871885,0.4257743973175618,0.4558212053507245,0.4865652801813708,0.5180715194346439,0.5504100610519699,0.5836569665499151,0.6178950018947853,0.6532145336319704,0.6897145615503797,0.7275039136822585,0.7667026350778731,0.8074436088685448,0.8498744570566366,0.8941597798006832,0.9404838064389347,0.9890535501154691,1.040102582001606,1.0938955726123774,1.1507337891978564,1.210961793276557,1.2749756562202343,1.343233110768455,1.4162661931388139,1.494697119713588,1.579258407536433,1.6708186244662315,1.770415697297748,1.8793004997944796,1.9989946236174652,2.1313680257411534,2.2787450169639873,2.444051442630342,2.631023027636634,2.8445067481366975,3.0909075867704705,3.378869649398059,3.720348820005171,4.132367366286077,4.640016262480458,5.281879551675317,6.120514421645867,7.264495499118026,8.920265509924707,11.53448890481154,16.286814403659744,27.639385539310563,90.8510671951067,-70.66007756374,-25.426221681343986,-15.49028921453417,-11.127708152523132,-8.673803360755915,-7.099170166799567,-6.001849236738522,-5.192486671495128,-4.5701848366803715,-4.076250709236544,-3.674217351007761,-3.3402326161383114,-3.058038325148461,-2.8161706325192712,-2.6063138895724687,-2.4222891613396067,-2.259409166249954,-2.1140535910552507,-1.9833816764700498,-1.8651329542367947,-1.7574861265603976,-1.6589572126462089,-1.5683247796847728,-1.4845742119079146,-1.4068555920370462,-1.3344514674506278,-1.2667518960787056,-1.2032349231232342,-1.1434511575500443,-1.0870114774916122,-1.0335771478232187,-0.98285181483491,-0.9345749743714686,-0.8885166060125242,-0.8444727370136045,-0.8022617528708409,-0.7617213114316087,-0.7227057479336966,-0.6850838817055428,-0.6487371532968829,-0.6135580348424853,-0.579448667454596,-0.5463196881064114,-0.5140892153431401,-0.48268196864100077,-0.45202850063274913,-0.4220645249638933,-0.3927303254155239,-0.36397023426620256,-0.3357321697739623,-0.3079672242245839,-0.280629295279868,-0.2536747544219042,-0.2270621471677264,-0.20075192045618975,-0.1747061732117115,-0.14888842658875195,-0.12326341081343717,-0.0977968658780726,-0.07245535362129064,-0.0472060789497551,-0.02201671813363559,0.0031447477575153263,0.028310196115140573,0.05351152452332885,0.07878081270834993,0.10415048645673117,0.1296534852891337,0.15532343574749152,0.18119483225869656,0.20730322768261647,0.23368543583964718,0.26037974854899787,0.2874261700005304,0.31486667163957155,0.34274547117689363,0.37110933985948347,0.40000794276947377,0.4294942176811874,0.45962479892714175,0.4904604938381851,0.5220668206746517,0.5545146186093336,0.5878807423302607,0.6222488562901373,0.6577103466554504,0.6943653727480709,0.73232408441782,0.7717080375836655,0.812651847461746,0.8553051281902178,0.8998347792389407,0.9464276939241566,0.9952939845743625,1.046670843829951,1.1008271941528138,1.1580693205789947,1.2187477388598233,1.2832656277865202,1.3520892583960273,1.425760995123621,1.5049156412977769,1.590301178300289,1.6828053415846116,1.7834900451324374,1.8936364991945474,2.014805108952503,2.1489161306012643,2.2983599923469775,2.4661508415181825,2.656144459037156,2.873354387090245,3.1244221070305684,3.41833659150282,3.7675725030756277,4.189961726778422,4.711915780970134,5.374292255120127,6.243837264833005,7.43755114693433,9.180954248158836,11.971890741200708,17.16933692948583,30.273904647356055,127.19400989374698,-57.81088476906749,-23.540778558685325,-14.767761718273096,-10.748434459981535,-8.440429657506437,-6.941065442660556,-5.887580516682595,-5.105966289668628,-4.50233221679533,-4.0215545374912125,-3.6291397559349163,-3.3023988466458953,-3.025795233347998,-2.788332008612399,-2.5820065007541464,-2.4008559214308742,-2.2403461499272037,-2.096967854394441,-1.9679622853116967,-1.8511306354317894,-1.7446986898797805,-1.6472189205282197,-1.5574984715292506,-1.4745453847224264,-1.3975278930344368,-1.3257432206884308,-1.258593396555536,-1.1955663074917284,-1.1362207129717967,-1.0801742868970579,-1.0270939959647916,-0.9766882983347227,-0.9287007726703509,-0.8829048802213763,-0.8390996311772798,-0.7971059777947198,-0.7567637954942332,-0.7179293425740892,-0.6804731117879423,-0.6442780045063048,-0.6092377717880171,-0.5752556773556083,-0.5422433458846923,-0.5101197666984595,-0.4788104282914226,-0.44824656338659274,-0.41836448768301576,-0.38910501824834876,-0.3604129597890693,-0.332236648892182,-0.30452754785963937,-0.27723988101322994,-0.2503303073851712,-0.22375762456725923,-0.19748249920221825,-0.17146722018948496,-0.14567547116534152,-0.12007211922001101,-0.09462301714521187,-0.06929481677570415,-0.044054791205138125,-0.018870663827498763,0.006289557715225097,0.031457744506125575,0.05666580801699983,0.08194586220775393,0.1073303878151138,0.1328524006247726,0.15854562559562926,0.1844446788153633,0.21058525941599873,0.23700435377149626,0.26374045454167255,0.290833797426234,0.3183266188578629,0.3462634383068285,0.37469136940524184,0.40366046474614453,0.4332240999930189,0.4634394038786042,0.4943677418131573,0.5260752622071317,0.5586335162987106,0.5921201643344917,0.6266197834750297,0.6622247959029626,0.6990365394535278,0.7371665078615928,0.7767377936845302,0.8178867744530471,0.8607650920704467,0.905541987518237,0.9524070683319747,1.0015736061642353,1.0532824875254212,1.1078069745161587,1.165458476856244,1.2265935957367442,1.291622779596696,1.3610210399366853,1.4353413234823917,1.515231342736985,1.601454956135979,1.6949196010305703,1.7967118784206952,1.9081442634707615,2.0308172239971456,2.166703022272046,2.318260576808912,2.48859569993371,2.68168909928704,2.9027281128259124,3.158601757681245,3.4586612781635884,3.815928621868538,4.2490941225201135,4.785978131281284,5.469882355126842,6.372100065919503,7.618895945572901,9.457143615788866,12.443516159796278,18.15259921062759,33.46283857735784,211.99281182728717,-48.91496718138221,-21.91525186638987,-14.109365540316384,-10.39396219891962,-8.219124505230534,-6.789715464806628,-5.777466237893865,-5.022180509799735,-4.436374181716008,-3.968224548256102,-3.5850794673812914,-3.265342823479461,-2.9941599672959756,-2.760977352546149,-2.5580906728412844,-2.379743901901518,-2.2215498646329936,-2.0801059830267636,-1.952732573634759,-1.837290397585318,-1.7320508075688759,-1.6356016124745698,-1.546777699675023,-1.4646091370523284,-1.3882818233807632,-1.3171072840472549,-1.2504992244364808,-1.1879551400926918,-1.1290417550265368,-1.0733833892239164,-1.020652589802462,-0.9705625276223984,-0.9228607826138512,-0.8773242302087333,-0.8337548073494925,-0.791975986021925,-0.7518298196381283,-0.7131744560758694,-0.675882033056189,-0.6398368884693943,-0.6049340314540249,-0.5710778303855033,-0.5381808821059052,-0.5061630332192338,-0.4749505294637657,-0.44447527333863596,-0.41467417352380376,-0.3854885723591277,-0.35686373986844755,-0.3287484246305181,-0.3010944532884727,-0.273856371716576,-0.2469911218755624,-0.22045774922595662,-0.19421713626257261,-0.16823175830874618,-0.14246545818476242,-0.11688323675815217,-0.09145105670636514,-0.06613565708501315,-0.0409043765059784,-0.015724982894808563,0.00943449207824215,0.034605915711698465,0.059821215895606336,0.08511254338823936,0.11051243650338508,0.13605399000992305,0.16177103012406227,0.18769829758996495,0.213871640999145,0.24032822269800438,0.2671067398821473,0.29424766378286543,0.3217935002258537,0.3497890752959696,0.3782818503907673,0.40732227160748197,0.4369641592076447,0.46726514386898427,0.49828715760367415,0.530096988640724,0.562766911298146,0.5963754039811066,0.6310079710312123,0.6667580873413648,0.7037282885968723,0.7420314349117143,0.7817921817640517,0.8231486998483413,0.8662546952142265,0.9112817934729486,0.9584223677473829,1.0078929105452705,1.0599380763779649,1.1148355568421955,1.1729019959705818,1.2345002150727085,1.3000480989153307,1.3700296073885116,1.4450085311074907,1.525645823918585,1.6127216473072776,1.7071636927931235,1.81008397286971,1.9228271903539536,2.0470351733802064,2.1847339671705384,2.338453456446341,2.5113946365491797,2.7076682518298645,2.932643046056718,3.193467233977922,3.499872802992749,3.8654593963979136,4.309828213722052,4.862303927567475,5.568818580316228,6.505608406613952,7.809143923549685,9.750264457590887,12.953555820974355,19.25491758435713,37.40186316834406,635.9826284721753,-42.39101470463406,-20.499335183583323,-13.506913688295302,-10.061929312379785,-8.00897128905431,-6.644693601459513,-5.671281819617688,-4.941000121604412,-4.372231221755199,-3.9162091707266327,-3.5420015893844345,-3.229040097795126,-2.9631148916841696,-2.734093625436541,-2.5345565583580822,-2.358945526952387,-2.2030143870217795,-2.063463278779011,-1.9376887671337781,-1.8236091736496223,-1.719539961402563,-1.624103201382211,-1.536160719462841,-1.4547639990087777,-1.379116135706374,-1.3085425918975624,-1.2424684636906134,-1.1804006289277595,-1.1219135952399903,-1.066638182940494,-1.0142524012417675,-0.9644740369651207,-0.9170545916889129,-0.8717742890897112,-0.8284379379329558,-0.7868714839183687,-0.7469191196980448,-0.7084408499303172,-0.6713104294089008,-0.6354136087103774,-0.6006466345982028,-0.5669149624696177,-0.5341321460714589,-0.5022188760227442,-0.4711021437269514,-0.44071451131151057,-0.4109934715063782,-0.38188088403008336,-0.3533224772166949,-0.3252674053879335,-0.2976678539289957,-0.27047868522400825,-0.24365711959625225,-0.2171624462163606,-0.19095575961987293,-0.16499971803703076,-0.13925832020287132,-0.11369669769912602,-0.08828092019438284,-0.0629778112048873,-0.03775477220312105,-0.01257961306153199,0.012579613061530031,0.03775477220311908,0.06297781120488534,0.08828092019438087,0.11369669769912404,0.13925832020286932,0.16499971803702876,0.1909557596198709,0.21716244621635855,0.24365711959625017,0.2704786852240062,0.2976678539289936,0.3252674053879313,0.3533224772166927,0.3818808840300811,0.41099347150637594,0.44071451131150824,0.47110214372694903,0.5022188760227417,0.5341321460714564,0.5669149624696151,0.6006466345982001,0.6354136087103748,0.671310429408898,0.7084408499303142,0.7469191196980418,0.7868714839183655,0.8284379379329526,0.8717742890897078,0.9170545916889092,0.9644740369651169,1.0142524012417635,1.0666381829404898,1.121913595239986,1.1804006289277549,1.2424684636906085,1.308542591897557,1.3791161357063684,1.4547639990087715,1.5361607194628344,1.6241032013822039,1.7195399614025553,1.8236091736496138,1.9376887671337688,2.063463278779001,2.203014387021768,2.358945526952374,2.5345565583580676,2.7340936254365245,2.9631148916841505,3.229040097795104,3.542001589384408,3.9162091707266007,4.372231221755159,4.941000121604362,5.671281819617623,6.644693601459424,8.008971289054182,10.061929312379586,13.506913688294944,20.4993351835825,42.39101470463054,-635.9826284729678,-37.4018631683468,-19.25491758435786,-12.953555820974685,-9.750264457591076,-7.809143923549807,-6.505608406614036,-5.56881858031629,-4.862303927567523,-4.30982821372209,-3.8654593963979447,-3.4998728029927753,-3.1934672339779437,-2.9326430460567368,-2.707668251829881,-2.511394636549194,-2.3384534564463535,-2.1847339671705495,-2.0470351733802166,-1.9228271903539629,-1.8100839728697182,-1.7071636927931313,-1.6127216473072847,-1.5256458239185915,-1.4450085311074967,-1.3700296073885174,-1.300048098915336,-1.2345002150727133,-1.1729019959705864,-1.1148355568421997,-1.059938076377969,-1.0078929105452745,-0.9584223677473866,-0.9112817934729522,-0.8662546952142298,-0.8231486998483446,-0.781792181764055,-0.7420314349117173,-0.7037282885968753,-0.6667580873413677,-0.631007971031215,-0.5963754039811092,-0.5627669112981487,-0.5300969886407265,-0.4982871576036766,-0.46726514386898665,-0.43696415920764703,-0.40732227160748424,-0.3782818503907695,-0.3497890752959718,-0.32179350022585584,-0.2942476637828676,-0.2671067398821494,-0.24032822269800647,-0.21387164099914704,-0.18769829758996698,-0.16177103012406427,-0.13605399000992505,-0.11051243650338706,-0.08511254338824134,-0.0598212158956083,-0.03460591571170043,-0.009434492078244108,0.015724982894806602,0.040904376505976434,0.06613565708501119,0.09145105670636317,0.11688323675815018,0.14246545818476042,0.16823175830874415,0.1942171362625706,0.22045774922595457,0.24699112187556033,0.2738563717165739,0.30109445328847056,0.32874842463051596,0.35686373986844533,0.3854885723591255,0.4146741735238014,0.4444752733386336,0.4749505294637633,0.5061630332192314,0.5381808821059026,0.5710778303855008,0.6049340314540222,0.6398368884693916,0.6758820330561861,0.7131744560758664,0.7518298196381253,0.7919759860219218,0.8337548073494891,0.8773242302087298,0.9228607826138475,0.9705625276223945,1.020652589802458,1.0733833892239122,1.1290417550265324,1.1879551400926869,1.2504992244364757,1.3171072840472495,1.3882818233807577,1.4646091370523224,1.5467776996750164,1.6356016124745627,1.732050807568868,1.8372903975853094,1.9527325736347494,2.0801059830267534,2.2215498646329817,2.3797439019015045,2.5580906728412693,2.7609773525461323,2.994159967295956,3.265342823479438,3.5850794673812643,3.968224548256069,4.436374181715967,5.022180509799685,5.7774662378937975,6.789715464806536,8.219124505230399,10.393962198919407,14.109365540315993,21.915251866388925,48.91496718137752,-211.99281182737522,-33.46283857736004,-18.152599210628235,-12.443516159796584,-9.457143615789041,-7.6188959455730165,-6.372100065919585,-5.469882355126902,-4.785978131281331,-4.249094122520151,-3.8159286218685686,-3.4586612781636137,-3.158601757681266,-2.9027281128259306,-2.6816890992870563,-2.488595699933724,-2.3182605768089246,-2.166703022272057,-2.030817223997156,-1.9081442634707706,-1.7967118784207035,-1.6949196010305778,-1.6014549561359859,-1.5152313427369914,-1.4353413234823977,-1.3610210399366909,-1.291622779596701,-1.226593595736749,-1.1654584768562484,-1.107806974516163,-1.0532824875254252,-1.0015736061642393,-0.9524070683319785,-0.9055419875182406,-0.8607650920704502,-0.8178867744530505,-0.7767377936845333,-0.7371665078615958,-0.6990365394535307,-0.6622247959029655,-0.6266197834750324,-0.5921201643344943,-0.5586335162987132,-0.5260752622071343,-0.49436774181315973,-0.4634394038786066,-0.43322409999302125,-0.4036604647461468,-0.37469136940524406,-0.3462634383068307,-0.31832661885786506,-0.29083379742623616,-0.26374045454167466,-0.23700435377149834,-0.2105852594160008,-0.18444467881536533,-0.1585456255956313,-0.1328524006247746,-0.10733038781511577,-0.0819458622077559,-0.056665808017001794,-0.03145774450612754,-0.006289557715227058,0.018870663827496803,0.04405479120513616,0.06929481677570219,0.09462301714520989,0.12007211922000902,0.14567547116533952,0.17146722018948296,0.19748249920221622,0.22375762456725717,0.25033030738516915,0.27723988101322783,0.30452754785963726,0.33223664889217985,0.36041295978906707,0.38910501824834653,0.4183644876830135,0.4482465633865904,0.47881042829142023,0.510119766698457,0.5422433458846897,0.5752556773556058,0.6092377717880143,0.644278004506302,0.6804731117879395,0.7179293425740862,0.7567637954942358,0.7971059777947107,0.8390996311772765,0.8829048802213727,0.9287007726703539,0.9766882983347119,1.0270939959647876,1.0801742868970536,1.1362207129718005,1.1955663074917149,1.2585933965555218,1.3257432206884254,1.397527893034431,1.4745453847224315,1.5574984715292317,1.6472189205282124,1.7446986898797727,1.8511306354317962,1.9679622853116698,2.0969678543944306,2.2403461499271917,2.4008559214308853,2.5820065007541584,2.7883320086123504,3.025795233347978,3.3023988466458722,3.6291397559349385,4.021554537491118,4.502332216795288,5.105966289668576,5.887580516682652,6.941065442660285,8.440429657506295,10.748434459981308,14.767761718273444,23.54077855868621,57.81088476904906,-127.19400989377868,-30.273904647357853,-17.169336929485358,-11.971890741201504,-9.180954248159003,-7.43755114693444,-6.243837264832941,-5.3742922551202925,-4.7119157809701795,-4.189961726778458,-3.7675725030756575,-3.4183365915028,-3.1244221070306275,-2.8733543870902634,-2.656144459037172,-2.466150841518171,-2.298359992347012,-2.1489161306012754,-2.014805108952513,-1.89363649919454,-1.7834900451324602,-1.6828053415846191,-1.5903011783002958,-1.5049156412977833,-1.425760995123616,-1.3520892583960429,-1.2832656277865255,-1.2187477388598282,-1.1580693205789911,-1.100827194152826,-1.046670843829955,-0.9952939845743664,-0.9464276939241535,-0.8998347792389507,-0.8553051281902211,-0.8126518474617492,-0.7717080375836686,-0.7323240844178176,-0.6943653727480791,-0.6577103466554531,-0.62224885629014,-0.5878807423302586,-0.5545146186093408,-0.5220668206746542,-0.49046049383818746,-0.4596247989271398,-0.4294942176811939,-0.40000794276947604,-0.3711093398594857,-0.3427454711768958,-0.3148666716395698,-0.28742617000053444,-0.260379748549,-0.23368543583964738,-0.2073032276826148,-0.18119483225870225,-0.15532343574749535,-0.1296534852891357,-0.10415048645673135,-0.07878081270835548,-0.0535115245233326,-0.028310196115142537,-0.0031447477575155093,0.022016718133637182,0.04720607894975135,0.07245535362128867,0.0977968658780724,0.12326341081343699,0.14888842658874632,0.17470617321170764,0.20075192045618773,0.2270621471677262,0.2536747544218983,0.28062929527986397,0.3079672242245818,0.33573216977396214,0.3639702342662044,0.39273032541551955,0.42206452496389096,0.4520285006327489,0.48268196864100055,0.5140892153431331,0.5463196881064065,0.5794486674545933,0.6135580348424851,0.6487371532968751,0.6850838817055372,0.7227057479336936,0.7617213114316084,0.8022617528708434,0.8444727370135982,0.8885166060125207,0.9345749743714683,0.9828518148349097,1.0335771478232074,1.087011477491604,1.14345115755004,1.2032349231232338,1.2667518960786912,1.3344514674506174,1.4068555920370405,1.484574211907914,1.5683247796847783,1.658957212646195,1.7574861265603896,1.8651329542367858,1.983381676470049,2.1140535910552205,2.259409166249931,2.422289161339593,2.606313889572467,2.8161706325192224,3.058038325148422,3.3402326161382874,3.6742173510077585,4.0762507092365725,4.570184836680289,5.1924866714950735,6.001849236738449,7.099170166799557,8.673803360755496,11.127708152522667,15.4902892145337,25.42622168134387,70.66007756374796,-90.85106719513755,-27.639385539312062,-16.286814403659793,-11.534488904811326,-8.92026550992501,-7.264495499118131,-6.120514421645942,-5.281879551675322,-4.640016262480582,-4.132367366286145,-3.7203488200051997,-3.378869649398061,-3.0909075867704536,-2.8445067481367317,-2.6310230276366497,-2.444051442630343,-2.2787450169639776,-2.1313680257411742,-1.9989946236174838,-1.8793004997944884,-1.7704156972977487,-1.6708186244662524,-1.5792584075364462,-1.4946971197135945,-1.4162661931388143,-1.3432331107684505,-1.2749756562202441,-1.210961793276562,-1.1507337891978568,-1.0938955726123738,-1.0401025820016139,-0.9890535501154765,-0.9404838064389384,-0.8941597798006835,-0.8498744570566461,-0.807443608868551,-0.7667026350778762,-0.7275039136822588,-0.6897145615503772,-0.6532145336319757,-0.617895001894788,-0.5836569665499153,-0.5504100610519679,-0.5180715194346487,-0.4865652801813754,-0.45582120535072684,-0.425774397317562,-0.39636459843872524,-0.36753566134892723,-0.3392350795497592,-0.31141356955857574,-0.2840246972034242,-0.2570245417380079,-0.23037139235009935,-0.2040254723817208,-0.17794868719628384,-0.152104392139334,-0.12645717746189808,-0.10097266742349273,-0.07561733107585537,-0.05035830245825518,-0.02516320811682309,-1.4695761589768238e-15],"x":[12.566370614359172,12.591528513487019,12.616686412614865,12.64184431174271,12.667002210870557,12.692160109998403,12.717318009126249,12.742475908254097,12.767633807381943,12.792791706509789,12.817949605637635,12.84310750476548,12.868265403893327,12.893423303021173,12.918581202149019,12.943739101276865,12.968897000404711,12.994054899532557,13.019212798660403,13.044370697788251,13.069528596916097,13.094686496043943,13.11984439517179,13.145002294299635,13.170160193427481,13.195318092555327,13.220475991683173,13.24563389081102,13.270791789938865,13.295949689066711,13.321107588194558,13.346265487322404,13.371423386450251,13.396581285578097,13.421739184705944,13.44689708383379,13.472054982961636,13.497212882089482,13.522370781217328,13.547528680345174,13.57268657947302,13.597844478600866,13.623002377728712,13.648160276856558,13.673318175984404,13.698476075112252,13.723633974240098,13.748791873367944,13.77394977249579,13.799107671623636,13.824265570751482,13.849423469879328,13.874581369007174,13.89973926813502,13.924897167262866,13.950055066390712,13.975212965518558,14.000370864646406,14.025528763774252,14.050686662902098,14.075844562029944,14.10100246115779,14.126160360285636,14.151318259413483,14.176476158541329,14.201634057669175,14.22679195679702,14.251949855924867,14.277107755052713,14.302265654180559,14.327423553308407,14.352581452436253,14.377739351564099,14.402897250691945,14.42805514981979,14.453213048947637,14.478370948075483,14.503528847203329,14.528686746331175,14.553844645459021,14.579002544586867,14.604160443714713,14.62931834284256,14.654476241970407,14.679634141098253,14.7047920402261,14.729949939353945,14.755107838481791,14.780265737609637,14.805423636737483,14.83058153586533,14.855739434993176,14.880897334121022,14.906055233248868,14.931213132376714,14.956371031504561,14.981528930632408,15.006686829760254,15.0318447288881,15.057002628015946,15.082160527143792,15.107318426271638,15.132476325399484,15.15763422452733,15.182792123655176,15.207950022783022,15.233107921910868,15.258265821038714,15.283423720166562,15.308581619294408,15.333739518422254,15.3588974175501,15.384055316677946,15.409213215805792,15.434371114933638,15.459529014061484,15.48468691318933,15.509844812317176,15.535002711445022,15.560160610572868,15.585318509700715,15.610476408828562,15.635634307956408,15.660792207084254,15.6859501062121,15.711108005339947,15.736265904467793,15.761423803595639,15.786581702723485,15.81173960185133,15.836897500979177,15.862055400107023,15.887213299234869,15.912371198362717,15.937529097490563,15.962686996618409,15.987844895746255,16.0130027948741,16.038160694001945,16.063318593129793,16.08847649225764,16.113634391385485,16.138792290513333,16.163950189641177,16.189108088769025,16.21426598789687,16.239423887024717,16.26458178615256,16.28973968528041,16.314897584408254,16.3400554835361,16.365213382663946,16.390371281791793,16.41552918091964,16.440687080047486,16.465844979175333,16.491002878303178,16.516160777431026,16.54131867655887,16.566476575686718,16.591634474814562,16.61679237394241,16.641950273070254,16.667108172198102,16.692266071325946,16.717423970453794,16.74258186958164,16.767739768709486,16.792897667837334,16.818055566965178,16.843213466093026,16.86837136522087,16.893529264348718,16.918687163476562,16.94384506260441,16.969002961732254,16.994160860860102,17.019318759987947,17.044476659115794,17.069634558243642,17.094792457371486,17.119950356499334,17.14510825562718,17.170266154755026,17.19542405388287,17.22058195301072,17.245739852138563,17.27089775126641,17.296055650394255,17.321213549522103,17.34637144864995,17.371529347777795,17.396687246905643,17.421845146033487,17.447003045161335,17.47216094428918,17.497318843417027,17.52247674254487,17.54763464167272,17.572792540800563,17.59795043992841,17.623108339056255,17.648266238184103,17.67342413731195,17.698582036439795,17.723739935567643,17.748897834695487,17.774055733823335,17.79921363295118,17.824371532079027,17.84952943120687,17.87468733033472,17.899845229462564,17.92500312859041,17.950161027718256,17.975318926846104,18.00047682597395,18.025634725101796,18.050792624229643,18.075950523357488,18.101108422485336,18.12626632161318,18.151424220741028,18.176582119868872,18.20174001899672,18.226897918124564,18.252055817252412,18.277213716380256,18.302371615508104,18.327529514635952,18.352687413763796,18.377845312891644,18.403003212019488,18.428161111147336,18.45331901027518,18.478476909403028,18.503634808530872,18.52879270765872,18.553950606786564,18.579108505914412,18.604266405042257,18.629424304170104,18.654582203297952,18.679740102425797,18.704898001553644,18.73005590068149,18.755213799809336,18.78037169893718,18.80552959806503,18.830687497192873,18.85584539632072,18.881003295448565,18.906161194576413,18.93131909370426,18.956476992832105,18.981634891959953,19.006792791087797,19.031950690215645,19.05710858934349,19.082266488471337,19.10742438759918,19.13258228672703,19.157740185854873,19.18289808498272,19.208055984110565,19.233213883238413,19.25837178236626,19.283529681494105,19.308687580621953,19.333845479749797,19.359003378877645,19.38416127800549,19.409319177133337,19.43447707626118,19.45963497538903,19.484792874516874,19.50995077364472,19.535108672772566,19.560266571900414,19.58542447102826,19.610582370156106,19.635740269283954,19.660898168411798,19.686056067539646,19.71121396666749,19.736371865795338,19.761529764923182,19.78668766405103,19.811845563178874,19.837003462306722,19.862161361434566,19.887319260562414,19.912477159690262,19.937635058818106,19.962792957945954,19.9879508570738,20.013108756201646,20.03826665532949,20.063424554457338,20.088582453585182,20.11374035271303,20.138898251840875,20.164056150968722,20.189214050096567,20.214371949224414,20.239529848352262,20.264687747480107,20.289845646607954,20.3150035457358,20.340161444863647,20.36531934399149,20.39047724311934,20.415635142247183,20.44079304137503,20.465950940502875,20.491108839630723,20.516266738758567,20.541424637886415,20.566582537014263,20.591740436142107,20.616898335269955,20.6420562343978,20.667214133525647,20.69237203265349,20.71752993178134,20.742687830909183,20.76784573003703,20.793003629164875,20.818161528292723,20.84331942742057,20.868477326548415,20.893635225676263,20.918793124804107,20.943951023931955,20.9691089230598,20.994266822187647,21.01942472131549,21.04458262044334,21.069740519571184,21.09489841869903,21.120056317826876,21.145214216954724,21.17037211608257,21.195530015210416,21.220687914338264,21.245845813466108,21.271003712593956,21.2961616117218,21.321319510849648,21.346477409977492,21.37163530910534,21.396793208233184,21.421951107361032,21.447109006488876,21.472266905616724,21.497424804744572,21.522582703872416,21.547740603000264,21.57289850212811,21.598056401255956,21.6232143003838,21.64837219951165,21.673530098639493,21.69868799776734,21.723845896895185,21.749003796023032,21.774161695150877,21.799319594278725,21.824477493406572,21.849635392534417,21.874793291662264,21.89995119079011,21.925109089917957,21.9502669890458,21.97542488817365,22.000582787301493,22.02574068642934,22.050898585557185,22.076056484685033,22.101214383812877,22.126372282940725,22.151530182068573,22.176688081196417,22.201845980324265,22.22700387945211,22.252161778579957,22.2773196777078,22.30247757683565,22.327635475963493,22.35279337509134,22.377951274219186,22.403109173347033,22.428267072474878,22.453424971602725,22.478582870730573,22.503740769858418,22.528898668986265,22.55405656811411,22.579214467241957,22.6043723663698,22.62953026549765,22.654688164625494,22.67984606375334,22.705003962881186,22.730161862009034,22.75531976113688,22.780477660264726,22.805635559392574,22.830793458520418,22.855951357648266,22.88110925677611,22.906267155903958,22.931425055031802,22.95658295415965,22.981740853287494,23.006898752415342,23.032056651543186,23.057214550671034,23.082372449798882,23.107530348926726,23.132688248054574,23.15784614718242,23.183004046310266,23.20816194543811,23.23331984456596,23.258477743693803,23.28363564282165,23.308793541949495,23.333951441077343,23.359109340205187,23.384267239333035,23.409425138460882,23.434583037588727,23.459740936716575,23.48489883584442,23.510056734972267,23.53521463410011,23.56037253322796,23.585530432355803,23.61068833148365,23.635846230611495,23.661004129739343,23.686162028867187,23.711319927995035,23.736477827122883,23.761635726250727,23.786793625378575,23.81195152450642,23.837109423634267,23.86226732276211,23.88742522188996,23.912583121017803,23.93774102014565,23.962898919273496,23.988056818401343,24.013214717529188,24.038372616657036,24.063530515784883,24.088688414912728,24.113846314040575,24.13900421316842,24.164162112296268,24.189320011424112,24.21447791055196,24.239635809679804,24.26479370880765,24.289951607935496,24.315109507063344,24.34026740619119,24.365425305319036,24.390583204446884,24.415741103574728,24.440899002702576,24.46605690183042,24.491214800958268,24.516372700086112,24.54153059921396,24.566688498341804,24.591846397469652,24.617004296597496,24.642162195725344,24.667320094853192,24.692477993981036,24.717635893108884,24.74279379223673,24.767951691364576,24.79310959049242,24.81826748962027,24.843425388748113,24.86858328787596,24.893741187003805,24.918899086131653,24.944056985259497,24.969214884387345,24.994372783515193,25.019530682643037,25.044688581770885,25.06984648089873,25.095004380026577,25.12016227915442,25.14532017828227,25.170478077410113,25.19563597653796,25.220793875665805,25.245951774793653,25.271109673921497,25.296267573049345,25.321425472177193,25.346583371305037,25.371741270432885,25.39689916956073,25.422057068688577,25.44721496781642,25.47237286694427,25.497530766072114,25.52268866519996,25.547846564327806,25.573004463455653,25.598162362583498,25.623320261711346,25.648478160839193,25.673636059967038,25.698793959094886,25.72395185822273,25.749109757350578,25.774267656478422,25.79942555560627,25.824583454734114,25.849741353861962,25.874899252989806,25.900057152117654,25.925215051245498,25.950372950373346,25.975530849501194,26.000688748629038,26.025846647756886,26.05100454688473,26.076162446012578,26.101320345140422,26.12647824426827,26.151636143396114,26.176794042523962,26.201951941651807,26.227109840779654,26.252267739907502,26.277425639035346,26.302583538163194,26.32774143729104,26.352899336418886,26.37805723554673,26.40321513467458,26.428373033802423,26.45353093293027,26.478688832058115,26.503846731185963,26.529004630313807,26.554162529441655,26.579320428569503,26.604478327697347,26.629636226825195,26.65479412595304,26.679952025080887,26.70510992420873,26.73026782333658,26.755425722464423,26.78058362159227,26.805741520720115,26.830899419847963,26.856057318975807,26.881215218103655,26.906373117231503,26.931531016359347,26.956688915487195,26.98184681461504,27.007004713742887,27.03216261287073,27.05732051199858,27.082478411126424,27.10763631025427,27.132794209382116,27.157952108509964,27.183110007637808,27.208267906765656,27.233425805893503,27.258583705021348,27.283741604149196,27.30889950327704,27.334057402404888,27.359215301532732,27.38437320066058,27.409531099788424,27.434688998916272,27.459846898044116,27.485004797171964,27.51016269629981,27.535320595427656,27.560478494555504,27.585636393683348,27.610794292811196,27.63595219193904,27.661110091066888,27.686267990194732,27.71142588932258,27.736583788450424,27.761741687578272,27.786899586706117,27.812057485833964,27.837215384961812,27.862373284089657,27.887531183217504,27.91268908234535,27.937846981473196,27.96300488060104,27.98816277972889,28.013320678856733,28.03847857798458,28.063636477112425,28.088794376240273,28.113952275368117,28.139110174495965,28.164268073623813,28.189425972751657,28.214583871879505,28.23974177100735,28.264899670135197,28.29005756926304,28.31521546839089,28.340373367518733,28.36553126664658,28.390689165774425,28.415847064902273,28.441004964030117,28.466162863157965,28.491320762285813,28.516478661413657,28.541636560541505,28.56679445966935,28.591952358797197,28.61711025792504,28.64226815705289,28.667426056180734,28.69258395530858,28.717741854436426,28.742899753564274,28.768057652692118,28.793215551819966,28.818373450947814,28.843531350075658,28.868689249203506,28.89384714833135,28.919005047459198,28.944162946587042,28.96932084571489,28.994478744842734,29.019636643970582,29.044794543098426,29.069952442226274,29.09511034135412,29.120268240481966,29.145426139609814,29.17058403873766,29.195741937865506,29.22089983699335,29.246057736121198,29.271215635249042,29.29637353437689,29.321531433504735,29.346689332632582,29.371847231760427,29.397005130888274,29.42216303001612,29.447320929143967,29.472478828271814,29.49763672739966,29.522794626527507,29.54795252565535,29.5731104247832,29.598268323911043,29.62342622303889,29.648584122166735,29.673742021294583,29.698899920422427,29.724057819550275,29.749215718678123,29.774373617805967,29.799531516933815,29.82468941606166,29.849847315189507,29.87500521431735,29.9001631134452,29.925321012573043,29.95047891170089,29.975636810828735,30.000794709956583,30.025952609084428,30.051110508212275,30.076268407340123,30.101426306467967,30.126584205595815,30.15174210472366,30.176900003851507,30.20205790297935,30.2272158021072,30.252373701235044,30.27753160036289,30.302689499490736,30.327847398618584,30.353005297746428,30.378163196874276,30.403321096002124,30.428478995129968,30.453636894257816,30.47879479338566,30.503952692513508,30.529110591641352,30.5542684907692,30.579426389897044,30.604584289024892,30.629742188152736,30.654900087280584,30.68005798640843,30.705215885536276,30.730373784664124,30.75553168379197,30.780689582919816,30.80584748204766,30.83100538117551,30.856163280303353,30.8813211794312,30.906479078559045,30.931636977686892,30.956794876814737,30.981952775942585,31.00711067507043,31.032268574198277,31.057426473326124,31.08258437245397,31.107742271581817,31.13290017070966,31.15805806983751,31.183215968965353,31.2083738680932,31.233531767221045,31.258689666348893,31.283847565476737,31.309005464604585,31.33416336373243,31.359321262860277,31.384479161988125,31.40963706111597,31.434794960243817,31.45995285937166,31.48511075849951,31.510268657627353,31.5354265567552,31.560584455883046,31.585742355010893,31.610900254138738,31.636058153266585,31.661216052394433,31.686373951522278,31.711531850650125,31.73668974977797,31.761847648905817,31.78700554803366,31.81216344716151,31.837321346289354,31.8624792454172,31.887637144545046,31.912795043672894,31.937952942800738,31.963110841928586,31.988268741056434,32.01342664018428,32.038584539312126,32.063742438439974,32.088900337567814,32.11405823669566,32.13921613582351,32.16437403495136,32.1895319340792,32.214689833207046,32.239847732334894,32.26500563146274,32.29016353059058,32.31532142971843,32.34047932884628,32.365637227974126,32.390795127101974,32.415953026229815,32.44111092535766,32.46626882448551,32.49142672361336,32.5165846227412,32.54174252186905,32.566900420996895,32.59205832012474,32.61721621925259,32.64237411838043,32.66753201750828,32.69268991663613,32.717847815763974,32.743005714891815,32.76816361401966,32.79332151314751,32.81847941227536,32.8436373114032,32.86879521053105,32.893953109658895,32.91911100878674,32.94426890791459,32.96942680704243,32.99458470617028,33.01974260529813,33.044900504425975,33.070058403553816,33.09521630268166,33.12037420180951,33.14553210093736,33.1706900000652,33.19584789919305,33.221005798320896,33.24616369744874,33.27132159657659,33.29647949570443,33.32163739483228,33.34679529396013,33.371953193087975,33.397111092215816,33.422268991343664,33.44742689047151,33.47258478959936,33.4977426887272,33.52290058785505,33.548058486982896,33.573216386110744,33.59837428523859,33.62353218436643,33.64869008349428,33.67384798262213,33.699005881749976,33.72416378087782,33.749321680005664,33.77447957913351,33.79963747826136,33.8247953773892,33.84995327651705,33.875111175644896,33.900269074772744,33.92542697390059,33.95058487302843,33.97574277215628,34.00090067128413,34.026058570411976,34.05121646953982,34.076374368667665,34.10153226779551,34.12669016692336,34.1518480660512,34.17700596517905,34.2021638643069,34.227321763434745,34.25247966256259,34.27763756169043,34.30279546081828,34.32795335994613,34.35311125907398,34.37826915820182,34.403427057329665,34.42858495645751,34.45374285558536,34.4789007547132,34.50405865384105,34.5292165529689,34.554374452096745,34.57953235122459,34.604690250352434,34.62984814948028,34.65500604860813,34.68016394773598,34.70532184686382,34.730479745991666,34.75563764511951,34.78079554424736,34.8059534433752,34.83111134250305,34.8562692416309,34.881427140758746,34.90658503988659,34.931742939014434,34.95690083814228,34.98205873727013,35.00721663639798,35.03237453552582,35.057532434653666,35.082690333781514,35.10784823290936,35.1330061320372,35.15816403116505,35.1833219302929,35.208479829420746,35.233637728548594,35.258795627676434,35.28395352680428,35.30911142593213,35.33426932505998,35.35942722418782,35.38458512331567,35.409743022443514,35.43490092157136,35.4600588206992,35.48521671982705,35.5103746189549,35.535532518082746,35.560690417210594,35.585848316338435,35.61100621546628,35.63616411459413,35.66132201372198,35.68647991284982,35.71163781197767,35.736795711105515,35.76195361023336,35.7871115093612,35.81226940848905,35.8374273076169,35.86258520674475,35.887743105872595,35.912901005000435,35.93805890412828,35.96321680325613,35.98837470238398,36.01353260151182,36.03869050063967,36.063848399767515,36.08900629889536,36.11416419802321,36.13932209715105,36.1644799962789,36.18963789540675,36.214795794534595,36.239953693662436,36.265111592790284,36.29026949191813,36.31542739104598,36.34058529017382,36.36574318930167,36.390901088429516,36.41605898755736,36.44121688668521,36.46637478581305,36.4915326849409,36.51669058406875,36.541848483196596,36.567006382324436,36.592164281452284,36.61732218058013,36.64248007970798,36.66763797883582,36.69279587796367,36.717953777091516,36.743111676219364,36.76826957534721,36.79342747447505,36.8185853736029,36.84374327273075,36.868901171858596,36.89405907098644,36.919216970114284,36.94437486924213,36.96953276836998,36.99469066749782,37.01984856662567,37.04500646575352,37.070164364881364,37.09532226400921,37.12048016313705,37.1456380622649,37.17079596139275,37.195953860520596,37.22111175964844,37.246269658776285,37.27142755790413,37.29658545703198,37.32174335615982,37.34690125528767,37.37205915441552,37.397217053543365,37.42237495267121,37.44753285179905,37.4726907509269,37.49784865005475,37.5230065491826,37.54816444831044,37.573322347438285,37.59848024656613,37.62363814569398,37.64879604482182,37.67395394394967,37.69911184307752]}
},{}],89:[function(require,module,exports){
module.exports={"expected":[4.898587196589413e-16,0.009434492078245272,0.01887066382749674,0.028310196115141677,0.03775477220312234,0.047206078949754975,0.05666580801700106,0.06613565708501457,0.07561733107585618,0.08511254338824072,0.09462301714521341,0.10415048645673228,0.11369669769912552,0.12326341081343706,0.13285240062477202,0.14246545818476203,0.15210439213932936,0.16177103012406183,0.1714672201894847,0.1811948322586977,0.19095575961987057,0.20075192045618961,0.210585259416,0.22045774922595437,0.23037139235009832,0.2403282226980058,0.25033030738516904,0.2603797485489991,0.27047868522400775,0.2806292952798679,0.29083379742623533,0.3010944532884723,0.31141356955857663,0.3217935002258552,0.33223664889218174,0.34274547117689685,0.35332247721669435,0.36397023426620245,0.3746913694052452,0.38548857235912726,0.39636459843871996,0.4073222716074856,0.41836448768301343,0.4294942176811887,0.4407145113115121,0.45202850063274896,0.4634394038786057,0.4749505294637675,0.486565280181372,0.49828715760367587,0.5101197666984615,0.5220668206746508,0.5341321460714583,0.5463196881064112,0.5586335162987099,0.5710778303855029,0.5836569665499164,0.596375403981106,0.6092377717880166,0.6222488562901413,0.6354136087103743,0.6487371532968826,0.6622247959029669,0.6758820330561859,0.689714561550381,0.703728288596877,0.7179293425740861,0.7323240844178218,0.7469191196980468,0.7617213114316085,0.7767377936845321,0.7919759860219244,0.8074436088685465,0.8231486998483435,0.8390996311772795,0.8553051281902166,0.8717742890897103,0.888516606012524,0.905541987518236,0.9228607826138505,0.9404838064389366,0.9584223677473821,0.9766882983347223,0.9952939845743647,1.0142524012417702,1.0335771478232185,1.0532824875254236,1.0733833892239193,1.0938955726123796,1.1148355568421984,1.1362207129718003,1.1580693205789974,1.1804006289277584,1.2032349231232338,1.2265935957367473,1.2504992244364797,1.2749756562202368,1.3000480989153342,1.32574322068843,1.3520892583960356,1.3791161357063675,1.4068555920370458,1.435341323482401,1.4646091370523218,1.4946971197135912,1.5256458239185955,1.5574984715292437,1.5903011783002927,1.6241032013822159,1.6589572126462084,1.694919601030575,1.7320508075688814,1.770415697297752,1.8100839728697158,1.851130635431796,1.8936364991945442,1.937688767133776,1.9833816764700491,2.030817223997143,2.080105983026762,2.131368025741159,2.1847339671705357,2.240346149927202,2.2983599923469953,2.3589455269523723,2.422289161339606,2.4885956999337187,2.558090672841268,2.631023027636642,2.7076682518298756,2.788332008612381,2.8733543870902554,2.9631148916841648,3.0580383251484595,3.158601757681258,3.2653428234794566,3.3788696493980708,3.4998728029927673,3.629139755934913,3.7675725030756713,3.9162091707266247,4.076250709236542,4.249094122520171,4.436374181716,4.64001626248048,4.8623039275675515,5.105966289668622,5.37429225512016,5.671281819617731,6.001849236738518,6.372100065919554,6.789715464806695,7.264495499118079,7.809143923549769,8.440429657506547,9.180954248158777,10.061929312379736,11.127708152523118,12.443516159796191,14.109365540316311,16.286814403660003,19.25491758435697,23.54077855868519,30.273904647358695,42.39101470462999,70.66007756373939,211.99281182742203,-211.99281182738352,-70.66007756373511,-42.39101470462845,-30.27390464735791,-23.540778558684714,-19.25491758435665,-16.286814403659776,-14.109365540316139,-12.443516159796058,-11.127708152523011,-10.061929312379648,-9.180954248158704,-8.440429657506485,-7.8091439235497155,-7.264495499118032,-6.789715464806654,-6.372100065919518,-6.001849236738486,-5.671281819617702,-5.374292255120134,-5.105966289668599,-4.862303927567531,-4.640016262480461,-4.4363741817159825,-4.249094122520154,-4.076250709236527,-3.916209170726611,-3.7675725030756584,-3.6291397559349003,-3.4998728029927557,-3.37886964939806,-3.265342823479447,-3.158601757681249,-3.0580383251484506,-2.9631148916841563,-2.8733543870902474,-2.7883320086123735,-2.7076682518298685,-2.6310230276366355,-2.558090672841262,-2.488595699933713,-2.4222891613395996,-2.3589455269523665,-2.29835999234699,-2.240346149927197,-2.184733967170531,-2.1313680257411542,-2.080105983026757,-2.0308172239971385,-1.983381676470045,-1.9376887671337717,-1.8936364991945405,-1.8511306354317922,-1.810083972869712,-1.7704156972977485,-1.732050807568878,-1.6949196010305716,-1.658957212646205,-1.6241032013822125,-1.5903011783002898,-1.5574984715292408,-1.5256458239185926,-1.4946971197135885,-1.464609137052319,-1.4353413234823984,-1.4068555920370434,-1.3791161357063648,-1.352089258396033,-1.3257432206884276,-1.300048098915332,-1.2749756562202346,-1.2504992244364774,-1.226593595736745,-1.2032349231232318,-1.1804006289277564,-1.1580693205789954,-1.1362207129717983,-1.1148355568421966,-1.0938955726123778,-1.0733833892239175,-1.0532824875254219,-1.0335771478232167,-1.0142524012417684,-0.9952939845743629,-0.9766882983347206,-0.9584223677473804,-0.9404838064389349,-0.9228607826138489,-0.9055419875182344,-0.8885166060125225,-0.8717742890897089,-0.8553051281902151,-0.839099631177278,-0.823148699848342,-0.807443608868545,-0.791975986021923,-0.7767377936845308,-0.7617213114316072,-0.7469191196980455,-0.7323240844178205,-0.7179293425740849,-0.7037282885968758,-0.6897145615503798,-0.6758820330561846,-0.6622247959029657,-0.6487371532968815,-0.6354136087103731,-0.62224885629014,-0.6092377717880155,-0.5963754039811049,-0.5836569665499152,-0.5710778303855018,-0.5586335162987087,-0.5463196881064101,-0.5341321460714572,-0.5220668206746497,-0.5101197666984604,-0.49828715760367476,-0.4865652801813709,-0.4749505294637664,-0.46343940387860466,-0.45202850063274796,-0.44071451131151107,-0.4294942176811877,-0.4183644876830124,-0.4073222716074846,-0.396364598438719,-0.3854885723591263,-0.3746913694052443,-0.3639702342662015,-0.3533224772166934,-0.34274547117689586,-0.3322366488921808,-0.32179350022585423,-0.3114135695585757,-0.30109445328847134,-0.2908337974262344,-0.28062929527986696,-0.2704786852240068,-0.26037974854899815,-0.25033030738516815,-0.2403282226980049,-0.2303713923500974,-0.2204577492259535,-0.21058525941599912,-0.20075192045618873,-0.19095575961986969,-0.18119483225869681,-0.17146722018948382,-0.16177103012406094,-0.15210439213932847,-0.14246545818476117,-0.13285240062477116,-0.12326341081343618,-0.11369669769912465,-0.10415048645673142,-0.09462301714521255,-0.08511254338823986,-0.07561733107585532,-0.0661356570850137,-0.0566658080170002,-0.047206078949754114,-0.03775477220312148,-0.02831019611514082,-0.018870663827495884,-0.009434492078244415,3.6739403974420594e-16,0.00943449207824515,0.01887066382749662,0.028310196115141555,0.03775477220312221,0.04720607894975486,0.05666580801700093,0.06613565708501444,0.07561733107585605,0.08511254338824059,0.09462301714521329,0.10415048645673215,0.1136966976991254,0.12326341081343693,0.1328524006247719,0.14246545818476192,0.15210439213932922,0.1617710301240617,0.1714672201894846,0.18119483225869756,0.19095575961987046,0.2007519204561895,0.2105852594159999,0.22045774922595426,0.23037139235009818,0.2403282226980057,0.2503303073851689,0.2603797485489989,0.27047868522400764,0.28062929527986774,0.2908337974262352,0.3010944532884722,0.31141356955857646,0.32179350022585507,0.33223664889218163,0.3427454711768967,0.35332247721669424,0.36397023426620234,0.3746913694052451,0.38548857235912715,0.39636459843871985,0.40732227160748546,0.41836448768301326,0.42949421768118856,0.44071451131151196,0.45202850063274885,0.46343940387860555,0.4749505294637673,0.48656528018137185,0.4982871576036757,0.5101197666984613,0.5220668206746507,0.5341321460714581,0.5463196881064111,0.5586335162987097,0.5710778303855026,0.5836569665499162,0.5963754039811059,0.6092377717880165,0.6222488562901412,0.6354136087103741,0.6487371532968825,0.6622247959029667,0.6758820330561857,0.6897145615503809,0.7037282885968769,0.717929342574086,0.7323240844178216,0.7469191196980466,0.7617213114316084,0.7767377936845319,0.7919759860219242,0.8074436088685463,0.8231486998483433,0.8390996311772793,0.8553051281902164,0.8717742890897102,0.8885166060125238,0.9055419875182358,0.9228607826138503,0.9404838064389364,0.9584223677473819,0.976688298334722,0.9952939845743644,1.01425240124177,1.0335771478232183,1.0532824875254234,1.073383389223919,1.0938955726123794,1.1148355568421981,1.1362207129718,1.1580693205789971,1.1804006289277582,1.2032349231232335,1.2265935957367469,1.2504992244364794,1.2749756562202366,1.300048098915334,1.3257432206884296,1.352089258396035,1.379116135706367,1.4068555920370456,1.4353413234824006,1.4646091370523213,1.4946971197135908,1.525645823918595,1.5574984715292433,1.5903011783002923,1.6241032013822154,1.658957212646208,1.6949196010305745,1.732050807568881,1.7704156972977516,1.8100839728697151,1.8511306354317956,1.8936364991945438,1.9376887671337752,1.9833816764700487,2.0308172239971425,2.080105983026761,2.1313680257411582,2.1847339671705353,2.2403461499272015,2.298359992346995,2.3589455269523714,2.422289161339605,2.4885956999337178,2.558090672841267,2.6310230276366413,2.7076682518298747,2.78833200861238,2.873354387090254,2.9631148916841634,3.058038325148458,3.158601757681257,3.2653428234794553,3.3788696493980694,3.4998728029927655,3.629139755934911,3.7675725030756695,3.916209170726623,4.07625070923654,4.249094122520169,4.436374181715998,4.6400162624804775,4.862303927567549,5.105966289668618,5.374292255120157,5.671281819617726,6.001849236738513,6.3721000659195495,6.789715464806688,7.264495499118024,7.809143923549762,8.440429657506538,9.180954248158843,10.061929312379723,11.127708152523102,12.443516159796312,14.109365540316286,16.286814403659736,19.254917584357255,23.540778558685123,30.273904647357767,42.39101470463137,70.66007756373878,211.9928118273766,-211.9928118273491,-70.66007756373573,-42.391014704630265,-30.273904647357206,-23.54077855868478,-19.254917584357027,-16.286814403659573,-14.109365540316164,-12.443516159796216,-11.127708152523025,-10.061929312379661,-9.180954248158791,-8.440429657506494,-7.8091439235497235,-7.2644954991179915,-6.78971546480666,-6.372100065919524,-6.001849236738457,-5.671281819617706,-5.374292255120138,-5.105966289668578,-4.862303927567534,-4.640016262480484,-4.436374181715967,-4.249094122520157,-4.076250709236545,-3.9162091707265985,-3.76757250307566,-3.629139755934915,-3.4998728029927455,-3.378869649398062,-3.2653428234794584,-3.1586017576812404,-3.058038325148452,-2.963114891684166,-2.8733543870902487,-2.7883320086123744,-2.707668251829877,-2.6310230276366364,-2.5580906728412627,-2.48859569993372,-2.4222891613396005,-2.3589455269523674,-2.298359992346985,-2.2403461499271975,-2.1847339671705317,-2.13136802574115,-2.080105983026758,-2.0308172239971394,-1.9833816764700412,-1.9376887671337724,-1.893636499194545,-1.851130635431789,-1.8100839728697127,-1.7704156972977527,-1.732050807568875,-1.694919601030572,-1.6589572126462089,-1.6241032013822099,-1.59030117830029,-1.5574984715292441,-1.5256458239185902,-1.4946971197135888,-1.4646091370523222,-1.4353413234823988,-1.4068555920370438,-1.379116135706368,-1.3520892583960333,-1.325743220688428,-1.30004809891533,-1.274975656220235,-1.2504992244364779,-1.2265935957367433,-1.203234923123232,-1.1804006289277567,-1.1580693205789936,-1.1362207129717985,-1.1148355568421988,-1.093895572612376,-1.0733833892239177,-1.053282487525424,-1.0335771478232152,-1.0142524012417686,-0.9952939845743649,-0.976688298334719,-0.9584223677473807,-0.9404838064389368,-0.9228607826138475,-0.9055419875182347,-0.8885166060125242,-0.8717742890897091,-0.8553051281902153,-0.8390996311772797,-0.8231486998483423,-0.8074436088685453,-0.7919759860219246,-0.776737793684531,-0.7617213114316074,-0.7469191196980443,-0.7323240844178207,-0.717929342574085,-0.7037282885968745,-0.68971456155038,-0.6758820330561848,-0.6622247959029646,-0.6487371532968816,-0.6354136087103746,-0.622248856290139,-0.6092377717880156,-0.5963754039811062,-0.5836569665499142,-0.5710778303855019,-0.55863351629871,-0.5463196881064092,-0.5341321460714573,-0.522066820674651,-0.5101197666984594,-0.4982871576036749,-0.4865652801813722,-0.47495052946376654,-0.4634394038786048,-0.4520285006327492,-0.44071451131151124,-0.42949421768118784,-0.4183644876830136,-0.40732227160748474,-0.39636459843871913,-0.3854885723591254,-0.3746913694052444,-0.3639702342662016,-0.3533224772166925,-0.342745471176896,-0.3322366488921819,-0.3217935002258534,-0.3114135695585758,-0.30109445328847245,-0.29083379742623355,-0.2806292952798671,-0.2704786852240079,-0.2603797485489973,-0.25033030738516826,-0.24032822269800597,-0.2303713923500966,-0.2204577492259536,-0.21058525941600018,-0.20075192045618795,-0.19095575961986982,-0.18119483225869784,-0.17146722018948396,-0.16177103012406108,-0.1521043921393295,-0.14246545818476128,-0.1328524006247713,-0.1232634108134354,-0.11369669769912477,-0.10415048645673154,-0.09462301714521178,-0.08511254338823998,-0.07561733107585543,-0.06613565708501294,-0.05666580801700032,-0.04720607894975513,-0.03775477220312071,-0.02831019611514094,-0.018870663827496893,-0.00943449207824365,2.4492935982947064e-16,0.00943449207824414,0.018870663827497382,0.028310196115141434,0.0377547722031212,0.04720607894975562,0.056665808017000815,0.06613565708501343,0.07561733107585593,0.08511254338824047,0.09462301714521228,0.10415048645673203,0.11369669769912527,0.1232634108134359,0.13285240062477177,0.14246545818476178,0.15210439213933,0.16177103012406158,0.17146722018948446,0.18119483225869837,0.19095575961987032,0.20075192045618845,0.2105852594160007,0.22045774922595412,0.23037139235009713,0.2403282226980065,0.2503303073851688,0.26037974854899787,0.2704786852240084,0.28062929527986763,0.2908337974262341,0.301094453288473,0.31141356955857635,0.32179350022585396,0.33223664889218246,0.3427454711768966,0.3533224772166931,0.3639702342662022,0.37469136940524495,0.385488572359126,0.3963645984387197,0.4073222716074853,0.41836448768301415,0.4294942176811884,0.44071451131151185,0.45202850063274974,0.46343940387860544,0.47495052946376715,0.4865652801813728,0.49828715760367553,0.51011976669846,0.5220668206746516,0.534132146071458,0.5463196881064097,0.5586335162987107,0.5710778303855025,0.5836569665499148,0.5963754039811069,0.6092377717880163,0.6222488562901397,0.6354136087103752,0.6487371532968824,0.6622247959029652,0.6758820330561854,0.6897145615503807,0.7037282885968753,0.7179293425740858,0.7323240844178214,0.746919119698045,0.7617213114316082,0.7767377936845318,0.7919759860219254,0.807443608868546,0.823148699848343,0.8390996311772805,0.8553051281902162,0.87177428908971,0.8885166060125251,0.9055419875182356,0.9228607826138484,0.9404838064389378,0.9584223677473817,0.97668829833472,0.9952939845743659,1.0142524012417697,1.0335771478232163,1.0532824875254252,1.0733833892239188,1.0938955726123771,1.1148355568422,1.1362207129717996,1.1580693205789947,1.180400628927758,1.203234923123233,1.2265935957367444,1.2504992244364792,1.2749756562202361,1.3000480989153314,1.3257432206884294,1.3520892583960347,1.3791161357063693,1.4068555920370451,1.4353413234824002,1.4646091370523238,1.4946971197135905,1.5256458239185917,1.557498471529246,1.5903011783002918,1.6241032013822116,1.6589572126462109,1.694919601030574,1.732050807568877,1.7704156972977547,1.8100839728697147,1.8511306354317911,1.8936364991945474,1.9376887671337746,1.9833816764700436,2.0308172239971416,2.0801059830267605,2.1313680257411525,2.1847339671705344,2.2403461499272006,2.298359992346988,2.3589455269523705,2.422289161339604,2.4885956999337235,2.5580906728412662,2.6310230276366404,2.707668251829881,2.788332008612379,2.873354387090253,2.963114891684171,3.058038325148457,3.1586017576812457,3.265342823479464,3.3788696493980677,3.499872802992752,3.6291397559349217,3.7675725030756677,3.9162091707266065,4.076250709236553,4.249094122520166,4.436374181715977,4.640016262480494,4.862303927567546,5.105966289668591,5.374292255120153,5.671281819617723,6.001849236738475,6.372100065919544,6.789715464806683,7.264495499118017,7.809143923549754,8.44042965750653,9.180954248158832,10.06192931237971,11.127708152523088,12.443516159796292,14.109365540316261,16.286814403659704,19.25491758435721,23.54077855868505,30.273904647357654,42.39101470463115,70.66007756373817,211.9928118273711,-211.9928118273546,-70.66007756373634,-42.391014704630486,-30.27390464735732,-23.54077855868485,-19.254917584357074,-16.286814403659605,-14.109365540316189,-12.443516159796236,-11.127708152523041,-10.061929312379673,-9.180954248158802,-8.440429657506503,-7.8091439235497315,-7.264495499117998,-6.789715464806665,-6.372100065919529,-6.001849236738462,-5.67128181961771,-5.374292255120142,-5.105966289668581,-4.862303927567536,-4.640016262480486,-4.436374181715969,-4.249094122520159,-4.076250709236547,-3.9162091707266002,-3.767572503075662,-3.6291397559349168,-3.4998728029927473,-3.3788696493980632,-3.2653428234794597,-3.1586017576812417,-3.0580383251484533,-2.9631148916841674,-2.8733543870902496,-2.7883320086123757,-2.707668251829878,-2.6310230276366373,-2.5580906728412636,-2.488595699933721,-2.4222891613396014,-2.3589455269523683,-2.298359992346986,-2.2403461499271984,-2.184733967170532,-2.1313680257411507,-2.0801059830267583,-2.03081722399714,-1.9833816764700418,-1.937688767133773,-1.8936364991945456,-1.8511306354317894,-1.8100839728697131,-1.7704156972977532,-1.7320508075688754,-1.6949196010305727,-1.6589572126462095,-1.6241032013822103,-1.5903011783002905,-1.5574984715292446,-1.5256458239185904,-1.4946971197135892,-1.4646091370523227,-1.435341323482399,-1.406855592037044,-1.3791161357063682,-1.3520892583960338,-1.3257432206884283,-1.3000480989153302,-1.2749756562202352,-1.250499224436478,-1.2265935957367435,-1.2032349231232324,-1.180400628927757,-1.1580693205789938,-1.136220712971799,-1.1148355568421981,-1.0938955726123762,-1.073383389223918,-1.0532824875254234,-1.0335771478232163,-1.0142524012417689,-0.9952939845743644,-0.9766882983347202,-0.9584223677473809,-0.9404838064389363,-0.9228607826138485,-0.9055419875182349,-0.8885166060125245,-0.8717742890897084,-0.8553051281902155,-0.8390996311772799,-0.8231486998483417,-0.8074436088685462,-0.7919759860219249,-0.7767377936845304,-0.7617213114316083,-0.7469191196980445,-0.7323240844178202,-0.7179293425740859,-0.7037282885968748,-0.6897145615503801,-0.6758820330561855,-0.6622247959029648,-0.6487371532968819,-0.6354136087103741,-0.6222488562901392,-0.6092377717880159,-0.5963754039811058,-0.583656966549915,-0.571077830385502,-0.5586335162987097,-0.5463196881064099,-0.5341321460714575,-0.5220668206746512,-0.5101197666984602,-0.4982871576036751,-0.48656528018137235,-0.47495052946376615,-0.463439403878605,-0.4520285006327493,-0.44071451131151085,-0.4294942176811885,-0.4183644876830137,-0.40732227160748435,-0.3963645984387198,-0.38548857235912554,-0.37469136940524456,-0.3639702342662023,-0.3533224772166927,-0.34274547117689613,-0.3322366488921816,-0.3217935002258535,-0.31141356955857596,-0.3010944532884721,-0.29083379742623416,-0.28062929527986724,-0.2704786852240076,-0.2603797485489979,-0.2503303073851684,-0.24032822269800563,-0.2303713923500972,-0.22045774922595374,-0.21058525941600031,-0.20075192045618853,-0.19095575961986994,-0.18119483225869798,-0.17146722018948363,-0.16177103012406166,-0.15210439213932964,-0.14246545818476095,-0.13285240062477185,-0.12326341081343553,-0.11369669769912445,-0.10415048645673211,-0.0946230171452119,-0.0851125433882401,-0.07561733107585601,-0.06613565708501307,-0.05666580801700045,-0.04720607894975481,-0.03775477220312083,-0.028310196115141066,-0.01887066382749657,-0.009434492078244216,1.2246467991473532e-16],"x":[-12.566370614359172,-12.55693640218623,-12.547502190013288,-12.538067977840345,-12.528633765667402,-12.519199553494461,-12.509765341321518,-12.500331129148575,-12.490896916975634,-12.481462704802691,-12.472028492629748,-12.462594280456807,-12.453160068283864,-12.443725856110921,-12.43429164393798,-12.424857431765037,-12.415423219592096,-12.405989007419153,-12.39655479524621,-12.38712058307327,-12.377686370900326,-12.368252158727383,-12.358817946554442,-12.3493837343815,-12.339949522208556,-12.330515310035615,-12.321081097862672,-12.31164688568973,-12.302212673516788,-12.292778461343845,-12.283344249170902,-12.273910036997961,-12.264475824825018,-12.255041612652075,-12.245607400479134,-12.236173188306191,-12.226738976133248,-12.217304763960307,-12.207870551787364,-12.198436339614421,-12.18900212744148,-12.179567915268537,-12.170133703095596,-12.160699490922653,-12.15126527874971,-12.141831066576769,-12.132396854403826,-12.122962642230883,-12.113528430057942,-12.104094217884999,-12.094660005712056,-12.085225793539115,-12.075791581366172,-12.066357369193229,-12.056923157020288,-12.047488944847345,-12.038054732674402,-12.02862052050146,-12.019186308328518,-12.009752096155575,-12.000317883982634,-11.99088367180969,-11.981449459636748,-11.972015247463807,-11.962581035290864,-11.95314682311792,-11.94371261094498,-11.934278398772037,-11.924844186599094,-11.915409974426153,-11.90597576225321,-11.896541550080268,-11.887107337907326,-11.877673125734383,-11.868238913561441,-11.858804701388499,-11.849370489215556,-11.839936277042614,-11.830502064869671,-11.821067852696729,-11.811633640523787,-11.802199428350844,-11.792765216177902,-11.78333100400496,-11.773896791832017,-11.764462579659074,-11.755028367486133,-11.74559415531319,-11.736159943140247,-11.726725730967306,-11.717291518794363,-11.70785730662142,-11.69842309444848,-11.688988882275536,-11.679554670102593,-11.670120457929652,-11.66068624575671,-11.651252033583766,-11.641817821410825,-11.632383609237882,-11.622949397064941,-11.613515184891998,-11.604080972719055,-11.594646760546114,-11.585212548373171,-11.575778336200228,-11.566344124027287,-11.556909911854344,-11.547475699681401,-11.53804148750846,-11.528607275335517,-11.519173063162574,-11.509738850989633,-11.50030463881669,-11.490870426643747,-11.481436214470806,-11.472002002297863,-11.46256779012492,-11.453133577951979,-11.443699365779036,-11.434265153606093,-11.424830941433152,-11.415396729260209,-11.405962517087266,-11.396528304914325,-11.387094092741382,-11.37765988056844,-11.368225668395498,-11.358791456222555,-11.349357244049614,-11.33992303187667,-11.330488819703728,-11.321054607530787,-11.311620395357844,-11.3021861831849,-11.29275197101196,-11.283317758839017,-11.273883546666074,-11.264449334493133,-11.25501512232019,-11.245580910147247,-11.236146697974306,-11.226712485801363,-11.21727827362842,-11.207844061455479,-11.198409849282536,-11.188975637109593,-11.179541424936652,-11.170107212763709,-11.160673000590766,-11.151238788417825,-11.141804576244882,-11.132370364071939,-11.122936151898998,-11.113501939726055,-11.104067727553113,-11.09463351538017,-11.085199303207228,-11.075765091034286,-11.066330878861343,-11.0568966666884,-11.04746245451546,-11.038028242342516,-11.028594030169574,-11.019159817996632,-11.00972560582369,-11.000291393650746,-10.990857181477805,-10.981422969304862,-10.97198875713192,-10.962554544958978,-10.953120332786035,-10.943686120613092,-10.934251908440151,-10.924817696267208,-10.915383484094265,-10.905949271921324,-10.896515059748381,-10.887080847575438,-10.877646635402497,-10.868212423229554,-10.858778211056613,-10.84934399888367,-10.839909786710727,-10.830475574537786,-10.821041362364843,-10.8116071501919,-10.802172938018959,-10.792738725846016,-10.783304513673073,-10.773870301500132,-10.764436089327189,-10.755001877154246,-10.745567664981305,-10.736133452808362,-10.72669924063542,-10.717265028462478,-10.707830816289535,-10.698396604116592,-10.688962391943651,-10.679528179770708,-10.670093967597765,-10.660659755424824,-10.651225543251881,-10.641791331078938,-10.632357118905997,-10.622922906733054,-10.613488694560111,-10.60405448238717,-10.594620270214227,-10.585186058041286,-10.575751845868343,-10.5663176336954,-10.556883421522459,-10.547449209349516,-10.538014997176573,-10.528580785003632,-10.519146572830689,-10.509712360657746,-10.500278148484805,-10.490843936311862,-10.481409724138919,-10.471975511965978,-10.462541299793035,-10.453107087620092,-10.44367287544715,-10.434238663274208,-10.424804451101265,-10.415370238928324,-10.40593602675538,-10.396501814582438,-10.387067602409497,-10.377633390236554,-10.36819917806361,-10.35876496589067,-10.349330753717727,-10.339896541544785,-10.330462329371843,-10.3210281171989,-10.311593905025958,-10.302159692853015,-10.292725480680073,-10.283291268507131,-10.273857056334188,-10.264422844161246,-10.254988631988304,-10.245554419815361,-10.236120207642418,-10.226685995469477,-10.217251783296534,-10.207817571123591,-10.19838335895065,-10.188949146777707,-10.179514934604764,-10.170080722431823,-10.16064651025888,-10.151212298085937,-10.141778085912996,-10.132343873740053,-10.12290966156711,-10.11347544939417,-10.104041237221226,-10.094607025048283,-10.085172812875342,-10.0757386007024,-10.066304388529458,-10.056870176356515,-10.047435964183572,-10.038001752010631,-10.028567539837688,-10.019133327664745,-10.009699115491804,-10.000264903318861,-9.990830691145918,-9.981396478972977,-9.971962266800034,-9.962528054627091,-9.95309384245415,-9.943659630281207,-9.934225418108264,-9.924791205935323,-9.91535699376238,-9.905922781589437,-9.896488569416496,-9.887054357243553,-9.87762014507061,-9.868185932897669,-9.858751720724726,-9.849317508551783,-9.839883296378842,-9.830449084205899,-9.821014872032956,-9.811580659860015,-9.802146447687072,-9.79271223551413,-9.783278023341188,-9.773843811168245,-9.764409598995304,-9.75497538682236,-9.745541174649418,-9.736106962476477,-9.726672750303534,-9.71723853813059,-9.70780432595765,-9.698370113784707,-9.688935901611764,-9.679501689438823,-9.67006747726588,-9.660633265092937,-9.651199052919996,-9.641764840747053,-9.63233062857411,-9.622896416401169,-9.613462204228226,-9.604027992055283,-9.594593779882342,-9.585159567709399,-9.575725355536456,-9.566291143363514,-9.556856931190572,-9.54742271901763,-9.537988506844687,-9.528554294671745,-9.519120082498803,-9.50968587032586,-9.500251658152917,-9.490817445979976,-9.481383233807033,-9.47194902163409,-9.46251480946115,-9.453080597288206,-9.443646385115263,-9.434212172942322,-9.42477796076938,-9.415343748596436,-9.405909536423495,-9.396475324250552,-9.38704111207761,-9.377606899904668,-9.368172687731725,-9.358738475558782,-9.349304263385841,-9.339870051212898,-9.330435839039955,-9.321001626867014,-9.311567414694071,-9.302133202521128,-9.292698990348187,-9.283264778175244,-9.273830566002303,-9.26439635382936,-9.254962141656417,-9.245527929483476,-9.236093717310533,-9.22665950513759,-9.217225292964649,-9.207791080791706,-9.198356868618763,-9.188922656445822,-9.179488444272879,-9.170054232099936,-9.160620019926995,-9.151185807754052,-9.141751595581109,-9.132317383408168,-9.122883171235225,-9.113448959062282,-9.10401474688934,-9.094580534716398,-9.085146322543455,-9.075712110370514,-9.066277898197571,-9.056843686024628,-9.047409473851687,-9.037975261678744,-9.028541049505803,-9.01910683733286,-9.009672625159917,-9.000238412986976,-8.990804200814033,-8.98136998864109,-8.971935776468149,-8.962501564295206,-8.953067352122263,-8.943633139949322,-8.934198927776379,-8.924764715603436,-8.915330503430495,-8.905896291257552,-8.896462079084609,-8.887027866911668,-8.877593654738725,-8.868159442565782,-8.85872523039284,-8.849291018219898,-8.839856806046955,-8.830422593874014,-8.82098838170107,-8.811554169528128,-8.802119957355186,-8.792685745182244,-8.7832515330093,-8.77381732083636,-8.764383108663417,-8.754948896490475,-8.745514684317532,-8.73608047214459,-8.726646259971648,-8.717212047798705,-8.707777835625762,-8.698343623452821,-8.688909411279878,-8.679475199106935,-8.670040986933994,-8.660606774761051,-8.651172562588108,-8.641738350415167,-8.632304138242224,-8.622869926069281,-8.61343571389634,-8.604001501723397,-8.594567289550454,-8.585133077377513,-8.57569886520457,-8.566264653031627,-8.556830440858686,-8.547396228685743,-8.5379620165128,-8.52852780433986,-8.519093592166916,-8.509659379993973,-8.500225167821032,-8.49079095564809,-8.481356743475148,-8.471922531302205,-8.462488319129262,-8.453054106956321,-8.443619894783378,-8.434185682610435,-8.424751470437494,-8.415317258264551,-8.405883046091608,-8.396448833918667,-8.387014621745724,-8.377580409572781,-8.36814619739984,-8.358711985226897,-8.349277773053954,-8.339843560881013,-8.33040934870807,-8.320975136535127,-8.311540924362186,-8.302106712189243,-8.2926725000163,-8.283238287843359,-8.273804075670416,-8.264369863497473,-8.254935651324532,-8.245501439151589,-8.236067226978648,-8.226633014805705,-8.217198802632762,-8.20776459045982,-8.198330378286878,-8.188896166113935,-8.179461953940994,-8.17002774176805,-8.160593529595108,-8.151159317422167,-8.141725105249224,-8.13229089307628,-8.12285668090334,-8.113422468730397,-8.103988256557454,-8.094554044384513,-8.08511983221157,-8.075685620038627,-8.066251407865686,-8.056817195692743,-8.0473829835198,-8.037948771346858,-8.028514559173916,-8.019080347000973,-8.009646134828031,-8.000211922655089,-7.9907777104821465,-7.981343498309204,-7.9719092861362615,-7.962475073963319,-7.953040861790377,-7.9436066496174345,-7.934172437444492,-7.92473822527155,-7.915304013098608,-7.905869800925665,-7.896435588752723,-7.887001376579781,-7.877567164406838,-7.868132952233896,-7.858698740060954,-7.849264527888011,-7.839830315715069,-7.830396103542127,-7.820961891369184,-7.811527679196242,-7.8020934670233,-7.792659254850357,-7.783225042677415,-7.773790830504473,-7.764356618331531,-7.754922406158588,-7.745488193985646,-7.736053981812704,-7.726619769639761,-7.717185557466819,-7.707751345293877,-7.698317133120934,-7.688882920947992,-7.67944870877505,-7.670014496602107,-7.660580284429165,-7.651146072256223,-7.641711860083281,-7.632277647910338,-7.622843435737396,-7.613409223564454,-7.603975011391511,-7.594540799218569,-7.585106587045627,-7.575672374872684,-7.566238162699742,-7.5568039505268,-7.547369738353857,-7.537935526180915,-7.528501314007973,-7.519067101835031,-7.509632889662088,-7.500198677489146,-7.490764465316204,-7.481330253143261,-7.471896040970319,-7.462461828797377,-7.453027616624434,-7.443593404451492,-7.43415919227855,-7.424724980105607,-7.415290767932665,-7.405856555759723,-7.39642234358678,-7.386988131413838,-7.377553919240896,-7.368119707067954,-7.358685494895011,-7.349251282722069,-7.339817070549127,-7.330382858376184,-7.320948646203242,-7.3115144340302995,-7.302080221857357,-7.292646009684415,-7.2832117975114725,-7.27377758533853,-7.2643433731655875,-7.2549091609926455,-7.245474948819703,-7.2360407366467605,-7.2266065244738185,-7.217172312300876,-7.2077381001279335,-7.198303887954991,-7.188869675782049,-7.1794354636091064,-7.170001251436164,-7.160567039263222,-7.151132827090279,-7.141698614917337,-7.132264402744395,-7.122830190571453,-7.11339597839851,-7.103961766225568,-7.094527554052626,-7.085093341879683,-7.075659129706741,-7.066224917533799,-7.056790705360856,-7.047356493187914,-7.037922281014972,-7.028488068842029,-7.019053856669087,-7.009619644496145,-7.000185432323203,-6.99075122015026,-6.981317007977318,-6.971882795804376,-6.962448583631433,-6.953014371458491,-6.943580159285549,-6.934145947112606,-6.924711734939664,-6.915277522766722,-6.905843310593779,-6.896409098420837,-6.886974886247895,-6.877540674074952,-6.86810646190201,-6.858672249729068,-6.849238037556126,-6.839803825383183,-6.830369613210241,-6.820935401037299,-6.811501188864356,-6.802066976691414,-6.792632764518472,-6.783198552345529,-6.773764340172587,-6.764330127999645,-6.754895915826702,-6.74546170365376,-6.736027491480818,-6.726593279307876,-6.717159067134933,-6.707724854961991,-6.698290642789049,-6.688856430616106,-6.679422218443164,-6.669988006270222,-6.660553794097279,-6.651119581924337,-6.641685369751395,-6.632251157578452,-6.62281694540551,-6.613382733232568,-6.603948521059626,-6.594514308886683,-6.585080096713741,-6.575645884540799,-6.566211672367856,-6.556777460194914,-6.5473432480219715,-6.537909035849029,-6.528474823676087,-6.5190406115031445,-6.509606399330202,-6.5001721871572595,-6.4907379749843175,-6.4813037628113745,-6.4718695506384325,-6.4624353384654905,-6.453001126292548,-6.4435669141196055,-6.434132701946663,-6.424698489773721,-6.415264277600778,-6.405830065427836,-6.396395853254894,-6.386961641081951,-6.377527428909009,-6.368093216736067,-6.358659004563124,-6.349224792390182,-6.33979058021724,-6.330356368044298,-6.320922155871355,-6.311487943698413,-6.302053731525471,-6.292619519352528,-6.283185307179586,-6.273751095006644,-6.264316882833701,-6.254882670660759,-6.245448458487817,-6.236014246314874,-6.226580034141932,-6.21714582196899,-6.207711609796048,-6.198277397623105,-6.188843185450163,-6.179408973277221,-6.169974761104278,-6.160540548931336,-6.151106336758394,-6.141672124585451,-6.132237912412509,-6.122803700239567,-6.113369488066624,-6.103935275893682,-6.09450106372074,-6.085066851547798,-6.075632639374855,-6.066198427201913,-6.056764215028971,-6.047330002856028,-6.037895790683086,-6.028461578510144,-6.019027366337201,-6.009593154164259,-6.000158941991317,-5.990724729818374,-5.981290517645432,-5.97185630547249,-5.962422093299547,-5.952987881126605,-5.943553668953663,-5.934119456780721,-5.924685244607778,-5.915251032434836,-5.905816820261894,-5.896382608088951,-5.886948395916009,-5.877514183743067,-5.868079971570124,-5.858645759397182,-5.84921154722424,-5.839777335051297,-5.830343122878355,-5.820908910705413,-5.811474698532471,-5.802040486359528,-5.792606274186586,-5.7831720620136435,-5.773737849840701,-5.7643036376677586,-5.7548694254948165,-5.745435213321874,-5.7360010011489315,-5.7265667889759895,-5.7171325768030465,-5.7076983646301045,-5.6982641524571624,-5.68882994028422,-5.6793957281112775,-5.669961515938335,-5.660527303765393,-5.65109309159245,-5.641658879419508,-5.632224667246566,-5.622790455073623,-5.613356242900681,-5.603922030727739,-5.594487818554796,-5.585053606381854,-5.575619394208912,-5.566185182035969,-5.556750969863027,-5.547316757690085,-5.537882545517143,-5.5284483333442,-5.519014121171258,-5.509579908998316,-5.500145696825373,-5.490711484652431,-5.481277272479489,-5.471843060306546,-5.462408848133604,-5.452974635960662,-5.443540423787719,-5.434106211614777,-5.424671999441835,-5.415237787268893,-5.40580357509595,-5.396369362923008,-5.386935150750066,-5.377500938577123,-5.368066726404181,-5.358632514231239,-5.349198302058296,-5.339764089885354,-5.330329877712412,-5.320895665539469,-5.311461453366527,-5.302027241193585,-5.292593029020643,-5.2831588168477,-5.273724604674758,-5.264290392501816,-5.254856180328873,-5.245421968155931,-5.235987755982989,-5.226553543810046,-5.217119331637104,-5.207685119464162,-5.198250907291219,-5.188816695118277,-5.179382482945335,-5.169948270772393,-5.16051405859945,-5.151079846426508,-5.141645634253566,-5.132211422080623,-5.122777209907681,-5.113342997734739,-5.103908785561796,-5.094474573388854,-5.085040361215912,-5.075606149042969,-5.066171936870027,-5.056737724697085,-5.047303512524142,-5.0378693003512,-5.028435088178258,-5.0190008760053155,-5.009566663832373,-5.0001324516594305,-4.9906982394864885,-4.981264027313546,-4.9718298151406035,-4.9623956029676615,-4.9529613907947185,-4.9435271786217765,-4.934092966448834,-4.9246587542758915,-4.9152245421029495,-4.905790329930007,-4.896356117757065,-4.886921905584122,-4.87748769341118,-4.868053481238238,-4.858619269065295,-4.849185056892353,-4.839750844719411,-4.830316632546468,-4.820882420373526,-4.811448208200584,-4.802013996027641,-4.792579783854699,-4.783145571681757,-4.773711359508815,-4.764277147335872,-4.75484293516293,-4.745408722989988,-4.735974510817045,-4.726540298644103,-4.717106086471161,-4.707671874298218,-4.698237662125276,-4.688803449952334,-4.679369237779391,-4.669935025606449,-4.660500813433507,-4.651066601260564,-4.641632389087622,-4.63219817691468,-4.622763964741738,-4.613329752568795,-4.603895540395853,-4.594461328222911,-4.585027116049968,-4.575592903877026,-4.566158691704084,-4.556724479531141,-4.547290267358199,-4.537856055185257,-4.528421843012314,-4.518987630839372,-4.50955341866643,-4.500119206493488,-4.490684994320545,-4.481250782147603,-4.471816569974661,-4.462382357801718,-4.452948145628776,-4.443513933455834,-4.434079721282891,-4.424645509109949,-4.415211296937007,-4.405777084764064,-4.396342872591122,-4.38690866041818,-4.377474448245238,-4.368040236072295,-4.358606023899353,-4.349171811726411,-4.339737599553468,-4.330303387380526,-4.320869175207584,-4.311434963034641,-4.302000750861699,-4.292566538688757,-4.283132326515814,-4.273698114342872,-4.26426390216993,-4.254829689996987,-4.245395477824045,-4.2359612656511025,-4.2265270534781605,-4.2170928413052176,-4.2076586291322755,-4.1982244169593335,-4.1887902047863905,-4.1793559926134485,-4.169921780440506,-4.1604875682675635,-4.1510533560946214,-4.141619143921679,-4.1321849317487365,-4.122750719575794,-4.113316507402852,-4.10388229522991,-4.094448083056967,-4.085013870884025,-4.075579658711083,-4.06614544653814,-4.056711234365198,-4.047277022192256,-4.037842810019313,-4.028408597846371,-4.018974385673429,-4.009540173500486,-4.000105961327544,-3.990671749154602,-3.9812375369816597,-3.9718033248087172,-3.962369112635775,-3.9529349004628327,-3.9435006882898906,-3.934066476116948,-3.9246322639440057,-3.9151980517710636,-3.905763839598121,-3.8963296274251786,-3.8868954152522366,-3.877461203079294,-3.868026990906352,-3.8585927787334096,-3.849158566560467,-3.839724354387525,-3.8302901422145825,-3.8208559300416405,-3.811421717868698,-3.8019875056957555,-3.7925532935228135,-3.783119081349871,-3.7736848691769285,-3.7642506570039864,-3.754816444831044,-3.745382232658102,-3.7359480204851594,-3.726513808312217,-3.717079596139275,-3.7076453839663324,-3.69821117179339,-3.688776959620448,-3.6793427474475053,-3.6699085352745633,-3.660474323101621,-3.6510401109286783,-3.6416058987557363,-3.6321716865827938,-3.6227374744098517,-3.6133032622369092,-3.6038690500639667,-3.5944348378910247,-3.585000625718082,-3.5755664135451397,-3.5661322013721977,-3.556697989199255,-3.547263777026313,-3.5378295648533706,-3.528395352680428,-3.518961140507486,-3.5095269283345436,-3.5000927161616016,-3.490658503988659,-3.4812242918157166,-3.4717900796427745,-3.462355867469832,-3.4529216552968895,-3.4434874431239475,-3.434053230951005,-3.424619018778063,-3.4151848066051205,-3.405750594432178,-3.396316382259236,-3.3868821700862934,-3.377447957913351,-3.368013745740409,-3.3585795335674664,-3.3491453213945244,-3.339711109221582,-3.3302768970486394,-3.3208426848756973,-3.311408472702755,-3.301974260529813,-3.2925400483568703,-3.283105836183928,-3.2736716240109858,-3.2642374118380433,-3.254803199665101,-3.2453689874921587,-3.2359347753192163,-3.226500563146274,-3.2170663509733317,-3.207632138800389,-3.198197926627447,-3.1887637144545047,-3.179329502281562,-3.16989529010862,-3.1604610779356777,-3.1510268657627356,-3.141592653589793]}
},{}],90:[function(require,module,exports){
module.exports={"expected":[-1.2246467991473532e-16,0.009434492078244216,0.01887066382749657,0.028310196115141066,0.03775477220312083,0.04720607894975481,0.05666580801700045,0.06613565708501307,0.07561733107585601,0.0851125433882401,0.0946230171452119,0.10415048645673211,0.11369669769912445,0.12326341081343553,0.13285240062477185,0.14246545818476095,0.15210439213932964,0.16177103012406166,0.17146722018948363,0.18119483225869798,0.19095575961986994,0.20075192045618853,0.21058525941600031,0.22045774922595374,0.2303713923500972,0.24032822269800563,0.2503303073851684,0.2603797485489979,0.2704786852240076,0.28062929527986724,0.29083379742623416,0.3010944532884721,0.31141356955857596,0.3217935002258535,0.3322366488921816,0.34274547117689613,0.3533224772166927,0.3639702342662023,0.37469136940524456,0.38548857235912554,0.3963645984387198,0.40732227160748435,0.4183644876830137,0.4294942176811885,0.44071451131151085,0.4520285006327493,0.463439403878605,0.47495052946376615,0.48656528018137235,0.4982871576036751,0.5101197666984602,0.5220668206746512,0.5341321460714575,0.5463196881064099,0.5586335162987097,0.571077830385502,0.583656966549915,0.5963754039811058,0.6092377717880159,0.6222488562901392,0.6354136087103741,0.6487371532968819,0.6622247959029648,0.6758820330561855,0.6897145615503801,0.7037282885968748,0.7179293425740859,0.7323240844178202,0.7469191196980445,0.7617213114316083,0.7767377936845304,0.7919759860219249,0.8074436088685462,0.8231486998483417,0.8390996311772799,0.8553051281902155,0.8717742890897084,0.8885166060125245,0.9055419875182349,0.9228607826138485,0.9404838064389363,0.9584223677473809,0.9766882983347202,0.9952939845743644,1.0142524012417689,1.0335771478232163,1.0532824875254234,1.073383389223918,1.0938955726123762,1.1148355568421981,1.136220712971799,1.1580693205789938,1.180400628927757,1.2032349231232324,1.2265935957367435,1.250499224436478,1.2749756562202352,1.3000480989153302,1.3257432206884283,1.3520892583960338,1.3791161357063682,1.406855592037044,1.435341323482399,1.4646091370523227,1.4946971197135892,1.5256458239185904,1.5574984715292446,1.5903011783002905,1.6241032013822103,1.6589572126462095,1.6949196010305727,1.7320508075688754,1.7704156972977532,1.8100839728697131,1.8511306354317894,1.8936364991945456,1.937688767133773,1.9833816764700418,2.03081722399714,2.0801059830267583,2.1313680257411507,2.184733967170532,2.2403461499271984,2.298359992346986,2.3589455269523683,2.4222891613396014,2.488595699933721,2.5580906728412636,2.6310230276366373,2.707668251829878,2.7883320086123757,2.8733543870902496,2.9631148916841674,3.0580383251484533,3.1586017576812417,3.2653428234794597,3.3788696493980632,3.4998728029927473,3.6291397559349168,3.767572503075662,3.9162091707266002,4.076250709236547,4.249094122520159,4.436374181715969,4.640016262480486,4.862303927567536,5.105966289668581,5.374292255120142,5.67128181961771,6.001849236738462,6.372100065919529,6.789715464806665,7.264495499117998,7.8091439235497315,8.440429657506503,9.180954248158802,10.061929312379673,11.127708152523041,12.443516159796236,14.109365540316189,16.286814403659605,19.254917584357074,23.54077855868485,30.27390464735732,42.391014704630486,70.66007756373634,211.9928118273546,-211.9928118273711,-70.66007756373817,-42.39101470463115,-30.273904647357654,-23.54077855868505,-19.25491758435721,-16.286814403659704,-14.109365540316261,-12.443516159796292,-11.127708152523088,-10.06192931237971,-9.180954248158832,-8.44042965750653,-7.809143923549754,-7.264495499118017,-6.789715464806683,-6.372100065919544,-6.001849236738475,-5.671281819617723,-5.374292255120153,-5.105966289668591,-4.862303927567546,-4.640016262480494,-4.436374181715977,-4.249094122520166,-4.076250709236553,-3.9162091707266065,-3.7675725030756677,-3.6291397559349217,-3.499872802992752,-3.3788696493980677,-3.265342823479464,-3.1586017576812457,-3.058038325148457,-2.963114891684171,-2.873354387090253,-2.788332008612379,-2.707668251829881,-2.6310230276366404,-2.5580906728412662,-2.4885956999337235,-2.422289161339604,-2.3589455269523705,-2.298359992346988,-2.2403461499272006,-2.1847339671705344,-2.1313680257411525,-2.0801059830267605,-2.0308172239971416,-1.9833816764700436,-1.9376887671337746,-1.8936364991945474,-1.8511306354317911,-1.8100839728697147,-1.7704156972977547,-1.732050807568877,-1.694919601030574,-1.6589572126462109,-1.6241032013822116,-1.5903011783002918,-1.557498471529246,-1.5256458239185917,-1.4946971197135905,-1.4646091370523238,-1.4353413234824002,-1.4068555920370451,-1.3791161357063693,-1.3520892583960347,-1.3257432206884294,-1.3000480989153314,-1.2749756562202361,-1.2504992244364792,-1.2265935957367444,-1.203234923123233,-1.180400628927758,-1.1580693205789947,-1.1362207129717996,-1.1148355568422,-1.0938955726123771,-1.0733833892239188,-1.0532824875254252,-1.0335771478232163,-1.0142524012417697,-0.9952939845743659,-0.97668829833472,-0.9584223677473817,-0.9404838064389378,-0.9228607826138484,-0.9055419875182356,-0.8885166060125251,-0.87177428908971,-0.8553051281902162,-0.8390996311772805,-0.823148699848343,-0.807443608868546,-0.7919759860219254,-0.7767377936845318,-0.7617213114316082,-0.746919119698045,-0.7323240844178214,-0.7179293425740858,-0.7037282885968753,-0.6897145615503807,-0.6758820330561854,-0.6622247959029652,-0.6487371532968824,-0.6354136087103752,-0.6222488562901397,-0.6092377717880163,-0.5963754039811069,-0.5836569665499148,-0.5710778303855025,-0.5586335162987107,-0.5463196881064097,-0.534132146071458,-0.5220668206746516,-0.51011976669846,-0.49828715760367553,-0.4865652801813728,-0.47495052946376715,-0.46343940387860544,-0.45202850063274974,-0.44071451131151185,-0.4294942176811884,-0.41836448768301415,-0.4073222716074853,-0.3963645984387197,-0.385488572359126,-0.37469136940524495,-0.3639702342662022,-0.3533224772166931,-0.3427454711768966,-0.33223664889218246,-0.32179350022585396,-0.31141356955857635,-0.301094453288473,-0.2908337974262341,-0.28062929527986763,-0.2704786852240084,-0.26037974854899787,-0.2503303073851688,-0.2403282226980065,-0.23037139235009713,-0.22045774922595412,-0.2105852594160007,-0.20075192045618845,-0.19095575961987032,-0.18119483225869837,-0.17146722018948446,-0.16177103012406158,-0.15210439213933,-0.14246545818476178,-0.13285240062477177,-0.1232634108134359,-0.11369669769912527,-0.10415048645673203,-0.09462301714521228,-0.08511254338824047,-0.07561733107585593,-0.06613565708501343,-0.056665808017000815,-0.04720607894975562,-0.0377547722031212,-0.028310196115141434,-0.018870663827497382,-0.00943449207824414,-2.4492935982947064e-16,0.00943449207824365,0.018870663827496893,0.02831019611514094,0.03775477220312071,0.04720607894975513,0.05666580801700032,0.06613565708501294,0.07561733107585543,0.08511254338823998,0.09462301714521178,0.10415048645673154,0.11369669769912477,0.1232634108134354,0.1328524006247713,0.14246545818476128,0.1521043921393295,0.16177103012406108,0.17146722018948396,0.18119483225869784,0.19095575961986982,0.20075192045618795,0.21058525941600018,0.2204577492259536,0.2303713923500966,0.24032822269800597,0.25033030738516826,0.2603797485489973,0.2704786852240079,0.2806292952798671,0.29083379742623355,0.30109445328847245,0.3114135695585758,0.3217935002258534,0.3322366488921819,0.342745471176896,0.3533224772166925,0.3639702342662016,0.3746913694052444,0.3854885723591254,0.39636459843871913,0.40732227160748474,0.4183644876830136,0.42949421768118784,0.44071451131151124,0.4520285006327492,0.4634394038786048,0.47495052946376654,0.4865652801813722,0.4982871576036749,0.5101197666984594,0.522066820674651,0.5341321460714573,0.5463196881064092,0.55863351629871,0.5710778303855019,0.5836569665499142,0.5963754039811062,0.6092377717880156,0.622248856290139,0.6354136087103746,0.6487371532968816,0.6622247959029646,0.6758820330561848,0.68971456155038,0.7037282885968745,0.717929342574085,0.7323240844178207,0.7469191196980443,0.7617213114316074,0.776737793684531,0.7919759860219246,0.8074436088685453,0.8231486998483423,0.8390996311772797,0.8553051281902153,0.8717742890897091,0.8885166060125242,0.9055419875182347,0.9228607826138475,0.9404838064389368,0.9584223677473807,0.976688298334719,0.9952939845743649,1.0142524012417686,1.0335771478232152,1.053282487525424,1.0733833892239177,1.093895572612376,1.1148355568421988,1.1362207129717985,1.1580693205789936,1.1804006289277567,1.203234923123232,1.2265935957367433,1.2504992244364779,1.274975656220235,1.30004809891533,1.325743220688428,1.3520892583960333,1.379116135706368,1.4068555920370438,1.4353413234823988,1.4646091370523222,1.4946971197135888,1.5256458239185902,1.5574984715292441,1.59030117830029,1.6241032013822099,1.6589572126462089,1.694919601030572,1.732050807568875,1.7704156972977527,1.8100839728697127,1.851130635431789,1.893636499194545,1.9376887671337724,1.9833816764700412,2.0308172239971394,2.080105983026758,2.13136802574115,2.1847339671705317,2.2403461499271975,2.298359992346985,2.3589455269523674,2.4222891613396005,2.48859569993372,2.5580906728412627,2.6310230276366364,2.707668251829877,2.7883320086123744,2.8733543870902487,2.963114891684166,3.058038325148452,3.1586017576812404,3.2653428234794584,3.378869649398062,3.4998728029927455,3.629139755934915,3.76757250307566,3.9162091707265985,4.076250709236545,4.249094122520157,4.436374181715967,4.640016262480484,4.862303927567534,5.105966289668578,5.374292255120138,5.671281819617706,6.001849236738457,6.372100065919524,6.78971546480666,7.2644954991179915,7.8091439235497235,8.440429657506494,9.180954248158791,10.061929312379661,11.127708152523025,12.443516159796216,14.109365540316164,16.286814403659573,19.254917584357027,23.54077855868478,30.273904647357206,42.391014704630265,70.66007756373573,211.9928118273491,-211.9928118273766,-70.66007756373878,-42.39101470463137,-30.273904647357767,-23.540778558685123,-19.254917584357255,-16.286814403659736,-14.109365540316286,-12.443516159796312,-11.127708152523102,-10.061929312379723,-9.180954248158843,-8.440429657506538,-7.809143923549762,-7.264495499118024,-6.789715464806688,-6.3721000659195495,-6.001849236738513,-5.671281819617726,-5.374292255120157,-5.105966289668618,-4.862303927567549,-4.6400162624804775,-4.436374181715998,-4.249094122520169,-4.07625070923654,-3.916209170726623,-3.7675725030756695,-3.629139755934911,-3.4998728029927655,-3.3788696493980694,-3.2653428234794553,-3.158601757681257,-3.058038325148458,-2.9631148916841634,-2.873354387090254,-2.78833200861238,-2.7076682518298747,-2.6310230276366413,-2.558090672841267,-2.4885956999337178,-2.422289161339605,-2.3589455269523714,-2.298359992346995,-2.2403461499272015,-2.1847339671705353,-2.1313680257411582,-2.080105983026761,-2.0308172239971425,-1.9833816764700487,-1.9376887671337752,-1.8936364991945438,-1.8511306354317956,-1.8100839728697151,-1.7704156972977516,-1.732050807568881,-1.6949196010305745,-1.658957212646208,-1.6241032013822154,-1.5903011783002923,-1.5574984715292433,-1.525645823918595,-1.4946971197135908,-1.4646091370523213,-1.4353413234824006,-1.4068555920370456,-1.379116135706367,-1.352089258396035,-1.3257432206884296,-1.300048098915334,-1.2749756562202366,-1.2504992244364794,-1.2265935957367469,-1.2032349231232335,-1.1804006289277582,-1.1580693205789971,-1.1362207129718,-1.1148355568421981,-1.0938955726123794,-1.073383389223919,-1.0532824875254234,-1.0335771478232183,-1.01425240124177,-0.9952939845743644,-0.976688298334722,-0.9584223677473819,-0.9404838064389364,-0.9228607826138503,-0.9055419875182358,-0.8885166060125238,-0.8717742890897102,-0.8553051281902164,-0.8390996311772793,-0.8231486998483433,-0.8074436088685463,-0.7919759860219242,-0.7767377936845319,-0.7617213114316084,-0.7469191196980466,-0.7323240844178216,-0.717929342574086,-0.7037282885968769,-0.6897145615503809,-0.6758820330561857,-0.6622247959029667,-0.6487371532968825,-0.6354136087103741,-0.6222488562901412,-0.6092377717880165,-0.5963754039811059,-0.5836569665499162,-0.5710778303855026,-0.5586335162987097,-0.5463196881064111,-0.5341321460714581,-0.5220668206746507,-0.5101197666984613,-0.4982871576036757,-0.48656528018137185,-0.4749505294637673,-0.46343940387860555,-0.45202850063274885,-0.44071451131151196,-0.42949421768118856,-0.41836448768301326,-0.40732227160748546,-0.39636459843871985,-0.38548857235912715,-0.3746913694052451,-0.36397023426620234,-0.35332247721669424,-0.3427454711768967,-0.33223664889218163,-0.32179350022585507,-0.31141356955857646,-0.3010944532884722,-0.2908337974262352,-0.28062929527986774,-0.27047868522400764,-0.2603797485489989,-0.2503303073851689,-0.2403282226980057,-0.23037139235009818,-0.22045774922595426,-0.2105852594159999,-0.2007519204561895,-0.19095575961987046,-0.18119483225869756,-0.1714672201894846,-0.1617710301240617,-0.15210439213932922,-0.14246545818476192,-0.1328524006247719,-0.12326341081343693,-0.1136966976991254,-0.10415048645673215,-0.09462301714521329,-0.08511254338824059,-0.07561733107585605,-0.06613565708501444,-0.05666580801700093,-0.04720607894975486,-0.03775477220312221,-0.028310196115141555,-0.01887066382749662,-0.00943449207824515,-3.6739403974420594e-16,0.009434492078244415,0.018870663827495884,0.02831019611514082,0.03775477220312148,0.047206078949754114,0.0566658080170002,0.0661356570850137,0.07561733107585532,0.08511254338823986,0.09462301714521255,0.10415048645673142,0.11369669769912465,0.12326341081343618,0.13285240062477116,0.14246545818476117,0.15210439213932847,0.16177103012406094,0.17146722018948382,0.18119483225869681,0.19095575961986969,0.20075192045618873,0.21058525941599912,0.2204577492259535,0.2303713923500974,0.2403282226980049,0.25033030738516815,0.26037974854899815,0.2704786852240068,0.28062929527986696,0.2908337974262344,0.30109445328847134,0.3114135695585757,0.32179350022585423,0.3322366488921808,0.34274547117689586,0.3533224772166934,0.3639702342662015,0.3746913694052443,0.3854885723591263,0.396364598438719,0.4073222716074846,0.4183644876830124,0.4294942176811877,0.44071451131151107,0.45202850063274796,0.46343940387860466,0.4749505294637664,0.4865652801813709,0.49828715760367476,0.5101197666984604,0.5220668206746497,0.5341321460714572,0.5463196881064101,0.5586335162987087,0.5710778303855018,0.5836569665499152,0.5963754039811049,0.6092377717880155,0.62224885629014,0.6354136087103731,0.6487371532968815,0.6622247959029657,0.6758820330561846,0.6897145615503798,0.7037282885968758,0.7179293425740849,0.7323240844178205,0.7469191196980455,0.7617213114316072,0.7767377936845308,0.791975986021923,0.807443608868545,0.823148699848342,0.839099631177278,0.8553051281902151,0.8717742890897089,0.8885166060125225,0.9055419875182344,0.9228607826138489,0.9404838064389349,0.9584223677473804,0.9766882983347206,0.9952939845743629,1.0142524012417684,1.0335771478232167,1.0532824875254219,1.0733833892239175,1.0938955726123778,1.1148355568421966,1.1362207129717983,1.1580693205789954,1.1804006289277564,1.2032349231232318,1.226593595736745,1.2504992244364774,1.2749756562202346,1.300048098915332,1.3257432206884276,1.352089258396033,1.3791161357063648,1.4068555920370434,1.4353413234823984,1.464609137052319,1.4946971197135885,1.5256458239185926,1.5574984715292408,1.5903011783002898,1.6241032013822125,1.658957212646205,1.6949196010305716,1.732050807568878,1.7704156972977485,1.810083972869712,1.8511306354317922,1.8936364991945405,1.9376887671337717,1.983381676470045,2.0308172239971385,2.080105983026757,2.1313680257411542,2.184733967170531,2.240346149927197,2.29835999234699,2.3589455269523665,2.4222891613395996,2.488595699933713,2.558090672841262,2.6310230276366355,2.7076682518298685,2.7883320086123735,2.8733543870902474,2.9631148916841563,3.0580383251484506,3.158601757681249,3.265342823479447,3.37886964939806,3.4998728029927557,3.6291397559349003,3.7675725030756584,3.916209170726611,4.076250709236527,4.249094122520154,4.4363741817159825,4.640016262480461,4.862303927567531,5.105966289668599,5.374292255120134,5.671281819617702,6.001849236738486,6.372100065919518,6.789715464806654,7.264495499118032,7.8091439235497155,8.440429657506485,9.180954248158704,10.061929312379648,11.127708152523011,12.443516159796058,14.109365540316139,16.286814403659776,19.25491758435665,23.540778558684714,30.27390464735791,42.39101470462845,70.66007756373511,211.99281182738352,-211.99281182742203,-70.66007756373939,-42.39101470462999,-30.273904647358695,-23.54077855868519,-19.25491758435697,-16.286814403660003,-14.109365540316311,-12.443516159796191,-11.127708152523118,-10.061929312379736,-9.180954248158777,-8.440429657506547,-7.809143923549769,-7.264495499118079,-6.789715464806695,-6.372100065919554,-6.001849236738518,-5.671281819617731,-5.37429225512016,-5.105966289668622,-4.8623039275675515,-4.64001626248048,-4.436374181716,-4.249094122520171,-4.076250709236542,-3.9162091707266247,-3.7675725030756713,-3.629139755934913,-3.4998728029927673,-3.3788696493980708,-3.2653428234794566,-3.158601757681258,-3.0580383251484595,-2.9631148916841648,-2.8733543870902554,-2.788332008612381,-2.7076682518298756,-2.631023027636642,-2.558090672841268,-2.4885956999337187,-2.422289161339606,-2.3589455269523723,-2.2983599923469953,-2.240346149927202,-2.1847339671705357,-2.131368025741159,-2.080105983026762,-2.030817223997143,-1.9833816764700491,-1.937688767133776,-1.8936364991945442,-1.851130635431796,-1.8100839728697158,-1.770415697297752,-1.7320508075688814,-1.694919601030575,-1.6589572126462084,-1.6241032013822159,-1.5903011783002927,-1.5574984715292437,-1.5256458239185955,-1.4946971197135912,-1.4646091370523218,-1.435341323482401,-1.4068555920370458,-1.3791161357063675,-1.3520892583960356,-1.32574322068843,-1.3000480989153342,-1.2749756562202368,-1.2504992244364797,-1.2265935957367473,-1.2032349231232338,-1.1804006289277584,-1.1580693205789974,-1.1362207129718003,-1.1148355568421984,-1.0938955726123796,-1.0733833892239193,-1.0532824875254236,-1.0335771478232185,-1.0142524012417702,-0.9952939845743647,-0.9766882983347223,-0.9584223677473821,-0.9404838064389366,-0.9228607826138505,-0.905541987518236,-0.888516606012524,-0.8717742890897103,-0.8553051281902166,-0.8390996311772795,-0.8231486998483435,-0.8074436088685465,-0.7919759860219244,-0.7767377936845321,-0.7617213114316085,-0.7469191196980468,-0.7323240844178218,-0.7179293425740861,-0.703728288596877,-0.689714561550381,-0.6758820330561859,-0.6622247959029669,-0.6487371532968826,-0.6354136087103743,-0.6222488562901413,-0.6092377717880166,-0.596375403981106,-0.5836569665499164,-0.5710778303855029,-0.5586335162987099,-0.5463196881064112,-0.5341321460714583,-0.5220668206746508,-0.5101197666984615,-0.49828715760367587,-0.486565280181372,-0.4749505294637675,-0.4634394038786057,-0.45202850063274896,-0.4407145113115121,-0.4294942176811887,-0.41836448768301343,-0.4073222716074856,-0.39636459843871996,-0.38548857235912726,-0.3746913694052452,-0.36397023426620245,-0.35332247721669435,-0.34274547117689685,-0.33223664889218174,-0.3217935002258552,-0.31141356955857663,-0.3010944532884723,-0.29083379742623533,-0.2806292952798679,-0.27047868522400775,-0.2603797485489991,-0.25033030738516904,-0.2403282226980058,-0.23037139235009832,-0.22045774922595437,-0.210585259416,-0.20075192045618961,-0.19095575961987057,-0.1811948322586977,-0.1714672201894847,-0.16177103012406183,-0.15210439213932936,-0.14246545818476203,-0.13285240062477202,-0.12326341081343706,-0.11369669769912552,-0.10415048645673228,-0.09462301714521341,-0.08511254338824072,-0.07561733107585618,-0.06613565708501457,-0.05666580801700106,-0.047206078949754975,-0.03775477220312234,-0.028310196115141677,-0.01887066382749674,-0.009434492078245272,-4.898587196589413e-16],"x":[3.141592653589793,3.1510268657627356,3.1604610779356777,3.16989529010862,3.179329502281562,3.1887637144545047,3.198197926627447,3.207632138800389,3.2170663509733317,3.226500563146274,3.2359347753192163,3.2453689874921587,3.254803199665101,3.2642374118380433,3.2736716240109858,3.283105836183928,3.2925400483568703,3.301974260529813,3.311408472702755,3.3208426848756973,3.3302768970486394,3.339711109221582,3.3491453213945244,3.3585795335674664,3.368013745740409,3.377447957913351,3.3868821700862934,3.396316382259236,3.405750594432178,3.4151848066051205,3.424619018778063,3.434053230951005,3.4434874431239475,3.4529216552968895,3.462355867469832,3.4717900796427745,3.4812242918157166,3.490658503988659,3.5000927161616016,3.5095269283345436,3.518961140507486,3.528395352680428,3.5378295648533706,3.547263777026313,3.556697989199255,3.5661322013721977,3.5755664135451397,3.585000625718082,3.5944348378910247,3.6038690500639667,3.6133032622369092,3.6227374744098517,3.6321716865827938,3.6416058987557363,3.6510401109286783,3.660474323101621,3.6699085352745633,3.6793427474475053,3.688776959620448,3.69821117179339,3.7076453839663324,3.717079596139275,3.726513808312217,3.7359480204851594,3.745382232658102,3.754816444831044,3.7642506570039864,3.7736848691769285,3.783119081349871,3.7925532935228135,3.8019875056957555,3.811421717868698,3.8208559300416405,3.8302901422145825,3.839724354387525,3.849158566560467,3.8585927787334096,3.868026990906352,3.877461203079294,3.8868954152522366,3.8963296274251786,3.905763839598121,3.9151980517710636,3.9246322639440057,3.934066476116948,3.9435006882898906,3.9529349004628327,3.962369112635775,3.9718033248087172,3.9812375369816597,3.990671749154602,4.000105961327544,4.009540173500486,4.018974385673429,4.028408597846371,4.037842810019313,4.047277022192256,4.056711234365198,4.06614544653814,4.075579658711083,4.085013870884025,4.094448083056967,4.10388229522991,4.113316507402852,4.122750719575794,4.1321849317487365,4.141619143921679,4.1510533560946214,4.1604875682675635,4.169921780440506,4.1793559926134485,4.1887902047863905,4.1982244169593335,4.2076586291322755,4.2170928413052176,4.2265270534781605,4.2359612656511025,4.245395477824045,4.254829689996987,4.26426390216993,4.273698114342872,4.283132326515814,4.292566538688757,4.302000750861699,4.311434963034641,4.320869175207584,4.330303387380526,4.339737599553468,4.349171811726411,4.358606023899353,4.368040236072295,4.377474448245238,4.38690866041818,4.396342872591122,4.405777084764064,4.415211296937007,4.424645509109949,4.434079721282891,4.443513933455834,4.452948145628776,4.462382357801718,4.471816569974661,4.481250782147603,4.490684994320545,4.500119206493488,4.50955341866643,4.518987630839372,4.528421843012314,4.537856055185257,4.547290267358199,4.556724479531141,4.566158691704084,4.575592903877026,4.585027116049968,4.594461328222911,4.603895540395853,4.613329752568795,4.622763964741738,4.63219817691468,4.641632389087622,4.651066601260564,4.660500813433507,4.669935025606449,4.679369237779391,4.688803449952334,4.698237662125276,4.707671874298218,4.717106086471161,4.726540298644103,4.735974510817045,4.745408722989988,4.75484293516293,4.764277147335872,4.773711359508815,4.783145571681757,4.792579783854699,4.802013996027641,4.811448208200584,4.820882420373526,4.830316632546468,4.839750844719411,4.849185056892353,4.858619269065295,4.868053481238238,4.87748769341118,4.886921905584122,4.896356117757065,4.905790329930007,4.9152245421029495,4.9246587542758915,4.934092966448834,4.9435271786217765,4.9529613907947185,4.9623956029676615,4.9718298151406035,4.981264027313546,4.9906982394864885,5.0001324516594305,5.009566663832373,5.0190008760053155,5.028435088178258,5.0378693003512,5.047303512524142,5.056737724697085,5.066171936870027,5.075606149042969,5.085040361215912,5.094474573388854,5.103908785561796,5.113342997734739,5.122777209907681,5.132211422080623,5.141645634253566,5.151079846426508,5.16051405859945,5.169948270772393,5.179382482945335,5.188816695118277,5.198250907291219,5.207685119464162,5.217119331637104,5.226553543810046,5.235987755982989,5.245421968155931,5.254856180328873,5.264290392501816,5.273724604674758,5.2831588168477,5.292593029020643,5.302027241193585,5.311461453366527,5.320895665539469,5.330329877712412,5.339764089885354,5.349198302058296,5.358632514231239,5.368066726404181,5.377500938577123,5.386935150750066,5.396369362923008,5.40580357509595,5.415237787268893,5.424671999441835,5.434106211614777,5.443540423787719,5.452974635960662,5.462408848133604,5.471843060306546,5.481277272479489,5.490711484652431,5.500145696825373,5.509579908998316,5.519014121171258,5.5284483333442,5.537882545517143,5.547316757690085,5.556750969863027,5.566185182035969,5.575619394208912,5.585053606381854,5.594487818554796,5.603922030727739,5.613356242900681,5.622790455073623,5.632224667246566,5.641658879419508,5.65109309159245,5.660527303765393,5.669961515938335,5.6793957281112775,5.68882994028422,5.6982641524571624,5.7076983646301045,5.7171325768030465,5.7265667889759895,5.7360010011489315,5.745435213321874,5.7548694254948165,5.7643036376677586,5.773737849840701,5.7831720620136435,5.792606274186586,5.802040486359528,5.811474698532471,5.820908910705413,5.830343122878355,5.839777335051297,5.84921154722424,5.858645759397182,5.868079971570124,5.877514183743067,5.886948395916009,5.896382608088951,5.905816820261894,5.915251032434836,5.924685244607778,5.934119456780721,5.943553668953663,5.952987881126605,5.962422093299547,5.97185630547249,5.981290517645432,5.990724729818374,6.000158941991317,6.009593154164259,6.019027366337201,6.028461578510144,6.037895790683086,6.047330002856028,6.056764215028971,6.066198427201913,6.075632639374855,6.085066851547798,6.09450106372074,6.103935275893682,6.113369488066624,6.122803700239567,6.132237912412509,6.141672124585451,6.151106336758394,6.160540548931336,6.169974761104278,6.179408973277221,6.188843185450163,6.198277397623105,6.207711609796048,6.21714582196899,6.226580034141932,6.236014246314874,6.245448458487817,6.254882670660759,6.264316882833701,6.273751095006644,6.283185307179586,6.292619519352528,6.302053731525471,6.311487943698413,6.320922155871355,6.330356368044298,6.33979058021724,6.349224792390182,6.358659004563124,6.368093216736067,6.377527428909009,6.386961641081951,6.396395853254894,6.405830065427836,6.415264277600778,6.424698489773721,6.434132701946663,6.4435669141196055,6.453001126292548,6.4624353384654905,6.4718695506384325,6.4813037628113745,6.4907379749843175,6.5001721871572595,6.509606399330202,6.5190406115031445,6.528474823676087,6.537909035849029,6.5473432480219715,6.556777460194914,6.566211672367856,6.575645884540799,6.585080096713741,6.594514308886683,6.603948521059626,6.613382733232568,6.62281694540551,6.632251157578452,6.641685369751395,6.651119581924337,6.660553794097279,6.669988006270222,6.679422218443164,6.688856430616106,6.698290642789049,6.707724854961991,6.717159067134933,6.726593279307876,6.736027491480818,6.74546170365376,6.754895915826702,6.764330127999645,6.773764340172587,6.783198552345529,6.792632764518472,6.802066976691414,6.811501188864356,6.820935401037299,6.830369613210241,6.839803825383183,6.849238037556126,6.858672249729068,6.86810646190201,6.877540674074952,6.886974886247895,6.896409098420837,6.905843310593779,6.915277522766722,6.924711734939664,6.934145947112606,6.943580159285549,6.953014371458491,6.962448583631433,6.971882795804376,6.981317007977318,6.99075122015026,7.000185432323203,7.009619644496145,7.019053856669087,7.028488068842029,7.037922281014972,7.047356493187914,7.056790705360856,7.066224917533799,7.075659129706741,7.085093341879683,7.094527554052626,7.103961766225568,7.11339597839851,7.122830190571453,7.132264402744395,7.141698614917337,7.151132827090279,7.160567039263222,7.170001251436164,7.1794354636091064,7.188869675782049,7.198303887954991,7.2077381001279335,7.217172312300876,7.2266065244738185,7.2360407366467605,7.245474948819703,7.2549091609926455,7.2643433731655875,7.27377758533853,7.2832117975114725,7.292646009684415,7.302080221857357,7.3115144340302995,7.320948646203242,7.330382858376184,7.339817070549127,7.349251282722069,7.358685494895011,7.368119707067954,7.377553919240896,7.386988131413838,7.39642234358678,7.405856555759723,7.415290767932665,7.424724980105607,7.43415919227855,7.443593404451492,7.453027616624434,7.462461828797377,7.471896040970319,7.481330253143261,7.490764465316204,7.500198677489146,7.509632889662088,7.519067101835031,7.528501314007973,7.537935526180915,7.547369738353857,7.5568039505268,7.566238162699742,7.575672374872684,7.585106587045627,7.594540799218569,7.603975011391511,7.613409223564454,7.622843435737396,7.632277647910338,7.641711860083281,7.651146072256223,7.660580284429165,7.670014496602107,7.67944870877505,7.688882920947992,7.698317133120934,7.707751345293877,7.717185557466819,7.726619769639761,7.736053981812704,7.745488193985646,7.754922406158588,7.764356618331531,7.773790830504473,7.783225042677415,7.792659254850357,7.8020934670233,7.811527679196242,7.820961891369184,7.830396103542127,7.839830315715069,7.849264527888011,7.858698740060954,7.868132952233896,7.877567164406838,7.887001376579781,7.896435588752723,7.905869800925665,7.915304013098608,7.92473822527155,7.934172437444492,7.9436066496174345,7.953040861790377,7.962475073963319,7.9719092861362615,7.981343498309204,7.9907777104821465,8.000211922655089,8.009646134828031,8.019080347000973,8.028514559173916,8.037948771346858,8.0473829835198,8.056817195692743,8.066251407865686,8.075685620038627,8.08511983221157,8.094554044384513,8.103988256557454,8.113422468730397,8.12285668090334,8.13229089307628,8.141725105249224,8.151159317422167,8.160593529595108,8.17002774176805,8.179461953940994,8.188896166113935,8.198330378286878,8.20776459045982,8.217198802632762,8.226633014805705,8.236067226978648,8.245501439151589,8.254935651324532,8.264369863497473,8.273804075670416,8.283238287843359,8.2926725000163,8.302106712189243,8.311540924362186,8.320975136535127,8.33040934870807,8.339843560881013,8.349277773053954,8.358711985226897,8.36814619739984,8.377580409572781,8.387014621745724,8.396448833918667,8.405883046091608,8.415317258264551,8.424751470437494,8.434185682610435,8.443619894783378,8.453054106956321,8.462488319129262,8.471922531302205,8.481356743475148,8.49079095564809,8.500225167821032,8.509659379993973,8.519093592166916,8.52852780433986,8.5379620165128,8.547396228685743,8.556830440858686,8.566264653031627,8.57569886520457,8.585133077377513,8.594567289550454,8.604001501723397,8.61343571389634,8.622869926069281,8.632304138242224,8.641738350415167,8.651172562588108,8.660606774761051,8.670040986933994,8.679475199106935,8.688909411279878,8.698343623452821,8.707777835625762,8.717212047798705,8.726646259971648,8.73608047214459,8.745514684317532,8.754948896490475,8.764383108663417,8.77381732083636,8.7832515330093,8.792685745182244,8.802119957355186,8.811554169528128,8.82098838170107,8.830422593874014,8.839856806046955,8.849291018219898,8.85872523039284,8.868159442565782,8.877593654738725,8.887027866911668,8.896462079084609,8.905896291257552,8.915330503430495,8.924764715603436,8.934198927776379,8.943633139949322,8.953067352122263,8.962501564295206,8.971935776468149,8.98136998864109,8.990804200814033,9.000238412986976,9.009672625159917,9.01910683733286,9.028541049505803,9.037975261678744,9.047409473851687,9.056843686024628,9.066277898197571,9.075712110370514,9.085146322543455,9.094580534716398,9.10401474688934,9.113448959062282,9.122883171235225,9.132317383408168,9.141751595581109,9.151185807754052,9.160620019926995,9.170054232099936,9.179488444272879,9.188922656445822,9.198356868618763,9.207791080791706,9.217225292964649,9.22665950513759,9.236093717310533,9.245527929483476,9.254962141656417,9.26439635382936,9.273830566002303,9.283264778175244,9.292698990348187,9.302133202521128,9.311567414694071,9.321001626867014,9.330435839039955,9.339870051212898,9.349304263385841,9.358738475558782,9.368172687731725,9.377606899904668,9.38704111207761,9.396475324250552,9.405909536423495,9.415343748596436,9.42477796076938,9.434212172942322,9.443646385115263,9.453080597288206,9.46251480946115,9.47194902163409,9.481383233807033,9.490817445979976,9.500251658152917,9.50968587032586,9.519120082498803,9.528554294671745,9.537988506844687,9.54742271901763,9.556856931190572,9.566291143363514,9.575725355536456,9.585159567709399,9.594593779882342,9.604027992055283,9.613462204228226,9.622896416401169,9.63233062857411,9.641764840747053,9.651199052919996,9.660633265092937,9.67006747726588,9.679501689438823,9.688935901611764,9.698370113784707,9.70780432595765,9.71723853813059,9.726672750303534,9.736106962476477,9.745541174649418,9.75497538682236,9.764409598995304,9.773843811168245,9.783278023341188,9.79271223551413,9.802146447687072,9.811580659860015,9.821014872032956,9.830449084205899,9.839883296378842,9.849317508551783,9.858751720724726,9.868185932897669,9.87762014507061,9.887054357243553,9.896488569416496,9.905922781589437,9.91535699376238,9.924791205935323,9.934225418108264,9.943659630281207,9.95309384245415,9.962528054627091,9.971962266800034,9.981396478972977,9.990830691145918,10.000264903318861,10.009699115491804,10.019133327664745,10.028567539837688,10.038001752010631,10.047435964183572,10.056870176356515,10.066304388529458,10.0757386007024,10.085172812875342,10.094607025048283,10.104041237221226,10.11347544939417,10.12290966156711,10.132343873740053,10.141778085912996,10.151212298085937,10.16064651025888,10.170080722431823,10.179514934604764,10.188949146777707,10.19838335895065,10.207817571123591,10.217251783296534,10.226685995469477,10.236120207642418,10.245554419815361,10.254988631988304,10.264422844161246,10.273857056334188,10.283291268507131,10.292725480680073,10.302159692853015,10.311593905025958,10.3210281171989,10.330462329371843,10.339896541544785,10.349330753717727,10.35876496589067,10.36819917806361,10.377633390236554,10.387067602409497,10.396501814582438,10.40593602675538,10.415370238928324,10.424804451101265,10.434238663274208,10.44367287544715,10.453107087620092,10.462541299793035,10.471975511965978,10.481409724138919,10.490843936311862,10.500278148484805,10.509712360657746,10.519146572830689,10.528580785003632,10.538014997176573,10.547449209349516,10.556883421522459,10.5663176336954,10.575751845868343,10.585186058041286,10.594620270214227,10.60405448238717,10.613488694560111,10.622922906733054,10.632357118905997,10.641791331078938,10.651225543251881,10.660659755424824,10.670093967597765,10.679528179770708,10.688962391943651,10.698396604116592,10.707830816289535,10.717265028462478,10.72669924063542,10.736133452808362,10.745567664981305,10.755001877154246,10.764436089327189,10.773870301500132,10.783304513673073,10.792738725846016,10.802172938018959,10.8116071501919,10.821041362364843,10.830475574537786,10.839909786710727,10.84934399888367,10.858778211056613,10.868212423229554,10.877646635402497,10.887080847575438,10.896515059748381,10.905949271921324,10.915383484094265,10.924817696267208,10.934251908440151,10.943686120613092,10.953120332786035,10.962554544958978,10.97198875713192,10.981422969304862,10.990857181477805,11.000291393650746,11.00972560582369,11.019159817996632,11.028594030169574,11.038028242342516,11.04746245451546,11.0568966666884,11.066330878861343,11.075765091034286,11.085199303207228,11.09463351538017,11.104067727553113,11.113501939726055,11.122936151898998,11.132370364071939,11.141804576244882,11.151238788417825,11.160673000590766,11.170107212763709,11.179541424936652,11.188975637109593,11.198409849282536,11.207844061455479,11.21727827362842,11.226712485801363,11.236146697974306,11.245580910147247,11.25501512232019,11.264449334493133,11.273883546666074,11.283317758839017,11.29275197101196,11.3021861831849,11.311620395357844,11.321054607530787,11.330488819703728,11.33992303187667,11.349357244049614,11.358791456222555,11.368225668395498,11.37765988056844,11.387094092741382,11.396528304914325,11.405962517087266,11.415396729260209,11.424830941433152,11.434265153606093,11.443699365779036,11.453133577951979,11.46256779012492,11.472002002297863,11.481436214470806,11.490870426643747,11.50030463881669,11.509738850989633,11.519173063162574,11.528607275335517,11.53804148750846,11.547475699681401,11.556909911854344,11.566344124027287,11.575778336200228,11.585212548373171,11.594646760546114,11.604080972719055,11.613515184891998,11.622949397064941,11.632383609237882,11.641817821410825,11.651252033583766,11.66068624575671,11.670120457929652,11.679554670102593,11.688988882275536,11.69842309444848,11.70785730662142,11.717291518794363,11.726725730967306,11.736159943140247,11.74559415531319,11.755028367486133,11.764462579659074,11.773896791832017,11.78333100400496,11.792765216177902,11.802199428350844,11.811633640523787,11.821067852696729,11.830502064869671,11.839936277042614,11.849370489215556,11.858804701388499,11.868238913561441,11.877673125734383,11.887107337907326,11.896541550080268,11.90597576225321,11.915409974426153,11.924844186599094,11.934278398772037,11.94371261094498,11.95314682311792,11.962581035290864,11.972015247463807,11.981449459636748,11.99088367180969,12.000317883982634,12.009752096155575,12.019186308328518,12.02862052050146,12.038054732674402,12.047488944847345,12.056923157020288,12.066357369193229,12.075791581366172,12.085225793539115,12.094660005712056,12.104094217884999,12.113528430057942,12.122962642230883,12.132396854403826,12.141831066576769,12.15126527874971,12.160699490922653,12.170133703095596,12.179567915268537,12.18900212744148,12.198436339614421,12.207870551787364,12.217304763960307,12.226738976133248,12.236173188306191,12.245607400479134,12.255041612652075,12.264475824825018,12.273910036997961,12.283344249170902,12.292778461343845,12.302212673516788,12.31164688568973,12.321081097862672,12.330515310035615,12.339949522208556,12.3493837343815,12.358817946554442,12.368252158727383,12.377686370900326,12.38712058307327,12.39655479524621,12.405989007419153,12.415423219592096,12.424857431765037,12.43429164393798,12.443725856110921,12.453160068283864,12.462594280456807,12.472028492629748,12.481462704802691,12.490896916975634,12.500331129148575,12.509765341321518,12.519199553494461,12.528633765667402,12.538067977840345,12.547502190013288,12.55693640218623,12.566370614359172]}
},{}],91:[function(require,module,exports){
module.exports={"expected":[1.2246467991473532e-16,0.0031431745866930603,0.006286411280278005,0.009429772192557145,0.012573319445149415,0.01571711517440537,0.018861221536317876,0.022005700711440538,0.02515061490981026,0.028296026375870757,0.03144199739340585,0.03458859029047938,0.037735867444378145,0.040883891286569746,0.04403272430766292,0.04718242906238228,0.05033306817455383,0.05348470434209775,0.05663740034204025,0.05979121903553223,0.0629462233728865,0.06610247639863011,0.06926004125656864,0.07241898119487124,0.07557935957117343,0.07874123985769396,0.08190468564637782,0.08506976065405286,0.08823652872761226,0.09140505384921888,0.09457540014152849,0.09774763187294347,0.10092181346288474,0.10409800948709408,0.10727628468296306,0.11045670395488578,0.11363933237964427,0.11682423521182345,0.12001147788925233,0.12320112603848343,0.12639324548029807,0.1295879022352497,0.13278516252924188,0.13598509279913729,0.13918775969841016,0.14239323010282964,0.1456015711161864,0.14881285007605904,0.15202713455961675,0.15524449238947094,0.15846499163956293,0.16168870064110044,0.1649156879885395,0.16814602254560856,0.1713797734513843,0.17461701012641648,0.17785780227889786,0.18110221991089245,0.1843503333246091,0.1876022131287333,0.19085793024481398,0.1941175559137019,0.19738116170205205,0.20064881950887836,0.20392060157217268,0.20719658047558534,0.21047682915516433,0.21376142090616274,0.2170504293899118,0.22034392864075605,0.22364199307306437,0.22694469748830318,0.23025211708218646,0.23356432745189798,0.23688140460338372,0.24020342495872707,0.2435304653635946,0.24686260309476563,0.2501999158677428,0.2535424818444406,0.2568903796409625,0.2602436883354637,0.2636024874760972,0.266966857089056,0.2703368776866992,0.27371263027577664,0.2770941963657476,0.280481657977192,0.2838750976503273,0.28727459845361925,0.2906802439924994,0.2940921184181884,0.2975103064366205,0.30093489331748274,0.3043659649033639,0.30780360761901243,0.3112479084807175,0.31469895510579965,0.318156835722227,0.3216216391783537,0.325093454952778,0.32857237316433546,0.33205848458221393,0.33555188063620595,0.33905265342709606,0.3425608957371811,0.3460767010409349,0.3496001635158157,0.35313137805321504,0.3566704402695617,0.36021744651756976,0.36377249389764654,0.36733568026945695,0.3709071042636441,0.3744868652937202,0.3780750635681173,0.3816718001024125,0.3852771767317266,0.38889129612329476,0.39251426178922405,0.3961461780994279,0.39978715029475215,0.4034372845002926,0.407096687738902,0.4107654679449007,0.4144437339779894,0.4181315956373628,0.4218291636760421,0.42553654981541367,0.42925386675999183,0.4329812282124052,0.4367187488886047,0.4404665445333118,0.44422473193569567,0.4479934289452968,0.45177275448819654,0.4555628285834334,0.45936377235967996,0.46317570807218106,0.4669987591199531,0.470833050063263,0.4746787066413768,0.47853585579059593,0.48240462566258263,0.48628514564297387,0.4901775463703041,0.4940819597552262,0.4979985190000503,0.5019273586186026,0.5058686144564036,0.5098224237111846,0.5137889249537426,0.5177682581491362,0.5217605646782426,0.5257659873596673,0.5297846704720265,0.5338167597766063,0.5378624025403981,0.5419217475595354,0.5459949451831208,0.5500821473374665,0.5541835075507522,0.5582991809781019,0.5624293244271015,0.5665740963837581,0.5707336570389085,0.5749081683150967,0.5790977938939165,0.5833026992438417,0.5875230516485492,0.5917590202357397,0.5960107760064806,0.6002784918650671,0.6045623426494234,0.608862505162055,0.6131791582015529,0.6175124825946782,0.6218626612290304,0.626229879086308,0.6306143232761885,0.6350161830708246,0.6394356499399846,0.6438729175868451,0.6483281819844446,0.6528016414128288,0.657293496496883,0.661803950244884,0.6663332080877814,0.670881477919217,0.6754489701363174,0.680035897681255,0.684642476083614,0.6892689235035719,0.6939154607759096,0.6985823114548799,0.7032697018599514,0.7079778611224369,0.7127070212330476,0.717457417090373,0.7222292865503235,0.7270228704765542,0.7318384127918847,0.7366761605307555,0.7415363638927246,0.7464192762970483,0.751325154438362,0.7562542583434835,0.7612068514293774,0.7661832005623026,0.7711835761181631,0.7762082520441113,0.7812575059214101,0.786331619029606,0.7914308764120335,0.7965555669426808,0.8017059833944653,0.8068824225089335,0.8120851850674382,0.8173145759638234,0.8225709042786463,0.8278544833549903,0.8331656308758999,0.8385046689434743,0.8438719241596766,0.8492677277088829,0.8546924154422328,0.8601463279638206,0.8656298107187661,0.8711432140832343,0.8766868934564287,0.882261209354632,0.8878665275073373,0.8935032189555182,0.8991716601521097,0.9048722330647477,0.9106053252808232,0.9163713301149289,0.9221706467187402,0.928003680193415,0.9338708417045725,0.9397725485999117,0.945709224529562,0.9516812995692152,0.9576892103461364,0.9637334001681229,0.9698143191554852,0.9759324243761499,0.9820881799839613,0.9882820573602635,0.9945145352588768,1.0007860999545346,1.0070972453949045,1.0134484733562827,1.019840293603057,1.0262732240510728,1.0327477909349785,1.0392645289796967,1.0458239815761237,1.0524267009611745,1.059073248402322,1.0657641943867322,1.072500118815157,1.0792816112007113,1.086109270872674,1.0929837071854762,1.0999055397330249,1.106875398568512,1.1138939244298964,1.120961768971203,1.1280795949998395,1.1352480767201036,1.1424678999830609,1.1497397625430135,1.1570643743207347,1.1644424576737025,1.1718747476735405,1.1793619923908834,1.1869049531879192,1.1945044050188385,1.2021611367384346,1.2098759514191386,1.2176496666767282,1.2254831150050147,1.2333771441197892,1.2413326173123163,1.2493504138127154,1.2574314291635178,1.2655765756037642,1.2737867824639812,1.2820629965723833,1.2904061826727005,1.2988173238540097,1.3072974219929607,1.3158474982088482,1.3244685933319298,1.333161768385475,1.3419281050820018,1.3507687063341807,1.3596846967809464,1.3686772233293074,1.3777474557124385,1.386896587064614,1.3961258345135688,1.4054364397909287,1.414829669861346,1.4243068175709988,1.4338692023161852,1.4435181707327078,1.4532550974068321,1.4630813856086062,1.4729984680483466,1.4830078076571878,1.4931108983925474,1.5033092660694805,1.51360446921888,1.5239980999735305,1.5344917849831017,1.5450871863591775,1.5557860026514605,1.5665899698564005,1.5775008624594606,1.5885204945123794,1.5996507207467896,1.610893437725619,1.6222505850338185,1.633724146509942,1.6453161515202677,1.657028676277167,1.6688638452035067,1.6808238323450144,1.692910862832537,1.705127214396298,1.7174752189343152,1.7299572641372274,1.7425757951719516,1.7553333164266505,1.768232393319614,1.7812756541748498,1.7944657921672138,1.8078055673401567,1.8212978086992473,1.834945416384798,1.8487513639271496,1.8627187005882455,1.876850553793428,1.8911501316575128,1.9056207256094213,1.9202657131199172,1.935088560537192,1.9500928260352812,1.9652821626806418,1.9806603216223841,1.9962311554120746,2.011998621459264,2.027966785629239,2.044139825989938,2.0605220367152084,2.077117832152153,2.0939317510606252,2.1109684610334294,2.1282327631063054,2.1457295965672643,2.1634640439753716,2.1814413363997676,2.199666858890198,2.218146156191164,2.236884938712375,2.255889088769056,2.275164667106445,2.294717919723676,2.31455528501322,2.334683401233025,2.3551091143296023,2.3758394861314236,2.3968818029332497,2.418243584493327,2.439932593466815,2.461956845300299,2.4843246186139205,2.507044466099384,2.5301252259639844,2.5535760339528752,2.5774063359839112,2.601625901431822,2.6262448371009675,2.6512736019287084,2.6767230224643135,2.702604309171579,2.728929073606758,2.7557093465270968,2.782957596989384,2.8106867525021775,2.83891022030021,2.8676419098145236,2.8968962564175227,2.926688246528097,2.9570334441686126,2.987948019072661,3.0194487764502806,3.051553188525768,3.0842794279725068,3.117646403379274,3.1516737968934865,3.186382104198933,3.221792676998603,3.257927768187736,3.2948105799179173,3.332465314770466,3.370917230276277,3.4101926970402907,3.450319260751697,3.491325708386401,3.5332421389361177,3.5761000390294004,3.6199323638439296,3.664773623747083,3.710659977143617,3.757629330055464,3.805721443010159,3.8549780458714027,3.9054429613089514,3.957162237675687,4.010184292138884,4.064560065000878,4.12034318624313,4.177590155438408,4.236360536299846,4.296717167275296,4.358726389752335,4.422458295616377,4.487986996104052,4.555390914120175,4.624753102442533,4.696161590529379,4.769709762974714,4.845496773032787,4.923627995062552,5.0042155202337035,5.087378700398531,5.17324474567945,5.261949382065338,5.3536375761666095,5.448464335269573,5.546595591977959,5.648209184062524,5.753495941691404,5.862660896025758,5.975924625285932,6.0935247568832995,6.215717647144019,6.342780263612501,6.475012299023065,6.612738550901449,6.756311606569754,6.90611488028313,7.062566057580398,7.226121012002649,7.397278271526769,7.5765841268816265,7.764638492008884,7.962101649121801,8.169702038160084,8.388245284303855,8.618624699367354,8.861833545664451,9.118979417375943,9.391301178604452,9.680189004584303,9.987208210206825,10.314127728013794,10.662954329651818,11.035973989195455,11.435802189891398,11.865445514658614,12.328377587772696,12.82863342665565,13.370927629907094,13.960803735805595,14.604824783154752,15.310818974060945,16.08819996844068,16.948389672770812,17.905383943345303,18.976520929504797,20.18354211904889,21.55408499534105,23.123827035696625,24.939638650187625,27.0643461317528,29.58415299706576,32.62062830640075,36.350915545689865,41.043587094690366,47.126369333522845,55.324537425594414,66.97412456316799,84.83626600583433,115.6882937483857,181.79858433566187,424.2001891962562,-1272.6026630324427,-254.51927533943572,-141.3979676148268,-97.88912757116769,-74.8545427170721,-60.594638646673424,-50.89756857120848,-43.87526323825834,-38.55508090971839,-34.38498167838659,-31.028355843131948,-28.26827715064119,-25.95865240855287,-23.997492028494747,-22.31143507731498,-20.846362832747598,-19.56147810313893,-18.425443914226634,-17.413791668758005,-16.507137152461034,-15.689925130839129,-14.9495284127526,-14.275589863147264,-13.659534218949513,-13.094200692781403,-12.573562878762827,-12.092512679844997,-11.646691810776709,-11.232359088051208,-10.846284942428195,-10.485666854591663,-10.148061027161686,-9.831326768889893,-9.533580914789708,-9.253160231061074,-8.988590219177114,-8.738559083432186,-8.501895891636638,-8.277552161584767,-8.064586262330373,-7.862150140737915,-7.669477978717118,-7.485876461264564,-7.3107163946034115,-7.143425460846669,-6.983481933368,-6.830409207475848,-6.683771025605002,-6.54316729626683,-6.408230422365902,-6.278622067926618,-6.154030303349299,-6.034167078483848,-5.918765980427439,-5.807580239307721,-5.700380950632566,-5.596955487255774,-5.497106077774375,-5.400648531357064,-5.307411091703962,-5.217233405134793,-5.129965589762357,-5.0454673943841835,-4.963607437163109,-4.884262515403853,-4.807316978798352,-4.732662159433825,-4.660195852655101,-4.589821843565444,-4.52144947455252,-4.454993249751691,-4.390372472817624,-4.327510914777174,-4.266336509088802,-4.206781071343696,-4.1487800413162725,-4.092272245312337,-4.037199676975657,-3.983507294901644,-3.9311428355737,-3.880056640285595,-3.8302014948449816,-3.7815324809702227,-3.7340068383973906,-3.6875838368075105,-3.6422246567677328,-3.5978922789548258,-3.554551380996555,-3.512168241326666,-3.470710649503383,-3.4301478224901265,-3.390450326441025,-3.351590003573567,-3.3135399037464777,-3.2762742203933897,-3.2397682304921553,-3.2039982382763523,-3.1689415224195816,-3.1345762864451467,-3.100881612133641,-3.067837415719081,-3.0354244066808387,-3.003624048953635,-2.9724185243916796,-2.9417906983355646,-2.9117240871421104,-2.882202827547799,-2.8532116477461478,-2.8247358400681595,-2.796761235163175,-2.7692741775848315,-2.7422615026937285,-2.7157105147947003,-2.689608966432352,-2.663945038773936,-2.6387073230134885,-2.613884802735763,-2.589466837182622,-2.5654431453685067,-2.541803790995109,-2.518539168118748,-2.495639987526968,-2.4730972637837807,-2.4509023029055492,-2.4290466906319983,-2.4075222812590913,-2.386321187002604,-2.3654357678632283,-2.3448586219658063,-2.324582576347041,-2.3046006781675508,-2.284906186325666,-2.265492563451688,-2.2463534682626234,-2.2274827482586073,-2.2088744327433125,-2.1905227261517255,-2.172422001669587,-2.154566795129756,-2.1369517991715403,-2.1195718576499103,-2.1024219602821805,-2.085497237520493,-2.068792955639049,-2.0523045120256884,-2.0360274306679598,-2.0199573578243655,-2.004090057871996,-1.9884214093221977,-1.9729474009964278,-1.9576641283548015,-1.9425677899702893,-1.927654684141844,-1.9129212056401361,-1.8983638425798612,-1.883979173412925,-1.8697638640370742,-1.8557146650148564,-1.8418284088980097,-1.8281020076526566,-1.8145324501809008,-1.8011167999346298,-1.7878521926175626,-1.774735833971744,-1.7617649976448984,-1.748937023135201,-1.7362493138102293,-1.72369933499697,-1.711284612139936,-1.6990027290245784,-1.6868513260632922,-1.6748280986414807,-1.6629307955212214,-1.6511572173002118,-1.6395052149237708,-1.6279726882477819,-1.6165575846505507,-1.6052578976916496,-1.5940716658158938,-1.5829969711007001,-1.572031938045135,-1.5611747323990428,-1.5504235600307192,-1.5397766658316467,-1.5292323326568995,-1.5187888802998581,-1.5084446644999456,-1.4981980759821585,-1.4880475395271977,-1.4779915130710832,-1.4680284868331501,-1.4581569824714016,-1.4483755522642174,-1.4386827783174585,-1.429077271796063,-1.4195576721792427,-1.4101226465384522,-1.400770888837309,-1.3915011192526998,-1.3823120835163225,-1.3732025522759526,-1.3641713204757453,-1.3552172067549195,-1.3463390528641817,-1.337535723099292,-1.3288061037511802,-1.320149102572053,-1.3115636482569528,-1.3030486899402454,-1.294603196706543,-1.2862261571155742,-1.2779165787405475,-1.2696734877195537,-1.2614959283195883,-1.2533829625127748,-1.2453336695643946,-1.237347145632345,-1.229422503377646,-1.2215588715856573,-1.2137553947976476,-1.2060112329523993,-1.1983255610375243,-1.1906975687501873,-1.1831264601669407,-1.175611453422389,-1.1681517803964026,-1.1607466864096252,-1.153395429927011,-1.1460972822691482,-1.138851527331135,-1.1316574613087702,-1.1245143924318473,-1.117421640704326,-1.1103785376511872,-1.1033844260717593,-1.0964386597993363,-1.0895406034668869,-1.0826896322786888,-1.075885131787703,-1.069126497678526,-1.062413135555758,-1.0557444607376236,-1.0491198980547014,-1.0425388816536079,-1.0360008548055017,-1.02950526971926,-1.0230515873592054,-1.016639277267246,-1.0102678173893092,-1.0039366939059453,-0.9976454010669861,-0.9913934410301457,-0.9851803237034518,-0.9790055665914047,-0.9728686946447581,-0.9667692401138257,-0.960706742405213,-0.9546807479418864,-0.9486908100264827,-0.9427364887077788,-0.9368173506502286,-0.9309329690064914,-0.9250829232928692,-0.919266799267574,-0.913484188811754,-0.9077346898132004,-0.9020179060526711,-0.8963334470927554,-0.8906809281692201,-0.8850599700847653,-0.8794701991051364,-0.8739112468575203,-0.8683827502311792,-0.8628843512802529,-0.8574156971286837,-0.851976439877204,-0.8465662365123358,-0.8411847488173534,-0.8358316432851555,-0.8305065910330032,-0.825209267719074,-0.8199393534607894,-0.8146965327548674,-0.8094804943990644,-0.8042909314155564,-0.7991275409759259,-0.7939900243277132,-0.7888780867224905,-0.783791437345428,-0.7787297892463093,-0.7736928592719674,-0.7686803680001003,-0.76369203967444,-0.7587276021412364,-0.7537867867870298,-0.748869328477677,-0.7439749654986041,-0.7391034394962577,-0.734254495420722,-0.7294278814694798,-0.7246233490322862,-0.7198406526371331,-0.7150795498972744,-0.7103398014592929,-0.7056211709521784,-0.7009234249374012,-0.6962463328599503,-0.6915896670003214,-0.686953202427427,-0.6823367169524117,-0.6777399910833518,-0.6731628079808155,-0.6686049534142702,-0.6640662157193115,-0.6595463857557023,-0.655045256866197,-0.6505626248361389,-0.6460982878538098,-0.641652046471519,-0.6372237035674098,-0.632813064307974,-0.628419936111255,-0.6240441286107242,-0.6196854536198191,-0.6153437250971245,-0.6110187591121878,-0.6067103738119493,-0.6024183893877786,-0.5981426280431019,-0.5938829139616084,-0.5896390732760217,-0.5854109340374268,-0.5811983261851401,-0.5770010815171072,-0.5728190336608248,-0.5686520180447674,-0.5644998718703148,-0.560362434084165,-0.5562395453512261,-0.5521310480279749,-0.5480367861362727,-0.54395660533763,-0.5398903529079094,-0.5358378777124587,-0.5317990301816644,-0.5277736622869176,-0.523761627516984,-0.5197627808547685,-0.5157769787544683,-0.5118040791191041,-0.5078439412784245,-0.5038964259671737,-0.49996139530371575,-0.4960387127690097,-0.49212824318592585,-0.48822985269889857,-0.48434340875390774,-0.48046878007878246,-0.4766058366638208,-0.4727544497427191,-0.4689144917738045,-0.46508583642156487,-0.46126835853847065,-0.4574619341470817,-0.4536664404224347,-0.44988175567470473,-0.4461077593321364,-0.44234433192423833,-0.4385913550652364,-0.43484871143778087,-0.4311162847769017,-0.4273939598542079,-0.42368162246232555,-0.4199791593995706,-0.41628645845485124,-0.4126034083927953,-0.4089298989390992,-0.4052658207660929,-0.4016110654785179,-0.3979655255995133,-0.39432909455680615,-0.39070166666910244,-0.3870831371326745,-0.38347340200814123,-0.379872358207437,-0.37627990348096674,-0.3726959364049425,-0.36912035636889773,-0.3655530635633781,-0.36199395896780195,-0.35844294433849105,-0.3548999221968649,-0.3513647958177978,-0.34783746921813447,-0.3443178471453618,-0.3408058350664332,-0.3373013391567424,-0.33380426628924553,-0.3303145240237263,-0.32683202059620303,-0.3233566649084748,-0.3198883665178032,-0.3164270356267281,-0.3129725830730137,-0.3095249203197241,-0.3060839594454239,-0.3026496131345028,-0.2992217946676212,-0.2958004179122754,-0.29238539731347835,-0.2889766478845554,-0.285574085198052,-0.2821776253767517,-0.2787871850848014,-0.27540268151894276,-0.27202403239984757,-0.26865115596355416,-0.2652839709530039,-0.26192239660967565,-0.25856635266531536,-0.2552157593337607,-0.25187053730285663,-0.2485306077264623,-0.2451958922165454,-0.24186631283536436,-0.23854179208773466,-0.23522225291337887,-0.23190761867935838,-0.22859781317258465,-0.22529276059240952,-0.2219923855432916,-0.21869661302753823,-0.21540536843812105,-0.21211857755156363,-0.2088361665208995,-0.20555806186869996,-0.2022841904801688,-0.19901447959630375,-0.19574885680712278,-0.1924872500449536,-0.18922958757778535,-0.1859757980026812,-0.18272581023925005,-0.17947955352317654,-0.1762369573998078,-0.17299795171779553,-0.16976246662279262,-0.16653043255120273,-0.16330178022398129,-0.16007644064048762,-0.15685434507238608,-0.15363542505759542,-0.15041961239428533,-0.14720683913491883,-0.14399703758033924,-0.14079014027390102,-0.13758607999564293,-0.13438478975650273,-0.1311862027925721,-0.12799025255939106,-0.1247968727262803,-0.1216059971707108,-0.1184175599727096,-0.11523149540930065,-0.11204773794897967,-0.10886622224622218,-0.10568688313602354,-0.10250965562847004,-0.0993344749033403,-0.09616127630473553,-0.09298999533573818,-0.0898205676530978,-0.08665292906194315,-0.08348701551051964,-0.08032276308495129,-0.07716010800402616,-0.07399898661400428,-0.0708393353834475,-0.06768109089806988,-0.0645241898556081,-0.06136856906071092,-0.058214165419846635,-0.0550609159362279,-0.05190875770475283,-0.048757627906961656,-0.04560746380600805,-0.04245820274164418,-0.039309782125218656,-0.03616213943468673,-0.03301521220963146,-0.029868938046295496,-0.026723254592622273,-0.023578099543305947,-0.020433410634849193,-0.01728912564062804,-0.014145182365962903,-0.011001518643194973,-0.007858072326767176,-0.004714781288308818,-0.0015715834117231286,0.0015715834117231286,0.004714781288308818,0.007858072326767176,0.011001518643194973,0.014145182365962903,0.01728912564062804,0.020433410634849193,0.023578099543305947,0.026723254592622273,0.029868938046295496,0.03301521220963146,0.03616213943468673,0.039309782125218656,0.04245820274164418,0.04560746380600805,0.048757627906961656,0.05190875770475283,0.0550609159362279,0.058214165419846635,0.06136856906071092,0.0645241898556081,0.06768109089806988,0.0708393353834475,0.07399898661400428,0.07716010800402616,0.08032276308495129,0.08348701551051964,0.08665292906194315,0.0898205676530978,0.09298999533573818,0.09616127630473553,0.0993344749033403,0.10250965562847004,0.10568688313602354,0.10886622224622218,0.11204773794897967,0.11523149540930065,0.1184175599727096,0.1216059971707108,0.1247968727262803,0.12799025255939106,0.1311862027925721,0.13438478975650273,0.13758607999564293,0.14079014027390102,0.14399703758033924,0.14720683913491883,0.15041961239428533,0.15363542505759542,0.15685434507238608,0.16007644064048762,0.16330178022398129,0.16653043255120273,0.16976246662279262,0.17299795171779553,0.1762369573998078,0.17947955352317654,0.18272581023925005,0.1859757980026812,0.18922958757778535,0.1924872500449536,0.19574885680712278,0.19901447959630375,0.2022841904801688,0.20555806186869996,0.2088361665208995,0.21211857755156363,0.21540536843812105,0.21869661302753823,0.2219923855432916,0.22529276059240952,0.22859781317258465,0.23190761867935838,0.23522225291337887,0.23854179208773466,0.24186631283536436,0.2451958922165454,0.2485306077264623,0.25187053730285663,0.2552157593337607,0.25856635266531536,0.26192239660967565,0.2652839709530039,0.26865115596355416,0.27202403239984757,0.27540268151894276,0.2787871850848014,0.2821776253767517,0.285574085198052,0.2889766478845554,0.29238539731347835,0.2958004179122754,0.2992217946676212,0.3026496131345028,0.3060839594454239,0.3095249203197241,0.3129725830730137,0.3164270356267281,0.3198883665178032,0.3233566649084748,0.32683202059620303,0.3303145240237263,0.33380426628924553,0.3373013391567424,0.3408058350664332,0.3443178471453618,0.34783746921813447,0.3513647958177978,0.3548999221968649,0.35844294433849105,0.36199395896780195,0.3655530635633781,0.36912035636889773,0.3726959364049425,0.37627990348096674,0.379872358207437,0.38347340200814123,0.3870831371326745,0.39070166666910244,0.39432909455680615,0.3979655255995133,0.4016110654785179,0.4052658207660929,0.4089298989390992,0.4126034083927953,0.41628645845485124,0.4199791593995706,0.42368162246232555,0.4273939598542079,0.4311162847769017,0.43484871143778087,0.4385913550652364,0.44234433192423833,0.4461077593321364,0.44988175567470473,0.4536664404224347,0.4574619341470817,0.46126835853847065,0.46508583642156487,0.4689144917738045,0.4727544497427191,0.4766058366638208,0.48046878007878246,0.48434340875390774,0.48822985269889857,0.49212824318592585,0.4960387127690097,0.49996139530371575,0.5038964259671737,0.5078439412784245,0.5118040791191041,0.5157769787544683,0.5197627808547685,0.523761627516984,0.5277736622869176,0.5317990301816644,0.5358378777124587,0.5398903529079094,0.54395660533763,0.5480367861362727,0.5521310480279749,0.5562395453512261,0.560362434084165,0.5644998718703148,0.5686520180447674,0.5728190336608248,0.5770010815171072,0.5811983261851401,0.5854109340374268,0.5896390732760217,0.5938829139616084,0.5981426280431019,0.6024183893877786,0.6067103738119493,0.6110187591121878,0.6153437250971245,0.6196854536198191,0.6240441286107242,0.628419936111255,0.632813064307974,0.6372237035674098,0.641652046471519,0.6460982878538098,0.6505626248361389,0.655045256866197,0.6595463857557023,0.6640662157193115,0.6686049534142702,0.6731628079808155,0.6777399910833518,0.6823367169524117,0.686953202427427,0.6915896670003214,0.6962463328599503,0.7009234249374012,0.7056211709521784,0.7103398014592929,0.7150795498972744,0.7198406526371331,0.7246233490322862,0.7294278814694798,0.734254495420722,0.7391034394962577,0.7439749654986041,0.748869328477677,0.7537867867870298,0.7587276021412364,0.76369203967444,0.7686803680001003,0.7736928592719674,0.7787297892463093,0.783791437345428,0.7888780867224905,0.7939900243277132,0.7991275409759259,0.8042909314155564,0.8094804943990644,0.8146965327548674,0.8199393534607894,0.825209267719074,0.8305065910330032,0.8358316432851555,0.8411847488173534,0.8465662365123358,0.851976439877204,0.8574156971286837,0.8628843512802529,0.8683827502311792,0.8739112468575203,0.8794701991051364,0.8850599700847653,0.8906809281692201,0.8963334470927554,0.9020179060526711,0.9077346898132004,0.913484188811754,0.919266799267574,0.9250829232928692,0.9309329690064914,0.9368173506502286,0.9427364887077788,0.9486908100264827,0.9546807479418864,0.960706742405213,0.9667692401138257,0.9728686946447581,0.9790055665914047,0.9851803237034518,0.9913934410301457,0.9976454010669861,1.0039366939059453,1.0102678173893092,1.016639277267246,1.0230515873592054,1.02950526971926,1.0360008548055017,1.0425388816536079,1.0491198980547014,1.0557444607376236,1.062413135555758,1.069126497678526,1.075885131787703,1.0826896322786888,1.0895406034668869,1.0964386597993363,1.1033844260717593,1.1103785376511872,1.117421640704326,1.1245143924318473,1.1316574613087702,1.138851527331135,1.1460972822691482,1.153395429927011,1.1607466864096252,1.1681517803964026,1.175611453422389,1.1831264601669407,1.1906975687501873,1.1983255610375243,1.2060112329523993,1.2137553947976476,1.2215588715856573,1.229422503377646,1.237347145632345,1.2453336695643946,1.2533829625127748,1.2614959283195883,1.2696734877195537,1.2779165787405475,1.2862261571155742,1.294603196706543,1.3030486899402454,1.3115636482569528,1.320149102572053,1.3288061037511802,1.337535723099292,1.3463390528641817,1.3552172067549195,1.3641713204757453,1.3732025522759526,1.3823120835163225,1.3915011192526998,1.400770888837309,1.4101226465384522,1.4195576721792427,1.429077271796063,1.4386827783174585,1.4483755522642174,1.4581569824714016,1.4680284868331501,1.4779915130710832,1.4880475395271977,1.4981980759821585,1.5084446644999456,1.5187888802998581,1.5292323326568995,1.5397766658316467,1.5504235600307192,1.5611747323990428,1.572031938045135,1.5829969711007001,1.5940716658158938,1.6052578976916496,1.6165575846505507,1.6279726882477819,1.6395052149237708,1.6511572173002118,1.6629307955212214,1.6748280986414807,1.6868513260632922,1.6990027290245784,1.711284612139936,1.72369933499697,1.7362493138102293,1.748937023135201,1.7617649976448984,1.774735833971744,1.7878521926175626,1.8011167999346298,1.8145324501809008,1.8281020076526566,1.8418284088980097,1.8557146650148564,1.8697638640370742,1.883979173412925,1.8983638425798612,1.9129212056401361,1.927654684141844,1.9425677899702893,1.9576641283548015,1.9729474009964278,1.9884214093221977,2.004090057871996,2.0199573578243655,2.0360274306679598,2.0523045120256884,2.068792955639049,2.085497237520493,2.1024219602821805,2.1195718576499103,2.1369517991715403,2.154566795129756,2.172422001669587,2.1905227261517255,2.2088744327433125,2.2274827482586073,2.2463534682626234,2.265492563451688,2.284906186325666,2.3046006781675508,2.324582576347041,2.3448586219658063,2.3654357678632283,2.386321187002604,2.4075222812590913,2.4290466906319983,2.4509023029055492,2.4730972637837807,2.495639987526968,2.518539168118748,2.541803790995109,2.5654431453685067,2.589466837182622,2.613884802735763,2.6387073230134885,2.663945038773936,2.689608966432352,2.7157105147947003,2.7422615026937285,2.7692741775848315,2.796761235163175,2.8247358400681595,2.8532116477461478,2.882202827547799,2.9117240871421104,2.9417906983355646,2.9724185243916796,3.003624048953635,3.0354244066808387,3.067837415719081,3.100881612133641,3.1345762864451467,3.1689415224195816,3.2039982382763523,3.2397682304921553,3.2762742203933897,3.3135399037464777,3.351590003573567,3.390450326441025,3.4301478224901265,3.470710649503383,3.512168241326666,3.554551380996555,3.5978922789548258,3.6422246567677328,3.6875838368075105,3.7340068383973906,3.7815324809702227,3.8302014948449816,3.880056640285595,3.9311428355737,3.983507294901644,4.037199676975657,4.092272245312337,4.1487800413162725,4.206781071343696,4.266336509088802,4.327510914777174,4.390372472817624,4.454993249751691,4.52144947455252,4.589821843565444,4.660195852655101,4.732662159433825,4.807316978798352,4.884262515403853,4.963607437163109,5.0454673943841835,5.129965589762357,5.217233405134793,5.307411091703962,5.400648531357064,5.497106077774375,5.596955487255774,5.700380950632566,5.807580239307721,5.918765980427439,6.034167078483848,6.154030303349299,6.278622067926618,6.408230422365902,6.54316729626683,6.683771025605002,6.830409207475848,6.983481933368,7.143425460846669,7.3107163946034115,7.485876461264564,7.669477978717118,7.862150140737915,8.064586262330373,8.277552161584767,8.501895891636638,8.738559083432186,8.988590219177114,9.253160231061074,9.533580914789708,9.831326768889893,10.148061027161686,10.485666854591663,10.846284942428195,11.232359088051208,11.646691810776709,12.092512679844997,12.573562878762827,13.094200692781403,13.659534218949513,14.275589863147264,14.9495284127526,15.689925130839129,16.507137152461034,17.413791668758005,18.425443914226634,19.56147810313893,20.846362832747598,22.31143507731498,23.997492028494747,25.95865240855287,28.26827715064119,31.028355843131948,34.38498167838659,38.55508090971839,43.87526323825834,50.89756857120848,60.594638646673424,74.8545427170721,97.88912757116769,141.3979676148268,254.51927533943572,1272.6026630324427,-424.2001891962562,-181.79858433566187,-115.6882937483857,-84.83626600583433,-66.97412456316799,-55.324537425594414,-47.126369333522845,-41.043587094690366,-36.350915545689865,-32.62062830640075,-29.58415299706576,-27.0643461317528,-24.939638650187625,-23.123827035696625,-21.55408499534105,-20.18354211904889,-18.976520929504797,-17.905383943345303,-16.948389672770812,-16.08819996844068,-15.310818974060945,-14.604824783154752,-13.960803735805595,-13.370927629907094,-12.82863342665565,-12.328377587772696,-11.865445514658614,-11.435802189891398,-11.035973989195455,-10.662954329651818,-10.314127728013794,-9.987208210206825,-9.680189004584303,-9.391301178604452,-9.118979417375943,-8.861833545664451,-8.618624699367354,-8.388245284303855,-8.169702038160084,-7.962101649121801,-7.764638492008884,-7.5765841268816265,-7.397278271526769,-7.226121012002649,-7.062566057580398,-6.90611488028313,-6.756311606569754,-6.612738550901449,-6.475012299023065,-6.342780263612501,-6.215717647144019,-6.0935247568832995,-5.975924625285932,-5.862660896025758,-5.753495941691404,-5.648209184062524,-5.546595591977959,-5.448464335269573,-5.3536375761666095,-5.261949382065338,-5.17324474567945,-5.087378700398531,-5.0042155202337035,-4.923627995062552,-4.845496773032787,-4.769709762974714,-4.696161590529379,-4.624753102442533,-4.555390914120175,-4.487986996104052,-4.422458295616377,-4.358726389752335,-4.296717167275296,-4.236360536299846,-4.177590155438408,-4.12034318624313,-4.064560065000878,-4.010184292138884,-3.957162237675687,-3.9054429613089514,-3.8549780458714027,-3.805721443010159,-3.757629330055464,-3.710659977143617,-3.664773623747083,-3.6199323638439296,-3.5761000390294004,-3.5332421389361177,-3.491325708386401,-3.450319260751697,-3.4101926970402907,-3.370917230276277,-3.332465314770466,-3.2948105799179173,-3.257927768187736,-3.221792676998603,-3.186382104198933,-3.1516737968934865,-3.117646403379274,-3.0842794279725068,-3.051553188525768,-3.0194487764502806,-2.987948019072661,-2.9570334441686126,-2.926688246528097,-2.8968962564175227,-2.8676419098145236,-2.83891022030021,-2.8106867525021775,-2.782957596989384,-2.7557093465270968,-2.728929073606758,-2.702604309171579,-2.6767230224643135,-2.6512736019287084,-2.6262448371009675,-2.601625901431822,-2.5774063359839112,-2.5535760339528752,-2.5301252259639844,-2.507044466099384,-2.4843246186139205,-2.461956845300299,-2.439932593466815,-2.418243584493327,-2.3968818029332497,-2.3758394861314236,-2.3551091143296023,-2.334683401233025,-2.31455528501322,-2.294717919723676,-2.275164667106445,-2.255889088769056,-2.236884938712375,-2.218146156191164,-2.199666858890198,-2.1814413363997676,-2.1634640439753716,-2.1457295965672643,-2.1282327631063054,-2.1109684610334294,-2.0939317510606252,-2.077117832152153,-2.0605220367152084,-2.044139825989938,-2.027966785629239,-2.011998621459264,-1.9962311554120746,-1.9806603216223841,-1.9652821626806418,-1.9500928260352812,-1.935088560537192,-1.9202657131199172,-1.9056207256094213,-1.8911501316575128,-1.876850553793428,-1.8627187005882455,-1.8487513639271496,-1.834945416384798,-1.8212978086992473,-1.8078055673401567,-1.7944657921672138,-1.7812756541748498,-1.768232393319614,-1.7553333164266505,-1.7425757951719516,-1.7299572641372274,-1.7174752189343152,-1.705127214396298,-1.692910862832537,-1.6808238323450144,-1.6688638452035067,-1.657028676277167,-1.6453161515202677,-1.633724146509942,-1.6222505850338185,-1.610893437725619,-1.5996507207467896,-1.5885204945123794,-1.5775008624594606,-1.5665899698564005,-1.5557860026514605,-1.5450871863591775,-1.5344917849831017,-1.5239980999735305,-1.51360446921888,-1.5033092660694805,-1.4931108983925474,-1.4830078076571878,-1.4729984680483466,-1.4630813856086062,-1.4532550974068321,-1.4435181707327078,-1.4338692023161852,-1.4243068175709988,-1.414829669861346,-1.4054364397909287,-1.3961258345135688,-1.386896587064614,-1.3777474557124385,-1.3686772233293074,-1.3596846967809464,-1.3507687063341807,-1.3419281050820018,-1.333161768385475,-1.3244685933319298,-1.3158474982088482,-1.3072974219929607,-1.2988173238540097,-1.2904061826727005,-1.2820629965723833,-1.2737867824639812,-1.2655765756037642,-1.2574314291635178,-1.2493504138127154,-1.2413326173123163,-1.2333771441197892,-1.2254831150050147,-1.2176496666767282,-1.2098759514191386,-1.2021611367384346,-1.1945044050188385,-1.1869049531879192,-1.1793619923908834,-1.1718747476735405,-1.1644424576737025,-1.1570643743207347,-1.1497397625430135,-1.1424678999830609,-1.1352480767201036,-1.1280795949998395,-1.120961768971203,-1.1138939244298964,-1.106875398568512,-1.0999055397330249,-1.0929837071854762,-1.086109270872674,-1.0792816112007113,-1.072500118815157,-1.0657641943867322,-1.059073248402322,-1.0524267009611745,-1.0458239815761237,-1.0392645289796967,-1.0327477909349785,-1.0262732240510728,-1.019840293603057,-1.0134484733562827,-1.0070972453949045,-1.0007860999545346,-0.9945145352588768,-0.9882820573602635,-0.9820881799839613,-0.9759324243761499,-0.9698143191554852,-0.9637334001681229,-0.9576892103461364,-0.9516812995692152,-0.945709224529562,-0.9397725485999117,-0.9338708417045725,-0.928003680193415,-0.9221706467187402,-0.9163713301149289,-0.9106053252808232,-0.9048722330647477,-0.8991716601521097,-0.8935032189555182,-0.8878665275073373,-0.882261209354632,-0.8766868934564287,-0.8711432140832343,-0.8656298107187661,-0.8601463279638206,-0.8546924154422328,-0.8492677277088829,-0.8438719241596766,-0.8385046689434743,-0.8331656308758999,-0.8278544833549903,-0.8225709042786463,-0.8173145759638234,-0.8120851850674382,-0.8068824225089335,-0.8017059833944653,-0.7965555669426808,-0.7914308764120335,-0.786331619029606,-0.7812575059214101,-0.7762082520441113,-0.7711835761181631,-0.7661832005623026,-0.7612068514293774,-0.7562542583434835,-0.751325154438362,-0.7464192762970483,-0.7415363638927246,-0.7366761605307555,-0.7318384127918847,-0.7270228704765542,-0.7222292865503235,-0.717457417090373,-0.7127070212330476,-0.7079778611224369,-0.7032697018599514,-0.6985823114548799,-0.6939154607759096,-0.6892689235035719,-0.684642476083614,-0.680035897681255,-0.6754489701363174,-0.670881477919217,-0.6663332080877814,-0.661803950244884,-0.657293496496883,-0.6528016414128288,-0.6483281819844446,-0.6438729175868451,-0.6394356499399846,-0.6350161830708246,-0.6306143232761885,-0.626229879086308,-0.6218626612290304,-0.6175124825946782,-0.6131791582015529,-0.608862505162055,-0.6045623426494234,-0.6002784918650671,-0.5960107760064806,-0.5917590202357397,-0.5875230516485492,-0.5833026992438417,-0.5790977938939165,-0.5749081683150967,-0.5707336570389085,-0.5665740963837581,-0.5624293244271015,-0.5582991809781019,-0.5541835075507522,-0.5500821473374665,-0.5459949451831208,-0.5419217475595354,-0.5378624025403981,-0.5338167597766063,-0.5297846704720265,-0.5257659873596673,-0.5217605646782426,-0.5177682581491362,-0.5137889249537426,-0.5098224237111846,-0.5058686144564036,-0.5019273586186026,-0.4979985190000503,-0.4940819597552262,-0.4901775463703041,-0.48628514564297387,-0.48240462566258263,-0.47853585579059593,-0.4746787066413768,-0.470833050063263,-0.4669987591199531,-0.46317570807218106,-0.45936377235967996,-0.4555628285834334,-0.45177275448819654,-0.4479934289452968,-0.44422473193569567,-0.4404665445333118,-0.4367187488886047,-0.4329812282124052,-0.42925386675999183,-0.42553654981541367,-0.4218291636760421,-0.4181315956373628,-0.4144437339779894,-0.4107654679449007,-0.407096687738902,-0.4034372845002926,-0.39978715029475215,-0.3961461780994279,-0.39251426178922405,-0.38889129612329476,-0.3852771767317266,-0.3816718001024125,-0.3780750635681173,-0.3744868652937202,-0.3709071042636441,-0.36733568026945695,-0.36377249389764654,-0.36021744651756976,-0.3566704402695617,-0.35313137805321504,-0.3496001635158157,-0.3460767010409349,-0.3425608957371811,-0.33905265342709606,-0.33555188063620595,-0.33205848458221393,-0.32857237316433546,-0.325093454952778,-0.3216216391783537,-0.318156835722227,-0.31469895510579965,-0.3112479084807175,-0.30780360761901243,-0.3043659649033639,-0.30093489331748274,-0.2975103064366205,-0.2940921184181884,-0.2906802439924994,-0.28727459845361925,-0.2838750976503273,-0.280481657977192,-0.2770941963657476,-0.27371263027577664,-0.2703368776866992,-0.266966857089056,-0.2636024874760972,-0.2602436883354637,-0.2568903796409625,-0.2535424818444406,-0.2501999158677428,-0.24686260309476563,-0.2435304653635946,-0.24020342495872707,-0.23688140460338372,-0.23356432745189798,-0.23025211708218646,-0.22694469748830318,-0.22364199307306437,-0.22034392864075605,-0.2170504293899118,-0.21376142090616274,-0.21047682915516433,-0.20719658047558534,-0.20392060157217268,-0.20064881950887836,-0.19738116170205205,-0.1941175559137019,-0.19085793024481398,-0.1876022131287333,-0.1843503333246091,-0.18110221991089245,-0.17785780227889786,-0.17461701012641648,-0.1713797734513843,-0.16814602254560856,-0.1649156879885395,-0.16168870064110044,-0.15846499163956293,-0.15524449238947094,-0.15202713455961675,-0.14881285007605904,-0.1456015711161864,-0.14239323010282964,-0.13918775969841016,-0.13598509279913729,-0.13278516252924188,-0.1295879022352497,-0.12639324548029807,-0.12320112603848343,-0.12001147788925233,-0.11682423521182345,-0.11363933237964427,-0.11045670395488578,-0.10727628468296306,-0.10409800948709408,-0.10092181346288474,-0.09774763187294347,-0.09457540014152849,-0.09140505384921888,-0.08823652872761226,-0.08506976065405286,-0.08190468564637782,-0.07874123985769396,-0.07557935957117343,-0.07241898119487124,-0.06926004125656864,-0.06610247639863011,-0.0629462233728865,-0.05979121903553223,-0.05663740034204025,-0.05348470434209775,-0.05033306817455383,-0.04718242906238228,-0.04403272430766292,-0.040883891286569746,-0.037735867444378145,-0.03458859029047938,-0.03144199739340585,-0.028296026375870757,-0.02515061490981026,-0.022005700711440538,-0.018861221536317876,-0.01571711517440537,-0.012573319445149415,-0.009429772192557145,-0.006286411280278005,-0.0031431745866930603,-1.2246467991473532e-16],"x":[-3.141592653589793,-3.1384494893540853,-3.135306325118378,-3.13216316088267,-3.1290199966469627,-3.125876832411255,-3.122733668175547,-3.1195905039398397,-3.116447339704132,-3.113304175468424,-3.1101610112327167,-3.107017846997009,-3.1038746827613015,-3.1007315185255937,-3.097588354289886,-3.0944451900541785,-3.0913020258184707,-3.0881588615827633,-3.0850156973470555,-3.0818725331113477,-3.0787293688756403,-3.0755862046399325,-3.0724430404042247,-3.0692998761685173,-3.0661567119328095,-3.063013547697102,-3.0598703834613943,-3.0567272192256865,-3.053584054989979,-3.0504408907542713,-3.047297726518564,-3.044154562282856,-3.0410113980471483,-3.037868233811441,-3.034725069575733,-3.0315819053400253,-3.028438741104318,-3.02529557686861,-3.0221524126329027,-3.019009248397195,-3.015866084161487,-3.0127229199257797,-3.009579755690072,-3.0064365914543645,-3.0032934272186567,-3.000150262982949,-2.9970070987472415,-2.9938639345115337,-2.9907207702758263,-2.9875776060401185,-2.9844344418044106,-2.9812912775687033,-2.9781481133329955,-2.9750049490972876,-2.9718617848615803,-2.9687186206258724,-2.965575456390165,-2.9624322921544572,-2.9592891279187494,-2.956145963683042,-2.9530027994473342,-2.949859635211627,-2.946716470975919,-2.9435733067402112,-2.940430142504504,-2.937286978268796,-2.934143814033088,-2.931000649797381,-2.927857485561673,-2.9247143213259656,-2.921571157090258,-2.91842799285455,-2.9152848286188426,-2.912141664383135,-2.9089985001474274,-2.9058553359117196,-2.902712171676012,-2.8995690074403044,-2.8964258432045966,-2.893282678968889,-2.8901395147331814,-2.8869963504974736,-2.8838531862617662,-2.8807100220260584,-2.8775668577903506,-2.8744236935546432,-2.8712805293189354,-2.868137365083228,-2.86499420084752,-2.8618510366118124,-2.858707872376105,-2.855564708140397,-2.8524215439046894,-2.849278379668982,-2.846135215433274,-2.842992051197567,-2.839848886961859,-2.836705722726151,-2.833562558490444,-2.830419394254736,-2.8272762300190286,-2.824133065783321,-2.820989901547613,-2.8178467373119056,-2.814703573076198,-2.81156040884049,-2.8084172446047826,-2.8052740803690748,-2.8021309161333674,-2.7989877518976596,-2.7958445876619518,-2.7927014234262444,-2.7895582591905366,-2.786415094954829,-2.7832719307191214,-2.7801287664834136,-2.776985602247706,-2.7738424380119984,-2.770699273776291,-2.767556109540583,-2.7644129453048754,-2.761269781069168,-2.75812661683346,-2.7549834525977523,-2.751840288362045,-2.748697124126337,-2.74555395989063,-2.742410795654922,-2.739267631419214,-2.7361244671835068,-2.732981302947799,-2.7298381387120916,-2.7266949744763838,-2.723551810240676,-2.7204086460049686,-2.7172654817692607,-2.714122317533553,-2.7109791532978456,-2.7078359890621377,-2.7046928248264304,-2.7015496605907225,-2.6984064963550147,-2.6952633321193074,-2.6921201678835995,-2.688977003647892,-2.6858338394121843,-2.6826906751764765,-2.679547510940769,-2.6764043467050613,-2.6732611824693535,-2.670118018233646,-2.6669748539979383,-2.663831689762231,-2.660688525526523,-2.6575453612908153,-2.654402197055108,-2.6512590328194,-2.6481158685836927,-2.644972704347985,-2.641829540112277,-2.6386863758765697,-2.635543211640862,-2.632400047405154,-2.6292568831694467,-2.626113718933739,-2.6229705546980315,-2.6198273904623237,-2.616684226226616,-2.6135410619909085,-2.6103978977552007,-2.6072547335194933,-2.6041115692837855,-2.6009684050480777,-2.5978252408123703,-2.5946820765766625,-2.5915389123409547,-2.5883957481052473,-2.5852525838695395,-2.582109419633832,-2.5789662553981243,-2.5758230911624165,-2.572679926926709,-2.5695367626910013,-2.566393598455294,-2.563250434219586,-2.5601072699838783,-2.556964105748171,-2.553820941512463,-2.5506777772767557,-2.547534613041048,-2.54439144880534,-2.5412482845696327,-2.538105120333925,-2.534961956098217,-2.5318187918625097,-2.528675627626802,-2.5255324633910945,-2.5223892991553867,-2.519246134919679,-2.5161029706839715,-2.5129598064482637,-2.5098166422125563,-2.5066734779768485,-2.5035303137411407,-2.5003871495054333,-2.4972439852697255,-2.4941008210340176,-2.4909576567983103,-2.4878144925626025,-2.484671328326895,-2.4815281640911873,-2.4783849998554794,-2.475241835619772,-2.4720986713840643,-2.468955507148357,-2.465812342912649,-2.4626691786769412,-2.459526014441234,-2.456382850205526,-2.4532396859698182,-2.450096521734111,-2.446953357498403,-2.4438101932626957,-2.440667029026988,-2.43752386479128,-2.4343807005555727,-2.431237536319865,-2.4280943720841575,-2.4249512078484496,-2.421808043612742,-2.4186648793770344,-2.4155217151413266,-2.412378550905619,-2.4092353866699114,-2.4060922224342036,-2.4029490581984962,-2.3998058939627884,-2.3966627297270806,-2.3935195654913732,-2.3903764012556654,-2.387233237019958,-2.3840900727842502,-2.3809469085485424,-2.377803744312835,-2.374660580077127,-2.3715174158414194,-2.368374251605712,-2.365231087370004,-2.362087923134297,-2.358944758898589,-2.355801594662881,-2.352658430427174,-2.349515266191466,-2.3463721019557586,-2.343228937720051,-2.340085773484343,-2.3369426092486356,-2.333799445012928,-2.3306562807772204,-2.3275131165415126,-2.324369952305805,-2.3212267880700974,-2.3180836238343896,-2.3149404595986818,-2.3117972953629744,-2.3086541311272666,-2.305510966891559,-2.3023678026558514,-2.2992246384201436,-2.296081474184436,-2.2929383099487284,-2.289795145713021,-2.286651981477313,-2.2835088172416054,-2.280365653005898,-2.27722248877019,-2.2740793245344824,-2.270936160298775,-2.267792996063067,-2.26464983182736,-2.261506667591652,-2.258363503355944,-2.255220339120237,-2.252077174884529,-2.2489340106488216,-2.2457908464131138,-2.242647682177406,-2.2395045179416986,-2.2363613537059908,-2.233218189470283,-2.2300750252345756,-2.2269318609988678,-2.2237886967631604,-2.2206455325274526,-2.2175023682917447,-2.2143592040560374,-2.2112160398203295,-2.208072875584622,-2.2049297113489144,-2.2017865471132065,-2.198643382877499,-2.1955002186417913,-2.1923570544060835,-2.189213890170376,-2.1860707259346683,-2.182927561698961,-2.179784397463253,-2.1766412332275453,-2.173498068991838,-2.17035490475613,-2.1672117405204228,-2.164068576284715,-2.160925412049007,-2.1577822478132997,-2.154639083577592,-2.151495919341884,-2.1483527551061767,-2.145209590870469,-2.1420664266347615,-2.1389232623990537,-2.135780098163346,-2.1326369339276385,-2.1294937696919307,-2.1263506054562233,-2.1232074412205155,-2.1200642769848077,-2.1169211127491003,-2.1137779485133925,-2.110634784277685,-2.1074916200419773,-2.1043484558062695,-2.101205291570562,-2.0980621273348543,-2.0949189630991465,-2.091775798863439,-2.0886326346277313,-2.085489470392024,-2.082346306156316,-2.0792031419206083,-2.076059977684901,-2.072916813449193,-2.0697736492134857,-2.066630484977778,-2.06348732074207,-2.0603441565063627,-2.057200992270655,-2.054057828034947,-2.0509146637992397,-2.047771499563532,-2.0446283353278245,-2.0414851710921167,-2.038342006856409,-2.0351988426207015,-2.0320556783849937,-2.0289125141492863,-2.0257693499135785,-2.0226261856778707,-2.0194830214421633,-2.0163398572064555,-2.0131966929707477,-2.0100535287350403,-2.0069103644993325,-2.003767200263625,-2.0006240360279173,-1.9974808717922097,-1.994337707556502,-1.9911945433207943,-1.9880513790850867,-1.984908214849379,-1.9817650506136715,-1.9786218863779637,-1.975478722142256,-1.9723355579065485,-1.9691923936708409,-1.966049229435133,-1.9629060651994255,-1.9597629009637179,-1.9566197367280103,-1.9534765724923027,-1.9503334082565948,-1.9471902440208873,-1.9440470797851797,-1.940903915549472,-1.9377607513137642,-1.9346175870780566,-1.931474422842349,-1.9283312586066415,-1.9251880943709339,-1.922044930135226,-1.9189017658995184,-1.9157586016638108,-1.9126154374281032,-1.9094722731923954,-1.9063291089566878,-1.9031859447209802,-1.9000427804852726,-1.8968996162495648,-1.8937564520138572,-1.8906132877781496,-1.887470123542442,-1.8843269593067344,-1.8811837950710266,-1.878040630835319,-1.8748974665996114,-1.8717543023639038,-1.868611138128196,-1.8654679738924884,-1.8623248096567808,-1.8591816454210732,-1.8560384811853654,-1.8528953169496578,-1.8497521527139502,-1.8466089884782426,-1.843465824242535,-1.8403226600068272,-1.8371794957711196,-1.834036331535412,-1.8308931672997044,-1.8277500030639966,-1.824606838828289,-1.8214636745925814,-1.8183205103568738,-1.8151773461211662,-1.8120341818854584,-1.8088910176497508,-1.8057478534140432,-1.8026046891783356,-1.7994615249426278,-1.7963183607069202,-1.7931751964712126,-1.790032032235505,-1.7868888679997972,-1.7837457037640896,-1.780602539528382,-1.7774593752926744,-1.7743162110569668,-1.771173046821259,-1.7680298825855514,-1.7648867183498438,-1.7617435541141362,-1.7586003898784284,-1.7554572256427208,-1.7523140614070132,-1.7491708971713056,-1.7460277329355978,-1.7428845686998902,-1.7397414044641826,-1.736598240228475,-1.7334550759927674,-1.7303119117570596,-1.727168747521352,-1.7240255832856444,-1.7208824190499368,-1.717739254814229,-1.7145960905785214,-1.7114529263428138,-1.7083097621071062,-1.7051665978713986,-1.7020234336356908,-1.6988802693999832,-1.6957371051642756,-1.692593940928568,-1.6894507766928601,-1.6863076124571525,-1.683164448221445,-1.6800212839857374,-1.6768781197500295,-1.673734955514322,-1.6705917912786143,-1.6674486270429068,-1.6643054628071992,-1.6611622985714913,-1.6580191343357837,-1.6548759701000761,-1.6517328058643685,-1.6485896416286607,-1.6454464773929531,-1.6423033131572455,-1.639160148921538,-1.6360169846858301,-1.6328738204501225,-1.629730656214415,-1.6265874919787073,-1.6234443277429997,-1.620301163507292,-1.6171579992715843,-1.6140148350358767,-1.6108716708001691,-1.6077285065644613,-1.6045853423287537,-1.6014421780930461,-1.5982990138573385,-1.595155849621631,-1.592012685385923,-1.5888695211502155,-1.585726356914508,-1.5825831926788003,-1.5794400284430925,-1.576296864207385,-1.5731536999716773,-1.5700105357359697,-1.566867371500262,-1.5637242072645543,-1.5605810430288467,-1.557437878793139,-1.5542947145574315,-1.5511515503217237,-1.548008386086016,-1.5448652218503085,-1.541722057614601,-1.538578893378893,-1.5354357291431855,-1.532292564907478,-1.5291494006717703,-1.5260062364360625,-1.5228630722003549,-1.5197199079646473,-1.5165767437289397,-1.513433579493232,-1.5102904152575243,-1.5071472510218167,-1.504004086786109,-1.5008609225504015,-1.4977177583146937,-1.494574594078986,-1.4914314298432785,-1.4882882656075709,-1.4851451013718633,-1.4820019371361555,-1.4788587729004479,-1.4757156086647403,-1.4725724444290327,-1.4694292801933249,-1.4662861159576173,-1.4631429517219097,-1.459999787486202,-1.4568566232504943,-1.4537134590147867,-1.450570294779079,-1.4474271305433715,-1.4442839663076639,-1.441140802071956,-1.4379976378362485,-1.4348544736005409,-1.4317113093648333,-1.4285681451291254,-1.4254249808934178,-1.4222818166577103,-1.4191386524220027,-1.4159954881862948,-1.4128523239505872,-1.4097091597148796,-1.406565995479172,-1.4034228312434645,-1.4002796670077566,-1.397136502772049,-1.3939933385363414,-1.3908501743006338,-1.387707010064926,-1.3845638458292184,-1.3814206815935108,-1.3782775173578032,-1.3751343531220956,-1.3719911888863878,-1.3688480246506802,-1.3657048604149726,-1.362561696179265,-1.3594185319435572,-1.3562753677078496,-1.353132203472142,-1.3499890392364344,-1.3468458750007266,-1.343702710765019,-1.3405595465293114,-1.3374163822936038,-1.3342732180578962,-1.3311300538221884,-1.3279868895864808,-1.3248437253507732,-1.3217005611150656,-1.3185573968793578,-1.3154142326436502,-1.3122710684079426,-1.309127904172235,-1.3059847399365272,-1.3028415757008196,-1.299698411465112,-1.2965552472294044,-1.2934120829936968,-1.290268918757989,-1.2871257545222814,-1.2839825902865738,-1.2808394260508662,-1.2776962618151584,-1.2745530975794508,-1.2714099333437432,-1.2682667691080356,-1.265123604872328,-1.2619804406366202,-1.2588372764009126,-1.255694112165205,-1.2525509479294974,-1.2494077836937896,-1.246264619458082,-1.2431214552223744,-1.2399782909866668,-1.236835126750959,-1.2336919625152514,-1.2305487982795438,-1.2274056340438362,-1.2242624698081286,-1.2211193055724208,-1.2179761413367132,-1.2148329771010056,-1.211689812865298,-1.2085466486295902,-1.2054034843938826,-1.202260320158175,-1.1991171559224674,-1.1959739916867596,-1.192830827451052,-1.1896876632153444,-1.1865444989796368,-1.1834013347439292,-1.1802581705082213,-1.1771150062725138,-1.1739718420368062,-1.1708286778010986,-1.1676855135653907,-1.1645423493296831,-1.1613991850939756,-1.158256020858268,-1.1551128566225604,-1.1519696923868525,-1.148826528151145,-1.1456833639154373,-1.1425401996797298,-1.139397035444022,-1.1362538712083143,-1.1331107069726067,-1.1299675427368991,-1.1268243785011913,-1.1236812142654837,-1.1205380500297761,-1.1173948857940685,-1.114251721558361,-1.1111085573226531,-1.1079653930869455,-1.104822228851238,-1.1016790646155303,-1.0985359003798225,-1.095392736144115,-1.0922495719084073,-1.0891064076726997,-1.085963243436992,-1.0828200792012843,-1.0796769149655767,-1.0765337507298691,-1.0733905864941615,-1.0702474222584537,-1.067104258022746,-1.0639610937870385,-1.060817929551331,-1.057674765315623,-1.0545316010799155,-1.051388436844208,-1.0482452726085003,-1.0451021083727927,-1.041958944137085,-1.0388157799013773,-1.0356726156656697,-1.032529451429962,-1.0293862871942543,-1.0262431229585467,-1.023099958722839,-1.0199567944871315,-1.0168136302514237,-1.013670466015716,-1.0105273017800085,-1.007384137544301,-1.0042409733085933,-1.0010978090728855,-0.9979546448371779,-0.9948114806014703,-0.9916683163657626,-0.988525152130055,-0.9853819878943473,-0.9822388236586397,-0.979095659422932,-0.9759524951872244,-0.9728093309515168,-0.9696661667158091,-0.9665230024801015,-0.9633798382443938,-0.9602366740086862,-0.9570935097729785,-0.9539503455372709,-0.9508071813015632,-0.9476640170658556,-0.9445208528301479,-0.9413776885944403,-0.9382345243587326,-0.935091360123025,-0.9319481958873174,-0.9288050316516097,-0.9256618674159021,-0.9225187031801944,-0.9193755389444868,-0.916232374708779,-0.9130892104730715,-0.9099460462373637,-0.9068028820016562,-0.9036597177659484,-0.9005165535302408,-0.8973733892945333,-0.8942302250588255,-0.891087060823118,-0.8879438965874102,-0.8848007323517026,-0.8816575681159949,-0.8785144038802873,-0.8753712396445796,-0.872228075408872,-0.8690849111731643,-0.8659417469374567,-0.8627985827017491,-0.8596554184660414,-0.8565122542303338,-0.8533690899946261,-0.8502259257589185,-0.8470827615232108,-0.8439395972875032,-0.8407964330517955,-0.8376532688160879,-0.8345101045803802,-0.8313669403446726,-0.8282237761089649,-0.8250806118732573,-0.8219374476375497,-0.818794283401842,-0.8156511191661344,-0.8125079549304267,-0.8093647906947191,-0.8062216264590114,-0.8030784622233038,-0.7999352979875961,-0.7967921337518885,-0.7936489695161808,-0.7905058052804732,-0.7873626410447656,-0.7842194768090579,-0.7810763125733503,-0.7779331483376426,-0.774789984101935,-0.7716468198662273,-0.7685036556305197,-0.765360491394812,-0.7622173271591044,-0.7590741629233967,-0.7559309986876891,-0.7527878344519815,-0.7496446702162738,-0.7465015059805662,-0.7433583417448585,-0.7402151775091509,-0.7370720132734432,-0.7339288490377356,-0.7307856848020279,-0.7276425205663203,-0.7244993563306126,-0.721356192094905,-0.7182130278591973,-0.7150698636234897,-0.7119266993877821,-0.7087835351520744,-0.7056403709163668,-0.7024972066806591,-0.6993540424449515,-0.6962108782092438,-0.6930677139735362,-0.6899245497378285,-0.6867813855021209,-0.6836382212664132,-0.6804950570307056,-0.677351892794998,-0.6742087285592903,-0.6710655643235827,-0.667922400087875,-0.6647792358521674,-0.6616360716164597,-0.6584929073807521,-0.6553497431450444,-0.6522065789093368,-0.649063414673629,-0.6459202504379215,-0.6427770862022139,-0.6396339219665061,-0.6364907577307986,-0.6333475934950908,-0.6302044292593832,-0.6270612650236755,-0.6239181007879679,-0.6207749365522602,-0.6176317723165526,-0.6144886080808449,-0.6113454438451373,-0.6082022796094296,-0.605059115373722,-0.6019159511380144,-0.5987727869023067,-0.5956296226665991,-0.5924864584308914,-0.5893432941951838,-0.5862001299594761,-0.5830569657237685,-0.5799138014880608,-0.5767706372523532,-0.5736274730166455,-0.5704843087809379,-0.5673411445452303,-0.5641979803095226,-0.561054816073815,-0.5579116518381073,-0.5547684876023997,-0.551625323366692,-0.5484821591309844,-0.5453389948952767,-0.5421958306595691,-0.5390526664238614,-0.5359095021881538,-0.5327663379524462,-0.5296231737167385,-0.5264800094810309,-0.5233368452453232,-0.5201936810096156,-0.5170505167739079,-0.5139073525382003,-0.5107641883024926,-0.507621024066785,-0.5044778598310773,-0.5013346955953697,-0.49819153135966204,-0.4950483671239544,-0.49190520288824674,-0.4887620386525391,-0.48561887441683144,-0.4824757101811238,-0.47933254594541613,-0.47618938170970854,-0.4730462174740009,-0.46990305323829323,-0.4667598890025856,-0.46361672476687793,-0.4604735605311703,-0.4573303962954626,-0.454187232059755,-0.4510440678240473,-0.44790090358833967,-0.444757739352632,-0.44161457511692437,-0.43847141088121677,-0.4353282466455091,-0.43218508240980147,-0.4290419181740938,-0.42589875393838617,-0.4227555897026785,-0.41961242546697086,-0.4164692612312632,-0.41332609699555556,-0.4101829327598479,-0.40703976852414026,-0.40389660428843266,-0.400753440052725,-0.39761027581701736,-0.3944671115813097,-0.39132394734560205,-0.3881807831098944,-0.38503761887418675,-0.3818944546384791,-0.37875129040277145,-0.3756081261670638,-0.37246496193135614,-0.3693217976956485,-0.3661786334599409,-0.36303546922423324,-0.3598923049885256,-0.35674914075281794,-0.3536059765171103,-0.35046281228140264,-0.347319648045695,-0.34417648380998733,-0.3410333195742797,-0.33789015533857203,-0.3347469911028644,-0.3316038268671567,-0.32846066263144913,-0.3253174983957415,-0.3221743341600338,-0.3190311699243262,-0.3158880056886185,-0.31274484145291087,-0.3096016772172032,-0.30645851298149557,-0.3033153487457879,-0.30017218451008026,-0.2970290202743726,-0.293885856038665,-0.29074269180295736,-0.2875995275672497,-0.28445636333154206,-0.2813131990958344,-0.27817003486012676,-0.2750268706244191,-0.27188370638871145,-0.2687405421530038,-0.26559737791729615,-0.2624542136815885,-0.25931104944588085,-0.25616788521017325,-0.2530247209744656,-0.24988155673875792,-0.2467383925030503,-0.24359522826734265,-0.240452064031635,-0.23730889979592734,-0.2341657355602197,-0.23102257132451204,-0.22787940708880441,-0.22473624285309676,-0.2215930786173891,-0.21844991438168146,-0.2153067501459738,-0.21216358591026616,-0.20902042167455853,-0.20587725743885088,-0.20273409320314323,-0.19959092896743558,-0.19644776473172793,-0.19330460049602027,-0.19016143626031265,-0.187018272024605,-0.18387510778889735,-0.1807319435531897,-0.17758877931748204,-0.17444561508177442,-0.17130245084606677,-0.16815928661035912,-0.16501612237465146,-0.1618729581389438,-0.15872979390323616,-0.15558662966752854,-0.15244346543182088,-0.14930030119611323,-0.14615713696040558,-0.14301397272469793,-0.13987080848899028,-0.13672764425328265,-0.133584480017575,-0.13044131578186735,-0.1272981515461597,-0.12415498731045205,-0.12101182307474441,-0.11786865883903676,-0.11472549460332912,-0.11158233036762147,-0.10843916613191382,-0.10529600189620618,-0.10215283766049853,-0.09900967342479088,-0.09586650918908324,-0.09272334495337559,-0.08958018071766793,-0.0864370164819603,-0.08329385224625264,-0.080150688010545,-0.07700752377483736,-0.0738643595391297,-0.07072119530342205,-0.06757803106771441,-0.06443486683200676,-0.06129170259629912,-0.058148538360591466,-0.05500537412488382,-0.051862209889176177,-0.048719045653468525,-0.04557588141776088,-0.042432717182053235,-0.039289552946345584,-0.03614638871063794,-0.033003224474930294,-0.029860060239222646,-0.026716896003514998,-0.023573731767807353,-0.020430567532099705,-0.017287403296392057,-0.014144239060684412,-0.011001074824976764,-0.007857910589269117,-0.004714746353561471,-0.0015715821178538235,0.0015715821178538235,0.004714746353561471,0.007857910589269117,0.011001074824976764,0.014144239060684412,0.017287403296392057,0.020430567532099705,0.023573731767807353,0.026716896003514998,0.029860060239222646,0.033003224474930294,0.03614638871063794,0.039289552946345584,0.042432717182053235,0.04557588141776088,0.048719045653468525,0.051862209889176177,0.05500537412488382,0.058148538360591466,0.06129170259629912,0.06443486683200676,0.06757803106771441,0.07072119530342205,0.0738643595391297,0.07700752377483736,0.080150688010545,0.08329385224625264,0.0864370164819603,0.08958018071766793,0.09272334495337559,0.09586650918908324,0.09900967342479088,0.10215283766049853,0.10529600189620618,0.10843916613191382,0.11158233036762147,0.11472549460332912,0.11786865883903676,0.12101182307474441,0.12415498731045205,0.1272981515461597,0.13044131578186735,0.133584480017575,0.13672764425328265,0.13987080848899028,0.14301397272469793,0.14615713696040558,0.14930030119611323,0.15244346543182088,0.15558662966752854,0.15872979390323616,0.1618729581389438,0.16501612237465146,0.16815928661035912,0.17130245084606677,0.17444561508177442,0.17758877931748204,0.1807319435531897,0.18387510778889735,0.187018272024605,0.19016143626031265,0.19330460049602027,0.19644776473172793,0.19959092896743558,0.20273409320314323,0.20587725743885088,0.20902042167455853,0.21216358591026616,0.2153067501459738,0.21844991438168146,0.2215930786173891,0.22473624285309676,0.22787940708880441,0.23102257132451204,0.2341657355602197,0.23730889979592734,0.240452064031635,0.24359522826734265,0.2467383925030503,0.24988155673875792,0.2530247209744656,0.25616788521017325,0.25931104944588085,0.2624542136815885,0.26559737791729615,0.2687405421530038,0.27188370638871145,0.2750268706244191,0.27817003486012676,0.2813131990958344,0.28445636333154206,0.2875995275672497,0.29074269180295736,0.293885856038665,0.2970290202743726,0.30017218451008026,0.3033153487457879,0.30645851298149557,0.3096016772172032,0.31274484145291087,0.3158880056886185,0.3190311699243262,0.3221743341600338,0.3253174983957415,0.32846066263144913,0.3316038268671567,0.3347469911028644,0.33789015533857203,0.3410333195742797,0.34417648380998733,0.347319648045695,0.35046281228140264,0.3536059765171103,0.35674914075281794,0.3598923049885256,0.36303546922423324,0.3661786334599409,0.3693217976956485,0.37246496193135614,0.3756081261670638,0.37875129040277145,0.3818944546384791,0.38503761887418675,0.3881807831098944,0.39132394734560205,0.3944671115813097,0.39761027581701736,0.400753440052725,0.40389660428843266,0.40703976852414026,0.4101829327598479,0.41332609699555556,0.4164692612312632,0.41961242546697086,0.4227555897026785,0.42589875393838617,0.4290419181740938,0.43218508240980147,0.4353282466455091,0.43847141088121677,0.44161457511692437,0.444757739352632,0.44790090358833967,0.4510440678240473,0.454187232059755,0.4573303962954626,0.4604735605311703,0.46361672476687793,0.4667598890025856,0.46990305323829323,0.4730462174740009,0.47618938170970854,0.47933254594541613,0.4824757101811238,0.48561887441683144,0.4887620386525391,0.49190520288824674,0.4950483671239544,0.49819153135966204,0.5013346955953697,0.5044778598310773,0.507621024066785,0.5107641883024926,0.5139073525382003,0.5170505167739079,0.5201936810096156,0.5233368452453232,0.5264800094810309,0.5296231737167385,0.5327663379524462,0.5359095021881538,0.5390526664238614,0.5421958306595691,0.5453389948952767,0.5484821591309844,0.551625323366692,0.5547684876023997,0.5579116518381073,0.561054816073815,0.5641979803095226,0.5673411445452303,0.5704843087809379,0.5736274730166455,0.5767706372523532,0.5799138014880608,0.5830569657237685,0.5862001299594761,0.5893432941951838,0.5924864584308914,0.5956296226665991,0.5987727869023067,0.6019159511380144,0.605059115373722,0.6082022796094296,0.6113454438451373,0.6144886080808449,0.6176317723165526,0.6207749365522602,0.6239181007879679,0.6270612650236755,0.6302044292593832,0.6333475934950908,0.6364907577307986,0.6396339219665061,0.6427770862022139,0.6459202504379215,0.649063414673629,0.6522065789093368,0.6553497431450444,0.6584929073807521,0.6616360716164597,0.6647792358521674,0.667922400087875,0.6710655643235827,0.6742087285592903,0.677351892794998,0.6804950570307056,0.6836382212664132,0.6867813855021209,0.6899245497378285,0.6930677139735362,0.6962108782092438,0.6993540424449515,0.7024972066806591,0.7056403709163668,0.7087835351520744,0.7119266993877821,0.7150698636234897,0.7182130278591973,0.721356192094905,0.7244993563306126,0.7276425205663203,0.7307856848020279,0.7339288490377356,0.7370720132734432,0.7402151775091509,0.7433583417448585,0.7465015059805662,0.7496446702162738,0.7527878344519815,0.7559309986876891,0.7590741629233967,0.7622173271591044,0.765360491394812,0.7685036556305197,0.7716468198662273,0.774789984101935,0.7779331483376426,0.7810763125733503,0.7842194768090579,0.7873626410447656,0.7905058052804732,0.7936489695161808,0.7967921337518885,0.7999352979875961,0.8030784622233038,0.8062216264590114,0.8093647906947191,0.8125079549304267,0.8156511191661344,0.818794283401842,0.8219374476375497,0.8250806118732573,0.8282237761089649,0.8313669403446726,0.8345101045803802,0.8376532688160879,0.8407964330517955,0.8439395972875032,0.8470827615232108,0.8502259257589185,0.8533690899946261,0.8565122542303338,0.8596554184660414,0.8627985827017491,0.8659417469374567,0.8690849111731643,0.872228075408872,0.8753712396445796,0.8785144038802873,0.8816575681159949,0.8848007323517026,0.8879438965874102,0.891087060823118,0.8942302250588255,0.8973733892945333,0.9005165535302408,0.9036597177659484,0.9068028820016562,0.9099460462373637,0.9130892104730715,0.916232374708779,0.9193755389444868,0.9225187031801944,0.9256618674159021,0.9288050316516097,0.9319481958873174,0.935091360123025,0.9382345243587326,0.9413776885944403,0.9445208528301479,0.9476640170658556,0.9508071813015632,0.9539503455372709,0.9570935097729785,0.9602366740086862,0.9633798382443938,0.9665230024801015,0.9696661667158091,0.9728093309515168,0.9759524951872244,0.979095659422932,0.9822388236586397,0.9853819878943473,0.988525152130055,0.9916683163657626,0.9948114806014703,0.9979546448371779,1.0010978090728855,1.0042409733085933,1.007384137544301,1.0105273017800085,1.013670466015716,1.0168136302514237,1.0199567944871315,1.023099958722839,1.0262431229585467,1.0293862871942543,1.032529451429962,1.0356726156656697,1.0388157799013773,1.041958944137085,1.0451021083727927,1.0482452726085003,1.051388436844208,1.0545316010799155,1.057674765315623,1.060817929551331,1.0639610937870385,1.067104258022746,1.0702474222584537,1.0733905864941615,1.0765337507298691,1.0796769149655767,1.0828200792012843,1.085963243436992,1.0891064076726997,1.0922495719084073,1.095392736144115,1.0985359003798225,1.1016790646155303,1.104822228851238,1.1079653930869455,1.1111085573226531,1.114251721558361,1.1173948857940685,1.1205380500297761,1.1236812142654837,1.1268243785011913,1.1299675427368991,1.1331107069726067,1.1362538712083143,1.139397035444022,1.1425401996797298,1.1456833639154373,1.148826528151145,1.1519696923868525,1.1551128566225604,1.158256020858268,1.1613991850939756,1.1645423493296831,1.1676855135653907,1.1708286778010986,1.1739718420368062,1.1771150062725138,1.1802581705082213,1.1834013347439292,1.1865444989796368,1.1896876632153444,1.192830827451052,1.1959739916867596,1.1991171559224674,1.202260320158175,1.2054034843938826,1.2085466486295902,1.211689812865298,1.2148329771010056,1.2179761413367132,1.2211193055724208,1.2242624698081286,1.2274056340438362,1.2305487982795438,1.2336919625152514,1.236835126750959,1.2399782909866668,1.2431214552223744,1.246264619458082,1.2494077836937896,1.2525509479294974,1.255694112165205,1.2588372764009126,1.2619804406366202,1.265123604872328,1.2682667691080356,1.2714099333437432,1.2745530975794508,1.2776962618151584,1.2808394260508662,1.2839825902865738,1.2871257545222814,1.290268918757989,1.2934120829936968,1.2965552472294044,1.299698411465112,1.3028415757008196,1.3059847399365272,1.309127904172235,1.3122710684079426,1.3154142326436502,1.3185573968793578,1.3217005611150656,1.3248437253507732,1.3279868895864808,1.3311300538221884,1.3342732180578962,1.3374163822936038,1.3405595465293114,1.343702710765019,1.3468458750007266,1.3499890392364344,1.353132203472142,1.3562753677078496,1.3594185319435572,1.362561696179265,1.3657048604149726,1.3688480246506802,1.3719911888863878,1.3751343531220956,1.3782775173578032,1.3814206815935108,1.3845638458292184,1.387707010064926,1.3908501743006338,1.3939933385363414,1.397136502772049,1.4002796670077566,1.4034228312434645,1.406565995479172,1.4097091597148796,1.4128523239505872,1.4159954881862948,1.4191386524220027,1.4222818166577103,1.4254249808934178,1.4285681451291254,1.4317113093648333,1.4348544736005409,1.4379976378362485,1.441140802071956,1.4442839663076639,1.4474271305433715,1.450570294779079,1.4537134590147867,1.4568566232504943,1.459999787486202,1.4631429517219097,1.4662861159576173,1.4694292801933249,1.4725724444290327,1.4757156086647403,1.4788587729004479,1.4820019371361555,1.4851451013718633,1.4882882656075709,1.4914314298432785,1.494574594078986,1.4977177583146937,1.5008609225504015,1.504004086786109,1.5071472510218167,1.5102904152575243,1.513433579493232,1.5165767437289397,1.5197199079646473,1.5228630722003549,1.5260062364360625,1.5291494006717703,1.532292564907478,1.5354357291431855,1.538578893378893,1.541722057614601,1.5448652218503085,1.548008386086016,1.5511515503217237,1.5542947145574315,1.557437878793139,1.5605810430288467,1.5637242072645543,1.566867371500262,1.5700105357359697,1.5731536999716773,1.576296864207385,1.5794400284430925,1.5825831926788003,1.585726356914508,1.5888695211502155,1.592012685385923,1.595155849621631,1.5982990138573385,1.6014421780930461,1.6045853423287537,1.6077285065644613,1.6108716708001691,1.6140148350358767,1.6171579992715843,1.620301163507292,1.6234443277429997,1.6265874919787073,1.629730656214415,1.6328738204501225,1.6360169846858301,1.639160148921538,1.6423033131572455,1.6454464773929531,1.6485896416286607,1.6517328058643685,1.6548759701000761,1.6580191343357837,1.6611622985714913,1.6643054628071992,1.6674486270429068,1.6705917912786143,1.673734955514322,1.6768781197500295,1.6800212839857374,1.683164448221445,1.6863076124571525,1.6894507766928601,1.692593940928568,1.6957371051642756,1.6988802693999832,1.7020234336356908,1.7051665978713986,1.7083097621071062,1.7114529263428138,1.7145960905785214,1.717739254814229,1.7208824190499368,1.7240255832856444,1.727168747521352,1.7303119117570596,1.7334550759927674,1.736598240228475,1.7397414044641826,1.7428845686998902,1.7460277329355978,1.7491708971713056,1.7523140614070132,1.7554572256427208,1.7586003898784284,1.7617435541141362,1.7648867183498438,1.7680298825855514,1.771173046821259,1.7743162110569668,1.7774593752926744,1.780602539528382,1.7837457037640896,1.7868888679997972,1.790032032235505,1.7931751964712126,1.7963183607069202,1.7994615249426278,1.8026046891783356,1.8057478534140432,1.8088910176497508,1.8120341818854584,1.8151773461211662,1.8183205103568738,1.8214636745925814,1.824606838828289,1.8277500030639966,1.8308931672997044,1.834036331535412,1.8371794957711196,1.8403226600068272,1.843465824242535,1.8466089884782426,1.8497521527139502,1.8528953169496578,1.8560384811853654,1.8591816454210732,1.8623248096567808,1.8654679738924884,1.868611138128196,1.8717543023639038,1.8748974665996114,1.878040630835319,1.8811837950710266,1.8843269593067344,1.887470123542442,1.8906132877781496,1.8937564520138572,1.8968996162495648,1.9000427804852726,1.9031859447209802,1.9063291089566878,1.9094722731923954,1.9126154374281032,1.9157586016638108,1.9189017658995184,1.922044930135226,1.9251880943709339,1.9283312586066415,1.931474422842349,1.9346175870780566,1.9377607513137642,1.940903915549472,1.9440470797851797,1.9471902440208873,1.9503334082565948,1.9534765724923027,1.9566197367280103,1.9597629009637179,1.9629060651994255,1.966049229435133,1.9691923936708409,1.9723355579065485,1.975478722142256,1.9786218863779637,1.9817650506136715,1.984908214849379,1.9880513790850867,1.9911945433207943,1.994337707556502,1.9974808717922097,2.0006240360279173,2.003767200263625,2.0069103644993325,2.0100535287350403,2.0131966929707477,2.0163398572064555,2.0194830214421633,2.0226261856778707,2.0257693499135785,2.0289125141492863,2.0320556783849937,2.0351988426207015,2.038342006856409,2.0414851710921167,2.0446283353278245,2.047771499563532,2.0509146637992397,2.054057828034947,2.057200992270655,2.0603441565063627,2.06348732074207,2.066630484977778,2.0697736492134857,2.072916813449193,2.076059977684901,2.0792031419206083,2.082346306156316,2.085489470392024,2.0886326346277313,2.091775798863439,2.0949189630991465,2.0980621273348543,2.101205291570562,2.1043484558062695,2.1074916200419773,2.110634784277685,2.1137779485133925,2.1169211127491003,2.1200642769848077,2.1232074412205155,2.1263506054562233,2.1294937696919307,2.1326369339276385,2.135780098163346,2.1389232623990537,2.1420664266347615,2.145209590870469,2.1483527551061767,2.151495919341884,2.154639083577592,2.1577822478132997,2.160925412049007,2.164068576284715,2.1672117405204228,2.17035490475613,2.173498068991838,2.1766412332275453,2.179784397463253,2.182927561698961,2.1860707259346683,2.189213890170376,2.1923570544060835,2.1955002186417913,2.198643382877499,2.2017865471132065,2.2049297113489144,2.208072875584622,2.2112160398203295,2.2143592040560374,2.2175023682917447,2.2206455325274526,2.2237886967631604,2.2269318609988678,2.2300750252345756,2.233218189470283,2.2363613537059908,2.2395045179416986,2.242647682177406,2.2457908464131138,2.2489340106488216,2.252077174884529,2.255220339120237,2.258363503355944,2.261506667591652,2.26464983182736,2.267792996063067,2.270936160298775,2.2740793245344824,2.27722248877019,2.280365653005898,2.2835088172416054,2.286651981477313,2.289795145713021,2.2929383099487284,2.296081474184436,2.2992246384201436,2.3023678026558514,2.305510966891559,2.3086541311272666,2.3117972953629744,2.3149404595986818,2.3180836238343896,2.3212267880700974,2.324369952305805,2.3275131165415126,2.3306562807772204,2.333799445012928,2.3369426092486356,2.340085773484343,2.343228937720051,2.3463721019557586,2.349515266191466,2.352658430427174,2.355801594662881,2.358944758898589,2.362087923134297,2.365231087370004,2.368374251605712,2.3715174158414194,2.374660580077127,2.377803744312835,2.3809469085485424,2.3840900727842502,2.387233237019958,2.3903764012556654,2.3935195654913732,2.3966627297270806,2.3998058939627884,2.4029490581984962,2.4060922224342036,2.4092353866699114,2.412378550905619,2.4155217151413266,2.4186648793770344,2.421808043612742,2.4249512078484496,2.4280943720841575,2.431237536319865,2.4343807005555727,2.43752386479128,2.440667029026988,2.4438101932626957,2.446953357498403,2.450096521734111,2.4532396859698182,2.456382850205526,2.459526014441234,2.4626691786769412,2.465812342912649,2.468955507148357,2.4720986713840643,2.475241835619772,2.4783849998554794,2.4815281640911873,2.484671328326895,2.4878144925626025,2.4909576567983103,2.4941008210340176,2.4972439852697255,2.5003871495054333,2.5035303137411407,2.5066734779768485,2.5098166422125563,2.5129598064482637,2.5161029706839715,2.519246134919679,2.5223892991553867,2.5255324633910945,2.528675627626802,2.5318187918625097,2.534961956098217,2.538105120333925,2.5412482845696327,2.54439144880534,2.547534613041048,2.5506777772767557,2.553820941512463,2.556964105748171,2.5601072699838783,2.563250434219586,2.566393598455294,2.5695367626910013,2.572679926926709,2.5758230911624165,2.5789662553981243,2.582109419633832,2.5852525838695395,2.5883957481052473,2.5915389123409547,2.5946820765766625,2.5978252408123703,2.6009684050480777,2.6041115692837855,2.6072547335194933,2.6103978977552007,2.6135410619909085,2.616684226226616,2.6198273904623237,2.6229705546980315,2.626113718933739,2.6292568831694467,2.632400047405154,2.635543211640862,2.6386863758765697,2.641829540112277,2.644972704347985,2.6481158685836927,2.6512590328194,2.654402197055108,2.6575453612908153,2.660688525526523,2.663831689762231,2.6669748539979383,2.670118018233646,2.6732611824693535,2.6764043467050613,2.679547510940769,2.6826906751764765,2.6858338394121843,2.688977003647892,2.6921201678835995,2.6952633321193074,2.6984064963550147,2.7015496605907225,2.7046928248264304,2.7078359890621377,2.7109791532978456,2.714122317533553,2.7172654817692607,2.7204086460049686,2.723551810240676,2.7266949744763838,2.7298381387120916,2.732981302947799,2.7361244671835068,2.739267631419214,2.742410795654922,2.74555395989063,2.748697124126337,2.751840288362045,2.7549834525977523,2.75812661683346,2.761269781069168,2.7644129453048754,2.767556109540583,2.770699273776291,2.7738424380119984,2.776985602247706,2.7801287664834136,2.7832719307191214,2.786415094954829,2.7895582591905366,2.7927014234262444,2.7958445876619518,2.7989877518976596,2.8021309161333674,2.8052740803690748,2.8084172446047826,2.81156040884049,2.814703573076198,2.8178467373119056,2.820989901547613,2.824133065783321,2.8272762300190286,2.830419394254736,2.833562558490444,2.836705722726151,2.839848886961859,2.842992051197567,2.846135215433274,2.849278379668982,2.8524215439046894,2.855564708140397,2.858707872376105,2.8618510366118124,2.86499420084752,2.868137365083228,2.8712805293189354,2.8744236935546432,2.8775668577903506,2.8807100220260584,2.8838531862617662,2.8869963504974736,2.8901395147331814,2.893282678968889,2.8964258432045966,2.8995690074403044,2.902712171676012,2.9058553359117196,2.9089985001474274,2.912141664383135,2.9152848286188426,2.91842799285455,2.921571157090258,2.9247143213259656,2.927857485561673,2.931000649797381,2.934143814033088,2.937286978268796,2.940430142504504,2.9435733067402112,2.946716470975919,2.949859635211627,2.9530027994473342,2.956145963683042,2.9592891279187494,2.9624322921544572,2.965575456390165,2.9687186206258724,2.9718617848615803,2.9750049490972876,2.9781481133329955,2.9812912775687033,2.9844344418044106,2.9875776060401185,2.9907207702758263,2.9938639345115337,2.9970070987472415,3.000150262982949,3.0032934272186567,3.0064365914543645,3.009579755690072,3.0127229199257797,3.015866084161487,3.019009248397195,3.0221524126329027,3.02529557686861,3.028438741104318,3.0315819053400253,3.034725069575733,3.037868233811441,3.0410113980471483,3.044154562282856,3.047297726518564,3.0504408907542713,3.053584054989979,3.0567272192256865,3.0598703834613943,3.063013547697102,3.0661567119328095,3.0692998761685173,3.0724430404042247,3.0755862046399325,3.0787293688756403,3.0818725331113477,3.0850156973470555,3.0881588615827633,3.0913020258184707,3.0944451900541785,3.097588354289886,3.1007315185255937,3.1038746827613015,3.107017846997009,3.1101610112327167,3.113304175468424,3.116447339704132,3.1195905039398397,3.122733668175547,3.125876832411255,3.1290199966469627,3.13216316088267,3.135306325118378,3.1384494893540853,3.141592653589793]}
},{}],92:[function(require,module,exports){
module.exports={"expected":[1.0e-309,9.9799599198397e-310,9.95991983967936e-310,9.93987975951903e-310,9.9198396793587e-310,9.89979959919837e-310,9.87975951903804e-310,9.8597194388777e-310,9.8396793587174e-310,9.81963927855705e-310,9.7995991983967e-310,9.7795591182364e-310,9.75951903807605e-310,9.7394789579157e-310,9.7194388777554e-310,9.69939879759506e-310,9.67935871743473e-310,9.6593186372744e-310,9.63927855711407e-310,9.61923847695374e-310,9.5991983967934e-310,9.5791583166331e-310,9.55911823647275e-310,9.5390781563124e-310,9.5190380761521e-310,9.49899799599176e-310,9.47895791583143e-310,9.4589178356711e-310,9.43887775551077e-310,9.41883767535044e-310,9.3987975951901e-310,9.3787575150298e-310,9.35871743486945e-310,9.3386773547091e-310,9.3186372745488e-310,9.29859719438846e-310,9.27855711422813e-310,9.2585170340678e-310,9.23847695390746e-310,9.21843687374713e-310,9.1983967935868e-310,9.17835671342647e-310,9.15831663326614e-310,9.1382765531058e-310,9.1182364729455e-310,9.09819639278515e-310,9.0781563126248e-310,9.0581162324645e-310,9.03807615230416e-310,9.01803607214383e-310,8.9979959919835e-310,8.97795591182317e-310,8.95791583166284e-310,8.9378757515025e-310,8.9178356713422e-310,8.89779559118185e-310,8.8777555110215e-310,8.8577154308612e-310,8.83767535070086e-310,8.81763527054053e-310,8.7975951903802e-310,8.77755511021987e-310,8.75751503005954e-310,8.7374749498992e-310,8.71743486973887e-310,8.69739478957854e-310,8.6773547094182e-310,8.6573146292579e-310,8.63727454909755e-310,8.6172344689372e-310,8.5971943887769e-310,8.57715430861656e-310,8.55711422845623e-310,8.5370741482959e-310,8.51703406813557e-310,8.49699398797524e-310,8.4769539078149e-310,8.4569138276546e-310,8.43687374749425e-310,8.4168336673339e-310,8.3967935871736e-310,8.37675350701326e-310,8.35671342685293e-310,8.3366733466926e-310,8.31663326653227e-310,8.29659318637194e-310,8.2765531062116e-310,8.2565130260513e-310,8.23647294589095e-310,8.2164328657306e-310,8.1963927855703e-310,8.17635270540995e-310,8.1563126252496e-310,8.1362725450893e-310,8.11623246492896e-310,8.09619238476863e-310,8.0761523046083e-310,8.05611222444797e-310,8.03607214428764e-310,8.0160320641273e-310,7.995991983967e-310,7.97595190380665e-310,7.9559118236463e-310,7.935871743486e-310,7.91583166332566e-310,7.89579158316533e-310,7.875751503005e-310,7.85571142284467e-310,7.83567134268434e-310,7.815631262524e-310,7.7955911823637e-310,7.77555110220335e-310,7.755511022043e-310,7.7354709418827e-310,7.71543086172236e-310,7.69539078156202e-310,7.6753507014017e-310,7.65531062124136e-310,7.63527054108103e-310,7.6152304609207e-310,7.59519038076037e-310,7.57515030060004e-310,7.5551102204397e-310,7.5350701402794e-310,7.51503006011905e-310,7.4949899799587e-310,7.4749498997984e-310,7.45490981963806e-310,7.43486973947773e-310,7.4148296593174e-310,7.39478957915707e-310,7.37474949899674e-310,7.3547094188364e-310,7.3346693386761e-310,7.31462925851575e-310,7.2945891783554e-310,7.2745490981951e-310,7.25450901803476e-310,7.23446893787443e-310,7.2144288577141e-310,7.19438877755377e-310,7.17434869739343e-310,7.1543086172331e-310,7.13426853707277e-310,7.11422845691244e-310,7.0941883767521e-310,7.0741482965918e-310,7.05410821643145e-310,7.0340681362711e-310,7.0140280561108e-310,6.99398797595046e-310,6.97394789579013e-310,6.9539078156298e-310,6.93386773546947e-310,6.91382765530914e-310,6.8937875751488e-310,6.8737474949885e-310,6.85370741482815e-310,6.8336673346678e-310,6.8136272545075e-310,6.79358717434716e-310,6.77354709418683e-310,6.7535070140265e-310,6.73346693386617e-310,6.71342685370584e-310,6.6933867735455e-310,6.6733466933852e-310,6.65330661322485e-310,6.6332665330645e-310,6.6132264529042e-310,6.59318637274385e-310,6.5731462925835e-310,6.5531062124232e-310,6.53306613226286e-310,6.51302605210253e-310,6.4929859719422e-310,6.47294589178187e-310,6.45290581162154e-310,6.4328657314612e-310,6.4128256513009e-310,6.39278557114055e-310,6.3727454909802e-310,6.3527054108199e-310,6.33266533065956e-310,6.31262525049923e-310,6.2925851703389e-310,6.27254509017857e-310,6.25250501001824e-310,6.2324649298579e-310,6.2124248496976e-310,6.19238476953725e-310,6.1723446893769e-310,6.1523046092166e-310,6.13226452905626e-310,6.11222444889592e-310,6.0921843687356e-310,6.07214428857526e-310,6.05210420841493e-310,6.0320641282546e-310,6.01202404809427e-310,5.99198396793394e-310,5.9719438877736e-310,5.9519038076133e-310,5.93186372745295e-310,5.9118236472926e-310,5.8917835671323e-310,5.87174348697196e-310,5.85170340681163e-310,5.8316633266513e-310,5.81162324649097e-310,5.79158316633064e-310,5.7715430861703e-310,5.75150300601e-310,5.73146292584965e-310,5.7114228456893e-310,5.691382765529e-310,5.67134268536866e-310,5.65130260520833e-310,5.631262525048e-310,5.61122244488767e-310,5.59118236472733e-310,5.571142284567e-310,5.55110220440667e-310,5.53106212424634e-310,5.511022044086e-310,5.4909819639257e-310,5.47094188376535e-310,5.450901803605e-310,5.4308617234447e-310,5.41082164328436e-310,5.39078156312403e-310,5.3707414829637e-310,5.35070140280337e-310,5.33066132264304e-310,5.3106212424827e-310,5.2905811623224e-310,5.27054108216205e-310,5.2505010020017e-310,5.2304609218414e-310,5.21042084168106e-310,5.19038076152073e-310,5.1703406813604e-310,5.15030060120007e-310,5.13026052103974e-310,5.1102204408794e-310,5.09018036071908e-310,5.07014028055874e-310,5.0501002003984e-310,5.0300601202381e-310,5.01002004007775e-310,4.9899799599174e-310,4.9699398797571e-310,4.94989979959676e-310,4.92985971943643e-310,4.9098196392761e-310,4.88977955911577e-310,4.86973947895544e-310,4.8496993987951e-310,4.8296593186348e-310,4.80961923847445e-310,4.7895791583141e-310,4.7695390781538e-310,4.74949899799346e-310,4.72945891783313e-310,4.7094188376728e-310,4.68937875751247e-310,4.66933867735214e-310,4.6492985971918e-310,4.6292585170315e-310,4.60921843687115e-310,4.5891783567108e-310,4.5691382765505e-310,4.54909819639015e-310,4.5290581162298e-310,4.5090180360695e-310,4.48897795590916e-310,4.46893787574883e-310,4.4488977955885e-310,4.42885771542817e-310,4.40881763526784e-310,4.3887775551075e-310,4.3687374749472e-310,4.34869739478685e-310,4.3286573146265e-310,4.3086172344662e-310,4.28857715430586e-310,4.26853707414553e-310,4.2484969939852e-310,4.22845691382487e-310,4.20841683366454e-310,4.1883767535042e-310,4.1683366733439e-310,4.14829659318355e-310,4.1282565130232e-310,4.1082164328629e-310,4.08817635270256e-310,4.06813627254223e-310,4.0480961923819e-310,4.02805611222156e-310,4.00801603206123e-310,3.9879759519009e-310,3.96793587174057e-310,3.94789579158024e-310,3.9278557114199e-310,3.9078156312596e-310,3.88777555109925e-310,3.8677354709389e-310,3.8476953907786e-310,3.82765531061826e-310,3.80761523045793e-310,3.7875751502976e-310,3.76753507013727e-310,3.74749498997694e-310,3.7274549098166e-310,3.7074148296563e-310,3.68737474949595e-310,3.6673346693356e-310,3.6472945891753e-310,3.62725450901496e-310,3.60721442885463e-310,3.5871743486943e-310,3.56713426853397e-310,3.54709418837364e-310,3.5270541082133e-310,3.50701402805298e-310,3.48697394789264e-310,3.4669338677323e-310,3.446893787572e-310,3.42685370741165e-310,3.4068136272513e-310,3.386773547091e-310,3.36673346693066e-310,3.34669338677033e-310,3.32665330661e-310,3.30661322644967e-310,3.28657314628934e-310,3.266533066129e-310,3.2464929859687e-310,3.22645290580835e-310,3.206412825648e-310,3.1863727454877e-310,3.16633266532736e-310,3.14629258516703e-310,3.1262525050067e-310,3.10621242484637e-310,3.08617234468604e-310,3.0661322645257e-310,3.0460921843654e-310,3.02605210420505e-310,3.0060120240447e-310,2.9859719438844e-310,2.96593186372405e-310,2.9458917835637e-310,2.9258517034034e-310,2.90581162324306e-310,2.88577154308273e-310,2.8657314629224e-310,2.84569138276207e-310,2.82565130260174e-310,2.8056112224414e-310,2.7855711422811e-310,2.76553106212075e-310,2.7454909819604e-310,2.7254509018001e-310,2.70541082163976e-310,2.68537074147943e-310,2.6653306613191e-310,2.64529058115877e-310,2.62525050099844e-310,2.6052104208381e-310,2.5851703406778e-310,2.56513026051745e-310,2.5450901803571e-310,2.5250501001968e-310,2.50501002003646e-310,2.48496993987613e-310,2.4649298597158e-310,2.44488977955546e-310,2.42484969939513e-310,2.4048096192348e-310,2.38476953907447e-310,2.36472945891414e-310,2.3446893787538e-310,2.3246492985935e-310,2.30460921843315e-310,2.2845691382728e-310,2.2645290581125e-310,2.24448897795216e-310,2.22444889779183e-310,2.2044088176315e-310,2.18436873747117e-310,2.16432865731084e-310,2.1442885771505e-310,2.1242484969902e-310,2.10420841682985e-310,2.0841683366695e-310,2.0641282565092e-310,2.04408817634886e-310,2.02404809618853e-310,2.0040080160282e-310,1.98396793586787e-310,1.96392785570754e-310,1.9438877755472e-310,1.92384769538687e-310,1.90380761522654e-310,1.8837675350662e-310,1.8637274549059e-310,1.84368737474555e-310,1.8236472945852e-310,1.8036072144249e-310,1.78356713426456e-310,1.76352705410423e-310,1.7434869739439e-310,1.72344689378357e-310,1.70340681362324e-310,1.6833667334629e-310,1.6633266533026e-310,1.64328657314225e-310,1.6232464929819e-310,1.6032064128216e-310,1.58316633266126e-310,1.56312625250093e-310,1.5430861723406e-310,1.52304609218027e-310,1.50300601201994e-310,1.4829659318596e-310,1.4629258516993e-310,1.44288577153895e-310,1.4228456913786e-310,1.4028056112183e-310,1.38276553105795e-310,1.3627254508976e-310,1.3426853707373e-310,1.32264529057696e-310,1.30260521041663e-310,1.2825651302563e-310,1.26252505009597e-310,1.24248496993564e-310,1.2224448897753e-310,1.202404809615e-310,1.18236472945465e-310,1.1623246492943e-310,1.142284569134e-310,1.12224448897366e-310,1.10220440881333e-310,1.082164328653e-310,1.06212424849267e-310,1.04208416833234e-310,1.022044088172e-310,1.0020040080117e-310,9.8196392785135e-311,9.61923847691e-311,9.418837675307e-311,9.2184368737036e-311,9.0180360721003e-311,8.817635270497e-311,8.6172344688936e-311,8.4168336672903e-311,8.216432865687e-311,8.0160320640837e-311,7.8156312624804e-311,7.615230460877e-311,7.414829659274e-311,7.2144288576705e-311,7.014028056067e-311,6.813627254464e-311,6.6132264528606e-311,6.4128256512573e-311,6.212424849654e-311,6.0120240480507e-311,5.8116232464474e-311,5.611222444844e-311,5.410821643241e-311,5.2104208416375e-311,5.010020040034e-311,4.809619238431e-311,4.6092184368276e-311,4.4088176352243e-311,4.208416833621e-311,4.0080160320177e-311,3.8076152304144e-311,3.607214428811e-311,3.4068136272077e-311,3.2064128256044e-311,3.006012024001e-311,2.805611222398e-311,2.6052104207945e-311,2.404809619191e-311,2.204408817588e-311,2.0040080159846e-311,1.8036072143813e-311,1.603206412778e-311,1.4028056111747e-311,1.2024048095714e-311,1.002004007968e-311,8.01603206365e-312,6.012024047615e-312,4.00801603158e-312,2.00400801555e-312,-4.84e-322],"x":[1.0e-309,9.9799599198397e-310,9.95991983967936e-310,9.93987975951903e-310,9.9198396793587e-310,9.89979959919837e-310,9.87975951903804e-310,9.8597194388777e-310,9.8396793587174e-310,9.81963927855705e-310,9.7995991983967e-310,9.7795591182364e-310,9.75951903807605e-310,9.7394789579157e-310,9.7194388777554e-310,9.69939879759506e-310,9.67935871743473e-310,9.6593186372744e-310,9.63927855711407e-310,9.61923847695374e-310,9.5991983967934e-310,9.5791583166331e-310,9.55911823647275e-310,9.5390781563124e-310,9.5190380761521e-310,9.49899799599176e-310,9.47895791583143e-310,9.4589178356711e-310,9.43887775551077e-310,9.41883767535044e-310,9.3987975951901e-310,9.3787575150298e-310,9.35871743486945e-310,9.3386773547091e-310,9.3186372745488e-310,9.29859719438846e-310,9.27855711422813e-310,9.2585170340678e-310,9.23847695390746e-310,9.21843687374713e-310,9.1983967935868e-310,9.17835671342647e-310,9.15831663326614e-310,9.1382765531058e-310,9.1182364729455e-310,9.09819639278515e-310,9.0781563126248e-310,9.0581162324645e-310,9.03807615230416e-310,9.01803607214383e-310,8.9979959919835e-310,8.97795591182317e-310,8.95791583166284e-310,8.9378757515025e-310,8.9178356713422e-310,8.89779559118185e-310,8.8777555110215e-310,8.8577154308612e-310,8.83767535070086e-310,8.81763527054053e-310,8.7975951903802e-310,8.77755511021987e-310,8.75751503005954e-310,8.7374749498992e-310,8.71743486973887e-310,8.69739478957854e-310,8.6773547094182e-310,8.6573146292579e-310,8.63727454909755e-310,8.6172344689372e-310,8.5971943887769e-310,8.57715430861656e-310,8.55711422845623e-310,8.5370741482959e-310,8.51703406813557e-310,8.49699398797524e-310,8.4769539078149e-310,8.4569138276546e-310,8.43687374749425e-310,8.4168336673339e-310,8.3967935871736e-310,8.37675350701326e-310,8.35671342685293e-310,8.3366733466926e-310,8.31663326653227e-310,8.29659318637194e-310,8.2765531062116e-310,8.2565130260513e-310,8.23647294589095e-310,8.2164328657306e-310,8.1963927855703e-310,8.17635270540995e-310,8.1563126252496e-310,8.1362725450893e-310,8.11623246492896e-310,8.09619238476863e-310,8.0761523046083e-310,8.05611222444797e-310,8.03607214428764e-310,8.0160320641273e-310,7.995991983967e-310,7.97595190380665e-310,7.9559118236463e-310,7.935871743486e-310,7.91583166332566e-310,7.89579158316533e-310,7.875751503005e-310,7.85571142284467e-310,7.83567134268434e-310,7.815631262524e-310,7.7955911823637e-310,7.77555110220335e-310,7.755511022043e-310,7.7354709418827e-310,7.71543086172236e-310,7.69539078156202e-310,7.6753507014017e-310,7.65531062124136e-310,7.63527054108103e-310,7.6152304609207e-310,7.59519038076037e-310,7.57515030060004e-310,7.5551102204397e-310,7.5350701402794e-310,7.51503006011905e-310,7.4949899799587e-310,7.4749498997984e-310,7.45490981963806e-310,7.43486973947773e-310,7.4148296593174e-310,7.39478957915707e-310,7.37474949899674e-310,7.3547094188364e-310,7.3346693386761e-310,7.31462925851575e-310,7.2945891783554e-310,7.2745490981951e-310,7.25450901803476e-310,7.23446893787443e-310,7.2144288577141e-310,7.19438877755377e-310,7.17434869739343e-310,7.1543086172331e-310,7.13426853707277e-310,7.11422845691244e-310,7.0941883767521e-310,7.0741482965918e-310,7.05410821643145e-310,7.0340681362711e-310,7.0140280561108e-310,6.99398797595046e-310,6.97394789579013e-310,6.9539078156298e-310,6.93386773546947e-310,6.91382765530914e-310,6.8937875751488e-310,6.8737474949885e-310,6.85370741482815e-310,6.8336673346678e-310,6.8136272545075e-310,6.79358717434716e-310,6.77354709418683e-310,6.7535070140265e-310,6.73346693386617e-310,6.71342685370584e-310,6.6933867735455e-310,6.6733466933852e-310,6.65330661322485e-310,6.6332665330645e-310,6.6132264529042e-310,6.59318637274385e-310,6.5731462925835e-310,6.5531062124232e-310,6.53306613226286e-310,6.51302605210253e-310,6.4929859719422e-310,6.47294589178187e-310,6.45290581162154e-310,6.4328657314612e-310,6.4128256513009e-310,6.39278557114055e-310,6.3727454909802e-310,6.3527054108199e-310,6.33266533065956e-310,6.31262525049923e-310,6.2925851703389e-310,6.27254509017857e-310,6.25250501001824e-310,6.2324649298579e-310,6.2124248496976e-310,6.19238476953725e-310,6.1723446893769e-310,6.1523046092166e-310,6.13226452905626e-310,6.11222444889592e-310,6.0921843687356e-310,6.07214428857526e-310,6.05210420841493e-310,6.0320641282546e-310,6.01202404809427e-310,5.99198396793394e-310,5.9719438877736e-310,5.9519038076133e-310,5.93186372745295e-310,5.9118236472926e-310,5.8917835671323e-310,5.87174348697196e-310,5.85170340681163e-310,5.8316633266513e-310,5.81162324649097e-310,5.79158316633064e-310,5.7715430861703e-310,5.75150300601e-310,5.73146292584965e-310,5.7114228456893e-310,5.691382765529e-310,5.67134268536866e-310,5.65130260520833e-310,5.631262525048e-310,5.61122244488767e-310,5.59118236472733e-310,5.571142284567e-310,5.55110220440667e-310,5.53106212424634e-310,5.511022044086e-310,5.4909819639257e-310,5.47094188376535e-310,5.450901803605e-310,5.4308617234447e-310,5.41082164328436e-310,5.39078156312403e-310,5.3707414829637e-310,5.35070140280337e-310,5.33066132264304e-310,5.3106212424827e-310,5.2905811623224e-310,5.27054108216205e-310,5.2505010020017e-310,5.2304609218414e-310,5.21042084168106e-310,5.19038076152073e-310,5.1703406813604e-310,5.15030060120007e-310,5.13026052103974e-310,5.1102204408794e-310,5.09018036071908e-310,5.07014028055874e-310,5.0501002003984e-310,5.0300601202381e-310,5.01002004007775e-310,4.9899799599174e-310,4.9699398797571e-310,4.94989979959676e-310,4.92985971943643e-310,4.9098196392761e-310,4.88977955911577e-310,4.86973947895544e-310,4.8496993987951e-310,4.8296593186348e-310,4.80961923847445e-310,4.7895791583141e-310,4.7695390781538e-310,4.74949899799346e-310,4.72945891783313e-310,4.7094188376728e-310,4.68937875751247e-310,4.66933867735214e-310,4.6492985971918e-310,4.6292585170315e-310,4.60921843687115e-310,4.5891783567108e-310,4.5691382765505e-310,4.54909819639015e-310,4.5290581162298e-310,4.5090180360695e-310,4.48897795590916e-310,4.46893787574883e-310,4.4488977955885e-310,4.42885771542817e-310,4.40881763526784e-310,4.3887775551075e-310,4.3687374749472e-310,4.34869739478685e-310,4.3286573146265e-310,4.3086172344662e-310,4.28857715430586e-310,4.26853707414553e-310,4.2484969939852e-310,4.22845691382487e-310,4.20841683366454e-310,4.1883767535042e-310,4.1683366733439e-310,4.14829659318355e-310,4.1282565130232e-310,4.1082164328629e-310,4.08817635270256e-310,4.06813627254223e-310,4.0480961923819e-310,4.02805611222156e-310,4.00801603206123e-310,3.9879759519009e-310,3.96793587174057e-310,3.94789579158024e-310,3.9278557114199e-310,3.9078156312596e-310,3.88777555109925e-310,3.8677354709389e-310,3.8476953907786e-310,3.82765531061826e-310,3.80761523045793e-310,3.7875751502976e-310,3.76753507013727e-310,3.74749498997694e-310,3.7274549098166e-310,3.7074148296563e-310,3.68737474949595e-310,3.6673346693356e-310,3.6472945891753e-310,3.62725450901496e-310,3.60721442885463e-310,3.5871743486943e-310,3.56713426853397e-310,3.54709418837364e-310,3.5270541082133e-310,3.50701402805298e-310,3.48697394789264e-310,3.4669338677323e-310,3.446893787572e-310,3.42685370741165e-310,3.4068136272513e-310,3.386773547091e-310,3.36673346693066e-310,3.34669338677033e-310,3.32665330661e-310,3.30661322644967e-310,3.28657314628934e-310,3.266533066129e-310,3.2464929859687e-310,3.22645290580835e-310,3.206412825648e-310,3.1863727454877e-310,3.16633266532736e-310,3.14629258516703e-310,3.1262525050067e-310,3.10621242484637e-310,3.08617234468604e-310,3.0661322645257e-310,3.0460921843654e-310,3.02605210420505e-310,3.0060120240447e-310,2.9859719438844e-310,2.96593186372405e-310,2.9458917835637e-310,2.9258517034034e-310,2.90581162324306e-310,2.88577154308273e-310,2.8657314629224e-310,2.84569138276207e-310,2.82565130260174e-310,2.8056112224414e-310,2.7855711422811e-310,2.76553106212075e-310,2.7454909819604e-310,2.7254509018001e-310,2.70541082163976e-310,2.68537074147943e-310,2.6653306613191e-310,2.64529058115877e-310,2.62525050099844e-310,2.6052104208381e-310,2.5851703406778e-310,2.56513026051745e-310,2.5450901803571e-310,2.5250501001968e-310,2.50501002003646e-310,2.48496993987613e-310,2.4649298597158e-310,2.44488977955546e-310,2.42484969939513e-310,2.4048096192348e-310,2.38476953907447e-310,2.36472945891414e-310,2.3446893787538e-310,2.3246492985935e-310,2.30460921843315e-310,2.2845691382728e-310,2.2645290581125e-310,2.24448897795216e-310,2.22444889779183e-310,2.2044088176315e-310,2.18436873747117e-310,2.16432865731084e-310,2.1442885771505e-310,2.1242484969902e-310,2.10420841682985e-310,2.0841683366695e-310,2.0641282565092e-310,2.04408817634886e-310,2.02404809618853e-310,2.0040080160282e-310,1.98396793586787e-310,1.96392785570754e-310,1.9438877755472e-310,1.92384769538687e-310,1.90380761522654e-310,1.8837675350662e-310,1.8637274549059e-310,1.84368737474555e-310,1.8236472945852e-310,1.8036072144249e-310,1.78356713426456e-310,1.76352705410423e-310,1.7434869739439e-310,1.72344689378357e-310,1.70340681362324e-310,1.6833667334629e-310,1.6633266533026e-310,1.64328657314225e-310,1.6232464929819e-310,1.6032064128216e-310,1.58316633266126e-310,1.56312625250093e-310,1.5430861723406e-310,1.52304609218027e-310,1.50300601201994e-310,1.4829659318596e-310,1.4629258516993e-310,1.44288577153895e-310,1.4228456913786e-310,1.4028056112183e-310,1.38276553105795e-310,1.3627254508976e-310,1.3426853707373e-310,1.32264529057696e-310,1.30260521041663e-310,1.2825651302563e-310,1.26252505009597e-310,1.24248496993564e-310,1.2224448897753e-310,1.202404809615e-310,1.18236472945465e-310,1.1623246492943e-310,1.142284569134e-310,1.12224448897366e-310,1.10220440881333e-310,1.082164328653e-310,1.06212424849267e-310,1.04208416833234e-310,1.022044088172e-310,1.0020040080117e-310,9.8196392785135e-311,9.61923847691e-311,9.418837675307e-311,9.2184368737036e-311,9.0180360721003e-311,8.817635270497e-311,8.6172344688936e-311,8.4168336672903e-311,8.216432865687e-311,8.0160320640837e-311,7.8156312624804e-311,7.615230460877e-311,7.414829659274e-311,7.2144288576705e-311,7.014028056067e-311,6.813627254464e-311,6.6132264528606e-311,6.4128256512573e-311,6.212424849654e-311,6.0120240480507e-311,5.8116232464474e-311,5.611222444844e-311,5.410821643241e-311,5.2104208416375e-311,5.010020040034e-311,4.809619238431e-311,4.6092184368276e-311,4.4088176352243e-311,4.208416833621e-311,4.0080160320177e-311,3.8076152304144e-311,3.607214428811e-311,3.4068136272077e-311,3.2064128256044e-311,3.006012024001e-311,2.805611222398e-311,2.6052104207945e-311,2.404809619191e-311,2.204408817588e-311,2.0040080159846e-311,1.8036072143813e-311,1.603206412778e-311,1.4028056111747e-311,1.2024048095714e-311,1.002004007968e-311,8.01603206365e-312,6.012024047615e-312,4.00801603158e-312,2.00400801555e-312,-4.84e-322]}
},{}],93:[function(require,module,exports){
module.exports={"expected":[-1.0e-300,-9.97995992004008e-301,-9.959919840080161e-301,-9.93987976012024e-301,-9.91983968016032e-301,-9.899799600200401e-301,-9.879759520240481e-301,-9.859719440280562e-301,-9.839679360320642e-301,-9.819639280360721e-301,-9.799599200400802e-301,-9.779559120440882e-301,-9.759519040480962e-301,-9.739478960521043e-301,-9.719438880561122e-301,-9.699398800601202e-301,-9.679358720641283e-301,-9.659318640681363e-301,-9.639278560721444e-301,-9.619238480761524e-301,-9.599198400801603e-301,-9.579158320841683e-301,-9.559118240881764e-301,-9.539078160921844e-301,-9.519038080961925e-301,-9.498998001002004e-301,-9.478957921042084e-301,-9.458917841082164e-301,-9.438877761122245e-301,-9.418837681162325e-301,-9.398797601202406e-301,-9.378757521242485e-301,-9.358717441282565e-301,-9.338677361322646e-301,-9.318637281362726e-301,-9.298597201402806e-301,-9.278557121442885e-301,-9.258517041482966e-301,-9.238476961523046e-301,-9.218436881563127e-301,-9.198396801603207e-301,-9.178356721643288e-301,-9.158316641683366e-301,-9.138276561723447e-301,-9.118236481763527e-301,-9.098196401803608e-301,-9.078156321843688e-301,-9.058116241883767e-301,-9.038076161923848e-301,-9.018036081963928e-301,-8.997996002004008e-301,-8.977955922044089e-301,-8.95791584208417e-301,-8.937875762124248e-301,-8.917835682164329e-301,-8.897795602204409e-301,-8.87775552224449e-301,-8.85771544228457e-301,-8.837675362324649e-301,-8.81763528236473e-301,-8.79759520240481e-301,-8.77755512244489e-301,-8.75751504248497e-301,-8.737474962525051e-301,-8.71743488256513e-301,-8.69739480260521e-301,-8.677354722645291e-301,-8.657314642685371e-301,-8.637274562725452e-301,-8.61723448276553e-301,-8.597194402805611e-301,-8.577154322845691e-301,-8.557114242885772e-301,-8.537074162925852e-301,-8.517034082965933e-301,-8.496994003006012e-301,-8.476953923046092e-301,-8.456913843086173e-301,-8.436873763126253e-301,-8.416833683166334e-301,-8.396793603206412e-301,-8.376753523246493e-301,-8.356713443286573e-301,-8.336673363326654e-301,-8.316633283366734e-301,-8.296593203406815e-301,-8.276553123446893e-301,-8.256513043486974e-301,-8.236472963527054e-301,-8.216432883567135e-301,-8.196392803607215e-301,-8.176352723647294e-301,-8.156312643687375e-301,-8.136272563727455e-301,-8.116232483767535e-301,-8.096192403807616e-301,-8.076152323847696e-301,-8.056112243887775e-301,-8.036072163927856e-301,-8.016032083967936e-301,-7.995992004008017e-301,-7.975951924048097e-301,-7.955911844088176e-301,-7.935871764128256e-301,-7.915831684168337e-301,-7.895791604208417e-301,-7.875751524248498e-301,-7.855711444288577e-301,-7.835671364328657e-301,-7.815631284368737e-301,-7.795591204408818e-301,-7.775551124448898e-301,-7.755511044488979e-301,-7.735470964529058e-301,-7.715430884569138e-301,-7.695390804609219e-301,-7.675350724649299e-301,-7.65531064468938e-301,-7.635270564729458e-301,-7.615230484769539e-301,-7.59519040480962e-301,-7.5751503248497e-301,-7.55511024488978e-301,-7.53507016492986e-301,-7.51503008496994e-301,-7.49499000501002e-301,-7.4749499250501e-301,-7.454909845090181e-301,-7.4348697651302604e-301,-7.414829685170341e-301,-7.394789605210421e-301,-7.374749525250501e-301,-7.3547094452905814e-301,-7.334669365330662e-301,-7.3146292853707415e-301,-7.294589205410822e-301,-7.274549125450902e-301,-7.254509045490982e-301,-7.2344689655310626e-301,-7.214428885571142e-301,-7.194388805611223e-301,-7.174348725651303e-301,-7.154308645691383e-301,-7.134268565731463e-301,-7.114228485771544e-301,-7.094188405811623e-301,-7.074148325851704e-301,-7.054108245891783e-301,-7.034068165931864e-301,-7.014028085971944e-301,-6.993988006012024e-301,-6.9739479260521044e-301,-6.953907846092185e-301,-6.9338677661322645e-301,-6.913827686172345e-301,-6.893787606212425e-301,-6.873747526252505e-301,-6.8537074462925855e-301,-6.833667366332665e-301,-6.813627286372746e-301,-6.793587206412826e-301,-6.773547126452906e-301,-6.753507046492986e-301,-6.733466966533067e-301,-6.713426886573146e-301,-6.693386806613227e-301,-6.673346726653306e-301,-6.653306646693387e-301,-6.633266566733467e-301,-6.613226486773547e-301,-6.593186406813627e-301,-6.573146326853708e-301,-6.5531062468937875e-301,-6.533066166933868e-301,-6.513026086973948e-301,-6.492986007014028e-301,-6.4729459270541085e-301,-6.452905847094188e-301,-6.432865767134269e-301,-6.412825687174349e-301,-6.392785607214429e-301,-6.372745527254509e-301,-6.35270544729459e-301,-6.332665367334669e-301,-6.31262528737475e-301,-6.29258520741483e-301,-6.27254512745491e-301,-6.25250504749499e-301,-6.23246496753507e-301,-6.21242488757515e-301,-6.192384807615231e-301,-6.1723447276553105e-301,-6.152304647695391e-301,-6.132264567735471e-301,-6.112224487775551e-301,-6.0921844078156315e-301,-6.072144327855712e-301,-6.0521042478957916e-301,-6.032064167935872e-301,-6.012024087975952e-301,-5.991984008016032e-301,-5.971943928056113e-301,-5.951903848096192e-301,-5.931863768136273e-301,-5.911823688176353e-301,-5.891783608216433e-301,-5.871743528256513e-301,-5.851703448296594e-301,-5.831663368336673e-301,-5.811623288376754e-301,-5.7915832084168334e-301,-5.771543128456914e-301,-5.751503048496994e-301,-5.731462968537074e-301,-5.7114228885771545e-301,-5.691382808617235e-301,-5.6713427286573146e-301,-5.651302648697395e-301,-5.6312625687374755e-301,-5.611222488777555e-301,-5.5911824088176356e-301,-5.571142328857715e-301,-5.551102248897796e-301,-5.531062168937876e-301,-5.511022088977956e-301,-5.490982009018036e-301,-5.470941929058117e-301,-5.450901849098196e-301,-5.430861769138277e-301,-5.410821689178357e-301,-5.390781609218437e-301,-5.370741529258517e-301,-5.350701449298597e-301,-5.3306613693386774e-301,-5.310621289378758e-301,-5.2905812094188375e-301,-5.270541129458918e-301,-5.2505010494989985e-301,-5.230460969539078e-301,-5.2104208895791585e-301,-5.190380809619239e-301,-5.170340729659319e-301,-5.150300649699399e-301,-5.130260569739479e-301,-5.110220489779559e-301,-5.09018040981964e-301,-5.070140329859719e-301,-5.0501002498998e-301,-5.03006016993988e-301,-5.01002008997996e-301,-4.98998001002004e-301,-4.969939930060121e-301,-4.9498998501002e-301,-4.929859770140281e-301,-4.9098196901803605e-301,-4.889779610220441e-301,-4.8697395302605214e-301,-4.849699450300601e-301,-4.8296593703406815e-301,-4.809619290380762e-301,-4.789579210420842e-301,-4.769539130460922e-301,-4.749499050501002e-301,-4.729458970541082e-301,-4.709418890581163e-301,-4.689378810621242e-301,-4.669338730661323e-301,-4.649298650701403e-301,-4.629258570741483e-301,-4.609218490781563e-301,-4.589178410821644e-301,-4.569138330861723e-301,-4.549098250901804e-301,-4.5290581709418835e-301,-4.509018090981964e-301,-4.488978011022044e-301,-4.468937931062124e-301,-4.4488978511022045e-301,-4.428857771142285e-301,-4.408817691182365e-301,-4.388777611222445e-301,-4.3687375312625255e-301,-4.348697451302605e-301,-4.328657371342686e-301,-4.308617291382765e-301,-4.288577211422846e-301,-4.268537131462926e-301,-4.248497051503006e-301,-4.228456971543086e-301,-4.208416891583167e-301,-4.188376811623246e-301,-4.168336731663327e-301,-4.148296651703407e-301,-4.128256571743487e-301,-4.108216491783567e-301,-4.088176411823647e-301,-4.0681363318637275e-301,-4.048096251903808e-301,-4.0280561719438876e-301,-4.008016091983968e-301,-3.9879760120240485e-301,-3.967935932064128e-301,-3.947895852104209e-301,-3.927855772144289e-301,-3.907815692184369e-301,-3.887775612224449e-301,-3.867735532264529e-301,-3.847695452304609e-301,-3.82765537234469e-301,-3.807615292384769e-301,-3.78757521242485e-301,-3.76753513246493e-301,-3.74749505250501e-301,-3.7274549725450904e-301,-3.7074148925851704e-301,-3.6873748126252504e-301,-3.667334732665331e-301,-3.647294652705411e-301,-3.627254572745491e-301,-3.607214492785571e-301,-3.5871744128256515e-301,-3.5671343328657316e-301,-3.5470942529058116e-301,-3.527054172945892e-301,-3.507014092985972e-301,-3.486974013026052e-301,-3.4669339330661322e-301,-3.4468938531062127e-301,-3.4268537731462927e-301,-3.4068136931863728e-301,-3.386773613226453e-301,-3.3667335332665333e-301,-3.3466934533066133e-301,-3.3266533733466934e-301,-3.3066132933867734e-301,-3.286573213426854e-301,-3.266533133466934e-301,-3.246493053507014e-301,-3.2264529735470944e-301,-3.2064128935871745e-301,-3.1863728136272545e-301,-3.1663327336673346e-301,-3.146292653707415e-301,-3.126252573747495e-301,-3.106212493787575e-301,-3.086172413827655e-301,-3.0661323338677357e-301,-3.0460922539078157e-301,-3.0260521739478957e-301,-3.0060120939879762e-301,-2.9859720140280563e-301,-2.9659319340681363e-301,-2.9458918541082164e-301,-2.925851774148297e-301,-2.905811694188377e-301,-2.885771614228457e-301,-2.865731534268537e-301,-2.8456914543086174e-301,-2.8256513743486975e-301,-2.8056112943887775e-301,-2.785571214428858e-301,-2.765531134468938e-301,-2.745491054509018e-301,-2.725450974549098e-301,-2.7054108945891786e-301,-2.6853708146292586e-301,-2.6653307346693387e-301,-2.6452906547094187e-301,-2.625250574749499e-301,-2.6052104947895792e-301,-2.5851704148296593e-301,-2.5651303348697397e-301,-2.5450902549098198e-301,-2.5250501749499e-301,-2.50501009498998e-301,-2.4849700150300603e-301,-2.4649299350701404e-301,-2.4448898551102204e-301,-2.4248497751503005e-301,-2.404809695190381e-301,-2.384769615230461e-301,-2.364729535270541e-301,-2.3446894553106215e-301,-2.3246493753507016e-301,-2.3046092953907816e-301,-2.2845692154308617e-301,-2.264529135470942e-301,-2.244489055511022e-301,-2.2244489755511022e-301,-2.2044088955911823e-301,-2.1843688156312627e-301,-2.1643287356713428e-301,-2.144288655711423e-301,-2.124248575751503e-301,-2.1042084957915833e-301,-2.0841684158316634e-301,-2.0641283358717434e-301,-2.044088255911824e-301,-2.024048175951904e-301,-2.004008095991984e-301,-1.983968016032064e-301,-1.9639279360721445e-301,-1.9438878561122245e-301,-1.9238477761523046e-301,-1.9038076961923846e-301,-1.883767616232465e-301,-1.8637275362725451e-301,-1.8436874563126254e-301,-1.8236473763527054e-301,-1.8036072963927857e-301,-1.7835672164328657e-301,-1.763527136472946e-301,-1.743487056513026e-301,-1.7234469765531063e-301,-1.7034068965931863e-301,-1.6833668166332666e-301,-1.6633267366733466e-301,-1.643286656713427e-301,-1.6232465767535072e-301,-1.6032064967935872e-301,-1.5831664168336675e-301,-1.5631263368737475e-301,-1.5430862569138278e-301,-1.5230461769539078e-301,-1.503006096993988e-301,-1.4829660170340681e-301,-1.4629259370741484e-301,-1.4428858571142284e-301,-1.4228457771543087e-301,-1.4028056971943887e-301,-1.382765617234469e-301,-1.3627255372745492e-301,-1.3426854573146293e-301,-1.3226453773547095e-301,-1.3026052973947896e-301,-1.2825652174348698e-301,-1.2625251374749499e-301,-1.2424850575150301e-301,-1.2224449775551102e-301,-1.2024048975951904e-301,-1.1823648176352705e-301,-1.1623247376753507e-301,-1.142284657715431e-301,-1.122244577755511e-301,-1.1022044977955913e-301,-1.0821644178356713e-301,-1.0621243378757516e-301,-1.0420842579158316e-301,-1.022044177955912e-301,-1.002004097995992e-301,-9.819640180360722e-302,-9.619239380761522e-302,-9.418838581162325e-302,-9.218437781563127e-302,-9.018036981963928e-302,-8.81763618236473e-302,-8.617235382765531e-302,-8.416834583166333e-302,-8.216433783567134e-302,-8.016032983967936e-302,-7.815632184368738e-302,-7.61523138476954e-302,-7.414830585170341e-302,-7.214429785571143e-302,-7.014028985971944e-302,-6.813628186372746e-302,-6.613227386773547e-302,-6.412826587174349e-302,-6.21242578757515e-302,-6.012024987975952e-302,-5.811624188376753e-302,-5.611223388777555e-302,-5.410822589178357e-302,-5.210421789579159e-302,-5.01002098997996e-302,-4.809620190380762e-302,-4.6092193907815634e-302,-4.408818591182365e-302,-4.2084177915831664e-302,-4.008016991983968e-302,-3.8076161923847694e-302,-3.6072153927855714e-302,-3.406814593186373e-302,-3.2064137935871745e-302,-3.006012993987976e-302,-2.8056121943887775e-302,-2.605211394789579e-302,-2.404810595190381e-302,-2.2044097955911825e-302,-2.004008995991984e-302,-1.8036081963927856e-302,-1.6032073967935873e-302,-1.4028065971943888e-302,-1.2024057975951904e-302,-1.002004997995992e-302,-8.016041983967936e-303,-6.012033987975951e-303,-4.008025991983968e-303,-2.004017995991984e-303,-1.0000000000000256e-308],"x":[-1.0e-300,-9.97995992004008e-301,-9.959919840080161e-301,-9.93987976012024e-301,-9.91983968016032e-301,-9.899799600200401e-301,-9.879759520240481e-301,-9.859719440280562e-301,-9.839679360320642e-301,-9.819639280360721e-301,-9.799599200400802e-301,-9.779559120440882e-301,-9.759519040480962e-301,-9.739478960521043e-301,-9.719438880561122e-301,-9.699398800601202e-301,-9.679358720641283e-301,-9.659318640681363e-301,-9.639278560721444e-301,-9.619238480761524e-301,-9.599198400801603e-301,-9.579158320841683e-301,-9.559118240881764e-301,-9.539078160921844e-301,-9.519038080961925e-301,-9.498998001002004e-301,-9.478957921042084e-301,-9.458917841082164e-301,-9.438877761122245e-301,-9.418837681162325e-301,-9.398797601202406e-301,-9.378757521242485e-301,-9.358717441282565e-301,-9.338677361322646e-301,-9.318637281362726e-301,-9.298597201402806e-301,-9.278557121442885e-301,-9.258517041482966e-301,-9.238476961523046e-301,-9.218436881563127e-301,-9.198396801603207e-301,-9.178356721643288e-301,-9.158316641683366e-301,-9.138276561723447e-301,-9.118236481763527e-301,-9.098196401803608e-301,-9.078156321843688e-301,-9.058116241883767e-301,-9.038076161923848e-301,-9.018036081963928e-301,-8.997996002004008e-301,-8.977955922044089e-301,-8.95791584208417e-301,-8.937875762124248e-301,-8.917835682164329e-301,-8.897795602204409e-301,-8.87775552224449e-301,-8.85771544228457e-301,-8.837675362324649e-301,-8.81763528236473e-301,-8.79759520240481e-301,-8.77755512244489e-301,-8.75751504248497e-301,-8.737474962525051e-301,-8.71743488256513e-301,-8.69739480260521e-301,-8.677354722645291e-301,-8.657314642685371e-301,-8.637274562725452e-301,-8.61723448276553e-301,-8.597194402805611e-301,-8.577154322845691e-301,-8.557114242885772e-301,-8.537074162925852e-301,-8.517034082965933e-301,-8.496994003006012e-301,-8.476953923046092e-301,-8.456913843086173e-301,-8.436873763126253e-301,-8.416833683166334e-301,-8.396793603206412e-301,-8.376753523246493e-301,-8.356713443286573e-301,-8.336673363326654e-301,-8.316633283366734e-301,-8.296593203406815e-301,-8.276553123446893e-301,-8.256513043486974e-301,-8.236472963527054e-301,-8.216432883567135e-301,-8.196392803607215e-301,-8.176352723647294e-301,-8.156312643687375e-301,-8.136272563727455e-301,-8.116232483767535e-301,-8.096192403807616e-301,-8.076152323847696e-301,-8.056112243887775e-301,-8.036072163927856e-301,-8.016032083967936e-301,-7.995992004008017e-301,-7.975951924048097e-301,-7.955911844088176e-301,-7.935871764128256e-301,-7.915831684168337e-301,-7.895791604208417e-301,-7.875751524248498e-301,-7.855711444288577e-301,-7.835671364328657e-301,-7.815631284368737e-301,-7.795591204408818e-301,-7.775551124448898e-301,-7.755511044488979e-301,-7.735470964529058e-301,-7.715430884569138e-301,-7.695390804609219e-301,-7.675350724649299e-301,-7.65531064468938e-301,-7.635270564729458e-301,-7.615230484769539e-301,-7.59519040480962e-301,-7.5751503248497e-301,-7.55511024488978e-301,-7.53507016492986e-301,-7.51503008496994e-301,-7.49499000501002e-301,-7.4749499250501e-301,-7.454909845090181e-301,-7.4348697651302604e-301,-7.414829685170341e-301,-7.394789605210421e-301,-7.374749525250501e-301,-7.3547094452905814e-301,-7.334669365330662e-301,-7.3146292853707415e-301,-7.294589205410822e-301,-7.274549125450902e-301,-7.254509045490982e-301,-7.2344689655310626e-301,-7.214428885571142e-301,-7.194388805611223e-301,-7.174348725651303e-301,-7.154308645691383e-301,-7.134268565731463e-301,-7.114228485771544e-301,-7.094188405811623e-301,-7.074148325851704e-301,-7.054108245891783e-301,-7.034068165931864e-301,-7.014028085971944e-301,-6.993988006012024e-301,-6.9739479260521044e-301,-6.953907846092185e-301,-6.9338677661322645e-301,-6.913827686172345e-301,-6.893787606212425e-301,-6.873747526252505e-301,-6.8537074462925855e-301,-6.833667366332665e-301,-6.813627286372746e-301,-6.793587206412826e-301,-6.773547126452906e-301,-6.753507046492986e-301,-6.733466966533067e-301,-6.713426886573146e-301,-6.693386806613227e-301,-6.673346726653306e-301,-6.653306646693387e-301,-6.633266566733467e-301,-6.613226486773547e-301,-6.593186406813627e-301,-6.573146326853708e-301,-6.5531062468937875e-301,-6.533066166933868e-301,-6.513026086973948e-301,-6.492986007014028e-301,-6.4729459270541085e-301,-6.452905847094188e-301,-6.432865767134269e-301,-6.412825687174349e-301,-6.392785607214429e-301,-6.372745527254509e-301,-6.35270544729459e-301,-6.332665367334669e-301,-6.31262528737475e-301,-6.29258520741483e-301,-6.27254512745491e-301,-6.25250504749499e-301,-6.23246496753507e-301,-6.21242488757515e-301,-6.192384807615231e-301,-6.1723447276553105e-301,-6.152304647695391e-301,-6.132264567735471e-301,-6.112224487775551e-301,-6.0921844078156315e-301,-6.072144327855712e-301,-6.0521042478957916e-301,-6.032064167935872e-301,-6.012024087975952e-301,-5.991984008016032e-301,-5.971943928056113e-301,-5.951903848096192e-301,-5.931863768136273e-301,-5.911823688176353e-301,-5.891783608216433e-301,-5.871743528256513e-301,-5.851703448296594e-301,-5.831663368336673e-301,-5.811623288376754e-301,-5.7915832084168334e-301,-5.771543128456914e-301,-5.751503048496994e-301,-5.731462968537074e-301,-5.7114228885771545e-301,-5.691382808617235e-301,-5.6713427286573146e-301,-5.651302648697395e-301,-5.6312625687374755e-301,-5.611222488777555e-301,-5.5911824088176356e-301,-5.571142328857715e-301,-5.551102248897796e-301,-5.531062168937876e-301,-5.511022088977956e-301,-5.490982009018036e-301,-5.470941929058117e-301,-5.450901849098196e-301,-5.430861769138277e-301,-5.410821689178357e-301,-5.390781609218437e-301,-5.370741529258517e-301,-5.350701449298597e-301,-5.3306613693386774e-301,-5.310621289378758e-301,-5.2905812094188375e-301,-5.270541129458918e-301,-5.2505010494989985e-301,-5.230460969539078e-301,-5.2104208895791585e-301,-5.190380809619239e-301,-5.170340729659319e-301,-5.150300649699399e-301,-5.130260569739479e-301,-5.110220489779559e-301,-5.09018040981964e-301,-5.070140329859719e-301,-5.0501002498998e-301,-5.03006016993988e-301,-5.01002008997996e-301,-4.98998001002004e-301,-4.969939930060121e-301,-4.9498998501002e-301,-4.929859770140281e-301,-4.9098196901803605e-301,-4.889779610220441e-301,-4.8697395302605214e-301,-4.849699450300601e-301,-4.8296593703406815e-301,-4.809619290380762e-301,-4.789579210420842e-301,-4.769539130460922e-301,-4.749499050501002e-301,-4.729458970541082e-301,-4.709418890581163e-301,-4.689378810621242e-301,-4.669338730661323e-301,-4.649298650701403e-301,-4.629258570741483e-301,-4.609218490781563e-301,-4.589178410821644e-301,-4.569138330861723e-301,-4.549098250901804e-301,-4.5290581709418835e-301,-4.509018090981964e-301,-4.488978011022044e-301,-4.468937931062124e-301,-4.4488978511022045e-301,-4.428857771142285e-301,-4.408817691182365e-301,-4.388777611222445e-301,-4.3687375312625255e-301,-4.348697451302605e-301,-4.328657371342686e-301,-4.308617291382765e-301,-4.288577211422846e-301,-4.268537131462926e-301,-4.248497051503006e-301,-4.228456971543086e-301,-4.208416891583167e-301,-4.188376811623246e-301,-4.168336731663327e-301,-4.148296651703407e-301,-4.128256571743487e-301,-4.108216491783567e-301,-4.088176411823647e-301,-4.0681363318637275e-301,-4.048096251903808e-301,-4.0280561719438876e-301,-4.008016091983968e-301,-3.9879760120240485e-301,-3.967935932064128e-301,-3.947895852104209e-301,-3.927855772144289e-301,-3.907815692184369e-301,-3.887775612224449e-301,-3.867735532264529e-301,-3.847695452304609e-301,-3.82765537234469e-301,-3.807615292384769e-301,-3.78757521242485e-301,-3.76753513246493e-301,-3.74749505250501e-301,-3.7274549725450904e-301,-3.7074148925851704e-301,-3.6873748126252504e-301,-3.667334732665331e-301,-3.647294652705411e-301,-3.627254572745491e-301,-3.607214492785571e-301,-3.5871744128256515e-301,-3.5671343328657316e-301,-3.5470942529058116e-301,-3.527054172945892e-301,-3.507014092985972e-301,-3.486974013026052e-301,-3.4669339330661322e-301,-3.4468938531062127e-301,-3.4268537731462927e-301,-3.4068136931863728e-301,-3.386773613226453e-301,-3.3667335332665333e-301,-3.3466934533066133e-301,-3.3266533733466934e-301,-3.3066132933867734e-301,-3.286573213426854e-301,-3.266533133466934e-301,-3.246493053507014e-301,-3.2264529735470944e-301,-3.2064128935871745e-301,-3.1863728136272545e-301,-3.1663327336673346e-301,-3.146292653707415e-301,-3.126252573747495e-301,-3.106212493787575e-301,-3.086172413827655e-301,-3.0661323338677357e-301,-3.0460922539078157e-301,-3.0260521739478957e-301,-3.0060120939879762e-301,-2.9859720140280563e-301,-2.9659319340681363e-301,-2.9458918541082164e-301,-2.925851774148297e-301,-2.905811694188377e-301,-2.885771614228457e-301,-2.865731534268537e-301,-2.8456914543086174e-301,-2.8256513743486975e-301,-2.8056112943887775e-301,-2.785571214428858e-301,-2.765531134468938e-301,-2.745491054509018e-301,-2.725450974549098e-301,-2.7054108945891786e-301,-2.6853708146292586e-301,-2.6653307346693387e-301,-2.6452906547094187e-301,-2.625250574749499e-301,-2.6052104947895792e-301,-2.5851704148296593e-301,-2.5651303348697397e-301,-2.5450902549098198e-301,-2.5250501749499e-301,-2.50501009498998e-301,-2.4849700150300603e-301,-2.4649299350701404e-301,-2.4448898551102204e-301,-2.4248497751503005e-301,-2.404809695190381e-301,-2.384769615230461e-301,-2.364729535270541e-301,-2.3446894553106215e-301,-2.3246493753507016e-301,-2.3046092953907816e-301,-2.2845692154308617e-301,-2.264529135470942e-301,-2.244489055511022e-301,-2.2244489755511022e-301,-2.2044088955911823e-301,-2.1843688156312627e-301,-2.1643287356713428e-301,-2.144288655711423e-301,-2.124248575751503e-301,-2.1042084957915833e-301,-2.0841684158316634e-301,-2.0641283358717434e-301,-2.044088255911824e-301,-2.024048175951904e-301,-2.004008095991984e-301,-1.983968016032064e-301,-1.9639279360721445e-301,-1.9438878561122245e-301,-1.9238477761523046e-301,-1.9038076961923846e-301,-1.883767616232465e-301,-1.8637275362725451e-301,-1.8436874563126254e-301,-1.8236473763527054e-301,-1.8036072963927857e-301,-1.7835672164328657e-301,-1.763527136472946e-301,-1.743487056513026e-301,-1.7234469765531063e-301,-1.7034068965931863e-301,-1.6833668166332666e-301,-1.6633267366733466e-301,-1.643286656713427e-301,-1.6232465767535072e-301,-1.6032064967935872e-301,-1.5831664168336675e-301,-1.5631263368737475e-301,-1.5430862569138278e-301,-1.5230461769539078e-301,-1.503006096993988e-301,-1.4829660170340681e-301,-1.4629259370741484e-301,-1.4428858571142284e-301,-1.4228457771543087e-301,-1.4028056971943887e-301,-1.382765617234469e-301,-1.3627255372745492e-301,-1.3426854573146293e-301,-1.3226453773547095e-301,-1.3026052973947896e-301,-1.2825652174348698e-301,-1.2625251374749499e-301,-1.2424850575150301e-301,-1.2224449775551102e-301,-1.2024048975951904e-301,-1.1823648176352705e-301,-1.1623247376753507e-301,-1.142284657715431e-301,-1.122244577755511e-301,-1.1022044977955913e-301,-1.0821644178356713e-301,-1.0621243378757516e-301,-1.0420842579158316e-301,-1.022044177955912e-301,-1.002004097995992e-301,-9.819640180360722e-302,-9.619239380761522e-302,-9.418838581162325e-302,-9.218437781563127e-302,-9.018036981963928e-302,-8.81763618236473e-302,-8.617235382765531e-302,-8.416834583166333e-302,-8.216433783567134e-302,-8.016032983967936e-302,-7.815632184368738e-302,-7.61523138476954e-302,-7.414830585170341e-302,-7.214429785571143e-302,-7.014028985971944e-302,-6.813628186372746e-302,-6.613227386773547e-302,-6.412826587174349e-302,-6.21242578757515e-302,-6.012024987975952e-302,-5.811624188376753e-302,-5.611223388777555e-302,-5.410822589178357e-302,-5.210421789579159e-302,-5.01002098997996e-302,-4.809620190380762e-302,-4.6092193907815634e-302,-4.408818591182365e-302,-4.2084177915831664e-302,-4.008016991983968e-302,-3.8076161923847694e-302,-3.6072153927855714e-302,-3.406814593186373e-302,-3.2064137935871745e-302,-3.006012993987976e-302,-2.8056121943887775e-302,-2.605211394789579e-302,-2.404810595190381e-302,-2.2044097955911825e-302,-2.004008995991984e-302,-1.8036081963927856e-302,-1.6032073967935873e-302,-1.4028065971943888e-302,-1.2024057975951904e-302,-1.002004997995992e-302,-8.016041983967936e-303,-6.012033987975951e-303,-4.008025991983968e-303,-2.004017995991984e-303,-1.0000000000000256e-308]}
},{}],94:[function(require,module,exports){
module.exports={"expected":[1.0e-300,9.97995992004008e-301,9.959919840080161e-301,9.93987976012024e-301,9.91983968016032e-301,9.899799600200401e-301,9.879759520240481e-301,9.859719440280562e-301,9.839679360320642e-301,9.819639280360721e-301,9.799599200400802e-301,9.779559120440882e-301,9.759519040480962e-301,9.739478960521043e-301,9.719438880561122e-301,9.699398800601202e-301,9.679358720641283e-301,9.659318640681363e-301,9.639278560721444e-301,9.619238480761524e-301,9.599198400801603e-301,9.579158320841683e-301,9.559118240881764e-301,9.539078160921844e-301,9.519038080961925e-301,9.498998001002004e-301,9.478957921042084e-301,9.458917841082164e-301,9.438877761122245e-301,9.418837681162325e-301,9.398797601202406e-301,9.378757521242485e-301,9.358717441282565e-301,9.338677361322646e-301,9.318637281362726e-301,9.298597201402806e-301,9.278557121442885e-301,9.258517041482966e-301,9.238476961523046e-301,9.218436881563127e-301,9.198396801603207e-301,9.178356721643288e-301,9.158316641683366e-301,9.138276561723447e-301,9.118236481763527e-301,9.098196401803608e-301,9.078156321843688e-301,9.058116241883767e-301,9.038076161923848e-301,9.018036081963928e-301,8.997996002004008e-301,8.977955922044089e-301,8.95791584208417e-301,8.937875762124248e-301,8.917835682164329e-301,8.897795602204409e-301,8.87775552224449e-301,8.85771544228457e-301,8.837675362324649e-301,8.81763528236473e-301,8.79759520240481e-301,8.77755512244489e-301,8.75751504248497e-301,8.737474962525051e-301,8.71743488256513e-301,8.69739480260521e-301,8.677354722645291e-301,8.657314642685371e-301,8.637274562725452e-301,8.61723448276553e-301,8.597194402805611e-301,8.577154322845691e-301,8.557114242885772e-301,8.537074162925852e-301,8.517034082965933e-301,8.496994003006012e-301,8.476953923046092e-301,8.456913843086173e-301,8.436873763126253e-301,8.416833683166334e-301,8.396793603206412e-301,8.376753523246493e-301,8.356713443286573e-301,8.336673363326654e-301,8.316633283366734e-301,8.296593203406815e-301,8.276553123446893e-301,8.256513043486974e-301,8.236472963527054e-301,8.216432883567135e-301,8.196392803607215e-301,8.176352723647294e-301,8.156312643687375e-301,8.136272563727455e-301,8.116232483767535e-301,8.096192403807616e-301,8.076152323847696e-301,8.056112243887775e-301,8.036072163927856e-301,8.016032083967936e-301,7.995992004008017e-301,7.975951924048097e-301,7.955911844088176e-301,7.935871764128256e-301,7.915831684168337e-301,7.895791604208417e-301,7.875751524248498e-301,7.855711444288577e-301,7.835671364328657e-301,7.815631284368737e-301,7.795591204408818e-301,7.775551124448898e-301,7.755511044488979e-301,7.735470964529058e-301,7.715430884569138e-301,7.695390804609219e-301,7.675350724649299e-301,7.65531064468938e-301,7.635270564729458e-301,7.615230484769539e-301,7.59519040480962e-301,7.5751503248497e-301,7.55511024488978e-301,7.53507016492986e-301,7.51503008496994e-301,7.49499000501002e-301,7.4749499250501e-301,7.454909845090181e-301,7.4348697651302604e-301,7.414829685170341e-301,7.394789605210421e-301,7.374749525250501e-301,7.3547094452905814e-301,7.334669365330662e-301,7.3146292853707415e-301,7.294589205410822e-301,7.274549125450902e-301,7.254509045490982e-301,7.2344689655310626e-301,7.214428885571142e-301,7.194388805611223e-301,7.174348725651303e-301,7.154308645691383e-301,7.134268565731463e-301,7.114228485771544e-301,7.094188405811623e-301,7.074148325851704e-301,7.054108245891783e-301,7.034068165931864e-301,7.014028085971944e-301,6.993988006012024e-301,6.9739479260521044e-301,6.953907846092185e-301,6.9338677661322645e-301,6.913827686172345e-301,6.893787606212425e-301,6.873747526252505e-301,6.8537074462925855e-301,6.833667366332665e-301,6.813627286372746e-301,6.793587206412826e-301,6.773547126452906e-301,6.753507046492986e-301,6.733466966533067e-301,6.713426886573146e-301,6.693386806613227e-301,6.673346726653306e-301,6.653306646693387e-301,6.633266566733467e-301,6.613226486773547e-301,6.593186406813627e-301,6.573146326853708e-301,6.5531062468937875e-301,6.533066166933868e-301,6.513026086973948e-301,6.492986007014028e-301,6.4729459270541085e-301,6.452905847094188e-301,6.432865767134269e-301,6.412825687174349e-301,6.392785607214429e-301,6.372745527254509e-301,6.35270544729459e-301,6.332665367334669e-301,6.31262528737475e-301,6.29258520741483e-301,6.27254512745491e-301,6.25250504749499e-301,6.23246496753507e-301,6.21242488757515e-301,6.192384807615231e-301,6.1723447276553105e-301,6.152304647695391e-301,6.132264567735471e-301,6.112224487775551e-301,6.0921844078156315e-301,6.072144327855712e-301,6.0521042478957916e-301,6.032064167935872e-301,6.012024087975952e-301,5.991984008016032e-301,5.971943928056113e-301,5.951903848096192e-301,5.931863768136273e-301,5.911823688176353e-301,5.891783608216433e-301,5.871743528256513e-301,5.851703448296594e-301,5.831663368336673e-301,5.811623288376754e-301,5.7915832084168334e-301,5.771543128456914e-301,5.751503048496994e-301,5.731462968537074e-301,5.7114228885771545e-301,5.691382808617235e-301,5.6713427286573146e-301,5.651302648697395e-301,5.6312625687374755e-301,5.611222488777555e-301,5.5911824088176356e-301,5.571142328857715e-301,5.551102248897796e-301,5.531062168937876e-301,5.511022088977956e-301,5.490982009018036e-301,5.470941929058117e-301,5.450901849098196e-301,5.430861769138277e-301,5.410821689178357e-301,5.390781609218437e-301,5.370741529258517e-301,5.350701449298597e-301,5.3306613693386774e-301,5.310621289378758e-301,5.2905812094188375e-301,5.270541129458918e-301,5.2505010494989985e-301,5.230460969539078e-301,5.2104208895791585e-301,5.190380809619239e-301,5.170340729659319e-301,5.150300649699399e-301,5.130260569739479e-301,5.110220489779559e-301,5.09018040981964e-301,5.070140329859719e-301,5.0501002498998e-301,5.03006016993988e-301,5.01002008997996e-301,4.98998001002004e-301,4.969939930060121e-301,4.9498998501002e-301,4.929859770140281e-301,4.9098196901803605e-301,4.889779610220441e-301,4.8697395302605214e-301,4.849699450300601e-301,4.8296593703406815e-301,4.809619290380762e-301,4.789579210420842e-301,4.769539130460922e-301,4.749499050501002e-301,4.729458970541082e-301,4.709418890581163e-301,4.689378810621242e-301,4.669338730661323e-301,4.649298650701403e-301,4.629258570741483e-301,4.609218490781563e-301,4.589178410821644e-301,4.569138330861723e-301,4.549098250901804e-301,4.5290581709418835e-301,4.509018090981964e-301,4.488978011022044e-301,4.468937931062124e-301,4.4488978511022045e-301,4.428857771142285e-301,4.408817691182365e-301,4.388777611222445e-301,4.3687375312625255e-301,4.348697451302605e-301,4.328657371342686e-301,4.308617291382765e-301,4.288577211422846e-301,4.268537131462926e-301,4.248497051503006e-301,4.228456971543086e-301,4.208416891583167e-301,4.188376811623246e-301,4.168336731663327e-301,4.148296651703407e-301,4.128256571743487e-301,4.108216491783567e-301,4.088176411823647e-301,4.0681363318637275e-301,4.048096251903808e-301,4.0280561719438876e-301,4.008016091983968e-301,3.9879760120240485e-301,3.967935932064128e-301,3.947895852104209e-301,3.927855772144289e-301,3.907815692184369e-301,3.887775612224449e-301,3.867735532264529e-301,3.847695452304609e-301,3.82765537234469e-301,3.807615292384769e-301,3.78757521242485e-301,3.76753513246493e-301,3.74749505250501e-301,3.7274549725450904e-301,3.7074148925851704e-301,3.6873748126252504e-301,3.667334732665331e-301,3.647294652705411e-301,3.627254572745491e-301,3.607214492785571e-301,3.5871744128256515e-301,3.5671343328657316e-301,3.5470942529058116e-301,3.527054172945892e-301,3.507014092985972e-301,3.486974013026052e-301,3.4669339330661322e-301,3.4468938531062127e-301,3.4268537731462927e-301,3.4068136931863728e-301,3.386773613226453e-301,3.3667335332665333e-301,3.3466934533066133e-301,3.3266533733466934e-301,3.3066132933867734e-301,3.286573213426854e-301,3.266533133466934e-301,3.246493053507014e-301,3.2264529735470944e-301,3.2064128935871745e-301,3.1863728136272545e-301,3.1663327336673346e-301,3.146292653707415e-301,3.126252573747495e-301,3.106212493787575e-301,3.086172413827655e-301,3.0661323338677357e-301,3.0460922539078157e-301,3.0260521739478957e-301,3.0060120939879762e-301,2.9859720140280563e-301,2.9659319340681363e-301,2.9458918541082164e-301,2.925851774148297e-301,2.905811694188377e-301,2.885771614228457e-301,2.865731534268537e-301,2.8456914543086174e-301,2.8256513743486975e-301,2.8056112943887775e-301,2.785571214428858e-301,2.765531134468938e-301,2.745491054509018e-301,2.725450974549098e-301,2.7054108945891786e-301,2.6853708146292586e-301,2.6653307346693387e-301,2.6452906547094187e-301,2.625250574749499e-301,2.6052104947895792e-301,2.5851704148296593e-301,2.5651303348697397e-301,2.5450902549098198e-301,2.5250501749499e-301,2.50501009498998e-301,2.4849700150300603e-301,2.4649299350701404e-301,2.4448898551102204e-301,2.4248497751503005e-301,2.404809695190381e-301,2.384769615230461e-301,2.364729535270541e-301,2.3446894553106215e-301,2.3246493753507016e-301,2.3046092953907816e-301,2.2845692154308617e-301,2.264529135470942e-301,2.244489055511022e-301,2.2244489755511022e-301,2.2044088955911823e-301,2.1843688156312627e-301,2.1643287356713428e-301,2.144288655711423e-301,2.124248575751503e-301,2.1042084957915833e-301,2.0841684158316634e-301,2.0641283358717434e-301,2.044088255911824e-301,2.024048175951904e-301,2.004008095991984e-301,1.983968016032064e-301,1.9639279360721445e-301,1.9438878561122245e-301,1.9238477761523046e-301,1.9038076961923846e-301,1.883767616232465e-301,1.8637275362725451e-301,1.8436874563126254e-301,1.8236473763527054e-301,1.8036072963927857e-301,1.7835672164328657e-301,1.763527136472946e-301,1.743487056513026e-301,1.7234469765531063e-301,1.7034068965931863e-301,1.6833668166332666e-301,1.6633267366733466e-301,1.643286656713427e-301,1.6232465767535072e-301,1.6032064967935872e-301,1.5831664168336675e-301,1.5631263368737475e-301,1.5430862569138278e-301,1.5230461769539078e-301,1.503006096993988e-301,1.4829660170340681e-301,1.4629259370741484e-301,1.4428858571142284e-301,1.4228457771543087e-301,1.4028056971943887e-301,1.382765617234469e-301,1.3627255372745492e-301,1.3426854573146293e-301,1.3226453773547095e-301,1.3026052973947896e-301,1.2825652174348698e-301,1.2625251374749499e-301,1.2424850575150301e-301,1.2224449775551102e-301,1.2024048975951904e-301,1.1823648176352705e-301,1.1623247376753507e-301,1.142284657715431e-301,1.122244577755511e-301,1.1022044977955913e-301,1.0821644178356713e-301,1.0621243378757516e-301,1.0420842579158316e-301,1.022044177955912e-301,1.002004097995992e-301,9.819640180360722e-302,9.619239380761522e-302,9.418838581162325e-302,9.218437781563127e-302,9.018036981963928e-302,8.81763618236473e-302,8.617235382765531e-302,8.416834583166333e-302,8.216433783567134e-302,8.016032983967936e-302,7.815632184368738e-302,7.61523138476954e-302,7.414830585170341e-302,7.214429785571143e-302,7.014028985971944e-302,6.813628186372746e-302,6.613227386773547e-302,6.412826587174349e-302,6.21242578757515e-302,6.012024987975952e-302,5.811624188376753e-302,5.611223388777555e-302,5.410822589178357e-302,5.210421789579159e-302,5.01002098997996e-302,4.809620190380762e-302,4.6092193907815634e-302,4.408818591182365e-302,4.2084177915831664e-302,4.008016991983968e-302,3.8076161923847694e-302,3.6072153927855714e-302,3.406814593186373e-302,3.2064137935871745e-302,3.006012993987976e-302,2.8056121943887775e-302,2.605211394789579e-302,2.404810595190381e-302,2.2044097955911825e-302,2.004008995991984e-302,1.8036081963927856e-302,1.6032073967935873e-302,1.4028065971943888e-302,1.2024057975951904e-302,1.002004997995992e-302,8.016041983967936e-303,6.012033987975951e-303,4.008025991983968e-303,2.004017995991984e-303,1.0000000000000256e-308],"x":[1.0e-300,9.97995992004008e-301,9.959919840080161e-301,9.93987976012024e-301,9.91983968016032e-301,9.899799600200401e-301,9.879759520240481e-301,9.859719440280562e-301,9.839679360320642e-301,9.819639280360721e-301,9.799599200400802e-301,9.779559120440882e-301,9.759519040480962e-301,9.739478960521043e-301,9.719438880561122e-301,9.699398800601202e-301,9.679358720641283e-301,9.659318640681363e-301,9.639278560721444e-301,9.619238480761524e-301,9.599198400801603e-301,9.579158320841683e-301,9.559118240881764e-301,9.539078160921844e-301,9.519038080961925e-301,9.498998001002004e-301,9.478957921042084e-301,9.458917841082164e-301,9.438877761122245e-301,9.418837681162325e-301,9.398797601202406e-301,9.378757521242485e-301,9.358717441282565e-301,9.338677361322646e-301,9.318637281362726e-301,9.298597201402806e-301,9.278557121442885e-301,9.258517041482966e-301,9.238476961523046e-301,9.218436881563127e-301,9.198396801603207e-301,9.178356721643288e-301,9.158316641683366e-301,9.138276561723447e-301,9.118236481763527e-301,9.098196401803608e-301,9.078156321843688e-301,9.058116241883767e-301,9.038076161923848e-301,9.018036081963928e-301,8.997996002004008e-301,8.977955922044089e-301,8.95791584208417e-301,8.937875762124248e-301,8.917835682164329e-301,8.897795602204409e-301,8.87775552224449e-301,8.85771544228457e-301,8.837675362324649e-301,8.81763528236473e-301,8.79759520240481e-301,8.77755512244489e-301,8.75751504248497e-301,8.737474962525051e-301,8.71743488256513e-301,8.69739480260521e-301,8.677354722645291e-301,8.657314642685371e-301,8.637274562725452e-301,8.61723448276553e-301,8.597194402805611e-301,8.577154322845691e-301,8.557114242885772e-301,8.537074162925852e-301,8.517034082965933e-301,8.496994003006012e-301,8.476953923046092e-301,8.456913843086173e-301,8.436873763126253e-301,8.416833683166334e-301,8.396793603206412e-301,8.376753523246493e-301,8.356713443286573e-301,8.336673363326654e-301,8.316633283366734e-301,8.296593203406815e-301,8.276553123446893e-301,8.256513043486974e-301,8.236472963527054e-301,8.216432883567135e-301,8.196392803607215e-301,8.176352723647294e-301,8.156312643687375e-301,8.136272563727455e-301,8.116232483767535e-301,8.096192403807616e-301,8.076152323847696e-301,8.056112243887775e-301,8.036072163927856e-301,8.016032083967936e-301,7.995992004008017e-301,7.975951924048097e-301,7.955911844088176e-301,7.935871764128256e-301,7.915831684168337e-301,7.895791604208417e-301,7.875751524248498e-301,7.855711444288577e-301,7.835671364328657e-301,7.815631284368737e-301,7.795591204408818e-301,7.775551124448898e-301,7.755511044488979e-301,7.735470964529058e-301,7.715430884569138e-301,7.695390804609219e-301,7.675350724649299e-301,7.65531064468938e-301,7.635270564729458e-301,7.615230484769539e-301,7.59519040480962e-301,7.5751503248497e-301,7.55511024488978e-301,7.53507016492986e-301,7.51503008496994e-301,7.49499000501002e-301,7.4749499250501e-301,7.454909845090181e-301,7.4348697651302604e-301,7.414829685170341e-301,7.394789605210421e-301,7.374749525250501e-301,7.3547094452905814e-301,7.334669365330662e-301,7.3146292853707415e-301,7.294589205410822e-301,7.274549125450902e-301,7.254509045490982e-301,7.2344689655310626e-301,7.214428885571142e-301,7.194388805611223e-301,7.174348725651303e-301,7.154308645691383e-301,7.134268565731463e-301,7.114228485771544e-301,7.094188405811623e-301,7.074148325851704e-301,7.054108245891783e-301,7.034068165931864e-301,7.014028085971944e-301,6.993988006012024e-301,6.9739479260521044e-301,6.953907846092185e-301,6.9338677661322645e-301,6.913827686172345e-301,6.893787606212425e-301,6.873747526252505e-301,6.8537074462925855e-301,6.833667366332665e-301,6.813627286372746e-301,6.793587206412826e-301,6.773547126452906e-301,6.753507046492986e-301,6.733466966533067e-301,6.713426886573146e-301,6.693386806613227e-301,6.673346726653306e-301,6.653306646693387e-301,6.633266566733467e-301,6.613226486773547e-301,6.593186406813627e-301,6.573146326853708e-301,6.5531062468937875e-301,6.533066166933868e-301,6.513026086973948e-301,6.492986007014028e-301,6.4729459270541085e-301,6.452905847094188e-301,6.432865767134269e-301,6.412825687174349e-301,6.392785607214429e-301,6.372745527254509e-301,6.35270544729459e-301,6.332665367334669e-301,6.31262528737475e-301,6.29258520741483e-301,6.27254512745491e-301,6.25250504749499e-301,6.23246496753507e-301,6.21242488757515e-301,6.192384807615231e-301,6.1723447276553105e-301,6.152304647695391e-301,6.132264567735471e-301,6.112224487775551e-301,6.0921844078156315e-301,6.072144327855712e-301,6.0521042478957916e-301,6.032064167935872e-301,6.012024087975952e-301,5.991984008016032e-301,5.971943928056113e-301,5.951903848096192e-301,5.931863768136273e-301,5.911823688176353e-301,5.891783608216433e-301,5.871743528256513e-301,5.851703448296594e-301,5.831663368336673e-301,5.811623288376754e-301,5.7915832084168334e-301,5.771543128456914e-301,5.751503048496994e-301,5.731462968537074e-301,5.7114228885771545e-301,5.691382808617235e-301,5.6713427286573146e-301,5.651302648697395e-301,5.6312625687374755e-301,5.611222488777555e-301,5.5911824088176356e-301,5.571142328857715e-301,5.551102248897796e-301,5.531062168937876e-301,5.511022088977956e-301,5.490982009018036e-301,5.470941929058117e-301,5.450901849098196e-301,5.430861769138277e-301,5.410821689178357e-301,5.390781609218437e-301,5.370741529258517e-301,5.350701449298597e-301,5.3306613693386774e-301,5.310621289378758e-301,5.2905812094188375e-301,5.270541129458918e-301,5.2505010494989985e-301,5.230460969539078e-301,5.2104208895791585e-301,5.190380809619239e-301,5.170340729659319e-301,5.150300649699399e-301,5.130260569739479e-301,5.110220489779559e-301,5.09018040981964e-301,5.070140329859719e-301,5.0501002498998e-301,5.03006016993988e-301,5.01002008997996e-301,4.98998001002004e-301,4.969939930060121e-301,4.9498998501002e-301,4.929859770140281e-301,4.9098196901803605e-301,4.889779610220441e-301,4.8697395302605214e-301,4.849699450300601e-301,4.8296593703406815e-301,4.809619290380762e-301,4.789579210420842e-301,4.769539130460922e-301,4.749499050501002e-301,4.729458970541082e-301,4.709418890581163e-301,4.689378810621242e-301,4.669338730661323e-301,4.649298650701403e-301,4.629258570741483e-301,4.609218490781563e-301,4.589178410821644e-301,4.569138330861723e-301,4.549098250901804e-301,4.5290581709418835e-301,4.509018090981964e-301,4.488978011022044e-301,4.468937931062124e-301,4.4488978511022045e-301,4.428857771142285e-301,4.408817691182365e-301,4.388777611222445e-301,4.3687375312625255e-301,4.348697451302605e-301,4.328657371342686e-301,4.308617291382765e-301,4.288577211422846e-301,4.268537131462926e-301,4.248497051503006e-301,4.228456971543086e-301,4.208416891583167e-301,4.188376811623246e-301,4.168336731663327e-301,4.148296651703407e-301,4.128256571743487e-301,4.108216491783567e-301,4.088176411823647e-301,4.0681363318637275e-301,4.048096251903808e-301,4.0280561719438876e-301,4.008016091983968e-301,3.9879760120240485e-301,3.967935932064128e-301,3.947895852104209e-301,3.927855772144289e-301,3.907815692184369e-301,3.887775612224449e-301,3.867735532264529e-301,3.847695452304609e-301,3.82765537234469e-301,3.807615292384769e-301,3.78757521242485e-301,3.76753513246493e-301,3.74749505250501e-301,3.7274549725450904e-301,3.7074148925851704e-301,3.6873748126252504e-301,3.667334732665331e-301,3.647294652705411e-301,3.627254572745491e-301,3.607214492785571e-301,3.5871744128256515e-301,3.5671343328657316e-301,3.5470942529058116e-301,3.527054172945892e-301,3.507014092985972e-301,3.486974013026052e-301,3.4669339330661322e-301,3.4468938531062127e-301,3.4268537731462927e-301,3.4068136931863728e-301,3.386773613226453e-301,3.3667335332665333e-301,3.3466934533066133e-301,3.3266533733466934e-301,3.3066132933867734e-301,3.286573213426854e-301,3.266533133466934e-301,3.246493053507014e-301,3.2264529735470944e-301,3.2064128935871745e-301,3.1863728136272545e-301,3.1663327336673346e-301,3.146292653707415e-301,3.126252573747495e-301,3.106212493787575e-301,3.086172413827655e-301,3.0661323338677357e-301,3.0460922539078157e-301,3.0260521739478957e-301,3.0060120939879762e-301,2.9859720140280563e-301,2.9659319340681363e-301,2.9458918541082164e-301,2.925851774148297e-301,2.905811694188377e-301,2.885771614228457e-301,2.865731534268537e-301,2.8456914543086174e-301,2.8256513743486975e-301,2.8056112943887775e-301,2.785571214428858e-301,2.765531134468938e-301,2.745491054509018e-301,2.725450974549098e-301,2.7054108945891786e-301,2.6853708146292586e-301,2.6653307346693387e-301,2.6452906547094187e-301,2.625250574749499e-301,2.6052104947895792e-301,2.5851704148296593e-301,2.5651303348697397e-301,2.5450902549098198e-301,2.5250501749499e-301,2.50501009498998e-301,2.4849700150300603e-301,2.4649299350701404e-301,2.4448898551102204e-301,2.4248497751503005e-301,2.404809695190381e-301,2.384769615230461e-301,2.364729535270541e-301,2.3446894553106215e-301,2.3246493753507016e-301,2.3046092953907816e-301,2.2845692154308617e-301,2.264529135470942e-301,2.244489055511022e-301,2.2244489755511022e-301,2.2044088955911823e-301,2.1843688156312627e-301,2.1643287356713428e-301,2.144288655711423e-301,2.124248575751503e-301,2.1042084957915833e-301,2.0841684158316634e-301,2.0641283358717434e-301,2.044088255911824e-301,2.024048175951904e-301,2.004008095991984e-301,1.983968016032064e-301,1.9639279360721445e-301,1.9438878561122245e-301,1.9238477761523046e-301,1.9038076961923846e-301,1.883767616232465e-301,1.8637275362725451e-301,1.8436874563126254e-301,1.8236473763527054e-301,1.8036072963927857e-301,1.7835672164328657e-301,1.763527136472946e-301,1.743487056513026e-301,1.7234469765531063e-301,1.7034068965931863e-301,1.6833668166332666e-301,1.6633267366733466e-301,1.643286656713427e-301,1.6232465767535072e-301,1.6032064967935872e-301,1.5831664168336675e-301,1.5631263368737475e-301,1.5430862569138278e-301,1.5230461769539078e-301,1.503006096993988e-301,1.4829660170340681e-301,1.4629259370741484e-301,1.4428858571142284e-301,1.4228457771543087e-301,1.4028056971943887e-301,1.382765617234469e-301,1.3627255372745492e-301,1.3426854573146293e-301,1.3226453773547095e-301,1.3026052973947896e-301,1.2825652174348698e-301,1.2625251374749499e-301,1.2424850575150301e-301,1.2224449775551102e-301,1.2024048975951904e-301,1.1823648176352705e-301,1.1623247376753507e-301,1.142284657715431e-301,1.122244577755511e-301,1.1022044977955913e-301,1.0821644178356713e-301,1.0621243378757516e-301,1.0420842579158316e-301,1.022044177955912e-301,1.002004097995992e-301,9.819640180360722e-302,9.619239380761522e-302,9.418838581162325e-302,9.218437781563127e-302,9.018036981963928e-302,8.81763618236473e-302,8.617235382765531e-302,8.416834583166333e-302,8.216433783567134e-302,8.016032983967936e-302,7.815632184368738e-302,7.61523138476954e-302,7.414830585170341e-302,7.214429785571143e-302,7.014028985971944e-302,6.813628186372746e-302,6.613227386773547e-302,6.412826587174349e-302,6.21242578757515e-302,6.012024987975952e-302,5.811624188376753e-302,5.611223388777555e-302,5.410822589178357e-302,5.210421789579159e-302,5.01002098997996e-302,4.809620190380762e-302,4.6092193907815634e-302,4.408818591182365e-302,4.2084177915831664e-302,4.008016991983968e-302,3.8076161923847694e-302,3.6072153927855714e-302,3.406814593186373e-302,3.2064137935871745e-302,3.006012993987976e-302,2.8056121943887775e-302,2.605211394789579e-302,2.404810595190381e-302,2.2044097955911825e-302,2.004008995991984e-302,1.8036081963927856e-302,1.6032073967935873e-302,1.4028065971943888e-302,1.2024057975951904e-302,1.002004997995992e-302,8.016041983967936e-303,6.012033987975951e-303,4.008025991983968e-303,2.004017995991984e-303,1.0000000000000256e-308]}
},{}],95:[function(require,module,exports){
module.exports={"expected":[6.420676210313675e-11,-0.1789760851803783,-0.8142458028436093,-0.19193982117974873,-0.8353033412901791,-0.0606475831655485,-0.6365188089862741,-1.8405787232946678,116.60350734583955,1.7676177535241822,6.0919123336476915,1.2649026451185494,0.4175725503248284,-0.11115797903420481,-0.7093442520940093,-2.0831181244082067,17.014464282089975,1.577541041585868,0.5457284644363137,-0.006708559609617742,1.2911676497918172,0.4293353267960436,-0.10107136381356235,-0.6944561508499515,-2.030944265837354,20.504249031610325,1.6128949237155519,0.5587444847691144,0.0032657740995204174,-0.21415020689095363,-0.8721790132560316,-2.76264643162737,6.237565531782868,1.2746591936179128,0.42196545199703933,-0.10737857860325256,-0.7037450168739802,-2.0633304378668615,18.173021755416542,1.5906476961169558,0.21445572996994883,-0.30387756567057717,-1.032272123258767,-3.710462029805236,4.033683599411698,1.0749788523197985,0.3261270479649738,-0.1933729258335968,-0.8376520069907234,-2.599420961749166,7.146924403919263,1.3283924175339554,0.44566847749380833,-0.08724059192729668,-0.6743260659382546,-1.9625880566541516,28.541201404756546,1.6633866167681703,0.5768734056810703,0.016976418818782597,-0.5324783912578204,-1.5422951469768087,-14.47557233993227,2.1391338888811946,0.7248900389504579,0.12156340012905575,-0.40556715829983414,-1.238551673172306,-5.723665966102232,2.8883787977049677,0.8971371635442151,0.22883843697504858,-0.2889638212484795,-1.004348367379619,-3.5178015576265267,4.284322230549761,1.1049736575432552,0.34136322361763227,-0.1791879922459079,-0.8145873101550886,-2.4967330984694325,7.938473808567639,1.3669982197130244,0.4622024483885601,-0.07344286534009538,-0.654564774114416,-1.8978139652745376,46.91104119940962,1.7162349627321867,0.5952913710867501,0.030693447184778892,-0.5150088302524963,-1.4969330786559325,-12.06705391955472,2.2178884051569487,0.7460139284673087,0.13549911030962664,-0.3896904858671354,-1.20439075117783,-5.294492981408673,3.021747905260053,0.9221896554069567,0.24331167513843752,-0.27416777692739047,-0.9771831590070986,-3.3428695745982977,4.566242047333659,1.1358912280848423,0.3567426819808765,-0.16507258260303442,-0.7920320918800604,-2.400842558585001,8.923362890801734,1.4070787122623012,0.47894729859474483,-0.05967289647827157,-0.6351550036982474,-1.8363250861974625,131.4952744563868,1.7716302137836974,0.6140124421338432,0.04442202476110123,-0.4977842346825138,-1.453395478652674,-10.342330431151174,2.301582495256663,0.7675743834239094,0.14948669295377456,-0.3739825576880992,-1.1713396382192693,-4.923408216318771,3.1666449724669348,0.9478837420355255,0.2578817954106573,-0.2594825470729242,-0.9507361965526082,-3.1832693230390987,4.885817033751832,1.167786986687064,0.37227331855873885,-0.15102091859864075,-0.7699614510204089,-2.3110633881787117,10.18282161362798,1.448735999060827,0.4959135061308732,-0.045925439856852095,-0.616080351852782,-1.777856239442616,-163.81593762185844,1.829783425953019,0.6330513784233354,0.058167334507204745,-0.4807931462524001,-1.4115590320273605,-9.045972582038258,2.3907305198467586,0.7895934411168771,0.16353172691265155,1.080296478227484,-1.1393332787410964,-0.19082175035170562,3.324694254648395,-2.5804570454154385,0.27255530741222367,1.3352167749959232,-0.9249698081616351,-0.08476201036405867,5.251278493127663,-1.9507082301435128,0.38796329968224236,1.6726926263598338,-0.7483519018572911,0.019437618463844494,11.850993051099765,-1.5340137230785584,0.513111996611586,2.152925335490474,-0.5973252250916653,0.1240608936500684,-50.46438541000314,-1.2323359665984586,0.6524236882750576,2.9115300666195427,-0.4640245885325898,0.23142912657823686,-8.03568335169086,-0.9994183305382952,0.812094438871402,4.33245139568583,-0.3430392708058564,0.34411262672371423,-4.313550088819176,-0.8105025127286265,1.0013391169588335,8.09912405046264,-0.23041790258319125,0.46519185104495636,-2.9024572153291306,-0.6510558718327252,1.2347568120628107,53.03473649281356,-0.12308620381692498,0.5986285387057977,-2.147526640864552,-0.511899803281326,1.5372376417086597,-11.716728185991657,-0.018477243667597943,0.7498506547657995,-1.669052373478851,-0.38685918150393656,1.9553300819063453,-5.223982357452732,0.08572901648127772,0.9267527934939466,-1.3325486200041408,-0.27152423003901716,2.587827943428468,-3.3131592623135413,0.19181692017455887,1.1415419205856396,-1.0782182097665631,-0.16254617791836548,3.688428168782982,-2.384298113156865,0.3022394132502452,1.414435819187736,-0.8753399374118727,-0.05720411009520176,6.166824247286235,-1.8256164323647148,0.41985542842467793,1.7818575355467698,-0.7064285947025549,0.046887537116987475,17.597984353037678,-1.4457651554851798,0.5482519537236191,2.3171644882721547,-0.5607148944992464,0.15200298669072093,-21.1566034458142,-1.1655202796207427,0.6922345365470807,3.193990296111342,-0.4311133848902395,0.26050747235546806,-6.562113041847524,-0.9460627978933192,0.8586427347925892,4.947754399137203,-0.3126727756820461,0.3750772533505114,-3.832719151083325,-0.766049855551346,1.0578133399420826,10.44701835756835,-0.20171828166296302,0.4989827224348974,-2.6630540694787457,-0.6126912488026347,1.3064212241222155,-116.7552062942491,-0.09533944906273012,0.6365031528597023,-2.0021817130331474,-0.47776758925605095,1.633529943054569,-8.846616585372969,0.00894314857750656,0.7935955517525679,-1.5697732234574528,-0.3556608439495308,2.0951045230634033,-4.545356405085607,0.1134206050699662,0.9790616713786958,-1.2591094835480137,-0.24229504828644097,2.815038954498995,-3.0120500126469323,0.22040127938367798,1.2067460828430974,-1.0206136854037267,-0.13452158131243003,4.134030365943058,-2.2122180333583232,0.33241972886979154,1.500048829818073,-0.8280370472496245,-0.029732541068986585,7.455088714800514,-1.7124534310185233,0.4524905564748221,1.9022397969300942,-0.6660988378927026,0.07440814165927435,34.066884266546396,-1.3642478064212913,0.5844647543617418,2.5036943302292824,-0.5252134670386235,0.18017901769219355,-13.371050875046729,-1.1028437222582617,0.733586213116487,3.530685400785542,-0.39897132239681266,0.290004302481706,-5.538033429041002,-0.8954059395816926,0.9074361577026142,5.756255995513432,-0.2828226398028634,0.40668553401015456,-3.443356074195878,-0.7234265646991225,0.0356196323636817,14.680547701823793,-0.1733344525849912,3.540897919691867,2.24733618146495,-0.5755946023125852,1.3834117189399369,-0.8940440489207626,-1.192403082651708,0.6757235412824544,-1.8719676420482865,0.4075672878865219,0.24853004283547112,-7.097268158867767,0.03637699465673619,14.846157378745003,4.67623594843911,-0.32506524272151927,2.2519204797578034,-0.5745880619593958,-0.7840554807221188,1.0342571146799402,-1.1905729078500746,0.6768258527671253,0.4850111813722519,-2.75689140448799,0.2493332956544288,-7.058619361187872,372.5879212488272,-0.10670300381006931,4.693593673510325,-0.3242291411229007,-0.4916591107160651,1.5930080754369833,-0.7828348417208191,1.0358238153413222,0.7754240305198238,-1.6094427882278468,0.4859458346873424,-2.750399713730023,-4.802145199048303,0.10204129503569023,518.7948654365093,-0.10593807151116445,-0.2542371157668814,2.717728338980942,-0.49072023836701684,1.5956871377725732,1.179485650160216,-1.0438472160236452,0.7766359228755031,-1.60673044641082,-2.2802113512658972,0.3199740912016126,-4.784012054328999,0.1028056120232091,-0.0409953699920166,6.867877620773041,-0.2534319984614483,2.7240844619996882,1.8513740177494928,-0.6824616569045308,1.1812959160560597,-1.042267913800269,-1.396935105429701,0.5694715253100696,-2.2755303360948713,0.32080811627461714,0.16858819646289322,-15.751526860776535,-0.040237740071367614,6.904501094707355,3.384994150407338,-0.4120698402611163,1.8547276611623646,-0.6813535587051535,-0.9158802854836741,0.8871313315085669,-1.394705054306038,0.570473632282038,0.39363559150367744,-3.593810420378734,0.16936617577094862,-15.565322504070178,12.590124994231214,-0.18494418519453182,3.394441488848301,-0.4111852988588645,-0.5906682560832964,1.351136005667395,-0.9144903849579661,0.888483895636107,0.6594616622526897,-1.923726562241905,0.394509434555761,-3.583313537352817,-7.725288914500969,0.025117598894159193,12.711936470146485,-0.1841620408220336,-0.3375486733835356,2.185312761853851,-0.5896484360587344,1.3532754018622113,1.011242714415946,-1.2181363974340593,0.6605475289360032,-1.920176184321314,-2.8567352969850988,0.23741827233410062,-7.6796582066941586,0.025874472692467627,-0.11809387102271514,4.447520852921548,-0.3367063247116187,2.1896885497422973,1.5539129393413083,-0.8011389497941994,1.012773753114332,-1.2162593821379621,-1.6505752585637048,0.47211591369030403,-2.849821067591263,0.23821743339513507,0.09068807908850958,75.89011171092207,-0.11732700867072106,4.463291863702574,2.626191185974673,-0.5047556927998232,1.5564987556784668,-0.7998978556611389,-1.0676328627458451,0.7587579404772007,-1.6477617022401332,0.4730412189712612,0.3076177265085863,-5.068000232900733,0.09145073435998863,80.51243750131847,6.364892433268007,-0.2654378490034429,2.632176134253001,-0.5038069630078982,-0.6990776573243773,1.154702492472437,-1.0660156318413991,0.75995046664437,0.5546691683334012,-2.346853524578453,0.30844587686217956,-5.0478935318482465,-19.157266959316033,-0.05151017300072422,6.396443157293967,-0.2646283366966408,-0.4252903579623051,1.8058021977959704,-0.69795221896911,1.1564689305378826,0.8672277627606326,-1.42836406247101,0.5556586726495789,-2.341939921981764,-3.756942173047923,0.15781638342844145,-18.88289337061289,-0.05075181341807831,-0.19660232565662022,3.258758406041988,-0.4243974546902928,1.8090294912114004,1.3198267262665448,-0.935361765005411,0.8685538778166971,-1.426066972916663,-1.977775181498455,0.38156696760307607,-3.745542142641102,0.15859169666305212,0.013864564037293463,11.111731272046756],"x":[-1.6470993291652855e6,-3.629268267213499e15,-7.258536532779899e15,-1.0887804798346298e16,-1.4517073063912698e16,-1.81463413294791e16,-2.17756095950455e16,-2.54048778606119e16,-2.90341461261783e16,-3.26634143917447e16,-3.6292682657311096e16,-3.9921950922877496e16,-4.3551219188443896e16,-4.7180487454010296e16,-5.0809755719576696e16,-5.4439023985143096e16,-5.8068292250709496e16,-6.1697560516275896e16,-6.5326828781842296e16,-6.8956097047408696e16,-7.25853653129751e16,-7.62146335785415e16,-7.98439018441079e16,-8.34731701096743e16,-8.71024383752407e16,-9.07317066408071e16,-9.43609749063735e16,-9.79902431719399e16,-1.016195114375063e17,-1.0524877970307269e17,-1.0887804796863909e17,-1.1250731623420549e17,-1.1613658449977189e17,-1.1976585276533829e17,-1.2339512103090469e17,-1.2702438929647109e17,-1.3065365756203749e17,-1.3428292582760389e17,-1.3791219409317029e17,-1.4154146235873669e17,-1.451707306243031e17,-1.487999988898695e17,-1.524292671554359e17,-1.560585354210023e17,-1.596878036865687e17,-1.633170719521351e17,-1.669463402177015e17,-1.705756084832679e17,-1.742048767488343e17,-1.778341450144007e17,-1.814634132799671e17,-1.850926815455335e17,-1.887219498110999e17,-1.923512180766663e17,-1.959804863422327e17,-1.996097546077991e17,-2.032390228733655e17,-2.068682911389319e17,-2.104975594044983e17,-2.141268276700647e17,-2.177560959356311e17,-2.213853642011975e17,-2.250146324667639e17,-2.286439007323303e17,-2.322731689978967e17,-2.359024372634631e17,-2.395317055290295e17,-2.431609737945959e17,-2.467902420601623e17,-2.504195103257287e17,-2.540487785912951e17,-2.576780468568615e17,-2.613073151224279e17,-2.649365833879943e17,-2.685658516535607e17,-2.721951199191271e17,-2.758243881846935e17,-2.794536564502599e17,-2.830829247158263e17,-2.867121929813927e17,-2.903414612469591e17,-2.939707295125255e17,-2.975999977780919e17,-3.012292660436583e17,-3.048585343092247e17,-3.084878025747911e17,-3.121170708403575e17,-3.157463391059239e17,-3.193756073714903e17,-3.230048756370567e17,-3.266341439026231e17,-3.302634121681895e17,-3.338926804337559e17,-3.375219486993223e17,-3.411512169648887e17,-3.447804852304551e17,-3.484097534960215e17,-3.520390217615879e17,-3.556682900271543e17,-3.592975582927207e17,-3.629268265582871e17,-3.665560948238535e17,-3.701853630894199e17,-3.738146313549863e17,-3.774438996205527e17,-3.810731678861191e17,-3.847024361516855e17,-3.883317044172519e17,-3.919609726828183e17,-3.955902409483847e17,-3.992195092139511e17,-4.028487774795175e17,-4.064780457450839e17,-4.101073140106503e17,-4.137365822762167e17,-4.173658505417831e17,-4.209951188073495e17,-4.246243870729159e17,-4.282536553384823e17,-4.318829236040487e17,-4.355121918696151e17,-4.391414601351815e17,-4.427707284007479e17,-4.463999966663143e17,-4.500292649318807e17,-4.536585331974471e17,-4.572878014630135e17,-4.609170697285799e17,-4.645463379941463e17,-4.681756062597127e17,-4.718048745252791e17,-4.754341427908455e17,-4.790634110564119e17,-4.826926793219783e17,-4.863219475875447e17,-4.899512158531111e17,-4.935804841186775e17,-4.972097523842439e17,-5.008390206498103e17,-5.044682889153767e17,-5.080975571809431e17,-5.117268254465095e17,-5.153560937120759e17,-5.189853619776423e17,-5.226146302432087e17,-5.262438985087751e17,-5.298731667743415e17,-5.335024350399079e17,-5.371317033054743e17,-5.407609715710407e17,-5.443902398366071e17,-5.480195081021735e17,-5.516487763677399e17,-5.552780446333063e17,-5.589073128988727e17,-5.625365811644391e17,-5.661658494300055e17,-5.697951176955719e17,-5.734243859611383e17,-5.770536542267046e17,-5.806829224922711e17,-5.843121907578374e17,-5.879414590234039e17,-5.915707272889702e17,-5.951999955545367e17,-5.98829263820103e17,-6.024585320856695e17,-6.060878003512358e17,-6.097170686168023e17,-6.133463368823686e17,-6.169756051479351e17,-6.206048734135014e17,-6.242341416790679e17,-6.278634099446342e17,-6.314926782102007e17,-6.35121946475767e17,-6.387512147413335e17,-6.423804830068998e17,-6.460097512724663e17,-6.496390195380326e17,-6.532682878035991e17,-6.568975560691654e17,-6.605268243347319e17,-6.641560926002982e17,-6.677853608658647e17,-6.71414629131431e17,-6.750438973969975e17,-6.786731656625638e17,-6.823024339281303e17,-6.859317021936966e17,-6.895609704592631e17,-6.931902387248294e17,-6.968195069903959e17,-7.004487752559622e17,-7.040780435215287e17,-7.07707311787095e17,-7.113365800526615e17,-7.149658483182278e17,-7.185951165837943e17,-7.222243848493606e17,-7.258536531149271e17,-7.294829213804934e17,-7.331121896460599e17,-7.367414579116262e17,-7.403707261771927e17,-7.43999994442759e17,-7.476292627083255e17,-7.512585309738918e17,-7.548877992394583e17,-7.585170675050246e17,-7.621463357705911e17,-7.657756040361574e17,-7.694048723017239e17,-7.730341405672902e17,-7.766634088328567e17,-7.80292677098423e17,-7.839219453639895e17,-7.875512136295558e17,-7.911804818951223e17,-7.948097501606886e17,-7.984390184262551e17,-8.020682866918214e17,-8.056975549573879e17,-8.093268232229542e17,-8.129560914885207e17,-8.16585359754087e17,-8.202146280196535e17,-8.238438962852198e17,-8.274731645507863e17,-8.311024328163526e17,-8.347317010819191e17,-8.383609693474854e17,-8.419902376130519e17,-8.456195058786182e17,-8.492487741441847e17,-8.52878042409751e17,-8.565073106753175e17,-8.601365789408838e17,-8.637658472064503e17,-8.673951154720166e17,-8.710243837375831e17,-8.746536520031494e17,-8.782829202687159e17,-8.819121885342822e17,-8.855414567998487e17,-8.89170725065415e17,-8.927999933309815e17,-8.964292615965478e17,-9.000585298621143e17,-9.036877981276806e17,-9.073170663932471e17,-9.109463346588134e17,-9.145756029243799e17,-9.182048711899462e17,-9.218341394555127e17,-9.25463407721079e17,-9.290926759866455e17,-9.327219442522118e17,-9.363512125177783e17,-9.399804807833446e17,-9.436097490489111e17,-9.472390173144774e17,-9.508682855800439e17,-9.544975538456102e17,-9.581268221111767e17,-9.61756090376743e17,-9.653853586423095e17,-9.690146269078758e17,-9.726438951734423e17,-9.762731634390086e17,-9.799024317045751e17,-9.835316999701414e17,-9.871609682357079e17,-9.907902365012742e17,-9.944195047668407e17,-9.98048773032407e17,-1.0016780412979735e18,-1.0053073095635398e18,-1.0089365778291063e18,-1.0125658460946726e18,-1.0161951143602391e18,-1.0198243826258054e18,-1.0234536508913719e18,-1.0270829191569382e18,-1.0307121874225047e18,-1.034341455688071e18,-1.0379707239536375e18,-1.0415999922192038e18,-1.0452292604847703e18,-1.0488585287503366e18,-1.0524877970159031e18,-1.0561170652814694e18,-1.0597463335470359e18,-1.0633756018126022e18,-1.0670048700781687e18,-1.070634138343735e18,-1.0742634066093015e18,-1.0778926748748678e18,-1.0815219431404343e18,-1.0851512114060006e18,-1.0887804796715671e18,-1.0924097479371334e18,-1.0960390162026999e18,-1.0996682844682662e18,-1.1032975527338327e18,-1.106926820999399e18,-1.1105560892649655e18,-1.1141853575305318e18,-1.1178146257960983e18,-1.1214438940616646e18,-1.1250731623272311e18,-1.1287024305927974e18,-1.1323316988583639e18,-1.1359609671239302e18,-1.1395902353894967e18,-1.143219503655063e18,-1.1468487719206295e18,-1.1504780401861958e18,-1.1541073084517622e18,-1.1577365767173286e18,-1.161365844982895e18,-1.1649951132484616e18,-1.1686243815140278e18,-1.1722536497795942e18,-1.1758829180451607e18,-1.1795121863107272e18,-1.1831414545762934e18,-1.1867707228418598e18,-1.1903999911074263e18,-1.1940292593729928e18,-1.197658527638559e18,-1.2012877959041254e18,-1.204917064169692e18,-1.2085463324352584e18,-1.2121756007008246e18,-1.215804868966391e18,-1.2194341372319575e18,-1.223063405497524e18,-1.2266926737630902e18,-1.2303219420286566e18,-1.233951210294223e18,-1.2375804785597896e18,-1.2412097468253558e18,-1.2448390150909222e18,-1.2484682833564887e18,-1.2520975516220552e18,-1.2557268198876214e18,-1.2593560881531878e18,-1.2629853564187543e18,-1.2666146246843208e18,-1.270243892949887e18,-1.2738731612154534e18,-1.27750242948102e18,-1.2811316977465864e18,-1.2847609660121526e18,-1.288390234277719e18,-1.2920195025432855e18,-1.295648770808852e18,-1.2992780390744182e18,-1.3029073073399846e18,-1.306536575605551e18,-1.3101658438711176e18,-1.3137951121366838e18,-1.3174243804022502e18,-1.3210536486678167e18,-1.3246829169333832e18,-1.3283121851989494e18,-1.3319414534645158e18,-1.3355707217300823e18,-1.3391999899956488e18,-1.342829258261215e18,-1.3464585265267814e18,-1.350087794792348e18,-1.3537170630579144e18,-1.3573463313234806e18,-1.360975599589047e18,-1.3646048678546135e18,-1.36823413612018e18,-1.3718634043857462e18,-1.3754926726513126e18,-1.379121940916879e18,-1.3827512091824456e18,-1.3863804774480118e18,-1.3900097457135782e18,-1.3936390139791447e18,-1.3972682822447112e18,-1.4008975505102774e18,-1.4045268187758438e18,-1.4081560870414103e18,-1.4117853553069768e18,-1.415414623572543e18,-1.4190438918381094e18,-1.422673160103676e18,-1.4263024283692424e18,-1.4299316966348086e18,-1.433560964900375e18,-1.4371902331659415e18,-1.440819501431508e18,-1.4444487696970742e18,-1.4480780379626406e18,-1.451707306228207e18,-1.4553365744937736e18,-1.4589658427593398e18,-1.4625951110249062e18,-1.4662243792904727e18,-1.4698536475560392e18,-1.4734829158216054e18,-1.4771121840871718e18,-1.4807414523527383e18,-1.4843707206183048e18,-1.487999988883871e18,-1.4916292571494374e18,-1.495258525415004e18,-1.4988877936805704e18,-1.5025170619461366e18,-1.506146330211703e18,-1.5097755984772695e18,-1.513404866742836e18,-1.5170341350084022e18,-1.5206634032739686e18,-1.524292671539535e18,-1.5279219398051016e18,-1.5315512080706678e18,-1.5351804763362342e18,-1.5388097446018007e18,-1.5424390128673672e18,-1.5460682811329334e18,-1.5496975493984998e18,-1.5533268176640663e18,-1.5569560859296328e18,-1.560585354195199e18,-1.5642146224607654e18,-1.567843890726332e18,-1.5714731589918984e18,-1.5751024272574646e18,-1.578731695523031e18,-1.5823609637885975e18,-1.585990232054164e18,-1.5896195003197302e18,-1.5932487685852966e18,-1.596878036850863e18,-1.6005073051164296e18,-1.6041365733819958e18,-1.6077658416475622e18,-1.6113951099131287e18,-1.6150243781786952e18,-1.6186536464442614e18,-1.6222829147098278e18,-1.6259121829753943e18,-1.6295414512409608e18,-1.633170719506527e18,-1.6367999877720934e18,-1.64042925603766e18,-1.6440585243032264e18,-1.6476877925687926e18,-1.651317060834359e18,-1.6549463290999255e18,-1.658575597365492e18,-1.6622048656310582e18,-1.6658341338966246e18,-1.669463402162191e18,-1.6730926704277576e18,-1.6767219386933238e18,-1.6803512069588902e18,-1.6839804752244567e18,-1.6876097434900232e18,-1.6912390117555894e18,-1.6948682800211558e18,-1.6984975482867223e18,-1.7021268165522888e18,-1.705756084817855e18,-1.7093853530834214e18,-1.713014621348988e18,-1.7166438896145544e18,-1.7202731578801206e18,-1.723902426145687e18,-1.7275316944112535e18,-1.73116096267682e18,-1.7347902309423862e18,-1.7384194992079526e18,-1.742048767473519e18,-1.7456780357390856e18,-1.7493073040046518e18,-1.7529365722702182e18,-1.7565658405357847e18,-1.7601951088013512e18,-1.7638243770669174e18,-1.7674536453324838e18,-1.7710829135980503e18,-1.7747121818636168e18,-1.778341450129183e18,-1.7819707183947494e18,-1.785599986660316e18,-1.7892292549258824e18,-1.7928585231914486e18,-1.796487791457015e18,-1.8001170597225815e18,-1.803746327988148e18,-1.8073755962537142e18,-1.8110048645192806e18]}
},{}],96:[function(require,module,exports){
module.exports={"expected":[-6.420676210313675e-11,0.1789760851803783,0.8142458028436093,0.19193982117974873,0.8353033412901791,0.0606475831655485,0.6365188089862741,1.8405787232946678,-116.60350734583955,-1.7676177535241822,-6.0919123336476915,-1.2649026451185494,-0.4175725503248284,0.11115797903420481,0.7093442520940093,2.0831181244082067,-17.014464282089975,-1.577541041585868,-0.5457284644363137,0.006708559609617742,-1.2911676497918172,-0.4293353267960436,0.10107136381356235,0.6944561508499515,2.030944265837354,-20.504249031610325,-1.6128949237155519,-0.5587444847691144,-0.0032657740995204174,0.21415020689095363,0.8721790132560316,2.76264643162737,-6.237565531782868,-1.2746591936179128,-0.42196545199703933,0.10737857860325256,0.7037450168739802,2.0633304378668615,-18.173021755416542,-1.5906476961169558,-0.21445572996994883,0.30387756567057717,1.032272123258767,3.710462029805236,-4.033683599411698,-1.0749788523197985,-0.3261270479649738,0.1933729258335968,0.8376520069907234,2.599420961749166,-7.146924403919263,-1.3283924175339554,-0.44566847749380833,0.08724059192729668,0.6743260659382546,1.9625880566541516,-28.541201404756546,-1.6633866167681703,-0.5768734056810703,-0.016976418818782597,0.5324783912578204,1.5422951469768087,14.47557233993227,-2.1391338888811946,-0.7248900389504579,-0.12156340012905575,0.40556715829983414,1.238551673172306,5.723665966102232,-2.8883787977049677,-0.8971371635442151,-0.22883843697504858,0.2889638212484795,1.004348367379619,3.5178015576265267,-4.284322230549761,-1.1049736575432552,-0.34136322361763227,0.1791879922459079,0.8145873101550886,2.4967330984694325,-7.938473808567639,-1.3669982197130244,-0.4622024483885601,0.07344286534009538,0.654564774114416,1.8978139652745376,-46.91104119940962,-1.7162349627321867,-0.5952913710867501,-0.030693447184778892,0.5150088302524963,1.4969330786559325,12.06705391955472,-2.2178884051569487,-0.7460139284673087,-0.13549911030962664,0.3896904858671354,1.20439075117783,5.294492981408673,-3.021747905260053,-0.9221896554069567,-0.24331167513843752,0.27416777692739047,0.9771831590070986,3.3428695745982977,-4.566242047333659,-1.1358912280848423,-0.3567426819808765,0.16507258260303442,0.7920320918800604,2.400842558585001,-8.923362890801734,-1.4070787122623012,-0.47894729859474483,0.05967289647827157,0.6351550036982474,1.8363250861974625,-131.4952744563868,-1.7716302137836974,-0.6140124421338432,-0.04442202476110123,0.4977842346825138,1.453395478652674,10.342330431151174,-2.301582495256663,-0.7675743834239094,-0.14948669295377456,0.3739825576880992,1.1713396382192693,4.923408216318771,-3.1666449724669348,-0.9478837420355255,-0.2578817954106573,0.2594825470729242,0.9507361965526082,3.1832693230390987,-4.885817033751832,-1.167786986687064,-0.37227331855873885,0.15102091859864075,0.7699614510204089,2.3110633881787117,-10.18282161362798,-1.448735999060827,-0.4959135061308732,0.045925439856852095,0.616080351852782,1.777856239442616,163.81593762185844,-1.829783425953019,-0.6330513784233354,-0.058167334507204745,0.4807931462524001,1.4115590320273605,9.045972582038258,-2.3907305198467586,-0.7895934411168771,-0.16353172691265155,-1.080296478227484,1.1393332787410964,0.19082175035170562,-3.324694254648395,2.5804570454154385,-0.27255530741222367,-1.3352167749959232,0.9249698081616351,0.08476201036405867,-5.251278493127663,1.9507082301435128,-0.38796329968224236,-1.6726926263598338,0.7483519018572911,-0.019437618463844494,-11.850993051099765,1.5340137230785584,-0.513111996611586,-2.152925335490474,0.5973252250916653,-0.1240608936500684,50.46438541000314,1.2323359665984586,-0.6524236882750576,-2.9115300666195427,0.4640245885325898,-0.23142912657823686,8.03568335169086,0.9994183305382952,-0.812094438871402,-4.33245139568583,0.3430392708058564,-0.34411262672371423,4.313550088819176,0.8105025127286265,-1.0013391169588335,-8.09912405046264,0.23041790258319125,-0.46519185104495636,2.9024572153291306,0.6510558718327252,-1.2347568120628107,-53.03473649281356,0.12308620381692498,-0.5986285387057977,2.147526640864552,0.511899803281326,-1.5372376417086597,11.716728185991657,0.018477243667597943,-0.7498506547657995,1.669052373478851,0.38685918150393656,-1.9553300819063453,5.223982357452732,-0.08572901648127772,-0.9267527934939466,1.3325486200041408,0.27152423003901716,-2.587827943428468,3.3131592623135413,-0.19181692017455887,-1.1415419205856396,1.0782182097665631,0.16254617791836548,-3.688428168782982,2.384298113156865,-0.3022394132502452,-1.414435819187736,0.8753399374118727,0.05720411009520176,-6.166824247286235,1.8256164323647148,-0.41985542842467793,-1.7818575355467698,0.7064285947025549,-0.046887537116987475,-17.597984353037678,1.4457651554851798,-0.5482519537236191,-2.3171644882721547,0.5607148944992464,-0.15200298669072093,21.1566034458142,1.1655202796207427,-0.6922345365470807,-3.193990296111342,0.4311133848902395,-0.26050747235546806,6.562113041847524,0.9460627978933192,-0.8586427347925892,-4.947754399137203,0.3126727756820461,-0.3750772533505114,3.832719151083325,0.766049855551346,-1.0578133399420826,-10.44701835756835,0.20171828166296302,-0.4989827224348974,2.6630540694787457,0.6126912488026347,-1.3064212241222155,116.7552062942491,0.09533944906273012,-0.6365031528597023,2.0021817130331474,0.47776758925605095,-1.633529943054569,8.846616585372969,-0.00894314857750656,-0.7935955517525679,1.5697732234574528,0.3556608439495308,-2.0951045230634033,4.545356405085607,-0.1134206050699662,-0.9790616713786958,1.2591094835480137,0.24229504828644097,-2.815038954498995,3.0120500126469323,-0.22040127938367798,-1.2067460828430974,1.0206136854037267,0.13452158131243003,-4.134030365943058,2.2122180333583232,-0.33241972886979154,-1.500048829818073,0.8280370472496245,0.029732541068986585,-7.455088714800514,1.7124534310185233,-0.4524905564748221,-1.9022397969300942,0.6660988378927026,-0.07440814165927435,-34.066884266546396,1.3642478064212913,-0.5844647543617418,-2.5036943302292824,0.5252134670386235,-0.18017901769219355,13.371050875046729,1.1028437222582617,-0.733586213116487,-3.530685400785542,0.39897132239681266,-0.290004302481706,5.538033429041002,0.8954059395816926,-0.9074361577026142,-5.756255995513432,0.2828226398028634,-0.40668553401015456,3.443356074195878,0.7234265646991225,-0.0356196323636817,-14.680547701823793,0.1733344525849912,-3.540897919691867,-2.24733618146495,0.5755946023125852,-1.3834117189399369,0.8940440489207626,1.192403082651708,-0.6757235412824544,1.8719676420482865,-0.4075672878865219,-0.24853004283547112,7.097268158867767,-0.03637699465673619,-14.846157378745003,-4.67623594843911,0.32506524272151927,-2.2519204797578034,0.5745880619593958,0.7840554807221188,-1.0342571146799402,1.1905729078500746,-0.6768258527671253,-0.4850111813722519,2.75689140448799,-0.2493332956544288,7.058619361187872,-372.5879212488272,0.10670300381006931,-4.693593673510325,0.3242291411229007,0.4916591107160651,-1.5930080754369833,0.7828348417208191,-1.0358238153413222,-0.7754240305198238,1.6094427882278468,-0.4859458346873424,2.750399713730023,4.802145199048303,-0.10204129503569023,-518.7948654365093,0.10593807151116445,0.2542371157668814,-2.717728338980942,0.49072023836701684,-1.5956871377725732,-1.179485650160216,1.0438472160236452,-0.7766359228755031,1.60673044641082,2.2802113512658972,-0.3199740912016126,4.784012054328999,-0.1028056120232091,0.0409953699920166,-6.867877620773041,0.2534319984614483,-2.7240844619996882,-1.8513740177494928,0.6824616569045308,-1.1812959160560597,1.042267913800269,1.396935105429701,-0.5694715253100696,2.2755303360948713,-0.32080811627461714,-0.16858819646289322,15.751526860776535,0.040237740071367614,-6.904501094707355,-3.384994150407338,0.4120698402611163,-1.8547276611623646,0.6813535587051535,0.9158802854836741,-0.8871313315085669,1.394705054306038,-0.570473632282038,-0.39363559150367744,3.593810420378734,-0.16936617577094862,15.565322504070178,-12.590124994231214,0.18494418519453182,-3.394441488848301,0.4111852988588645,0.5906682560832964,-1.351136005667395,0.9144903849579661,-0.888483895636107,-0.6594616622526897,1.923726562241905,-0.394509434555761,3.583313537352817,7.725288914500969,-0.025117598894159193,-12.711936470146485,0.1841620408220336,0.3375486733835356,-2.185312761853851,0.5896484360587344,-1.3532754018622113,-1.011242714415946,1.2181363974340593,-0.6605475289360032,1.920176184321314,2.8567352969850988,-0.23741827233410062,7.6796582066941586,-0.025874472692467627,0.11809387102271514,-4.447520852921548,0.3367063247116187,-2.1896885497422973,-1.5539129393413083,0.8011389497941994,-1.012773753114332,1.2162593821379621,1.6505752585637048,-0.47211591369030403,2.849821067591263,-0.23821743339513507,-0.09068807908850958,-75.89011171092207,0.11732700867072106,-4.463291863702574,-2.626191185974673,0.5047556927998232,-1.5564987556784668,0.7998978556611389,1.0676328627458451,-0.7587579404772007,1.6477617022401332,-0.4730412189712612,-0.3076177265085863,5.068000232900733,-0.09145073435998863,-80.51243750131847,-6.364892433268007,0.2654378490034429,-2.632176134253001,0.5038069630078982,0.6990776573243773,-1.154702492472437,1.0660156318413991,-0.75995046664437,-0.5546691683334012,2.346853524578453,-0.30844587686217956,5.0478935318482465,19.157266959316033,0.05151017300072422,-6.396443157293967,0.2646283366966408,0.4252903579623051,-1.8058021977959704,0.69795221896911,-1.1564689305378826,-0.8672277627606326,1.42836406247101,-0.5556586726495789,2.341939921981764,3.756942173047923,-0.15781638342844145,18.88289337061289,0.05075181341807831,0.19660232565662022,-3.258758406041988,0.4243974546902928,-1.8090294912114004,-1.3198267262665448,0.935361765005411,-0.8685538778166971,1.426066972916663,1.977775181498455,-0.38156696760307607,3.745542142641102,-0.15859169666305212,-0.013864564037293463,-11.111731272046756],"x":[1.6470993291652855e6,3.629268267213499e15,7.258536532779899e15,1.0887804798346298e16,1.4517073063912698e16,1.81463413294791e16,2.17756095950455e16,2.54048778606119e16,2.90341461261783e16,3.26634143917447e16,3.6292682657311096e16,3.9921950922877496e16,4.3551219188443896e16,4.7180487454010296e16,5.0809755719576696e16,5.4439023985143096e16,5.8068292250709496e16,6.1697560516275896e16,6.5326828781842296e16,6.8956097047408696e16,7.25853653129751e16,7.62146335785415e16,7.98439018441079e16,8.34731701096743e16,8.71024383752407e16,9.07317066408071e16,9.43609749063735e16,9.79902431719399e16,1.016195114375063e17,1.0524877970307269e17,1.0887804796863909e17,1.1250731623420549e17,1.1613658449977189e17,1.1976585276533829e17,1.2339512103090469e17,1.2702438929647109e17,1.3065365756203749e17,1.3428292582760389e17,1.3791219409317029e17,1.4154146235873669e17,1.451707306243031e17,1.487999988898695e17,1.524292671554359e17,1.560585354210023e17,1.596878036865687e17,1.633170719521351e17,1.669463402177015e17,1.705756084832679e17,1.742048767488343e17,1.778341450144007e17,1.814634132799671e17,1.850926815455335e17,1.887219498110999e17,1.923512180766663e17,1.959804863422327e17,1.996097546077991e17,2.032390228733655e17,2.068682911389319e17,2.104975594044983e17,2.141268276700647e17,2.177560959356311e17,2.213853642011975e17,2.250146324667639e17,2.286439007323303e17,2.322731689978967e17,2.359024372634631e17,2.395317055290295e17,2.431609737945959e17,2.467902420601623e17,2.504195103257287e17,2.540487785912951e17,2.576780468568615e17,2.613073151224279e17,2.649365833879943e17,2.685658516535607e17,2.721951199191271e17,2.758243881846935e17,2.794536564502599e17,2.830829247158263e17,2.867121929813927e17,2.903414612469591e17,2.939707295125255e17,2.975999977780919e17,3.012292660436583e17,3.048585343092247e17,3.084878025747911e17,3.121170708403575e17,3.157463391059239e17,3.193756073714903e17,3.230048756370567e17,3.266341439026231e17,3.302634121681895e17,3.338926804337559e17,3.375219486993223e17,3.411512169648887e17,3.447804852304551e17,3.484097534960215e17,3.520390217615879e17,3.556682900271543e17,3.592975582927207e17,3.629268265582871e17,3.665560948238535e17,3.701853630894199e17,3.738146313549863e17,3.774438996205527e17,3.810731678861191e17,3.847024361516855e17,3.883317044172519e17,3.919609726828183e17,3.955902409483847e17,3.992195092139511e17,4.028487774795175e17,4.064780457450839e17,4.101073140106503e17,4.137365822762167e17,4.173658505417831e17,4.209951188073495e17,4.246243870729159e17,4.282536553384823e17,4.318829236040487e17,4.355121918696151e17,4.391414601351815e17,4.427707284007479e17,4.463999966663143e17,4.500292649318807e17,4.536585331974471e17,4.572878014630135e17,4.609170697285799e17,4.645463379941463e17,4.681756062597127e17,4.718048745252791e17,4.754341427908455e17,4.790634110564119e17,4.826926793219783e17,4.863219475875447e17,4.899512158531111e17,4.935804841186775e17,4.972097523842439e17,5.008390206498103e17,5.044682889153767e17,5.080975571809431e17,5.117268254465095e17,5.153560937120759e17,5.189853619776423e17,5.226146302432087e17,5.262438985087751e17,5.298731667743415e17,5.335024350399079e17,5.371317033054743e17,5.407609715710407e17,5.443902398366071e17,5.480195081021735e17,5.516487763677399e17,5.552780446333063e17,5.589073128988727e17,5.625365811644391e17,5.661658494300055e17,5.697951176955719e17,5.734243859611383e17,5.770536542267046e17,5.806829224922711e17,5.843121907578374e17,5.879414590234039e17,5.915707272889702e17,5.951999955545367e17,5.98829263820103e17,6.024585320856695e17,6.060878003512358e17,6.097170686168023e17,6.133463368823686e17,6.169756051479351e17,6.206048734135014e17,6.242341416790679e17,6.278634099446342e17,6.314926782102007e17,6.35121946475767e17,6.387512147413335e17,6.423804830068998e17,6.460097512724663e17,6.496390195380326e17,6.532682878035991e17,6.568975560691654e17,6.605268243347319e17,6.641560926002982e17,6.677853608658647e17,6.71414629131431e17,6.750438973969975e17,6.786731656625638e17,6.823024339281303e17,6.859317021936966e17,6.895609704592631e17,6.931902387248294e17,6.968195069903959e17,7.004487752559622e17,7.040780435215287e17,7.07707311787095e17,7.113365800526615e17,7.149658483182278e17,7.185951165837943e17,7.222243848493606e17,7.258536531149271e17,7.294829213804934e17,7.331121896460599e17,7.367414579116262e17,7.403707261771927e17,7.43999994442759e17,7.476292627083255e17,7.512585309738918e17,7.548877992394583e17,7.585170675050246e17,7.621463357705911e17,7.657756040361574e17,7.694048723017239e17,7.730341405672902e17,7.766634088328567e17,7.80292677098423e17,7.839219453639895e17,7.875512136295558e17,7.911804818951223e17,7.948097501606886e17,7.984390184262551e17,8.020682866918214e17,8.056975549573879e17,8.093268232229542e17,8.129560914885207e17,8.16585359754087e17,8.202146280196535e17,8.238438962852198e17,8.274731645507863e17,8.311024328163526e17,8.347317010819191e17,8.383609693474854e17,8.419902376130519e17,8.456195058786182e17,8.492487741441847e17,8.52878042409751e17,8.565073106753175e17,8.601365789408838e17,8.637658472064503e17,8.673951154720166e17,8.710243837375831e17,8.746536520031494e17,8.782829202687159e17,8.819121885342822e17,8.855414567998487e17,8.89170725065415e17,8.927999933309815e17,8.964292615965478e17,9.000585298621143e17,9.036877981276806e17,9.073170663932471e17,9.109463346588134e17,9.145756029243799e17,9.182048711899462e17,9.218341394555127e17,9.25463407721079e17,9.290926759866455e17,9.327219442522118e17,9.363512125177783e17,9.399804807833446e17,9.436097490489111e17,9.472390173144774e17,9.508682855800439e17,9.544975538456102e17,9.581268221111767e17,9.61756090376743e17,9.653853586423095e17,9.690146269078758e17,9.726438951734423e17,9.762731634390086e17,9.799024317045751e17,9.835316999701414e17,9.871609682357079e17,9.907902365012742e17,9.944195047668407e17,9.98048773032407e17,1.0016780412979735e18,1.0053073095635398e18,1.0089365778291063e18,1.0125658460946726e18,1.0161951143602391e18,1.0198243826258054e18,1.0234536508913719e18,1.0270829191569382e18,1.0307121874225047e18,1.034341455688071e18,1.0379707239536375e18,1.0415999922192038e18,1.0452292604847703e18,1.0488585287503366e18,1.0524877970159031e18,1.0561170652814694e18,1.0597463335470359e18,1.0633756018126022e18,1.0670048700781687e18,1.070634138343735e18,1.0742634066093015e18,1.0778926748748678e18,1.0815219431404343e18,1.0851512114060006e18,1.0887804796715671e18,1.0924097479371334e18,1.0960390162026999e18,1.0996682844682662e18,1.1032975527338327e18,1.106926820999399e18,1.1105560892649655e18,1.1141853575305318e18,1.1178146257960983e18,1.1214438940616646e18,1.1250731623272311e18,1.1287024305927974e18,1.1323316988583639e18,1.1359609671239302e18,1.1395902353894967e18,1.143219503655063e18,1.1468487719206295e18,1.1504780401861958e18,1.1541073084517622e18,1.1577365767173286e18,1.161365844982895e18,1.1649951132484616e18,1.1686243815140278e18,1.1722536497795942e18,1.1758829180451607e18,1.1795121863107272e18,1.1831414545762934e18,1.1867707228418598e18,1.1903999911074263e18,1.1940292593729928e18,1.197658527638559e18,1.2012877959041254e18,1.204917064169692e18,1.2085463324352584e18,1.2121756007008246e18,1.215804868966391e18,1.2194341372319575e18,1.223063405497524e18,1.2266926737630902e18,1.2303219420286566e18,1.233951210294223e18,1.2375804785597896e18,1.2412097468253558e18,1.2448390150909222e18,1.2484682833564887e18,1.2520975516220552e18,1.2557268198876214e18,1.2593560881531878e18,1.2629853564187543e18,1.2666146246843208e18,1.270243892949887e18,1.2738731612154534e18,1.27750242948102e18,1.2811316977465864e18,1.2847609660121526e18,1.288390234277719e18,1.2920195025432855e18,1.295648770808852e18,1.2992780390744182e18,1.3029073073399846e18,1.306536575605551e18,1.3101658438711176e18,1.3137951121366838e18,1.3174243804022502e18,1.3210536486678167e18,1.3246829169333832e18,1.3283121851989494e18,1.3319414534645158e18,1.3355707217300823e18,1.3391999899956488e18,1.342829258261215e18,1.3464585265267814e18,1.350087794792348e18,1.3537170630579144e18,1.3573463313234806e18,1.360975599589047e18,1.3646048678546135e18,1.36823413612018e18,1.3718634043857462e18,1.3754926726513126e18,1.379121940916879e18,1.3827512091824456e18,1.3863804774480118e18,1.3900097457135782e18,1.3936390139791447e18,1.3972682822447112e18,1.4008975505102774e18,1.4045268187758438e18,1.4081560870414103e18,1.4117853553069768e18,1.415414623572543e18,1.4190438918381094e18,1.422673160103676e18,1.4263024283692424e18,1.4299316966348086e18,1.433560964900375e18,1.4371902331659415e18,1.440819501431508e18,1.4444487696970742e18,1.4480780379626406e18,1.451707306228207e18,1.4553365744937736e18,1.4589658427593398e18,1.4625951110249062e18,1.4662243792904727e18,1.4698536475560392e18,1.4734829158216054e18,1.4771121840871718e18,1.4807414523527383e18,1.4843707206183048e18,1.487999988883871e18,1.4916292571494374e18,1.495258525415004e18,1.4988877936805704e18,1.5025170619461366e18,1.506146330211703e18,1.5097755984772695e18,1.513404866742836e18,1.5170341350084022e18,1.5206634032739686e18,1.524292671539535e18,1.5279219398051016e18,1.5315512080706678e18,1.5351804763362342e18,1.5388097446018007e18,1.5424390128673672e18,1.5460682811329334e18,1.5496975493984998e18,1.5533268176640663e18,1.5569560859296328e18,1.560585354195199e18,1.5642146224607654e18,1.567843890726332e18,1.5714731589918984e18,1.5751024272574646e18,1.578731695523031e18,1.5823609637885975e18,1.585990232054164e18,1.5896195003197302e18,1.5932487685852966e18,1.596878036850863e18,1.6005073051164296e18,1.6041365733819958e18,1.6077658416475622e18,1.6113951099131287e18,1.6150243781786952e18,1.6186536464442614e18,1.6222829147098278e18,1.6259121829753943e18,1.6295414512409608e18,1.633170719506527e18,1.6367999877720934e18,1.64042925603766e18,1.6440585243032264e18,1.6476877925687926e18,1.651317060834359e18,1.6549463290999255e18,1.658575597365492e18,1.6622048656310582e18,1.6658341338966246e18,1.669463402162191e18,1.6730926704277576e18,1.6767219386933238e18,1.6803512069588902e18,1.6839804752244567e18,1.6876097434900232e18,1.6912390117555894e18,1.6948682800211558e18,1.6984975482867223e18,1.7021268165522888e18,1.705756084817855e18,1.7093853530834214e18,1.713014621348988e18,1.7166438896145544e18,1.7202731578801206e18,1.723902426145687e18,1.7275316944112535e18,1.73116096267682e18,1.7347902309423862e18,1.7384194992079526e18,1.742048767473519e18,1.7456780357390856e18,1.7493073040046518e18,1.7529365722702182e18,1.7565658405357847e18,1.7601951088013512e18,1.7638243770669174e18,1.7674536453324838e18,1.7710829135980503e18,1.7747121818636168e18,1.778341450129183e18,1.7819707183947494e18,1.785599986660316e18,1.7892292549258824e18,1.7928585231914486e18,1.796487791457015e18,1.8001170597225815e18,1.803746327988148e18,1.8073755962537142e18,1.8110048645192806e18]}
},{}],97:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PI = require( '@stdlib/constants/float64/pi' );
var EPS = require( '@stdlib/constants/float64/eps' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var tan = require( './../lib' );


// FIXTURES //

var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargeNegative = require( './fixtures/julia/very_large_negative.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyNegative = require( './fixtures/julia/tiny_negative.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.true( typeof tan, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the tangent (huge negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (huge positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (very large positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = veryLargePositive.x;
	expected = veryLargePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (very large negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = veryLargeNegative.x;
	expected = veryLargeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (large positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (large negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (medium positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (medium negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (small positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = smallPositive.x;
	expected = smallPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (small negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = smallNegative.x;
	expected = smallNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (smaller values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = smaller.x;
	expected = smaller.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (tiny positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = tinyPositive.x;
	expected = tinyPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (tiny negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = tinyNegative.x;
	expected = tinyNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the tangent (subnormal values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = subnormal.x;
	expected = subnormal.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = tan( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'if provided a multiple of `-pi/2`, the function does not return `-infinity`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;

	// NOTE: does not equal -inf due to approx errors. Comparing to Julia: -1.633123935319537e16
	x = -PI / 2.0;
	v = tan( x );
	expected = -1.633123935319537e16;

	delta = abs( v - expected );
	tol = EPS * abs( expected );

	t.ok( delta <= tol, 'within tolerance. x: '+x+'. v: '+v+'. E: '+expected+'. Δ: '+delta+'. tol: '+tol+'.' );
	t.end();
});

tape( 'if provided a multiple of `pi/2`, the function does not return `+infinity`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;

	// NOTE: does not equal +inf due to approx errors. Comparing to Julia: +1.633123935319537e16
	x = PI / 2.0;
	v = tan( x );
	expected = 1.633123935319537e16;

	delta = abs( v - expected );
	tol = EPS * abs( expected );

	t.ok( delta <= tol, 'within tolerance. x: '+x+'. v: '+v+'. E: '+expected+'. Δ: '+delta+'. tol: '+tol+'.' );
	t.end();
});

tape( ' if provided a `NaN`, the function returns `NaN`', function test( t ) {
	var v = tan( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `+infinity`, the function returns `NaN`', function test( t ) {
	var v = tan( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `-infinity`, the function returns `NaN`', function test( t ) {
	var v = tan( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/tan/test/test.js")
},{"./../lib":81,"./fixtures/julia/huge_negative.json":83,"./fixtures/julia/huge_positive.json":84,"./fixtures/julia/large_negative.json":85,"./fixtures/julia/large_positive.json":86,"./fixtures/julia/medium_negative.json":87,"./fixtures/julia/medium_positive.json":88,"./fixtures/julia/small_negative.json":89,"./fixtures/julia/small_positive.json":90,"./fixtures/julia/smaller.json":91,"./fixtures/julia/subnormal.json":92,"./fixtures/julia/tiny_negative.json":93,"./fixtures/julia/tiny_positive.json":94,"./fixtures/julia/very_large_negative.json":95,"./fixtures/julia/very_large_positive.json":96,"@stdlib/constants/float64/eps":46,"@stdlib/constants/float64/ninf":52,"@stdlib/constants/float64/pi":53,"@stdlib/constants/float64/pinf":54,"@stdlib/math/base/assert/is-nan":61,"@stdlib/math/base/special/abs":63,"tape":231}],98:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var Number = require( './number.js' );


// EXPORTS //

module.exports = Number;

},{"./number.js":99}],99:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],100:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './main.js' );


// EXPORTS //

module.exports = exponent;

},{"./main.js":101}],101:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var EXP_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return (high - BIAS)|0; // asm type annotation
}


// EXPORTS //

module.exports = exponent;

},{"@stdlib/constants/float64/exponent-bias":47,"@stdlib/constants/float64/high-word-exponent-mask":48,"@stdlib/number/float64/base/get-high-word":106}],102:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var fromWords = require( './main.js' );


// EXPORTS //

module.exports = fromWords;

},{"./main.js":104}],103:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":38}],104:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":103,"@stdlib/array/float64":6,"@stdlib/array/uint32":11}],105:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":38}],106:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './main.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./main.js":107}],107:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":105,"@stdlib/array/float64":6,"@stdlib/array/uint32":11}],108:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './main.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./main.js":110}],109:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":38}],110:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
}


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":109,"@stdlib/array/float64":6,"@stdlib/array/uint32":11}],111:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var normalize = require( './main.js' );


// EXPORTS //

module.exports = normalize;

},{"./main.js":112}],112:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './normalize.js' );


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":113}],113:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

module.exports = normalize;

},{"@stdlib/constants/float64/smallest-normal":55,"@stdlib/math/base/assert/is-infinite":59,"@stdlib/math/base/assert/is-nan":61,"@stdlib/math/base/special/abs":63}],114:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-low-word
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
*
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var setLowWord = require( '@stdlib/number/float64/base/set-low-word' );
* var PINF = require( '@stdlib/constants/float64/pinf' );
* var NINF = require( '@stdlib/constants/float64/ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/

// MODULES //

var setLowWord = require( './main.js' );


// EXPORTS //

module.exports = setLowWord;

},{"./main.js":116}],115:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":38,"dup":109}],116:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
* @returns {number} double having the same higher order word as `x`
*
* @example
* var low = 5 >>> 0; // => 00000000000000000000000000000101
*
* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
*
* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
* // returns 3.139998651394392e+201
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' );
* var NINF = require( '@stdlib/constants/float64/ninf' );
*
* var low = 12345678;
*
* var y = setLowWord( PINF, low );
* // returns NaN
*
* y = setLowWord( NINF, low );
* // returns NaN
*
* y = setLowWord( NaN, low );
* // returns NaN
*/
function setLowWord( x, low ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setLowWord;

},{"./low.js":115,"@stdlib/array/float64":6,"@stdlib/array/uint32":11}],117:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var toWords = require( './main.js' );


// EXPORTS //

module.exports = toWords;

},{"./main.js":119}],118:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":38,"dup":103}],119:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './to_words.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":120}],120:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ 0 ] = UINT32_VIEW[ HIGH ];
	out[ 1 ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":118,"@stdlib/array/float64":6,"@stdlib/array/uint32":11}],121:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":122,"./polyfill.js":123,"@stdlib/assert/has-tostringtag-support":24}],122:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":124}],123:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":124,"./tostringtag.js":125,"@stdlib/assert/has-own-property":20}],124:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],125:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],126:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],127:[function(require,module,exports){

},{}],128:[function(require,module,exports){
arguments[4][127][0].apply(exports,arguments)
},{"dup":127}],129:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":126,"buffer":129,"ieee754":217}],130:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],131:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":223}],132:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":130,"inherits":218,"readable-stream/lib/_stream_duplex.js":134,"readable-stream/lib/_stream_passthrough.js":135,"readable-stream/lib/_stream_readable.js":136,"readable-stream/lib/_stream_transform.js":137,"readable-stream/lib/_stream_writable.js":138,"readable-stream/lib/internal/streams/end-of-stream.js":142,"readable-stream/lib/internal/streams/pipeline.js":144}],133:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],134:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":136,"./_stream_writable":138,"_process":223,"inherits":218}],135:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":137,"inherits":218}],136:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":133,"./_stream_duplex":134,"./internal/streams/async_iterator":139,"./internal/streams/buffer_list":140,"./internal/streams/destroy":141,"./internal/streams/from":143,"./internal/streams/state":145,"./internal/streams/stream":146,"_process":223,"buffer":129,"events":130,"inherits":218,"string_decoder/":230,"util":127}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":133,"./_stream_duplex":134,"inherits":218}],138:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":133,"./_stream_duplex":134,"./internal/streams/destroy":141,"./internal/streams/state":145,"./internal/streams/stream":146,"_process":223,"buffer":129,"inherits":218,"util-deprecate":239}],139:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":142,"_process":223}],140:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":129,"util":127}],141:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":223}],142:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":133}],143:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],144:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":133,"./end-of-stream":142}],145:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":133}],146:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":130}],147:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":148,"get-intrinsic":212}],148:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":211,"get-intrinsic":212}],149:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":150,"./lib/keys.js":151}],150:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],151:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],152:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = require('has-property-descriptors')();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"has-property-descriptors":213,"object-keys":221}],153:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],154:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":184,"./ToPrimitive":186,"./Type":191}],155:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = GetIntrinsic('%TypeError%');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (Type(LeftFirst) !== 'Boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = Type(px) === 'String' && Type(py) === 'String';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":200,"../helpers/isNaN":202,"../helpers/isPrefixOf":203,"./ToNumber":184,"./ToPrimitive":186,"./Type":191,"get-intrinsic":212}],156:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

},{"get-intrinsic":212}],157:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":160,"./InLeapYear":164,"./MonthFromTime":174,"get-intrinsic":212}],158:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":207,"./floor":195}],159:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":195}],160:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":158,"./DayFromYear":159,"./YearFromTime":193}],161:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":196}],162:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	}
	throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');

};

},{"../helpers/assertRecord":199,"./IsAccessorDescriptor":165,"./IsDataDescriptor":167,"./Type":191,"get-intrinsic":212}],163:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":207,"./floor":195,"./modulo":196}],164:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":161,"./YearFromTime":193,"get-intrinsic":212}],165:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":199,"./Type":191,"has":216}],166:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":219}],167:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":199,"./Type":191,"has":216}],168:[function(require,module,exports){
'use strict';

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"../helpers/assertRecord":199,"./IsAccessorDescriptor":165,"./IsDataDescriptor":167,"./Type":191}],169:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor({
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor,
		Type: Type
	}, Desc);
};

},{"../helpers/isPropertyDescriptor":204,"./IsAccessorDescriptor":165,"./IsDataDescriptor":167,"./Type":191}],170:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":200,"../helpers/timeConstants":207}],171:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":200,"./DateFromTime":157,"./Day":158,"./MonthFromTime":174,"./ToInteger":183,"./YearFromTime":193,"./floor":195,"./modulo":196,"get-intrinsic":212}],172:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":200,"../helpers/timeConstants":207,"./ToInteger":183}],173:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":207,"./floor":195,"./modulo":196}],174:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":160,"./InLeapYear":164}],175:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":202}],176:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":207,"./floor":195,"./modulo":196}],177:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":191}],178:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":200,"./ToNumber":184,"./abs":194,"get-intrinsic":212}],179:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":207,"./DayFromYear":159}],180:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":207,"./modulo":196}],181:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],182:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":184}],183:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":200,"../helpers/isNaN":202,"../helpers/sign":206,"./ToNumber":184,"./abs":194,"./floor":195}],184:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":186}],185:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Object = GetIntrinsic('%Object%');

var CheckObjectCoercible = require('./CheckObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = function ToObject(value) {
	CheckObjectCoercible(value);
	return $Object(value);
};

},{"./CheckObjectCoercible":156,"get-intrinsic":212}],186:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":208}],187:[function(require,module,exports){
'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (has(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (has(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (has(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (has(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (has(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (has(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":166,"./ToBoolean":181,"./Type":191,"get-intrinsic":212,"has":216}],188:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":212}],189:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":200,"../helpers/isNaN":202,"../helpers/sign":206,"./ToNumber":184,"./abs":194,"./floor":195,"./modulo":196}],190:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":184}],191:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],192:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":158,"./modulo":196}],193:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":147,"get-intrinsic":212}],194:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":212}],195:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],196:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":205}],197:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":207,"./modulo":196}],198:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":154,"./5/AbstractRelationalComparison":155,"./5/CheckObjectCoercible":156,"./5/DateFromTime":157,"./5/Day":158,"./5/DayFromYear":159,"./5/DayWithinYear":160,"./5/DaysInYear":161,"./5/FromPropertyDescriptor":162,"./5/HourFromTime":163,"./5/InLeapYear":164,"./5/IsAccessorDescriptor":165,"./5/IsCallable":166,"./5/IsDataDescriptor":167,"./5/IsGenericDescriptor":168,"./5/IsPropertyDescriptor":169,"./5/MakeDate":170,"./5/MakeDay":171,"./5/MakeTime":172,"./5/MinFromTime":173,"./5/MonthFromTime":174,"./5/SameValue":175,"./5/SecFromTime":176,"./5/StrictEqualityComparison":177,"./5/TimeClip":178,"./5/TimeFromYear":179,"./5/TimeWithinDay":180,"./5/ToBoolean":181,"./5/ToInt32":182,"./5/ToInteger":183,"./5/ToNumber":184,"./5/ToObject":185,"./5/ToPrimitive":186,"./5/ToPropertyDescriptor":187,"./5/ToString":188,"./5/ToUint16":189,"./5/ToUint32":190,"./5/Type":191,"./5/WeekDay":192,"./5/YearFromTime":193,"./5/abs":194,"./5/floor":195,"./5/modulo":196,"./5/msFromTime":197}],199:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var isMatchRecord = require('./isMatchRecord');

var predicates = {
	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
	'Property Descriptor': function isPropertyDescriptor(Desc) {
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},
	// https://262.ecma-international.org/13.0/#sec-match-records
	'Match Record': isMatchRecord
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
	var predicate = predicates[recordType];
	if (typeof predicate !== 'function') {
		throw new $SyntaxError('unknown record type: ' + recordType);
	}
	if (Type(value) !== 'Object' || !predicate(value)) {
		throw new $TypeError(argumentName + ' must be a ' + recordType);
	}
};

},{"./isMatchRecord":201,"get-intrinsic":212,"has":216}],200:[function(require,module,exports){
'use strict';

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],201:[function(require,module,exports){
'use strict';

var has = require('has');

// https://262.ecma-international.org/13.0/#sec-match-records

module.exports = function isMatchRecord(record) {
	return (
		has(record, '[[StartIndex]]')
        && has(record, '[[EndIndex]]')
        && record['[[StartIndex]]'] >= 0
        && record['[[EndIndex]]'] >= record['[[StartIndex]]']
        && String(parseInt(record['[[StartIndex]]'], 10)) === String(record['[[StartIndex]]'])
        && String(parseInt(record['[[EndIndex]]'], 10)) === String(record['[[EndIndex]]'])
	);
};

},{"has":216}],202:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],203:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":147}],204:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var has = require('has');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
	if (ES.Type(Desc) !== 'Object') {
		return false;
	}
	var allowed = {
		'[[Configurable]]': true,
		'[[Enumerable]]': true,
		'[[Get]]': true,
		'[[Set]]': true,
		'[[Value]]': true,
		'[[Writable]]': true
	};

	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
		if (has(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"get-intrinsic":212,"has":216}],205:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],206:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],207:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],208:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":209,"is-callable":219}],209:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],210:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],211:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":210}],212:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":211,"has":216,"has-symbols":214}],213:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;

},{"get-intrinsic":212}],214:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":215}],215:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],216:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":211}],217:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],218:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],219:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};

},{}],220:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":222}],221:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":220,"./isArguments":222}],222:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],223:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],224:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":223,"through":237,"timers":238}],225:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":129}],226:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":198,"function-bind":211}],227:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":226,"./polyfill":228,"./shim":229,"define-properties":152,"function-bind":211}],228:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":226}],229:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":228,"define-properties":152}],230:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":225}],231:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":232,"./lib/results":234,"./lib/test":235,"_process":223,"defined":153,"through":237,"timers":238}],232:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":223,"fs":128,"through":237}],233:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":223,"timers":238}],234:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":223,"events":130,"function-bind":211,"has":216,"inherits":218,"object-inspect":236,"resumer":224,"through":237,"timers":238}],235:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":233,"deep-equal":149,"defined":153,"events":130,"has":216,"inherits":218,"path":131,"string.prototype.trim":227}],236:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],237:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":223,"stream":132}],238:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":223,"timers":238}],239:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[97]);
