// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './float64array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float64array.js":1,"./polyfill.js":3,"@stdlib/assert/has-float64array-support":14}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './uint16array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":5,"./uint16array.js":6,"@stdlib/assert/has-uint16array-support":22}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":8,"./uint32array.js":9,"@stdlib/assert/has-uint32array-support":25}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './uint8array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":11,"./uint8array.js":12,"@stdlib/assert/has-uint8array-support":28}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":15}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":13,"@stdlib/assert/is-float64array":31}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './main.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./main.js":17}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './main.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./main.js":19}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './main.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":18}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":24,"@stdlib/assert/is-uint16array":36,"@stdlib/constants/uint16/max":51}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":26}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":27,"@stdlib/assert/is-uint32array":38,"@stdlib/constants/uint32/max":52}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":29}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":30,"@stdlib/assert/is-uint8array":40,"@stdlib/constants/uint8/max":53}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":109}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":4,"@stdlib/array/uint8":10}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":35}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":33}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":37}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":109}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":39}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":109}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":41}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":109}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/float64/eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/float64/exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/float64/exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":89}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/float64/smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './main.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./main.js":55}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './main.js' );


// EXPORTS //

module.exports = isnan;

},{"./main.js":57}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './main.js' );


// EXPORTS //

module.exports = abs;

},{"./main.js":59}],59:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toWords = require( '@stdlib/number/float64/base/to-words' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = copysign;

},{"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/get-high-word":97,"@stdlib/number/float64/base/to-words":105}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":60}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Scratch array for storing temporary values:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return kernelCos( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = rempio2( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return kernelCos( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -kernelSin( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -kernelCos( buffer[ 0 ], buffer[ 1 ] );
	default:
		return kernelSin( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

module.exports = cos;

},{"@stdlib/math/base/special/kernel-cos":75,"@stdlib/math/base/special/kernel-sin":79,"@stdlib/math/base/special/rempio2":83,"@stdlib/number/float64/base/get-high-word":97}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":62}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a double-precision floating-point number toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './main.js' );


// EXPORTS //

module.exports = floor;

},{"./main.js":65}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a double-precision floating-point number toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = floor;

},{}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the half-value versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed cosine
*
* @example
* var v = havercos( 0.0 );
* // returns 1.0
*
* @example
* var v = havercos( 3.141592653589793/2.0 );
* // returns 0.5
*
* @example
* var v = havercos( -3.141592653589793/6.0 );
* // returns ~0.9330
*
* @example
* var v = havercos( NaN );
* // returns NaN
*/
function havercos( x ) {
	return (1.0 + cos( x )) / 2.0;
}


// EXPORTS //

module.exports = havercos;

},{"@stdlib/math/base/special/cos":63}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value versed cosine.
*
* @module @stdlib/math/base/special/havercos
*
* @example
* var havercos = require( '@stdlib/math/base/special/havercos' );
*
* var v = havercos( 0.0 );
* // returns 1.0
*
* v = havercos( 3.141592653589793/2.0 );
* // returns 0.5
*
* v = havercos( -3.141592653589793/6.0 );
* // returns ~0.9330
*
* v = havercos( NaN );
* // returns NaN
*/

// MODULES //

var havercos = require( './havercos.js' );


// EXPORTS //

module.exports = havercos;

},{"./havercos.js":66}],68:[function(require,module,exports){
module.exports={"expected":[0.544816368443462,0.5361028379285638,0.005213659625984579,0.9096661561750896,0.9792540904828442,0.999737544882813,0.6713054380610919,0.8109517795055019,0.9187379329781524,0.9836201054000886,0.9989504550620061,0.30969044095050924,0.11738221243721042,0.07481676762453426,0.38676403671055326,0.9976395568405839,0.7013658260592628,0.12801073980507993,0.935553625388771,0.5932914517746467,0.9958062264263319,0.7160867612439871,0.14487091306244648,0.05479989623015702,0.585585485437776,0.9947331274629203,0.7231231243729972,0.1504277923358312,0.051289533528355746,0.5695812860487838,0.9905805141299711,0.7448328585136144,0.16219278361811718,0.04437875808443925,0.5535040388014558,0.9871936183075949,0.7588278423572072,0.1743124118306516,0.03481317989688493,0.5373706219190333,0.983295256652476,0.7725511034340116,0.18677395353966347,0.03199892163674273,0.5044666735564018,0.9812284049493826,0.7928125295867159,0.19291715810503174,0.029299501270479034,0.49663438059351517,0.9790434696369688,0.7991251298305935,0.19913571451987178,0.021583837840133624,0.488802913484803,0.9714292902077825,0.8053643308848024,0.23311673304994918,0.019366221472810696,0.46426250327165286,0.9626769633761068,0.8244433751638134,0.2397725144317901,0.017266542805644325,0.45645486175870487,0.9596510305655439,0.8303628643387118,0.24649215031686528,0.01145072867227076,0.4486579053321711,0.9494304868785859,0.8362012892227138,0.26796740791714924,0.006814393828155241,0.4242896203502683,0.9459430732738102,0.8655951103905917,0.2749335206960881,0.005586253530461327,0.41655716009446253,0.9342972204111306,0.8708930786819604,0.29713641593238904,0.006992048841114817,0.3924422247246916,0.9303629668013247,0.8761000373966867,0.30431976061157306,7.980469063784135e-5,0.3848067228976927,0.9263231109205077,0.881214708853586,0.3429567099318853,1.2123946152575726e-6,0.37719948714516033,0.9221786440666966,0.8862358380168791,0.3504116886020341,4.530957595721974e-5,0.36962238412717796,0.9179305832073018,0.9111210158319759,0.35790337318467746,0.000212085414117269,0.36207727310987237,0.8938555236880781,0.9155280968631022,0.36542992537362595,0.0005014989857152208,0.3228879185487179,0.8889823026632544,0.9198332157969231,0.3729894983068924,0.0009134792745792986,0.28490671271172835,0.884013633336153,0.924035316245293,0.3805802370198743,0.005108674689634496,0.27786279088199495,0.8562798897557411,0.9281333670986962,0.42105401475074783,0.006286121829165547,0.27087337698061154,0.8507411170264862,0.9321263627792593,0.4287975158267774,0.007584716257814039,0.2639401860668142,0.8451162795998661,0.9514089809572311,0.43655848853631246,0.009004139327063787,0.25706491940386733,0.8140835403436044,0.9547215620594209,0.4443350284953642,0.010544042739521253,0.2502492640416091,0.8079510501436908,0.9703279722831524,0.4521252275000591,0.012204048634380349,0.21535649515474642,0.8017429950537562,0.9729281685403598,0.45992717399487315,0.022928246346826053,0.2089523792228225,0.7954608984035634,0.9754123178965195,0.5346391389660358,0.02533130124063082,0.2026196804250328,0.7891063016911597,0.9777798107921811,0.5424481290627815,0.027850830126004644,0.1963599526761568,0.7544563026273365,0.9800300662930038,0.5502467032567313,0.05764059750646233,0.16461453496302658,0.7180705605534609,0.9722273596235269,0.5246788192782394,0.046274700088695,0.18406553607934323,0.7408491327761522,0.9841766853465562,0.5658049525191566,0.06515821788128673,0.15316302434844825,0.7038694795724695,0.9996808067126033,0.5403098122154149,0.053077964358275775,0.1720811958857557,0.7270055796197579,0.9981080964697231,0.5812986169852973,0.07310261719658662,0.09865037982167202,0.6894683092622896,0.9999951504274185,0.5559012427654061,0.0603198638296466,0.11446434312488812,0.7129392300239777,0.9992248569772644,0.5967124902744032,0.08146599835819612,0.08950665162757931,0.6748811837665555,0.9998187699080018,0.6998400142723364,0.06799329088272454,0.10468065404168564,0.6986638895199816,0.9998516492612333,0.6760819586348632,0.09024015305886929,0.08076580540917216,0.6601224197361034,0.9991518382644226,0.714098770220783,0.07609071437123494,0.09528495428829309,0.6204886941584409,0.9999878581513357,0.6906543971306867,0.09941646983438934,0.07243641993979155,0.580033069470729,0.9979950100620698,0.7281473972210253,0.12547475758402227,0.08628646534928403,0.6052289271408307,0.9996333499642687,0.7050397163455432,0.15408782414989802,0.06452667016133956,0.5645335455559597,0.9963494206792232,0.7419721071358765,0.18506048894589983,0.045737403824624934,0.5898658823521337,0.9987884726349241,0.7192237976929827,0.16556670779431548,0.05704431916091757,0.5489706846774255,0.9796696954698001,0.7555593315933622,0.19737975869894525,0.039416188265393226,0.5077414393774523,0.9862736581784807,0.7331927200930678,0.1773738236647437,0.02492987434790056,0.5333597611292481,0.9750135739939423,0.7688957353035069,0.20999603750507578,0.013684194053435461,0.4920773246919493,0.98239035556693,0.7469327736353282,0.18949758357299912,0.02027917500975207,0.5177160963770405,0.9698912466515901,0.8345680143731057,0.22289694301668123,0.010283691460499678,0.4764209857794119,0.9541868312123443,0.8150802723553835,0.20192608855807792,0.0160993015071888,0.5020550440205316,0.9643077407918296,0.8460430334491683,0.23606981353699785,0.007363824850320111,0.39459388125909045,0.9474146551845575,0.8270867960070392,0.21464714056448664,0.012394356210447655,0.4197880147119397,0.9582685363910866,0.857178425825941,0.24950172044703156,0.004927459949304547,0.3793353971384079,0.9402033604695956,0.8848336060479273,0.286065044162112,0.009167975367684378,0.40436803753119765,0.9517795606747598,0.8679632625836282,0.32408769940235954,0.002976987947246157,0.3641953402560447,0.8952083386904754,0.8946442103957558,0.36331031920623513,0.006423325536148661,0.3890419191039065,0.9103898325348587,0.878386958858048,0.33883487024022285,0.0015143231504712862,0.34918856994176334,0.8854202156228869,0.9040674880309651,0.3784429589826198,0.004799479793233363,0.3738247013714182,0.9012414943276511,0.8884392842292292,0.35374021788203847,0.001907689354340436,0.33432981471015927,0.875253818806028,0.9130941904024493,0.39369490188788037,0.007207374643722231,0.3587313193936279,0.8916993544508117,0.9349312243277397,0.36878911335530296,5.767717776078429e-5,0.2589920397870987,0.8647191261312617,0.9217154581810626,0.47550221958645217,0.010098924752680039,0.28176634348859275,0.7827273638977587,0.9073907326896921,0.4499336406322676,0.00561752694388562,0.19021907752040262,0.8034960199677491,0.8919947167080315,0.4244967181208303,0.00243617648387201,0.21074583128112662,0.8234665911184147,0.9495222604346392,0.3992583419713311,0.02464385438708172,0.23203321903609841,0.7340059897106072,0.9377082505327126,0.37428487999773774,0.01732116710419379,0.2540252626438555,0.7563495019047142,0.9794092572437119,0.4811835507164604,0.011267750823450828,0.16625105880459823,0.7780189074941666,0.9987236343878318,0.4555948748209173,0.006499523843368049,0.1857754472163921,0.7989572237685704,0.9962376316041668,0.4301229683668645,0.03528483377473368,0.20612613271400881,0.7058782996657011,0.9924467030747641,0.4048348132686269,0.026437860494888277,0.22724960034461544,0.7289655017776162,0.9873608175724927,0.6443260704691525,0.01883618460623232,0.14359296085884254,0.7514506073149739,0.9999806018037476,0.6195957675159982,0.012499795770867517,0.16203835326091226,0.773274488571122,0.9990974395537002,0.5945509708884961,0.047749759168670414,0.1813724627328181,0.6769425643282214,0.9969018312958806,0.6978194472301729,0.03741322310030615,0.2015444475495194,0.700682842121206,0.9933995506870222,0.6740191562320063,0.02829312318343402,0.12233371374236701,0.723895396519725,0.9992752110093921,0.6497612577031802,0.1597441252174706,0.13962771439157518,0.7465191868893529,0.999998355588827,0.6251095411556378,0.14141029421465295,0.15786936399682983,0.6473123526598534,0.9994066850766996,0.7261856311223863,0.12401942462675875,0.08752715717850545,0.6716125286608754,0.9975017553527643,0.7030292396568805,0.10761724815977053,0.10255675720857954,0.6954614256925522,0.996610230571009,0.679338954618835,0.18335313364020667,0.046661942302548276,0.7187963297691597,0.9989368437324071,0.6551770729017161,0.1639328975593441,0.05807010168002524,0.6171039593506906,0.9999514331950407,0.7536640661125881,0.1453963965810624,0.018145196813887987,0.6418686585597708,0.9996513309550608,0.7312424599756091,0.1277923750081349,0.02562116883562615,0.6662602944353239,0.9919961201868839,0.7082127696863777,0.20820493943491308,0.03434458585265432,0.5610766288269875,0.9959170702790912,0.6846355550127566,0.18777452015257678,0.04429250842884097,0.45304091177391137,0.9985339375860693,0.7801469029515995,0.1681651411162433,0.01073277632389441,0.47862093360540753,0.9786745310524904,0.7585480840030829,0.1494283679104889,0.01665831400809248,0.504257174660077,0.9854509896344017,0.7362693769730518,0.2342020025271042,0.02385486575867657,0.3967475824919827,0.9909508874431612,0.8254180251359675,0.21284158675628534,0.03230350724371017,0.42196243981777,0.9951597617339215,0.8055301999822546,0.1922362938997354,0.005240665441781089,0.447382507742131,0.9058984526494649,0.7848389407504603,0.28407670984117234,0.009592511831103323,0.47294094066735154,0.920332067008363,0.763398657979334,0.26124228785778403,0.015233952794592165,0.3663160417804344,0.9336603598417148,0.8485497905279187,0.23903571242557442,0.00023971953453905126,0.39119025503833244,0.9458482825531274,0.829714331096756,0.21751537881761546,0.0016904199815983012,0.41635059862683155,0.8868193214163805,0.9027664971484062,0.31273951921018595,0.004451494650401955,0.4417309099294166,0.902551581913994,0.8870489198887613,0.28921966585765463,0.008515682911784228,0.3364091930510297,0.9172252771401088,0.9460122524538265,0.26625408865670885,0.0002510751361471941,0.3608451342202021,0.9308018205759563,0.9338406882458179,0.24390317878094497,9.597419059914625e-5,0.38564700242802674,0.8662219751394834,0.9205282797172962,0.473302932835072,0.0012554402833623302,0.28374979606856415,0.8831911347191419,0.9061100336946697,0.4477430249662507,0.0037264244373754196,0.30714441675800164,0.8991526400110413,0.9592882513982203,0.42232053406819686,0.0022238796464587596,0.3310461779780114,0.8251427105868421,0.9485536647702258,0.39710231211017055,0.00046358605914864626,0.35539222672914716,0.8441872556982992,0.9366395440073223,0.5046196767092134,1.689282370531675e-5,0.25594490917173063,0.862326712636851,0.978779148474463,0.4789831239948089,0.01080761348592213,0.2786365733055804,0.8795133811821492,0.9707616042644243,0.45340183807366535,0.044441799472090926,0.3019103433021484,0.8007194946956661,0.9615061270594141,0.4279430884886017,0.034476745890754334,0.3257050175520954,0.8208016464732841,0.9510370554216953,0.5359182889588748,0.02573585033540804,0.22909790645983863,0.8400402057841143,0.9868640758535683,0.5103057115019887,0.018242098204426682,0.2509975522359885,0.8583845821655298,0.9803872796489899,0.4846660337459502,0.058239785534982935,0.16366456817816166,0.7751159942748987,0.9726472383996689,0.592387617375405,0.0468149807965757,0.18307266131743632,0.7961569329099121,0.9636643056186324,0.5670759266407569,0.03658188898253767,0.10739266629741229,0.8164190857739159,0.9930381256644427,0.5415878504447528,0.0877321641624969,0.12378055000621846,0.8358491707229283,0.9881274980399677,0.5159904132222988,0.07377162243268587,0.14115775498990862,0.6247585238819422,0.9819332713919047,0.6229762111955583,0.060931907395629814,0.07473627534200533,0.6494153454341407,0.9744717342991787,0.5979703001182275,0.04924678286457612,0.08877585027568335,0.6736792585919577,0.9972770655722848,0.5727067625353682,0.1062561653587214,0.10389679620194325,0.5688984993839924,0.9939518800965311,0.5472520324264304,0.09097634974484164,0.12005935049420763,0.5941949704431704,0.9893277795759637,0.6530821395346167,0.0767721186046908,0.05910445688360422,0.6192437427503353,0.9808942208522092,0.6284801530320878,0.06368082393604718,0.07177303504430937,0.6439789470811459,0.987279695078769,0.6035403101300636,0.12632555940391754,0.0855676954607743,0.5377529487340975,0.992383799697329,0.5783281936078918,0.10978644117588066,0.10045216315829997,0.5632617141140293,0.9961931127561839,0.6825872405770202,0.09427344367472079,0.045203095538509486,0.588604124033977,0.971378286422131,0.7783201423858801,0.07982736048106065,0.05645095442045572,0.6137135371087306,0.97930616954977,0.7566606795809067,0.1478615765617442,0.0688651870963502,0.6385239246506312,0.9997693045955842,0.842850521636032,0.2323393475439336,0.02453157229766073,0.5320801638638047,0.9913631963911369,0.7113757106754541,0.11336719220289643,0.0024005649807616325,0.424138378718849,0.9600122541139209,0.8037840347761405,0.1905037153373556,0.042869745558648364,0.31973904918630264,0.9982551900427179,0.6638688363257765,0.2820925640629033,0.010026561361355713,0.47514014510031244,0.9776561186603187,0.7615242794059701,0.3838568797292413,0.06601310763635265,0.3684393365450575,0.934752282763608,0.6146394317080395,0.23715981705222144,0.022802982298101404,0.267881921747511,0.9902790338879542,0.7165154748742272,0.33467189648498585,0.0018761831666306295,0.4185225422790708,0.9577541557143175,0.8082810505050702,0.19498995150784704,0.04059552664946109,0.3144465495140296,0.9038538606878799,0.6692307375456424,0.2872247828006224,0.008925150015727745,0.21903521288176314,0.9759442816225302,0.7663540503376313,0.38939542550396733,0.0632171655887328,0.3629616484132629,0.9319154229026303,0.9835936693324986,0.24201428566969707,0.021136119060892522,0.2628602685071801,0.8677177200675077,0.9193329437238699,0.3400493029558269,0.0014162350545600666,0.4129172451752128,0.9554368455406742,0.9680449788691258,0.445553422996207,0.038380732987493005,0.30917805169699997,0.9004750315692154,0.9949010539880311,0.2923845246048715,0.007887260568679999,0.21434953360801484,0.9741708798672899,0.9475763679315966,0.39494827828823353,0.0003736230953376163,0.35750168657364423,0.9290226935796151,0.9850071480804508,0.24690212545733414,0.019531198199432886,0.2578692899511131,0.8638407428791075,0.9224029951960546,0.3454473994944974,0.0010207801401183603,0.16954349709296096,0.9530606233435114,0.9700150214768198,0.4512097052510871,0.036225651062468445,0.3039342372300693,0.8970443998906357,0.9956790940673179,0.29757112204868796,0.006913027274101036,0.20970080401710223,0.8224876794247099,0.950082266019714,0.4005147198050778,0.08332005846826701,0.3520601572874614,0.926074468977151,0.9863578898039513,0.5081039101974661,0.01765735708226679,0.2529096316762769,0.859916701877993,0.9999224087201507,0.3508654878421862,0.05721259043096277,0.16529730742776433,0.9506257964937836,0.9719242663333638,0.4568722986663837,0.11744434924328984,0.2987157844152333,0.8935624094138961,0.996393016676238,0.5648930127668291,0.035759544383828945,0.20508962543513615,0.8181211213279825,0.9525299447140756,0.4060940300197976,0.08649015352705974,0.12523468428418705,0.9230711304562956,0.9876457197807991,0.5137892154047083,0.15653013480980454,0.24798193522827278,0.8559461046497885,0.999990253108531,0.35630286715408627,0.05988262458811883,0.1610944124873796,0.7721997193885604,0.9737724664726217,0.46254047076987864,0.12113066694279756,0.09003252041830662,0.8900295105441558,0.9970427294669151,0.5705272951025294,0.03790145120063082,0.20051659433089963,0.5710789926902518,0.997102945313892,0.4116854872330888,0.08971373723535342,0.12149458176421013,0.46309624129609733,0.9888704714266023,0.5194727369385604,0.1606848660377329,0.24308683801835085,0.6213812130252386,0.9999934223661242,0.6263506822409358,0.06260958915269682,0.15693535592796454,0.514346308380887,0.9877685397724765,0.46821348836773496,0.1248659924449862,0.08680371698472406,0.6704075177065981,0.9976281483971914,0.5761524545363202,0.20463975890492886,0.1959823022386935,0.5654455722319742,0.9964595299352178,0.6805353842609814,0.09299039261362368,0.11780343997351916,0.45742756190208855,0.9900319863163267,0.525153739619694,0.164883488622604,0.05747173581338488,0.6158568957668444,0.9999319160829778,0.63184452496224,0.25242527953806765,0.15282067573506036,0.5086611454774703,0.986486884431163,0.4738906176393375,0.12864984257510614,0.08362836164033649,0.40106095190190727,0.9981491977414989,0.8220615782275923,0.20924722520329264,0.19148733568181953,0.5598036862067837,0.9957518961346254,0.8967054171100474,0.09631969581737804,0.11416173637157778,0.45176438937143326,0.9702048244969201,0.7812081401164128,0.16912545946090107,0.05485334918243279,0.6103175920965358,0.9998057422151008,0.8634582470502256,0.2573818337470858,0.14875090415400183,0.5029748622307807,0.9851423006573825,0.9287362054141068,0.132481727881612,0.08050686512619531,0.3954932173612648,0.998605810100655,0.8263905346239757,0.2138923011822848,0.031851595556578016,0.5541540644083396,0.9949801354465164,0.9001411018275101,0.3086630400886219,0.11056994202288228,0.44610745625125964,0.9682407291157871,0.785891922292022,0.17341022984189025,0.052292543509673606,0.34057742948073094,0.9996149170834341,0.867339858898944,0.2623697712911514,0.014921418355478389,0.4972881941773822,0.9837349623767885,0.931634390096884,0.13636115269947469,0.07743963121656217,0.3899390010638147,0.9452663837592525,0.830677271496312,0.21857438598839957,0.008820623868102284,0.2877292473242611,0.9941443477002837,0.903525027179799,0.31392914893349155,0.004282390825107729,0.4404574942816109,0.966216065493159,0.9575296646548974,0.17773724551859754,0.0018282579196175486,0.33519796453268325,0.9165172267132863,0.8711739543145521,0.267388446966661,0.02263689285211068,0.4916018769036141,0.9822650516325042,0.934476741669999,0.3679017429447151,7.249414434562507e-5,0.3843990214628932,0.9426506533480801,0.9774910808483877,0.22329287398093633,0.009915816040478587,0.2825943018424061,0.9932446410073983,0.9068567554467517,0.31921932656080976,0.042644246884999626,0.43481523430079255,0.9641310955249103,0.9597935790212622,0.42358756433357264,0.002346327899979017,0.32983981718659194,0.9133443538139564,0.8749600373461371,0.27243721159394807,0.024359443196780683,0.23281024784674864,0.9807327585615757,0.9372628924673652,0.3733948124047858,0.06858320376429916,0.3788739951702802,0.7571388046401974,0.9791471965299664,0.22804715481034088,0.011074401966027603,0.2774874783926803,0.6590142154529195,0.9101358556600441,0.32453288867137686,0.04497181505867931,0.18649146893205315,0.7996940163115878,0.9619980178085061,0.42921228413391876,0.0029287707678711805,0.3245036805337288,0.7067161862220919,0.9922865905257282,0.27751541210125685,0.026143518971251944,0.22802098042954105,0.6040854789373618,0.9399924820926228,0.37890425859823307,0.07148560274100224,0.3733646368635038,0.7522452307921821,0.9807413331881358,0.48594782590822405,0.012296231778435363,0.27240943755691005,0.6536125950377253,0.9990413517236647,0.3298691479411456,0.047358242394492545,0.18208187119095653,0.7951227642222933,0.964142695866337,0.4348461605223249,0.1035569398827943,0.3191902448182211,0.7015249907895436,0.9932497501524635,0.2826223916092181,0.027988889400357764,0.22326689425547314,0.5985167496841165,0.9426651574657567,0.6488834049007886,0.07444343124761044,0.14026595066252923,0.7473190283215275,0.9822732846168823,0.747948893311254,0.01358114743061506,0.26736083619381035,0.6481911044058362,0.9993610427730641,0.5992274655482271,0.049803220201421805,0.17771339704463507,0.5421432069825124,0.9662273357746792,0.7021883126197341,0.10704780847286116,0.3139001973477668,0.6963077275385625,0.9941491065512289,0.7957077173557433,0.029895315780297083,0.2185486042788229,0.5929352770151127,0.9989959516103073,0.6543024011078807,0.0774563066807743,0.13633974477601057,0.7423608344462337,0.9837428526540251,0.7528709711104197,0.14474851677493894,0.2623423273540185,0.642750444842154,0.9996161400817845,0.83963140709608,0.05230643221478293,0.17338661156737767,0.5364741403002575,0.9682516678795585,0.7073761361679544,0.11058950652254673,0.0028509335808347136,0.6910650713366706,0.994984543387771,0.8002740596781354,0.18705660280155034,0.04467177874483874,0.5873417829093742,0.9986034813849274,0.659701437869943,0.08052383931667129,0.010923165758711606,0.47953995801212196,0.9851498472068482,0.7577603393456944,0.14877310395044546,1.2622235093517897e-5,0.6372913201111359,0.9998066106522788,0.8437827914897391,0.05486755463713516,0.02413639770980064,0.5308003555864419,0.9911242639768926,0.7125371350358024,0.1141815759033512,0.002276693997017576,0.42287112899103596,0.9957559525960098,0.8048015607152005,0.19151188285830612,0.04235173669229103,0.5817369909009312,0.9981465154115423,0.8828328869539068,0.08364563236141753,0.009772654133399672,0.47385946794050565,0.9772754883807178,0.7626163655636894,0.15284312330247296,8.536565159061871e-5,0.631814436365759,0.9999324298466488,0.8478897066225202,0.2382515494367793,0.022421707807389835,0.5251225867609091,0.9900257880072882,0.9169178920557275,0.117823551971103,0.0017668363080702854,0.41725760577596926,0.9572367640933559,0.8092896348220788,0.19600706671158274,0.004377600807588922,0.5761216259852289,0.9030964835913327,0.8864659521984577,0.28838592099891086,0.008685554779651605,0.4681823592194643,0.8301330962729065,0.767438421623898,0.15695804836269078,0.00022277441737783565,0.361728857960067,0.9312679801688133,0.8519516212535205,0.24311359821781625,0.020768793986245926,0.5194415682588589,0.8668476004658452,0.9200299889490158,0.12151496362606146,0.0013214264655039831,0.4116547855198799,0.7852968019921931,0.8137377014538936,0.200541572896838,0.0051604939269329075,0.5704964145253475,0.899705934628314,0.8900490269964992,0.29355177713776937,0.0076620083167943664,0.46250936619881106,0.8258409456138589,0.9481465134269966,0.1611173468540899,0.00042483075824889527,0.3562729910569355,0.928362703769893,0.8559680099627778,0.24800887596987703,0.01651595586729404,0.5137580349358456,0.8629599664118223,0.9230877537942273,0.6110246411351524,0.0009405220843213824,0.4060633929631614,0.7806083483367114,0.8181451852408463,0.4524860907951299,0.006007395913599778,0.3027552412234645,0.8962636825902097,0.893581647867334,0.5605234509476841,0.03414188737721696,0.4568412226959821,0.8215066465216322,0.9506393111235607,0.4017717520176497,0.0006915085376537622,0.35083571564242455,0.7317364456252622,0.8599383532192341,0.5093860600125791,0.017996719738864797,0.25179562598134797,0.8590253824759722,0.9260907910609691,0.6165620739082203,0.0006241724355642853,0.40048415136800286,0.7758835972103976,0.972346373434827,0.45815000619054586,0.006918197218460487,0.2975426008316201,0.6798590738645536,0.8970633578566205,0.566164298214494,0.036237308601693,0.4511786619011147,0.8171307596498768,0.9530738173710346,0.6710889635524738,0.0010227732600794903,0.3454177350432418,0.7266825193746597,0.9879274144288251,0.5150710272155297,0.019539832076224506,0.062258757124804553,0.8550443576076774,0.9290387122980128,0.6220844290526185,0.06049259408005825,0.16015270091438577,0.7711231597729593,0.9741807747206723,0.7233969420399629,0.007892780026831359,0.0892997818048143,0.6745415185839869,0.9004937065954814,0.5717965869451846,0.03839271882102224,0.03762503564215819,0.8127138510317384,0.9554497172592593,0.6764212052659487,0.0904480010988597,0.12065793946020836,0.7215992711092846,0.9891379197767297,0.520754044939165,0.021145093273497673,0.05953903150654688,0.6201368292720741,0.9319311361835418,0.6275909922363395,0.06323234793063409,0.018988012869464,0.766327651800228,0.9759538394035914,0.7284699146599696,0.008931018273713731,0.08608299464928043,0.6692013858722164,0.9977512682204694,0.5774195885875334,0.040607839226894094,0.035490769827158986,0.5641740444215887,0.9577667034589719,0.6817306264055158,0.0937365657779835,0.11697790447698186,0.7164873583614477,0.9716842350593138,0.7775555197596065,0.022812295685680717,0.05687628074043255,0.6146090701175029,0.9250370065962137,0.6330810511701099,0.06602859889259483,0.01746688687945036,0.7614976936045066,0.9861891709323861,0.733513334060649,0.12950975275146936,0.08291974881038161,0.6638393664902706,0.9497660049442325,0.5830325757906281,0.042882383287319026,0.03341658957388127,0.5585303502191806,0.9955834611103314,0.6870165401827739,0.09707768176301579,0.005701140552477613,0.71134744237129,0.9697672248175175,0.7822675275939961,0.024541223655501487,0.05427084926068404,0.6090664859607378,0.9220146060169614,0.6385538956995271,0.0688809852630961,0.016008177890580677,0.5016925302338977,0.9848304205866845,0.7385265478616653,0.13335240168612272,0.07981045346277083,0.6584561540302798,0.9472527072439987,0.8273608972310165,0.04521605678369239,0.03140276318331359,0.5528790849530729,0.8887899556410581,0.6922782628500644,0.30984840663078644,0.004876821322714053,0.7061801880012502,0.9677894488777588,0.7869430233380985,0.41363128804512495,0.05172307408711452,0.6035097937504653,0.9189376166738912,0.8682086116716305,0.26349881777173134,0.014612074590922453,0.4960058770463214,0.9834089560767242,0.7435089075898605,0.3636590618531952,0.07675551080245502,0.38868847103144244,0.9990774312638155,0.8316380368182683,0.47018592074439697,0.02944955114950426,0.28656889949282865,0.9939470421991536,0.9042809029669385,0.1039158321784463,0.004116547654114289,0.19441576667627009,0.9657511630708596,0.9580453543187843,0.17871876425421318,0.0019394573754130118,0.5979397122602881,0.9158064365841382,0.9904207909258609,0.2685243353127602,0.023019942333619148,0.49031974050966526,0.8464450957398824,0.7484597687631374,0.3691389591394854,0.06637362227174148,0.3831518008799225,0.9993904394023658,0.8358722781024595,0.475864306950398,0.12997604155303288,0.2814402376336845,0.9930329376180198,0.9076008010396557,0.10741198207505664,0.21085720371102173,0.18993460254671968,0.9636526310547622,0.9602958822855093,0.18309678769088022,0.0024720495425340494,0.11290786850184537,0.9126214707745616,0.6548620752677325,0.27357979487524775,0.024756386358091853,0.053956897544911675,0.8423224221964193,0.753378490973824,0.37463578366561684,0.06923283267481856,0.3776302453681648,0.7560381894726727,0.8400630733726953,0.05256879720936897,0.13382450384124073,0.27633984708808684,0.6577979254122485,0.9108679748143444,0.11095891432441674,0.21551520900651439,0.18549354623928827,0.9614941242804232,0.9624868696987885,0.18751580344004842,0.0030689983347415017,0.10933352724748491,0.909383131229353,0.9925093475865765,0.2786645425214294,0.026554304466663237,0.051416179788542626,0.8381554682949106,0.758264437971513,0.38014882440203845,0.0721477640098786,0.37212451872474206,0.7511372024666981,0.8442098805379441,0.4872297105007063,0.13772033194899785,0.271268387605748,0.6523917631700219,0.9140820016729838,0.11455617012096841,0.22021001320148575,0.18109317221696924,0.9592759219567014,0.964618033148302,0.19197523988973192,0.31576484640158464,0.10580971978865822,0.9060918368367454,0.9934581302188834,0.28377792052504563,0.028413464093621943,0.04893348759779376,0.8339447730424409,0.7631169777453618,0.8724951257313549,0.0751180392224407,0.013120384185936196,0.746203730164632,0.8483121631971576,0.93545134807388,0.14166302194009583,0.2662265151940667,0.6469658886291003,0.9172424658722548,0.6004839782952147,0.2249410090099469,0.1767340496803893,0.5408652866065836,0.9666890969621262,0.7033604707685048,0.3210632281159841,0.10233690193966732,0.9027480133348287,0.9943430826686788,0.7967407854795737,0.030333624751496036,0.04650914211580964,0.8296908811041598,0.9989130846944008,0.8762644089784015,0.0781432740991394,0.011857718989719823,0.7412384107248475,0.8523693907086569,0.9382178837666502,0.14565206381661128,0.2612148820332716,0.6415210036414564,0.920348958597317,0.9797082129538563,0.22970758446442285,0.17241674249418076,0.5351950919524822,0.968699793242393,0.7085423038491523,0.3263847557998346,0.09891552291916639,0.8993520932564794,0.9951640904649002,0.8012984205233598,0.032314538062160225,0.044143456938425696,0.825394342732829,0.9985060659955189,0.8799850213769467,0.08122307731742373,0.010658196356125138,0.7362418864252331,0.8563810382587712,0.9409277347565294,0.14968694158487533,0.25623413639206005,0.6360578125181174,0.9234010780146906,0.9812807625707795,0.23450912299511256,0.1681418091140437,0.5295203447152835,0.9706498618999422,0.7136971614023926,0.3317287410987196,0.09554602529205397,0.8959045158734105,0.9959210474079043,0.8058170817778925,0.43680600125419966,0.04183673807360372,0.8210557136976444,0.9980345641495838,0.8836564816554217,0.08435705049617581,0.00952197144674316,0.731214803580113,0.8603465869297251,0.9435805505167498,0.15376713332221897,0.00011070484623521004,0.63057702193806,0.9263984293242346,0.9827910571815878,0.23934500350964366,0.16390980251450876,0.5238417789393364,0.9725390506879656,0.7188243766330542,0.3370944927532675,0.09222884491222588,0.41599321352293783,0.9966138555832038,0.8102961847417625,0.44245106339975054,0.03958928390184874,0.816675555212347,0.6944886946995537,0.8872783149002211,0.08754478824724266,0.008449191235428255,0.7261578124566446,0.5909928060532953,0.9461759878982101,0.1578921112444852,0.00026269344195439803,0.6250793408567994,0.9306177007074554,0.9842389014254699,0.24421460047341265,0.15972127011740778,0.5181601291629283,0.8659750678710108,0.9996896589622297,0.3424813166885682,0.08896441086619644,0.4103929069679781,0.7842427602914334,0.8147351500305355,0.448103569660418,0.03740138513761293,0.8122544338626276,0.6892373728003499,0.8908500526171348,0.5561491929454216,0.00743999448928645,0.7210715671907039,0.58539530370356,0.9487137111738613,0.16206134177429943,0.00047932444912046623,0.6195654804146846,0.9276998963425063,0.9856241080197434,0.24911728399049937,0.016844412423823396,0.5124761303232706,0.8620768025228404,0.999857664878246,0.3478885161039532,0.08575314541759499,0.40480419133989193,0.7795460684555888,0.8191334034516973,0.45376278886878535,0.03527332479169071,0.30157754262280034,0.6839615725202985,0.8943712327919484,0.5617961674542918,0.006494511750725573,0.7159567257022718,0.5797867552336228,0.9511933920821346,0.1662742856100889,0.0007605698459097754,0.6140361538449095,0.4718861931750842,0.9869464977840801,0.25405241988514604,0.01833925284178084,0.5067905176614326,0.8581317015325498,0.9999610128141317,0.35331539156312924,0.08259546395254469,0.3992277895546001,0.774813216557771,0.9896292077165727,0.45942798898909765,0.03320537813461044,0.29637074894084403,0.6786619762988492,0.8978413999502062,0.5674351484569139,0.00561286532056926,0.7108139496103302,0.5741678861248376,0.9536147098694036,0.6722933372582647,0.0011063932524474906,0.6084920763812549,0.4662104314718394,0.9882058996636836,0.2590193697837894,0.0198963974179171,0.5011040266272361,0.8541402752099319,0.9999996894015437,0.3587612410846518,0.06110545449555338,0.02020889280744348,0.7700448168055453,0.9884453529589851,0.46509843721195215,0.031197812661027724,0.0011817423614758349,0.6733392696535225,0.9012601052161283,0.573065406535401,0.004795169242237052,0.005447549625903492,0.5685394231935619,0.9559773513314733,0.6776204930769744,0.001516749935513484,0.11982379233349771,0.4605390405433251,0.9894021507514154,0.2640174911976364,0.021515644731247396,0.05893359550191346,0.3543813379589452,0.9999736896375577,0.36422536023272856,0.06385797961099976,0.018639559596930755,0.7652414860046906,0.9871983164355758,0.4707734000490896,0.029250888055123825,0.0008232662566380333,0.6679941410912371,0.9516725935670959,0.5786862134002007,0.0040415292869924735,0.00631667012779602,0.5629020944971406,0.9582810108540952,0.6829246731905602,0.0019915868143287607,0.1161548883636982,0.45487275399974236,0.9905350963088682,0.7786212309723863,0.023196785327625258,0.05628374037786027,0.34895068807895424,0.9998830168853154,0.3697070422083404,0.06666692091063187,0.01713249169908221,0.7604038454794144,0.9858882594539897,0.47645214342827263,0.13037209988104087,0.0005293600515934305,0.6626272820192487,0.9492043271455869,0.5842968419843015,0.0033520429402612018,0.0072496499424020144,0.5572566292397301,0.9605253904524986,0.688205191488562,0.002530842467421468,0.036979548823889374,0.4492123047910256,0.991604589786381,0.7833250584160745,0.024939601746835627,0.05369128118691785,0.3435395768478531,0.9997276828735902,0.37520557794066733,0.06953191505007489,0.015687884057324908,0.2451729688472158,0.9845153514737437,0.48213393278824046,0.13422548716826233,0.000300061763927606,0.6572393866557151,0.9466779548941587,0.5898965665372811,0.002726799389021095,0.008246368386185865,0.5516037576779738,0.8879823588517641,0.6934613649212416,0.0031344471405720387,0.03915574095422686,0.4435584251120338,0.9926104928419959,0.7879922369749206,0.41489464068179027,0.05115655327089785,0.3381487042079393,0.9995077076952681,0.38072025617880917,0.5227283612456946,0.014305923535677778,0.24029683695199483,0.9830797700843059,0.487818033173726,0.6295007518578267,0.0001354010540122741,0.6518311519398968,0.9440938036060935,0.5954846627191834,0.22069794670510767,0.009306696530842817,0.5459442110265408,0.8843703079207177,0.6986925135879367,0.3163120722709284,0.04139154457207034,0.4379118463078392,0.9935526753593529,0.7926221629363885,0.42050374099396837,0.04867988450391064,0.33277876748359264,0.9992231198047511,0.872887445429726,0.5284075893952912,0.012986788894580548,0.23545429838370685,0.9815817009821244,0.49350370933052484,0.6349849090092128,3.539922116851946e-5,0.6464032774420063,0.9414522075485525,0.601060407694215,0.7352589353315492,0.010430497219976353,0.5402787213635419,0.8807085376205817,0.7038979608250083,0.3216128811639695,0.043686670469999356,0.43227329877912524,0.9944310154645213,0.7972142374066694,0.4261231243684989,0.09825097934791749,0.32743046129107367,0.9988739560142748,0.8766517143316872,0.534083142944137,0.011730650767770356,0.23064597953819316,0.980021337946607,0.4991902258006019,0.6404516054869354,6.920091172313292e-8,0.14643932891251332,0.9387535084193375,0.6066230802242449,0.740261500341269,0.011617625086839556,0.534608021535833,0.8769975216115355,0.7090770332933687,0.32693676492731016,0.04604082176709129,0.42664351188770777,0.797637152459363,0.80176786638815,0.4317520639225028,0.10166222396388525,0.32210447744867354,0.9984602614891471,0.8803672622861215,0.5397542877435845,0.010537671640209967,0.22587250238487877,0.9783988828150552,0.9412049214810432,0.6459001341585904,2.941556327834549e-5,0.14244126208054153,0.9359980553026919,0.6121719607621,0.745232986857236,0.01286792657313901,0.5289328450642191,0.8732377399238285,0.7142290610655799,0.8331143710007773,0.04845369394732396,0.42102321386218966,0.7930486100241676,0.9936366193723352,0.4373898315369825,0.1051249946798169,0.3168015048872252,0.9979820897419065,0.9650287181492809,0.5454202902152702,0.18023548976609888,0.22113448438631866,0.9767145454565554,0.9147057050591305,0.65132979024183,0.00012343451223473245,0.13848944646645905,0.933186204624145,0.982943792184285,0.750172751803833,0.014181239948897584,0.07272560707205622,0.8694296788956859,0.9994840901124189,0.8373335761568914,0.05092497489896536,0.4154131317037627,0.7884221609356675,0.9927003384296123,0.44303569795100634,0.10863884357668291,0.3115222295609885,0.6939464005957084,0.962909313113179,0.551080417446005,0.18462782293141528,0.2164325384183276,0.9749685437448332,0.9115021442635489,0.6567398713955286,0.00028211388616822264,0.1345843932486141,0.9303183201044081,0.8408793555016787,0.7550801562087159,0.015557395333375024,0.06979979806817649,0.8655738311104002,0.9997100444442215,0.8415091462760798,0.05345434495494655,0.40981399109216776,0.7837584036379284,0.9917003253268548,0.9119909291590456,0.11220331612834888,0.30626733435891995,0.6886925139085254,0.96073002946908,0.5567339372825789,0.18906095036556342,0.21176727269070278,0.9731611035300689,0.9082453545203351,0.6621296778106316,0.2804382819529378,0.13072660755650867,0.9273947727123253,0.8366971396295566,0.7599545652854671,0.01699621471704227,0.06692963665772805,0.8616706953326136,0.9998713598910074,0.8456405412367263,0.05604147693421113,0.023355441297903623,0.7790579414009366,0.9906367094185409,0.9151863892220611,0.11581795126036976,0.301037499016339,0.6834142193195086,0.9584911491133887,0.5623801184264662,0.1935342986311716,0.2071392906685502,0.1045970757802917,0.904935757104306,0.6674985123006786,0.28556145462286353,0.12691658840545883,0.9244159406168888,0.832471371045345,0.7647953485157062,0.01849751198460764,0.06411549410407752,0.36473178738176504,0.744481808297105,0.8497272266313947,0.05868603618403717,0.02166858533414845,0.26448145940715867,0.9895096282863483,0.918328143770105,0.11948228140963124,0.29583340002700276,0.17522897147155608,0.9561929616515101,0.9673946922029962,0.19804728908819175,0.2025491909942248,0.10114208286443005,0.9015737801210988,0.6728456803919862,0.29071236551544827,0.12315482863204569,0.46562329444421635,0.828202596363971,0.7696018797306498,0.39315039620952724,0.06135773442439635,0.35926601365188093,0.7395055718211843,0.853768673835955,0.06138768062332561,0.020043602870148225,0.2594804866841572,0.9883192277213584,0.9214157864084824,0.12319583258483002,0.001141650280850448,0.17092632658482632,0.9538357643603887,0.969384348845784,0.20259933796874785,0.19799756740989433,0.09773868333023111,0.8981598584517929,0.6781704904134797,0.2958903483460324,0.11944181483036548,0.043335147702479926,0.8238913677633206,0.7743735371921078,0.39871252044696154,0.05865671434257447,0.3538184442548147,0.7344983546329686,0.8577643600779636,0.06414606078684904,0.01848070410190711,0.2545106258296048,0.6341551403542431,0.9244489177420248,0.1269581244277863,0.0007898543868223307,0.16666624829361398,0.9514198621500547,0.9713132893166816,0.2071898564526482,0.1934850086807373,0.09438731741689677,0.894694433696658,0.9961690829207295,0.30109473332812564,0.1157780272890872,0.04104899049268118,0.8195382429128117,0.7791097036729074,0.40428774650177424,0.056012783243076625,0.34838978384882924,0.7294608044299372,0.8617137685042844,0.06696081987045638,0.016980091194730595,0.2495725197088351,0.6286683996603775,0.9274271454267524,0.13076867027557926,0.0005026327145057352,0.16244928765090255,0.9489455675241824,0.9731812641018709,0.21181825074355076,0.18901209851878453,0.09108841863293526,0.8911779541180309,0.9968395773302219,0.30632484726004594,0.037201985273409455,0.03882219987329144,0.8151437849012595,0.783809766536733,0.4098753532029584,0.08866507301940851,0.3429807346462568,0.7243935728332291,0.8656163882479457,0.5176343450109354,0.15933597225235324,0.24466680707961813,0.6231650153509123,0.9303500842206256,0.13462697722349798,0.24591461477710252,0.1582759901322876,0.9464132005396682,0.9749880315736144,0.2164839221457726,0.34435809994182454,0.08784241370008566,0.8876108745823318,0.997445804157608,0.31158001361200016,0.03938435967649839,0.03665506388587492,0.8107085621640381,0.788473117817372,0.41547461777803624,0.09192460564102128,0.007104199579083537,0.7192973153033542,0.869471714494222,0.5233162429750827,0.1635204550400614,0.23979412250953586,0.6176456993039249,0.9332173560333761,0.13853254618880056,0.25082864794526993,0.154146895565418,0.5105004666280145,0.976733358021511,0.2211862671417325,0.3497722164149767,0.0846497224981202,0.8839936565012265,0.9979876849857601,0.31685955261359455,0.04162631599462541,0.03454786285550293,0.8062331484095523,0.9959878388939043,0.42108481594655117,0.09523692395062922,0.006180887172519189,0.7141726910554075,0.8732792485459335,0.5289951249183086,0.16774846239338304,0.23495509629389882,0.6121111654583069,0.9360285899754149,0.635551469378568,0.2557749121213068,0.15006253806016795,0.5048144653344233,0.9784170176827274,0.22592467747001793,0.355205765270042,0.08151075801053148,0.8803267677719409,0.9984651497208852,0.3221627813417657,0.46139797074425287,0.03250086935449348,0.8017181225450271,0.9952368128753232,0.4267052220137562,0.09860159949064029,0.005321451642571473,0.7090203629737981,0.8770384978879536,0.5346702562614285,0.17201944740779979,0.001241682611671291,0.6065621297214148,0.9387834224058078,0.9886287769657905,0.2607527674921757,0.14602344593954808,0.4991278412763417,0.9800387927712004,0.23069854020406516,0.36065804366235366,0.07842592627111222,0.3917342794004265,0.9988781366015909,0.8292951562855564,0.46707007103210085,0.030514348167153038,0.797164068601624,0.9944217265966785,0.9024360103108706,0.10201819703090903,0.00452600415961818,0.7038409975265033,0.9668776605319459,0.9567845991659227,0.17633285761951323,0.0016744532725829209,0.6009993098764648,0.9414814969793125,0.9898030458535604,0.26576157015843027,0.14203014167136557,0.4934413300344183,0.9815984735058088,0.9999495116969093,0.36612834632452707,0.07539562631143348,0.38618961569048726,0.9992265922068746,0.8335530169654386,0.4727464308979098,0.028588556255525865,0.7925715756588954,0.9935426854916489,0.90578467193842,0.5806371558023775,0.0037946476170050425,0.6986352646788584,0.9648121706673779,0.9590676916955716,0.18068813507690767,0.0021716837298783043,0.5954234254896862,0.944122464692474,0.9909139573541539,0.2708006722175055,0.023795450972469656,0.48775566717470875,0.9830958581375087,0.9998363667324405,0.3716159656576882,0.07242025010922876,0.38065967367050974,0.9995104714630343,0.8377677316342484,0.4784263160887328,0.02672374272615563,0.27913642962319213,0.9925998032666481,0.9090808441892948,0.5862440773338514,0.0031274766177363245,0.6934038378068956,0.9626865560548923,0.9612914025416455,0.18508471641272256,0.0027333096654137967,0.5898351978172427,0.9111675672362105,0.9919613677680768,0.27586942184752533,0.025559648000099855,0.4820715881535279,0.9845307529754304,0.9996585665428155,0.3771201918230035,0.06950018253769086,0.3751451686538849,0.9997297376494978,0.9840235683061278,0.4841089918956126,0.024920148797862307,0.2740490054889872,0.9915932018861157,0.9123241006944405,0.591839842953892,0.0025245774622376094,0.6881473936102407,0.9605010916486553,0.9634554440609577,0.6952821148647648,0.003359258431311629,0.5842353497119369,0.4415953156289655,0.9929451416098769,0.2809671633916181,0.027385215207699654,0.4763898282223169,0.8362618337542528,0.9994161341269838,0.3826403128334993,0.07348052495362589,0.3696468139571844,0.748916197440952,0.9825662503249667,0.4897937232486177,0.0231780077705403,0.26899080874477765,0.6499471003347903,0.9155140219296016,0.5974237288346426,0.0019860281371926747,0.17912207372591676,0.543976031241016,0.9655595363287148,0.700504408567044,0.0040494490593568355,0.5786246055297063,0.43595144501894467,0.9938651516256696,0.2860932374427273,0.02927191645306998,0.470711122332536,0.3309176881415097,0.999109100844253,0.38817561464615974,0.07647563488410936,0.3641653208078909,0.7439682828755516,0.981046511056272,0.4954797748119262,0.021497544994979967,0.2639624936823901,0.6445125650728294,0.9186501952695887,0.6029950126849235,0.0015118983054555057,0.1747817403653975,0.5383086478701936,0.9676034071747261,0.7057007664660413,0.004803792271470764,0.5730036910359263,0.4303158592677674,0.994721278809599,0.2912469809289078,0.031219507686153725,0.4650362050405966,0.3255770609078904,0.9987375064102326,0.39372538125428963,0.07952552886995218,0.3587013982523991,0.7389888103337612,0.979464547082548,0.5011664110789432,0.019878977843718504,0.25896471072837246,0.6390593367083761,0.9378023763581129,0.6085529738436631,0.0011022492970393927,0.17048347489189303,0.5326363091691504,0.9695867922186092,0.7108705163984003,0.005622190491259393,0.5673733333115306,0.42468928735413525,0.9955134124192312,0.8033411899870929,0.03322773698060444,0.4593658104128448,0.32025899576688777,0.9983013988916971,0.39928889478013246,0.08262981239887895,0.35325575306429857,0.7339784239242125,0.9778205630352372,0.5068528964674408,0.15152152353216713,0.2539981063598593,0.6335881206316969,0.9350272837236655,0.6140968933731169,0.0007571341011837762,0.013317181160259484,0.5269597488706845,0.9715094349039884,0.7160129896425789,0.006504537856635351,0.049305883756757485,0.4190724570907848,0.996241449989879,0.8078420825684567,0.035296344566373705,0.04081578510932832,0.31496418062502884,0.9978008347003676,0.4048654355677295,0.0857880839231756,0.009030286271714538,0.21949638884404332,0.9761147715682519,0.5125384954147078,0.1556219794592547,0.0001712473297311723,0.628099624559818,0.9321959190993223,0.6196260541518642,0.0004765973594997308,0.01465235245846691,0.5212797012536693,0.8680951243858464,0.7211275210053508,0.007450720233511232,0.05179738789830446,0.41346609503034304,0.9969052973478565,0.8123031549196696,0.0374250628633131,0.03859515480672843,0.30969330038138837,0.9972358785856156,0.8888953928396133,0.0889999349116305,0.007986165420134472,0.21480712092412046,0.9743473933304655,0.5182224724726964,0.15976698164175474,0.0003523924902389397,0.6225945584449821,0.9293086487299778,0.6251397409675697,0.24642164512796366,0.016050304825678874,0.5155969010480722,0.8642227866744974,0.7262134489078498,0.008460615230563184,0.054346868295141626,0.4078709263713459,0.9975048686226602,0.8167238299886075,0.039613616515786265,0.1134537757954136,0.30444703683899554,0.9966066036260867,0.8924443859881324,0.09226494990237916,0.007005687927405413,0.21015474349684043,0.9725186569371722,0.5239040924031547,0.1639559939120988,0.0005981684593720504,0.1293971458056597,0.9263658460920898,0.6306372406094984,0.2513390433822713,0.017510857432865956,0.509912083339916,0.8603033357320053,0.7312701154711466,0.009534092215062684,0.05695399516488414,0.40228767486443173,0.7774159994285976,0.8211035359486464,0.041861722428287285,0.11708573379783888,0.2992260686166408,0.9959130912202483,0.8959426153630924,0.09558270655664558,0.006088980621019757,0.20553985836017175,0.9706287989405139,0.9522926470047939,0.6693592001997745,0.0009085434453249275,0.125603841729502,0.92336789184537,0.6361178419607714,0.7664695828556835,0.019033821353483582,0.5042259834761931,0.8563372785502585,0.7362968666013481,0.851136826894437,0.05961843126841537,0.39671706271872176,0.7726670394339059,0.8254417062726311,0.4619847467831477,0.12076722282630498,0.29403107106109433,0.9951554310758602,0.8993896284587878,0.5699755098921311,0.19962477485122615,0.20096306246235085,0.9686780637988823,0.9546875401788026,0.6746986769022926,0.0012834773002293187,0.12185896683841707,0.920315173783544,0.6415808360903504,0.7712640653411333,0.02061899958790986,0.06041265129594303,0.8523251281497912,0.7412930520742049,0.855162430659662,0.06233983195350973,0.39115981050840104,0.7678828091987902,0.8297377798061567,0.46765732193283255,0.12449776666996004,0.2888627161597484,0.6709313592156785,0.902784979394481,0.5756015955782997,0.20419025932846135,0.19642494782466485,0.9666667038452974,0.9570236182540258,0.6800155558447408,0.0017229215253475316,0.11816300554239467,0.917208086784189,0.9899209536435657,0.7760234590647628,0.02226618708892847,0.05773143099018996,0.8482674035134243,0.7462580256192215,0.8591420931760111,0.0651178451994146,0.38561663707950955,0.7630639275767466,0.8339912008401549,0.9254901270530678,0.1282768827725752,0.28372167245369384,0.6655763444600625,0.9061282289720787,0.5812179019876698,0.20879400761893513,0.19192610146487254,0.9645949792547668,0.9593005790522628,0.6853091492740304,0.3029093694216922,0.11451643592431476,0.914047032757656,0.9910253000603426,0.7807471483857478,0.023975170788251732,0.05510741935473784,0.8441646295191327,0.7511911450032513,0.8630752996630616,0.06795211166238496,0.016473231909696184,0.7582110179035249,0.8382014191827769,0.9284491845893845,0.13210408229496473,0.27860860495124234,0.6601999119434669,0.9094189447329433,0.5868237026353762,0.21343542421499317,0.18746710532127148,0.5547080658201002,0.88994407041396,0.6905787724491184,0.30814826619610125,0.11091972967810643,0.9108324205950808,0.813607091655048,0.7854345222817277,0.025745729624081837,0.052540955812794776,0.8400173368721511,0.7226258279050789,0.8669615413496079,0.0708422647221657,0.015056855375694733,0.7533247079164973,0.983875654431748,0.9313528210312365,0.13597887017821875,0.27352417504190574,0.6548027571224011,0.9455196397276839,0.5924182723955033,0.21811390873648112,0.1830485361774229,0.5490520932251095,0.8863595145717372,0.6958237437295807,0.3134119795262299,0.1073733520477328,0.9075646661154939,0.8091578368139811,0.7900849744278435,0.027577634569705578,0.05003237234356278,0.835826062036326,0.7175196377211063,0.8708003155394719,0.07378793052941474,0.013703207587119737,0.7484056296734604,0.9824118677043815,0.9342006607851687,0.13990074520774043,0.2684690404108436,0.6493855781338622,0.942909539107148,0.9773254498044861,0.22282885600840519,0.17867096558754303,0.5433897756053407,0.8827249820510084,0.7010433846637849,0.31869982853610923,0.10387776176701047,0.9042441920120314,0.8046685915462899,0.7946979032751673,0.42303684488263454,0.047581993439295256,0.8315913471647225,0.7123853107666047,0.874591125676528,0.07678872805406173,0.012412463642079985,0.743454419470875,0.9808856796593031,0.9369923354751831,0.14386920007807957,1.1458634370631327e-5,0.6439490757050295,0.940242146905045,0.9789876282206444,0.22757965613921322,0.1743349598025712,0.5377218453973374,0.8790409429886703,0.706237020076649,0.3240111292277528,0.10043341100027098,0.4297331451832349,0.8001399365483439,0.7992727121285141,0.4286606281435844,0.04519013606332334,0.8273137400294948,0.7072235111810554,0.8783334814089349,0.07984426913459514,0.01118479050189719,0.7384717177615612,0.6046305184295037,0.9397274839903887,0.14788372145855389,5.297500359324747e-6,0.14463051384340292,0.9375178081559803,0.9805878482539985,0.2323656945996862,0.1700410796969234,0.07736666312397045,0.8753078739254291,0.9990065471332943,0.3293451945696342,0.09704074528387219,0.029838217618976703,0.7955724576142712,0.8038088092236264,0.4342936393508321,0.04285710960905548,0.31970995489008014,0.7020349066576008,0.8820268986525628,0.5423103268365986,0.010020346969508764,0.22373123678147488,0.599063076853404,0.9424057525317129,0.15194379005964975,6.381207267641686e-5,0.14065324257342826,0.9347368752607531,0.9821259029116329,0.23718635230242902,0.013452438073555395,0.07435540565900345,0.9717049272824864,0.7165435905443631,0.33470133458555573,0.04956102592527212,0.027933588484874317,0.996313129587554,0.8083056078037203,0.4399351498587003,0.10670343884968642,0.0035555172874375263,0.9977453543465583,0.885670899653612,0.5479737702743952,0.1822113386548091,0.7284144219182251,0.9759347219891701,0.9450267946576656,0.6537721940150527,0.2725587872058015,0.6275306719955709,0.9318997079407731,0.9836015932418973,0.7523900281173437,0.37352689462420724,0.5206917139303074,0.867696583607434,0.9995939957578874,0.8392221864520827,0.09041221766273572,0.4128865297693593,0.7863233961477539,0.9922572164779921,0.9102139301218435,0.038368748950512066,0.309149220725281,0.6915799708191958,0.9619338557118038,0.9620502086893878,0.007881743025752674,0.21432393336959787,0.5878904732687101,0.9100399016456961,0.9923104607056337,0.0003748296952008623,0.1328386560015125,0.48009681744886484,0.8389986089600603,0.24692902677532685,0.016198553895948486,0.06849844806038907,0.9753543227280401,0.7521273418469214,0.3454770645472469,0.05461400655042109,0.024307757999549096,0.9975632438659523,0.6534826654382259,0.4512407487909435,0.11382732887257013,0.0023301267159384076,0.9965378117697146,0.5476709192990514,0.5592813087484119,0.19107347890248128,0.7182389457320053,0.9723259103050167,0.43963311849919695,0.664553652032676,0.28274534868373036,0.6165014072729427,0.9260581452351191,0.3344142265832384,0.7621419516814205,0.38456220279144276,0.5093236863200453,0.8598950491360138,0.9999229572465742,0.8474891969959819,0.49176957275815697,0.4017105838873562,0.7769261925593505,0.9901362459456267,0.9166099889951314,0.5993612730711386,0.29868723168500116,0.6810259125766495,0.9574619945951393,0.09592904942491537,0.7023131714196655,0.2050644371549396,0.5766723956452936,0.903425969229677,0.16862894610375717,0.7958177969910417,0.1252140366530453,0.4687385629536941,0.8305514512937368,0.25680263875268894,0.01919498587748808,0.06286474694853605,0.3622645231223901,0.7422414097814434,0.3563327438104833,0.05989742739462223,0.02092804801657505,0.262222217873777,0.6426195952389122,0.46257157548673267,0.12115102247310411,0.8007787249226831,0.1732832508424897,0.5363379759484541,0.5705581754052305,0.20009545600232148,0.7079505539373026,0.09960074105763811,0.42835950830874797,0.675249970912163,0.29304431650172325,0.6054118653745462,0.9199961424308519,0.32372638522642877,0.771758244467573,0.3956572378285549,0.4979508346866896,0.8519073069814189,0.22732458445740533,0.8555764185751366,0.5031425781365029,0.3905854923988738,0.7673857089095772,0.9877616816641486,0.9227904961929392,0.6104811717315665,0.28832940074378766,0.6703781925405986,0.95275344520405,0.9702618298406209,0.7126607054455396,0.19595753894899248,0.5654146481537008,0.8966033064761801,0.17723087935998638,0.8049097750220205,0.1177833294633831,0.45739648295100127,0.8219332681574514,0.26680207968296593,0.8829206919520904,0.0574572171688536,0.3513677435677063,0.7322301433669861,0.3672627557076009,0.06540855484551539,0.017796207178972512,0.2522795778511973,0.6316827344596267,0.4739217674397829,0.12867073041322885,0.0006523211755830594,0.16475903466805353,0.5249862315325773,0.581798535657188,0.2092726020338973,0.6975545696904208,0.09289299792827221,0.41712296450754593,0.68585561643802,0.30345036203150055,0.5942677839672633,0.04003734430428768,0.3131297468508511,0.7812339310597605,0.40680625922654257,0.4865790432799926,0.8437374899567124,0.21786267511459745,0.8634796669063864,0.5145139575625179,0.37951701136395277,0.7577068813912524,0.13577036728572683,0.9287522539554509,0.6215439080523846,0.27808108698537043,0.6596423197817676,0.9478106437156253,0.9740037051164661,0.7228982100132193,0.18700795060989395,0.5541230554894454,0.8895754433927103,0.9971209458936873,0.8138439944427588,0.11055037903881731,0.4460764457694693,0.813148518550901,0.2769221759114129,0.8901344314020092,0.5550104747744714,0.34054786551022753,0.7220987223767338,0.3782614451116473,0.9482070411810015,0.6604880889447774,0.2424651069879159,0.6206777417708952,0.48528545212433355,0.13638256203816296,0.7584715061574376,0.15640827029188342,0.513621559380417,0.5929965738048311,0.21860016879323974,0.8443852651928498,0.08639588968216444,0.40592930082043405,0.6963651013086388,0.3139581012433743,0.04038811957613275,0.03569728298298358,0.3026297940978645,0.7905641087907993,0.41800349854416397,0.09341194686533422,0.006679886597752871,0.2085467420438447,0.8711948528932996,0.5258778275481617,0.1654219242847516,0.7478947177755368,0.12807347332908936,0.9344921777025836,0.632543758235767,0.25305545366747395,0.6488238489806056,0.06496779035213929,0.9775003335294887,0.7330203882951666,0.35222037506813764,0.5428034598593442,0.8823460161562742,0.9982109994283848,0.8226158327381559,0.4582860554151396,0.4347843083329489,0.8042017476543415,0.9956570643171294,0.8971463174816958,0.5662996218554631,0.3298104870942745,0.7118523887511754,0.3893231213623125,0.9531315460396772,0.6712172424990038,0.23278388323620086,0.6096103110943117,0.4966567500335603,0.9879572164268812,0.7681396546116854,0.14823527835270706,0.5022498395097077,0.604146496045926,0.2280733302495377,0.8525409419665879,0.08011277788674048,0.3947843087863246,0.7067729879753957,0.32456209749191484,0.9204798783015294,0.03159744928758035,0.29223195958422843,0.7997439502789766,0.42924316239249555,0.10013607822513237,0.004954777990174686,0.19938160525675308,0.8787179847418477,0.5372283084907362,0.1739595699788487,0.7379542948209418,0.12056901207473225,0.9400072976299312,0.6434750310208229,0.2630079373903145,0.6379283775533269,0.05947443506476863,0.9807499059437277,0.743022003133018,0.36312295283948526,0.5314617179587917,0.8749187652320423,0.9990432813817327,0.8312207514081957,0.4696296173957423,0.42352591313011884,0.7950975844769368,0.994033191337315,0.9039527222805558,0.5775544658833545,0.3191611637793152,0.7014964438859539,0.4004420612102447,0.9578216031737623,0.6818578092106998,0.22324091560701087,0.5984861686565359,0.508029777721599,0.990311917668624,0.7776690691100971,0.14024428751078888,0.49087695558463423,0.6152425334731396,0.23768718504209907,0.8605142160310211,0.07404691338886077,0.3836937547616891,0.7170738914560085,0.3352568643288407,0.926524689682844,0.02773996444907484,0.281941623091297,0.808768705925709,0.4405194354323992,0.10706709693900107,0.00348580300843665,0.19037200674377552,0.8860451700257386,0.5485595277149591,0.18266590716576087,0.0024170082139333693,0.11326086628888693,0.9452947602453254,0.6543320706282234,0.27308303947930174,0.6269615427558382,0.05420900523795291,0.9837507410486117,0.7528978797472609,0.37409635002858455,0.5201036979415387,0.015973925909936848,0.9996173611357089,0.8396542983161425,0.48098889284224416,0.41230708519161524,0.7858407394617357,0.9921537083506635,0.9105501242028591,0.5887691836648675,0.30860540546560133,0.6910362458889543,0.9617083075239625,0.9622747859739575,0.692404283710231,0.21384114157836104,0.5873110700265749,0.5193986508476076,0.9924129342696886,0.7870548191869715,0.13243943226004445,0.4795087918716564,0.62627894505884,0.999557229637311,0.8683009620587954,0.06820143463285039,0.37266337693707796,0.727262482120697,0.34603686834167635,0.9323488195780605,0.02412682430852231,0.27176410878155066,0.8176337063729597,0.4518264833833461,0.9762075949690028,0.0022737216919687664,0.18152260802073295,0.8931726177003354,0.5598656225114534,0.19153643123537906,0.0036625854117453005,0.10615281716526082,0.9503518298452166,0.6651092596864702,0.2832755471330307,0.028228560696810845,0.049174225175600605,0.9865012862288611,0.7626429084146354,0.38513488906117604,0.5087352763835422,0.013247520415278102,0.23642729438385424,0.8479121099920497,0.49235800452913586,0.4011336290761931,5.034639842160793e-5,0.15130340946374465,0.9169351097897933,0.5999379727678193,0.298148673643377,0.6804772068080476,0.08246235864752605,0.9664887903884183,0.702851209310747,0.20458942454069928,0.5760907971378842,0.03311876301381045,0.99425917917585,0.7962920487077749,0.12482475078887695,0.4681512301950227,0.830109669220938,0.9989495022635603,0.875897151231118,0.06257936603668568,0.3616988823682125,0.7417264166503028,0.9803407390049363,0.9379492546149839,0.020759898284399503,0.26170468244390366,0.6420554393135843,0.46315845604204064,0.9795507563802571,0.0013191611648569745,0.17283798771697217,0.5357510012127636,0.5711407431700807,0.9987590210951576,0.00516496480860168,0.09924854236866859,0.42777712430010895,0.6758010221382919,0.2935801868051149,0.03211772448659772,0.04437269984472347,0.32317578711237305,0.7722520471118769,0.39623285865897495,0.08091884654926584,0.010772957927964344,0.22683148312238777,0.8559899138903965,0.5037310701416925,0.3900113258674803,1.829962084259895e-5,0.1432431330575144,0.9231043754855692,0.6110550545232682,0.28779637856713414,0.012610927473688749,0.07631400203150462,0.9704614361148567,0.7131931808314398,0.1954905512806155,0.5648311552968284,0.029169431578493,0.9958496971503322,0.8053759783816774,0.11740418289084081,0.45681014689354754,0.00401089782534686,0.9980836212112283,0.8832988533222463,0.057183616427177286,0.35080594402318643,0.7317088053255623,0.9770588923510415,0.9433230971598857,0.01764092840537812,0.251768548769215,0.6311149139702856,0.9337572872243219,0.9826458009154261,0.0006226153113729205,0.16432263920640838,0.5243984437006558,0.5823790560065474,0.9994307405501315,0.006923369081815345,0.09255161413222918,0.4165426568390285,0.6864018261256648,0.992894121800068,0.03624896794580762,0.039806913527641374,0.31258401755590703,0.7817203241244302,0.40738451679465504,0.08723001548749931,0.00855151877277005,0.21737700772193447,0.8638835306006777,0.5151022053194502,0.15748588636642652,0.0002449405753699452,0.13536744065656425,0.9290547293466607,0.6221146770153645,0.27755387645637697,0.015275065248155528,0.07038485817838347,0.974190667728619,0.7234248473941552,0.18654922950418495,0.05294004186040402,0.025463705242840085,0.9971836652680413,0.8143019082343315,0.11018156792621464,0.4454914097802261,0.002701632646806229,0.9969600344823228,0.8905022387329649,0.052016977534959485,0.3399901978473041,0.003161544536754768,0.9735302180975566,0.9484675668167244,0.014771528409008694,0.24196084865741008,0.6201065505046823,0.9279883014120558,0.985491127215798,0.00018444452044091841,0.15598096828267893,0.5130332625703973,0.8624609225814239,0.9998440573365295,0.008936888442861557,0.08606549740911235,0.40535136973997643,0.6969061868519656,0.9908561287155401,0.04062015359220783,0.03547922853662838,0.3020892159793135,0.7910428406187869,0.9589470441966346,0.09375474930439565,0.006584352309875141,0.20806875987512585,0.8715888760098081,0.526465526700741,0.16585948754765106,0.0007301519992429228,0.12768040710004214,0.9347830926932991,0.6331111180573596,0.25356734517697066,0.01818999698962409,0.06467799479399178,0.9776745557461504,0.7335409151919063,0.17777008540122735,0.05814857744669877,0.022003501328907493,0.9982603933413426,0.8230652200396127,0.10316064283553777,0.11873997625436061,0.0016496668588898422,0.9955793234143262,0.8975035804719975,0.04708212255006422,0.32925723984707345,0.004566939765277056,0.9697565419607815,0.9533800018657064,0.012153182906782023,0.2322866565576081,0.03061909425160403,0.9219978768491786,0.9880852631254776,4.875499174605835e-6,0.1478172908796101,0.5016613381030652,0.8545334801433488,0.9999987576065607,0.01120448110809763,0.07979354807979144,0.39420905331223166,0.770513688294219,0.9885641694185855,0.920798026164237,0.031391883991665814,0.291696812334162,0.8002147731771149,0.9543154513089098,0.9689883268231037,0.004872476340192167,0.19891155561727591,0.8791019634152195,0.8988518910548912,0.9952786166141323,0.0014736828467877272,0.1201860096160664,0.9402865017023653,0.6440386881522334,0.998441236767984,0.02135421452873365,0.059196364577488725,0.9809112976232985,0.7435361502278598,0.9783285046840928,0.06358572448485589,0.018790610126824647,0.9990793242771605,0.8316613797090635,0.4702170576068925,0.12619615824363,0.0008555447428058027,0.9939422023794136,0.904299256084333,0.578135795502734,0.20626184137365722,0.006228669284965349,0.9657398164196187,0.9580578606404444,0.6824058823068342,0.22275097784263043,0.03465907881785507,0.9157891129478153,0.9904268664530713,0.7781582927074788,0.1398358308381774,0.08481917893850766,0.8464226040678736,0.9998947613191713,0.8609217452068948,0.07373901121572934,0.38312147252792206,0.7608794477959965,0.9860194297561105,0.9268314943401472,0.027546994661933943,0.2814121835919059,0.6631541914265986,0.9494487981506375,0.9728097999167873,0.003416776578762215,0.1899101328345914,0.8864189055875582,0.8918905790060225,0.9967096460427651,0.002475148419307349,0.11288812576392987,0.9455621089408546,0.816032527118508,0.99741499877872,0.024766080717047667,0.05394280369365373,0.9838992186879405,0.753405381023377,0.9748929207748296,0.06924866982544337,0.015826693968508776,0.9996400343652141,0.8400859396378054,0.9301951093225653,0.1338457442474929,0.00031967717289022035,0.992049518414841,0.9108857495254622,0.58934827890834,0.21554086082040724,0.008145873326271091,0.9614821197053711,0.9624987228430024,0.692947339180116,0.3105191613942714,0.038939828171028645,0.9093652220876426,0.9925147256661293,0.7875364762122485,0.13204071772111375,0.0912635785272855,0.8381324908768624,0.9995321222814586,0.8686987290474889,0.06790501940039678,0.16267379982615482,0.7511102297322904,0.9832232263621672,0.9326441222909476,0.02394654987164241,0.2712406509618671,0.6523620546456498,0.9443496027009106,0.9763866438675135,0.002218006196490596,0.18106914881281627,0.5464991381854049,0.8847265049659851,0.9978836806818832,0.0037340305641223037,0.10579053142787298,0.9506071848391227,0.8071381101052777,0.9961314010543851,0.028423830274105222,0.048920030305470485,0.9866367730064487,0.7152075076361285,0.9712116299275415,0.07513448349225199,0.013113286367583687,0.9999422334972439,0.848334541005705,0.9242880279455279,0.14168477641298516,4.2341404023205076e-5,0.9899022507846937,0.9172596529805599,0.8575517528293162,0.22496705783292714,0.010317559938558762,0.9569856547264776,0.9667002907961436,0.7033889661805232,0.32109235490588817,0.0434591274753795,0.9027295279538206,0.9943477605179856,0.7967658899542993,0.42557197371312583,0.09791945605179553,0.8296674298284594,0.9989110281208297,0.8762849502302188,0.06229459110849145,0.17115545084118572,0.7412110886418237,0.980177005976734,0.9382329025954848,0.020592412470764765,0.25974726322456826,0.6414910865907855,0.9390205032549015,0.979717008036251,0.0012767854304604476,0.17239317782757796,0.53516397694918,0.8773633755865713,0.9988001130925382,0.005249677942659958,0.09889689886346187,0.427194840345923,0.7980847815537124,0.9945911077212548,0.03232557070076719,0.04413064316776483,0.9891225441835475,0.7048867366897764,0.9672865368214993,0.08124012019824833,0.01065179122594817,0.9999857653171109,0.6021212431207165,0.9181614223186509,0.14970919886875927,2.3680928178615446e-5,0.98750151047322,0.9234176686276694,0.8495097243817907,0.23453555534966508,0.012742605503335558,0.9522527479287402,0.970660390632136,0.7645372220141982,0.33175811423127527,0.04821463847075369,0.028971688738726353,0.9959250226066723,0.8058417586866414,0.43683694354869596,0.10478336779827646,0.003936848939990245,0.9980318001879255,0.8836764836867238,0.056910629144195646,0.17980724418457172,0.0020663136196591436,0.9768823446971809,0.9435949436501236,0.017486317871210688,0.26978293158855504,0.023447429821360832,0.9334642570588232,0.9827991693112272,0.000593601263025767,0.16388670877768263,0.06708177892696959,0.869805000509692,0.9994584691177326,0.0070213063674536835,0.09221079479758415,0.13093179909332203,0.7888772256053103,0.9927949157184743,0.03646928325838483,0.0395771202826235,0.31203854789897145,0.6944599584931335,0.9631196722778976,0.08756242092118954,0.008443482107405254,0.2168917318629599,0.5909621344442693,0.91181846231338,0.15791485982356973,0.00026370540018216815,0.1349650191736026,0.929356610343977,0.8412868615599653,0.24424140268358518,0.015419755315605521,0.07008408265823185,0.9743769734174991,0.7548184334918003,0.3425109209662812,0.05320390068239089,0.025278620783816264,0.9972456958656164,0.8147593866056136,0.4481345935959897,0.1118517624172255,0.002640882004885603,0.9968948933903554,0.8908695050789829,0.5561801878364275,0.18862470346688298,0.0032279645410058233,0.9733409471628054,0.9487274711648475,0.014629873148933215,0.2799377129746273,0.027012453820883686,0.9276837388833451,0.9856315329994572,0.00016880716984923883,0.3815268129558871,0.07288370264090183,0.8620552903962887,0.9998584081277454,0.009047999207876745,0.08573567858304437,0.13869969425943962,0.7795202061979609,0.9907437543857281,0.04085282401328372,0.03526181761728947,0.22138706661333607,0.6839325678028534,0.9587131922091183,0.09409811453808353,0.006489501578727408,0.20759118213533995,0.5797559624688071,0.9052624297417038,0.16629751371438656,0.0007622906327159895,0.12728785666648024,0.47185505027050806,0.8328874188270198,0.25407957808362513,0.018347624233046533,0.06438880231215077,0.977848116213111,0.744967803338781,0.35334521166891214,0.05842433269396041,0.021831171012289097,0.998309096985869,0.6456091023796298,0.45945907851413426,0.11912098276084648,0.0016022458924471739,0.9955008959573302,0.8978602927780053,0.5674660556359955,0.19760326658406074,0.0046466425318019144,0.9695546456728616,0.9536278295986602,0.6723226188410606,0.29020635335575784,0.03082219892828486,0.9216819395362028,0.9882126336518287,2.622937016028004e-6,0.39260602328046207,0.07890661393543091,0.8541182549029789,0.9999997231963723,0.011328707864402099,0.5000205925593357,0.14665452418063024,0.7700185646011104,0.9884386849824043,0.04547392494602315,0.031186967885198147,0.23090235418495042,0.6733100114319306,0.9540693765032751,0.10084381951764987,0.004790860618498705,0.32771604357383044,0.5685085252049606,0.8984967166581643,0.17485282340302566,0.0015191786605727176,0.11980353333530042,0.46050794560888414,0.8243157420075911,0.26404499133292225,0.021524697392675485,0.058918904760529134,0.35435149809647226,0.7349904282160222,0.36425538073782554,0.06387323348317148,0.018631123115352588,0.9991146757696452,0.6346919352695917,0.4708045390780448,0.12658726777523804,0.000821477987183572,0.9938505291353158,0.5281038298157547,0.5787170168761566,0.2067382880778239,0.006321613575998808,0.9655253992385389,0.9582934835335477,0.6829537027057364,0.30058353979491326,0.034874694002778595,0.9154619643147713,0.990541135821317,0.7786471309563742,0.40374079864723433,0.08514739658997866,0.8459980006074834,0.9998823412079881,0.013862252311141743,0.5113930042502239,0.15479217307243615,0.7603772169109163,0.9858809001385047,0.05033019512485648,0.6185131989211134,0.2405568713716852,0.6625977854315501,0.9491906278446107,0.10779604566990497,0.0033484380940404512,0.3384365990044661,0.5572256420137897,0.8915248236048261,0.1835763624201599,0.0025339778741249597,0.4438607366689739,0.4491812739150647,0.815576266039268,0.9973548889345909,0.024949330994629704,0.053677220097731126,0.34350995134838663,0.7248914703615438,0.9747084479413908,0.06954778381926713,0.015680132779869738,0.2451461321249026,0.6237050793064585,0.9298948876951518,0.1342467544463415,0.00029898225403707235,0.9919446468148649,0.5167421210613756,0.8650068348142533,0.2160250415392036,0.008252011052957475,0.9612552925693802,0.40899736802050657,0.7830743200734707,0.3110639031939374,0.03916784230610537,0.9090270313994011,0.9926158347539383,0.6879232872343621,0.4149253779857789,0.09160282165854516,0.8376987288839046,0.9995063228953762,0.5839969356988787,0.5227595212645086,0.16310843056088775,0.7506011515066864,0.9830717232375852,0.9329388256373515,0.6295308795344603,0.25034562298040886,0.6518014322474609,0.9440794704703624,0.9765650328005409,0.7302536274077716,0.34924074643409536,0.5459131505958783,0.8843503578001153,0.9979374251017241,0.003806163221941994,0.45517576641118884,0.4378808955455598,0.8066735126779796,0.9960579912964889,0.028619753152659966,0.5632039114120694,0.33274937167520036,0.7146761549195901,0.9710144939546179,0.07544504772167832,0.012979726831715943,0.23542783020414138,0.6126542190279842,0.9239763712744364,0.14209547979864284,3.50290293741895e-5,0.15046082521612414,0.5053717500273076,0.8571401286676608,0.2254587220539605,0.010436836185832521,0.9567465349946657,0.397838440275915,0.7736267701246649,0.321642021071493,0.04369942258737286,0.9023804701883499,0.2950756954624353,0.6773360589339947,0.42615397445737446,0.09826954914034736,0.8292247337289604,0.9988718628083062,0.5727644132385755,0.5341142626299341,0.1715989938609278,0.740695426469919,0.9800126077320441,0.46479494002895944,0.6404815415960501,0.26026354436585175,0.6409265378523457,0.9387385488647355,0.9798825951130188,0.740288854968727,0.3601228958573365,0.5345769039709414,0.8769770312724656,0.998840514073783,0.8288755723600879,0.4665139879608673,0.426612657252861,0.7976120881584635,0.9945044360313889,0.03253406481089438,0.5744687523044839,0.322075326540582,0.7043497672371698,0.9670768397061396,0.08156197397908399,0.6789461028373349,0.22584641644254888,0.6015450720873973,0.9178384918532982,0.15012938294559403,2.9754881115506837e-5,0.14241945922047605,0.4939985996798549,0.8490886402183175,0.23503444868862056,0.01287495855833437,0.075690183542517,0.38673237035026653,0.7640376472171818,0.33231242036862274,0.048467090232318266,0.8955257195751706,0.2847553181247364,0.666657077949736,0.43742077844908167,0.10514412970791676,0.8205803995402934,0.19282939212711053,0.5614942428783102,0.5454513534668991,0.1802594700026482,0.730665166967281,0.9767051363911143,0.4534598553389006,0.6513595192946506,0.2703055040510248,0.6299787288556701,0.9331706263906621,0.34759871948951276,0.7501997584216298,0.3710774169110129,0.5232227674495048,0.8694086589397352,0.9994855057571399,0.837356599231041,0.4778695349856684,0.41538238916036396,0.7883966808110264,0.9926950269400859,0.9087601413612649,0.5856950634814472,0.3114933386357145,0.6939176501294465,0.9628975225162147,0.08789539772809057,0.6895189511810114,0.21640684820995387,0.5903833862951184,0.9114844251361802,0.15834430719069315,0.7844930086115784,0.13456310339433925,0.48262855442332264,0.8408565352612627,0.24474726701584276,0.015565116699599757,0.0697839027250261,0.37568490446195163,0.7543119127095191,0.34306958028047974,0.05346837847639879,0.6253738899259855,0.27454630718016776,0.65589186952655,0.44871996057960417,0.11222300649176231,0.8117701988480084,0.1839355589738489,0.5501922557411194,0.5567649280280873,0.18908537810418785,0.720515562598874,0.10808384483624073,0.4421488502590858,0.6621591844255125,0.28046630638221726,0.6189636695925063,0.9273785838600523,0.3368068783428406,0.7599812099205299,0.38209864178727193,0.07318995737972805,0.8616491566353897,0.2390854183528895,0.8456630796865952,0.4892365321891474,0.13910675843990133,0.7790320586358277,0.9906307002007118,0.9152037690249393,0.5968770365124185,0.2218759318519274,0.6833852011153968,0.9584787047401553,0.9653559863396648,0.6999937434805665,0.31763246500552644,0.5791749366448763,0.9049174586816222,0.1667360021781355,0.7937714863312219,0.42190488388569325,0.4712674970554596,0.8324480730415049,0.2545921516778119,0.8738311931981344,0.5298240542814334,0.36470175850796027,0.7444545986422514,0.35390793511276064,0.05870069968108199,0.6363505522469007,0.26445394471382605,0.6450460035229942,0.46004567471537794,0.11950251692067454,0.7365099864599067,0.1752052557925573,0.538864299411862,0.5680491327333714,0.19807215169011622,0.004727031539476179,0.10112327363378443,0.4308677770402068,0.6728749493023702,0.29074069421719895,0.03102595358362975,0.045667351320724026,0.3260994724035067,0.7696281485971935,0.3931808681660763,0.07922421965373022,0.8537025390824715,0.22945167573356973,0.8537907160002751,0.5006090983506013,0.14707114995589815,0.7695230668359433,0.14543747973733345,0.921432572583472,0.6080088859071655,0.2313985451427596,0.6727578696251635,0.9538226726495352,0.9693950951794924,0.7103650601371189,0.3282686294416026,0.5679255223257578,0.8981409902012956,0.9954386123380533,0.802897968328824,0.43315793013982556,0.4599213057237312,0.8238676040503135,0.2645640089863308,0.8812866677655224,0.541168506939487,0.35378861510650833,0.7344708051344806,0.36482187716136527,0.9418706976822134,0.6472566675555844,0.2544834524575388,0.6341250915294073,0.47139206099532793,0.1269788946167194,0.7464684893901297,0.166642999593216,0.5275162349117113,0.5792981291984235,0.20721514105410166,0.8341711492956633,0.0943690790160221,0.4196224724463783,0.6835012696484798,0.30112335164523574,0.03509095355221442,0.041036614056828735,0.31548204162338744,0.7791355831795677,0.404318362165553,0.08547618896033088,0.009136032505442093,0.21995791330227799,0.8617353029785636,0.5119813493679791,0.155218144882667,0.7598746253104843,0.13751070905660578,0.9274433292887805,0.6190848521091448,0.2410601313222891,0.6620411541805516,0.0719904067338667,0.9731913416254728,0.7206275350895046,0.33899364672718824,0.5566409637217398,0.8911585258020469,0.9968430779325202,0.8118677326137034,0.4444455601066184,0.44859585088399884,0.8151195677742973,0.9972940900764771,0.8885448667460403,0.552491659242575,0.34295112065688316,0.724365697745063,0.3758057596137907,0.9470784004565473,0.658086593089045,0.2446399890881692,0.6231347839645025,0.4827532488627275,0.9847350353855908,0.7562994709040536,0.15825322043923784,0.5161539336656955,0.5905060972554617,0.21650961566464388,0.8425441165111482,0.0878247555654284,0.4084187547352285,0.6940326474651968,0.31160890673751274,0.039396494858152276,0.0366433418788345,0.30496007940171577,0.7884985945742369,0.41550536130867166,0.09194263056561891,0.007098961073798982,0.21060904307853556,0.8694927301366437,0.5233474013022842,0.1635435280106522,0.7500917261090693,0.12977148830523738,0.9332329292090029,0.6300992044754636,0.25085569153992715,0.6512405995501234,0.06622222828465046,0.9767427615209523,0.7307758585906489,0.349801967798395,0.5453270994002557,0.8839736781718579,0.9979904797005599,0.8206761382800456,0.4557619336295325,0.4372969922631793,0.8062084903984408,0.17848570049707052,0.8956020347881779,0.5637876526551003,0.33219488241802786,0.7141445047999776,0.38685389947076076,0.9520547873699204,0.6688347255044544,0.23492864755854564,0.6120807671518731,0.4941233601025916,0.9873982624066944,0.7659978445068918,0.1500402591553781,0.5047832744648559,0.856728009739494,0.22595076661262414,0.8507398533188413,0.08149368927831163,0.3972624206475654,0.7731340207194052,0.3221919343265395,0.9191036152530946,0.03248980784116595,0.294539029742827,0.6767856886165141,0.42673607750471776,0.09862019876891692,0.005316913879674978,0.20140990211544674,0.5721821222560758,0.5347013734218902,0.17204299183324168,0.001243880495858829,0.12222382171270874,0.46420791920499777,0.6410462442418833,0.2607801576276678,0.6403617938803663,0.06067848402556186,0.3579050732294845,0.740804779954798,0.36068800049042227,0.5339897830913531,0.019647827459559675,0.25823753193547283,0.8293186279080822,0.46710119568027364,0.4260305758274545,0.79713898246428,0.16985939887452683,0.9024545205527073,0.5750506426933237,0.3215254656073773,0.7038125146872205,0.09689760421487636,0.9567972836676093,0.6794955037782853,0.22535445246239644,0.6009687603779206,0.9175149825325433,0.989809312296037,0.775558592314449,0.14200836508181625,0.4934101404245923,0.8486670724425176,0.9999490674606148,0.8587541192904107,0.07537915581291749,0.3861592424081756,0.7635377066338115,0.3328669588131014,0.9251971629699063,0.028578160959076282,0.28422428443946135,0.666102109924944,0.4380047000440183,0.9717850802903037,0.0037908129443097183,0.19236524999703486,0.5609101623551325,0.5460373912451996,0.18071213877544684,0.0021745887458923807,0.11487161439945148,0.4528739367057893,0.6519203074713268,0.2708283947223298,0.02380496002374799,0.05536204225883801,0.3470383229678188,0.7507091102741955,0.37164611243091206,0.5226348806590064,0.01661540929998706,0.2483454507391289,0.8377907299220733,0.47845747938815153,0.4148024307576015,0.0004410391976241712,0.16140391015036842,0.9090987786018647,0.5862748019492668,0.3109483905214454,0.6933750731206215,0.09027354784347441,0.9613034356085852,0.6900634120835543,0.21592235743465327,0.5898045129327276,0.03827588723056741,0.9919669375899066,0.7849767676493454,0.13416169387557098,0.48204041594077274,0.8404257367546359,0.9996574130295681,0.8665827678895188,0.06948431879462247,0.3751149647393075,0.7538050396144966],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],69:[function(require,module,exports){
module.exports={"expected":[0.544816368443462,0.5361028379285638,0.005213659625984579,0.9096661561750896,0.9792540904828442,0.999737544882813,0.6713054380610919,0.8109517795055019,0.9187379329781524,0.9836201054000886,0.9989504550620061,0.30969044095050924,0.11738221243721042,0.07481676762453426,0.38676403671055326,0.9976395568405839,0.7013658260592628,0.12801073980507993,0.935553625388771,0.5932914517746467,0.9958062264263319,0.7160867612439871,0.14487091306244648,0.05479989623015702,0.585585485437776,0.9947331274629203,0.7231231243729972,0.1504277923358312,0.051289533528355746,0.5695812860487838,0.9905805141299711,0.7448328585136144,0.16219278361811718,0.04437875808443925,0.5535040388014558,0.9871936183075949,0.7588278423572072,0.1743124118306516,0.03481317989688493,0.5373706219190333,0.983295256652476,0.7725511034340116,0.18677395353966347,0.03199892163674273,0.5044666735564018,0.9812284049493826,0.7928125295867159,0.19291715810503174,0.029299501270479034,0.49663438059351517,0.9790434696369688,0.7991251298305935,0.19913571451987178,0.021583837840133624,0.488802913484803,0.9714292902077825,0.8053643308848024,0.23311673304994918,0.019366221472810696,0.46426250327165286,0.9626769633761068,0.8244433751638134,0.2397725144317901,0.017266542805644325,0.45645486175870487,0.9596510305655439,0.8303628643387118,0.24649215031686528,0.01145072867227076,0.4486579053321711,0.9494304868785859,0.8362012892227138,0.26796740791714924,0.006814393828155241,0.4242896203502683,0.9459430732738102,0.8655951103905917,0.2749335206960881,0.005586253530461327,0.41655716009446253,0.9342972204111306,0.8708930786819604,0.29713641593238904,0.006992048841114817,0.3924422247246916,0.9303629668013247,0.8761000373966867,0.30431976061157306,7.980469063784135e-5,0.3848067228976927,0.9263231109205077,0.881214708853586,0.3429567099318853,1.2123946152575726e-6,0.37719948714516033,0.9221786440666966,0.8862358380168791,0.3504116886020341,4.530957595721974e-5,0.36962238412717796,0.9179305832073018,0.9111210158319759,0.35790337318467746,0.000212085414117269,0.36207727310987237,0.8938555236880781,0.9155280968631022,0.36542992537362595,0.0005014989857152208,0.3228879185487179,0.8889823026632544,0.9198332157969231,0.3729894983068924,0.0009134792745792986,0.28490671271172835,0.884013633336153,0.924035316245293,0.3805802370198743,0.005108674689634496,0.27786279088199495,0.8562798897557411,0.9281333670986962,0.42105401475074783,0.006286121829165547,0.27087337698061154,0.8507411170264862,0.9321263627792593,0.4287975158267774,0.007584716257814039,0.2639401860668142,0.8451162795998661,0.9514089809572311,0.43655848853631246,0.009004139327063787,0.25706491940386733,0.8140835403436044,0.9547215620594209,0.4443350284953642,0.010544042739521253,0.2502492640416091,0.8079510501436908,0.9703279722831524,0.4521252275000591,0.012204048634380349,0.21535649515474642,0.8017429950537562,0.9729281685403598,0.45992717399487315,0.022928246346826053,0.2089523792228225,0.7954608984035634,0.9754123178965195,0.5346391389660358,0.02533130124063082,0.2026196804250328,0.7891063016911597,0.9777798107921811,0.5424481290627815,0.027850830126004644,0.1963599526761568,0.7544563026273365,0.9800300662930038,0.5502467032567313,0.05764059750646233,0.16461453496302658,0.7180705605534609,0.9722273596235269,0.5246788192782394,0.046274700088695,0.18406553607934323,0.7408491327761522,0.9841766853465562,0.5658049525191566,0.06515821788128673,0.15316302434844825,0.7038694795724695,0.9996808067126033,0.5403098122154149,0.053077964358275775,0.1720811958857557,0.7270055796197579,0.9981080964697231,0.5812986169852973,0.07310261719658662,0.09865037982167202,0.6894683092622896,0.9999951504274185,0.5559012427654061,0.0603198638296466,0.11446434312488812,0.7129392300239777,0.9992248569772644,0.5967124902744032,0.08146599835819612,0.08950665162757931,0.6748811837665555,0.9998187699080018,0.6998400142723364,0.06799329088272454,0.10468065404168564,0.6986638895199816,0.9998516492612333,0.6760819586348632,0.09024015305886929,0.08076580540917216,0.6601224197361034,0.9991518382644226,0.714098770220783,0.07609071437123494,0.09528495428829309,0.6204886941584409,0.9999878581513357,0.6906543971306867,0.09941646983438934,0.07243641993979155,0.580033069470729,0.9979950100620698,0.7281473972210253,0.12547475758402227,0.08628646534928403,0.6052289271408307,0.9996333499642687,0.7050397163455432,0.15408782414989802,0.06452667016133956,0.5645335455559597,0.9963494206792232,0.7419721071358765,0.18506048894589983,0.045737403824624934,0.5898658823521337,0.9987884726349241,0.7192237976929827,0.16556670779431548,0.05704431916091757,0.5489706846774255,0.9796696954698001,0.7555593315933622,0.19737975869894525,0.039416188265393226,0.5077414393774523,0.9862736581784807,0.7331927200930678,0.1773738236647437,0.02492987434790056,0.5333597611292481,0.9750135739939423,0.7688957353035069,0.20999603750507578,0.013684194053435461,0.4920773246919493,0.98239035556693,0.7469327736353282,0.18949758357299912,0.02027917500975207,0.5177160963770405,0.9698912466515901,0.8345680143731057,0.22289694301668123,0.010283691460499678,0.4764209857794119,0.9541868312123443,0.8150802723553835,0.20192608855807792,0.0160993015071888,0.5020550440205316,0.9643077407918296,0.8460430334491683,0.23606981353699785,0.007363824850320111,0.39459388125909045,0.9474146551845575,0.8270867960070392,0.21464714056448664,0.012394356210447655,0.4197880147119397,0.9582685363910866,0.857178425825941,0.24950172044703156,0.004927459949304547,0.3793353971384079,0.9402033604695956,0.8848336060479273,0.286065044162112,0.009167975367684378,0.40436803753119765,0.9517795606747598,0.8679632625836282,0.32408769940235954,0.002976987947246157,0.3641953402560447,0.8952083386904754,0.8946442103957558,0.36331031920623513,0.006423325536148661,0.3890419191039065,0.9103898325348587,0.878386958858048,0.33883487024022285,0.0015143231504712862,0.34918856994176334,0.8854202156228869,0.9040674880309651,0.3784429589826198,0.004799479793233363,0.3738247013714182,0.9012414943276511,0.8884392842292292,0.35374021788203847,0.001907689354340436,0.33432981471015927,0.875253818806028,0.9130941904024493,0.39369490188788037,0.007207374643722231,0.3587313193936279,0.8916993544508117,0.9349312243277397,0.36878911335530296,5.767717776078429e-5,0.2589920397870987,0.8647191261312617,0.9217154581810626,0.47550221958645217,0.010098924752680039,0.28176634348859275,0.7827273638977587,0.9073907326896921,0.4499336406322676,0.00561752694388562,0.19021907752040262,0.8034960199677491,0.8919947167080315,0.4244967181208303,0.00243617648387201,0.21074583128112662,0.8234665911184147,0.9495222604346392,0.3992583419713311,0.02464385438708172,0.23203321903609841,0.7340059897106072,0.9377082505327126,0.37428487999773774,0.01732116710419379,0.2540252626438555,0.7563495019047142,0.9794092572437119,0.4811835507164604,0.011267750823450828,0.16625105880459823,0.7780189074941666,0.9987236343878318,0.4555948748209173,0.006499523843368049,0.1857754472163921,0.7989572237685704,0.9962376316041668,0.4301229683668645,0.03528483377473368,0.20612613271400881,0.7058782996657011,0.9924467030747641,0.4048348132686269,0.026437860494888277,0.22724960034461544,0.7289655017776162,0.9873608175724927,0.6443260704691525,0.01883618460623232,0.14359296085884254,0.7514506073149739,0.9999806018037476,0.6195957675159982,0.012499795770867517,0.16203835326091226,0.773274488571122,0.9990974395537002,0.5945509708884961,0.047749759168670414,0.1813724627328181,0.6769425643282214,0.9969018312958806,0.6978194472301729,0.03741322310030615,0.2015444475495194,0.700682842121206,0.9933995506870222,0.6740191562320063,0.02829312318343402,0.12233371374236701,0.723895396519725,0.9992752110093921,0.6497612577031802,0.1597441252174706,0.13962771439157518,0.7465191868893529,0.999998355588827,0.6251095411556378,0.14141029421465295,0.15786936399682983,0.6473123526598534,0.9994066850766996,0.7261856311223863,0.12401942462675875,0.08752715717850545,0.6716125286608754,0.9975017553527643,0.7030292396568805,0.10761724815977053,0.10255675720857954,0.6954614256925522,0.996610230571009,0.679338954618835,0.18335313364020667,0.046661942302548276,0.7187963297691597,0.9989368437324071,0.6551770729017161,0.1639328975593441,0.05807010168002524,0.6171039593506906,0.9999514331950407,0.7536640661125881,0.1453963965810624,0.018145196813887987,0.6418686585597708,0.9996513309550608,0.7312424599756091,0.1277923750081349,0.02562116883562615,0.6662602944353239,0.9919961201868839,0.7082127696863777,0.20820493943491308,0.03434458585265432,0.5610766288269875,0.9959170702790912,0.6846355550127566,0.18777452015257678,0.04429250842884097,0.45304091177391137,0.9985339375860693,0.7801469029515995,0.1681651411162433,0.01073277632389441,0.47862093360540753,0.9786745310524904,0.7585480840030829,0.1494283679104889,0.01665831400809248,0.504257174660077,0.9854509896344017,0.7362693769730518,0.2342020025271042,0.02385486575867657,0.3967475824919827,0.9909508874431612,0.8254180251359675,0.21284158675628534,0.03230350724371017,0.42196243981777,0.9951597617339215,0.8055301999822546,0.1922362938997354,0.005240665441781089,0.447382507742131,0.9058984526494649,0.7848389407504603,0.28407670984117234,0.009592511831103323,0.47294094066735154,0.920332067008363,0.763398657979334,0.26124228785778403,0.015233952794592165,0.3663160417804344,0.9336603598417148,0.8485497905279187,0.23903571242557442,0.00023971953453905126,0.39119025503833244,0.9458482825531274,0.829714331096756,0.21751537881761546,0.0016904199815983012,0.41635059862683155,0.8868193214163805,0.9027664971484062,0.31273951921018595,0.004451494650401955,0.4417309099294166,0.902551581913994,0.8870489198887613,0.28921966585765463,0.008515682911784228,0.3364091930510297,0.9172252771401088,0.9460122524538265,0.26625408865670885,0.0002510751361471941,0.3608451342202021,0.9308018205759563,0.9338406882458179,0.24390317878094497,9.597419059914625e-5,0.38564700242802674,0.8662219751394834,0.9205282797172962,0.473302932835072,0.0012554402833623302,0.28374979606856415,0.8831911347191419,0.9061100336946697,0.4477430249662507,0.0037264244373754196,0.30714441675800164,0.8991526400110413,0.9592882513982203,0.42232053406819686,0.0022238796464587596,0.3310461779780114,0.8251427105868421,0.9485536647702258,0.39710231211017055,0.00046358605914864626,0.35539222672914716,0.8441872556982992,0.9366395440073223,0.5046196767092134,1.689282370531675e-5,0.25594490917173063,0.862326712636851,0.978779148474463,0.4789831239948089,0.01080761348592213,0.2786365733055804,0.8795133811821492,0.9707616042644243,0.45340183807366535,0.044441799472090926,0.3019103433021484,0.8007194946956661,0.9615061270594141,0.4279430884886017,0.034476745890754334,0.3257050175520954,0.8208016464732841,0.9510370554216953,0.5359182889588748,0.02573585033540804,0.22909790645983863,0.8400402057841143,0.9868640758535683,0.5103057115019887,0.018242098204426682,0.2509975522359885,0.8583845821655298,0.9803872796489899,0.4846660337459502,0.058239785534982935,0.16366456817816166,0.7751159942748987,0.9726472383996689,0.592387617375405,0.0468149807965757,0.18307266131743632,0.7961569329099121,0.9636643056186324,0.5670759266407569,0.03658188898253767,0.10739266629741229,0.8164190857739159,0.9930381256644427,0.5415878504447528,0.0877321641624969,0.12378055000621846,0.8358491707229283,0.9881274980399677,0.5159904132222988,0.07377162243268587,0.14115775498990862,0.6247585238819422,0.9819332713919047,0.6229762111955583,0.060931907395629814,0.07473627534200533,0.6494153454341407,0.9744717342991787,0.5979703001182275,0.04924678286457612,0.08877585027568335,0.6736792585919577,0.9972770655722848,0.5727067625353682,0.1062561653587214,0.10389679620194325,0.5688984993839924,0.9939518800965311,0.5472520324264304,0.09097634974484164,0.12005935049420763,0.5941949704431704,0.9893277795759637,0.6530821395346167,0.0767721186046908,0.05910445688360422,0.6192437427503353,0.9808942208522092,0.6284801530320878,0.06368082393604718,0.07177303504430937,0.6439789470811459,0.987279695078769,0.6035403101300636,0.12632555940391754,0.0855676954607743,0.5377529487340975,0.992383799697329,0.5783281936078918,0.10978644117588066,0.10045216315829997,0.5632617141140293,0.9961931127561839,0.6825872405770202,0.09427344367472079,0.045203095538509486,0.588604124033977,0.971378286422131,0.7783201423858801,0.07982736048106065,0.05645095442045572,0.6137135371087306,0.97930616954977,0.7566606795809067,0.1478615765617442,0.0688651870963502,0.6385239246506312,0.9997693045955842,0.842850521636032,0.2323393475439336,0.02453157229766073,0.5320801638638047,0.9913631963911369,0.7113757106754541,0.11336719220289643,0.0024005649807616325,0.424138378718849,0.9600122541139209,0.8037840347761405,0.1905037153373556,0.042869745558648364,0.31973904918630264,0.9982551900427179,0.6638688363257765,0.2820925640629033,0.010026561361355713,0.47514014510031244,0.9776561186603187,0.7615242794059701,0.3838568797292413,0.06601310763635265,0.3684393365450575,0.934752282763608,0.6146394317080395,0.23715981705222144,0.022802982298101404,0.267881921747511,0.9902790338879542,0.7165154748742272,0.33467189648498585,0.0018761831666306295,0.4185225422790708,0.9577541557143175,0.8082810505050702,0.19498995150784704,0.04059552664946109,0.3144465495140296,0.9038538606878799,0.6692307375456424,0.2872247828006224,0.008925150015727745,0.21903521288176314,0.9759442816225302,0.7663540503376313,0.38939542550396733,0.0632171655887328,0.3629616484132629,0.9319154229026303,0.9835936693324986,0.24201428566969707,0.021136119060892522,0.2628602685071801,0.8677177200675077,0.9193329437238699,0.3400493029558269,0.0014162350545600666,0.4129172451752128,0.9554368455406742,0.9680449788691258,0.445553422996207,0.038380732987493005,0.30917805169699997,0.9004750315692154,0.9949010539880311,0.2923845246048715,0.007887260568679999,0.21434953360801484,0.9741708798672899,0.9475763679315966,0.39494827828823353,0.0003736230953376163,0.35750168657364423,0.9290226935796151,0.9850071480804508,0.24690212545733414,0.019531198199432886,0.2578692899511131,0.8638407428791075,0.9224029951960546,0.3454473994944974,0.0010207801401183603,0.16954349709296096,0.9530606233435114,0.9700150214768198,0.4512097052510871,0.036225651062468445,0.3039342372300693,0.8970443998906357,0.9956790940673179,0.29757112204868796,0.006913027274101036,0.20970080401710223,0.8224876794247099,0.950082266019714,0.4005147198050778,0.08332005846826701,0.3520601572874614,0.926074468977151,0.9863578898039513,0.5081039101974661,0.01765735708226679,0.2529096316762769,0.859916701877993,0.9999224087201507,0.3508654878421862,0.05721259043096277,0.16529730742776433,0.9506257964937836,0.9719242663333638,0.4568722986663837,0.11744434924328984,0.2987157844152333,0.8935624094138961,0.996393016676238,0.5648930127668291,0.035759544383828945,0.20508962543513615,0.8181211213279825,0.9525299447140756,0.4060940300197976,0.08649015352705974,0.12523468428418705,0.9230711304562956,0.9876457197807991,0.5137892154047083,0.15653013480980454,0.24798193522827278,0.8559461046497885,0.999990253108531,0.35630286715408627,0.05988262458811883,0.1610944124873796,0.7721997193885604,0.9737724664726217,0.46254047076987864,0.12113066694279756,0.09003252041830662,0.8900295105441558,0.9970427294669151,0.5705272951025294,0.03790145120063082,0.20051659433089963,0.5710789926902518,0.997102945313892,0.4116854872330888,0.08971373723535342,0.12149458176421013,0.46309624129609733,0.9888704714266023,0.5194727369385604,0.1606848660377329,0.24308683801835085,0.6213812130252386,0.9999934223661242,0.6263506822409358,0.06260958915269682,0.15693535592796454,0.514346308380887,0.9877685397724765,0.46821348836773496,0.1248659924449862,0.08680371698472406,0.6704075177065981,0.9976281483971914,0.5761524545363202,0.20463975890492886,0.1959823022386935,0.5654455722319742,0.9964595299352178,0.6805353842609814,0.09299039261362368,0.11780343997351916,0.45742756190208855,0.9900319863163267,0.525153739619694,0.164883488622604,0.05747173581338488,0.6158568957668444,0.9999319160829778,0.63184452496224,0.25242527953806765,0.15282067573506036,0.5086611454774703,0.986486884431163,0.4738906176393375,0.12864984257510614,0.08362836164033649,0.40106095190190727,0.9981491977414989,0.8220615782275923,0.20924722520329264,0.19148733568181953,0.5598036862067837,0.9957518961346254,0.8967054171100474,0.09631969581737804,0.11416173637157778,0.45176438937143326,0.9702048244969201,0.7812081401164128,0.16912545946090107,0.05485334918243279,0.6103175920965358,0.9998057422151008,0.8634582470502256,0.2573818337470858,0.14875090415400183,0.5029748622307807,0.9851423006573825,0.9287362054141068,0.132481727881612,0.08050686512619531,0.3954932173612648,0.998605810100655,0.8263905346239757,0.2138923011822848,0.031851595556578016,0.5541540644083396,0.9949801354465164,0.9001411018275101,0.3086630400886219,0.11056994202288228,0.44610745625125964,0.9682407291157871,0.785891922292022,0.17341022984189025,0.052292543509673606,0.34057742948073094,0.9996149170834341,0.867339858898944,0.2623697712911514,0.014921418355478389,0.4972881941773822,0.9837349623767885,0.931634390096884,0.13636115269947469,0.07743963121656217,0.3899390010638147,0.9452663837592525,0.830677271496312,0.21857438598839957,0.008820623868102284,0.2877292473242611,0.9941443477002837,0.903525027179799,0.31392914893349155,0.004282390825107729,0.4404574942816109,0.966216065493159,0.9575296646548974,0.17773724551859754,0.0018282579196175486,0.33519796453268325,0.9165172267132863,0.8711739543145521,0.267388446966661,0.02263689285211068,0.4916018769036141,0.9822650516325042,0.934476741669999,0.3679017429447151,7.249414434562507e-5,0.3843990214628932,0.9426506533480801,0.9774910808483877,0.22329287398093633,0.009915816040478587,0.2825943018424061,0.9932446410073983,0.9068567554467517,0.31921932656080976,0.042644246884999626,0.43481523430079255,0.9641310955249103,0.9597935790212622,0.42358756433357264,0.002346327899979017,0.32983981718659194,0.9133443538139564,0.8749600373461371,0.27243721159394807,0.024359443196780683,0.23281024784674864,0.9807327585615757,0.9372628924673652,0.3733948124047858,0.06858320376429916,0.3788739951702802,0.7571388046401974,0.9791471965299664,0.22804715481034088,0.011074401966027603,0.2774874783926803,0.6590142154529195,0.9101358556600441,0.32453288867137686,0.04497181505867931,0.18649146893205315,0.7996940163115878,0.9619980178085061,0.42921228413391876,0.0029287707678711805,0.3245036805337288,0.7067161862220919,0.9922865905257282,0.27751541210125685,0.026143518971251944,0.22802098042954105,0.6040854789373618,0.9399924820926228,0.37890425859823307,0.07148560274100224,0.3733646368635038,0.7522452307921821,0.9807413331881358,0.48594782590822405,0.012296231778435363,0.27240943755691005,0.6536125950377253,0.9990413517236647,0.3298691479411456,0.047358242394492545,0.18208187119095653,0.7951227642222933,0.964142695866337,0.4348461605223249,0.1035569398827943,0.3191902448182211,0.7015249907895436,0.9932497501524635,0.2826223916092181,0.027988889400357764,0.22326689425547314,0.5985167496841165,0.9426651574657567,0.6488834049007886,0.07444343124761044,0.14026595066252923,0.7473190283215275,0.9822732846168823,0.747948893311254,0.01358114743061506,0.26736083619381035,0.6481911044058362,0.9993610427730641,0.5992274655482271,0.049803220201421805,0.17771339704463507,0.5421432069825124,0.9662273357746792,0.7021883126197341,0.10704780847286116,0.3139001973477668,0.6963077275385625,0.9941491065512289,0.7957077173557433,0.029895315780297083,0.2185486042788229,0.5929352770151127,0.9989959516103073,0.6543024011078807,0.0774563066807743,0.13633974477601057,0.7423608344462337,0.9837428526540251,0.7528709711104197,0.14474851677493894,0.2623423273540185,0.642750444842154,0.9996161400817845,0.83963140709608,0.05230643221478293,0.17338661156737767,0.5364741403002575,0.9682516678795585,0.7073761361679544,0.11058950652254673,0.0028509335808347136,0.6910650713366706,0.994984543387771,0.8002740596781354,0.18705660280155034,0.04467177874483874,0.5873417829093742,0.9986034813849274,0.659701437869943,0.08052383931667129,0.010923165758711606,0.47953995801212196,0.9851498472068482,0.7577603393456944,0.14877310395044546,1.2622235093517897e-5,0.6372913201111359,0.9998066106522788,0.8437827914897391,0.05486755463713516,0.02413639770980064,0.5308003555864419,0.9911242639768926,0.7125371350358024,0.1141815759033512,0.002276693997017576,0.42287112899103596,0.9957559525960098,0.8048015607152005,0.19151188285830612,0.04235173669229103,0.5817369909009312,0.9981465154115423,0.8828328869539068,0.08364563236141753,0.009772654133399672,0.47385946794050565,0.9772754883807178,0.7626163655636894,0.15284312330247296,8.536565159061871e-5,0.631814436365759,0.9999324298466488,0.8478897066225202,0.2382515494367793,0.022421707807389835,0.5251225867609091,0.9900257880072882,0.9169178920557275,0.117823551971103,0.0017668363080702854,0.41725760577596926,0.9572367640933559,0.8092896348220788,0.19600706671158274,0.004377600807588922,0.5761216259852289,0.9030964835913327,0.8864659521984577,0.28838592099891086,0.008685554779651605,0.4681823592194643,0.8301330962729065,0.767438421623898,0.15695804836269078,0.00022277441737783565,0.361728857960067,0.9312679801688133,0.8519516212535205,0.24311359821781625,0.020768793986245926,0.5194415682588589,0.8668476004658452,0.9200299889490158,0.12151496362606146,0.0013214264655039831,0.4116547855198799,0.7852968019921931,0.8137377014538936,0.200541572896838,0.0051604939269329075,0.5704964145253475,0.899705934628314,0.8900490269964992,0.29355177713776937,0.0076620083167943664,0.46250936619881106,0.8258409456138589,0.9481465134269966,0.1611173468540899,0.00042483075824889527,0.3562729910569355,0.928362703769893,0.8559680099627778,0.24800887596987703,0.01651595586729404,0.5137580349358456,0.8629599664118223,0.9230877537942273,0.6110246411351524,0.0009405220843213824,0.4060633929631614,0.7806083483367114,0.8181451852408463,0.4524860907951299,0.006007395913599778,0.3027552412234645,0.8962636825902097,0.893581647867334,0.5605234509476841,0.03414188737721696,0.4568412226959821,0.8215066465216322,0.9506393111235607,0.4017717520176497,0.0006915085376537622,0.35083571564242455,0.7317364456252622,0.8599383532192341,0.5093860600125791,0.017996719738864797,0.25179562598134797,0.8590253824759722,0.9260907910609691,0.6165620739082203,0.0006241724355642853,0.40048415136800286,0.7758835972103976,0.972346373434827,0.45815000619054586,0.006918197218460487,0.2975426008316201,0.6798590738645536,0.8970633578566205,0.566164298214494,0.036237308601693,0.4511786619011147,0.8171307596498768,0.9530738173710346,0.6710889635524738,0.0010227732600794903,0.3454177350432418,0.7266825193746597,0.9879274144288251,0.5150710272155297,0.019539832076224506,0.062258757124804553,0.8550443576076774,0.9290387122980128,0.6220844290526185,0.06049259408005825,0.16015270091438577,0.7711231597729593,0.9741807747206723,0.7233969420399629,0.007892780026831359,0.0892997818048143,0.6745415185839869,0.9004937065954814,0.5717965869451846,0.03839271882102224,0.03762503564215819,0.8127138510317384,0.9554497172592593,0.6764212052659487,0.0904480010988597,0.12065793946020836,0.7215992711092846,0.9891379197767297,0.520754044939165,0.021145093273497673,0.05953903150654688,0.6201368292720741,0.9319311361835418,0.6275909922363395,0.06323234793063409,0.018988012869464,0.766327651800228,0.9759538394035914,0.7284699146599696,0.008931018273713731,0.08608299464928043,0.6692013858722164,0.9977512682204694,0.5774195885875334,0.040607839226894094,0.035490769827158986,0.5641740444215887,0.9577667034589719,0.6817306264055158,0.0937365657779835,0.11697790447698186,0.7164873583614477,0.9716842350593138,0.7775555197596065,0.022812295685680717,0.05687628074043255,0.6146090701175029,0.9250370065962137,0.6330810511701099,0.06602859889259483,0.01746688687945036,0.7614976936045066,0.9861891709323861,0.733513334060649,0.12950975275146936,0.08291974881038161,0.6638393664902706,0.9497660049442325,0.5830325757906281,0.042882383287319026,0.03341658957388127,0.5585303502191806,0.9955834611103314,0.6870165401827739,0.09707768176301579,0.005701140552477613,0.71134744237129,0.9697672248175175,0.7822675275939961,0.024541223655501487,0.05427084926068404,0.6090664859607378,0.9220146060169614,0.6385538956995271,0.0688809852630961,0.016008177890580677,0.5016925302338977,0.9848304205866845,0.7385265478616653,0.13335240168612272,0.07981045346277083,0.6584561540302798,0.9472527072439987,0.8273608972310165,0.04521605678369239,0.03140276318331359,0.5528790849530729,0.8887899556410581,0.6922782628500644,0.30984840663078644,0.004876821322714053,0.7061801880012502,0.9677894488777588,0.7869430233380985,0.41363128804512495,0.05172307408711452,0.6035097937504653,0.9189376166738912,0.8682086116716305,0.26349881777173134,0.014612074590922453,0.4960058770463214,0.9834089560767242,0.7435089075898605,0.3636590618531952,0.07675551080245502,0.38868847103144244,0.9990774312638155,0.8316380368182683,0.47018592074439697,0.02944955114950426,0.28656889949282865,0.9939470421991536,0.9042809029669385,0.1039158321784463,0.004116547654114289,0.19441576667627009,0.9657511630708596,0.9580453543187843,0.17871876425421318,0.0019394573754130118,0.5979397122602881,0.9158064365841382,0.9904207909258609,0.2685243353127602,0.023019942333619148,0.49031974050966526,0.8464450957398824,0.7484597687631374,0.3691389591394854,0.06637362227174148,0.3831518008799225,0.9993904394023658,0.8358722781024595,0.475864306950398,0.12997604155303288,0.2814402376336845,0.9930329376180198,0.9076008010396557,0.10741198207505664,0.21085720371102173,0.18993460254671968,0.9636526310547622,0.9602958822855093,0.18309678769088022,0.0024720495425340494,0.11290786850184537,0.9126214707745616,0.6548620752677325,0.27357979487524775,0.024756386358091853,0.053956897544911675,0.8423224221964193,0.753378490973824,0.37463578366561684,0.06923283267481856,0.3776302453681648,0.7560381894726727,0.8400630733726953,0.05256879720936897,0.13382450384124073,0.27633984708808684,0.6577979254122485,0.9108679748143444,0.11095891432441674,0.21551520900651439,0.18549354623928827,0.9614941242804232,0.9624868696987885,0.18751580344004842,0.0030689983347415017,0.10933352724748491,0.909383131229353,0.9925093475865765,0.2786645425214294,0.026554304466663237,0.051416179788542626,0.8381554682949106,0.758264437971513,0.38014882440203845,0.0721477640098786,0.37212451872474206,0.7511372024666981,0.8442098805379441,0.4872297105007063,0.13772033194899785,0.271268387605748,0.6523917631700219,0.9140820016729838,0.11455617012096841,0.22021001320148575,0.18109317221696924,0.9592759219567014,0.964618033148302,0.19197523988973192,0.31576484640158464,0.10580971978865822,0.9060918368367454,0.9934581302188834,0.28377792052504563,0.028413464093621943,0.04893348759779376,0.8339447730424409,0.7631169777453618,0.8724951257313549,0.0751180392224407,0.013120384185936196,0.746203730164632,0.8483121631971576,0.93545134807388,0.14166302194009583,0.2662265151940667,0.6469658886291003,0.9172424658722548,0.6004839782952147,0.2249410090099469,0.1767340496803893,0.5408652866065836,0.9666890969621262,0.7033604707685048,0.3210632281159841,0.10233690193966732,0.9027480133348287,0.9943430826686788,0.7967407854795737,0.030333624751496036,0.04650914211580964,0.8296908811041598,0.9989130846944008,0.8762644089784015,0.0781432740991394,0.011857718989719823,0.7412384107248475,0.8523693907086569,0.9382178837666502,0.14565206381661128,0.2612148820332716,0.6415210036414564,0.920348958597317,0.9797082129538563,0.22970758446442285,0.17241674249418076,0.5351950919524822,0.968699793242393,0.7085423038491523,0.3263847557998346,0.09891552291916639,0.8993520932564794,0.9951640904649002,0.8012984205233598,0.032314538062160225,0.044143456938425696,0.825394342732829,0.9985060659955189,0.8799850213769467,0.08122307731742373,0.010658196356125138,0.7362418864252331,0.8563810382587712,0.9409277347565294,0.14968694158487533,0.25623413639206005,0.6360578125181174,0.9234010780146906,0.9812807625707795,0.23450912299511256,0.1681418091140437,0.5295203447152835,0.9706498618999422,0.7136971614023926,0.3317287410987196,0.09554602529205397,0.8959045158734105,0.9959210474079043,0.8058170817778925,0.43680600125419966,0.04183673807360372,0.8210557136976444,0.9980345641495838,0.8836564816554217,0.08435705049617581,0.00952197144674316,0.731214803580113,0.8603465869297251,0.9435805505167498,0.15376713332221897,0.00011070484623521004,0.63057702193806,0.9263984293242346,0.9827910571815878,0.23934500350964366,0.16390980251450876,0.5238417789393364,0.9725390506879656,0.7188243766330542,0.3370944927532675,0.09222884491222588,0.41599321352293783,0.9966138555832038,0.8102961847417625,0.44245106339975054,0.03958928390184874,0.816675555212347,0.6944886946995537,0.8872783149002211,0.08754478824724266,0.008449191235428255,0.7261578124566446,0.5909928060532953,0.9461759878982101,0.1578921112444852,0.00026269344195439803,0.6250793408567994,0.9306177007074554,0.9842389014254699,0.24421460047341265,0.15972127011740778,0.5181601291629283,0.8659750678710108,0.9996896589622297,0.3424813166885682,0.08896441086619644,0.4103929069679781,0.7842427602914334,0.8147351500305355,0.448103569660418,0.03740138513761293,0.8122544338626276,0.6892373728003499,0.8908500526171348,0.5561491929454216,0.00743999448928645,0.7210715671907039,0.58539530370356,0.9487137111738613,0.16206134177429943,0.00047932444912046623,0.6195654804146846,0.9276998963425063,0.9856241080197434,0.24911728399049937,0.016844412423823396,0.5124761303232706,0.8620768025228404,0.999857664878246,0.3478885161039532,0.08575314541759499,0.40480419133989193,0.7795460684555888,0.8191334034516973,0.45376278886878535,0.03527332479169071,0.30157754262280034,0.6839615725202985,0.8943712327919484,0.5617961674542918,0.006494511750725573,0.7159567257022718,0.5797867552336228,0.9511933920821346,0.1662742856100889,0.0007605698459097754,0.6140361538449095,0.4718861931750842,0.9869464977840801,0.25405241988514604,0.01833925284178084,0.5067905176614326,0.8581317015325498,0.9999610128141317,0.35331539156312924,0.08259546395254469,0.3992277895546001,0.774813216557771,0.9896292077165727,0.45942798898909765,0.03320537813461044,0.29637074894084403,0.6786619762988492,0.8978413999502062,0.5674351484569139,0.00561286532056926,0.7108139496103302,0.5741678861248376,0.9536147098694036,0.6722933372582647,0.0011063932524474906,0.6084920763812549,0.4662104314718394,0.9882058996636836,0.2590193697837894,0.0198963974179171,0.5011040266272361,0.8541402752099319,0.9999996894015437,0.3587612410846518,0.06110545449555338,0.02020889280744348,0.7700448168055453,0.9884453529589851,0.46509843721195215,0.031197812661027724,0.0011817423614758349,0.6733392696535225,0.9012601052161283,0.573065406535401,0.004795169242237052,0.005447549625903492,0.5685394231935619,0.9559773513314733,0.6776204930769744,0.001516749935513484,0.11982379233349771,0.4605390405433251,0.9894021507514154,0.2640174911976364,0.021515644731247396,0.05893359550191346,0.3543813379589452,0.9999736896375577,0.36422536023272856,0.06385797961099976,0.018639559596930755,0.7652414860046906,0.9871983164355758,0.4707734000490896,0.029250888055123825,0.0008232662566380333,0.6679941410912371,0.9516725935670959,0.5786862134002007,0.0040415292869924735,0.00631667012779602,0.5629020944971406,0.9582810108540952,0.6829246731905602,0.0019915868143287607,0.1161548883636982,0.45487275399974236,0.9905350963088682,0.7786212309723863,0.023196785327625258,0.05628374037786027,0.34895068807895424,0.9998830168853154,0.3697070422083404,0.06666692091063187,0.01713249169908221,0.7604038454794144,0.9858882594539897,0.47645214342827263,0.13037209988104087,0.0005293600515934305,0.6626272820192487,0.9492043271455869,0.5842968419843015,0.0033520429402612018,0.0072496499424020144,0.5572566292397301,0.9605253904524986,0.688205191488562,0.002530842467421468,0.036979548823889374,0.4492123047910256,0.991604589786381,0.7833250584160745,0.024939601746835627,0.05369128118691785,0.3435395768478531,0.9997276828735902,0.37520557794066733,0.06953191505007489,0.015687884057324908,0.2451729688472158,0.9845153514737437,0.48213393278824046,0.13422548716826233,0.000300061763927606,0.6572393866557151,0.9466779548941587,0.5898965665372811,0.002726799389021095,0.008246368386185865,0.5516037576779738,0.8879823588517641,0.6934613649212416,0.0031344471405720387,0.03915574095422686,0.4435584251120338,0.9926104928419959,0.7879922369749206,0.41489464068179027,0.05115655327089785,0.3381487042079393,0.9995077076952681,0.38072025617880917,0.5227283612456946,0.014305923535677778,0.24029683695199483,0.9830797700843059,0.487818033173726,0.6295007518578267,0.0001354010540122741,0.6518311519398968,0.9440938036060935,0.5954846627191834,0.22069794670510767,0.009306696530842817,0.5459442110265408,0.8843703079207177,0.6986925135879367,0.3163120722709284,0.04139154457207034,0.4379118463078392,0.9935526753593529,0.7926221629363885,0.42050374099396837,0.04867988450391064,0.33277876748359264,0.9992231198047511,0.872887445429726,0.5284075893952912,0.012986788894580548,0.23545429838370685,0.9815817009821244,0.49350370933052484,0.6349849090092128,3.539922116851946e-5,0.6464032774420063,0.9414522075485525,0.601060407694215,0.7352589353315492,0.010430497219976353,0.5402787213635419,0.8807085376205817,0.7038979608250083,0.3216128811639695,0.043686670469999356,0.43227329877912524,0.9944310154645213,0.7972142374066694,0.4261231243684989,0.09825097934791749,0.32743046129107367,0.9988739560142748,0.8766517143316872,0.534083142944137,0.011730650767770356,0.23064597953819316,0.980021337946607,0.4991902258006019,0.6404516054869354,6.920091172313292e-8,0.14643932891251332,0.9387535084193375,0.6066230802242449,0.740261500341269,0.011617625086839556,0.534608021535833,0.8769975216115355,0.7090770332933687,0.32693676492731016,0.04604082176709129,0.42664351188770777,0.797637152459363,0.80176786638815,0.4317520639225028,0.10166222396388525,0.32210447744867354,0.9984602614891471,0.8803672622861215,0.5397542877435845,0.010537671640209967,0.22587250238487877,0.9783988828150552,0.9412049214810432,0.6459001341585904,2.941556327834549e-5,0.14244126208054153,0.9359980553026919,0.6121719607621,0.745232986857236,0.01286792657313901,0.5289328450642191,0.8732377399238285,0.7142290610655799,0.8331143710007773,0.04845369394732396,0.42102321386218966,0.7930486100241676,0.9936366193723352,0.4373898315369825,0.1051249946798169,0.3168015048872252,0.9979820897419065,0.9650287181492809,0.5454202902152702,0.18023548976609888,0.22113448438631866,0.9767145454565554,0.9147057050591305,0.65132979024183,0.00012343451223473245,0.13848944646645905,0.933186204624145,0.982943792184285,0.750172751803833,0.014181239948897584,0.07272560707205622,0.8694296788956859,0.9994840901124189,0.8373335761568914,0.05092497489896536,0.4154131317037627,0.7884221609356675,0.9927003384296123,0.44303569795100634,0.10863884357668291,0.3115222295609885,0.6939464005957084,0.962909313113179,0.551080417446005,0.18462782293141528,0.2164325384183276,0.9749685437448332,0.9115021442635489,0.6567398713955286,0.00028211388616822264,0.1345843932486141,0.9303183201044081,0.8408793555016787,0.7550801562087159,0.015557395333375024,0.06979979806817649,0.8655738311104002,0.9997100444442215,0.8415091462760798,0.05345434495494655,0.40981399109216776,0.7837584036379284,0.9917003253268548,0.9119909291590456,0.11220331612834888,0.30626733435891995,0.6886925139085254,0.96073002946908,0.5567339372825789,0.18906095036556342,0.21176727269070278,0.9731611035300689,0.9082453545203351,0.6621296778106316,0.2804382819529378,0.13072660755650867,0.9273947727123253,0.8366971396295566,0.7599545652854671,0.01699621471704227,0.06692963665772805,0.8616706953326136,0.9998713598910074,0.8456405412367263,0.05604147693421113,0.023355441297903623,0.7790579414009366,0.9906367094185409,0.9151863892220611,0.11581795126036976,0.301037499016339,0.6834142193195086,0.9584911491133887,0.5623801184264662,0.1935342986311716,0.2071392906685502,0.1045970757802917,0.904935757104306,0.6674985123006786,0.28556145462286353,0.12691658840545883,0.9244159406168888,0.832471371045345,0.7647953485157062,0.01849751198460764,0.06411549410407752,0.36473178738176504,0.744481808297105,0.8497272266313947,0.05868603618403717,0.02166858533414845,0.26448145940715867,0.9895096282863483,0.918328143770105,0.11948228140963124,0.29583340002700276,0.17522897147155608,0.9561929616515101,0.9673946922029962,0.19804728908819175,0.2025491909942248,0.10114208286443005,0.9015737801210988,0.6728456803919862,0.29071236551544827,0.12315482863204569,0.46562329444421635,0.828202596363971,0.7696018797306498,0.39315039620952724,0.06135773442439635,0.35926601365188093,0.7395055718211843,0.853768673835955,0.06138768062332561,0.020043602870148225,0.2594804866841572,0.9883192277213584,0.9214157864084824,0.12319583258483002,0.001141650280850448,0.17092632658482632,0.9538357643603887,0.969384348845784,0.20259933796874785,0.19799756740989433,0.09773868333023111,0.8981598584517929,0.6781704904134797,0.2958903483460324,0.11944181483036548,0.043335147702479926,0.8238913677633206,0.7743735371921078,0.39871252044696154,0.05865671434257447,0.3538184442548147,0.7344983546329686,0.8577643600779636,0.06414606078684904,0.01848070410190711,0.2545106258296048,0.6341551403542431,0.9244489177420248,0.1269581244277863,0.0007898543868223307,0.16666624829361398,0.9514198621500547,0.9713132893166816,0.2071898564526482,0.1934850086807373,0.09438731741689677,0.894694433696658,0.9961690829207295,0.30109473332812564,0.1157780272890872,0.04104899049268118,0.8195382429128117,0.7791097036729074,0.40428774650177424,0.056012783243076625,0.34838978384882924,0.7294608044299372,0.8617137685042844,0.06696081987045638,0.016980091194730595,0.2495725197088351,0.6286683996603775,0.9274271454267524,0.13076867027557926,0.0005026327145057352,0.16244928765090255,0.9489455675241824,0.9731812641018709,0.21181825074355076,0.18901209851878453,0.09108841863293526,0.8911779541180309,0.9968395773302219,0.30632484726004594,0.037201985273409455,0.03882219987329144,0.8151437849012595,0.783809766536733,0.4098753532029584,0.08866507301940851,0.3429807346462568,0.7243935728332291,0.8656163882479457,0.5176343450109354,0.15933597225235324,0.24466680707961813,0.6231650153509123,0.9303500842206256,0.13462697722349798,0.24591461477710252,0.1582759901322876,0.9464132005396682,0.9749880315736144,0.2164839221457726,0.34435809994182454,0.08784241370008566,0.8876108745823318,0.997445804157608,0.31158001361200016,0.03938435967649839,0.03665506388587492,0.8107085621640381,0.788473117817372,0.41547461777803624,0.09192460564102128,0.007104199579083537,0.7192973153033542,0.869471714494222,0.5233162429750827,0.1635204550400614,0.23979412250953586,0.6176456993039249,0.9332173560333761,0.13853254618880056,0.25082864794526993,0.154146895565418,0.5105004666280145,0.976733358021511,0.2211862671417325,0.3497722164149767,0.0846497224981202,0.8839936565012265,0.9979876849857601,0.31685955261359455,0.04162631599462541,0.03454786285550293,0.8062331484095523,0.9959878388939043,0.42108481594655117,0.09523692395062922,0.006180887172519189,0.7141726910554075,0.8732792485459335,0.5289951249183086,0.16774846239338304,0.23495509629389882,0.6121111654583069,0.9360285899754149,0.635551469378568,0.2557749121213068,0.15006253806016795,0.5048144653344233,0.9784170176827274,0.22592467747001793,0.355205765270042,0.08151075801053148,0.8803267677719409,0.9984651497208852,0.3221627813417657,0.46139797074425287,0.03250086935449348,0.8017181225450271,0.9952368128753232,0.4267052220137562,0.09860159949064029,0.005321451642571473,0.7090203629737981,0.8770384978879536,0.5346702562614285,0.17201944740779979,0.001241682611671291,0.6065621297214148,0.9387834224058078,0.9886287769657905,0.2607527674921757,0.14602344593954808,0.4991278412763417,0.9800387927712004,0.23069854020406516,0.36065804366235366,0.07842592627111222,0.3917342794004265,0.9988781366015909,0.8292951562855564,0.46707007103210085,0.030514348167153038,0.797164068601624,0.9944217265966785,0.9024360103108706,0.10201819703090903,0.00452600415961818,0.7038409975265033,0.9668776605319459,0.9567845991659227,0.17633285761951323,0.0016744532725829209,0.6009993098764648,0.9414814969793125,0.9898030458535604,0.26576157015843027,0.14203014167136557,0.4934413300344183,0.9815984735058088,0.9999495116969093,0.36612834632452707,0.07539562631143348,0.38618961569048726,0.9992265922068746,0.8335530169654386,0.4727464308979098,0.028588556255525865,0.7925715756588954,0.9935426854916489,0.90578467193842,0.5806371558023775,0.0037946476170050425,0.6986352646788584,0.9648121706673779,0.9590676916955716,0.18068813507690767,0.0021716837298783043,0.5954234254896862,0.944122464692474,0.9909139573541539,0.2708006722175055,0.023795450972469656,0.48775566717470875,0.9830958581375087,0.9998363667324405,0.3716159656576882,0.07242025010922876,0.38065967367050974,0.9995104714630343,0.8377677316342484,0.4784263160887328,0.02672374272615563,0.27913642962319213,0.9925998032666481,0.9090808441892948,0.5862440773338514,0.0031274766177363245,0.6934038378068956,0.9626865560548923,0.9612914025416455,0.18508471641272256,0.0027333096654137967,0.5898351978172427,0.9111675672362105,0.9919613677680768,0.27586942184752533,0.025559648000099855,0.4820715881535279,0.9845307529754304,0.9996585665428155,0.3771201918230035,0.06950018253769086,0.3751451686538849,0.9997297376494978,0.9840235683061278,0.4841089918956126,0.024920148797862307,0.2740490054889872,0.9915932018861157,0.9123241006944405,0.591839842953892,0.0025245774622376094,0.6881473936102407,0.9605010916486553,0.9634554440609577,0.6952821148647648,0.003359258431311629,0.5842353497119369,0.4415953156289655,0.9929451416098769,0.2809671633916181,0.027385215207699654,0.4763898282223169,0.8362618337542528,0.9994161341269838,0.3826403128334993,0.07348052495362589,0.3696468139571844,0.748916197440952,0.9825662503249667,0.4897937232486177,0.0231780077705403,0.26899080874477765,0.6499471003347903,0.9155140219296016,0.5974237288346426,0.0019860281371926747,0.17912207372591676,0.543976031241016,0.9655595363287148,0.700504408567044,0.0040494490593568355,0.5786246055297063,0.43595144501894467,0.9938651516256696,0.2860932374427273,0.02927191645306998,0.470711122332536,0.3309176881415097,0.999109100844253,0.38817561464615974,0.07647563488410936,0.3641653208078909,0.7439682828755516,0.981046511056272,0.4954797748119262,0.021497544994979967,0.2639624936823901,0.6445125650728294,0.9186501952695887,0.6029950126849235,0.0015118983054555057,0.1747817403653975,0.5383086478701936,0.9676034071747261,0.7057007664660413,0.004803792271470764,0.5730036910359263,0.4303158592677674,0.994721278809599,0.2912469809289078,0.031219507686153725,0.4650362050405966,0.3255770609078904,0.9987375064102326,0.39372538125428963,0.07952552886995218,0.3587013982523991,0.7389888103337612,0.979464547082548,0.5011664110789432,0.019878977843718504,0.25896471072837246,0.6390593367083761,0.9378023763581129,0.6085529738436631,0.0011022492970393927,0.17048347489189303,0.5326363091691504,0.9695867922186092,0.7108705163984003,0.005622190491259393,0.5673733333115306,0.42468928735413525,0.9955134124192312,0.8033411899870929,0.03322773698060444,0.4593658104128448,0.32025899576688777,0.9983013988916971,0.39928889478013246,0.08262981239887895,0.35325575306429857,0.7339784239242125,0.9778205630352372,0.5068528964674408,0.15152152353216713,0.2539981063598593,0.6335881206316969,0.9350272837236655,0.6140968933731169,0.0007571341011837762,0.013317181160259484,0.5269597488706845,0.9715094349039884,0.7160129896425789,0.006504537856635351,0.049305883756757485,0.4190724570907848,0.996241449989879,0.8078420825684567,0.035296344566373705,0.04081578510932832,0.31496418062502884,0.9978008347003676,0.4048654355677295,0.0857880839231756,0.009030286271714538,0.21949638884404332,0.9761147715682519,0.5125384954147078,0.1556219794592547,0.0001712473297311723,0.628099624559818,0.9321959190993223,0.6196260541518642,0.0004765973594997308,0.01465235245846691,0.5212797012536693,0.8680951243858464,0.7211275210053508,0.007450720233511232,0.05179738789830446,0.41346609503034304,0.9969052973478565,0.8123031549196696,0.0374250628633131,0.03859515480672843,0.30969330038138837,0.9972358785856156,0.8888953928396133,0.0889999349116305,0.007986165420134472,0.21480712092412046,0.9743473933304655,0.5182224724726964,0.15976698164175474,0.0003523924902389397,0.6225945584449821,0.9293086487299778,0.6251397409675697,0.24642164512796366,0.016050304825678874,0.5155969010480722,0.8642227866744974,0.7262134489078498,0.008460615230563184,0.054346868295141626,0.4078709263713459,0.9975048686226602,0.8167238299886075,0.039613616515786265,0.1134537757954136,0.30444703683899554,0.9966066036260867,0.8924443859881324,0.09226494990237916,0.007005687927405413,0.21015474349684043,0.9725186569371722,0.5239040924031547,0.1639559939120988,0.0005981684593720504,0.1293971458056597,0.9263658460920898,0.6306372406094984,0.2513390433822713,0.017510857432865956,0.509912083339916,0.8603033357320053,0.7312701154711466,0.009534092215062684,0.05695399516488414,0.40228767486443173,0.7774159994285976,0.8211035359486464,0.041861722428287285,0.11708573379783888,0.2992260686166408,0.9959130912202483,0.8959426153630924,0.09558270655664558,0.006088980621019757,0.20553985836017175,0.9706287989405139,0.9522926470047939,0.6693592001997745,0.0009085434453249275,0.125603841729502,0.92336789184537,0.6361178419607714,0.7664695828556835,0.019033821353483582,0.5042259834761931,0.8563372785502585,0.7362968666013481,0.851136826894437,0.05961843126841537,0.39671706271872176,0.7726670394339059,0.8254417062726311,0.4619847467831477,0.12076722282630498,0.29403107106109433,0.9951554310758602,0.8993896284587878,0.5699755098921311,0.19962477485122615,0.20096306246235085,0.9686780637988823,0.9546875401788026,0.6746986769022926,0.0012834773002293187,0.12185896683841707,0.920315173783544,0.6415808360903504,0.7712640653411333,0.02061899958790986,0.06041265129594303,0.8523251281497912,0.7412930520742049,0.855162430659662,0.06233983195350973,0.39115981050840104,0.7678828091987902,0.8297377798061567,0.46765732193283255,0.12449776666996004,0.2888627161597484,0.6709313592156785,0.902784979394481,0.5756015955782997,0.20419025932846135,0.19642494782466485,0.9666667038452974,0.9570236182540258,0.6800155558447408,0.0017229215253475316,0.11816300554239467,0.917208086784189,0.9899209536435657,0.7760234590647628,0.02226618708892847,0.05773143099018996,0.8482674035134243,0.7462580256192215,0.8591420931760111,0.0651178451994146,0.38561663707950955,0.7630639275767466,0.8339912008401549,0.9254901270530678,0.1282768827725752,0.28372167245369384,0.6655763444600625,0.9061282289720787,0.5812179019876698,0.20879400761893513,0.19192610146487254,0.9645949792547668,0.9593005790522628,0.6853091492740304,0.3029093694216922,0.11451643592431476,0.914047032757656,0.9910253000603426,0.7807471483857478,0.023975170788251732,0.05510741935473784,0.8441646295191327,0.7511911450032513,0.8630752996630616,0.06795211166238496,0.016473231909696184,0.7582110179035249,0.8382014191827769,0.9284491845893845,0.13210408229496473,0.27860860495124234,0.6601999119434669,0.9094189447329433,0.5868237026353762,0.21343542421499317,0.18746710532127148,0.5547080658201002,0.88994407041396,0.6905787724491184,0.30814826619610125,0.11091972967810643,0.9108324205950808,0.813607091655048,0.7854345222817277,0.025745729624081837,0.052540955812794776,0.8400173368721511,0.7226258279050789,0.8669615413496079,0.0708422647221657,0.015056855375694733,0.7533247079164973,0.983875654431748,0.9313528210312365,0.13597887017821875,0.27352417504190574,0.6548027571224011,0.9455196397276839,0.5924182723955033,0.21811390873648112,0.1830485361774229,0.5490520932251095,0.8863595145717372,0.6958237437295807,0.3134119795262299,0.1073733520477328,0.9075646661154939,0.8091578368139811,0.7900849744278435,0.027577634569705578,0.05003237234356278,0.835826062036326,0.7175196377211063,0.8708003155394719,0.07378793052941474,0.013703207587119737,0.7484056296734604,0.9824118677043815,0.9342006607851687,0.13990074520774043,0.2684690404108436,0.6493855781338622,0.942909539107148,0.9773254498044861,0.22282885600840519,0.17867096558754303,0.5433897756053407,0.8827249820510084,0.7010433846637849,0.31869982853610923,0.10387776176701047,0.9042441920120314,0.8046685915462899,0.7946979032751673,0.42303684488263454,0.047581993439295256,0.8315913471647225,0.7123853107666047,0.874591125676528,0.07678872805406173,0.012412463642079985,0.743454419470875,0.9808856796593031,0.9369923354751831,0.14386920007807957,1.1458634370631327e-5,0.6439490757050295,0.940242146905045,0.9789876282206444,0.22757965613921322,0.1743349598025712,0.5377218453973374,0.8790409429886703,0.706237020076649,0.3240111292277528,0.10043341100027098,0.4297331451832349,0.8001399365483439,0.7992727121285141,0.4286606281435844,0.04519013606332334,0.8273137400294948,0.7072235111810554,0.8783334814089349,0.07984426913459514,0.01118479050189719,0.7384717177615612,0.6046305184295037,0.9397274839903887,0.14788372145855389,5.297500359324747e-6,0.14463051384340292,0.9375178081559803,0.9805878482539985,0.2323656945996862,0.1700410796969234,0.07736666312397045,0.8753078739254291,0.9990065471332943,0.3293451945696342,0.09704074528387219,0.029838217618976703,0.7955724576142712,0.8038088092236264,0.4342936393508321,0.04285710960905548,0.31970995489008014,0.7020349066576008,0.8820268986525628,0.5423103268365986,0.010020346969508764,0.22373123678147488,0.599063076853404,0.9424057525317129,0.15194379005964975,6.381207267641686e-5,0.14065324257342826,0.9347368752607531,0.9821259029116329,0.23718635230242902,0.013452438073555395,0.07435540565900345,0.9717049272824864,0.7165435905443631,0.33470133458555573,0.04956102592527212,0.027933588484874317,0.996313129587554,0.8083056078037203,0.4399351498587003,0.10670343884968642,0.0035555172874375263,0.9977453543465583,0.885670899653612,0.5479737702743952,0.1822113386548091,0.7284144219182251,0.9759347219891701,0.9450267946576656,0.6537721940150527,0.2725587872058015,0.6275306719955709,0.9318997079407731,0.9836015932418973,0.7523900281173437,0.37352689462420724,0.5206917139303074,0.867696583607434,0.9995939957578874,0.8392221864520827,0.09041221766273572,0.4128865297693593,0.7863233961477539,0.9922572164779921,0.9102139301218435,0.038368748950512066,0.309149220725281,0.6915799708191958,0.9619338557118038,0.9620502086893878,0.007881743025752674,0.21432393336959787,0.5878904732687101,0.9100399016456961,0.9923104607056337,0.0003748296952008623,0.1328386560015125,0.48009681744886484,0.8389986089600603,0.24692902677532685,0.016198553895948486,0.06849844806038907,0.9753543227280401,0.7521273418469214,0.3454770645472469,0.05461400655042109,0.024307757999549096,0.9975632438659523,0.6534826654382259,0.4512407487909435,0.11382732887257013,0.0023301267159384076,0.9965378117697146,0.5476709192990514,0.5592813087484119,0.19107347890248128,0.7182389457320053,0.9723259103050167,0.43963311849919695,0.664553652032676,0.28274534868373036,0.6165014072729427,0.9260581452351191,0.3344142265832384,0.7621419516814205,0.38456220279144276,0.5093236863200453,0.8598950491360138,0.9999229572465742,0.8474891969959819,0.49176957275815697,0.4017105838873562,0.7769261925593505,0.9901362459456267,0.9166099889951314,0.5993612730711386,0.29868723168500116,0.6810259125766495,0.9574619945951393,0.09592904942491537,0.7023131714196655,0.2050644371549396,0.5766723956452936,0.903425969229677,0.16862894610375717,0.7958177969910417,0.1252140366530453,0.4687385629536941,0.8305514512937368,0.25680263875268894,0.01919498587748808,0.06286474694853605,0.3622645231223901,0.7422414097814434,0.3563327438104833,0.05989742739462223,0.02092804801657505,0.262222217873777,0.6426195952389122,0.46257157548673267,0.12115102247310411,0.8007787249226831,0.1732832508424897,0.5363379759484541,0.5705581754052305,0.20009545600232148,0.7079505539373026,0.09960074105763811,0.42835950830874797,0.675249970912163,0.29304431650172325,0.6054118653745462,0.9199961424308519,0.32372638522642877,0.771758244467573,0.3956572378285549,0.4979508346866896,0.8519073069814189,0.22732458445740533,0.8555764185751366,0.5031425781365029,0.3905854923988738,0.7673857089095772,0.9877616816641486,0.9227904961929392,0.6104811717315665,0.28832940074378766,0.6703781925405986,0.95275344520405,0.9702618298406209,0.7126607054455396,0.19595753894899248,0.5654146481537008,0.8966033064761801,0.17723087935998638,0.8049097750220205,0.1177833294633831,0.45739648295100127,0.8219332681574514,0.26680207968296593,0.8829206919520904,0.0574572171688536,0.3513677435677063,0.7322301433669861,0.3672627557076009,0.06540855484551539,0.017796207178972512,0.2522795778511973,0.6316827344596267,0.4739217674397829,0.12867073041322885,0.0006523211755830594,0.16475903466805353,0.5249862315325773,0.581798535657188,0.2092726020338973,0.6975545696904208,0.09289299792827221,0.41712296450754593,0.68585561643802,0.30345036203150055,0.5942677839672633,0.04003734430428768,0.3131297468508511,0.7812339310597605,0.40680625922654257,0.4865790432799926,0.8437374899567124,0.21786267511459745,0.8634796669063864,0.5145139575625179,0.37951701136395277,0.7577068813912524,0.13577036728572683,0.9287522539554509,0.6215439080523846,0.27808108698537043,0.6596423197817676,0.9478106437156253,0.9740037051164661,0.7228982100132193,0.18700795060989395,0.5541230554894454,0.8895754433927103,0.9971209458936873,0.8138439944427588,0.11055037903881731,0.4460764457694693,0.813148518550901,0.2769221759114129,0.8901344314020092,0.5550104747744714,0.34054786551022753,0.7220987223767338,0.3782614451116473,0.9482070411810015,0.6604880889447774,0.2424651069879159,0.6206777417708952,0.48528545212433355,0.13638256203816296,0.7584715061574376,0.15640827029188342,0.513621559380417,0.5929965738048311,0.21860016879323974,0.8443852651928498,0.08639588968216444,0.40592930082043405,0.6963651013086388,0.3139581012433743,0.04038811957613275,0.03569728298298358,0.3026297940978645,0.7905641087907993,0.41800349854416397,0.09341194686533422,0.006679886597752871,0.2085467420438447,0.8711948528932996,0.5258778275481617,0.1654219242847516,0.7478947177755368,0.12807347332908936,0.9344921777025836,0.632543758235767,0.25305545366747395,0.6488238489806056,0.06496779035213929,0.9775003335294887,0.7330203882951666,0.35222037506813764,0.5428034598593442,0.8823460161562742,0.9982109994283848,0.8226158327381559,0.4582860554151396,0.4347843083329489,0.8042017476543415,0.9956570643171294,0.8971463174816958,0.5662996218554631,0.3298104870942745,0.7118523887511754,0.3893231213623125,0.9531315460396772,0.6712172424990038,0.23278388323620086,0.6096103110943117,0.4966567500335603,0.9879572164268812,0.7681396546116854,0.14823527835270706,0.5022498395097077,0.604146496045926,0.2280733302495377,0.8525409419665879,0.08011277788674048,0.3947843087863246,0.7067729879753957,0.32456209749191484,0.9204798783015294,0.03159744928758035,0.29223195958422843,0.7997439502789766,0.42924316239249555,0.10013607822513237,0.004954777990174686,0.19938160525675308,0.8787179847418477,0.5372283084907362,0.1739595699788487,0.7379542948209418,0.12056901207473225,0.9400072976299312,0.6434750310208229,0.2630079373903145,0.6379283775533269,0.05947443506476863,0.9807499059437277,0.743022003133018,0.36312295283948526,0.5314617179587917,0.8749187652320423,0.9990432813817327,0.8312207514081957,0.4696296173957423,0.42352591313011884,0.7950975844769368,0.994033191337315,0.9039527222805558,0.5775544658833545,0.3191611637793152,0.7014964438859539,0.4004420612102447,0.9578216031737623,0.6818578092106998,0.22324091560701087,0.5984861686565359,0.508029777721599,0.990311917668624,0.7776690691100971,0.14024428751078888,0.49087695558463423,0.6152425334731396,0.23768718504209907,0.8605142160310211,0.07404691338886077,0.3836937547616891,0.7170738914560085,0.3352568643288407,0.926524689682844,0.02773996444907484,0.281941623091297,0.808768705925709,0.4405194354323992,0.10706709693900107,0.00348580300843665,0.19037200674377552,0.8860451700257386,0.5485595277149591,0.18266590716576087,0.0024170082139333693,0.11326086628888693,0.9452947602453254,0.6543320706282234,0.27308303947930174,0.6269615427558382,0.05420900523795291,0.9837507410486117,0.7528978797472609,0.37409635002858455,0.5201036979415387,0.015973925909936848,0.9996173611357089,0.8396542983161425,0.48098889284224416,0.41230708519161524,0.7858407394617357,0.9921537083506635,0.9105501242028591,0.5887691836648675,0.30860540546560133,0.6910362458889543,0.9617083075239625,0.9622747859739575,0.692404283710231,0.21384114157836104,0.5873110700265749,0.5193986508476076,0.9924129342696886,0.7870548191869715,0.13243943226004445,0.4795087918716564,0.62627894505884,0.999557229637311,0.8683009620587954,0.06820143463285039,0.37266337693707796,0.727262482120697,0.34603686834167635,0.9323488195780605,0.02412682430852231,0.27176410878155066,0.8176337063729597,0.4518264833833461,0.9762075949690028,0.0022737216919687664,0.18152260802073295,0.8931726177003354,0.5598656225114534,0.19153643123537906,0.0036625854117453005,0.10615281716526082,0.9503518298452166,0.6651092596864702,0.2832755471330307,0.028228560696810845,0.049174225175600605,0.9865012862288611,0.7626429084146354,0.38513488906117604,0.5087352763835422,0.013247520415278102,0.23642729438385424,0.8479121099920497,0.49235800452913586,0.4011336290761931,5.034639842160793e-5,0.15130340946374465,0.9169351097897933,0.5999379727678193,0.298148673643377,0.6804772068080476,0.08246235864752605,0.9664887903884183,0.702851209310747,0.20458942454069928,0.5760907971378842,0.03311876301381045,0.99425917917585,0.7962920487077749,0.12482475078887695,0.4681512301950227,0.830109669220938,0.9989495022635603,0.875897151231118,0.06257936603668568,0.3616988823682125,0.7417264166503028,0.9803407390049363,0.9379492546149839,0.020759898284399503,0.26170468244390366,0.6420554393135843,0.46315845604204064,0.9795507563802571,0.0013191611648569745,0.17283798771697217,0.5357510012127636,0.5711407431700807,0.9987590210951576,0.00516496480860168,0.09924854236866859,0.42777712430010895,0.6758010221382919,0.2935801868051149,0.03211772448659772,0.04437269984472347,0.32317578711237305,0.7722520471118769,0.39623285865897495,0.08091884654926584,0.010772957927964344,0.22683148312238777,0.8559899138903965,0.5037310701416925,0.3900113258674803,1.829962084259895e-5,0.1432431330575144,0.9231043754855692,0.6110550545232682,0.28779637856713414,0.012610927473688749,0.07631400203150462,0.9704614361148567,0.7131931808314398,0.1954905512806155,0.5648311552968284,0.029169431578493,0.9958496971503322,0.8053759783816774,0.11740418289084081,0.45681014689354754,0.00401089782534686,0.9980836212112283,0.8832988533222463,0.057183616427177286,0.35080594402318643,0.7317088053255623,0.9770588923510415,0.9433230971598857,0.01764092840537812,0.251768548769215,0.6311149139702856,0.9337572872243219,0.9826458009154261,0.0006226153113729205,0.16432263920640838,0.5243984437006558,0.5823790560065474,0.9994307405501315,0.006923369081815345,0.09255161413222918,0.4165426568390285,0.6864018261256648,0.992894121800068,0.03624896794580762,0.039806913527641374,0.31258401755590703,0.7817203241244302,0.40738451679465504,0.08723001548749931,0.00855151877277005,0.21737700772193447,0.8638835306006777,0.5151022053194502,0.15748588636642652,0.0002449405753699452,0.13536744065656425,0.9290547293466607,0.6221146770153645,0.27755387645637697,0.015275065248155528,0.07038485817838347,0.974190667728619,0.7234248473941552,0.18654922950418495,0.05294004186040402,0.025463705242840085,0.9971836652680413,0.8143019082343315,0.11018156792621464,0.4454914097802261,0.002701632646806229,0.9969600344823228,0.8905022387329649,0.052016977534959485,0.3399901978473041,0.003161544536754768,0.9735302180975566,0.9484675668167244,0.014771528409008694,0.24196084865741008,0.6201065505046823,0.9279883014120558,0.985491127215798,0.00018444452044091841,0.15598096828267893,0.5130332625703973,0.8624609225814239,0.9998440573365295,0.008936888442861557,0.08606549740911235,0.40535136973997643,0.6969061868519656,0.9908561287155401,0.04062015359220783,0.03547922853662838,0.3020892159793135,0.7910428406187869,0.9589470441966346,0.09375474930439565,0.006584352309875141,0.20806875987512585,0.8715888760098081,0.526465526700741,0.16585948754765106,0.0007301519992429228,0.12768040710004214,0.9347830926932991,0.6331111180573596,0.25356734517697066,0.01818999698962409,0.06467799479399178,0.9776745557461504,0.7335409151919063,0.17777008540122735,0.05814857744669877,0.022003501328907493,0.9982603933413426,0.8230652200396127,0.10316064283553777,0.11873997625436061,0.0016496668588898422,0.9955793234143262,0.8975035804719975,0.04708212255006422,0.32925723984707345,0.004566939765277056,0.9697565419607815,0.9533800018657064,0.012153182906782023,0.2322866565576081,0.03061909425160403,0.9219978768491786,0.9880852631254776,4.875499174605835e-6,0.1478172908796101,0.5016613381030652,0.8545334801433488,0.9999987576065607,0.01120448110809763,0.07979354807979144,0.39420905331223166,0.770513688294219,0.9885641694185855,0.920798026164237,0.031391883991665814,0.291696812334162,0.8002147731771149,0.9543154513089098,0.9689883268231037,0.004872476340192167,0.19891155561727591,0.8791019634152195,0.8988518910548912,0.9952786166141323,0.0014736828467877272,0.1201860096160664,0.9402865017023653,0.6440386881522334,0.998441236767984,0.02135421452873365,0.059196364577488725,0.9809112976232985,0.7435361502278598,0.9783285046840928,0.06358572448485589,0.018790610126824647,0.9990793242771605,0.8316613797090635,0.4702170576068925,0.12619615824363,0.0008555447428058027,0.9939422023794136,0.904299256084333,0.578135795502734,0.20626184137365722,0.006228669284965349,0.9657398164196187,0.9580578606404444,0.6824058823068342,0.22275097784263043,0.03465907881785507,0.9157891129478153,0.9904268664530713,0.7781582927074788,0.1398358308381774,0.08481917893850766,0.8464226040678736,0.9998947613191713,0.8609217452068948,0.07373901121572934,0.38312147252792206,0.7608794477959965,0.9860194297561105,0.9268314943401472,0.027546994661933943,0.2814121835919059,0.6631541914265986,0.9494487981506375,0.9728097999167873,0.003416776578762215,0.1899101328345914,0.8864189055875582,0.8918905790060225,0.9967096460427651,0.002475148419307349,0.11288812576392987,0.9455621089408546,0.816032527118508,0.99741499877872,0.024766080717047667,0.05394280369365373,0.9838992186879405,0.753405381023377,0.9748929207748296,0.06924866982544337,0.015826693968508776,0.9996400343652141,0.8400859396378054,0.9301951093225653,0.1338457442474929,0.00031967717289022035,0.992049518414841,0.9108857495254622,0.58934827890834,0.21554086082040724,0.008145873326271091,0.9614821197053711,0.9624987228430024,0.692947339180116,0.3105191613942714,0.038939828171028645,0.9093652220876426,0.9925147256661293,0.7875364762122485,0.13204071772111375,0.0912635785272855,0.8381324908768624,0.9995321222814586,0.8686987290474889,0.06790501940039678,0.16267379982615482,0.7511102297322904,0.9832232263621672,0.9326441222909476,0.02394654987164241,0.2712406509618671,0.6523620546456498,0.9443496027009106,0.9763866438675135,0.002218006196490596,0.18106914881281627,0.5464991381854049,0.8847265049659851,0.9978836806818832,0.0037340305641223037,0.10579053142787298,0.9506071848391227,0.8071381101052777,0.9961314010543851,0.028423830274105222,0.048920030305470485,0.9866367730064487,0.7152075076361285,0.9712116299275415,0.07513448349225199,0.013113286367583687,0.9999422334972439,0.848334541005705,0.9242880279455279,0.14168477641298516,4.2341404023205076e-5,0.9899022507846937,0.9172596529805599,0.8575517528293162,0.22496705783292714,0.010317559938558762,0.9569856547264776,0.9667002907961436,0.7033889661805232,0.32109235490588817,0.0434591274753795,0.9027295279538206,0.9943477605179856,0.7967658899542993,0.42557197371312583,0.09791945605179553,0.8296674298284594,0.9989110281208297,0.8762849502302188,0.06229459110849145,0.17115545084118572,0.7412110886418237,0.980177005976734,0.9382329025954848,0.020592412470764765,0.25974726322456826,0.6414910865907855,0.9390205032549015,0.979717008036251,0.0012767854304604476,0.17239317782757796,0.53516397694918,0.8773633755865713,0.9988001130925382,0.005249677942659958,0.09889689886346187,0.427194840345923,0.7980847815537124,0.9945911077212548,0.03232557070076719,0.04413064316776483,0.9891225441835475,0.7048867366897764,0.9672865368214993,0.08124012019824833,0.01065179122594817,0.9999857653171109,0.6021212431207165,0.9181614223186509,0.14970919886875927,2.3680928178615446e-5,0.98750151047322,0.9234176686276694,0.8495097243817907,0.23453555534966508,0.012742605503335558,0.9522527479287402,0.970660390632136,0.7645372220141982,0.33175811423127527,0.04821463847075369,0.028971688738726353,0.9959250226066723,0.8058417586866414,0.43683694354869596,0.10478336779827646,0.003936848939990245,0.9980318001879255,0.8836764836867238,0.056910629144195646,0.17980724418457172,0.0020663136196591436,0.9768823446971809,0.9435949436501236,0.017486317871210688,0.26978293158855504,0.023447429821360832,0.9334642570588232,0.9827991693112272,0.000593601263025767,0.16388670877768263,0.06708177892696959,0.869805000509692,0.9994584691177326,0.0070213063674536835,0.09221079479758415,0.13093179909332203,0.7888772256053103,0.9927949157184743,0.03646928325838483,0.0395771202826235,0.31203854789897145,0.6944599584931335,0.9631196722778976,0.08756242092118954,0.008443482107405254,0.2168917318629599,0.5909621344442693,0.91181846231338,0.15791485982356973,0.00026370540018216815,0.1349650191736026,0.929356610343977,0.8412868615599653,0.24424140268358518,0.015419755315605521,0.07008408265823185,0.9743769734174991,0.7548184334918003,0.3425109209662812,0.05320390068239089,0.025278620783816264,0.9972456958656164,0.8147593866056136,0.4481345935959897,0.1118517624172255,0.002640882004885603,0.9968948933903554,0.8908695050789829,0.5561801878364275,0.18862470346688298,0.0032279645410058233,0.9733409471628054,0.9487274711648475,0.014629873148933215,0.2799377129746273,0.027012453820883686,0.9276837388833451,0.9856315329994572,0.00016880716984923883,0.3815268129558871,0.07288370264090183,0.8620552903962887,0.9998584081277454,0.009047999207876745,0.08573567858304437,0.13869969425943962,0.7795202061979609,0.9907437543857281,0.04085282401328372,0.03526181761728947,0.22138706661333607,0.6839325678028534,0.9587131922091183,0.09409811453808353,0.006489501578727408,0.20759118213533995,0.5797559624688071,0.9052624297417038,0.16629751371438656,0.0007622906327159895,0.12728785666648024,0.47185505027050806,0.8328874188270198,0.25407957808362513,0.018347624233046533,0.06438880231215077,0.977848116213111,0.744967803338781,0.35334521166891214,0.05842433269396041,0.021831171012289097,0.998309096985869,0.6456091023796298,0.45945907851413426,0.11912098276084648,0.0016022458924471739,0.9955008959573302,0.8978602927780053,0.5674660556359955,0.19760326658406074,0.0046466425318019144,0.9695546456728616,0.9536278295986602,0.6723226188410606,0.29020635335575784,0.03082219892828486,0.9216819395362028,0.9882126336518287,2.622937016028004e-6,0.39260602328046207,0.07890661393543091,0.8541182549029789,0.9999997231963723,0.011328707864402099,0.5000205925593357,0.14665452418063024,0.7700185646011104,0.9884386849824043,0.04547392494602315,0.031186967885198147,0.23090235418495042,0.6733100114319306,0.9540693765032751,0.10084381951764987,0.004790860618498705,0.32771604357383044,0.5685085252049606,0.8984967166581643,0.17485282340302566,0.0015191786605727176,0.11980353333530042,0.46050794560888414,0.8243157420075911,0.26404499133292225,0.021524697392675485,0.058918904760529134,0.35435149809647226,0.7349904282160222,0.36425538073782554,0.06387323348317148,0.018631123115352588,0.9991146757696452,0.6346919352695917,0.4708045390780448,0.12658726777523804,0.000821477987183572,0.9938505291353158,0.5281038298157547,0.5787170168761566,0.2067382880778239,0.006321613575998808,0.9655253992385389,0.9582934835335477,0.6829537027057364,0.30058353979491326,0.034874694002778595,0.9154619643147713,0.990541135821317,0.7786471309563742,0.40374079864723433,0.08514739658997866,0.8459980006074834,0.9998823412079881,0.013862252311141743,0.5113930042502239,0.15479217307243615,0.7603772169109163,0.9858809001385047,0.05033019512485648,0.6185131989211134,0.2405568713716852,0.6625977854315501,0.9491906278446107,0.10779604566990497,0.0033484380940404512,0.3384365990044661,0.5572256420137897,0.8915248236048261,0.1835763624201599,0.0025339778741249597,0.4438607366689739,0.4491812739150647,0.815576266039268,0.9973548889345909,0.024949330994629704,0.053677220097731126,0.34350995134838663,0.7248914703615438,0.9747084479413908,0.06954778381926713,0.015680132779869738,0.2451461321249026,0.6237050793064585,0.9298948876951518,0.1342467544463415,0.00029898225403707235,0.9919446468148649,0.5167421210613756,0.8650068348142533,0.2160250415392036,0.008252011052957475,0.9612552925693802,0.40899736802050657,0.7830743200734707,0.3110639031939374,0.03916784230610537,0.9090270313994011,0.9926158347539383,0.6879232872343621,0.4149253779857789,0.09160282165854516,0.8376987288839046,0.9995063228953762,0.5839969356988787,0.5227595212645086,0.16310843056088775,0.7506011515066864,0.9830717232375852,0.9329388256373515,0.6295308795344603,0.25034562298040886,0.6518014322474609,0.9440794704703624,0.9765650328005409,0.7302536274077716,0.34924074643409536,0.5459131505958783,0.8843503578001153,0.9979374251017241,0.003806163221941994,0.45517576641118884,0.4378808955455598,0.8066735126779796,0.9960579912964889,0.028619753152659966,0.5632039114120694,0.33274937167520036,0.7146761549195901,0.9710144939546179,0.07544504772167832,0.012979726831715943,0.23542783020414138,0.6126542190279842,0.9239763712744364,0.14209547979864284,3.50290293741895e-5,0.15046082521612414,0.5053717500273076,0.8571401286676608,0.2254587220539605,0.010436836185832521,0.9567465349946657,0.397838440275915,0.7736267701246649,0.321642021071493,0.04369942258737286,0.9023804701883499,0.2950756954624353,0.6773360589339947,0.42615397445737446,0.09826954914034736,0.8292247337289604,0.9988718628083062,0.5727644132385755,0.5341142626299341,0.1715989938609278,0.740695426469919,0.9800126077320441,0.46479494002895944,0.6404815415960501,0.26026354436585175,0.6409265378523457,0.9387385488647355,0.9798825951130188,0.740288854968727,0.3601228958573365,0.5345769039709414,0.8769770312724656,0.998840514073783,0.8288755723600879,0.4665139879608673,0.426612657252861,0.7976120881584635,0.9945044360313889,0.03253406481089438,0.5744687523044839,0.322075326540582,0.7043497672371698,0.9670768397061396,0.08156197397908399,0.6789461028373349,0.22584641644254888,0.6015450720873973,0.9178384918532982,0.15012938294559403,2.9754881115506837e-5,0.14241945922047605,0.4939985996798549,0.8490886402183175,0.23503444868862056,0.01287495855833437,0.075690183542517,0.38673237035026653,0.7640376472171818,0.33231242036862274,0.048467090232318266,0.8955257195751706,0.2847553181247364,0.666657077949736,0.43742077844908167,0.10514412970791676,0.8205803995402934,0.19282939212711053,0.5614942428783102,0.5454513534668991,0.1802594700026482,0.730665166967281,0.9767051363911143,0.4534598553389006,0.6513595192946506,0.2703055040510248,0.6299787288556701,0.9331706263906621,0.34759871948951276,0.7501997584216298,0.3710774169110129,0.5232227674495048,0.8694086589397352,0.9994855057571399,0.837356599231041,0.4778695349856684,0.41538238916036396,0.7883966808110264,0.9926950269400859,0.9087601413612649,0.5856950634814472,0.3114933386357145,0.6939176501294465,0.9628975225162147,0.08789539772809057,0.6895189511810114,0.21640684820995387,0.5903833862951184,0.9114844251361802,0.15834430719069315,0.7844930086115784,0.13456310339433925,0.48262855442332264,0.8408565352612627,0.24474726701584276,0.015565116699599757,0.0697839027250261,0.37568490446195163,0.7543119127095191,0.34306958028047974,0.05346837847639879,0.6253738899259855,0.27454630718016776,0.65589186952655,0.44871996057960417,0.11222300649176231,0.8117701988480084,0.1839355589738489,0.5501922557411194,0.5567649280280873,0.18908537810418785,0.720515562598874,0.10808384483624073,0.4421488502590858,0.6621591844255125,0.28046630638221726,0.6189636695925063,0.9273785838600523,0.3368068783428406,0.7599812099205299,0.38209864178727193,0.07318995737972805,0.8616491566353897,0.2390854183528895,0.8456630796865952,0.4892365321891474,0.13910675843990133,0.7790320586358277,0.9906307002007118,0.9152037690249393,0.5968770365124185,0.2218759318519274,0.6833852011153968,0.9584787047401553,0.9653559863396648,0.6999937434805665,0.31763246500552644,0.5791749366448763,0.9049174586816222,0.1667360021781355,0.7937714863312219,0.42190488388569325,0.4712674970554596,0.8324480730415049,0.2545921516778119,0.8738311931981344,0.5298240542814334,0.36470175850796027,0.7444545986422514,0.35390793511276064,0.05870069968108199,0.6363505522469007,0.26445394471382605,0.6450460035229942,0.46004567471537794,0.11950251692067454,0.7365099864599067,0.1752052557925573,0.538864299411862,0.5680491327333714,0.19807215169011622,0.004727031539476179,0.10112327363378443,0.4308677770402068,0.6728749493023702,0.29074069421719895,0.03102595358362975,0.045667351320724026,0.3260994724035067,0.7696281485971935,0.3931808681660763,0.07922421965373022,0.8537025390824715,0.22945167573356973,0.8537907160002751,0.5006090983506013,0.14707114995589815,0.7695230668359433,0.14543747973733345,0.921432572583472,0.6080088859071655,0.2313985451427596,0.6727578696251635,0.9538226726495352,0.9693950951794924,0.7103650601371189,0.3282686294416026,0.5679255223257578,0.8981409902012956,0.9954386123380533,0.802897968328824,0.43315793013982556,0.4599213057237312,0.8238676040503135,0.2645640089863308,0.8812866677655224,0.541168506939487,0.35378861510650833,0.7344708051344806,0.36482187716136527,0.9418706976822134,0.6472566675555844,0.2544834524575388,0.6341250915294073,0.47139206099532793,0.1269788946167194,0.7464684893901297,0.166642999593216,0.5275162349117113,0.5792981291984235,0.20721514105410166,0.8341711492956633,0.0943690790160221,0.4196224724463783,0.6835012696484798,0.30112335164523574,0.03509095355221442,0.041036614056828735,0.31548204162338744,0.7791355831795677,0.404318362165553,0.08547618896033088,0.009136032505442093,0.21995791330227799,0.8617353029785636,0.5119813493679791,0.155218144882667,0.7598746253104843,0.13751070905660578,0.9274433292887805,0.6190848521091448,0.2410601313222891,0.6620411541805516,0.0719904067338667,0.9731913416254728,0.7206275350895046,0.33899364672718824,0.5566409637217398,0.8911585258020469,0.9968430779325202,0.8118677326137034,0.4444455601066184,0.44859585088399884,0.8151195677742973,0.9972940900764771,0.8885448667460403,0.552491659242575,0.34295112065688316,0.724365697745063,0.3758057596137907,0.9470784004565473,0.658086593089045,0.2446399890881692,0.6231347839645025,0.4827532488627275,0.9847350353855908,0.7562994709040536,0.15825322043923784,0.5161539336656955,0.5905060972554617,0.21650961566464388,0.8425441165111482,0.0878247555654284,0.4084187547352285,0.6940326474651968,0.31160890673751274,0.039396494858152276,0.0366433418788345,0.30496007940171577,0.7884985945742369,0.41550536130867166,0.09194263056561891,0.007098961073798982,0.21060904307853556,0.8694927301366437,0.5233474013022842,0.1635435280106522,0.7500917261090693,0.12977148830523738,0.9332329292090029,0.6300992044754636,0.25085569153992715,0.6512405995501234,0.06622222828465046,0.9767427615209523,0.7307758585906489,0.349801967798395,0.5453270994002557,0.8839736781718579,0.9979904797005599,0.8206761382800456,0.4557619336295325,0.4372969922631793,0.8062084903984408,0.17848570049707052,0.8956020347881779,0.5637876526551003,0.33219488241802786,0.7141445047999776,0.38685389947076076,0.9520547873699204,0.6688347255044544,0.23492864755854564,0.6120807671518731,0.4941233601025916,0.9873982624066944,0.7659978445068918,0.1500402591553781,0.5047832744648559,0.856728009739494,0.22595076661262414,0.8507398533188413,0.08149368927831163,0.3972624206475654,0.7731340207194052,0.3221919343265395,0.9191036152530946,0.03248980784116595,0.294539029742827,0.6767856886165141,0.42673607750471776,0.09862019876891692,0.005316913879674978,0.20140990211544674,0.5721821222560758,0.5347013734218902,0.17204299183324168,0.001243880495858829,0.12222382171270874,0.46420791920499777,0.6410462442418833,0.2607801576276678,0.6403617938803663,0.06067848402556186,0.3579050732294845,0.740804779954798,0.36068800049042227,0.5339897830913531,0.019647827459559675,0.25823753193547283,0.8293186279080822,0.46710119568027364,0.4260305758274545,0.79713898246428,0.16985939887452683,0.9024545205527073,0.5750506426933237,0.3215254656073773,0.7038125146872205,0.09689760421487636,0.9567972836676093,0.6794955037782853,0.22535445246239644,0.6009687603779206,0.9175149825325433,0.989809312296037,0.775558592314449,0.14200836508181625,0.4934101404245923,0.8486670724425176,0.9999490674606148,0.8587541192904107,0.07537915581291749,0.3861592424081756,0.7635377066338115,0.3328669588131014,0.9251971629699063,0.028578160959076282,0.28422428443946135,0.666102109924944,0.4380047000440183,0.9717850802903037,0.0037908129443097183,0.19236524999703486,0.5609101623551325,0.5460373912451996,0.18071213877544684,0.0021745887458923807,0.11487161439945148,0.4528739367057893,0.6519203074713268,0.2708283947223298,0.02380496002374799,0.05536204225883801,0.3470383229678188,0.7507091102741955,0.37164611243091206,0.5226348806590064,0.01661540929998706,0.2483454507391289,0.8377907299220733,0.47845747938815153,0.4148024307576015,0.0004410391976241712,0.16140391015036842,0.9090987786018647,0.5862748019492668,0.3109483905214454,0.6933750731206215,0.09027354784347441,0.9613034356085852,0.6900634120835543,0.21592235743465327,0.5898045129327276,0.03827588723056741,0.9919669375899066,0.7849767676493454,0.13416169387557098,0.48204041594077274,0.8404257367546359,0.9996574130295681,0.8665827678895188,0.06948431879462247,0.3751149647393075,0.7538050396144966],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],70:[function(require,module,exports){
module.exports={"expected":[1.0,0.25533716211906216,0.20650784061285715,0.9834921826359568,0.26602341671878615,0.2221636099042119,0.9706186909481165,0.3052308679808914,0.10038438044865944,0.9917992942199745,0.468377558643437,0.37007921973055335,0.7624464513582909,0.8493418471088078,0.05446410575060179,0.9947565736155157,0.31009034673533975,0.0972424274895875,0.8850197686353427,0.23748180279066128,0.150718465381942,0.9317226148728116,0.005255609283634555,0.6899876289383577,0.6018897843221664,0.9502522467199783,0.17999198823923518,0.989791217832827,0.47889196021538605,0.02043426856077396,0.7534267634419178,0.8567967795236344,0.07372816655025621,0.3497044814836968,0.9990803365267513,0.09109281889301168,0.8782172792412655,0.7256852579833923,0.6020548317761107,0.9501789099617528,0.17986246772341674,0.2049071147842001,0.9630910378324192,0.5707550900120202,0.0026326760899270107,0.6701873591760533,0.9149225046196472,0.12880939899380345,0.26489544525877406,0.09118986314078947,0.5001127681685636,0.7255348053890167,0.7349054825979697,0.5106685543582025,0.0852033855027079,0.32960058860856356,0.9973441594346875,0.920720107825422,0.036823964806198484,0.001661724589639313,0.07355203347786277,0.959007476794945,0.9991006643470444,0.18804221988263192,0.9546719410006252,0.5916984953285,0.000906041329181595,0.6500803972447897,0.9263896680008975,0.1433612584937345,0.3396703403005783,0.9795018647016736,0.864112237144001,0.7442708314950122,0.01755427053301556,0.8852173661724672,0.9875598844583555,0.2743655580484408,0.12174547689429821,0.908874407329809,0.6801811950513273,0.8711157918823393,0.5601766725011325,0.05956763463920839,0.21358759341606665,0.42913438995146813,0.9454334864655005,0.795183005484982,0.5815215951241004,0.0497725187694249,0.9370884407523494,0.44675210180639363,0.9548121204509418,0.06824866218398962,0.5425155330775973,0.7625666606822272,0.9262134707320459,0.46823660173918985,0.24666948472679245,0.2935059691158899,0.5209964934803448,0.8962918802013424,0.022521050924035058,0.4897801746586732,0.8517163752196135,0.9741686791332407,0.35658624925556404,0.9090683877584387,0.029362078998769692,0.0037978108723106807,0.83606701266706,0.9668883164806297,0.3773713871779519,0.17436567610395887,0.03707839086440845,0.9657576553653466,0.8337399712603186,0.0034220287726170473,0.3983845875498675,0.15830957028853498,0.359591297269408,0.27127344038690704,0.8494820022904335,0.006401628260751635,0.7190862880693258,0.14288893407997422,0.5178649346194754,0.29065585848449477,0.2493763475384846,0.010299212965803939,0.6995046500447137,0.7598944823759073,0.0011269363243250896,0.31042761098463006,0.23095553850889156,0.9994805213330565,0.19370061446488862,0.048418270378002226,0.000144279192311636,0.7977066983961796,0.21303509344417987,0.9999984876320096,0.2110244222027347,0.3328679876867344,0.5632866212556134,0.780110083704908,0.6772543049126195,0.015713438265065383,0.12380243206678204,0.3127058256476599,0.9868555861155615,0.8832118720266164,0.6972469520983574,0.01080177709824881,0.8662528752252519,0.5673172301172492,0.991313382768616,0.14117176302464518,0.4220152846477753,0.6530668510936418,0.8512367437818118,0.588615937735104,0.04668793526617476,0.15651807431498865,0.4007940462469937,0.0037153030511794527,0.07192425501794292,0.5353380738445866,0.8873703671267233,0.9224052530429807,0.3797573092631325,0.9660024990253363,0.08346165711916048,0.5138015421560553,0.030198214849801286,0.9104777426058087,0.35894419743457706,0.09300226711847237,0.9718355056518861,0.49223934261204605,0.9131656509829646,0.03184156756798601,0.6260987688072797,0.08085855272850878,0.10883757471181449,0.4706915761965955,0.9249223430049398,0.9969836707497551,0.6051207629498152,0.8390660442597646,0.00431433217715721,0.40544400657042345,0.9358887722311888,0.04870818304264768,0.583947255421551,0.8545942785776282,0.9465453866051556,0.42670051801660314,0.7475170695680358,0.9904116474242786,0.2972153007405186,0.8694630449467,0.011803638298116537,0.6928827540368654,0.7660177161034414,0.9857540649251005,0.541171538115341,0.8836446907074453,0.9997568258394971,0.19942251114484238,0.784023627759636,2.3160384962916947e-5,0.7918919205792637,0.6637510743865204,0.022923010481494865,0.6524247259453916,0.8015013174717023,0.0002805939444023853,0.3578788255814363,0.68396749245397,0.013973008459571779,0.23496269299384365,0.3060502749392028,0.0014673965083415452,0.7558336746499059,0.7038417711463018,0.009364158324747573,0.25348892023205394,0.28636096908580355,0.003581360883095186,0.14622241045586343,0.4149123471630435,0.005667783747654309,0.8460766458014246,0.5956919084583361,0.0436973325816315,0.16178522340166684,0.7424167681721441,0.002890759178071911,0.8301956376999547,0.6167620193556265,0.03530800752063401,0.9185094621464158,0.4826174496612389,0.9685634830669425,0.8137005377954039,0.6376149783865355,0.027782908121510186,0.9063245481195275,0.3520521111612593,0.97565111998781,0.9694045110654567,0.4850418891775075,0.9171772565575806,0.8933839591354258,0.5257311040439487,0.07697678216161896,0.9615427637797276,0.4635078676845983,0.01537973317858432,0.8797117618646387,0.5472361917642996,0.8443218219661568,0.9528226477100168,0.41252302897321314,0.1479407151983695,0.9930085876721629,0.5686534304798201,0.055585797185909835,0.9432603803685775,0.43382946210203094,0.9492512999467368,0.9889577081621701,0.3038167843926144,0.8742754195937181,0.013409276674007431,0.45525895798604343,0.11866276521511487,0.9839974740564373,0.32382806919938356,0.8882217283601268,0.0188208337869335,0.4767716624410518,0.7899190365680233,5.696954068878934e-6,0.3441669953383981,0.2013645050034315,0.9998265884180659,0.22289301867548234,0.09222031230419331,0.9713875159127763,0.3647957368471093,0.18435217277241944,0.9987940879130195,0.24109467218581987,0.2994349339568201,0.9899331091746582,0.7496217843641613,0.1679268765928557,0.9968339392932177,0.2597778330858135,0.279874240005777,0.0044929310850778115,0.7307108462814834,0.15211916392992586,0.004638134794354987,0.8408447990875751,0.2607229319139811,0.9967117798776207,0.16712249129628387,0.3867246471024696,0.002169276169816048,0.2984488597745729,0.2420166269336752,0.9987181767549784,0.9145269057191074,0.3658329115520602,0.9710273243603613,0.09159803664851796,0.22379011470846089,0.9997970666957633,0.20050141458339488,0.345190697496947,0.9778210141268149,0.10441470508415024,0.47784753686383197,0.9999464432002114,0.03709118685454266,0.32483639494899363,0.8337651815609776,0.11796707581045907,0.1889111025071527,0.9323337315507901,0.23610730991690387,0.5910021951786611,0.9887314832333567,0.006407029875721948,0.43489712606413955,0.9427610439463046,0.055093311085360475,0.28514233675805034,0.9928279714827064,0.1471767849601745,0.6994736042666825,0.9523649174566021,0.0011246655806271266,0.5483082487102205,0.8790101993274484,0.01511579521195655,0.39243079862061275,0.9611274909735181,0.07640361374410043,0.5268066006391638,0.8927182797458202,0.020827318570638687,0.659233282224315,0.7957543392584951,9.189252015440186e-5,0.5052550981429076,0.9056959898958508,0.02742999851144856,0.3507643200451266,0.8128611671518546,0.0009700379531802916,0.7619636876374606,0.6972780630453147,0.03491155549108799,0.6178089543614309,0.9822124488783149,0.00277627017535792,0.46216287241051807,0.7169032691176529,0.043258075446828914,0.8512126464198819,0.5886492588144391,0.005507229989061779,0.7243000041460982,0.9400126000174599,0.003711184439372295,0.5755086382269716,0.6097828703834073,0.009157838405217944,0.9223871362121672,0.7549077546966131,0.062482333692992664,0.8192478947912756,0.8751683669769508,0.030186627777268715,0.6849685002924276,0.4970127118622637,0.0003178290895473057,0.802359769882756,0.6513986528144401,0.019189145987084155,0.6647682827047805,0.7910168308420702,0.0808400935011791,0.784909321808613,0.3843962882574465,0.017192981215551073,0.8843344712598056,0.5400981166449849,0.0006399444660804554,0.766929004592761,0.691888685128119,0.012037402329846014,0.8701878447016612,0.5615489747233269,0.05891484822552567,0.9465301539897846,0.42673400966379926,0.007789327351602371,0.8553527495658728,0.5828853651450733,0.0046751354259754185,0.9364153772964092,0.44812702495198614,0.12333629618460473,0.9857460394268145,0.6040676068818596,0.04026936569638612,0.7101477850903908,0.46961651264968246,0.0020455886335031814,0.9801836497131158,0.6250563055882243,0.20714200181127973,0.9999639590553886,0.4911625070010124,0.09640853812486211,0.8069986449283229,0.35791128665101235,0.02504228753147042,0.9992402137822414,0.5127249371600601,0.30601906907806836,0.9663917656824069,0.6662973688622282,0.17331775239751757,0.888050422516987,0.2535183771917766,0.07248175218160086,0.9926043608651962,0.3997387048354917,0.15730150586398484,0.9950103625757551,0.5557387432624469,0.06170023014178888,0.9491319473260645,0.16181016030696393,0.1419226037170802,0.9915121232422665,0.2919122231316208,0.24818095176106403,0.9981542234669285,0.4423116327236527,0.12720964735752066,0.987099778658628,0.31170769061770154,0.22979120511053852,0.9995416192394849,0.194794570134725,0.35201977034849585,0.9756615557303883,0.331853340694262,0.21190398783083664,0.9999999766522081,0.48531351215810586,0.3315655713842651,0.9755672825065215,0.11338371509614115,0.4634741007896545,0.9995284432603715,0.23004838620950857,0.08733358636732325,0.9871686579558536,0.3730447409901195,0.4420080846849265,0.9981278960131466,0.051869307761841676,0.29163438502359806,0.9604986259319865,0.14213596128492445,0.16158513307958322,0.949266161182778,0.2673094728593943,0.5554350379985703,0.9950533357827537,0.0134170662776395,0.3994393309054195,0.9925519017198375,0.0726403061901707,0.2532525361976561,0.8882430638806776,0.17354916565326312,0.6660091359680635,0.9665018280184967,0.08422803525847339,0.5124194340992143,0.9992569613645129,0.1901813603304623,0.3576183128747449,0.8072397998895979,0.0965890094164969,0.49085695672294094,0.9139427199861052,0.032328859753579964,0.624760395511557,0.9802687421415919,0.1097002399507579,0.46931148341119966,0.925649385188988,0.040389607423371,0.6037686803894747,0.8400808629429708,0.004497460873848169,0.7306808082253915,0.9365644354563984,0.049305130088550364,0.58258397817499,0.9904645373493162,0.007843151509638824,0.4264317223438258,0.7487174122811004,0.0021661268957157143,0.5612456877895154,0.8703931976077423,0.15328492758443085,0.6916064507148612,0.9559400027258226,0.0006245811005975432,0.5397934937949335,0.6445542085311614,0.01727252115593042,0.3840989905641331,0.7851604013768319,0.08100677824388902,0.7907682736253465,0.8979514114271647,0.01910538574350945,0.6511073712509432,0.5329518063750049,0.00032881700577847006,0.4967071182066211,0.685252385205981,0.030291292067401887,0.8749662784656995,0.8194830324023491,0.062334487127738425,0.7546448046531959,0.7051034597575889,0.009099708825774655,0.6094847075426709,0.8357687913615999,0.003748441934820379,0.9398673802999671,0.7245730866489611,0.005462089882438903,0.8450774433616349,0.5970485680791974,0.04313381989633808,0.7166278814567647,0.7436250566243777,0.0027442034922994796,0.5670479518984836,0.6181059281014668,0.0347994531665633,0.91775134925446,0.48399926246906055,0.10067965154160297,0.812622726955861,0.6389436368804684,0.027330257898741273,0.6770001852551669,0.5055606799499063,8.612717068978704e-5,0.9689265025122208,0.37177340338703235,0.020740125165514656,0.8925290578710597,0.7979249775712136,0.07624133215646511,0.7778434517444721,0.3927292623271062,0.015041311175114647,0.9959692743916144,0.5486124096628769,0.001145244433980841,0.9522346518351865,0.6997537939264744,0.14696031390076247,0.8643880507345889,0.28541832251563126,0.05495394153579447,0.9426189804721105,0.4352001363209479,0.006358356253314323,0.8492876122368189,0.591302673637114,0.2358477896435917,0.9321801344308667,0.18915040725090315,0.11776999312828534,0.98364863750859,0.3251226606822652,0.03697576564874522,0.9209375276862495,0.4781528405872863,0.10422787558024599,0.9777309164042419,0.34548130916672026,0.20025676124173836,0.9997882674065826,0.22404490381452086,0.09142180778497488,0.9709247200859696,0.3661273286840713,0.022440484242385372,0.998696215132077,0.24227845442828017,0.29816922637710963,0.9902072758151239,0.13716863393626144,0.16689452404730565,0.9966766967648227,0.26099131085514904,0.06811167422933823,0.9939970926957405,0.4081274294235061,0.4064685158375393,0.9553987296473216,0.28014867126726556,0.25950985933809156,0.9453099778142224,0.16815540574812787,0.13600914857967167,0.9638753802013225,0.2997149071563923,0.5195812194142555,0.9988152066035396,0.45081066409567716,0.3645015473432116,0.9850994830563913,0.09239723086947443,0.22263869714132145,0.9098812324167671,0.20160966378908363,0.10783028823674234,0.9782264002124401,0.3399277569125476,0.4764663970659444,0.9999242962437312,0.037615531883820885,0.8612672167737314,0.9728584592436811,0.11886049297148837,0.18782990150751733,0.9330266114748491,0.23728265330328724,0.5896423574385746,0.9890214874847063,0.006629541326317712,0.4335265627757981,0.9973161147939731,0.05572591824240314,0.28389473572738266,0.8655419587359519,0.14815778190788542,0.6982050499626741,0.952952148416617,0.0010338923377961606,0.06040854479167823,0.9961803733331775,0.015455036480253148,0.39108100289539693,0.779245407094451,0.07713977917211595,0.7965675089081801,0.9379455202176252,0.02111655400238155,0.6579220767447856,0.9695096835647317,0.31420929130460906,0.5038725723088501,0.6785780390754197,0.46646977075501445,0.8796677035306795,0.8139384485250754,0.06584401158421205,0.2097035238225201,0.9186766001505452,0.010510908946747444,0.09827788613805571,0.9825761005850012,0.002923666106898093,0.9432290455407433,0.9994040497605046,0.13291445433327292,0.8502272405528588,0.846297147881321,0.1292176397176068,0.7230634878722049,0.45532640130033414,0.25077985975432115,0.574141624106794,0.6111312946098456,0.2188762336543899,0.4179878206424751,0.7560961930991417,0.10503277537450212,0.2698336684244701,0.8760808966179959,0.029715302813815292,0.9998248005797907,0.9593818290565856,0.00027045055708679877,0.9713649335620582,0.9978736313131064,0.019570335293549013,0.8969270775702716,0.24115260403222993,0.08573240313675184,0.7837720674233875,0.3857418505463611,0.19230305813757081,0.6429372956774801,0.5414760922897219,0.27981344286146487,0.4881601006906743,0.6931646633049426,0.15207052960961814,0.8692570670100227,0.8260115213982957,0.11139190484392336,0.996719528454914,0.927058487159836,0.007548115885540052,0.9901336168410997,0.5842485014122969,0.004865654610719694,0.9357389769440083,0.1835700851018759,0.05047970385684314,0.8388413834943493,0.8574589441427153,0.03972751883287967,0.7088924442932666,0.47099665587680883,0.34512631180764397,0.9797964363154918,0.6263944666492183,0.012701181955347307,0.9211388777605263,0.7694634786922371,0.09559394094843698,0.8059061879477424,0.35923741047775826,0.024612036609275523,0.9991621145163321,0.04569804886421547,5.365638801047012e-7,0.9658916487838285,0.667600604595618,0.1722723265518129,0.887177070505633,0.25472223526019366,0.07176642401590372,0.9928393949563176,0.4010935887337935,0.013031381450689383,0.9948136341058678,0.5571124945874479,0.2658165731409208,0.9485226456297486,0.1628297984261995,0.14095901126686866,0.9611536639784112,0.8377626286302297,0.051123109779082965,0.9982710076700176,0.44368520222666963,0.3714126098062549,0.9867858837923502,0.08828916374074736,0.0072966327255598595,0.9057355654897383,0.19589085945037604,0.11231540557106179,0.8271208901540816,0.33315604031881074,0.4836261439343678,0.6945151006746908,0.03493641855393975,0.33026444295632523,0.8294370830758453,0.6415328128071768,0.19345912751864142,0.9293998546534089,0.7825646449121635,0.08655449380655161,0.9874780048326017,0.00551725710044465,0.019978258691028095,0.7361847682673845,0.05248423245063988,0.00022441692247271439,0.9599582541824023,0.14310289582652264,0.7047629428485526,0.8770446913295364,0.2685341002978062,0.5540607677024375,0.6307776682781878,0.41654300588052784,0.39808538446558034,0.7732730627868721,0.5726924931701567,0.2520509805755027,0.8891127920707977,0.023226072948488108,0.13020207812923612,0.847352412057234,1.446481349753892e-5,0.04442409136588954,0.9993303995385432,0.02557256309317607,0.8842911543414329,0.9829574059877955,0.09740737376690234,0.7668717444763173,0.9194756677970071,0.20851196887304196,0.6234210682794152,0.5616161737031595,0.34804895792063634,0.4679316252747362,0.7116784206009144,0.04093574586936882,0.31557020320362933,0.9700114322348594,0.04914360741267709,0.18119847565542696,0.9372367606454266,0.004447640484274096,0.581220069479129,0.9907313892513194,0.00808895810884025,0.9254533955927137,0.9963589815172066,0.059712378028060065,0.27621824815845564,0.8713205181876653,0.15428243650068257,0.6903286823416225,0.4912302110495422,0.000557405899192176,0.5384151452075924,0.9971623907725375,0.017634626078154525,0.38275450896408036,0.7862949946154629,0.08176284276643664,0.7896424034142444,0.8987869389643757,0.018728685781291,0.9975813429385827,0.9723803141215968,0.0003808606268523307,0.49532457867027796,0.6865358614908812,0.030767002820667244,0.874050247115695,0.8205453414379988,0.06166764852834189,0.7534539876046826,0.9232881124618479,0.008839012822964787,0.6081352597516675,0.577177026651588,0.003919317399285915,0.9392083295652036,0.7258075075351356,0.12716452476401008,0.301058104430317,0.8524122195239712,0.04257380047736553,0.7153809720910567,0.4638464277281012,0.0026014498978229605,0.9817634180341217,0.9935001323734292,0.21184864640290685,0.9169900421739597,0.763400123922378,0.06737534715389526,0.8115425257567541,0.3523764013881252,0.16580340430158502,0.9995254984818263,0.5069431552947519,0.3113619114628807,0.5227315843085804,0.6608326583181301,0.17771743612692115,0.36753942390933336,0.7990341844380563,0.07550912227270123,0.9915804803266568,0.9080672479592513,0.4205830652232705,0.9957921776940205,0.9772965202107826,0.0012406751878551447,0.951643198107385,0.15757343743407626,0.03642485225282632,0.8634399316949051,0.2866679282151888,0.116827185175713,0.7397859221693943,0.4365713060091976,0.37835008090442834,0.5927426579483255,0.592661660358525,0.23467491122742412,0.9015065706213599,0.7397135892864142,0.05428812935959726,0.9738475087317959,0.8633833190297926,0.03645574297421744,0.9999683019383361,0.0323528176566249,0.0012464850277870143,0.9773210696997442,0.10974256725467002,0.01468675949114101,0.9081148736581115,0.77662426331461,0.6037024392349217,0.7991002408297194,0.3674599441312595,0.4477557396794273,0.9985945292461849,0.5226492425508668,6.10822849389514e-5,0.8556152731954931,0.6756292832380311,0.16586471847544515,0.8817119217481324,0.2622066161202383,0.06741667697418485,0.9942088006928386,0.0121189602214129,0.011163779490404035,0.9935133731699897,0.565595887073637,0.25829862558535294,0.9446795483788368,0.1691908575327737,0.13506264660888223,0.9643895869451803,0.3009824859476262,0.0474234726039639,0.998908422437325,0.4521867274255569,0.3631712191755536,0.9847626154993683,0.09319954168143202,0.22148940031968734,0.9106714752673257,0.20272019453137397,0.10697412774143616,0.9786281297083456,0.34123818393487604,0.4750854372094622,0.9998983267922119,0.038143412373065455,0.3222491549877754,0.8358189627627457,0.11975682438150659,0.18675108740658203,0.9337161804134517,0.23846000546532314,0.5882818342797773,0.9893077526055035,0.0068558251603421105,0.43215650775318,0.7436841869609081,0.5383329616468895,0.2826487870694979,0.8664838798062895,0.14914146909318493,0.6969349801535663,0.9535359160375758,0.0009469342635529121,0.05975144653731013,0.6390086831257586,0.015797982650938458,0.38973203998092715,0.9907471798905109,0.07787917785186277,0.7954532540967948,0.9372767376803125,0.020720829146356978,0.6566096637697225,0.5271793704567653,0.3154935913396809,0.5024900168645325,0.6798687498744558,0.4678493687404658,0.34812748814996075,0.8150133294785304,0.06515988514883203,0.2085789436291956,0.413951324873397,0.010230781947631273,0.09745626018250209,0.9829360624435157,0.0030748627575364895,0.9425874797761612,0.9993346571758026,0.04439013192760932,0.8492391567966038,0.9670270335890945,0.13014660577618997,0.7218252660219229,0.4567036246192621,0.2519794062049701,0.5727740430888032,0.6124788691099843,0.009692147192248868,0.41662427736538954,0.9952567759270319,0.10418649804801705,0.26860716594663314,0.8769905506889349,0.029247573716647046,0.9997862923985779,0.9599259272543947,0.00022689303060263732,0.9709019612988833,0.9979991010836806,0.019955198036219757,0.3744622827205757,0.24233648299818467,0.08650814577660848,0.7826326432750035,0.3870882864699696,0.0164814801562862,0.6416118663543929,0.9751128806813752,0.2785729818908001,0.486777951530981,0.6944391645162082,0.033787702650748375,0.8683234659242874,0.8270585476121582,0.05761939817041317,0.9968757453612676,0.9277759090996166,0.007310669779349632,0.5997740670948717,0.5856109935030299,0.005059959665831171,0.935059244867004,0.7334008629260708,0.12152356492618593,0.8378234002665806,0.858424290600774,0.03918919128077525,0.7076355062736468,0.47237702086779004,0.0018033336870535988,0.97940555432342,0.6277316612794439,0.2049052780031715,0.40117438798778987,0.7706270700092597,0.09478243592049546,0.8048113919632474,0.36056461059606315,0.024185420573693217,0.9990801985831377,0.965861720333531,0.303473461317644,0.9653879696088622,0.6689025588300198,0.17122940656032526,0.8863007580811877,0.25592796875864277,0.0710543701874054,0.9930706607246018,0.40244922888513057,0.41215549692462894,0.6264742145094747,0.5584858092218763,0.2645959100147277,0.9479099144630092,0.16385201459861737,0.1399981640971097,0.9616862098096655,0.8387807660721289,0.5253582773367185,0.9983839820193564,0.44505920232095164,0.004877132550134611,0.9864682668892761,0.08907525623967505,0.007533854291460973,0.9065419849587928,0.19698947402945166,0.6372560438148341,0.8260740128046142,0.3344600156569285,0.4822443659724961,0.6932406878248548,0.48807769728774375,0.32896461235153507,0.8304758753887079,0.6428583069677608,0.7420901975986787,0.9301065257213659,0.7837041981421404,0.08577856251121219,0.987783624380494,0.0057239716962498854,0.019593177038661425,0.9978812182724568,0.053102578911122855,0.00026774663798873055,0.9594143655240419,0.14407255925611534,0.7035008324441615,0.8761352089138135,0.2697604975586892,0.5526860840496868,0.9954337625556856,0.41790651144325713,0.009439051143829202,0.7744298323984058,0.5740601076551316,0.25085132080818934,0.8899795450470134,0.17564860320971604,0.12927294327481031,0.9674897813884222,2.6892867304728618e-5,0.043856111314380164,0.9994000197585562,0.4607022271515953,0.8834051769973421,0.9825976641973082,0.09822881640001596,0.7657015485789095,0.9154873568733957,0.209636416463854,0.10174772075054012,0.5629879819942231,0.34936672933834734,0.46655201233780436,0.9996529042173588,0.04148539438848625,0.31428581878650774,0.842102691644224,0.04854759163330258,0.18013460148436244,0.9379057426575756,0.24578327692326501,0.5798555397626155,0.9909944889486089,0.00833852593255402,0.4236977891354196,0.7511123833535169,0.060369275737080286,0.2749827266677275,0.8722449995960389,0.1552825888245089,0.6890494586871552,0.9570680067258579,0.0004940495096602548,0.5370365028923747,0.6471990694927421,0.4334448686903249,0.3814109238403766,0.7874273988002614,0.08252210519208825,0.7885143185545275,0.8996194173177257,0.018355665690654888,0.11891384869875143,0.5357104446514431,0.00043672440969089177,0.49394207488289715,0.9999228551503963,0.03124630139876411,0.8731313557222304,0.9782504529923342,0.0610041614828738,0.752261232609529,0.4223840519192213,0.2225701190010233,0.6067849851424897,0.5785427442898313,0.0040939859699527514,0.45089269159333445,0.7270402018637414,0.12624471582127245,0.2997904346457667,0.3130520115004094,0.0420172786067049,0.7141324158906109,0.9452724883649988,0.0024624994861573435,0.9813915810318645,0.9937204523855481,0.01143864000770961,0.9162255467259814,0.21334088210330526,0.06807014736599976,0.8104599424574608,0.3536979136038238,0.16683305777944812,0.6744113816199714,0.5083255775512062,0.3100822222476526,0.5213503448639336,0.12838210114803195,0.1766616159054985,0.3662067477584699,0.8001411048453386,0.07478015810891231,0.9918312563699204,0.9088646295426355,0.014375593924828012,0.9956112900961764,0.9777065845887247,0.0013399195292249089,0.9510482910489546,0.15858220805662088,0.03694466373333877,0.8624890337398006,0.28791916508328963,0.053700443704578826,0.7385717860291185,0.9321386784022021,0.3770095089068001,0.5913837131752184,0.5940199385751889,0.23350406152609043,0.9307830041114493,0.7409260015537419,0.11599322351988245,0.9742869860130856,0.8643316039458637,0.0359392646275733,0.6998293542102689,0.48091568745761304,0.0011508268952845069,0.9769075733278174,0.11060836277439429,0.19804815781408353,0.9073145577770971,0.7777749191187942,0.6023495246498888,0.7979911700391096,0.3687935729992993,0.02162868710872795,0.9984890310328487,0.5240303188446073,0.29564245056743066,0.8565858119466969,0.6769230936895038,0.1648374677513199,0.8808174556212197,0.8125583946076924,0.5598060551071914,0.9944167298964209,0.41084690827560644,0.01087511985130235,0.6181860206285503,0.07037270701606269,0.2570892399170375,0.9440457188579172,0.7165535897384937,0.6701533836294371,0.964900242897637,0.30225158645618,0.046837486799495065,0.7246467283949876,0.023778590767469854,0.3618419372209719,0.9844220413757574,0.6094042797316532,0.7717441024813684,0.9114585780631027,0.20383299831898377,0.10612097238002377,0.8195464335395075,0.0016922739428248401,0.15819997328588237,0.9998685350442197,0.49662469336217324,0.0003318126412547584,0.836842005702499,0.1206560631870312,0.18567466845311892,0.8980013091404648,0.0052503854551883,0.08474357254909198,0.9895902764069229,0.22967726539920363,0.01729400563450273,0.6446331133246122,0.057001318649335386,0.28140450031110364,0.9559738291274593,0.03426981408447971,0.6956634045505007,0.9541162158559049,0.977064554923021,0.059097714488434094,0.640336226943133,0.01614463110179526,0.38838392019157314,0.23016239044638287,0.5825026824690491,0.004622346194817051,0.8952719562386696,0.1822011480325219,0.9981161692737863,0.8401412821936945,0.00018860971764328438,0.5011074423811781,0.16522609068141758,0.46922921255439437,0.8778626136683715,0.8160858017935211,0.10337551797544342,0.9950723205873926,0.9139889472556577,0.009954399796325841,0.07010516981177273,0.9832923317015371,0.25313475597759305,0.025163691535258714,0.7206329124201851,0.665881383280858,0.30637676182044,0.9665314843112509,0.04493942413357477,0.7205853480628793,0.9419673168899828,0.2531808490577274,0.9832787419448443,0.6138255835800696,0.9111609454593799,0.4152613715913991,0.20749957673100294,0.10334324717005433,0.816044732241308,0.0020856353763727964,0.1615244601371953,0.1421935312131623,0.8597138170213445,0.0001871568431420778,0.8401801283995725,0.9981207630795423,0.18216023087097616,0.8952394950553846,0.587436073535584,0.08728705003628112,0.9904908421714624,0.38843558573322384,0.016131273854728012,0.6402853542460507,0.9755418246086299,0.33148796470550607,0.034460524768307244,0.695712179016891,0.6914813532476836,0.3319309689032546,0.28145217025080854,0.05697674443418593,0.7448443098583614,0.9284900602015871,0.22972185522776428,0.9895795146301787,0.5869728309994565,0.0052580491056246625,0.44239350972288316,0.18571588955106527,0.5280371880806709,0.8368028339911758,0.00033374608307684683,0.1418650795857896,0.999869747587753,0.8782052116640526,0.0016879196860175583,0.555820655412974,0.9949987401308055,0.20379029633460644,0.4197872762926871,0.7717885920717165,0.0724390141682208,0.984435165838397,0.9421871099932695,0.02376244268669281,0.6663751007161184,0.04685988717415418,0.30220290658069343,0.04515656317650746,0.6702032216104994,0.02501653506391277,0.3579903169474802,0.2571355684679074,0.9820956722676053,0.7683673782577147,0.9137249524465622,0.4107947557231847,0.9944088284447529,0.5598586766651653,0.0020381470119273937,0.8808517993838865,0.16487680100820173,0.500636990073167,0.8565486558090537,8.363192492116811e-5,0.12328209375643556,0.9984931456511261,0.1786719491380635,0.004686387618818899,0.5829666502663623,0.9903889705231201,0.2263106367853202,0.9263808571281231,0.7483807240235373,0.6359260507261346,0.06128038966989002,0.9543128834456343,0.03282497038347293,0.6998779384933487,0.9557805973518292,0.32766608950859155,0.9742702051396367,0.054892231899114075,0.01717155849975749,0.38447648311137184,0.2335489094450502,0.08500579841419015,0.7910838533508544,0.005934465599602923,0.9007620663816767,0.12096270971777573,0.5325646136987953,0.0003148973801556654,0.8625255382794388,0.1450449441595127,0.15854348789084094,0.4782881411365052,0.0013360446341284526,0.10583135486215822,0.9956182944224804,0.20014837684058856,0.009173548576893564,0.7755845036788905,0.0748080436140387,0.24965356606849193,0.9400517406920327,0.7242263336868053,0.6620910069655591,0.9679783982111496,0.3101312534113512,0.963191723479242,0.041255796219822505,0.9438292706720892,0.3536472317336979,0.9822342323937708,0.6177288467434742,0.7645293210882005,0.9162549129470239,0.40633548078315634,0.1009132891894472,0.8129254594894142,0.002467756139657995,0.4651726551491286,0.9995994865380575,0.13591631221382594,0.8533541532940363,0.5245002175331847,0.12627992477037764,0.17907317305139914,0.8927692917556816,0.004087220013595405,0.5784903994588453,0.09247568252578614,0.39235030354413886,0.01513591614465637,0.752306993400566,0.06102953492757923,0.27374892569232046,0.34005606406890754,0.031227861029202886,0.035764330989762616,0.9576267686611493,0.28506791132151477,0.9728144285879325,0.648519816768396,0.018369897836467752,0.9330943036094472,0.08529799910515123,0.5909211439789792,0.7873840276716993,0.9004488401219619,0.18884657686945894,0.9973020832539005,0.5370893594913947,0.0004964079271512767,0.49255961741530696,0.9999452300008467,0.15524419858319305,0.0013745589583911144,0.8226625985943312,0.5467971171762311,0.2005674219084903,0.909135242718234,0.00832888925039954,0.6054338940395367,0.985412883303048,0.24573763790436237,0.9378801584051946,0.7282711602094157,0.9677938253425595,0.29852429569313654,0.31433503053706924,0.04146425853960478,0.7128822224020724,0.027928058217270957,0.2606505597583364,0.06830732100200232,0.6221321949384241,0.011734550201053517,0.918750618763831,0.9937945601376232,0.09819726909935483,0.8093749853355732,0.4656948582067397,0.167865258700981,0.9993974211970782,0.5097079361490643,2.634596042933035e-5,0.8463948238844352,0.9987883598501255,0.1756082679771379,0.004154285295700999,0.8012457303293837,0.5740076894751847,0.2229616322837022,0.39678407749428646,0.014048303768183446,0.6320605010993512,0.978112996351534,0.26971345016771164,0.9504499352086431,0.7035492451590548,0.0374680158033745,0.32390521229769276,0.2891720235527919,0.6480199060967776,0.7373558257337148,0.01960787174871076,0.37566987731264007,0.9877719769548143,0.08001443812534681,0.006566711940362957,0.4339111646724009,0.9973561154096614,0.11510923958375208,0.5416110531055409,0.8652771031286564,0.48802471001032854,0.9999917919970323,0.8725589250382524,0.0010589830372707554,0.8261141916603052,0.1114771356401143,0.19694731503543,0.9065111275087883,0.7789234510149019,0.07693284548936336,0.24618849711347196,0.37012820509106736,0.9356725418378273,0.6582901928675475,0.050539020044031324,0.2943814016575633,0.9616658593013692,0.6782155513608594,0.02775582084153838,0.9479334671420556,0.26464267195416125,0.06603661054066184,0.7611160427310324,0.012731530942469038,0.21404521699447937,0.9930618644569503,0.09551431438581515,0.0028819152840424134,0.8863344066796737,0.9994228387982632,0.13317802097784598,0.8505040683439438,0.84601714960159,0.5154360235141742,0.13236760071673087,0.4549399403229787,0.0035912155086428865,0.8048534048221452,0.9919851926019625,0.21919720404742538,0.9218540905455959,0.013000681602295505,0.6276804168340551,0.27017820674426557,0.3438626696994463,0.02984721877250035,0.6840441345247017,0.03920976355944289,0.9612059846136056,0.9714942205903098,0.6523462206617707,0.0194629824210244,0.9350853642694603,0.24082070009222795,0.08029871144012929,0.5998260029652841,0.007319703029047442,0.1919973007826133,0.9968698266893232,0.11222989520990712,0.0006912350964700109,0.8683593081966303,0.15111688407036722,0.15234930653907147,0.869518577907489,0.8257172219967663,0.5428009431778968,0.9966750031179483,0.4277179761426426,0.9038535594567652,0.006761019404556923,0.9863593428077624,0.24229106171556608,0.9359291472972137,0.7318335423387563,0.653981255481765,0.9709197760886099,0.29025542850345143,0.03987923472804955,0.709244921145207,0.029265438144697897,0.34549530120458255,0.9799054793807442,0.06380161203889517,0.6309083780785577,0.402910684365996,0.21777770624830844,0.09582224825688068,0.5728264806808865,0.0033886535627681846,0.45665082153634384,0.17470047621197865,0.5137191466994606,1.2555906258038263e-6,0.8492770850168306,0.5109018345870151,0.17256547588634646,0.4594590538755851,0.0030689964727642627,0.09450701058367827,0.9927738122351377,0.40071325966573995,0.9194019510260696,0.7596497231377528,0.06518605040712144,0.980688764242473,0.26169968225984386,0.7072074443561107,0.6798192947730096,0.9610035695318478,0.29281696970261534,0.969965218582085,0.6566599982657998,0.7293329475557404,0.37178762355099215,0.9868743551595147,0.077850772905033,0.7803473205541058,0.9055086836336657,0.42493057251165095,0.9963426492774614,0.8274142503152583,0.0009501975347321334,0.4840139670721472,0.9999986835716895,0.14910370919085808,0.8664478221458677,0.000551031190959117,0.11401515084877378,0.19376576818138036,0.4322090203693137,0.006847080879972101,0.5970630003778961,0.08183707407994517,0.2384148338467038,0.020086992745532717,0.7358426905088272,0.052311306359791365,0.9724246851845744,0.32229869605178896,0.03812311054835982,0.6866615060971701,0.34599322279791717,0.26819022583056507,0.978612796538926,0.6304031103575067,0.013646881131244015,0.9233601814382788,0.22153342029803058,0.093168727105922,0.8026148164842214,0.8888690002538886,0.45213396817514484,0.13046335109003898,0.5182525902716478,0.8439773268671581,0.5114251595324174,0.9993101742656814,0.16915111601806143,0.8845392788172646,0.8080238305122329,0.5655433423902911,0.993521880248317,0.4051627364795074,0.7592022399005732,0.6237970502378573,0.06744325929230499,0.2621599928853175,0.9466741824845792,0.026837431541437473,0.04078211595576198,0.3159309234386256,0.2969534961734806,0.049311500764588345,0.6609608839170495,0.9370484077891107,0.36740883854933715,0.9858218767153633,0.7807805998181914,0.008019591987395158,0.9081454923144012,0.19919364535948392,0.10970943566542612,0.5501230045927007,0.8710605491399888,0.4794812278995972,0.14947680131619406,0.49084224705543744,0.8633469104537502,0.538802013030698,0.1169142027380955,0.19019290784436782,0.9014749809767537,0.7859767881728288,0.5926095755526828,0.9883836721709793,0.3784014913393132,0.01883403643489645,0.6501590210742831,0.05434951820914219,0.3218095127380056,0.958316054142464,0.036404995401701,0.7009719533052554,0.9516659356246104,0.2722185640255492,0.06185446070918993,0.7537883900431874,0.9230814511941582,0.3940282620513475,0.22531205007631078,0.5767936273488498,0.003870977734911518,0.8917040988712457,0.9989392712436448,0.127423184550153,0.5227845317913999,6.321745542553492e-5,0.5068901579519983,0.9995278042364214,0.4634594279827089,0.002641130267938163,0.5660622448882211,0.09988091136739219,0.994229335081066,0.9172040274153783,0.011135339068875538,0.6193974654074152,0.9817775993949045,0.35200571738182396,0.02700688011096103,0.7154288037361307,0.04259520480849821,0.31172131975621364,0.9685804310250838,0.047365920220851176,0.02189485432331778,0.9392336567162967,0.36304096481419124,0.07571429180792988,0.6081870071755716,0.907842899412295,0.42096618959446797,0.9958422631457482,0.5496021585762276,0.8205046621319363,0.0015913019829281727,0.15729079308548222,0.146256734087788,0.4953775787934843,0.8321547928577511,0.5342783792456863,0.9975865471354364,0.1866455423270093,0.8987549645397945,0.5931239229391444,0.08405020050656531,0.23500387871926925,0.9316791435960734,0.017620676504638055,0.7438024342246212,0.9737235168447713,0.32605474859586003,0.036601331311995444,0.6903776934610274,0.032215647342896336,0.3373885282225678,0.27626564693870714,0.05968726232053767,0.014593549826032282,0.9254812362554918,0.3895999493554833,0.09084933755597485,0.5812723674801455,0.004454697058731083,0.448141657716669,0.9986234525625715,0.5222616077156816,0.8410543251740223,0.8553423995798157,0.1378536571381902,0.999704326783853,0.16240435422528726,0.8111744211363701,0.5615635749353425,0.9941497655754539,0.40910523461775894,0.9146870141337058,0.7669165642793587,0.6149880550535272,0.2586383758650665,0.9448568237399552,0.025555832230213626,0.6718172436941912,0.9642456315203829,0.3075272100089602,0.9669786504462954,0.7262271517962837,0.023242042158284237,0.3635444746476886,0.25209700824505554,0.07333198921147022,0.7732286754926753,0.009718701276047292,0.20240829088903967,0.10721410871887,0.554113459095972,0.0015498459099496653,0.47547298901429996,0.16060757316119822,0.14306577729938352,0.00039944067906833025,0.8355313808715858,0.11950497246958369,0.9980111865565592,0.440687683029821,0.005509407777575914,0.7933705836383268,0.23544791538860027,0.38229722492229823,0.9293726984952051,0.7433452903647764,0.05618308326716587,0.9751550578379548,0.33031429885427693,0.0349169566870845,0.6972915815232001,0.9533724297411619,0.3331060767495141,0.05993552357854004,0.6386359124723083,0.7459309380665414,0.9278460073753787,0.9908213356802569,0.08825909089665601,0.7957662015018763,0.8941851489100658,0.4436325373809238,0.9982666008796068,0.12143508003355419,0.8549739484718055,0.5028780376281373,0.14099590076635288,0.16279066224472355,0.8790197948692697,0.0017918601619039132,0.557059838758094,0.20889433592049522,0.41356911383334577,0.010309022514961186,0.7707409368589714,0.07179378634914535,0.25467604980804087,0.360694672143852,0.6723087282845172,0.04423043308271307,0.9659108868373232,0.3047943137987656,0.04567591448720698,0.6690300206708111,0.024628463627539843,0.3591865525985054,0.9837297838734131,0.612100754602571,0.7694188304621287,0.4170068960265056,0.20606539097819787,0.994593277959942,0.8174147854947845,0.8767355441828029,0.47094374287131574,0.9997974855992091,0.499389835617951,0.8574218824000941,0.8388803571481163,0.12246323545957105,0.44016795620284704,0.896321494159896,0.004858281116888019,0.5841962563444586,0.9901440914393769,0.22735521223980387,0.016580431131009765,0.6419839618580496,0.05829026796387321,0.278920950536008,0.33458781298394835,0.6940816215328063,0.6931157748645549,0.9552663943629909,0.9762293850758659,0.057800368975508665,0.6429880853409073,0.0168490242136346,0.3856902512133794,0.23249442590711922,0.5852286715861523,0.7920969693525415,0.44415268665449104,0.18434076302943314,0.9978687455609905,0.8381093614300239,0.0002721964188642789,0.4983422785828984,0.9998262007594412,0.4719895954639256,0.8760459670546425,0.8182234877254615,0.10506527821270628,0.2052186068495428,0.9124320268252294,0.009412878461532548,0.07152376503148045,0.9839937815480051,0.25073391208764584,0.9406424976981709,0.7231109221724069,0.04611433311525437,0.30383031682830497,0.9655296880658872,0.6685372913533064,0.7181004617537878,0.026054004638908446,0.25558938720949864,0.07125387941953071,0.6165163912480233,0.9127280927653081,0.41253751423166507,0.20974667969969157,0.10166585052698912,0.8138971943110352,0.4714663295356339,0.16356486673813708,0.14026755123123208,0.8577877305912949,0.00011914967138604293,0.8422014460915013,0.9983526600552679,0.4446735421620796,0.8935398243252815,0.7966101796449279,0.0888543195684775,0.22779414692621425,0.3911327330655502,0.015441963096385514,0.6376291222526327,0.9763888010219979,0.2748617952351923,0.03345886680084709,0.6982537089633226,0.6889240762138372,0.3293292821782653,0.2839425330734009,0.6424864128297586,0.7424296353922122,0.9299085280751289,0.23205233386050422,0.9890104388586388,0.08318045759184423,0.005665575051848615,0.4396476506886806,0.18787130623287207,0.5307975622657124,0.8347539835307509,0.8613038571645276,0.4938066559558038,0.9999252157257981,0.8763907485291279,0.0014685230406786265,0.5530719343112903,0.9953812922964653,0.20156713609496218,0.42251784219258126,0.7741053929241449,0.07387908247829034,0.2511878170618627,0.36455256717996737,0.022927414267200685,0.663764975079367,0.048035584562639955,0.2996663439674874,0.044015164763346715,0.6728006330394032,0.7140100270958702,0.35534120800596847,0.2595563295707415,0.06893790904436153,0.7660301730749377,0.9152713687603227,0.20932061234925692,0.9939889015207133,0.5626030279932357,0.0022951777917927796,0.8826375892265448,0.46189279645346243,0.5034021317336983,0.8546046507542046,0.8418196051508218,0.12510600250192555,0.9987000374523772,0.4491836810773302,0.8907257690898742,0.5802385612580085,0.990921028096583,0.22400070646333026,0.9249300966029018,0.7507767669701251,0.633262956794,0.9777465555116633,0.953151176504331,0.031846734027888124,0.6894086230280388,0.036995771605291605,0.32507300681295903,0.9733873496848651,0.05363940170519094,0.01789738613366748,0.3817879139998187,0.23589279309396566,0.08346979542551025,0.7888311420535751,0.006366784862197994,0.435147581272379,0.11916516169449753,0.5353233984883093,0.0004206604731427088,0.8644243421999807,0.1469978486269749,0.15652876564583518,0.48105101856193805,0.5535924034740854,0.10753862484469284,0.9959759880619488,0.42200075259893044,0.008653804239118712,0.7778875159476758,0.07626946650755789,0.24726380829014777,0.9387321663743939,0.7266944172852061,0.6594727074611564,0.30014605591248705,0.31269218476959715,0.9621433342155625,0.7144829926670093,0.9450958429671987,0.3510054226120748,0.9814963098911513,0.6204144566456848,0.7621788071944426,0.9177804710100548,0.2130230457378951,0.5620836575224429,0.8107640127286149,0.0027497517398977767,0.46241475020158446,0.9994811915826145,0.13402664535883407,0.8513923895915462,0.5217380108447591,0.1281226119722702,0.17695768584436805,0.453698001797708,0.7998306755628599,0.5757583288463817,0.09408402390765969,0.9252057290079756,0.014468116299974465,0.7546904168455906,0.062360117533592,0.27128652300954015,0.342678369748518,0.030273126787070337,0.6852031539028999,0.3255634778766272,0.28756783755195675,0.9719078383284216,0.738912721562738,0.019119900026335235,0.934469475499669,0.988158105754863,0.5936388057865338,0.7851168624229952,0.9020984937389482,0.19101582381933546,0.11624184424761153,0.5398463278579103,0.0006272323113390987,0.14662732704162457,0.9999785115945894,0.15324674002832767,0.8703575916498889,0.8247699872659022,0.5440433857447681,0.19835752795566586,0.9075394835019315,0.007833803208942891,0.6027293036810379,0.07869472040845471,0.36841918429696324,0.9365385948852119,0.7307278313169578,0.968763032344665,0.2959966489961999,0.3169053176547536,0.04036874070317081,0.71037696180982,0.028846488023875072,0.2630819671915539,0.9802539967913115,0.7626243847858323,0.01233756834595201,0.9202551930340495,0.9933527148724357,0.09655769814156084,0.8071979828250718,0.8852079867441696,0.1699372712861954,0.9992540700756279,0.5124724200906872,5.605928492691259e-6,0.5172056892934479,0.9989731179633449,0.17350902119685357,0.003806160048320073,0.8034480627608553,0.5712718620877042,0.22066397354612066,0.39949125085112414,0.013404872904417331,0.6293915197938293,0.9789148496297686,0.3421815869019107,0.9492428955091792,0.028738174574566788,0.03852532567846567,0.3213199185714473,0.2916825669655108,0.6506588498333968,0.7349184698810486,0.020381986774933247,0.3729934762995406,0.9871567247537842,0.7855467155938173,0.0070209336352142215,0.4311712830210347,0.9970645245529015,0.11335010724294076,0.544365978171065,0.8671597153980565,0.149850740918117,0.9999999900404732,0.48506102576074267,0.0008867409245464919,0.5445647821954062,0.11322358681576417,0.19475258943443924,0.00792637004981972,0.7812141079718173,0.5982861268254351,0.24380997933418508,0.37280043811901875,0.934309099516201,0.6556648423889954,0.970321788240107,0.31641832165716866,0.9605969712483851,0.6807963688443498,0.02867151960983505,0.9491552370556487,0.3423709910551254,0.06466981667456512,0.75875391722857,0.01335900454189548,0.2163178915372414,0.9925952756772503,0.5710742997176154,0.8036066728121688,0.8880838441263694,0.999282378742713,0.1313046144255806,0.8485267299668284,0.8480079247990668,0.5126719518418662,0.13424738838022204,0.45769453136126403,0.0032679889985248733,0.5717899331285414,0.09643982779107158,0.21691359599742666,0.920363299129484,0.012381672669020072,0.6250049870601831,0.26772597869273973,0.34649193085128316,0.9472332198181403,0.6814703055121983,0.040290207799822286,0.3170910633081281,0.9705666967871937,0.6549775637297499,0.02023431789818203,0.9364412412429672,0.24318932159687656,0.07880224047409334,0.6025339588381359,0.7776182217581522,0.19418023831280795,0.9965533036898722,0.5438445632465799,0.0008442196436683758,0.870223470489706,0.15310296947457752,0.9999803222056685,0.8676501408237316,0.8278101767350732,0.5400452847212283,0.9969857701566092,0.4304551884361627,0.9022170934682898,0.7849528760269396,0.9869933872971173,0.2399254347294763,0.9345682242249039,0.019174605953121593,0.6513481377490815,0.9718418401501521,0.28774853912328546,0.03880412565469832,0.7067303493871568,0.03020476790045762,0.34286783971319945,0.9791221075526503,0.06245667985276915,0.7548621561482686,0.4001996468547966,0.2200645761041592,0.09420059791887825,0.5755610323387924,0.0037176329939078157,0.45389674268441677,0.17680536766167776,0.8489018664920455,2.7048254724326704e-6,0.8512503693112721,0.13389067819341482,0.1704807393330649,0.4622157230577959,0.002770695299047221,0.5672982592365773,0.9932346897159308,0.4034248663684154,0.9178900946905113,0.6255117506807688,0.06655787741127983,0.9814424751733888,0.9474670299885757,0.7097208090365696,0.6772364030655145,0.962067112230606,0.2953367328292249,0.9690141021987444,0.6592835241251738,0.021531324093772564,0.24274032875599205,0.9862374897746979,0.07637545670377832,0.7780534235414471,0.9071201584144262,0.42219791008533697,0.11081860837629498,0.8253194024904194,0.001128221365455484,0.4812504715386584,0.15638374507678265,0.48907199494855563,0.8645609707320903,0.8312215653177981,0.9969281069988012,0.1915846110027855,0.43494967763436365,0.00639857483211953,0.5943489650344225,0.08335941632772154,0.236062292327319,0.9323071036408752,0.6518469533443063,0.05354949794505265,0.9733230629858332,0.959020948331566,0.03707115610472084,0.6892238885889778,0.9509036155189425,0.27064379191055854,0.9778054006057597,0.6330705711173914,0.01429594490479319,0.3957593082699602,0.22383429727458842,0.09156746103567165,0.003654191071574109,0.890601197568349,0.44938224647660774,0.9987143811419761,0.5210156217185784,0.8419652462586236,0.5086605531592078,0.9994477395165923,0.4616937851678085,0.8827660385992377,0.002314319873460091,0.09882161876326662,0.9939580056360036,0.4078791446272609,0.7615628572724754,0.6211160996913226,0.06883680926760638,0.2597313499813552,0.9454247891850596,0.7138296223563688,0.04188295066741371,0.963781051610703,0.9691952533000108,0.04812098388037611,0.6635763766711511,0.9383849025347715,0.36474470976187373,0.9851606279064308,0.6064576669955275,0.00852037667415012,0.42271503212687905,0.20140701671127192,0.10798703242175467,0.821861651637283,0.8729082627713279,0.47671871738375227,0.14751028723522597,0.49360707690872446,0.8614417999837916,0.5360446049982998,0.11869704839372602,0.4344307068783425,0.8998206815280623,0.7882406317371202,0.08307025265224571,0.9889687829751284,0.23222087003560266,0.018089612067223648,0.64751921307291,0.055610087518844054,0.324395833351962,0.9572037253785933,0.6887392627577205,0.6984369275330946,0.9528451201018873,0.9779593654459302,0.060528959550111394,0.7514020346064744,0.9245485989767188,0.3913275479188169,0.22762674482851203,0.5795247983453697,0.004221978198224174,0.8934166726087016,0.17987717421649663,0.12558482091324874,0.8423469442371754,0.00011483237636333854,0.5041251615001603,0.16747367672447638,0.46621774639013813,0.8798320199736694,0.563320322742147,0.10154524379007318,0.99464067248577,0.9156736408264099,0.7654176837723102,0.06857199243492657,0.9825099370319614,0.35464923176126006,0.02611763169682002,0.7179208390884955,0.6687251920774832,0.29900407789857153,0.9676085099637592,0.04619809241016254,0.02271147220321268,0.9405481370189308,0.2505609089193337,0.9840438409266186,0.774709822153739,0.9094362906362661,0.41823700726566615,0.9954788256204248,0.5523529134241592,0.8183774139638967,0.001819358371248414,0.15930947894736208,0.1443079353633478,0.861803293768737,0.0002788213208484436,0.5315192072107908,0.9978502967444847,0.1844955787157146,0.8970806333838454,0.5904057276812016,0.08559101745123943,0.9898961628864544,0.9302772695301199,0.016900440664759764,0.643179333067376,0.9746008802326234,0.32864983741061116,0.03556993153769805,0.6929316528142639,0.03319930025280582,0.3347761822973967,0.27874194411604797,0.9750541388097814,0.015264161977513457,0.9269270616387237,0.22718792402800092,0.08926621318197764,0.5839995049930882,0.004830564168975315,0.896199772382732,0.9984107841079977,0.5250236788660335,0.8390270887580072,0.8572822803949942,0.13976574827316274,0.9997917655813985,0.47074448764070176,0.8133340589580373,0.5588185201647115,0.9945639654257519,0.2062268778483528,0.9131357985329331,0.7692506683706777,0.6122952593992244,0.256220420057078,0.9435876756086659,0.024690371918863974,0.6692178508183223,0.9652653836938356,0.3049780844605854,0.9659832859247347,0.7237577625688283,0.024082591621873983,0.360886374965369,0.25450215079702554,0.07189686975570775,0.7709087171601534,0.010268739919967573,0.995548788720904,0.10550911970593707,0.5568615433099847,0.0017750171556550343,0.47271153933671517,0.1626433184245139,0.141134854303113,0.8586577984968542,0.8375763362592747,0.12130472197979436,0.9982499556821669,0.8973985233019925,0.005107612809521822,0.7956052483534244,0.9897911941879922,0.22884112868477618,0.3899158399130395,0.7457571365738478,0.6388276704675527,0.059840804040421525,0.33291794231331295,0.6924486302206837,0.6947477747653271,0.03484371468676295,0.27827265124954803,0.9752171548169855,0.0562750420113447,0.016396279630058574,0.2267494022356239,0.9902864340913169,0.08669659772073829,0.004758248821242761,0.8958802462206703,0.4408858733034185,0.1868979775289703,0.5295526810483064,0.8569158911947712,0.5001128857793792,0.142926033488451,0.47022194511659576,0.8772105419740528,0.0015655887749095876,0.10398188572401124,0.9952106274120978,0.9134304198317715,0.009757902148278208,0.773061495641451,0.9835463278646106,0.2522703628173931,0.02485309174652711,0.7215249678286615,0.6649428271346818,0.04750360430040046,0.30734301141602194,0.9643197149267887,0.7196923732806587,0.025492875503854706,0.25404627091621873,0.9830227317217312,0.06957117897268783,0.010163465921986914,0.9145754686934122,0.409301510956375,0.10273853239463954,0.0017312220057808525,0.8785478191393317,0.4681837065612659,0.1414995440352771,0.5021549965353211,0.8554827883554874,5.81724982943177e-5,0.12428195451758856,0.4429141556299362,0.8946295578716745,0.5864566686888957,0.0878493042681524,0.9906829156438939,0.2250414977937999,0.39434478736718825,0.05721996069332119,0.6344645833829092,0.276444162360305,0.03409861375101153,0.9515269233656287,0.9543131544790334,0.3309946150978761,0.2823471219744993,0.9737873320232342,0.0542027693692812,0.017568194272237048,0.23055911840113325,0.9893765565369154,0.08416099405577587,0.005402883571136274,0.7857110698909093,0.9980750921196875,0.8397958370391372,0.534079251264712,0.8600776452163991,0.49557716548525355,0.1461157032356299,0.4747508350585872,0.8742178192507802,0.5548322055370025,0.10676711734383726,0.995816537246681,0.9108624923540369,0.6133151782171045,0.7768498519818872,0.9846804286708897,0.941721997389121,0.3677211321741315,0.04515683270724413,0.6606542298830451,0.3012898715942374,0.3115364314221046,0.9626179338694424,0.942187412936702,0.35703699833266156,0.2580054005456213,0.9818309545453029,0.7675276889823028,0.6241108010720962,0.20788178566715848,0.5558213003653479,0.10000063674769882,0.002128840776523977,0.8077686580473135,0.9997286665248941,0.1383525734981037,0.5066905815021068,0.840525237602344,0.5229839174880694,0.12729010585631684,0.44742256137254316,0.7947602492336834,0.003895805605887759,0.09043416379913483,0.991534257545039,0.9258605564201121,0.6398331125798975,0.7536163975935709,0.977221207306557,0.2723962622333102,0.3414950485862175,0.03446076153894101,0.9561886220865619,0.3267328153374067,0.2864395039126311,0.9723185200556062,0.7400075463289792,0.38350906494003023,0.23439100754737063,0.9884264069313964,0.7902746344266991,0.5973806796630878,0.18608243071809055,0.9976569835011464,0.11704250010810846,0.00035117785860755424,0.8632097675257173,0.9998802782103435,0.15781763991651565,0.4792818028190757,0.8711943011840353,0.5503215900293024,0.10958470910543933,0.4202523121465884,0.7721838952076534,0.008055235860854826,0.07533218349744764,0.9857746438824497,0.9395786725416239,0.6659307706284596,0.7296206848042036,0.9683276706618217,0.2971359084655125,0.3157453605782807,0.6753927594417148,0.944286388308152,0.35269652338599444,0.26198444453084907,0.6186952083280476,0.7636848314836634,0.41033125162929546,0.9195781836465613,0.9935538661770178,0.8121491430696772,0.5703578751236607,0.16522657274592595,0.9995586983594751,0.1352353638545653,0.5112256158837925,0.8438324427625593,0.998529471498556,0.17831115473629278,0.0046222581499024695,0.8889944323154804,0.5775080181907633,0.8064689823651845,0.3933217490986863,0.7487894771182527,0.0136932338775132,0.06150656629316481,0.978555007102939,0.9519756101461034,0.03088281592112191,0.03613463183231136,0.9580265487631598,0.32248527417764994,0.290549460291345,0.6494691906302799,0.9310488267071966,0.020031025498996047,0.23824475433835712,0.5918989394194614,0.7865695969908195,0.437422942804098,0.18962570506384152,0.99719792141393,0.11414205593331844,0.0005417029667190709,0.14537689520923147,0.9999589613469636,0.15452454830798906,0.48381447553311124,0.8234217101813877,0.5458068334289836,0.19977152354166916,0.4247332460634545,0.9056254187196602,0.6044614916277846,0.07774384900138659,0.3667118135564601,0.9373991736385161,0.020792854334526822,0.7336403653523742,0.9698970462324369,0.9630141095377032,0.04106861313356458,0.026604224762345363,0.707389076741735,0.34836817041995904,0.26598307542617405,0.6230963837280223,0.9165157235224224,0.013074155626944806,0.21529178431426893,0.9928075840580546,0.8085930613957414,0.003046955506559146,0.16860934022243246,0.9993476202283911,0.132148171627833,1.7125401412798613e-5,0.8471113530698116,0.9988565694506059,0.1748520787355211,0.4564519816899799,0.8020389153912767,0.5730239412008407,0.22213424598264075,0.39775741675776866,0.9210372750280234,0.012659014866109985,0.06370408515085119,0.34050248318346377,0.9500173795777045,0.6873320854938798,0.7090636281410555,0.9598267832611309,0.31825234115965406,0.0526337545385131,0.0184966354207316,0.7320103668031486,0.37470680468654755,0.242120041639392,0.5963536036949815,0.7828409770083211,0.43292546476624316,0.19319452090581712,0.9966979436354342,0.8624894807591457,0.0007733297782130943,0.14858898871786652,0.48197368124492485,0.15125988675984137,0.0009952745925806417,0.8268674429992147,0.9962548359714827,0.1961568595968572,0.4292203738744118,0.9029567035352302,0.6000215713948032,0.2453321096344087,0.3710888833081909,0.9351836800363484,0.019518166963533035,0.050975633303772916,0.971427752770764,0.9612830328765396,0.7124558588009251,0.6838585383925317,0.9483744849329045,0.3440522956258147,0.06554348045055708,0.627487429211082,0.7559343366088348,0.4014220147251618,0.21903208062624852,0.5693212274663281,0.8050115848078543,0.4601797656435473,0.8901489991303259,0.9990954495018025,0.8497941034715901,1.579913945781719e-7,0.129624822846853,0.5093841345877407,0.17141975999054965,0.4609722532106692,0.8056411143751633,0.992161580566448,0.21837485817034286,0.4022014982210754,0.9185735620302653,0.6267185811091538,0.06593750791760394,0.34480779949759377,0.7039794519464944,0.027821434336070816,0.039596749540771525,0.9615891774345637,0.9711622739780217,0.050626500114511586,0.6581008514270124,0.9355745717769304,0.37032095972160395,0.0797589899596407,0.6008003387854977,0.9034268384893832,0.00838785851442364,0.1967885845570148,0.0004940783543200267,0.8262654630696141,0.48755374848328775,0.8724257789954997,0.9999928958179254,0.14802392392943875,0.0007297639575588599,0.11177384048055189,0.9967885275452395,0.19256719968282388,0.43371332632221243,0.07718411637278039,0.5955734201303547,0.24143929700693356,0.3754765614861155,0.9329323740537678,0.6530347309739984,0.05298935211420969,0.3189931546070862,0.9595139960523247,0.03754386104486862,0.029601633739399114,0.26505842287259995,0.979625410265281,0.06331633717864621,0.6318679834268396,0.7520273370407334,0.39697938149406703,0.09523755754938823,0.5738102872509427,0.8866332951359801,0.0041286490301157275,0.17545640751489855,0.5147133019579977,0.846538732062583,0.5149651392346232,0.8535832121563556,0.9993875852582337,0.16801448095568505,0.0029599548047841706,0.8092181613683849,0.9929413139074348,0.21463864601277594,0.40665362777375275,0.06319367816678878,0.622325734067211,0.2652808546335875,0.34912588697566316,0.9459899833855646,0.6788909263152226,0.04138471204932159,0.2937225360092698,0.9696247809216055,0.04865622578756712,0.6623973433589614,0.24122368428549518,0.9866470053044145,0.07731865164465901,0.00740023666060402,0.7753142186696649,0.4239474375515476,0.20040760025272503,0.546598394731046,0.8686777035864044,0.0013598088858969848,0.1550996645623221,0.4873018798813631,0.8657704593322617,0.0005053395498986757,0.11464811378027129,0.9972813371177878,0.18900283920188388,0.6010471011881654,0.7872206730382678,0.9876125373213491,0.0851865286289864,0.37987448701695103,0.05051608602126029,0.648710391104347,0.28982787390286685,0.32322867312960457,0.9577071446436329,0.035838498316729805,0.3450473240134231,0.2690718959750098,0.978324081998845,0.06112512972457612,0.6362376858882612,0.21816671252466058,0.39254522609371256,0.0925913587659124,0.003443628698495016,0.7977736278713361,0.45114407387906547,0.12979412376715338,0.5192464481050414,0.8432548430931301,8.965998713755807e-5,0.13577953903948298,0.4599286227216258,0.883902842836601,0.0024876016512027643,0.09776735702803374,0.5595371327343361,0.21092591697241442,0.6277310338046292,0.7643599267600989,0.9808182137258519,0.26128563289911955,0.35345639027118614,0.7122277595041104,0.6746480906654743,0.04321041518535551,0.29786275548619856,0.9680486412383115,0.046723093696604046,0.3713323301532714,0.9399569416048194,0.9855857530435305,0.07491309686117259,0.6096685583612341,0.19595680662042003,0.4194676271995773,0.10908855555892244,0.5511124523858087,0.8193380616234305,0.0017146129192178727,0.14876826068448945,0.4918366551926861,0.8626629693914236,0.5378103787433013,0.8370421257530417,0.4326758023485552,0.1854640714743967,0.00596516535313979,0.08209553319256174,0.5866538893533595,0.2337178232193553,0.018564590896578137,0.7407046317974358,0.6443738134754646,0.2857209733029372,0.32747873861767884,0.6870984652207798,0.9499075188321008,0.03275388067967694,0.2731043727429723,0.33118308660913076,0.05897003840842441,0.3980040542388636,0.9262765747317279,0.9913879686933749,0.08997868668371861,0.5827698157906405,0.892321448527754,0.9988735354574572,0.12676065876736758,0.5237780104125416,0.8399427068028714,0.0001961220275500941,0.16879804442336133,0.9997542209104298,0.8809810916608303,0.5650762764975849,0.8162956240194181,0.4056253286523587,0.9166550548763421,0.010927578641675317,0.7681989485123107,0.6135102028158279,0.257310055581749,0.026685373756988318,0.7163258854747644,0.6703908827767193,0.3108003414187589,0.9666478833295381,0.6614068359374589,0.9372770524036057,0.02370168076430812,0.24902793761701159,0.9844845406864644,0.07254252356845009,0.009036193035460327,0.9113150095475506,0.9957132900616744,0.10627661871146449,0.5556223038658626,0.8747445711777526,0.9999621258404824,0.16172386900144303,0.4963721022865761,0.8328975247766952,0.00017981990789117663,0.189823274337947,0.9981441514086289,0.8981541537507078,0.005286958530469565,0.7945984779311228,0.3788585033588827,0.9311764447894103,0.017359926703514383,0.744670264119,0.9740407510234257,0.059250544478609835,0.036228730447866064,0.030795701284532906,0.6958958326602571,0.3364483597898399,0.9561066155936346,0.6352300892963969,0.7490079901560415,0.01608102233714276,0.22570581319333882,0.9905295445162476,0.08739975630628882,0.004588141800600243,0.17811831686436147,0.44212446370124414,0.12375790858959024,0.5283076159666215,0.856041377862621,0.9995480518285973,0.1420541433065295,0.46897709801200366,0.8780279885745661,0.0016657555571820692,0.21178075791274464,0.41008339944417077,0.9141305410534282,0.010004614968418035,0.7720158994856513,0.983227517328126,0.944401909555309,0.025242876753414634,0.7204062094338558,0.9646140460157491,0.04697443927930417,0.0471659778719003,0.6656930796946406,0.7208120065593042,0.3625879418489899,0.25296120497368446,0.6086469009874494,0.7723952066007442,0.009914809717313067,0.9138769893133238,0.9951002341068134,0.10349708237017213,0.0016290788743666962,0.1576339778461081,0.4694284315312659,0.14237001531444915,0.5009078479294673,0.8362680820857687,0.9976325579446217,0.12346024409198114,0.4416753348207749,0.895394157702325,0.0046494629119393505,0.08714450890094438,0.3832640648210567,0.9288622356349954,0.016194980199096543,0.05664200428783511,0.9754637281743883,0.9562916992930319,0.3360211103270418,0.6954797114430782,0.9537909172626751,0.03605992797860602,0.05946424351448848,0.6395911999934695,0.7450645175065476,0.017242003897406766,0.22950937765892215,0.5817371682838506,0.7949637238737547,0.4476731194627886,0.8978804640262521,0.9981828719925557,0.18946873682643112,0.00016789788744037137,0.13817863923594137,0.49682428393625877,0.16205699914852084,0.4735053513041079,0.815484113603968,0.5560716664571337,0.20808629980051202,0.4145488697035003,0.9115719473668675,0.009121974271261046,0.07230811552319044,0.35679558664152833,0.24941914119657582,0.02383944873032301,0.044640309766519004,0.9662709059429994,0.966810078568276,0.04526152355518115,0.6699656881436202,0.7167334757936319,0.3582325300082475,0.07308656424393506,0.6130697710600033,0.7685804732111435,0.010833756765570468,0.20687052518033516,0.9944464350847377,0.816645711022288,0.4750024650671266,0.8806880865419415,0.999768193131277,0.13921490702958522,0.00020899050176931278,0.8396109670325069,0.5242296811351684,0.18275968975044998,0.44618248584117715,0.7937519398078636,0.5832157351794917,0.23077138913308543,0.99130420213313,0.926512734308029,0.6410300662681088,0.05875717424986332,0.33075751741104986,0.27350741751124774,0.032915044680353334,0.6996463768692082,0.9556766801801625,0.9759254337983077,0.057337053133918736,0.64394082337292,0.7411008778698036,0.38472226048567054,0.23333520149108972,0.5862085045461866,0.7912891951406129,0.005895726393983058,0.18511268988713953,0.9977760300888566,0.8373760016098981,0.00030599770427031103,0.8623515295215282,0.49228879032814593,0.15872805368662746,0.0017522332111813421,0.8189899802320078,0.9948886545094027,0.10880677340778167,0.41902137195535455,0.9089794843698926,0.6101096943117676,0.25426566025510083,0.9854777600791651,0.9401716131471658,0.022475205179402602,0.04653241319998741,0.9678893952423397,0.9651658854437828,0.043394490833190746,0.6742243096804977,0.25205154416321013,0.35388878457596307,0.07074303119029535,0.9809420656511252,0.7647436376460262,0.41155846471728585,0.21055707730287337,0.5590881335049974,0.8131224309491607,0.0024427543117061523,0.8836129741637808,0.4998609375191314,0.8570922895778816,9.842756341632564e-5,0.8429259045223396,0.5196982971720998,0.17926691244505083,0.4506940656427547,0.7974102510371281,0.9902369508946594,0.09232938155951376,0.3921036439078228,0.7477068989435839,0.6366727125414731,0.06090865521493494,0.9781921872093102,0.9525075313528055,0.031315790838862434,0.035670574583055226,0.9575249442957312,0.9745153756108671,0.2894176567298281,0.6482786014930925,0.22862948287160473,0.3803134838653819,0.08543916530041923,0.5906727464897294,0.7875906954730241,0.006610538090072726,0.18864889015951725,0.5317901697426989,0.8340145596139541,0.00048521862127293147,0.8654620063083538,0.4724599700602585,0.15542719236788177,0.0013933398207985892,0.10535436859554864,0.5470485996718223,0.20076975260532182,0.42350053814606015,0.7749366385422618,0.605680798094249,0.07707726677028648,0.36551020444988713,0.7235324228452298,0.6628249532176855,0.04846183364341833,0.30941356045572066,0.2941345369220091,0.04156503334883699,0.35923678771816453,0.9457853762991649,0.9824386830274696,0.26488168072469753,0.621887233597732,0.9158244705453604,0.4070979077360257,0.10138128540354219,0.5635896345895967,0.8095733832286527,0.0029110275048236933,0.13994051701113785,0.9994097549844277,0.8539027886628123,2.9002806714972795e-5,0.8462126217605646,0.44514177571616037,0.17580052908747063,0.00418684254452234,0.8010440876145677,0.574257494949071,0.2231719461673815,0.015326002066126387,0.7516366884585245,0.6323041116670278,0.06309627013216718,0.9794974445613824,0.9505595117543263,0.6884878143046105,0.03737213552277591,0.2843674774778264,0.31941474976822415,0.053192128032334585,0.018162053665404465,0.9327059751870195,0.9889119937458342,0.241052366101911,0.5951295267405682,0.7838685292300052,0.43416155408981877,0.1922107123127217,0.5363154004527094,0.8306256307038148,0.0007055458898996836,0.15949393040046161,0.999990280835904,0.8727273429005253,0.0010754780504189099,0.8259226756324085,0.9961009323751611,0.19714826561978532,0.008470539704442337,0.7787137738711666,0.6012432051329937,0.07951414632384918,0.02278660434896912,0.7275804301013074,0.6585297777628742,0.29923479813222137,0.9710107323673378,0.961762798570974,0.039773301652865134,0.027672891566785762,0.2599694902200511,0.3452377217790721,0.06616212899986867,0.01156799421275917,0.9183260518377439,0.4026449959060476,0.09865963028226576,0.5680859027201843,0.8059988599209972,0.9996498023735658,0.17107905428067066,0.5089320183295514,0.1299287480853064,7.219448063811029e-7,0.18007075400546496,0.999068057671042,0.8904316440665793,0.003621499111960247,0.8046531505024566,0.5697690241420418,0.9246816333761989,0.014231556406905432,0.7555457701454229,0.6279246231481361,0.06531983897712157,0.031681498433842936,0.9485744144588335,0.6842789736617496,0.3246317541241147,0.961108370825937,0.9715782312273888,0.738038575679448,0.019393253400734778,0.9349608413597523,0.3715258405543211,0.08043605418130118,0.006441944728263427,0.9026888259227925,0.429668041217877,0.1156050632354359,0.9963098755578951,0.827209493763126,0.9999243075366768,0.15093598672043135,0.48152179052104066,0.8696886966030428,0.0007986740577020091,0.11098912196974609,0.9966458572836283,0.9069624808843111,0.007659413781301305,0.7824679731292716,0.5967972806088999,0.9385060113868346,0.3742690913873736,0.7316097091804996,0.9691081262867529,0.05243198739450777,0.04198395021440837,0.9600041848713996,0.7094743087016917,0.029180347873664192,0.9498201220438369,0.9799763088865847,0.7617775483566271,0.012558105944563636,0.9207932080071451,0.9931901045867644,0.22175842439142446,0.0027993118430373887,0.1668950080552018,0.45690247320246397,0.13370581687232552,0.9988869293846826,0.8474366809989187,0.5162116874283396,0.13184205075874633,0.9993243240215879,0.8875821087772169,0.003097003938462406,0.0943592763634048,0.39551290947798,0.2156636248872384,0.013177085877940142,0.9167657174328288,0.6235346073841326,0.9510124348240966,0.3479373355841656,0.7069775321589532,0.6800549682298361,0.04088932674153167,0.2925871047702381,0.6516068854175777,0.7340400568808184,0.020664003497045613,0.9371799134900378,0.36714769702123984,0.7847297338333936,0.6040192357688772,0.9053608569117102,0.9969559292742554,0.19941004773134535,0.000651043695864939,0.8678340982940541,0.48426643723694063,0.15419779918223653,0.9999645503802088,0.8666196276751985,0.5435740954790859,0.11385463429810955,0.9971499119315883,0.9043106210422536,0.43697433177070366,0.07894860685267202,0.3688737391670802,0.23863013772259373,0.020157931726886458,0.7356199285031041,0.6499006439226434,0.29096015075980136,0.322062612703659,0.6817232724794478,0.7053472146011972,0.03072654913643441,0.26796644555479704,0.6252678536269712,0.06172403039281554,0.013588330519151315,0.21713743745525588,0.3937635728067521,0.8068261480205159,0.5770612605426931,0.8887101708759085,0.4523854114011193,0.17796511114281677,3.5970279442798514e-6,0.8487213544319022,0.5116776893825504,0.1349262364468536,0.4586856054881199,0.16556258427655796,0.5708055391258651,0.22027337089875837,0.9934812877143471,0.919823954910121,0.40988642734447384,0.06480343107478181,0.9804745899494394,0.2623822124348345,0.028580970001832906,0.7110978656930831,0.6758161456131033,0.31616580456213583,0.05163709990856541,0.9684858605122281,0.7300222783260597,0.02197419938105455,0.24404317628685074,0.5985523222302083,0.07557104819067073,0.007974595274578278,0.9079995297167662,0.4206987481718424,0.8280003788976871,0.0009029773267763552,0.8708911944766463,0.4797336149933007,0.15748806859344372,0.49058969333355906,0.8285605088517076,0.5390538435734493,0.11675192351831337,0.431440215572054,0.1864345211425602,0.5978241727274273,0.08141212046882579,0.9883294776270638,0.9340754841800635,0.01890277329644363,0.051966263154110126,0.9721699549264871,0.2868484608224736,0.3263087131790489,0.68594133633005,0.7012032219521048,0.34192398241734145,0.06443828206516444,0.9773559440735498,0.7540059971073516,0.014658583156701543,0.22088919970278825,0.5715405862651451,0.0906937111646095,0.0038396701615311946,0.8915470577881224,0.44787226792630747,0.12759168740153476,6.965326735108857e-6,0.8519574836534738,0.507142730349772,0.16973337587420778,0.4632075108293348,0.8074121561130556,0.0021707276518078134,0.09972948432016565,0.40440088595867485,0.20824889675781755,0.6245487902551281,0.06705453090705665,0.9817099657258048,0.25840120102058295,0.027088834214098023,0.04047568592357342,0.9624461864473322,0.9704072387654421,0.3008750048130401,0.6602259497832343,0.04534481227821424,0.36815726666767923,0.07854856955494505,0.984791307395509,0.7772262865242585,0.008801687960945825,0.1985741063864061,0.9958747072840679,0.8245635050248843,0.001195982930877304,0.8739177690722448,0.47520246052242604,0.1464352964905301,0.0006137106198459974,0.8603912346573903,0.5345303778269295,0.19080240962203382,0.43593591022845757,0.7853398587840468,0.593372088571078,0.08391008075443368,0.9892836379030333,0.9318065469119368,0.6508990693622317,0.05399818339487272,0.9736426473272981,0.28275431167161563,0.0366962563390385,0.690144098591515,0.9513325098471006,0.9789871827590421,0.2760397778618006,0.6340289950986819,0.7500887069540779,0.394786811696317,0.22466393069344254,0.9907696030738732,0.7996133566860213,0.004421117022953114,0.17716496561048034,0.9986421196802073,0.8449192868800313,0.5270623747669256,0.8551646493916427,0.9994934831710751,0.1663415642566553,0.0027213895988763004,0.8788430832448613,0.5618142423040925,0.10246410839278147,0.4088568578661698,0.7624099564004096,0.6201509228258947,0.06934125893162929,0.9829057003544601,0.9449720824286308,0.025635615498274644,0.042282319521826706,0.2957666514491646,0.3077603665036701,0.047696164021675036,0.6645158809172031,0.9388623279082444,0.3637875005465203,0.2518776760020218,0.6074292087026638,0.7734401875320132,0.42173258090228255,0.2022053442610136,0.5488298746137955,0.10425809921911572,0.00153003639598559,0.1567261237562803,0.9999108350344732,0.8642383943458112,0.49966069367536764,0.8353440623062358,0.5300040704871164,0.18725066128831752,0.0063236675156641,0.789052724227659,0.5889123205862461,0.08644228214594152,0.01918896791303909,0.9295020751763376,0.6465686366989574,0.7475329358243215,0.9750763624607068,0.9568002292303888,0.03500975434488196,0.03194215197821604,0.9532658567512078,0.333344208407215,0.28010425588616283,0.014408007571246939,0.9250731204665935,0.3903569810659547,0.2284613197949309,0.9898819039990114,0.7959698281890721,0.005043346340831867,0.1806417964786049,0.5214862980570945,0.12160014114689932,0.00013713538608556286,0.13731901091688736,0.999677040151242,0.1629772102469521,0.47226003238812414,0.8145155797094941,0.5573107785230776,0.2090997441139511,0.4133203301764323,0.7662600207293753,0.009360641073385356,0.07166342696778982,0.027429786502755737,0.9428851718878474,0.6725458302597906,0.04412661988114436,0.9658191557388238,0.3035812047047701,0.04578144762614139,0.02300875872135405,0.941017628168086,0.3594289437010563,0.2558257153995724,0.008607194495929393,0.7696315864459042,0.4172559998687654,0.10769478020417284,0.9946302614495875,0.817609914818334,0.001905110231985474,0.16003809780646094,0.9998046103913913,0.14007948521328334,0.00024660043587543257,0.1190019562655818,0.9979414377142343,0.18372464989926546,0.0056248911823366665,0.893372687345799,0.5844452357786695,0.9323334055238753,0.3864643041110724,0.7426670577069016,0.015375239210661973,0.05817196154191451,0.3295845076282767,0.9549371522118693,0.6980044275865878,0.03355658667463929,0.9551619032462353,0.32907471696250035,0.750994702270171,0.6427460191199453,0.9274438962055593,0.3859361732406372,0.23228105451037134,0.004283290239464166,0.7923019435763858,0.4444037104353384,0.18414490815181744,0.9978919797246942,0.8382954069177289,0.5036540737216976,0.14045617382413655,0.9998194774270944,0.15964059070641257,0.4767899036504976,0.10183001274421977,0.9947092441745591,0.20542267297184325,0.010466388362964485,0.9096956702936951,0.6113258881107162,0.2553525647298534,0.35994951598944036,0.7183447451425585,0.022846404426306366,0.0460084352293228,0.30408008362956124,0.9656217932411368,0.043904110039452104,0.02438847548025891,0.9431366359569702,0.355081954808101,0.7743160725772351,0.6162707334029293,0.9125854574813557,0.41278622805109316,0.2095410380260917,0.0014492905402030964,0.8140937707133467,0.4717185187889238,0.16337804819290092,0.9996572555459132,0.13694587759212173,0.5310490282132194,0.12195487910967118,0.998332108805747,0.8967941651255721,0.44945314419884236,0.08585479159850817,0.5799712017562061,0.22800606483136437,0.016779206450315276,0.9247872897748801,0.6378719442010685,0.2796172870565271,0.333855657504146,0.953036637249083,0.6938313744455425,0.035209406195047144,0.27916450800028725,0.6373868892069651,0.055817524435561594,0.01664984157378968,0.7382146517470028,0.38152475201997127,0.7968129704414707,0.5894459894325286,0.8964869698719033,0.43989840877685343,0.18767401235007986,0.5305454407009245,0.8576116903850304,0.49911832873093903,0.14362292451435837,0.999920783277104,0.1563319802140104,0.5583506630975528,0.8215154762632014,0.995346974897711,0.9128702566385006,0.422268306175954,0.07112430725749241,0.9837984108392943,0.25140694981863465,0.36430943208192557,0.9386021870749957,0.6640036183794716,0.3045443820688061,0.30826115522001296,0.9639498321172797,0.7187985292685966,0.6773030371999335,0.2549126659096339,0.6108339510612558,0.06906595433859919,0.010363943856327329,0.9151306304843594,0.40832363327824495,0.10213538941490136,0.5623524104911551,0.8791968182905637,0.46719122822811043,0.1667457000625226,0.5031495398850763,0.837923707996914,4.399082004652444e-5,0.12493891225569437,0.4439023220389557,0.176750996471374,0.5854769217697207,0.8000473868689038,0.9908730476914747,0.22421136865915975,0.3953170951472487,0.7505582063552305,0.9761525641692721,0.2755549952527121,0.33814047982378986,0.6975410295858762,0.030180379187368656,0.330058929975355,0.05840838271551185,0.9734685995724496,0.7431080727595164,0.6514160563647993,0.9320797291196645,0.9891716621875121,0.08360958084454218,0.005549674948336192,0.8992340659315594,0.4353980530323516,0.11932888460707114,0.00023101055469587628,0.8315601724620177,0.494582656295169,0.1468190023875221,0.9999809493645526,0.8172200768267035,0.0011587856055602641,0.10738216727057076,0.9959439422487162,0.1981415558580819,0.6123462747278527,0.07347360545958043,0.9849237738278351,0.24748179226666334,0.36868051449902184,0.9364064652607251,0.9670756140861274,0.3003776228197506,0.3124580054914314,0.6720721916985266,0.04026218616758159,0.35608424536199995,0.2588761900936569,0.9815643304216175,0.06678347670487633,0.6250739860239658,0.9176416413237941,0.9941082809459292,0.09940469226285692,0.566850154372358,0.8821375808545755,0.003276128444621773,0.13766650832759708,0.00014920601286344537,0.8515720430803094,0.5219903664945723,0.1279538101399157,0.9989903951347843,0.8912095287297366,0.0037728758233513404,0.0910054573472181,0.9917155261093636,0.2204393678402789,0.014528503625603928,0.059815970871704094,0.6291298692942323,0.271511173603594,0.032119834980988415,0.9491239221516935,0.9565948418757801,0.0386296525012057,0.2873391992113773,0.9719912545165046,0.051725761102074,0.3825421076740697,0.23523415655218244,0.9882126924886665,0.08111572875233392,0.006243928571301127,0.7811551813125985,0.9975598293707493,0.835718132845793,0.5395945289011952,0.8638925597045002,0.0008909882982320871,0.15709314581312434,0.48027554647479337,0.8705272440748881,0.5493319834059952,0.11020682372005053,0.9965000971016014,0.9076857736875985,0.6079219159024958,0.7814380247356305,0.9860092311961601,0.24357741508521463,0.021815459952836402,0.04748133423425693,0.6554074224973945,0.2962272910077487,0.3166702890742511,0.9604915117390431,0.9447417480908078,0.3517463978558723,0.2628595569740013,0.9803242212983507,0.06453664956919647,0.012281863524898295,0.2123878917007233,0.9933937037460664,0.09670696112541838,0.00266907327274174,0.8033914209312416,0.9995159336383223,0.1345558587147579,0.5122198998380842,0.8445538389224349,0.5174581347597952,0.1775504092079463,0.45292533983597605,0.8883688045190359,0.003237144592364849,0.09363138269752952,0.9925175399963342,0.9229366960364689,0.6345150073486963,0.7583668803924135,0.97884220810062,0.26748615488562055,0.0305396269114091,0.03650676799401309,0.6812178899186105,0.3215558587929044,0.29145296396649345,0.9704750680905044,0.7351414209496167,0.37813815357152586,0.23909265372606248,0.9872135465160592,0.7857540324751979,0.006978814646888654,0.1904060612780919,0.4264136602310432,0.11351031349501894,0.000588974151611632,0.8247158005061102,0.9999707145668387,0.15380626493309035,0.4848085431761272,0.8674665150659122,0.544816368443462],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],71:[function(require,module,exports){
module.exports={"expected":[1.0,0.25533716211906216,0.20650784061285715,0.9834921826359568,0.26602341671878615,0.2221636099042119,0.9706186909481165,0.3052308679808914,0.10038438044865944,0.9917992942199745,0.468377558643437,0.37007921973055335,0.7624464513582909,0.8493418471088078,0.05446410575060179,0.9947565736155157,0.31009034673533975,0.0972424274895875,0.8850197686353427,0.23748180279066128,0.150718465381942,0.9317226148728116,0.005255609283634555,0.6899876289383577,0.6018897843221664,0.9502522467199783,0.17999198823923518,0.989791217832827,0.47889196021538605,0.02043426856077396,0.7534267634419178,0.8567967795236344,0.07372816655025621,0.3497044814836968,0.9990803365267513,0.09109281889301168,0.8782172792412655,0.7256852579833923,0.6020548317761107,0.9501789099617528,0.17986246772341674,0.2049071147842001,0.9630910378324192,0.5707550900120202,0.0026326760899270107,0.6701873591760533,0.9149225046196472,0.12880939899380345,0.26489544525877406,0.09118986314078947,0.5001127681685636,0.7255348053890167,0.7349054825979697,0.5106685543582025,0.0852033855027079,0.32960058860856356,0.9973441594346875,0.920720107825422,0.036823964806198484,0.001661724589639313,0.07355203347786277,0.959007476794945,0.9991006643470444,0.18804221988263192,0.9546719410006252,0.5916984953285,0.000906041329181595,0.6500803972447897,0.9263896680008975,0.1433612584937345,0.3396703403005783,0.9795018647016736,0.864112237144001,0.7442708314950122,0.01755427053301556,0.8852173661724672,0.9875598844583555,0.2743655580484408,0.12174547689429821,0.908874407329809,0.6801811950513273,0.8711157918823393,0.5601766725011325,0.05956763463920839,0.21358759341606665,0.42913438995146813,0.9454334864655005,0.795183005484982,0.5815215951241004,0.0497725187694249,0.9370884407523494,0.44675210180639363,0.9548121204509418,0.06824866218398962,0.5425155330775973,0.7625666606822272,0.9262134707320459,0.46823660173918985,0.24666948472679245,0.2935059691158899,0.5209964934803448,0.8962918802013424,0.022521050924035058,0.4897801746586732,0.8517163752196135,0.9741686791332407,0.35658624925556404,0.9090683877584387,0.029362078998769692,0.0037978108723106807,0.83606701266706,0.9668883164806297,0.3773713871779519,0.17436567610395887,0.03707839086440845,0.9657576553653466,0.8337399712603186,0.0034220287726170473,0.3983845875498675,0.15830957028853498,0.359591297269408,0.27127344038690704,0.8494820022904335,0.006401628260751635,0.7190862880693258,0.14288893407997422,0.5178649346194754,0.29065585848449477,0.2493763475384846,0.010299212965803939,0.6995046500447137,0.7598944823759073,0.0011269363243250896,0.31042761098463006,0.23095553850889156,0.9994805213330565,0.19370061446488862,0.048418270378002226,0.000144279192311636,0.7977066983961796,0.21303509344417987,0.9999984876320096,0.2110244222027347,0.3328679876867344,0.5632866212556134,0.780110083704908,0.6772543049126195,0.015713438265065383,0.12380243206678204,0.3127058256476599,0.9868555861155615,0.8832118720266164,0.6972469520983574,0.01080177709824881,0.8662528752252519,0.5673172301172492,0.991313382768616,0.14117176302464518,0.4220152846477753,0.6530668510936418,0.8512367437818118,0.588615937735104,0.04668793526617476,0.15651807431498865,0.4007940462469937,0.0037153030511794527,0.07192425501794292,0.5353380738445866,0.8873703671267233,0.9224052530429807,0.3797573092631325,0.9660024990253363,0.08346165711916048,0.5138015421560553,0.030198214849801286,0.9104777426058087,0.35894419743457706,0.09300226711847237,0.9718355056518861,0.49223934261204605,0.9131656509829646,0.03184156756798601,0.6260987688072797,0.08085855272850878,0.10883757471181449,0.4706915761965955,0.9249223430049398,0.9969836707497551,0.6051207629498152,0.8390660442597646,0.00431433217715721,0.40544400657042345,0.9358887722311888,0.04870818304264768,0.583947255421551,0.8545942785776282,0.9465453866051556,0.42670051801660314,0.7475170695680358,0.9904116474242786,0.2972153007405186,0.8694630449467,0.011803638298116537,0.6928827540368654,0.7660177161034414,0.9857540649251005,0.541171538115341,0.8836446907074453,0.9997568258394971,0.19942251114484238,0.784023627759636,2.3160384962916947e-5,0.7918919205792637,0.6637510743865204,0.022923010481494865,0.6524247259453916,0.8015013174717023,0.0002805939444023853,0.3578788255814363,0.68396749245397,0.013973008459571779,0.23496269299384365,0.3060502749392028,0.0014673965083415452,0.7558336746499059,0.7038417711463018,0.009364158324747573,0.25348892023205394,0.28636096908580355,0.003581360883095186,0.14622241045586343,0.4149123471630435,0.005667783747654309,0.8460766458014246,0.5956919084583361,0.0436973325816315,0.16178522340166684,0.7424167681721441,0.002890759178071911,0.8301956376999547,0.6167620193556265,0.03530800752063401,0.9185094621464158,0.4826174496612389,0.9685634830669425,0.8137005377954039,0.6376149783865355,0.027782908121510186,0.9063245481195275,0.3520521111612593,0.97565111998781,0.9694045110654567,0.4850418891775075,0.9171772565575806,0.8933839591354258,0.5257311040439487,0.07697678216161896,0.9615427637797276,0.4635078676845983,0.01537973317858432,0.8797117618646387,0.5472361917642996,0.8443218219661568,0.9528226477100168,0.41252302897321314,0.1479407151983695,0.9930085876721629,0.5686534304798201,0.055585797185909835,0.9432603803685775,0.43382946210203094,0.9492512999467368,0.9889577081621701,0.3038167843926144,0.8742754195937181,0.013409276674007431,0.45525895798604343,0.11866276521511487,0.9839974740564373,0.32382806919938356,0.8882217283601268,0.0188208337869335,0.4767716624410518,0.7899190365680233,5.696954068878934e-6,0.3441669953383981,0.2013645050034315,0.9998265884180659,0.22289301867548234,0.09222031230419331,0.9713875159127763,0.3647957368471093,0.18435217277241944,0.9987940879130195,0.24109467218581987,0.2994349339568201,0.9899331091746582,0.7496217843641613,0.1679268765928557,0.9968339392932177,0.2597778330858135,0.279874240005777,0.0044929310850778115,0.7307108462814834,0.15211916392992586,0.004638134794354987,0.8408447990875751,0.2607229319139811,0.9967117798776207,0.16712249129628387,0.3867246471024696,0.002169276169816048,0.2984488597745729,0.2420166269336752,0.9987181767549784,0.9145269057191074,0.3658329115520602,0.9710273243603613,0.09159803664851796,0.22379011470846089,0.9997970666957633,0.20050141458339488,0.345190697496947,0.9778210141268149,0.10441470508415024,0.47784753686383197,0.9999464432002114,0.03709118685454266,0.32483639494899363,0.8337651815609776,0.11796707581045907,0.1889111025071527,0.9323337315507901,0.23610730991690387,0.5910021951786611,0.9887314832333567,0.006407029875721948,0.43489712606413955,0.9427610439463046,0.055093311085360475,0.28514233675805034,0.9928279714827064,0.1471767849601745,0.6994736042666825,0.9523649174566021,0.0011246655806271266,0.5483082487102205,0.8790101993274484,0.01511579521195655,0.39243079862061275,0.9611274909735181,0.07640361374410043,0.5268066006391638,0.8927182797458202,0.020827318570638687,0.659233282224315,0.7957543392584951,9.189252015440186e-5,0.5052550981429076,0.9056959898958508,0.02742999851144856,0.3507643200451266,0.8128611671518546,0.0009700379531802916,0.7619636876374606,0.6972780630453147,0.03491155549108799,0.6178089543614309,0.9822124488783149,0.00277627017535792,0.46216287241051807,0.7169032691176529,0.043258075446828914,0.8512126464198819,0.5886492588144391,0.005507229989061779,0.7243000041460982,0.9400126000174599,0.003711184439372295,0.5755086382269716,0.6097828703834073,0.009157838405217944,0.9223871362121672,0.7549077546966131,0.062482333692992664,0.8192478947912756,0.8751683669769508,0.030186627777268715,0.6849685002924276,0.4970127118622637,0.0003178290895473057,0.802359769882756,0.6513986528144401,0.019189145987084155,0.6647682827047805,0.7910168308420702,0.0808400935011791,0.784909321808613,0.3843962882574465,0.017192981215551073,0.8843344712598056,0.5400981166449849,0.0006399444660804554,0.766929004592761,0.691888685128119,0.012037402329846014,0.8701878447016612,0.5615489747233269,0.05891484822552567,0.9465301539897846,0.42673400966379926,0.007789327351602371,0.8553527495658728,0.5828853651450733,0.0046751354259754185,0.9364153772964092,0.44812702495198614,0.12333629618460473,0.9857460394268145,0.6040676068818596,0.04026936569638612,0.7101477850903908,0.46961651264968246,0.0020455886335031814,0.9801836497131158,0.6250563055882243,0.20714200181127973,0.9999639590553886,0.4911625070010124,0.09640853812486211,0.8069986449283229,0.35791128665101235,0.02504228753147042,0.9992402137822414,0.5127249371600601,0.30601906907806836,0.9663917656824069,0.6662973688622282,0.17331775239751757,0.888050422516987,0.2535183771917766,0.07248175218160086,0.9926043608651962,0.3997387048354917,0.15730150586398484,0.9950103625757551,0.5557387432624469,0.06170023014178888,0.9491319473260645,0.16181016030696393,0.1419226037170802,0.9915121232422665,0.2919122231316208,0.24818095176106403,0.9981542234669285,0.4423116327236527,0.12720964735752066,0.987099778658628,0.31170769061770154,0.22979120511053852,0.9995416192394849,0.194794570134725,0.35201977034849585,0.9756615557303883,0.331853340694262,0.21190398783083664,0.9999999766522081,0.48531351215810586,0.3315655713842651,0.9755672825065215,0.11338371509614115,0.4634741007896545,0.9995284432603715,0.23004838620950857,0.08733358636732325,0.9871686579558536,0.3730447409901195,0.4420080846849265,0.9981278960131466,0.051869307761841676,0.29163438502359806,0.9604986259319865,0.14213596128492445,0.16158513307958322,0.949266161182778,0.2673094728593943,0.5554350379985703,0.9950533357827537,0.0134170662776395,0.3994393309054195,0.9925519017198375,0.0726403061901707,0.2532525361976561,0.8882430638806776,0.17354916565326312,0.6660091359680635,0.9665018280184967,0.08422803525847339,0.5124194340992143,0.9992569613645129,0.1901813603304623,0.3576183128747449,0.8072397998895979,0.0965890094164969,0.49085695672294094,0.9139427199861052,0.032328859753579964,0.624760395511557,0.9802687421415919,0.1097002399507579,0.46931148341119966,0.925649385188988,0.040389607423371,0.6037686803894747,0.8400808629429708,0.004497460873848169,0.7306808082253915,0.9365644354563984,0.049305130088550364,0.58258397817499,0.9904645373493162,0.007843151509638824,0.4264317223438258,0.7487174122811004,0.0021661268957157143,0.5612456877895154,0.8703931976077423,0.15328492758443085,0.6916064507148612,0.9559400027258226,0.0006245811005975432,0.5397934937949335,0.6445542085311614,0.01727252115593042,0.3840989905641331,0.7851604013768319,0.08100677824388902,0.7907682736253465,0.8979514114271647,0.01910538574350945,0.6511073712509432,0.5329518063750049,0.00032881700577847006,0.4967071182066211,0.685252385205981,0.030291292067401887,0.8749662784656995,0.8194830324023491,0.062334487127738425,0.7546448046531959,0.7051034597575889,0.009099708825774655,0.6094847075426709,0.8357687913615999,0.003748441934820379,0.9398673802999671,0.7245730866489611,0.005462089882438903,0.8450774433616349,0.5970485680791974,0.04313381989633808,0.7166278814567647,0.7436250566243777,0.0027442034922994796,0.5670479518984836,0.6181059281014668,0.0347994531665633,0.91775134925446,0.48399926246906055,0.10067965154160297,0.812622726955861,0.6389436368804684,0.027330257898741273,0.6770001852551669,0.5055606799499063,8.612717068978704e-5,0.9689265025122208,0.37177340338703235,0.020740125165514656,0.8925290578710597,0.7979249775712136,0.07624133215646511,0.7778434517444721,0.3927292623271062,0.015041311175114647,0.9959692743916144,0.5486124096628769,0.001145244433980841,0.9522346518351865,0.6997537939264744,0.14696031390076247,0.8643880507345889,0.28541832251563126,0.05495394153579447,0.9426189804721105,0.4352001363209479,0.006358356253314323,0.8492876122368189,0.591302673637114,0.2358477896435917,0.9321801344308667,0.18915040725090315,0.11776999312828534,0.98364863750859,0.3251226606822652,0.03697576564874522,0.9209375276862495,0.4781528405872863,0.10422787558024599,0.9777309164042419,0.34548130916672026,0.20025676124173836,0.9997882674065826,0.22404490381452086,0.09142180778497488,0.9709247200859696,0.3661273286840713,0.022440484242385372,0.998696215132077,0.24227845442828017,0.29816922637710963,0.9902072758151239,0.13716863393626144,0.16689452404730565,0.9966766967648227,0.26099131085514904,0.06811167422933823,0.9939970926957405,0.4081274294235061,0.4064685158375393,0.9553987296473216,0.28014867126726556,0.25950985933809156,0.9453099778142224,0.16815540574812787,0.13600914857967167,0.9638753802013225,0.2997149071563923,0.5195812194142555,0.9988152066035396,0.45081066409567716,0.3645015473432116,0.9850994830563913,0.09239723086947443,0.22263869714132145,0.9098812324167671,0.20160966378908363,0.10783028823674234,0.9782264002124401,0.3399277569125476,0.4764663970659444,0.9999242962437312,0.037615531883820885,0.8612672167737314,0.9728584592436811,0.11886049297148837,0.18782990150751733,0.9330266114748491,0.23728265330328724,0.5896423574385746,0.9890214874847063,0.006629541326317712,0.4335265627757981,0.9973161147939731,0.05572591824240314,0.28389473572738266,0.8655419587359519,0.14815778190788542,0.6982050499626741,0.952952148416617,0.0010338923377961606,0.06040854479167823,0.9961803733331775,0.015455036480253148,0.39108100289539693,0.779245407094451,0.07713977917211595,0.7965675089081801,0.9379455202176252,0.02111655400238155,0.6579220767447856,0.9695096835647317,0.31420929130460906,0.5038725723088501,0.6785780390754197,0.46646977075501445,0.8796677035306795,0.8139384485250754,0.06584401158421205,0.2097035238225201,0.9186766001505452,0.010510908946747444,0.09827788613805571,0.9825761005850012,0.002923666106898093,0.9432290455407433,0.9994040497605046,0.13291445433327292,0.8502272405528588,0.846297147881321,0.1292176397176068,0.7230634878722049,0.45532640130033414,0.25077985975432115,0.574141624106794,0.6111312946098456,0.2188762336543899,0.4179878206424751,0.7560961930991417,0.10503277537450212,0.2698336684244701,0.8760808966179959,0.029715302813815292,0.9998248005797907,0.9593818290565856,0.00027045055708679877,0.9713649335620582,0.9978736313131064,0.019570335293549013,0.8969270775702716,0.24115260403222993,0.08573240313675184,0.7837720674233875,0.3857418505463611,0.19230305813757081,0.6429372956774801,0.5414760922897219,0.27981344286146487,0.4881601006906743,0.6931646633049426,0.15207052960961814,0.8692570670100227,0.8260115213982957,0.11139190484392336,0.996719528454914,0.927058487159836,0.007548115885540052,0.9901336168410997,0.5842485014122969,0.004865654610719694,0.9357389769440083,0.1835700851018759,0.05047970385684314,0.8388413834943493,0.8574589441427153,0.03972751883287967,0.7088924442932666,0.47099665587680883,0.34512631180764397,0.9797964363154918,0.6263944666492183,0.012701181955347307,0.9211388777605263,0.7694634786922371,0.09559394094843698,0.8059061879477424,0.35923741047775826,0.024612036609275523,0.9991621145163321,0.04569804886421547,5.365638801047012e-7,0.9658916487838285,0.667600604595618,0.1722723265518129,0.887177070505633,0.25472223526019366,0.07176642401590372,0.9928393949563176,0.4010935887337935,0.013031381450689383,0.9948136341058678,0.5571124945874479,0.2658165731409208,0.9485226456297486,0.1628297984261995,0.14095901126686866,0.9611536639784112,0.8377626286302297,0.051123109779082965,0.9982710076700176,0.44368520222666963,0.3714126098062549,0.9867858837923502,0.08828916374074736,0.0072966327255598595,0.9057355654897383,0.19589085945037604,0.11231540557106179,0.8271208901540816,0.33315604031881074,0.4836261439343678,0.6945151006746908,0.03493641855393975,0.33026444295632523,0.8294370830758453,0.6415328128071768,0.19345912751864142,0.9293998546534089,0.7825646449121635,0.08655449380655161,0.9874780048326017,0.00551725710044465,0.019978258691028095,0.7361847682673845,0.05248423245063988,0.00022441692247271439,0.9599582541824023,0.14310289582652264,0.7047629428485526,0.8770446913295364,0.2685341002978062,0.5540607677024375,0.6307776682781878,0.41654300588052784,0.39808538446558034,0.7732730627868721,0.5726924931701567,0.2520509805755027,0.8891127920707977,0.023226072948488108,0.13020207812923612,0.847352412057234,1.446481349753892e-5,0.04442409136588954,0.9993303995385432,0.02557256309317607,0.8842911543414329,0.9829574059877955,0.09740737376690234,0.7668717444763173,0.9194756677970071,0.20851196887304196,0.6234210682794152,0.5616161737031595,0.34804895792063634,0.4679316252747362,0.7116784206009144,0.04093574586936882,0.31557020320362933,0.9700114322348594,0.04914360741267709,0.18119847565542696,0.9372367606454266,0.004447640484274096,0.581220069479129,0.9907313892513194,0.00808895810884025,0.9254533955927137,0.9963589815172066,0.059712378028060065,0.27621824815845564,0.8713205181876653,0.15428243650068257,0.6903286823416225,0.4912302110495422,0.000557405899192176,0.5384151452075924,0.9971623907725375,0.017634626078154525,0.38275450896408036,0.7862949946154629,0.08176284276643664,0.7896424034142444,0.8987869389643757,0.018728685781291,0.9975813429385827,0.9723803141215968,0.0003808606268523307,0.49532457867027796,0.6865358614908812,0.030767002820667244,0.874050247115695,0.8205453414379988,0.06166764852834189,0.7534539876046826,0.9232881124618479,0.008839012822964787,0.6081352597516675,0.577177026651588,0.003919317399285915,0.9392083295652036,0.7258075075351356,0.12716452476401008,0.301058104430317,0.8524122195239712,0.04257380047736553,0.7153809720910567,0.4638464277281012,0.0026014498978229605,0.9817634180341217,0.9935001323734292,0.21184864640290685,0.9169900421739597,0.763400123922378,0.06737534715389526,0.8115425257567541,0.3523764013881252,0.16580340430158502,0.9995254984818263,0.5069431552947519,0.3113619114628807,0.5227315843085804,0.6608326583181301,0.17771743612692115,0.36753942390933336,0.7990341844380563,0.07550912227270123,0.9915804803266568,0.9080672479592513,0.4205830652232705,0.9957921776940205,0.9772965202107826,0.0012406751878551447,0.951643198107385,0.15757343743407626,0.03642485225282632,0.8634399316949051,0.2866679282151888,0.116827185175713,0.7397859221693943,0.4365713060091976,0.37835008090442834,0.5927426579483255,0.592661660358525,0.23467491122742412,0.9015065706213599,0.7397135892864142,0.05428812935959726,0.9738475087317959,0.8633833190297926,0.03645574297421744,0.9999683019383361,0.0323528176566249,0.0012464850277870143,0.9773210696997442,0.10974256725467002,0.01468675949114101,0.9081148736581115,0.77662426331461,0.6037024392349217,0.7991002408297194,0.3674599441312595,0.4477557396794273,0.9985945292461849,0.5226492425508668,6.10822849389514e-5,0.8556152731954931,0.6756292832380311,0.16586471847544515,0.8817119217481324,0.2622066161202383,0.06741667697418485,0.9942088006928386,0.0121189602214129,0.011163779490404035,0.9935133731699897,0.565595887073637,0.25829862558535294,0.9446795483788368,0.1691908575327737,0.13506264660888223,0.9643895869451803,0.3009824859476262,0.0474234726039639,0.998908422437325,0.4521867274255569,0.3631712191755536,0.9847626154993683,0.09319954168143202,0.22148940031968734,0.9106714752673257,0.20272019453137397,0.10697412774143616,0.9786281297083456,0.34123818393487604,0.4750854372094622,0.9998983267922119,0.038143412373065455,0.3222491549877754,0.8358189627627457,0.11975682438150659,0.18675108740658203,0.9337161804134517,0.23846000546532314,0.5882818342797773,0.9893077526055035,0.0068558251603421105,0.43215650775318,0.7436841869609081,0.5383329616468895,0.2826487870694979,0.8664838798062895,0.14914146909318493,0.6969349801535663,0.9535359160375758,0.0009469342635529121,0.05975144653731013,0.6390086831257586,0.015797982650938458,0.38973203998092715,0.9907471798905109,0.07787917785186277,0.7954532540967948,0.9372767376803125,0.020720829146356978,0.6566096637697225,0.5271793704567653,0.3154935913396809,0.5024900168645325,0.6798687498744558,0.4678493687404658,0.34812748814996075,0.8150133294785304,0.06515988514883203,0.2085789436291956,0.413951324873397,0.010230781947631273,0.09745626018250209,0.9829360624435157,0.0030748627575364895,0.9425874797761612,0.9993346571758026,0.04439013192760932,0.8492391567966038,0.9670270335890945,0.13014660577618997,0.7218252660219229,0.4567036246192621,0.2519794062049701,0.5727740430888032,0.6124788691099843,0.009692147192248868,0.41662427736538954,0.9952567759270319,0.10418649804801705,0.26860716594663314,0.8769905506889349,0.029247573716647046,0.9997862923985779,0.9599259272543947,0.00022689303060263732,0.9709019612988833,0.9979991010836806,0.019955198036219757,0.3744622827205757,0.24233648299818467,0.08650814577660848,0.7826326432750035,0.3870882864699696,0.0164814801562862,0.6416118663543929,0.9751128806813752,0.2785729818908001,0.486777951530981,0.6944391645162082,0.033787702650748375,0.8683234659242874,0.8270585476121582,0.05761939817041317,0.9968757453612676,0.9277759090996166,0.007310669779349632,0.5997740670948717,0.5856109935030299,0.005059959665831171,0.935059244867004,0.7334008629260708,0.12152356492618593,0.8378234002665806,0.858424290600774,0.03918919128077525,0.7076355062736468,0.47237702086779004,0.0018033336870535988,0.97940555432342,0.6277316612794439,0.2049052780031715,0.40117438798778987,0.7706270700092597,0.09478243592049546,0.8048113919632474,0.36056461059606315,0.024185420573693217,0.9990801985831377,0.965861720333531,0.303473461317644,0.9653879696088622,0.6689025588300198,0.17122940656032526,0.8863007580811877,0.25592796875864277,0.0710543701874054,0.9930706607246018,0.40244922888513057,0.41215549692462894,0.6264742145094747,0.5584858092218763,0.2645959100147277,0.9479099144630092,0.16385201459861737,0.1399981640971097,0.9616862098096655,0.8387807660721289,0.5253582773367185,0.9983839820193564,0.44505920232095164,0.004877132550134611,0.9864682668892761,0.08907525623967505,0.007533854291460973,0.9065419849587928,0.19698947402945166,0.6372560438148341,0.8260740128046142,0.3344600156569285,0.4822443659724961,0.6932406878248548,0.48807769728774375,0.32896461235153507,0.8304758753887079,0.6428583069677608,0.7420901975986787,0.9301065257213659,0.7837041981421404,0.08577856251121219,0.987783624380494,0.0057239716962498854,0.019593177038661425,0.9978812182724568,0.053102578911122855,0.00026774663798873055,0.9594143655240419,0.14407255925611534,0.7035008324441615,0.8761352089138135,0.2697604975586892,0.5526860840496868,0.9954337625556856,0.41790651144325713,0.009439051143829202,0.7744298323984058,0.5740601076551316,0.25085132080818934,0.8899795450470134,0.17564860320971604,0.12927294327481031,0.9674897813884222,2.6892867304728618e-5,0.043856111314380164,0.9994000197585562,0.4607022271515953,0.8834051769973421,0.9825976641973082,0.09822881640001596,0.7657015485789095,0.9154873568733957,0.209636416463854,0.10174772075054012,0.5629879819942231,0.34936672933834734,0.46655201233780436,0.9996529042173588,0.04148539438848625,0.31428581878650774,0.842102691644224,0.04854759163330258,0.18013460148436244,0.9379057426575756,0.24578327692326501,0.5798555397626155,0.9909944889486089,0.00833852593255402,0.4236977891354196,0.7511123833535169,0.060369275737080286,0.2749827266677275,0.8722449995960389,0.1552825888245089,0.6890494586871552,0.9570680067258579,0.0004940495096602548,0.5370365028923747,0.6471990694927421,0.4334448686903249,0.3814109238403766,0.7874273988002614,0.08252210519208825,0.7885143185545275,0.8996194173177257,0.018355665690654888,0.11891384869875143,0.5357104446514431,0.00043672440969089177,0.49394207488289715,0.9999228551503963,0.03124630139876411,0.8731313557222304,0.9782504529923342,0.0610041614828738,0.752261232609529,0.4223840519192213,0.2225701190010233,0.6067849851424897,0.5785427442898313,0.0040939859699527514,0.45089269159333445,0.7270402018637414,0.12624471582127245,0.2997904346457667,0.3130520115004094,0.0420172786067049,0.7141324158906109,0.9452724883649988,0.0024624994861573435,0.9813915810318645,0.9937204523855481,0.01143864000770961,0.9162255467259814,0.21334088210330526,0.06807014736599976,0.8104599424574608,0.3536979136038238,0.16683305777944812,0.6744113816199714,0.5083255775512062,0.3100822222476526,0.5213503448639336,0.12838210114803195,0.1766616159054985,0.3662067477584699,0.8001411048453386,0.07478015810891231,0.9918312563699204,0.9088646295426355,0.014375593924828012,0.9956112900961764,0.9777065845887247,0.0013399195292249089,0.9510482910489546,0.15858220805662088,0.03694466373333877,0.8624890337398006,0.28791916508328963,0.053700443704578826,0.7385717860291185,0.9321386784022021,0.3770095089068001,0.5913837131752184,0.5940199385751889,0.23350406152609043,0.9307830041114493,0.7409260015537419,0.11599322351988245,0.9742869860130856,0.8643316039458637,0.0359392646275733,0.6998293542102689,0.48091568745761304,0.0011508268952845069,0.9769075733278174,0.11060836277439429,0.19804815781408353,0.9073145577770971,0.7777749191187942,0.6023495246498888,0.7979911700391096,0.3687935729992993,0.02162868710872795,0.9984890310328487,0.5240303188446073,0.29564245056743066,0.8565858119466969,0.6769230936895038,0.1648374677513199,0.8808174556212197,0.8125583946076924,0.5598060551071914,0.9944167298964209,0.41084690827560644,0.01087511985130235,0.6181860206285503,0.07037270701606269,0.2570892399170375,0.9440457188579172,0.7165535897384937,0.6701533836294371,0.964900242897637,0.30225158645618,0.046837486799495065,0.7246467283949876,0.023778590767469854,0.3618419372209719,0.9844220413757574,0.6094042797316532,0.7717441024813684,0.9114585780631027,0.20383299831898377,0.10612097238002377,0.8195464335395075,0.0016922739428248401,0.15819997328588237,0.9998685350442197,0.49662469336217324,0.0003318126412547584,0.836842005702499,0.1206560631870312,0.18567466845311892,0.8980013091404648,0.0052503854551883,0.08474357254909198,0.9895902764069229,0.22967726539920363,0.01729400563450273,0.6446331133246122,0.057001318649335386,0.28140450031110364,0.9559738291274593,0.03426981408447971,0.6956634045505007,0.9541162158559049,0.977064554923021,0.059097714488434094,0.640336226943133,0.01614463110179526,0.38838392019157314,0.23016239044638287,0.5825026824690491,0.004622346194817051,0.8952719562386696,0.1822011480325219,0.9981161692737863,0.8401412821936945,0.00018860971764328438,0.5011074423811781,0.16522609068141758,0.46922921255439437,0.8778626136683715,0.8160858017935211,0.10337551797544342,0.9950723205873926,0.9139889472556577,0.009954399796325841,0.07010516981177273,0.9832923317015371,0.25313475597759305,0.025163691535258714,0.7206329124201851,0.665881383280858,0.30637676182044,0.9665314843112509,0.04493942413357477,0.7205853480628793,0.9419673168899828,0.2531808490577274,0.9832787419448443,0.6138255835800696,0.9111609454593799,0.4152613715913991,0.20749957673100294,0.10334324717005433,0.816044732241308,0.0020856353763727964,0.1615244601371953,0.1421935312131623,0.8597138170213445,0.0001871568431420778,0.8401801283995725,0.9981207630795423,0.18216023087097616,0.8952394950553846,0.587436073535584,0.08728705003628112,0.9904908421714624,0.38843558573322384,0.016131273854728012,0.6402853542460507,0.9755418246086299,0.33148796470550607,0.034460524768307244,0.695712179016891,0.6914813532476836,0.3319309689032546,0.28145217025080854,0.05697674443418593,0.7448443098583614,0.9284900602015871,0.22972185522776428,0.9895795146301787,0.5869728309994565,0.0052580491056246625,0.44239350972288316,0.18571588955106527,0.5280371880806709,0.8368028339911758,0.00033374608307684683,0.1418650795857896,0.999869747587753,0.8782052116640526,0.0016879196860175583,0.555820655412974,0.9949987401308055,0.20379029633460644,0.4197872762926871,0.7717885920717165,0.0724390141682208,0.984435165838397,0.9421871099932695,0.02376244268669281,0.6663751007161184,0.04685988717415418,0.30220290658069343,0.04515656317650746,0.6702032216104994,0.02501653506391277,0.3579903169474802,0.2571355684679074,0.9820956722676053,0.7683673782577147,0.9137249524465622,0.4107947557231847,0.9944088284447529,0.5598586766651653,0.0020381470119273937,0.8808517993838865,0.16487680100820173,0.500636990073167,0.8565486558090537,8.363192492116811e-5,0.12328209375643556,0.9984931456511261,0.1786719491380635,0.004686387618818899,0.5829666502663623,0.9903889705231201,0.2263106367853202,0.9263808571281231,0.7483807240235373,0.6359260507261346,0.06128038966989002,0.9543128834456343,0.03282497038347293,0.6998779384933487,0.9557805973518292,0.32766608950859155,0.9742702051396367,0.054892231899114075,0.01717155849975749,0.38447648311137184,0.2335489094450502,0.08500579841419015,0.7910838533508544,0.005934465599602923,0.9007620663816767,0.12096270971777573,0.5325646136987953,0.0003148973801556654,0.8625255382794388,0.1450449441595127,0.15854348789084094,0.4782881411365052,0.0013360446341284526,0.10583135486215822,0.9956182944224804,0.20014837684058856,0.009173548576893564,0.7755845036788905,0.0748080436140387,0.24965356606849193,0.9400517406920327,0.7242263336868053,0.6620910069655591,0.9679783982111496,0.3101312534113512,0.963191723479242,0.041255796219822505,0.9438292706720892,0.3536472317336979,0.9822342323937708,0.6177288467434742,0.7645293210882005,0.9162549129470239,0.40633548078315634,0.1009132891894472,0.8129254594894142,0.002467756139657995,0.4651726551491286,0.9995994865380575,0.13591631221382594,0.8533541532940363,0.5245002175331847,0.12627992477037764,0.17907317305139914,0.8927692917556816,0.004087220013595405,0.5784903994588453,0.09247568252578614,0.39235030354413886,0.01513591614465637,0.752306993400566,0.06102953492757923,0.27374892569232046,0.34005606406890754,0.031227861029202886,0.035764330989762616,0.9576267686611493,0.28506791132151477,0.9728144285879325,0.648519816768396,0.018369897836467752,0.9330943036094472,0.08529799910515123,0.5909211439789792,0.7873840276716993,0.9004488401219619,0.18884657686945894,0.9973020832539005,0.5370893594913947,0.0004964079271512767,0.49255961741530696,0.9999452300008467,0.15524419858319305,0.0013745589583911144,0.8226625985943312,0.5467971171762311,0.2005674219084903,0.909135242718234,0.00832888925039954,0.6054338940395367,0.985412883303048,0.24573763790436237,0.9378801584051946,0.7282711602094157,0.9677938253425595,0.29852429569313654,0.31433503053706924,0.04146425853960478,0.7128822224020724,0.027928058217270957,0.2606505597583364,0.06830732100200232,0.6221321949384241,0.011734550201053517,0.918750618763831,0.9937945601376232,0.09819726909935483,0.8093749853355732,0.4656948582067397,0.167865258700981,0.9993974211970782,0.5097079361490643,2.634596042933035e-5,0.8463948238844352,0.9987883598501255,0.1756082679771379,0.004154285295700999,0.8012457303293837,0.5740076894751847,0.2229616322837022,0.39678407749428646,0.014048303768183446,0.6320605010993512,0.978112996351534,0.26971345016771164,0.9504499352086431,0.7035492451590548,0.0374680158033745,0.32390521229769276,0.2891720235527919,0.6480199060967776,0.7373558257337148,0.01960787174871076,0.37566987731264007,0.9877719769548143,0.08001443812534681,0.006566711940362957,0.4339111646724009,0.9973561154096614,0.11510923958375208,0.5416110531055409,0.8652771031286564,0.48802471001032854,0.9999917919970323,0.8725589250382524,0.0010589830372707554,0.8261141916603052,0.1114771356401143,0.19694731503543,0.9065111275087883,0.7789234510149019,0.07693284548936336,0.24618849711347196,0.37012820509106736,0.9356725418378273,0.6582901928675475,0.050539020044031324,0.2943814016575633,0.9616658593013692,0.6782155513608594,0.02775582084153838,0.9479334671420556,0.26464267195416125,0.06603661054066184,0.7611160427310324,0.012731530942469038,0.21404521699447937,0.9930618644569503,0.09551431438581515,0.0028819152840424134,0.8863344066796737,0.9994228387982632,0.13317802097784598,0.8505040683439438,0.84601714960159,0.5154360235141742,0.13236760071673087,0.4549399403229787,0.0035912155086428865,0.8048534048221452,0.9919851926019625,0.21919720404742538,0.9218540905455959,0.013000681602295505,0.6276804168340551,0.27017820674426557,0.3438626696994463,0.02984721877250035,0.6840441345247017,0.03920976355944289,0.9612059846136056,0.9714942205903098,0.6523462206617707,0.0194629824210244,0.9350853642694603,0.24082070009222795,0.08029871144012929,0.5998260029652841,0.007319703029047442,0.1919973007826133,0.9968698266893232,0.11222989520990712,0.0006912350964700109,0.8683593081966303,0.15111688407036722,0.15234930653907147,0.869518577907489,0.8257172219967663,0.5428009431778968,0.9966750031179483,0.4277179761426426,0.9038535594567652,0.006761019404556923,0.9863593428077624,0.24229106171556608,0.9359291472972137,0.7318335423387563,0.653981255481765,0.9709197760886099,0.29025542850345143,0.03987923472804955,0.709244921145207,0.029265438144697897,0.34549530120458255,0.9799054793807442,0.06380161203889517,0.6309083780785577,0.402910684365996,0.21777770624830844,0.09582224825688068,0.5728264806808865,0.0033886535627681846,0.45665082153634384,0.17470047621197865,0.5137191466994606,1.2555906258038263e-6,0.8492770850168306,0.5109018345870151,0.17256547588634646,0.4594590538755851,0.0030689964727642627,0.09450701058367827,0.9927738122351377,0.40071325966573995,0.9194019510260696,0.7596497231377528,0.06518605040712144,0.980688764242473,0.26169968225984386,0.7072074443561107,0.6798192947730096,0.9610035695318478,0.29281696970261534,0.969965218582085,0.6566599982657998,0.7293329475557404,0.37178762355099215,0.9868743551595147,0.077850772905033,0.7803473205541058,0.9055086836336657,0.42493057251165095,0.9963426492774614,0.8274142503152583,0.0009501975347321334,0.4840139670721472,0.9999986835716895,0.14910370919085808,0.8664478221458677,0.000551031190959117,0.11401515084877378,0.19376576818138036,0.4322090203693137,0.006847080879972101,0.5970630003778961,0.08183707407994517,0.2384148338467038,0.020086992745532717,0.7358426905088272,0.052311306359791365,0.9724246851845744,0.32229869605178896,0.03812311054835982,0.6866615060971701,0.34599322279791717,0.26819022583056507,0.978612796538926,0.6304031103575067,0.013646881131244015,0.9233601814382788,0.22153342029803058,0.093168727105922,0.8026148164842214,0.8888690002538886,0.45213396817514484,0.13046335109003898,0.5182525902716478,0.8439773268671581,0.5114251595324174,0.9993101742656814,0.16915111601806143,0.8845392788172646,0.8080238305122329,0.5655433423902911,0.993521880248317,0.4051627364795074,0.7592022399005732,0.6237970502378573,0.06744325929230499,0.2621599928853175,0.9466741824845792,0.026837431541437473,0.04078211595576198,0.3159309234386256,0.2969534961734806,0.049311500764588345,0.6609608839170495,0.9370484077891107,0.36740883854933715,0.9858218767153633,0.7807805998181914,0.008019591987395158,0.9081454923144012,0.19919364535948392,0.10970943566542612,0.5501230045927007,0.8710605491399888,0.4794812278995972,0.14947680131619406,0.49084224705543744,0.8633469104537502,0.538802013030698,0.1169142027380955,0.19019290784436782,0.9014749809767537,0.7859767881728288,0.5926095755526828,0.9883836721709793,0.3784014913393132,0.01883403643489645,0.6501590210742831,0.05434951820914219,0.3218095127380056,0.958316054142464,0.036404995401701,0.7009719533052554,0.9516659356246104,0.2722185640255492,0.06185446070918993,0.7537883900431874,0.9230814511941582,0.3940282620513475,0.22531205007631078,0.5767936273488498,0.003870977734911518,0.8917040988712457,0.9989392712436448,0.127423184550153,0.5227845317913999,6.321745542553492e-5,0.5068901579519983,0.9995278042364214,0.4634594279827089,0.002641130267938163,0.5660622448882211,0.09988091136739219,0.994229335081066,0.9172040274153783,0.011135339068875538,0.6193974654074152,0.9817775993949045,0.35200571738182396,0.02700688011096103,0.7154288037361307,0.04259520480849821,0.31172131975621364,0.9685804310250838,0.047365920220851176,0.02189485432331778,0.9392336567162967,0.36304096481419124,0.07571429180792988,0.6081870071755716,0.907842899412295,0.42096618959446797,0.9958422631457482,0.5496021585762276,0.8205046621319363,0.0015913019829281727,0.15729079308548222,0.146256734087788,0.4953775787934843,0.8321547928577511,0.5342783792456863,0.9975865471354364,0.1866455423270093,0.8987549645397945,0.5931239229391444,0.08405020050656531,0.23500387871926925,0.9316791435960734,0.017620676504638055,0.7438024342246212,0.9737235168447713,0.32605474859586003,0.036601331311995444,0.6903776934610274,0.032215647342896336,0.3373885282225678,0.27626564693870714,0.05968726232053767,0.014593549826032282,0.9254812362554918,0.3895999493554833,0.09084933755597485,0.5812723674801455,0.004454697058731083,0.448141657716669,0.9986234525625715,0.5222616077156816,0.8410543251740223,0.8553423995798157,0.1378536571381902,0.999704326783853,0.16240435422528726,0.8111744211363701,0.5615635749353425,0.9941497655754539,0.40910523461775894,0.9146870141337058,0.7669165642793587,0.6149880550535272,0.2586383758650665,0.9448568237399552,0.025555832230213626,0.6718172436941912,0.9642456315203829,0.3075272100089602,0.9669786504462954,0.7262271517962837,0.023242042158284237,0.3635444746476886,0.25209700824505554,0.07333198921147022,0.7732286754926753,0.009718701276047292,0.20240829088903967,0.10721410871887,0.554113459095972,0.0015498459099496653,0.47547298901429996,0.16060757316119822,0.14306577729938352,0.00039944067906833025,0.8355313808715858,0.11950497246958369,0.9980111865565592,0.440687683029821,0.005509407777575914,0.7933705836383268,0.23544791538860027,0.38229722492229823,0.9293726984952051,0.7433452903647764,0.05618308326716587,0.9751550578379548,0.33031429885427693,0.0349169566870845,0.6972915815232001,0.9533724297411619,0.3331060767495141,0.05993552357854004,0.6386359124723083,0.7459309380665414,0.9278460073753787,0.9908213356802569,0.08825909089665601,0.7957662015018763,0.8941851489100658,0.4436325373809238,0.9982666008796068,0.12143508003355419,0.8549739484718055,0.5028780376281373,0.14099590076635288,0.16279066224472355,0.8790197948692697,0.0017918601619039132,0.557059838758094,0.20889433592049522,0.41356911383334577,0.010309022514961186,0.7707409368589714,0.07179378634914535,0.25467604980804087,0.360694672143852,0.6723087282845172,0.04423043308271307,0.9659108868373232,0.3047943137987656,0.04567591448720698,0.6690300206708111,0.024628463627539843,0.3591865525985054,0.9837297838734131,0.612100754602571,0.7694188304621287,0.4170068960265056,0.20606539097819787,0.994593277959942,0.8174147854947845,0.8767355441828029,0.47094374287131574,0.9997974855992091,0.499389835617951,0.8574218824000941,0.8388803571481163,0.12246323545957105,0.44016795620284704,0.896321494159896,0.004858281116888019,0.5841962563444586,0.9901440914393769,0.22735521223980387,0.016580431131009765,0.6419839618580496,0.05829026796387321,0.278920950536008,0.33458781298394835,0.6940816215328063,0.6931157748645549,0.9552663943629909,0.9762293850758659,0.057800368975508665,0.6429880853409073,0.0168490242136346,0.3856902512133794,0.23249442590711922,0.5852286715861523,0.7920969693525415,0.44415268665449104,0.18434076302943314,0.9978687455609905,0.8381093614300239,0.0002721964188642789,0.4983422785828984,0.9998262007594412,0.4719895954639256,0.8760459670546425,0.8182234877254615,0.10506527821270628,0.2052186068495428,0.9124320268252294,0.009412878461532548,0.07152376503148045,0.9839937815480051,0.25073391208764584,0.9406424976981709,0.7231109221724069,0.04611433311525437,0.30383031682830497,0.9655296880658872,0.6685372913533064,0.7181004617537878,0.026054004638908446,0.25558938720949864,0.07125387941953071,0.6165163912480233,0.9127280927653081,0.41253751423166507,0.20974667969969157,0.10166585052698912,0.8138971943110352,0.4714663295356339,0.16356486673813708,0.14026755123123208,0.8577877305912949,0.00011914967138604293,0.8422014460915013,0.9983526600552679,0.4446735421620796,0.8935398243252815,0.7966101796449279,0.0888543195684775,0.22779414692621425,0.3911327330655502,0.015441963096385514,0.6376291222526327,0.9763888010219979,0.2748617952351923,0.03345886680084709,0.6982537089633226,0.6889240762138372,0.3293292821782653,0.2839425330734009,0.6424864128297586,0.7424296353922122,0.9299085280751289,0.23205233386050422,0.9890104388586388,0.08318045759184423,0.005665575051848615,0.4396476506886806,0.18787130623287207,0.5307975622657124,0.8347539835307509,0.8613038571645276,0.4938066559558038,0.9999252157257981,0.8763907485291279,0.0014685230406786265,0.5530719343112903,0.9953812922964653,0.20156713609496218,0.42251784219258126,0.7741053929241449,0.07387908247829034,0.2511878170618627,0.36455256717996737,0.022927414267200685,0.663764975079367,0.048035584562639955,0.2996663439674874,0.044015164763346715,0.6728006330394032,0.7140100270958702,0.35534120800596847,0.2595563295707415,0.06893790904436153,0.7660301730749377,0.9152713687603227,0.20932061234925692,0.9939889015207133,0.5626030279932357,0.0022951777917927796,0.8826375892265448,0.46189279645346243,0.5034021317336983,0.8546046507542046,0.8418196051508218,0.12510600250192555,0.9987000374523772,0.4491836810773302,0.8907257690898742,0.5802385612580085,0.990921028096583,0.22400070646333026,0.9249300966029018,0.7507767669701251,0.633262956794,0.9777465555116633,0.953151176504331,0.031846734027888124,0.6894086230280388,0.036995771605291605,0.32507300681295903,0.9733873496848651,0.05363940170519094,0.01789738613366748,0.3817879139998187,0.23589279309396566,0.08346979542551025,0.7888311420535751,0.006366784862197994,0.435147581272379,0.11916516169449753,0.5353233984883093,0.0004206604731427088,0.8644243421999807,0.1469978486269749,0.15652876564583518,0.48105101856193805,0.5535924034740854,0.10753862484469284,0.9959759880619488,0.42200075259893044,0.008653804239118712,0.7778875159476758,0.07626946650755789,0.24726380829014777,0.9387321663743939,0.7266944172852061,0.6594727074611564,0.30014605591248705,0.31269218476959715,0.9621433342155625,0.7144829926670093,0.9450958429671987,0.3510054226120748,0.9814963098911513,0.6204144566456848,0.7621788071944426,0.9177804710100548,0.2130230457378951,0.5620836575224429,0.8107640127286149,0.0027497517398977767,0.46241475020158446,0.9994811915826145,0.13402664535883407,0.8513923895915462,0.5217380108447591,0.1281226119722702,0.17695768584436805,0.453698001797708,0.7998306755628599,0.5757583288463817,0.09408402390765969,0.9252057290079756,0.014468116299974465,0.7546904168455906,0.062360117533592,0.27128652300954015,0.342678369748518,0.030273126787070337,0.6852031539028999,0.3255634778766272,0.28756783755195675,0.9719078383284216,0.738912721562738,0.019119900026335235,0.934469475499669,0.988158105754863,0.5936388057865338,0.7851168624229952,0.9020984937389482,0.19101582381933546,0.11624184424761153,0.5398463278579103,0.0006272323113390987,0.14662732704162457,0.9999785115945894,0.15324674002832767,0.8703575916498889,0.8247699872659022,0.5440433857447681,0.19835752795566586,0.9075394835019315,0.007833803208942891,0.6027293036810379,0.07869472040845471,0.36841918429696324,0.9365385948852119,0.7307278313169578,0.968763032344665,0.2959966489961999,0.3169053176547536,0.04036874070317081,0.71037696180982,0.028846488023875072,0.2630819671915539,0.9802539967913115,0.7626243847858323,0.01233756834595201,0.9202551930340495,0.9933527148724357,0.09655769814156084,0.8071979828250718,0.8852079867441696,0.1699372712861954,0.9992540700756279,0.5124724200906872,5.605928492691259e-6,0.5172056892934479,0.9989731179633449,0.17350902119685357,0.003806160048320073,0.8034480627608553,0.5712718620877042,0.22066397354612066,0.39949125085112414,0.013404872904417331,0.6293915197938293,0.9789148496297686,0.3421815869019107,0.9492428955091792,0.028738174574566788,0.03852532567846567,0.3213199185714473,0.2916825669655108,0.6506588498333968,0.7349184698810486,0.020381986774933247,0.3729934762995406,0.9871567247537842,0.7855467155938173,0.0070209336352142215,0.4311712830210347,0.9970645245529015,0.11335010724294076,0.544365978171065,0.8671597153980565,0.149850740918117,0.9999999900404732,0.48506102576074267,0.0008867409245464919,0.5445647821954062,0.11322358681576417,0.19475258943443924,0.00792637004981972,0.7812141079718173,0.5982861268254351,0.24380997933418508,0.37280043811901875,0.934309099516201,0.6556648423889954,0.970321788240107,0.31641832165716866,0.9605969712483851,0.6807963688443498,0.02867151960983505,0.9491552370556487,0.3423709910551254,0.06466981667456512,0.75875391722857,0.01335900454189548,0.2163178915372414,0.9925952756772503,0.5710742997176154,0.8036066728121688,0.8880838441263694,0.999282378742713,0.1313046144255806,0.8485267299668284,0.8480079247990668,0.5126719518418662,0.13424738838022204,0.45769453136126403,0.0032679889985248733,0.5717899331285414,0.09643982779107158,0.21691359599742666,0.920363299129484,0.012381672669020072,0.6250049870601831,0.26772597869273973,0.34649193085128316,0.9472332198181403,0.6814703055121983,0.040290207799822286,0.3170910633081281,0.9705666967871937,0.6549775637297499,0.02023431789818203,0.9364412412429672,0.24318932159687656,0.07880224047409334,0.6025339588381359,0.7776182217581522,0.19418023831280795,0.9965533036898722,0.5438445632465799,0.0008442196436683758,0.870223470489706,0.15310296947457752,0.9999803222056685,0.8676501408237316,0.8278101767350732,0.5400452847212283,0.9969857701566092,0.4304551884361627,0.9022170934682898,0.7849528760269396,0.9869933872971173,0.2399254347294763,0.9345682242249039,0.019174605953121593,0.6513481377490815,0.9718418401501521,0.28774853912328546,0.03880412565469832,0.7067303493871568,0.03020476790045762,0.34286783971319945,0.9791221075526503,0.06245667985276915,0.7548621561482686,0.4001996468547966,0.2200645761041592,0.09420059791887825,0.5755610323387924,0.0037176329939078157,0.45389674268441677,0.17680536766167776,0.8489018664920455,2.7048254724326704e-6,0.8512503693112721,0.13389067819341482,0.1704807393330649,0.4622157230577959,0.002770695299047221,0.5672982592365773,0.9932346897159308,0.4034248663684154,0.9178900946905113,0.6255117506807688,0.06655787741127983,0.9814424751733888,0.9474670299885757,0.7097208090365696,0.6772364030655145,0.962067112230606,0.2953367328292249,0.9690141021987444,0.6592835241251738,0.021531324093772564,0.24274032875599205,0.9862374897746979,0.07637545670377832,0.7780534235414471,0.9071201584144262,0.42219791008533697,0.11081860837629498,0.8253194024904194,0.001128221365455484,0.4812504715386584,0.15638374507678265,0.48907199494855563,0.8645609707320903,0.8312215653177981,0.9969281069988012,0.1915846110027855,0.43494967763436365,0.00639857483211953,0.5943489650344225,0.08335941632772154,0.236062292327319,0.9323071036408752,0.6518469533443063,0.05354949794505265,0.9733230629858332,0.959020948331566,0.03707115610472084,0.6892238885889778,0.9509036155189425,0.27064379191055854,0.9778054006057597,0.6330705711173914,0.01429594490479319,0.3957593082699602,0.22383429727458842,0.09156746103567165,0.003654191071574109,0.890601197568349,0.44938224647660774,0.9987143811419761,0.5210156217185784,0.8419652462586236,0.5086605531592078,0.9994477395165923,0.4616937851678085,0.8827660385992377,0.002314319873460091,0.09882161876326662,0.9939580056360036,0.4078791446272609,0.7615628572724754,0.6211160996913226,0.06883680926760638,0.2597313499813552,0.9454247891850596,0.7138296223563688,0.04188295066741371,0.963781051610703,0.9691952533000108,0.04812098388037611,0.6635763766711511,0.9383849025347715,0.36474470976187373,0.9851606279064308,0.6064576669955275,0.00852037667415012,0.42271503212687905,0.20140701671127192,0.10798703242175467,0.821861651637283,0.8729082627713279,0.47671871738375227,0.14751028723522597,0.49360707690872446,0.8614417999837916,0.5360446049982998,0.11869704839372602,0.4344307068783425,0.8998206815280623,0.7882406317371202,0.08307025265224571,0.9889687829751284,0.23222087003560266,0.018089612067223648,0.64751921307291,0.055610087518844054,0.324395833351962,0.9572037253785933,0.6887392627577205,0.6984369275330946,0.9528451201018873,0.9779593654459302,0.060528959550111394,0.7514020346064744,0.9245485989767188,0.3913275479188169,0.22762674482851203,0.5795247983453697,0.004221978198224174,0.8934166726087016,0.17987717421649663,0.12558482091324874,0.8423469442371754,0.00011483237636333854,0.5041251615001603,0.16747367672447638,0.46621774639013813,0.8798320199736694,0.563320322742147,0.10154524379007318,0.99464067248577,0.9156736408264099,0.7654176837723102,0.06857199243492657,0.9825099370319614,0.35464923176126006,0.02611763169682002,0.7179208390884955,0.6687251920774832,0.29900407789857153,0.9676085099637592,0.04619809241016254,0.02271147220321268,0.9405481370189308,0.2505609089193337,0.9840438409266186,0.774709822153739,0.9094362906362661,0.41823700726566615,0.9954788256204248,0.5523529134241592,0.8183774139638967,0.001819358371248414,0.15930947894736208,0.1443079353633478,0.861803293768737,0.0002788213208484436,0.5315192072107908,0.9978502967444847,0.1844955787157146,0.8970806333838454,0.5904057276812016,0.08559101745123943,0.9898961628864544,0.9302772695301199,0.016900440664759764,0.643179333067376,0.9746008802326234,0.32864983741061116,0.03556993153769805,0.6929316528142639,0.03319930025280582,0.3347761822973967,0.27874194411604797,0.9750541388097814,0.015264161977513457,0.9269270616387237,0.22718792402800092,0.08926621318197764,0.5839995049930882,0.004830564168975315,0.896199772382732,0.9984107841079977,0.5250236788660335,0.8390270887580072,0.8572822803949942,0.13976574827316274,0.9997917655813985,0.47074448764070176,0.8133340589580373,0.5588185201647115,0.9945639654257519,0.2062268778483528,0.9131357985329331,0.7692506683706777,0.6122952593992244,0.256220420057078,0.9435876756086659,0.024690371918863974,0.6692178508183223,0.9652653836938356,0.3049780844605854,0.9659832859247347,0.7237577625688283,0.024082591621873983,0.360886374965369,0.25450215079702554,0.07189686975570775,0.7709087171601534,0.010268739919967573,0.995548788720904,0.10550911970593707,0.5568615433099847,0.0017750171556550343,0.47271153933671517,0.1626433184245139,0.141134854303113,0.8586577984968542,0.8375763362592747,0.12130472197979436,0.9982499556821669,0.8973985233019925,0.005107612809521822,0.7956052483534244,0.9897911941879922,0.22884112868477618,0.3899158399130395,0.7457571365738478,0.6388276704675527,0.059840804040421525,0.33291794231331295,0.6924486302206837,0.6947477747653271,0.03484371468676295,0.27827265124954803,0.9752171548169855,0.0562750420113447,0.016396279630058574,0.2267494022356239,0.9902864340913169,0.08669659772073829,0.004758248821242761,0.8958802462206703,0.4408858733034185,0.1868979775289703,0.5295526810483064,0.8569158911947712,0.5001128857793792,0.142926033488451,0.47022194511659576,0.8772105419740528,0.0015655887749095876,0.10398188572401124,0.9952106274120978,0.9134304198317715,0.009757902148278208,0.773061495641451,0.9835463278646106,0.2522703628173931,0.02485309174652711,0.7215249678286615,0.6649428271346818,0.04750360430040046,0.30734301141602194,0.9643197149267887,0.7196923732806587,0.025492875503854706,0.25404627091621873,0.9830227317217312,0.06957117897268783,0.010163465921986914,0.9145754686934122,0.409301510956375,0.10273853239463954,0.0017312220057808525,0.8785478191393317,0.4681837065612659,0.1414995440352771,0.5021549965353211,0.8554827883554874,5.81724982943177e-5,0.12428195451758856,0.4429141556299362,0.8946295578716745,0.5864566686888957,0.0878493042681524,0.9906829156438939,0.2250414977937999,0.39434478736718825,0.05721996069332119,0.6344645833829092,0.276444162360305,0.03409861375101153,0.9515269233656287,0.9543131544790334,0.3309946150978761,0.2823471219744993,0.9737873320232342,0.0542027693692812,0.017568194272237048,0.23055911840113325,0.9893765565369154,0.08416099405577587,0.005402883571136274,0.7857110698909093,0.9980750921196875,0.8397958370391372,0.534079251264712,0.8600776452163991,0.49557716548525355,0.1461157032356299,0.4747508350585872,0.8742178192507802,0.5548322055370025,0.10676711734383726,0.995816537246681,0.9108624923540369,0.6133151782171045,0.7768498519818872,0.9846804286708897,0.941721997389121,0.3677211321741315,0.04515683270724413,0.6606542298830451,0.3012898715942374,0.3115364314221046,0.9626179338694424,0.942187412936702,0.35703699833266156,0.2580054005456213,0.9818309545453029,0.7675276889823028,0.6241108010720962,0.20788178566715848,0.5558213003653479,0.10000063674769882,0.002128840776523977,0.8077686580473135,0.9997286665248941,0.1383525734981037,0.5066905815021068,0.840525237602344,0.5229839174880694,0.12729010585631684,0.44742256137254316,0.7947602492336834,0.003895805605887759,0.09043416379913483,0.991534257545039,0.9258605564201121,0.6398331125798975,0.7536163975935709,0.977221207306557,0.2723962622333102,0.3414950485862175,0.03446076153894101,0.9561886220865619,0.3267328153374067,0.2864395039126311,0.9723185200556062,0.7400075463289792,0.38350906494003023,0.23439100754737063,0.9884264069313964,0.7902746344266991,0.5973806796630878,0.18608243071809055,0.9976569835011464,0.11704250010810846,0.00035117785860755424,0.8632097675257173,0.9998802782103435,0.15781763991651565,0.4792818028190757,0.8711943011840353,0.5503215900293024,0.10958470910543933,0.4202523121465884,0.7721838952076534,0.008055235860854826,0.07533218349744764,0.9857746438824497,0.9395786725416239,0.6659307706284596,0.7296206848042036,0.9683276706618217,0.2971359084655125,0.3157453605782807,0.6753927594417148,0.944286388308152,0.35269652338599444,0.26198444453084907,0.6186952083280476,0.7636848314836634,0.41033125162929546,0.9195781836465613,0.9935538661770178,0.8121491430696772,0.5703578751236607,0.16522657274592595,0.9995586983594751,0.1352353638545653,0.5112256158837925,0.8438324427625593,0.998529471498556,0.17831115473629278,0.0046222581499024695,0.8889944323154804,0.5775080181907633,0.8064689823651845,0.3933217490986863,0.7487894771182527,0.0136932338775132,0.06150656629316481,0.978555007102939,0.9519756101461034,0.03088281592112191,0.03613463183231136,0.9580265487631598,0.32248527417764994,0.290549460291345,0.6494691906302799,0.9310488267071966,0.020031025498996047,0.23824475433835712,0.5918989394194614,0.7865695969908195,0.437422942804098,0.18962570506384152,0.99719792141393,0.11414205593331844,0.0005417029667190709,0.14537689520923147,0.9999589613469636,0.15452454830798906,0.48381447553311124,0.8234217101813877,0.5458068334289836,0.19977152354166916,0.4247332460634545,0.9056254187196602,0.6044614916277846,0.07774384900138659,0.3667118135564601,0.9373991736385161,0.020792854334526822,0.7336403653523742,0.9698970462324369,0.9630141095377032,0.04106861313356458,0.026604224762345363,0.707389076741735,0.34836817041995904,0.26598307542617405,0.6230963837280223,0.9165157235224224,0.013074155626944806,0.21529178431426893,0.9928075840580546,0.8085930613957414,0.003046955506559146,0.16860934022243246,0.9993476202283911,0.132148171627833,1.7125401412798613e-5,0.8471113530698116,0.9988565694506059,0.1748520787355211,0.4564519816899799,0.8020389153912767,0.5730239412008407,0.22213424598264075,0.39775741675776866,0.9210372750280234,0.012659014866109985,0.06370408515085119,0.34050248318346377,0.9500173795777045,0.6873320854938798,0.7090636281410555,0.9598267832611309,0.31825234115965406,0.0526337545385131,0.0184966354207316,0.7320103668031486,0.37470680468654755,0.242120041639392,0.5963536036949815,0.7828409770083211,0.43292546476624316,0.19319452090581712,0.9966979436354342,0.8624894807591457,0.0007733297782130943,0.14858898871786652,0.48197368124492485,0.15125988675984137,0.0009952745925806417,0.8268674429992147,0.9962548359714827,0.1961568595968572,0.4292203738744118,0.9029567035352302,0.6000215713948032,0.2453321096344087,0.3710888833081909,0.9351836800363484,0.019518166963533035,0.050975633303772916,0.971427752770764,0.9612830328765396,0.7124558588009251,0.6838585383925317,0.9483744849329045,0.3440522956258147,0.06554348045055708,0.627487429211082,0.7559343366088348,0.4014220147251618,0.21903208062624852,0.5693212274663281,0.8050115848078543,0.4601797656435473,0.8901489991303259,0.9990954495018025,0.8497941034715901,1.579913945781719e-7,0.129624822846853,0.5093841345877407,0.17141975999054965,0.4609722532106692,0.8056411143751633,0.992161580566448,0.21837485817034286,0.4022014982210754,0.9185735620302653,0.6267185811091538,0.06593750791760394,0.34480779949759377,0.7039794519464944,0.027821434336070816,0.039596749540771525,0.9615891774345637,0.9711622739780217,0.050626500114511586,0.6581008514270124,0.9355745717769304,0.37032095972160395,0.0797589899596407,0.6008003387854977,0.9034268384893832,0.00838785851442364,0.1967885845570148,0.0004940783543200267,0.8262654630696141,0.48755374848328775,0.8724257789954997,0.9999928958179254,0.14802392392943875,0.0007297639575588599,0.11177384048055189,0.9967885275452395,0.19256719968282388,0.43371332632221243,0.07718411637278039,0.5955734201303547,0.24143929700693356,0.3754765614861155,0.9329323740537678,0.6530347309739984,0.05298935211420969,0.3189931546070862,0.9595139960523247,0.03754386104486862,0.029601633739399114,0.26505842287259995,0.979625410265281,0.06331633717864621,0.6318679834268396,0.7520273370407334,0.39697938149406703,0.09523755754938823,0.5738102872509427,0.8866332951359801,0.0041286490301157275,0.17545640751489855,0.5147133019579977,0.846538732062583,0.5149651392346232,0.8535832121563556,0.9993875852582337,0.16801448095568505,0.0029599548047841706,0.8092181613683849,0.9929413139074348,0.21463864601277594,0.40665362777375275,0.06319367816678878,0.622325734067211,0.2652808546335875,0.34912588697566316,0.9459899833855646,0.6788909263152226,0.04138471204932159,0.2937225360092698,0.9696247809216055,0.04865622578756712,0.6623973433589614,0.24122368428549518,0.9866470053044145,0.07731865164465901,0.00740023666060402,0.7753142186696649,0.4239474375515476,0.20040760025272503,0.546598394731046,0.8686777035864044,0.0013598088858969848,0.1550996645623221,0.4873018798813631,0.8657704593322617,0.0005053395498986757,0.11464811378027129,0.9972813371177878,0.18900283920188388,0.6010471011881654,0.7872206730382678,0.9876125373213491,0.0851865286289864,0.37987448701695103,0.05051608602126029,0.648710391104347,0.28982787390286685,0.32322867312960457,0.9577071446436329,0.035838498316729805,0.3450473240134231,0.2690718959750098,0.978324081998845,0.06112512972457612,0.6362376858882612,0.21816671252466058,0.39254522609371256,0.0925913587659124,0.003443628698495016,0.7977736278713361,0.45114407387906547,0.12979412376715338,0.5192464481050414,0.8432548430931301,8.965998713755807e-5,0.13577953903948298,0.4599286227216258,0.883902842836601,0.0024876016512027643,0.09776735702803374,0.5595371327343361,0.21092591697241442,0.6277310338046292,0.7643599267600989,0.9808182137258519,0.26128563289911955,0.35345639027118614,0.7122277595041104,0.6746480906654743,0.04321041518535551,0.29786275548619856,0.9680486412383115,0.046723093696604046,0.3713323301532714,0.9399569416048194,0.9855857530435305,0.07491309686117259,0.6096685583612341,0.19595680662042003,0.4194676271995773,0.10908855555892244,0.5511124523858087,0.8193380616234305,0.0017146129192178727,0.14876826068448945,0.4918366551926861,0.8626629693914236,0.5378103787433013,0.8370421257530417,0.4326758023485552,0.1854640714743967,0.00596516535313979,0.08209553319256174,0.5866538893533595,0.2337178232193553,0.018564590896578137,0.7407046317974358,0.6443738134754646,0.2857209733029372,0.32747873861767884,0.6870984652207798,0.9499075188321008,0.03275388067967694,0.2731043727429723,0.33118308660913076,0.05897003840842441,0.3980040542388636,0.9262765747317279,0.9913879686933749,0.08997868668371861,0.5827698157906405,0.892321448527754,0.9988735354574572,0.12676065876736758,0.5237780104125416,0.8399427068028714,0.0001961220275500941,0.16879804442336133,0.9997542209104298,0.8809810916608303,0.5650762764975849,0.8162956240194181,0.4056253286523587,0.9166550548763421,0.010927578641675317,0.7681989485123107,0.6135102028158279,0.257310055581749,0.026685373756988318,0.7163258854747644,0.6703908827767193,0.3108003414187589,0.9666478833295381,0.6614068359374589,0.9372770524036057,0.02370168076430812,0.24902793761701159,0.9844845406864644,0.07254252356845009,0.009036193035460327,0.9113150095475506,0.9957132900616744,0.10627661871146449,0.5556223038658626,0.8747445711777526,0.9999621258404824,0.16172386900144303,0.4963721022865761,0.8328975247766952,0.00017981990789117663,0.189823274337947,0.9981441514086289,0.8981541537507078,0.005286958530469565,0.7945984779311228,0.3788585033588827,0.9311764447894103,0.017359926703514383,0.744670264119,0.9740407510234257,0.059250544478609835,0.036228730447866064,0.030795701284532906,0.6958958326602571,0.3364483597898399,0.9561066155936346,0.6352300892963969,0.7490079901560415,0.01608102233714276,0.22570581319333882,0.9905295445162476,0.08739975630628882,0.004588141800600243,0.17811831686436147,0.44212446370124414,0.12375790858959024,0.5283076159666215,0.856041377862621,0.9995480518285973,0.1420541433065295,0.46897709801200366,0.8780279885745661,0.0016657555571820692,0.21178075791274464,0.41008339944417077,0.9141305410534282,0.010004614968418035,0.7720158994856513,0.983227517328126,0.944401909555309,0.025242876753414634,0.7204062094338558,0.9646140460157491,0.04697443927930417,0.0471659778719003,0.6656930796946406,0.7208120065593042,0.3625879418489899,0.25296120497368446,0.6086469009874494,0.7723952066007442,0.009914809717313067,0.9138769893133238,0.9951002341068134,0.10349708237017213,0.0016290788743666962,0.1576339778461081,0.4694284315312659,0.14237001531444915,0.5009078479294673,0.8362680820857687,0.9976325579446217,0.12346024409198114,0.4416753348207749,0.895394157702325,0.0046494629119393505,0.08714450890094438,0.3832640648210567,0.9288622356349954,0.016194980199096543,0.05664200428783511,0.9754637281743883,0.9562916992930319,0.3360211103270418,0.6954797114430782,0.9537909172626751,0.03605992797860602,0.05946424351448848,0.6395911999934695,0.7450645175065476,0.017242003897406766,0.22950937765892215,0.5817371682838506,0.7949637238737547,0.4476731194627886,0.8978804640262521,0.9981828719925557,0.18946873682643112,0.00016789788744037137,0.13817863923594137,0.49682428393625877,0.16205699914852084,0.4735053513041079,0.815484113603968,0.5560716664571337,0.20808629980051202,0.4145488697035003,0.9115719473668675,0.009121974271261046,0.07230811552319044,0.35679558664152833,0.24941914119657582,0.02383944873032301,0.044640309766519004,0.9662709059429994,0.966810078568276,0.04526152355518115,0.6699656881436202,0.7167334757936319,0.3582325300082475,0.07308656424393506,0.6130697710600033,0.7685804732111435,0.010833756765570468,0.20687052518033516,0.9944464350847377,0.816645711022288,0.4750024650671266,0.8806880865419415,0.999768193131277,0.13921490702958522,0.00020899050176931278,0.8396109670325069,0.5242296811351684,0.18275968975044998,0.44618248584117715,0.7937519398078636,0.5832157351794917,0.23077138913308543,0.99130420213313,0.926512734308029,0.6410300662681088,0.05875717424986332,0.33075751741104986,0.27350741751124774,0.032915044680353334,0.6996463768692082,0.9556766801801625,0.9759254337983077,0.057337053133918736,0.64394082337292,0.7411008778698036,0.38472226048567054,0.23333520149108972,0.5862085045461866,0.7912891951406129,0.005895726393983058,0.18511268988713953,0.9977760300888566,0.8373760016098981,0.00030599770427031103,0.8623515295215282,0.49228879032814593,0.15872805368662746,0.0017522332111813421,0.8189899802320078,0.9948886545094027,0.10880677340778167,0.41902137195535455,0.9089794843698926,0.6101096943117676,0.25426566025510083,0.9854777600791651,0.9401716131471658,0.022475205179402602,0.04653241319998741,0.9678893952423397,0.9651658854437828,0.043394490833190746,0.6742243096804977,0.25205154416321013,0.35388878457596307,0.07074303119029535,0.9809420656511252,0.7647436376460262,0.41155846471728585,0.21055707730287337,0.5590881335049974,0.8131224309491607,0.0024427543117061523,0.8836129741637808,0.4998609375191314,0.8570922895778816,9.842756341632564e-5,0.8429259045223396,0.5196982971720998,0.17926691244505083,0.4506940656427547,0.7974102510371281,0.9902369508946594,0.09232938155951376,0.3921036439078228,0.7477068989435839,0.6366727125414731,0.06090865521493494,0.9781921872093102,0.9525075313528055,0.031315790838862434,0.035670574583055226,0.9575249442957312,0.9745153756108671,0.2894176567298281,0.6482786014930925,0.22862948287160473,0.3803134838653819,0.08543916530041923,0.5906727464897294,0.7875906954730241,0.006610538090072726,0.18864889015951725,0.5317901697426989,0.8340145596139541,0.00048521862127293147,0.8654620063083538,0.4724599700602585,0.15542719236788177,0.0013933398207985892,0.10535436859554864,0.5470485996718223,0.20076975260532182,0.42350053814606015,0.7749366385422618,0.605680798094249,0.07707726677028648,0.36551020444988713,0.7235324228452298,0.6628249532176855,0.04846183364341833,0.30941356045572066,0.2941345369220091,0.04156503334883699,0.35923678771816453,0.9457853762991649,0.9824386830274696,0.26488168072469753,0.621887233597732,0.9158244705453604,0.4070979077360257,0.10138128540354219,0.5635896345895967,0.8095733832286527,0.0029110275048236933,0.13994051701113785,0.9994097549844277,0.8539027886628123,2.9002806714972795e-5,0.8462126217605646,0.44514177571616037,0.17580052908747063,0.00418684254452234,0.8010440876145677,0.574257494949071,0.2231719461673815,0.015326002066126387,0.7516366884585245,0.6323041116670278,0.06309627013216718,0.9794974445613824,0.9505595117543263,0.6884878143046105,0.03737213552277591,0.2843674774778264,0.31941474976822415,0.053192128032334585,0.018162053665404465,0.9327059751870195,0.9889119937458342,0.241052366101911,0.5951295267405682,0.7838685292300052,0.43416155408981877,0.1922107123127217,0.5363154004527094,0.8306256307038148,0.0007055458898996836,0.15949393040046161,0.999990280835904,0.8727273429005253,0.0010754780504189099,0.8259226756324085,0.9961009323751611,0.19714826561978532,0.008470539704442337,0.7787137738711666,0.6012432051329937,0.07951414632384918,0.02278660434896912,0.7275804301013074,0.6585297777628742,0.29923479813222137,0.9710107323673378,0.961762798570974,0.039773301652865134,0.027672891566785762,0.2599694902200511,0.3452377217790721,0.06616212899986867,0.01156799421275917,0.9183260518377439,0.4026449959060476,0.09865963028226576,0.5680859027201843,0.8059988599209972,0.9996498023735658,0.17107905428067066,0.5089320183295514,0.1299287480853064,7.219448063811029e-7,0.18007075400546496,0.999068057671042,0.8904316440665793,0.003621499111960247,0.8046531505024566,0.5697690241420418,0.9246816333761989,0.014231556406905432,0.7555457701454229,0.6279246231481361,0.06531983897712157,0.031681498433842936,0.9485744144588335,0.6842789736617496,0.3246317541241147,0.961108370825937,0.9715782312273888,0.738038575679448,0.019393253400734778,0.9349608413597523,0.3715258405543211,0.08043605418130118,0.006441944728263427,0.9026888259227925,0.429668041217877,0.1156050632354359,0.9963098755578951,0.827209493763126,0.9999243075366768,0.15093598672043135,0.48152179052104066,0.8696886966030428,0.0007986740577020091,0.11098912196974609,0.9966458572836283,0.9069624808843111,0.007659413781301305,0.7824679731292716,0.5967972806088999,0.9385060113868346,0.3742690913873736,0.7316097091804996,0.9691081262867529,0.05243198739450777,0.04198395021440837,0.9600041848713996,0.7094743087016917,0.029180347873664192,0.9498201220438369,0.9799763088865847,0.7617775483566271,0.012558105944563636,0.9207932080071451,0.9931901045867644,0.22175842439142446,0.0027993118430373887,0.1668950080552018,0.45690247320246397,0.13370581687232552,0.9988869293846826,0.8474366809989187,0.5162116874283396,0.13184205075874633,0.9993243240215879,0.8875821087772169,0.003097003938462406,0.0943592763634048,0.39551290947798,0.2156636248872384,0.013177085877940142,0.9167657174328288,0.6235346073841326,0.9510124348240966,0.3479373355841656,0.7069775321589532,0.6800549682298361,0.04088932674153167,0.2925871047702381,0.6516068854175777,0.7340400568808184,0.020664003497045613,0.9371799134900378,0.36714769702123984,0.7847297338333936,0.6040192357688772,0.9053608569117102,0.9969559292742554,0.19941004773134535,0.000651043695864939,0.8678340982940541,0.48426643723694063,0.15419779918223653,0.9999645503802088,0.8666196276751985,0.5435740954790859,0.11385463429810955,0.9971499119315883,0.9043106210422536,0.43697433177070366,0.07894860685267202,0.3688737391670802,0.23863013772259373,0.020157931726886458,0.7356199285031041,0.6499006439226434,0.29096015075980136,0.322062612703659,0.6817232724794478,0.7053472146011972,0.03072654913643441,0.26796644555479704,0.6252678536269712,0.06172403039281554,0.013588330519151315,0.21713743745525588,0.3937635728067521,0.8068261480205159,0.5770612605426931,0.8887101708759085,0.4523854114011193,0.17796511114281677,3.5970279442798514e-6,0.8487213544319022,0.5116776893825504,0.1349262364468536,0.4586856054881199,0.16556258427655796,0.5708055391258651,0.22027337089875837,0.9934812877143471,0.919823954910121,0.40988642734447384,0.06480343107478181,0.9804745899494394,0.2623822124348345,0.028580970001832906,0.7110978656930831,0.6758161456131033,0.31616580456213583,0.05163709990856541,0.9684858605122281,0.7300222783260597,0.02197419938105455,0.24404317628685074,0.5985523222302083,0.07557104819067073,0.007974595274578278,0.9079995297167662,0.4206987481718424,0.8280003788976871,0.0009029773267763552,0.8708911944766463,0.4797336149933007,0.15748806859344372,0.49058969333355906,0.8285605088517076,0.5390538435734493,0.11675192351831337,0.431440215572054,0.1864345211425602,0.5978241727274273,0.08141212046882579,0.9883294776270638,0.9340754841800635,0.01890277329644363,0.051966263154110126,0.9721699549264871,0.2868484608224736,0.3263087131790489,0.68594133633005,0.7012032219521048,0.34192398241734145,0.06443828206516444,0.9773559440735498,0.7540059971073516,0.014658583156701543,0.22088919970278825,0.5715405862651451,0.0906937111646095,0.0038396701615311946,0.8915470577881224,0.44787226792630747,0.12759168740153476,6.965326735108857e-6,0.8519574836534738,0.507142730349772,0.16973337587420778,0.4632075108293348,0.8074121561130556,0.0021707276518078134,0.09972948432016565,0.40440088595867485,0.20824889675781755,0.6245487902551281,0.06705453090705665,0.9817099657258048,0.25840120102058295,0.027088834214098023,0.04047568592357342,0.9624461864473322,0.9704072387654421,0.3008750048130401,0.6602259497832343,0.04534481227821424,0.36815726666767923,0.07854856955494505,0.984791307395509,0.7772262865242585,0.008801687960945825,0.1985741063864061,0.9958747072840679,0.8245635050248843,0.001195982930877304,0.8739177690722448,0.47520246052242604,0.1464352964905301,0.0006137106198459974,0.8603912346573903,0.5345303778269295,0.19080240962203382,0.43593591022845757,0.7853398587840468,0.593372088571078,0.08391008075443368,0.9892836379030333,0.9318065469119368,0.6508990693622317,0.05399818339487272,0.9736426473272981,0.28275431167161563,0.0366962563390385,0.690144098591515,0.9513325098471006,0.9789871827590421,0.2760397778618006,0.6340289950986819,0.7500887069540779,0.394786811696317,0.22466393069344254,0.9907696030738732,0.7996133566860213,0.004421117022953114,0.17716496561048034,0.9986421196802073,0.8449192868800313,0.5270623747669256,0.8551646493916427,0.9994934831710751,0.1663415642566553,0.0027213895988763004,0.8788430832448613,0.5618142423040925,0.10246410839278147,0.4088568578661698,0.7624099564004096,0.6201509228258947,0.06934125893162929,0.9829057003544601,0.9449720824286308,0.025635615498274644,0.042282319521826706,0.2957666514491646,0.3077603665036701,0.047696164021675036,0.6645158809172031,0.9388623279082444,0.3637875005465203,0.2518776760020218,0.6074292087026638,0.7734401875320132,0.42173258090228255,0.2022053442610136,0.5488298746137955,0.10425809921911572,0.00153003639598559,0.1567261237562803,0.9999108350344732,0.8642383943458112,0.49966069367536764,0.8353440623062358,0.5300040704871164,0.18725066128831752,0.0063236675156641,0.789052724227659,0.5889123205862461,0.08644228214594152,0.01918896791303909,0.9295020751763376,0.6465686366989574,0.7475329358243215,0.9750763624607068,0.9568002292303888,0.03500975434488196,0.03194215197821604,0.9532658567512078,0.333344208407215,0.28010425588616283,0.014408007571246939,0.9250731204665935,0.3903569810659547,0.2284613197949309,0.9898819039990114,0.7959698281890721,0.005043346340831867,0.1806417964786049,0.5214862980570945,0.12160014114689932,0.00013713538608556286,0.13731901091688736,0.999677040151242,0.1629772102469521,0.47226003238812414,0.8145155797094941,0.5573107785230776,0.2090997441139511,0.4133203301764323,0.7662600207293753,0.009360641073385356,0.07166342696778982,0.027429786502755737,0.9428851718878474,0.6725458302597906,0.04412661988114436,0.9658191557388238,0.3035812047047701,0.04578144762614139,0.02300875872135405,0.941017628168086,0.3594289437010563,0.2558257153995724,0.008607194495929393,0.7696315864459042,0.4172559998687654,0.10769478020417284,0.9946302614495875,0.817609914818334,0.001905110231985474,0.16003809780646094,0.9998046103913913,0.14007948521328334,0.00024660043587543257,0.1190019562655818,0.9979414377142343,0.18372464989926546,0.0056248911823366665,0.893372687345799,0.5844452357786695,0.9323334055238753,0.3864643041110724,0.7426670577069016,0.015375239210661973,0.05817196154191451,0.3295845076282767,0.9549371522118693,0.6980044275865878,0.03355658667463929,0.9551619032462353,0.32907471696250035,0.750994702270171,0.6427460191199453,0.9274438962055593,0.3859361732406372,0.23228105451037134,0.004283290239464166,0.7923019435763858,0.4444037104353384,0.18414490815181744,0.9978919797246942,0.8382954069177289,0.5036540737216976,0.14045617382413655,0.9998194774270944,0.15964059070641257,0.4767899036504976,0.10183001274421977,0.9947092441745591,0.20542267297184325,0.010466388362964485,0.9096956702936951,0.6113258881107162,0.2553525647298534,0.35994951598944036,0.7183447451425585,0.022846404426306366,0.0460084352293228,0.30408008362956124,0.9656217932411368,0.043904110039452104,0.02438847548025891,0.9431366359569702,0.355081954808101,0.7743160725772351,0.6162707334029293,0.9125854574813557,0.41278622805109316,0.2095410380260917,0.0014492905402030964,0.8140937707133467,0.4717185187889238,0.16337804819290092,0.9996572555459132,0.13694587759212173,0.5310490282132194,0.12195487910967118,0.998332108805747,0.8967941651255721,0.44945314419884236,0.08585479159850817,0.5799712017562061,0.22800606483136437,0.016779206450315276,0.9247872897748801,0.6378719442010685,0.2796172870565271,0.333855657504146,0.953036637249083,0.6938313744455425,0.035209406195047144,0.27916450800028725,0.6373868892069651,0.055817524435561594,0.01664984157378968,0.7382146517470028,0.38152475201997127,0.7968129704414707,0.5894459894325286,0.8964869698719033,0.43989840877685343,0.18767401235007986,0.5305454407009245,0.8576116903850304,0.49911832873093903,0.14362292451435837,0.999920783277104,0.1563319802140104,0.5583506630975528,0.8215154762632014,0.995346974897711,0.9128702566385006,0.422268306175954,0.07112430725749241,0.9837984108392943,0.25140694981863465,0.36430943208192557,0.9386021870749957,0.6640036183794716,0.3045443820688061,0.30826115522001296,0.9639498321172797,0.7187985292685966,0.6773030371999335,0.2549126659096339,0.6108339510612558,0.06906595433859919,0.010363943856327329,0.9151306304843594,0.40832363327824495,0.10213538941490136,0.5623524104911551,0.8791968182905637,0.46719122822811043,0.1667457000625226,0.5031495398850763,0.837923707996914,4.399082004652444e-5,0.12493891225569437,0.4439023220389557,0.176750996471374,0.5854769217697207,0.8000473868689038,0.9908730476914747,0.22421136865915975,0.3953170951472487,0.7505582063552305,0.9761525641692721,0.2755549952527121,0.33814047982378986,0.6975410295858762,0.030180379187368656,0.330058929975355,0.05840838271551185,0.9734685995724496,0.7431080727595164,0.6514160563647993,0.9320797291196645,0.9891716621875121,0.08360958084454218,0.005549674948336192,0.8992340659315594,0.4353980530323516,0.11932888460707114,0.00023101055469587628,0.8315601724620177,0.494582656295169,0.1468190023875221,0.9999809493645526,0.8172200768267035,0.0011587856055602641,0.10738216727057076,0.9959439422487162,0.1981415558580819,0.6123462747278527,0.07347360545958043,0.9849237738278351,0.24748179226666334,0.36868051449902184,0.9364064652607251,0.9670756140861274,0.3003776228197506,0.3124580054914314,0.6720721916985266,0.04026218616758159,0.35608424536199995,0.2588761900936569,0.9815643304216175,0.06678347670487633,0.6250739860239658,0.9176416413237941,0.9941082809459292,0.09940469226285692,0.566850154372358,0.8821375808545755,0.003276128444621773,0.13766650832759708,0.00014920601286344537,0.8515720430803094,0.5219903664945723,0.1279538101399157,0.9989903951347843,0.8912095287297366,0.0037728758233513404,0.0910054573472181,0.9917155261093636,0.2204393678402789,0.014528503625603928,0.059815970871704094,0.6291298692942323,0.271511173603594,0.032119834980988415,0.9491239221516935,0.9565948418757801,0.0386296525012057,0.2873391992113773,0.9719912545165046,0.051725761102074,0.3825421076740697,0.23523415655218244,0.9882126924886665,0.08111572875233392,0.006243928571301127,0.7811551813125985,0.9975598293707493,0.835718132845793,0.5395945289011952,0.8638925597045002,0.0008909882982320871,0.15709314581312434,0.48027554647479337,0.8705272440748881,0.5493319834059952,0.11020682372005053,0.9965000971016014,0.9076857736875985,0.6079219159024958,0.7814380247356305,0.9860092311961601,0.24357741508521463,0.021815459952836402,0.04748133423425693,0.6554074224973945,0.2962272910077487,0.3166702890742511,0.9604915117390431,0.9447417480908078,0.3517463978558723,0.2628595569740013,0.9803242212983507,0.06453664956919647,0.012281863524898295,0.2123878917007233,0.9933937037460664,0.09670696112541838,0.00266907327274174,0.8033914209312416,0.9995159336383223,0.1345558587147579,0.5122198998380842,0.8445538389224349,0.5174581347597952,0.1775504092079463,0.45292533983597605,0.8883688045190359,0.003237144592364849,0.09363138269752952,0.9925175399963342,0.9229366960364689,0.6345150073486963,0.7583668803924135,0.97884220810062,0.26748615488562055,0.0305396269114091,0.03650676799401309,0.6812178899186105,0.3215558587929044,0.29145296396649345,0.9704750680905044,0.7351414209496167,0.37813815357152586,0.23909265372606248,0.9872135465160592,0.7857540324751979,0.006978814646888654,0.1904060612780919,0.4264136602310432,0.11351031349501894,0.000588974151611632,0.8247158005061102,0.9999707145668387,0.15380626493309035,0.4848085431761272,0.8674665150659122,0.544816368443462],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],72:[function(require,module,exports){
module.exports={"expected":[1.0,0.9899225050584957,0.9600962438511728,0.9117235123637619,0.8467542144238017,0.7678072611166411,0.6780650025326793,0.5811449472995917,0.4809539408826871,0.3815306807234797,0.2868829164271498,0.2008258974575322,0.12682858050786278,0.06787379592714421,0.02633800988900087,0.00389552908815044,0.0014510094715952104,0.019102989575595086,0.056139918439361225,0.11106883820975844,0.18167556524233303,0.26511394379897835,0.3580205745283491,0.456650393025778,0.5570276333031474,0.655106090836018,0.746932224985648,0.8288045261424891,0.8974227235036395,0.9500208189217648,0.9844785842348869,0.999407027620413,0.9942043838275596,0.9690803713223464,0.9250477385404992,0.8638814400184593,0.7880470880120805,0.7006015637162781,0.6050697944460435,0.5053026638876706,0.405321783055224,0.3091573792321595,0.22068583759073812,0.14347344418435282,0.08063262902901785,0.034696504111985216,0.007516753699280787,0.00018899298005481402,0.013008603840642341,0.045458828026606835,0.09623159765768147,0.1632802634173034,0.2439020949453884,0.3348472278443947,0.4324496656472443,0.5327750560610403,0.6317792846281861,0.7254714928983912,0.8100749498520956,0.8821792918512665,0.9388779943289265,0.9778855337354428,0.9976295169466167,0.9973140643987,0.9769518919775162,0.9373637984413336,0.8801455790396515,0.8076036990387174,0.7226623201535334,0.6287454276483535,0.529638809559646,0.429337451657412,0.33188449964902533,0.24120828005808953,0.16096394946167536,0.09438615520237414,0.04415864681971843,0.012306094160280723,0.00011247297722155603,0.008069307893741384,0.03585585905536248,0.08235205114696148,0.14568362360609993,0.2232976820285193,0.3120656052895356,0.408409160198723,0.5084447400069986,0.6081399125164629,0.7034759673404911,0.7906099100381558,0.8660293731424206,0.9266941996215046,0.9701589915475741,0.9946716840375556,0.9992441709531676,0.9836921354393471,0.9486424797329938,0.8955080547464331,0.8264307080757088,0.7441949461675343,0.6521156909202886,0.5539046552500039,0.453520724017298,0.35501037145893893,0.26234454789345724,0.17925861079357308,0.10910175260277033,0.05470199485511673,0.018252190684680536,0.0012216309600879827,0.004296817199207825,0.027353788706986515,0.06946311942845801,0.1289273830943254,0.20334957643935014,0.2897297423556299,0.384585898103048,0.4840943939625923,0.5842440444797266,0.6809978192684198,0.7704555756247599,0.8490112731999688,0.9134983334144273,0.9613172841756953,0.9905405445461006,0.9999901254914476,0.9892851145950321,0.9588570306294832,0.9099324290437383,0.8444834595378337,0.7651483687482354,0.6751251525793533,0.5780426450535834,0.47781424008470785,0.3784801426491674,0.2840445082046068,0.19831403526463082,0.12474451745891413,0.06630154056143744,0.025340939788514316,0.0035138361284671737,0.001700079688187639,0.019972782953085855,0.05759537362427691,0.1130512858330604,0.18410509288039484,0.26789261724195496,0.36103638550598816,0.459781774258486,0.5601483588768488,0.6580903643659275,0.7496597504662644,0.8311653570768665,0.8993216948445325,0.9513813831728215,0.9852458970786969,0.9995501586917955,0.9937175635159096,0.967983223344556,0.9233844889093625,0.8617191342930315,0.7854728886922946,0.6977192367246676,0.6019955263252637,0.5021603783235175,0.4022381455153191,0.30625669108317616,0.21808502551332498,0.14127734686072585,0.07892977109782551,0.03355552774203885,0.006983651624935527,0.0002852545351407776,0.013730348723822006,0.04677696271626641,0.09809298817110546,0.16560987714058273,0.24660602519647512,0.3378164792495789,0.4355645477424626,0.535910008012061,0.634807936585351,0.7282717599624813,0.8125339533144726,0.8841979093321175,0.9403748553984432,0.9788002999542168,0.9979253141068467,0.9969789689228579,0.9759994115574535,0.9358323275435381,0.8780968512249343,0.8051202984838912,0.7198443526847651,0.6257064854772455,0.5265013923836827,0.4262280286993063,0.328928411685416,0.23852468693502493,0.15866102676359284,0.09255673369666922,0.04287647045020482,0.011622847430490468,5.56975490312861e-5,0.008641292383501809,0.03703354677984294,0.08408796953785924,0.14790779782822105,0.22592045566394292,0.31498125438603397,0.41150015500020315,0.5115864825756656,0.6112057592728878,0.7063423340640085,0.7931612535440833,0.868162848825581,0.9283238071204001,0.9712190414168592,0.9951194456884564,0.9990615951225772,0.9828865817553316,0.9472464200482242,0.8935777641985696,0.8240439966376778,0.7414480221290608,0.6491192827338795,0.5507795480689743,0.45039289084888195,0.35200589519486686,0.25958453891109123,0.1768543249992443,0.10715010670814984,0.0532816596667271,0.01742041988522708,0.0010119532136662612,0.004717684611540929,0.028388236121203392,0.07106944829019307,0.13104084231968366,0.20588497252972088,0.292584873545963,0.38764567411278616,0.4872354752826375,0.5873398141856798,0.6839234869460737,0.7730932076691786,0.8512545467169457,0.9152568220937879,0.962520103374334,0.9911392086464901,0.9999605023558145,0.9886283983313622,0.9575996934570781,0.908125154198609,0.8421990982323962,0.7624790035404905,0.6721783855268131,0.5749372602764548,0.4746754155805759,0.3754344043703378,0.2812146297994149,0.1958140890743305,0.12267527626381475,0.06474641543229004,0.02436261778782567,0.003151753396261725,0.0019688317720745196,0.020861536462001284,0.059068302922286264,0.11504901716994786,0.18654709774634837,0.2706804584702759,0.36405768527317184,0.4629147440321068,0.56326670870867,0.6610683936372711,0.7523774148775164,0.8335131076305985,0.9012048937634276,0.9527241187465885,0.9859940436634919,0.9996735585139209,0.9932112423310462,0.9668675909494204,0.9217045164232293,0.8595425413727849,0.7828874137545855,0.6948291002118813,0.5989172295817514,0.49901800742872426,0.39915836937637555,0.3033636554139839,0.21549534852321817,0.13909541837672418,0.07724354461296967,0.03243297501181441,0.006470022727174951,0.00040125384033778966,0.014471300302309031,0.04811299882493325,0.0999702532214315,0.16795269861641648,0.24931996401149614,0.34079213658495994,0.4386819749113785,0.5390435415883569,0.63783126389397,0.7310630107408378,0.8149806123000259,0.8862013517508027,0.9418543225268566,0.9796961545023473,0.9982014441959912,0.9966242437546936,0.9750281300963497,0.9342836421255323,0.8760331893278901,0.8026248462771225,0.7170177017962338,0.6226625781470739,0.5233629284547595,0.42312151958910293,0.32597908071330767,0.23585142157282052,0.15637158628391068,0.09074340539900178,0.04161234956149917,0.010958890638191776,1.8668938003507662e-5,0.009232684576315486,0.03822952076915148,0.08584031563636407,0.15014587900014814,0.22855405490248965,0.3179042113593289,0.41459464537170054,0.5147277675010474,0.6142672136204287,0.7092005506708526,0.7957010177567433,0.8702817828000209,0.9299364966709094,0.9722604790603264,0.995547651094538,0.9988593073400334,0.9820619550005614,0.9458326950090301,0.8916319281027116,0.8216444860988258,0.7386915613683992,0.6461169846289397,0.5476524351955615,0.44726701706376026,0.3490072644070633,0.25683402586688164,0.1744628028238412,0.10521397761201873,0.05187896897460054,0.01660771003055206,0.000821984514186358,0.005158114701702909,0.02944131127298477,0.07269271906556235,0.13316887470643513,0.20843198558550802,0.2954481972260047,0.3907098878974765,0.49037706077637355,0.5904321341406644,0.6868418900075486,0.7757200530687862,0.8534839463697794,0.916998908944952,0.9637046539381071,0.991718473713615,0.9999111317631562,0.9879523822065113,0.9563242819963491,0.9063017592121774,0.8399012207352289,0.7597992709280845,0.6692248177665112,0.5718289156249123,0.4715375913478592,0.37239358618761065,0.27839339298625976,0.19332615762954586,0.12062093865359891,0.06320848196417139,0.023403082528713537,0.00280929519309131,0.0022572551080812797,0.021769214998340336,0.060558648155497,0.11706195331388797,0.18900148338580253,0.2734773573696929,0.367084354494553,0.4660491786003232,0.5663825596298099,0.6640400610237466,0.7550851108770508,0.8358476850721961,0.9030722458776704,0.9540489726076015,0.9867229944389111,0.9997772222127406,0.992685440271661,0.9657335182022271,0.9200078874376802,0.8573517472289787,0.7802907653200835,0.6919312683325773,0.5958350258021771,0.4958756753207072,0.39608257628366383,0.30047838649390923,0.2129169089075214,0.13692774491427268,0.07557401617705084,0.0313288902599379,0.005975887293349247,0.0005369863139040865,0.015231429310013311,0.0494668835818311,0.10186331866038045,0.170308635307877,0.2520438041951052,0.34377408231808426,0.44180182402174695,0.5421755330215114,0.6408491471386129,0.733845134984441,0.8174148301706676,0.8881895399753207,0.9433163372781235,0.9805730619953572,0.9984578963074446,0.9962499029051737,0.974038085957895,0.9327178033573733,0.87395467485907,0.800117440983823,0.7141824791350929,0.6196138258861393,0.5202235417360322,0.4200180470277488,0.3230366232254224,0.2331885895602031,0.15409571845111025,0.08894624193227574,0.04036633408389151,0.010314250008360282,1.3886066930757224e-6,0.009843461113331897,0.03944373378466748,0.0876090202282821,0.15239777872211463,0.23119837572230928,0.32083436075826,0.4176925090867607,0.5178684707086215,0.617324154637657,0.7120505042672417,0.7982291023604884,0.8723860913718984,0.9315322045749943,0.9732832633432547,0.9959562833425524,0.9986373155955028,0.9812182877462163,0.9444013604548223,0.8896706233155247,0.8192322712350155,0.7359256727602812,0.6431089151903426,0.5445234401446898,0.444143226127746,0.3460145975353871,0.2540931174006369,0.17208413872778844,0.10329344178774025,0.050493978182312715,0.015814093221053593,0.0006517323650385154,0.005618090073578441,0.03051297256795088,0.07433286763850255,0.1353113962015996,0.21099051500474914,0.29831960030014987,0.39377841842669775,0.4935190263572354,0.5935208822041212,0.6897529131817126,0.7783360080683057,0.8556993841015673,0.9187245251589453,0.9648708890795963,0.9922783168676539,0.9998420156635124,0.9872570929217883,0.9550308466235196,0.9044623161049614,0.8375899178080588,0.7571092767551393,0.6662645659586217,0.5687177338724034,0.46840089132427637,0.3693578082074367,0.2755809091983985,0.1908503391986781,0.11858158577052635,0.06168780090234638,0.022462371910969114,0.002486475045394121,0.0025653383040530886,0.0226957827105852,0.062066350458282515,0.11909001475789605,0.1914681528552606,0.27628320346819774,0.37011627362270216,0.4691849541593013,0.5694957885703387,0.6670052491502263,0.7577827315160518,0.8381689971904815,0.9049236774305908,0.9553558924267619,0.9874327206128457,0.999861145693737,0.9921401781058915,0.9645810498965581,0.9182946689662251,0.8551468383936358,0.7776830459514386,0.6890258555455233,0.5927490367273636,0.4927335061154074,0.39301088772490894,0.2976009982854022,0.21034980850962426,0.13477441209209473,0.07392125173313047,0.030243317095586697,0.00550126484083574,0.0006924465946687719,0.016010705723292606,0.050838563511198476,0.10377210971558876,0.17267759416009554,0.25477743816101844,0.3467621986677957,0.4449239718457176,0.5453058586040764,0.6438614671187691,0.7366180228049031,0.8198365107794447,0.8901623954760731,0.9447608419055611,0.9814309877971092,0.998694660311858,0.995855961160006,0.9730293182469225,0.9311348730865858,0.8718613899157097,0.7975981816415729,0.7113387966870643,0.616560349114273,0.5170833562272185,0.41691773359630935,0.32010115544304674,0.2305362960738026,0.15183351315745552,0.08716531428098029,0.03913847323254377,0.009688951003022472,3.8572376399037545e-6,0.010473597870089002,0.04067613786731983,0.08939401345316228,0.1546634080485494,0.2338533136778801,0.323771586847739,0.42079362378591256,0.5210084681466146,0.6203764615814671,0.7148920822856104,0.8007454075009462,0.8744756914251999,0.9331108678052431,0.974287353867638,0.9963453262923279,0.9983956286572231,0.98035561331548,0.9429524729205032,0.887693927304763,0.8168074473239912,0.7331504655518194,0.6400951932309176,0.5413926865055126,0.44102164142455347,0.3430280127844594,0.251361921772804,0.1697184266636419,0.10138857509270333,0.04912674199425182,0.01503960080307909,0.00050120349084537,0.0060975925590534,0.03160317767756726,0.07598982922639841,0.13746832217967386,0.21356045973046917,0.30119896935367385,0.3968511444996372,0.49666124792381583,0.5966059363765734,0.6926564414887679,0.7809409693427039,0.8579007724069936,0.9204336025773199,0.9660187627348058,0.9928187159958826,0.9997531567868361,0.9865425579397151,0.953719438426744,0.9026068975313476,0.8352652807427663,0.7544091272712339,0.6632977470271111,0.5656038379044348,0.46526543940336895,0.3663271903370232,0.2727772895235138,0.18838673157168845,0.11655729816499044,0.06018443231075554,0.021540523090795016,0.002183305703924998,0.002893069191309272,0.02364120300114997,0.06359135027936669,0.12113312139753174,0.1939470087261717,0.2790978859403851,0.3731533229026642,0.4723219468520709,0.572606272563833,0.669963840897662,0.7604701702439538,0.8404769522981055,0.906759115294281,0.956644826583329,0.9881231941525069,0.9999253256421026,0.9915754773705413,0.9634102315527082,0.9165649286775943,0.852927901956321,0.7750643586482981,0.6861129766087606,0.5896593842479805,0.48959162392227484,0.3899434250257152,0.2947316044395367,0.2077941487248992,0.13263550496272108,0.07228531656221493,0.029176298396747624,0.005046174116271118,0.0008676285422586916,0.01680909876227399,0.052227984434325025,0.1056965509935971,0.17505948160398327,0.25752075793606805,0.34975636760942613,0.4480482950644759,0.5484343946942319,0.6468681048538847,0.7393815646786558,0.8222455584747779,0.8921198403291466,0.9461877793540239,0.9822698980212665,0.9989117268575224,0.9954424340791215,0.9720018668077748,0.9295349138358608,0.8697534171784496,0.7950671677561179,0.7084867667719628,0.6135022684378054,0.5139424959594161,0.4138207017510704,0.31717279331133463,0.2278946458739502,0.149585059755649,0.08540069278822404,0.03792881550554594,0.009083018320282521,2.6074733338488087e-5,0.011123069957423626,0.041926684339591735,0.09119522480737768,0.15694267749146584,0.23651876390442017,0.3267157736131093,0.4238978669812218,0.5241476357914711,0.6234240138916244,0.7177251724891104,0.8032498337890104,0.8765505004248685,0.9346724240076477,0.9752727109738935,0.996714764577419,0.9981342560713529,0.9794739657822804,0.9414860896342296,0.8857019181459982,0.8143701101416188,0.730366049358394,0.6370759377867032,0.5382602979364747,0.43790238625058553,0.34004762811845246,0.2486405468603891,0.1673657600723351,0.09949945276529493,0.04777731441355959,0.014284263367542072,0.00037040383720921,0.006596603218704922,0.03271188354093496,0.07766353838255491,0.13963956744636058,0.21614171825490275,0.304086190657055,0.39992794474965554,0.4998036013645969,0.599687174804446,0.6955523602450544,0.7835348340010371,0.8600880243354281,0.9221260736949077,0.9671482295650029,0.9933396497535987,0.9996445586428768,0.9858088054830569,0.9523901092040439,0.9007355767766883,0.8329274013579886,0.7516989291269165,0.6603244781556558,0.5624873507138888,0.46213135942926753,0.36330185227981865,0.26998264469902067,0.18593543205623508,0.1145481557924456,0.05869843556947618,0.020637572479407562,0.0018997991432770367,0.003240434825124039,0.024605438527757373,0.06513358738419917,0.1231911925340991,0.19643795308864714,0.2819212936118304,0.3761953823770175,0.4754600327734739,0.5757138887522899,0.672915719407549,0.7631473209121611,0.8427714592354201,0.9085784869724871,0.9579157241668682,0.9887943877855593,0.9999697595228547,0.9909913603701697,0.9622211094156796,0.9148187348932233,0.8506950255606207,0.7724348068436626,0.6831927465752811,0.586566190399171,0.4864501528396503,0.38688030934494033,0.2918703182917294,0.205250030496838,0.1305111080087396,0.0706662752805266,0.02812787630860042,0.00461063309484544,0.0010625252373350214,0.017626576892001977,0.05363509147181461,0.10763656648268832,0.17745420355953956,0.2602736551645656,0.3527564708792428,0.4511746702733964,0.5515610177210089,0.6498689415875161,0.7421356514511278,0.8246418781040619,0.8940617972193883,0.9475970932623142,0.9830897595324786,0.999109087370728,0.9950093379960193,0.9709557722227076,0.9279179888004154,0.8676308399080688,0.7925244992976224,0.7056265020394666,0.6104397046447456,0.5108010849904313,0.41072707381870177,0.3142516524949397,0.2252637433007314,0.14735044705505856,0.08365244715305559,0.036737408682000317,0.008496475893278732,6.804021624062795e-5,0.011791851722465108,0.04319532380737895,0.09301258314658845,0.1592354970242424,0.23919462112178885,0.3296668047647813,0.42700511606124053,0.5272858496522397,0.6264666911958587,0.7205496629762992,0.8057422823047657,0.8786104364199522,0.936216811503807,0.9762392957423521,0.9970645836057466,0.9978532081615956,0.9785733799699937,0.9400022685152579,0.8836946745196392,0.8119203559578816,0.7275725341588202,0.6340512681124635,0.5351263981609367,0.4347855838102334,0.337073561256702,0.24592910015220382,0.1650262318796588,0.09762614942223613,0.04644574873994878,0.013548110748773323,0.0002593385704515727,0.0071151023426013205,0.03383904636629209,0.07935392899868993,0.14182504624177955,0.2187341886235058,0.30698115017077965,0.40300869764907993,0.5029459625626811,0.6027644757849334,0.6984405550676309,0.7861174995907976,0.862261053494759,0.9238018716623352,0.9682592449584275,0.9938410975649706,0.9995162255210481,0.985055864533581,0.951042911461383,0.8988484277545424,0.8305763719952379,0.7489787893696367,0.6573448767824777,0.559368395395883,0.45899877519208354,0.360281913530729,0.26719708510784546,0.18349653747383027,0.11255423801006514,0.05722986937251229,0.019753555741580775,0.0016359665613974173,0.003607421485244622,0.025588451204998697,0.06669300085747354,0.12526414687783405,0.19894088755519107,0.2847533149635322,0.37924233189033774,0.47859908797534184,0.5788185143909789,0.6758607680863821,0.765814077778533,0.8450524273739121,0.9103817206036378,0.9591685349794925,0.9894462750011493,0.9999944455809409,0.9903878501762498,0.9610137304534593,0.9130561565842394,0.8484482974008443,0.7697944943997541,0.6802652807884305,0.583469577355956,0.4833092169492956,0.3838216616695766,0.2890172528572619,0.20271755431324712,0.12840130513961578,0.06906419183695495,0.027098092241736982,0.004194658979588595,0.0012771289818502285,0.018463107823712688,0.05505982904578216,0.10959207955609901,0.1798616654399976,0.2630360211123324,0.35576238997895554,0.4543029739869739,0.5546856041889439,0.6528638587925658,0.744880174341306,0.8270253750172953,0.8959881894433177,0.948988727965328,0.9838905399478426,0.9992867340561234,0.9945566900171587,0.9698910758104571,0.9262841618455798,0.865493741942197,0.7899702766964931,0.7027581154643587,0.607372778700509,0.5076592473997652,0.40763697199136956,0.3113378483731814,0.22264369226957814,0.14512976331861466,0.08192064642780406,0.03556429982011322,0.007929346889294031,0.0001297520287925069,0.012479916749648379,0.044482006161870424,0.09484601668874604,0.1615417760850147,0.24188077963893434,0.33262456374282556,0.43011524829562603,0.5304229857755285,0.629504373314398,0.7233654421853549,0.8082226546013955,0.8806554180470663,0.9377439692933949,0.977187069994816,0.9973947695601526,0.9975524960287915,0.9776538914499734,0.938501068171659,0.8816722757079734,0.8094582815332096,0.7247700302915071,0.63102130367665,0.5319911109617224,0.4316713572112356,0.3341059296689489,0.2432276887450635,0.16269993449233483,0.09576873905529237,0.04513209756771769,0.012831172023380744,0.00016801207743322166,0.00765306945104649,0.03498462163294275,0.08106093430769623,0.14402467224373544,0.22133776843879566,0.3098837335496904,0.4060932815142825,0.5060882074009784,0.6058377177705851,0.7013209118783226,0.7886888641018177,0.8644197740546065,0.9254609302889685,0.969351765032176,0.9943230396237679,0.9993681624902528,0.9842837648309599,0.9496778984103513,0.896945525003553,0.8282122855156799,0.7462488154396663,0.6543590605959198,0.5562470951429086,0.45586781042267965,0.3572674933713984,0.2644207207742172,0.18107014415597178,0.11057562357357403,0.055778791725314636,0.018888507794238063,0.0013918183791640781,0.003994014676405977,0.026590202205859337,0.068269529105423,0.12735190255111495,0.20145571326485728,0.2875938381361117,0.3822940510942743,0.4817389884712219,0.58192002685329,0.6787988706105812,0.7684703355113194,0.8473197666198237,0.9121687449635814,0.9604032095376145,0.9900788300510259,0.9999993828413111,0.9897649706262479,0.9597881423551202,0.9112772633690202,0.8461878062182969,0.7671435256036765,0.6773306948773526,0.580369667428575,0.480168940312004,0.3807676028101946,0.2861725208265586,0.20019682020181984,0.1263061796884919,0.06747912951064744,0.026086986870585582,0.003798268200652377,0.0015114312993894097,0.019318658516048526,0.05650214088181743,0.11156301297494264,0.1822817721553457,0.26580774667149354,0.3587740061807231,0.4574330826431915,0.5578080306830705,0.6558527381757456,0.7476150249460307,0.8293959550710791,0.8978989409121592,0.9503626284961798,0.9846722076381202,0.9994446598970205,0.9940845080212377,0.9688078196244196,0.9246334975043964,0.8633422076919638,0.7874046008393626,0.6998817203422699,0.6043016117425861,0.5045171072839969,0.4045505183221332,0.30843149603543674,0.22003459626735572,0.14292309625891897,0.08020535901519293,0.034409535255421064,0.007381653708778968,0.00021120773350047362,0.013187237861757406,0.04578668058164159,0.09669545301676336,0.16386142358029349,0.24457713335792453,0.33558893372157694,0.43322814084026867,0.5335589202506845,0.6325369402647698,0.7261723988985849,0.8106908527091143,0.8826853645334198,0.9392538370567087,0.978115996296065,0.9977053093989291,0.9972321315504724,0.9767155365402258,0.9369825478978688,0.8796348015916685,0.8069839841147919,0.7219586484497975,0.6279861641569019,0.5288545601765129,0.42855982945925175,0.33114485057091464,0.24053641933950598,0.160386959794537,0.0939272950285217,0.04383641278343359,0.012133475509021108,9.642796537445708e-5,0.008210483295397197,0.0361485640929371,0.08278448688628143,0.14623835857136464,0.22395235486439347,0.3127938261472919,0.4091815745103202,0.5092302117671084,0.6089067793744398,0.70419331690875,0.7912488259701149,0.8665641007497906,0.9271031840452522,0.9704257466338532,0.9947854568942358,0.9992003753986983,0.9834925368716427,0.9482951239662799,0.8950269436846376,0.825835235296041,0.7435091151656092,0.6513671475299598,0.5531235732401896,0.4527385887879528,0.3542587108654974,0.26165366135906865,0.17865634794051366,0.10861239063446071,0.054345259942571944,0.01804246280507288,0.0011673642399491202,0.004400199128943516,0.027610651963090205,0.06986310985830996,0.12945437709173496,0.20398233088692802,0.2904427509345388,0.3853504194517522,0.48487961024110315,0.5850183036356341,0.6817299109308196,0.7711159891936096,0.8495733874177118,0.9139394894683042,0.961619699074038,0.9906920279505081,0.9999845711089532,0.9891227463226818,0.9585443935290276,0.9094821255104151,0.8439136412979369,0.7644820051634857,0.6743891047524222,0.5772665830573205,0.4770294469626432,0.37771825339611564,0.28333623456089124,0.19768792772664417,0.12422581440866637,0.06591115090850752,0.02509460013187509,0.0034214764146867083,0.0017654229354679973,0.020193195176453904,0.05796197001146375,0.1135492888911162,0.18471442811617012,0.2685887223643385,0.3617912005316257,0.460564872608967,0.5609281738735107,0.6588354616820873,0.7503400952440786,0.8317535246322038,0.8997939761550207,0.9517187405885005,0.9854347317289462,0.9995828586556577,0.9935928106585076,0.9677060464510853,0.9229660609747724,0.8611763221388203,0.7848275730655226,0.6969974302851012,0.601226325075979,0.5013747887513139,0.40146783471978936,0.3055327102770677,0.21743655834818032,0.14073053303494293,0.078506652665641,0.03327316059883284,0.006853417984567789,0.0003124041130213584,0.0139137871210121,0.0471092955346889,0.0985608190815741,0.1661943478885627,0.24728357577799043,0.3385597976143022,0.43634367074220126,0.5366935292144603,0.6355642722665412,0.7289704222466151,0.8131467791388596,0.8847001957002271,0.940746355156967,0.9790260379553366,0.9979961908563688,0.9968921273804171,0.9757583523038735,0.935446767672425,0.8775823326469834,0.804497561432468,0.7191384996778492,0.6249459694352636,0.5257168696928418,0.42545112345351166,0.32819044091934885,0.23785539823533336,0.158087399144219,0.09210189007531044,0.04255874556409933,0.011455048763335252,4.458906170512478e-5,0.008787321858902353,0.037330827772793895,0.08452451865750782,0.1484660177884492,0.22657784462932212,0.315711313020805,0.41227345465557885,0.512371851558075,0.6119715393746524,0.7070576567045608,0.7937972840823672,0.8686939488835446,0.9287285680653317,0.971481147343316,0.9952283311118091,0.9990128708736363,0.9826822119075642,0.9468946427460914,0.8930927595779522,0.8234453152250882,0.7407597967601417,0.6483692557592288,0.5499979530608139,0.44961123388617596,0.35125568485396597,0.2588960161556574,0.17625524416761745,0.10666461673653116,0.0529293306460491,0.01721545419118431,0.0009626130092382779,0.004825958799369867,0.02864976017094978,0.0714736801727403,0.13157148745600672,0.20652064062511155,0.29329994083240996,0.3884113162422846,0.48802082923659956,0.5881132223620568,0.684653773276925,0.7737509343273317,0.8518132007539853,0.9156938841768798,0.9628179555397739,0.9912858444794843,0.9999500109689011,0.988461202632137,0.957282533100816,0.9076708139128085,0.8416258924648079,0.761810038203959,0.6714406266006131,0.5741604468079815,0.473890860904972,0.3746737338706472,0.28050850608809447,0.19519097598399587,0.12216029147047813,0.06436031796257868,0.02412097122287654,0.0030642985042400595,0.0020390938579206708,0.021086683262449946,0.05943925877434025,0.11555082885073309,0.1871595372372546,0.27137883834769366,0.3648138538584178,0.46369822018480994,0.5640459105209114,0.6618119114999299,0.7530552776004312,0.8340979905811785,0.9016732203217693,0.9530570106785772,0.9861780821021321,0.9997013248734508,0.9930816173500749,0.9665857998083079,0.9212819181171723,0.8589961708309496,0.782239295162458,0.6941053592167963,0.5981470401685767,0.4982324159171208,0.39838904294428046,0.30264160559436065,0.21484968112958336,0.13855216024870315,0.07682459447471068,0.032155220734893464,0.006344660580923145,0.00043333717029608865,0.014659535830118642,0.0484497987802503,0.10044204120491973,0.16854045686389812,0.24999999999997624,0.3415370380776105,0.4394617149439482,0.5398266888560207,0.6385862497461037,0.7317594017130242,0.8155903368864101,0.8866998319655077,0.9422214646425846,0.9799171590277899,0.9982674024432215,0.9965324969481164,0.9747823765478639,0.933893788155683,0.8755149499423692,0.801999111695046,0.716309695365944,0.6219008395934502,0.5225781634434286,0.42234536198190387,0.32524281740762506,0.23518473132760898,0.15580134336950607,0.09029259629563197,0.04129914637510462,0.01079591858284601,1.2497413959589032e-5,0.009383562357572595,0.038531365975442766,0.08628096089347786,0.15070756190670792,0.22921413403194496,0.31863607893518076,0.41536879982692654,0.5155130026851688,0.6150318767190617,0.7099138181300153,0.7963341377794879,0.8708092343310927,0.9303370181497634,0.9725179254742542,0.9956516447838106,0.9988056563211261,0.9818528219449678,0.9454765100660156,0.8911430490800718,0.8210426197000532,0.7380009688159357,0.6453655036945037,0.5468703580605778,0.4464858692415502,0.3482585339505369,0.25614789408569794,0.17386692767611905,0.10473237881302533,0.05153105976209238,0.01640751461781681,0.000777572774314228,0.005271276871023189,0.029707485786706567,0.07310117643446923,0.1337031500222705,0.20907054222102545,0.29616529497623756,0.39147662056646537,0.49116252138590627,0.5912046607894083,0.6875703421619239,0.776375066837237,0.8540391181604201,0.917431859794261,0.9639979316060692,0.9918602561833687,0.9998957037862133,0.9877803656843127,0.9560026109114228,0.905843400119448,0.8393246500804499,0.7591277302626354,0.6684853768811231,0.571051381366665,0.47075330610697,0.3716341644862706,0.27768944709783283,0.19270606359865067,0.120109692458023,0.06282669192771384,0.02316613860001887,0.0027267485771307887,0.0023324332572741135,0.021999087483013657,0.06093394882044484,0.1175675537969002,0.1896170029416392,0.2741779844175127,0.3678418467722347,0.4668330016095372,0.5671611174808037,0.6647819700653566,0.7557604647707725,0.8364292603163346,0.9035365991858867,0.9543773859073712,0.9869022293967994,0.9998000538712198,0.9925509482870432,0.9654471239436684,0.9195811354519889,0.8568018398800424,0.7796398693620581,0.6912056213682682,0.5950638786460243,0.49509011289908117,0.3953142646018294,0.2997582961802673,0.21227406678794242,0.13638806394160263,0.07515925088045472,0.031055759820090123,0.0058554015927623215,0.0005740021287136132,0.015424454533482013,0.04980813737110662,0.1023390450821392,0.17089965783962868,0.2527262987306127,0.34452053751640954,0.44258215028894926,0.5429582754215773,0.641602753341178,0.734539227138757,0.8180214294360382,0.8886841943476145,0.9436791072496507,0.9807893243158621,0.9985189334471767,0.9961532544582653,0.9737876478212946,0.9323236706872678,0.8734327351354534,0.7994887335863565,0.7134723472462917,0.6188508949080769,0.5194385654009432,0.419242667715845,0.322302096461051,0.23252452410242563,0.15352888276508697,0.08849948515300071,0.040057664968118134,0.010156111001894064,1.5428969601938292e-7,0.009999181241085953,0.039750131281984735,0.0880537442182236,0.15296290238967586,0.2318611189438935,0.3215680083679415,0.41846748776431386,0.5186535410791802,0.6180876705305246,0.7127616883722231,0.7988592868606514,0.8729098735428185,0.9319284707679453,0.9735360400760358,0.9960553811901872,0.9985787399257422,0.9810043997431266,0.944040781939493,0.8891778892006053,0.8186272436226647,0.7352327403013713,0.6423560099782225,0.5437409117733073,0.44336261829986356,0.3452673765367248,0.2534094036945598,0.1714914927999327,0.1028157531835256,0.05015050251966652,0.015618675996980136,0.0006122508438985985,0.005736135754694616,0.03078378703229756,0.07474553436049086,0.13584928059404539,0.2116319349586383,0.2990387001901911,0.3945462113508551,0.4943045625981603,0.5942924968119478,0.6904795023871576,0.7789882830752743,0.8562510517176944,0.9191533476737325,0.9651595806661891,0.9924152403740333,0.9998216517059164,0.9870802623709181,0.9547046775153274,0.9039999563095862,0.8370100050395175,0.7564351872853572,0.6655234723204533,0.567939509535513,0.4676169064958555,0.368599665300139,0.2748791689373947,0.19023328871969536,0.1180740983659308,0.06131033337911279,0.022230139977356622,0.002408839965917453,0.0026454295472064238,0.02293037179997187,0.06244598111247268,0.1195993840728738,0.19208672816425953,0.27698605001305376,0.3708750596733362,0.4699690930654732,0.5702736717085238,0.6677455200668926,0.7584555499055512,0.8387472417570787,0.9053840391475882,0.9556798141226088,0.9876071450105599,0.9998790417493639,0.9920008244298013,0.964290063832605,0.9178637801567642,0.8545934159578379,0.7770293983364844,0.6882983312736451,0.5919769622871411,0.49194800381193016,0.3922436211401085,0.29688289591978945,0.20970981705512415,0.13423832959119136,0.07351068766062613,0.02997482128089779,0.005385660344845222,0.0007343934322776025,0.01620851301831705,0.05118425765556617,0.10425175578537671,0.17327185763191078,0.2554623642863117,0.3475101780883366,0.4457048535261706,0.5460881652197582,0.6446136639058295,0.7373097887260225,0.820439960764389,0.8906532044680986,0.945119225404187,0.9816424993707475,0.9987507739332401,0.995754414890193,0.9727742054140126,0.9307364772836899,0.8713357704695905,0.796966526261468,0.7106265673885394,0.6157962558459906,0.5162981995733368,0.4161431632056593,0.31936839423240293,0.22987488163271547,0.15127010708870914,0.08672262747178189,0.038834350379214844,0.009535651291632696,7.5601764426558304e-6,0.010634154193701506,0.04098707555359732,0.0898427986102403,0.1552319501558176,0.23451869481456267,0.3245069855136119,0.42156939607568666,0.521793342694931,0.6211388001111647,0.7156011549460366,0.8013726315874787,0.8749957835476208,0.9335028630605984,0.974535450935098,0.9964395243841551,0.9983321306502329,0.9801369788130415,0.9425875150749881,0.8871973575595755,0.8161992823954637,0.7324552205559584,0.6393408934793621,0.5406097378060356,0.4402416044234169,0.3422823307573675,0.2506806531472055,0.16912903336398016,0.10091481555101128,0.048787713448081305,0.014848969486249142,0.00046665374788151803,0.0062205170893929185,0.031878621395890594,0.07640668900197378,0.13800979440341216,0.21420471766792587,0.30192004298049124,0.3976199673525131,0.49744682876905255,0.5973766084662506,0.6933811390464637,0.7815904798246102,0.8584489140587008,0.9208582798199387,0.9663028568372894,0.9929507751306881,0.999727857652922,0.9863609203446577,0.9533887841783245,0.9021405552956127,0.8346820487658355,0.7537325156222792,0.6625550299080113,0.564824954227261,0.46448178595330447,0.36557035616886746,0.27207778260721777,0.18777274901694363,0.11605358959614842,0.05981130220998493,0.021313012324952807,0.002110585227362627,0.0029780703649706086,0.023880499429433488,0.06397529592810713,0.12164623942538838,0.19456861535584669,0.2798029242211951,0.3739133727557207,0.4731063706832553,0.5733834502643548,0.6707024444501386,0.7611404265541539,0.8410518433476586,0.907215467236677,0.9569642438809715,0.9882928011006136,0.9999382853880159,0.9914312675071648,0.9631146651767173,0.9161299200636404,0.8523709862927995,0.7744079851943293,0.6853836037650393,0.5888864130190551,0.4888062127627717,0.38917723384355385,0.29401551838571505,0.2071570332138361,0.13210304210773094,0.071878969930261,0.028912447812303455,0.004935455391048782,0.0009145047458491429,0.017011680315862254,0.052578105279557974,0.10618009776630238,0.17565696254355884,0.2582080885979115,0.3505058417084932,0.4488297013149448,0.549216234625956,0.6476188625150915,0.7400709770431346,0.8228458353441856,0.8926067845549663,0.9465417622243054,0.9824766504937316,0.9989629147441746,0.9953359939972857,0.9717420893549826,0.9291322706360113,0.8692241387707625,0.7944325893425207,0.7077724681954486,0.6127370430594573,0.5131571899988859,0.413046970875682,0.3164418265970457,0.22723590857417153,0.14902510555759163,0.08496209343436101,0.037629250926905555,0.008934563958994945,3.471478168204367e-5,0.011288456135229774,0.04224214993337949,0.09164805340546106,0.15751461558216578,0.23718675667493005,0.327452894288372,0.4246744022416802,0.5249322835165434,0.624185144947334,0.7184321056980307,0.8038740726878166,0.8770668819560987,0.9350601328423366,0.9755161185766945,0.9968040591928026,0.998065838235177,0.9792505934161502,0.9411167668736722,0.885201532384053,0.8137588319181897,0.7296685192863168,0.6363202732891242,0.5374769598339508,0.4371229508861513,0.3393035145158785,0.24796175022396688,0.16677964268078654,0.09902964099874767,0.04744274637483825,0.014098425487511224,0.00034078723706360003,0.006724401742989994,0.03299194563372959,0.0780845747465303,0.14018460611428346,0.2167887887290752,0.30480920953965773,0.40069776716425853,0.5005891957851893,0.6004568739359132,0.6962751375309242,0.7841815543035173,0.8606326183722375,0.9225465888914266,0.9674277149621883,0.9934668393007541,0.999614325331911,0.9856223680181276,0.9520549828756021,0.900265270520229,0.8323408732091842,0.7510198220236193,0.6595801668914103,0.5617078384607775,0.46134806831035846,0.36254635674432145,0.269285398756631,0.18532454167678786,0.11404824595483698,0.05832965762908743,0.020414791867571946,0.0018319961419499542,0.003330342571920386,0.024849432843216557,0.0655218328624052,0.12370803900768129,0.1970625664866681,0.2826284957809684,0.3769566660120488,0.47624471054649975,0.5764903303181569,0.6736526264224207,0.7638149886692551,0.8433429740608837,0.9090308111153101,0.9582306244499739,0.9889591705849176,0.9999777824471692,0.9908423000155181,0.9619209744019308,0.9143796236567299,0.8501346386664501,0.7717757334761403,0.6824615539685364,0.585792352912359,0.4856648638462328,0.386115223828408,0.2911562768336902,0.20461581609409119,0.1299822858309182,0.07026416213898723,0.02786868137596088,0.004504804513562999,0.001114328955387378,0.017833924702573722,0.05398962518885336,0.10812399485921631,0.17805487836757428,0.26096336321472424,0.3535074100540281,0.45195657022987046,0.5523423600876917,0.6506182304694448,0.7428226830286079,0.8252389581481554,0.8945448574455918,0.9479466615226493,0.983291744737469,0.9991553475008317,0.9948980083063383,0.9706913404107789,0.927511114107227,0.8670979234442513,0.7918870229151102,0.7049101623982754,0.6096733773813406,0.5100156607412945,0.40995421301939566,0.313522509148701,0.2246077091610656,0.14679396684486135,0.08321795257835596,0.036442414210271334,0.00835287274574359,8.161703286008182e-5,0.011962061222035969,0.043515304848405933,0.09346943729982143,0.15981080850796464,0.23986519914177307,0.33040561833456283,0.4277823836207669,0.5280702395619686,0.6272265847143723,0.7212544288112418,0.8063635113595911,0.8791230869640114,0.9366002186040787,0.9764780042663636,0.9971489712177248,0.9977798731986067,0.9783452785629253,0.9396285954271948,0.8831904925052267,0.8113059885838834,0.7268727465616438,0.6332942687160688,0.5343427015955962,0.43400678086869426,0.33633104546972414,0.24525280231613994,0.16444341354664443,0.09716030398745784,0.046115654423468544,0.013367073645792482,0.00023465628292634877,0.007247769813050808,0.0341237157716659,0.07977912532100212,0.1423736298258914,0.2193840460762888,0.3077060857513954,0.4037794892189936,0.5037315395292226,0.6035331715565324,0.6991613835333144,0.7867614041696709,0.8628020784062964,0.9242182082032764,0.9685341106112113,0.9939634125007295,0.9994810592271866,0.9848646345626861,0.9507033262897013,0.8983741760535315,0.8299865708413114,0.7482972136354172,0.6565990007719452,0.5585882853559513,0.45821587734278935,0.3595277864684243,0.2665021276792062,0.18288876339867183,0.11205814664909186,0.05686545815849553,0.019535514083148076,0.0015730837133907105,0.0037022322539901342,0.025837133770346965,0.06708553083021201,0.12578470138272202,0.19956848305064678,0.28546265308787694,0.3800048192381645,0.47938398869697973,0.5795941891543035,0.6765959494572974,0.7664791306109331,0.8456205434015736,0.9108299990809406,0.9594789058101189,0.9896062271431689,0.9999975313667678,0.9902339452179085,0.9607090386567174,0.9126129600692369,0.8478844614101645,0.769132747150757,0.6795322972993065,0.5826949041764006,0.48252408113939216,0.3830577120380196,0.2883052841982132,0.20208626606892421,0.12787614452643759,0.06866632806853806,0.02684356319858322,0.004093724722259273,0.0013338581682251771,0.018675213701421722,0.05541876163120363,0.11008337028396942,0.1804655103910392,0.2637280793087441,0.3565147645688377,0.45508533676588525,0.5554664181290696,0.6536116492998054,0.7455647979954401,0.8276192346525868,0.8964673465899757,0.9493338678084321,0.9840877499073325,0.9993280646024973,0.9944404751169371,0.9696220000839095,0.925873071729818,0.864957208471421,0.7893299275240833,0.702039763052524,0.6066053798204123,0.506873735884764,0.40686501179468393,0.3106105571947219,0.22199038720208408,0.14457677907611144,0.08149027379393359,0.03527388710700802,0.0077906006275536566,0.0001482650774303207,0.012654942848049633,0.044806490011525923,0.09530687835227108,0.16212043823806582,0.24255391642183083,0.3333650410254958,0.4308932174537078,0.5312070868880829,0.6302629992814153,0.7240680128094547,0.8088408492749584,0.8811643173552657,0.9381230595154366,0.9774210700115202,0.997474246835578,0.9974742468355763,0.9774210700115156,0.9381230595154291,0.8811643173552555,0.808840849274946,0.7240680128094661,0.6302629992814002,0.5312070868880389,0.43089321745372045,0.33336504102548103,0.2425539164218174,0.16212043823805428,0.09530687835224516,0.0448064900115312,0.012654942848046136,0.0001482650774299321,0.007790600627551436,0.03527388710702428,0.08149027379394214,0.1445767790761025,0.22199038720209713,0.3106105571947364,0.4068650117947272,0.5068737358847797,0.6066053798203999,0.7020397630525383,0.789329927524096,0.8649572084714316,0.9258730717298262,0.969622000083915,0.9944404751169353,0.9993280646024966,0.9840877499073215,0.9493338678084252,0.8964673465899662,0.8276192346525963,0.7455647979954017,0.6536116492997635,0.5554664181290823,0.4550853367658696,0.3565147645688227,0.2637280793087553,0.18046551039100528,0.11008337028395965,0.05541876163119641,0.018675213701417448,0.0013338581682240114,0.004093724722264935,0.026843563198588327,0.06866632806853162,0.12787614452644802,0.20208626606895963,0.28830528419822743,0.38305771203803485,0.4825240811394078,0.582694904176416,0.6795322972993476,0.7691327471507462,0.8478844614101757,0.9126129600692456,0.9607090386567125,0.9902339452179172,0.9999975313667677,0.9896062271431715,0.9594789058101127,0.9108299990809317,0.8456205434015417,0.7664791306109199,0.6765959494573093,0.5795941891542881,0.4793839886969641,0.38000481923814927,0.2854626530878628,0.19956848305063424,0.12578470138273046,0.06708553083020419,0.025837133770332976,0.003702232253988247,0.0015730837133919318,0.019535514083152405,0.056865458158502746,0.11205814664911973,0.182888763398662,0.2665021276792201,0.3595277864684393,0.45821587734277663,0.558588285355995,0.6565990007719601,0.7482972136354309,0.8299865708413232,0.8983741760535411,0.9507033262897204,0.9848646345626899,0.9994810592271859,0.9939634125007271,0.9685341106112058,0.924218208203268,0.8628020784062856,0.786761404169658,0.6991613835332999,0.6035331715565171,0.5037315395291785,0.4037794892189782,0.3077060857513809,0.21938404607629935,0.14237362982588042,0.07977912532097825,0.034123715771670504,0.007247769813048144,0.00023465628292679286,0.01336707364579609,0.04611565442348703,0.09716030398746717,0.16444341354665604,0.24525280231615343,0.33633104546971204,0.434006780868738,0.5343427015956117,0.6332942687160564,0.7268727465616578,0.8113059885838956,0.883190492505255,0.9396285954272021,0.9783452785629299,0.9977798731986083,0.9971489712177232,0.9764780042663588,0.936600218604071,0.8791230869640012,0.806363511359601,0.7212544288112277,0.6272265847143297,0.528070239561953,0.4277823836207514,0.33040561833454807,0.23986519914173543,0.15981080850793233,0.09346943729982887,0.04351530484839955,0.011962061222032527,8.161703285980426e-5,0.008352872745751638,0.03644241421027722,0.08321795257836462,0.14679396684487245,0.2246077091611024,0.3135225091487419,0.40995421301941104,0.5100156607412818,0.6096733773813559,0.7049101623983157,0.7918870229150998,0.867097923444262,0.9275111141072352,0.9706913404107842,0.9948980083063447,0.999155347500829,0.983291744737465,0.9479466615226422,0.8945448574455996,0.8252389581481219,0.7428226830285942,0.6506182304694569,0.552342360087676,0.45195657022985486,0.3535074100539859,0.2609633632147105,0.17805487836756229,0.10812399485920654,0.05398962518884626,0.01783392470256956,0.0011143289553863234,0.004504804513565108,0.02786868137595666,0.07026416213899522,0.12998228583094784,0.20461581609408092,0.2911562768337045,0.3861152238284232,0.48566486384624846,0.5857923529124024,0.6824615539685245,0.7717757334761535,0.8501346386664612,0.9143796236567228,0.9619209744019477,0.9908423000155211,0.9999777824471694,0.9889591705849143,0.9582306244499676,0.9090308111152847,0.8433429740608722,0.763814988669266,0.6736526264224061,0.5764903303181415,0.4762447105464841,0.3769566660120336,0.2826284957809542,0.1970625664866782,0.12370803900767097,0.06552183286238339,0.024849432843211672,0.003330342571918554,0.0018319961419488995,0.020414791867576387,0.058329657629108134,0.11404824595482888,0.18532454167680001,0.2692853987566449,0.36254635674430924,0.4613480683104024,0.5617078384607931,0.6595801668914252,0.7510198220236328,0.8323408732091747,0.9002652705202554,0.9520549828756087,0.9856223680181246,0.9996143253319116,0.9934668393007515,0.9674277149621826,0.9225465888914183,0.8606326183722266,0.7841815543035044,0.6962751375309099,0.6004568739358979,0.5005891957851737,0.40069776716424316,0.3048092095396695,0.21678878872903884,0.14018460611425282,0.07808457474653713,0.032991945633723985,0.00672440174298744,0.00034078723706520986,0.014098425487521604,0.04744274637483287,0.09902964099875705,0.16677964268079826,0.24796175022398043,0.3393035145159202,0.4371229508861668,0.5374769598339382,0.6363202732891393,0.729668519286356,0.8137588319182019,0.885201532384063,0.9411167668736662,0.9792505934161546,0.998065838235181,0.996804059192804,0.9755161185766896,0.9350601328423289,0.8770668819561072,0.8038740726877815,0.7184321056980167,0.6241851449473188,0.5249322835165278,0.42467440224169273,0.32745289428833063,0.23718675667491673,0.15751461558217505,0.09164805340545201,0.04224214993337316,0.011288456135226443,3.471478168182163e-5,0.008934563958997888,0.037629250926911495,0.08496209343436972,0.1490251055576028,0.22723590857418463,0.31644182659706027,0.41304697087566944,0.5131571899989016,0.6127370430595003,0.707772468195437,0.7944325893425335,0.8692241387707731,0.9291322706360194,0.9717420893549973,0.9953359939972839,0.9989629147441736,0.9824766504937275,0.9465417622243111,0.892606784554939,0.8228458353441737,0.7400709770431458,0.6476188625150765,0.5492162346259405,0.44882970131490096,0.3505058417084782,0.25820808859792266,0.1756569625435469,0.10618009776629272,0.05257810527955098,0.017011680315858202,0.0009145047458481992,0.004935455391047006,0.028912447812308728,0.07187896993028381,0.1321030421077416,0.20715703321384882,0.2940155183857035,0.38917723384356917,0.4888062127628158,0.5888864130190425,0.6853836037650538,0.7744079851943424,0.8523709862927905,0.9161299200636648,0.9631146651767232,0.9914312675071677,0.9999382853880157,0.9882928011006162,0.9569642438809536,0.9072154672366679,0.8410518433476679,0.7611404265541405,0.6707024444501238,0.5733834502643393,0.47310637068323963,0.37391337275570546,0.279802924221181,0.19456861535581177,0.12164623942537817,0.06397529592809947,0.023880499429428714,0.0029780703649719964,0.0021105852273666237,0.02131301232496552,0.05981130220997888,0.11605358959615847,0.1877727490169559,0.272077782607257,0.36557035616891,0.46448178595329176,0.5648249542272765,0.6625550299080262,0.7537325156222927,0.8346820487658682,0.9021405552956219,0.9533887841783192,0.9863609203446613,0.9997278576529236,0.9929507751306855,0.9663028568372838,0.9208582798199303,0.8584489140586898,0.7815904798245736,0.6933811390464755,0.5973766084662353,0.49744682876903684,0.3976199673525256,0.3019200429804508,0.214204717667913,0.13800979440340133,0.07640668900196546,0.03187862139588504,0.00622051708938598,0.00046665374788218417,0.014848969486246033,0.04878771344808808,0.10091481555102072,0.16912903336399188,0.2506806531472191,0.3422823307573824,0.44024160442343246,0.5406097378060513,0.6393408934794044,0.7324552205559722,0.8161992823954758,0.8871973575595674,0.9425875150749954,0.9801369788130538,0.9983321306502317,0.9964395243841533,0.974535450935093,0.9335028630605906,0.8749957835475917,0.8013726315874663,0.7156011549460224,0.6211388001111495,0.5217933426949438,0.4215693960756431,0.32450698551359725,0.23451869481457344,0.15523195015580626,0.08984279861023131,0.04098707555357983,0.010634154193698286,7.560176442600319e-6,0.00953565129163575,0.038834350379220894,0.08672262747179071,0.15127010708872035,0.22987488163272868,0.31936839423239105,0.4161431632056748,0.5162981995733809,0.615796255846006,0.7106265673885536,0.7969665262614807,0.871335770469601,0.9307364772837122,0.9727742054140085,0.9957544148901951,0.998750773933239,0.981642499370751,0.9451192254041669,0.8906532044680888,0.820439960764377,0.7373097887260086,0.6446136639058145,0.5460881652197143,0.445704853526155,0.3475101780883487,0.25546236428629804,0.1732718576318989,0.10425175578536716,0.05118425765555923,0.016208513018313053,0.0007343934322767143,0.0053856603448516616,0.029974821280912833,0.07351068766063429,0.13423832959120202,0.20970981705511377,0.29688289591982975,0.39224362114015154,0.49194800381191744,0.5919769622871566,0.6882983312736597,0.7770293983365212,0.854593415957869,0.9178637801567728,0.9642900638326107,0.992000824429804,0.9998790417493636,0.9876071450105564,0.9556798141226024,0.9053840391475957,0.8387472417570672,0.7584555499055134,0.6677455200669046,0.5702736717085083,0.46996909306545753,0.37087505967332113,0.27698605001301424,0.19208672816426953,0.11959938407286363,0.06244598111246508,0.022930371799975702,0.002645429547201872,0.0024088399659190074,0.022230139977352847,0.06131033337912034,0.1180740983659409,0.19023328871973,0.2748791689374087,0.36859966530012667,0.4676169064958712,0.5679395095355285,0.665523472320468,0.7564351872853706,0.8370100050395292,0.9039999563095786,0.9547046775153339,0.9870802623709279,0.9998216517059169,0.9924152403740305,0.9651595806661938,0.9191533476737239,0.8562510517176634,0.778988283075285,0.6904795023871432,0.5942924968119325,0.49430456259817307,0.394546211350812,0.29903870019017675,0.21163193495862553,0.13584928059403462,0.07474553436049758,0.03078378703228235,0.005736135754692284,0.0006122508438979879,0.015618675996984022,0.050150502519673346,0.10281575318353509,0.17149149279994452,0.25340940369457343,0.3452673765367397,0.44336261829987916,0.543740911773323,0.6423560099782375,0.7352327403013852,0.8186272436226548,0.8891778892006151,0.9440407819395134,0.981004399743123,0.9985787399257433,0.9960553811901853,0.9735360400760308,0.9319284707679231,0.8729098735428269,0.7988592868606388,0.7127616883722089,0.6180876705305369,0.5186535410791361,0.4184674877642984,0.3215680083679534,0.23186111894388028,0.1529629023896646,0.08805374421819862,0.03975013128197863,0.009999181241088506,1.5428969601938292e-7,0.01015611100190289,0.04005766496812424,0.0884994851530096,0.1535288827650983,0.23252452410241486,0.3223020964610922,0.4192426677158885,0.5194385654009589,0.6188508949080921,0.7134723472462802,0.7994887335863918,0.8734327351354827,0.9323236706872614,0.9737876478212996,0.9961532544582672,0.9985189334471756,0.9807893243158579,0.9436791072496435,0.8886841943476047,0.8180214294360261,0.7345392271387431,0.641602753341163,0.5429582754215616,0.4425821502889619,0.34452053751639466,0.2527262987305744,0.17089965783963823,0.10233904508212971,0.04980813737109979,0.015424454533478127,0.0005740021287115038,0.005855401592755993,0.031055759820085738,0.07515925088046299,0.1363880639416134,0.2122740667879785,0.29975829618025557,0.39531426460181696,0.4950901128990968,0.5950638786460676,0.691205621368309,0.7796398693620474,0.8568018398800336,0.9195811354519975,0.9654471239436846,0.9925509482870409,0.9998000538712202,0.9869022293967958,0.9543773859073648,0.9035365991858606,0.836429260316323,0.7557604647707834,0.6647819700653417,0.5671611174807881,0.46683300160949326,0.36784184677221954,0.27417798441752406,0.18961700294162692,0.11756755379687184,0.060933948820450945,0.02199908748300905,0.0023324332572726147,0.002726748577132454,0.023166138600032138,0.06282669192770762,0.12010969245803321,0.19270606359866305,0.2776894470978468,0.37163416448631326,0.4707533061069857,0.5710513813666805,0.6684853768811378,0.759127730262673,0.8393246500804823,0.9058434001194572,0.9560026109114409,0.987780365684316,0.9998957037862142,0.9918602561833709,0.9639979316060634,0.9174318597942367,0.8540391181604492,0.7763750668372003,0.6875703421619093,0.5912046607893928,0.4911625213858622,0.3914766205664778,0.29616529497619726,0.20907054222101268,0.13370315002225985,0.07310117643444625,0.02970748578671084,0.00527127687101675,0.0007775727743150607,0.016407514617828023,0.05153105976208677,0.1047323788130175,0.173866927676174,0.2561478940857116,0.34825853395057893,0.44648586924153755,0.5468703580605652,0.6453655036945731,0.7380009688159495,0.8210426197000871,0.8911430490800816,0.9454765100660099,0.981852821944972,0.9988056563211289,0.9956516447838049,0.9725179254742491,0.9303370181497699,0.8708092343310823,0.7963341377794524,0.7099138181299753,0.6150318767190741,0.515513002685153,0.4153687998269111,0.31863607893519263,0.22921413403188395,0.15070756190671708,0.0862809608934691,0.038531365975436715,0.009383562357575037,1.2497413960088632e-5,0.0107959185828434,0.04129914637511084,0.09029259629565728,0.15580134336949686,0.23518473132762224,0.3252428174076397,0.42234536198191935,0.5225781634434726,0.6219008395934379,0.7163096953659582,0.8019991116950586,0.8755149499423796,0.933893788155705,0.9747823765478689,0.9965324969481182,0.998267402443225,0.9799171590277775,0.9422214646425641,0.8866998319654977,0.8155903368863979,0.7317594017130606,0.6385862497460613,0.5398266888559767,0.43946171494393266,0.34153703807756863,0.2500000000000119,0.16854045686390767,0.10044204120487615,0.04844979878024358,0.014659535830108095,0.000433337170297754,0.006344660580921091,0.032155220734919054,0.07682459447471901,0.13855216024873362,0.21484968112957287,0.30264160559434894,0.39838904294429583,0.4982324159171649,0.59814704016862,0.6941053592167846,0.7822392951624475,0.8589961708309606,0.9212819181171961,0.9665857998083238,0.9930816173500727,0.9997013248734503,0.9861780821021284,0.9530570106785826,0.9016732203217261,0.8340979905811879,0.7530552776004178,0.661811911499915,0.5640459105209239,0.4636982201847376,0.3648138538584027,0.27137883834767973,0.18715953723724238,0.11555082885074125,0.05943925877433287,0.02108668326244545,0.0020390938579192275,0.0030642985042449444,0.024120971222872656,0.0643603179625864,0.1221602914704884,0.19519097598403085,0.28050850608813405,0.37467373387063485,0.47389086090498767,0.5741604468079408,0.6714406266006545,0.7618100382039966,0.8416258924648193,0.9076708139128176,0.9572825331007994,0.9884612026321464,0.9999500109689017,0.9912858444794813,0.962817955539768,0.9156938841768869,0.8518132007539942,0.7737509343272947,0.6846537732769105,0.5881132223620413,0.48802082923661233,0.388411316242297,0.2932999408323569,0.20652064062509884,0.1315714874559865,0.07147368017274686,0.02864976017094928,0.004825958799367647,0.0009626130092392216,0.01721545419119208,0.05292933064604971,0.10666461673653205,0.1762552441676294,0.2588960161556711,0.35125568485400804,0.4496112338861774,0.5499979530608153,0.6483692557592573,0.740759796760118,0.8234453152251219,0.8930927595779794,0.9468946427460982,0.9826822119075721,0.9990128708736347,0.9952283311118031,0.9714811473432965,0.9287285680653237,0.8686939488835244,0.7937972840823775,0.7070576567045594,0.6119715393745957,0.5123718515580593,0.41227345465553544,0.3157113130208169,0.2265778446293209,0.14846601778840773,0.08452451865749117,0.03733082777277713,0.008787321858904684,4.458906170529131e-5,0.011455048763338638,0.04255874556411138,0.09210189007533592,0.1580873991442201,0.23785539823534668,0.32819044091936356,0.4254511234535412,0.5257168696929,0.6249459694352649,0.7191384996778633,0.8044975614324917,0.8775823326469752,0.9354467676724536,0.975758352303874,0.9968921273804204,0.9979961908563661,0.9790260379553402,0.9407463551569328,0.884700195700217,0.8131467791388363,0.7289704222465885,0.6355642722665398,0.5366935292144447,0.4363436707421857,0.33855979761427396,0.2472835757779524,0.16619434788856158,0.09856081908157321,0.04710929553467624,0.013913787121001775,0.0003124041130198041,0.0068534179845680665,0.03327316059883845,0.07850665266562651,0.14073053303497363,0.21743655834821674,0.3055327102770821,0.40146783471980474,0.5013747887512869,0.601226325076036,0.6969974302851547,0.7848275730655355,0.8611763221388311,0.9229660609747656,0.9677060464510858,0.9935928106585169,0.999582858655657,0.985434731728939,0.9517187405885059,0.8997939761550198,0.8317535246321495,0.7503400952440527,0.658835461682059,0.5609281738735232,0.4605648726089514,0.3617912005316107,0.26858872236431197,0.18471442811614697,0.11354928889111526,0.05796197001145642,0.02019319517644952,0.001765422935469052,0.003421476414691871,0.02509460013187559,0.06591115090851529,0.12422581440868607,0.19768792772663402,0.283336234560931,0.3777182533961171,0.477029446962673,0.57726658305735,0.6743891047524102,0.7644820051634871,0.8439136412979482,0.909482125510424,0.9585443935290395,0.9891227463226822,0.9999845711089532,0.9906920279505051,0.961619699074032,0.9139394894682794,0.8495733874177108,0.7711159891936084,0.6817299109308447,0.5850183036356047,0.4848796102410591,0.38535041945175075,0.29044275093452454,0.20398233088694978,0.12945437709171487,0.06986310985828748,0.027610651963085042,0.004400199128941462,0.0011673642399472883,0.018042462805069492,0.05434525994259842,0.10861239063447048,0.17865634794052565,0.26165366135905743,0.35425871086548516,0.4527385887880108,0.5531235732402052,0.6513671475299884,0.7435091151655981,0.8258352352960312,0.8950269436846473,0.9482951239662931,0.9834925368716503,0.9992003753986975,0.9947854568942356,0.970425746633848,0.9271031840452366,0.8665641007497702,0.7912488259701138,0.7041933169087486,0.6089067793744245,0.5092302117671211,0.4091815745102768,0.31279382614729057,0.22395235486439224,0.14623835857134349,0.0827844868862963,0.03614856409292061,0.00821048329539692,9.642796537479015e-5,0.012133475509027658,0.04383641278342254,0.09392729502852254,0.16038695979454848,0.24053641933951936,0.3311448505709428,0.42855982945923915,0.5288545601765144,0.627986164156917,0.7219586484498115,0.8069839841148267,0.8796348015916602,0.9369825478978695,0.9767155365402176,0.9972321315504755,0.9977053093989249,0.9781159962960688,0.9392538370567013,0.8826853645334372,0.8106908527090908,0.7261723988985456,0.6325369402647685,0.5335589202506689,0.4332281408402954,0.33558893372158893,0.2445771333578744,0.16386142358029238,0.09669545301675414,0.04578668058164692,0.013187237861760348,0.00021120773349880828,0.0073816537087816325,0.034409535255432,0.080205359015186,0.14292309625891003,0.2200345962673687,0.3084314960354512,0.40455051832216254,0.5045171072839842,0.6043016117425876,0.6998817203422844,0.7874046008393754,0.8633422076919941,0.9246334975043896,0.9688078196244201,0.9940845080212402,0.9994446598970217,0.9846722076381095,0.9503626284961606,0.8978989409121583,0.8293959550710566,0.747615024946054,0.6558527381757038,0.5578080306830125,0.45743308264317584,0.35877400618069444,0.26580774667151735,0.18228177215534458,0.1115630129749059,0.056502140881810214,0.01931865851604031,0.0015114312993904089,0.0037982682006525437,0.02608698687060418,0.06747912951066243,0.12630617968852115,0.20019682020180962,0.2861725208265599,0.3807676028102098,0.4801689403120339,0.5803696674286185,0.6773306948773408,0.7671435256036898,0.8461878062183082,0.9112772633690371,0.9597881423551431,0.9897649706262481,0.9999993828413111,0.9900788300510228,0.9604032095376195,0.9121687449635485,0.8473197666198227,0.7684703355113062,0.6787988706105533,0.5819200268533026,0.4817389884711636,0.38229405109425907,0.28759383813608463,0.2014557132648333,0.12735190255112344,0.06826952910541512,0.026590202205854285,0.003994014676402202,0.0013918183791662986,0.018888507794238507,0.0557787917253153,0.11057562357358386,0.1810701441560057,0.26442072077425605,0.35726749337139985,0.4558678104226811,0.5562470951428818,0.6543590605959617,0.7462488154397047,0.828212285515681,0.8969455250035625,0.9496778984103394,0.984283764830971,0.9993681624902557,0.9943230396237656,0.9693517650321706,0.9254609302889826,0.8644197740546056,0.7886888641017701,0.7013209118783083,0.6058377177705698,0.5060882074009911,0.40609328151428103,0.3098837335496365,0.22133776843877084,0.14402467224371446,0.08106093430770317,0.03498462163294219,0.00765306945104377,0.00016801207743399882,0.01283117202338746,0.045132097567712415,0.09576873905530159,0.16269993449234643,0.24322768874508915,0.33410592966899055,0.43167135721123706,0.531991110961738,0.6310213036766652,0.7247700302914957,0.8094582815332443,0.8816722757079744,0.9385010681716597,0.9776538914499823,0.9975524960287903,0.9973947695601482,0.9771870699948113,0.9377439692933873,0.880655418047047,0.8082226546014055,0.7233654421853537,0.6295043733143828,0.5304229857755128,0.43011524829558234,0.3326245637428242,0.24188077963893306,0.16154177608500314,0.09484601668872855,0.04448200616185227,0.012479916749648046,0.0001297520287925069,0.007929346889289257,0.03556429982012427,0.08192064642782826,0.1451297633186257,0.2226436922695912,0.3113378483731565,0.4076369719913989,0.5076592473998235,0.6073727787005243,0.702758115464373,0.7899702766964711,0.8654937419421883,0.9262841618456104,0.9698910758104624,0.9945566900171632,0.9992867340561241,0.9838905399478458,0.9489887279653024,0.8959881894432995,0.8270253750172727,0.7448801743413171,0.6528638587925779,0.5546856041889283,0.45430297398694414,0.35576238997892695,0.2630360211123311,0.17986166543999643,0.10959207955608918,0.055059829045775,0.01846310782370081,0.0012771289818501175,0.004194658979588761,0.02709809224174209,0.06906419183694129,0.12840130513964532,0.20271755431324828,0.2890172528572761,0.3838216616696057,0.48330921694926865,0.5834695773559994,0.6802652807884451,0.7697944943997674,0.8484482974008657,0.9130561565842241,0.9610137304534598,0.9903878501762527,0.9999944455809407,0.9894462750011404,0.9591685349794976,0.9103817206036369,0.8450524273739007,0.7658140777785077,0.6758607680863408,0.5788185143909914,0.4785990879753404,0.3792423318903639,0.2847533149635052,0.19894088755515588,0.12526414687783305,0.06669300085746571,0.02558845120500719,0.0036074214852410136,0.0016359665614021357,0.019753555741581164,0.05722986937251956,0.1125542380100481,0.1834965374738204,0.2671970851078971,0.36028191353073047,0.45899877519211335,0.5593683953958704,0.6573448767824656,0.7489787893696873,0.8305763719952497,0.8988484277545605,0.9510429114613713,0.9850558645335779,0.9995162255210488,0.9938410975649682,0.9682592449584171,0.923801871662342,0.8622610534947581,0.7861174995907847,0.6984405550676166,0.6027644757848902,0.502945962562637,0.4030086976490785,0.3069811501707652,0.21873418862352811,0.14182504624174874,0.07935392899866611,0.03383904636628643,0.007115102342596269,0.00025933857045074005,0.013548110748783537,0.046445748739973314,0.09762614942224546,0.16502623187968102,0.2459291001521806,0.3370735612567034,0.43478558381029125,0.5351263981609522,0.6340512681125059,0.7275725341588088,0.8119203559578827,0.8836946745196768,0.940002268515272,0.9785733799700065,0.9978532081615945,0.9970645836057463,0.9762392957423474,0.9362168115037923,0.8786104364199234,0.8057422823047646,0.7205496629762851,0.6264666911958436,0.5272858496522098,0.42700511606118285,0.32966680476477983,0.23919462112177547,0.1592354970242309,0.09301258314659588,0.043195323807355246,0.01179185172246483,6.804021624012835e-5,0.008496475893284228,0.03673740868199549,0.08365244715308001,0.14735044705506967,0.22526374330075638,0.31425165249496745,0.4107270738187032,0.5108010849904328,0.6104397046447608,0.7056265020394938,0.7925244992976581,0.8676308399080698,0.9279179888004161,0.9709557722227129,0.9950093379960255,0.9991090873707253,0.9830897595324782,0.9475970932623072,0.8940617972194049,0.8246418781040283,0.7421356514510893,0.6498689415875012,0.5515610177209932,0.45117467027342323,0.3527564708792007,0.2602736551645144,0.17745420355952757,0.10763656648267861,0.053635091471820384,0.01762657689200159,0.001062525237331191,0.004610633094847549,0.0281278763086103,0.07066627528052011,0.1305111080087406,0.20525003049688506,0.2918703182917566,0.3868803093449694,0.48645015283963755,0.5865661903991866,0.6831927465752957,0.7724348068436877,0.850695025560642,0.9148187348932241,0.9622211094156856,0.9909913603701725,0.9999697595228545,0.98879438778555,0.9579157241668677,0.9085784869724862,0.8427714592353983,0.7631473209121719,0.6729157194075076,0.5757138887522885,0.4754600327734582,0.3761953823769885,0.2819212936118418,0.19643795308861212,0.12319119253408883,0.06513358738419145,0.024605438527748102,0.0032404348251238724,0.0018997991432771477,0.020637572479412003,0.058698435569483565,0.11454815579247368,0.18593543205623625,0.26998264469902195,0.36330185227983375,0.46213135942929734,0.5624873507139325,0.6603244781556571,0.75169892912693,0.8329274013579684,0.9007355767767062,0.9523901092040626,0.9858088054830607,0.9996445586428775,0.993339649753603,0.9671482295649922,0.9221260736948764,0.8600880243354172,0.7835348340010242,0.6955523602450662,0.5996871748044584,0.49980360136453855,0.3999279447496402,0.3040861906570275,0.21614171825491324,0.13963956744636946,0.07766353838252371,0.0327118835409243,0.006596603218700092,0.0003704038372087104,0.01428426336754246,0.04777731441356625,0.09949945276530425,0.16736576007235743,0.2486405468603904,0.3400476281184539,0.4379023862506011,0.5382602979364903,0.6370759377867456,0.7303660493583953,0.8143701101416199,0.8857019181460171,0.941486089634217,0.9794739657822928,0.998134256071353,0.9967147645774171,0.9752727109738841,0.934672424007661,0.8765505004248395,0.803249833788998,0.7177251724890963,0.6234240138915954,0.5241476357914838,0.42389786698122034,0.32671577361309456,0.23651876390440685,0.15694267749143376,0.09119522480738501,0.041926684339591125,0.011123069957417409,2.607473333815502e-5,0.009083018320290903,0.037928815505541114,0.08540069278823281,0.1495850597556298,0.2278946458739753,0.3171727933113757,0.41382070175107183,0.5139424959594318,0.6135022684377792,0.7084867667720028,0.7950671677561648,0.8697534171784504,0.929534913835869,0.9720018668077706,0.9954424340791199,0.9989117268575185,0.9822698980212662,0.9461877793540104,0.8921198403291632,0.8222455584747876,0.7393815646785922,0.6468681048538697,0.5484343946942022,0.4480482950644462,0.34975636760942475,0.25752075793605433,0.17505948160397133,0.10569655099357872,0.05222798443430543,0.0168090987622736,0.0008676285422578034,0.005046174116267288,0.0291762983967625,0.07228531656223774,0.13263550496272208,0.20779414872492347,0.29473160443951213,0.38994342502575824,0.4895916239223189,0.5896593842479958,0.6861129766087883,0.7750643586482757,0.8529279019563221,0.9165649286776266,0.9634102315527142,0.9915754773705467,0.9999253256421028,0.9881231941525066,0.9566448265833053,0.9067591152942719,0.8404769522980732,0.7604701702439647,0.6699638408976607,0.5726062725638176,0.47232194685204104,0.37315332290262154,0.27909788594038376,0.19394700872617054,0.12113312139752147,0.06359135027935209,0.023641203001136535,0.0028930691913091056,0.0021833057039264414,0.02154052309080373,0.06018443231074272,0.11655729816501875,0.18838673157168956,0.2727772895235278,0.366327190337052,0.46526543940335624,0.5656038379044855,0.6632977470271192,0.7544091272712474,0.8352652807427938,0.9026068975313443,0.9537194384267446,0.9865425579397187,0.9997531567868367,0.9928187159958762,0.9660187627348078,0.9204336025773152,0.8579007724069827,0.7809409693426792,0.6926564414887338,0.5966059363765721,0.4966612479238002,0.39685114449967057,0.3011989693536399,0.21356045973043303,0.13746832217966798,0.07598982922639014,0.0316031776775767,0.006097592559047682,0.0005012034908477014,0.01503960080308292,0.0491267419942617,0.10138857509269139,0.1697184266636323,0.25136192177285455,0.3430280127844675,0.4410216414245831,0.5413926865054929,0.6400951932309122,0.733150465551871,0.8168074473240035,0.8876939273047864,0.9429524729204972,0.9803556133154805,0.9983956286572238,0.9963453262923252,0.9742873538676262,0.9331108678052459,0.874475691425199,0.8007454075009337,0.7148920822855899,0.6203764615814242,0.5210084681466132,0.4207936237859041,0.3237715868477177,0.2338533136779029,0.15466340804851236,0.08939401345316145,0.040676137867313666,0.010473597870084339,3.857237639959266e-6,0.009688951003031132,0.0391384732325471,0.08716531428099311,0.15183351315747695,0.2305362960737919,0.3201011554430415,0.4169177335963248,0.5170833562272412,0.616560349114309,0.7113387966870528,0.797598181641574,0.8718613899157202,0.9311348730866009,0.9730293182469368,0.9958559611600052,0.9986946603118575,0.9814309877971183,0.9447608419055442,0.8901623954760455,0.8198365107794436,0.7366180228048955,0.6438614671188018,0.5453058586040397,0.4449239718456667,0.34676219866778746,0.25477743816100473,0.1726775941601159,0.10377210971559658,0.050838563511172885,0.01601070572329044,0.0006924465946676062,0.005501264840831799,0.03024331709558481,0.07392125173316094,0.13477441209210544,0.21034980850964857,0.2976009982853841,0.3930108877249104,0.492733506115416,0.592749036727386,0.689025855545551,0.7776830459514279,0.8551468383936369,0.9182946689662337,0.9645810498965692,0.992140178105898,0.9998611456937371,0.9874327206128454,0.9553558924267525,0.9049236774306066,0.8381689971904491,0.7577827315160566,0.6670052491502183,0.569495788570316,0.4691849541593211,0.37011627362265276,0.27628320346819646,0.19146815285524826,0.11909001475787667,0.06206635045828868,0.022695782710586865,0.0025653383040522004,0.002486475045395675,0.022462371910980106,0.06168780090234022,0.1185815857705273,0.19085033919869043,0.2755809091984188,0.3693578082074792,0.4684008913242707,0.5687177338724119,0.6662645659585829,0.757109276755165,0.837589917808086,0.9044623161049623,0.9550308466235231,0.9872570929217808,0.9998420156635134,0.9922783168676461,0.9648708890795932,0.9187245251589368,0.8556993841015863,0.7783360080683221,0.6897529131816653,0.5935208822041128,0.49351902635721256,0.3937784184267241,0.2983196003001615,0.21099051500470156,0.13531139620158888,0.0743328676384869,0.030512972567938168,0.005618090073579274,0.0006517323650386264,0.01581409322105748,0.050493978182325816,0.10329344178776712,0.1720841387277895,0.25409311740064433,0.34601459753540875,0.44414322612778273,0.5445234401447407,0.643108915190344,0.735925672760295,0.8192322712349892,0.8896706233155524,0.9444013604548458,0.9812182877462188,0.9986373155955046,0.9959562833425557,0.9732832633432381,0.9315322045749648,0.8723860913718879,0.7982291023604701,0.7120505042672597,0.6173241546376693,0.5178684707085561,0.4176925090867452,0.32083436075823213,0.23119837572232005,0.15239777872211868,0.08760902022824107,0.0394437337846586,0.00984346111332457,1.3886066930202112e-6,0.01031425000836056,0.04036633408389767,0.08894624193229278,0.154095718451137,0.2331885895601984,0.3230366232254304,0.42001804702777135,0.5202235417360692,0.6196138258861821,0.7141824791350943,0.8001174409838299,0.8739546748590898,0.9327178033573634,0.9740380859579113,0.9962499029051739,0.9984578963074435,0.980573061995349,0.9433163372781294,0.8881895399752839,0.8174148301706611,0.7338451349844208,0.6408491471385841,0.542175533021517,0.4418018240217455,0.3437740823180694,0.2520438041950854,0.17030863530784918,0.10186331866037956,0.04946688358182738,0.01523142931000776,0.0005369863139026987,0.005975887293356075,0.0313288902599384,0.07557401617705911,0.13692774491424925,0.21291690890755172,0.30047838649394965,0.3960825762836722,0.49587567532072996,0.5958350258021506,0.691931268332618,0.7802907653201259,0.8573517472289847,0.9200078874376927,0.9657335182022199,0.9926854402716587,0.9997772222127388,0.9867229944389075,0.9540489726075889,0.903072245877678,0.8358476850722003,0.7550851108769945,0.6640400610237318,0.5663825596297732,0.4660491786003359,0.3670843544945516,0.2734773573696853,0.1890014833857847,0.1170619533138596,0.06055864815549966,0.021769214998337838,0.002257255108079781,0.0028092951930944743,0.02340308252872475,0.06320848196417211,0.12062093865360451,0.19332615762956384,0.27839339298623555,0.3723935861876533,0.47153759134786777,0.5718289156249279,0.6692248177665393,0.7597992709280676,0.8399012207352665,0.9063017592121825,0.9563242819963584,0.9879523822065178,0.9999111317631558,0.991718473713616,0.9637046539381013,0.9169989089449354,0.8534839463697533,0.7757200530687909,0.6868418900075471,0.590432134140642,0.49037706077634363,0.39070988789743344,0.2954481972260099,0.20843198558550102,0.1331688747064631,0.07269271906554314,0.029441311272967452,0.005158114701702687,0.0008219845141872462,0.016607710030543343,0.05187896897462008,0.10521397761205015,0.17446280282384768,0.2568340258668954,0.34900726440703755,0.4472670170637546,0.5476524351956196,0.6461169846289547,0.7386915613684192,0.8216444860988106,0.8916319281027082,0.9458326950090596,0.9820619550005655,0.9988593073400355,0.9955476510945406,0.9722604790603284,0.9299364966709014,0.8702817828000056,0.7957010177567134,0.7092005506708643,0.6142672136204272,0.5147277675010318,0.41459464537167107,0.3179042113592944,0.22855405490249436,0.1501458790001471,0.0858403156363513,0.03822952076915909,0.009232684576307049,1.8668938003563174e-5,0.010958890638193552,0.04161234956151111,0.09074340539899034,0.15637158628394787,0.2358514215728278,0.3259790807133224,0.42312151958913247,0.5233629284547467,0.6226625781470685,0.7170177017962415,0.8026248462771406,0.8760331893279121,0.9342836421255258,0.9750281300963513,0.996624243754702,0.998201444195989,0.9796961545023357,0.9418543225268593,0.8862013517507972,0.8149806123000551,0.7310630107408113,0.6378312638939276,0.539043541588359,0.43868197491136296,0.34079213658498886,0.2493199640114641,0.16795269861637818,0.0999702532214285,0.048112998824926534,0.01447130030231547,0.0004012538403384558,0.006470022727183722,0.03243297501181741,0.07724354461297994,0.13909541837674977,0.21549534852321056,0.30336365541404076,0.39915836937639093,0.4990180074287506,0.5989172295817912,0.694829100211876,0.7828874137545896,0.8595425413727982,0.9217045164232454,0.9668675909494362,0.9932112423310464,0.9996735585139205,0.9859940436634858,0.9527241187465727,0.9012048937633992,0.8335131076305947,0.7523774148775029,0.6610683936372966,0.5632667087086298,0.46291474403205574,0.3640576852731636,0.2706804584702556,0.18654709774636385,0.11504901716991744,0.05906830292225873,0.020861536461996788,0.001968831772072188,0.0031517533962595046,0.024362617787823948,0.06474641543232046,0.12267527626382735,0.19581408907435705,0.2812146297994035,0.3754344043703392,0.47467541558064474,0.5749372602764807,0.6721783855268477,0.7624790035404827,0.8421990982323999,0.908125154198618,0.9575996934570887,0.9886283983313708,0.9999605023558145,0.9911392086464879,0.9625201033743254,0.9152568220937692,0.8512545467169117,0.7730932076691772,0.6839234869460592,0.5873398141856538,0.48723547528265737,0.3876456741127363,0.29258487354595525,0.20588497252970533,0.13104084231966112,0.07106944829019962,0.02838823612118402,0.0047176846115392634,0.0010119532136677045,0.017420419885236738,0.05328165966672299,0.10715010670815073,0.17685432499925624,0.25958453891111744,0.352005895194909,0.4503928908488799,0.5507795480689829,0.6491192827339013,0.7414480221290901,0.824043996637714,0.8935777641985705,0.9472464200482296,0.9828865817553236,0.9990615951225794,0.9951194456884492,0.9712190414168563,0.9283238071203902,0.8681628488255968,0.7931612535440475,0.7063423340639586,0.611205759272876,0.5115864825756428,0.4115001550002227,0.3149812543860425,0.22592045566389413,0.14790779782820734,0.08408796953784264,0.0370335467798491,0.008641292383502197,5.56975490322853e-5,0.011622847430495353,0.04287647045021836,0.09255673369666184,0.1586610267635939,0.23852468693503526,0.32892841168544407,0.4262280286993464,0.526501392383677,0.6257064854772538,0.7198443526847823,0.805120298483915,0.8780968512249632,0.935832327543537,0.9759994115574573,0.9969789689228604,0.9979253141068487,0.978800299954202,0.9403748553984409,0.8841979093321052,0.8125339533144493,0.7282717599624957,0.6348079365852982,0.5359100080120525,0.4355645477424436,0.3378164792495473,0.2466060251964861,0.165609877140579,0.09809298817109613,0.04677696271625531,0.013730348723812569,0.0002852545351409441,0.0069836516249364156,0.03355552774204579,0.0789297710978416,0.1412773468607566,0.21808502551332326,0.3062566910831841,0.4022381455152892,0.5021603783235544,0.6019955263253137,0.6977192367246723,0.7854728886923075,0.8617191342930128,0.9233844889093841,0.9679832233445747,0.9937175635159112,0.9995501586917946,0.9852458970787026,0.9513813831728262,0.8993216948444974,0.8311653570768548,0.7496597504662417,0.6580903643659446,0.5601483588768544,0.4597817742584792,0.3610363855059714,0.2678926172419269,0.18410509288040472,0.11305128583306057,0.057595373624272084,0.01997278295307947,0.0017000796881845859,0.0035138361284662856,0.02534093978851537,0.06630154056144527,0.12474451745889514,0.19831403526466318,0.2840445082046049,0.3784801426491757,0.47781424008472884,0.5780426450535602,0.6751251525793963,0.7651483687482367,0.8444834595378437,0.9099324290437534,0.9588570306294761,0.9892851145950305,0.9999901254914476,0.990540544546097,0.9613172841756831,0.9134983334144344,0.8490112731999704,0.7704555756247018,0.680997819268397,0.5842440444796901,0.4840943939626015,0.3845858981030449,0.2897297423556673,0.20334957643932605,0.1289273830942982,0.06946311942845995,0.027353788706983684,0.004296817199212544,0.0012216309600903696,0.01825219068469286,0.0547019948551174,0.10910175260277899,0.1792586107935933,0.26234454789343975,0.35501037145898795,0.4535207240173047,0.553904655250023,0.6521156909203172,0.7441949461675217,0.8264307080757516,0.8955080547464406,0.9486424797330038,0.983692135439356,0.9992441709531671,0.9946716840375549,0.9701589915475681,0.9266941996214899,0.8660293731423929,0.790609910038159,0.7034759673404817,0.6081399125164424,0.5084447400069652,0.4084091601986779,0.3120656052895342,0.2232976820285092,0.14568362360612147,0.08235205114694022,0.03585585905534344,0.00806930789374033,0.0001124729772219446,0.012306094160275005,0.044158646819736525,0.09438615520240662,0.16096394946168363,0.2412082800581098,0.3318844996490058,0.4293374516574029,0.5296388095597069,0.6287454276483686,0.7226623201535585,0.8076036990387045,0.8801455790396491,0.9373637984413652,0.9769518919775226,0.9973140643987033,0.9976295169466178,0.9778855337354424,0.9388779943289198,0.8821792918512494,0.810074949852066,0.7254714928983962,0.6317792846281804,0.532775056061022,0.43244966564721377,0.33484722784435395,0.24390209494539017,0.16328026341729507,0.09623159765766798,0.045458828026615494,0.013008603840631516,0.0001889929800547585,0.007516753699283674,0.034696504111995485,0.08063262902900947,0.14347344418438995,0.22068583759074523,0.30915737923217895,0.4053217830552568,0.5053026638876592,0.6050697944460449,0.7006015637162903,0.7880470880121017,0.8638814400184855,0.9250477385404958,0.9690803713223484,0.9942043838275625,0.9994070276204114,0.9844785842348762,0.9500208189217656,0.897422723503633,0.8288045261425144,0.7469322249856174,0.6551060908359727,0.5570276333031442,0.45665039302576194,0.35802057452837627,0.2651139437989426,0.18167556524229217,0.11106883820975305,0.05613991843935162,0.01910298957560158,0.001451009471596043,0.0038955290881576565,0.026338009889005087,0.06787379592715703,0.12682858050785017,0.20082589745752716,0.28688291642720654,0.3815306807234974,0.48095394088271765,0.5811449472995779,0.6780650025326778,0.7678072611166502,0.8467542144238184,0.9117235123637821,0.9600962438511693,0.9899225050584963,1.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],73:[function(require,module,exports){
module.exports={"expected":[1.0,0.9899225050584963,0.9600962438511693,0.9117235123637821,0.8467542144238184,0.7678072611166502,0.6780650025326778,0.5811449472995779,0.48095394088271765,0.3815306807234974,0.28688291642720654,0.20082589745752716,0.12682858050785017,0.06787379592715703,0.026338009889005087,0.0038955290881576565,0.001451009471596043,0.01910298957560158,0.05613991843935162,0.11106883820975305,0.18167556524229217,0.2651139437989426,0.35802057452837627,0.45665039302576194,0.5570276333031442,0.6551060908359727,0.7469322249856174,0.8288045261425144,0.897422723503633,0.9500208189217656,0.9844785842348762,0.9994070276204114,0.9942043838275625,0.9690803713223484,0.9250477385404958,0.8638814400184855,0.7880470880121017,0.7006015637162903,0.6050697944460449,0.5053026638876592,0.4053217830552568,0.30915737923217895,0.22068583759074523,0.14347344418438995,0.08063262902900947,0.034696504111995485,0.007516753699283674,0.0001889929800547585,0.013008603840631516,0.045458828026615494,0.09623159765766798,0.16328026341729507,0.24390209494539017,0.33484722784435395,0.43244966564721377,0.532775056061022,0.6317792846281804,0.7254714928983962,0.810074949852066,0.8821792918512494,0.9388779943289198,0.9778855337354424,0.9976295169466178,0.9973140643987033,0.9769518919775226,0.9373637984413652,0.8801455790396491,0.8076036990387045,0.7226623201535585,0.6287454276483686,0.5296388095597069,0.4293374516574029,0.3318844996490058,0.2412082800581098,0.16096394946168363,0.09438615520240662,0.044158646819736525,0.012306094160275005,0.0001124729772219446,0.00806930789374033,0.03585585905534344,0.08235205114694022,0.14568362360612147,0.2232976820285092,0.3120656052895342,0.4084091601986779,0.5084447400069652,0.6081399125164424,0.7034759673404817,0.790609910038159,0.8660293731423929,0.9266941996214899,0.9701589915475681,0.9946716840375549,0.9992441709531671,0.983692135439356,0.9486424797330038,0.8955080547464406,0.8264307080757516,0.7441949461675217,0.6521156909203172,0.553904655250023,0.4535207240173047,0.35501037145898795,0.26234454789343975,0.1792586107935933,0.10910175260277899,0.0547019948551174,0.01825219068469286,0.0012216309600903696,0.004296817199212544,0.027353788706983684,0.06946311942845995,0.1289273830942982,0.20334957643932605,0.2897297423556673,0.3845858981030449,0.4840943939626015,0.5842440444796901,0.680997819268397,0.7704555756247018,0.8490112731999704,0.9134983334144344,0.9613172841756831,0.990540544546097,0.9999901254914476,0.9892851145950305,0.9588570306294761,0.9099324290437534,0.8444834595378437,0.7651483687482367,0.6751251525793963,0.5780426450535602,0.47781424008472884,0.3784801426491757,0.2840445082046049,0.19831403526466318,0.12474451745889514,0.06630154056144527,0.02534093978851537,0.0035138361284662856,0.0017000796881845859,0.01997278295307947,0.057595373624272084,0.11305128583306057,0.18410509288040472,0.2678926172419269,0.3610363855059714,0.4597817742584792,0.5601483588768544,0.6580903643659446,0.7496597504662417,0.8311653570768548,0.8993216948444974,0.9513813831728262,0.9852458970787026,0.9995501586917946,0.9937175635159112,0.9679832233445747,0.9233844889093841,0.8617191342930128,0.7854728886923075,0.6977192367246723,0.6019955263253137,0.5021603783235544,0.4022381455152892,0.3062566910831841,0.21808502551332326,0.1412773468607566,0.0789297710978416,0.03355552774204579,0.0069836516249364156,0.0002852545351409441,0.013730348723812569,0.04677696271625531,0.09809298817109613,0.165609877140579,0.2466060251964861,0.3378164792495473,0.4355645477424436,0.5359100080120525,0.6348079365852982,0.7282717599624957,0.8125339533144493,0.8841979093321052,0.9403748553984409,0.978800299954202,0.9979253141068487,0.9969789689228604,0.9759994115574573,0.935832327543537,0.8780968512249632,0.805120298483915,0.7198443526847823,0.6257064854772538,0.526501392383677,0.4262280286993464,0.32892841168544407,0.23852468693503526,0.1586610267635939,0.09255673369666184,0.04287647045021836,0.011622847430495353,5.56975490322853e-5,0.008641292383502197,0.0370335467798491,0.08408796953784264,0.14790779782820734,0.22592045566389413,0.3149812543860425,0.4115001550002227,0.5115864825756428,0.611205759272876,0.7063423340639586,0.7931612535440475,0.8681628488255968,0.9283238071203902,0.9712190414168563,0.9951194456884492,0.9990615951225794,0.9828865817553236,0.9472464200482296,0.8935777641985705,0.824043996637714,0.7414480221290901,0.6491192827339013,0.5507795480689829,0.4503928908488799,0.352005895194909,0.25958453891111744,0.17685432499925624,0.10715010670815073,0.05328165966672299,0.017420419885236738,0.0010119532136677045,0.0047176846115392634,0.02838823612118402,0.07106944829019962,0.13104084231966112,0.20588497252970533,0.29258487354595525,0.3876456741127363,0.48723547528265737,0.5873398141856538,0.6839234869460592,0.7730932076691772,0.8512545467169117,0.9152568220937692,0.9625201033743254,0.9911392086464879,0.9999605023558145,0.9886283983313708,0.9575996934570887,0.908125154198618,0.8421990982323999,0.7624790035404827,0.6721783855268477,0.5749372602764807,0.47467541558064474,0.3754344043703392,0.2812146297994035,0.19581408907435705,0.12267527626382735,0.06474641543232046,0.024362617787823948,0.0031517533962595046,0.001968831772072188,0.020861536461996788,0.05906830292225873,0.11504901716991744,0.18654709774636385,0.2706804584702556,0.3640576852731636,0.46291474403205574,0.5632667087086298,0.6610683936372966,0.7523774148775029,0.8335131076305947,0.9012048937633992,0.9527241187465727,0.9859940436634858,0.9996735585139205,0.9932112423310464,0.9668675909494362,0.9217045164232454,0.8595425413727982,0.7828874137545896,0.694829100211876,0.5989172295817912,0.4990180074287506,0.39915836937639093,0.30336365541404076,0.21549534852321056,0.13909541837674977,0.07724354461297994,0.03243297501181741,0.006470022727183722,0.0004012538403384558,0.01447130030231547,0.048112998824926534,0.0999702532214285,0.16795269861637818,0.2493199640114641,0.34079213658498886,0.43868197491136296,0.539043541588359,0.6378312638939276,0.7310630107408113,0.8149806123000551,0.8862013517507972,0.9418543225268593,0.9796961545023357,0.998201444195989,0.996624243754702,0.9750281300963513,0.9342836421255258,0.8760331893279121,0.8026248462771406,0.7170177017962415,0.6226625781470685,0.5233629284547467,0.42312151958913247,0.3259790807133224,0.2358514215728278,0.15637158628394787,0.09074340539899034,0.04161234956151111,0.010958890638193552,1.8668938003563174e-5,0.009232684576307049,0.03822952076915909,0.0858403156363513,0.1501458790001471,0.22855405490249436,0.3179042113592944,0.41459464537167107,0.5147277675010318,0.6142672136204272,0.7092005506708643,0.7957010177567134,0.8702817828000056,0.9299364966709014,0.9722604790603284,0.9955476510945406,0.9988593073400355,0.9820619550005655,0.9458326950090596,0.8916319281027082,0.8216444860988106,0.7386915613684192,0.6461169846289547,0.5476524351956196,0.4472670170637546,0.34900726440703755,0.2568340258668954,0.17446280282384768,0.10521397761205015,0.05187896897462008,0.016607710030543343,0.0008219845141872462,0.005158114701702687,0.029441311272967452,0.07269271906554314,0.1331688747064631,0.20843198558550102,0.2954481972260099,0.39070988789743344,0.49037706077634363,0.590432134140642,0.6868418900075471,0.7757200530687909,0.8534839463697533,0.9169989089449354,0.9637046539381013,0.991718473713616,0.9999111317631558,0.9879523822065178,0.9563242819963584,0.9063017592121825,0.8399012207352665,0.7597992709280676,0.6692248177665393,0.5718289156249279,0.47153759134786777,0.3723935861876533,0.27839339298623555,0.19332615762956384,0.12062093865360451,0.06320848196417211,0.02340308252872475,0.0028092951930944743,0.002257255108079781,0.021769214998337838,0.06055864815549966,0.1170619533138596,0.1890014833857847,0.2734773573696853,0.3670843544945516,0.4660491786003359,0.5663825596297732,0.6640400610237318,0.7550851108769945,0.8358476850722003,0.903072245877678,0.9540489726075889,0.9867229944389075,0.9997772222127388,0.9926854402716587,0.9657335182022199,0.9200078874376927,0.8573517472289847,0.7802907653201259,0.691931268332618,0.5958350258021506,0.49587567532072996,0.3960825762836722,0.30047838649394965,0.21291690890755172,0.13692774491424925,0.07557401617705911,0.0313288902599384,0.005975887293356075,0.0005369863139026987,0.01523142931000776,0.04946688358182738,0.10186331866037956,0.17030863530784918,0.2520438041950854,0.3437740823180694,0.4418018240217455,0.542175533021517,0.6408491471385841,0.7338451349844208,0.8174148301706611,0.8881895399752839,0.9433163372781294,0.980573061995349,0.9984578963074435,0.9962499029051739,0.9740380859579113,0.9327178033573634,0.8739546748590898,0.8001174409838299,0.7141824791350943,0.6196138258861821,0.5202235417360692,0.42001804702777135,0.3230366232254304,0.2331885895601984,0.154095718451137,0.08894624193229278,0.04036633408389767,0.01031425000836056,1.3886066930202112e-6,0.00984346111332457,0.0394437337846586,0.08760902022824107,0.15239777872211868,0.23119837572232005,0.32083436075823213,0.4176925090867452,0.5178684707085561,0.6173241546376693,0.7120505042672597,0.7982291023604701,0.8723860913718879,0.9315322045749648,0.9732832633432381,0.9959562833425557,0.9986373155955046,0.9812182877462188,0.9444013604548458,0.8896706233155524,0.8192322712349892,0.735925672760295,0.643108915190344,0.5445234401447407,0.44414322612778273,0.34601459753540875,0.25409311740064433,0.1720841387277895,0.10329344178776712,0.050493978182325816,0.01581409322105748,0.0006517323650386264,0.005618090073579274,0.030512972567938168,0.0743328676384869,0.13531139620158888,0.21099051500470156,0.2983196003001615,0.3937784184267241,0.49351902635721256,0.5935208822041128,0.6897529131816653,0.7783360080683221,0.8556993841015863,0.9187245251589368,0.9648708890795932,0.9922783168676461,0.9998420156635134,0.9872570929217808,0.9550308466235231,0.9044623161049623,0.837589917808086,0.757109276755165,0.6662645659585829,0.5687177338724119,0.4684008913242707,0.3693578082074792,0.2755809091984188,0.19085033919869043,0.1185815857705273,0.06168780090234022,0.022462371910980106,0.002486475045395675,0.0025653383040522004,0.022695782710586865,0.06206635045828868,0.11909001475787667,0.19146815285524826,0.27628320346819646,0.37011627362265276,0.4691849541593211,0.569495788570316,0.6670052491502183,0.7577827315160566,0.8381689971904491,0.9049236774306066,0.9553558924267525,0.9874327206128454,0.9998611456937371,0.992140178105898,0.9645810498965692,0.9182946689662337,0.8551468383936369,0.7776830459514279,0.689025855545551,0.592749036727386,0.492733506115416,0.3930108877249104,0.2976009982853841,0.21034980850964857,0.13477441209210544,0.07392125173316094,0.03024331709558481,0.005501264840831799,0.0006924465946676062,0.01601070572329044,0.050838563511172885,0.10377210971559658,0.1726775941601159,0.25477743816100473,0.34676219866778746,0.4449239718456667,0.5453058586040397,0.6438614671188018,0.7366180228048955,0.8198365107794436,0.8901623954760455,0.9447608419055442,0.9814309877971183,0.9986946603118575,0.9958559611600052,0.9730293182469368,0.9311348730866009,0.8718613899157202,0.797598181641574,0.7113387966870528,0.616560349114309,0.5170833562272412,0.4169177335963248,0.3201011554430415,0.2305362960737919,0.15183351315747695,0.08716531428099311,0.0391384732325471,0.009688951003031132,3.857237639959266e-6,0.010473597870084339,0.040676137867313666,0.08939401345316145,0.15466340804851236,0.2338533136779029,0.3237715868477177,0.4207936237859041,0.5210084681466132,0.6203764615814242,0.7148920822855899,0.8007454075009337,0.874475691425199,0.9331108678052459,0.9742873538676262,0.9963453262923252,0.9983956286572238,0.9803556133154805,0.9429524729204972,0.8876939273047864,0.8168074473240035,0.733150465551871,0.6400951932309122,0.5413926865054929,0.4410216414245831,0.3430280127844675,0.25136192177285455,0.1697184266636323,0.10138857509269139,0.0491267419942617,0.01503960080308292,0.0005012034908477014,0.006097592559047682,0.0316031776775767,0.07598982922639014,0.13746832217966798,0.21356045973043303,0.3011989693536399,0.39685114449967057,0.4966612479238002,0.5966059363765721,0.6926564414887338,0.7809409693426792,0.8579007724069827,0.9204336025773152,0.9660187627348078,0.9928187159958762,0.9997531567868367,0.9865425579397187,0.9537194384267446,0.9026068975313443,0.8352652807427938,0.7544091272712474,0.6632977470271192,0.5656038379044855,0.46526543940335624,0.366327190337052,0.2727772895235278,0.18838673157168956,0.11655729816501875,0.06018443231074272,0.02154052309080373,0.0021833057039264414,0.0028930691913091056,0.023641203001136535,0.06359135027935209,0.12113312139752147,0.19394700872617054,0.27909788594038376,0.37315332290262154,0.47232194685204104,0.5726062725638176,0.6699638408976607,0.7604701702439647,0.8404769522980732,0.9067591152942719,0.9566448265833053,0.9881231941525066,0.9999253256421028,0.9915754773705467,0.9634102315527142,0.9165649286776266,0.8529279019563221,0.7750643586482757,0.6861129766087883,0.5896593842479958,0.4895916239223189,0.38994342502575824,0.29473160443951213,0.20779414872492347,0.13263550496272208,0.07228531656223774,0.0291762983967625,0.005046174116267288,0.0008676285422578034,0.0168090987622736,0.05222798443430543,0.10569655099357872,0.17505948160397133,0.25752075793605433,0.34975636760942475,0.4480482950644462,0.5484343946942022,0.6468681048538697,0.7393815646785922,0.8222455584747876,0.8921198403291632,0.9461877793540104,0.9822698980212662,0.9989117268575185,0.9954424340791199,0.9720018668077706,0.929534913835869,0.8697534171784504,0.7950671677561648,0.7084867667720028,0.6135022684377792,0.5139424959594318,0.41382070175107183,0.3171727933113757,0.2278946458739753,0.1495850597556298,0.08540069278823281,0.037928815505541114,0.009083018320290903,2.607473333815502e-5,0.011123069957417409,0.041926684339591125,0.09119522480738501,0.15694267749143376,0.23651876390440685,0.32671577361309456,0.42389786698122034,0.5241476357914838,0.6234240138915954,0.7177251724890963,0.803249833788998,0.8765505004248395,0.934672424007661,0.9752727109738841,0.9967147645774171,0.998134256071353,0.9794739657822928,0.941486089634217,0.8857019181460171,0.8143701101416199,0.7303660493583953,0.6370759377867456,0.5382602979364903,0.4379023862506011,0.3400476281184539,0.2486405468603904,0.16736576007235743,0.09949945276530425,0.04777731441356625,0.01428426336754246,0.0003704038372087104,0.006596603218700092,0.0327118835409243,0.07766353838252371,0.13963956744636946,0.21614171825491324,0.3040861906570275,0.3999279447496402,0.49980360136453855,0.5996871748044584,0.6955523602450662,0.7835348340010242,0.8600880243354172,0.9221260736948764,0.9671482295649922,0.993339649753603,0.9996445586428775,0.9858088054830607,0.9523901092040626,0.9007355767767062,0.8329274013579684,0.75169892912693,0.6603244781556571,0.5624873507139325,0.46213135942929734,0.36330185227983375,0.26998264469902195,0.18593543205623625,0.11454815579247368,0.058698435569483565,0.020637572479412003,0.0018997991432771477,0.0032404348251238724,0.024605438527748102,0.06513358738419145,0.12319119253408883,0.19643795308861212,0.2819212936118418,0.3761953823769885,0.4754600327734582,0.5757138887522885,0.6729157194075076,0.7631473209121719,0.8427714592353983,0.9085784869724862,0.9579157241668677,0.98879438778555,0.9999697595228545,0.9909913603701725,0.9622211094156856,0.9148187348932241,0.850695025560642,0.7724348068436877,0.6831927465752957,0.5865661903991866,0.48645015283963755,0.3868803093449694,0.2918703182917566,0.20525003049688506,0.1305111080087406,0.07066627528052011,0.0281278763086103,0.004610633094847549,0.001062525237331191,0.01762657689200159,0.053635091471820384,0.10763656648267861,0.17745420355952757,0.2602736551645144,0.3527564708792007,0.45117467027342323,0.5515610177209932,0.6498689415875012,0.7421356514510893,0.8246418781040283,0.8940617972194049,0.9475970932623072,0.9830897595324782,0.9991090873707253,0.9950093379960255,0.9709557722227129,0.9279179888004161,0.8676308399080698,0.7925244992976581,0.7056265020394938,0.6104397046447608,0.5108010849904328,0.4107270738187032,0.31425165249496745,0.22526374330075638,0.14735044705506967,0.08365244715308001,0.03673740868199549,0.008496475893284228,6.804021624012835e-5,0.01179185172246483,0.043195323807355246,0.09301258314659588,0.1592354970242309,0.23919462112177547,0.32966680476477983,0.42700511606118285,0.5272858496522098,0.6264666911958436,0.7205496629762851,0.8057422823047646,0.8786104364199234,0.9362168115037923,0.9762392957423474,0.9970645836057463,0.9978532081615945,0.9785733799700065,0.940002268515272,0.8836946745196768,0.8119203559578827,0.7275725341588088,0.6340512681125059,0.5351263981609522,0.43478558381029125,0.3370735612567034,0.2459291001521806,0.16502623187968102,0.09762614942224546,0.046445748739973314,0.013548110748783537,0.00025933857045074005,0.007115102342596269,0.03383904636628643,0.07935392899866611,0.14182504624174874,0.21873418862352811,0.3069811501707652,0.4030086976490785,0.502945962562637,0.6027644757848902,0.6984405550676166,0.7861174995907847,0.8622610534947581,0.923801871662342,0.9682592449584171,0.9938410975649682,0.9995162255210488,0.9850558645335779,0.9510429114613713,0.8988484277545605,0.8305763719952497,0.7489787893696873,0.6573448767824656,0.5593683953958704,0.45899877519211335,0.36028191353073047,0.2671970851078971,0.1834965374738204,0.1125542380100481,0.05722986937251956,0.019753555741581164,0.0016359665614021357,0.0036074214852410136,0.02558845120500719,0.06669300085746571,0.12526414687783305,0.19894088755515588,0.2847533149635052,0.3792423318903639,0.4785990879753404,0.5788185143909914,0.6758607680863408,0.7658140777785077,0.8450524273739007,0.9103817206036369,0.9591685349794976,0.9894462750011404,0.9999944455809407,0.9903878501762527,0.9610137304534598,0.9130561565842241,0.8484482974008657,0.7697944943997674,0.6802652807884451,0.5834695773559994,0.48330921694926865,0.3838216616696057,0.2890172528572761,0.20271755431324828,0.12840130513964532,0.06906419183694129,0.02709809224174209,0.004194658979588761,0.0012771289818501175,0.01846310782370081,0.055059829045775,0.10959207955608918,0.17986166543999643,0.2630360211123311,0.35576238997892695,0.45430297398694414,0.5546856041889283,0.6528638587925779,0.7448801743413171,0.8270253750172727,0.8959881894432995,0.9489887279653024,0.9838905399478458,0.9992867340561241,0.9945566900171632,0.9698910758104624,0.9262841618456104,0.8654937419421883,0.7899702766964711,0.702758115464373,0.6073727787005243,0.5076592473998235,0.4076369719913989,0.3113378483731565,0.2226436922695912,0.1451297633186257,0.08192064642782826,0.03556429982012427,0.007929346889289257,0.0001297520287925069,0.012479916749648046,0.04448200616185227,0.09484601668872855,0.16154177608500314,0.24188077963893306,0.3326245637428242,0.43011524829558234,0.5304229857755128,0.6295043733143828,0.7233654421853537,0.8082226546014055,0.880655418047047,0.9377439692933873,0.9771870699948113,0.9973947695601482,0.9975524960287903,0.9776538914499823,0.9385010681716597,0.8816722757079744,0.8094582815332443,0.7247700302914957,0.6310213036766652,0.531991110961738,0.43167135721123706,0.33410592966899055,0.24322768874508915,0.16269993449234643,0.09576873905530159,0.045132097567712415,0.01283117202338746,0.00016801207743399882,0.00765306945104377,0.03498462163294219,0.08106093430770317,0.14402467224371446,0.22133776843877084,0.3098837335496365,0.40609328151428103,0.5060882074009911,0.6058377177705698,0.7013209118783083,0.7886888641017701,0.8644197740546056,0.9254609302889826,0.9693517650321706,0.9943230396237656,0.9993681624902557,0.984283764830971,0.9496778984103394,0.8969455250035625,0.828212285515681,0.7462488154397047,0.6543590605959617,0.5562470951428818,0.4558678104226811,0.35726749337139985,0.26442072077425605,0.1810701441560057,0.11057562357358386,0.0557787917253153,0.018888507794238507,0.0013918183791662986,0.003994014676402202,0.026590202205854285,0.06826952910541512,0.12735190255112344,0.2014557132648333,0.28759383813608463,0.38229405109425907,0.4817389884711636,0.5819200268533026,0.6787988706105533,0.7684703355113062,0.8473197666198227,0.9121687449635485,0.9604032095376195,0.9900788300510228,0.9999993828413111,0.9897649706262481,0.9597881423551431,0.9112772633690371,0.8461878062183082,0.7671435256036898,0.6773306948773408,0.5803696674286185,0.4801689403120339,0.3807676028102098,0.2861725208265599,0.20019682020180962,0.12630617968852115,0.06747912951066243,0.02608698687060418,0.0037982682006525437,0.0015114312993904089,0.01931865851604031,0.056502140881810214,0.1115630129749059,0.18228177215534458,0.26580774667151735,0.35877400618069444,0.45743308264317584,0.5578080306830125,0.6558527381757038,0.747615024946054,0.8293959550710566,0.8978989409121583,0.9503626284961606,0.9846722076381095,0.9994446598970217,0.9940845080212402,0.9688078196244201,0.9246334975043896,0.8633422076919941,0.7874046008393754,0.6998817203422844,0.6043016117425876,0.5045171072839842,0.40455051832216254,0.3084314960354512,0.2200345962673687,0.14292309625891003,0.080205359015186,0.034409535255432,0.0073816537087816325,0.00021120773349880828,0.013187237861760348,0.04578668058164692,0.09669545301675414,0.16386142358029238,0.2445771333578744,0.33558893372158893,0.4332281408402954,0.5335589202506689,0.6325369402647685,0.7261723988985456,0.8106908527090908,0.8826853645334372,0.9392538370567013,0.9781159962960688,0.9977053093989249,0.9972321315504755,0.9767155365402176,0.9369825478978695,0.8796348015916602,0.8069839841148267,0.7219586484498115,0.627986164156917,0.5288545601765144,0.42855982945923915,0.3311448505709428,0.24053641933951936,0.16038695979454848,0.09392729502852254,0.04383641278342254,0.012133475509027658,9.642796537479015e-5,0.00821048329539692,0.03614856409292061,0.0827844868862963,0.14623835857134349,0.22395235486439224,0.31279382614729057,0.4091815745102768,0.5092302117671211,0.6089067793744245,0.7041933169087486,0.7912488259701138,0.8665641007497702,0.9271031840452366,0.970425746633848,0.9947854568942356,0.9992003753986975,0.9834925368716503,0.9482951239662931,0.8950269436846473,0.8258352352960312,0.7435091151655981,0.6513671475299884,0.5531235732402052,0.4527385887880108,0.35425871086548516,0.26165366135905743,0.17865634794052565,0.10861239063447048,0.05434525994259842,0.018042462805069492,0.0011673642399472883,0.004400199128941462,0.027610651963085042,0.06986310985828748,0.12945437709171487,0.20398233088694978,0.29044275093452454,0.38535041945175075,0.4848796102410591,0.5850183036356047,0.6817299109308447,0.7711159891936084,0.8495733874177108,0.9139394894682794,0.961619699074032,0.9906920279505051,0.9999845711089532,0.9891227463226822,0.9585443935290395,0.909482125510424,0.8439136412979482,0.7644820051634871,0.6743891047524102,0.57726658305735,0.477029446962673,0.3777182533961171,0.283336234560931,0.19768792772663402,0.12422581440868607,0.06591115090851529,0.02509460013187559,0.003421476414691871,0.001765422935469052,0.02019319517644952,0.05796197001145642,0.11354928889111526,0.18471442811614697,0.26858872236431197,0.3617912005316107,0.4605648726089514,0.5609281738735232,0.658835461682059,0.7503400952440527,0.8317535246321495,0.8997939761550198,0.9517187405885059,0.985434731728939,0.999582858655657,0.9935928106585169,0.9677060464510858,0.9229660609747656,0.8611763221388311,0.7848275730655355,0.6969974302851547,0.601226325076036,0.5013747887512869,0.40146783471980474,0.3055327102770821,0.21743655834821674,0.14073053303497363,0.07850665266562651,0.03327316059883845,0.0068534179845680665,0.0003124041130198041,0.013913787121001775,0.04710929553467624,0.09856081908157321,0.16619434788856158,0.2472835757779524,0.33855979761427396,0.4363436707421857,0.5366935292144447,0.6355642722665398,0.7289704222465885,0.8131467791388363,0.884700195700217,0.9407463551569328,0.9790260379553402,0.9979961908563661,0.9968921273804204,0.975758352303874,0.9354467676724536,0.8775823326469752,0.8044975614324917,0.7191384996778633,0.6249459694352649,0.5257168696929,0.4254511234535412,0.32819044091936356,0.23785539823534668,0.1580873991442201,0.09210189007533592,0.04255874556411138,0.011455048763338638,4.458906170529131e-5,0.008787321858904684,0.03733082777277713,0.08452451865749117,0.14846601778840773,0.2265778446293209,0.3157113130208169,0.41227345465553544,0.5123718515580593,0.6119715393745957,0.7070576567045594,0.7937972840823775,0.8686939488835244,0.9287285680653237,0.9714811473432965,0.9952283311118031,0.9990128708736347,0.9826822119075721,0.9468946427460982,0.8930927595779794,0.8234453152251219,0.740759796760118,0.6483692557592573,0.5499979530608153,0.4496112338861774,0.35125568485400804,0.2588960161556711,0.1762552441676294,0.10666461673653205,0.05292933064604971,0.01721545419119208,0.0009626130092392216,0.004825958799367647,0.02864976017094928,0.07147368017274686,0.1315714874559865,0.20652064062509884,0.2932999408323569,0.388411316242297,0.48802082923661233,0.5881132223620413,0.6846537732769105,0.7737509343272947,0.8518132007539942,0.9156938841768869,0.962817955539768,0.9912858444794813,0.9999500109689017,0.9884612026321464,0.9572825331007994,0.9076708139128176,0.8416258924648193,0.7618100382039966,0.6714406266006545,0.5741604468079408,0.47389086090498767,0.37467373387063485,0.28050850608813405,0.19519097598403085,0.1221602914704884,0.0643603179625864,0.024120971222872656,0.0030642985042449444,0.0020390938579192275,0.02108668326244545,0.05943925877433287,0.11555082885074125,0.18715953723724238,0.27137883834767973,0.3648138538584027,0.4636982201847376,0.5640459105209239,0.661811911499915,0.7530552776004178,0.8340979905811879,0.9016732203217261,0.9530570106785826,0.9861780821021284,0.9997013248734503,0.9930816173500727,0.9665857998083238,0.9212819181171961,0.8589961708309606,0.7822392951624475,0.6941053592167846,0.59814704016862,0.4982324159171649,0.39838904294429583,0.30264160559434894,0.21484968112957287,0.13855216024873362,0.07682459447471901,0.032155220734919054,0.006344660580921091,0.000433337170297754,0.014659535830108095,0.04844979878024358,0.10044204120487615,0.16854045686390767,0.2500000000000119,0.34153703807756863,0.43946171494393266,0.5398266888559767,0.6385862497460613,0.7317594017130606,0.8155903368863979,0.8866998319654977,0.9422214646425641,0.9799171590277775,0.998267402443225,0.9965324969481182,0.9747823765478689,0.933893788155705,0.8755149499423796,0.8019991116950586,0.7163096953659582,0.6219008395934379,0.5225781634434726,0.42234536198191935,0.3252428174076397,0.23518473132762224,0.15580134336949686,0.09029259629565728,0.04129914637511084,0.0107959185828434,1.2497413960088632e-5,0.009383562357575037,0.038531365975436715,0.0862809608934691,0.15070756190671708,0.22921413403188395,0.31863607893519263,0.4153687998269111,0.515513002685153,0.6150318767190741,0.7099138181299753,0.7963341377794524,0.8708092343310823,0.9303370181497699,0.9725179254742491,0.9956516447838049,0.9988056563211289,0.981852821944972,0.9454765100660099,0.8911430490800816,0.8210426197000871,0.7380009688159495,0.6453655036945731,0.5468703580605652,0.44648586924153755,0.34825853395057893,0.2561478940857116,0.173866927676174,0.1047323788130175,0.05153105976208677,0.016407514617828023,0.0007775727743150607,0.00527127687101675,0.02970748578671084,0.07310117643444625,0.13370315002225985,0.20907054222101268,0.29616529497619726,0.3914766205664778,0.4911625213858622,0.5912046607893928,0.6875703421619093,0.7763750668372003,0.8540391181604492,0.9174318597942367,0.9639979316060634,0.9918602561833709,0.9998957037862142,0.987780365684316,0.9560026109114409,0.9058434001194572,0.8393246500804823,0.759127730262673,0.6684853768811378,0.5710513813666805,0.4707533061069857,0.37163416448631326,0.2776894470978468,0.19270606359866305,0.12010969245803321,0.06282669192770762,0.023166138600032138,0.002726748577132454,0.0023324332572726147,0.02199908748300905,0.060933948820450945,0.11756755379687184,0.18961700294162692,0.27417798441752406,0.36784184677221954,0.46683300160949326,0.5671611174807881,0.6647819700653417,0.7557604647707834,0.836429260316323,0.9035365991858606,0.9543773859073648,0.9869022293967958,0.9998000538712202,0.9925509482870409,0.9654471239436846,0.9195811354519975,0.8568018398800336,0.7796398693620474,0.691205621368309,0.5950638786460676,0.4950901128990968,0.39531426460181696,0.29975829618025557,0.2122740667879785,0.1363880639416134,0.07515925088046299,0.031055759820085738,0.005855401592755993,0.0005740021287115038,0.015424454533478127,0.04980813737109979,0.10233904508212971,0.17089965783963823,0.2527262987305744,0.34452053751639466,0.4425821502889619,0.5429582754215616,0.641602753341163,0.7345392271387431,0.8180214294360261,0.8886841943476047,0.9436791072496435,0.9807893243158579,0.9985189334471756,0.9961532544582672,0.9737876478212996,0.9323236706872614,0.8734327351354827,0.7994887335863918,0.7134723472462802,0.6188508949080921,0.5194385654009589,0.4192426677158885,0.3223020964610922,0.23252452410241486,0.1535288827650983,0.0884994851530096,0.04005766496812424,0.01015611100190289,1.5428969601938292e-7,0.009999181241088506,0.03975013128197863,0.08805374421819862,0.1529629023896646,0.23186111894388028,0.3215680083679534,0.4184674877642984,0.5186535410791361,0.6180876705305369,0.7127616883722089,0.7988592868606388,0.8729098735428269,0.9319284707679231,0.9735360400760308,0.9960553811901853,0.9985787399257433,0.981004399743123,0.9440407819395134,0.8891778892006151,0.8186272436226548,0.7352327403013852,0.6423560099782375,0.543740911773323,0.44336261829987916,0.3452673765367397,0.25340940369457343,0.17149149279994452,0.10281575318353509,0.050150502519673346,0.015618675996984022,0.0006122508438979879,0.005736135754692284,0.03078378703228235,0.07474553436049758,0.13584928059403462,0.21163193495862553,0.29903870019017675,0.394546211350812,0.49430456259817307,0.5942924968119325,0.6904795023871432,0.778988283075285,0.8562510517176634,0.9191533476737239,0.9651595806661938,0.9924152403740305,0.9998216517059169,0.9870802623709279,0.9547046775153339,0.9039999563095786,0.8370100050395292,0.7564351872853706,0.665523472320468,0.5679395095355285,0.4676169064958712,0.36859966530012667,0.2748791689374087,0.19023328871973,0.1180740983659409,0.06131033337912034,0.022230139977352847,0.0024088399659190074,0.002645429547201872,0.022930371799975702,0.06244598111246508,0.11959938407286363,0.19208672816426953,0.27698605001301424,0.37087505967332113,0.46996909306545753,0.5702736717085083,0.6677455200669046,0.7584555499055134,0.8387472417570672,0.9053840391475957,0.9556798141226024,0.9876071450105564,0.9998790417493636,0.992000824429804,0.9642900638326107,0.9178637801567728,0.854593415957869,0.7770293983365212,0.6882983312736597,0.5919769622871566,0.49194800381191744,0.39224362114015154,0.29688289591982975,0.20970981705511377,0.13423832959120202,0.07351068766063429,0.029974821280912833,0.0053856603448516616,0.0007343934322767143,0.016208513018313053,0.05118425765555923,0.10425175578536716,0.1732718576318989,0.25546236428629804,0.3475101780883487,0.445704853526155,0.5460881652197143,0.6446136639058145,0.7373097887260086,0.820439960764377,0.8906532044680888,0.9451192254041669,0.981642499370751,0.998750773933239,0.9957544148901951,0.9727742054140085,0.9307364772837122,0.871335770469601,0.7969665262614807,0.7106265673885536,0.615796255846006,0.5162981995733809,0.4161431632056748,0.31936839423239105,0.22987488163272868,0.15127010708872035,0.08672262747179071,0.038834350379220894,0.00953565129163575,7.560176442600319e-6,0.010634154193698286,0.04098707555357983,0.08984279861023131,0.15523195015580626,0.23451869481457344,0.32450698551359725,0.4215693960756431,0.5217933426949438,0.6211388001111495,0.7156011549460224,0.8013726315874663,0.8749957835475917,0.9335028630605906,0.974535450935093,0.9964395243841533,0.9983321306502317,0.9801369788130538,0.9425875150749954,0.8871973575595674,0.8161992823954758,0.7324552205559722,0.6393408934794044,0.5406097378060513,0.44024160442343246,0.3422823307573824,0.2506806531472191,0.16912903336399188,0.10091481555102072,0.04878771344808808,0.014848969486246033,0.00046665374788218417,0.00622051708938598,0.03187862139588504,0.07640668900196546,0.13800979440340133,0.214204717667913,0.3019200429804508,0.3976199673525256,0.49744682876903684,0.5973766084662353,0.6933811390464755,0.7815904798245736,0.8584489140586898,0.9208582798199303,0.9663028568372838,0.9929507751306855,0.9997278576529236,0.9863609203446613,0.9533887841783192,0.9021405552956219,0.8346820487658682,0.7537325156222927,0.6625550299080262,0.5648249542272765,0.46448178595329176,0.36557035616891,0.272077782607257,0.1877727490169559,0.11605358959615847,0.05981130220997888,0.02131301232496552,0.0021105852273666237,0.0029780703649719964,0.023880499429428714,0.06397529592809947,0.12164623942537817,0.19456861535581177,0.279802924221181,0.37391337275570546,0.47310637068323963,0.5733834502643393,0.6707024444501238,0.7611404265541405,0.8410518433476679,0.9072154672366679,0.9569642438809536,0.9882928011006162,0.9999382853880157,0.9914312675071677,0.9631146651767232,0.9161299200636648,0.8523709862927905,0.7744079851943424,0.6853836037650538,0.5888864130190425,0.4888062127628158,0.38917723384356917,0.2940155183857035,0.20715703321384882,0.1321030421077416,0.07187896993028381,0.028912447812308728,0.004935455391047006,0.0009145047458481992,0.017011680315858202,0.05257810527955098,0.10618009776629272,0.1756569625435469,0.25820808859792266,0.3505058417084782,0.44882970131490096,0.5492162346259405,0.6476188625150765,0.7400709770431458,0.8228458353441737,0.892606784554939,0.9465417622243111,0.9824766504937275,0.9989629147441736,0.9953359939972839,0.9717420893549973,0.9291322706360194,0.8692241387707731,0.7944325893425335,0.707772468195437,0.6127370430595003,0.5131571899989016,0.41304697087566944,0.31644182659706027,0.22723590857418463,0.1490251055576028,0.08496209343436972,0.037629250926911495,0.008934563958997888,3.471478168182163e-5,0.011288456135226443,0.04224214993337316,0.09164805340545201,0.15751461558217505,0.23718675667491673,0.32745289428833063,0.42467440224169273,0.5249322835165278,0.6241851449473188,0.7184321056980167,0.8038740726877815,0.8770668819561072,0.9350601328423289,0.9755161185766896,0.996804059192804,0.998065838235181,0.9792505934161546,0.9411167668736662,0.885201532384063,0.8137588319182019,0.729668519286356,0.6363202732891393,0.5374769598339382,0.4371229508861668,0.3393035145159202,0.24796175022398043,0.16677964268079826,0.09902964099875705,0.04744274637483287,0.014098425487521604,0.00034078723706520986,0.00672440174298744,0.032991945633723985,0.07808457474653713,0.14018460611425282,0.21678878872903884,0.3048092095396695,0.40069776716424316,0.5005891957851737,0.6004568739358979,0.6962751375309099,0.7841815543035044,0.8606326183722266,0.9225465888914183,0.9674277149621826,0.9934668393007515,0.9996143253319116,0.9856223680181246,0.9520549828756087,0.9002652705202554,0.8323408732091747,0.7510198220236328,0.6595801668914252,0.5617078384607931,0.4613480683104024,0.36254635674430924,0.2692853987566449,0.18532454167680001,0.11404824595482888,0.058329657629108134,0.020414791867576387,0.0018319961419488995,0.003330342571918554,0.024849432843211672,0.06552183286238339,0.12370803900767097,0.1970625664866782,0.2826284957809542,0.3769566660120336,0.4762447105464841,0.5764903303181415,0.6736526264224061,0.763814988669266,0.8433429740608722,0.9090308111152847,0.9582306244499676,0.9889591705849143,0.9999777824471694,0.9908423000155211,0.9619209744019477,0.9143796236567228,0.8501346386664612,0.7717757334761535,0.6824615539685245,0.5857923529124024,0.48566486384624846,0.3861152238284232,0.2911562768337045,0.20461581609408092,0.12998228583094784,0.07026416213899522,0.02786868137595666,0.004504804513565108,0.0011143289553863234,0.01783392470256956,0.05398962518884626,0.10812399485920654,0.17805487836756229,0.2609633632147105,0.3535074100539859,0.45195657022985486,0.552342360087676,0.6506182304694569,0.7428226830285942,0.8252389581481219,0.8945448574455996,0.9479466615226422,0.983291744737465,0.999155347500829,0.9948980083063447,0.9706913404107842,0.9275111141072352,0.867097923444262,0.7918870229150998,0.7049101623983157,0.6096733773813559,0.5100156607412818,0.40995421301941104,0.3135225091487419,0.2246077091611024,0.14679396684487245,0.08321795257836462,0.03644241421027722,0.008352872745751638,8.161703285980426e-5,0.011962061222032527,0.04351530484839955,0.09346943729982887,0.15981080850793233,0.23986519914173543,0.33040561833454807,0.4277823836207514,0.528070239561953,0.6272265847143297,0.7212544288112277,0.806363511359601,0.8791230869640012,0.936600218604071,0.9764780042663588,0.9971489712177232,0.9977798731986083,0.9783452785629299,0.9396285954272021,0.883190492505255,0.8113059885838956,0.7268727465616578,0.6332942687160564,0.5343427015956117,0.434006780868738,0.33633104546971204,0.24525280231615343,0.16444341354665604,0.09716030398746717,0.04611565442348703,0.01336707364579609,0.00023465628292679286,0.007247769813048144,0.034123715771670504,0.07977912532097825,0.14237362982588042,0.21938404607629935,0.3077060857513809,0.4037794892189782,0.5037315395291785,0.6035331715565171,0.6991613835332999,0.786761404169658,0.8628020784062856,0.924218208203268,0.9685341106112058,0.9939634125007271,0.9994810592271859,0.9848646345626899,0.9507033262897204,0.8983741760535411,0.8299865708413232,0.7482972136354309,0.6565990007719601,0.558588285355995,0.45821587734277663,0.3595277864684393,0.2665021276792201,0.182888763398662,0.11205814664911973,0.056865458158502746,0.019535514083152405,0.0015730837133919318,0.003702232253988247,0.025837133770332976,0.06708553083020419,0.12578470138273046,0.19956848305063424,0.2854626530878628,0.38000481923814927,0.4793839886969641,0.5795941891542881,0.6765959494573093,0.7664791306109199,0.8456205434015417,0.9108299990809317,0.9594789058101127,0.9896062271431715,0.9999975313667677,0.9902339452179172,0.9607090386567125,0.9126129600692456,0.8478844614101757,0.7691327471507462,0.6795322972993476,0.582694904176416,0.4825240811394078,0.38305771203803485,0.28830528419822743,0.20208626606895963,0.12787614452644802,0.06866632806853162,0.026843563198588327,0.004093724722264935,0.0013338581682240114,0.018675213701417448,0.05541876163119641,0.11008337028395965,0.18046551039100528,0.2637280793087553,0.3565147645688227,0.4550853367658696,0.5554664181290823,0.6536116492997635,0.7455647979954017,0.8276192346525963,0.8964673465899662,0.9493338678084252,0.9840877499073215,0.9993280646024966,0.9944404751169353,0.969622000083915,0.9258730717298262,0.8649572084714316,0.789329927524096,0.7020397630525383,0.6066053798203999,0.5068737358847797,0.4068650117947272,0.3106105571947364,0.22199038720209713,0.1445767790761025,0.08149027379394214,0.03527388710702428,0.007790600627551436,0.0001482650774299321,0.012654942848046136,0.0448064900115312,0.09530687835224516,0.16212043823805428,0.2425539164218174,0.33336504102548103,0.43089321745372045,0.5312070868880389,0.6302629992814002,0.7240680128094661,0.808840849274946,0.8811643173552555,0.9381230595154291,0.9774210700115156,0.9974742468355763,0.997474246835578,0.9774210700115202,0.9381230595154366,0.8811643173552657,0.8088408492749584,0.7240680128094547,0.6302629992814153,0.5312070868880829,0.4308932174537078,0.3333650410254958,0.24255391642183083,0.16212043823806582,0.09530687835227108,0.044806490011525923,0.012654942848049633,0.0001482650774303207,0.0077906006275536566,0.03527388710700802,0.08149027379393359,0.14457677907611144,0.22199038720208408,0.3106105571947219,0.40686501179468393,0.506873735884764,0.6066053798204123,0.702039763052524,0.7893299275240833,0.864957208471421,0.925873071729818,0.9696220000839095,0.9944404751169371,0.9993280646024973,0.9840877499073325,0.9493338678084321,0.8964673465899757,0.8276192346525868,0.7455647979954401,0.6536116492998054,0.5554664181290696,0.45508533676588525,0.3565147645688377,0.2637280793087441,0.1804655103910392,0.11008337028396942,0.05541876163120363,0.018675213701421722,0.0013338581682251771,0.004093724722259273,0.02684356319858322,0.06866632806853806,0.12787614452643759,0.20208626606892421,0.2883052841982132,0.3830577120380196,0.48252408113939216,0.5826949041764006,0.6795322972993065,0.769132747150757,0.8478844614101645,0.9126129600692369,0.9607090386567174,0.9902339452179085,0.9999975313667678,0.9896062271431689,0.9594789058101189,0.9108299990809406,0.8456205434015736,0.7664791306109331,0.6765959494572974,0.5795941891543035,0.47938398869697973,0.3800048192381645,0.28546265308787694,0.19956848305064678,0.12578470138272202,0.06708553083021201,0.025837133770346965,0.0037022322539901342,0.0015730837133907105,0.019535514083148076,0.05686545815849553,0.11205814664909186,0.18288876339867183,0.2665021276792062,0.3595277864684243,0.45821587734278935,0.5585882853559513,0.6565990007719452,0.7482972136354172,0.8299865708413114,0.8983741760535315,0.9507033262897013,0.9848646345626861,0.9994810592271866,0.9939634125007295,0.9685341106112113,0.9242182082032764,0.8628020784062964,0.7867614041696709,0.6991613835333144,0.6035331715565324,0.5037315395292226,0.4037794892189936,0.3077060857513954,0.2193840460762888,0.1423736298258914,0.07977912532100212,0.0341237157716659,0.007247769813050808,0.00023465628292634877,0.013367073645792482,0.046115654423468544,0.09716030398745784,0.16444341354664443,0.24525280231613994,0.33633104546972414,0.43400678086869426,0.5343427015955962,0.6332942687160688,0.7268727465616438,0.8113059885838834,0.8831904925052267,0.9396285954271948,0.9783452785629253,0.9977798731986067,0.9971489712177248,0.9764780042663636,0.9366002186040787,0.8791230869640114,0.8063635113595911,0.7212544288112418,0.6272265847143723,0.5280702395619686,0.4277823836207669,0.33040561833456283,0.23986519914177307,0.15981080850796464,0.09346943729982143,0.043515304848405933,0.011962061222035969,8.161703286008182e-5,0.00835287274574359,0.036442414210271334,0.08321795257835596,0.14679396684486135,0.2246077091610656,0.313522509148701,0.40995421301939566,0.5100156607412945,0.6096733773813406,0.7049101623982754,0.7918870229151102,0.8670979234442513,0.927511114107227,0.9706913404107789,0.9948980083063383,0.9991553475008317,0.983291744737469,0.9479466615226493,0.8945448574455918,0.8252389581481554,0.7428226830286079,0.6506182304694448,0.5523423600876917,0.45195657022987046,0.3535074100540281,0.26096336321472424,0.17805487836757428,0.10812399485921631,0.05398962518885336,0.017833924702573722,0.001114328955387378,0.004504804513562999,0.02786868137596088,0.07026416213898723,0.1299822858309182,0.20461581609409119,0.2911562768336902,0.386115223828408,0.4856648638462328,0.585792352912359,0.6824615539685364,0.7717757334761403,0.8501346386664501,0.9143796236567299,0.9619209744019308,0.9908423000155181,0.9999777824471692,0.9889591705849176,0.9582306244499739,0.9090308111153101,0.8433429740608837,0.7638149886692551,0.6736526264224207,0.5764903303181569,0.47624471054649975,0.3769566660120488,0.2826284957809684,0.1970625664866681,0.12370803900768129,0.0655218328624052,0.024849432843216557,0.003330342571920386,0.0018319961419499542,0.020414791867571946,0.05832965762908743,0.11404824595483698,0.18532454167678786,0.269285398756631,0.36254635674432145,0.46134806831035846,0.5617078384607775,0.6595801668914103,0.7510198220236193,0.8323408732091842,0.900265270520229,0.9520549828756021,0.9856223680181276,0.999614325331911,0.9934668393007541,0.9674277149621883,0.9225465888914266,0.8606326183722375,0.7841815543035173,0.6962751375309242,0.6004568739359132,0.5005891957851893,0.40069776716425853,0.30480920953965773,0.2167887887290752,0.14018460611428346,0.0780845747465303,0.03299194563372959,0.006724401742989994,0.00034078723706360003,0.014098425487511224,0.04744274637483825,0.09902964099874767,0.16677964268078654,0.24796175022396688,0.3393035145158785,0.4371229508861513,0.5374769598339508,0.6363202732891242,0.7296685192863168,0.8137588319181897,0.885201532384053,0.9411167668736722,0.9792505934161502,0.998065838235177,0.9968040591928026,0.9755161185766945,0.9350601328423366,0.8770668819560987,0.8038740726878166,0.7184321056980307,0.624185144947334,0.5249322835165434,0.4246744022416802,0.327452894288372,0.23718675667493005,0.15751461558216578,0.09164805340546106,0.04224214993337949,0.011288456135229774,3.471478168204367e-5,0.008934563958994945,0.037629250926905555,0.08496209343436101,0.14902510555759163,0.22723590857417153,0.3164418265970457,0.413046970875682,0.5131571899988859,0.6127370430594573,0.7077724681954486,0.7944325893425207,0.8692241387707625,0.9291322706360113,0.9717420893549826,0.9953359939972857,0.9989629147441746,0.9824766504937316,0.9465417622243054,0.8926067845549663,0.8228458353441856,0.7400709770431346,0.6476188625150915,0.549216234625956,0.4488297013149448,0.3505058417084932,0.2582080885979115,0.17565696254355884,0.10618009776630238,0.052578105279557974,0.017011680315862254,0.0009145047458491429,0.004935455391048782,0.028912447812303455,0.071878969930261,0.13210304210773094,0.2071570332138361,0.29401551838571505,0.38917723384355385,0.4888062127627717,0.5888864130190551,0.6853836037650393,0.7744079851943293,0.8523709862927995,0.9161299200636404,0.9631146651767173,0.9914312675071648,0.9999382853880159,0.9882928011006136,0.9569642438809715,0.907215467236677,0.8410518433476586,0.7611404265541539,0.6707024444501386,0.5733834502643548,0.4731063706832553,0.3739133727557207,0.2798029242211951,0.19456861535584669,0.12164623942538838,0.06397529592810713,0.023880499429433488,0.0029780703649706086,0.002110585227362627,0.021313012324952807,0.05981130220998493,0.11605358959614842,0.18777274901694363,0.27207778260721777,0.36557035616886746,0.46448178595330447,0.564824954227261,0.6625550299080113,0.7537325156222792,0.8346820487658355,0.9021405552956127,0.9533887841783245,0.9863609203446577,0.999727857652922,0.9929507751306881,0.9663028568372894,0.9208582798199387,0.8584489140587008,0.7815904798246102,0.6933811390464637,0.5973766084662506,0.49744682876905255,0.3976199673525131,0.30192004298049124,0.21420471766792587,0.13800979440341216,0.07640668900197378,0.031878621395890594,0.0062205170893929185,0.00046665374788151803,0.014848969486249142,0.048787713448081305,0.10091481555101128,0.16912903336398016,0.2506806531472055,0.3422823307573675,0.4402416044234169,0.5406097378060356,0.6393408934793621,0.7324552205559584,0.8161992823954637,0.8871973575595755,0.9425875150749881,0.9801369788130415,0.9983321306502329,0.9964395243841551,0.974535450935098,0.9335028630605984,0.8749957835476208,0.8013726315874787,0.7156011549460366,0.6211388001111647,0.521793342694931,0.42156939607568666,0.3245069855136119,0.23451869481456267,0.1552319501558176,0.0898427986102403,0.04098707555359732,0.010634154193701506,7.5601764426558304e-6,0.009535651291632696,0.038834350379214844,0.08672262747178189,0.15127010708870914,0.22987488163271547,0.31936839423240293,0.4161431632056593,0.5162981995733368,0.6157962558459906,0.7106265673885394,0.796966526261468,0.8713357704695905,0.9307364772836899,0.9727742054140126,0.995754414890193,0.9987507739332401,0.9816424993707475,0.945119225404187,0.8906532044680986,0.820439960764389,0.7373097887260225,0.6446136639058295,0.5460881652197582,0.4457048535261706,0.3475101780883366,0.2554623642863117,0.17327185763191078,0.10425175578537671,0.05118425765556617,0.01620851301831705,0.0007343934322776025,0.005385660344845222,0.02997482128089779,0.07351068766062613,0.13423832959119136,0.20970981705512415,0.29688289591978945,0.3922436211401085,0.49194800381193016,0.5919769622871411,0.6882983312736451,0.7770293983364844,0.8545934159578379,0.9178637801567642,0.964290063832605,0.9920008244298013,0.9998790417493639,0.9876071450105599,0.9556798141226088,0.9053840391475882,0.8387472417570787,0.7584555499055512,0.6677455200668926,0.5702736717085238,0.4699690930654732,0.3708750596733362,0.27698605001305376,0.19208672816425953,0.1195993840728738,0.06244598111247268,0.02293037179997187,0.0026454295472064238,0.002408839965917453,0.022230139977356622,0.06131033337911279,0.1180740983659308,0.19023328871969536,0.2748791689373947,0.368599665300139,0.4676169064958555,0.567939509535513,0.6655234723204533,0.7564351872853572,0.8370100050395175,0.9039999563095862,0.9547046775153274,0.9870802623709181,0.9998216517059164,0.9924152403740333,0.9651595806661891,0.9191533476737325,0.8562510517176944,0.7789882830752743,0.6904795023871576,0.5942924968119478,0.4943045625981603,0.3945462113508551,0.2990387001901911,0.2116319349586383,0.13584928059404539,0.07474553436049086,0.03078378703229756,0.005736135754694616,0.0006122508438985985,0.015618675996980136,0.05015050251966652,0.1028157531835256,0.1714914927999327,0.2534094036945598,0.3452673765367248,0.44336261829986356,0.5437409117733073,0.6423560099782225,0.7352327403013713,0.8186272436226647,0.8891778892006053,0.944040781939493,0.9810043997431266,0.9985787399257422,0.9960553811901872,0.9735360400760358,0.9319284707679453,0.8729098735428185,0.7988592868606514,0.7127616883722231,0.6180876705305246,0.5186535410791802,0.41846748776431386,0.3215680083679415,0.2318611189438935,0.15296290238967586,0.0880537442182236,0.039750131281984735,0.009999181241085953,1.5428969601938292e-7,0.010156111001894064,0.040057664968118134,0.08849948515300071,0.15352888276508697,0.23252452410242563,0.322302096461051,0.419242667715845,0.5194385654009432,0.6188508949080769,0.7134723472462917,0.7994887335863565,0.8734327351354534,0.9323236706872678,0.9737876478212946,0.9961532544582653,0.9985189334471767,0.9807893243158621,0.9436791072496507,0.8886841943476145,0.8180214294360382,0.734539227138757,0.641602753341178,0.5429582754215773,0.44258215028894926,0.34452053751640954,0.2527262987306127,0.17089965783962868,0.1023390450821392,0.04980813737110662,0.015424454533482013,0.0005740021287136132,0.0058554015927623215,0.031055759820090123,0.07515925088045472,0.13638806394160263,0.21227406678794242,0.2997582961802673,0.3953142646018294,0.49509011289908117,0.5950638786460243,0.6912056213682682,0.7796398693620581,0.8568018398800424,0.9195811354519889,0.9654471239436684,0.9925509482870432,0.9998000538712198,0.9869022293967994,0.9543773859073712,0.9035365991858867,0.8364292603163346,0.7557604647707725,0.6647819700653566,0.5671611174808037,0.4668330016095372,0.3678418467722347,0.2741779844175127,0.1896170029416392,0.1175675537969002,0.06093394882044484,0.021999087483013657,0.0023324332572741135,0.0027267485771307887,0.02316613860001887,0.06282669192771384,0.120109692458023,0.19270606359865067,0.27768944709783283,0.3716341644862706,0.47075330610697,0.571051381366665,0.6684853768811231,0.7591277302626354,0.8393246500804499,0.905843400119448,0.9560026109114228,0.9877803656843127,0.9998957037862133,0.9918602561833687,0.9639979316060692,0.917431859794261,0.8540391181604201,0.776375066837237,0.6875703421619239,0.5912046607894083,0.49116252138590627,0.39147662056646537,0.29616529497623756,0.20907054222102545,0.1337031500222705,0.07310117643446923,0.029707485786706567,0.005271276871023189,0.000777572774314228,0.01640751461781681,0.05153105976209238,0.10473237881302533,0.17386692767611905,0.25614789408569794,0.3482585339505369,0.4464858692415502,0.5468703580605778,0.6453655036945037,0.7380009688159357,0.8210426197000532,0.8911430490800718,0.9454765100660156,0.9818528219449678,0.9988056563211261,0.9956516447838106,0.9725179254742542,0.9303370181497634,0.8708092343310927,0.7963341377794879,0.7099138181300153,0.6150318767190617,0.5155130026851688,0.41536879982692654,0.31863607893518076,0.22921413403194496,0.15070756190670792,0.08628096089347786,0.038531365975442766,0.009383562357572595,1.2497413959589032e-5,0.01079591858284601,0.04129914637510462,0.09029259629563197,0.15580134336950607,0.23518473132760898,0.32524281740762506,0.42234536198190387,0.5225781634434286,0.6219008395934502,0.716309695365944,0.801999111695046,0.8755149499423692,0.933893788155683,0.9747823765478639,0.9965324969481164,0.9982674024432215,0.9799171590277899,0.9422214646425846,0.8866998319655077,0.8155903368864101,0.7317594017130242,0.6385862497461037,0.5398266888560207,0.4394617149439482,0.3415370380776105,0.24999999999997624,0.16854045686389812,0.10044204120491973,0.0484497987802503,0.014659535830118642,0.00043333717029608865,0.006344660580923145,0.032155220734893464,0.07682459447471068,0.13855216024870315,0.21484968112958336,0.30264160559436065,0.39838904294428046,0.4982324159171208,0.5981470401685767,0.6941053592167963,0.782239295162458,0.8589961708309496,0.9212819181171723,0.9665857998083079,0.9930816173500749,0.9997013248734508,0.9861780821021321,0.9530570106785772,0.9016732203217693,0.8340979905811785,0.7530552776004312,0.6618119114999299,0.5640459105209114,0.46369822018480994,0.3648138538584178,0.27137883834769366,0.1871595372372546,0.11555082885073309,0.05943925877434025,0.021086683262449946,0.0020390938579206708,0.0030642985042400595,0.02412097122287654,0.06436031796257868,0.12216029147047813,0.19519097598399587,0.28050850608809447,0.3746737338706472,0.473890860904972,0.5741604468079815,0.6714406266006131,0.761810038203959,0.8416258924648079,0.9076708139128085,0.957282533100816,0.988461202632137,0.9999500109689011,0.9912858444794843,0.9628179555397739,0.9156938841768798,0.8518132007539853,0.7737509343273317,0.684653773276925,0.5881132223620568,0.48802082923659956,0.3884113162422846,0.29329994083240996,0.20652064062511155,0.13157148745600672,0.0714736801727403,0.02864976017094978,0.004825958799369867,0.0009626130092382779,0.01721545419118431,0.0529293306460491,0.10666461673653116,0.17625524416761745,0.2588960161556574,0.35125568485396597,0.44961123388617596,0.5499979530608139,0.6483692557592288,0.7407597967601417,0.8234453152250882,0.8930927595779522,0.9468946427460914,0.9826822119075642,0.9990128708736363,0.9952283311118091,0.971481147343316,0.9287285680653317,0.8686939488835446,0.7937972840823672,0.7070576567045608,0.6119715393746524,0.512371851558075,0.41227345465557885,0.315711313020805,0.22657784462932212,0.1484660177884492,0.08452451865750782,0.037330827772793895,0.008787321858902353,4.458906170512478e-5,0.011455048763335252,0.04255874556409933,0.09210189007531044,0.158087399144219,0.23785539823533336,0.32819044091934885,0.42545112345351166,0.5257168696928418,0.6249459694352636,0.7191384996778492,0.804497561432468,0.8775823326469834,0.935446767672425,0.9757583523038735,0.9968921273804171,0.9979961908563688,0.9790260379553366,0.940746355156967,0.8847001957002271,0.8131467791388596,0.7289704222466151,0.6355642722665412,0.5366935292144603,0.43634367074220126,0.3385597976143022,0.24728357577799043,0.1661943478885627,0.0985608190815741,0.0471092955346889,0.0139137871210121,0.0003124041130213584,0.006853417984567789,0.03327316059883284,0.078506652665641,0.14073053303494293,0.21743655834818032,0.3055327102770677,0.40146783471978936,0.5013747887513139,0.601226325075979,0.6969974302851012,0.7848275730655226,0.8611763221388203,0.9229660609747724,0.9677060464510853,0.9935928106585076,0.9995828586556577,0.9854347317289462,0.9517187405885005,0.8997939761550207,0.8317535246322038,0.7503400952440786,0.6588354616820873,0.5609281738735107,0.460564872608967,0.3617912005316257,0.2685887223643385,0.18471442811617012,0.1135492888911162,0.05796197001146375,0.020193195176453904,0.0017654229354679973,0.0034214764146867083,0.02509460013187509,0.06591115090850752,0.12422581440866637,0.19768792772664417,0.28333623456089124,0.37771825339611564,0.4770294469626432,0.5772665830573205,0.6743891047524222,0.7644820051634857,0.8439136412979369,0.9094821255104151,0.9585443935290276,0.9891227463226818,0.9999845711089532,0.9906920279505081,0.961619699074038,0.9139394894683042,0.8495733874177118,0.7711159891936096,0.6817299109308196,0.5850183036356341,0.48487961024110315,0.3853504194517522,0.2904427509345388,0.20398233088692802,0.12945437709173496,0.06986310985830996,0.027610651963090205,0.004400199128943516,0.0011673642399491202,0.01804246280507288,0.054345259942571944,0.10861239063446071,0.17865634794051366,0.26165366135906865,0.3542587108654974,0.4527385887879528,0.5531235732401896,0.6513671475299598,0.7435091151656092,0.825835235296041,0.8950269436846376,0.9482951239662799,0.9834925368716427,0.9992003753986983,0.9947854568942358,0.9704257466338532,0.9271031840452522,0.8665641007497906,0.7912488259701149,0.70419331690875,0.6089067793744398,0.5092302117671084,0.4091815745103202,0.3127938261472919,0.22395235486439347,0.14623835857136464,0.08278448688628143,0.0361485640929371,0.008210483295397197,9.642796537445708e-5,0.012133475509021108,0.04383641278343359,0.0939272950285217,0.160386959794537,0.24053641933950598,0.33114485057091464,0.42855982945925175,0.5288545601765129,0.6279861641569019,0.7219586484497975,0.8069839841147919,0.8796348015916685,0.9369825478978688,0.9767155365402258,0.9972321315504724,0.9977053093989291,0.978115996296065,0.9392538370567087,0.8826853645334198,0.8106908527091143,0.7261723988985849,0.6325369402647698,0.5335589202506845,0.43322814084026867,0.33558893372157694,0.24457713335792453,0.16386142358029349,0.09669545301676336,0.04578668058164159,0.013187237861757406,0.00021120773350047362,0.007381653708778968,0.034409535255421064,0.08020535901519293,0.14292309625891897,0.22003459626735572,0.30843149603543674,0.4045505183221332,0.5045171072839969,0.6043016117425861,0.6998817203422699,0.7874046008393626,0.8633422076919638,0.9246334975043964,0.9688078196244196,0.9940845080212377,0.9994446598970205,0.9846722076381202,0.9503626284961798,0.8978989409121592,0.8293959550710791,0.7476150249460307,0.6558527381757456,0.5578080306830705,0.4574330826431915,0.3587740061807231,0.26580774667149354,0.1822817721553457,0.11156301297494264,0.05650214088181743,0.019318658516048526,0.0015114312993894097,0.003798268200652377,0.026086986870585582,0.06747912951064744,0.1263061796884919,0.20019682020181984,0.2861725208265586,0.3807676028101946,0.480168940312004,0.580369667428575,0.6773306948773526,0.7671435256036765,0.8461878062182969,0.9112772633690202,0.9597881423551202,0.9897649706262479,0.9999993828413111,0.9900788300510259,0.9604032095376145,0.9121687449635814,0.8473197666198237,0.7684703355113194,0.6787988706105812,0.58192002685329,0.4817389884712219,0.3822940510942743,0.2875938381361117,0.20145571326485728,0.12735190255111495,0.068269529105423,0.026590202205859337,0.003994014676405977,0.0013918183791640781,0.018888507794238063,0.055778791725314636,0.11057562357357403,0.18107014415597178,0.2644207207742172,0.3572674933713984,0.45586781042267965,0.5562470951429086,0.6543590605959198,0.7462488154396663,0.8282122855156799,0.896945525003553,0.9496778984103513,0.9842837648309599,0.9993681624902528,0.9943230396237679,0.969351765032176,0.9254609302889685,0.8644197740546065,0.7886888641018177,0.7013209118783226,0.6058377177705851,0.5060882074009784,0.4060932815142825,0.3098837335496904,0.22133776843879566,0.14402467224373544,0.08106093430769623,0.03498462163294275,0.00765306945104649,0.00016801207743322166,0.012831172023380744,0.04513209756771769,0.09576873905529237,0.16269993449233483,0.2432276887450635,0.3341059296689489,0.4316713572112356,0.5319911109617224,0.63102130367665,0.7247700302915071,0.8094582815332096,0.8816722757079734,0.938501068171659,0.9776538914499734,0.9975524960287915,0.9973947695601526,0.977187069994816,0.9377439692933949,0.8806554180470663,0.8082226546013955,0.7233654421853549,0.629504373314398,0.5304229857755285,0.43011524829562603,0.33262456374282556,0.24188077963893434,0.1615417760850147,0.09484601668874604,0.044482006161870424,0.012479916749648379,0.0001297520287925069,0.007929346889294031,0.03556429982011322,0.08192064642780406,0.14512976331861466,0.22264369226957814,0.3113378483731814,0.40763697199136956,0.5076592473997652,0.607372778700509,0.7027581154643587,0.7899702766964931,0.865493741942197,0.9262841618455798,0.9698910758104571,0.9945566900171587,0.9992867340561234,0.9838905399478426,0.948988727965328,0.8959881894433177,0.8270253750172953,0.744880174341306,0.6528638587925658,0.5546856041889439,0.4543029739869739,0.35576238997895554,0.2630360211123324,0.1798616654399976,0.10959207955609901,0.05505982904578216,0.018463107823712688,0.0012771289818502285,0.004194658979588595,0.027098092241736982,0.06906419183695495,0.12840130513961578,0.20271755431324712,0.2890172528572619,0.3838216616695766,0.4833092169492956,0.583469577355956,0.6802652807884305,0.7697944943997541,0.8484482974008443,0.9130561565842394,0.9610137304534593,0.9903878501762498,0.9999944455809409,0.9894462750011493,0.9591685349794925,0.9103817206036378,0.8450524273739121,0.765814077778533,0.6758607680863821,0.5788185143909789,0.47859908797534184,0.37924233189033774,0.2847533149635322,0.19894088755519107,0.12526414687783405,0.06669300085747354,0.025588451204998697,0.003607421485244622,0.0016359665613974173,0.019753555741580775,0.05722986937251229,0.11255423801006514,0.18349653747383027,0.26719708510784546,0.360281913530729,0.45899877519208354,0.559368395395883,0.6573448767824777,0.7489787893696367,0.8305763719952379,0.8988484277545424,0.951042911461383,0.985055864533581,0.9995162255210481,0.9938410975649706,0.9682592449584275,0.9238018716623352,0.862261053494759,0.7861174995907976,0.6984405550676309,0.6027644757849334,0.5029459625626811,0.40300869764907993,0.30698115017077965,0.2187341886235058,0.14182504624177955,0.07935392899868993,0.03383904636629209,0.0071151023426013205,0.0002593385704515727,0.013548110748773323,0.04644574873994878,0.09762614942223613,0.1650262318796588,0.24592910015220382,0.337073561256702,0.4347855838102334,0.5351263981609367,0.6340512681124635,0.7275725341588202,0.8119203559578816,0.8836946745196392,0.9400022685152579,0.9785733799699937,0.9978532081615956,0.9970645836057466,0.9762392957423521,0.936216811503807,0.8786104364199522,0.8057422823047657,0.7205496629762992,0.6264666911958587,0.5272858496522397,0.42700511606124053,0.3296668047647813,0.23919462112178885,0.1592354970242424,0.09301258314658845,0.04319532380737895,0.011791851722465108,6.804021624062795e-5,0.008496475893278732,0.036737408682000317,0.08365244715305559,0.14735044705505856,0.2252637433007314,0.3142516524949397,0.41072707381870177,0.5108010849904313,0.6104397046447456,0.7056265020394666,0.7925244992976224,0.8676308399080688,0.9279179888004154,0.9709557722227076,0.9950093379960193,0.999109087370728,0.9830897595324786,0.9475970932623142,0.8940617972193883,0.8246418781040619,0.7421356514511278,0.6498689415875161,0.5515610177210089,0.4511746702733964,0.3527564708792428,0.2602736551645656,0.17745420355953956,0.10763656648268832,0.05363509147181461,0.017626576892001977,0.0010625252373350214,0.00461063309484544,0.02812787630860042,0.0706662752805266,0.1305111080087396,0.205250030496838,0.2918703182917294,0.38688030934494033,0.4864501528396503,0.586566190399171,0.6831927465752811,0.7724348068436626,0.8506950255606207,0.9148187348932233,0.9622211094156796,0.9909913603701697,0.9999697595228547,0.9887943877855593,0.9579157241668682,0.9085784869724871,0.8427714592354201,0.7631473209121611,0.672915719407549,0.5757138887522899,0.4754600327734739,0.3761953823770175,0.2819212936118304,0.19643795308864714,0.1231911925340991,0.06513358738419917,0.024605438527757373,0.003240434825124039,0.0018997991432770367,0.020637572479407562,0.05869843556947618,0.1145481557924456,0.18593543205623508,0.26998264469902067,0.36330185227981865,0.46213135942926753,0.5624873507138888,0.6603244781556558,0.7516989291269165,0.8329274013579886,0.9007355767766883,0.9523901092040439,0.9858088054830569,0.9996445586428768,0.9933396497535987,0.9671482295650029,0.9221260736949077,0.8600880243354281,0.7835348340010371,0.6955523602450544,0.599687174804446,0.4998036013645969,0.39992794474965554,0.304086190657055,0.21614171825490275,0.13963956744636058,0.07766353838255491,0.03271188354093496,0.006596603218704922,0.00037040383720921,0.014284263367542072,0.04777731441355959,0.09949945276529493,0.1673657600723351,0.2486405468603891,0.34004762811845246,0.43790238625058553,0.5382602979364747,0.6370759377867032,0.730366049358394,0.8143701101416188,0.8857019181459982,0.9414860896342296,0.9794739657822804,0.9981342560713529,0.996714764577419,0.9752727109738935,0.9346724240076477,0.8765505004248685,0.8032498337890104,0.7177251724891104,0.6234240138916244,0.5241476357914711,0.4238978669812218,0.3267157736131093,0.23651876390442017,0.15694267749146584,0.09119522480737768,0.041926684339591735,0.011123069957423626,2.6074733338488087e-5,0.009083018320282521,0.03792881550554594,0.08540069278822404,0.149585059755649,0.2278946458739502,0.31717279331133463,0.4138207017510704,0.5139424959594161,0.6135022684378054,0.7084867667719628,0.7950671677561179,0.8697534171784496,0.9295349138358608,0.9720018668077748,0.9954424340791215,0.9989117268575224,0.9822698980212665,0.9461877793540239,0.8921198403291466,0.8222455584747779,0.7393815646786558,0.6468681048538847,0.5484343946942319,0.4480482950644759,0.34975636760942613,0.25752075793606805,0.17505948160398327,0.1056965509935971,0.052227984434325025,0.01680909876227399,0.0008676285422586916,0.005046174116271118,0.029176298396747624,0.07228531656221493,0.13263550496272108,0.2077941487248992,0.2947316044395367,0.3899434250257152,0.48959162392227484,0.5896593842479805,0.6861129766087606,0.7750643586482981,0.852927901956321,0.9165649286775943,0.9634102315527082,0.9915754773705413,0.9999253256421026,0.9881231941525069,0.956644826583329,0.906759115294281,0.8404769522981055,0.7604701702439538,0.669963840897662,0.572606272563833,0.4723219468520709,0.3731533229026642,0.2790978859403851,0.1939470087261717,0.12113312139753174,0.06359135027936669,0.02364120300114997,0.002893069191309272,0.002183305703924998,0.021540523090795016,0.06018443231075554,0.11655729816499044,0.18838673157168845,0.2727772895235138,0.3663271903370232,0.46526543940336895,0.5656038379044348,0.6632977470271111,0.7544091272712339,0.8352652807427663,0.9026068975313476,0.953719438426744,0.9865425579397151,0.9997531567868361,0.9928187159958826,0.9660187627348058,0.9204336025773199,0.8579007724069936,0.7809409693427039,0.6926564414887679,0.5966059363765734,0.49666124792381583,0.3968511444996372,0.30119896935367385,0.21356045973046917,0.13746832217967386,0.07598982922639841,0.03160317767756726,0.0060975925590534,0.00050120349084537,0.01503960080307909,0.04912674199425182,0.10138857509270333,0.1697184266636419,0.251361921772804,0.3430280127844594,0.44102164142455347,0.5413926865055126,0.6400951932309176,0.7331504655518194,0.8168074473239912,0.887693927304763,0.9429524729205032,0.98035561331548,0.9983956286572231,0.9963453262923279,0.974287353867638,0.9331108678052431,0.8744756914251999,0.8007454075009462,0.7148920822856104,0.6203764615814671,0.5210084681466146,0.42079362378591256,0.323771586847739,0.2338533136778801,0.1546634080485494,0.08939401345316228,0.04067613786731983,0.010473597870089002,3.8572376399037545e-6,0.009688951003022472,0.03913847323254377,0.08716531428098029,0.15183351315745552,0.2305362960738026,0.32010115544304674,0.41691773359630935,0.5170833562272185,0.616560349114273,0.7113387966870643,0.7975981816415729,0.8718613899157097,0.9311348730865858,0.9730293182469225,0.995855961160006,0.998694660311858,0.9814309877971092,0.9447608419055611,0.8901623954760731,0.8198365107794447,0.7366180228049031,0.6438614671187691,0.5453058586040764,0.4449239718457176,0.3467621986677957,0.25477743816101844,0.17267759416009554,0.10377210971558876,0.050838563511198476,0.016010705723292606,0.0006924465946687719,0.00550126484083574,0.030243317095586697,0.07392125173313047,0.13477441209209473,0.21034980850962426,0.2976009982854022,0.39301088772490894,0.4927335061154074,0.5927490367273636,0.6890258555455233,0.7776830459514386,0.8551468383936358,0.9182946689662251,0.9645810498965581,0.9921401781058915,0.999861145693737,0.9874327206128457,0.9553558924267619,0.9049236774305908,0.8381689971904815,0.7577827315160518,0.6670052491502263,0.5694957885703387,0.4691849541593013,0.37011627362270216,0.27628320346819774,0.1914681528552606,0.11909001475789605,0.062066350458282515,0.0226957827105852,0.0025653383040530886,0.002486475045394121,0.022462371910969114,0.06168780090234638,0.11858158577052635,0.1908503391986781,0.2755809091983985,0.3693578082074367,0.46840089132427637,0.5687177338724034,0.6662645659586217,0.7571092767551393,0.8375899178080588,0.9044623161049614,0.9550308466235196,0.9872570929217883,0.9998420156635124,0.9922783168676539,0.9648708890795963,0.9187245251589453,0.8556993841015673,0.7783360080683057,0.6897529131817126,0.5935208822041212,0.4935190263572354,0.39377841842669775,0.29831960030014987,0.21099051500474914,0.1353113962015996,0.07433286763850255,0.03051297256795088,0.005618090073578441,0.0006517323650385154,0.015814093221053593,0.050493978182312715,0.10329344178774025,0.17208413872778844,0.2540931174006369,0.3460145975353871,0.444143226127746,0.5445234401446898,0.6431089151903426,0.7359256727602812,0.8192322712350155,0.8896706233155247,0.9444013604548223,0.9812182877462163,0.9986373155955028,0.9959562833425524,0.9732832633432547,0.9315322045749943,0.8723860913718984,0.7982291023604884,0.7120505042672417,0.617324154637657,0.5178684707086215,0.4176925090867607,0.32083436075826,0.23119837572230928,0.15239777872211463,0.0876090202282821,0.03944373378466748,0.009843461113331897,1.3886066930757224e-6,0.010314250008360282,0.04036633408389151,0.08894624193227574,0.15409571845111025,0.2331885895602031,0.3230366232254224,0.4200180470277488,0.5202235417360322,0.6196138258861393,0.7141824791350929,0.800117440983823,0.87395467485907,0.9327178033573733,0.974038085957895,0.9962499029051737,0.9984578963074446,0.9805730619953572,0.9433163372781235,0.8881895399753207,0.8174148301706676,0.733845134984441,0.6408491471386129,0.5421755330215114,0.44180182402174695,0.34377408231808426,0.2520438041951052,0.170308635307877,0.10186331866038045,0.0494668835818311,0.015231429310013311,0.0005369863139040865,0.005975887293349247,0.0313288902599379,0.07557401617705084,0.13692774491427268,0.2129169089075214,0.30047838649390923,0.39608257628366383,0.4958756753207072,0.5958350258021771,0.6919312683325773,0.7802907653200835,0.8573517472289787,0.9200078874376802,0.9657335182022271,0.992685440271661,0.9997772222127406,0.9867229944389111,0.9540489726076015,0.9030722458776704,0.8358476850721961,0.7550851108770508,0.6640400610237466,0.5663825596298099,0.4660491786003232,0.367084354494553,0.2734773573696929,0.18900148338580253,0.11706195331388797,0.060558648155497,0.021769214998340336,0.0022572551080812797,0.00280929519309131,0.023403082528713537,0.06320848196417139,0.12062093865359891,0.19332615762954586,0.27839339298625976,0.37239358618761065,0.4715375913478592,0.5718289156249123,0.6692248177665112,0.7597992709280845,0.8399012207352289,0.9063017592121774,0.9563242819963491,0.9879523822065113,0.9999111317631562,0.991718473713615,0.9637046539381071,0.916998908944952,0.8534839463697794,0.7757200530687862,0.6868418900075486,0.5904321341406644,0.49037706077637355,0.3907098878974765,0.2954481972260047,0.20843198558550802,0.13316887470643513,0.07269271906556235,0.02944131127298477,0.005158114701702909,0.000821984514186358,0.01660771003055206,0.05187896897460054,0.10521397761201873,0.1744628028238412,0.25683402586688164,0.3490072644070633,0.44726701706376026,0.5476524351955615,0.6461169846289397,0.7386915613683992,0.8216444860988258,0.8916319281027116,0.9458326950090301,0.9820619550005614,0.9988593073400334,0.995547651094538,0.9722604790603264,0.9299364966709094,0.8702817828000209,0.7957010177567433,0.7092005506708526,0.6142672136204287,0.5147277675010474,0.41459464537170054,0.3179042113593289,0.22855405490248965,0.15014587900014814,0.08584031563636407,0.03822952076915148,0.009232684576315486,1.8668938003507662e-5,0.010958890638191776,0.04161234956149917,0.09074340539900178,0.15637158628391068,0.23585142157282052,0.32597908071330767,0.42312151958910293,0.5233629284547595,0.6226625781470739,0.7170177017962338,0.8026248462771225,0.8760331893278901,0.9342836421255323,0.9750281300963497,0.9966242437546936,0.9982014441959912,0.9796961545023473,0.9418543225268566,0.8862013517508027,0.8149806123000259,0.7310630107408378,0.63783126389397,0.5390435415883569,0.4386819749113785,0.34079213658495994,0.24931996401149614,0.16795269861641648,0.0999702532214315,0.04811299882493325,0.014471300302309031,0.00040125384033778966,0.006470022727174951,0.03243297501181441,0.07724354461296967,0.13909541837672418,0.21549534852321817,0.3033636554139839,0.39915836937637555,0.49901800742872426,0.5989172295817514,0.6948291002118813,0.7828874137545855,0.8595425413727849,0.9217045164232293,0.9668675909494204,0.9932112423310462,0.9996735585139209,0.9859940436634919,0.9527241187465885,0.9012048937634276,0.8335131076305985,0.7523774148775164,0.6610683936372711,0.56326670870867,0.4629147440321068,0.36405768527317184,0.2706804584702759,0.18654709774634837,0.11504901716994786,0.059068302922286264,0.020861536462001284,0.0019688317720745196,0.003151753396261725,0.02436261778782567,0.06474641543229004,0.12267527626381475,0.1958140890743305,0.2812146297994149,0.3754344043703378,0.4746754155805759,0.5749372602764548,0.6721783855268131,0.7624790035404905,0.8421990982323962,0.908125154198609,0.9575996934570781,0.9886283983313622,0.9999605023558145,0.9911392086464901,0.962520103374334,0.9152568220937879,0.8512545467169457,0.7730932076691786,0.6839234869460737,0.5873398141856798,0.4872354752826375,0.38764567411278616,0.292584873545963,0.20588497252972088,0.13104084231968366,0.07106944829019307,0.028388236121203392,0.004717684611540929,0.0010119532136662612,0.01742041988522708,0.0532816596667271,0.10715010670814984,0.1768543249992443,0.25958453891109123,0.35200589519486686,0.45039289084888195,0.5507795480689743,0.6491192827338795,0.7414480221290608,0.8240439966376778,0.8935777641985696,0.9472464200482242,0.9828865817553316,0.9990615951225772,0.9951194456884564,0.9712190414168592,0.9283238071204001,0.868162848825581,0.7931612535440833,0.7063423340640085,0.6112057592728878,0.5115864825756656,0.41150015500020315,0.31498125438603397,0.22592045566394292,0.14790779782822105,0.08408796953785924,0.03703354677984294,0.008641292383501809,5.56975490312861e-5,0.011622847430490468,0.04287647045020482,0.09255673369666922,0.15866102676359284,0.23852468693502493,0.328928411685416,0.4262280286993063,0.5265013923836827,0.6257064854772455,0.7198443526847651,0.8051202984838912,0.8780968512249343,0.9358323275435381,0.9759994115574535,0.9969789689228579,0.9979253141068467,0.9788002999542168,0.9403748553984432,0.8841979093321175,0.8125339533144726,0.7282717599624813,0.634807936585351,0.535910008012061,0.4355645477424626,0.3378164792495789,0.24660602519647512,0.16560987714058273,0.09809298817110546,0.04677696271626641,0.013730348723822006,0.0002852545351407776,0.006983651624935527,0.03355552774203885,0.07892977109782551,0.14127734686072585,0.21808502551332498,0.30625669108317616,0.4022381455153191,0.5021603783235175,0.6019955263252637,0.6977192367246676,0.7854728886922946,0.8617191342930315,0.9233844889093625,0.967983223344556,0.9937175635159096,0.9995501586917955,0.9852458970786969,0.9513813831728215,0.8993216948445325,0.8311653570768665,0.7496597504662644,0.6580903643659275,0.5601483588768488,0.459781774258486,0.36103638550598816,0.26789261724195496,0.18410509288039484,0.1130512858330604,0.05759537362427691,0.019972782953085855,0.001700079688187639,0.0035138361284671737,0.025340939788514316,0.06630154056143744,0.12474451745891413,0.19831403526463082,0.2840445082046068,0.3784801426491674,0.47781424008470785,0.5780426450535834,0.6751251525793533,0.7651483687482354,0.8444834595378337,0.9099324290437383,0.9588570306294832,0.9892851145950321,0.9999901254914476,0.9905405445461006,0.9613172841756953,0.9134983334144273,0.8490112731999688,0.7704555756247599,0.6809978192684198,0.5842440444797266,0.4840943939625923,0.384585898103048,0.2897297423556299,0.20334957643935014,0.1289273830943254,0.06946311942845801,0.027353788706986515,0.004296817199207825,0.0012216309600879827,0.018252190684680536,0.05470199485511673,0.10910175260277033,0.17925861079357308,0.26234454789345724,0.35501037145893893,0.453520724017298,0.5539046552500039,0.6521156909202886,0.7441949461675343,0.8264307080757088,0.8955080547464331,0.9486424797329938,0.9836921354393471,0.9992441709531676,0.9946716840375556,0.9701589915475741,0.9266941996215046,0.8660293731424206,0.7906099100381558,0.7034759673404911,0.6081399125164629,0.5084447400069986,0.408409160198723,0.3120656052895356,0.2232976820285193,0.14568362360609993,0.08235205114696148,0.03585585905536248,0.008069307893741384,0.00011247297722155603,0.012306094160280723,0.04415864681971843,0.09438615520237414,0.16096394946167536,0.24120828005808953,0.33188449964902533,0.429337451657412,0.529638809559646,0.6287454276483535,0.7226623201535334,0.8076036990387174,0.8801455790396515,0.9373637984413336,0.9769518919775162,0.9973140643987,0.9976295169466167,0.9778855337354428,0.9388779943289265,0.8821792918512665,0.8100749498520956,0.7254714928983912,0.6317792846281861,0.5327750560610403,0.4324496656472443,0.3348472278443947,0.2439020949453884,0.1632802634173034,0.09623159765768147,0.045458828026606835,0.013008603840642341,0.00018899298005481402,0.007516753699280787,0.034696504111985216,0.08063262902901785,0.14347344418435282,0.22068583759073812,0.3091573792321595,0.405321783055224,0.5053026638876706,0.6050697944460435,0.7006015637162781,0.7880470880120805,0.8638814400184593,0.9250477385404992,0.9690803713223464,0.9942043838275596,0.999407027620413,0.9844785842348869,0.9500208189217648,0.8974227235036395,0.8288045261424891,0.746932224985648,0.655106090836018,0.5570276333031474,0.456650393025778,0.3580205745283491,0.26511394379897835,0.18167556524233303,0.11106883820975844,0.056139918439361225,0.019102989575595086,0.0014510094715952104,0.00389552908815044,0.02633800988900087,0.06787379592714421,0.12682858050786278,0.2008258974575322,0.2868829164271498,0.3815306807234797,0.4809539408826871,0.5811449472995917,0.6780650025326793,0.7678072611166411,0.8467542144238017,0.9117235123637619,0.9600962438511728,0.9899225050584957,1.0],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],74:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var EPS = require( '@stdlib/constants/float64/eps' );
var havercos = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof havercos, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the half-value versed cosine (for -256*pi < x < 0 )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed cosine (for 0 < x < 256*pi )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed cosine (for -2**60 (pi/2) < x < -2**20 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed cosine (for 2**20 (pi/2) < x < 2**60 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed cosine (for x <= -2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed cosine (for x >= 2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = havercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = havercos( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = havercos( PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = havercos( NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/havercos/test/test.js")
},{"./../lib":67,"./fixtures/julia/huge_negative.json":68,"./fixtures/julia/huge_positive.json":69,"./fixtures/julia/large_negative.json":70,"./fixtures/julia/large_positive.json":71,"./fixtures/julia/medium_negative.json":72,"./fixtures/julia/medium_positive.json":73,"@stdlib/constants/float64/eps":42,"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/abs":58,"tape":217}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":76}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var polyval13 = require( './polyval_c13.js' );
var polyval46 = require( './polyval_c46.js' );


// MAIN //

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

module.exports = kernelCos;

},{"./polyval_c13.js":77,"./polyval_c46.js":78}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":80}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
}


// EXPORTS //

module.exports = kernelSin;

},{}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":82}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/number/float64/base/normalize' );
var floatExp = require( '@stdlib/number/float64/base/exponent' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	normalize( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	toWords( WORDS, frac );
	high = WORDS[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/constants/float64/exponent-bias":43,"@stdlib/constants/float64/max-base2-exponent":46,"@stdlib/constants/float64/max-base2-exponent-subnormal":45,"@stdlib/constants/float64/min-base2-exponent-subnormal":47,"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49,"@stdlib/math/base/assert/is-infinite":54,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/copysign":61,"@stdlib/number/float64/base/exponent":91,"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/normalize":102,"@stdlib/number/float64/base/to-words":105}],83:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":85}],84:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zeros( 20 );
var Q = zeros( 20 );
var FQ = zeros( 20 );
var IQ = zeros( 20 );


// FUNCTIONS //

/**
* Returns an array of zeros.
*
* @private
* @param {NonNegativeInteger} len - array length
* @returns {NonNegativeIntegerArray} output array
*/
function zeros( len ) {
	var out;
	var i;

	out = [];
	for ( i = 0; i < len; i++ ) {
		out.push( 0.0 );
	}
	return out;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":64,"@stdlib/math/base/special/ldexp":81}],85:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = [ 0.0, 0.0, 0.0 ]; // WARNING: not thread safe
var TY = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = (hx & ABS_MASK)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":84,"./rempio2_medium.js":86,"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/get-high-word":97,"@stdlib/number/float64/base/get-low-word":99}],86:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":87,"@stdlib/number/float64/base/get-high-word":97}],87:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":88}],88:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = round;

},{}],89:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var Number = require( './number.js' );


// EXPORTS //

module.exports = Number;

},{"./number.js":90}],90:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],91:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './main.js' );


// EXPORTS //

module.exports = exponent;

},{"./main.js":92}],92:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var EXP_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return (high - BIAS)|0; // asm type annotation
}


// EXPORTS //

module.exports = exponent;

},{"@stdlib/constants/float64/exponent-bias":43,"@stdlib/constants/float64/high-word-exponent-mask":44,"@stdlib/number/float64/base/get-high-word":97}],93:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var fromWords = require( './main.js' );


// EXPORTS //

module.exports = fromWords;

},{"./main.js":95}],94:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":34}],95:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":94,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],96:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":34}],97:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './main.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./main.js":98}],98:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":96,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],99:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './main.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./main.js":101}],100:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":34}],101:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
}


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":100,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],102:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var normalize = require( './main.js' );


// EXPORTS //

module.exports = normalize;

},{"./main.js":103}],103:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './normalize.js' );


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":104}],104:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

module.exports = normalize;

},{"@stdlib/constants/float64/smallest-normal":50,"@stdlib/math/base/assert/is-infinite":54,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/abs":58}],105:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var toWords = require( './main.js' );


// EXPORTS //

module.exports = toWords;

},{"./main.js":107}],106:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":34,"dup":94}],107:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './to_words.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":108}],108:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ 0 ] = UINT32_VIEW[ HIGH ];
	out[ 1 ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":106,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],109:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":110,"./polyfill.js":111,"@stdlib/assert/has-tostringtag-support":20}],110:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":112}],111:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":112,"./tostringtag.js":113,"@stdlib/assert/has-own-property":16}],112:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],113:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],114:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],115:[function(require,module,exports){

},{}],116:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"dup":115}],117:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],118:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":209}],119:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":117,"inherits":204,"readable-stream/lib/_stream_duplex.js":121,"readable-stream/lib/_stream_passthrough.js":122,"readable-stream/lib/_stream_readable.js":123,"readable-stream/lib/_stream_transform.js":124,"readable-stream/lib/_stream_writable.js":125,"readable-stream/lib/internal/streams/end-of-stream.js":129,"readable-stream/lib/internal/streams/pipeline.js":131}],120:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],121:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":123,"./_stream_writable":125,"_process":209,"inherits":204}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":124,"inherits":204}],123:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":120,"./_stream_duplex":121,"./internal/streams/async_iterator":126,"./internal/streams/buffer_list":127,"./internal/streams/destroy":128,"./internal/streams/from":130,"./internal/streams/state":132,"./internal/streams/stream":133,"_process":209,"buffer":134,"events":117,"inherits":204,"string_decoder/":216,"util":115}],124:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":120,"./_stream_duplex":121,"inherits":204}],125:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":120,"./_stream_duplex":121,"./internal/streams/destroy":128,"./internal/streams/state":132,"./internal/streams/stream":133,"_process":209,"buffer":134,"inherits":204,"util-deprecate":225}],126:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":129,"_process":209}],127:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":134,"util":115}],128:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":209}],129:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":120}],130:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],131:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":120,"./end-of-stream":129}],132:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":120}],133:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":117}],134:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":114,"buffer":134,"ieee754":203}],135:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":136,"get-intrinsic":199}],136:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":198,"get-intrinsic":199}],137:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":138,"./lib/keys.js":139}],138:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],139:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],140:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"object-keys":207}],141:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],142:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":172,"./ToPrimitive":174,"./Type":179}],143:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = GetIntrinsic('%TypeError%');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (Type(LeftFirst) !== 'Boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = Type(px) === 'String' && Type(py) === 'String';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/isPrefixOf":190,"./ToNumber":172,"./ToPrimitive":174,"./Type":179,"get-intrinsic":199}],144:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

},{"get-intrinsic":199}],145:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":148,"./InLeapYear":152,"./MonthFromTime":162,"get-intrinsic":199}],146:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":194,"./floor":183}],147:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":183}],148:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":146,"./DayFromYear":147,"./YearFromTime":181}],149:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":184}],150:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else {
		throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
	}
};

},{"../helpers/assertRecord":187,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179,"get-intrinsic":199}],151:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],152:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":149,"./YearFromTime":181,"get-intrinsic":199}],153:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":187,"./Type":179,"has":202}],154:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":205}],155:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":187,"./Type":179,"has":202}],156:[function(require,module,exports){
'use strict';

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"../helpers/assertRecord":187,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179}],157:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor({
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor,
		Type: Type
	}, Desc);
};

},{"../helpers/isPropertyDescriptor":191,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179}],158:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":188,"../helpers/timeConstants":194}],159:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":188,"./DateFromTime":145,"./Day":146,"./MonthFromTime":162,"./ToInteger":171,"./YearFromTime":181,"./floor":183,"./modulo":184,"get-intrinsic":199}],160:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":188,"../helpers/timeConstants":194,"./ToInteger":171}],161:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],162:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":148,"./InLeapYear":152}],163:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":189}],164:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],165:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":179}],166:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":188,"./ToNumber":172,"./abs":182,"get-intrinsic":199}],167:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":194,"./DayFromYear":147}],168:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":194,"./modulo":184}],169:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],170:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":172}],171:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/sign":193,"./ToNumber":172,"./abs":182,"./floor":183}],172:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":174}],173:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Object = GetIntrinsic('%Object%');

var CheckObjectCoercible = require('./CheckObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = function ToObject(value) {
	CheckObjectCoercible(value);
	return $Object(value);
};

},{"./CheckObjectCoercible":144,"get-intrinsic":199}],174:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":195}],175:[function(require,module,exports){
'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (has(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (has(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (has(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (has(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (has(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (has(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":154,"./ToBoolean":169,"./Type":179,"get-intrinsic":199,"has":202}],176:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":199}],177:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/sign":193,"./ToNumber":172,"./abs":182,"./floor":183,"./modulo":184}],178:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":172}],179:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],180:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":146,"./modulo":184}],181:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":135,"get-intrinsic":199}],182:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":199}],183:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],184:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":192}],185:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":194,"./modulo":184}],186:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":142,"./5/AbstractRelationalComparison":143,"./5/CheckObjectCoercible":144,"./5/DateFromTime":145,"./5/Day":146,"./5/DayFromYear":147,"./5/DayWithinYear":148,"./5/DaysInYear":149,"./5/FromPropertyDescriptor":150,"./5/HourFromTime":151,"./5/InLeapYear":152,"./5/IsAccessorDescriptor":153,"./5/IsCallable":154,"./5/IsDataDescriptor":155,"./5/IsGenericDescriptor":156,"./5/IsPropertyDescriptor":157,"./5/MakeDate":158,"./5/MakeDay":159,"./5/MakeTime":160,"./5/MinFromTime":161,"./5/MonthFromTime":162,"./5/SameValue":163,"./5/SecFromTime":164,"./5/StrictEqualityComparison":165,"./5/TimeClip":166,"./5/TimeFromYear":167,"./5/TimeWithinDay":168,"./5/ToBoolean":169,"./5/ToInt32":170,"./5/ToInteger":171,"./5/ToNumber":172,"./5/ToObject":173,"./5/ToPrimitive":174,"./5/ToPropertyDescriptor":175,"./5/ToString":176,"./5/ToUint16":177,"./5/ToUint32":178,"./5/Type":179,"./5/WeekDay":180,"./5/YearFromTime":181,"./5/abs":182,"./5/floor":183,"./5/modulo":184,"./5/msFromTime":185}],187:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
	'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
		if (Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	}
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
	var predicate = predicates[recordType];
	if (typeof predicate !== 'function') {
		throw new $SyntaxError('unknown record type: ' + recordType);
	}
	if (!predicate(Type, value)) {
		throw new $TypeError(argumentName + ' must be a ' + recordType);
	}
};

},{"get-intrinsic":199,"has":202}],188:[function(require,module,exports){
'use strict';

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],189:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],190:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":135}],191:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var has = require('has');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
	if (ES.Type(Desc) !== 'Object') {
		return false;
	}
	var allowed = {
		'[[Configurable]]': true,
		'[[Enumerable]]': true,
		'[[Get]]': true,
		'[[Set]]': true,
		'[[Value]]': true,
		'[[Writable]]': true
	};

	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
		if (has(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"get-intrinsic":199,"has":202}],192:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],193:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],194:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],195:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":196,"is-callable":205}],196:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],197:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],198:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":197}],199:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":198,"has":202,"has-symbols":200}],200:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":201}],201:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],202:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":198}],203:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],204:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],205:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};

},{}],206:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":208}],207:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":206,"./isArguments":208}],208:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],209:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],210:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"through":223,"timers":224}],211:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":134}],212:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":186,"function-bind":198}],213:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":212,"./polyfill":214,"./shim":215,"define-properties":140,"function-bind":198}],214:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":212}],215:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":214,"define-properties":140}],216:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":211}],217:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":218,"./lib/results":220,"./lib/test":221,"_process":209,"defined":141,"through":223,"timers":224}],218:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":209,"fs":116,"through":223}],219:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"timers":224}],220:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"events":117,"function-bind":198,"has":202,"inherits":204,"object-inspect":222,"resumer":210,"through":223,"timers":224}],221:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":219,"deep-equal":137,"defined":141,"events":117,"has":202,"inherits":204,"path":118,"string.prototype.trim":213}],222:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],223:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":209,"stream":119}],224:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":209,"timers":224}],225:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[74]);
